package pa0p;
import corpcom2.XP0CW01;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XP0C100;
import corpcom3.XP0C140;
import corpcom3.XPPA001;
import corpcom3.XPPA020;
import corpcom3.XPPA100;
import corpcom3.XPTA0P;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom4.XSPAS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XX1;
import corpcom7.XX2;
import corpcom7.XX3;
import corpcom7.XX4;
import corpcom7.XX5;
import corpcom7.XX6;
import corpcom7.XX7;
import corpcom7.XX8;
import corpcom7.XX9;
import corpcom7.XXXMODID;
import corpcom7.XXXMSGNO;
import corpcom7.ZZ-CHNG-USER-ID;
import corpcom7.ZZZSTM;
import fb.common.FB-LATE-BK-FL;
import fb.common.FB-LATE-BK-FL-MDT;
import fb.common.FB4RGPCT;
import fb.common.FB9REC;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import fy.common.FYBDXCC;
import fy.common.FYBREC;
import op.common.OP-MSC-SZ-RTO;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP1REC;
import op.common.OP2TONOQ;
import op.common.OP3ONOQT;
import pa.common.*;
import pc.common.PC-REL-PLN-REF-NBR;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pc.common.PC2REC;
import pc.common.PC3POIDT;
import pc.common.PC3PONBR;
import pc.common.PC6ETSDT;
import pc.common.PC6ITMNB;
import pc.common.PC6RTADT;
import pg.common.PG2REC;
import pg.common.PG3REC;
import pg.common.PG6REC;
import pt.common.PT3YYMM;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARREC;
import vv.common.VCMPPG01;
import vv.common.VPAWRK02;
import vv.common.VPAWRK03;
import vv.common.VPOITM05;
import xx.common.*;
import xx.common.XCTCD;
import xx.common.XGPCD;
import xx.common.XQACD;
import xx.common.XWHCD;
import xx.common.ZZ-CHNG-CNT;
import xx.common.ZZ-CHNG-DT;
import xx.common.ZZ-CHNG-HHMM;
import xx.common.ZZZCHGCT;
import xx.common.ZZZCHGDT;
import xx.common.ZZZCHGTM;
import xx.common.ZZZSDT;
import xx02.*;
import xx02.CAUSERID;
import xx02.XCTTBL;
import xx02.XDMCD;
import xx02.XDSCD;
import xx02.XFRCD;
import xx04.*;
import xx04.XPGCD;
import xx06.*;
import xx06.XUMCD;
import xx06.XWHTBL;
import xx07.*;
import xx07.YESDESC;
import xx07.YESTBL;
import xx07.YETDESC;
import xx07.YETTBL;
import xx08.*;
import xx08.SY1STNBR;
import xx08.YMTCD;
import xx08.YMTTBL;
import xx09.*;
import xx09.PC-XCT-ORIG-CD;
import xx09.YSMSUMCD;
import xx10.*;
//*** PROGRAM=PA0P ****
// This program allows users to create OA items by adjusting
// selected PO ITEMS and or creating new OA ITEMS.
// The user may enter the program via PAOK or from the OA
// system menu. Once the OA header is obtained and validated
// the user may adjust selected PO ITEMS at the size level.
// Once all the adjustments have been made and passed all edits
// the user accepts OA by pressing PF9. After the updates have
// been made the user may request another OA for procssing
// or return to the main system menu. Inaddition
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 12/13/89   rsamue   New application.
// 07/09/90   SCOCHR   ADDED CHECK IN MODE OF TRANSPORTATION
// 08/02/90   SCOCHR   ADD CUST XREF CHECK IN FROM/TO LOGIC
// 10/16/90   msmit2   Add logic to call TA0230 to determine
//                     if user is running from the production
//                     or test region.  This logic allows the
//                     correct jcl to be submitted for PA2051
//                     and PA3001.
// 11/08/90  rsamue    req #109 bts map2 to  map 1
//                     #33 reduce fcty qty"s for fcty trans typ
// 12/07/90  rsamue    po req # modified mode of trans edits
//                     to include cnty frgn/doe
// 12/10/90  rsamue    added pfkeys for nil to trans to pa0l
//                     and pa0k
// 01/04/91  rsamue    fixed pgm bug allow transfer to pa0s
//                     even if manual adj has used or items
//                     have been modified..
// 01/16/91  rsamue    fixed pgm bug set ets to zero
//                     and changed iomod check dups update
//                     using ets..
// 01/21/91  rsamue    size run request status code changes
// 02/04/91  rsamue    chged pf13 to trans bts instead of
//                     on order qty. also chged attrib in map4
// 02/05/91  rsamue    chged pf13 added sales order and fcty
//                     trans 2.
// 03/18/91  msmit2    changed logic so that when PF18 is hit
//                     the oa number is carried along to pa0k.
// 03/18/91  msmit2    change tables to call pa4000 instead of
//                     pa300d - pa#212
// 03/19/91  msmit2    allow read only access for pf15/pf17
//                     when oa status = '15'.
// 03/21/91  rsamue    OA Req 222 mod of trans qtys
// 04/24/91  MSMIT2    allow read only access for pf15/pf17
//                     for all oa status codes after calc and
//                     factory split run - PA#225.
// 05/16/91  rsamue    OA Req ### fix mtd edits
// 06/10/91  MSMIT2    DATABASE CHANGES: PACRECR1
// 07/11/91  DHALES    temporary fix to allow balance to ship
//                     go negative in map2.  Additional changes
//                     required.
// 07/18/91  DHALES    completed the above fix so that when
//                     balance to ship goes negative on SEs
//                     that the on order quantity can't go
//                     negative.
// 07/23/91  DHALES    the above fixed only 'from' item balance
//                     to ship on SE order adjustments.  this
//                     change was to the 'to' bts.
// 07/24/91  MSMIT2    the above fix worked for SE types but
//                     caused a problem with other types.  when
//                     a factory 'from' record is selected the
//                     check should not be done.
// 07/25/91  MSMIT2    Add trade restriction logic (pop-up and
//                     edit).
// 08/06/91  MSMIT2    PA0P251 output incorrect negative on
//                     order quantity when a from sales order
//                     was entered on PA0P.
// 09/30/91  MSMIT2    Allow option to print the O/A item
//                     report or to send the report to BUNDL.
//                     PF9: PRINTS TO BUNDL THEN REMOTE
//                     PF10: PRINTS TO BUNDL VIEW ONLY
// 09/30/91  DHALES    protect the 'to' warehouse/customer when
//                     the type is a mode change.
// 10/02/91  MSMIT2    KERRY HAS BUNDL PROBLEMS - PULL OUT
//                     REMOTE PRINT TO BUNDL.
// 10/03/91  MSMIT2    BUNDL NEEDS USERID PRINTED ON EVERY PAGE
//                     OF REPORT.
// 10/08/91  dhales    database changes pa0ps13 for pacrec
// 11/14/91  dhales    FIX SO SALES ORDER IS NOT LOST IN
//                     FROM TO PROCESS PA0P265
// 11/21/91  dhales    allow SALES ORDER to be zero if all
//                     other means have been exhausted
//                     possibly a temporary fix (pa0p265)
// 12/05/91  MSMIT2    BUNDL VIEW (PF10) WAS NOT PUTTING IN
//                     THE USER ID.
//  1/06/92  dhales    changes for front-end rewrite - add
//                     nil overrun etc.
//  2/11/92  dhales    INITIAL CHANGES TO PASS THE LATE BOOK
//                     FLAGE AND DATE --- MORE CHANGES TO COME
//  2/17/92  dhales    pa261--dont blank out ets for diversions
//                     also allow status 80 to process
// 04/25/92  MSMIT2    PA226 - LET O/A'S PROCESS IF BTS HAS
//                     CHANGED BUT THERE IS ENOUGH TO COVER.
//                     PA0P MUST USE/UPDATE THE FROM PO NBR
//                     FIELDS SO THAT PA111D CAN DO THIS.
// 08/13/92  dhales    Ship Errors not passing sales order fix
// 08/19/92  dhales    PA276 ALLOWING INDIRECT DIRECT
// 09/17/92  MSMIT2    PA277 - WHEN CALC SUBMITTED, ALLOW
//                     PF17 TO TRANSFER TO THE ADJUSTMENT TO
//                     THE CALC.
// 10/01/92  dhales    prod problem dropping sales order num
//                     on dom size run and bad cursor position
// 10/09/92  dhales    prod problem putting direct ship code
//                     on warehouse records
// 10/14/92  dhales    prod problem putting sales order
//                     on warehouse records
// 11/09/92  DFRANC    Corrected SO NIKE ID map field to askip
//                     when 00.
// 11/11/92  DFRANC    Changed sort order of pawrk recs to be
//                     the same as PA0Q, IO4950 ADD S2,N2,C2.
// 11/30/92  DFRANC    Change the CALC/PA0P to use the rounding
//                     amount from the DPRODC.VSYCLR01 table.
// 12/07/92  MSMIT2    PA307: INCLUDE OTHER O/AS IN THE BOTTOM
//                     LINE FINGURES.
//                     PA261: DON'T BLANK ETS WHEN PROCESSING
//                     ONLY A "FROM" ITEM.
// 02/09/93  MSMIT2    THE EDIT TO CHECK THE PF19 AND PF18 KEY
//                     HITS SHOULD OCCUR IN PA0P130 (NOT
//                     PA0P160).
// 02/15/93  MSMIT2    IF A BOTTOM LINE IS SELECTED BUT THERE
//                     ARE NO OTHER O/AS TO INCLUDE, SAVE THE
//                     BOTTOM LINE RECORD (PA5REC).
// 02/22/93  MSMIT2    PA323: REQUIRE BOTTOM LINE SELECTION FOR
//                     DOMESTIC WAREHOUSE O/AS WHEN PF9/PF10
//                     HIT.
// 02/24/93  dhales    PA308: require sales order on direct
//                     ship except for cust xref misc1-7
// 03/05/93  MSMIT2    MODE OF TRANSPROTATION CHECK NOT WORKING
//                     CORRECTLY.
// 03/15/93  dhales    prod problem need to allow certain
//                     types without sales orders.
// 03/29/93  dhales    pa327 allow calc on nil to dom diversion
// 04/02/93  MSMIT2    PA0331: DON'T ALLOW STATUS '80' TO
//                     PROCESS.  MUST USE STATUS '01' TO
//                     REWORK THE O/A.
// 04/15/93  MSMIT2    PRODUCTION PROBLEM - WHEN PF16 HIT
//                     TWICE, TWO TYPE '3' WORK RECORDS ARE
//                     CREATED.
// 04/30/93  MSMIT2    PA0330 - OVERRUN TYPES MUST HAVE POID
//                     FY0605.
// 05/04/93  MSMIT2    WHEN THE MESSAGE STATING THAT THE BOTTOM
//                     LINE MUST BE SELECTED IS DISPLAYED,
//                     CLEAR OUT THE SELECTION FIELDS.
// 05/11/93  MSMIT2    AN ERROR EXISTS WHEN ITEMS WITH RTA
//                     DATES = 20TH OF THE MONTH HAV BEEN
//                     SELECTED FROM PA0Q BUT ARE NOT TAKEN
//                     INTO THE CALC.  THIS CAUSES 'DUPLICATE'
//                     ITEMS.
// 05/18/93  MSMIT2    PA0326: GET THE O/AS THAT HAVE UPDATED
//                     P.O. TODAY.
// 05/21/93  MSMIT2    ON MANUAL SCREEN, ALLOW THE 'TO' WHSE TO
//                     BE CHANGED.
// 06/04/93  MSMIT2    STANDARDIZE PF KEYS.
// 06/28/93  MSMIT2    ADD PF5 TO TRANSFER TO PA0A.
// 07/13/93  pkhan     pa0337: add security for inquiry only
// 07/21/93  MSMIT2    ALLOW RTA DATE TO BE CHANGED FOR DM.
// 08/09/93  MSMIT2    DATABASE CHANGES.
// 08/24/93  MSMIT2    ADD MISC1/MISC2 PROCESSING.
//           MSMIT2    CSPV4.1 SET MAP PAGE.  THIS RESETS THE
//                     MAP ATTRIBUTES TO NORMAL AFTER A POPUP.
// 09/24/93  MSMIT2    PA344: FUTURE SALES ORDER PROCESSING
// 01/05/94  MSMIT2    PA0349: ADD MUSICAL SIZE RUN IND TO MAP
//                     ALSO VALIDATE SIZE RUN CHANGES AND
//                     SPLITS BY USING OP2830 CSP REC OPMSREC.
// 01/19/94  MSMIT2    PA302: ADD AIR FREIGHT INFO.
// 03/24/94  MSMIT2    PCF228 - PC111D HAS BEEN CHANGED TO
//                     ALLOW A SINGLE O/A TO UPDATE PO.  FOR
//                     AIR FREIGHT REQUESTS THAT ARE PRE-APP
//                     OR CANCELLED, THE O/A NUMBER MUST BE
//                     SENT TO PC1111.
// 09/07/94  JJUDKI    PCF231 - highlight style if on the
//                     components program.
// 01/20/95  MSMIT2    INQUIRY ONLY FOR EUROPEAN O/AS.
// 04/05/95  MSMIT2    DETERMINE IF THE O/A IS PROCESSING AN
//                     AIR FREIGHT. IF SO, SUBMIT JCL WITH
//                     PC1111 PROC.
// 09/29/95  JCARL1    Fixed coding error in PA0P260 where
//                     it was looking at the status code
//                     instead of the type code when deciding
//                     whether to blank out the ets date.
// 11/11/95  JCARL1    Fixed B/L display on the 'TO' portion of
//                     the screen.  Changed module PA0PS22701.
//                     It was using the wrong index.
// 08/02/96  WROBIN    Add 'SE' negative BTS exemption to the
//                     'TO' portion of the check.
// 09/12/96  SKEOBO    Expand Factory code to 3 chars and
//                     merge LT column to PO/SO column.
// 09/23/96  RKUDPI    Add/modify code to accomodate new whse
//                     for hockey equipment and apparel.
// 10/24/96  WROBIN    Exempt internationals from warehouse
//                     validation.
// 11/13/96  RKUDPI    Fix mode of trans. validation
// 03/11/97  WROBIN    Fix mode of trans. validation (again)
// 05/22/97  SREDDY    MSR Validation check. ( PA2840 )
// 06/19/97  WROBIN    Modify Message for missing VCSPRP record
// 06/25/97  WROBIN    AF Drop Dead Date replaces RTA
// 07/14/97  WROBIN    Check for low subscript
// 08/01/97  WROBIN    Remove DDD, going to need date solution
// 10/16/97  SBALAS    RENAMED PA284D WITH OP297D
// ------- -------- ------ ----------------------------------
// Y2KFIX  01/09/98 CSAWKI MODIFICATIONS MADE TO: PA0PM001,
//                         PA0PM002, PA0PM004, PA0PS20, PA0PS21
//                         PA0PS24, PA0PS25, PA0PS27, PA0PS28,
//                         PA0PW02, PA0P110, PA0P116, PA0P260,
//                         PA0P261, PA0P264, PA0P361.
// 
// PA1122  03/02/98 WROBIN Add Stock Transfer type OAs
// PA1526  07/28/98 WROBIN Add Stock Transfer type OAs, part II
// PA1121  08/05/98 WROBIN allow calc for 'DN' type OAs
// PA903   09/23/98 CGANAP Change type of  OA# in param record
//                         from Binary to Character.
// PA1534  12/17/98 CGANAP Include CFP-OA-NO Field in MAP
//                         PA0PM002 and accordingly do the
//                         processing.
// PA9999  05/27/99 WROBIN Inactivate Canadian CFP requirement
// PA9999  05/27/99 WROBIN Inactivate Canadian CFP requirement
// PAw115  05/27/99 sramas For non 'FT' types, Factory is moved
//                         by default to 'TO' factory in screen
//                         pa0pm002.
// PAW117  09/22/99 SRAMAS IN PA0PM002, in the 'TO' part of the
//                         map, if the Mode is empty, the
//                         cursor is positioned at Mode.
// PAP250  10/26/99 GREDDY Corrected the flow of if logic to
//                         ensure that for Japan OA's the user
//                         is prompted to enter the OA number
//                         in PA0PM002
// #1454   10/08/99 SKATHI TO DISPLAY SO NEED DATE in PA0PM002
// #1440   10/28/99 SKATHI To restrict any mode change to 'AF'
//                         for any 'DS' type OA
// #1846   01/12/00 GREDDY To ensure that a relevant value is
//                         moved into key field that is displa-
//                         yed during DB2 abends.
// NSC     05/09/00 GREDDY To maintain Rel-Pln-nbr in VPAWRK03
//         06/15/00 GREDDY fixed bug causing sql 100........
//         07/10/00 GREDDY fixed bug causing incorrect work
//                         table insert
//         07/11/00 GREDDY fixed bug causing incorrect work
//                         table insert
//         07/18/00 GREDDY FIX PO-ID AND PO-NBR COUPLING
//                         BREAKAGE. NSC CHANGES.
// #9999   02/16/01 SKATHI FIX BUG WHICH ALLOWS BLANK MODE IN
//                         DM TYPE OA'S
// *********************
Program PA0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PA00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB9REC FB9REC; // record
  FY1REC FY1REC; // record
  FYBREC FYBREC; // record
  OP1REC OP1REC; // record
  PA0PW00 PA0PW00; // record
  PA0PW01 PA0PW01; // record
  PA0PW02 PA0PW02; // record
  PA0PW03 PA0PW03; // record
  PA0PW04 PA0PW04; // record
  PA0PW05 PA0PW05; // record
  PA0PW06 PA0PW06; // record
  PA0PW07 PA0PW07; // record
  PA0PW08 PA0PW08; // record
  PA0PW09 PA0PW09; // record
  PA0PW10 PA0PW10; // record
  PA0PW11 PA0PW11; // record
  PA0PW12 PA0PW12; // record
  PA0PW13 PA0PW13; // record
  PA0PW14 PA0PW14; // record
  PA1REC PA1REC; // record
  PA4REC PA4REC; // record
  PA5REC PA5REC; // record
  PA9REC PA9REC; // record
  PAMSREC PAMSREC; // record
  PAWREC PAWREC; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PG6REC PG6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  VCMPPG01 VCMPPG01; // record
  VPACFP01 VPACFP01; // record
  VPAWRK02 VPAWRK02; // record
  VPAWRK03 VPAWRK03; // record
  VPAWRKCP VPAWRKCP { redefines = VPAWRK02 } ; // record
  VPOITM05 VPOITM05; // record
  XP0CW01 XP0CW01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PA0PT01; // table
  use PA0PT02; // table
  use PA0PT03; // table
  use PA0PT04 {deleteAfterUse = yes}; // table
  use PA0PT05 {deleteAfterUse = yes}; // table
  use PA0PT11; // table
  use PA0PT12; // table
  use PA0PT13; // table
  use PA0PT14 {deleteAfterUse = yes}; // table
  use PA0PT15 {deleteAfterUse = yes}; // table
  use PABTBL; // table
  use XCTTBL; // table
  use XWHTBL; // table
  use YESTBL; // table
  use YETTBL; // table
  use YMTTBL; // table
  use YTRTBL; // table
  use PA0PM.PA0PM001,  // forms
      PA0PM.PA0PM002, 
      PA0PM.PA0PM004,
      PA0PM.XMPAM001,
      PA0PM.XP0CM001,
      PA0PM.TA0PM001,
      PA0PM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPA001: XPPA001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    set PA1REC empty;
    set PA0PW00 empty;
    set PA0PW11 empty;
    set PA5REC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    PA0PWSWD = "1"; /* map dispaly sw*/
    PA0PW00.PA0PWCAL = "N"; /* INITIALIZE CALC FLAG*/
    PA0PW00.PA0PW-BL-REQUIRED-WARNING = "N";
    PA0PW00.PA0PW-REQUIRE-BL = "N";
    PA0PW00.PA0PW-READ-ONLY = "N";
    PA0PW00.PA0PW-BULK-QTY-FLAG = "N";
    PA0PW00.PA0PW-DUP-RTA-WARNING = "N";
    PA0PW00.PA0PW-DUP-RTA-ERROR = "N";
    PA0PW00.PA0PW-UPC-WARNING-PRINTED = "N";
    ;
    XPPA020: XPPA020();
     /* -------------------- flow section of xppa020 ---------------*/
    ;
    if (converseVar.validationMsgNum == 10) /* Error obtaining current buy date*/
      converseLib.clearScreen();
       /* Clear the map*/
    end
    ;
    PA0P000: PA0P000();
     /* NO FLOW*/
    PA0P001: PA0P001();
     /* no flow*/
    PA0P-002: PA0P-002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Order Adjustment Work Item List.*/
     /* ------------------------------------------------------------*/
    ;
    goto PA0P-002; /* Converse O/A Work Item List*/
    ;
    ;
  end // end main
end // end PA0P

// Inquire/maintain a table row
Function PA0P-002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PW00.PA0PWSWD == "1") /* Map 1 was requested*/
    ;
    PA0P-100(); /* Display map 1*/
    ;
  else
    ;
    if (PA0PW00.PA0PWSWD == "2") /* Map 2 was requested*/
      ;
      PA0P-200(); /* Display map 2*/
      ;
      ;
    else
      ;
      if (PA0PW00.PA0PWSWD == "3") /* Map 2 was requested*/
        ;
        PA0P-300(); /* Display map 2*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Write the error to the Error Diagnosis Reporting Facility.*/
        /* ------------------------------------------------------------*/
        ;
        PAWREC.XXXMODID = "002"; /* Module identification*/
        PAWREC.XXXMSGNO = 10; /* Indicate system error*/
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
        TA1REC.TA1MAPNO = PA0PW00.PA0PWSWD; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
        /* ------------------------------------------------------------*/
         /* Exit to display the application system menu.*/
        /* ------------------------------------------------------------*/
        ;
        COMMAREA.CATOAP = "PA0M"; /* TO application*/
        ;
        XSPAS01(); /* Exit to another application*/
        ;
        /* ------------------------------------------------------------*/
         /* Abnormally terminate the transaction if the exit failed.*/
        /* ------------------------------------------------------------*/
        ;
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end PA0P-002

// Process o/a numbers in a list
Function PA0P-100()
   /* ------------------------------------------------------------*/
  ;
   /* 1) obtain data*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  ;
  PA0P-110(); /* Obtain the data to display*/
  ;
  PA0P-120(); /* Format and display the map*/
  ;
  PA0P130(); /* Check attention identifier*/
  ;
  PA0P140(); /* Reset fields to normal intensity*/
  ;
  PA0P-150(); /* Verify the entered data*/
  ;
  PA0P-160(); /* Process valid input request*/
  ;
  ;
end // end PA0P-100

// Obtain the data to display
Function PA0P-110()
   /* ------------------------------------------------------------*/
     /* Select and open the cursor for the set(s) to be formatted*/
     /* Fetch and save the data in storage.*/
     /* If no data found, display error message and return to*/
       /* previous process.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
  ;
   /* The O/A number entered on screen or passed from another PA screen*/
   /* is stored in the WS variable, PA0PW00.PA1OANBR. This is done*/
   /* in proc XPPA001 , if coming in from another PA application*/
   /* and in PA0PS-01-INIT if coming oin from some other application*/
  ;
  if (PA0PW00.PA1OANBR != 0)
    PA0PW00.PA0PW-REGION-PA1OANBR = PA0PW00.PA1OANBR;
    PA0PS-89-WHSE();
  end
  ;
  if (PA0PW00.PA0PWSWR != "Y") /* Data not requested*/
    return;
  end
  ;
  if (converseVar.validationMsgNum != 0 /* IF ERRORS EXITS*/
   && converseVar.validationMsgNum != 276) /* AND IF NOT HIT PF17 MESSAGE*/
    return;
  end
  ;
  set PA5REC empty; /* Clear the database record*/
  set VPAWRK02 empty; /* CLEAR DPRODA.VPAWRK02 RECORD*/
  set PA0PW01 empty; /* Clear display storage*/
  set PA0PW02 empty; /* Clear display storage*/
  set PA0PW11 empty; /* CLEAR BOTTOM LINE FIELDS*/
  ;
  PA0PW00.PA0PWPBK = 0; /* po backout*/
  ;
   /* ------------------------------------------------------------*/
                     /* validate security*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* PA0337:  IF ADD, CHG, DEL FLAGS ARE 'N' AND INQ FLAG IS 'Y'*/
   /* BYPASS THIS VALIDATION, INQUIRY ONLY WILL BE ENFORCED*/
   /* WITHIN THE RELATED SECTIONS.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAADDFL == "N"
   && COMMAREA.CACHGFL == "N"
   && COMMAREA.CADELFL == "N"
   && COMMAREA.CAINQFL == "Y")
                                  /* bypass*/
  else
    /* IF EUROPEAN O/A ALLOW INQUIRY*/
    if (PA1REC.PA1OANBR > 199999
     && PA1REC.PA1OANBR < 300000)
        /* NEXT SENTENCE*/
    else
      if (PA1REC.YSMXDV == "10" /* nil only maint*/
       && COMMAREA.CACLVL[1] != "Y")
        ;
        PAWREC.XXXMSGNO = 154;
        PAWREC.XXXMODID = "110";
        ;
      else
        ;
        if (COMMAREA.CACLVL[1] != "Y" /* user has access to both*/
         && COMMAREA.CACLVL[2] != "Y") /* nil and domestic*/
          ;
          PAWREC.XXXMSGNO = 154;
          PAWREC.XXXMODID = "110";
        end
      end
    end
  end
  ;
  if (PAWREC.XXXMSGNO == 154)
    COMMAREA.CATOAP = "PA0M";
    XSPAS01();
  end
  ;
  if (PA1REC.YESCD >= "20"
   || PA1REC.PA1HLDFL == "Y") /* O/A ON HOLD*/
    PA0PW00.PA0PW-READ-ONLY = "Y";
  end
  ;
  PAWREC.PAWOANBR = PA0PW00.PA1OANBR; /* Move in key fields*/
  if (PA1REC.YETCD in YETTBL.YETCD)
    PA0PW01.YETDESC = YETTBL.YETDESC[sysVar.arrayIndex];
  end /* Retrieve desc*/
  if (PA1REC.YESCD in YESTBL.YESCD)
    PA0PW01.YESDESC = YESTBL.YESDESC[sysVar.arrayIndex];
  end /* Retrieve desc*/
  ;
  ;
   /* ------------------ Set up the p.o. id ---------------------*/
   /* PA0330: FOR OVERRUN O/A TYPES, THE PO ID IS OF THE FORM*/
   /* FY0605.*/
   /* ------------------ Set up the p.o. id ---------------------*/
  ;
  PA0PW00.PA0PWBDT = PA1REC.PA1BUYMO; /* Buy date*/
  PA0PW00.PA0PWPCC = PA0PW00.PA0PWBCC; /* Production century*/
  PA0PW00.PA0PWPYR = PA0PW00.PA0PWBYY; /* Production year*/
  ;
   /* Production month = Delivery month minus two*/
  ;
  if (PA1REC.YETCD == "OR"
   || PA1REC.YETCD == "NO")
    PA0PW00.PA0PWPMO = 06;
  else
    PA0PW00.PA0PWPMO = PA0PW00.PA0PWBMM - 2;
    if (PA0PW00.PA0PWPMO <= 0) /* Less than or equal to zero*/
      PA0PW00.PA0PWPMO = PA0PW00.PA0PWPMO + 12; /* Add twelve months*/
       /*  */
       /* ********************* Y2K IN BEGIN ********************/
       /*  */
      if (PA0PW00.PA0PWPYR == 0)
        PA0PW00.PA0PWPYR = 99;
      else
       /*  */
       /*  */
       /* ********************* Y2K IN END **********************/
       /*  */
        PA0PW00.PA0PWPYR = PA0PW00.PA0PWPYR - 1; /* Subtract 1 year*/
      end
    end
  end
  ;
  /* ***********************  Y2K IN BEGIN  **************/
  /*  */
  if (PA0PW00.PA0PWPYR > 60)
    PA0PW00.PA0PWPCC = 19;
  else
    PA0PW00.PA0PWPCC = 20;
  end
  /*  */
  /* ************************  Y2K IN END  ***************/
  /*  */
  ;
  PA0PW00.PA0PWDMO = PA0PW00.PA0PWBMM; /* Delivery month*/
  ;
  PA0PW01.PA0PWPYY = PA0PW00.PA0PWPYR; /* Production year*/
  PA0PW01.PA0PWDS1 = "-"; /* Dash one*/
  PA0PW01.PA0PWPPM = PA0PW00.PA0PWPMO; /* Production month*/
  PA0PW01.PA0PWDS2 = "-"; /* Dash two*/
  PA0PW01.PA0PWDPM = PA0PW00.PA0PWBMM; /* Delivery month*/
  ;
  /* DETERMINE THE DEFAULT CALC RTA DATE*/
  PA0PW00.PA0PW-CALC-RTA-CC = PA0PW00.PA0PWBCC;
  PA0PW00.PA0PW-CALC-RTA-YY = PA0PW00.PA0PWBYY;
  PA0PW00.PA0PW-CALC-RTA-MM = PA0PW00.PA0PWBMM;
  PA0PW00.PA0PW-CALC-RTA-DD = 20;
  ;
  PA5REC.PA1OANBR = PA1REC.PA1OANBR;
  PA5REC.XWHCD = PA0PW00.PA0PW-REGION-WHSE[1];
  ;
  PA0P116(); /* select unique bottom line*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    PA0PW00.PA0PWSUD = PA5REC.ZZZSDT;
  end
   /* ------------------------------------------------------------*/
   /* select set and build working storage records*/
   /* from O/A Work Table. These selected items were*/
   /* rewquested by the usere in PA0k.*/
   /* ------------------------------------------------------------*/
  VPAWRK02.PA1OANBR = PA1REC.PA1OANBR; /* o/a number*/
  VPAWRK02.PACSEVAL = "*"; /* user selected for work*/
  VPAWRK02.PACORDTY = "*"; /* row type*/
  VPAWRK02.ZZZSDT = -1;
  VPAWRK02.ZZZSTM = -1;
  ;
  PA0P-113(); /* select VPAWRK02 also fetch 1st item*/
  PA0PWQT5 = 0; /* TOTAL OF adjustments made*/
  XX4 = 0; /* set index to 1*/
   /* -----------------------------------------------------------|*/
   /* if no items exist for the header dispaly msg*/
   /* -----------------------------------------------------------|*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    PA0PW00.XXXMSGNO = 15; /* NO DATA TO DISPLAY*/
    return;
  end
   /* -----------------------------------------------------------|*/
            /* fetch and store all vpawrk02 items               |*/
     /* compute line totals for each selected item              |*/
     /* compute total adjustmests for all items displayed in hdr|*/
   /* -----------------------------------------------------------|*/
   /* PA323: USED TO DETERMINE IF BOTTOM LINE NEEDS TO BE SELECTED*/
  PA0PW00.PA0PW-PROCESSING-WHSE = "N";
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* row fetched, process*/
    if (VPAWRK02.PACSEVAL != "C" /* input to cal*/
     && VPAWRK02.PACSEVAL != "X" /* so to fa processed*/
     && VPAWRK02.PACORDTY != "9") /* oa item work rows*/
      PA0PS-05(); /* store this item*/
    end
    PA0PS-14(); /* fetch next work item........*/
  end
  ;
   /* PA323: CHECK TO SEE IF BOTTOM LINE IS REQUIRED;*/
  ;
  if (PA1REC.YSMXDV == "10" /* DOMESTIC O/A*/
   || PA1REC.YETCD == "NI") /* OR NIL TO INC. DIVERSION*/
    if (PA1REC.YETCD != "OR" /* OVER RUN*/
     && PA1REC.YETCD != "ST" /* STOCK TRANSFER*/
     && PA1REC.YETCD != "FT" /* FACTORY TRANSFER*/
     && PA1REC.YETCD != "DM" /* MODE CHANGED*/
     && PA0PW00.PA0PWSUD == 0) /* BOTTOM LINE NOT SELECTED*/
       /* IF TRANSFERING FROM ANOTHER APPLICATION, CHECK TO SEE IF THE*/
       /* B/L WARNING NEEDS TO BE PRINTED.*/
      PA0PW00.PA0PW-REQUIRE-BL = "Y";
      if (PAWREC.CAFROMAP != "PA0P"
       && PAWREC.CAFROMAP != " "
       && PA0PW00.PA0PW-BL-REQUIRED-WARNING == "N")
        converseLib.validationFailed(281);
        PA0PW00.XXXMODID = "110";
        PA0PW00.PA0PW-BL-REQUIRED-WARNING = "Y";
      end
    end
  end
  ;
  PA0PWIX1 = 1; /* hold index for current line display*/
  move XX4 to PA0PWIX4 withV60Compat; /* hold index for max line display*/
  PA0P-115(); /* Close selected set*/
  PA0PW00.PA0PWSWR = "N"; /* Request for data switch*/
  ;
   /* ------------------------------------------------------------*/
   /* pa0pwix4 now contains the max number of items to be adjuste*/
   /* set pa0pwix1 to first line item.to be displayed*/
   /* use these indexes to control formating and max paging*/
   /* ------------------ END OF PROCESS PA0P110 ------------------*/
  ;
end // end PA0P-110

// Select pacrec
Function PA0P-113()
   /* ------------------------------------------------------------*/
   /* Select Set, from DPRODA.VPAWRK02*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPAWRK02" ("S2", SQLCA, VPAWRK02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PA0PS-14(); /* fetch first row*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "113"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0P113"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK02"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* Move to displayable format*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PA0P113 -----------------------*/
  ;
end // end PA0P-113

// close selected set
Function PA0P-115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPAWRK02" ("C2", SQLCA, VPAWRK02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PA0PW00.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0P115"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK02"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* OA Nbr moved to display field*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* ===>Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* **                                                        ***/
   /* ********************** END OF PAOP115 ***********************/
   /* **                                                        ***/
end // end PA0P-115

// Format and display the map
Function PA0P-120()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PW00.PA0PW-READ-ONLY == "Y")
    converseLib.validationFailed(72);
    PA0PW00.XXXMSGNO = 72;
    PA0PW00.XXXMODID = "120";
  end
  ;
  if (converseVar.validationMsgNum == 0   /* No errors*/
   || converseVar.validationMsgNum == 276 /* OR MESSAGE TO HIT PF17:ADJCALC*/
   || converseVar.validationMsgNum == 281 /* OR SELECT BOTTOM LINE WARNING*/
   || converseVar.validationMsgNum == 72  /* READ ONLY*/
   || converseVar.validationMsgNum == 287 /* CALC CREATED DUPLICATE RTA ...*/
   || converseVar.validationMsgNum == 286 /* WARNING: CALC MAY CREATE DUPS*/
   || converseVar.validationMsgNum == 351 /* WARNING: MORE THAN 3 VALID WHSES*/
   || converseVar.validationMsgNum == 352 /* WARNING: NO VALID WHSE FOR STY/CLR*/
   || converseVar.validationMsgNum == 353) /* Stock Transfer: countries required*/
    ;
    PA0P121(); /* Format the map*/
    ;
    if (converseVar.validationMsgNum == 287) /* CALC CREATED DUPLICATE RTA*/
      PA0P-12001(); /* HIGHLIGHT DUPLICATES*/
    end
    ;
    if (converseVar.validationMsgNum == 286) /* WARNING: CALC MAY CREATE DUPS*/
      PA0P-12002(); /* HIGHLIGHT DUPLICATES*/
    end
    ;
  else
    ;
    if (converseVar.validationMsgNum == 88) /* CALC SUBMITTED*/
      PA0P-12003(); /* RESET HIGHTLIGHTED FIELDS*/
    end
    ;
    PA0PW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
  PA0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (PA0PW00.XXXMSGNO != 0)
    ;
    PA0PM001.XXXMODID = PA0PW00.XXXMODID; /* Module id*/
    if (PA0PW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PA0PW00.XXXMSGNO);
    end /* Message number*/
    set PA0PM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* pa0337: if add, chg, and del flags are 'N'*/
   /* and inq flag is 'Y'*/
   /* set selection column to protect, dark*/
   /* ------------------------------------------------------------*/
  if (CAADDFL == "N"
   && CACHGFL == "N"
   && CADELFL == "N"
   && CAINQFL == "Y")
    ;
    PA0PWIX3 = 1;
    while (PA0PWIX3 < 13)
      set PA0PM001.PA0PMSEL[PA0PWIX3] protect, invisible;
      PA0PWIX3 = PA0PWIX3 + 1;
    end
  end
  ;
   /* IF EUROPEAN O/A, ALLOW INQUIRY ONLY*/
  ;
  if (PA0PM001.PA1OANBR > 199999
   && PA0PM001.PA1OANBR < 300000)
    set PA0PM001.PA0PM-PF9-LABEL skip, invisible;
    set PA0PM001.PA0PM-PF10-LABEL skip, invisible;
    set PA0PM001.PA0PM-PF16-LABEL skip, invisible;
  end
  ;
  converse PA0PM001 ;
  ;
  PA0PW00.XXXMODID = " "; /* Module id*/
  PA0PW00.XXXMSGNO = 0; /* Reset message number*/
  ;
  COMMAREA.CATOAP = PA0PM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PA0PM001.CAITEM; /* Application data*/
  ;
end // end PA0P-120

// HIGHLIGHT DUPLICATES FOR ERROR
Function PA0P-12001()
  ;
   /* DETERMINE IF CALC CREATED DUPLICATES.  MUST HIGHLIGHT DUPLICATES*/
   /* IF ERROR AND PF7/PF8 HIT.*/
  ;
  XX1 = 1;
  ;
  while (XX1 <= PA0PWIX4)
    if (PA0PW02.PACORDTY[XX1] == "8") /* CALCED ITEM*/
      ;
        /* PO-NBR IS INCLUDED PART OF THE 'IF' CRITERIA BELOW.*/
        /* CHANGES DONE PART OF PO-ID, PO-NBR COUPLING BREAKAGE.*/
        /* GREDDY -- 07/18/00*/
      ;
      move PA0PWIX4 to XX3 withV60Compat;
      while (XX3 >= 1)
        if (PA0PW02.PACORDTY[XX3] == "6"
         && PA0PW02.FY1FCTYC[XX1] == PA0PW02.FY1FCTYC[XX3]
         && PA0PW02.PC3POIDT[XX1] == PA0PW02.PC3POIDT[XX3]
         && PA0PW02.PC3PONBR[XX1] == PA0PW02.PC3PONBR[XX3]
         && PA0PW02.PC6RTADT[XX1] == PA0PW02.PC6RTADT[XX3]
         && PA0PW02.YMTCD[XX1] == PA0PW02.YMTCD[XX3]
         && PA0PW02.PC2CUXID[XX1] == PA0PW02.PC2CUXID[XX3]
         && PA0PW02.XWHCD[XX1] == PA0PW02.XWHCD[XX3]
         && PA0PW02.PC2INSEG[XX1] == PA0PW02.PC2INSEG[XX3]
         && PA0PW02.OP1PARTN[XX1] == PA0PW02.OP1PARTN[XX3]
         && PA0PW02.OP1CUOID[XX1] == PA0PW02.OP1CUOID[XX3]
         && PA0PW02.OP1NORID[XX1] == PA0PW02.OP1NORID[XX3])
               /* ONLY HIGHTLIGHT ITEMS IF DISPLAYED ON SCREEN*/
          PA0PWIX6 = XX1 - PA0PWIX1 + 1;
          if (PA0PWIX6 <= 12
           && PA0PWIX6 >= 1)
            set PA0PM001.PA0PMSEL[PA0PWIX6] cursor, bold;
            set PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX6] protect, bold;
            set PA0PM001.FY1FCTYC[PA0PWIX6] protect, bold;
            set PA0PM001.PA0PM-WHSE[PA0PWIX6] protect, bold;
            set PA0PM001.PA0PMDST[PA0PWIX6] protect, bold;
            set PA0PM001.PC6RTADT[PA0PWIX6] protect, bold;
            set PA0PM001.YMTCD[PA0PWIX6] protect, bold;
          end
          PA0PWIX5 = XX3 - PA0PWIX1 + 1;
          if (PA0PWIX5 <= 12
           && PA0PWIX5 >= 1)
            set PA0PM001.PA0PMSEL[PA0PWIX5] bold;
            set PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX5] protect, bold;
            set PA0PM001.FY1FCTYC[PA0PWIX5] protect, bold;
            set PA0PM001.PA0PM-WHSE[PA0PWIX5] protect, bold;
            set PA0PM001.PA0PMDST[PA0PWIX5] protect, bold;
            set PA0PM001.PC6RTADT[PA0PWIX5] protect, bold;
            set PA0PM001.YMTCD[PA0PWIX5] protect, bold;
          end
        end
        XX3 = XX3 - 1;
      end
    end
    ;
    XX1 = XX1 + 1;
  end
  ;
   /* ------------------ END OF PROCESS PA0P-12001 ---------------*/
  ;
end // end PA0P-12001

// HIGHLIGHT DUPLICATES FOR WARN
Function PA0P-12002()
  ;
   /* DETERMINE IF CALC MIGHT CREATE DUPLICATES.  MUST HIGHLIGT RECORDS*/
   /* IF WARNING AND PF7/PF8 HIT.*/
  ;
  move PA0PWIX4 to XX3 withV60Compat;
  while (XX3 >= 1)
    ;
    if (PA0PW02.PACSEVAL[XX3] != "S" /* NOT SELECTED FOR INPUT*/
     && PA0PW02.PACORDTY[XX3] == "6" /* OLD PO ITEM*/
     && PA0PW02.PC6RTADT[XX3] == PA0PW00.PA0PW-CALC-RTA-DT)
        /* ONLY HIGHTLIGHT ITEMS IF DISPLAYED ON SCREEN*/
      PA0PWIX5 = XX3 - PA0PWIX1 + 1;
      if (PA0PWIX5 <= 12
       && PA0PWIX5 >= 1)
        set PA0PM001.PA0PMSEL[PA0PWIX5] bold;
        set PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX5] protect, bold;
        set PA0PM001.FY1FCTYC[PA0PWIX5] protect, bold;
        set PA0PM001.PA0PM-WHSE[PA0PWIX5] protect, bold;
        set PA0PM001.PA0PMDST[PA0PWIX5] protect, bold;
        set PA0PM001.PC6RTADT[PA0PWIX5] protect, bold;
        set PA0PM001.YMTCD[PA0PWIX5] protect, bold;
      end
    end
    ;
    XX3 = XX3 - 1;
    ;
  end
  ;
   /* ------------------ END OF PROCESS PA0P-12002 ---------------*/
  ;
end // end PA0P-12002

// RESET HIGHLIGHT FIELDS
Function PA0P-12003()
  ;
   /* RESET THE HIGHLIGHTED FIELDS AFTER THE 286 WARNING.*/
  ;
   /* NUM OF LINES CURRENTLY ON THE SCREEN*/
  PA0PWIX6 = PA0PWIX4 - PA0PWIX1 + 1;
  XX3 = 1;
  while (XX3 <= 12
   && XX3 <= PA0PWIX6)
    ;
    set PA0PM001.PA0PMSEL[XX3] initialAttributes;
    set PA0PM001.PA0PM-LT-PC3POIDT[XX3] initialAttributes;
    set PA0PM001.FY1FCTYC[XX3] initialAttributes;
    set PA0PM001.PA0PM-WHSE[XX3] initialAttributes;
    set PA0PM001.PA0PMDST[XX3] initialAttributes;
    set PA0PM001.PC6RTADT[XX3] initialAttributes;
    set PA0PM001.YMTCD[XX3] initialAttributes;
    ;
    XX3 = XX3 + 1;
    ;
  end
  ;
   /* ------------------ END OF PROCESS PA0P-12002 ---------------*/
  ;
end // end PA0P-12003

// LOAD MAP INFO FOR LINE
Function PA0P-12200()
   /* ------------------------------------------------------------*/
   /* LOAD MAP INFO FOR LINE*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PW02.PACORDTY[PA0PWIX2] == "1") /* FACTORY ADJUSTMENT ROW*/
    PA0PM001.PA0PMTTL[PA0PWIX3] = PA0PW02.PACFBQTY[PA0PWIX2];
    PA0PW00.PA0PW-LT[PA0PWIX3] = "FA";
    PA0PW00.PA0PW-WK-PC3POIDT = PA0PW00.PA0PW-PC3POIDT[PA0PWIX3];
    PA0PS-PC3POIDT();
    PA0PW00.PA0PW-MAP-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-WK-PC3POIDT;
    PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-LT-PC3POIDT[PA0PWIX3];
    return;
  end
  ;
  if (PA0PW02.PACORDTY[PA0PWIX2] == "2") /* FACTORY ADJUSTMENT ROW*/
    set PA0PM001.YMTCD[PA0PWIX3] skip, invisible;
    PA0PM001.PA0PMTTL[PA0PWIX3] = PA0PW02.PACFBQTY[PA0PWIX2];
    PA0PW00.PA0PW-LT[PA0PWIX3] = "FS";
    PA0PW00.PA0PW-WK-PC3POIDT = PA0PW00.PA0PW-PC3POIDT[PA0PWIX3];
    PA0PS-PC3POIDT();
    PA0PW00.PA0PW-MAP-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-WK-PC3POIDT;
    PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-LT-PC3POIDT[PA0PWIX3];
    return;
  end
  ;
  if (PA0PW02.PACORDTY[PA0PWIX2] == "4") /* sales order adustment*/
    PA0PW00.PA0PW-PC3POIDT[PA0PWIX3] = PA0PW02.OP1CUOID[PA0PWIX2];
    PA0PM001.PA0PM-SO-NIKE-ID[PA0PWIX3] = PA0PW02.OP1NORID[PA0PWIX2];
    ;
      /* DETERMINE IF SO IS A MUSICAL SIZE RUN*/
    ;
    PA0P-12201();
    ;
    if (PA0PW02.PACADDRS[PA0PWIX2] == "S")
      PA0PW00.PA0PW-LT[PA0PWIX3] = "SR";
    else
      PA0PM001.PA0PMTTL[PA0PWIX3] = PA0PW02.PA0PWLT4[PA0PWIX2];
      PA0PW00.PA0PW-LT[PA0PWIX3] = "SO";
    end
    PA0PW00.PA0PW-WK-PC3POIDT = PA0PW00.PA0PW-PC3POIDT[PA0PWIX3];
    PA0PS-PC3POIDT();
    PA0PW00.PA0PW-MAP-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-WK-PC3POIDT;
    PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-LT-PC3POIDT[PA0PWIX3];
    return;
  end
  ;
  if (PA0PW02.PACORDTY[PA0PWIX2] == "5") /* STOCK TRANSFER ROW*/
    PA0PM001.PA0PMTTL[PA0PWIX3] = PA0PW02.PACFBQTY[PA0PWIX2];
    PA0PW00.PA0PW-LT[PA0PWIX3] = "ST";
    PA0PW00.PA0PW-WK-PC3POIDT = PA0PW00.PA0PW-PC3POIDT[PA0PWIX3];
    PA0PS-PC3POIDT();
    PA0PW00.PA0PW-MAP-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-WK-PC3POIDT;
    PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-LT-PC3POIDT[PA0PWIX3];
    return;
  end
  ;
  if (PA0PW02.PACORDTY[PA0PWIX2] == "6" /* po item*/
   || PA0PW02.PACORDTY[PA0PWIX2] == "7" /* po item*/
   || PA0PW02.PACORDTY[PA0PWIX2] == "8") /* po item*/
    set PA0PM001.YMTCD[PA0PWIX3] initialAttributes;
    PA0PW00.PA0PW-LT[PA0PWIX3] = "PO";
    PA0PM001.PC6RTADT[PA0PWIX3] = PA0PW02.PA0PWDRT[PA0PWIX2];
    ;
    if (PA0PW02.PA0PWDET[PA0PWIX2] == 0)
      PA0PM001.PC6OETS[PA0PWIX3] = " ";
    else
      PA0PM001.PC6OETS[PA0PWIX3] = PA0PW02.PA0PWDET[PA0PWIX2];
    end
    PA0PM001.PA0PMORD[PA0PWIX3] = PA0PW02.PA0PWLT1[PA0PWIX2];
    PA0PM001.PA0PMBTS[PA0PWIX3] = PA0PW02.PA0PWLT2[PA0PWIX2];
    ;
    PA0PM001.PA0PMADJ[PA0PWIX3] = PA0PW02.PA0PWLT3[PA0PWIX2];
    PA0PM001.PA0PMTTL[PA0PWIX3] = PA0PW02.PA0PWLT4[PA0PWIX2];
    ;
    if (PA0PW02.XDSCD[PA0PWIX2] == "1" /* dir ship*/
     || PA0PW02.XDSCD[PA0PWIX2] == "2") /* dir ship*/
      if (PA0PW02.OP1CUOID[PA0PWIX2] == 0)
        PA0PW00.PA0PW-PO-ID-SIX = PA0PW02.PC3POIDT[PA0PWIX2];
        PA0PW00.PA0PW-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-PO-ID-SIX;
        PA0PW00.PA0PW-WK-PC3POIDT = PA0PW00.PA0PW-PC3POIDT[PA0PWIX3];
        PA0PS-PC3POIDT();
        PA0PW00.PA0PW-MAP-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-WK-PC3POIDT;
        PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-LT-PC3POIDT[PA0PWIX3];
        return;
      end
      ;
      PA0PW00.PA0PW-PC3POIDT[PA0PWIX3] = PA0PW02.OP1CUOID[PA0PWIX2];
      PA0PW00.PA0PW-WK-PC3POIDT = PA0PW00.PA0PW-PC3POIDT[PA0PWIX3];
      PA0PS-PC3POIDT();
      PA0PW00.PA0PW-MAP-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-WK-PC3POIDT;
      PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-LT-PC3POIDT[PA0PWIX3];
      PA0PM001.PA0PM-SO-NIKE-ID[PA0PWIX3] = PA0PW02.OP1NORID[PA0PWIX2];
      ;
         /* DETERMINE IF SO IS A MUSICAL SIZE RUN*/
      ;
      PA0P-12201();
      ;
      return;
    end
    ;
    PA0PW00.PA0PW-PO-ID-SIX = PA0PW02.PC3POIDT[PA0PWIX2];
    PA0PW00.PA0PW-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-PO-ID-SIX;
    PA0PW00.PA0PW-WK-PC3POIDT = PA0PW00.PA0PW-PC3POIDT[PA0PWIX3];
    PA0PS-PC3POIDT();
    PA0PW00.PA0PW-MAP-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-WK-PC3POIDT;
    PA0PM001.PA0PM-LT-PC3POIDT[PA0PWIX3] = PA0PW00.PA0PW-LT-PC3POIDT[PA0PWIX3];
    ;
  end
  ;
end // end PA0P-12200

// DETERMINE IF SO IS MSR
Function PA0P-12201()
   /* ------------------------------------------------------------*/
   /* DETERMINE IF THE SO IS A MUSICAL SIZE RUN.*/
   /* ------------------------------------------------------------*/
  ;
  set OP1REC empty;
  OP1REC.OP1PARTN = PA0PW02.OP1PARTN[PA0PWIX2];
  OP1REC.OP1CUOID = PA0PW02.OP1CUOID[PA0PWIX2];
  OP1REC.OP1NORID = PA0PW02.OP1NORID[PA0PWIX2];
  ;
  PA0PS-85-IO0430-S();
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XPACD == "MS")
      PA0PM001.PA0PM-MSR-IND[PA0PWIX3] = "M";
      PA0PW02.PA0PW-MSR-IND[PA0PWIX2] = "M";
    else
      PA0PM001.PA0PM-MSR-IND[PA0PWIX3] = " ";
      PA0PW02.PA0PW-MSR-IND[PA0PWIX2] = " ";
    end
  end
  ;
  ;
end // end PA0P-12201

// Validate any input data
Function PA0P-150()
   /* ------------------------------------------------------------*/
   /* CHECK TO SEE IF THE O/A NUMBER HAS BEEN CHANGED FIRST.*/
   /* ------------------------------------------------------------*/
  if (PA0PM001.PA1OANBR != PA1REC.PA1OANBR
   && PA0PM001.PA1OANBR != 0
   && PA1REC.PA1OANBR != 0)
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* PA#217 - allow inquiry for pf15/pf17 when oa status = '15'*/
   /* PA#225 - allow inquiry for pf15/pf17 with any oa status*/
            /* after calc and factory split run.*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf12) /* Pf12 key pressed*/
    return;
  end
  ;
   /* -----------------------------------------------------*/
   /* edit selected items*/
   /* -----------------------------------------------------*/
  ;
   /* ------------------------------------------------------*/
   /* 04/02/93: PA0331 - DON'T ALLOW STATUS '80' TO PROCESS*/
   /* ------------------------------------------------------*/
  ;
  if (PA0PW00.PA0PW-READ-ONLY != "Y")
    PA0P-15001();
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
  if (PA0PW00.PA0PW-READ-ONLY == "Y")
    return;
  end
  ;
   /* -----------------------------------------------------*/
   /* pf14 request verify that correct items have been selected*/
   /* for the manual adjustments*/
   /* -----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf20)
    PA0PS-03();
    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
    return;
  end
  ;
   /* -----------------------------------------------------*/
   /* pf16 request verify that items have been selected*/
   /* for the calc process*/
   /* -----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16)
    PA0PS-02();
    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
    return;
  end
  ;
  ;
  if (PA0PM001.CAITEM > " ") /* Application data was entered*/
    set PA0PM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PA0PW00.XXXMODID = "150"; /* Module identification*/
    ;
  end
  ;
  ;
  ;
  ;
  ;
  ;
   /* ---------------- END OF PROCESS PA0P150 --------------------*/
  ;
end // end PA0P-150

// VALIDATE ACTIVE STATUS DATA
Function PA0P-15001()
  PA0PW00.PA0PWCU1 = " ";
  PA0PW00.PA0PWCU2 = " ";
  PA0PW00.PA0PWSOF = "N";
  PA0PW00.PA0PWPOF = "N";
  PA0PW00.PA0PWFRF = "N";
  PA0PW00.PA0PWSOI = 0;
  PA0PW00.PA0PWPOI = 0;
  PA0PW00.PA0PW-SO-CUS-ODR-ID-1 = 0;
  PA0PW00.PA0PW-SO-NIK-ODR-ID-1 = " ";
  PA0PW00.PA0PW-SO-CUS-ODR-ID-2 = 0;
  PA0PW00.PA0PW-SO-NIK-ODR-ID-2 = " ";
  ;
  PA0PWIX3 = 12;
  while (PA0PWIX3 > 0)
    if (PA0PM001.PA0PMSEL[PA0PWIX3] != " "
     && PA0PM001.PA0PMSEL[PA0PWIX3] != "P"
     && PA0PM001.PA0PMSEL[PA0PWIX3] != "S"
     && PA0PM001.PA0PMSEL[PA0PWIX3] != "*"
     && PA0PM001.PA0PMSEL[PA0PWIX3] != "F"
     && PA0PM001.PA0PMSEL[PA0PWIX3] != "T")
      set PA0PM001.PA0PMSEL[PA0PWIX3] cursor, bold; /* highlight*/
      converseLib.validationFailed(13);
      PA0PW00.XXXMODID = "150";
    else
      ;
      PA0PWIX2 = PA0PWIX1 + PA0PWIX3 - 1; /* ix2 = current stored item*/
      if (PA0PM001.PA0PMSEL[PA0PWIX3] == " "
       || PA0PM001.PA0PMSEL[PA0PWIX3] == "S"
       || PA0PM001.PA0PMSEL[PA0PWIX3] == "T"
       || PA0PM001.PA0PMSEL[PA0PWIX3] == "F")
        PA0PW02.PACSEVAL[PA0PWIX2] = PA0PM001.PA0PMSEL[PA0PWIX3];
        ;
        if (PA0PM001.PA0PMSEL[PA0PWIX3] == "F")
              /* PA323: CHECK FOR REQUIRED BOTTOM LINE*/
          if (PA0PW00.PA0PW-REQUIRE-BL == "Y"
           && PA0PM001.PA0PM-WHSE[PA0PWIX3] != " ")
            PA0PM001.PA0PMSEL[PA0PWIX3] = " ";
            converseLib.validationFailed(280);
            PA0PW00.XXXMODID = "150";
          end
          ;
          if (PA0PW00.PA0PW-LT[PA0PWIX3] == "SO")
            PA0PW00.PA0PWSOF = "Y";
            PA0PW00.PA0PWFRF = "Y";
            PA0PW00.PA0PWCU1 = PA0PM001.PA0PMDST[PA0PWIX3];
            PA0PW00.PA0PW-SO-CUS-ODR-ID-1 = PA0PW00.PA0PW-PC3POIDT[PA0PWIX3];
            PA0PW00.PA0PW-SO-NIK-ODR-ID-1 = PA0PM001.PA0PM-SO-NIKE-ID[PA0PWIX3];
            PA0PW00.PA0PWSOI = PA0PW00.PA0PWIX3;
          end
        else
          if (PA0PM001.PA0PMSEL[PA0PWIX3] == "T")
                 /* PA323: CHECK FOR REQUIRED BOTTOM LINE*/
            if (PA0PW00.PA0PW-REQUIRE-BL == "Y"
             && PA0PM001.PA0PM-WHSE[PA0PWIX3] != " ")
              PA0PM001.PA0PMSEL[PA0PWIX3] = " ";
              converseLib.validationFailed(280);
              PA0PW00.XXXMODID = "150";
            end
          end
        end
       /* ELSE;*/
   /* 05/05/93 THIS CODE WILL NEVER BE EXECUTED*/
          /* IF PA0PM001.PA0PMSEL(PA0PWIX3) = 'T';*/
             /* MOVE 'Y' TO PA0PW00.PA0PWPOF;*/
             /* IF PA0PM001.PA0PMIND(PA0PWIX3) = 'PO';*/
                /* MOVE PA0PM001.PA0PMDST(PA0PWIX3) TO PA0PW00.PA0PWCU2;*/
                /* MOVE PA0PM001.PC3POIDT(PA0PWIX3) TO*/
                     /* PA0PW00.PA0PW-SO-CUS-ODR-ID-2;*/
                /* MOVE PA0PM001.PA0PM-SO-NIKE-ID(PA0PWIX3) TO*/
                     /* PA0PW00.PA0PW-SO-NIK-ODR-ID-2;*/
                /* MOVE PA0PW00.PA0PWIX3 TO PA0PW00.PA0PWPOI;*/
             /* END;*/
          /* END;*/
      end
    end
    PA0PWIX3 = PA0PWIX3 - 1;
  end
  ;
  if (converseVar.validationMsgNum == 280) /* BOTTOM LINE MUST BE SELECTED*/
    return;
  end
  ;
  if (PA0PW00.PA0PWSOF == "Y"
   && PA0PW00.PA0PWPOF == "Y")
    ;
    if (PA0PW00.PA0PWPOI > 0
     || PA0PW00.PA0PWSOI > 0)
      if (PA0PW00.PA0PWCU1 == PA0PW00.PA0PWCU2
       && PA0PW00.PA0PW-SO-CUS-ODR-ID-1 == PA0PW00.PA0PW-SO-CUS-ODR-ID-2
       && PA0PW00.PA0PW-SO-NIK-ODR-ID-1 == PA0PW00.PA0PW-SO-NIK-ODR-ID-2)
         /* NEXT SENTENCE*/
      else
        if (PA0PW00.PA0PWCU1 == PA0PW00.PA0PWCU2)
          converseLib.validationFailed(268); /* SALES ORDR MUST EQUAL PO SALES ORDER*/
          PA0PW00.XXXMODID = "150";
        else
          converseLib.validationFailed(187);
          PA0PW00.XXXMODID = "150";
        end
        PA0PWIX3 = 12;
        while (PA0PWIX3 >= 1)
          if (PA0PM001.PA0PMSEL[PA0PWIX3] > " ")
            set PA0PM001.PA0PMSEL[PA0PWIX3] cursor, modified, bold;
          end
          ;
          PA0PWIX3 = PA0PWIX3 - 1;
        end
      end
    end
  end
  ;
  ;
  ;
   /* ---------------- END OF PROCESS PA0P-15001 -----------------*/
  ;
end // end PA0P-15001

// Process valid input request
Function PA0P-160()
  ;
  if (converseVar.validationMsgNum != 0
   || PA0PW00.XXXMSGNO != 0)
    return;
  end
  ;
  if (PA0PM001.PA1OANBR != PA1REC.PA1OANBR
   && PA0PM001.PA1OANBR != 0)
    ;
     /* INITIALIZE RECORDS AND FLAGS;*/
    ;
    PA0PS-01-INIT();
    ;
    PA0PW00.PA1OANBR = PA0PM001.PA1OANBR; /* new oa number*/
    PA0PW00.PA0PWSWR = "Y";
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calc must have been run and pacseval value of 'p'*/
   /* must exist*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
   /*  */
   /* COUNT THE NUMBER OF TYPE '8' WORK RECORDS.  A COUNT GREATER*/
   /* THAN 0 MEANS THAT THE CALC HAS BEEN RUN.*/
   /*  */
    set PA0PW09 empty; /* CLEAR OUT THE IO-PASS RECORD*/
    set PAWREC empty; /* CLEAR OUT DPRODA.VPAWRK01 REC*/
    VPAWRK02.PA1OANBR = PA1REC.PA1OANBR;
    VPAWRK02.PACSEVAL = "P";
    PA0PW09.PA0PW-TASK = "SC"; /* SELECT COUNT*/
    ;
    PA0P-16001();
    ;
    if (PA0PW09.PA0PW-COUNT > 0)
      PA0PW00.XXXMODID = "160"; /* Module id*/
      converseLib.validationFailed(276); /* PLEASE PRESS PF17:ADJCALC*/
      exit stack; /* Exit to redisplay map*/
    end
    exit stack;
  end
  ;
   /* ----------------------------------------------------------*/
     /* PF15 - TRANSFER TO PA0T - BOTTOM LINE SELECT*/
   /* ----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* pa0t sel b/l*/
    ;
    if (PA0PM001.PA1OANBR == 0)
      converseLib.validationFailed(40); /* O/A NUMBER MUST BE ENTERED*/
      PA0PW00.XXXMODID = "160";
      exit stack;
    end
    ;
    /* ALLOW B/L INQUIRY FOR EUROPEAN O/AS.*/
    ;
    if (PA1REC.PA1OANBR > 199999
     && PA1REC.PA1OANBR < 300000)
        /* NEXT SENTENCE*/
    else
      if (PA1REC.YSMXDV == "20" /* nil can not access*/
       && PA1REC.YETCD != "NI") /* unless Nil to Domestic divert*/
        converseLib.validationFailed(181);
        PA0PW00.XXXMODID = "160";
        exit stack;
      end
    end
    ;
    COMMAREA.CATOAP = "PA0T"; /* select bottom line*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    PAWREC.PAWOANBR = PA1REC.PA1OANBR; /* Current o/a number*/
    ;
     /* MKS PA#225: if status is 00 and calc has been submitted*/
    /* already, allow read only*/
    ;
    if (PA0PW00.PA0PW-READ-ONLY == "Y")
      PAWREC.XXXMSGNO = 72;
    end
    ;
    if (PA1REC.YESCD == "00"
     || PA1REC.YESCD == "01")
      if (PA0PW00.PA0PWCAL == "Y")
        PAWREC.XXXMSGNO = 149;
        PA0PW00.XXXMODID = "160";
      end
    end
    ;
    XSPAS01(); /* Exit to another application*/
    ;
    PA0PW00.XXXMODID = "160"; /* Module id*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
   /* ----------------------------------------------------------*/
     /* PF17 - PA0S - ADJUSTMENT TO THE CALC*/
   /* ----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf17) /* pa0s calc adjust*/
    ;
    /* ALLOW CALC INQUIRY FOR EUROPEAN O/AS.*/
    ;
    if (PA1REC.PA1OANBR > 199999
     && PA1REC.PA1OANBR < 300000)
        /* NEXT SENTENCE*/
    else
      if (PA1REC.YSMXDV == "20" /* nil can not access*/
       && PA1REC.YETCD != "NI") /* unless Nil to Domestic divert*/
        converseLib.validationFailed(181);
        exit stack;
      end
    end
    ;
    if (PA1REC.PA1HLDFL == "Y") /* O/A ON HOLD, DISPLAY ERROR MESSAGE*/
      converseLib.validationFailed(265);
      exit stack;
    end
    ;
    /*  */
    /* COUNT THE NUMBER OF TYPE '8' WORK RECORDS.  A COUNT GREATER*/
    /* THAN 0 MEANS THAT THE CALC HAS BEEN RUN.*/
    /*  */
    set PA0PW09 empty; /* CLEAR OUT THE IO-PASS RECORD*/
    /* 02/22/93: SET PAWREC EMPTY HAS BEEN COMMENTED OUT BECAUSE IT*/
    /* CAUSES THE BUY DATE TO BE LOST ON PA0S.*/
   /* SET PAWREC EMPTY;                /* CLEAR OUT DPRODA.VPAWRK01 REC*/
    VPAWRK02.PA1OANBR = PA1REC.PA1OANBR;
    VPAWRK02.PACSEVAL = "P";
    PA0PW09.PA0PW-TASK = "SC"; /* SELECT COUNT*/
    ;
    PA0P-16001();
    ;
    if (PA0PW09.PA0PW-COUNT > 0)
      COMMAREA.CATOAP = "PA0S"; /* adjust calc output*/
      COMMAREA.CAITEM = " "; /* Clear item field*/
      PAWREC.PAWOANBR = PA1REC.PA1OANBR; /* Current o/a number*/
      ;
      if (PA0PW00.PA0PW-READ-ONLY == "Y")
        PAWREC.XXXMSGNO = 72;
      end
      ;
      XSPAS01(); /* Exit to another application*/
      ;
      PA0PW00.XXXMODID = "160"; /* Module id*/
      exit stack; /* Exit to redisplay map*/
    end
    if (PA0PW00.PA0PWCAL == "Y") /* CALC PA2050 AND PA0S BOTTOM LINES*/
      COMMAREA.CATOAP = "PA0S"; /* adjust calc output*/
      COMMAREA.CAITEM = " "; /* Clear item field*/
      PAWREC.PAWOANBR = PA1REC.PA1OANBR; /* Current o/a number*/
      PAWREC.XXXMSGNO = 72; /* o/a header status allows read only*/
      XSPAS01(); /* Exit to another application*/
      exit stack;
    else
      converseLib.validationFailed(192); /* CALC MUST HAVE RUN BEFORE PF17*/
      PA0PW00.XXXMODID = "160"; /* Module id*/
      exit stack;
    end
  end
  ;
   /* GET PA0P130*/
  ;
   /* ------------------------------------------------------------*/
   /* Ensure that lines exist to scroll forward or back.*/
   /* pa0pwix1 always points to the first line of a page*/
   /* there are 12 line per page*/
   /* ------------------------------------------------------------*/
  ;
  move PA0PWIX1 to PA0PWIX2 withV60Compat;
  if (converseVar.eventKey is pf7) /* Scroll back request*/
    if (PA0PWIX2 != 1) /* this index is used for paging only*/
      PA0PWIX1 = PA0PWIX1 - 12; /* set index down 1 page*/
    else
      PA0PW00.XXXMODID = "160"; /* Module identification*/
      converseLib.validationFailed(2); /* No previous page to display*/
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    PA0PWIX2 = PA0PWIX2 + 12; /* set index up by 1  page*/
    if (PA0PWIX2 > PA0PWIX4) /* ix4 max no lines*/
      PA0PW00.XXXMODID = "160"; /* Module identification*/
      converseLib.validationFailed(3); /* No previous page to display*/
    else
      move PA0PWIX2 to PA0PWIX1 withV60Compat;
    end
    ;
  end
  ;
   /* MAKE SURE THAT THE FOLLOWING PF KEYS ARE NOT PROCESSED IF THE*/
   /* O/A IS READ ONLY!*/
  ;
  if (PA0PW00.PA0PW-READ-ONLY == "Y")
    return;
  end
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    if (PA0PW00.PA0PW-DUP-RTA-ERROR == "Y")
      converseLib.validationFailed(287); /* CALC CREATED DUPLICATE RTA RECORD*/
      PA0PW00.XXXMODID = "160";
      return;
    end
    ;
    if (PA0PW00.PA0PW-DUP-RTA-WARNING == "Y")
      converseLib.validationFailed(286); /* CALC CREATED DUPLICATE RTA RECORD*/
      PA0PW00.XXXMODID = "160";
      return;
    end
    ;
    return;
  end
  ;
   /* DETERMINE IF CALC CREATED DUPLICATES.  MUST HIGHLIGHT DUPLICATES*/
   /* IF ERROR AND PF7/PF8 HIT.*/
  ;
  if (converseVar.eventKey is pf9
   || converseVar.eventKey is pf10)
    XX1 = 1;
    PA0PW00.PA0PW-PROCESSING-AIR-FREIGHT = "N";
    ;
    while (XX1 <= PA0PWIX4)
        /*  */
        /* 04/05/95: CHECK TO SEE IF THE WORK RECORD IS FOR AN AIR*/
        /* FREIGHT.  IF SO, SUBMIT THE JCL WITH THE PC1111 PROC.*/
        /*  */
      if (PA0PW02.YMTCD[XX1] == "AF" /* IF AF WORK RECORD*/
       || PA1REC.PA-AFRGT-RQT-ID != 0) /* OR O/A IS AF*/
        PA0PW00.PA0PW-PROCESSING-AIR-FREIGHT = "Y";
      end
        /*  */
      if (PA0PW02.PACORDTY[XX1] == "8") /* CALCED ITEM*/
        ;
           /* INCLUDED PO-NBR IN THE 'WHILE' LOOP BELOW TO TAKE*/
           /* CARE OF PO-NBR/PO-ID COUPLING BREAKAGE*/
           /* GREDDY -- 07/18/00*/
        ;
        move PA0PWIX4 to XX3 withV60Compat;
        while (XX3 >= 1)
          if (PA0PW02.PACORDTY[XX3] == "6"
           && PA0PW02.FY1FCTYC[XX1] == PA0PW02.FY1FCTYC[XX3]
           && PA0PW02.PC3POIDT[XX1] == PA0PW02.PC3POIDT[XX3]
           && PA0PW02.PC3PONBR[XX1] == PA0PW02.PC3PONBR[XX3]
           && PA0PW02.PC6RTADT[XX1] == PA0PW02.PC6RTADT[XX3]
           && PA0PW02.YMTCD[XX1] == PA0PW02.YMTCD[XX3]
           && PA0PW02.PC2CUXID[XX1] == PA0PW02.PC2CUXID[XX3]
           && PA0PW02.XWHCD[XX1] == PA0PW02.XWHCD[XX3]
           && PA0PW02.PC2INSEG[XX1] == PA0PW02.PC2INSEG[XX3]
           && PA0PW02.OP1PARTN[XX1] == PA0PW02.OP1PARTN[XX3]
           && PA0PW02.OP1CUOID[XX1] == PA0PW02.OP1CUOID[XX3]
           && PA0PW02.OP1NORID[XX1] == PA0PW02.OP1NORID[XX3])
            converseLib.validationFailed(287);
            PA0PW00.PA0PW-DUP-RTA-ERROR = "Y";
            PA0PW00.XXXMODID = "160";
          end
          XX3 = XX3 - 1;
        end
      else
        if (PA0PW02.PACORDTY[XX1] == "4" /* SALES ORDER ITEM*/
         && PA0PW02.PC3POIDT[XX1] > PA0PW00.PA0PWPDT) /* FUTURE SO*/
          converseLib.validationFailed(295); /* MSUT MOVE ALL OF THE QUANTITY*/
          PA0PW00.XXXMODID = "160";
        end
      end
      ;
      XX1 = XX1 + 1;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* ----------------------------------------------------------*/
                       /* pf09*/
   /* submit print request*/
  ;
   /* ----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf9) /* transfer to batch print PA400D*/
    ;
    XX0XS01(); /* Obtain current time*/
    ;
    /* -----------------------------------------------------*/
     /* Call subroutine TA0230 to find which enviroment*/
     /* the program is executing in, production or*/
     /* development.*/
    /* -----------------------------------------------------*/
    set TA3REC empty;
    TA3REC.TA3OPTN = "ASSIGN ";
    try
      call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
    end
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA3REC.TA3RTNCD == 0)          /* good return code*/
    else
      converseLib.validationFailed(8); /* error encountered with print request*/
      exit stack;
    end
    ;
    /* -----------------------------------------------------*/
     /* Determine if the user is in the production or test*/
     /* region and submit correct jcl for PA4001.*/
    /* -----------------------------------------------------*/
    if (TA3REC.TA3RGNID == "03") /* if on the production system*/
      if (PA0PW00.PA0PW-PROCESSING-AIR-FREIGHT == "Y")
        PA0P182(); /* FORMAT PROD PA4001 JCL*/
      else
        PA0P-185(); /* FORMAT PROD PA4002 JCL*/
      end
    else
      if (PA0PW00.PA0PW-PROCESSING-AIR-FREIGHT == "Y")
        PA0P181(); /* FORMAT TEST PA4001 JCL*/
      else
        PA0P-186(); /* FORMAT TEST PA4002 JCL*/
      end
    end
    ;
    PA0PW00.PA0PWSWR = "Y"; /* reselect workitems*/
    return;
  end
  ;
   /* ----------------------------------------------------------*/
   /* PF10 - BUNDL submit print request*/
   /*  */
   /* ----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* transfer to batch print PA400D*/
    ;
    XX0XS01(); /* Obtain current time*/
    ;
    /* -----------------------------------------------------*/
     /* Call subroutine TA0230 to find which enviroment*/
     /* the program is executing in, production or*/
     /* development.*/
    /* -----------------------------------------------------*/
    set TA3REC empty;
    TA3REC.TA3OPTN = "ASSIGN ";
    try
      call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
    end
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA3REC.TA3RTNCD == 0)          /* good return code*/
    else
      converseLib.validationFailed(8); /* error encountered with print request*/
      exit stack;
    end
    ;
    /* -----------------------------------------------------*/
     /* Determine if the user is in the production or test*/
     /* region and submit correct jcl for PA4001.*/
    /* -----------------------------------------------------*/
    if (TA3REC.TA3RGNID == "03") /* if on the production system*/
      if (PA0PW00.PA0PW-PROCESSING-AIR-FREIGHT == "Y")
        PA0P190(); /* FORMAT TEST PA4001 JCL*/
      else
        PA0P-193(); /* FORMAT TEST PA4002 JCL*/
      end
    else
      if (PA0PW00.PA0PW-PROCESSING-AIR-FREIGHT == "Y")
        PA0P191(); /* FORMAT TEST PA4001 JCL*/
      else
        PA0P-194(); /* FORMAT TEST PA4002 JCL*/
      end
    end
    ;
    PA0PW00.PA0PWSWR = "Y"; /* reselect workitems*/
    return;
  end
  ;
   /* ----------------------------------------------------------*/
     /* items have been selected and edited for*/
     /* manual adjustment process. set map2 switch*/
   /* ----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14) /* transfer to map2 process*/
    ;
    PA0PWSWD = "2"; /* map switch*/
    PA0PW00.PA0PWSWR = "Y";
    exit stack;
  end
  ;
   /* ----------------------------------------------------------*/
                       /* pf16*/
   /* change selected items to select code to 'c'*/
   /* update dproda.vpawrk01 for selected calc items*/
   /* only*/
  ;
   /* ----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* transfer to calcpa2050*/
    ;
    XX0XS01(); /* Obtain current time*/
    PA0PW00.PA0PWPBK = 0;
    ;
    PA0PWIX3 = 1; /* set index*/
    while (PA0PWIX3 <= PA0PWIX4) /* ix4 number of stored items*/
      if (PA0PW02.PACSEVAL[PA0PWIX3] == "S"
       || PA0PW02.PACSEVAL[PA0PWIX3] == "F")
        PA0PW02.PACSEVAL[PA0PWIX3] = "C"; /* set to calc*/
        VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW02.PA0PWGP2[PA0PWIX3];
        ;
        ;
        if (PA0PW02.PACORDTY[PA0PWIX3] == "6"
         || PA0PW02.PACORDTY[PA0PWIX3] == "7")
          ;
          XX1 = 1;
          while (XX1 <= 40) /* compute calc backout*/
            ;
            PA0PW00.PA0PWPBK = PA0PW00.PA0PWPBK + VPAWRK02.PACADJQT[XX1];
            PA0PW00.PA0PWPBK = PA0PW00.PA0PWPBK + VPAWRK02.PACFLADJ[XX1];
            XX1 = XX1 + 1;
          end
        end
        ;
        VPAWRKCP.ZZZCHGDT = XX0XW01.XX0XWDAT;
        VPAWRKCP.ZZZCHGTM = XX0XW01.XX0XWTIM;
        PA0PS-10(); /* update oa work items*/
      end
      PA0PWIX3 = PA0PWIX3 + 1;
    end
    ;
    /* THIS CODE IS TO PREVENT ADDING TWO TYPE '3' WORK RECORDS*/
    /* WHEN PF16 HIT TWICE.*/
    ;
    /* PART OF NSC INITIATIVE, VPAWRK02 HAS BEEN REPLACED BELOW WITH*/
    /* VPAWRK03 SO THAT REL-PLN-NBR CAN BE MAINTAINED - GREDDY 05/09/00*/
    ;
    if (PA0PW00.PA0PW-BULK-QTY-FLAG == "N")
      set VPAWRK03 empty;
      VPAWRK03.PA1OANBR = PA1REC.PA1OANBR;
      PA0PW00.PA0PWPBK = PA0PW00.PA0PWPBK * -1;
      VPAWRK03.PACFBQTY = PA0PW00.PA0PWPBK;
      ;
      VPAWRK03.PACORDTY = "3";
      PA0PS-13();
      PA0PW00.PA0PW-BULK-QTY-FLAG = "Y";
    end
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    /* -----------------------------------------------------*/
     /* Call subroutine TA0230 to find which enviroment*/
     /* the program is executing in, production or*/
     /* development.*/
    /* -----------------------------------------------------*/
    set TA3REC empty;
    TA3REC.TA3OPTN = "ASSIGN ";
    try
      call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
    end
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA3REC.TA3RTNCD == 0)          /* good return code*/
    else
      converseLib.validationFailed(8); /* error encountered with print request*/
      exit stack;
    end
    ;
    /* RESET WARNING FOR DUPLICATE RTA RECORDS*/
    ;
    PA0PW00.PA0PW-DUP-RTA-WARNING = "N";
    ;
    /* -----------------------------------------------------*/
     /* Determine if the user is in the production or test*/
     /* region and submit correct jcl for PA2051.*/
    /* -----------------------------------------------------*/
    if (TA3REC.TA3RGNID == "03") /* if on the production system*/
      PA0P170(); /* format production jcl*/
    else
      PA0P171(); /* format test jct*/
    end
    ;
    PA0PW00.PA0PWSWR = "Y"; /* reselect workitems*/
    return;
  end
  ;
   /* ----------------------------------------------------------*/
     /* PF20 SIZE RUN CHANGE*/
   /* ----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf20) /* transfer to map3 process*/
    ;
    PA0PWSWD = "3"; /* map switch*/
    PA0PW00.PA0PWSWR = "Y";
    exit stack;
    ;
  end
  ;
  ;
  ;
   /* ------------------ END OF PROCESS PA0P160 ------------------*/
  ;
end // end PA0P-160

// COUNT CALC 'P' WORK RECORDS
Function PA0P-16001()
   /* ------------------------------------------------------------*/
   /* COUNT THE NUMBER OF DPRODA.VPAWRK02 RECORDS WITH A*/
   /* PA-USER-PROD-ID = 'P'. THESE RECORDS INDICATE THAT THE*/
   /* CALC HAS BEEN RUN AND AN ADJUSTMENT NEEDS TO BE MADE.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPAWRK02" (PA0PW09, SQLCA, VPAWRK02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      ;
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "160"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "COUNT CALC REC";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0P160"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK02"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* Move to displayable field*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PA0P-16001 --------------------*/
  ;
end // end PA0P-16001

// PROD JCL - PA0PT04 PA4002
Function PA0P-185()
   /* ------------------------------------------------------------*/
    /* P R O D U C T I O N   J C L   -   P A 4 0 0 2  - PA0PT04*/
    /*  */
    /* REPORT SENT TO BUNDL AND THEN REMOTE PRINTER BASED ON*/
    /* USERID.*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  XX2 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (XX2 > 0) /* Until end of table*/
    ;
    if (PA0PT04.TARTYPE[XX2] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters for PA4001*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT04.TARTYPE[XX2]; /* Type*/
      ;
      PA0P183(); /* formats JCL*/
      ;
    else
      if (PA0PT04.TARTYPE[XX2] == "S") /* Parameters statement*/
        ;
         /* ------------------------------------------------------------*/
          /* Format program parameters for PC1111*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = PA0PT04.TARTYPE[XX2]; /* Type*/
        ;
        PA0P-199(); /* formats PARM*/
        ;
      else
         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = PA0PT04.TARJCL[XX2]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0PT04.TARTYPE[XX2]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT04.TARJCL[XX2] == "/*EOF") /* End of table*/
      ;
      XX2 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX2 = XX2 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  PA0P184(); /* Submit the JCL*/
  ;
end // end PA0P-185

// TEST JCL - PA0PT14 - PA4002
Function PA0P-186()
   /* ------------------------------------------------------------*/
    /* T E S T   J C L  -  P A 4 0 0 2 - PA0PT14*/
    /*  */
    /* REPORT SENT TO BUNDL AND THEN REMOTE PRINTER*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  XX2 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (XX2 > 0) /* Until end of table*/
    ;
    if (PA0PT14.TARTYPE[XX2] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters for PA4001*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT14.TARTYPE[XX2]; /* Type*/
      ;
      PA0P183(); /* formats JCL*/
      ;
    else
      ;
      if (PA0PT14.TARTYPE[XX2] == "S") /* Parameters statement*/
        ;
         /* ------------------------------------------------------------*/
          /* Format program parametersfor PC1111*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = PA0PT14.TARTYPE[XX2]; /* Type*/
        ;
        PA0P-199(); /* formats PARM*/
        ;
      else
        ;
         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = PA0PT14.TARJCL[XX2]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0PT14.TARTYPE[XX2]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT14.TARJCL[XX2] == "/*EOF") /* End of table*/
      ;
      XX2 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX2 = XX2 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  PA0PS-80-S-PRINTER(); /* Submit the JCL*/
  ;
end // end PA0P-186

// PROD JCL - PA0PT05 - PA4002
Function PA0P-193()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L   -   P A 4 0 0 2  - PA0PT05*/
   /*  */
   /* REPORT SENT TO BUNDL FOR VIEW ONLY*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  PA0PW00.XX1 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (PA0PW00.XX1 > 0) /* Until end of table*/
    ;
    if (PA0PT05.TARTYPE[XX1] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters for PA4001*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT05.TARTYPE[XX1]; /* Type*/
      ;
      PA0P183(); /* formats JCL*/
      ;
    else
      if (PA0PT05.TARTYPE[XX1] == "S") /* Parameters statement*/
        ;
         /* ------------------------------------------------------------*/
          /* Format program parameters for PC1111*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = PA0PT05.TARTYPE[XX1]; /* Type*/
        ;
        PA0P-199(); /* formats PARM*/
        ;
      else
         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = PA0PT05.TARJCL[XX1]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0PT05.TARTYPE[XX1]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT05.TARJCL[XX1] == "/*EOF") /* End of table*/
      ;
      XX1 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX1 = XX1 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  PA0P192(); /* Submit the JCL*/
  ;
end // end PA0P-193

// TEST JCL - PA0PT15 - PA4002
Function PA0P-194()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L   -   P A 4 0 0 2 - PA0PT15*/
   /*  */
   /* REPORT IS SENT TO BUNDL FOR VIEW ONLY.*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  PA0PW00.XX1 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (PA0PW00.XX1 > 0) /* Until end of table*/
    ;
    if (PA0PT15.TARTYPE[XX1] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters for PA4001*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT15.TARTYPE[XX1]; /* Type*/
      ;
      PA0P183(); /* formats JCL*/
      ;
    else
      if (PA0PT15.TARTYPE[XX1] == "S") /* Parameters statement*/
        ;
         /* ------------------------------------------------------------*/
          /* Format program parameters for PC1111*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = PA0PT15.TARTYPE[XX1]; /* Type*/
        ;
        PA0P-199(); /* formats PARM*/
        ;
      else
         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = PA0PT15.TARJCL[XX1]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0PT15.TARTYPE[XX1]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT15.TARJCL[XX1] == "/*EOF") /* End of table*/
      ;
      XX1 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX1 = XX1 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  PA0P192(); /* Submit the JCL*/
  ;
end // end PA0P-194

// FORMAT PARM CARD FOR PC1111
Function PA0P-199()
   /* ------------------------------------------------------------*/
   /* FORMAT THE PARM CARD.*/
   /* ------------------------------------------------------------*/
  ;
   /* THE PARM FOR PC1111 SHOULD BE SET UP WITH THE SINGLE O/A NUMBER.*/
   /* PC1111 IS ONLY EXECUTED IF THE AIR FREIGHT O/A IS TO IMMEDIATELY*/
   /* UPDATE PO.*/
  ;
  PA0PW00.PA0PW-PC1111-DAY = "DAY";
  PA0PW00.PA0PW-PC1111-LOCK = " ";
  PA0PW00.PA0PW-PC1111-UPDATE = "UPDATE";
  PA0PW00.PA0PW-PC1111-SINGLE-OA = PA0PW00.PA0PWOAJ;
  ;
  TA6REC.TARJCL[TA6INDEX] = PA0PW00.PA0PW-PC1111-PARM;
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  ;
end // end PA0P-199

// Process From/TO Screen
Function PA0P-200()
   /* ------------------------------------------------------------*/
  ;
   /* 1) find the selected data to adjust and storein display sto*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  PA0P-210();
  ;
  while (converseVar.eventKey not pf3)
    ;
    PA0P-220(); /* Format and display the map*/
    ;
    PA0P230(); /* CHECK ATTENTION IDENTIFIER*/
    ;
    PA0P-240(); /* RESET HIGHLIGHTED FIELDS*/
    ;
    PA0P-250(); /* VERIFY USER INPUT*/
    ;
    PA0P-260(); /* PROCESS VALID INPUT REQUEST*/
    ;
  end
  ;
  if (converseVar.eventKey is pf3)
    PA0PW00.PA0PWSWD = "1"; /* map switch*/
    PA0PW00.PA0PWSWR = "N"; /* reselect data*/
    PA0PW00.PA0PWTRW = "N"; /* init trade restrictions warning*/
    set PA0PW11 empty; /* CLEAR OUT BOTTOM LINE FIELDS*/
    exit stack;
  end
end // end PA0P-200

// Obtain the data to display
Function PA0P-210()
   /* ------------------------------------------------------------*/
     /* sales orders*/
     /* balance to ship*/
     /* po items*/
     /* factory adjustment qty*/
     /* select bottom  rows*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PW00.PA0PWSWR != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Previous errors exist*/
    return;
  end
  ;
  ;
  set PA0PM002 initial;
  ;
  PA0P-215(); /* go get the valid factories for this*/
                                   /* o/a*/
  ;
  move PA0PWIX1 to XX1 withV60Compat; /* max items reset sel flag*/
  ;
  while (XX1 >= 1)
    ;
    if (PA0PW02.PACSEVAL[XX1] == "F" /* from item*/
     || PA0PW02.PACSEVAL[XX1] == "T") /* to item*/
      PA0PW02.PACSEVAL[XX1] = " "; /* item*/
    end
    XX1 = XX1 - 1;
  end
  ;
  PA0PW00.PA0PWBCL = 1; /* starting column*/
  PA0PW03.PACSEVAL = " ";
  PA0PW04.PACSEVAL = " ";
   /* -----------------------------------------------------------|*/
            /* For Sales Orders and FA's                        |*/
            /* move adjustment qty to order qty on map          |*/
   /* -----------------------------------------------------------|*/
  ;
  if (PA0PW03.PACORDTY == "1"
   || PA0PW03.PACORDTY == "2"
   || PA0PW03.PACORDTY == "4"
   || PA0PW03.PACORDTY == "5")
    XX1 = 1;
    ;
    while (XX1 <= 40)
      PA0PW03.PA0PWORD[XX1] = PA0PW03.PACFLADJ[XX1];
      XX1 = XX1 + 1;
      ;
    end
  end
  ;
  ;
   /* -----------------------------------------------------------|*/
            /* For PO Items, From and TO                        |*/
            /* compute OnOrder and BTS                          |*/
            /* gives a new starting if readjusting              |*/
   /* -----------------------------------------------------------|*/
  ;
  ;
  if (PA0PW03.PACORDTY == "6"
   || PA0PW03.PACORDTY == "7"
   || PA0PW03.PACORDTY == "8")
    XX1 = 1;
    ;
    while (XX1 <= 40)
      PA0PW03.PA0PWORD[XX1] = PA0PW03.PACWRKQT[XX1] + PA0PW03.PACFLADJ[XX1];
      PA0PW03.PA0PWBTS[XX1] = PA0PW03.PACADJQT[XX1] + PA0PW03.PACFLADJ[XX1];
      XX1 = XX1 + 1;
      ;
    end
  end
  ;
  ;
  if (PA0PW04.PACORDTY == "6"
   || PA0PW04.PACORDTY == "7"
   || PA0PW04.PACORDTY == "8")
    XX1 = 1;
    ;
    while (XX1 <= 40)
      PA0PW04.PA0PWORD[XX1] = PA0PW04.PACWRKQT[XX1] + PA0PW04.PACFLADJ[XX1];
      PA0PW04.PA0PWBTS[XX1] = PA0PW04.PACADJQT[XX1] + PA0PW04.PACFLADJ[XX1];
      XX1 = XX1 + 1;
      ;
    end
  end
  ;
   /* -------------------------------------------------------*/
   /* set pa0pw05 and pa0pw06 equal to pa0pw03 and pa0pw04*/
   /* use w05 and w06 to control adds and deletes*/
   /* -------------------------------------------------------*/
  ;
  PA0PW05.PA0PWDET = PA0PW03.PA0PWDET;
  PA0PW05.PA0PWDRT = PA0PW03.PA0PWDRT;
  PA0PW05.FY1FCTYC = PA0PW03.FY1FCTYC;
  PA0PW05.YMTCD = PA0PW03.YMTCD;
  ;
  PA0PW06.PA0PWDET = PA0PW04.PA0PWDET;
  PA0PW06.PA0PWDRT = PA0PW04.PA0PWDRT;
  PA0PW06.FY1FCTYC = PA0PW04.FY1FCTYC;
  PA0PW06.YMTCD = PA0PW04.YMTCD;
  PA0PW06.XCTCD = PA0PW04.XCTCD;
  PA0PW06.PC-XCT-ORIG-CD = PA0PW04.PC-XCT-ORIG-CD;
  ;
  PA0PW05.PA0PW-CUST = PA0PW03.PC2CUXID; /* customer xref*/
  PA0PW05.PA0PW-WHSE = PA0PW03.XWHCD; /* whse cd*/
  ;
  PA0PW06.PA0PW-CUST = PA0PW04.PC2CUXID; /* customer xref*/
  PA0PW06.PA0PW-WHSE = PA0PW04.XWHCD; /* whse cd*/
  ;
  ;
  ;
   /* -----------------------------------------------------------|*/
            /* obtain bottom lines                              |*/
   /* -----------------------------------------------------------|*/
  ;
  PA0PS15(); /* get bottom lines*/
  ;
  ;
   /* -----------------------------------------------------------|*/
            /* obtain valid size information                    |*/
   /* -----------------------------------------------------------|*/
  ;
  ;
  PA0P214(); /* size translation*/
  ;
  XX1 = 1;
  PA0PW00.PA0PWNVZ = 0; /* valid size count*/
  while (XX1 <= 40)
    if (PG3REC.SY5SZID[XX1] != 0)
      PA0PW00.PA0PWNVZ = PA0PW00.PA0PWNVZ + 1; /* valid size count*/
    end
    XX1 = XX1 + 1;
  end
  ;
  ;
  if (PG3RETCD > 4)
    PA0PW00.XXXMSGNO = 138; /* invalid sizing*/
    PA0PW00.XXXMODID = "210";
  end
  ;
  ;
  ;
  PA0PW00.PA0PWSWR = "N"; /* Request for data switch*/
  ;
   /* ------------------------------------------------------------*/
                      /* END PA0P210*/
   /* ------------------------------------------------------------*/
end // end PA0P-210

// get valid fcty for from/to
Function PA0P-215()
   /* ------------------------------------------------------------*/
   /* Set pa4rec empty*/
   /* set up cursor*/
   /*  */
   /* ------------------------------------------------------------*/
  ;
  set PA4REC empty; /* clear record*/
  PA4REC.PA1OANBR = PA1REC.PA1OANBR; /**/
  PA4REC.YESCD = "*"; /**/
  ;
  PA0PS-76-IO4810-S1(); /* select set pa factory records*/
  ;
  XXA = 1;
  ;
  while (SQLCA.VAGen_SQLCODE != 100) /* Row not found*/
    ;
    PA0PS-77-IO4810-N1();
    ;
    if (SQLCA.VAGen_SQLCODE != 100)
      PA0PW-VALID-FCTY[XXA] = PA4REC.FY1FCTYC;
      XXA = XXA + 1;
    end
  end
  ;
  PA0PS-78-IO4810-C1();
  ;
  ;
  ;
  ;
  ;
  ;
   /* ------------- end of process pa0p-215-----------------------*/
  ;
  ;
end // end PA0P-215

// Format and display the map
Function PA0P-220()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  PA0PW00.PA0PWERR = "N";
  ;
  if (converseVar.validationMsgNum != 0) /* Errors*/
    ;
    PA0PW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  else
    ;
    PA0P-227(); /* Format the map*/
    ;
    if (converseVar.validationMsgNum > 0)
       /* NEXT SENTENCE*/
    else
      if (PA0PWFRF == "Y"
       && PA0PWCU1 > "    ")
        PA0PM002.PA0PMTCU = PA0PM002.PA0PMFCU;
        set PA0PM002.PA0PMTCU skip;
        PA0PM002.PA0PM-TO-WHSE = PA0PM002.PA0PM-FRM-WHSE;
        set PA0PM002.PA0PM-TO-WHSE skip;
        if (PA0PM002.PA0PMTFA != " ")
          set PA0PM002.PA0PMTAJ[1] cursor;
        end
      end
    end
    ;
    if (converseVar.validationMsgNum != 0) /* Errors*/
      PA0PW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    PA0PW00.PA0PWERR = "Y";
  end
  ;
  PA0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (PA0PM002.PA0PM-SO-CUOID[1] == 0
   && PA0PM002.PA0PM-SO-NORID[1] == 0)
    set PA0PM002.PA0PM-SO-CUOID[1] skip, invisible;
    set PA0PM002.PA0PM-SO-NORID[1] skip, invisible;
    set PA0PM002.PA0PM-FROM-MSR-IND skip, invisible;
  else
    set PA0PM002.PA0PM-SO-CUOID[1] initialAttributes;
    set PA0PM002.PA0PM-SO-NORID[1] initialAttributes;
    set PA0PM002.PA0PM-FROM-MSR-IND initialAttributes;
  end
  ;
  if (PA0PM002.PA0PM-SO-CUOID[2] == 0
   && PA0PM002.PA0PM-SO-NORID[2] == 0)
    set PA0PM002.PA0PM-SO-CUOID[2] skip, invisible;
    set PA0PM002.PA0PM-SO-NORID[2] skip, invisible;
    set PA0PM002.PA0PM-TO-MSR-IND skip, invisible;
  else
    set PA0PM002.PA0PM-SO-CUOID[2] initialAttributes;
    set PA0PM002.PA0PM-SO-NORID[2] initialAttributes;
    set PA0PM002.PA0PM-TO-MSR-IND initialAttributes;
  end
  ;
  if (PA0PW00.XXXMSGNO != 0)
    ;
    PA0PM002.XXXMODID = PA0PW00.XXXMODID; /* Module id*/
    if (PA0PW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PA0PW00.XXXMSGNO);
    end /* Message number*/
    set PA0PM002 alarm; /* Indicate sound alarm*/
    ;
    if (converseVar.validationMsgNum == 300 /* MUST MAINTAIN MUSICAL SIZE RUN RATIO*/
     || converseVar.validationMsgNum == 301) /* ERROR FROM OP297D*/
      if (PA0PM002.PA0PM-TO-MSR-IND == "MSR")
        set PA0PM002.PA0PM-SO-CUOID[2] bold;
        set PA0PM002.PA0PM-SO-NORID[2] bold;
        set PA0PM002.PA0PM-TO-MSR-IND bold;
      else
        set PA0PM002.PA0PM-SO-CUOID[1] bold;
        set PA0PM002.PA0PM-SO-NORID[1] bold;
        set PA0PM002.PA0PM-FROM-MSR-IND bold;
      end
      ;
      set PA0PM002.PA0PMTAT bold;
      ;
      sysVar.arrayIndex = 8;
      while (sysVar.arrayIndex > 0)
        if (PA0PM002.PA0PMTAJ[sysVar.arrayIndex] != 0)
          set PA0PM002.PA0PMTAJ[sysVar.arrayIndex] cursor, bold;
        end
        sysVar.arrayIndex = sysVar.arrayIndex - 1;
      end
      ;
    end
    ;
  end
  ;
  set PA0PM-CFP-JAP-LBL skip, invisible;
  set PA0PM-CFP-JAP-NBR skip, invisible;
  set PA0PM-CFP-CAN-LBL skip, invisible;
  set PA0PM-CFP-CAN-NBR skip, invisible;
  ;
  if (PA1REC.YETCD == "NA" || 
  PA1REC.YETCD == "NR" || 
  PA1REC.YETCD == "NM" || 
  PA1REC.YETCD == "ND" || 
  PA1REC.YETCD == "NI" || 
  PA1REC.YETCD == "NT" || 
  PA1REC.YETCD == "NS" || 
  PA1REC.YETCD == "NO" || 
  PA1REC.YETCD == "DN")
    PC2REC.PC2CUXID = PA0PM002.PA0PMFCU;
    if (PC2REC.PC2CUXID != " ")
      PC2REC.XGPCD = "02";
      PA0PS17();
      if (PC2REC.XCTCD == "JAPA")
        PA0PW14.PA0PW-CUST-FROM-XCTCD = PC2REC.XCTCD;
      end
    end
    PC2REC.PC2CUXID = PA0PM002.PA0PMTCU;
    if (PC2REC.PC2CUXID != " ")
      PC2REC.XGPCD = "02";
      PA0PS17();
      if (PC2REC.XCTCD == "JAPA")
        PA0PW14.PA0PW-CUST-FROM-XCTCD = PC2REC.XCTCD;
      end
    end
    ;
    if (PA0PW14.PA0PW-CUST-FROM-XCTCD == "JAPA")
      PA0PM-CFP-JAP-LBL = "JAPAN  OA : ";
      set PA0PM-CFP-JAP-LBL initialAttributes;
      set PA0PM-CFP-JAP-NBR normal;
      VPACFP01.PA1OANBR = PA1REC.PA1OANBR;
      VPACFP01.XCTCD = PA0PW14.PA0PW-CUST-FROM-XCTCD;
      PA0PS-94-VPACFP-S1();
      if (SQLCA.VAGen_SQLCODE == 0)
        if (PA0PW14.PA0PW-CFP-OA-FROM-NBR == 0)
          PA0PM-CFP-JAP-NBR = VPACFP01.FFOANBR;
        end
      end
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    if (PA0PW00.PA0PW-UPC-WARNING-PRINTED == "Y")
       /* NEXT SENTENCE*/
    else
      if (PA0PW00.PA0PWRFG == "Y")
        converseLib.validationFailed(157);
        PA0PW00.PA0PWRFG = "N";
        PA0PW00.PA0PW-UPC-WARNING-PRINTED = "Y";
      end
    end
  end
  ;
  if (converseVar.validationMsgNum == 999) /* ERROR FROM OP297D*/
    PA0PM002.VAGen_EZEMSG = PAMSREC.PAMS-RETURN-MSG;
    converseLib.validationFailed(0);
  end
  ;
   /* IF EUROPEAN O/A, ALLOW INQUIRY ONLY*/
  ;
  if (PA0PM002.PA1OANBR > 199999
   && PA0PM002.PA1OANBR < 300000)
    set PA0PM002.PA0PM-PF9-LABEL skip, invisible;
    set PA0PM002.PA0PM-PF13-LABEL skip, invisible;
  end
  ;
  if (PA0PM002.PA0PMTMD == " ")
    set PA0PM002.PA0PMTMD cursor, bold;
  end
  ;
  converse PA0PM002 ;
  ;
  PA0PW00.XXXMODID = " "; /* Module id*/
  PA0PW00.XXXMSGNO = 0; /* Reset message number*/
end // end PA0P-220

// Format the data on the map
Function PA0P-227()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
   /* SET PA0PM002 CLEAR;*/
  ;
  XXA = 1; /* max fctys*/
  ;
  while (XXA <= 4)
    ;
    PA0PM-VAL-FCTY[XXA] = PA0PW-VALID-FCTY[XXA]; /* valid factory*/
    XXA = XXA + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map*/
   /* ------------------------------------------------------------*/
  ;
  XX1 = 1;
  PA0PW00.PA0PWBTE = "N";
  ;
  while (XX1 <= 40)
    ;
    PA0PW00.PA0PWXBS = PA0PW03.PA0PWBTS[XX1] + PA0PW03.PA0PWCAJ[XX1];
     /* keep track of the on order quantitiy to make sure that the*/
     /* user doesn't go below this quantity.  pa0pw03 contains the*/
     /* "from" item.*/
    PA0PW00.PA0PWXNP = PA0PW03.PA0PWORD[XX1] + PA0PW03.PA0PWCAJ[XX1];
    if (PA0PW03.PACORDTY == "6"
     || PA0PW03.PACORDTY == "7"
     || PA0PW03.PACORDTY == "8")
      if (PA0PW00.PA0PWXBS < 0
       && PA1REC.YETCD != "SE")
        converseLib.validationFailed(128); /* BALANCE TO SHIP IS NEGATIVE*/
        PA0PW00.XXXMODID = "227";
        PA0PW00.PA0PWBTE = "Y";
        XX1 = 41;
      else
         /* if less than zero, the user has gone below the on order*/
         /* quantity.*/
        if (PA0PW00.PA0PWXNP < 0)
          converseLib.validationFailed(206); /* ON ORDER QUANTITY IS NEGATIVE*/
          PA0PW00.XXXMODID = "227";
          PA0PW00.PA0PWBTE = "Y";
          XX1 = 41;
        end
      end
    end
    ;
    if (XX1 <= 40)
       /* pa0pw04 contains the "to" item*/
      PA0PW00.PA0PWXBS = PA0PW04.PA0PWBTS[XX1] + PA0PW04.PA0PWCAJ[XX1];
      PA0PW00.PA0PWXNP = PA0PW04.PA0PWORD[XX1] + PA0PW04.PA0PWCAJ[XX1];
      if (PA0PW00.PA0PWXBS < 0
       && PA1REC.YETCD != "SE")
        PA0PW00.PA0PWBTE = "Y";
        converseLib.validationFailed(128); /* BALANCE TO SHIP IS NEGATIVE*/
        PA0PW00.XXXMODID = "227";
        XX1 = 41;
      else
         /* if less than zero, the user has gone below the on order*/
         /* quantity.*/
        if (PA0PW00.PA0PWXNP < 0)
          converseLib.validationFailed(206); /* ON ORDER QUANTITY IS NEGATIVE*/
          PA0PW00.XXXMODID = "227";
          PA0PW00.PA0PWBTE = "Y";
          XX1 = 41;
        end
      end
    end
    ;
    XX1 = XX1 + 1;
    ;
  end
  ;
  ;
  PA0PM002.PA0PMSCR = 8;
  PA0PM002.PAWBUYYM = PAWREC.PAWBUYYM; /* Current buy date*/
  PA0PM002.PA0PWSDT = PA0PW00.PA0PWSDT; /* b/l setup dte*/
  PA0PM002.PT3YYMM = PA5REC.PT3YYMM; /* b/l date*/
  PA0PM002.PA-AFRGT-RQT-ID = PA1REC.PA-AFRGT-RQT-ID; /* AF NUMBER*/
  PA0PM002.PA1OANBR = PA1REC.PA1OANBR; /* o/a number*/
  PA0PM002.SY1STNBR = PA1REC.SY1STNBR; /* Style number*/
  PA0PM002.SY2CLRID = PA1REC.SY2CLRID; /* Color identification*/
  PA0PM002.XDMCD = PA1REC.XDMCD; /* Dimension code*/
  PA0PM002.YETCD = PA1REC.YETCD; /* o/a type code*/
  PA0PM002.YESCD = PA1REC.YESCD; /* Status code*/
  PA0PM002.PA0PMFID = PA0PW01.PA0PWPID; /* po id*/
  PA0PM002.PA0PMTID = PA0PW01.PA0PWPID; /* po id*/
  ;
  PA0PW00.XX1 = 1;
  while (PA0PW00.XX1 <= 11
   && PA0PW11.PA0PW-BL-OA[XX1] != 0)
    PA0PM002.PA0PM-BL-OA[XX1] = PA0PW11.PA0PW-BL-OA[XX1];
    PA0PW00.XX1 = PA0PW00.XX1 + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* format the size descriptions*/
   /* ------------------------------------------------------------*/
  ;
  PA0P-22701();
  ;
   /* ------------------------------------------------------------*/
   /* format factory adjustments "FROM" part of screen*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PW03.PACORDTY == "1" /* fCTORY ADJUSTMENT ROW*/
   || PA0PW03.PACORDTY == "2") /* factory adjustment row*/
    PA0PM002.PA0PMFD1 = "FCTY:";
    PA0PM002.PA0PMFDN[1] = " FA:"; /* desc of adjusting item*/
    PA0PM002.PA0PMFDN[3] = "REM:";
    PA0PM002.PA0PMFST = PA0PW03.PACFBQTY; /* total adjustment*/
    PA0PM002.PA0PMFFA = PA0PW03.FY1FCTYC; /* fcty code*/
    set PA0PM002.PA0PMFD2 skip, invisible;
    set PA0PM002.PA0PMFD3 skip, invisible;
    set PA0PM002.PA0PMFD4 skip, invisible;
    set PA0PM002.PA0PMFD5 skip, invisible;
    set PA0PM002.PA0PMFDN[4] skip, invisible;
    set PA0PM002.PA0PMFDN[5] skip, invisible;
    ;
    set PA0PM002.PA0PMFFA normal;
    set PA0PM002.PA0PMFCU skip, invisible;
    set PA0PM002.PA0PM-FRM-WHSE skip, invisible;
    set PA0PM002.PA0PMFMD skip, invisible;
    set PA0PM002.PA0PMFRT skip, invisible;
    set PA0PM002.PA0PMFET skip, invisible;
    set PA0PM002.PA0PM-SO-CUOID[1] skip, invisible;
    set PA0PM002.PA0PM-SO-NORID[1] skip, invisible;
    set PA0PM002.PA0PM-FROM-MSR-IND skip, invisible;
    ;
    /* Look for style on components program table*/
    ;
    if (PA1REC.SY1STNBR > "      ")
      VCMPPG01.FY1FCTYC = PA0PW03.FY1FCTYC; /* fcty code*/
      PA0P-22702(); /* look for style on components table*/
      if (SQLCA.VAGen_SQLCODE == 0)
        set PA0PM002.PA0PMFFA bold, skip;
      end
      ;
    end
  end
  ;
   /* ---------------------------------------------------*/
   /* sales orders order type 4 only*/
   /* ---------------------------------------------------*/
  ;
  if (PA0PW03.PACORDTY == "4") /* sales order*/
    PA0PM002.PA0PMFDN[1] = "SO :"; /* desc of adjusting item*/
    PA0PM002.PA0PMFDN[3] = "REM:"; /* desc of adjusting item*/
    PA0PM002.PA0PMFCU = PA0PW03.PC2CUXID; /* customer xref*/
    PA0PM002.PA0PMTCU = PA0PW03.PC2CUXID; /* customer xref*/
    PA0PM002.PA0PM-FRM-WHSE = PA0PW03.XWHCD; /* whse for ind dir*/
    PA0PM002.PA0PM-TO-WHSE = PA0PW03.XWHCD; /**/
    PA0PM002.PA0PMFD2 = "XREF:"; /* customer xref*/
    PA0PM002.PA0PMFST = PA0PW03.PA0PWLT4; /* total adjustment*/
    PA0PW00.PA0PW-SO-OP1CUOID = PA0PW03.OP1CUOID; /* cust part*/
    PA0PM002.PA0PM-SO-CUOID[1] = PA0PW00.PA0PW-SO-OP1CUOID;
    /* MOVE PA0PW03.OP1NORID TO PA0PW00.PA0PW-SO-CONV-NIKE-ID;/* nike id*/
    /* MOVE PA0PW00.PA0PW-SO-CONV-NORID TO PA0PM002.PA0PM-SO-NORID(1);*/
    PA0PM002.PA0PM-SO-NORID[1] = PA0PW03.OP1NORID;
    ;
    /* PA0349: MUSICAL SIZE RUN INDICATOR*/
    ;
    if (PA0PW03.PA0PW-MSR-IND == "M") /**/
      PA0PM002.PA0PM-FROM-MSR-IND = "MSR";
    end
    ;
    set PA0PM002.PA0PMFFA skip, invisible;
    set PA0PM002.PA0PM-FRM-WHSE skip;
    set PA0PM002.PA0PMFD2 skip;
    set PA0PM002.PA0PMFCU skip;
    set PA0PM002.PA0PMFMD skip, invisible;
    set PA0PM002.PA0PMFRT skip, invisible;
    set PA0PM002.PA0PMFET skip, invisible;
    ;
    set PA0PM002.PA0PMFD1 skip, invisible;
    set PA0PM002.PA0PMFD3 skip, invisible;
    set PA0PM002.PA0PMFD4 skip, invisible;
    set PA0PM002.PA0PMFD5 skip, invisible;
    set PA0PM002.PA0PMFDN[5] skip, invisible;
    set PA0PM002.PA0PMFDN[4] skip, invisible;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format Stock Transfer "FROM" part of screen*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PW03.PACORDTY == "5") /* Stock Transfer Row*/
    PA0PM002.PA0PMFD1 = "FCTY:";
    PA0PM002.PA0PMFDN[1] = " ST:"; /* desc of adjusting item*/
    PA0PM002.PA0PMFDN[3] = "REM:";
    PA0PM002.PA0PM-XFR-CTRY-LBL = "STOCK XFR CTRY;";
    PA0PM002.PA0PM-MCO-LBL = "MCO;";
    PA0PM002.PA0PMFST = PA0PW03.PACFBQTY; /* total adjustment*/
    PA0PM002.PA0PMFFA = PA0PW03.FY1FCTYC; /* fcty code*/
    set PA0PM002.PA0PMFD2 skip, invisible;
    set PA0PM002.PA0PMFCU skip, invisible;
    set PA0PM002.PA0PMFD3 skip, invisible;
    set PA0PM002.PA0PMFMD skip, invisible;
    set PA0PM002.PA0PMFD4 skip, invisible;
    set PA0PM002.PA0PMFRT skip, invisible;
    set PA0PM002.PA0PMFD5 skip, invisible;
    set PA0PM002.PA0PMFET skip, invisible;
    set PA0PM002.PA0PMFDN[4] skip, invisible;
    set PA0PM002.PA0PMFDN[5] skip, invisible;
    set PA0PM002.PA0PM-FRM-WHSE-DSC skip, invisible;
    set PA0PM002.PA0PM-FRM-WHSE skip, invisible;
    ;
    set PA0PM002.PA0PMFFA normal;
    set PA0PM002.PA0PMFCU normal;
    set PA0PM002.PA0PM-MCO-CTRY-CD normal;
    set PA0PM002.PA0PM-XFR-CTRY-CD normal;
    set PA0PM002.PA0PM-FRM-WHSE normal;
    set PA0PM002.PA0PMFMD skip, invisible;
    set PA0PM002.PA0PMFRT skip, invisible;
    set PA0PM002.PA0PMFET skip, invisible;
    set PA0PM002.PA0PM-SO-CUOID[1] skip, invisible;
    set PA0PM002.PA0PM-SO-NORID[1] skip, invisible;
    set PA0PM002.PA0PM-FROM-MSR-IND skip, invisible;
    set PA0PM002.PA0PM-XFR-CTRY-LBL skip;
    set PA0PM002.PA0PM-MCO-LBL skip;
    ;
  end
  ;
    /* ---------------------------------------------------*/
      /* PO Items from PO DATA BASE*/
    /* ---------------------------------------------------*/
  ;
  if (PA0PW03.PACORDTY == "6" 
   || PA0PW03.PACORDTY == "7" /* new po item*/
   || PA0PW03.PACORDTY == "8") /* po item from calc*/
    PA0PM002.PA0PMFDN[1] = " PO:"; /* desc of adjusting item*/
    PA0PM002.PA0PMFDN[3] = "NPO:"; /* new po item*/
    PA0PM002.PA0PMFFA = PA0PW05.FY1FCTYC; /* fcty code*/
    PA0PM002.PA0PMFCU = PA0PW05.PA0PW-CUST; /* destination*/
    PA0PM002.PA0PM-FRM-WHSE = PA0PW05.PA0PW-WHSE; /* destination*/
    ;
    PA0PM002.PA0PMFMD = PA0PW05.YMTCD; /* transporation*/
    PA0PM002.PA0PMFRT = PA0PW05.PA0PMFRT; /* rta date*/
    PA0PM002.PA0PMFET = PA0PW05.PA0PMFET; /* ets date*/
    ;
    ;
    if (PA0PW03.PACORDTY == "6")
      PA0PM002.PA0PMFST = PA0PW03.PA0PWLT3 + PA0PW03.PA0PWLT1; /* org + adj*/
      ;
    else
      PA0PM002.PA0PMFST = PA0PW03.PA0PWLT4;
                                   /* total po ordernew items*/
    end
    ;
    if (PA0PW03.PACORDTY == "6"
     || PA0PW03.PACORDTY == "7") /* new po item*/
      if (PA0PW03.XDSCD == "1" /* direct ship*/
       || PA0PW03.XDSCD == "2") /* indirect direct ship*/
        PA0PW00.PA0PW-SO-OP1CUOID = PA0PW03.OP1CUOID; /* cust part*/
        PA0PM002.PA0PM-SO-CUOID[1] = PA0PW00.PA0PW-SO-OP1CUOID;
                                  /* MOVE PA0PW03.OP1NORID TO*/
                                   /* PA0PW00.PA0PW-SO-CONV-NIKE-ID;/* nike*/
                                   /* id*/
        /* MOVE PA0PW00.PA0PW-SO-CONV-NORID TO PA0PM002.PA0PM-SO-NORID(1);*/
        PA0PM002.PA0PM-SO-NORID[1] = PA0PW03.OP1NORID; /* nike id*/
        ;
        /* PA0349: MUSICAL SIZE RUN INDICATOR*/
        ;
        if (PA0PW03.PA0PW-MSR-IND == "M")
          PA0PM002.PA0PM-FROM-MSR-IND = "MSR";
        end
        ;
      end
    end
    ;
    set PA0PM002.PA0PMFFA skip;
    set PA0PM002.PA0PM-FRM-WHSE skip;
    set PA0PM002.PA0PMFCU skip;
    set PA0PM002.PA0PMFMD skip;
    ;
    if (PA1REC.YETCD == "DM"
     || PA1REC.YETCD == "NM")
      set PA0PM002.PA0PMFRT skip;
    else
      set PA0PM002.PA0PMFRT skip;
    end
    ;
    /* Look for style on components program table*/
    ;
    if (PA1REC.SY1STNBR > "     ")
      VCMPPG01.FY1FCTYC = PA0PW05.FY1FCTYC; /* fcty code*/
      PA0P-22702(); /* look for style on components table*/
      if (SQLCA.VAGen_SQLCODE == 0)
        set PA0PM002.PA0PMFFA bold, skip;
      end
    end
    ;
    ;
  end
  ;
   /* ---------------------------------------------------*/
              /* TO section of the map*/
              /* Only 6, 7, or 8 allowed.*/
   /* ---------------------------------------------------*/
  ;
  set OP1REC empty;
  ;
  if (PA0PW04.PACORDTY == "6")
    PA0PM002.PA0PMTPT = PA0PW04.PA0PWLT3 + PA0PW04.PA0PWLT1; /* org + adj*/
    ;
  else
    PA0PM002.PA0PMTPT = PA0PW04.PA0PWLT4; /* total po ordernew items*/
  end
  ;
  PA0PM002.PA0PMTFA = PA0PW06.FY1FCTYC; /* fcty code*/
  ;
  if (PA1REC.YETCD != "FT"
   && PA0PM002.PA0PMTFA == "  ")
    PA0PM002.PA0PMTFA = PA0PM-VAL-FCTY[1];
  end
  ;
  PA0PM002.PA0PMTCU = PA0PW06.PA0PW-CUST; /* destination*/
  PA0PM002.PA0PM-TO-WHSE = PA0PW06.PA0PW-WHSE; /* warehouse*/
  ;
  if (PA0PW04.PACORDTY == "6"
   || PA0PW04.PACORDTY == "7") /* new po item*/
    if (PA0PW04.XDSCD == "1" /* direct ship*/
     || PA0PW04.XDSCD == "2") /* indirect direct ship*/
      PA0PW00.PA0PW-SO-OP1CUOID = PA0PW04.OP1CUOID; /* cust part*/
      PA0PM002.PA0PM-SO-CUOID[2] = PA0PW00.PA0PW-SO-OP1CUOID;
      /* MOVE PA0PW04.OP1NORID TO PA0PW00.PA0PW-SO-CONV-NIKE-ID;/* nike id*/
      /* MOVE PA0PW00.PA0PW-SO-CONV-NORID TO PA0PM002.PA0PM-SO-NORID(2);*/
      PA0PM002.PA0PM-SO-NORID[2] = PA0PW04.OP1NORID; /* nike id*/
      ;
      OP1REC.OP1PARTN = PA0PW04.OP1PARTN;
      OP1REC.OP1CUOID = PA0PW04.OP1CUOID;
      OP1REC.OP1NORID = PA0PW04.OP1NORID;
      /* PA0349: MUSICAL SIZE RUN INDICATOR*/
      ;
      if (PA0PW04.PA0PW-MSR-IND == "M")
        PA0PM002.PA0PM-TO-MSR-IND = "MSR";
      end
      ;
    else
      ;
      PA0PW00.PA0PW-SO-OP1CUOID = 0; /* cust part*/
      PA0PM002.PA0PM-SO-CUOID[2] = 0;
      PA0PM002.PA0PM-SO-NORID[2] = 0; /* nike id*/
      PA0PM002.PA0PM-TO-MSR-IND = " ";
      PA0PW04.PA0PW-MSR-IND = " ";
      ;
    end
  end
  ;
   /* check for trade restrictions*/
  ;
  if (PA0PM002.PA0PMTCU != PA0PW00.PA0PWTCU) /* customer number has changed*/
    PA0PW00.PA0PWTRW = "N"; /* reset warning flag*/
    PA0PW00.PA0PWTCU = PA0PM002.PA0PMTCU; /* save xref*/
  end
  ;
  if (PA0PW00.PA0PWTRW == "N"       
   /* trade restriction warning not printed*/
   && PA0PM002.PA0PM-TO-WHSE != " " /* not spaces*/
   && PA0PM002.PA0PM-TO-WHSE != PA0PW00.PA0PW-REGION-WHSE[1]
   && PA0PM002.PA0PM-TO-WHSE != PA0PW00.PA0PW-REGION-WHSE[2]
   && PA0PM002.PA0PM-TO-WHSE != PA0PW00.PA0PW-REGION-WHSE[3])
    PA0PS70();
    if (converseVar.validationMsgNum != 0)
      return;
    end
  end
  ;
   /* PA261: 02/01/93 - IF PROCESSING ONLY A "FROM" ITEM, MAKE SURE THAT*/
   /* THE ETS DATE IS KEPT.*/
  ;
   /* IF THE "FROM" ITEM IS A PO AND THERE IS NO "TO" ITEM, OVERRIDE THE*/
   /* BLANK ETS ON THE NEW "TO" ITEM.*/
  ;
  if (PA0PW03.PACORDTY == "6"
   || PA0PW03.PACORDTY == "7"
   || PA0PW03.PACORDTY == "8")
    if (PA0PW04.PACORDTY == " ")
      PA0PW04.PC6ETSDT = PA0PW03.PC6ETSDT;
      PA0PW06.PA0PMTET = PA0PW05.PA0PMFET;
      PA0PM002.PA0PM-XFR-CTRY-CD = PA0PW03.XCTCD;
      PA0PM002.PA0PM-MCO-CTRY-CD = PA0PW03.PC-XCT-ORIG-CD;
    end
  end
  ;
   /* PA0349: 01/10/94 - IF ONLY A "FROM" ITEM, CARRY ALONG SO INFO.*/
  ;
  if (PA0PW04.PACORDTY == " ")
    if (PA0PM002.PA0PM-TO-WHSE != " "
     && PA0PM002.PA0PMTCU == " ")
      PA0PM002.PA0PM-SO-CUOID[2] = 0;
      PA0PM002.PA0PM-SO-NORID[2] = 0;
      PA0PM002.PA0PM-TO-MSR-IND = " ";
    else
      if (PA0PM002.PA0PMTCU != " "
       && PA0PM002.PA0PMTCU != PA0PW03.PC2CUXID)
        PA0PM002.PA0PM-SO-CUOID[2] = 0;
        PA0PM002.PA0PM-SO-NORID[2] = 0;
        PA0PM002.PA0PM-TO-MSR-IND = " ";
      else
        PA0PW00.PA0PW-SO-OP1CUOID = PA0PW03.OP1CUOID;
        PA0PM002.PA0PM-SO-CUOID[2] = PA0PW00.PA0PW-SO-OP1CUOID;
        PA0PM002.PA0PM-SO-NORID[2] = PA0PW03.OP1NORID;
        ;
        OP1REC.OP1PARTN = PA0PW03.OP1PARTN;
        OP1REC.OP1CUOID = PA0PW03.OP1CUOID;
        OP1REC.OP1NORID = PA0PW03.OP1NORID;
        ;
        if (PA0PW03.PA0PW-MSR-IND == "M")
          PA0PM002.PA0PM-TO-MSR-IND = "MSR";
        else
          PA0PM002.PA0PM-TO-MSR-IND = " ";
        end
      end
    end
  end
  ;
   /* SAKTHI*/
  if (PA0PM002.PA0PM-SO-CUOID[2] > 0)
    ;
    PA0PS-85-IO0430-S();
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      PA0PM002.PA0PM-SO-NEED-DT = OP1REC.OP1CUNDT;
    end
    ;
  end
   /* SAKTHI*/
  PA0PM002.PA0PMTMD = PA0PW06.YMTCD; /* transporation*/
  PA0PM002.PA0PMTRT = PA0PW06.PA0PMTRT; /* rta date*/
  PA0PM002.PA0PMTET = PA0PW06.PA0PMTET; /* ets date*/
  PA0PM-CFP-JAP-NBR = PA0PW14.PA0PW-CFP-OA-FROM-NBR;
  if (PA0PM002.PA0PM-XFR-CTRY-CD == "    ")
    PA0PM002.PA0PM-XFR-CTRY-CD = PA0PW06.XCTCD;
  end
  if (PA0PM002.PA0PM-MCO-CTRY-CD == "    ")
    PA0PM002.PA0PM-MCO-CTRY-CD = PA0PW06.PC-XCT-ORIG-CD;
  end
  ;
  if (PA1REC.YETCD == "DM"
   || PA1REC.YETCD == "NM")
    if (PA0PM002.PA0PMTRT == 0)
      PA0PM002.PA0PMTRT = PA0PM002.PA0PMFRT; /* RTA DATE*/
      PA0PM002.PA0PMTET = PA0PM002.PA0PMFET; /* RTA DATE*/
    end
    ;
    if (PA0PM002.PA0PMTCU == " ")
      PA0PM002.PA0PMTCU = PA0PM002.PA0PMFCU;
    end
    if (PA0PM002.PA0PM-TO-WHSE == " ")
      PA0PM002.PA0PM-TO-WHSE = PA0PM002.PA0PM-FRM-WHSE;
    end
  end
  ;
  PA0P251();
  PA0P-252();
  ;
  if (PA1REC.YETCD == "DM"
   || PA1REC.YETCD == "NM")
    /* SET PA0PM002.PA0PMTRT AUTOSKIP;*/
    /* MKS: 07/21/93 JADKIN REQUESTED THAT THEY BE ALLOWED TO CHANGE*/
    /* THE RTA FOR MODE CHANGES.  THIS WAS BECAUSE IT WAS CAUSING*/
    /* A PROBLEM WITH AIR FREIGHTS.  THEY WERE NOT ABLE TO PUT THE*/
    /* AIR FREIGHT TO THE CORRECT RTA.  THIS CAUSED PO TO COMBINE*/
    /* TWO OF THEM.*/
    set PA0PM002.PA0PMTRT normal;
    set PA0PM002.PA0PMTET skip;
    set PA0PM002.PA0PMTCU skip;
    set PA0PM002.PA0PM-TO-WHSE skip;
    ;
  else
    set PA0PM002.PA0PMTRT normal;
  end
  ;
  if (PA1REC.YETCD == "DM"
   || PA1REC.YETCD == "NM")
    if (PA0PM002.PA0PMTMD == " ")
      set PA0PM002.PA0PMTMD cursor, bold;
    end
  else
    if (PA1REC.YETCD == "ST"
     && PA0PM002.PA0PM-XFR-CTRY-CD == "    "
     && PA0PM002.PA0PM-MCO-CTRY-CD == "    ")
      set PA0PM002.PA0PM-MCO-CTRY-CD bold;
      set PA0PM002.PA0PM-XFR-CTRY-CD cursor, bold;
      converseLib.validationFailed(353);
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    /* next sentence*/
  else
    if (PA0PM002.PA0PMTFA == "    ")
      set PA0PM002.PA0PMTFA cursor;
    else
      if (PA0PM002.PA0PM-TO-WHSE == "   ")
        set PA0PM002.PA0PM-TO-WHSE cursor;
      end
    end
  end
  ;
  if (PA0PM002.PA0PMTET == 0) /* blank ets 12/10/90*/
    PA0PM002.PA0PMTET = " ";
  end
  ;
  if (PA0PM002.PA0PMTRT == 0) /* blank rta 12/10/90*/
    PA0PM002.PA0PMTRT = " ";
  end
  ;
  if (PA1REC.YETCD != "ST")
    set PA0PM002.PA0PM-MCO-CTRY-CD skip, invisible;
    set PA0PM002.PA0PM-XFR-CTRY-CD skip, invisible;
    set PA0PM002.PA0PM-XFR-CTRY-LBL skip, invisible;
    set PA0PM002.PA0PM-MCO-LBL skip, invisible;
  end
  ;
    /* Look for style on components program table*/
  ;
  if (PA1REC.SY1STNBR > "      ")
    VCMPPG01.FY1FCTYC = PA0PW06.FY1FCTYC; /* fcty code*/
    PA0P-22702(); /* look for style on components table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      set PA0PM002.PA0PMTFA bold, skip;
    end
  end
  ;
  if (PA0PM-02-COMP-PGM-MSG == "    ")
    set PA0PM-02-COMP-PGM-MSG invisible, skip;
  end
  ;
  ;
end // end PA0P-227

// Format the data on the map
Function PA0P-22701()
   /* ------------------------------------------------------------*/
   /* format the size descriptions*/
   /* ------------------------------------------------------------*/
  ;
  XX2 = PA0PW00.PA0PWBCL; /* column to display*/
  XX1 = 1;
  ;
  while (XX1 <= 8) /* map columns*/
    ;
    if (PG3REC.SY5SZID[XX2] == 0)
      ;
      set PA0PM002.PA0PMFSD[XX1] skip, invisible;
      set PA0PM002.PA0PMFSO[XX1] skip, invisible;
      set PA0PM002.PA0PMFAJ[XX1] skip, invisible;
      set PA0PM002.PA0PMTSD[XX1] skip, invisible;
      set PA0PM002.PA0PMTAJ[XX1] skip, invisible;
      ;
    else
      ;
      if (PA0PW03.PACORDTY != "1" /* fcty add*/
       && PA0PW03.PACORDTY != "5") /* stock transfer*/
        ;
        XX3 = PG3REC.SY5SZID[XX2];
        PA0PM002.PA0PMFFY[XX1] = PA0PW03.PA0PWORD[XX3]         + PA0PW03.PA0PWCAJ[XX3];
        PA0PM002.PA0PMFSO[XX1] = PA0PW03.PA0PWORD[XX3];
        PA0PM002.PA0PMFAJ[XX1] = PA0PW03.PA0PWCAJ[XX3];
        ;
        if (PA0PW03.PACORDTY == "6"
         || PA0PW03.PACORDTY == "7"
         || PA0PW03.PACORDTY == "8")
          ;
          PA0PM002.PA0PMFBS[XX1] = PA0PW03.PA0PWBTS[XX3]           + PA0PW03.PA0PWCAJ[XX3];
          ;
          if (PA0PW03.XDSCD != "1" /* WHSE ITEM*/
           && PA0PW03.XDSCD != "2") /* WHSE ITEM*/
            if (PA5REC.SY1STNBR != "      ") /* PAR EXISTS*/
                  /* "FROM" WAREHOUSE IS DIFFERENT THAN THE "TO" WAREHOUSE*/
              if (PA0PW05.PA0PW-WHSE != PA0PW06.PA0PW-WHSE) /* SAME WHSE*/
                if (PA0PM002.PA0PWSDT != 0) /* BOTTOM LINE SELECTED*/
                  PA0PM002.PA0PMFBL[XX1] = PA0PW03.PA0PWPBL[XX3]                   + PA0PM002.PA0PMFAJ[XX1]                   + PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
                else
                  PA0PM002.PA0PMFBL[XX1] = PA0PW03.PA0PWPBL[XX3]                   + PA0PW03.PACADJQT[XX3]                   + PA0PM002.PA0PMFAJ[XX1]                   + PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
                end
                ;
              else
                ;
                     /* "FROM" WAREHOUSE IS THE SAME AS THE "TO" WAREHOUSE*/
                if (PA0PM002.PA0PWSDT != 0) /* BOTTOM LINE SELECTED*/
                  PA0PM002.PA0PMFBL[XX1] = PA0PW03.PA0PWPBL[XX3]                   + PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
                else
                  PA0PM002.PA0PMFBL[XX1] = PA0PW03.PA0PWPBL[XX3]                   + PA0PW03.PACADJQT[XX3]                   + PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
                end
                ;
              end
            else
                  /* BOTTOM LINE DOES NOT EXIST*/
                  /*  */
                  /* "FROM" WAREHOUSE IS DIFFERENT THAN THE "TO" WAREHOUSE*/
              if (PA0PW05.PA0PW-WHSE != PA0PW06.PA0PW-WHSE) /* SAME WHSE*/
                PA0PM002.PA0PMFBL[XX1] = PA0PM002.PA0PMFAJ[XX1]                 + PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
                ;
              else
                ;
                     /* "FROM" WAREHOUSE IS THE SAME AS THE "TO" WAREHOUSE*/
                PA0PM002.PA0PMFBL[XX1] = PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
                ;
              end
            end
          end
        end
      else
        if (PA0PW03.PACORDTY == "2")
          XX3 = PG3REC.SY5SZID[XX2];
          PA0PM002.PA0PMFSO[XX1] = PA0PW03.PA0PWORD[XX3];
        end
      end
      /*  */
      /* PROCESS THE "TO" INFORMATION*/
      /*  */
      PA0PM002.PA0PMFSD[XX1] = PG3REC.SY4IDDSC[XX2];
      PA0PM002.PA0PMTSD[XX1] = PG3REC.SY4IDDSC[XX2];
      ;
      if (PG3REC.PG3SIZRC[XX2] > 4)
        set PA0PM002.PA0PMFSD[XX1] bold;
        set PA0PM002.PA0PMTSD[XX1] bold;
      end
      ;
      XX3 = PG3REC.SY5SZID[XX2];
      PA0PM002.PA0PMTPO[XX1] = PA0PW04.PA0PWORD[XX3]; /* order qty;*/
      PA0PM002.PA0PMTAJ[XX1] = PA0PW04.PA0PWCAJ[XX3]; /* curr adj's*/
      PA0PM002.PA0PMTBS[XX1] = PA0PW04.PA0PWBTS[XX3]       + PA0PW04.PA0PWCAJ[XX3];
      PA0PM002.PA0PMTNP[XX1] = PA0PW04.PA0PWORD[XX3]       + PA0PW04.PA0PWCAJ[XX3];
      ;
      if (PA0PW04.XDSCD != "1" /* WHSE ITEM*/
       && PA0PW04.XDSCD != "2") /* WHSE ITEM*/
        if (PA5REC.SY1STNBR != "      ") /* PAR EXISTS*/
            /* "FROM" WAREHOUSE IS DIFFERENT THAN THE "TO" WAREHOUSE*/
          if (PA0PW05.PA0PW-WHSE != PA0PW06.PA0PW-WHSE) /* SAME WHSE*/
            ;
            PA0PM002.PA0PMTBL[XX1] = PA0PW04.PA0PWPBL[XX3]             + PA0PM002.PA0PMTAJ[XX1]             + PA0PW11.PA0PW-BL-WITH-OAS2[XX3];
            ;
          else
            ;
               /* "FROM" WAREHOUSE IS THE SAME AS THE "TO" WAREHOUSE*/
            PA0PM002.PA0PMTBL[XX1] = PA0PW04.PA0PWPBL[XX3]             + PA0PW11.PA0PW-BL-WITH-OAS2[XX3];
            ;
          end
        else
            /* BOTTOM LINE DOES NOT EXIST*/
            /*  */
            /* "FROM" WAREHOUSE IS DIFFERENT THAN THE "TO" WAREHOUSE*/
          if (PA0PW05.PA0PW-WHSE != PA0PW06.PA0PW-WHSE) /* SAME WHSE*/
            PA0PM002.PA0PMTBL[XX1] = PA0PM002.PA0PMTAJ[XX1]             + PA0PW11.PA0PW-BL-WITH-OAS2[XX3];
          else
               /* "FROM" WAREHOUSE IS THE SAME AS THE "TO" WAREHOUSE*/
            PA0PM002.PA0PMTBL[XX1] = PA0PW11.PA0PW-BL-WITH-OAS2[XX3];
          end
        end
      end
    end
    ;
    XX2 = XX2 + 1;
    XX1 = XX1 + 1;
    ;
  end
end // end PA0P-22701

// Format the data on the map
Function PA0P-22702()
  ;
    /* Look for style on component program table;*/
  ;
  VCMPPG01.XGPCD = "02"; /* gpc*/
  VCMPPG01.SY1STNBR = PA1REC.SY1STNBR; /* Style number*/
  VCMPPG01.SY2CLRID = PA1REC.SY2CLRID; /* Color identification*/
  VCMPPG01.XDMCD = PA1REC.XDMCD; /* Dimension code*/
  VCMPPG01.PC-PO-ID-MO-RNG = PA0PW00.PA0PWPDT; /* buy month*/
  ;
  PA0PS-VCMPPG01-S();
  if (SQLCA.VAGen_SQLCODE == 0)
    set PA0PM002.SY1STNBR bold, skip;
    set PA0PM002.SY2CLRID bold, skip;
    set PA0PM002.XDMCD bold, skip;
    PA0PM-02-COMP-PGM-MSG = "COMPONENT";
    set PA0PM-02-COMP-PGM-MSG bold, skip;
    if (PA0PM-VAL-FCTY[1] == VCMPPG01.FY1FCTYC)
      set PA0PM-VAL-FCTY[1] bold, skip;
    end
    if (PA0PM-VAL-FCTY[2] == VCMPPG01.FY1FCTYC)
      set PA0PM-VAL-FCTY[2] bold, skip;
    end
    if (PA0PM-VAL-FCTY[3] == VCMPPG01.FY1FCTYC)
      set PA0PM-VAL-FCTY[3] bold, skip;
    end
    if (PA0PM-VAL-FCTY[4] == VCMPPG01.FY1FCTYC)
      set PA0PM-VAL-FCTY[4] bold, skip;
    end
  end
  ;
  ;
  ;
end // end PA0P-22702

// RESET HIGHLIGHTED FIELDS
Function PA0P-240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set PA0PM002.PA-AFRGT-RQT-ID initialAttributes; /* AIR FREIGHT NUMBER*/
  set PA0PM002.PA0PM-PF9-LABEL initialAttributes;
  set PA0PM002.PA0PM-PF13-LABEL initialAttributes;
  ;
  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 8)
    set PA0PM002.PA0PMFSD[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMFSO[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMFAJ[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMFFY[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMFBS[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMFBL[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMTSD[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMTPO[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMTAJ[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMTNP[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMTBS[sysVar.arrayIndex] initialAttributes;
    set PA0PM002.PA0PMTBL[sysVar.arrayIndex] initialAttributes;
    ;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
    ;
  end
  ;
  if (PA0PM002.PA0PM-XFR-CTRY-CD == "?")
    ;
    XPXX001(); /* WINDOW INITIALIZATION*/
    ;
    XX0XW02.YESCDIND = "H"; /* STATUS CODE TYPE INDICATOR*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE"; /* HEADING*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* UNTIL END OF REQUEST*/
      XPXCT01(); /* DISPLAY THE LIST*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0)
      PA0PM002.PA0PM-XFR-CTRY-CD = PA0PW03.XCTCD;
    else
      PA0PM002.PA0PM-XFR-CTRY-CD = XCTTBL.XCTCD[XX0XWPIX];
    end
    ;
    set PA0PM002.PA0PM-XFR-CTRY-CD cursor;
    converseLib.clearScreen();
     /* RESET SCREEN*/
    PAWREC.XXXMODID = "240";
    converseLib.validationFailed(45); /* REQUESTED DATA DISPLAYED*/
    exit stack;
  end
  ;
  if (PA0PM002.PA0PM-MCO-CTRY-CD == "?")
    ;
    XPXX001(); /* WINDOW INITIALIZATION*/
    ;
    XX0XW02.YESCDIND = "H"; /* STATUS CODE TYPE INDICATOR*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE"; /* HEADING*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* UNTIL END OF REQUEST*/
      XPXCT01(); /* DISPLAY THE LIST*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0)
      PA0PM002.PA0PM-MCO-CTRY-CD = PA0PW03.PC-XCT-ORIG-CD;
    else
      PA0PM002.PA0PM-MCO-CTRY-CD = XCTTBL.XCTCD[XX0XWPIX];
    end
    ;
    set PA0PM002.PA0PM-MCO-CTRY-CD cursor;
    converseLib.clearScreen();
     /* RESET SCREEN*/
    PAWREC.XXXMODID = "240";
    converseLib.validationFailed(45); /* REQUESTED DATA DISPLAYED*/
    exit stack;
  end
  ;
   /* ------------------ end of process PA0P240  -----------------*/
  ;
end // end PA0P-240

// Verify user input
Function PA0P-250()
   /* ------------------------------------------------------------*/
                      /* validate any key changes*/
                      /* from section of map*/
   /* -----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
  if (PA1REC.YETCD != "NM"
   && PA1REC.YETCD != "DM")
    ;
    if (PA1REC.YETCD == "ST")
      ;
      if (PA0PM002.PA0PM-XFR-CTRY-CD in XCTTBL.XCTCD)
        if (PA0PM002.PA0PM-MCO-CTRY-CD in XCTTBL.XCTCD)
          PA0PW04.XCTCD = PA0PM002.PA0PM-XFR-CTRY-CD;
          PA0PW04.PC-XCT-ORIG-CD = PA0PM002.PA0PM-MCO-CTRY-CD;
          PA0PW06.XCTCD = PA0PM002.PA0PM-XFR-CTRY-CD;
          PA0PW06.PC-XCT-ORIG-CD = PA0PM002.PA0PM-MCO-CTRY-CD;
        else
          converseLib.validationFailed(355);
          PA0PW00.XXXMODID = "250";
          set PA0PM002.PA0PM-MCO-CTRY-CD cursor, bold;
          return;
        end
      else
        converseLib.validationFailed(354);
        PA0PW00.XXXMODID = "250";
        set PA0PM002.PA0PM-XFR-CTRY-CD cursor, bold;
        return;
      end
    end
    ;
    if (PA0PM002.PA0PMTCU == "     "
     && PA0PM002.PA0PM-TO-WHSE == "     ")
      ;
      converseLib.validationFailed(130);
      PA0PW00.XXXMODID = "250";
      ;
      set PA0PM002.PA0PM-TO-WHSE cursor, bold;
      set PA0PM002.PA0PMTCU bold;
    end
    ;
    if (PA0PM002.PA0PMTFA == "    "
     || PA0PM002.PA0PMTMD == "  "
     || PA0PM002.PA0PMTRT == 0)
      ;
      converseLib.validationFailed(130);
      PA0PW00.XXXMODID = "250";
      ;
      if (PA0PM002.PA0PMTRT == 0)
        set PA0PM002.PA0PMTRT cursor, bold;
      end
      ;
      if (PA0PM002.PA0PMTMD == " ")
        set PA0PM002.PA0PMTMD cursor, bold;
      end
      ;
      if (PA0PM002.PA0PMTFA == " ")
        set PA0PM002.PA0PMTFA cursor, bold;
      end
      ;
      return;
    end
  end
  ;
  if (PA1REC.YETCD == "NA" || 
  PA1REC.YETCD == "NR" || 
  PA1REC.YETCD == "NM" || 
  PA1REC.YETCD == "ND" || 
  PA1REC.YETCD == "NI" || 
  PA1REC.YETCD == "NT" || 
  PA1REC.YETCD == "NS" || 
  PA1REC.YETCD == "NO" || 
  PA1REC.YETCD == "DN")
    ;
    if (PA0PW14.PA0PW-CUST-FROM-XCTCD == "JAPA")
      if (PA0PM002.PA0PM-CFP-JAP-NBR == 0)
        converseLib.validationFailed(40);
        PA0PW00.XXXMODID = "250";
        set PA0PM002.PA0PM-CFP-JAP-NBR cursor, bold;
      else
        PA0PW14.PA0PW-CFP-OA-FROM-NBR = PA0PM002.PA0PM-CFP-JAP-NBR;
      end
    end
  end
  ;
   /* AF MODE CHANGE NOT ALLOWED IN DS TYPE OA. SKATHI. 10/27/99*/
  if (PA1REC.YETCD == "DS")
    if ((PA0PM002.PA0PMFMD == "AF" && 
    PA0PM002.PA0PMTMD != "AF") || 
    (PA0PM002.PA0PMFMD != "AF" && 
    PA0PM002.PA0PMTMD == "AF"))
      converseLib.validationFailed(356);
      PA0PW00.XXXMODID = "250";
      set PA0PM002.PA0PMTMD cursor, bold;
    end
  end
  ;
  PA0PW00.PA0PWCHG = "N"; /* data changed switch*/
  ;
  if (PA0PW03.PACORDTY == "6"
   || PA0PW03.PACORDTY == "7"
   || PA0PW03.PACORDTY == "8")
    XX5 = 0; /* rta and md only*/
    ;
    PA0PS-20(); /* from item rta or md chg*/
    if (XX5 == 1 /* key changed*/
     && converseVar.validationMsgNum == 0)
      PA0PS-24(); /* check dups*/
    end
  end
  ;
  if (XX5 == 1) /* key changed*/
    PA0PW00.PA0PWCHG = "Y"; /* data changed switch*/
  end
  ;
   /* ------------------------------------------------------------*/
                      /* validate any key changes*/
                      /* 'to' section of map*/
   /* -----------------------------------------------------------*/
  ;
  XX5 = 0; /* reset key change flag*/
  ;
  PA0PS-21(); /* to item*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  if (PA0PM002.PA0PMTFA != PA0PW06.FY1FCTYC) /* edit fcty chg*/
    XX5 = 1;
    set PA0PM002.PA0PMTFA initialAttributes;
    set PA4REC empty;
    PA4REC.FY1FCTYC = PA0PM002.PA0PMTFA;
    PA4REC.PA1OANBR = PA1REC.PA1OANBR;
    ;
    PA0PS18(); /* get fcty*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      set PA0PM002.PA0PMTFA cursor, bold;
      converseLib.validationFailed(20);
      PA0PW00.XXXMODID = "250";
    end
  end
  ;
  if (PA0PM002.PA0PM-TO-WHSE != PA0PW06.PA0PW-WHSE)
    XX5 = 1;
    if (PA0PM002.PA0PM-TO-WHSE in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        set PA0PM002.PA0PM-TO-WHSE cursor, bold;
        converseLib.validationFailed(278);
        PA0PW00.XXXMODID = "250";
      else
           /* MAKE SURE EUROPEAN DESTINATION NOT ALLOWED*/
        if (PA0PM002.PA1OANBR > 199999
         && PA0PM002.PA1OANBR < 300000)
          set PA0PM002.PA0PM-TO-WHSE initialAttributes;
        else
          set YSMREC empty;
          YSMREC.YSMTBLPF = "XWH";
          YSMREC.YSMSYSPF = "FB";
          YSMREC.YSMSUMID = 1;
          YSMREC.YSMSRCVL = PA0PM002.PA0PM-TO-WHSE;
          ;
          PA0PS-90-IO2640-S(); /* SELECT UNIQUE*/
          ;
              /* ERROR IF EUROPEAN REGION*/
          ;
          if (YSMREC.YSMSUMCD == "02")
            set PA0PM002.PA0PM-TO-WHSE cursor, bold;
            converseLib.validationFailed(342); /* EUROPEAN DESTINATION NOT ALLOWED*/
            PA0PW00.XXXMODID = "250";
          else
            set PA0PM002.PA0PM-TO-WHSE initialAttributes;
          end
        end
      end
    else
      set PA0PM002.PA0PM-TO-WHSE cursor, bold;
      converseLib.validationFailed(278);
      PA0PW00.XXXMODID = "250";
    end
  end
  ;
  if (PA0PM002.PA0PMTCU != PA0PW06.PA0PW-CUST) /* destination*/
    XX5 = 1;
    set PA0PM002.PA0PMTCU initialAttributes;
    PC2REC.PC2CUXID = PA0PM002.PA0PMTCU;
    PC2REC.XGPCD = "02";
    ;
    PA0PS17(); /* customer xref*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      converseLib.validationFailed(96);
      PA0PW00.XXXMODID = "250";
      set PA0PM002.PA0PMTCU cursor, bold;
    else
      if (PA0PM002.PA1OANBR > 199999
       && PA0PM002.PA1OANBR < 300000)
           /* NEXT SENTENCE*/
      else
           /* ERROR IF EUROPEAN CUSTOMER*/
        if (PC2REC.PC-PRDCU-APAO-FL == "E") /* EUROPEAN CUSTOMER*/
          converseLib.validationFailed(342); /* EUROPEAN DESTINATION NOT ALLOWED*/
          PA0PW00.XXXMODID = "250";
          set PA0PM002.PA0PMTCU cursor, bold;
        end
      end
    end
  end
  ;
  if (XX5 == 1)
    PA0PW00.PA0PWCHG = "Y"; /* data changed switch*/
    if (converseVar.validationMsgNum == 0)
      PA0PS-25(); /* validate key change'from' dup row*/
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    return; /* key errors do not process qty*/
  end
  ;
   /* PA323: DETERMINE IF THE BOTTOM LINE IS REQUIRED*/
  if (PA0PW00.PA0PW-REQUIRE-BL == "Y")
    if (PA0PM002.PA0PM-FRM-WHSE != " ")
      set PA0PM002.PA0PM-FRM-WHSE bold;
      converseLib.validationFailed(282);
      PA0PW00.XXXMODID = "250";
      return;
    else
      if (PA0PM002.PA0PM-TO-WHSE != " ")
        set PA0PM002.PA0PM-TO-WHSE bold;
        converseLib.validationFailed(282);
        PA0PW00.XXXMODID = "250";
        return;
      end
    end
  end
  ;
   /* -----------------------------------------------------------*/
                 /* process po items*/
                 /* form   to  transfers*/
                 /* to po key data must be present*/
                 /* before processing*/
  ;
   /* key data in the "to" section of map is not required for*/
   /* for mode of trans or rta change only*/
   /* ---------------------------------------------------*/
  ;
  ;
  XX1 = 1; /* column counter*/
  XX2 = PA0PW00.PA0PWBCL; /* starting column displayed*/
  while (XX1 <= 8
   && PG3REC.SY5SZID[XX2] != 0) /* relative size pos*/
    XX3 = PG3REC.SY5SZID[XX2]; /* relative size pos*/
    if (PA0PM002.PA0PMTAJ[XX1] != PA0PW04.PA0PWCAJ[XX3]) /* data changed*/
      ;
      if (PA1REC.YETCD != "NM"
       /* AND PA1REC.YETCD NE 'NT';*/
       && PA1REC.YETCD != "DM")
        /* AND PA1REC.YETCD NE 'DT';*/
        ;
        if (PA0PM002.PA0PM-TO-WHSE == "  "
         && PA0PM002.PA0PMTCU == "     ")
          ;
          converseLib.validationFailed(130);
          PA0PW00.XXXMODID = "250";
          ;
          set PA0PM002.PA0PM-TO-WHSE cursor, bold;
          set PA0PM002.PA0PMTCU bold;
        end
        ;
        if (PA0PM002.PA0PMTFA == "    "
         || PA0PM002.PA0PMTMD == "  "
         || PA0PM002.PA0PMTRT == 0)
          ;
          converseLib.validationFailed(130);
          PA0PW00.XXXMODID = "250";
          ;
          if (PA0PM002.PA0PMTRT == 0)
            set PA0PM002.PA0PMTRT cursor, bold;
          end
          ;
          if (PA0PM002.PA0PMTMD == " ")
            set PA0PM002.PA0PMTMD cursor, bold;
          end
          ;
          if (PA0PM002.PA0PMTFA == " ")
            set PA0PM002.PA0PMTFA cursor, bold;
          end
          ;
          return;
        else
          PA0PW04.PACSEVAL = "T"; /* force create of "to" item*/
        end
      end
      ;
      PA0PW00.PA0PWCHG = "Y"; /* data changed switch*/
      PA0PW04.PA0PWCAJ[XX3] = PA0PMTAJ[XX1]; /* to adjustment*/
      PA0PW03.PA0PWCAJ[XX3] = PA0PMTAJ[XX1] * -1;
    end
    XX2 = XX2 + 1;
    XX1 = XX1 + 1;
  end
  ;
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf13) /* transfer all from qty's*/
    if (PA0PW03.PACORDTY == "1")
      converseLib.validationFailed(97); /* can only trans so fs and po*/
      PA0PW00.XXXMODID = "250";
      return;
    end
    ;
    PA0PW00.PA0PWCHG = "Y"; /* data changed switch*/
    ;
    if (PA0PW03.PACORDTY == "2" /* fcty with qty's.use order qty*/
     || PA0PW03.PACORDTY == "4") /* sales order*/
      ;
      XX1 = 1; /* column counter*/
      while (XX1 <= 40)
        PA0PW04.PA0PWCAJ[XX1] = PA0PW03.PA0PWORD[XX1];
        PA0PW03.PA0PWCAJ[XX1] = PA0PW04.PA0PWCAJ[XX1] * -1;
        PA0PW04.PA0PWRAJ = PA0PW04.PA0PWORD[XX1] + PA0PW04.PA0PWCAJ[XX1];
        PA0PW03.PA0PWRAJ = PA0PW03.PA0PWORD[XX1] + PA0PW03.PA0PWCAJ[XX1];
        ;
        XX1 = XX1 + 1;
      end
    else
             /* must be po item use balance to ship*/
      XX1 = 1; /* column counter*/
      while (XX1 <= 40)
        PA0PW04.PA0PWCAJ[XX1] = PA0PW03.PA0PWBTS[XX1];
        PA0PW03.PA0PWCAJ[XX1] = PA0PW04.PA0PWCAJ[XX1] * -1;
        PA0PW04.PA0PWRAJ = PA0PW04.PA0PWBTS[XX1] + PA0PW04.PA0PWCAJ[XX1];
        PA0PW03.PA0PWRAJ = PA0PW03.PA0PWBTS[XX1] + PA0PW03.PA0PWCAJ[XX1];
        ;
        XX1 = XX1 + 1;
      end
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    ;
    if (PA1REC.YETCD == "DS"
     || PA1REC.YETCD == "NS")
      ;
      PA0PS31(); /* edit tolarance qty (240)*/
      ;
    end
  end
  ;
   /* ---------------- End of process PA0P-250 --------------------*/
  ;
end // end PA0P-250

// Format the data on the map
Function PA0P-252()
   /* ------------------------------------------------------------*/
   /* sum totals bottom line, adjustments; npo, bal to shp*/
   /* -----------------------------------------------------------*/
  XX1 = 1; /**/
  ;
   /* INITIALIZE SCREEN TOTALS*/
  PA0PM002.PA0PMFAT = 0;
  PA0PM002.PA0PMFFT = 0;
  PA0PM002.PA0PMFBT = 0;
  PA0PM002.PA0PMFBO = 0;
  PA0PM002.PA0PMTAT = 0;
  PA0PM002.PA0PMTNT = 0;
  PA0PM002.PA0PMTBT = 0;
  PA0PM002.PA0PMTBO = 0;
  ;
  if (PA0PM002.PA0PM-TO-MSR-IND == "MSR"
   || PA0PM002.PA0PM-FROM-MSR-IND == "MSR")
    set PAMSREC empty; /* PASS RECORD TO OP297D - MUSICAL SIZE RUN*/
    PAMSREC.PAMS-REGION-CODE = "D";
    PAMSREC.PAMS-FUNCTION-CODE = "V";
    PAMSREC.XGPCD = "02";
    PAMSREC.SY1STNBR = PA1REC.SY1STNBR;
    PAMSREC.SY2CLRID = PA1REC.SY2CLRID;
    PAMSREC.XDMCD = PA1REC.XDMCD;
    PAMSREC.OP1PARTN = PA0PW00.PA0PW-SO-OP1PARTN; /* PART-CHAR*/
    PAMSREC.OP1CUOID = PA0PM002.PA0PM-SO-CUOID; /* CUST-ID*/
    PAMSREC.OP1NORID = PA0PM002.PA0PM-SO-NORID; /* NIKE-ID*/
  end
  ;
  while (XX1 <= 40)
    ;
    if (PA0PW03.PACORDTY != "1" /* fcty adjustment*/
     && PA0PW03.PACORDTY != "2" /* fcty adjustment*/
     && PA0PW03.PACORDTY != "4" /* sales order*/
     && PA0PW03.PACORDTY != "5") /* stock transfer*/
      ;
      PA0PM002.PA0PMFBT = PA0PM002.PA0PMFBT                       + PA0PW03.PA0PWBTS[XX1]                       + PA0PW03.PA0PWCAJ[XX1];
      ;
    end
    ;
    PA0PM002.PA0PMFFT = PA0PM002.PA0PMFFT                     + PA0PW03.PA0PWORD[XX1]                     + PA0PW03.PA0PWCAJ[XX1];
    ;
    PA0PM002.PA0PMFAT = PA0PM002.PA0PMFAT + PA0PW03.PA0PWCAJ[XX1];
    ;
    if (PA0PW05.PA0PW-WHSE != " ")
      if (PA0PW05.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
       || PA0PW05.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
       || PA0PW05.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
          /* THE "FROM" WAREHOUSE IS DIFFERENT THAN THE "TO" WAREHOUSE*/
        if (PA0PW05.PA0PW-WHSE != PA0PW06.PA0PW-WHSE) /* not same from-to*/
          ;
          if (PA0PM002.PA0PWSDT != 0) /* BOTTOM LINE SELECTED*/
            PA0PM002.PA0PMFBO = PA0PM002.PA0PMFBO                                 + PA0PW03.PA0PWPBL[XX1]                                 + PA0PW03.PA0PWCAJ[XX1]                                 + PA0PW11.PA0PW-BL-WITH-OAS1[XX1];
          else
            PA0PM002.PA0PMFBO = PA0PM002.PA0PMFBO                                 + PA0PW03.PA0PWPBL[XX1]                                 + PA0PW03.PA0PWCAJ[XX1]                                 + PA0PW03.PACADJQT[XX1]                                 + PA0PW11.PA0PW-BL-WITH-OAS1[XX1];
          end
          ;
        else
          ;
             /* THE "FROM" WAREHOUSE IS THE SAME AS THE "TO" WAREHOUSE*/
          if (PA0PM002.PA0PWSDT != 0) /* BOTTOM LINE SELECTED*/
            PA0PM002.PA0PMFBO = PA0PM002.PA0PMFBO                                 + PA0PW03.PA0PWPBL[XX1]                                 + PA0PW11.PA0PW-BL-WITH-OAS1[XX1];
          else
            PA0PM002.PA0PMFBO = PA0PM002.PA0PMFBO                                 + PA0PW03.PA0PWPBL[XX1]                                 + PA0PW03.PACADJQT[XX1]                                 + PA0PW11.PA0PW-BL-WITH-OAS1[XX1];
          end
          ;
        end
      end
    end
    ;
    PA0PM002.PA0PMTBT = PA0PM002.PA0PMTBT                     + PA0PW04.PA0PWBTS[XX1]                     + PA0PW04.PA0PWCAJ[XX1];
    ;
    PA0PM002.PA0PMTNT = PA0PM002.PA0PMTNT                     + PA0PW04.PA0PWORD[XX1]                     + PA0PW04.PA0PWCAJ[XX1];
    ;
    PA0PM002.PA0PMTAT = PA0PM002.PA0PMTAT + PA0PW04.PA0PWCAJ[XX1];
    ;
    /* PA0349: MUSICAL SIZE RUN - MOVE QUANTITIES TO PASS RECORD*/
    ;
    if (PA0PM002.PA0PM-TO-MSR-IND == "MSR"
     || PA0PM002.PA0PM-FROM-MSR-IND == "MSR")
       /* LOAD OP297D-OP-NEW-MSC-SZ-QTY;*/
      PAMSREC.OP3ONOQT[XX1] = PA0PW04.PA0PWCAJ[XX1];
      PAMSREC.OP2TONOQ = PAMSREC.OP2TONOQ + PA0PW04.PA0PWCAJ[XX1];
    end
    ;
    if (PA0PW06.PA0PW-WHSE != " ")
      if (PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
       || PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
       || PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
        ;
          /* THE "FROM" WAREHOUSE IS DIFFERENT THAN THE "TO" WAREHOUSE*/
        if (PA0PW05.PA0PW-WHSE != PA0PW06.PA0PW-WHSE) /* not same from-to*/
          ;
          if (PA0PM002.PA0PWSDT != 0) /* BOTTOM LINE SELECTED*/
            PA0PM002.PA0PMTBO = PA0PM002.PA0PMTBO                                 + PA0PW04.PA0PWPBL[XX1]                                 + PA0PW04.PA0PWCAJ[XX1]                                 + PA0PW11.PA0PW-BL-WITH-OAS2[XX1];
          else
            PA0PM002.PA0PMTBO = PA0PM002.PA0PMTBO                                 + PA0PW04.PA0PWPBL[XX1]                                 + PA0PW04.PA0PWCAJ[XX1]                                 + PA0PW04.PACADJQT[XX1]                                 + PA0PW11.PA0PW-BL-WITH-OAS2[XX1];
          end
          ;
        else
          ;
             /* THE "FROM" WAREHOUSE IS THE SAME AS THE "TO" WAREHOUSE*/
          if (PA0PM002.PA0PWSDT != 0) /* BOTTOM LINE SELECTED*/
            PA0PM002.PA0PMTBO = PA0PM002.PA0PMTBO                                 + PA0PW04.PA0PWPBL[XX1]                                 + PA0PW11.PA0PW-BL-WITH-OAS2[XX1];
          else
            PA0PM002.PA0PMTBO = PA0PM002.PA0PMTBO                                 + PA0PW04.PA0PWPBL[XX1]                                 + PA0PW04.PACADJQT[XX1]                                 + PA0PW11.PA0PW-BL-WITH-OAS2[XX1];
          end
          ;
        end
      end
    end
    ;
    XX1 = XX1 + 1;
    ;
  end
  ;
   /* PA0349: CHECK TO MAKE SURE QUANTITIES MEET MUSICAL SIZE RUN*/
   /* RESTRICTION.*/
  ;
  if (PA0PM002.PA0PM-TO-MSR-IND == "MSR"
   || PA0PM002.PA0PM-FROM-MSR-IND == "MSR")
    if (PAMSREC.OP2TONOQ > 0          
     && converseVar.eventKey not pf10 /* MOVE RIGHT*/
     && converseVar.eventKey not pf11) /* MOVE LEFT*/
      ;
      PA0P-25201();
      ;
    end
  end
  ;
  if (PA0PW03.PACORDTY == "1" /* fcty add*/
   || PA0PW03.PACORDTY == "2" /* fcty reduction*/
   || PA0PW03.PACORDTY == "5") /* stock transfer*/
    PA0PM002.PA0PMFFT = PA0PM002.PA0PMFST + PA0PM002.PA0PMFAT;
  end
  ;
  PA0PW03.PA0PWRAJ[41] = PA0PM002.PA0PMFFT; /* total adjustment for so*/
  ;
  ;
end // end PA0P-252

// PROCESS MUSICAL SIZE RUN
Function PA0P-25201()
  ;
   /* OP297D: TO VALIDATE THE MUSICAL SIZE RUN DISTRIBUTION OF NEW*/
   /* QUANTITY.*/
  ;
  PA0PS-86-OP297D();
  ;
  if (PAMSREC.PAMS-RETURN-CD == 1)
    converseLib.validationFailed(348); /* SO MISSING MSR PREPAK - Contact CUST SRVC REP*/
    PA0PW00.XXXMODID = "252";
    set PA0PM002.PA0PMTAJ[1] cursor, bold;
    return;
  end
  ;
  if (PAMSREC.PAMS-RETURN-CD == 2)
    converseLib.validationFailed(300); /* MUST MAINTAIN MUSICAL SIZE RUN RATIO*/
    PA0PW00.XXXMODID = "252";
    set PA0PM002.PA0PMTAJ[1] cursor, bold;
    return;
  end
  ;
  if (PAMSREC.PAMS-RETURN-CD > 5)
    converseLib.validationFailed(301); /* For Return Codes 6,7,8,9,10*/
    PA0PW00.XXXMODID = "252";
    set PA0PM002.PA0PMTAJ[1] cursor, bold;
    return;
  end
  ;
  ;
  ;
  ;
end // end PA0P-25201

// Process valid input request
Function PA0P-260()
   /* ------------------------------------------------------------*/
                      /* PROCESS VALID REQUEST*/
                      /* COMPUTE ADJUSTMENT TOTALS*/
                       /* PF9 update VPAWRK02 Table*/
   /* -----------------------------------------------------------*/
  ;
  if (PA0PW00.PA0PWBTE == "Y"
   && converseVar.eventKey is pf9)
    set PA0PW11 empty;
    return;
  else
    if (PA0PW00.PA0PWBTE == "Y")
       /* NEXT SENTENCE*/
    else
      ;
      if (converseVar.validationMsgNum != 0
       || PA0PW00.PA0PWERR == "Y")
        return;
      end
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf10)
    sysVar.arrayIndex = PA0PW00.PA0PWBCL - PA0PM002.PA0PMSCR;
    if (sysVar.arrayIndex <= 0)
      converseLib.validationFailed(33);
      PA0PW00.XXXMODID = "260";
    else
      set PA0PM002 initial;
      PA0PW00.PA0PWBCL = sysVar.arrayIndex;
      exit stack;
    end
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf11)
    sysVar.arrayIndex = PA0PW00.PA0PWBCL + PA0PM002.PA0PMSCR;
    if (sysVar.arrayIndex > PA0PW00.PA0PWNVZ) /* number of valid sizes*/
      converseLib.validationFailed(33);
      PA0PW00.XXXMODID = "260";
    else
      set PA0PM002 initial;
      PA0PW00.PA0PWBCL = sysVar.arrayIndex;
      exit stack;
    end
  end
  ;
  ;
  ;
  ;
  if (converseVar.eventKey not pf9) /* accept*/
    return;
  end
  ;
  if (PA0PW00.PA0PWCHG == "Y")
    converseLib.validationFailed(34); /* data changed*/
    PA0PW00.XXXMODID = "260";
    return;
  end
  ;
   /* ------------------------------------------------------------*/
                      /* determine if new po items have*/
                      /* been created in paopw03*/
                      /* and pa0pw04*/
   /* -----------------------------------------------------------*/
  ;
  if (PA0PW03.PACORDTY == "6" /* po   item*/
   || PA0PW03.PACORDTY == "7" /* calc item*/
   || PA0PW03.PACORDTY == "8") /* new item*/
    ;
    PA0P-261(); /* "from" PO ITEM*/
  end
  ;
   /* ------------------------------------------------------------*/
                      /* process sales order*/
                      /* and factory with sizes*/
   /* -----------------------------------------------------------*/
  ;
  if (PA0PW03.PACORDTY == "4" /* SO adjustment*/
   || PA0PW03.PACORDTY == "2") /* SO adjustment*/
    ;
    PA0P-262();
    ;
  end
  ;
   /* ------------------------------------------------------------*/
                      /* process factory bulk adjustment*/
                       /* no sizing*/
   /* -----------------------------------------------------------*/
  ;
  if (PA0PW03.PACORDTY == "1") /* fcty adjustment*/
    if (PA0PM002.PA0PMFFT != 0)
      PA0PW03.PACFBQTY = PA0PM002.PA0PMFFT;
      VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW03.PA0PW3GP;
      PA0PS-10(); /* update so row*/
    else
      ;
      VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW03.PA0PW3GP;
      PA0PS-12(); /* delete row*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
                      /* determine if new po items have*/
                      /* been created in paopw04*/
   /* -----------------------------------------------------------*/
  ;
  ;
  if (PA0PW06.PA0PW-CUST != "     " /* THERE IS A TO ITEM*/
   || PA0PW06.PA0PW-WHSE != "  ")   /**/
    PA0PW04.PACSEVAL = " "; /* SET TO SPACE*/
    ;
    XX1 = 1;
    while (XX1 <= 40)
      PA0PW04.PACFLADJ[XX1] = PA0PW04.PACFLADJ[XX1] + PA0PW04.PA0PWCAJ[XX1];
      XX1 = XX1 + 1;
    end
    ;
    if (PA0PW04.PA1OANBR == 0) /* then it is a new item*/
      PA0P-264(); /* create new item use pa0pw06 and*/
                                   /* pa0pw04*/
    else
      ;
      if (PA0PW06.PA0PWCKY != "Y") /* key data not changed*/
        VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW04.PA0PW4GP;
        ;
        /* if doing a from/to (example: factory transfer)*/
        /* load the po number and item seq number into the*/
        /* item fields*/
        ;
        if (VPAWRK02.PACORDTY == "6") /* old item*/
          VPAWRK02.PACFPONO = PA0PW04.PC3PONBR; /**/
          VPAWRK02.PACFPCIT = PA0PW04.PC6ITMNB; /**/
        end
        ;
        PA0PS-10(); /* update*/
        ;
      else /* delete and add*/
        ;
         /* THE FOLLOWING CODING IS TO PREVENT A PROBLEM WHEN THE FACTORY*/
         /* 'FA' RECORD (WITH ZERO QUANTITIES) IS SELECT AS A 'FROM'*/
         /* ITEM AND AN OLD PO ITEM (TYPE '6') IS SELECTED AS THE 'TO'*/
         /* ITEM AND A KEY FIELD IS CHANGED.*/
        ;
         /* THE FOLLOWING CODE CREATES A CANCEL TO THE OLD PO ITEM*/
         /* (TYPE '6') AND AN ADD OF A NEW ITEM (TYPE '7').*/
        ;
        if (PA0PW03.PACORDTY == "1" /* IF THE FROM ITEM IS THE 'FA' REC*/
         && PA0PW04.PACORDTY == "6") /* AND THE TO ITEM IS AN OLD PO*/
          set PA0PW03 empty; /* CLEAR OUT FROM ITEM*/
          set VPAWRK02 empty;
          move PA0PW04 to PA0PW03 withV60Compat; /* MOVE ORIGINAL 'TO' ITEM TO 'FROM' ITM*/
          PA0PW06.PACFPONO = PA0PW04.PC3PONBR; /* LOAD IN FROM PO*/
          PA0PW03.PACFPONO = PA0PW04.PC3PONBR; /* LOAD IN FROM PO*/
          PA0PW04.PACFPONO = PA0PW04.PC3PONBR; /* LOAD IN FROM PO*/
          PA0PW06.PACFPCIT = PA0PW04.PC6ITMNB; /* INFORMATION*/
          PA0PW03.PACFPCIT = PA0PW04.PC6ITMNB; /* INFORMATION*/
          PA0PW04.PACFPCIT = PA0PW04.PC6ITMNB; /* INFORMATION*/
          PA0PW04.PC3PONBR = 0;
          PA0PW04.PC6ITMNB = 0;
          VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW03.PA0PW3GP;
          ;
          XX1 = 1;
          while (XX1 <= 40)
            VPAWRK02.PACFLADJ[XX1] = PA0PW03.PACADJQT[XX1] * -1;
            XX1 = XX1 + 1;
          end
          ;
          PA0PS-10(); /**/
          ;
          /* PART OF NSC CHANGES, VPAWRK02 HAS BEEN REPLACED WITH*/
          /* VPAWRK03 TO MAINTAIN REL-PLN-NBR -- GREDDY 05/10/00*/
          ;
          set VPAWRK03 empty;
          PA0PW04.PACORDTY = "7";
          ;
          XX1 = 1;
          while (XX1 <= 40)
            PA0PW04.PACWRKQT[XX1] = PA0PW03.PACADJQT[XX1];
            PA0PW04.PACADJQT[XX1] = PA0PW03.PACADJQT[XX1];
            XX1 = XX1 + 1;
          end
          VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW04.PA0PW4GP;
          PA0PS-FRMT-VPAWRK3();
        else
          VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW04.PA0PW4GP;
          PA0PS-FRMT-VPAWRK3();
          PA0PS-12(); /* delete row*/
        end
        ;
        VPAWRK03.FY1FCTYC = PA0PW06.FY1FCTYC;
        VPAWRK03.YMTCD = PA0PW06.YMTCD;
        ;
        PA0PW07.PA0PW2DT = PA0PW06.PA0PWDRT;
        PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
        PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
        PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
        VPAWRK03.PC6RTADT = PA0PW07.PA0PW1DT;
        ;
        if (VPAWRK03.PC6RTADT > 0)
          if (PA0PW07.PA0PW1YY > 60)
            VPAWRK03.PC6RTADT = VPAWRK03.PC6RTADT + 19000000;
          else
            VPAWRK03.PC6RTADT = VPAWRK03.PC6RTADT + 20000000;
          end
        end
        ;
        if (PA1REC.YETCD == "DD" /* don't blank out ets*/
         || PA1REC.YETCD == "ND" 
         || PA1REC.YETCD == "NI" 
         || PA1REC.YETCD == "DN")
          PA0PW07.PA0PW2DT = PA0PW06.PA0PWDET;
          PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
          PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
          PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
          VPAWRK03.PC6ETSDT = PA0PW07.PA0PW1DT;
          ;
          if (VPAWRK03.PC6ETSDT > 0)
            if (PA0PW07.PA0PW1YY > 60)
              VPAWRK03.PC6ETSDT = VPAWRK03.PC6ETSDT + 19000000;
            else
              VPAWRK03.PC6ETSDT = VPAWRK03.PC6ETSDT + 20000000;
            end
          end
          ;
        else
          VPAWRK03.PC6ETSDT = 0;
        end
        ;
        VPAWRK03.PC3POIDT = PA0PW00.PA0PWPDT;
        ;
        VPAWRK03.XWHCD = PA0PW06.PA0PW-WHSE;
        VPAWRK03.PC2CUXID = PA0PW06.PA0PW-CUST;
        ;
        if (VPAWRK03.XWHCD != "  "
         && VPAWRK03.PC2CUXID != "     ")
          VPAWRK03.XDSCD = "2"; /* indirect direct ship*/
          ;
          set PC2REC empty;
          PC2REC.XGPCD = "02";
          PC2REC.PC2CUXID = PA0PW06.PA0PW-CUST;
          ;
          PA0PS17(); /* get customer rec*/
          ;
          if (SQLCA.VAGen_SQLCODE != 0) /* row not found*/
            converseLib.validationFailed(132);
            PA0PW00.XXXMODID = "260";
            exit stack;
          end
          VPAWRK03.PC2INSEG = PC2REC.PC2INSEG; /* inventory seg*/
        else
          if (VPAWRK03.PC2CUXID != "     ")
            VPAWRK03.XDSCD = "1"; /* direct ship*/
            ;
            set PC2REC empty;
            PC2REC.XGPCD = "02";
            PC2REC.PC2CUXID = PA0PW06.PA0PW-CUST;
            ;
            PA0PS17(); /* get customer rec*/
            ;
            if (SQLCA.VAGen_SQLCODE != 0) /* row not found*/
              converseLib.validationFailed(132);
              PA0PW00.XXXMODID = "260";
              exit stack;
            end
            ;
            VPAWRK03.PC2INSEG = PC2REC.PC2INSEG; /* inventory seg*/
          else
            VPAWRK03.XDSCD = " "; /* indirect direct ship*/
          end
          ;
        end
        ;
        set VPOITM05 empty;
        VPOITM05.PC3PONBR = VPAWRK03.PC3PONBR;
        VPOITM05.PC6ITMNB = VPAWRK03.PC6ITMNB;
        VPOITM05.XGPCD = "02";
        ;
        PA0PS-50-VPOITM-SA(); /* GET DPRODC.VPOITM05*/
        ;
        VPAWRK03.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
        PA0PS-13(); /* add row*/
        ;
        /* END;*/
      end
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
       /* pa0pw04     if the items being process are for*/
                   /* a doemestic whse and bottom lines are*/
                   /* selected and b/l is updated*/
   /* -----------------------------------------------------------*/
  ;
  if (PA0PW06.PA0PW-WHSE != " ")
    if (PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
     || PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
     || PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
      ;
      PA5REC.PA1OANBR = PA1REC.PA1OANBR;
      PA5REC.XWHCD = PA0PW06.PA0PW-WHSE;
      PA0P116(); /* select unique*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* b/l found*/
        ;
        XX1 = 1;
        while (XX1 <= 40)
          PA5REC.PA5AJQTY[XX1] = PA5REC.PA5AJQTY[XX1]           + PA0PW04.PA0PWCAJ[XX1];
          XX1 = XX1 + 1;
        end
        PA0PS-16(); /* update b/l*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
    /* if the oa type is a factory transfer then adjust the*/
    /* factory work records  (bulk quantities)*/
    /* ONLY ADJUST THE factory bulk records if FROM and TO*/
    /* items are po items,,,, otherwise the fcty bulk rows are*/
    /* adjusted by other routines*/
   /* ------------------------------------------------------------*/
  ;
  if (PA1REC.YETCD == "FT") /* ; factory transfer*/
    if (PA0PW03.PACORDTY == "6"
     || PA0PW03.PACORDTY == "7"
     || PA0PW03.PACORDTY == "8")
      ;
      if (PA0PW04.PACORDTY == "6"
       || PA0PW04.PACORDTY == "7"
       || PA0PW04.PACORDTY == "8")
        ;
                                /* From PO*/
        set VPAWRK02 empty;
        VPAWRK02.FY1FCTYC = PA0PW05.FY1FCTYC; /* from po item*/
        VPAWRK02.PACORDTY = "1";
        VPAWRK02.PA1OANBR = PA1REC.PA1OANBR;
        PA0PS-11(); /* select unique fcty work*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
          ;
          ;
          VPAWRK02.PACFBQTY = VPAWRK02.PACFBQTY - PA0PM002.PA0PMFAT;
          ;
          PA0PS-10(); /* update factory bulkqty*/
          ;
        end
        ;
                           /* TO PO*/
        set VPAWRK02 empty;
        VPAWRK02.FY1FCTYC = PA0PW06.FY1FCTYC; /* from po item*/
        VPAWRK02.PACORDTY = "1";
        VPAWRK02.PA1OANBR = PA1REC.PA1OANBR;
        PA0PS-11(); /* select unique fcty work*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
          ;
          VPAWRK02.PACFBQTY = VPAWRK02.PACFBQTY - PA0PM002.PA0PMTAT;
          ;
          PA0PS-10(); /* update factory bulkqty*/
          ;
        end
      end
    end
  end
  ;
  ;

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();
  PA0PW14.PA0PW-IND = 1;
  ;
  if (PA1REC.YETCD == "NA" || 
  PA1REC.YETCD == "NR" || 
  PA1REC.YETCD == "NM" || 
  PA1REC.YETCD == "ND" || 
  PA1REC.YETCD == "NI" || 
  PA1REC.YETCD == "NT" || 
  PA1REC.YETCD == "NS" || 
  PA1REC.YETCD == "NO" || 
  PA1REC.YETCD == "DN")
    if (PA0PW14.PA0PW-CUST-FROM-XCTCD == "JAPA")
      PA0P-2601();
      PA0P-2602(); /* VALIDATE THE ENTRY MADE AND*/
                                   /* UPDATE/ADD*/
    end
  end
  ;
  PA0PW00.XXXMODID = "260"; /* Module identification*/
  PA0PW00.XXXMSGNO = 1; /* Update successful,*/
  PA0PW00.PA0PWSWD = "1"; /* map1*/
  PA0PW00.PA0PWSWR = "Y"; /* reselect*/
  exit stack;
  ;
   /* ------------------------------------------------------------*/
                   /* End of process PA0P-260*/
   /* ------------------------------------------------------------*/
end // end PA0P-260

Function PA0P-2601()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
   /* SET THE BOTTOM LINE ATTRIBUTES AS DARK AND AUTOSKIP*/
  ;
  if (PA0PW14.PA0PW-CUST-FROM-XCTCD == "JAPA")
    set PA0PM-CFP-JAP-LBL initialAttributes;
    set PA0PM-CFP-JAP-NBR cursor, normal;
    PA0PM-CFP-JAP-LBL = "JAPAN  OA : ";
    set PA0PM-CFP-CAN-LBL skip, invisible;
    set PA0PM-CFP-CAN-NBR skip, invisible;
  else
    set PA0PM-CFP-JAP-LBL skip, invisible;
    set PA0PM-CFP-JAP-NBR skip, invisible;
    set PA0PM-CFP-CAN-LBL skip, invisible;
    set PA0PM-CFP-CAN-NBR skip, invisible;
  end
  ;
  ;
  set PA0PM002.PA0PMSCR protect;
  set PA0PM002.PA0PMTFA protect;
  set PA0PM002.PA0PM-TO-WHSE protect;
  set PA0PM002.PA0PMTCU protect;
  set PA0PM002.PA0PMTMD protect;
  set PA0PM002.PA0PMTRT protect;
  set PA0PM002.PA0PMTDN protect;
  set PA0PM002.PA0PMTPT protect;
  set PA0PM002.PA0PMTAT protect;
  set PA0PM002.PA0PMTBT protect;
  set PA0PM002.PA0PMTBO protect;
  set PA0PM002.PA0PMTAJ[1] protect;
  set PA0PM002.PA0PMTAJ[2] protect;
  set PA0PM002.PA0PMTAJ[3] protect;
  set PA0PM002.PA0PMTAJ[4] protect;
  set PA0PM002.PA0PMTAJ[5] protect;
  set PA0PM002.PA0PMTAJ[6] protect;
  set PA0PM002.PA0PMTAJ[7] protect;
  set PA0PM002.PA0PMTAJ[8] protect;
  ;
  set PA0PM002.PA0PM-PF3-LABEL protect, invisible;
  set PA0PM002.PA0PM-PF10-LABEL protect, invisible;
  set PA0PM002.PA0PM-PF11-LABEL protect, invisible;
  set PA0PM002.PA0PM-PF13-LABEL protect, invisible;
  ;
  ;
  PA0PW00.XXXMODID = " "; /* Module id*/
  PA0PW00.XXXMSGNO = 0; /* Reset message number*/
end // end PA0P-2601

// Process valid input request
Function PA0P-2602()
   /* ------------------------------------------------------------*/
                      /* PROCESS VALID REQUEST*/
                      /* COMPUTE ADJUSTMENT TOTALS*/
                       /* PF9 update VPAWRK02 Table*/
   /* -----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa1 /* PA1 was pressed*/
   || converseVar.eventKey is pa2 /* or PA3 was pressed*/
   || converseVar.eventKey is pa3) /* or PA3 was pressed*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    return;
  end
  ;
  if (converseVar.eventKey not pf9 && 
  converseVar.eventKey not enter)
    PA0PW00.XXXMODID = "260";
    converseLib.validationFailed(41);
    return;
  end
  ;
   /* IF EZEAID IS PF3;*/
     /* EZERTN;*/
   /* END;*/
  ;
   /* VALIDATE FF-OA-NBRs.*/
  ;
  PA0PW14.PA0PW-CFP-OA-FROM-NBR = PA0PM002.PA0PM-CFP-JAP-NBR;
  if (PA0PW14.PA0PW-CFP-OA-FROM-NBR == 0)
    converseLib.validationFailed(40);
    PA0PW00.XXXMODID = "260";
    return;
  end
  ;
  if (converseVar.eventKey is enter)
    converseLib.validationFailed(30);
    PA0PW00.XXXMODID = "260";
    return;
  end
  ;
  XX0XS01(); /* GET CURRENT TIME*/
  ;
  VPACFP01.FFOANBR = PA0PW14.PA0PW-CFP-OA-FROM-NBR;
  VPACFP01.XCTCD = "JAPA";
  PA0PS-93-VPACFP-S();
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PA1REC.PA1OANBR != VPACFP01.PA1OANBR)
      PA0PW14.FFOANBR = VPACFP01.FFOANBR;
      PA0PW14.ZZ-CHNG-CNT = VPACFP01.ZZ-CHNG-CNT;
      VPACFP01.PA1OANBR = PA1REC.PA1OANBR;
      PA0PS-94-VPACFP-S1();
      if (SQLCA.VAGen_SQLCODE == 0)
        PA0PS-92-VPACFP-D1();
      end
      VPACFP01.FFOANBR = PA0PW14.FFOANBR;
      VPACFP01.ZZ-CHNG-CNT = PA0PW14.ZZ-CHNG-CNT;
      VPACFP01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
      VPACFP01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
      VPACFP01.ZZ-CHNG-USER-ID = COMMAREA.CAUSERID;
      VPACFP01.PA1OANBR = PA1REC.PA1OANBR;
      PA0PS-95-VPACFP-U();
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      PA0PW14.FFOANBR = VPACFP01.FFOANBR;
      VPACFP01.PA1OANBR = PA1REC.PA1OANBR;
      PA0PS-94-VPACFP-S1();
      if (SQLCA.VAGen_SQLCODE == 0)
        PA0PS-92-VPACFP-D1();
      end
      VPACFP01.FFOANBR = PA0PW14.FFOANBR;
      VPACFP01.ZZ-CHNG-CNT = 0;
      VPACFP01.ZZ-CHNG-DT = 0;
      VPACFP01.ZZ-CHNG-USER-ID = COMMAREA.CAUSERID;
      VPACFP01.ZZZSDT = XX0XW01.XX0XWDAT;
      VPACFP01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
      VPACFP01.PA1OANBR = PA1REC.PA1OANBR;
      PA0PS-91-VPACFP-A();
    end
  end
  ;
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();
  ;
  ;
  PA0PW00.XXXMODID = "260"; /* Module identification*/
  PA0PW00.XXXMSGNO = 1; /* Update successful,*/
  PA0PW00.PA0PWSWD = "1"; /* map1*/
  PA0PW00.PA0PWSWR = "Y"; /* reselect*/
  exit stack;
  ;
   /* ------------------------------------------------------------*/
                   /* End of process PA0P-2602*/
   /* ------------------------------------------------------------*/
end // end PA0P-2602

// Process valid input request
Function PA0P-261()
   /* ------------------------------------------------------------*/
                      /* update po item*/
                      /* or if keys changed*/
                      /* create new po item*/
   /* -----------------------------------------------------------*/
  ;
  ;
  PA0PW03.PACSEVAL = " "; /* reset select*/
  ;
  XX1 = 1; /* sum adjustments*/
  while (XX1 <= 40)
    PA0PW03.PACFLADJ[XX1] = PA0PW03.PACFLADJ[XX1] + PA0PW03.PA0PWCAJ[XX1];
    XX1 = XX1 + 1;
  end
  ;
  if (PA0PW05.PA0PWCKY != "Y") /* key data not changed*/
    VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW03.PA0PW3GP;
    PA0PS-10(); /* update this item*/
    ;
  else /* delete and add*/
    ;
    VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW03.PA0PW3GP;
    PA0PS-12(); /* delete row*/
    ;
    /* Replaced VPAWRK02 with VPAWRK03 below to maintain*/
    /* REL-PLN-NBR. This change done part of NSC. GREDDY - 05/15/00*/
    ;
    VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW03.PA0PW3GP;
    PA0PS-FRMT-VPAWRK3();
    ;
    if (VPAWRK03.PC6RTADT > 0)
      if (PA0PW07.PA0PW1YY > 60)
        VPAWRK03.PC6RTADT = VPAWRK03.PC6RTADT + 19000000;
      else
        VPAWRK03.PC6RTADT = VPAWRK03.PC6RTADT + 20000000;
      end
    end
    ;
    if (PA1REC.YESCD == "DD" /* dont blank ets*/
     || PA1REC.YESCD == "DN" 
     || PA1REC.YESCD == "ND" 
     || PA1REC.YESCD == "NI")
      PA0PW07.PA0PW2DT = PA0PW05.PA0PWDET;
      PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
      PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
      PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
      VPAWRK03.PC6ETSDT = PA0PW07.PA0PW1DT;
      ;
      if (VPAWRK03.PC6ETSDT > 0)
        if (PA0PW07.PA0PW1YY > 60)
          VPAWRK03.PC6ETSDT = VPAWRK03.PC6ETSDT + 19000000;
        else
          VPAWRK03.PC6ETSDT = VPAWRK03.PC6ETSDT + 20000000;
        end
      end
      ;
    else
      ;
      VPAWRK03.PC6ETSDT = 0;
    end
    ;
    VPAWRK03.XWHCD = PA0PW05.PA0PW-WHSE;
    VPAWRK03.PC2CUXID = PA0PW05.PA0PW-CUST;
    ;
    set VPOITM05 empty;
    VPOITM05.PC3PONBR = VPAWRK03.PC3PONBR;
    VPOITM05.PC6ITMNB = VPAWRK03.PC6ITMNB;
    VPOITM05.XGPCD = "02";
    ;
    PA0PS-50-VPOITM-SA(); /* GET DPRODC.VPOITM05*/
    ;
    VPAWRK03.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
    PA0PS-13(); /* add row*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
       /* pa0pw03     if the items being process are for*/
                   /* a doemestic whse and botom lines are*/
                   /* selected then update b/l*/
   /* -----------------------------------------------------------*/
  ;
  if (PA0PW03.PACORDTY == "6" /* po   item*/
   || PA0PW03.PACORDTY == "7" /* calc item*/
   || PA0PW03.PACORDTY == "8") /* new item*/
    ;
    if (PA0PW03.XWHCD != " ")
      if (PA0PW03.XWHCD == PA0PW00.PA0PW-REGION-WHSE[1]
       || PA0PW03.XWHCD == PA0PW00.PA0PW-REGION-WHSE[2]
       || PA0PW03.XWHCD == PA0PW00.PA0PW-REGION-WHSE[3])
        ;
        PA5REC.PA1OANBR = PA0PW03.PA1OANBR;
        PA5REC.XWHCD = PA0PW03.XWHCD;
        PA0P116(); /* select unique*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0) /* b/l found*/
          ;
          XX1 = 1;
          while (XX1 <= 40)
            PA5REC.PA5AJQTY[XX1] = PA5REC.PA5AJQTY[XX1]                                    + PA0PW03.PA0PWCAJ[XX1];
            XX1 = XX1 + 1;
          end
          PA0PS-16(); /* update b/l*/
        end
      end
    end
  end
  ;
  ;
   /* --------------------end PA0P261-----------------------------*/
  ;
end // end PA0P-261

// Process valid from SO
Function PA0P-262()
   /* ------------------------------------------------------------*/
                      /* process sales order*/
                      /* update or delete*/
  ;
                      /* factory size adjustment rows*/
                      /* always process*/
   /* -----------------------------------------------------------*/
  ;
  VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW03.PA0PW3GP;
  ;
  ;
  if (PA0PW03.PACORDTY == "4") /* sales order*/
    ;
    if (PA0PW03.PA0PWRAJ[41] == 0) /* nothing left to adjust*/
      PA0PS-12(); /* delete so all used up*/
    else
      VPAWRK02.PACSEVAL = " ";
      ;
      XX1 = 1;
      while (XX1 <= 40)
        VPAWRK02.PACFLADJ[XX1] = PA0PW03.PA0PWCAJ[XX1] +         PA0PW03.PA0PWORD[XX1];
        XX1 = XX1 + 1;
      end
      ;
      PA0PS-10(); /* update so row*/
    end
    ;
  end
   /* ---------------------------------------------------------- -*/
  ;
                      /* compute factory adjustment*/
   /* -----------------------------------------------------------*/
  ;
  set VPAWRK02 empty;
  ;
  ;
  VPAWRK02.PACORDTY = "2"; /* fa 2*/
  VPAWRK02.YMTCD = "XX";
  VPAWRK02.PA1OANBR = PA1REC.PA1OANBR;
  VPAWRK02.FY1FCTYC = PA0PW06.FY1FCTYC;
  ;
  PA0PS-11(); /* get oa work fcty row*/
  ;
   /* -------------------------------------------------------*/
   /* compute totals for add or adjustment*/
  ;
   /* -------------------------------------------------------*/
  XX1 = 1;
  while (XX1 <= 40)
    VPAWRK02.PACFLADJ[XX1] = VPAWRK02.PACFLADJ[XX1] +     PA0PW03.PA0PWCAJ[XX1];
    VPAWRK02.PACFBQTY = VPAWRK02.PACFBQTY + PA0PW03.PA0PWCAJ[XX1];
    XX1 = XX1 + 1;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* row found update or delete*/
    ;
    if (VPAWRK02.PACFBQTY == 0) /* current qty = 0 delete it*/
      PA0PS-12(); /* delete row*/
    else
      PA0PS-10(); /* update fa oa work*/
    end
    ;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no row found add it*/
      set VPAWRK03 empty;
      VPAWRK03.PACORDTY = VPAWRK02.PACORDTY;
      VPAWRK03.YMTCD = VPAWRK02.YMTCD;
      VPAWRK03.PA1OANBR = VPAWRK02.PA1OANBR;
      VPAWRK03.FY1FCTYC = VPAWRK02.FY1FCTYC;
      XX1 = 1;
      while (XX1 <= 40)
        VPAWRK03.PACFLADJ[XX1] = VPAWRK02.PACFLADJ[XX1];
        XX1 = XX1 + 1;
      end
      VPAWRK03.PACFBQTY = VPAWRK02.PACFBQTY;
      PA0PS-13(); /* add row*/
    end
  end
  ;
  ;
   /* ---------------- End of process PA0P262 --------------------*/
  ;
end // end PA0P-262

// Create  New PO Item
Function PA0P-264()
   /* ------------------------------------------------------------*/
                 /* if no data exist to add exit*/
                      /* add a new po item*/
                      /* order type 7*/
   /* -----------------------------------------------------------*/
  ;
  if (PA0PM002.PA0PMTNT == 0) /* new po qty*/
    return;
  end
  ;
   /* VPAWRK02 has been replaced with VPAWRK03 as part of NSC changes*/
   /* in order to maintain REL-PLN-NBR. GREDDY -- 05/15/00*/
  ;
  set VPAWRK03 empty; /* initial*/
  ;
  VPAWRK03.PA1OANBR = PA0PW03.PA1OANBR;
  VPAWRK03.PACORDTY = "7";
  PA0PW04.PACORDTY = "7"; /* need to set this to adjust fcty bulk*/
                                   /* qty*/
  VPAWRK03.FY1FCTYC = PA0PW06.FY1FCTYC;
  VPAWRK03.YMTCD = PA0PW06.YMTCD;
  VPAWRK03.XCTCD = PA0PW04.XCTCD;
  VPAWRK03.PC-XCT-ORIG-CD = PA0PW04.PC-XCT-ORIG-CD;
  ;
   /* ------------------------------------------------------------*/
   /* keep in mind that a new item (record type 7) can create*/
   /* another new item (record type 7).  In this case, we want*/
   /* to maintain the from po information in both records.*/
   /* -----------------------------------------------------------*/
  ;
  if (PA0PW06.PACFPONO == 0
   && PA0PW03.PACFPONO != 0)
    PA0PW06.PACFPONO = PA0PW03.PACFPONO;
    PA0PW06.PACFPCIT = PA0PW03.PACFPCIT;
  end
  ;
  VPAWRK03.PACFPONO = PA0PW06.PACFPONO;
  VPAWRK03.PACFPCIT = PA0PW06.PACFPCIT;
  ;
  PA0PW07.PA0PW2DT = PA0PW06.PA0PWDRT;
  PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
  PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
  PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
  VPAWRK03.PC6RTADT = PA0PW07.PA0PW1DT;
  ;
  if (VPAWRK03.PC6RTADT > 0)
    if (PA0PW07.PA0PW1YY > 60)
      VPAWRK03.PC6RTADT = VPAWRK03.PC6RTADT + 19000000;
    else
      VPAWRK03.PC6RTADT = VPAWRK03.PC6RTADT + 20000000;
    end
  end
  ;
  PA0PW07.PA0PW2DT = PA0PW06.PA0PWDET;
  PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
  PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
  PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
  VPAWRK03.PC6ETSDT = PA0PW07.PA0PW1DT;
  ;
  ;
  ;
  if (VPAWRK03.PC6ETSDT > 0)
    if (PA0PW07.PA0PW1YY > 60)
      VPAWRK03.PC6ETSDT = VPAWRK03.PC6ETSDT + 19000000;
    else
      VPAWRK03.PC6ETSDT = VPAWRK03.PC6ETSDT + 20000000;
    end
  end
  ;
  ;
  VPAWRK03.PC3POIDT = PA0PW00.PA0PWPDT;
  ;
  VPAWRK03.XWHCD = PA0PW06.PA0PW-WHSE;
  VPAWRK03.PC2CUXID = PA0PW06.PA0PW-CUST;
  ;
  if (VPAWRK03.XWHCD != "  "
   && VPAWRK03.PC2CUXID != "     ")
    VPAWRK03.XDSCD = "2"; /* dir ship 2*/
    PA0P-26410();
    ;
  else
    ;
    if (VPAWRK03.PC2CUXID != "     ")
      VPAWRK03.XDSCD = "1"; /* dir ship*/
      PA0P-26410();
    else
      VPAWRK03.XDSCD = " "; /* a warehouse*/
    end
    ;
  end
  ;
  XX1 = 1;
  while (XX1 <= 40)
    VPAWRK03.PACWRKQT[XX1] = PA0PW04.PACFLADJ[XX1]; /* ORD QTY*/
    VPAWRK03.PACADJQT[XX1] = PA0PW04.PACFLADJ[XX1]; /* BAL TO SHIP*/
    VPAWRK03.PACFLADJ[XX1] = 0; /* adjustmentsreset*/
    XX1 = XX1 + 1;
  end
  ;
  if (PA0PW03.PACORDTY == "6" /* type six and seven should move the*/
   || PA0PW03.PACORDTY == "7") /* late book flag to new item*/
    VPAWRK03.FB-LATE-BK-FL-MDT = PA0PW03.FB-LATE-BK-FL-MDT;
    VPAWRK03.FB-LATE-BK-FL = PA0PW03.FB-LATE-BK-FL;
    VPAWRK03.XFRCD = PA0PW03.XFRCD;
  end
  ;
  set VPOITM05 empty;
  VPOITM05.PC3PONBR = VPAWRK03.PACFPONO;
  VPOITM05.PC6ITMNB = VPAWRK03.PACFPCIT;
  VPOITM05.XGPCD = "02";
  ;
  PA0PS-50-VPOITM-SA(); /* GET DPRODC.VPOITM05*/
  ;
  VPAWRK03.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
  ;
  PA0PS-13(); /* add row*/
   /* ---------------- End of process PA0P-264 --------------------*/
  ;
end // end PA0P-264

Function PA0P-26410()
   /* ------------------------------------------------------------*/
                 /* if no data exist to add exit*/
                      /* add a new po item*/
                      /* order type 7*/
   /* -----------------------------------------------------------*/
   /* VPAWRK02 has been replaced with VAPWRK03 to ensure that*/
   /* REL-PLN-NBR is maintained. Changes done part of NSC*/
   /* GREDDY -- 05/15/00.*/
   /* -----------------------------------------------------------*/
  set PC2REC empty;
  PC2REC.XGPCD = "02";
  PC2REC.PC2CUXID = PA0PW06.PA0PW-CUST;
  ;
  PA0PS17(); /* get customer rec*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* row not found*/
    converseLib.validationFailed(132);
    PA0PW00.XXXMODID = "26410";
    exit stack;
  end
  ;
  VPAWRK03.PC2INSEG = PC2REC.PC2INSEG; /* inventory seg*/
  ;
   /* SKIP IF CHECK IF EUROPEAN O/A*/
  ;
  if (PA1REC.PA1OANBR > 199999
   && PA1REC.PA1OANBR < 300000)
    if (PA1REC.YETCD == "DD" /* domestic diversion,*/
     || PA1REC.YETCD == "DR" /* domestic reduction,*/
     || PA1REC.YETCD == "DA") /* domestic addition must go to*/
      if (PC2REC.YSMXDV == "20") /* to domestic customer*/
        converseLib.validationFailed(23);
        PA0PW00.XXXMODID = "26410";
        exit stack;
      end
    end
  end
  ;
  if (PA1REC.YETCD == "ND" /* nil diversion*/
   || PA1REC.YETCD == "NA" /* nil add*/
   || PA1REC.YETCD == "NR") /* nil reduction must go to*/
    if (PC2REC.YSMXDV == "10") /* to nil customer*/
      converseLib.validationFailed(23);
      PA0PW00.XXXMODID = "26410";
      exit stack;
    end
  end
  ;
  if (PA0PW03.PACORDTY == "6" /* TYPE SIX AND SEVEN SHOULD MOVE THE*/
   || PA0PW03.PACORDTY == "7") /* LATE BOOK FLAG TO NEW ITEM*/
    VPAWRK03.FB-LATE-BK-FL-MDT = PA0PW03.FB-LATE-BK-FL-MDT;
                                   /* LB DATE*/
    VPAWRK03.FB-LATE-BK-FL = PA0PW03.FB-LATE-BK-FL;
  end
  ;
  if (PA1REC.YETCD == "FT" /* this code gets the sales order number*/
   || PA1REC.YETCD == "DM" /* from the 'from' item and puts it into*/
   || PA1REC.YETCD == "NM") /* the new type 7 record created*/
   /* OR PA1REC.YETCD = 'DT';*/
   /* OR PA1REC.YETCD = 'NT';*/
    VPAWRK03.OP1PARTN = PA0PW03.OP1PARTN;
    VPAWRK03.OP1CUOID = PA0PW03.OP1CUOID;
    VPAWRK03.OP1NORID = PA0PW03.OP1NORID;
  else
    /* PA0349: MSR MAINTAIN SALES ORDER NUMBER*/
    if (PA0PW03.OP1CUOID == PA0PM002.PA0PM-SO-CUOID[2]
     && PA0PW03.OP1NORID == PA0PM002.PA0PM-SO-NORID[2])
      VPAWRK03.OP1PARTN = PA0PW03.OP1PARTN;
      VPAWRK03.OP1CUOID = PA0PW03.OP1CUOID;
      VPAWRK03.OP1NORID = PA0PW03.OP1NORID;
    end
    ;
    PA0P-265(); /* may need to get sales order number*/
  end
  ;
  ;
   /* ---------------- End of process PA0P-26410------------------*/
  ;
end // end PA0P-26410

// find appropriate so number
Function PA0P-265()
   /* --------------------------------------------------------------------*/
                 /* check to see if it is a dom to nil or dom add*/
                 /* or dom to dom or nil to nil*/
             /* if it is, go after the so number on type 4 pawrk*/
                 /* so that it can be  carried through on new work rec*/
  ;
   /* --------------------------------------------------------------------*/
   /* VPAWRK02 has been replaced with VPAWRK03 to be able to maintain*/
   /* REL-PLN-BR. Changes done part of NSC -- GREDDY 05/15/00*/
   /* --------------------------------------------------------------------*/
  if (PA1REC.YETCD == "DA"
   || PA1REC.YETCD == "PR"
   || PA1REC.YETCD == "EO"
   || PA1REC.YETCD == "NA"
   || PA1REC.YETCD == "NO"
   || PA1REC.YETCD == "OR"
   || PA1REC.YETCD == "DN"
   || PA1REC.YETCD == "ND"
   || PA1REC.YETCD == "DD"
   || PA1REC.YETCD == "DS"
   || PA1REC.YETCD == "SE")
    if (PA0PW03.PACORDTY == "4") /* if transfer of sales order qty (type*/
                                   /* 4)*/
      VPAWRK03.OP1PARTN = PA0PW03.OP1PARTN;
      VPAWRK03.OP1CUOID = PA0PW03.OP1CUOID; /* put so number in vpawrk*/
      VPAWRK03.OP1NORID = PA0PW03.OP1NORID;
    else
      if (PA0PW06.PA0PW-CUST != "NDV01") /* nil coporate po*/
        move VPAWRK03 to PA0PW08 withV60Compat; /* save off current pawrk*/
        set VPAWRK03 empty; /* clear selection record*/
        VPAWRK03.PACORDTY = "4"; /* get type four record*/
        VPAWRK03.PC2CUXID = PA0PW06.PA0PW-CUST; /* cust num to vpawrk2*/
        VPAWRK03.XWHCD = PA0PW06.PA0PW-WHSE; /* whse to vpawrk02*/
        if (VPAWRK03.XWHCD != "  " /* whse not spaces*/
         && VPAWRK03.PC2CUXID != "    ") /* cust xref not spaces*/
          VPAWRK03.XDSCD = "2"; /* cust number to vpawrk*/
        else
          VPAWRK03.XDSCD = "1"; /* cust number to vpawrk*/
        end
        VPAWRK03.PA1OANBR = PA0PW03.PA1OANBR; /* oa number to vpawrk*/
        PA0PS-VPAWRK03-S(); /* get so type for so #*/
        if (SQLCA.VAGen_SQLCODE != 0) /* if no so type 4 found*/
          if (PA0PW06.PA0PW-CUST-FOUR == "MISC"
           || PA1REC.YETCD != "PR"
           || PA1REC.YETCD != "EO"
           || PA1REC.YETCD != "NA"
           || PA1REC.YETCD != "NO"
           || PA1REC.YETCD != "OR")
            move PA0PW08 to VPAWRK03 withV60Compat; /* restore current pawrk*/
            /* PA0349: WHY DELETE SALES ORDER INFO WHEN SAME CUSTOMER?*/
            if (VPAWRK03.PC2CUXID == " ")
              PA0PM002.PA0PM-SO-CUOID[2] = 0;
              PA0PM002.PA0PM-SO-NORID[2] = 0;
              VPAWRK03.OP1PARTN = " ";
              PA0PM002.PA0PM-TO-MSR-IND = " ";
              VPAWRK03.OP1CUOID = 0; /* so number in vpawrk*/
              VPAWRK03.OP1NORID = 0;
            end
          else
            converseLib.validationFailed(236); /* error - no so number*/
            exit stack; /* return and let em know*/
          end
        else
          PA0PW04.OP1PARTN = VPAWRK03.OP1PARTN;
          PA0PW04.OP1CUOID = VPAWRK03.OP1CUOID; /* save so number*/
          PA0PW04.OP1NORID = VPAWRK03.OP1NORID;
          move PA0PW08 to VPAWRK03 withV60Compat; /* restore saved pawrk*/
          VPAWRK03.OP1PARTN = PA0PW04.OP1PARTN;
          VPAWRK03.OP1CUOID = PA0PW04.OP1CUOID; /* so number in vpawrk*/
          VPAWRK03.OP1NORID = PA0PW04.OP1NORID;
        end
      end
    end
  end
  ;
   /* **** end of routine  pa0p265        *****************/
end // end PA0P-265

// Process o/a numbers in a list
Function PA0P-300()
   /* ------------------------------------------------------------*/
  ;
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  PA0P310();
  ;
  while (converseVar.eventKey not pf3)
    ;
    PA0P320(); /* Format and display the map*/
    ;
    PA0P330(); /* check pfkeys*/
    ;
    PA0P-350(); /* validate key data*/
    ;
    ;
    PA0P-360(); /* process valid request*/
    ;
    ;
  end
  ;
  PA0PW00.PA0PWSWD = "1"; /* map switch*/
  PA0PW00.PA0PWSWR = "N"; /* reselect data*/
  exit stack;
end // end PA0P-300

// Verify user input
Function PA0P-350()
   /* ------------------------------------------------------------*/
                      /* apply all adjustments*/
                      /* to work records pa0pw03*/
                      /* and pa0pw04*/
   /* -----------------------------------------------------------*/
  ;
  if (PA0PM004.PA1OANBR == 0) /* first time*/
    return;
  end
  ;
  PA0PW00.PA0PWCHG = "N"; /* data changed*/
  ;
   /* ------------------------------------------------------------*/
                      /* validate any key changes*/
                      /* from section of map*/
   /* -----------------------------------------------------------*/
  ;
  XX5 = 0; /* rta and md only          {*/
  ;
  PA0PS-27(); /* from item rta or md chg*/
  ;
  if (XX5 == 1 /* key changed*/
   && converseVar.validationMsgNum == 0)
    PA0PS-28(); /* check dups*/
  end
  ;
  if (XX5 != 0)
    PA0PW00.PA0PWCHG = "Y"; /* data changed*/
  end
  ;
  ;
  ;
  ;
  XX1 = 1; /* column counter*/
  XX2 = PA0PW00.PA0PWBCL; /* starting column displayed*/
  while (XX1 <= 8
   && PG3REC.SY5SZID[XX2] != 0) /* relative size pos*/
    XX3 = PG3REC.SY5SZID[XX2]; /* relative size pos*/
    if (PA0PM004.PA0PMFAJ[XX1] != PA0PW03.PA0PWCAJ[XX3]) /* data changed*/
      ;
      PA0PW00.PA0PWCHG = "Y"; /* data changed*/
      PA0PW03.PA0PWCAJ[XX3] = PA0PM004.PA0PMFAJ[XX1]; /* to adjustment*/
    end
    XX2 = XX2 + 1;
    XX1 = XX1 + 1;
  end
  ;
  XX1 = 1; /* column counter*/
  while (XX1 <= 40)
    ;
    PA0PW03.PA0PWRAJ = PA0PW03.PA0PWORD[XX1] + PA0PW03.PA0PWCAJ[XX1];
    ;
    XX1 = XX1 + 1;
  end
  ;
  ;
  ;
  ;
end // end PA0P-350

// Process valid input request
Function PA0P-360()
   /* ------------------------------------------------------------*/
                      /* PROCESS VALID REQUEST*/
                      /* COMPUTE ADJUSTMENT TOTALS*/
                       /* PF9 update VPAWRK01 Table*/
   /* -----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf9
   && PA0PW00.PA0PWBTE == "Y")
    return;
  end
  ;
  if (PA0PW00.PA0PWBTE == "Y")
    /* NEXT SENTENCE*/
  else
    if (converseVar.validationMsgNum != 0
     || PA0PW00.PA0PWERR == "Y")
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf10)
    sysVar.arrayIndex = PA0PW00.PA0PWBCL - PA0PM004.PA0PMSCR;
    if (sysVar.arrayIndex <= 0)
      converseLib.validationFailed(33);
      PA0PW00.XXXMODID = "360";
    else
      /* SET PA0PM004 CLEAR;*/
      PA0PW00.PA0PWBCL = sysVar.arrayIndex;
      exit stack;
    end
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf11)
    sysVar.arrayIndex = PA0PW00.PA0PWBCL + PA0PM004.PA0PMSCR;
    if (sysVar.arrayIndex > PA0PW00.PA0PWNVZ) /* number of valid sizes*/
      converseLib.validationFailed(33);
      PA0PW00.XXXMODID = "360";
    else
      /* SET PA0PM004 CLEAR;*/
      PA0PW00.PA0PWBCL = sysVar.arrayIndex;
      exit stack;
    end
  end
  ;
  ;
  if (converseVar.eventKey not pf9) /* accept*/
    return;
  end
  ;
  if (PA0PW00.PA0PWCHG == "Y")
    converseLib.validationFailed(34);
    PA0PW00.XXXMODID = "360";
    return;
  end
  ;
   /* ------------------------------------------------------------*/
                      /* determine if new po items have*/
                      /* been created in paopw03*/
                      /* and pa0pw04*/
   /* -----------------------------------------------------------*/
  ;
  PA0P-361(); /* UPDATE PO ITEM*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();
  ;
  PA0PW00.XXXMODID = "360"; /* Module identification*/
  PA0PW00.XXXMSGNO = 01; /* Update successful,*/
  ;
  PA0PW00.PA0PWSWD = "1"; /* map switch*/
  PA0PW00.PA0PWSWR = "Y"; /* reselect data*/
  exit stack;
  ;
   /* ---------------- End of process PA0P360 --------------------*/
end // end PA0P-360

// Process valid input request
Function PA0P-361()
   /* ------------------------------------------------------------*/
                      /* update po item*/
                      /* or if keys changed*/
                      /* update po itemand create a new item*/
                      /* type '07'*/
   /* -----------------------------------------------------------*/
  ;
  ;
  PA0PW03.PACSEVAL = " "; /* reset select*/
  ;
   /* --------------------------------------------------------*/
    /* sum current work adjustments for type's 'or', 'se' ect*/
   /* --------------------------------------------------------*/
  XX1 = 1; /* sum adjustments*/
  while (XX1 <= 40)
    PA0PW03.PACFLADJ[XX1] = PA0PW03.PACFLADJ[XX1] + PA0PW03.PA0PWCAJ[XX1];
    XX1 = XX1 + 1;
  end
  ;
  ;
  VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW03.PA0PW3GP;
  ;
  if (PA0PW05.PA0PWCKY != "Y") /* key data not changed*/
    PA0PS-10(); /* update this item*/
    ;
  else /* update and add*/
    ;
    /* -----------------------------------------------------------*/
    /* if after the adjustments  the new po item has qty and bal*/
    /* to ship is zero. then the new po qty is a result of*/
    /* transportation/shiping.  Rewrite the item so we don't*/
    /* lose shipped qty's.*/
    /* -----------------------------------------------------------*/
    /* --------------new item------------bts----------*/
    ;
    XX1 = 1;
    while (XX1 <= 40)
      VPAWRK02.PACFLADJ[XX1] = VPAWRK02.PACFLADJ[XX1] +       VPAWRK02.PACADJQT[XX1] * -1;
      XX1 = XX1 + 1;
    end
    PA0PS-10(); /* update this item*/
    /* ---------------------------------------------------*/
             /* key data has changed so create a new item*/
    /* ---------------------------------------------------*/
    ;
    VPAWRKCP.VPAWRK02-COPY-GRP = PA0PW03.PA0PW3GP;
    /* ---------------------------------------------------------------*/
    /* Use VPAWRK03 instead of VPAWRK02. NSC changes - GREDDY 05/15/00*/
    /* ---------------------------------------------------------------*/
    PA0PS-FRMT-VPAWRK3();
    VPAWRK03.PACORDTY = "7"; /* 03/20/91 added*/
    VPAWRK03.FY1FCTYC = PA0PW05.FY1FCTYC;
    VPAWRK03.YMTCD = PA0PW05.YMTCD;
    ;
                /* *rta date**/
    PA0PW07.PA0PW2DT = PA0PW05.PA0PWDRT;
    PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
    PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
    PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
    VPAWRK03.PC6RTADT = PA0PW07.PA0PW1DT;
    ;
    if (VPAWRK03.PC6RTADT > 0)
      if (PA0PW07.PA0PW1YY > 60)
        VPAWRK03.PC6RTADT = VPAWRK03.PC6RTADT + 19000000;
      else
        VPAWRK03.PC6RTADT = VPAWRK03.PC6RTADT + 20000000;
      end
    end
                /* *ets date**/
    PA0PW07.PA0PW2DT = PA0PW05.PA0PWDET;
    PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
    PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
    PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
    VPAWRK03.PC6ETSDT = PA0PW07.PA0PW1DT;
    ;
                /* *ets date**/
    if (VPAWRK03.PC6ETSDT > 0)
      if (PA0PW07.PA0PW1YY > 60)
        VPAWRK03.PC6ETSDT = VPAWRK03.PC6ETSDT + 19000000;
      else
        VPAWRK03.PC6ETSDT = VPAWRK03.PC6ETSDT + 20000000;
      end
    end
    ;
    ;
    VPAWRK03.PC3POIDT = PA0PW00.PA0PWPDT; /* po id*/
    ;
    VPAWRK03.XWHCD = PA0PW05.PA0PW-WHSE;
    VPAWRK03.PC2CUXID = PA0PW05.PA0PW-CUST;
    ;
    VPAWRK03.ZZZCHGCT = 0;
                                  /* 03/22 treate like a new item*/
    XX1 = 1;
    while (XX1 <= 40)
      VPAWRK03.PACWRKQT[XX1] = PA0PW03.PA0PWBTS[XX1];
      VPAWRK03.PACADJQT[XX1] = PA0PW03.PA0PWBTS[XX1];
      VPAWRK03.PACFLADJ[XX1] = 0;
      XX1 = XX1 + 1;
    end
    PA0PS-13(); /* add row*/
  end
  ;
   /* ------------------------------------------------------------*/
       /* pa0pw03     if the items being process are for*/
                   /* a doemestic whse and botom lines are*/
                   /* selected then update b/l*/
   /* -----------------------------------------------------------*/
  ;
  ;
  if (PA0PW03.XWHCD != " ")
    if (PA0PW03.XWHCD == PA0PW00.PA0PW-REGION-WHSE[1]
     || PA0PW03.XWHCD == PA0PW00.PA0PW-REGION-WHSE[2]
     || PA0PW03.XWHCD == PA0PW00.PA0PW-REGION-WHSE[3])
      ;
      PA5REC.PA1OANBR = PA0PW03.PA1OANBR;
      PA5REC.XWHCD = PA0PW03.XWHCD;
      PA0P116(); /* select unique*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* b/l found*/
        ;
        XX1 = 1;
        while (XX1 <= 40)
          PA5REC.PA5AJQTY[XX1] = PA5REC.PA5AJQTY[XX1]           + PA0PW03.PA0PWCAJ[XX1];
          XX1 = XX1 + 1;
        end
        PA0PS-16(); /* update b/l*/
      end
    end
  end
  ;
  ;
   /* --------------------end PA0P-361-----------------------------*/
  ;
end // end PA0P-361

// ACCUMULATE B/L SIZES
Function PA0P-400()
   /* ******************************************************/
    /* ACCUMULATE THE B/L QUANTITIES BY SIZE.*/
   /* ******************************************************/
  ;
  set PA0PW10 empty;
  ;
  PA0PW10.PA1OANBR = PA1REC.PA1OANBR;
  PA0PW10.SY1STNBR = PA1REC.SY1STNBR;
  PA0PW10.SY2CLRID = PA1REC.SY2CLRID;
  PA0PW10.XDMCD = PA1REC.XDMCD;
  ;
   /* NOTE THAT FOR MAP PA0PM004, THIS FLAG IS ALWAYS 'F'*/
  ;
  if (PA0PW11.PA0PW-FROM-TO-IND == "F")
    PA0PW10.XWHCD = PA0PW05.PA0PW-WHSE;
  else
    PA0PW10.XWHCD = PA0PW06.PA0PW-WHSE;
  end
  ;
   /* SAVE THE BOTTOM LINE RECORD*/
  ;
  move PA5REC to PA0PW12 withV60Compat;
  ;
   /* PA0PW00.XX7 IS USED TO KEEP TRACK OF THE O/AS USED IN B/L*/
  ;
  PA0PW00.XX7 = 1;
  ;
  set PA1REC empty;
  set PA5REC empty;
  ;
  PA0PW10.PA0PW-TASK = "S1";
  ;
  PA0PS-81-PA1050-S(); /* OPEN O/A BOTTOM LINE CURSOR*/
  ;
  PA0PW10.PA0PW-TASK = "N1";
  ;
  PA0PS-82-PA1050-N(); /* FETCH FIRST RECORD*/
  ;
  PA0P-40001();
  ;
  PA0PW10.PA0PW-TASK = "C1";
  ;
  PA0PS-83-PA1050-C();
  ;
  ;
   /* PA0326: GET THE O/AS THAT HAVE UPDATE P.O. TODAY*/
   /* IT IS NECESSARY TO GET THE DPRODA.VPAHDR01 RECORD FOR THE O/A*/
   /* AGAIN.  THIS IS BECAUSE THE IOMOD PA1050 RETRIEVES THE*/
   /* DPRODA.VPAHDR01 RECORDS FOR THE O/AS TO INCLUDE IN THE BOTTOM*/
   /* LINE*/
  ;
  PA0PW10.PA0PW-TASK = "S2";
  PA0PW10.PA0PW-CURRENT-DATE = XX0XW01.XX0XWDAT;
  ;
  PA0PS-81-PA1050-S(); /* OPEN O/A BOTTOM LINE CURSOR*/
  ;
  PA0PW10.PA0PW-TASK = "N2";
  ;
  PA0PS-82-PA1050-N(); /* FETCH FIRST RECORD*/
  ;
  PA0P-40001();
  ;
  PA0PW10.PA0PW-TASK = "C2";
  ;
  PA0PS-83-PA1050-C();
  ;
  set PA1REC empty;
  ;
  PA1REC.PA1OANBR = PA0PW00.PA1OANBR;
  ;
  PA0P111(); /* RETRIEVE O/A HEADER*/
  ;
end // end PA0P-400

// ACCUMULATE B/L SIZES
Function PA0P-40001()
   /* ******************************************************/
    /* ACCUMULATE THE B/L QUANTITIES BY SIZE.*/
   /* ******************************************************/
  ;
   /* GET THE ORIGINAL BOTTOM LINE RECORD*/
  if (SQLCA.VAGen_SQLCODE == 100)
    move PA0PW12 to PA5REC withV60Compat;
  else
    while (SQLCA.VAGen_SQLCODE == 0)
      ;
        /* LOAD TO THE MAP THE O/A NUMBER THAT IS BEING ADDED TO THE*/
        /* CURRENT BOTTOM LINE.*/
      ;
      PA0PW11.PA0PW-USE-THIS-OA = "Y";
      PA0PW00.XX8 = 1;
      ;
      if (PA0PW00.XX7 <= 15)
        while (PA0PW00.XX8 < PA0PW00.XX7
         && PA0PW11.PA0PW-USE-THIS-OA == "Y")
          if (PA0PW11.PA0PW-BL-OA[XX8] == PA5REC.PA1OANBR)
            PA0PW11.PA0PW-USE-THIS-OA = "N";
          end
          PA0PW00.XX8 = PA0PW00.XX8 + 1;
        end
      else
        PA0PW11.PA0PW-USE-THIS-OA = "N";
      end
      ;
      if (PA0PW11.PA0PW-USE-THIS-OA == "Y")
        PA0PW-BL-OA[XX7] = PA5REC.PA1OANBR;
        PA0PW00.XX7 = PA0PW00.XX7 + 1;
      end
      ;
      PA0PW00.XX6 = 1;
      ;
      while (PA0PW00.XX6 <= 40)
        ;
           /* NOTE THAT FOR MAP PA0PM004, THIS FLAG IS ALWAYS 'F'*/
        ;
        if (PA0PW11.PA0PW-FROM-TO-IND == "F")
          PA0PW-BL-WITH-OAS1[XX6] = PA0PW-BL-WITH-OAS1[XX6] +            PA5REC.PA5AJQTY[XX6];
        else
          PA0PW-BL-WITH-OAS2[XX6] = PA0PW-BL-WITH-OAS2[XX6] +            PA5REC.PA5AJQTY[XX6];
        end
        ;
        PA0PW00.XX6 = PA0PW00.XX6 + 1;
        ;
      end
      ;
      PA0PS-82-PA1050-N(); /* FETCH NEXT RECORD*/
      ;
    end
  end
  ;
end // end PA0P-40001

// Validate Mode of Trans
Function PA0P-60()
  PA0PW00.PA0PTGCT = " ";
  if (PA0PM002.PA0PM-TO-WHSE in XWHTBL.XWHCD)
    if (XWHTBL.XCTCD[sysVar.arrayIndex] != " "
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PA0PW00.PA0PTGCT = XWHTBL.XCTCD[sysVar.arrayIndex];
    end
  end
  PA0PS61(); /* Select fy1rec key set in caller*/
  if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
   && FY1REC.XXXSTAT == "A")   /* Raw active*/
    if (PA0PM002.PA0PMTMD in YMTTBL.YMTCD)
      if (PA0PW00.PA0PTGCT == " ")
        PA0PW00.PA0PTGCT = PC2REC.XCTCD;
      end
    else
      converseLib.validationFailed(29);
    end
  else
    set PA0PM002.PA0PMTFA cursor, bold; /* Highlight data*/
    converseLib.validationFailed(20); /* Invalid factory*/
    PA0PW00.XXXMODID = "S60"; /* Module identification*/
  end
  ;
   /* ---------------- End of process PA0PS60 --------------------*/
  ;
end // end PA0P-60

// Validate user division dom/nil
Function PA0P000()
  ;
   /* ------------------------------------------------------------*/
   /* verify userid sum division group code*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.XDVCD == " ") /* verify xdvcd assigned to user*/
    ;
    PAWREC.XXXMODID = "000"; /* Module identification*/
    PAWREC.XXXMSGNO = 154; /* indicate missing or invalid*/
    ;
  else
    ;
    set YSMREC empty;
    ;
    /* FORMAT THE KEY VALUES FOR SELECT SET*/
    ;
    YSMREC.YSMTBLPF = "XDV";
    YSMREC.YSMSYSPF = "FF";
    YSMREC.YSMSUMID = 1;
    YSMREC.YSMSUMCD = "**";
    YSMREC.YSMSRCVL = COMMAREA.XDVCD;
    ;
    PA0PS51(); /* select set dcorp.vsumcd01*/
    ;
    PA0PS52(); /* fetch dcorp.vsumcd01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100
     || YSMREC.XXXSTAT != "A")
      ;
      PAWREC.XXXMODID = "000"; /* Module identification*/
      PAWREC.XXXMSGNO = 154; /* indicate missing or invalid*/
      ;
    else
      if (YSMREC.YSMSUMCD != "10"
       && YSMREC.YSMSUMCD != "20")
        ;
        PAWREC.XXXMODID = "000"; /* Module identification*/
        PAWREC.XXXMSGNO = 154; /* INDICATE MISSING OR INVALID*/
        ;
      else
        PA0PW00.YSMSUMCD = YSMREC.YSMSUMCD;
      end
    end
    ;
    PA0PS53(); /* close dcorp.vsumcd01 set*/
    ;
  end
  ;
  if (PAWREC.XXXMSGNO == 154) /* user division invalid*/
    COMMAREA.CATOAP = "PA0M";
    XSPAS01(); /* exit to menu*/
  end
  ;
  ;
end // end PA0P000

// Special initialization
Function PA0P001()
   /* ------------------------------------------------------------*/
   /* This process will perform any special initializtion that is*/
   /* unique to an application.*/
   /* ------------------------------------------------------------*/
  ;
  PA0PW00.XXXMODID = PAWREC.XXXMODID; /* Message number*/
  ;
  PA0PW00.PA0PWSWR = "N"; /* init request for data switch*/
  PA0PW00.PA0PWTRW = "N"; /* init trade restriction warning*/
  PA0PWIX1 = 1; /* init page index for prompt*/
  PA0PWIX4 = 1; /* init last item  page index*/
  PA0PWBCL = 1; /* begin column to disp map2*/
  ;
  if (PAWREC.PAWOANBR > 0) /* O/A number exists*/
    PA0PW00.PA1OANBR = PAWREC.PAWOANBR;
    PAWREC.PAWOANBR = 0;
    PA0PW00.PA0PWSWR = "Y"; /* init request for data switch*/
   /* SET PA0PM001.PA1OANBR PROTECT;  /* process passed o/a*/
  end
  ;
  PA0PW00.PAWBUYDT = PAWREC.PAWBUYDT; /* Current buy date*/
  ;
  XX0XS01(); /* Obtain current date*/
  ;
end // end PA0P001

// Select pa1rec
Function PA0P111()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4830" ("S ", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0P110"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PA0P111 -----------------------*/
  ;
end // end PA0P111

// Select pa5rec bottom line
Function PA0P116()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  /*  */
  /* *************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL IO5090 'S ',SQLCA,PA5REC (NOMAPS,NONCSP,REPLY; /* Select row*/
  /*  */
  /* *************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN ****************************/
  /*  */
  try
    call "VBOTLN02" ("S ", SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  /*  */
  /* *************************** Y2K IN END ******************************/
  /*  */
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "116"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0P115"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* Move to displayable field*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PA0P116 -----------------------*/
  ;
end // end PA0P116

// Format the data on the map
Function PA0P121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set PA0PM001 initial; /* M001 input/output area*/
  ;
  if (PA1REC.PA1OANBR != 0)
    PA0P122();
  else
    PA0PWIX3 = 1;
    while (PA0PWIX3 < 13)
      set PA0PM001.PA0PMSEL[PA0PWIX3] protect, invisible;
      PA0PWIX3 = PA0PWIX3 + 1;
    end
  end
  ;
  ;
end // end PA0P121

// Format the data on the map
Function PA0P122()
   /* ------------------------------------------------------------*/
   /* Format the data in the map*/
   /* ------------------------------------------------------------*/
  ;
  if (PA5REC.PA1OANBR != 0)
    PA0PM001.PA0PWSDT = PA0PW00.PA0PWSDT; /* b/l setup dte*/
    PA0PM001.PT3YYMM = PA5REC.PT3YYMM;
  end
  ;
  PA0PM001.PAWBUYYM = PAWREC.PAWBUYYM; /* buy  dte*/
  PA0PM001.PA-AFRGT-RQT-ID = PA1REC.PA-AFRGT-RQT-ID; /* AF NUMBER*/
  PA0PM001.PA1OANBR = PA1REC.PA1OANBR; /* o/a number*/
  PA0PM001.PA1RQQTY = PA1REC.PA1RQQTY; /* o/a qty*/
  PA0PM001.SY1STNBR = PA1REC.SY1STNBR; /* Style number*/
  PA0PM001.SY2CLRID = PA1REC.SY2CLRID; /* Color identification*/
  PA0PM001.XDMCD = PA1REC.XDMCD; /* Dimension code*/
  PA0PM001.YETCD = PA1REC.YETCD; /* o/a type code*/
  PA0PM001.YETDESC = PA0PW01.YETDESC; /* o/a type desc*/
  PA0PM001.PA1HLDFL = PA1REC.PA1HLDFL; /* o/a hold flag*/
   /* MOVE pa0pW00.SY1STYNM TO pa0pM001.SY1STYNM; Style name*/
  PA0PM001.YESCD = PA1REC.YESCD; /* Status code*/
  PA0PM001.YESDESC = PA0PW01.YESDESC; /* o/a status descr*/
  PA0PM001.PA0PWTAJ = PA0PW00.PA0PWQT5; /* sum of all adjustments*/
  PA0PM001.PA0PWPID = PA0PW01.PA0PWPID; /* po id*/
  PA0PM001.PA0PWPBK = PA0PW00.PA0PWPBK;
  ;
   /* IF NO DATA TO DISPLAY, PROTECT SELECTION FIELDS AND EXIT.*/
  if (PA0PW00.XXXMSGNO == 15)
    ;
    PA0PWIX3 = 1;
    while (PA0PWIX3 < 13)
      set PA0PM001.PA0PMSEL[PA0PWIX3] protect, invisible;
      PA0PWIX3 = PA0PWIX3 + 1;
    end
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* format detail items using pa0pwix1 as the begining pointer*/
   /* format data until the page is full or the end of the items*/
   /* is reached..*/
   /* ------------------------------------------------------------*/
  ;
  move PA0PWIX1 to PA0PWIX2 withV60Compat; /* MOVE CURRENT LINE PTR TO IDX2*/
  PA0PWIX3 = 1; /* line counter*/
  while (PA0PWIX3 < 13 /* max line to format12 lines*/
   && PA0PWIX2 <= PA0PWIX4) /* pawixm max items to be displayed*/
    PA0PM001.PA0PMSEL[PA0PWIX3] = PA0PW02.PACSEVAL[PA0PWIX2];
    PA0PM001.FY1FCTYC[PA0PWIX3] = PA0PW02.FY1FCTYC[PA0PWIX2];
    PA0PM001.YMTCD[PA0PWIX3] = PA0PW02.YMTCD[PA0PWIX2];
    ;
    /* Look for style on component program table;*/
    /* Fill hidden field on map1 if found*/
    ;
    if (PA1REC.SY1STNBR > "     ")
      set VCMPPG01 empty; /* CLEAR OUT RECORD*/
      VCMPPG01.XGPCD = "02"; /* gpc*/
      VCMPPG01.SY1STNBR = PA1REC.SY1STNBR; /* Style number*/
      VCMPPG01.SY2CLRID = PA1REC.SY2CLRID; /* Color identification*/
      VCMPPG01.XDMCD = PA1REC.XDMCD; /* Dimension code*/
      VCMPPG01.PC-PO-ID-MO-RNG = PA0PW00.PA0PWPDT; /* buy month*/
      VCMPPG01.FY1FCTYC = PA0PW02.FY1FCTYC[PA0PWIX2]; /* factory code*/
      ;
      PA0PS-VCMPPG01-S();
      if (SQLCA.VAGen_SQLCODE == 0)
        set PA0PM001.SY1STNBR bold, skip;
        set PA0PM001.SY2CLRID bold, skip;
        set PA0PM001.XDMCD bold, skip;
        set PA0PM001.FY1FCTYC[PA0PWIX3] bold, skip;
        PA0PM-01-COMP-PGM-MSG = "COMPONENT";
        set PA0PM-01-COMP-PGM-MSG bold, skip;
      end
    end
    ;
    if (PA0PM001.PA0PMSEL[PA0PWIX3] == "*")
      set PA0PM001.PA0PMSEL[PA0PWIX3] cursor, bold;
    else
      ;
      if (PA0PM001.PA0PMSEL[PA0PWIX3] == "C"
       || PA0PM001.PA0PMSEL[PA0PWIX3] == "P")
        set PA0PM001.PA0PMSEL[PA0PWIX3] skip;
      end
    end
    ;
                    /* direct ship*/
    ;
    if (PA0PW02.XDSCD[PA0PWIX2] == "1" /* dir ship*/
     || PA0PW02.XDSCD[PA0PWIX2] == "2") /* ind dir ship*/
      set PA0PM001.YMTCD[PA0PWIX3] skip, invisible;
    end
    ;
    PA0PM001.PA0PMDST[PA0PWIX3] = PA0PW02.PC2CUXID[PA0PWIX2];
    PA0PM001.PA0PM-WHSE[PA0PWIX3] = PA0PW02.XWHCD[PA0PWIX2];
    ;
    PA0P-12200(); /* LOAD MAP LINE*/
    ;
    if (PA0PM001.PA0PM-SO-NIKE-ID[PA0PWIX3] == 0)
      set PA0PM001.PA0PM-SO-NIKE-ID[PA0PWIX3] skip, invisible;
    end
    ;
    PA0PWIX2 = PA0PWIX2 + 1;
    PA0PWIX3 = PA0PWIX3 + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* compute last line displayed*/
   /* ------------------------------------------------------------*/
  ;
  PA0PWLLN = PA0PWIX1 + 11; /* last line of current disp*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* protect any unused lines*/
   /* ------------------------------------------------------------*/
  ;
  while (PA0PWIX3 <= 12)
    set PA0PM001.PA0PMSEL[PA0PWIX3] protect, invisible;
    PA0PWIX3 = PA0PWIX3 + 1;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* protect component message field if not used*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PM-01-COMP-PGM-MSG == "     ")
    set PA0PM-01-COMP-PGM-MSG invisible, skip;
  end
  ;
end // end PA0P122

// Check attention identifier
Function PA0P130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
   /* IF EUROPEAN O/A, ALLOW INQUIRY ONLY*/
  ;
  if (PA0PM001.PA1OANBR > 199999
   && PA0PM001.PA1OANBR < 300000)
    if (converseVar.eventKey is pf9
     || converseVar.eventKey is pf10
     || converseVar.eventKey is pf16)
      converseLib.validationFailed(340); /* EUROPEAN O/A ALLOWS INQUIRY ONLY*/
      exit stack;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* PA0337: IF ADD, CHG, DEL FLAGS ARE 'N' AND INQ FLAG IS 'Y'*/
   /* DISALLOW PF9,10,14,16,20*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAADDFL == "N"
   && COMMAREA.CACHGFL == "N"
   && COMMAREA.CADELFL == "N"
   && COMMAREA.CAINQFL == "Y")
    ;
    if (converseVar.eventKey is pf9
     || converseVar.eventKey is pf10
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf16
     || converseVar.eventKey is pf20)
      ;
      converseLib.validationFailed(6);
      exit stack;
    end
    ;
  end
  ;
  if (PA0PM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = PA0PM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PA0PM001.CAITEM; /* Application data*/
      PAWREC.PAWOANBR = PA1REC.PA1OANBR; /* Current o/a number*/
      XSPAS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set PA0PM001.CATOAP cursor, modified, bold; /* Highlight*/
    PA0PW00.XXXMODID = "130"; /* Module id*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf3) /* pf3 pressed*/
      XSPAS01(); /* Common pf3 processing*/
    else
      if (converseVar.eventKey is pf1) /* pf1 pressed*/
        COMMAREA.CAITEM = "PA0PM001"; /* move in map name for help*/
      else
        COMMAREA.CAITEM = " "; /* clear item field*/
      end
    end
    ;
    XSPAS01(); /* Exit to another application*/
    PA0PW00.XXXMODID = "130"; /* Module id*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
    /* user requesting new oa to process*/
  if (converseVar.eventKey is pf12) /* next oa request*/
    set PA0PM001 initial;
    PA0PW00.PA0PW-READ-ONLY = "N";
    PA0PW00.PA1OANBR = 0;
    PA1REC.PA1OANBR = 0;
    exit stack;
  end
  ;
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* TRANSFER TO PA0A*/
   && converseVar.eventKey not pf6   /* header instructions*/
   && converseVar.eventKey not pf7   /* scrool back*/
   && converseVar.eventKey not pf8   /* scrool foward*/
   && converseVar.eventKey not pf9   /* print request*/
   && converseVar.eventKey not pf10  /* send report to BUNDL*/
   && converseVar.eventKey not pf14  /* manual adjustment*/
   && converseVar.eventKey not pf15  /* select bottom line PA0T*/
   && converseVar.eventKey not pf16  /* calc pa2050 batch*/
   && converseVar.eventKey not pf17  /* calc pa2050 batch*/
   && converseVar.eventKey not pf18  /* TRANSFER TO PA0Q*/
   && converseVar.eventKey not pf19  /* pa0l oa stat*/
   && converseVar.eventKey not pf20  /* SIZE RUN CHANGE*/
   && converseVar.eventKey not pf21  /* TRANSFER TO PA0E*/
   && converseVar.eventKey not pf24) /* TRANSFER TO PA0C*/
    PA0PW00.XXXMODID = "130"; /* Module id*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end
  ;
   /* ------------------------------------------------------------------*/
   /* PF5 TRANSFER TO PA0A FOR ETS MAINTENANCE OF O/A ITEMS*/
   /* ------------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf5)
    PAWREC.PA1OANBR = PA0PM001.PA1OANBR;
    COMMAREA.CATOAP = "PA0A";
    XSPAS01(); /* COMMON EXIT ROUTINE*/
    ;
     /* ---------------------------------------------------------------*/
     /* IF TRANSFER FAILED, RESET TRY AGAIN.*/
     /* ---------------------------------------------------------------*/
    ;
    set PA0PM001 initial;
    set PA0PM001.PA1OANBR cursor, bold;
    PA0PW00.PA1OANBR = 0;
    PA1REC.PA1OANBR = 0;
    exit stack;
  end
  ;
   /* ------------------------------------------------------------------*/
   /* PF19 TRANSFER TO PA0Z FOR STATUS CHANGE*/
   /* ------------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf19)
    PAWREC.PA1OANBR = PA0PM001.PA1OANBR;
    COMMAREA.CATOAP = "PA0Z";
    XSPAS01(); /* COMMON EXIT ROUTINE*/
    ;
     /* ---------------------------------------------------------------*/
     /* IF TRANSFER FAILED, RESET TRY AGAIN.*/
     /* ---------------------------------------------------------------*/
    ;
    set PA0PM001 initial;
    set PA0PM001.PA1OANBR cursor, bold;
    PA0PW00.PA1OANBR = 0;
    PA1REC.PA1OANBR = 0;
    exit stack;
  end
  ;
   /* ------------------------------------------------------------------*/
   /* PF18 TRANSFER TO PA0Q*/
   /* ------------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf18)
    PAWREC.PA1OANBR = PA0PM001.PA1OANBR;
    COMMAREA.CATOAP = "PA0Q";
    XSPAS01(); /* COMMON EXIT ROUTINE*/
    ;
     /* ---------------------------------------------------------------*/
     /* IF TRANSFER FAILED, RESET TRY AGAIN.*/
     /* ---------------------------------------------------------------*/
    ;
    /* SET PA0PM001 CLEAR;*/
    /* SET PA0PM001.PA1OANBR CURSOR,BRIGHT;*/
    /* MOVE 0 TO PA0PW00.PA1OANBR;*/
    /* MOVE 0 TO PA1REC.PA1OANBR;*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------------*/
   /* PF21 TRANSFER TO PA0E*/
   /* ------------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf21)
    PAWREC.PA1OANBR = PA0PM001.PA1OANBR;
    COMMAREA.CATOAP = "PA0E";
    XSPAS01(); /* COMMON EXIT ROUTINE*/
    ;
     /* ---------------------------------------------------------------*/
     /* IF TRANSFER FAILED, RESET TRY AGAIN.*/
     /* ---------------------------------------------------------------*/
    ;
    /* SET PA0PM001 CLEAR;*/
    /* SET PA0PM001.PA1OANBR CURSOR,BRIGHT;*/
    /* MOVE 0 TO PA0PW00.PA1OANBR;*/
    /* MOVE 0 TO PA1REC.PA1OANBR;*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------------*/
   /* PF24 TRANSFER TO PA0C*/
   /* ------------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf24)
    PAWREC.PA1OANBR = PA0PM001.PA1OANBR;
    COMMAREA.CATOAP = "PA0C";
    XSPAS01(); /* COMMON EXIT ROUTINE*/
    ;
     /* ---------------------------------------------------------------*/
     /* IF TRANSFER FAILED, RESET TRY AGAIN.*/
     /* ---------------------------------------------------------------*/
    ;
    /* SET PA0PM001 CLEAR;*/
    /* SET PA0PM001.PA1OANBR CURSOR,BRIGHT;*/
    /* MOVE 0 TO PA0PW00.PA1OANBR;*/
    /* MOVE 0 TO PA1REC.PA1OANBR;*/
    exit stack;
  end
  ;
end // end PA0P130

// Reset highlighted fields
Function PA0P140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set PA0PM001.PA1OANBR initialAttributes; /* O/A number*/
  ;
  set PA0PM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PA0PM001.CAITEM initialAttributes; /* Commarea application data*/
  set PA0PM001.PA0PM-PF9-LABEL initialAttributes;
  set PA0PM001.PA0PM-PF10-LABEL initialAttributes;
  set PA0PM001.PA0PM-PF16-LABEL initialAttributes;
  ;
  if (converseVar.eventKey is pf6) /* Header instructions requested*/
    set PA9REC empty; /* Clear db2 work record*/
    PA9REC.PA1OANBR = PA0PM001.PA1OANBR; /* O/A number*/
    XPPA100(); /* Perform pop-up window routine*/
    converseLib.clearScreen();
     /* RESET MAP FIELD ATTRIBUTES*/
    exit stack; /* Flow to converse the map*/
  end
  ;
  if (converseVar.eventKey is enter) /* if enter pressed*/
    sysVar.arrayIndex = 12; /* screen length*/
    while (sysVar.arrayIndex >= 1) /* evaluate screen*/
      if (PA0PMSEL[sysVar.arrayIndex] == "?") /* trade restrictions pop-up*/
        set FY1REC empty; /* factory record*/
        set XP0CW01 empty; /* work record*/
        FY1REC.FY1FCTYC = PA0PM001.FY1FCTYC[sysVar.arrayIndex];
        XP0CW01.XP0CWEND = "N"; /* not end of table*/
        XP0CW01.XP0CWXCT = "N"; /* country found flag*/
        XP0C100(); /* get information for pop-up*/
        XP0CW01.XP0CWXX2 = 1; /* init trade restrictions index*/
        while (XP0CW01.XP0CWEND == "N")
          XP0CW01.XP0CWXX1 = 1; /* init pop-up index*/
          XP0C140(); /* perform pop-up routine*/
        end
        if (XP0CW01.XP0CWEND == "Y")
          converseLib.clearScreen();
           /* reset screen*/
          PA0PW00.XXXMODID = "140";
          converseLib.validationFailed(45); /* requested data is displayed*/
          XP0CW01.XP0CWXX2 = 1; /* init index*/
          while (XP0CW01.XP0CWXX2 <= 12)
            PA0PM001.PA0PMSEL[XP0CWXX2] = " "; /* reset select flag*/
            XP0CW01.XP0CWXX2 = XP0CW01.XP0CWXX2 + 1;
          end
        end
        exit stack; /* Flow to converse the map*/
      end
      sysVar.arrayIndex = sysVar.arrayIndex - 1;
    end
  end
end // end PA0P140

// PRODUCTION JCL
Function PA0P170()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L   -   P A 2 0 5 1*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  PA0PW00.XX1 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (PA0PW00.XX1 > 0) /* Until end of table*/
    ;
    if (PA0PT01.TARTYPE[XX1] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT01.TARTYPE[XX1]; /* Type*/
      ;
      PA0PS40(); /* formats JCL*/
      ;
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = PA0PT01.TARJCL[XX1]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0PT01.TARTYPE[XX1]; /* Type*/
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT01.TARJCL[XX1] == "/*EOF") /* End of table*/
      ;
      XX1 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX1 = XX1 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  PA0PS41(); /* Submit the JCL*/
  ;
end // end PA0P170

// PRODUCTION JCL
Function PA0P171()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  PA0PW00.XX1 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (PA0PW00.XX1 > 0) /* Until end of table*/
    ;
    if (PA0PT11.TARTYPE[XX1] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT11.TARTYPE[XX1]; /* Type*/
      ;
      PA0PS40(); /* formats JCL*/
      ;
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = PA0PT11.TARJCL[XX1]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0PT11.TARTYPE[XX1]; /* Type*/
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT11.TARJCL[XX1] == "/*EOF") /* End of table*/
      ;
      XX1 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX1 = XX1 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  PA0PS41(); /* Submit the JCL*/
  ;
end // end PA0P171

// TEST JCL - PA0PT12 - PA4001
Function PA0P181()
   /* ------------------------------------------------------------*/
    /* T E S T   J C L  -  P A 4 0 0 1 - PA0PT12*/
    /*  */
    /* REPORT SENT TO BUNDL AND THEN REMOTE PRINTER*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  XX2 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (XX2 > 0) /* Until end of table*/
    ;
    if (PA0PT12.TARTYPE[XX2] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters for PA4001*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT12.TARTYPE[XX2]; /* Type*/
      ;
      PA0P183(); /* formats JCL*/
      ;
    else
      ;
      if (PA0PT12.TARTYPE[XX2] == "S") /* Parameters statement*/
        ;
         /* ------------------------------------------------------------*/
          /* Format program parametersfor PC1111*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = PA0PT12.TARTYPE[XX2]; /* Type*/
        ;
        PA0P-199(); /* formats PARM*/
        ;
      else
        ;
         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = PA0PT12.TARJCL[XX2]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0PT12.TARTYPE[XX2]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT12.TARJCL[XX2] == "/*EOF") /* End of table*/
      ;
      XX2 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX2 = XX2 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  PA0PS-80-S-PRINTER(); /* Submit the JCL*/
  ;
end // end PA0P181

// PROD JCL - PA0PT02 PA4001
Function PA0P182()
   /* ------------------------------------------------------------*/
    /* P R O D U C T I O N   J C L   -   P A 4 0 0 1  - PA0PT02*/
    /*  */
    /* REPORT SENT TO BUNDL AND THEN REMOTE PRINTER BASED ON*/
    /* USERID.*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  XX2 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (XX2 > 0) /* Until end of table*/
    ;
    if (PA0PT02.TARTYPE[XX2] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters for PA4001*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT02.TARTYPE[XX2]; /* Type*/
      ;
      PA0P183(); /* formats JCL*/
      ;
    else
      if (PA0PT02.TARTYPE[XX2] == "S") /* Parameters statement*/
        ;
         /* ------------------------------------------------------------*/
          /* Format program parameters for PC1111*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = PA0PT02.TARTYPE[XX2]; /* Type*/
        ;
        PA0P-199(); /* formats PARM*/
        ;
      else
         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = PA0PT02.TARJCL[XX2]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0PT02.TARTYPE[XX2]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT02.TARJCL[XX2] == "/*EOF") /* End of table*/
      ;
      XX2 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX2 = XX2 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  PA0P184(); /* Submit the JCL*/
  ;
end // end PA0P182

// FORMAT PARM CARD FOR PA4001
Function PA0P183()
   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/
  ;
  PA0PW00.PA0PWCMT = "//*"; /* indicate a comment jcl card*/
  ;
   /* MOVE O/A NUMBER TO PARM*/
  ;
  PA0PW00.PA0PWOAJ = PA0PM001.PA1OANBR;
  ;
   /* MOVE USERID TO PARM*/
  ;
  PA0PW00.CAUSERID = COMMAREA.CAUSERID;
  ;
  TA6REC.TARJCL[TA6INDEX] = PA0PW00.PA0PWPRM; /* jcl*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  TA6REC.TARJCL[TA6INDEX] = PA0PW00.PA0PWPRR; /* JCL parm comment*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  ;
end // end PA0P183

// SET UP PRINT OPTIONS
Function PA0P184()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6-MAX-COND-CODE = 3; /* EXEC NORMAL EOF IF RC 0 OR 3*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(210); /* report sent to printer*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    PAWREC.XXXMODID = "184"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
end // end PA0P184

// PROD JCL - PA0PT03 - PA4001
Function PA0P190()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L   -   P A 4 0 0 1  - PA0PT03*/
   /*  */
   /* REPORT SENT TO BUNDL FOR VIEW ONLY*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  PA0PW00.XX1 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (PA0PW00.XX1 > 0) /* Until end of table*/
    ;
    if (PA0PT03.TARTYPE[XX1] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters for PA4001*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT03.TARTYPE[XX1]; /* Type*/
      ;
      PA0P183(); /* formats JCL*/
      ;
    else
      if (PA0PT03.TARTYPE[XX1] == "S") /* Parameters statement*/
        ;
         /* ------------------------------------------------------------*/
          /* Format program parameters for PC1111*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = PA0PT03.TARTYPE[XX1]; /* Type*/
        ;
        PA0P-199(); /* formats PARM*/
        ;
      else
         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = PA0PT03.TARJCL[XX1]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0PT03.TARTYPE[XX1]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT03.TARJCL[XX1] == "/*EOF") /* End of table*/
      ;
      XX1 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX1 = XX1 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  PA0P192(); /* Submit the JCL*/
  ;
end // end PA0P190

// TEST JCL - PA0PT13 - PA4001
Function PA0P191()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L   -   P A 4 0 0 1 - PA0PT13*/
   /*  */
   /* REPORT IS SENT TO BUNDL FOR VIEW ONLY.*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  PA0PW00.XX1 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (PA0PW00.XX1 > 0) /* Until end of table*/
    ;
    if (PA0PT13.TARTYPE[XX1] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters for PA4001*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = PA0PT13.TARTYPE[XX1]; /* Type*/
      ;
      PA0P183(); /* formats JCL*/
      ;
    else
      if (PA0PT13.TARTYPE[XX1] == "S") /* Parameters statement*/
        ;
         /* ------------------------------------------------------------*/
          /* Format program parameters for PC1111*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = PA0PT13.TARTYPE[XX1]; /* Type*/
        ;
        PA0P-199(); /* formats PARM*/
        ;
      else
         /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
         /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = PA0PT13.TARJCL[XX1]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0PT13.TARTYPE[XX1]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (PA0PT13.TARJCL[XX1] == "/*EOF") /* End of table*/
      ;
      XX1 = 0; /* Indicate end of table*/
      ;
    else
      ;
      XX1 = XX1 + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  PA0P192(); /* Submit the JCL*/
  ;
end // end PA0P191

// SUBMIT JCL FOR FCTY SPLIT
Function PA0P192()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6-MAX-COND-CODE = 3; /* EXEC NORMAT EOJ IF RC 0 OR 3*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* RETURN MESSAGE*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(209); /* report sent to BUNDL*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(10); /* Indicate user cancelled*/
    PA0PM001.XXXMODID = "S41"; /* module identification*/
    PA0PM002.XXXMODID = "S41"; /* module identification*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PA0PM001.XXXMODID = "S41"; /* module identification*/
    PA0PM002.XXXMODID = "S41"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0P192

// SETUP PG3REC FOR SIZE TRAN
Function PA0P214()
   /* *****************************************************/
    /* SETUP PG3REC FOR SIZE TRANSLATION*/
   /* ----------------------------------------------------*/
  ;
   /* ANY QUANTITY THAT IS GREATER THAN ZERO, THAT IS STORED*/
   /* FOR DISPLAY MUST BE TRANSLATED ALONG WITH ALL SIZES*/
   /* THAT WERE VALID FOR CURRENT PAR*/
   /* *****************************************************/
  ;
  set PG3REC empty;
  ;
  PG3REC.SY1STNBR = PA1REC.SY1STNBR;
  PG3REC.SY2CLRID = PA1REC.SY2CLRID;
  PG3REC.XDMCD = PA1REC.XDMCD;
  PG3REC.XGPCD = "02";
  PG3REC.XQACD = "**";
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "C";
  PG3REC.PG3XDVCD = "99";
  ;
  ;
  XSPG301(); /* CALL SIZE TRANSLATION MODULE*/
  ;
  if (sysVar.errorCode != "00000000")
    converseLib.validationFailed(10);
    PA0PW00.XXXMODID = "214";
    return;
  end
  ;
  if (PG3REC.PG3RETCD > 5)
    converseLib.validationFailed(11);
    PA0PW00.XXXMODID = "214";
    return;
  end
  ;
end // end PA0P214

// Check attention identifier
Function PA0P230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa1 /* PA1 was pressed*/
   || converseVar.eventKey is pa2 /* or PA3 was pressed*/
   || converseVar.eventKey is pa3) /* or PA3 was pressed*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack;
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* print request*/
   && converseVar.eventKey not pf9   /* update items*/
   && converseVar.eventKey not pf10  /* scrool left*/
   && converseVar.eventKey not pf11  /* scrool right*/
   && converseVar.eventKey not pf13  /* transfer qty*/
   && converseVar.eventKey not pf14  /* not used but needed*/
   && converseVar.eventKey not pf17) /* not used but needed*/
    PA0PW00.XXXMODID = "230"; /* Module id*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    return; /* Exit to redisplay map*/
  end
  ;
   /* IF EUROPEAN O/A, ALLOW INQUIRY ONLY*/
  ;
  if (PA0PM002.PA1OANBR > 199999
   && PA0PM002.PA1OANBR < 300000)
    if (converseVar.eventKey is pf9
     || converseVar.eventKey is pf13)
      PA0PW00.XXXMODID = "230"; /* MODULE ID*/
      converseLib.validationFailed(338); /* EUROPEAN O/A ALLOWS INQUIRY ONLY*/
      return;
    end
  end
  ;
end // end PA0P230

// Verify user input
Function PA0P251()
   /* ------------------------------------------------------------*/
   /* Input data has been edited*/
   /* however amounts are late so re-edit*/
   /* Obtain the units per case to be used in adjustment calculation.*/
   /* -----------------------------------------------------------*/
  ;
   /* -----------------------------------------------------------*/
   /* Get Units per case to be used for caluculations.*/
   /* -----------------------------------------------------------*/
  ;
  set PG2REC empty; /* Clear database record*/
  PG2REC.XGPCD = "02"; /* Footwear gpc code*/
  PG2REC.SY1STNBR = PA1REC.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = PA1REC.SY2CLRID; /* Color*/
  PG2REC.XDMCD = PA1REC.XDMCD; /* Dimension*/
  ;
  XSPG202(); /* Select style/color row*/
  ;
  if (PG2REC.SY1UNPCS <= 0) /* If units/case = 0, default*/
    PG2REC.SY1UNPCS = 12; /* units per case to 12.*/
  end
  ;
  XX1 = 1;
  XX2 = PA0PW00.PA0PWBCL; /* column to display*/
  while (XX1 <= 8)
    XX3 = PG3REC.SY5SZID[XX2]; /* relativesize pos*/
    if (PA0PW03.PACORDTY == "6" /* form sec is a po item*/
     || PA0PW03.PACORDTY == "7" 
     || PA0PW03.PACORDTY == "8")
      set PA0PM002.PA0PMFBS[XX1] initialAttributes;
      set PA0PM002.PA0PMFAJ[XX1] initialAttributes;
      set PA0PM002.PA0PMFFY[XX1] initialAttributes;
      ;
      if (PA0PM002.PA0PMFBS[XX1] < 0
       && PA0PM002.YETCD != "SE")
        set PA0PM002.PA0PMFBS[XX1] bold;
        set PA0PM002.PA0PMTAJ[XX1] cursor;
        converseLib.validationFailed(128); /* BALANCE TO SHIP IS NEGATIVE*/
        PA0PW00.XXXMODID = "251";
      end
      ;
       /* the 'to' item quantity can not go below the on order*/
       /* quantity.*/
      ;
      if (PA0PM002.PA0PMTNP[XX1] < 0)
        set PA0PM002.PA0PMTNP[XX1] bold;
        set PA0PM002.PA0PMTAJ[XX1] cursor;
        converseLib.validationFailed(206); /* ON ORDER QUANTITY IS NEGATIVE*/
        PA0PW00.XXXMODID = "251";
      end
      ;
      if (PA0PM002.PA0PM-FRM-WHSE != " ")
        if (PA0PM002.PA0PM-FRM-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
         || PA0PM002.PA0PM-FRM-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
         || PA0PM002.PA0PM-FRM-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
          ;
          PA0PW00.PA0PWDIV = PA0PM002.PA0PMFFY[XX1] / PG2REC.SY1UNPCS;
          PA0PW00.PA0PWREM = PA0PW00.PA0PWDIV * 100;
          ;
          if (PA0PW00.PA0PWREM > 0)
            set PA0PM002.PA0PMFFY[XX1] bold;
            PA0PW00.PA0PWRFG = "Y";
          end
        end
      end
      ;
    end
    if (PA0PMTBS[XX1] < 0
     && PA0PM002.YETCD != "SE")
      set PA0PM002.PA0PMTBS[XX1] bold;
      set PA0PM002.PA0PMTAJ[XX1] cursor;
      converseLib.validationFailed(128); /* BALANCE TO SHIP IS NEGATIVE*/
      PA0PW00.XXXMODID = "251";
    end
    ;
     /* the 'from' quantity can not go below the on order quantity*/
    ;
    if (PA0PM002.PA0PMFFY[XX1] < 0
     && PA0PW03.PACORDTY != "4" /* and not a sales order*/
     && PA0PW03.PACORDTY != "2") /* and not a factory subtract*/
      set PA0PM002.PA0PMFFY[XX1] bold;
      set PA0PM002.PA0PMTAJ[XX1] cursor;
      converseLib.validationFailed(206); /* ON ORDER QUANTITY IS NEGATIVE*/
      PA0PW00.XXXMODID = "251";
    end
    ;
    if (PA0PM002.PA0PM-TO-WHSE != " ")
      if (PA0PM002.PA0PM-TO-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
       || PA0PM002.PA0PM-TO-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
       || PA0PM002.PA0PM-TO-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
        ;
        if (converseVar.validationMsgNum == 0)
          set PA0PM002.PA0PMTNP[XX1] initialAttributes;
        end
        ;
        PA0PW00.PA0PWDIV = PA0PM002.PA0PMTNP[XX1] / PG2REC.SY1UNPCS;
        PA0PW00.PA0PWREM = PA0PW00.PA0PWDIV * 100;
        ;
        if (PA0PW00.PA0PWREM > 0)
          PA0PW00.PA0PWRFG = "Y";
          set PA0PM002.PA0PMTAJ[XX1] bold;
        end
      end
    end
    ;
    XX1 = XX1 + 1;
    XX2 = XX2 + 1;
  end
  ;
  ;
   /* ---------------- END OF PROCESS PA0P251 --------------------*/
  ;
end // end PA0P251

// Obtain the data to display
Function PA0P310()
   /* ------------------------------------------------------------*/
  ;
  ;
     /* ONLY PO ITEMS CAN BE SELECTED FOR A SIZE RUN CHANGE*/
  ;
  ;
   /* ------------------------------------------------------------*/
  ;
  if (PA0PW00.PA0PWSWR != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Previous errors exist*/
    return;
  end
  ;
  ;
  set PA0PM004 initial;
  ;
  ;
  move PA0PWIX1 to XX1 withV60Compat; /* max items reset sel flag*/
  ;
  while (XX1 >= 1)
    ;
    if (PA0PW02.PACSEVAL[XX1] == "F" /* from item*/
     || PA0PW02.PACSEVAL[XX1] == "T") /* to item*/
      PA0PW02.PACSEVAL[XX1] = " "; /* item*/
    end
    XX1 = XX1 - 1;
  end
  ;
  PA0PW00.PA0PWBCL = 1; /* starting column*/
   /* -----------------------------------------------------------|*/
            /* compute new order qtys                           |*/
   /* -----------------------------------------------------------|*/
  ;
  ;
  ;
  XX1 = 1;
  ;
  while (XX1 <= 40)
    PA0PW03.PA0PWORD[XX1] = PA0PW03.PACWRKQT[XX1] + PA0PW03.PACFLADJ[XX1];
    PA0PW03.PA0PWBTS[XX1] = PA0PW03.PACADJQT[XX1] + PA0PW03.PACFLADJ[XX1];
    XX1 = XX1 + 1;
    ;
  end
  ;
   /* -------------------------------------------------------*/
   /* set pa0pw05  equal to pa0pw03*/
   /* -------------------------------------------------------*/
  ;
  PA0PW05.PA0PWDET = PA0PW03.PA0PWDET;
  PA0PW05.PA0PWDRT = PA0PW03.PA0PWDRT;
  PA0PW05.FY1FCTYC = PA0PW03.FY1FCTYC;
  PA0PW05.OP1PARTN = PA0PW03.OP1PARTN;
  PA0PW05.OP1CUOID = PA0PW03.OP1CUOID;
  PA0PW05.OP1NORID = PA0PW03.OP1NORID;
  PA0PW05.PA0PW-MSR-IND = PA0PW03.PA0PW-MSR-IND;
  PA0PW05.YMTCD = PA0PW03.YMTCD;
  ;
  PA0PW05.PA0PW-CUST = PA0PW03.PC2CUXID; /* customer xref*/
  PA0PW05.PA0PW-WHSE = PA0PW03.XWHCD; /* whse cd*/
  ;
   /* -----------------------------------------------------------|*/
            /* obtain bottom lines                              |*/
   /* -----------------------------------------------------------|*/
  ;
  PA0PS15(); /* get bottom lines*/
  ;
   /* -----------------------------------------------------------|*/
            /* obtain valid size information                    |*/
   /* -----------------------------------------------------------|*/
  ;
  PA0P214(); /* size translation*/
  ;
  XX1 = 1;
  PA0PW00.PA0PWNVZ = 0; /* valid size count*/
  while (XX1 <= 40)
    if (PG3REC.SY5SZID[XX1] != 0)
      PA0PW00.PA0PWNVZ = PA0PW00.PA0PWNVZ + 1; /* valid size count*/
    end
    XX1 = XX1 + 1;
  end
  ;
  ;
  if (PG3RETCD > 4)
    PA0PW00.XXXMSGNO = 138; /* invalid sizing*/
    PA0PW00.XXXMODID = "310";
  end
  ;
  ;
  PA0PW00.PA0PWSWR = "N"; /* Request for data switch*/
  ;
   /* ------------------------------------------------------------*/
                      /* end PA0P310*/
   /* ------------------------------------------------------------*/
end // end PA0P310

// Format and display the map
Function PA0P320()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  PA0PW00.PA0PWERR = "N"; /* set err flag for 360*/
  if (converseVar.validationMsgNum != 0) /* Errors*/
    ;
    PA0PW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  else
    PA0P327(); /* Format the map*/
    PA0P328(); /* and calc the data*/
    if (converseVar.validationMsgNum != 0) /* Errors*/
      ;
      PA0PW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
      PA0PW00.PA0PWERR = "Y"; /* set err flag for 360*/
    end
  end
  ;
  PA0PM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (PA0PW00.XXXMSGNO != 0)
    ;
    PA0PM004.XXXMODID = PA0PW00.XXXMODID; /* Module id*/
    if (PA0PW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PA0PW00.XXXMSGNO);
    end /* Message number*/
    set PA0PM004 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  if (PA1REC.YETCD == "DM"
   || PA1REC.YETCD == "NM")
    if (converseVar.validationMsgNum == 0
     && PA0PW03.YMTCD == PA0PM004.PA0PMFMD)
      set PA0PM004.PA0PMFMD cursor;
    end
  end
  ;
  if (converseVar.validationMsgNum == 0)
    if (PA0PW00.PA0PWRFG == "Y")
      converseLib.validationFailed(157); /* WARNING: ADJ QTY NOT MULT OF UNIT PER*/
                                   /* CASE*/
      PA0PW00.XXXMODID = "320";
      PA0PW00.PA0PWRFG = "N";
    end
  end
  ;
  if (PA0PM-04-COMP-PGM-MSG == "    ")
    set PA0PM004.PA0PMFFA skip;
  end
  set PA0PM004.PA0PMFCU skip;
  set PA0PM004.PA0PM-FRM-WHSE skip;
  set PA0PM004.PA0PMFET skip;
  set PA0PM004.PA0PM-SO-NBR-CUOID skip;
  set PA0PM004.PA0PM-SO-NBR-NORID skip;
  set PA0PM004.PA0PM-MSR-IND skip;
  ;
   /* PA0349: IF MUSICAL SIZE RUN, DON'T ALLOW ADJUSTMENTS*/
  ;
  if (PA0PW03.PA0PW-MSR-IND == "M"
   && PA0PW03.PC2CUXID != " ")
    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex <= 8)
      set PA0PM004.PA0PMFAJ[sysVar.arrayIndex] skip, invisible;
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
    set PA0PM004.PA0PMFMD cursor; /* MODE*/
  end
  ;
   /* IF EUROPEAN O/A, ALLOW INQUIRY ONLY*/
  ;
  if (PA0PM004.PA1OANBR > 199999
   && PA0PM004.PA1OANBR < 300000)
    set PA0PM004.PA0PM-PF9-LABEL skip, invisible;
  end
  ;
  converse PA0PM004 ;
  ;
  PA0PW00.XXXMODID = " "; /* Module id*/
  PA0PW00.XXXMSGNO = 0; /* Reset message number*/
  if (converseVar.eventKey is pa2
   || converseVar.eventKey is pa1)
    converseLib.clearScreen();
    
    exit stack;
  end
  ;
   /* ----------------- END OF PROCEDURE PA0P320 --------------------------*/
end // end PA0P320

// Format the data on the map
Function PA0P327()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set PA0PM004 initial;
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map*/
   /* ------------------------------------------------------------*/
  ;
  XX1 = 1;
  PA0PW00.PA0PWBTE = "N";
  ;
  while (XX1 <= 40)
    ;
    PA0PW00.PA0PWXBS = PA0PW03.PA0PWBTS[XX1] + PA0PW03.PA0PWCAJ[XX1];
    ;
    if (PA0PW00.PA0PWXBS < 0)
      PA0PW00.PA0PWBTE = "Y";
      converseLib.validationFailed(128); /* BALANCE TO SHIP IS NEGATIVE*/
      PA0PW00.XXXMODID = "327";
      XX1 = 41;
    end
    ;
    XX1 = XX1 + 1;
    ;
  end
  ;
  ;
  PA0PM004.PA0PMSCR = 8;
  PA0PM004.PAWBUYYM = PAWREC.PAWBUYYM; /* Current buy date*/
  PA0PM004.PT3YYMM = PA5REC.PT3YYMM; /* b/l dte*/
  PA0PM004.PA0PWSDT = PA0PW00.PA0PWSDT; /* b/l setup dte*/
  PA0PM004.PA-AFRGT-RQT-ID = PA1REC.PA-AFRGT-RQT-ID; /* AF NUMBER*/
  PA0PM004.PA1OANBR = PA1REC.PA1OANBR; /* o/a number*/
  PA0PM004.SY1STNBR = PA1REC.SY1STNBR; /* Style number*/
  PA0PM004.SY2CLRID = PA1REC.SY2CLRID; /* Color identification*/
  PA0PM004.XDMCD = PA1REC.XDMCD; /* Dimension code*/
  PA0PM004.YETCD = PA1REC.YETCD; /* o/a type code*/
  PA0PM004.YESCD = PA1REC.YESCD; /* Status code*/
  PA0PM004.PA0PMFID = PA0PW01.PA0PWPID; /* po id*/
  ;
  ;
  PA0PW00.XX1 = 1;
  while (PA0PW00.XX1 <= 15
   && PA0PW11.PA0PW-BL-OA[XX1] != 0)
    PA0PM004.PA0PM-BL-OA[XX1] = PA0PW11.PA0PW-BL-OA[XX1];
    PA0PW00.XX1 = PA0PW00.XX1 + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* format the size descriptions*/
  ;
                    /* if rta or mode of trans oa*/
                    /* protect adjustment qty fields*/
  ;
   /* ------------------------------------------------------------*/
  ;
  XX2 = PA0PW00.PA0PWBCL; /* column to display*/
  XX1 = 1;
  ;
  while (XX1 <= 8) /* map columns*/
    ;
    if (PG3REC.SY5SZID[XX2] == 0)
      ;
      set PA0PM004.PA0PMFSD[XX1] skip, invisible;
      set PA0PM004.PA0PMFAJ[XX1] skip, invisible;
      ;
    else
      ;
      if (PA1REC.YETCD == "DM"
       || PA1REC.YETCD == "NM")
        /* OR PA1REC.YETCD EQ 'DT';*/
        /* OR PA1REC.YETCD EQ 'NT';*/
        set PA0PM004.PA0PMFAJ[XX1] skip, invisible;
        ;
      else
        ;
        PA0PM004.PA0PMFSD[XX1] = PG3REC.SY4IDDSC[XX2];
        ;
        if (PG3REC.PG3SIZRC[XX2] > 4)
          set PA0PM004.PA0PMFSD[XX1] bold;
        end
        ;
      end
      ;
      PA0PM004.PA0PMFSD[XX1] = PG3REC.SY4IDDSC[XX2];
      XX3 = PG3REC.SY5SZID[XX2];
      PA0PM004.PA0PMFSO[XX1] = PA0PW03.PA0PWORD[XX3]; /* order qty;*/
      PA0PM004.PA0PMFAJ[XX1] = PA0PW03.PA0PWCAJ[XX3]; /* curr adj's*/
      ;
      PA0PM004.PA0PMFBS[XX1] = PA0PW03.PA0PWBTS[XX3]       + PA0PW03.PA0PWCAJ[XX3];
      PA0PM004.PA0PMFFY[XX1] = PA0PW03.PA0PWORD[XX3]       + PA0PW03.PA0PWCAJ[XX3];
      ;
      if (PA0PW03.XDSCD != "1" /* WHSE ITEM*/
       && PA0PW03.XDSCD != "2") /* WHSE ITEM*/
        if (PA5REC.SY1STNBR != "      ") /* PAR EXISTS*/
          if (PA0PM004.PA0PWSDT != 0) /* BOTTOM LINE SELECTED*/
            PA0PM004.PA0PMFBL[XX1] = PA0PW03.PA0PWPBL[XX3]             + PA0PM004.PA0PMFAJ[XX1]             + PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
          else
            PA0PM004.PA0PMFBL[XX1] = PA0PW03.PA0PWPBL[XX3]             + PA0PW03.PACADJQT[XX3]             + PA0PM004.PA0PMFAJ[XX1]             + PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
          end
        else
          if (PA0PM004.PA0PWSDT != 0) /* BOTTOM LINE SELECTED*/
            PA0PM004.PA0PMFBL[XX1] = PA0PM004.PA0PMFAJ[XX1]             + PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
          else
            PA0PM004.PA0PMFBL[XX1] = PA0PM004.PA0PMFAJ[XX1]             + PA0PW03.PACADJQT[XX3]             + PA0PW11.PA0PW-BL-WITH-OAS1[XX3];
          end
        end
      end
    end
    XX2 = XX2 + 1;
    XX1 = XX1 + 1;
  end
  ;
  if (PA0PW05.OP1CUOID > 0) /* sales order present*/
    PA0PM004.PA0PM-SO-NBR-CUOID = PA0PW05.OP1CUOID; /* so number*/
    /* MOVE PA0PW05.OP1NORID TO PA0PW00.PA0PW-SO-CONV-NIKE-ID;*/
    /* MOVE PA0PW00.PA0PW-SO-CONV-NORID TO PA0PM004.PA0PM-SO-NBR-NORID;*/
    PA0PM004.PA0PM-SO-NBR-NORID = PA0PW05.OP1NORID;
    ;
     /* PA0349: ADD MUSICAL SIZE RUN INDICATOR*/
    ;
    if (PA0PW05.PA0PW-MSR-IND == "M")
      PA0PM004.PA0PM-MSR-IND = "MSR";
    end
    ;
  else
    set PA0PM004.PA0PM-SO-NBR-CUOID invisible; /* so number*/
    set PA0PM004.PA0PM-SO-NBR-NORID invisible;
    set PA0PM004.PA0PM-MSR-IND invisible;
  end
  ;
  PA0PM004.PA0PMFFA = PA0PW05.FY1FCTYC; /* fcty code*/
  PA0PM004.PA0PMFCU = PA0PW05.PA0PW-CUST; /* destination*/
  PA0PM004.PA0PM-FRM-WHSE = PA0PW05.PA0PW-WHSE; /* whse*/
  ;
  PA0PM004.PA0PMFMD = PA0PW05.YMTCD; /* transporation*/
  PA0PM004.PA0PMFRT = PA0PW05.PA0PMFRT; /* rta date*/
  PA0PM004.PA0PMFET = PA0PW05.PA0PMFET; /* ets date*/
  ;
  ;
  if (PA0PW03.PACORDTY == "6")
    PA0PM004.PA0PMFST = PA0PW03.PA0PWLT3 + PA0PW03.PA0PWLT1; /* org + adj*/
    ;
  else
    PA0PM004.PA0PMFST = PA0PW03.PA0PWLT4; /* total po ordernew items*/
  end
  ;
  ;
  if (PA1REC.YETCD == "DM" /* mode oftrans chg*/
   || PA1REC.YETCD == "NM")
    ;
    set PA0PM004.PA0PMFMD cursor, normal;
    ;
  end
  ;
   /* IF PA1REC.YETCD = 'DT';          /* rta chg can also chg mode/code*/
    /* OR PA1REC.YETCD = 'NT';*/
    /* ;*/
    /* SET PA0PM004.PA0PMFRT CURSOR,NORMAL;*/
    /* SET PA0PM004.PA0PMFMD NORMAL;*/
    /* ;*/
   /* END;*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* sum totals bottom line, adjustments; npo, bal to shp*/
   /* -----------------------------------------------------------*/
  XX1 = 1;
  ;
   /* INITIALIZE SCREEN TOTAL FIELDS*/
  ;
  PA0PM004.PA0PMFFT = 0;
  PA0PM004.PA0PMFBT = 0;
  PA0PM004.PA0PMFBO = 0;
  ;
  while (XX1 <= 40)
    ;
    PA0PM004.PA0PMFBT = PA0PM004.PA0PMFBT     + PA0PW03.PA0PWBTS[XX1]     + PA0PW03.PA0PWCAJ[XX1];
    ;
    PA0PM004.PA0PMFFT = PA0PM004.PA0PMFFT     + PA0PW03.PA0PWORD[XX1]     + PA0PW03.PA0PWCAJ[XX1];
    ;
    PA0PM004.PA0PMFAT = PA0PM004.PA0PMFAT + PA0PW03.PA0PWCAJ[XX1];
    ;
    if (PA0PW03.XWHCD != "  ") /* WHSE SELECTED*/
      if (PA0PM004.PA0PWSDT != 0) /* BOTTOM LINE SELECTED*/
        /* IF PA0PM001.PT3YYMM NE 0;*/
        ;
        PA0PM004.PA0PMFBO = PA0PM004.PA0PMFBO         + PA0PW03.PA0PWPBL[XX1]         + PA0PW03.PA0PWCAJ[XX1]         + PA0PW11.PA0PW-BL-WITH-OAS1[XX1];
      else
        PA0PM004.PA0PMFBO = PA0PM004.PA0PMFBO         + PA0PW03.PA0PWPBL[XX1]         + PA0PW03.PA0PWCAJ[XX1]         + PA0PW03.PACADJQT[XX1]         + PA0PW11.PA0PW-BL-WITH-OAS1[XX1];
      end
    end
    ;
    XX1 = XX1 + 1;
    ;
  end
  ;
  PA0PW03.PA0PWRAJ[41] = PA0PM004.PA0PMFFT; /* total adjustment for so*/
  ;
   /* Look for style on component program table*/
  ;
  if (PA1REC.SY1STNBR > "     ")
    VCMPPG01.XGPCD = "02"; /* gpc*/
    VCMPPG01.SY1STNBR = PA1REC.SY1STNBR; /* style*/
    VCMPPG01.SY2CLRID = PA1REC.SY2CLRID; /* color*/
    VCMPPG01.XDMCD = PA1REC.XDMCD; /* dimension*/
    VCMPPG01.PC-PO-ID-MO-RNG = PA0PW00.PA0PWPDT; /* buy month*/
    VCMPPG01.FY1FCTYC = PA0PW05.FY1FCTYC; /* factory*/
    ;
    PA0PS-VCMPPG01-S();
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      set PA0PM004.SY1STNBR bold, skip;
      set PA0PM004.SY2CLRID bold, skip;
      set PA0PM004.XDMCD bold, skip;
      set PA0PM004.PA0PMFFA bold, skip;
      PA0PM-04-COMP-PGM-MSG = "COMPONENT";
      set PA0PM-04-COMP-PGM-MSG bold, skip;
    end
  end
  ;
  ;
  if (PA0PM-04-COMP-PGM-MSG == "     ")
    set PA0PM-04-COMP-PGM-MSG invisible, skip;
  end
  ;
  ;
  ;
end // end PA0P327

// Validate any input data
Function PA0P328()
   /* ------------------------------------------------------------*/
   /* Obtain the units per case to be used in caluculation.*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  PG2REC.XGPCD = "02"; /* Footwear gpc code*/
  PG2REC.SY1STNBR = PA1REC.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = PA1REC.SY2CLRID; /* Color*/
  PG2REC.XDMCD = PA1REC.XDMCD; /* Dimension*/
  ;
  XSPG202(); /* Select style/color*/
  ;
  if (PG2REC.SY1UNPCS <= 0) /* Default units/case to 12*/
    PG2REC.SY1UNPCS = 12;
  end
  ;
  XX1 = 1;
  XX2 = PA0PW00.PA0PWBCL;
  while (XX1 <= 8)
    ;
    if (PG3REC.SY5SZID[XX2] != 0)
      ;
      set PA0PM004.PA0PMFBS[XX1] initialAttributes;
      set PA0PM004.PA0PMFAJ[XX1] initialAttributes;
      set PA0PM004.PA0PMFFY[XX1] initialAttributes;
      ;
      if (PA0PM004.PA0PMFBS[XX1] < 0)
        set PA0PM004.PA0PMFBS[XX1] bold;
        converseLib.validationFailed(128);
        PA0PW00.XXXMODID = "328";
      end
      ;
      if (PA0PM004.PA0PM-FRM-WHSE != " ")
        if (PA0PM004.PA0PM-FRM-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
         || PA0PM004.PA0PM-FRM-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
         || PA0PM004.PA0PM-FRM-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
          ;
          if (PA0PM004.PA0PMFFY[XX1] != 0)
            ;
            PA0PW00.PA0PWDIV = PA0PM004.PA0PMFFY[XX1] / PG2REC.SY1UNPCS;
            PA0PW00.PA0PWREM = PA0PW00.PA0PWDIV * 100;
            ;
            if (PA0PW00.PA0PWREM > 0)
              set PA0PM004.PA0PMFFY[XX1] skip, bold;
              PA0PW00.PA0PWRFG = "Y";
            end
          end
        end
      end
    end
    XX1 = XX1 + 1;
    XX2 = XX2 + 1;
  end
  ;
  ;
   /* ---------------------------------------------------------*/
               /* edit adjustment qty*/
               /* based on oa type*/
       /* TOTAL ADJ QTY CAN NOT EXCEED +/- 240 PAIRS*/
   /* ---------------------------------------------------------*/
  ;
  if (PA1REC.YETCD != "SE"
   && PA1REC.YETCD != "OR")
    ;
    PA0PW-TMP-LMT = FB9REC.FB9BTQTY * -1;
    set PA0PM004.PA0PMFAT initialAttributes;
    if (PA0PM004.PA0PMFAT > FB9REC.FB9BTQTY
     || PA0PM004.PA0PMFAT < PA0PW-TMP-LMT)
      ;
      converseLib.validationFailed(165);
      PA0PW00.XXXMODID = "328";
      PA0PWBTE = "Y";
      set PA0PM004.PA0PMFAT bold;
    end
  end
   /* ---------------- End of process PA0P328 --------------------*/
  ;
end // end PA0P328

// Check attention identifier
Function PA0P330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
   /* IF EUROPEAN O/A, DON'T SHOW PF9;*/
  ;
  if (PA0PM004.PA1OANBR > 199999
   && PA0PM004.PA1OANBR < 300000)
    if (converseVar.eventKey is pf9)
      PA0PW00.XXXMODID = "330";
      converseLib.validationFailed(339); /* EUROPEAN O/A ALLOWS INQUIRY ONLY*/
      return;
    end
  else
    set PA0PM004.PA0PM-PF9-LABEL initialAttributes;
  end
  ;
  if (converseVar.eventKey is pa1 /* PA1 was pressed*/
   || converseVar.eventKey is pa2 /* or PA3 was pressed*/
   || converseVar.eventKey is pa3) /* or PA3 was pressed*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack;
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* print request*/
   && converseVar.eventKey not pf9   /* update items*/
   && converseVar.eventKey not pf10  /* scrool left*/
   && converseVar.eventKey not pf11) /* scrool right*/
    PA0PW00.XXXMODID = "330"; /* Module id*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    return; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* ----------------- End of Procedure PA0P330 ---------------------------*/
end // end PA0P330

// INITILIZE RECORDS AND FLAGS
Function PA0PS-01-INIT()
   /* ------------------------------------------------------------*/
   /* INITIALIZE RECORDS AND FLAGS*/
   /* ------------------------------------------------------------*/
  ;
  set PA0PW00 empty;
  set PA0PW11 empty;
  set PA1REC empty;
  set PA5REC empty;
  set TA1REC empty;
  set TA5REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  PA0PW00.PA0PWBTE = "N"; /* BOTTOM LINE ERROR FLAG*/
  PA0PW00.PA0PWRFG = "N"; /* DIVEDE BY 6 ERROR FLAG*/
  PA0PW00.PA0PWERR = "N"; /* ERROR FLAG*/
  PA0PW00.PA0PWCHG = "N"; /* DATE CHANGED FLAG*/
  PA0PW00.PA0PWCAL = "N"; /* CALC PERFORMED ON O/A*/
  PA0PW00.PA0PWSWR = "N"; /* REQUEST FOR DATA FLAG*/
  PA0PW00.PA0PWSWD = "1"; /* DISPLAY MAP 1*/
  PA0PW00.PA0PWPOF = "N"; /**/
  PA0PW00.PA0PWSOF = "N"; /**/
  PA0PW00.PA0PWFRF = "N"; /**/
  PA0PW00.PA0PW-BL-REQUIRED-WARNING = "N";
  PA0PW00.PA0PW-REQUIRE-BL = "N";
  PA0PW00.PA0PW-READ-ONLY = "N";
  PA0PW00.PA0PW-BULK-QTY-FLAG = "N";
  PA0PW00.PA0PW-DUP-RTA-WARNING = "N";
  PA0PW00.PA0PW-DUP-RTA-ERROR = "N";
  ;
  PA0PWIX1 = 1; /* INIT PAGE INDEX FOR PROMPT*/
  PA0PWIX4 = 1; /* INIT LAST ITEM PAGE INDEX*/
  PA0PWBCL = 1; /* BEGIN COLUMN TO DISP MAP2*/
  ;
  PA0PW00.PA0PW-REGION-PA1OANBR = PA0PM001.PA1OANBR;
  PA0PW00.PA1OANBR = PA0PM001.PA1OANBR;
   /* The second MOVE above is so that the VPAHDR table is read*/
   /* at the beginning of tyhe PA0P110 proc.*/
   /* ------------------------------------------------------------*/
                      /* END PA0PS-01-INIT*/
   /* ------------------------------------------------------------*/
end // end PA0PS-01-INIT

// edit oa items for calc process
Function PA0PS-02()
   /* ------------------------------------------------------------*/
   /* validate that the items selected can be processed by*/
   /* the calc pgm pa2050*/
   /* ------------------------------------------------------------*/
  ;
   /* IF PA1REC.YESCD NE '80'; /* if user is not fixing po update failed*/
    /* IF PA1REC.YESCD GE '20';*/
      /* MOVE 72 TO EZEMNO;*/
      /* EZERTN;*/
    /* END;*/
   /* END;*/
  ;
  if (PA0PW00.PA0PWCAL == "Y") /* calc submit switch*/
    converseLib.validationFailed(148); /* CALC PROGRAM CAN ONLY BE RUN ONCE*/
    return;
  end
  ;
  ;
  if (PA0PM001.PA0PWSDT <= 0)
    converseLib.validationFailed(105); /* MUST SELECT BOTTOM LINE BEFORE*/
                                   /* RUNNING CALC*/
  end
  ;
  if (PA1REC.YETCD != "DA" /* add*/
   && PA1REC.YETCD != "DR" /* reduction*/
   && PA1REC.YETCD != "DS" /* size run change*/
   && PA1REC.YETCD != "EO" /* early order*/
   && PA1REC.YETCD != "PR" /* pre-advise*/
   && PA1REC.YETCD != "DN" /* domestic to NIL*/
   && PA1REC.YETCD != "NI") /* nil to domestic divers*/
    converseLib.validationFailed(124); /* O/A TYPE INVALID FOR CALC*/
    return;
  end
  ;
  ;
  ;
  ;
  move PA0PWIX4 to XX3 withV60Compat; /* set index*/
  while (XX3 >= 1)
    ;
    if (PA0PW02.PACORDTY[XX3] == "1" /* all fcty bulks will be sel*/
     || PA0PW02.PACORDTY[XX3] == "2") /* all fcty bulks will*/
      PA0PW02.PACSEVAL[XX3] = "S";
    end
    ;
    ;
    if (PA0PW02.PACORDTY[XX3] == "4" /* so*/
     || PA0PW02.PACORDTY[XX3] == "8") /* calc-ed item*/
      ;
      PA0PW02.PACSEVAL[XX3] = "*";
      converseLib.validationFailed(104); /* 'SO' AND 'FT' MUST BE PROCESSED*/
                                   /* BEFORE CALC*/
      PA0PWIX5 = XX3 - PA0PWIX1 + 1; /* compute current line dispaly*/
      if (PA0PWIX5 <= 12
       && PA0PWIX5 >= 1)
        set PA0PM001.PA0PMSEL[PA0PWIX5] cursor, bold;
      end
    end
    ;
    if (PA0PW02.PACSEVAL[XX3] == "S"
     || PA0PW02.PACSEVAL[XX3] == "F")
      if (PA0PW02.PACORDTY[XX3] != "1"
       && PA0PW02.PACORDTY[XX3] != "2"
       && PA0PW02.PACORDTY[XX3] != "6"
       && PA0PW02.PACORDTY[XX3] != "7")
        converseLib.validationFailed(99); /* INVALID ITEM SELECTED FOR CALC*/
        PA0PW02.PACSEVAL[XX3] = "*";
        PA0PWIX5 = XX3 - PA0PWIX1 + 1; /* compute current line dispaly*/
        if (PA0PWIX5 <= 12
         && PA0PWIX5 >= 1)
          set PA0PM001.PA0PMSEL[PA0PWIX5] cursor, bold;
        end
      end
    end
    XX3 = XX3 - 1;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  if (converseVar.validationMsgNum == 0
   && PA0PW00.PA0PW-DUP-RTA-WARNING == "Y")
    return;
  end
  ;
  move PA0PWIX4 to XX3 withV60Compat; /* set index*/
  while (XX3 >= 1)
      /* IF OLD PO ITEM NOT SELECTED BUT HAS CALC RTA DATE, ERROR.*/
    if (PA0PW02.PACSEVAL[XX3] != "S" 
     && PA0PW02.PACORDTY[XX3] == "6" /* OLD PO ITEM*/
     && PA0PW02.PC6RTADT[XX3] == PA0PW00.PA0PW-CALC-RTA-DT)
      converseLib.validationFailed(286); /* DUPLICATE ITEM - MUST SELECT FOR CALC*/
      PA0PW00.PA0PW-DUP-RTA-WARNING = "Y";
    end
    XX3 = XX3 - 1;
  end
  ;
   /* ------------------------------------------------------------*/
                      /* end pa0ps02*/
   /* ------------------------------------------------------------*/
end // end PA0PS-02

// edit items for manual adjust
Function PA0PS-03()
   /* ------------------------------------------------------------*/
   /* validate that the items selected can be processed by*/
                  /* pa0pm002 manual adjustment*/
  ;
       /* 1 or 2 po items may be selected*/
  ;
       /* 1 fcty or 1 fcty and  1 po*/
  ;
       /* 1 so  or 1  so  and   1 po*/
  ;
  ;
   /* ------------------------------------------------------------*/
  ;
  ;
  set PA0PW03 empty;
  set PA0PW04 empty;
  set PA0PW05 empty;
  set PA0PW06 empty;
  ;
   /* ------------------------------------------------------------*/
    /* scan w/s looking for po items for map4*/
  ;
   /* ------------------------------------------------------------*/
  PA0PW00.PA0PWCHG = "N"; /* reset*/
  ;
  if (converseVar.eventKey is pf20)
    ;
    move PA0PWIX4 to PA0PWIX3 withV60Compat; /* set index*/
    while (PA0PWIX3 >= 1)
                      /* factory  adjustmentor so*/
      if (PA0PW02.PACSEVAL[PA0PWIX3] == "F"
       || PA0PW02.PACSEVAL[PA0PWIX3] == "T"
       || PA0PW02.PACSEVAL[PA0PWIX3] == "S")
        ;
        PA0PW00.PA0PWCHG = "Y"; /* item selected*/
        ;
                        /* PO items only*/
        if (PA0PW02.PACORDTY[PA0PWIX3] == "6" /* po item*/
         || PA0PW02.PACORDTY[PA0PWIX3] == "7" /* only 1 fcty adjust*/
         || PA0PW02.PACORDTY[PA0PWIX3] == "8") /* only 1 so item*/
          ;
          ;
          if (PA0PW03.PACORDTY != " ") /* area must be empty*/
            PA0PS-04(); /* PO ITEMS*/
          else
            PA0PW03.PA0PW3GP = PA0PW02.PA0PWGP2[PA0PWIX3];
            ;
             /* IF THE FROM PO INFORMATION ON THE ORIGINAL WORK RECORD*/
             /* IS ZEROES, MOVE IN PO INFORMATION.*/
            ;
            if (PA0PW02.PACFPONO[PA0PWIX3] == 0)
              PA0PW03.PACFPONO = PA0PW02.PC3PONBR[PA0PWIX3];
              PA0PW06.PACFPONO = PA0PW02.PC3PONBR[PA0PWIX3];
              PA0PW03.PACFPCIT = PA0PW02.PC6ITMNB[PA0PWIX3];
              PA0PW06.PACFPCIT = PA0PW02.PC6ITMNB[PA0PWIX3];
            end
            ;
            PA0PW02.PACSEVAL[PA0PWIX3] = " ";
          end
          ;
        else
          PA0PS-04(); /* PO ITEMS*/
        end
        ;
      end
      PA0PWIX3 = PA0PWIX3 - 1;
    end
    ;
    if (PA0PW00.PA0PWCHG != "Y")
      converseLib.validationFailed(96); /* INVALID SELECTION FOR MANUAL ADJ*/
      PA0PW00.XXXMODID = "S03";
    end
    ;
    PA0PW00.PA0PWCHG = "N"; /* reset*/
    return; /* end of edits*/
  end
   /* ------------------------------------------------------------*/
    /* scan w/s looking for fcty and so adjustments*/
    /* only*/
   /* ------------------------------------------------------------*/
  move PA0PWIX4 to PA0PWIX3 withV60Compat; /* set index*/
  while (PA0PWIX3 >= 1)
                    /* factory  adjustmentor so*/
                    /* factory  adjustmentor so*/
    if (PA0PW02.PACSEVAL[PA0PWIX3] == "F")
      ;
      if (PA0PW03.PACORDTY != " ") /* area must be empty*/
        PA0PS-04(); /* PO ITEMS*/
      else
        PA0PW03.PA0PW3GP = PA0PW02.PA0PWGP2[PA0PWIX3];
        ;
         /* IF THE FROM PO INFORMATION ON THE ORIGINAL WORK RECORD*/
         /* IS ZEROES, MOVE IN PO INFORMATION.*/
        ;
        if (PA0PW02.PACFPONO[PA0PWIX3] == 0)
          PA0PW03.PACFPONO = PA0PW02.PC3PONBR[PA0PWIX3];
          PA0PW06.PACFPONO = PA0PW02.PC3PONBR[PA0PWIX3];
          PA0PW03.PACFPCIT = PA0PW02.PC6ITMNB[PA0PWIX3];
          PA0PW06.PACFPCIT = PA0PW02.PC6ITMNB[PA0PWIX3];
        end
        ;
        PA0PW02.PACSEVAL[PA0PWIX3] = " ";
        ;
      end
      ;
    end
                    /* factory  adjustmentor so*/
    if (PA0PW02.PACSEVAL[PA0PWIX3] == "T")
      if (PA0PW02.PACORDTY[PA0PWIX3] == "6" /* po item*/
       || PA0PW02.PACORDTY[PA0PWIX3] == "7" /* only 1 fcty adjust*/
       || PA0PW02.PACORDTY[PA0PWIX3] == "8") /* only 1 so item*/
        ;
        if (PA0PW04.PACORDTY != " ") /* area must be empty*/
          PA0PS-04(); /* PO ITEMS*/
        else
          PA0PW04.PA0PW4GP = PA0PW02.PA0PWGP2[PA0PWIX3];
          PA0PW02.PACSEVAL[PA0PWIX3] = " ";
        end
        ;
      end
    end
    PA0PWIX3 = PA0PWIX3 - 1;
  end
  ;
   /* ------------------------------------------------------------*/
              /* validate oa types*/
             /* factory adjustments and po item must have*/
             /* the same factory unless the oa type is*/
             /* is a factory transfer*/
  ;
   /* ------------------------------------------------------------*/
  ;
  if (PA0PW03.PACSEVAL == " ") /* missing from item*/
    converseLib.validationFailed(125);
  end
  ;
  if (PA1REC.YETCD != "FT") /* not fcty transfer*/
    ;
    if (PA0PW04.FY1FCTYC == "    ") /* creating new row*/
      PA0PW04.FY1FCTYC = PA0PW03.FY1FCTYC;
    else
      if (PA0PW03.PACORDTY != "4"
       && PA0PW03.FY1FCTYC != PA0PW04.FY1FCTYC)
        converseLib.validationFailed(110); /* CAN'T TRANSFER QTY BETWEEN FACTORIES*/
      end
    end
  end
  ;
  ;
  if (PA1REC.YETCD == "DD" /* dom div*/
   || PA1REC.YETCD == "DN" /* dom to nil*/
   || PA1REC.YETCD == "ND" /* nil div*/
   || PA1REC.YETCD == "NI") /* nil to dom*/
    ;
    if (PA0PW03.PACORDTY == "6"
     || PA0PW03.PACORDTY == "7"
     || PA0PW03.PACORDTY == "8")
      if (PA0PW04.PA0PWDET == 0) /* creating new row*/
        PA0PW04.PA0PWDET = PA0PW03.PA0PWDET;
      end
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* PA344: IF A FUTURE SO IS THE 'FROM' ITEM, THE 'TO' ITEM CAN*/
   /* NOT BE A PO WITH A DIFFERENT SALES ORDER.*/
  ;
  if (PA0PW03.PACORDTY == "4"             /* 'FROM' SALES ORDER*/
   && PA0PW04.PACORDTY != " "             /* 'TO' ITEM EXISTS*/
   && PA0PW03.PC3POIDT > PA0PW00.PA0PWPDT /* SO PO ID IS A FUTURE*/
   && PA0PW04.OP1CUOID != 0)              /* 'TO' ITEM ALREADY HAS A SALES ORDER*/
    if (PA0PW03.OP1PARTN == PA0PW04.OP1PARTN
     && PA0PW03.OP1CUOID == PA0PW04.OP1CUOID
     && PA0PW03.OP1NORID == PA0PW04.OP1NORID)
         /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(294); /* CAN'T USE FUTURE SO AS 'FROM'*/
      PA0PW00.XXXMODID = "S03";
    end
  end
  ;
                      /* end pa0ps03*/
   /* ------------------------------------------------------------*/
end // end PA0PS-03

// set error flags
Function PA0PS-04()
  converseLib.validationFailed(96); /* INVALID SELECTION FOR MANUAL PROCESS*/
  PA0PW02.PACSEVAL[PA0PWIX3] = "*";
  PA0PWIX5 = PA0PWIX3 - PA0PWIX1 + 1; /* compute current line dispaly*/
  if (PA0PWIX5 <= 12
   && PA0PWIX5 >= 1)
    set PA0PM001.PA0PMSEL[PA0PWIX5] cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
                      /* end PA0PS04*/
   /* ------------------------------------------------------------*/
end // end PA0PS-04

// store work items
Function PA0PS-05()
   /* ------------------------------------------------------------*/
                       /* store oa work items*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* PA323: DETERMINE PROCESSING A WAREHOUSE*/
  if (VPAWRK02.XDSCD == " ") /* SHIP FROM WAREHOUSE*/
    PA0PW00.PA0PW-PROCESSING-WHSE = "Y";
  end
  ;
  if (VPAWRK02.PACORDTY == "3") /* po's submitted to calc*/
    PA0PWQT5 = PA0PWQT5 + VPAWRK02.PACFBQTY; /* do not table this row*/
    PA0PW00.PA0PWPBK = PA0PW00.PA0PWPBK + VPAWRK02.PACFBQTY;
    return;
  end
  ;
  ;
  XX4 = XX4 + 1;
  ;
  if (XX4 > 50) /* max allowed selected items*/
    converseLib.validationFailed(40); /* exceeded*/
    return;
  end
  ;
  ;
  PA0PW02.PA0PWGP2[XX4] = VPAWRKCP.VPAWRK02-COPY-GRP;
  ;
                  /* format dates for display*/
  ;
  PA0PW07.PA0PW1DT = PA0PW02.PC6RTADT[XX4]; /* ccyymmdd*/
  PA0PW07.PA0PW2YY = PA0PW07.PA0PW1YY; /* yy*/
  PA0PW07.PA0PW2MM = PA0PW07.PA0PW1MM; /* mm*/
  PA0PW07.PA0PW2DD = PA0PW07.PA0PW1DD; /* dd*/
  ;
  PA0PW02.PA0PWDRT[XX4] = PA0PW07.PA0PW2DT; /* rta mmddyy*/
  ;
  ;
  PA0PW07.PA0PW1DT = PA0PW02.PC6ETSDT[XX4]; /* ccyymmdd*/
  PA0PW07.PA0PW2YY = PA0PW07.PA0PW1YY; /* yy*/
  PA0PW07.PA0PW2MM = PA0PW07.PA0PW1MM; /* mm*/
  PA0PW07.PA0PW2DD = PA0PW07.PA0PW1DD; /* dd*/
  ;
  PA0PW02.PA0PWDET[XX4] = PA0PW07.PA0PW2DT; /* ets mmddyy*/
  ;
  ;
  PA0PWQT1 = 0; /* temp order total*/
  PA0PWQT2 = 0; /* temp bal/to/shp  & so adj*/
  PA0PWQT3 = 0; /* temp adjustment totalalso fcty bulk*/
  PA0PWQT4 = 0; /* TEMP TOTAL OF QT1,2,3*/
  ;
  ;
  if (VPAWRK02.PACORDTY == "8") /* calced po item*/
    PA0PW00.PA0PWCAL = "Y";
  end
  ;
  ;
  XX1 = 1; /* size qty index*/
  ;
  while (XX1 <= 40)
    ;
    if (VPAWRK02.PACORDTY == "4") /* so item*/
      PA0PWQT4 = PA0PWQT4 + VPAWRK02.PACFLADJ[XX1]; /* adjustments*/
    end
    ;
    ;
    if (VPAWRK02.PACORDTY == "6") /* ORG PO ITEM*/
      PA0PWQT1 = PA0PWQT1 + VPAWRK02.PACWRKQT[XX1]; /* ord*/
      PA0PWQT2 = PA0PWQT2 + VPAWRK02.PACADJQT[XX1] +       VPAWRK02.PACFLADJ[XX1]; /* bts*/
      PA0PWQT3 = PA0PWQT3 + VPAWRK02.PACFLADJ[XX1]; /* adjustments*/
    end
    ;
                   /* new item compute b/t/s*/
    if (VPAWRK02.PACORDTY == "7" /* from manual adj*/
     || VPAWRK02.PACORDTY == "8") /* from calc*/
      PA0PWQT2 = PA0PWQT2 + VPAWRK02.PACFLADJ[XX1] +       VPAWRK02.PACWRKQT[XX1];
      PA0PWQT3 = PA0PWQT3 + VPAWRK02.PACFLADJ[XX1] +       VPAWRK02.PACWRKQT[XX1];
    end
    ;
    XX1 = XX1 + 1;
  end
  ;
  if (VPAWRK02.PACORDTY == "6")
    if (PA0PWQT3 != 0)
      PA0PWQT4 = PA0PWQT1 + PA0PWQT3; /* total item adjustment*/
      PA0PWQT5 = PA0PWQT5 + PA0PWQT3; /* total all item adjustment*/
    end
  end
  ;
  ;
  if (VPAWRK02.PACORDTY == "7")
    if (PA0PWQT3 != 0)
      PA0PWQT4 = PA0PWQT1 + PA0PWQT3; /* total item adjustment*/
      PA0PWQT5 = PA0PWQT5 + PA0PWQT4; /* total all item adjustment*/
    end
  end
  ;
  if (VPAWRK02.PACORDTY == "8")
    if (PA0PWQT3 != 0) /* new has adjustments*/
      PA0PWQT4 = PA0PWQT1 + PA0PWQT3; /* total item adjustment*/
      PA0PWQT5 = PA0PWQT5 + PA0PWQT4; /* total all item adjustment*/
    end
  end
  ;
  PA0PW02.PA0PWLT1[XX4] = PA0PW00.PA0PWQT1; /* store item ttls*/
  PA0PW02.PA0PWLT2[XX4] = PA0PW00.PA0PWQT2;
  PA0PW02.PA0PWLT3[XX4] = PA0PW00.PA0PWQT3;
  PA0PW02.PA0PWLT4[XX4] = PA0PW00.PA0PWQT4;
  ;
   /* ----------------------END PA0PS05---------------------------*/
end // end PA0PS-05

// update vpawrk01 work table
Function PA0PS-10()
   /* ------------------------------------------------------------*/
   /* update row, from DPRODA.VPAWRK01*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  XX0XS01(); /* Obtain current time*/
  VPAWRK02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPAWRK02.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "VPAWRK02" ("U ", SQLCA, VPAWRK02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S10"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0PS10"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK02"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* Move to displayable field*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- end of process PA0PS10 -----------------------*/
  ;
end // end PA0PS-10

// select unique vpawrk01
Function PA0PS-11()
   /* ------------------------------------------------------------*/
   /* select row, from DPRODA.VPAWRK02*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPAWRK02" ("S ", SQLCA, VPAWRK02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S11"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0PS10"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK02"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* Move to displayable field*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PAOPS11 -----------------------*/
  ;
end // end PA0PS-11

// delete a row  vpawrk01
Function PA0PS-12()
   /* ------------------------------------------------------------*/
   /* delete row, from DPRODA.VPAWRK02*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPAWRK02" ("D ", SQLCA, VPAWRK02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* ROW NOT FOUND*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S12"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0PS12"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK02"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* Move to displayable field*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PAOPS12 -----------------------*/
  ;
end // end PA0PS-12

// add a row vpawrk01
Function PA0PS-13()
   /* ------------------------------------------------------------*/
   /* add a  row, to   DPRODA.VPAWRK03*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
   /* This SGRP was originally meant to add a row to VPAWRK02. It*/
   /* now does the same function on VPAWRK03. These changes are*/
   /* part of NSC to maintain REL-PLN-NBR -- Greddy 05/09/00*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Obtain current time*/
  VPAWRK03.ZZZSDT = XX0XW01.XX0XWDAT;
  VPAWRK03.ZZZCHGDT = 0;
  VPAWRK03.ZZZCHGTM = 0;
  VPAWRK03.ZZZCHGCT = 0;
  VPAWRK03.XFRCD = "  "; /* db change 10/09/91*/
  ;
  ;
  ;
  try
    call "VPAWRK03" ("A ", SQLCA, VPAWRK03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S13"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0PS13"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK03"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* Move to displayable field*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PAOPS-13 -----------------------*/
  ;
end // end PA0PS-13

// select pa work items
Function PA0PS-14()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPAWRK02" ("N2", SQLCA, VPAWRK02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PA0PW00.XXXMODID = "S14"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map before re-display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0PS14"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK02"; /* ===> Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* **                                                        ***/
   /* ********************** End of PA0PS14 ***********************/
   /* **                                                        ***/
end // end PA0PS-14

// update vbotln01 oa b/l
Function PA0PS-16()
  ;
   /* ------------------------------------------------------------*/
   /* update row,      DPRODA.VBOTLN01*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  XX0XS01(); /* Obtain current time*/
  PA5REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PA5REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  /*  */
  try
    call "VBOTLN02" ("U ", SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  /*  */
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S16"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0PS10"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* Move to displayable field*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- end of process PA0PS16 -----------------------*/
  ;
end // end PA0PS-16

// Validate RTA and MDT From Item
Function PA0PS-20()
   /* ------------------------------------------------------------*/
   /* validate rta date changeand mode of trans*/
   /* depending on the oa type map2 fields are protected*/
   /* therefore this edit works for all OA types*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PM002.PA0PMFRT != PA0PW05.PA0PMFRT)
    XX5 = 1;
    set PA0PM002.PA0PMFRT initialAttributes;
    set TA2REC empty;
    TA2REC.TA2GRGAN = PA0PM002.PA0PMFRT;
   /* SAKTHI. FIX Y2K BUG. 02/16/01.*/
   /* MOVE 19 TO TA2REC.TA2CENT;*/
    TA2REC.TA2CENT = 20;
   /* SAKTHI. 02/16/01.*/
    PA0PS30(); /* call ta2 date routine*/
    ;
    if (TA2REC.TA2RTNCD != 0)
      set PA0PM002.PA0PMFRT cursor, bold;
      converseLib.validationFailed(22);
    end
  end
  ;
  ;
  if (PA0PM002.PA0PMFMD != PA0PW05.YMTCD) /* modeof trans portation*/
    XX5 = 1;
    set PA0PM002.PA0PMFMD initialAttributes;
    if (PA0PM002.PA0PMFMD in YMTTBL.YMTCD)
      if (sysVar.arrayIndex != 0) /* chk mdt valid in cnty*/
        set FY1REC empty;
        FY1REC.FY1FCTYC = PA0PM002.PA0PMFFA;
        FY1REC.XGPCD = "02";
        PA0P-60(); /* may set ezemno to 29 if err occurs*/
      else
        converseLib.validationFailed(29); /* md not in ymttbl*/
        PA0PW00.XXXMODID = "S20";
      end
      if (converseVar.validationMsgNum == 29) /* mode of trans error pa0ps60*/
        set PA0PM002.PA0PMFMD cursor, bold;
      end
    end
  end
  ;
  ;
  ;
   /* ------------- end of process PA0PS-20 -----------------------*/
  ;
  ;
end // end PA0PS-20

// VALIDATE "TO"  RTA DATE CHANGE
Function PA0PS-21()
   /* ------------------------------------------------------------*/
   /* check for trade restriction problems between the factories.*/
   /* output a warning message that can be overriden.*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PM002.PA0PMTCU != PA0PW00.PA0PWTCU) /* customer xref changed*/
    PA0PW00.PA0PWTRW = "N"; /* reset warning flag*/
    PA0PW00.PA0PWTCU = PA0PM002.PA0PMTCU; /* save xref*/
  end
  ;
  if (PA0PW00.PA0PWTRW == "N" /* warning not printed yet*/
   && PA0PM002.PA0PMTCU != " "
   && PA0PM002.PA0PMTCU != PA0PW00.PA0PW-REGION-WHSE[1]
   && PA0PM002.PA0PMTCU != PA0PW00.PA0PW-REGION-WHSE[2]
   && PA0PM002.PA0PMTCU != PA0PW00.PA0PW-REGION-WHSE[3])
    PA0PS70();
    if (converseVar.validationMsgNum != 0)
      return;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* VALIDATE RTA DATE CHANGE AND MODE OF TRANSPORTATION*/
   /* depending on the oa type map2 fields are protected*/
   /* therefore this edit works for all OA types*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0PM002.PA0PMTRT != PA0PW06.PA0PMTRT)
    XX5 = 1;
    set PA0PM002.PA0PMTRT initialAttributes;
    set TA2REC empty;
    TA2REC.TA2GRGAN = PA0PM002.PA0PMTRT;
   /* SAKTHI. FIX THE Y2K BUG. 02/16/01*/
   /* MOVE 19 TO TA2REC.TA2CENT;*/
    TA2REC.TA2CENT = 20;
   /* SAKTHI. 02/16/01*/
    PA0PS30(); /* call ta2 date routine*/
    ;
    if (TA2REC.TA2RTNCD != 0)
      set PA0PM002.PA0PMTRT cursor, bold;
      converseLib.validationFailed(22);
    end
  end
  ;
   /* SAKTHI. TO FIX THE BUG WHICH ALLOWS BLANK MODE TO GO THROUGH*/
   /* FOR DM AND NM TYPE OA'S. 02/16/01*/
  if (PA0PM002.PA0PMTMD == " ")
    converseLib.validationFailed(29); /* Mode not filled*/
    set PA0PM002.PA0PMTMD cursor, bold;
    PA0PW00.XXXMODID = "S21";
  else
   /* SAKTHI. 02/16/01.*/
    ;
    if (PA0PM002.PA0PMTMD != PA0PW06.YMTCD /* MODE OF TRANSPORTATION*/
     || PA0PM002.PA0PMTFA != PA0PW06.FY1FCTYC) /* or factory changed*/
      XX5 = 1;
      set PA0PM002.PA0PMTMD initialAttributes;
      if (PA0PM002.PA0PMTMD in YMTTBL.YMTCD)
        set FY1REC empty;
        FY1REC.FY1FCTYC = PA0PM002.PA0PMTFA;
        FY1REC.XGPCD = "02";
        PA0P-60(); /* may set ezemno to 29 if err occurs*/
        if (converseVar.validationMsgNum == 29) /* mode of trans error pa0ps60*/
          set PA0PM002.PA0PMTMD cursor, bold;
          PA0PW00.XXXMODID = "S21";
        end
      else
        converseLib.validationFailed(29); /* md not in ymttbl*/
        set PA0PM002.PA0PMTMD cursor, bold;
        PA0PW00.XXXMODID = "S21";
      end
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  ;
   /* ----------------End process PA0PS-21  -----------------------*/
  ;
end // end PA0PS-21

// VALIDATE RTA DATE CHANGE
Function PA0PS-24()
   /* ------------------------------------------------------------*/
                      /* validate pa0pw05*/
                      /* key fields dup rows*/
                      /* not allowed*/
   /* -----------------------------------------------------------*/
  ;
  ;
  set VPAWRK02 empty;
  ;
  ;
  VPAWRK02.PA1OANBR = PA1REC.PA1OANBR;
  VPAWRK02.PACORDTY = PA0PW03.PACORDTY;
  VPAWRK02.FY1FCTYC = PA0PM002.PA0PMFFA;
  VPAWRK02.XCTCD = PA0PM002.PA0PM-XFR-CTRY-CD;
  VPAWRK02.PC-XCT-ORIG-CD = PA0PM002.PA0PM-MCO-CTRY-CD;
  VPAWRK02.YMTCD = PA0PM002.PA0PMFMD;
  PA0PW07.PA0PW2DT = PA0PM002.PA0PMFRT;
  PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
  PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
  PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
  ;
  VPAWRK02.PC6RTADT = PA0PW07.PA0PW1DT;
  ;
  if (PA0PW07.PA0PW1YY > 60)
    VPAWRK02.PC6RTADT = VPAWRK02.PC6RTADT + 19000000;
  else
    VPAWRK02.PC6RTADT = VPAWRK02.PC6RTADT + 20000000;
  end
  ;
  if (PA0PM002.PA0PMFCU != " ")
    if (PA0PM002.PA0PMFCU == PA0PW00.PA0PW-REGION-WHSE[1]
     || PA0PM002.PA0PMFCU == PA0PW00.PA0PW-REGION-WHSE[2]
     || PA0PM002.PA0PMFCU == PA0PW00.PA0PW-REGION-WHSE[3])
      VPAWRK02.XWHCD = PA0PM002.PA0PMFCU;
      VPAWRK02.PC2CUXID = "     ";
      VPAWRK02.OP1PARTN = " ";
      VPAWRK02.OP1CUOID = 0;
      VPAWRK02.OP1NORID = 0;
    else
      VPAWRK02.PC2CUXID = PA0PM002.PA0PMFCU;
      VPAWRK02.OP1CUOID = PA0PM002.PA0PM-SO-CUOID[1];
      PA0PW00.PA0PW-SO-OP1CUOID = PA0PM002.PA0PM-SO-CUOID[1];
      VPAWRK02.OP1PARTN = PA0PW00.PA0PW-SO-OP1PARTN;
      VPAWRK02.OP1NORID = PA0PM002.PA0PM-SO-NORID[1];
      VPAWRK02.XWHCD = "  ";
    end
  end
  ;
  PA0PS-11(); /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* item found error*/
    set PA0PM002.PA0PMFFA bold;
    set PA0PM002.PA0PMFCU bold;
    set PA0PM002.PA0PM-SO-CUOID[1] bold;
    set PA0PM002.PA0PM-SO-NORID[1] bold;
    set PA0PM002.PA0PMFRT bold;
    set PA0PM002.PA0PMFMD bold;
    converseLib.validationFailed(98);
    PA0PW00.XXXMODID = "S24";
    return;
  else
    PA0PW05.PA0PWCKY = "Y";
    PA0PW05.FY1FCTYC = PA0PM002.PA0PMFFA;
    PA0PW05.YMTCD = PA0PM002.PA0PMFMD;
    PA0PW05.PA0PMFRT = PA0PM002.PA0PMFRT;
    PA0PW05.PA0PW-CUST = PA0PM002.PA0PMFCU;
    PA0PW05.OP1CUOID = PA0PM002.PA0PM-SO-CUOID[1];
    PA0PW00.PA0PW-SO-OP1CUOID = PA0PM002.PA0PM-SO-CUOID[1];
    PA0PW05.OP1PARTN = PA0PW00.PA0PW-SO-OP1PARTN;
    /* MOVE PA0PM002.PA0PM-SO-NORID(1) TO PA0PW00.PA0PW-SO-CONV-NORID;*/
    /* MOVE PA0PW00.PA0PW-SO-CONV-NIKE-ID TO PA0PW05.OP1NORID;*/
    PA0PW05.OP1NORID = PA0PM002.PA0PM-SO-NORID[1];
  end
   /* ---------------- End of process PA0PS-24 --------------------*/
  ;
end // end PA0PS-24

// VALIDATE oa item key change
Function PA0PS-25()
   /* ------------------------------------------------------------*/
                      /* validate pa0pw06*/
                      /* key fields dup rows*/
                      /* not allowed*/
   /* -----------------------------------------------------------*/
  set VPAWRK02 empty;
  ;
  ;
  VPAWRK02.PA1OANBR = PA1REC.PA1OANBR;
  VPAWRK02.PACORDTY = PA0PW04.PACORDTY;
  VPAWRK02.FY1FCTYC = PA0PM002.PA0PMTFA;
  VPAWRK02.YMTCD = PA0PM002.PA0PMTMD;
  ;
  PA0PW07.PA0PW2DT = PA0PM002.PA0PMTRT;
  PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
  PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
  PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
  ;
  VPAWRK02.PC6RTADT = PA0PW07.PA0PW1DT;
  ;
  if (PA0PW07.PA0PW1YY > 60)
    VPAWRK02.PC6RTADT = VPAWRK02.PC6RTADT + 19000000;
  else
    VPAWRK02.PC6RTADT = VPAWRK02.PC6RTADT + 20000000;
  end
  ;
  if (PA0PM002.PA0PM-TO-WHSE != " ")
    if (PA0PM002.PA0PM-TO-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
     || PA0PM002.PA0PM-TO-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
     || PA0PM002.PA0PM-TO-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
      ;
      VPAWRK02.XWHCD = PA0PM002.PA0PM-TO-WHSE;
      if (PA0PM002.PA0PMTCU == "     ")
        VPAWRK02.PC2CUXID = "     ";
        VPAWRK02.OP1PARTN = " ";
        VPAWRK02.OP1CUOID = 0;
        VPAWRK02.OP1NORID = 0;
      else
        VPAWRK02.XDSCD = "2";
        VPAWRK02.PC2CUXID = PA0PM002.PA0PMTCU;
        VPAWRK02.OP1CUOID = PA0PM002.PA0PM-SO-CUOID[2];
        PA0PW00.PA0PW-SO-OP1CUOID = PA0PM002.PA0PM-SO-CUOID[2];
        VPAWRK02.OP1PARTN = PA0PW00.PA0PW-SO-OP1PARTN;
        VPAWRK02.OP1NORID = PA0PM002.PA0PM-SO-NORID[2];
      end
    else
      ;
      VPAWRK02.XDSCD = "1";
      VPAWRK02.PC2CUXID = PA0PM002.PA0PMTCU;
      VPAWRK02.OP1CUOID = PA0PM002.PA0PM-SO-CUOID[2];
      PA0PW00.PA0PW-SO-OP1CUOID = PA0PM002.PA0PM-SO-CUOID[2];
      VPAWRK02.OP1PARTN = PA0PW00.PA0PW-SO-OP1PARTN;
      VPAWRK02.OP1NORID = PA0PM002.PA0PM-SO-NORID[2];
      VPAWRK02.XWHCD = "  ";
    end
  end
  ;
  PA0PS-11(); /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* item found error*/
    set PA0PM002.PA0PMTFA bold;
    ;
    if (PA0PM002.PA0PM-TO-WHSE != " ")
      if (PA0PM002.PA0PM-TO-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
       || PA0PM002.PA0PM-TO-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
       || PA0PM002.PA0PM-TO-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
        set PA0PM002.PA0PM-TO-WHSE bold;
      end
    end
    ;
    if (PA0PM002.PA0PMTCU != "     ")
      set PA0PM002.PA0PMTCU bold;
    end
    ;
    set PA0PM002.PA0PM-SO-CUOID[2] bold;
    set PA0PM002.PA0PM-SO-NORID[2] bold;
    set PA0PM002.PA0PMTRT bold;
    set PA0PM002.PA0PMTMD bold;
    converseLib.validationFailed(98);
    PA0PW00.XXXMODID = "S25";
    return;
  else
    PA0PW06.PA0PWCKY = "Y";
    PA0PW06.FY1FCTYC = PA0PM002.PA0PMTFA;
    PA0PW06.YMTCD = PA0PM002.PA0PMTMD;
    PA0PW06.OP1CUOID = PA0PM002.PA0PM-SO-CUOID[2];
    PA0PW00.PA0PW-SO-OP1CUOID = PA0PM002.PA0PM-SO-CUOID[2];
    PA0PW06.OP1PARTN = PA0PW00.PA0PW-SO-OP1PARTN;
    PA0PW06.OP1NORID = PA0PM002.PA0PM-SO-NORID[2];
    PA0PW14.PA0PW-CFP-OA-FROM-NBR = PA0PM002.PA0PM-CFP-JAP-NBR;
    PA0PW06.PA0PMTRT = PA0PM002.PA0PMTRT;
    PA0PW06.PA0PMTET = PA0PM002.PA0PMTET;
    PA0PW06.PA0PW-CUST = PA0PM002.PA0PMTCU;
    PA0PW06.PA0PW-WHSE = PA0PM002.PA0PM-TO-WHSE;
  end
  ;
   /* ----------------------------------------------------*/
   /* if dest chged to whse*/
   /* check botom line*/
   /* -----------------------------------------------------*/
  PA0PS15();
  ;
  ;
   /* ---------------- End of process PA0PS-25 --------------------*/
  ;
end // end PA0PS-25

// VALIDATE RTA and MOD MAP4
Function PA0PS-27()
   /* ------------------------------------------------------------*/
   /* validate rta date changeand mode of trans*/
   /* depending on the oa type map2 fields are protected*/
   /* therefore this edit works for all OA types*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (PA0PM004.PA0PMFRT != PA0PW05.PA0PMFRT)
    XX5 = 1;
    set PA0PM002.PA0PMFRT initialAttributes;
    set TA2REC empty;
    TA2REC.TA2GRGAN = PA0PM004.PA0PMFRT;
    TA2REC.TA2CENT = 19;
    PA0PS30(); /* call ta2 date routine*/
    ;
    if (TA2REC.TA2RTNCD != 0)
      set PA0PM002.PA0PMFRT cursor, bold;
      converseLib.validationFailed(22);
    end
  end
  ;
  ;
  if (PA0PM004.PA0PMFMD != PA0PW05.YMTCD) /* modeof trans portation*/
    XX5 = 1;
    set PA0PM004.PA0PMFMD initialAttributes;
    if (PA0PM004.PA0PMFMD in YMTTBL.YMTCD)
      set FY1REC empty;
      FY1REC.FY1FCTYC = PA0PM004.PA0PMFFA;
      FY1REC.XGPCD = "02";
      PA0P-60(); /* may set ezemno to 29 if err occurs*/
      if (converseVar.validationMsgNum == 29) /* mode of trans error pa0ps60*/
        set PA0PM004.PA0PMFMD cursor, bold;
      end
    else
      converseLib.validationFailed(29); /* md not in ymttbl*/
      set PA0PM004.PA0PMFMD cursor, bold;
      PA0PW00.XXXMODID = "S27";
    end
  end
  ;
   /* ------------- end of process PA0PS-27 -----------------------*/
  ;
end // end PA0PS-27

// VALIDATE dup row pa0pm004 map
Function PA0PS-28()
   /* ------------------------------------------------------------*/
                      /* validate pa0pw05*/
                      /* key fields dup rows*/
                      /* not allowed*/
   /* -----------------------------------------------------------*/
  ;
  ;
  set VPAWRK02 empty;
  ;
  ;
  VPAWRK02.PA1OANBR = PA1REC.PA1OANBR;
  VPAWRK02.PACORDTY = PA0PW03.PACORDTY;
  VPAWRK02.FY1FCTYC = PA0PM004.PA0PMFFA;
  VPAWRK02.YMTCD = PA0PM004.PA0PMFMD;
  PA0PW07.PA0PW2DT = PA0PM004.PA0PMFRT;
  PA0PW07.PA0PW1YY = PA0PW07.PA0PW2YY;
  PA0PW07.PA0PW1MM = PA0PW07.PA0PW2MM;
  PA0PW07.PA0PW1DD = PA0PW07.PA0PW2DD;
  ;
  VPAWRK02.PC6RTADT = PA0PW07.PA0PW1DT;
  ;
  if (PA0PW07.PA0PW1YY > 60)
    VPAWRK02.PC6RTADT = VPAWRK02.PC6RTADT + 19000000;
  else
    VPAWRK02.PC6RTADT = VPAWRK02.PC6RTADT + 20000000;
  end
  ;
  if (PA0PM004.PA0PMFCU != " ")
    if (PA0PM004.PA0PMFCU == PA0PW00.PA0PW-REGION-WHSE[1]
     || PA0PM004.PA0PMFCU == PA0PW00.PA0PW-REGION-WHSE[2]
     || PA0PM004.PA0PMFCU == PA0PW00.PA0PW-REGION-WHSE[3])
      VPAWRK02.XWHCD = PA0PM004.PA0PMFCU;
      VPAWRK02.PC2CUXID = "     ";
      VPAWRK02.OP1PARTN = " ";
      VPAWRK02.OP1CUOID = 0;
      VPAWRK02.OP1NORID = 0;
    else
      VPAWRK02.PC2CUXID = PA0PM004.PA0PMFCU;
      VPAWRK02.OP1CUOID = PA0PM004.PA0PM-SO-NBR-CUOID;
      PA0PW00.PA0PW-SO-OP1CUOID = PA0PM004.PA0PM-SO-NBR-CUOID;
      VPAWRK02.OP1PARTN = PA0PW00.PA0PW-SO-OP1PARTN;
      VPAWRK02.OP1NORID = PA0PM004.PA0PM-SO-NBR-NORID;
      VPAWRK02.XWHCD = "  ";
    end
  end
  ;
  PA0PS-11(); /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* item found error*/
    set PA0PM004.PA0PMFFA bold;
    set PA0PM004.PA0PMFCU bold;
    set PA0PM004.PA0PMFRT bold;
    set PA0PM004.PA0PMFMD bold;
    set PA0PM004.PA0PM-SO-NBR-CUOID bold;
    set PA0PM004.PA0PM-SO-NBR-NORID bold;
    converseLib.validationFailed(98); /* ITEM ALREADY EXISTS - DUPLICATE ADD*/
    PA0PW00.XXXMODID = "S28";
    return;
  else
    PA0PW05.PA0PWCKY = "Y";
    PA0PW05.FY1FCTYC = PA0PM004.PA0PMFFA;
    PA0PW05.OP1CUOID = PA0PM004.PA0PM-SO-NBR-CUOID;
    PA0PW00.PA0PW-SO-OP1CUOID = PA0PM004.PA0PM-SO-NBR-CUOID;
    PA0PW05.OP1PARTN = PA0PW00.PA0PW-SO-OP1PARTN;
    PA0PW05.OP1NORID = PA0PM004.PA0PM-SO-NBR-NORID;
    if (PA0PM004.PA0PM-MSR-IND == "MSR")
      PA0PW05.PA0PW-MSR-IND = "M";
    end
    PA0PW05.YMTCD = PA0PM004.PA0PMFMD;
    PA0PW05.PA0PMFRT = PA0PM004.PA0PMFRT;
    PA0PW05.PA0PW-CUST = PA0PM004.PA0PMFCU;
  end
   /* ---------------- End of process PA0PS-28 --------------------*/
  ;
end // end PA0PS-28

// SELECT ALT DPRODC.VPOITM01
Function PA0PS-50-VPOITM-SA()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPOITM05" ("SA", SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
  else
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 100)
      VPOITM05.PC-REL-PLN-REF-NBR = " ";
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S50"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0PS50"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* FORMATTED ERROR KEY*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* EXIT TO DISPLAY MAP*/
  ;
  ;
end // end PA0PS-50-VPOITM-SA

// select set for dproda.vfypa001
Function PA0PS-76-IO4810-S1()
   /* ------------------------------------------------------------*/
   /* select set factory records.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4810" ("S1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S76"; /* module identification*/
  ;
  if (sysVar.errorCode == "0000000" /* good return code*/
   && SQLCA.VAGen_SQLCODE == -911)  /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "SELECT SET";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1PGMNM = "PA0PS-76"; /* process name*/
  TA1REC.TA1DBASE = "DPRODA "; /* database name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
   /* ------------End process PA0Ps-76-io4810-s1------------------*/
  ;
end // end PA0PS-76-IO4810-S1

// get next for dproda.vfypa001
Function PA0PS-77-IO4810-N1()
   /* ------------------------------------------------------------*/
   /* get the next factory*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4810" ("N1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
   /* MOVE 'Y' TO PA0PW06.PA0PWEFC; /* INDICATING END OF FCTY CURSOR*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000") /* good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S77"; /* module identification*/
  ;
  if (sysVar.errorCode == "0000000" /* good return code*/
   && SQLCA.VAGen_SQLCODE == -911)  /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "GET NEXT";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1PGMNM = "PA0PS-77"; /* process name*/
  TA1REC.TA1DBASE = "DPRODA "; /* database name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
   /* ----------------End process PA0PS-77-io4810-n1   -------------------*/
  ;
end // end PA0PS-77-IO4810-N1

// close for dproda.vfypa001
Function PA0PS-78-IO4810-C1()
   /* ------------------------------------------------------------*/
   /* close set of factory records*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4810" ("C1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S78"; /* module identification*/
  ;
  if (sysVar.errorCode == "0000000" /* good return code*/
   && SQLCA.VAGen_SQLCODE == -911)  /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "CLOSE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1PGMNM = "PA0PS-78"; /* process name*/
  TA1REC.TA1DBASE = "DPRODA "; /* database name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
   /* ----------------End process PA0PS-78-io4810-c1   -------*/
  ;
end // end PA0PS-78-IO4810-C1

// FOR TEST, ALLOW PRINTER SELECT
Function PA0PS-80-S-PRINTER()
   /* ------------------------------------------------------------*/
   /* FOR TEST, ALLOW USER TO SELECT PRINTER.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6-MAX-COND-CODE = 3; /* EXEC NORMAL EOJ IF RC 0 OR 3*/
  TA6REC.TA6SUBSW = "Y"; /* TAILOR AND SUBMIT THE JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ ONLINE MESSAGE SWITCH*/
  ;
  XPTA0P(); /* SUBMIT JCL FOR BACKGROUND JOB*/
  ;
   /* ------------------------------------------------------------*/
   /* IF SUBMIT WAS SUCCESSFUL, RETURN TO THE PREVIOUS PROCESS.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
   && TA6REC.TA6RTNCD == "0")        /* AND NORMAL RETURN*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* IF NOT SUCCESSFUL, INDICATE UNEXPECTED ERROR HAS OCCURRED.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* CALL NOT SUCCESSFUL*/
   || TA6REC.TA6RTNCD > "1")         /* OR UNEXPECTED ERROR*/
    ;
    PAWREC.XXXMODID = "S80"; /* MODULE INDENTIFICATION*/
    converseLib.validationFailed(10); /* UNEXPECTED ERROR OCCURRED*/
    ;
  end
  ;
  exit stack; /* EXIT TO DISPLAY MAP*/
  ;
   /* ------------------------------------------------------------*/
   /* END OF PA0PS-80-S-PRINTER*/
   /* ------------------------------------------------------------*/
end // end PA0PS-80-S-PRINTER

// OPEN CURSOR O/A BOTTOM LINES
Function PA0PS-81-PA1050-S()
   /* -----------------------------------------------------*/
   /* OPEN CURSOR ON THE O/A BOTTOM LINE RECORDS*/
   /* -----------------------------------------------------*/
  ;
  try
    call "PA1050" (PA0PW10, SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end
  ;
  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0PS81 OPEN CURSOR O/A WORK  ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  else
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
  ;
  exit stack;
end // end PA0PS-81-PA1050-S

// FETCH O/A BOTTOM LINES
Function PA0PS-82-PA1050-N()
   /* -----------------------------------------------------*/
   /* FETCH NEXT O/A BOTTOM LINE RECORD*/
   /* -----------------------------------------------------*/
  ;
  try
    call "PA1050" (PA0PW10, SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end
  ;
  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0PS82 FETCH NEXT TYPE 9 WORK";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  else
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
  ;
  exit stack;
end // end PA0PS-82-PA1050-N

// CLOSE O/A BOTTOM LINES
Function PA0PS-83-PA1050-C()
   /* -----------------------------------------------------*/
   /* CLOSE O/A BOTTOM LINE TABLE*/
   /* -----------------------------------------------------*/
  ;
  try
    call "PA1050" (PA0PW10, SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end
  ;
  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0PS83 CLOSE O/A TYPE 9 WORK ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  else
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
  ;
  exit stack;
end // end PA0PS-83-PA1050-C

// Read DORDER.VORHDR01 IO0430
Function PA0PS-85-IO0430-S()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* IF EUROPEAN O/A, GET DEURO.VEORHD01 INFORMATION*/
  ;
  if (PA0PM001.PA1OANBR > 199999
   && PA0PM001.PA1OANBR < 300000)
    try
      call "VEORHD01" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/
  else
    try
      call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* ROW NOT FOUND*/
      return; /* Exit to display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  PAWREC.XXXMODID = "S85"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    ;
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* PROGRAM NUMBER*/
  TA1REC.TA1DBASE = "DORDER   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VORHDR01 "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ------------- End of process PA0PS-85-IO0430-S--------------*/
  ;
end // end PA0PS-85-IO0430-S

// Read DORDER.VORHDR01 IO0430
Function PA0PS-86-OP297D()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  call "OP297D" (PAMSREC) {isNoRefresh = yes, isExternal = yes}; /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* CALL SUCCESSFUL*/
    return;
  end
  ;
  converseLib.validationFailed(301); /* CALL TO OP297D UNSUCCESSFUL*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP RETURN CODE*/
  PAWREC.XXXMODID = "S86"; /* MODULE*/
  TA1REC.TA1TYPE = "DB2 "; /* TYPE ERROR*/
  TA1REC.TA1LOC = "CALL TO OP297D UNSUCCESSFUL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* APPLICATION*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* PROGRAM NUMBER*/
  TA1REC.TA1DBASE = "DPROD ";
  TA1REC.TA1TBLVU = "VCOLOR02";
  TA1REC.TA1TBLKE = PAMSREC.PAMS-PASS-RECORD;
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* ERROR ROUTINE*/
  ;
  exit stack;
  ;
  ;
   /* ------------- End of process PA0PS-86-OP297D ---------------*/
  ;
end // end PA0PS-86-OP297D

// DETERMINE VALID REGION WHSES
Function PA0PS-89-WHSE()
   /* ------------------------------------------------------------*/
   /* 12/19/94: DETERMINE THE VALID WAREHOUSE CODES FOR REGION*/
   /* GET THE WAREHOUSE CODES FROM THE DCORP.VSUMCD01 TABLE.*/
   /* XXX_TBL_PFX = 'XWH', XXX_SYS_PFX = 'FB', XXX_SUM_ID = 1,*/
   /* AND XXX_SUM_CD = REGION CODE.*/
   /*  */
   /* CHECK TO MAKE SURE THAT THE WAREHOUSE STATUS CODE ON*/
   /* YSMREC IS ACTIVE AND THE STATUS ON THE XWHTBL IS ACTIVE.*/
   /* ------------------------------------------------------------*/
  ;
  set YSMREC empty;
  ;
  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSRCVL = "****";
  ;
   /* IF EUROPEAN O/A, DEFAULT DIVISION TO '02'.*/
  ;
  if (PA0PW00.PA0PW-REGION-PA1OANBR > 199999
   && PA0PW00.PA0PW-REGION-PA1OANBR < 300000)
    YSMREC.YSMSUMCD = "02";
  else
    YSMREC.YSMSUMCD = "01";
  end
  ;
  PA0PS51(); /* SELECT SCAN 1 FOR DCORP.VSUMCD01*/
  ;
  PA0PS52(); /* GET NEXT DCORP.VSUMCD01*/
  ;
   /* LOAD THE REGION'S VALID WAREHOUSE CODES TO THE WORKING STORAGE*/
   /* RECORD.  ONLY THREE WAREHOUSES CAN BE PROCESSED.*/
  ;
  PA0PW00.XX9 = 0;
  while (SQLCA.VAGen_SQLCODE == 0)
    if (YSMREC.XXXSTAT == "A") /* ACTIVE WAREHOUSE*/
        /* CHECK TO MAKE SURE THAT THE XWHTBL ENTRY IS ACTIVE ALSO*/
      if (YSMREC.YSMSRCVL in XWHTBL.XWHCD)
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          PA0PW00.XX9 = PA0PW00.XX9 + 1;
          PA0PW00.PA0PW-ALLUSA-WHSE[XX9] = YSMREC.YSMSRCVL;
        end
      end
    end
    PA0PS52(); /* GET NEXT DCORP.VSUMCD01*/
  end
  ;
  PA0PS53(); /* CLOSE DCORP.VSUMCD01*/
  ;
  PA0PW00.PA0PNMWH = XX9; /* Number of USA whses valid for sy/clr*/
  ;
   /* READ OA HEADER AND SY/CLR TABLES HERE.*/
  set PA1REC empty;
  PA1REC.PA1OANBR = PA0PW00.PA0PW-REGION-PA1OANBR;
  PA0P111();
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    set PA0PM001 initial;
    PA0PM001.PA1OANBR = PA0PW00.PA0PW-REGION-PA1OANBR;
    set PA0PM001.PA1OANBR cursor, modified, bold;
    converseLib.validationFailed(50);
    PA0PW00.XXXMODID = "11";
    PA0PWIX3 = 1;
    while (PA0PWIX3 < 13)
      set PA0PM001.PA0PMSEL[PA0PWIX3] protect, invisible;
      PA0PWIX3 = PA0PWIX3 + 1;
    end
    PA0PW00.PA0PNTFD-FLAG = "Y";
    return;
  end
  ;
  set PG2REC empty;
  PG2REC.SY1STNBR = PA1REC.SY1STNBR;
  PG2REC.SY2CLRID = PA1REC.SY2CLRID;
  PG2REC.XDMCD = PA1REC.XDMCD;
  PG2REC.XGPCD = "02";
  ;
  XSPG202();
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(26);
    PA0PW00.PA0PNTFD-FLAG = "Y";
    return;
  end
  ;
  PA0PW00.PA0PIDX1 = 1;
  PA0PW00.XX9 = 0;
  while (PA0PW00.PA0PIDX1 <= PA0PW00.PA0PNMWH) /* For all valid USA whses*/
    PA0PW00.PA0PIDX2 = 1;
    PA0PW00.PA0PMCHS = "N"; /* Whse valid for sty/colr flag*/
   /* Check ALL the whses from DB2 table VSYCLR01*/
   /* OR   until a match is found*/
    while (PA0PW00.PA0PIDX2 <= 6 && 
    PA0PW00.PA0PMCHS == "N")
      if (PA0PW00.PA0PW-ALLUSA-WHSE[PA0PIDX1] == PG2REC.XWHCD[PA0PIDX2])
        PA0PW00.XX9 = PA0PW00.XX9 + 1;
        if (PA0PW00.XX9 > 3)
          PA0PW00.XXXMSGNO = 351;
          converseLib.validationFailed(351);
              /* EZERTN;*/
        else
          PA0PW00.PA0PW-REGION-WHSE[XX9] = PA0PW00.PA0PW-ALLUSA-WHSE[PA0PIDX1];
          PA0PW00.PA0PMCHS = "Y";
        end
      end
      PA0PW00.PA0PIDX2 = PA0PW00.PA0PIDX2 + 1;
    end
    PA0PW00.PA0PIDX1 = PA0PW00.PA0PIDX1 + 1;
  end
  ;
   /* ------------- End of process PA0PS-89-WHSE -----------------*/
  ;
end // end PA0PS-89-WHSE

// SELECT SET DCORP.VSUMCD01
Function PA0PS-90-IO2640-S()
  ;
   /* ------------------------------------------------------------*/
   /* Select UNIQUE row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* OR NOT FOUND*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S90"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET UNIQUE DCORP.VSUMCD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0PS90"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* EXIT TO DISPLAY MAP*/
  ;
  ;
end // end PA0PS-90-IO2640-S

// SELECT SET DCORP.VSUMCD01
Function PA0PS-91-VPACFP-A()
  ;
   /* ------------------------------------------------------------*/
   /* ADD A ROW INTO THE VPACFP01 TABLE.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPACFP01" ("A ", SQLCA, VPACFP01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S91"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD ROW - DPRODA.VPACFP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0PS91"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACFP01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* EXIT TO DISPLAY MAP*/
  ;
  ;
end // end PA0PS-91-VPACFP-A

// delete SET Dproda.vpacfp01
Function PA0PS-92-VPACFP-D1()
  ;
   /* ------------------------------------------------------------*/
   /* DELETE A  ROW FROM  VPACFP01 TABLE.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPACFP01" ("D1", SQLCA, VPACFP01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S91"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD ROW - DPRODA.VPACFP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0PS91"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACFP01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* EXIT TO DISPLAY MAP*/
  ;
  ;
end // end PA0PS-92-VPACFP-D1

// SELECT SET DCORP.VSUMCD01
Function PA0PS-93-VPACFP-S()
  ;
   /* ------------------------------------------------------------*/
   /* Select UNIQUE row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPACFP01" ("S ", SQLCA, VPACFP01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 ||  /* normal return code*/
    SQLCA.VAGen_SQLCODE == 100)      /* normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S91"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODA.VPACFP01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0PS91"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACFP01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* EXIT TO DISPLAY MAP*/
  ;
  ;
end // end PA0PS-93-VPACFP-S

// SELECT SET Dproda.vpacfp01
Function PA0PS-94-VPACFP-S1()
  ;
   /* ------------------------------------------------------------*/
   /* Select UNIQUE row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPACFP01" ("S1", SQLCA, VPACFP01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 ||  /* normal return code*/
    SQLCA.VAGen_SQLCODE == 100)      /* normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S91"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODA.VPACFP01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0PS91"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACFP01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* EXIT TO DISPLAY MAP*/
  ;
  ;
end // end PA0PS-94-VPACFP-S1

// SELECT SET DCORP.VSUMCD01
Function PA0PS-95-VPACFP-U()
  ;
   /* ------------------------------------------------------------*/
   /* UPDATE A ROW IN TABLE DPRODA.VPACFP01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPACFP01" ("U ", SQLCA, VPACFP01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S91"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DPRODA.VPACFP01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0PS91"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACFP01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* EXIT TO DISPLAY MAP*/
  ;
  ;
end // end PA0PS-95-VPACFP-U

// MOVE VPAWRKCP TO VPAWRK03
Function PA0PS-FRMT-VPAWRK3()
  /*  */
  VPAWRK03.PA1OANBR = VPAWRK02.PA1OANBR;
  VPAWRK03.PACGRPCD = VPAWRK02.PACGRPCD;
  VPAWRK03.PACORDTY = VPAWRK02.PACORDTY;
  VPAWRK03.PACSEVAL = VPAWRK02.PACSEVAL;
  VPAWRK03.XDSCD = VPAWRK02.XDSCD;
  VPAWRK03.PACADDRS = VPAWRK02.PACADDRS;
  VPAWRK03.FY1FCTYC = VPAWRK02.FY1FCTYC;
  VPAWRK03.XCTCD = VPAWRK02.XCTCD;
  VPAWRK03.PC3POIDT = VPAWRK02.PC3POIDT;
  VPAWRK03.PC3PONBR = VPAWRK02.PC3PONBR;
  VPAWRK03.PC6ITMNB = VPAWRK02.PC6ITMNB;
  VPAWRK03.PACFPONO = VPAWRK02.PACFPONO;
  VPAWRK03.PACFPCIT = VPAWRK02.PACFPCIT;
  VPAWRK03.PC6ETSDT = VPAWRK02.PC6ETSDT;
  VPAWRK03.PC6RTADT = VPAWRK02.PC6RTADT;
  VPAWRK03.PC-XCT-ORIG-CD = VPAWRK02.PC-XCT-ORIG-CD;
  VPAWRK03.YMTCD = VPAWRK02.YMTCD;
  VPAWRK03.PC2CUXID = VPAWRK02.PC2CUXID;
  VPAWRK03.PC2INSEG = VPAWRK02.PC2INSEG;
  VPAWRK03.XWHCD = VPAWRK02.XWHCD;
  VPAWRK03.OP1PARTN = VPAWRK02.OP1PARTN;
  VPAWRK03.OP1CUOID = VPAWRK02.OP1CUOID;
  VPAWRK03.OP1NORID = VPAWRK02.OP1NORID;
  VPAWRK03.PACFBQTY = VPAWRK02.PACFBQTY;
  VPAWRK03.XFRCD = VPAWRK02.XFRCD;
  VPAWRK03.FB-LATE-BK-FL = VPAWRK02.FB-LATE-BK-FL;
  VPAWRK03.FB-LATE-BK-FL-MDT = VPAWRK02.FB-LATE-BK-FL-MDT;
  VPAWRK03.PACWRKQT = VPAWRK02.PACWRKQT;
  VPAWRK03.PACADJQT = VPAWRK02.PACADJQT;
  VPAWRK03.PACFLADJ = VPAWRK02.PACFLADJ;
  VPAWRK03.ZZZSDT = VPAWRK02.ZZZSDT;
  VPAWRK03.ZZZSTM = VPAWRK02.ZZZSTM;
  VPAWRK03.ZZZCHGDT = VPAWRK02.ZZZCHGDT;
  VPAWRK03.ZZZCHGTM = VPAWRK02.ZZZCHGTM;
  VPAWRK03.ZZZCHGCT = VPAWRK02.ZZZCHGCT;
end // end PA0PS-FRMT-VPAWRK3

// edit pc3poidt for map display
Function PA0PS-PC3POIDT()
   /* ---------------------------------------------------------------------*/
   /* format PC3POIDT with fill blank for map display*/
   /* ---------------------------------------------------------------------*/
  PA0PWIX7 = 1;
  while (PA0PWIX7 < 10
   && PA0PW00.PA0PW-AR-PC3POIDT[PA0PWIX7] == "0")
    PA0PW00.PA0PW-AR-PC3POIDT[PA0PWIX7] = " ";
    PA0PWIX7 = PA0PWIX7 + 1;
  end
  ;
   /* ---------------------------------------------------------------------*/
   /* end of PA0PS-PC3POIDT*/
   /* ---------------------------------------------------------------------*/
end // end PA0PS-PC3POIDT

// select unique VCMPPG01
Function PA0PS-VCMPPG01-S()
   /* *****************************************************/
   /* select unique DPRODG.VCMPPG01*/
   /* *****************************************************/
  ;
  call "VCMPPG01" ("S ", SQLCA, VCMPPG01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S     ";
    TA1REC.TA1LOCAT[3] = "VCMPPG01";
    TA1REC.TA1DBASE = "DPRODG ";
    TA1REC.TA1TBLVU = "VCMPPG01";
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PA0PS-VCMPPG01-S  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1TBLKE = VCMPPG01-GROUP; /* key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end
  ;
  ;
end // end PA0PS-VCMPPG01-S

// select unique vpawrk03
Function PA0PS-VPAWRK03-S()
   /* ------------------------------------------------------------*/
   /* select row, from DPRODA.VPAWRK03*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPAWRK03" ("S ", SQLCA, VPAWRK03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S11"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODA.VPAWRK03";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PAWRK03"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK03"; /* Table view name*/
  PA0PW00.PA0PWKEY = PA0PW00.PA1OANBR; /* Move to displayable field*/
  TA1REC.TA1TBLKE = PA0PW00.PA0PWKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PA0PS-VPAWRK03-S---------------*/
  ;
end // end PA0PS-VPAWRK03-S

// get oa bottom line
Function PA0PS15()
   /* ------------------------------------------------------------*/
   /* If the items being processed are for domestic whse*/
   /* select bottom lines if needed.*/
   /* ------------------------------------------------------------*/
  ;
  if (PA5REC.SY1STNBR == "      ") /* no bottom line this oa*/
    ;
     /* PROCESS THE "FROM" ITEM*/
    ;
    if (PA0PW05.PA0PW-WHSE != " ")
      if (PA0PW05.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
       || PA0PW05.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
       || PA0PW05.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
        ;
           /* PA307: THE OPEN O/AS THAT HAVE TYPE '9' WORK RECORDS MUST BE*/
           /* USED TO ADJUST THE BOTTOM LINE.*/
        ;
        PA0PW11.PA0PW-FROM-TO-IND = "F";
        move 0 to PA0PW11.PA0PW-BL-WITH-OAS1[1] for all;
        PA0P-400();
        ;
      end
    end
    ;
     /* PROCESS THE "TO" ITEM*/
    ;
    if (PA0PW06.PA0PW-WHSE != " ")
      if (PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
       || PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
       || PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
        ;
           /* PA307: THE OPEN O/AS THAT HAVE TYPE '9' WORK RECORDS MUST BE*/
           /* USED TO ADJUST THE BOTTOM LINE.*/
        ;
        PA0PW11.PA0PW-FROM-TO-IND = "T";
        move 0 to PA0PW11.PA0PW-BL-WITH-OAS2[1] for all;
        PA0P-400();
        ;
      end
    end
    ;
    return;
    ;
  end
  ;
  if (PA0PW00.PA0PWSWD == "2")
    set PA0PM002.PA0PWSDT skip;
  end
  ;
  if (PA0PW03.PACORDTY == "6" /* from section of map*/
   || PA0PW03.PACORDTY == "7" 
   || PA0PW03.PACORDTY == "8")
    if (PA0PW05.PA0PW-WHSE != " ")
      if (PA0PW05.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
       || PA0PW05.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
       || PA0PW05.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
        ;
        set PA5REC empty; /* Clear bottom line*/
        PA5REC.XWHCD = PA0PW05.PA0PW-WHSE;
        PA5REC.PA1OANBR = PA1REC.PA1OANBR;
        PA0P116(); /* select unique bottom line*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
          PA0PW00.PA0PWSUD = PA5REC.ZZZSDT;
          ;
          PA0PWIX3 = 1; /* work index*/
          while (PA0PWIX3 <= 40)
            PA0PW03.PA0PWPBL[PA0PWIX3] = PA5REC.PA5BLQTY[PA0PWIX3]                                           + PA5REC.PA5AJQTY[PA0PWIX3];
            PA0PWIX3 = PA0PWIX3 + 1;
          end
          ;
        end
        ;
           /* PA307: ONCE THE BOTTOM LINE HAS BEEN DETERMINED THE OPEN*/
           /* O/AS THAT HAVE TYPE '9' WORK RECORDS MUST BE USED TO ADJUST*/
           /* THE BOTTOM LINE.*/
        ;
        PA0PW11.PA0PW-FROM-TO-IND = "F";
        move 0 to PA0PW11.PA0PW-BL-WITH-OAS1[1] for all;
        PA0P-400();
        ;
      end
    end
  end
  ;
  if (PA0PW06.PA0PW-WHSE != " ")
    if (PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[1]
     || PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[2]
     || PA0PW06.PA0PW-WHSE == PA0PW00.PA0PW-REGION-WHSE[3])
      ;
      set PA5REC empty; /* Clear bottom line*/
      PA5REC.XWHCD = PA0PW06.PA0PW-WHSE;
      PA5REC.PA1OANBR = PA1REC.PA1OANBR;
      PA0P116(); /* select unique bottom line*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
        PA0PW00.PA0PWSUD = PA5REC.ZZZSDT;
        ;
        PA0PWIX3 = 1; /* work index*/
        while (PA0PWIX3 <= 40)
          PA0PW04.PA0PWPBL[PA0PWIX3] = PA5REC.PA5BLQTY[PA0PWIX3]                                        + PA5REC.PA5AJQTY[PA0PWIX3];
          PA0PWIX3 = PA0PWIX3 + 1;
        end
        ;
      end
      ;
        /* PA307: ONCE THE BOTTOM LINE HAS BEEN DETERMINED THE OPEN O/AS*/
        /* THAT HAVE TYPE '9' WORK RECORDS MUST BE USED TO ADJUST THE*/
        /* BOTTOM LINE.*/
      ;
      PA0PW11.PA0PW-FROM-TO-IND = "T";
      move 0 to PA0PW11.PA0PW-BL-WITH-OAS2[1] for all;
      PA0P-400();
      ;
    end
  end
  ;
   /* ------------- end of process pa0ps15 -----------------------*/
  ;
end // end PA0PS15

// select 's' DPRODC.VPRDCU01
Function PA0PS17()
  ;
   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PA0PW00.XXXMODID = "S17"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT \"S\" DPRODC.VPRDCU01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PA0PW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Key field*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0PS17

// select 's' dproda.vfypa001
Function PA0PS18()
   /* ------------------------------------------------------------*/
   /* Select a unique row.  factory table*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4810" ("S ", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S18"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application name*/
  TA1REC.TA1PGMNM = "PA0PS18"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PA0PS18 -----------------------*/
  ;
  ;
end // end PA0PS18

// call date routine
Function PA0PS30()
   /* ------------------------------------------------------------*/
   /* call ta2 date convert  routine*/
   /* ------------------------------------------------------------*/
  ;
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2DTOPT = "GREGJUL";
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date convert*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    return;
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S30"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "TA0040 DATE CONVERT     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application name*/
  TA1REC.TA1PGMNM = "PA0PS30"; /* Process name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- end of process pa0ps30 -----------------------*/
  ;
  ;
end // end PA0PS30

// tolareance qty edit for oa
Function PA0PS31()
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* ------------- end of process PA0PS31 -----------------------*/
  ;
  ;
end // end PA0PS31

// FORMAT PARM CARD
Function PA0PS40()
   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/
  ;
  PA0PW00.PA0PWCMT = "//*"; /* indicate a comment jcl card*/
  ;
  PA0PW00.PA0PWOAJ = PA0PM001.PA1OANBR;
  TA6REC.TARJCL[TA6INDEX] = PA0PW00.PA0PWPRM; /* jcl*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  TA6REC.TARJCL[TA6INDEX] = PA0PW00.PA0PWPRR; /* JCL parm comment*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  ;
end // end PA0PS40

// SUBMIT JCL FOR FCTY SPLIT
Function PA0PS41()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* RETURN MESSAGE*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(88);
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(10); /* Indicate user cancelled*/
    PA0PM001.XXXMODID = "S41"; /* module identification*/
    PA0PM002.XXXMODID = "S41"; /* module identification*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PA0PM001.XXXMODID = "S41"; /* module identification*/
    PA0PM002.XXXMODID = "S41"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0PS41

// select set dcorp.vsumcd01
Function PA0PS51()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S51"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VSUMCD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0PS51"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end PA0PS51

// fetch dcorp.vsumcd01 row
Function PA0PS52()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for Vsumcd01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S52"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT SUM DIV ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0PS52"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end PA0PS52

// close dcorp.vsumcd01
Function PA0PS53()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  PAWREC.XXXMODID = "S53"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSUMCD01 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0PS53"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end PA0PS53

// Select fy1rec
Function PA0PS61()
   /* ------------------------------------------------------------*/
   /* Select a unique row. Dfcty.vfcty001  factory row*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S61"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* Application name*/
  TA1REC.TA1PGMNM = "PA0PS60"; /* Process name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- END OF PROCESS PA0PS61 -----------------------*/
  ;
end // end PA0PS61

// VALIDATE trade restrictions
Function PA0PS70()
   /* ------------------------------------------------------------*/
   /* check for trade restriction problems between the factory*/
   /* and the customer (destination).  a warning message is*/
   /* output.  this message can be overriden.*/
   /* ------------------------------------------------------------*/
  ;
   /* find the customer's country*/
  ;
  set PC2REC empty; /* customer record*/
  ;
  PC2REC.PC2CUXID = PA0PM002.PA0PMTCU;
  PC2REC.XGPCD = "02";
  ;
  PA0PS71(); /* select unique customer record*/
  ;
  PA0PW00.FYBDXCC = PC2REC.XCTCD; /* save to country*/
  ;
   /* find the 'from' factory country.*/
  ;
  set FY1REC empty; /* get country from factory file*/
  ;
  FY1REC.FY1FCTYC = PA0PM002.PA0PMTFA;
  FY1REC.XGPCD = "02";
  ;
  PA0PS72(); /* select unique factory record*/
  ;
  set FYBREC empty; /* trade restrictions*/
  FYBREC.FYBOXCC = FY1REC.XCTCD;
  FYBREC.XGPCD = "02"; /* footwear*/
  PA0PW00.PA0PWTRF = "N"; /* init flag*/
  ;
  PA0PS73(); /* select set dfcty.vtrdrs01*/
  ;
  PA0PS74(); /* next row*/
  ;
  while (PA0PW00.PA0PWTRF == "N")
    if (FYBREC.FYBDXCC == PA0PW00.FYBDXCC)
      PA0PW00.PA0PWTRF = "Y";
      PA0PW00.PA0PWTRW = "Y"; /* trade restriction warning*/
      set PA0PM002.PA0PMTFA cursor, bold;
      set PA0PM002.PA0PMTCU bold;
      converseLib.validationFailed(207);
      PA0PW00.XXXMODID = "S70";
    end
    PA0PS74(); /* next row*/
  end
  ;
  PA0PS75(); /* close*/
  ;
  ;
   /* ----------------End process PA0PS70  -----------------------*/
  ;
end // end PA0PS70

// select unique dprodc.vprdcu01
Function PA0PS71()
   /* ------------------------------------------------------------*/
   /* select unique customer record.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S71"; /* module identification*/
  ;
  if (sysVar.errorCode == "0000000" /* good return code*/
   && SQLCA.VAGen_SQLCODE == -911)  /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1PGMNM = "PA0PS71"; /* process name*/
  TA1REC.TA1DBASE = "DPRODC "; /* database name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
   /* ----------------End process PA0PS71  -----------------------*/
  ;
end // end PA0PS71

// select unique dfcty.vfcty001
Function PA0PS72()
   /* ------------------------------------------------------------*/
   /* select unique factory record.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S72"; /* module identification*/
  ;
  if (sysVar.errorCode == "0000000" /* good return code*/
   && SQLCA.VAGen_SQLCODE == -911)  /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1PGMNM = "PA0PS72"; /* process name*/
  TA1REC.TA1DBASE = "DFCTY  "; /* database name*/
  TA1REC.TA1TBLVU = "VFYCT001"; /* table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
   /* ----------------End process PA0PS72  -----------------------*/
  ;
end // end PA0PS72

// select set dfcty.vtrdrs01
Function PA0PS73()
   /* ------------------------------------------------------------*/
   /* select set trade restrictions.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2800" ("S2", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S73"; /* module identification*/
  ;
  if (sysVar.errorCode == "0000000" /* good return code*/
   && SQLCA.VAGen_SQLCODE == -911)  /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "SELECT SET";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1PGMNM = "PA0PS73"; /* process name*/
  TA1REC.TA1DBASE = "DFCTY  "; /* database name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBKEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
   /* ----------------End process PA0PS73  -----------------------*/
  ;
end // end PA0PS73

// next dfcty.vtrdrs01
Function PA0PS74()
   /* ------------------------------------------------------------*/
   /* select set trade restrictions.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2800" ("N2", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    PA0PW00.PA0PWTRF = "Y"; /* done looking*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000") /* good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S74"; /* module identification*/
  ;
  if (sysVar.errorCode == "0000000" /* good return code*/
   && SQLCA.VAGen_SQLCODE == -911)  /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "GET NEXT";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1PGMNM = "PA0PS74"; /* process name*/
  TA1REC.TA1DBASE = "DFCTY  "; /* database name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBKEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
   /* ----------------End process PA0PS74  -----------------------*/
  ;
end // end PA0PS74

// close dfcty.vtrdrs01
Function PA0PS75()
   /* ------------------------------------------------------------*/
   /* select set trade restrictions.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2800" ("C2", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* good system return code*/
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0PW00.XXXMODID = "S75"; /* module identification*/
  ;
  if (sysVar.errorCode == "0000000" /* good return code*/
   && SQLCA.VAGen_SQLCODE == -911)  /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "CLOSE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1PGMNM = "PA0PS75"; /* process name*/
  TA1REC.TA1DBASE = "DFCTY  "; /* database name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBKEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
   /* ----------------End process PA0PS75  -----------------------*/
  ;
end // end PA0PS75

//*** RECORD=PA0PW00 ****
// Working storage for PA0P - Item Adjustments
// ***********************
Record PA0PW00 type basicRecord
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXMODID XXXMODID ; 
  10 PA0PWBTE PA0PWBTE ; 
  10 PA0PWXBS PA0PWXBS ; 
  10 PA0PMCHS PA0PMCHS ; 
  10 PA0PWXNP PA0PWXNP ; 
  10 PA0PNMWH PA0PNMWH ; 
  10 PA0PWRFG PA0PWRFG ; 
  10 YSMSUMCD YSMSUMCD ; 
  10 PA0PWERR PA0PWERR ; 
  10 PA0PWDIV PA0PWDIV ; 
  10 PA0PWREM PA0PWREM ; 
  10 PA0PWCHG PA0PWCHG ; 
  10 PA0PWKEY PA0PWKEY ; 
  10 PA0PWCAL PA0PWCAL ; 
  10 PAWBUYDT PAWBUYDT ; 
  10 PA0PWBDT PA0PWBDT ; 
    15 PA0PWBCC PA0PWBCC ; 
    15 PA0PWBYY PA0PWBYY ; 
    15 PA0PWBMM PA0PWBMM ; 
  10 PA0PWCDT PA0PWCDT ; 
    15 PA0PWCYY PA0PWCYY ; 
    15 PA0PWCMM PA0PWCMM ; 
  10 PA0PWPDT PA0PWPDT ; 
    15 PA0PWPCC PA0PWPCC ; 
    15 PA0PWPYR PA0PWPYR ; 
    15 PA0PWPMO PA0PWPMO ; 
    15 PA0PWDMO PA0PWDMO ; 
  10 PA0PWSUD PA0PWSUD ; 
    15 PA0PWSCC PA0PWSCC ; 
    15 PA0PWSDT PA0PWSDT ; 
  10 PA1OANBR PA1OANBR ; 
  10 PA0PWSWR PA0PWSWR ; 
  10 PA0PWSWD PA0PWSWD ; 
  10 PA0PWSCD PA0PWSCD ; 
    15 PA0PWCUS PA0PWCUS ; 
    15 PA0PWSTO PA0PWSTO ; 
    15 PA0PWDEP PA0PWDEP ; 
  10 PA0PWBCL PA0PWBCL ; 
  10 PA0PWIXT PA0PWIXT ; 
  10 PA0PWPBK PA0PWPBK ; 
  10 PA0PWLLN PA0PWLLN ; 
  10 PA0PWIX1 PA0PWIX1 ; 
  10 PA0PWIX2 PA0PWIX2 ; 
  10 PA0PWIX3 PA0PWIX3 ; 
  10 PA0PWIX4 PA0PWIX4 ; 
  10 PA0PWIX5 PA0PWIX5 ; 
  10 PA0PWIX6 PA0PWIX6 ; 
  10 PA0PWIX7 PA0PWIX7 ; 
  10 PA0PWQT1 PA0PWQT1 ; 
  10 PA0PWQT2 PA0PWQT2 ; 
  10 PA0PWQT3 PA0PWQT3 ; 
  10 PA0PWQT4 PA0PWQT4 ; 
  10 PA0PWQT5 PA0PWQT5 ; 
  10 PA0PWCT1 PA0PWCT1 ; 
  10 PA0PWCT2 PA0PWCT2 ; 
  10 PA0PWCT3 PA0PWCT3 ; 
  10 PA0PWCT4 PA0PWCT4 ; 
  10 PA0PWCT5 PA0PWCT5 ; 
  10 PA0PWNVZ PA0PWNVZ ; 
  10 XX1 XX1 ; 
  10 XX2 XX2 ; 
  10 XX3 XX3 ; 
  10 XX4 XX4 ; 
  10 XX5 XX5 ; 
  10 XX6 XX6 ; 
  10 XX7 XX7 ; 
  10 XX8 XX8 ; 
  10 XX9 XX9 ; 
  10 XXA XXA ; 
  10 PA0PIDX1 PA0PIDX1 ; 
  10 PA0PIDX2 PA0PIDX2 ; 
  10 PA0PWPRR PA0PWPRR ; 
    15 PA0PWCMT PA0PWCMT ; 
    15 PA0PWPRM PA0PWPRM ; 
      20 PA0PWOAJ PA0PWOAJ ; 
      20 CAUSERID CAUSERID ; 
      20 * char(9) ; 
  10 PA0PWZDZ PA0PWZDZ ; 
    15 PA0PWZDM PA0PWZDM ; 
    15 PA0PWZDD PA0PWZDD ; 
    15 PA0PWZDY PA0PWZDY ; 
  10 PA0PWXDX PA0PWXDX ; 
    15 PA0PWXDM PA0PWXDM ; 
    15 PA0PWXDD PA0PWXDD ; 
    15 PA0PWXDY PA0PWXDY ; 
  10 PA0PWYDZ PA0PWYDZ ; 
    15 PA0PWYDM PA0PWYDM ; 
    15 PA0PWYDD PA0PWYDD ; 
    15 PA0PWYDY PA0PWYDY ; 
  10 PA0PWCU1 PA0PWCU1 ; 
  10 PA0PWCU2 PA0PWCU2 ; 
  10 PA0PW-SO-CUS-ODR-ID-1 PA0PW-SO-CUS-ODR-ID-1 ; 
  10 PA0PW-SO-NIK-ODR-ID-1 PA0PW-SO-NIK-ODR-ID-1 ; 
  10 PA0PW-SO-CUS-ODR-ID-2 PA0PW-SO-CUS-ODR-ID-2 ; 
  10 PA0PW-SO-NIK-ODR-ID-2 PA0PW-SO-NIK-ODR-ID-2 ; 
  10 PA0PWSOI PA0PWSOI ; 
  10 PA0PWPOI PA0PWPOI ; 
  10 PA0PWPOF PA0PWPOF ; 
  10 PA0PNTFD-FLAG PA0PNTFD-FLAG ; 
  10 PA0PWSOF PA0PWSOF ; 
  10 PA0PWFRF PA0PWFRF ; 
  10 FYBDXCC FYBDXCC ; 
  10 PA0PWTRF PA0PWTRF ; 
  10 PA0PWTRW PA0PWTRW ; 
  10 PA0PWTCU PA0PWTCU ; 
  10 PA0PW-SO-OP1CUOID PA0PW-SO-OP1CUOID ; 
    15 * num(8) ; // op1cuoid portion first 9 chars
    15 PA0PW-SO-OP1PARTN PA0PW-SO-OP1PARTN ; 
  10 PA0PW-PO-ID-SIX PA0PW-PO-ID-SIX ; 
  10 PA0PW-VALID-FCTY PA0PW-VALID-FCTY [4] ; 
  10 PA0PW-REQUIRE-BL PA0PW-REQUIRE-BL ; 
  10 PA0PW-BL-REQUIRED-WARNING PA0PW-BL-REQUIRED-WARNING ; 
  10 PA0PW-PROCESSING-WHSE PA0PW-PROCESSING-WHSE ; 
  10 PA0PW-READ-ONLY PA0PW-READ-ONLY ; 
  10 PA0PW-BULK-QTY-FLAG PA0PW-BULK-QTY-FLAG ; 
  10 PA0PW-CALC-RTA-DT PA0PW-CALC-RTA-DT ; 
    15 PA0PW-CALC-RTA-CC PA0PW-CALC-RTA-CC ; 
    15 PA0PW-CALC-RTA-YY PA0PW-CALC-RTA-YY ; 
    15 PA0PW-CALC-RTA-MM PA0PW-CALC-RTA-MM ; 
    15 PA0PW-CALC-RTA-DD PA0PW-CALC-RTA-DD ; 
  10 PA0PW-DUP-RTA-WARNING PA0PW-DUP-RTA-WARNING ; 
  10 PA0PW-DUP-RTA-ERROR PA0PW-DUP-RTA-ERROR ; 
  10 PA0PW-TMP-LMT PA0PW-TMP-LMT ; 
  10 PA0PW-UPC-WARNING-PRINTED PA0PW-UPC-WARNING-PRINTED ; 
  10 PA0PW-PC1111-PARM PA0PW-PC1111-PARM ; 
    15 PA0PW-PC1111-DAY PA0PW-PC1111-DAY ; 
    15 PA0PW-PC1111-F1 PA0PW-PC1111-F1 ; 
    15 PA0PW-PC1111-LOCK PA0PW-PC1111-LOCK ; 
    15 PA0PW-PC1111-F2 PA0PW-PC1111-F2 ; 
    15 PA0PW-PC1111-UPDATE PA0PW-PC1111-UPDATE ; 
    15 PA0PW-PC1111-F3 PA0PW-PC1111-F3 ; 
    15 PA0PW-PC1111-SINGLE-OA PA0PW-PC1111-SINGLE-OA ; 
  10 PA0PW-REGION-WHSE PA0PW-REGION-WHSE [3] ; 
  10 PA0PTGCT PA0PTGCT ; 
  10 PA0PW-ALLUSA-WHSE PA0PW-ALLUSA-WHSE [20] ; 
  10 PA0PW-REGION-PA1OANBR PA0PW-REGION-PA1OANBR ; 
  10 PA0PW-PROCESSING-AIR-FREIGHT PA0PW-PROCESSING-AIR-FREIGHT ; 
  10 PA0PW-WK-PC3POIDT PA0PW-WK-PC3POIDT ; 
    15 PA0PW-AR-PC3POIDT PA0PW-AR-PC3POIDT [9] ; 
  10 PA0PW-PC3POIDT PA0PW-PC3POIDT [13] ; 
  10 PA0PW-LT-PC3POIDT PA0PW-LT-PC3POIDT [13] ; 
    15 PA0PW-LT PA0PW-LT ; 
    15 PA0PW-MAP-PC3POIDT PA0PW-MAP-PC3POIDT ; 
end // end PA0PW00

//*** RECORD=PA0PW01 ****
// Display storage record for PA0P - map header data only
// ***********************
Record PA0PW01 type basicRecord
  5 YETDESC YETDESC ; 
  5 YESDESC YESDESC ; 
  5 PA0PWPID PA0PWPID ; 
    10 PA0PWPYY PA0PWPYY ; 
    10 PA0PWDS1 PA0PWDS1 ; 
    10 PA0PWPPM PA0PWPPM ; 
    10 PA0PWDS2 PA0PWDS2 ; 
    10 PA0PWDPM PA0PWDPM ; 
end // end PA0PW01

//*** RECORD=PA0PW02 ****
// ******* Order Adjustments Working OA Items  Table    *******
// 
// DB2 TABLE VIEW:      DPRODA.VPAWRK01
// 
// COPYLIB MEMBER:      DCL00810
// 
// I/O MODULE:          IO4950
// 
// KEY TO DB2 TABLE:    pa1oanbr,           OA NUMBER
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 01/11/88   RSAMUE   New record.
// 
// 10/11/91   dhales   table changes.
// 
// 06/24/98   wrobin   table changes to vpawrk.
// ***********************
Record PA0PW02 type basicRecord
  5 PA0PWGP2 PA0PWGP2 [50] ; 
    10 PA1OANBR PA1OANBR ; 
    10 PACGRPCD PACGRPCD ; 
    10 PACORDTY PACORDTY ; 
    10 PACSEVAL PACSEVAL ; 
    10 XDSCD XDSCD ; 
    10 PACADDRS PACADDRS ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PACFPONO PACFPONO ; 
    10 PACFPCIT PACFPCIT ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    10 YMTCD YMTCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC2INSEG PC2INSEG ; 
    10 XWHCD XWHCD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 PACFBQTY PACFBQTY ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PA0PWBGP PA0PWBGP ; 
    10 PA0PWJGP PA0PWJGP ; 
    10 PA0PWAGP PA0PWAGP ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 PA0PWLT1 PA0PWLT1 ; 
    10 PA0PWLT2 PA0PWLT2 ; 
    10 PA0PWLT3 PA0PWLT3 ; 
    10 PA0PWLT4 PA0PWLT4 ; 
    10 PA0PWDRT PA0PWDRT ; 
    10 PA0PWDET PA0PWDET ; 
    10 PA0PW-MSR-IND PA0PW-MSR-IND ; 
    10 PA0PW-MMM-DD-YY PA0PW-MMM-DD-YY ; 
      15 PA0PW-MMM PA0PW-MMM ; 
      15 PA0PW-MDD PA0PW-MDD ; 
      15 PA0PW-MYY PA0PW-MYY ; 
    10 PA0PW-MCC PA0PW-MCC ; 
end // end PA0PW02

//*** RECORD=PA0PW03 ****
// ******* Order Adjustments Working OA Items  Table    *******
// 
// storage area for selected sales orders,factory and po items
// adjustments
//              from section of map2
// 
// 10/11/91  dhales changed for data base change
// 
// 06/24/98  dhales changed for data base change to vpawrk
// ***********************
Record PA0PW03 type basicRecord
  5 PA0PW3GP PA0PW3GP ; 
    10 PA1OANBR PA1OANBR ; 
    10 PACGRPCD PACGRPCD ; 
    10 PACORDTY PACORDTY ; 
    10 PACSEVAL PACSEVAL ; 
    10 XDSCD XDSCD ; 
    10 PACADDRS PACADDRS ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PACFPONO PACFPONO ; 
    10 PACFPCIT PACFPCIT ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    10 YMTCD YMTCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC2INSEG PC2INSEG ; 
    10 XWHCD XWHCD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 PACFBQTY PACFBQTY ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PACWRKQT PACWRKQT [40] ; 
    10 PACADJQT PACADJQT [40] ; 
    10 PACFLADJ PACFLADJ [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 PA0PWLT1 PA0PWLT1 ; 
    10 PA0PWLT2 PA0PWLT2 ; 
    10 PA0PWLT3 PA0PWLT3 ; 
    10 PA0PWLT4 PA0PWLT4 ; 
    10 PA0PWDRT PA0PWDRT ; 
    10 PA0PWDET PA0PWDET ; 
    10 PA0PW-MSR-IND PA0PW-MSR-IND ; 
  5 PA0PWGP1 PA0PWGP1 ; 
    10 PA0PWORD PA0PWORD [41] ; 
    10 PA0PWCAJ PA0PWCAJ [41] ; 
    10 PA0PWRAJ PA0PWRAJ [41] ; 
    10 PA0PWBTS PA0PWBTS [41] ; 
    10 PA0PWPBL PA0PWPBL [41] ; 
end // end PA0PW03

//*** RECORD=PA0PW04 ****
// ******* Order Adjustments Working OA Items  Table    *******
// 
// storage area for selected po items only
// 
//              to section of map2
// 
// 
// ***********************
Record PA0PW04 type basicRecord
  5 PA0PW4GP PA0PW4GP ; 
    10 PA1OANBR PA1OANBR ; 
    10 PACGRPCD PACGRPCD ; 
    10 PACORDTY PACORDTY ; 
    10 PACSEVAL PACSEVAL ; 
    10 XDSCD XDSCD ; 
    10 PACADDRS PACADDRS ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PACFPONO PACFPONO ; 
    10 PACFPCIT PACFPCIT ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    10 YMTCD YMTCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC2INSEG PC2INSEG ; 
    10 XWHCD XWHCD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 PACFBQTY PACFBQTY ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PACWRKQT PACWRKQT [40] ; 
    10 PACADJQT PACADJQT [40] ; 
    10 PACFLADJ PACFLADJ [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 PA0PWLT1 PA0PWLT1 ; 
    10 PA0PWLT2 PA0PWLT2 ; 
    10 PA0PWLT3 PA0PWLT3 ; 
    10 PA0PWLT4 PA0PWLT4 ; 
    10 PA0PWDRT PA0PWDRT ; 
    10 PA0PWDET PA0PWDET ; 
    10 PA0PW-MSR-IND PA0PW-MSR-IND ; 
  5 PA0PWGP1 PA0PWGP1 ; 
    10 PA0PWORD PA0PWORD [41] ; 
    10 PA0PWCAJ PA0PWCAJ [41] ; 
    10 PA0PWRAJ PA0PWRAJ [41] ; 
    10 PA0PWBTS PA0PWBTS [41] ; 
    10 PA0PWPBL PA0PWPBL [41] ; 
  5 PA-AFRGT-RQT-ID PA-AFRGT-RQT-ID ; 
end // end PA0PW04

//*** RECORD=PA0PW05 ****
// ******* Order Adjustments Working OA Items  Table    *******
// 
// storage area for form section of map2
// used when row key's change
// for creating new rows
// 
// 
// ***********************
Record PA0PW05 type basicRecord
  5 FY1FCTYC FY1FCTYC ; 
  5 YMTCD YMTCD ; 
  5 OP1PARTN OP1PARTN ; 
  5 OP1CUOID OP1CUOID ; 
  5 OP1NORID OP1NORID ; 
  5 PA0PWDRT PA0PWDRT ; 
    10 PA0PWCRT PA0PWCRT ; 
    10 PA0PMFRT PA0PMFRT ; 
  5 PA0PWDET PA0PWDET ; 
    10 PA0PWCET PA0PWCET ; 
    10 PA0PMFET PA0PMFET ; 
  5 PA0PW-WHSE PA0PW-WHSE ; 
  5 PA0PW-CUST PA0PW-CUST ; 
  5 PA0PWCKY PA0PWCKY ; 
  5 PA0PW-MSR-IND PA0PW-MSR-IND ; 
end // end PA0PW05

//*** RECORD=PA0PW06 ****
// ******* Order Adjustments Working OA Items  Table    *******
// 
// storage area for 'to' section of map2
// used when row key's changes
// controls add and deletes
// 
// 
// ***********************
Record PA0PW06 type basicRecord
  5 FY1FCTYC FY1FCTYC ; 
  5 YMTCD YMTCD ; 
  5 OP1PARTN OP1PARTN ; 
  5 OP1CUOID OP1CUOID ; 
  5 OP1NORID OP1NORID ; 
  5 PA0PWDRT PA0PWDRT ; 
    10 PA0PWCRT PA0PWCRT ; 
    10 PA0PMTRT PA0PMTRT ; 
  5 PA0PWDET PA0PWDET ; 
    10 PA0PWCET PA0PWCET ; 
    10 PA0PMTET PA0PMTET ; 
  5 PA0PW-WHSE PA0PW-WHSE ; 
  5 PA0PW-CUST PA0PW-CUST ; 
    10 PA0PW-CUST-FOUR PA0PW-CUST-FOUR ; 
    10 PA0PW-CUST-ONE PA0PW-CUST-ONE ; 
  5 PA0PWCKY PA0PWCKY ; 
  5 PACFPONO PACFPONO ; 
  5 PACFPCIT PACFPCIT ; 
  5 PA-AFRGT-RQT-ID PA-AFRGT-RQT-ID ; 
  5 XCTCD XCTCD ; 
  5 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
end // end PA0PW06

//*** RECORD=PA0PW07 ****
// ******* Order Adjustments Working OA Items  Table    *******
// 
// storage area for converting dates from ccyymmdd to
// ddmmyycc
// 
// 
// ***********************
Record PA0PW07 type basicRecord
  5 PA0PWGP7 PA0PWGP7 ; 
    10 PA0PW1DT PA0PW1DT ; 
      15 PA0PW1YY PA0PW1YY ; 
      15 PA0PW1MM PA0PW1MM ; 
      15 PA0PW1DD PA0PW1DD ; 
    10 PA0PW2DT PA0PW2DT ; 
      15 PA0PW2MM PA0PW2MM ; 
      15 PA0PW2DD PA0PW2DD ; 
      15 PA0PW2YY PA0PW2YY ; 
end // end PA0PW07

//*** RECORD=PA0PW08 ****
// ******* Order Adjustments Working OA Items  Table    *******
// 
// DB2 TABLE VIEW:      DPRODA.VPAWRK02
// 
// COPYLIB MEMBER:      dpawrk02
// 
// I/O MODULE:          vpawrk02
// 
// KEY TO DB2 TABLE:    pa1oanbr,           OA NUMBER
// 
// note:               copy of pacrec for safe storage of
//                     record being created in pa0p265
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 11/04/91   dhales   New record.
// 06/23/98   wrobin   change to new view
// 05/15/00   GREDDY   added rel-pln-nbr
// ***********************
Record PA0PW08 type basicRecord
  5 PA0PWGP8 PA0PWGP8 ; 
    10 PA1OANBR PA1OANBR ; 
    10 PACGRPCD PACGRPCD ; 
    10 PACORDTY PACORDTY ; 
    10 PACSEVAL PACSEVAL ; 
    10 XDSCD XDSCD ; 
    10 PACADDRS PACADDRS ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PACFPONO PACFPONO ; 
    10 PACFPCIT PACFPCIT ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    10 YMTCD YMTCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC2INSEG PC2INSEG ; 
    10 XWHCD XWHCD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
  5 PACFBQTY PACFBQTY ; 
  5 XFRCD XFRCD ; 
  5 FB-LATE-BK-FL FB-LATE-BK-FL ; 
  5 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
  5 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
  5 PACWRKQT PACWRKQT [40] ; 
  5 PACADJQT PACADJQT [40] ; 
  5 PACFLADJ PACFLADJ [40] ; 
  5 ZZZSDT ZZZSDT ; 
  5 ZZZSTM ZZZSTM ; 
  5 ZZZCHGDT ZZZCHGDT ; 
  5 ZZZCHGTM ZZZCHGTM ; 
  5 ZZZCHGCT ZZZCHGCT ; 
end // end PA0PW08

//*** RECORD=PA0PW09 ****
// ****************** ORDER ADJUSTMENT HEADER *****************
// 
// DB2 TABLE VIEW:      dproda.vpahdr01
// 
// COPYLIB MEMBER:      dclv00780
// 
// I/O MODULE:          io4830
// 
// KEY TO DB2 TABLE:    pa_ord_adj_nbr
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 10/31/89   Gamen    New record.  Replaces az1rec.
// ***********************
Record PA0PW09 type basicRecord
  10 PA0PW-TASK PA0PW-TASK ; 
  10 PA0PW-COUNT PA0PW-COUNT ; 
  10 * char(8) ; // FILLER
end // end PA0PW09

//*** RECORD=PA0PW10 ****
// ****************** ORDER ADJUSTMENT HEADER *****************
// THIS RECORD IS USED TO PASS PARMS TO PA1050.  THIS IOMOD
// JOINS THE DPRODA.VPAHDR01 AND THE DPORDA.VBOTLN01 TABLES.
// IT RETURNS BOTTOM LINE RECORDS FOR ALL OPEN O/AS BY
// WAREHOUSE.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 11/30/92   MSMIT2   New record.
// ***********************
Record PA0PW10 type basicRecord
  10 PA0PW-TASK PA0PW-TASK ; 
  10 PA1OANBR PA1OANBR ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XWHCD XWHCD ; 
  10 PA0PW-CURRENT-DATE PA0PW-CURRENT-DATE ; 
end // end PA0PW10

//*** RECORD=PA0PW11 ****
// Working storage for PA0P - Item Adjustments
// ***********************
Record PA0PW11 type basicRecord
  10 PA0PW-USE-THIS-OA PA0PW-USE-THIS-OA ; 
  10 PA0PW-FROM-TO-IND PA0PW-FROM-TO-IND ; 
  10 PA0PW-BL-WITH-OAS1 PA0PW-BL-WITH-OAS1 [40] ; 
  10 PA0PW-BL-WITH-OAS2 PA0PW-BL-WITH-OAS2 [40] ; 
  10 PA0PW-BL-OA PA0PW-BL-OA [15] ; 
end // end PA0PW11

//*** RECORD=PA0PW12 ****
// ******* Order Adjustments Working OA Items  Table    *******
// 
// THIS IS AN EXACT COPY OF THE BOTTOM LINE RECORD
// 
// DB2 TABLE VIEW:      DPRODA.VBOTLN01
// 
// COPYLIB MEMBER:      DCL00819
// 
// I/O MODULE:          IO5090
// 
// KEY TO DB2 TABLE:    PA1OANBR,           OA NUMBER
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 02/15/93   MSMIT2   New record.
// 
// ***********************
Record PA0PW12 type basicRecord
  5 PA5GRP01 PA5GRP01 ; 
    10 PA1OANBR PA1OANBR ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PT3YYMM PT3YYMM ; 
    10 PA1BUYMO PA1BUYMO ; 
    10 XWHCD XWHCD ; 
    10 FB4RGPCT FB4RGPCT ; 
  5 PA5BLQTY PA5BLQTY [40] ; 
  5 PA5AJQTY PA5AJQTY [40] ; 
  5 ZZZSDT ZZZSDT ; 
  5 ZZZCHGDT ZZZCHGDT ; 
  5 ZZZCHGTM ZZZCHGTM ; 
  5 ZZZCHGCT ZZZCHGCT ; 
end // end PA0PW12

//*** RECORD=PA0PW13 ****
// ******* MUSICAL SIZE RUN QUANTITY COMPARE ARRAYS     *******
// 
// THIS CONTAINS ARRAYS TO STORE THE MUSICAL SIZE RUN QTYS.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 01/11/94   MSMIT2   New record.
// 
// ***********************
Record PA0PW13 type basicRecord
  5 PA0PW-OP-MSC-SZ-RTO PA0PW-OP-MSC-SZ-RTO [40] ; 
end // end PA0PW13

//*** RECORD=PA0PW14 ****
// *************  CUSTOMER CROSS REFERENCE   ******************
// 
// DB2 TABLE:           DPRODC.VPRDCU01
// 
// COPYLIB MEMBER:      DCL00580
// 
// I/O MOD:             IO3340
// 
// KEY TO DB2 TABLE:    XGP_GPC_CD        XGP_GPC_CD
//                      PC_PRDCU_ID       CU_CO_ID
//                                        CU_STOR_ID
//                                        XNX_DEPT_ID_XREF
// DATE CREATED:        03/24/89
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 03/24/89  RGILLI     INITIAL RECORD CREATION
// 02/15/90  JWOOD      RENAMED XSDCD TO PC2INSEG AS PER MCHRIS
// 11/01/93  GAMEN      Added PC-PRDCU-APAO-FL.
// 
// ************************************************************
// ***********************
Record PA0PW14 type basicRecord
  10 PA0PW-CUST-FROM-XCTCD PA0PW-CUST-FROM-XCTCD ; 
  10 PA0PW-CUST-TO-XCTCD PA0PW-CUST-TO-XCTCD ; 
  10 PA0PW-CFP-OA-FROM-NBR PA0PW-CFP-OA-FROM-NBR ; 
  10 PA0PW-CFP-OA-TO-NBR PA0PW-CFP-OA-TO-NBR ; 
  10 PA0PW-CTRY-COUNT PA0PW-CTRY-COUNT ; 
  10 PA0PW-NDX PA0PW-NDX ; 
  10 PA0PW-IND PA0PW-IND ; 
  10 FFOANBR FFOANBR ; 
  10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end PA0PW14

//*** RECORD=PAMSREC ****
// ************************************************************
// *
// * passing record for OP2970 - MUSICAL SIZE RUN FUNCTIONS
// *
// *   This record must have a total record length of **** and
// *   will require modification when WOP2970 is changed.
// *
// *   Functions: Validate the distributed quantities.
// *
// *           Send   : XGP-GPC-CD
// *                    SY-STY-NBR
// *                    SY-COLR-CD-ID
// *                    XDM-DIM-CD
// *                    OP-ORD-PART-CHAR
// *                    OP-CUST-ORD-ID
// *                    OP-NIKE-ORD-ID
// *                    OP-NEW-TOT-ITEM-QTY
// *                    OP-NEW-MSC-SZ-QTY (1-40)
// *           Receive: OP297D-RETURN-CODE
// *                    OP297D-RETURN-MSG-NBR
// *                    OP297D-RETURN-MESSAGE
// *                    OP-MSC-SZ-RTO (1-40)
// *
// *   RETURN CODE values:
// *
// *                    Function Successful           0
// *                    MSR row not found             1
// *                    Invalid Size Distribution     2
// *                    Invalid Passing Information   3
// *                    Application Error             7
// *                    DB2 Deadlock                  8
// *                    DB2 Error                     9
// *
// *
// ***********************************************************
// *
// ***********************
Record PAMSREC type basicRecord
  5 PAMS-PASS-RECORD PAMS-PASS-RECORD ; 
    10 PAMS-RETURN-CD PAMS-RETURN-CD ; 
    10 PAMS-RETURN-MSG-NBR PAMS-RETURN-MSG-NBR ; 
    10 PAMS-RETURN-MSG PAMS-RETURN-MSG ; 
    10 PAMS-REGION-CODE PAMS-REGION-CODE ; 
    10 PAMS-FUNCTION-CODE PAMS-FUNCTION-CODE ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2TONOQ OP2TONOQ ; 
    10 PAMS-SZRUN-SIZE-ARRAY PAMS-SZRUN-SIZE-ARRAY [40] ; 
      15 OP3ONOQT OP3ONOQT ; 
      15 OP-MSC-SZ-RTO OP-MSC-SZ-RTO ; 
    10 PAMS-FILLER PAMS-FILLER ; 
end // end PAMSREC

//*** RECORD=VPACFP01 ****
// *************  CUSTOMER CROSS REFERENCE   ******************
// 
// DB2 TABLE:           DPRODC.VPRDCU01
// 
// COPYLIB MEMBER:      DCL00580
// 
// I/O MOD:             IO3340
// 
// KEY TO DB2 TABLE:    XGP_GPC_CD        XGP_GPC_CD
//                      PC_PRDCU_ID       CU_CO_ID
//                                        CU_STOR_ID
//                                        XNX_DEPT_ID_XREF
// DATE CREATED:        03/24/89
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 03/24/89  RGILLI     INITIAL RECORD CREATION
// 02/15/90  JWOOD      RENAMED XSDCD TO PC2INSEG AS PER MCHRIS
// 11/01/93  GAMEN      Added PC-PRDCU-APAO-FL.
// 
// ************************************************************
// ************************
Record VPACFP01 type basicRecord
  5 VPACGRP VPACGRP ; 
    10 FFOANBR FFOANBR ; 
    10 XCTCD XCTCD ; 
    10 PA1OANBR PA1OANBR ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZ-CHNG-USER-ID ZZ-CHNG-USER-ID ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VPACFP01

//*** RECORD=VPAWRKCP ****
//  ****** Order Adjustments Working OA Items  Table    *******
// 
// DB2 TABLE VIEW:      DPRODA.VPAWRK01
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// ************************
Record VPAWRKCP type basicRecord // VAGen Info - redefined VPAWRK02
  5 VPAWRK02-COPY-GRP VPAWRK02-COPY-GRP ; 
    10 PA1OANBR PA1OANBR ; 
    10 PACGRPCD PACGRPCD ; 
    10 PACORDTY PACORDTY ; 
    10 PACSEVAL PACSEVAL ; 
    10 XDSCD XDSCD ; 
    10 PACADDRS PACADDRS ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PACFPONO PACFPONO ; 
    10 PACFPCIT PACFPCIT ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    10 YMTCD YMTCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC2INSEG PC2INSEG ; 
    10 XWHCD XWHCD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 PACFBQTY PACFBQTY ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PA0PWBGP PA0PWBGP ; 
    10 PA0PWJGP PA0PWJGP ; 
    10 PA0PWAGP PA0PWAGP ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VPAWRKCP

// Key group level
DataItem FFOANBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index  5
DataItem PA0PIDX1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index  5
DataItem PA0PIDX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK AREA FOR BAL TO SHIP
DataItem PA0PMCHS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ets dte ddmmyy
DataItem PA0PMFET num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rta dte ddmmyy
DataItem PA0PMFRT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ets mmddyy
DataItem PA0PMTET num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rta mmddyy
DataItem PA0PMTRT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// WORK AREA FOR new po qty
DataItem PA0PNMWH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FLAG
DataItem PA0PNTFD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VALID WHSE CODES FOR REGION
DataItem PA0PTGCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VALID WHSE CODES FOR REGION
DataItem PA0PW-ALLUSA-WHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-AR-PC3POIDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-BL-OA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-BL-REQUIRED-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-BL-WITH-OAS1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-BL-WITH-OAS2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-BULK-QTY-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-CALC-RTA-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-CALC-RTA-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-CALC-RTA-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-CALC-RTA-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-CALC-RTA-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key group level
DataItem PA0PW-CFP-OA-FROM-NBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key group level
DataItem PA0PW-CFP-OA-TO-NBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// IO-PASS COUNT
DataItem PA0PW-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XCT-CTRY-CD
DataItem PA0PW-CTRY-COUNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-CURRENT-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// destination
DataItem PA0PW-CUST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// destination first 4 char
DataItem PA0PW-CUST-FOUR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PA0PW-CUST-FROM-XCTCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// destination last char
DataItem PA0PW-CUST-ONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PA0PW-CUST-TO-XCTCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-DUP-RTA-ERROR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-DUP-RTA-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-FROM-TO-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XCT-CTRY-CD
DataItem PA0PW-IND num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-LT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-LT-PC3POIDT char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-MAP-PC3POIDT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CC-century
DataItem PA0PW-MCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD-day
DataItem PA0PW-MDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM-month
DataItem PA0PW-MMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Breakout for CCYYMMDD
DataItem PA0PW-MMM-DD-YY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MUSICAL SIZE RUN INDICATOR
DataItem PA0PW-MSR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YY-year
DataItem PA0PW-MYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XCT-CTRY-CD
DataItem PA0PW-NDX num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MISC SIZE RUN RATIO 1
DataItem PA0PW-OP-MSC-SZ-RTO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-PC1111-DAY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-PC1111-F1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-PC1111-F2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-PC1111-F3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-PC1111-LOCK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-PC1111-PARM char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PA903: TYPE: BIN TO CHAR
DataItem PA0PW-PC1111-SINGLE-OA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-PC1111-UPDATE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-PC3POIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last six digits of po id
DataItem PA0PW-PO-ID-SIX num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-PROCESSING-AIR-FREIGHT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-PROCESSING-WHSE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-READ-ONLY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-REGION-PA1OANBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// VALID WHSE CODES FOR REGION
DataItem PA0PW-REGION-WHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-REQUIRE-BL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// so number, cust part
DataItem PA0PW-SO-CUS-ODR-ID-1 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// so number, cust part
DataItem PA0PW-SO-CUS-ODR-ID-2 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// so number, nike part
DataItem PA0PW-SO-NIK-ODR-ID-1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// so number, nike part
DataItem PA0PW-SO-NIK-ODR-ID-2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op1cuoid portion of sales orde
DataItem PA0PW-SO-OP1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op1cuoid portion part char
DataItem PA0PW-SO-OP1PARTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// IO-PASS TASK
DataItem PA0PW-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TEMP, FOR NEGATIVE COMPARISON
DataItem PA0PW-TMP-LMT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0PW-UPC-WARNING-PRINTED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-USE-THIS-OA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid factories for the oa
DataItem PA0PW-VALID-FCTY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse code
DataItem PA0PW-WHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0PW-WK-PC3POIDT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dd
DataItem PA0PW1DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rta dte yymmdd
DataItem PA0PW1DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem PA0PW1MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// yy
DataItem PA0PW1YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dd
DataItem PA0PW2DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rta dte yymmdd
DataItem PA0PW2DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem PA0PW2MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// yy
DataItem PA0PW2YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PAC GROUP MOVE
DataItem PA0PW3GP char(609)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PAC GROUP MOVE
DataItem PA0PW4GP char(609)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy century
DataItem PA0PWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin column to dispaly map2
DataItem PA0PWBCL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy date
DataItem PA0PWBDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy month
DataItem PA0PWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOTTOM LINE ERROR SW
DataItem PA0PWBTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current bal to ship
DataItem PA0PWBTS int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Buy year
DataItem PA0PWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current screen adjustments
DataItem PA0PWCAJ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// calc submitted switch
DataItem PA0PWCAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date
DataItem PA0PWCDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ets cc
DataItem PA0PWCET num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed sw
DataItem PA0PWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// switch set in p251
DataItem PA0PWCKY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current Month
DataItem PA0PWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comment, value //*
DataItem PA0PWCMT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rta cc
DataItem PA0PWCRT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr fcty selected
DataItem PA0PWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr sales selected
DataItem PA0PWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr po items sel
DataItem PA0PWCT3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work for above
DataItem PA0PWCT4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total of adjustments hdr/line
DataItem PA0PWCT5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SALES CUSTOMER
DataItem PA0PWCU1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO CUSTOMER
DataItem PA0PWCU2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer
DataItem PA0PWCUS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current year
DataItem PA0PWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Department
DataItem PA0PWDEP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ets ccmmddyy
DataItem PA0PWDET num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compute multiples of 6
DataItem PA0PWDIV num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Delevery month
DataItem PA0PWDMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id delivery month
DataItem PA0PWDPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rta ccmmddyy
DataItem PA0PWDRT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dash '-'
DataItem PA0PWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash '-'
DataItem PA0PWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err flag
DataItem PA0PWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FLAG
DataItem PA0PWFRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work areas for map2
DataItem PA0PWGP1 char(820)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PAC GROUP MOVE
DataItem PA0PWGP2 char(617)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FCTY_CD
DataItem PA0PWGP7 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PAC rec group move
DataItem PA0PWGP8 char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index 1first line cur disp
DataItem PA0PWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 2
DataItem PA0PWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 3
DataItem PA0PWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 4
DataItem PA0PWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 5
DataItem PA0PWIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 6
DataItem PA0PWIX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 7
DataItem PA0PWIX7 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index used to submit calc jcl
DataItem PA0PWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// oa nbr display fmt
DataItem PA0PWKEY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index last line current disp
DataItem PA0PWLLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp ord line ttl
DataItem PA0PWLT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp bts line ttl
DataItem PA0PWLT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp adj line ttl
DataItem PA0PWLT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp ttl line ttl
DataItem PA0PWLT4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total number of sizes
DataItem PA0PWNVZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PA_ORD_ADJ_NBR
DataItem PA0PWOAJ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// computed order qty
DataItem PA0PWORD int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po qty backed out of b/l
DataItem PA0PWPBK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// computed bottom ln
DataItem PA0PWPBL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Production century
DataItem PA0PWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id
DataItem PA0PWPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id
DataItem PA0PWPID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Production month
DataItem PA0PWPMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FLAG
DataItem PA0PWPOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO INDEX
DataItem PA0PWPOI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id production month
DataItem PA0PWPPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl parameter group level
DataItem PA0PWPRM char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl comment group level
DataItem PA0PWPRR char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Production year
DataItem PA0PWPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id production year
DataItem PA0PWPYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp bts line ttl
DataItem PA0PWQT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp ord line ttl
DataItem PA0PWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp adj line ttl
DataItem PA0PWQT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp ttl line ttl
DataItem PA0PWQT4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total of adjustments hdr/line
DataItem PA0PWQT5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new item qty
DataItem PA0PWRAJ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// remainder
DataItem PA0PWREM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DIVIDE BY 6 ERROR FLAG
DataItem PA0PWRFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set up century
DataItem PA0PWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer/Store/Department
DataItem PA0PWSCD num(14)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set up year
DataItem PA0PWSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FLAG
DataItem PA0PWSOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SALES INDEX
DataItem PA0PWSOI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Store
DataItem PA0PWSTO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bottom line set up dt
DataItem PA0PWSUD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map display switch
DataItem PA0PWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PA0PWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save customer xref
DataItem PA0PWTCU char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trade restrictions found
DataItem PA0PWTRF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trade restrictions warning
DataItem PA0PWTRW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORK AREA FOR BAL TO SHIP
DataItem PA0PWXBS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HI DAY
DataItem PA0PWXDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HI MONTH
DataItem PA0PWXDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HI DATE
DataItem PA0PWXDX num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HI YEAR
DataItem PA0PWXDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK AREA FOR new po qty
DataItem PA0PWXNP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COMPARE DATE
DataItem PA0PWYDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COMPARE DATE
DataItem PA0PWYDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COMPARE DATE
DataItem PA0PWYDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COMPARE DATE
DataItem PA0PWYDZ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LOW DAY
DataItem PA0PWZDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LOW MONTH
DataItem PA0PWZDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LOW YEAR
DataItem PA0PWZDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LOW DATE RANGE
DataItem PA0PWZDZ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PAMS-FILLER char(2138)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return error message
DataItem PAMS-FUNCTION-CODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 01 group level
DataItem PAMS-PASS-RECORD char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return error message
DataItem PAMS-REGION-CODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem PAMS-RETURN-CD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return error message
DataItem PAMS-RETURN-MSG char(90)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return message number
DataItem PAMS-RETURN-MSG-NBR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size run array
DataItem PAMS-SZRUN-SIZE-ARRAY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VPACGRP char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PAC GROUP MOVE
DataItem VPAWRK02-COPY-GRP char(576)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index  10
DataItem XXA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

