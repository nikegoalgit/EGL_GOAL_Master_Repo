package pa0w;
import corpcom2.XX0XW01;
import corpcom3.XPPA001;
import corpcom3.XPPA020;
import corpcom4.XSPAS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XX1;
import corpcom7.XX2;
import corpcom7.XX3;
import corpcom7.XX4;
import corpcom7.XX5;
import corpcom7.XX6;
import corpcom7.XX7;
import corpcom7.XX8;
import corpcom7.XXXMODID;
import corpcom7.XXXMSGNO;
import corpcom7.XXXUSER;
import fb.common.FB9REC;
import fy.common.FY1FCTYC;
import pa.common.*;
import pc.common.PC2CUXID;
import pc.common.PC2REC;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import xx.common.*;
import xx.common.ZZZSDT;
import xx02.*;
import xx02.XDMCD;
import xx07.*;
import xx07.YESCD;
import xx07.YETCD;
import xx08.*;
import xx08.SY1STNBR;
//*** PROGRAM=PA0W ****
// This program allows the user to view, add, or delete o/as is
// a relationship.
// 
// Program entry is supported through the main menu, pfkey
// usage and by fastpathing.  Pfkey usage supports a list of
// selected order adjustment numbers for input to this
// application.
// 
// If program entry occurs without a list of order adjustment
// numbers, the cursor is placed on the order adjustment
// number; otherwise, it is placed at the first selection
// field.
// 
// pf keys transfer control to other 'PA' applications.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 07/08/91   MSMIT2   New application.
// 08/26/91   MSMIT2   Factory information left from previous
//                     record when factory information not
//                     found for current record.
// 07/12/93   MSMIT2   XSPAS01 CHANGED.
// 07/14/93   MSMIT2   PA0340 - SHOW TOTAL ADJUSTED QUANTITY
//                     INSTEAD OF O/A QUANTITY.
// 08/09/93   MSMIT2   DATABASE CHANGES.
// 02/07/95   MSMIT2   ADD CODE TO ACCESS CORRECT DPRODC.
//                     VPRDCU01.
// Y2KFIX   12/12/97  DKENNY  Y2K MODIFICATIONS MADE TO:
//                            PA0WM001.
// *********************
Program PA0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PA00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB9REC FB9REC; // record
  PA0WW00 PA0WW00; // record
  PA0WW01 PA0WW01; // record
  PA0WW02 PA0WW02; // record
  PA0WW03 PA0WW03; // record
  PA0WW04 PA0WW04; // record
  PA0WW05 PA0WW05; // record
  PA0WW06 PA0WW06; // record
  PA1REC PA1REC; // record
  PA4REC PA4REC; // record
  PA7REC PA7REC; // record
  PA9REC PA9REC; // record
  PACREC PACREC; // record
  PAWREC PAWREC; // record
  PC2REC PC2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PA0WM.PA0WM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPA001: XPPA001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    set PA0WW00 empty;
    set PA0WW01 empty;
    set PA0WW02 empty;
    set PA0WW03 empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set PA0WM001 initial; /* Initialize map1 output area*/
    ;
    XPPA020: XPPA020();
     /* -------------------- flow section of xppa020 ---------------*/
    ;
    if (converseVar.validationMsgNum == 10) /* Error obtaining current buy date*/
      converseLib.clearScreen();
       /* Clear the map*/
    end
    ;
    PA0W001: PA0W001();
     /* no flow*/
    PA0W002: PA0W002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Order Adjustment Factory Add process.*/
     /* ------------------------------------------------------------*/
    ;
    goto PA0W002;
    ;
    ;
  end // end main
end // end PA0W

// GET WORK QUANTITIES BY FACTORY
Function PA0W-10001()
   /* ------------------------------------------------------------*/
   /* GET WORK RECORDS.*/
   /* ------------------------------------------------------------*/
  ;
  set PACREC empty;
  ;
  PACREC.PA1OANBR = PA1REC.PA1OANBR;
  PACREC.PACSEVAL = "*";
  PACREC.PACORDTY = "*";
  PACREC.ZZZSDT = -1;
  PACREC.ZZZSTM = -1;
  ;
  PA0WS-21-IO4950-S1();
  ;
  PA0WS-22-IO4950-N1();
  ;
  set PA0WW06 empty;
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    if (PACREC.PACORDTY == "9")
      ;
      if (PACREC.FY1FCTYC != " ")
        ;
        PA0WW00.XX1 = 1;
        PA0WW00.PA0WW-FCTY-LOADED = "N";
        while (PA0WW00.XX1 <= 4
         && PA0WW00.PA0WW-FCTY-LOADED == "N")
          ;
          if (PACREC.FY1FCTYC == PA0WW06.FY1FCTYC[XX1])
            PA0W-10002();
          else
            if (PA0WW06.FY1FCTYC[XX1] == " ")
              PA0WW06.FY1FCTYC[XX1] = PACREC.FY1FCTYC;
              PA0W-10002();
            end
          end
          ;
          PA0WW00.XX1 = PA0WW00.XX1 + 1;
          ;
        end
      end
    end
    ;
    PA0WS-22-IO4950-N1();
    ;
  end
  ;
  PA0WS-23-IO4950-C1();
  ;
  ;
   /* ------------------ End of Process PA0W-10001 ---------------*/
  ;
end // end PA0W-10001

// GET THE FACTORY ADJ QTY
Function PA0W-10002()
   /* ------------------------------------------------------------*/
   /* CALCULATE THE TOTAL ADJUSTMENT QUANTITY.*/
   /* ------------------------------------------------------------*/
  ;
  PA0WW00.PA0WW-FCTY-LOADED = "Y";
  ;
  sysVar.arrayIndex = 1;
  ;
  while (sysVar.arrayIndex <= 40)
    ;
    PA0WW06.PA0WW-FCTY-TOT-ADJ[XX1] = PA0WW06.PA0WW-FCTY-TOT-ADJ[XX1] +                                      PACREC.PACADJQT[sysVar.arrayIndex];
    ;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
    ;
  end
  ;
   /* ------------------ End of Process PA0W-10002 ---------------*/
  ;
end // end PA0W-10002

// LAOD FACTORY ADJUSTED QUANTITY
Function PA0W-14001()
   /* ------------------------------------------------------------*/
   /* GET WORK RECORDS.*/
   /* ------------------------------------------------------------*/
  ;
  sysVar.arrayIndex = 1;
  PA0WW00.PA0WW-FCTY-LOADED = "N";
  ;
  while (sysVar.arrayIndex <= 4
   && PA0WW00.PA0WW-FCTY-LOADED == "N")
    ;
    if (PA0WW06.FY1FCTYC[sysVar.arrayIndex] == PA0WW03.FY1FCTYC[XX3])
      PA0WW00.PA0WW-FCTY-LOADED = "Y";
      PA0WW03.PA0WWADJ[XX3] = PA0WW06.PA0WW-FCTY-TOT-ADJ[sysVar.arrayIndex];
    end
    ;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
    ;
  end
  ;
   /* ------------------ End of Process PA0A-14001 ---------------*/
  ;
end // end PA0W-14001

// Special initialization
Function PA0W001()
   /* ------------------------------------------------------------*/
   /* This process will perform any special initializtion that is*/
   /* unique to an application.*/
   /* ------------------------------------------------------------*/
  ;
  PA0WW00.XXXMODID = PAWREC.XXXMODID; /* Message number*/
  ;
  PA0WW00.PA0WWAC1 = 0; /* add counter 1*/
  PA0WW00.PA0WWAC2 = 0; /* add counter 2*/
  PA0WW00.PA0WWAF1 = "N"; /* init relationship desc required*/
  PA0WW00.PA0WWRDU = "N"; /* init relationship desc updated*/
  PA0WW00.PA0WWSWR = "N"; /* init request for data switch*/
  PA0WW00.PA0WWPG1 = 1; /* init screen from page number*/
  PA0WW00.PA0WWPG2 = 1; /* init screen to page number*/
  PA0WW00.PAWBUYYM = PAWREC.PAWBUYYM; /* screen buy date*/
  ;
   /* pawrec.pawoanbr contains only one oa number*/
   /* pawrec.pa1oanbr contains up to 25 o/a numbers*/
  ;
  PA0WW00.XX4 = 1; /* init index for pa0ww00 o/as*/
  ;
  if (PAWREC.PA1OANBR[XX4] <= 0) /* only one o/a passed (maybe)*/
    if (PAWREC.PAWOANBR > 0) /* one o/a number exists*/
      PA0WW00.PA1OANBR[XX4] = PAWREC.PAWOANBR;
      PA0WW00.PA0WWSWR = "Y"; /* init request for data switch*/
      PA0WW00.PA0WWMX4 = PA0WW00.XX4;
    end
  else
    while (XX4 <= 25
     && PAWREC.PA1OANBR[XX4] > 0)
      PA0WW00.PA1OANBR[XX4] = PAWREC.PA1OANBR[XX4];
      PA0WW00.PA0WWSWR = "Y"; /* init request for data switch*/
      PA0WW00.XX4 = PA0WW00.XX4 + 1;
    end
    PA0WW00.PA0WWMX4 = PA0WW00.XX4 - 1;
  end
  ;
  PAWREC.PAWOANBR = 0;
  ;
  PA0WW00.PAWBUYDT = PAWREC.PAWBUYDT; /* Current buy date*/
  ;
  XX0XS01(); /* Obtain current date*/
  ;
end // end PA0W001

// Process o/a numbers in a list
Function PA0W002()
   /* ------------------------------------------------------------*/
  ;
   /* 1) obtain data*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  PA0W100(); /* Obtain the data to display*/
  ;
  PA0W200(); /* Format and display the map*/
  ;
  PA0W300(); /* Check attention identifier*/
  ;
  PA0W400(); /* Reset fields to normal intensity*/
  ;
  PA0W500(); /* Verify the entered data*/
  ;
  PA0W600(); /* Process valid input request*/
  ;
  ;
end // end PA0W002

// Obtain the data to display
Function PA0W100()
   /* ------------------------------------------------------------*/
     /* Select and open the cursor for the set(s) to be formatted*/
     /* Fetch and format the data in the working storage*/
     /* At end of rows, close the selected set cursor.*/
     /* If no data found, display error message and return to*/
       /* previous process.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0WW00.PA0WWSWR != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Previous errors exist*/
    return;
  end
  ;
  set PA1REC empty; /* Clear header record*/
  set PA4REC empty; /* Clear record*/
  set PA7REC empty; /* Clear record*/
  set PA0WW01 empty; /* clear work record 1*/
  set PA0WW02 empty; /* clear work record 2*/
  set PA0WW03 empty; /* clear work record 3*/
  set PA0WW04 empty; /* clear work record 4*/
  ;
  PA0WW00.XX4 = 1; /* set index for pa0ww00*/
  PA0WW00.XX2 = 1; /* set index for pa0ww02*/
  ;
  while (PA0WW00.XX4 <= 25
   && PA0WW00.XX4 <= PA0WW00.PA0WWMX4)
    PA0W110(); /* load all pawrec o/as to 02 table*/
    PA0WW00.XX4 = PA0WW00.XX4 + 1;
  end
  ;
   /* build temp storage (pa0ww03) to store info for display*/
  ;
  PA0WW00.XX3 = 1;
  PA0WW00.XX2 = 1;
  ;
  while (PA0WW00.XX2 <= PA0WW00.PA0WWMX2
   && PA0WW00.XX3 <= 100)
    if (PA0WW02.PA0WWOAP[XX2] == "X") /* already part of relationship*/
      /* next sentence;*/
    else
      PA0W120(); /* get o/a header info*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100)
        PA0WW03.PA0WWENM[XX3] = 50; /* o/a number does not exist*/
        PA0WW00.XX3 = PA0WW00.XX3 + 1; /* increment display work area*/
        PA0WW00.PA0WWMX3 = PA0WW00.PA0WWMX3 + 1; /* increment max size*/
      else
        if (SQLCA.VAGen_SQLCODE == 0)
          PA0W130(); /* format o/a header info*/
          PA0W-10001(); /* FORMAT FACTORY TOTAL*/
          PA0W140(); /* load factory info*/
        end
      end
    end
    ;
    PA0WW00.XX2 = PA0WW00.XX2 + 1;
  end
  ;
   /* -- get relationship description for o/a -----*/
  ;
  PA0WS09();
  ;
  ;
   /* ------------------ End of Process PA0w100 ------------------*/
  ;
end // end PA0W100

// determine if o/a part of rel
Function PA0W110()
   /* ------------------------------------------------------------*/
     /* Select and open the cursor for the set(s) to be formatted*/
     /* Fetch and format the data in the working storage*/
     /* At end of rows, close the selected set cursor.*/
     /* If no data found, display error message and return to*/
       /* previous process.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
  ;
   /* select unique vpaxrf01 related o/a row*/
  ;
  PA7REC.PA7PRNBR = PA0WW00.PA1OANBR[XX4]; /* set up previous o/a #*/
  ;
  PA0WS13();
                                   /* 'sb' select using o/a as previous o/a*/
  ;
  if (SQLCA.VAGen_SQLCODE == 00) /* row found*/
    if (PA0WW00.PA0WWRF1 == "Y") /* relationship found*/
      if (PA0WW00.PA0WWPOA == PA7REC.PA1OANBR) /* same relationship*/
         /* mark so that it is not moved to pa0ww03.  this is*/
         /* because it is already with existing relationship*/
        PA0WW02.PA0WWOAP[XX2] = "X";
        PA0WW02.PA7KEY[XX2] = PA7REC.PA7KEY;
        PA0WW02.PA0WWREL[XX2] = "Y";
        PA0WW00.XX2 = PA0WW00.XX2 + 1;
        PA0WW00.PA0WWMX2 = PA0WW00.PA0WWMX2 + 1;
      else /* ; different relationship*/
        PA0WW02.PA0WWERR[XX2] = 203; /* only 1 relationship allowed*/
        PA0WW00.XXXMODID = "110";
        PA0WW02.PA7KEY[XX2] = PA7REC.PA7KEY;
        PA0WW02.PA0WWREL[XX2] = "Y";
        PA0WW00.PA0WWMX2 = PA0WW00.PA0WWMX2 + 1;
        PA0WW00.XX2 = PA0WW00.XX2 + 1;
      end
    else
      PA0WW00.PA0WWRF1 = "Y"; /* relationship found*/
      PA0WW00.PA0WWPOA = PA7REC.PA1OANBR; /* save primary o/a number*/
      PA0WW01.PA7RPTFT = PA7REC.PA7RPTFT; /* report to factory flag*/
      PA0W111(); /* load related o/a list in pa0ww02*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PA0WW02.PA1OANBR[XX2] = PA0WW00.PA1OANBR[XX4];
      if (PA0WW00.PA0WWPOA == 0)
        PA0WW00.PA0WWPOA = PA0WW00.PA1OANBR[XX4];
      end
      PA0WW02.PA0WWOAP[XX2] = "Y"; /* set o/a passed flag to yes*/
      PA0WW02.PA0WWREL[XX2] = "N"; /* set o/a passed flag to yes*/
      PA0WW00.XX2 = PA0WW00.XX2 + 1;
      PA0WW00.PA0WWMX2 = PA0WW00.PA0WWMX2 + 1;
    end
  end
  ;
  ;
   /* ------------------ End of Process PA0w110 ------------------*/
  ;
end // end PA0W110

// load related o/as in pa0ww02
Function PA0W111()
  ;
   /* -------------------------------------------------*/
   /* select set dproda.vpaxrf01 to obtain the*/
   /* related o/a numbers*/
   /* -------------------------------------------------*/
  ;
  PA0WS01(); /* select 's2' dproda.vpaxrf01*/
  ;
  PA0WS02(); /* fetch  'n2' dproda.vpaxrf01*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0 /* load up to 100 related o/a's*/
   && PA0WW00.XX2 <= 50)
    ;
    /* --------------------------------------------------*/
     /* load the related o/a information*/
    /* --------------------------------------------------*/
    ;
    PA0WW02.PA7KEY[XX2] = PA7REC.PA7KEY;
    PA0WW02.PA0WWREL[XX2] = "Y";
    ;
    PA0WW00.XX2 = PA0WW00.XX2 + 1;
    ;
    PA0WW00.PA0WWMX2 = PA0WW00.PA0WWMX2 + 1;
    ;
    PA0WS02(); /* fetch  'n1' dproda.vpaxrf01*/
    ;
  end
  ;
  PA0WS03(); /* close  'c1' dproda.vpaxrf01*/
  ;
  ;
   /* ------------------ end of process pa0w111 ------------------*/
  ;
end // end PA0W111

// obtain header info
Function PA0W120()
   /* ------------------------------------------------------------*/
   /* obtain the o/a header an format the header data*/
   /* ------------------------------------------------------------*/
  ;
  set PA1REC empty; /* Clear header record*/
  ;
  if (PA0WW02.PA0WWOAP[XX2] == "Y") /* o/a was passed but not related*/
    PA0WW03.PA1OANBR[XX3] = PA0WW02.PA1OANBR[XX2];
    PA1REC.PA1OANBR = PA0WW02.PA1OANBR[XX2];
  else
    PA0WW03.PA1OANBR[XX3] = PA0WW02.PA7PRNBR[XX2];
    PA1REC.PA1OANBR = PA0WW02.PA7PRNBR[XX2];
  end
  ;
  PA0WW03.PA0WWENM[XX3] = PA0WW02.PA0WWERR[XX2]; /* pass error number*/
  ;
   /* read the header record to get info to display*/
  ;
  PA0WS04(); /* get header info*/
  ;
  ;
   /* ------------------ End of Process PA0w120 ------------------*/
  ;
end // end PA0W120

// format header info
Function PA0W130()
   /* ------------------------------------------------------------*/
   /* format the o/a header an format the header data*/
   /* ------------------------------------------------------------*/
  ;
  PA0WW03.PA0WWSEL[XX3] = " "; /* set select field eq ' '*/
  PA0WW03.PA0WWREL[XX3] = PA0WW02.PA0WWREL[XX2];
  PA0WW03.SY1STNBR[XX3] = PA1REC.SY1STNBR; /* style number*/
  PA0WW03.SY2CLRID[XX3] = PA1REC.SY2CLRID; /* Color code*/
  PA0WW03.XDMCD[XX3] = PA1REC.XDMCD; /* Dimension*/
  PA0WW03.YETCD[XX3] = PA1REC.YETCD; /* o/a type code*/
  PA0WW03.YESCD[XX3] = PA1REC.YESCD; /* o/a status code*/
  PA0WW03.XXXUSER[XX3] = PA1REC.XXXPGUID; /* entered by id*/
  ;
  if (PA1REC.PA1HLDFL == "Y")
    PA0WW03.PA0WWHLD[XX3] = "HOLD";
  else
    PA0WW03.PA0WWHLD[XX3] = "    ";
  end
  ;
  ;
   /* given the customer info off of the header record, determine*/
   /* the customer xref code.*/
  ;
  if (PA1REC.KUCCOID > 0) /* Customer entered*/
    set PC2REC empty; /* Clear the database record*/
    PC2REC.XGPCD = "02"; /* Footwer gpc code*/
    PC2REC.KUCCOID = PA1REC.KUCCOID; /* Customer*/
    PC2REC.KUMSTRID = PA1REC.KUMSTRID; /* Store*/
    PC2REC.XNXCD = PA1REC.XNXCD; /* Department*/
    ;
    if (PA1REC.PA1OANBR > 199999
     && PA1REC.PA1OANBR < 300000)
      PC2REC.PC-PRDCU-APAO-FL = "E"; /* EUROPEAN CUSTOMER ONLY*/
    else
      PC2REC.PC-PRDCU-APAO-FL = " "; /* MVSPROD CUSTOMER*/
    end
    ;
    PA0WS05(); /* Select alternate pc2rec*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PA0WW03.PC2CUXID[XX3] = PC2REC.PC2CUXID; /* Customer xref*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PA0WW00.XXXMSGNO = 23; /* Message number*/
        PA0WW00.XXXMODID = "130"; /* Module id*/
      end
    end
  end
  ;
  ;
   /* ------------------ End of Process PA0w130 ------------------*/
  ;
end // end PA0W130

// obtain/format factory info
Function PA0W140()
   /* ------------------------------------------------------------*/
   /* obtain the factory o/a rows*/
   /* ------------------------------------------------------------*/
  ;
  PA4REC.PA1OANBR = PA0WW03.PA1OANBR[XX3]; /* O/A number*/
  PA4REC.YESCD = "*"; /* Status*/
  PA0WW00.PA0WWFFD = "N"; /* init factory found flag*/
  ;
  PA0WS06(); /* Select set pa4rec*/
  ;
  PA0WS07(); /* Fetch pa4rec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PA0WW00.PA0WWFFD = "Y"; /* factory record found*/
  end
  ;
  PA0WW00.PA0WWSW1 = "N";
  ;
  while (PA0WW00.PA0WWSW1 == "N"           
   && converseVar.validationMsgNum == 0 /* or until a problem was found*/
   && PA0WW00.PA0WWFFD == "Y") /* and factory record found*/
    ;
    /* format po id*/
    ;
    PA0WW00.PA0WWPO = PA4REC.PC3POIDT;
    PA0WW03.PA0WWPOY[XX3] = PA0WW00.PA0WWPYY;
    PA0WW03.PA0WWPOM[XX3] = PA0WW00.PA0WWPMM;
    PA0WW03.PA0WWPOD[XX3] = PA0WW00.PA0WWPDD;
    ;
    PA0WW03.FY1FCTYC[XX3] = PA4REC.FY1FCTYC;
    ;
    PA0W-14001(); /* FIND FACTORY ADJUSTED QUANTITY*/
    ;
    PA0WW00.XX3 = PA0WW00.XX3 + 1;
    ;
    PA0WS07(); /* Fetch pa4rec*/
    ;
  end
  ;
  if (PA0WW00.PA0WWFFD == "N") /* if factory record found*/
    PA0WW03.PA0WWADJ[XX3] = PA1REC.PA1RQQTY; /* show o/a total qty*/
    PA0WW00.XX3 = PA0WW00.XX3 + 1; /* increment counter*/
  end
  ;
  PA0WW00.PA0WWMX3 = PA0WW00.XX3 - 1;
  ;
  PA0WS08(); /* Close pa4rec*/
  ;
  ;
  ;
   /* ------------------ End of Process PA0w140 ------------------*/
  ;
end // end PA0W140

// Format and display the map
Function PA0W200()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors*/
    PA0W210(); /* Format the map*/
  else
    PA0WW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  ;
  if (PAWREC.XXXMSGNO != 0)
    ;
    PA0WM001.XXXMODID = "200"; /* Module id*/
    if (PAWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PAWREC.XXXMSGNO);
    end /* Message number*/
    PAWREC.XXXMSGNO = 0;
    set PA0WM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  if (PA0WW00.XXXMSGNO != 0)
    ;
    PA0WM001.XXXMODID = PA0WW00.XXXMODID; /* Module id*/
    if (PA0WW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PA0WW00.XXXMSGNO);
    end /* Message number*/
    set PA0WM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse PA0WM001 ;
  ;
  PA0WW00.XXXMODID = " "; /* Module id*/
  PA0WW00.XXXMSGNO = 0; /* Reset message number*/
  ;
  COMMAREA.CATOAP = PA0WM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PA0WM001.CAITEM; /* Application data*/
  ;
   /* ------------------ end of process pa0w200 ------------------*/
  ;
end // end PA0W200

// Format the data on the map
Function PA0W210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set PA0WM001 initial; /* M001 input/output area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the header portion of the map*/
   /* ------------------------------------------------------------*/
  ;
  PA0WM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current system date*/
  PA0WM001.PAWBUYYM = PA0WW00.PAWBUYYM; /* Current buy date yymm*/
  ;
   /* figure out page information*/
  ;
  if (PA0WW00.PA0WWMX3 == 0)
    PA0WW00.PA0WWPG2 = 1;
  else
     /* this equation is a little strange.  however, it works.*/
     /* 11 is the page length - 1.  for example:  if pa0wwmx3 is*/
     /* 12 (one page of information), this equation is*/
     /* 12 + 11 = 23 / 12 = 1.916 truncated = 1.  if pa0wwmx3 is*/
     /* 13 (two pages of information), this equation is*/
     /* 13 + 11 = 24 / 12 = 2 truncated = 2.*/
    PA0WW00.PA0WWPG2 = PA0WW00.PA0WWMX3 + 11;
    PA0WW00.PA0WWPG2 = PA0WW00.PA0WWPG2 / 12;
    PA0WW00.PA0WWPG2 = PA0WW00.PA0WWPG2 + 1; /* users can add 1 page of o/as*/
  end
  ;
  PA0WM001.XXXTSPAG = PA0WW00.PA0WWPG1; /* from page number*/
  PA0WM001.TA5TSQIX = PA0WW00.PA0WWPG2; /* to page number*/
  ;
  PA0WM001.PA9COM[1] = PA0WW01.PA9COM[1]; /* relationship desc*/
  PA0WM001.PA9COM[2] = PA0WW01.PA9COM[2]; /* relationship desc*/
  PA0WM001.PA9COM[3] = PA0WW01.PA9COM[3]; /* relationship desc*/
  ;
  PA0WM001.PA7RPTFT = PA0WW01.PA7RPTFT; /* report to factory*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the body of the map*/
   /* ------------------------------------------------------------*/
  ;
  PA0WW00.XX1 = 1; /* index used here for screen fields*/
  ;
   /* setup index for working storage display fields*/
  ;
   /* this equation also a little strange.  however, it works.*/
   /* 1.  set xx3 = to current page times 12 (page length).*/
       /* example:  xx3 = 2 * 12 = 24*/
   /* 2.  now determine the first position on this page by*/
       /* subtracting 11 (11 is the page length - 1).*/
       /* example:  xx3 = 24 - 11 = 13.*/
  PA0WW00.XX3 = PA0WW00.PA0WWPG1 * 12;
  PA0WW00.XX3 = PA0WW00.XX3 - 11;
  ;
   /* save the xx3 index value with the pointer to to top of the*/
   /* page.  this number is used in pa0w610.*/
  ;
  PA0WW00.PA0WWSTL = PA0WW00.XX3;
  ;
  set PA0WM001.PA0WMSEL[1] cursor;
  ;
  while (PA0WW00.XX1 <= 12
   && PA0WW00.XX3 <= 100
   && PA0WW00.XX3 <= PA0WW00.PA0WWMX3)
    PA0WM001.PA1OANBR[XX1] = PA0WW03.PA1OANBR[XX3];
    ;
     /* check to see if more than one relationship error*/
     /* occurred.*/
    ;
    if (PA0WW03.PA0WWENM[XX3] == 203) /* check error number*/
      if (PA0WW03.PA0WWENM[XX3] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PA0WW03.PA0WWENM[XX3]);
      end
      set PA0WM001.PA0WMSEL[XX1] cursor, bold;
      set PA0WM001.PA1OANBR[XX1] skip, bold;
      set PA0WM001.PA0WMREL[XX1] bold;
    end
    ;
     /* determine if the o/a line has an error*/
    ;
    if (PA0WW03.PA0WWENM[XX3] == 50) /* check error number*/
      if (PA0WW03.PA0WWENM[XX3] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PA0WW03.PA0WWENM[XX3]);
      end
      set PA0WM001.PA1OANBR[XX1] cursor, bold;
    else
      PA0WM001.PA0WMSEL[XX1] = PA0WW03.PA0WWSEL[XX3];
      PA0WM001.PA0WMPOY[XX1] = PA0WW03.PA0WWPOY[XX3];
      PA0WM001.PA0WMPOM[XX1] = PA0WW03.PA0WWPOM[XX3];
      PA0WM001.PA0WMPOD[XX1] = PA0WW03.PA0WWPOD[XX3];
      PA0WM001.FY1FCTYC[XX1] = PA0WW03.FY1FCTYC[XX3];
      PA0WM001.SY1STNBR[XX1] = PA0WW03.SY1STNBR[XX3];
      PA0WM001.SY2CLRID[XX1] = PA0WW03.SY2CLRID[XX3];
      PA0WM001.XDMCD[XX1] = PA0WW03.XDMCD[XX3];
      PA0WM001.YETCD[XX1] = PA0WW03.YETCD[XX3];
      PA0WM001.YESCD[XX1] = PA0WW03.YESCD[XX3];
      PA0WM001.PA0WMHLD[XX1] = PA0WW03.PA0WWHLD[XX3];
      PA0WM001.XXXUSER[XX1] = PA0WW03.XXXUSER[XX3];
      PA0WM001.PC2CUXID[XX1] = PA0WW03.PC2CUXID[XX3];
      PA0WM001.PA0WMADJ[XX1] = PA0WW03.PA0WWADJ[XX3];
      if (PA0WW03.PA0WWENM[XX3] != 203) /* check error number*/
        set PA0WM001.PA1OANBR[XX1] skip;
      end
    end
    ;
     /* this is used to see if the display line is another*/
     /* factory line to display rather than another o/a line.*/
     /* the index for pa0ww02 must not be incremented in*/
     /* this case.*/
    ;
    if (PA0WW03.PA1OANBR[XX3] == 0)
      PA0WM001.PA0WMPOY[XX1] = "  ";
      PA0WM001.PA0WMPOM[XX1] = "  ";
      PA0WM001.PA0WMPOD[XX1] = "  ";
      set PA0WM001.PA0WMSEL[XX1] skip;
      PA0WM001.PA0WMREL[XX1] = " ";
    else
      ;
       /* this is used to determine the related o/a flag on*/
       /* the screen.  to do this, it must look at the pa0ww02*/
       /* o/a passed flag.*/
      ;
      if (PA0WW03.PA0WWREL[XX3] != " ")
        PA0WM001.PA0WMREL[XX1] = PA0WW03.PA0WWREL[XX3];
      end
    end
    ;
    PA0WW00.XX1 = PA0WW00.XX1 + 1;
    PA0WW00.XX3 = PA0WW00.XX3 + 1;
    ;
  end
   /* ------------------ End of Process PA0w210 ------------------*/
  ;
end // end PA0W210

// Check attention identifier
Function PA0W300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* clear map fields*/
    PA0WW00.PA0WWSEL = " "; /* clear out selection*/
    PA0WW00.XX8 = 1;
    while (PA0WW00.XX8 <= PA0WW00.PA0WWMX3) /* clear out selection fields*/
      PA0WW03.PA0WWSEL[XX8] = " ";
      PA0WW00.XX8 = PA0WW00.XX8 + 1;
    end
    PA0WW00.PA0WWSWR = "N"; /* request data*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (PA0WM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = PA0WM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PA0WM001.CAITEM; /* Application data*/
      XSPAS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set PA0WM001.CATOAP cursor, modified, bold; /* Highlight*/
    PA0WW00.XXXMODID = "300"; /* Module id*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf5)
      COMMAREA.CATOAP = "FY0M";
    end
    ;
    if (converseVar.eventKey is pf3) /* pf3 pressed*/
    else
      if (converseVar.eventKey is pf1) /* pf1 pressed*/
        COMMAREA.CAITEM = "PA0WM001"; /* move in map name for help*/
      else
        COMMAREA.CAITEM = " "; /* clear item field*/
      end
    end
    ;
    XSPAS01(); /* Exit to another application*/
    PA0WW00.XXXMODID = "300"; /* Module id*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf12) /* reset screen*/
    PA0WM001.CATOAP = "PA0W";
    PA0WW00.PA0WWSWR = "N"; /* Request for no data*/
    set PA0WM001 initial;
    set PAWREC empty;
    PA0WS20();
    XSPAS01();
    exit stack;
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not PF7 up*/
   && converseVar.eventKey not pf8   /* and not PF8 down*/
   && converseVar.eventKey not pf9   /* and not PF9 accept*/
   && converseVar.eventKey not pf14  /* and not PF14 pa0n*/
   && converseVar.eventKey not pf18  /* and not PF18 pa0q*/
   && converseVar.eventKey not pf19  /* and not PF19 pa0z*/
   && converseVar.eventKey not pf21) /* and not PF21 pa0e*/
    PA0WW00.XXXMODID = "300"; /* Module id*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf14) /* reset screen*/
    PA0WM001.CATOAP = "PA0N";
    PA0WS20();
    XSPAS01();
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf18) /* reset screen*/
    PA0WM001.CATOAP = "PA0Q";
    PA0WS20();
    XSPAS01();
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf19) /* reset screen*/
    PA0WM001.CATOAP = "PA0Z";
    PA0WS20();
    XSPAS01();
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf21) /* reset screen*/
    PA0WM001.CATOAP = "PA0E";
    PA0WS20();
    XSPAS01();
    exit stack;
  end
  ;
   /* ------------------ End of Process PA0w300 ------------------*/
  ;
end // end PA0W300

// Reset highlighted fields
Function PA0W400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set PA0WM001.PA9COM[1] initialAttributes; /* relationship description*/
  set PA0WM001.PA9COM[2] initialAttributes; /* relationship description*/
  set PA0WM001.PA9COM[3] initialAttributes; /* relationship description*/
  set PA0WM001.PA7RPTFT initialAttributes; /* assign to factory flag*/
  ;
  PA0WW00.XX5 = 1;
  ;
  while (XX5 <= 12)
    set PA0WM001.PA0WMSEL[XX5] normal;
    set PA0WM001.PA1OANBR[XX5] normal;
    set PA0WM001.PA0WMREL[XX5] normal;
    PA0WW00.XX5 = PA0WW00.XX5 + 1;
  end
  ;
  set PA0WM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PA0WM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
   /* ------------------ end of process pa0w400 ------------------*/
  ;
end // end PA0W400

// Verify the entered data
Function PA0W500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (PA0WM001.CAITEM > " ") /* Application data was entered*/
    set PA0WM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PA0WW00.XXXMODID = "500"; /* Module identification*/
    exit stack; /* Flow to converse map*/
    ;
  end
  ;
  PA0WW00.XX1 = 1;
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    PA0W520(); /* validate modifiable data*/
    PA0W530(); /* check for error*/
    PA0W510(); /* validate pf7,pf8*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* if data loaded, verify modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf9) /* accept update*/
    PA0W520(); /* validate modifiable data*/
    PA0W530(); /* check for add error*/
  end
  ;
  if (converseVar.eventKey is enter)
    PA0W520(); /* validate modifiable data*/
    PA0W530(); /* validate modifiable data*/
  end
   /* ------------------------------------------------------------*/
   /* Verify the map data with the display storage data.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* error*/
    return; /* return display error*/
  end
  ;
   /* ------------------------------------------------------------*/
    /* validate relationship description*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0WW00.PA0WWSEL != "S"
   && PA0WM001.PA9COM[1] == " "
   && PA0WM001.PA9COM[2] == " "
   && PA0WM001.PA9COM[3] == " "
   && PA0WW00.PA0WWPOA != 0)
    converseLib.validationFailed(202); /* relationship desc required*/
    PA0WW00.XXXMODID = 500;
    set PA0WM001.PA9COM[1] cursor, bold;
    set PA0WM001.PA9COM[2] bold;
    set PA0WM001.PA9COM[3] bold;
  else
    if (PA0WM001.PA9COM[1] != PA0WW01.PA9COM[1]
     || PA0WM001.PA9COM[2] != PA0WW01.PA9COM[2]
     || PA0WM001.PA9COM[3] != PA0WW01.PA9COM[3])
      if (PA0WW00.PA0WWPOA == 0) /* there is no relationship*/
        converseLib.validationFailed(204);
        PA0WW00.XXXMODID = "500";
        set PA0WM001.PA9COM[1] cursor, bold;
        set PA0WM001.PA9COM[2] bold;
        set PA0WM001.PA9COM[3] bold;
      else
        PA0WW01.PA9COM[1] = PA0WM001.PA9COM[1];
        PA0WW01.PA9COM[2] = PA0WM001.PA9COM[2];
        PA0WW01.PA9COM[3] = PA0WM001.PA9COM[3];
      end
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
    /* validate report to factory flag*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0WW00.PA0WWSEL != "S"
   && PA0WM001.PA7RPTFT == " ")
    PA0WW01.PA7RPTFT = "Y"; /* default report to factory flag*/
    PA0WM001.PA7RPTFT = "Y"; /* default report to factory flag*/
  else
    if (PA0WM001.PA7RPTFT != PA0WW01.PA7RPTFT)
      if (PA0WW00.PA0WWPOA == 0) /* there is no relationship*/
        converseLib.validationFailed(204);
        PA0WW00.XXXMODID = "500";
        set PA0WM001.PA7RPTFT cursor, bold;
      else
        PA0WW01.PA7RPTFT = PA0WM001.PA7RPTFT;
        PA0WW00.PA0WWRFU = "Y"; /* report to factory updated*/
      end
      if (PA0WM001.PA7RPTFT != "N"
       && PA0WM001.PA7RPTFT != "Y")
        converseLib.validationFailed(198); /* flag must be y or n*/
        PA0WW00.XXXMODID = "500";
        set PA0WM001.PA7RPTFT cursor, bold;
        exit stack;
      end
    end
  end
  ;
  ;
  ;
  ;
   /* ---------------- End of Process PA0w500 --------------------*/
  ;
end // end PA0W500

// Verify scroll request
Function PA0W510()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  if (converseVar.eventKey is pf7) /* Scroll back request*/
    if (PA0WW00.PA0WWPG1 <= 1) /* no previous pages*/
      PA0WW00.XXXMODID = "510"; /* Process name*/
      converseLib.validationFailed(2); /* No previous page to display*/
    else
      PA0WW00.PA0WWPG1 = PA0WW00.PA0WWPG1 - 1;
      PA0WW00.PA0WWSWR = "N"; /* set request for data = no*/
    end
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (PA0WW00.PA0WWPG1 >= PA0WW00.PA0WWPG2) /* no more pages*/
      PA0WW00.XXXMODID = "510"; /* Process name*/
      converseLib.validationFailed(3); /* No more pages to display*/
    else
      PA0WW00.PA0WWPG1 = PA0WW00.PA0WWPG1 + 1;
      PA0WW00.PA0WWSWR = "N"; /* set request for data = no*/
    end
    exit stack;
  end
  ;
   /* ------------- End of process pa0w510 -----------------------*/
  ;
end // end PA0W510

// validate selection
Function PA0W520()
   /* ------------------------------------------------------------*/
   /* verify selection field.  the first step is to check to see*/
   /* if the user has changed the selection.  this requires*/
   /* checking the map selection fields against pa0ww03.  next,*/
   /* if more than one type of action was requested.  only one is*/
   /* allowed.  the reason this is done up front is because*/
   /* selection type 's' and 'x' clear out records that are*/
   /* needed.*/
   /* ------------------------------------------------------------*/
  ;
  sysVar.arrayIndex = 12;
  PA0WW00.XX5 = PA0WW00.PA0WWSTL; /* move in saved top line*/
  ;
   /* since the screen is processed from the bottom up, the last*/
   /* line in pa0ww03 must be found.*/
  ;
  PA0WW00.XX5 = PA0WW00.XX5 + 11;
  ;
  while (sysVar.arrayIndex >= 1)
    if (PA0WM001.PA1OANBR[sysVar.arrayIndex] != 0)
      set PA0WM001.PA1OANBR[sysVar.arrayIndex] skip;
      set PA0WM001.PA0WMREL[sysVar.arrayIndex] skip;
    end
    if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] == " ")
                                   /* selection has been blanked out*/
      if (PA0WW03.PA0WWSEL[XX5] != " ")
        PA0WW03.PA0WWSEL[XX5] = PA0WM001.PA0WMSEL[sysVar.arrayIndex];
      end
    else
       /* move most current selection into working storage*/
      if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] != PA0WW03.PA0WWSEL[XX5])
         /* if saved selection is the same as the old selection*/
         /* on pa0ww03, save the new selection.*/
        if (PA0WW00.PA0WWSEL == PA0WW03.PA0WWSEL[XX5])
          PA0WW00.PA0WWSEL = PA0WM001.PA0WMSEL[sysVar.arrayIndex];
        end
        PA0WW03.PA0WWSEL[XX5] = PA0WM001.PA0WMSEL[sysVar.arrayIndex];
      end
      ;
      if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] != "A"
       && PA0WM001.PA0WMSEL[sysVar.arrayIndex] != "D"
       && PA0WM001.PA0WMSEL[sysVar.arrayIndex] != "S"
       && PA0WM001.PA0WMSEL[sysVar.arrayIndex] != "X"
       && PA0WM001.PA0WMSEL[sysVar.arrayIndex] != " ")
        set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
        converseLib.validationFailed(195); /* selection code is invalid*/
      else
        ;
         /* highlight all of them.  if there is no error, they*/
         /* are set back to normal.*/
        ;
        set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
        ;
         /* if no selection has been processed yet, save this*/
         /* selection.*/
        ;
        if (PA0WW00.PA0WWSEL == " ")
          if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] != " ")
            PA0WW00.PA0WWSEL = PA0WM001.PA0WMSEL[sysVar.arrayIndex];
          end
        else
          if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] != PA0WW00.PA0WWSEL)
            PA0WW00.PA0WWSEL = " "; /* init selection*/
            converseLib.validationFailed(201); /* only one type of selection*/
            PA0WW00.XXXMODID = "520";
          end
        end
      end
    end
    ;
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
    PA0WW00.XX5 = PA0WW00.XX5 - 1;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* process the selection field verification*/
   /* ------------------------------------------------------------*/
  ;
  sysVar.arrayIndex = 12;
  ;
  PA0WW00.PA0WWSOA = PA0WW00.PA0WWPOA; /* save primary o/a number*/
  PA0WW00.PA0WWPOA = 0; /* init primary o/a number*/
  PA0WW00.PA0WWSF1 = "N"; /* init selection flag*/
  PA0WW00.PA0WWXF2 = "N"; /* remove o/a from screen*/
  ;
   /* if no selection made (or all selections have been spaced*/
   /* out), reset selection fields on pa0ww003 record.*/
  ;
  if (PA0WW00.PA0WWSEL == " ") /* no selection made*/
    PA0WW00.XX6 = 1; /* init index*/
    while (PA0WW00.XX6 <= 100
     && PA0WW00.XX6 <= PA0WW00.PA0WWMX3)
      PA0WW03.PA0WWSEL[XX6] = " ";
      PA0WW00.XX6 = PA0WW00.XX6 + 1;
    end
  else
    while (sysVar.arrayIndex >= 1)
      if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] != " ")
        ;
         /* highlight all of them.  if there is no error, they*/
         /* are set back to normal.*/
        ;
        /* ------------------------------------------------------------*/
         /* selection = 'a': add to relationship*/
        /* ------------------------------------------------------------*/
        if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] == "A") /* add function requested*/
          set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
          PA0W521(); /* validate add information*/
          ;
        else
          ;
          /* ------------------------------------------------------------*/
           /* selection = 'd': delete from relationship*/
          /* ------------------------------------------------------------*/
          if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] == "D") /* delete function requested*/
            set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
            PA0W524(); /* validate delete information*/
          else
            ;
            ;
            /* ------------------------------------------------------------*/
             /* selection = 's': display relationship information*/
            ;
            /* ------------------------------------------------------------*/
            if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] == "S") /* display relationship*/
              set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
              if (PA0WM001.PA1OANBR[sysVar.arrayIndex] == 0)
                converseLib.validationFailed(50); /* o/a does not exist*/
                set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
                set PA0WM001.PA1OANBR[sysVar.arrayIndex] bold;
                PA0WW00.XXXMODID = "520";
              else
                set PA0WW03 empty; /* clear screen display*/
                PA0WW00.PA0WWRF1 = "N"; /* reset relationship flag*/
                PA0W525(); /* display relationship*/
              end
            else
              ;
              /* ---------------------------------------------*/
               /* selection = 'x': remove o/a info from screen*/
              /* ---------------------------------------------*/
              if (PA0WM001.PA0WMSEL[sysVar.arrayIndex] == "X") /* display relationship*/
                set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
                PA0W526(); /* remove o/a info*/
              end
            end
          end
        end
      end
      sysVar.arrayIndex = sysVar.arrayIndex - 1;
    end
  end
  ;
   /* the saved primary o/a number is used when the relationship*/
   /* description has been changed but nothing else.*/
  ;
  if (PA0WW00.PA0WWPOA == 0 /* if no primary o/a number*/
   && PA0WW00.PA0WWXF3 != "Y") /* data to display*/
    PA0WW00.PA0WWPOA = PA0WW00.PA0WWSOA; /* use saved o/a number*/
  end
  ;
  ;
  ;
   /* ------------- End of process pa0w520 -----------------------*/
  ;
end // end PA0W520

// validate 'add' selection
Function PA0W521()
   /* ------------------------------------------------------------*/
   /* verify add information*/
   /* ------------------------------------------------------------*/
  ;
   /* check to make sure header record exists*/
  ;
  set PA1REC empty;
  ;
  PA1REC.PA1OANBR = PA0WM001.PA1OANBR[sysVar.arrayIndex];
  ;
  PA0WS04();
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(50); /* o/a number doesn't exist*/
    PA0WW00.XXXMODID = "521";
    set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
    set PA0WM001.PA1OANBR[sysVar.arrayIndex] bold;
    return;
  end
  ;
  PA0WW00.PA0WWAID = sysVar.arrayIndex; /* save index*/
  ;
  set PA7REC empty; /* initialize vpaxrf01 record*/
  ;
  PA7REC.PA7PRNBR = PA0WM001.PA1OANBR[sysVar.arrayIndex]; /* set up call*/
  ;
  PA0WS13(); /* 'sb' select unique row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* good return code*/
    PA0WM001.PA0WMREL[sysVar.arrayIndex] = "Y";
    if (PA0WW00.PA0WWSRO == 0 /* no other related o/a typed in*/
     && converseVar.validationMsgNum == 202) /* relationship desc. required*/
      PA0WW01.PA9COM[1] = PA0WW01.PA0WWCOM[1];
      PA0WW01.PA9COM[2] = PA0WW01.PA0WWCOM[2];
      PA0WW01.PA9COM[3] = PA0WW01.PA0WWCOM[3];
      PA0WM001.PA9COM[1] = PA0WW01.PA0WWCOM[1];
      PA0WM001.PA9COM[2] = PA0WW01.PA0WWCOM[2];
      PA0WM001.PA9COM[3] = PA0WW01.PA0WWCOM[3];
      set PA0WM001.PA9COM[1] initialAttributes;
      set PA0WM001.PA9COM[2] initialAttributes;
      set PA0WM001.PA9COM[3] initialAttributes;
      converseLib.validationFailed(0);
    end
    if (PA0WW00.PA0WWSOA != 0               
     && PA7REC.PA1OANBR != PA0WW00.PA0WWSOA /* different relationship*/
     && PA0WW00.PA0WWSRO != 0)              /* other related o/as typed in*/
      converseLib.validationFailed(203);
      PA0WW00.XXXMODID = "521";
      set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
      set PA0WM001.PA1OANBR[sysVar.arrayIndex] bold;
      set PA0WM001.PA0WMREL[sysVar.arrayIndex] bold;
    else
      if (PA7REC.PA7PRNBR != PA0WW00.PA0WWSRO)
        PA0WW00.PA0WWPOA = PA7REC.PA1OANBR; /* primary o/a*/
        PA0WW00.PA0WWSOA = PA7REC.PA1OANBR; /* saved primary*/
        PA0WW00.PA0WWSRO = PA7REC.PA1OANBR; /* save related o/a*/
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* o/a doesn't have relationship*/
      PA0WM001.PA0WMREL[sysVar.arrayIndex] = "N"; /* indicate not related*/
      if (PA0WW00.PA0WWPOA == 0 /* no primary o/a number*/
       && PA0WW00.PA0WWSRO == 0) /* no related o/as*/
        PA0WW00.PA0WWPOA = PA0WM001.PA1OANBR[sysVar.arrayIndex];
        PA0WW00.PA0WWSOA = PA0WM001.PA1OANBR[sysVar.arrayIndex];
        PA0W522(); /* edit relationship description*/
      else
        if (PA0WW00.PA0WWSOA != 0)
          PA0WW00.PA0WWPOA = PA0WW00.PA0WWSOA;
        end
      end
    end
  end
  ;
  if (converseVar.validationMsgNum != 0
   && converseVar.validationMsgNum != 202) /* relationship description required*/
    return;
  end
  ;
   /* find o/a in working storage display fields (PA0WW03).*/
  ;
  XX6 = 1; /* index for pa0ww03*/
  PA0WW00.PA0WWFFL = "N"; /* o/a not found in pa0ww03*/
  ;
  while (PA0WW00.XX6 <= 100
   && PA0WW00.XX6 <= PA0WW00.PA0WWMX3
   && PA0WW00.PA0WWFFL == "N")
    if (PA0WW03.PA1OANBR[XX6] == PA0WM001.PA1OANBR[sysVar.arrayIndex])
      PA0WW00.PA0WWFFL = "Y"; /* o/a found in pa0ww03*/
      if (PA0WW03.PA0WWSEL[XX6] != "A")
        PA0WW03.PA0WWSEL[XX6] = "A";
        if (PA0WM001.PA0WMREL[sysVar.arrayIndex] == "Y") /* related o/a*/
          PA0WW00.PA0WWSRO = PA0WM001.PA1OANBR[sysVar.arrayIndex];
        end
      end
    end
    PA0WW00.XX6 = PA0WW00.XX6 + 1;
  end
  ;
  if (PA0WW00.PA0WWFFL == "N") /* o/a typed in by user*/
    PA0W523();
  end
  ;
   /* ------------- End of process pa0w521 -----------------------*/
  ;
end // end PA0W521

// edit relationship desc
Function PA0W522()
   /* ------------------------------------------------------------*/
   /* edit relationship description*/
   /* ------------------------------------------------------------*/
  ;
   /* if there is no description in working storage, a*/
   /* relationship is not on the screen.  this means that*/
   /* if the map has a description, the user typed it in.*/
  ;
  if (PA0WW01.PA9COM[1] == " "
   && PA0WW01.PA9COM[2] == " "
   && PA0WW01.PA9COM[3] == " ")
    if (PA0WM001.PA9COM[1] != " "
     || PA0WM001.PA9COM[2] != " "
     || PA0WM001.PA9COM[3] != " ")
      PA0WW01.PA9COM[1] = PA0WM001.PA9COM[1];
      PA0WW01.PA9COM[2] = PA0WM001.PA9COM[2];
      PA0WW01.PA9COM[3] = PA0WM001.PA9COM[3];
      PA0WW01.PA0WWCOM[1] = PA0WM001.PA9COM[1];
      PA0WW01.PA0WWCOM[2] = PA0WM001.PA9COM[2];
      PA0WW01.PA0WWCOM[3] = PA0WM001.PA9COM[3];
      PA0WW00.PA0WWRDU = "Y"; /* user typed in relationship desc.*/
      return;
    end
  else
    ;
     /* there is a relationship description in working storage.*/
     /* if the map is different than the working storage fields,*/
     /* save the map information.*/
    ;
    if (PA0WM001.PA9COM[1] != PA0WW01.PA9COM[1]
     || PA0WM001.PA9COM[2] != PA0WW01.PA9COM[2]
     || PA0WM001.PA9COM[3] != PA0WW01.PA9COM[3])
      PA0WW01.PA9COM[1] = PA0WM001.PA9COM[1];
      PA0WW01.PA9COM[2] = PA0WM001.PA9COM[2];
      PA0WW01.PA9COM[3] = PA0WM001.PA9COM[3];
      PA0WW01.PA0WWCOM[1] = PA0WM001.PA9COM[1];
      PA0WW01.PA0WWCOM[2] = PA0WM001.PA9COM[2];
      PA0WW01.PA0WWCOM[3] = PA0WM001.PA9COM[3];
      PA0WW00.PA0WWRDU = "Y"; /* relationship desc updated*/
      return;
    end
  end
  ;
  if (PA0WW00.PA0WWSRO == 0 /* no related o/a processed yet*/
   && PA0WW00.PA0WWRDU == "N") /* relationship desc. not updated*/
    PA0WW01.PA0WWCOM[1] = " ";
    PA0WW01.PA0WWCOM[2] = " ";
    PA0WW01.PA0WWCOM[3] = " ";
  end
  ;
   /* save the working storage description for later, at this*/
   /* point we don't know if a displayed relationship has*/
   /* been selected to add to.*/
  ;
  if (PA0WW01.PA0WWCOM[1] == " " /* there is no saved description*/
   && PA0WW01.PA0WWCOM[2] == " " 
   && PA0WW01.PA0WWCOM[3] == " " 
   && PA0WW00.PA0WWAF1 == "N")   /* if check not done yet*/
    PA0WW01.PA0WWCOM[1] = PA0WW01.PA9COM[1];
    PA0WW01.PA0WWCOM[2] = PA0WW01.PA9COM[2];
    PA0WW01.PA0WWCOM[3] = PA0WW01.PA9COM[3];
    PA0WW01.PA9COM[1] = " "; /* clear out relationship desc*/
    PA0WM001.PA9COM[1] = " "; /* clear out relationship desc*/
    PA0WW01.PA9COM[2] = " ";
    PA0WM001.PA9COM[2] = " "; /* clear out relationship desc*/
    PA0WW01.PA9COM[3] = " ";
    PA0WM001.PA9COM[3] = " "; /* clear out relationship desc*/
    PA0WW01.PA7RPTFT = "Y"; /* init report to factory*/
    PA0WM001.PA7RPTFT = "Y"; /* init report to factory*/
    PA0WW00.PA0WWAF1 = "Y"; /* set relationship desc flag on*/
    if (converseVar.validationMsgNum == 0)
      set PA0WM001.PA9COM[1] cursor;
      converseLib.validationFailed(202); /* relationship description required*/
      PA0WW00.XXXMODID = "522";
    end
    set PA0WM001.PA9COM[1] bold;
    set PA0WM001.PA9COM[2] bold;
    set PA0WM001.PA9COM[3] bold;
  else
    if (PA0WM001.PA9COM[1] != " "
     || PA0WM001.PA9COM[2] != " "
     || PA0WM001.PA9COM[3] != " ")
      PA0WW01.PA9COM[1] = PA0WM001.PA9COM[1];
      PA0WW01.PA9COM[2] = PA0WM001.PA9COM[2];
      PA0WW01.PA9COM[3] = PA0WM001.PA9COM[3];
      PA0WW01.PA0WWCOM[1] = PA0WM001.PA9COM[1];
      PA0WW01.PA0WWCOM[2] = PA0WM001.PA9COM[2];
      PA0WW01.PA0WWCOM[3] = PA0WM001.PA9COM[3];
      set PA0WM001.PA9COM[1] initialAttributes;
      set PA0WM001.PA9COM[2] initialAttributes;
      set PA0WM001.PA9COM[3] initialAttributes;
    end
  end
  ;
   /* ------------- End of process pa0w522 -----------------------*/
  ;
end // end PA0W522

// save add info for display
Function PA0W523()
   /* ------------------------------------------------------------*/
   /* format the o/a header an format the header data*/
   /* ------------------------------------------------------------*/
  ;
  PA0WW00.XX6 = 1; /* screen index*/
  PA0WW00.XX5 = PA0WW00.PA0WWSTL; /* move saved top line to index*/
  ;
  while (PA0WW00.XX6 <= 12)
    ;
    if (PA0WM001.PA0WMSEL[XX6] != PA0WW03.PA0WWSEL[XX5])
      PA0WW03.PA0WWSEL[XX5] = PA0WM001.PA0WMSEL[XX6];
    end
    ;
    if (PA0WM001.PA1OANBR[XX6] != 0
     && PA0WM001.PA1OANBR[XX6] != PA0WW03.PA1OANBR[XX5])
      if (PA0WW03.PA1OANBR[XX5] == 0)
        PA0WW00.PA0WWMX3 = PA0WW00.PA0WWMX3 + 1;
      end
      PA0WW03.PA1OANBR[XX5] = PA0WM001.PA1OANBR[XX6];
      set PA7REC empty;
      PA7REC.PA7PRNBR = PA0WM001.PA1OANBR[XX6];
      PA0WS13();
                                   /* 'sb' select using o/a as previous o/a*/
      ;
      if (SQLCA.VAGen_SQLCODE == 00) /* row found*/
        PA0WW03.PA0WWREL[XX5] = "Y";
        if (PA0WW00.PA0WWSRO == 0) /* no other related o/a typed in*/
          PA0WW00.PA0WWPOA = PA7REC.PA1OANBR;
          PA0WW00.PA0WWSOA = PA7REC.PA1OANBR;
          PA0WW00.PA0WWSRO = PA7REC.PA1OANBR;
          if (converseVar.validationMsgNum == 202) /* relationship desc required*/
            set PA0WM001.PA9COM[1] initialAttributes;
            set PA0WM001.PA9COM[2] initialAttributes;
            set PA0WM001.PA9COM[3] initialAttributes;
            converseLib.validationFailed(0);
          end
        end
      else
        PA0WW03.PA0WWREL[XX5] = "N";
      end
      ;
      set PA1REC empty;
      PA1REC.PA1OANBR = PA0WM001.PA1OANBR[XX6];
      PA0WS04(); /* read o/a header*/
      if (PA7REC.PA1OANBR == PA0WW00.PA0WWPOA) /* if primary*/
        PA0WW00.YESCD = PA1REC.YESCD; /* save status code*/
        if (PA0WW01.PA7RPTFT == " ")
          PA0WW01.PA7RPTFT = PA7REC.PA7RPTFT;
        end
        if (PA0WW01.PA9COM[1] == " "
         && PA0WW01.PA9COM[2] == " "
         && PA0WW01.PA9COM[3] == " ")
          PA0WS09(); /* load relationship description*/
          if (PA0WM001.PA9COM[1] == " "
           && PA0WM001.PA9COM[2] == " "
           && PA0WM001.PA9COM[2] == " ")
            PA0WM001.PA9COM[1] = PA0WW01.PA9COM[1];
            PA0WM001.PA9COM[2] = PA0WW01.PA9COM[2];
            PA0WM001.PA9COM[3] = PA0WW01.PA9COM[3];
          end
        end
      end
      PA0WW03.SY1STNBR[XX5] = PA1REC.SY1STNBR;
      PA0WW03.SY2CLRID[XX5] = PA1REC.SY2CLRID;
      PA0WW03.XDMCD[XX5] = PA1REC.XDMCD;
      PA0WW03.YETCD[XX5] = PA1REC.YETCD;
      PA0WW03.YESCD[XX5] = PA1REC.YESCD;
      PA0WW03.XXXUSER[XX5] = PA1REC.XXXPGUID;
      ;
      if (PA1REC.KUCCOID > 0) /* customer code exists*/
        set PC2REC empty;
        PC2REC.XGPCD = "02";
        PC2REC.KUCCOID = PA1REC.KUCCOID;
        PC2REC.KUMSTRID = PA1REC.KUMSTRID;
        PC2REC.XNXCD = PA1REC.XNXCD;
        ;
        if (PA1REC.PA1OANBR > 199999
         && PA1REC.PA1OANBR < 300000)
          PC2REC.PC-PRDCU-APAO-FL = "E"; /* EUROPEAN CUSTOMER ONLY*/
        else
          PC2REC.PC-PRDCU-APAO-FL = " "; /* MVSPROD CUSTOMER*/
        end
        ;
        PA0WS05(); /* get customer xref*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
          PA0WW03.PC2CUXID[XX5] = PC2REC.PC2CUXID;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
            PA0WW00.XXXMSGNO = 23;
            PA0WW00.XXXMODID = "610";
          end
        end
      end
      set PA4REC empty; /* init factory record*/
      PA4REC.PA1OANBR = PA0WM001.PA1OANBR[XX6];
      PA4REC.YESCD = "*"; /* status*/
      ;
      PA0WS06(); /* select set pa4rec*/
      ;
      PA0WS07(); /* fetch pa4rec*/
      ;
      PA0WW00.PA0WWSW1 = "N";
      ;
      while (PA0WW00.PA0WWSW1 == "N")
             /* AND EZEMNO EQ 0           ; or until a problem is found*/
        ;
        /* format po id*/
        ;
        PA0WW00.PA0WWPO = PA4REC.PC3POIDT;
        PA0WW03.PA0WWPOY[XX5] = PA0WW00.PA0WWPYY;
        PA0WW03.PA0WWPOM[XX5] = PA0WW00.PA0WWPMM;
        PA0WW03.PA0WWPOD[XX5] = PA0WW00.PA0WWPDD;
        ;
        PA0WW03.FY1FCTYC[XX5] = PA4REC.FY1FCTYC;
        PA0WW03.PA0WWADJ[XX5] = PA4REC.PA4FCTQT;
        ;
        if (PA0WW03.PA1OANBR[XX5] == 0) /* factory line*/
          PA0WW03.PA0WWSEL[XX5] = " ";
        end
        ;
        PA0WW00.XX5 = PA0WW00.XX5 + 1;
        ;
        PA0WS07(); /* fetch pa4rec*/
        ;
      end
      PA0WW00.XX5 = PA0WW00.XX5 - 1;
      PA0WW00.PA0WWMX3 = PA0WW00.XX5;
      ;
      PA0WS08(); /* close pa4rec*/
      ;
    end
    PA0WW00.XX6 = PA0WW00.XX6 + 1;
    PA0WW00.XX5 = PA0WW00.XX5 + 1;
  end
  ;
  ;
   /* ------------------ End of Process PA0w523 ------------------*/
  ;
end // end PA0W523

// validate 'delete' selection
Function PA0W524()
   /* ------------------------------------------------------------*/
   /* verify delete information.*/
   /* ------------------------------------------------------------*/
  ;
  set PA7REC empty; /* initialize vpaxrf01 record*/
  ;
  PA7REC.PA7PRNBR = PA0WM001.PA1OANBR[sysVar.arrayIndex]; /* set up call*/
  ;
  PA0WS13(); /* 'sb' select unique row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* relationship found*/
    PA0WW00.PA0WWPOA = PA7REC.PA1OANBR; /* primary o/a*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* o/a doesn't have relationship*/
      set PA0WM001.PA0WMSEL[sysVar.arrayIndex] cursor, bold;
      set PA0WM001.PA1OANBR[sysVar.arrayIndex] bold;
      set PA0WM001.PA0WMREL[sysVar.arrayIndex] bold;
      converseLib.validationFailed(200); /* o/a doesn't have relationship*/
      PA0WW00.XXXMODID = "524";
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* find o/a in working storage display fields (pa0ww03).*/
  ;
  PA0WW00.XX6 = 1; /* index for pa0ww03*/
  PA0WW00.PA0WWFFL = "N"; /* o/a not found in pa0ww03*/
  ;
  while (PA0WW00.XX6 <= 100
   && PA0WW00.XX6 <= PA0WW00.PA0WWMX3
   && PA0WW00.PA0WWFFL == "N")
    if (PA0WW03.PA1OANBR[XX6] == PA0WM001.PA1OANBR[sysVar.arrayIndex])
      PA0WW00.PA0WWFFL = "Y";
      if (PA0WW03.PA0WWSEL[XX6] != "D")
        PA0WW03.PA0WWSEL[XX6] = "D";
      end
    end
    PA0WW00.XX6 = PA0WW00.XX6 + 1;
  end
  ;
  ;
   /* ------------- End of process pa0w524 -----------------------*/
  ;
end // end PA0W524

// load primary o/a info
Function PA0W525()
   /* ------------------------------------------------------------*/
   /* display relationship info*/
   /* ------------------------------------------------------------*/
  ;
  PA0WW00.PA0WWSF1 = "Y"; /* selection requested*/
  PA0WW00.PA0WWPG1 = 1; /* display page 1*/
  ;
  set PA7REC empty; /* initialize vpaxrf01 record*/
  ;
  PA7REC.PA7PRNBR = PA0WM001.PA1OANBR[sysVar.arrayIndex];
  ;
  PA0WS13(); /* 'sb' select unique row*/
  ;
  PA0WW00.PA0WWMX2 = 0; /* reset pa0wwmx2*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* good return code*/
    PA0WW00.PA0WWPOA = PA7REC.PA1OANBR; /* primary o/a*/
    PA0WW00.PA1OANBR[1] = PA7REC.PA7PRNBR; /* previous number*/
  else
    if (SQLCA.VAGen_SQLCODE == 100 /* o/a doesn't have relationship*/
     && PA0WW00.PA0WWPOA == 0)     /* no primary o/a number*/
      PA0WW00.PA0WWPOA = PA0WM001.PA1OANBR[sysVar.arrayIndex];
      PA0WW00.PA1OANBR[1] = PA0WM001.PA1OANBR[sysVar.arrayIndex];
    end
  end
  ;
  ;
  ;
   /* ------------- End of process pa0w525 -----------------------*/
  ;
end // end PA0W525

// remove desired o/as
Function PA0W526()
   /* ------------------------------------------------------------*/
   /* remove o/as from screen*/
   /* ------------------------------------------------------------*/
  ;
  set PA0WW04 empty;
  ;
  PA0WW00.XX6 = 1; /* index used for pa0ww03*/
  PA0WW00.XX7 = 1; /* index used for pa0ww04*/
  PA0WW00.PA0WWXF1 = "N"; /* remove o/a flag*/
  PA0WW00.PA0WWXF2 = "Y"; /* remove o/a flag*/
  PA0WW00.PA0WWXF3 = "N"; /* empty display*/
  ;
   /* move display work fields to sencondary storage to clear out*/
   /* o/as that are to be removed from the screen display.*/
  ;
  while (PA0WW00.XX6 <= 100
   && PA0WW00.XX6 <= PA0WW00.PA0WWMX3)
    if (PA0WW03.PA1OANBR[XX6] == PA0WM001.PA1OANBR[sysVar.arrayIndex])
      PA0WW00.PA0WWXF1 = "Y"; /* remove o/a*/
    else
      if (PA0WW03.PA1OANBR[XX6] == 0
       && PA0WW00.PA0WWXF1 == "Y")
         /* next sentence*/
      else
        PA0WW04.PA0WWGP4[XX7] = PA0WW03.PA0WWGP3[XX6];
        PA0WW00.PA0WWXF1 = "N";
        PA0WW00.XX7 = PA0WW00.XX7 + 1;
      end
    end
    PA0WW00.XX6 = PA0WW00.XX6 + 1;
  end
  ;
   /* load the o/as from secondary storage to the working display*/
   /* storage fields.*/
  ;
  PA0WW00.XX6 = 1;
  PA0WW00.PA0WWMX3 = PA0WW00.XX7 - 1;
  ;
  set PA0WW03 empty;
  ;
  if (PA0WW00.PA0WWMX3 == 0) /* display empty*/
    PA0WW00.PA0WWPOA = 0; /* init primary o/a*/
    PA0WW00.PA0WWSWR = "N"; /* request for data = no*/
    PA0WW00.PA0WWXF3 = "Y"; /* indicate empty display*/
    set PA0WM001 initial; /* clear screen*/
    set PA0WW01 empty; /* clear record*/
  end
  ;
  while (PA0WW00.XX6 <= 100
   && PA0WW00.XX6 <= PA0WW00.PA0WWMX3)
    PA0WW03.PA0WWGP3[XX6] = PA0WW04.PA0WWGP4[XX6];
    PA0WW00.PA0WWXF1 = "N";
    PA0WW00.XX6 = PA0WW00.XX6 + 1;
  end
  ;
  ;
  ;
  ;
   /* ------------- End of process pa0w526 -----------------------*/
  ;
end // end PA0W526

// check for add errors
Function PA0W530()
   /* ------------------------------------------------------------*/
   /* check for any add errors*/
   /* ------------------------------------------------------------*/
  ;
   /* if the add function was requested, there must be more than*/
   /* one o/a specified for the add.*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf9)
    if (PA0WW00.PA0WWSEL == "A") /* add requested*/
      XX6 = 1; /* index used for pa0ww03*/
      PA0WW00.PA0WWAC1 = 0; /* init counter 1*/
      PA0WW00.PA0WWAC2 = 0; /* init counter2*/
      ;
      while (PA0WW00.XX6 <= 100
       && PA0WW00.XX6 <= PA0WW00.PA0WWMX3)
        if (PA0WW03.PA0WWSEL[XX6] == "A")
          PA0WW00.PA0WWAC2 = PA0WW00.PA0WWAC2 + 1;
          if (PA0WW03.PA0WWREL[XX6] == "Y")
            PA0WW00.PA0WWAC1 = PA0WW00.PA0WWAC1 + 1;
          end
        end
        PA0WW00.XX6 = PA0WW00.XX6 + 1;
      end
      ;
      if (PA0WW00.PA0WWAC1 > 1)
        ;
         /* highlight all the add selections on the screen*/
        ;
        PA0WW00.XX5 = 1;
        while (PA0WW00.XX5 <= 12)
          if (PA0WM001.PA0WMSEL[XX5] == "A")
            set PA0WM001.PA0WMSEL[XX5] bold;
            set PA0WM001.PA1OANBR[XX5] bold;
            set PA0WM001.PA0WMREL[XX5] bold;
          end
          PA0WW00.XX5 = PA0WW00.XX5 + 1;
        end
        ;
        converseLib.validationFailed(196); /* more than one o/a required for add*/
        PA0WW00.XXXMODID = "530";
        PA0WW00.XX5 = PA0WW00.PA0WWAID; /* setup index*/
        set PA0WM001.PA0WMSEL[XX5] cursor;
      end
      ;
      if (PA0WW00.PA0WWAC2 <= 1)
        converseLib.validationFailed(197); /* more than one o/a required for add*/
        PA0WW00.XXXMODID = "530";
        PA0WW00.XX5 = PA0WW00.PA0WWAID; /* setup index*/
        set PA0WM001.PA0WMSEL[XX5] cursor, bold;
        set PA0WM001.PA1OANBR[XX5] bold;
        set PA0WM001.PA0WMREL[XX5] bold;
      end
    end
  end
  ;
  if (converseVar.validationMsgNum == 0
   || converseVar.validationMsgNum == 202) /* relationship description required*/
    if (converseVar.validationMsgNum == 202)
      set PA0WM001.PA9COM[1] cursor;
    end
    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex <= 12)
      set PA0WM001.PA0WMSEL[sysVar.arrayIndex] initialAttributes;
      set PA0WM001.PA1OANBR[sysVar.arrayIndex] initialAttributes;
      set PA0WM001.PA0WMREL[sysVar.arrayIndex] initialAttributes;
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end
  ;
  ;
  ;
   /* ---------------- End of Process PA0w530 --------------------*/
  ;
end // end PA0W530

// Process valid input request
Function PA0W600()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    return;
  end
  ;
  if (converseVar.eventKey is enter /* enter pressed*/
   || converseVar.eventKey is pf9)  /* pf9 pressed*/
    if (PA0WW00.PA0WWSF1 == "Y") /* if selection = 's'*/
      PA0WW00.PA0WWSEL = " "; /* init selection*/
      PA0WW00.PA0WWSWR = "Y"; /* request for data*/
      PA0WW00.XXXMSGNO = 199; /* information displayed*/
      PA0WW00.PA0WWMX4 = 1; /* init pa0wwmx4*/
      return;
    else
      if (PA0WW00.PA0WWXF2 == "Y") /* remove o/as from display*/
        PA0WW00.PA0WWSEL = " "; /* init selection*/
        PA0WW00.PA0WWSWR = "N"; /* request for data*/
        return;
      else
        if (PA0WW00.PA0WWSEL == " ") /* no selection made*/
          PA0WW00.XX6 = 1; /* init index*/
          while (PA0WW00.XX6 <= 100
           && PA0WW00.XX6 <= PA0WW00.PA0WWMX3)
            PA0WW03.PA0WWSEL[XX6] = " ";
            PA0WW00.XX6 = PA0WW00.XX6 + 1;
          end
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is enter) /* enter pressed*/
    if (PA0WW00.PA0WWSEL == "A" /* add requested*/
     || PA0WW00.PA0WWSEL == "D") /* delete requested*/
      if (PA0WW00.PA0WWPOA != 0) /* if relationship*/
        PA0WW00.PA0WWSWR = "N"; /* request for data*/
        PA0WW00.XXXMSGNO = 30; /* pf9 to update, pa2 clear*/
        return; /* return*/
      else
        return;
      end
    end
    PA0WW00.PA0WWSWR = "N"; /* request for data = 'no'*/
    return;
  end
  ;
  if (converseVar.eventKey not pf9) /* Pf9 not pressed*/
    return; /* update accepted*/
  end
  ;
   /* ---------------- PF9 HAS BEEN HIT --------------------------*/
  ;
  ;
   /* ---------------- UPDATE DATABASE ROWS HERE -----------------*/
  ;
  PA0W605(); /* update database*/
  ;
  if (converseVar.validationMsgNum == 0)
    PA0WW00.XXXMSGNO = 1; /* Update successful message*/
  end
  ;
   /* init flags/counters*/
  ;
  PA0WW00.PA0WWAC1 = 0; /* add counter 1*/
  PA0WW00.PA0WWAC2 = 0; /* add counter 2*/
  PA0WW00.PA0WWSWR = "N"; /* Request for data*/
  PA0WW00.PA0WWRDU = "N"; /* relationship desc. not updated*/
  PA0WW00.PA0WWAF1 = "N"; /* check not done yet*/
  PA0WW00.PA0WWSRO = 0; /* init saved related o/a*/
  PA0WW00.XXXMODID = "600"; /* Module identification*/
  ;
   /* init selection fields*/
  ;
  PA0WW00.XX6 = 1; /* init index*/
  while (PA0WW00.XX6 <= 100
   && PA0WW00.XX6 <= PA0WW00.PA0WWMX3)
    PA0WW03.PA0WWSEL[XX6] = " ";
    PA0WW00.XX6 = PA0WW00.XX6 + 1;
  end
  PA0WW00.PA0WWSEL = " "; /* reset selection*/
  ;
  ;
   /* ------------------ end of process pa0w600 ------------------*/
end // end PA0W600

// Process valid input request
Function PA0W605()
   /* ------------------------------------------------------------*/
   /* update/add vpaxrf01 row*/
   /* ------------------------------------------------------------*/
  ;
  sysVar.arrayIndex = 1;
  set PA7REC empty; /* dproda.vpaxrf01*/
  ;
  if (PA0WW00.PA0WWSEL == "D")
    set PA0WW04 empty; /* temp storage for display*/
    PA0WW00.XX7 = 1; /* index for pa0ww04*/
    PA0WW00.PA0WWXF1 = "N";
  end
  ;
  PA0WW00.PA0WWDF1 = "N"; /* init delete primary flag*/
  ;
  while (sysVar.arrayIndex <= 100
   && sysVar.arrayIndex <= PA0WW00.PA0WWMX3)
    if (PA0WW03.PA0WWSEL[sysVar.arrayIndex] == "A" /* if add to relationship*/
     && PA0WW03.PA1OANBR[sysVar.arrayIndex] != 0) 
      if (PA0WW03.PA0WWREL[sysVar.arrayIndex] == "N")
        PA7REC.PA1OANBR = PA0WW00.PA0WWPOA; /* primary o/a number*/
        PA7REC.PA7PRNBR = PA0WW03.PA1OANBR[sysVar.arrayIndex];
        PA7REC.PA7XRFTY = "R";
        PA7REC.PA7RPTFT = PA0WW01.PA7RPTFT;
        PA7REC.ZZZSDT = XX0XW01.XX0XWDAT;
        PA0WS15(); /* add vpaxrf01 row*/
        PA0WW03.PA0WWREL[sysVar.arrayIndex] = "Y"; /* indicate relationship*/
      end
       /* reset the selection field stored in pa0ww03*/
      PA0WW03.PA0WWSEL[sysVar.arrayIndex] = " ";
      ;
    else
      if (PA0WW03.PA0WWSEL[sysVar.arrayIndex] == "D" /* if delete from relationship*/
       && PA0WW03.PA1OANBR[sysVar.arrayIndex] != 0) 
        if (PA0WW03.PA0WWREL[sysVar.arrayIndex] == "Y")
          PA0W620();
        end
      end
    end
    if (PA0WW00.PA0WWSEL == "D") /* if redo display requested*/
      PA0W630(); /* remove o/as from display*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end
  ;
  if (PA0WW00.PA0WWSEL == "D")
    PA0WW00.PA0WWMX3 = PA0WW00.XX7 - 1; /* reset pa0wwmx3*/
    PA0W640(); /* move back to display*/
    PA0W650(); /* check # of o/as left in rel.*/
  end
  ;
  if (PA0WW00.PA0WWDF1 == "Y") /* if delete primary o/a*/
    PA0W660();
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* update/add vpacmt01 row*/
   /* ------------------------------------------------------------*/
  ;
  set PA9REC empty; /* dproda.vpacmt01*/
  ;
  PA9REC.PA1OANBR = PA0WW00.PA0WWPOA;
  PA9REC.PA9COMTY = "R";
  PA9REC.FY1FCTYC = "*";
  PA9REC.YESCD = "*";
  ;
  PA0WS10(); /* 's2' comment row*/
  ;
  PA0WS11(); /* 'n2' comment row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (PA9REC.PA9COM[1] != PA0WW01.PA9COM[1]
     || PA9REC.PA9COM[2] != PA0WW01.PA9COM[2]
     || PA9REC.PA9COM[3] != PA0WW01.PA9COM[3])
      PA9REC.PA9COM[1] = PA0WW01.PA9COM[1];
      PA9REC.PA9COM[2] = PA0WW01.PA9COM[2];
      PA9REC.PA9COM[3] = PA0WW01.PA9COM[3];
      PA9REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PA9REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      PA0W670(); /* update comment record*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* relationship doesn't exist*/
      PA9REC.PA1OANBR = PA0WW00.PA0WWPOA;
      PA9REC.FY1FCTYC = "    ";
      PA9REC.YESCD = PA0WW00.YESCD;
      PA9REC.PA9COMTY = "R";
      PA9REC.PA9COM[1] = PA0WW01.PA9COM[1];
      PA9REC.PA9COM[2] = PA0WW01.PA9COM[2];
      PA9REC.PA9COM[3] = PA0WW01.PA9COM[3];
      PA9REC.XXXUSER = COMMAREA.CAUSERID;
      PA9REC.ZZZSDT = XX0XW01.XX0XWDAT;
      PA9REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PA9REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      PA9REC.ZZZCHGCT = 0;
      PA0W680(); /* add comment record*/
    end
  end
  ;
  PA0WS12(); /* close 'c2' vpacmt01*/
  ;
   /* check the report to factory flag.*/
  ;
  if (PA0WW00.PA0WWRFU == "Y")
    PA0W690(); /* update report to factory*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();
  ;
  ;
  ;
   /* ------------------ end of process pa0w605 ------------------*/
end // end PA0W605

// process delete request
Function PA0W620()
   /* ------------------------------------------------------------*/
   /* process delete request*/
   /* ------------------------------------------------------------*/
  ;
  ;
  PA7REC.PA1OANBR = PA0WW00.PA0WWPOA; /* primary o/a number*/
  PA7REC.PA7PRNBR = PA0WW03.PA1OANBR[sysVar.arrayIndex];
  PA7REC.PA7XRFTY = "R";
  ;
  if (PA7REC.PA1OANBR == PA7REC.PA7PRNBR) /* request delete of primary*/
    PA0WW00.PA0WWDF1 = "Y"; /* indicate delete primary o/a*/
  else /* request delete of member*/
    PA0WS14(); /* delete row*/
  end
  ;
  ;
  ;
  ;
   /* ------------------ end of process pa0w620 ------------------*/
end // end PA0W620

// remove desired o/as
Function PA0W630()
   /* ------------------------------------------------------------*/
   /* remove o/as from screen*/
   /* ------------------------------------------------------------*/
  ;
   /* move display work fields to sencondary storage to clear out*/
   /* o/as that are to be removed from the screen display.*/
  ;
  if (PA0WW03.PA0WWSEL[sysVar.arrayIndex] == "D")
    PA0WW00.PA0WWXF1 = "Y"; /* remove o/a*/
  else
    if (PA0WW03.PA1OANBR[sysVar.arrayIndex] == 0
     && PA0WW00.PA0WWXF1 == "Y")
       /* next sentence*/
    else
      PA0WW04.PA0WWGP4[XX7] = PA0WW03.PA0WWGP3[sysVar.arrayIndex];
      PA0WW00.PA0WWXF1 = "N";
      PA0WW00.XX7 = PA0WW00.XX7 + 1;
    end
  end
  ;
  ;
  ;
   /* ------------- End of process pa0w630 -----------------------*/
  ;
end // end PA0W630

// reload display fields
Function PA0W640()
   /* ------------------------------------------------------------*/
   /* reload display fieldsen*/
   /* ------------------------------------------------------------*/
  ;
   /* load the o/as from secondary storage to the working display*/
   /* storage fields.*/
  ;
  PA0WW00.XX6 = 1;
  PA0WW00.PA0WWMX3 = PA0WW00.XX7 - 1;
  ;
  set PA0WW03 empty;
  ;
  while (PA0WW00.XX6 <= 100
   && PA0WW00.XX6 <= PA0WW00.PA0WWMX3)
    PA0WW03.PA0WWGP3[XX6] = PA0WW04.PA0WWGP4[XX6];
    PA0WW00.PA0WWXF1 = "N";
    PA0WW00.XX6 = PA0WW00.XX6 + 1;
  end
  ;
  ;
  ;
  ;
   /* ------------- End of process pa0w640 -----------------------*/
  ;
end // end PA0W640

// check # of o/as in rel.
Function PA0W650()
   /* ------------------------------------------------------------*/
   /* check to see how many o/as are left in relationship.  if*/
   /* there is only one left, delete it.*/
   /* ------------------------------------------------------------*/
  ;
  PA0WW00.PA0WWDC1 = 0; /* delete counter*/
  ;
  PA0WS01(); /* open vpaxrf01 table*/
  ;
  PA0WS02(); /* fetch first vpaxrf01 row*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    PA0WW00.PA0WWDC1 = PA0WW00.PA0WWDC1 + 1;
    PA0WS02(); /* fetch next vpaxrf01 row*/
  end
  ;
  PA0WS03(); /* close vpaxrf01 table*/
  ;
  if (PA0WW00.PA0WWDC1 == 2 /* there are two o/as left*/
   && PA0WW00.PA0WWDF1 == "Y") /* but primary is to be deleted*/
    PA0W651(); /* delete relationship*/
    PA0WW00.PA0WWDF1 = "N"; /* reset flag*/
  end
  ;
  if (PA0WW00.PA0WWDC1 == 1)
    PA0W651(); /* delete relationship*/
    PA0WW00.PA0WWDF1 = "N"; /* reset flag*/
  end
  ;
  ;
  ;
   /* ------------- End of process pa0w650 -----------------------*/
  ;
end // end PA0W650

// delete relationship
Function PA0W651()
   /* ------------------------------------------------------------*/
   /* delete relationship*/
   /* ------------------------------------------------------------*/
  ;
  PA7REC.PA1OANBR = PA0WW00.PA0WWPOA;
  ;
  PA0WS01(); /* select 's2' dproda.vpaxrf01*/
  ;
  PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    PA0WS14(); /* delete dproda.vpaxrf01*/
    PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  end
  ;
  PA0WS03(); /* close 'c2' dproda.vpaxrf01*/
  ;
   /* reset related flag on pa0ww03 to 'n' for o/a to display*/
  ;
  PA0WW00.XX6 = 1;
  ;
   /* the reason for this is that the user can only work with on*/
   /* relationship at a time.  it the user deletes this*/
   /* relationship, all the o/as in pa0ww03 have 'n' in pa0wwrel*/
   /* because they are not related to anything.*/
  ;
  while (PA0WW00.XX6 <= 100
   && PA0WW00.XX6 <= PA0WW00.PA0WWMX3)
    PA0WW03.PA0WWREL[XX6] = "N";
    PA0WW00.XX6 = PA0WW00.XX6 + 1;
  end
  ;
  PA0WW00.PA0WWSOA = 0;
  ;
   /* the next step is to delete the relationship description*/
   /* from the primary o/a.*/
  ;
  PA0WS16(); /* delete comment*/
  ;
  PA0WW01.PA9COM[1] = " "; /* init relationship description*/
  PA0WW01.PA9COM[2] = " "; /* init relationship description*/
  PA0WW01.PA9COM[3] = " "; /* init relationship description*/
  PA0WW01.PA7RPTFT = "Y"; /* init report to factory flag*/
  ;
  ;
  PA0WW00.PA0WWPOA = 0; /* there is no primary o/a number*/
  ;
  ;
   /* ------------------ end of process pa0w660 ------------------*/
end // end PA0W651

// delete primary o/a
Function PA0W660()
   /* ------------------------------------------------------------*/
   /* delete primary o/a*/
   /* ------------------------------------------------------------*/
  ;
  PA0WW00.XX5 = PA0WW00.XX5 + 1;
  PA0WW00.PA0WWSOA = 0; /* init save o/a number*/
  ;
  PA0WS01(); /* select 's2' dproda.vpaxrf01*/
  ;
  PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  ;
   /* the first step when deleting the primary o/a is to copy all*/
   /* the remaining o/as to a new relationship with a different*/
   /* primary key.*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    if (PA7REC.PA7PRNBR != PA7REC.PA1OANBR) /* not primary o/a*/
      if (PA0WW00.PA0WWSOA == 0) /* if no new primary o/a*/
        PA0WW00.PA0WWSOA = PA7REC.PA7PRNBR; /* save new primary*/
      end
      PA7REC.PA1OANBR = PA0WW00.PA0WWSOA;
      PA0WS15(); /* add to vpaxrf01*/
    end
    PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  end
  ;
  PA0WS03(); /* close 'c2' dproda.vpaxrf01*/
  ;
   /* the next step is to delete the old relationship*/
  ;
  PA7REC.PA1OANBR = PA0WW00.PA0WWPOA;
  ;
  PA0WS01(); /* select 's2' dproda.vpaxrf01*/
  ;
  PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    PA0WS14(); /* delete dproda.vpaxrf01*/
    PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  end
  ;
  PA0WS03(); /* close 'c2' dproda.vpaxrf01*/
  ;
   /* the next step is to copy the relationship description from*/
   /* the old primary o/a to the new one.  also, the old one*/
   /* needs to be deleted.*/
  ;
  set PA9REC empty; /* dproda.vpacmt01*/
  ;
  PA9REC.PA1OANBR = PA0WW00.PA0WWPOA;
  PA9REC.PA9COMTY = "R";
  PA9REC.FY1FCTYC = "*";
  PA9REC.YESCD = "*";
  ;
  PA0WS10(); /* 's2' comment row*/
  ;
  PA0WS11(); /* 'n2' comment row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    PA0WW01.PA9COM[1] = PA9REC.PA9COM[1];
    PA0WW01.PA9COM[2] = PA9REC.PA9COM[2];
    PA0WW01.PA9COM[3] = PA9REC.PA9COM[3];
  end
  ;
  PA0WS12(); /* 'c2' comment row*/
  ;
  PA0WS16(); /* delete comment*/
  ;
  PA0WW00.PA0WWPOA = PA0WW00.PA0WWSOA; /* set new primary o/a*/
  ;
  set PA1REC empty; /* get status code from header*/
  PA1REC.PA1OANBR = PA0WW00.PA0WWPOA;
  ;
  PA0WS04(); /* read o/a header*/
  ;
  PA0WW00.YESCD = PA1REC.YESCD;
  ;
  ;
   /* ------------------ end of process pa0w660 ------------------*/
end // end PA0W660

// update pa9rec
Function PA0W670()
   /* ------------------------------------------------------------*/
   /* update a row on the database.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4820" ("U ", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row added*/
    return;
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0WW00.XXXMODID = "670"; /* Module identification*/
  ;
  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE A ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application name*/
  TA1REC.TA1PGMNM = "PA0W670"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback any changes*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- End of Process PA0w670 -----------------------*/
  ;
end // end PA0W670

// Add pa9rec
Function PA0W680()
   /* ------------------------------------------------------------*/
   /* Add a row to the database.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4820" ("A ", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row added*/
    return;
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0WW00.XXXMODID = "680"; /* Module identification*/
  ;
  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application name*/
  TA1REC.TA1PGMNM = "PA0W680"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback any changes*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- End of Process PA0w680 -----------------------*/
  ;
end // end PA0W680

// delete/add to update assnfcty
Function PA0W690()
   /* ------------------------------------------------------------*/
   /* update assign to factory flag:*/
   /* 1.  copy all o/as to secondary storage - with new flag*/
   /* 2.  delete old info*/
   /* 3.  readd relationship*/
   /* ------------------------------------------------------------*/
  ;
  sysVar.arrayIndex = 1;
  ;
  PA0WS01(); /* select 's2' dproda.vpaxrf01*/
  ;
  PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  ;
   /* the first step is to copy all the o/as to a secondary*/
   /* storage with the new flag.*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    PA0WW05.PA7GROUP[sysVar.arrayIndex] = PA7REC.PA7GROUP;
    PA0WW05.PA7RPTFT[sysVar.arrayIndex] = PA0WW01.PA7RPTFT;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
    PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  end
  ;
  sysVar.arrayIndex = sysVar.arrayIndex - 1;
  ;
  PA0WS03(); /* close 'c2' dproda.vpaxrf01*/
  ;
   /* the next step is to delete the old relationship*/
  ;
  PA7REC.PA1OANBR = PA0WW00.PA0WWPOA;
  ;
  PA0WS01(); /* select 's2' dproda.vpaxrf01*/
  ;
  PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    PA0WS14(); /* delete dproda.vpaxrf01*/
    PA0WS02(); /* fetch 'n2' dproda.vpaxrf01*/
  end
  ;
  PA0WS03(); /* close 'c2' dproda.vpaxrf01*/
  ;
   /* the next step is to copy the stored relationship info back*/
   /* to the database.*/
  ;
  set PA7REC empty; /* dproda.vpacmt01*/
  ;
  PA0WW00.XX7 = 1;
  ;
  while (PA0WW00.XX7 <= sysVar.arrayIndex)
    PA7REC.PA7GROUP = PA0WW05.PA7GROUP[XX7];
    PA0WS15(); /* add record to relationship*/
    PA0WW00.XX7 = PA0WW00.XX7 + 1;
  end
  ;
  ;
   /* ------------------ end of process pa0w690 ------------------*/
end // end PA0W690

// SELECT SET (S1) PACREC
Function PA0WS-21-IO4950-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from DPRODA.VPAWRK01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4950" ("S1", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PAWREC.XXXMODID = "S12"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map before re-display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DPRODA.VPAWRK01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0WS21"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/
  TA1REC.TA1TBLKE = PACREC.PACGRP01; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* **                                                        ***/
   /* ********************** End of PA0WS-21-IO4950-S1 ************/
   /* **                                                        ***/
end // end PA0WS-21-IO4950-S1

// FETCH (N1) PACREC
Function PA0WS-22-IO4950-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4950" ("N1", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* END OF SELECTED SET*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PAWREC.XXXMODID = "S13"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map before re-display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0WS22"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK01"; /* ===> Table view name*/
  ;
  TA1REC.TA1TBLKE = PACREC.PACGRP01; /* ===>Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* **                                                        ***/
   /* ************ END OF PA0WS-13-IO4980-N1 **********************/
   /* **                                                        ***/
end // end PA0WS-22-IO4950-N1

// CLOSE (C1) PACREC
Function PA0WS-23-IO4950-C1()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4950" ("C1", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PAWREC.XXXMODID = "S14"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0WS23"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/
  TA1REC.TA1TBLKE = PACREC.PACGRP01; /* ===>Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* **                                                        ***/
   /* ********************** End of PA0WS-14-IO4950-C1 ************/
   /* **                                                        ***/
end // end PA0WS-23-IO4950-C1

// Select 'S2' DPRODA.VPAXRF01
Function PA0WS01()
   /* ------------------------------------------------------------*/
   /* select set on dproda.vpaxrf01 table*/
   /* ------------------------------------------------------------*/
  ;
  set PA7REC empty; /* Initialize record*/
  ;
  PA7REC.PA1OANBR = PA0WW00.PA0WWPOA;
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5120" ("S2", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODA.VPAXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0WS01"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA7REC.PA7KEY; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0WS01

// Fetch 'N2' DPRODA.VPAXRF01
Function PA0WS02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for vpaxrf01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5120" ("N2", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT OA XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0WS02"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA7REC.PA7KEY; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0WS02

// Close 'C2' DPRODA.VPAXRF01
Function PA0WS03()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5120" ("C2", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPAXRF01 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0WS03"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0WS03

// select 's' dproda.vpahdr01
Function PA0WS04()
  ;
   /* ------------------------------------------------------------*/
   /* Select 's' dproda.vpahdr01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4830" ("S ", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PAWREC.XXXMODID = "S04"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT \"S\" DPRODA.VPAHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* Key field*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0WS04

// select alternate pc2rec
Function PA0WS05()
  ;
   /* ------------------------------------------------------------*/
   /* Select alternate unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PAWREC.XXXMODID = "S05"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Key field*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0WS05

// Select set (s1) pa4rec
Function PA0WS06()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from dproda.vfypa001.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4810" ("S1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PA0WW00.XXXMODID = "S06"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map before re-display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DPRODA.VFYPA001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0WS06"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* **                                                        ***/
   /* ********************** End of pa0ws06 ***********************/
   /* **                                                        ***/
end // end PA0WS06

// Fetch (n1) pa4rec
Function PA0WS07()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4810" ("N1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PA0WW00.PA0WWSW1 = "Y"; /* Set end of data switch*/
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PA0WW00.XXXMODID = "S07"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map before re-display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0WS07"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* ===> Table view name*/
  ;
  TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* ===>Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* **                                                        ***/
   /* ********************** End of PA0wS07 ***********************/
   /* **                                                        ***/
end // end PA0WS07

// Close (c1) pa4rec
Function PA0WS08()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4810" ("C1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PA0WW00.XXXMODID = "S08"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PA0WS08"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* ===>Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* **                                                        ***/
   /* ********************** End of pa0ws08 ***********************/
   /* **                                                        ***/
end // end PA0WS08

// get relationship comments
Function PA0WS09()
   /* ----------------------------------------------------------*/
   /* select set dproda.vpacomt01 to obtain the relationship*/
   /* description.*/
   /* ----------------------------------------------------------*/
  ;
  set PA9REC empty;
  ;
  PA9REC.PA1OANBR = PA0WW00.PA0WWPOA;
  PA9REC.PA9COMTY = "R";
  PA9REC.FY1FCTYC = "*";
  PA9REC.YESCD = "*";
  ;
  PA0WS10(); /* select 's2' dproda.vpacmt01*/
  ;
  PA0WS11(); /* fetch 'n2'  dproda.vpacmt01*/
  ;
   /* ----------------------------------------------------------*/
   /* load relationship description*/
   /* ----------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* load relationship description*/
    PA0WW01.PA9COM[1] = PA9REC.PA9COM[1];
    PA0WW01.PA9COM[2] = PA9REC.PA9COM[2];
    PA0WW01.PA9COM[3] = PA9REC.PA9COM[3];
    PA0WW01.PA0WWCOM[1] = PA9REC.PA9COM[1];
    PA0WW01.PA0WWCOM[2] = PA9REC.PA9COM[2];
    PA0WW01.PA0WWCOM[3] = PA9REC.PA9COM[3];
  end
  ;
  PA0WS12(); /* close 'c2'dproda.vpcmt01*/
  ;
  ;
end // end PA0WS09

// select 's2' dproda.vpacmt01
Function PA0WS10()
   /* ------------------------------------------------------------*/
   /* select set on dproda.vpacmt01 table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4820" ("S2", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)     
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S10"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODA.VPACMT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0WS10"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0WS10

// fetch 'n2' dproda.vpacmt01
Function PA0WS11()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for vpacmt01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4820" ("N2", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S11"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT DPRODA.VPACMT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0WS11"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0WS11

// close 'c2' dproda.vpacmt01
Function PA0WS12()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4820" ("C2", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S12"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPACMT01 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0WS12"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0WS12

// 'sb' unique vpaxrf01 selection
Function PA0WS13()
   /* ----------------------------------------------------------*/
   /* This statement group finds the unique relationship row*/
   /* given the previous o/a number.*/
   /* ----------------------------------------------------------*/
  ;
  try
    call "IO5120" ("SB", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end /* select row;*/
  ;
  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0WW00.XXXMODID = "S13"; /* module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* terminate function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* terminate function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program name*/
  TA1REC.TA1PGMNM = "PA0WS13"; /* process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* data base name*/
  TA1REC.TA1TBLVU = "VPAXRF01"; /* table view name*/
  TA1REC.TA1TBLKE = PA7REC.PA7KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnossis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
end // end PA0WS13

// 'd ' vpaxrf01 row
Function PA0WS14()
   /* ----------------------------------------------------------*/
   /* This statement group finds the unique relationship row*/
   /* given the previous o/a number.*/
   /* ----------------------------------------------------------*/
  ;
  PA7REC.PA7XRFTY = "R";
  ;
  try
    call "IO5120" ("D2", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end /* select row;*/
  ;
  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0WW00.XXXMODID = "S14"; /* module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* terminate function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* terminate function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "DELETE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program name*/
  TA1REC.TA1PGMNM = "PA0WS14"; /* process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* data base name*/
  TA1REC.TA1TBLVU = "VPAXRF01"; /* table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnossis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
end // end PA0WS14

// 'a ' vpaxrf01 row
Function PA0WS15()
   /* ----------------------------------------------------------*/
   /* add a row to the dproda.vpaxrf01 database.*/
   /* if not available, return an error message to the user.*/
   /* if any other, indicate system error.*/
   /* ----------------------------------------------------------*/
  ;
  try
    call "IO5120" ("A ", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end /* select row;*/
  ;
  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0WW00.XXXMODID = "S15"; /* module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* terminate function*/
  else
    converseLib.validationFailed(10); /* indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* terminate function*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "ADD ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program name*/
  TA1REC.TA1PGMNM = "PA0WS15"; /* process name*/
  TA1REC.TA1DBASE = "DPRODA  "; /* data base name*/
  TA1REC.TA1TBLVU = "VPAXRF01"; /* table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnossis routine*/
  ;
  exit stack; /* flow to converse map*/
  ;
end // end PA0WS15

// delete dproda.vpacmt01
Function PA0WS16()
   /* ------------------------------------------------------------*/
   /* select set on dproda.vpacmt01 table*/
   /* ------------------------------------------------------------*/
  ;
  PA9REC.PA1OANBR = PA0WW00.PA0WWPOA;
  PA9REC.PA9COMTY = "R";
  ;
  try
    call "IO4820" ("D ", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)     
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PAWREC.XXXMODID = "S16"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE DPRODA.VPACMT01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0WS16"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PA0WS16

// Common pf-key processing
Function PA0WS20()
   /* ------------------------------------------------------------*/
   /* This procedure will determine what the catoap will be*/
   /* based on the pf-key pressed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf12) /* reset screen*/
    COMMAREA.CATOAP = "PA0W";
  end
  ;
  if (converseVar.eventKey is pf14) /* historical comments*/
    COMMAREA.CATOAP = "PA0N";
  end
  ;
  if (converseVar.eventKey is pf18) /* P.O. Select*/
    COMMAREA.CATOAP = "PA0Q";
  end
  ;
  if (converseVar.eventKey is pf19) /* O/A Status maint.*/
    COMMAREA.CATOAP = "PA0Z";
  end
  ;
  if (converseVar.eventKey is pf21) /* Header list*/
    COMMAREA.CATOAP = "PA0E";
  end
  ;
   /* Setup the leveling for subsequent applications*/
  ;
  if (PAWREC.CAFROMAP[1] == " ")
    PAWREC.CAFROMAP[1] = COMMAREA.CACURRAP;
  else
    if (PAWREC.CAFROMAP[2] == " ")
      PAWREC.CAFROMAP[2] = COMMAREA.CACURRAP;
    else
      if (PAWREC.CAFROMAP[3] == " ")
        PAWREC.CAFROMAP[3] = COMMAREA.CACURRAP;
      else
        if (PAWREC.CAFROMAP[4] == " ")
          PAWREC.CAFROMAP[4] = COMMAREA.CACURRAP;
        else
          PAWREC.CAFROMAP[5] = COMMAREA.CACURRAP;
        end
      end
    end
  end
  ;
  ;
end // end PA0WS20

//*** RECORD=PA0WW00 ****
// Working storage for PA0w - related o/a maintenance
// ***********************
Record PA0WW00 type basicRecord
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXMODID XXXMODID ; 
  10 XX1 XX1 ; 
  10 XX2 XX2 ; 
  10 XX3 XX3 ; 
  10 XX4 XX4 ; 
  10 XX5 XX5 ; 
  10 XX6 XX6 ; 
  10 XX7 XX7 ; 
  10 XX8 XX8 ; 
  10 PA0WWMX2 PA0WWMX2 ; 
  10 PA0WWMX3 PA0WWMX3 ; 
  10 PA0WWMX4 PA0WWMX4 ; 
  10 PA1OANBR PA1OANBR [25] ; 
  10 PA0WWPOA PA0WWPOA ; 
  10 PA0WWSOA PA0WWSOA ; 
  10 PA0WWSRO PA0WWSRO ; 
  10 YESCD YESCD ; 
  10 PA0WWPO PA0WWPO ; 
    15 PA0WWFIL PA0WWFIL ; 
    15 PA0WWPYY PA0WWPYY ; 
    15 PA0WWPMM PA0WWPMM ; 
    15 PA0WWPDD PA0WWPDD ; 
  10 PAWBUYDT PAWBUYDT ; 
  10 PAWBUYYM PAWBUYYM ; 
  10 PA0WWSWR PA0WWSWR ; 
  10 PA0WWSW1 PA0WWSW1 ; 
  10 PA0WWPG1 PA0WWPG1 ; 
  10 PA0WWPG2 PA0WWPG2 ; 
  10 PA0WWAC1 PA0WWAC1 ; 
  10 PA0WWAC2 PA0WWAC2 ; 
  10 PA0WWAID PA0WWAID ; 
  10 PA0WWAF1 PA0WWAF1 ; 
  10 PA0WWSTL PA0WWSTL ; 
  10 PA0WWRFU PA0WWRFU ; 
  10 PA0WWSF1 PA0WWSF1 ; 
  10 PA0WWDF1 PA0WWDF1 ; 
  10 PA0WWXF1 PA0WWXF1 ; 
  10 PA0WWXF2 PA0WWXF2 ; 
  10 PA0WWXF3 PA0WWXF3 ; 
  10 PA0WWSEL PA0WWSEL ; 
  10 PA0WWDC1 PA0WWDC1 ; 
  10 PA0WWRF1 PA0WWRF1 ; 
  10 PA0WWFFL PA0WWFFL ; 
  10 PA0WWRDU PA0WWRDU ; 
  10 PA0WWFFD PA0WWFFD ; 
  10 PA0WW-FCTY-LOADED PA0WW-FCTY-LOADED ; 
end // end PA0WW00

//*** RECORD=PA0WW01 ****
// ****************** ORDER ADJUSTMENT COMMENTS ***************
// 
// DB2 TABLE VIEW:      dproda.vpacmt01 - working storage area
//                                        to save relation
// COPYLIB MEMBER:      dclv00779         description
// 
// I/O MODULE:          io4820
// 
// kEY TO DB2 TABLE:    pa_ord_adj_nbr
//                      pa_comnt_typ_ind
//                      fy_fcty_cd
//                      yes_adj_stat_cd
//                      zz_sdt
//                      zz_setup_hhmmss
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 06/05/91   MSMIT2   New record.
// ***********************
Record PA0WW01 type basicRecord
  10 PA1OANBR PA1OANBR ; 
  10 PA9COM PA9COM [3] ; 
  10 PA7RPTFT PA7RPTFT ; 
  10 PA0WWCOM PA0WWCOM [3] ; 
end // end PA0WW01

//*** RECORD=PA0WW02 ****
// WORKING STORAGE data to store DPRODA.VPAXRF01 info and flags
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 06/04/91   MSMIT2   New record.
// ***********************
Record PA0WW02 type basicRecord
  10 PA0WWGP2 PA0WWGP2 [50] ; 
    15 PA7KEY PA7KEY ; 
      20 PA1OANBR PA1OANBR ; 
      20 PA7PRNBR PA7PRNBR ; 
    15 PA0WWOAP PA0WWOAP ; 
    15 PA0WWREL PA0WWREL ; 
    15 PA0WWERR PA0WWERR ; 
end // end PA0WW02

//*** RECORD=PA0WW03 ****
// WORKING STORAGE DISPLAY DATA (instead of temp storage).
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 06/04/91   MSMIT2   New record.
// ***********************
Record PA0WW03 type basicRecord
  10 PA0WWGP3 PA0WWGP3 [100] ; 
    15 PA0WWSEL PA0WWSEL ; 
    15 PA1OANBR PA1OANBR ; 
    15 PA0WWREL PA0WWREL ; 
    15 PA0WWPOY PA0WWPOY ; 
    15 PA0WWPOM PA0WWPOM ; 
    15 PA0WWPOD PA0WWPOD ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 YETCD YETCD ; 
    15 YESCD YESCD ; 
    15 PA0WWHLD PA0WWHLD ; 
    15 XXXUSER XXXUSER ; 
    15 PC2CUXID PC2CUXID ; 
    15 PA0WWADJ PA0WWADJ ; 
    15 PA0WWENM PA0WWENM ; 
end // end PA0WW03

//*** RECORD=PA0WW04 ****
// WORKING STORAGE DISPLAY DATA (instead of temp storage).
// THIS RECORD IS USED TO DELETE O/A NUMBERS FROM THE VPAXRF01
// TABLE.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 06/20/91   MSMIT2   New record.
// ***********************
Record PA0WW04 type basicRecord
  10 PA0WWGP4 PA0WWGP4 [100] ; 
    15 PA0WWSEL PA0WWSEL ; 
    15 PA1OANBR PA1OANBR ; 
    15 PA0WWREL PA0WWREL ; 
    15 PA0WWPOY PA0WWPOY ; 
    15 PA0WWPOM PA0WWPOM ; 
    15 PA0WWPOD PA0WWPOD ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 YETCD YETCD ; 
    15 YESCD YESCD ; 
    15 PA0WWHLD PA0WWHLD ; 
    15 XXXUSER XXXUSER ; 
    15 PC2CUXID PC2CUXID ; 
    15 PA0WWADJ PA0WWADJ ; 
    15 PA0WWENM PA0WWENM ; 
end // end PA0WW04

//*** RECORD=PA0WW05 ****
// WORKING STORAGE DISPLAY DATA (instead of temp storage).
// THIS RECORD IS USED TO STORE THE DPORDA.VPAXRF01 RECORDS SO
// THAT THE ASSIGN TO FACTORY FLAG CAN BE UPDATED.  WHEN THE
// UPDATE FUNCTION IS ADDED TO THE IO5120 THIS RECORD CAN BE
// DELETED.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 06/23/91   MSMIT2   New record.
// ***********************
Record PA0WW05 type basicRecord
  10 PA7GROUP PA7GROUP [100] ; 
    15 PA1OANBR PA1OANBR ; 
    15 PA7PRNBR PA7PRNBR ; 
    15 PA7XRFTY PA7XRFTY ; 
    15 PA7RPTFT PA7RPTFT ; 
    15 ZZZSDT ZZZSDT ; 
end // end PA0WW05

//*** RECORD=PA0WW06 ****
// Working storage for PA0W - STORE FACTORY QUANTITIES
// ***********************
Record PA0WW06 type basicRecord
  5 * char(8) [4] ; // MAXIMUM OF 4 FACTORIES PER O/A
    10 FY1FCTYC FY1FCTYC ; 
    10 PA0WW-FCTY-TOT-ADJ PA0WW-FCTY-TOT-ADJ ; 
end // end PA0WW06

DataItem PA0WW-FCTY-LOADED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL ADJUSTED QTY BY FACTORY
DataItem PA0WW-FCTY-TOT-ADJ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add relationship counter
DataItem PA0WWAC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of o/as to add
DataItem PA0WWAC2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PRDCU_ID
DataItem PA0WWADJ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// add flag 1
DataItem PA0WWAF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add index of error
DataItem PA0WWAID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved PA_ORD_ADJ_COMNT
DataItem PA0WWCOM char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete counter
DataItem PA0WWDC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete primary key
DataItem PA0WWDF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// o/a edit error number
DataItem PA0WWENM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error number
DataItem PA0WWERR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory record found flag
DataItem PA0WWFFD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pa0ww03 found flag
DataItem PA0WWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem PA0WWFIL num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level occurs 50 times
DataItem PA0WWGP2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level occurs 50 times
DataItem PA0WWGP3 char(58)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level occurs 50 times
DataItem PA0WWGP4 char(58)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'hold' label
DataItem PA0WWHLD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max index for pa0ww02 table
DataItem PA0WWMX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max index for pa0ww03 table
DataItem PA0WWMX3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max index for pa0ww00 o/as
DataItem PA0WWMX4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// o/a passed indicator
DataItem PA0WWOAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id day
DataItem PA0WWPDD char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// screen page number
DataItem PA0WWPG1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen page to number
DataItem PA0WWPG2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id month
DataItem PA0WWPMM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_MO_RNG
DataItem PA0WWPO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// primary o/a number
DataItem PA0WWPOA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id day
DataItem PA0WWPOD char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id month
DataItem PA0WWPOM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id year
DataItem PA0WWPOY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id year
DataItem PA0WWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// relationship desc updated
DataItem PA0WWRDU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// related o/a flag
DataItem PA0WWREL char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// related o/a flag
DataItem PA0WWRF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report to factory update flag
DataItem PA0WWRFU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection field
DataItem PA0WWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flag
DataItem PA0WWSF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save primary o/a number
DataItem PA0WWSOA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save related o/a add/delete
DataItem PA0WWSRO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save top line of page
DataItem PA0WWSTL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch 1
DataItem PA0WWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PA0WWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remove o/a flag
DataItem PA0WWXF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remove o/a flag
DataItem PA0WWXF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// empty display
DataItem PA0WWXF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

