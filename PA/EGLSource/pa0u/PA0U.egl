package pa0u;
import corpcom1.CAFROMAP;
import corpcom1.CAUSERA;
import corpcom2.XX0XW01;
import corpcom2.YSMREC;
import corpcom3.XPPA001;
import corpcom3.XPPA020;
import corpcom4.XSEXIT;
import corpcom4.XSPAS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XX1;
import corpcom7.XX2;
import corpcom7.XX3;
import corpcom7.XX4;
import corpcom7.XX5;
import corpcom7.XXXMODID;
import corpcom7.XXXMSGNO;
import corpcom7.XXXPRCNM;
import corpy2.YSMXDV;
import fb.common.FB9COFTM;
import fb.common.FB9REC;
import ku.common.KUMREC;
import op.common.OP1CUNDT;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP1REC;
import op.common.OP2KEY;
import op.common.OP2LNINB;
import op.common.OP2REC;
import pa.common.*;
import pc.common.PC2CUXID;
import pc.common.PC2REC;
import pc.common.PC3POIDT;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VPRDCU02;
import vv.common.VSOPOX01;
import vv.common.VSOPOX01-GROUP;
import xx.common.*;
import xx.common.KUCCOID;
import xx.common.KUMSTRID;
import xx.common.XNXCD;
import xx.common.XWHCD;
import xx.common.ZZZCHGCT;
import xx.common.ZZZCHGDT;
import xx.common.ZZZCHGTM;
import xx.common.ZZZSDT;
import xx02.*;
import xx02.XDMCD;
import xx02.XDSCD;
import xx07.*;
import xx07.YETCD;
import xx08.*;
import xx08.SY1STNBR;
//*** PROGRAM=PA0U ****
// This program allows the user to add sales orders added in
// the last 24 hours.
// 
// Program entry is supported through pfkey usage from pa0q
// only.
// 
// Upon entry the user should key in sales order number and
// either the customer cross ref number or the customer number.
// The program will then access the database, display customer
// need date and add the sales order to the DPRODA.VSOPOX01
// table.
// 
// PF keys transfer control to other 'PA' applications.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 11/27/91   DFRANC   New application.
// 12/23/91   MSMIT2   WALKTHOUGH CORRECTIONS
// 05/01/92   MSMIT2   PROCESSING CHANGES:
//                     1. DON'T REQUIRE CUSTOMER INFORMATION
//                     2. WHEN PROCESSING BY CUSTOMER, ADD ALL
//                        STYLES ASSOCIATED WITH THE SALES
//                        ORDER.
// 07/20/92   MSMIT2   CUST NEED DATE FOR PO ID 921012 =
//                     9301 (NOT 9201).
// 06/22/93   MSMIT2   FOR NIL OVERRUNS, DON'T CHECK TO SEE IF
//                     THE CUSTOMER NEED DATE WITHIN BUY MONTH
//                     RANGE.
// 07/12/93   MSMIT2   XSPAS01 CHANGED.
// 08/27/93   MSMIT2   PA0344: ALLOW ADDITION OF FUTURE SALES
//                     ORDERS.
// 10/19/93   MSMIT2   PA0344: OVERRUN SOS MUST HAVE POID
//                     FY0605.
// 12/15/93   MSMIT2   PA9999: INCORRECTLY ADDING SO WITH WRONG
//                     PO ID FOR OTHER DIVISION.
// 05/02/94   MSMIT2   PA302: CHANGE PA0UW02 - PASSED RECORD
//                     FROM PA0Q.
// 01/25/95   MSMIT2   EXPAND SALES ORDER NUMBER FIELDS.
// 08/29/95   JCARL1   PUT IN OVERRIDES FOR CANADIAN WAREHOUSE
//                     ON WAREHOUSE CODE AND DIRECT SHIP CODE.
// 01/23/96   JCARL1   Change warehouse lookup for warehouse
//                     customers to go against the Sumcd01
//                     table instead of the XWH0001 table.
//                     This is because the customers prop
//                     orders come from the XWH0001 table.
// 07/25/96   WROBIN   Change warehouse lookup for warehouse
//                     customers to go against the PRDCU02
//                     table instead of the SUMCD01 table.
// 02/27/97   WROBIN   Increase table size for Sales Order
//                     items.
// Y2KFIX   12/12/97  DKENNY  Y2K MODIFICATIONS MADE:
//                            Application regenerated to
//                            pick up new XX0XS01.
// 09/08/99   sramas   y2k bug fixed in pa0u-51801 and appl
//                     regenerated.
// *********************
Program PA0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PA00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB9REC FB9REC; // record
  KUMREC KUMREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PA0UW01 PA0UW01; // record
  PA0UW02 PA0UW02; // record
  PA0UW03 PA0UW03; // record
  PA0UW04 PA0UW04; // record
  PA0UW05 PA0UW05; // record
  PAWREC PAWREC; // record
  PC2REC PC2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPRDCU02 VPRDCU02; // record
  VSOPOX01 VSOPOX01; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PA0UM.PA0UM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPA001: XPPA001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    set PA0UW01 empty;
    set PA0UW02 empty;
    set PA0UW03 empty;
    set PA0UW04 empty;
    set PA0UW05 empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set PA0UM001 initial; /* Initialize map1 output area*/
    ;
    XPPA020: XPPA020();
     /* -------------------- flow section of xppa020 ---------------*/
    ;
    if (converseVar.validationMsgNum == 10) /* Error obtaining current buy date*/
      converseLib.clearScreen();
       /* Clear the map*/
    end
    ;
    PA0U-001: PA0U-001();
     /* no flow*/
    PA0U-002: PA0U-002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Order Adjustment Factory Add process.*/
     /* ------------------------------------------------------------*/
    ;
    goto PA0U-002;
    ;
    ;
  end // end main
end // end PA0U

// Special initialization
Function PA0U-001()
   /* ------------------------------------------------------------*/
   /* This process will perform any special initializtion that is*/
   /* unique to an application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP != "PA0Q")
    PAWREC.XXXMSGNO = 253;
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSPAS01();
  end
  PA0UW01.PA0UW-XXXMODID = PAWREC.XXXMODID; /* Message number*/
  ;
  PA0UW01.PA0UW-PC3POIDT = PAWREC.PAWBUYDT; /* SCREEN BUY DATE*/
  ;
  move PAWREC to PA0UW02 withV60Compat; /* Redefines of PAWREC*/
  ;
  PA0UW01.XX1 = 1; /* Set index at 1*/
  ;
  PA0UW01.XX2 = 1; /* Set index at 1*/
  XX0XS01(); /* Obtain current date*/
  ;
end // end PA0U-001

// Process o/a numbers in a list
Function PA0U-002()
   /* ------------------------------------------------------------*/
   /* 1) obtain data*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  PA0U-100(); /* Obtain the data to display*/
  ;
  PA0U-200(); /* Format and display the map*/
  ;
  PA0U-300(); /* Check attention identifier*/
  ;
  PA0U-400(); /* Reset fields to normal intensity*/
  ;
  PA0U-500(); /* Verify the entered data*/
  ;
  PA0U-600(); /* Process valid input request*/
  ;
  ;
end // end PA0U-002

// Obtain the data to display
Function PA0U-100()
   /* ------------------------------------------------------------*/
   /* Obtain Data to display*/
   /* ------------------------------------------------------------*/
  ;
  set FB9REC empty; /* Clear Current Buy date record*/
  set OP1REC empty; /* Clear Order header record*/
  set OP2REC empty; /* Clear Original line item record*/
  set VSOPOX01 empty; /* Clear sriginal line item record*/
  set PC2REC empty; /* Clear Prod Cust XREF record*/
  ;
   /* ------------------ End of Process PA0U-100 ------------------*/
  ;
end // end PA0U-100

// Format and display the map
Function PA0U-200()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0UW02.YETCD == "NO")
    set PA0UM001.PA0UM-BEG-LABEL skip, invisible;
    set PA0UM001.PA0UM-BEG-DATE skip, invisible;
    set PA0UM001.PA0UM-END-LABEL skip, invisible;
    set PA0UM001.PA0UM-END-DATE skip, invisible;
  end
  ;
  if (converseVar.validationMsgNum == 0) /* No errors*/
    PA0U-210(); /* Format the map*/
  else
    PA0UW01.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    PA0U-220(); /* Format the map*/
  end
  ;
  if (PAWREC.XXXMSGNO != 0)
    PA0UM001.PA0UM-XXXMODID = "200"; /* Module id*/
    if (PAWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PAWREC.XXXMSGNO);
    end /* Message number*/
    PAWREC.XXXMSGNO = 0;
    set PA0UM001 alarm; /* Indicate sound alarm*/
  end
  ;
  if (PA0UW01.XXXMSGNO != 0)
    PA0UM001.PA0UM-XXXMODID = PA0UW01.PA0UW-XXXMODID; /* Module id*/
    if (PA0UW01.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PA0UW01.XXXMSGNO);
    end /* Message number*/
    set PA0UM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse PA0UM001 ;
  ;
  PA0UW01.PA0UW-XXXMODID = " "; /* Module id*/
  PA0UW01.XXXMSGNO = 0; /* Reset message number*/
  ;
  COMMAREA.CATOAP = PA0UM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PA0UM001.CAITEM; /* Application data*/
  ;
   /* ------------------ end of process PA0U-200 ------------------*/
  ;
end // end PA0U-200

// FORMAT DATE RANGES
Function PA0U-210()
   /* ------------------------------------------------------------*/
   /* CLEAR THE FIELDS IN THE MAP STORAGE AREA TO BE FORMATTED.*/
   /* ------------------------------------------------------------*/
  ;
  set PA0UM001 initial; /* M001 INPUT/OUTPUT AREA*/
  ;
   /* ------------------------------------------------------------*/
   /* FORMAT THE DATA IN THE HEADER PORTION OF THE MAP.*/
   /* ------------------------------------------------------------*/
  ;
  PA0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* CURRENT DATE*/
  PA0UM001.PA0UM-XXXMODID = "210"; /* MODULE NUMBER*/
  ;
   /* ------------------------------------------------------------*/
   /* FORMAT THE SALES ORDER CUSTOMER NEED DATE RANGES.*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0UW02.PA0UW-BEG-CCYYMMDD == 0)
    return;
  end
  ;
  if (PA0UW02.YETCD == "NO")
    set PA0UM001.PA0UM-BEG-LABEL skip, invisible;
    set PA0UM001.PA0UM-BEG-DATE skip, invisible;
    set PA0UM001.PA0UM-END-LABEL skip, invisible;
    set PA0UM001.PA0UM-END-DATE skip, invisible;
    return;
  end
  ;
   /* FORMAT THE BEGINNING DATE RANGE*/
  ;
  PA0UM001.PA0UM-BEG-DATE = PA0UW02.PA0UW-BEG-CCYYMMDD;
  ;
   /* IF THE ENDING SALES ORDER CUSTOMER NEED DATE IS EMPTY, FIND*/
   /* THE LAST DAY OF THE BEGINNING MONTH.*/
  ;
  if (PA0UW02.PA0UW-END-CCYYMMDD == 0)
    ;
    set TA2REC empty;
    ;
    TA2REC.TA2GRGGN = PA0UW02.PA0UW-BEG-CCYYMMDD;
    ;
    PA0US-13-TA0040-G();
    ;
    if (TA2REC.TA2RTNCD != 0)
      set PA0UM001.PA0UM-BEG-DATE bold;
      converseLib.validationFailed(22); /* DATE INVALID*/
      return;
    end
    ;
    PA0UM001.PA0UM-END-DATE = TA2REC.TA2GRGEN;
    ;
  else
    ;
    PA0UW01.PA0UW-MAP-OP1CUNDT-MM = PA0UW02.PA0UW-END-MM;
    PA0UW01.PA0UW-MAP-OP1CUNDT-1 = "/";
    PA0UW01.PA0UW-MAP-OP1CUNDT-2 = "/";
    PA0UW01.PA0UW-MAP-OP1CUNDT-YY = PA0UW02.PA0UW-END-YY;
    ;
    set TA2REC empty;
    ;
    TA2REC.TA2GRGGN = PA0UW02.PA0UW-END-CCYYMMDD;
    ;
    PA0US-13-TA0040-G();
    ;
    if (TA2REC.TA2RTNCD != 0)
      set PA0UM001.PA0UM-END-DATE bold;
      converseLib.validationFailed(22); /* DATE INVALID*/
      return;
    end
    ;
    PA0UM001.PA0UM-END-DATE = TA2REC.TA2GRGEN;
    ;
  end
  ;
  ;
   /* ---------------------- PA0U-210 -----------------------------*/
end // end PA0U-210

// Format the data on the map
Function PA0U-220()
   /* ------------------------------------------------------------*/
   /* Format the data in the header portion of the map*/
   /* ------------------------------------------------------------*/
  ;
  PA0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current system date*/
  PA0UM001.PA0UM-XXXMODID = "220"; /* Module number*/
  ;
  PA0UW01.XX4 = 1;
  while (PA0UW01.XX4 <= 9)
    if (PA0UM001.OP1CUOID[XX4] <= 0)
      PA0UM001.PA0UM-OP1CUNDT[XX4] = " ";
    end
    PA0UW01.XX4 = PA0UW01.XX4 + 1;
  end
  ;
   /* ------------------ End of Process PA0U-220 ------------------*/
  ;
end // end PA0U-220

// Check attention identifier
Function PA0U-300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "PA0Q";
    XSPAS01(); /* clear map fields*/
  end
  ;
  if (PA0UM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = PA0UM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PA0UM001.CAITEM; /* Application data*/
      XSPAS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set PA0UM001.CATOAP cursor, modified, bold; /* Highlight*/
    PA0UW01.PA0UW-XXXMODID = "300"; /* Module id*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf5)
      COMMAREA.CATOAP = "FY0M";
    end
    ;
    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PA0UM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end
    ;
    XSPAS01(); /* Exit to another application*/
    PA0UW01.PA0UW-XXXMODID = "300"; /* Module id*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf3) /* RETURN TO PA0Q*/
    PA0UM001.CATOAP = "PA0Q";
    PA0US-00-FAST-PATH();
    COMMAREA.CAUSERA = PAWREC.CAUSERA;
    XSEXIT();
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf12) /* reset screen*/
    PA0UW01.PA0UW-REQUEST-FOR-DATA = "N"; /* Request for no data*/
    set PA0UM001 initial;
    exit stack;
    PA0U-001();
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* and not PF9 accept*/
    PA0UW01.PA0UW-XXXMODID = "300"; /* Module id*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end
   /* ------------------ End of Process PA0U-300 ------------------*/
  ;
end // end PA0U-300

// Reset highlighted fields
Function PA0U-400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set PA0UM001.PA0UM-BEG-LABEL initialAttributes;
  set PA0UM001.PA0UM-BEG-DATE initialAttributes;
  set PA0UM001.PA0UM-END-LABEL initialAttributes;
  set PA0UM001.PA0UM-END-DATE initialAttributes;
  ;
  PA0UW01.XX4 = 1;
  while (PA0UW01.XX4 <= 9)
    set PA0UM001.OP1CUOID[XX4] initialAttributes; /* CUSTOMER ORDER ID*/
    set PA0UM001.OP1NORID[XX4] initialAttributes; /* NIKE ORDER ID*/
    set PA0UM001.PC2CUXID[XX4] initialAttributes; /* CUSTOMER XREF*/
    set PA0UM001.KUCCOID[XX4] initialAttributes; /* CUSTOMER COMPANY ID*/
    set PA0UM001.KUMSTRID[XX4] initialAttributes; /* CUSTOMER STORE ID*/
    set PA0UM001.XNXCD[XX4] initialAttributes; /* DEPARTMENT ID*/
    set PA0UM001.PA0UM-OP1CUNDT[XX4] initialAttributes; /* CUSTOMER NEED DATE*/
    PA0UW01.XX4 = PA0UW01.XX4 + 1;
  end
  ;
  set PA0UM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PA0UM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
   /* ------------------ end of process PA0U-400 ------------------*/
  ;
end // end PA0U-400

// Verify the entered data
Function PA0U-500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0UM001.CAITEM > " ") /* Application data was entered*/
    set PA0UM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PA0UW01.PA0UW-XXXMODID = "500"; /* Module identification*/
    exit stack; /* Flow to converse map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf9
   || converseVar.eventKey is enter)
    PA0UW01.XX1 = 9; /* set screen processing index*/
    PA0UW01.XX2 = 1; /* set update record index*/
    PA0UW01.XX4 = 1; /* set update record index*/
    set PA0UW05 empty;
    while (PA0UW01.XX1 > 0)
      PA0U-510(); /* validate modifiable data*/
      PA0UW01.XX1 = PA0UW01.XX1 - 1; /* decriment index*/
    end
  end
  ;
   /* ---------------- End of Process PA0U-500 --------------------*/
  ;
end // end PA0U-500

// Validate modifiable data
Function PA0U-510()
   /* ------------------------------------------------------------*/
   /* VALIDATE MODIFIABLE DATA - EVALULATE THE BOTTOM OF THE*/
   /* SCREEN TO THE TOP.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* IF NO INFORMATION ENTERED ON THE LINE, GO TO NEXT LINE*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0UM001.OP1CUOID[XX1] == 0
   && PA0UM001.OP1NORID[XX1] == 0)
    return;
  end
  ;
   /* VALIDATE NIKE ORDER ID*/
  ;
  if (PA0UM001.OP1NORID[XX1] == 0)
    PA0UM001.OP1NORID[XX1] = 1; /* DEFAULT NIKE ORDER ID TO 1*/
  end
  ;
   /* VALIDATE CUSTOMER ORDER ID*/
  ;
  if (PA0UM001.OP1CUOID[XX1] == 0)
    set PA0UM001.OP1CUOID[XX1] cursor, bold;
    PA0UW01.PA0UW-XXXMODID = "510";
    converseLib.validationFailed(241); /* ENTER SALES ORDER NUMBER*/
    return;
  end
  ;
  if (converseVar.validationMsgNum == 24)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Read Sales Order Header IOMOD IO0430.*/
   /* Determine Customer Need Date Range.*/
   /* ------------------------------------------------------------*/
  ;
  set OP1REC empty;
  ;
   /* DETERMINE THE ORDER PART CHARACTER AND LOAD SALES ORDER KEY*/
  ;
  PA0UW01.PA0UW-OP1CUOID = PA0UM001.OP1CUOID[XX1];
  OP1REC.OP1PARTN = PA0UW01.PA0UW-OP1PARTN;
  OP1REC.OP1CUOID = PA0UM001.OP1CUOID[XX1];
  OP1REC.OP1NORID = PA0UM001.OP1NORID[XX1];
  ;
  PA0US-10-IO0430-S(); /* GET SALES ORDER HEADER*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    set PA0UM001.OP1CUOID[XX1] cursor, bold;
    set PA0UM001.OP1NORID[XX1] bold;
    PA0UW01.PA0UW-XXXMODID = "510";
    converseLib.validationFailed(231); /* SALES ORDER HEADER NOT FOUND*/
    return;
  end
  ;
  PA0U-514(); /* Process Sales Order Header*/
  ;
  PA0U-515(); /* Validate customer need date*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  PA0U-517(); /* CHECK TO SEE IF INFORMATION ENTERED*/
                                   /* TWICE*/
  ;
  if (PA0UW01.PA0UW-DUP-LINE == "Y") /* DUPLICATE LINE ENTERED*/
    return;
  end
  ;
  set OP2REC empty;
  ;
  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = OP1REC.OP1NORID;
  ;
  PA0US-07-IO0440-SS(); /* Use SS to scan sales order item table*/
  ;
  PA0US-08-IO0440-SN(); /* GET FIRST RECORD*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    if (OP2REC.XGPCD == "02")
      if (OP2REC.OP2LNIST == "OP" /* OPEN*/
       || OP2REC.OP2LNIST == "PS" /* PARTIALLY SHIPPED*/
       || OP2REC.OP2LNIST == "XL") /* CANCELLED*/
        PA0U-519(); /* LOAD WORKING STORAGE UPDATE TABLE*/
      end
    end
    ;
    PA0US-08-IO0440-SN(); /* Use SN to scan next SO item record*/
    ;
  end
  ;
  PA0US-09-IO0440-CS(); /* Use SC to close sales order item*/
                                   /* table*/
  ;
  ;
   /* ------------- End of process PA0U-510 -----------------------*/
  ;
end // end PA0U-510

// PROCESS SALES ORDER HEADER
Function PA0U-514()
   /* ------------------------------------------------------------*/
   /* PROCESS SALES ORDER HEADER*/
   /* ------------------------------------------------------------*/
  ;
  if (OP1REC.XGPCD != "02")
    set PA0UM001.OP1CUOID[XX1] cursor, bold;
    set PA0UM001.OP1NORID[XX1] bold;
    PA0UW01.PA0UW-XXXMODID = "514";
    converseLib.validationFailed(257); /* SALES ORDER NOT A FOOTWEAR SALES ORDER*/
    return;
  end
  ;
  if (OP1REC.XOCCD == "IN") /* INTERNATIONAL*/
    set PA0UM001.OP1CUOID[XX1] cursor, bold;
    set PA0UM001.OP1NORID[XX1] bold;
    PA0UW01.PA0UW-XXXMODID = "514";
    converseLib.validationFailed(258); /* SALES ORDER CAN'T BE FOR INTERNATIONAL*/
    return;
  end
  ;
  if (OP1REC.XOSCD != "OP" /* NOT OPEN*/
   && OP1REC.XOSCD != "PS" /* NOT PARTIALLY SHIPPED*/
   && OP1REC.XOSCD != "XL") /* NOT CANCELLED*/
    set PA0UM001.OP1CUOID[XX1] cursor, bold;
    set PA0UM001.OP1NORID[XX1] bold;
    PA0UW01.PA0UW-XXXMODID = "514";
    converseLib.validationFailed(259); /* SO NOT OPEN, PARTIALLY CHIPPED, & CANCELLED*/
    return;
  end
  ;
  if (OP1REC.XOBCD != "F1"
   && OP1REC.XOBCD != "F2"
   && OP1REC.XOBCD != "F3"
   && OP1REC.XOBCD != "F4"
   && OP1REC.XOBCD != "DS")
    set PA0UM001.OP1CUOID[XX1] cursor, bold;
    set PA0UM001.OP1NORID[XX1] bold;
    PA0UW01.PA0UW-XXXMODID = "514";
    converseLib.validationFailed(260); /* MUST BE A FUTURE OR DIRECT SHIP SALES ORDER*/
    return;
  end
  ;
  if (OP1REC.XDVCD == "01")
    set PC2REC empty;
    PC2REC.XGPCD = "02";
    PC2REC.KUCCOID = OP1REC.KUCCOID;
    PC2REC.KUMSTRID = OP1REC.KUMSTRID;
    PC2REC.XNXCD = OP1REC.XNXCD;
    PC2REC.PC-PRDCU-APAO-FL = " ";
    PA0US-02-IO3340-SA();
    if (SQLCA.VAGen_SQLCODE == 0)
      if (PC2REC.XCTCD == "CANA")
        set PA0UM001.OP1CUOID[XX1] cursor, bold;
        set PA0UM001.OP1NORID[XX1] bold;
        PA0UW01.PA0UW-XXXMODID = "514";
        converseLib.validationFailed(349); /* Skip Canada Division 1 Sales Order*/
        return;
      end
    end
  end
  ;
  ;
   /* ------------- End of process PA0U-514 ----------------------*/
  ;
end // end PA0U-514

// Validate Customer Need Date
Function PA0U-515()
   /* ------------------------------------------------------------*/
   /* Determine Customer Need Date Range (YYMM).*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* PA0Q HAS PASSED THE PO ID MONTH RANGE IN PAWREC.*/
   /* ------------------------------------------------------------*/
  ;
  PA0UW01.PA0UW-PC3POIDT = PA0UW02.PC3POIDT;
  ;
   /* ------------------------------------------------------------*/
   /* DETERMINE THE SUMMARY DIVISION CODE.*/
   /* ------------------------------------------------------------*/
  ;
  set YSMREC empty;
  ;
  YSMREC.YSMTBLPF = "XDV";
  YSMREC.YSMSYSPF = "PA";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSRCVL = OP1REC.XDVCD;
  ;
  PA0US-12-IO2640-S();
  ;
  PA0UW01.YSMXDV = YSMREC.YSMSUMCD;
  ;
   /* ------------------------------------------------------------*/
   /* FOR NIL ORDERS, THE VALID NEED DATE YEAR AND MONTH IS EQUAL*/
   /* TO THE BUY DATE YEAR AND MONTH.  IF THE BUY MONTH IS 01 OR*/
   /* 02, THEN 1 MUST BE ADDED TO THE YEAR.  FOR EXAMPLE:  IF THE*/
   /* PO ID IS 911101, THE CUSTOMER NEED DATE IS 199201.*/
   /* ------------------------------------------------------------*/
  ;
  if (PA0UW01.YSMXDV == "20") /* NIL ORDER*/
    ;
    PA0UW01.PA0UW-PA1BUYMO-MM = PA0UW01.PA0UW-PC3POIDT-BUY-MM;
    PA0UW01.PA0UW-PA1BUYMO-YY = PA0UW01.PA0UW-PC3POIDT-YY;
    ;
    if (PA0UW01.PA0UW-PC3POIDT-BUY-MM == 01
     || PA0UW01.PA0UW-PC3POIDT-BUY-MM == 02)
      if (PA0UW01.PA0UW-PC3POIDT-YY == 99)
        PA0UW01.PA0UW-PA1BUYMO-YY = 00;
      else
        PA0UW01.PA0UW-PA1BUYMO-YY = PA0UW01.PA0UW-PA1BUYMO-YY + 1;
      end
    end
    ;
  else
    ;
   /* ------------------------------------------------------------*/
   /* FOR DOMESTIC ORDERS, THE NEED DATE YEAR AND MONTH IS EQUAL*/
   /* TO THE BUY DATE YEAR AND MONTH + 1.  IF THE BUY MONTH IS 12,*/
   /* 01, OR 02 - THEN 1 MUST BE ADDED TO THE YEAR. FOR EXAMPLE: IF*/
   /* THE PO ID IS 911101, THE CUSTOMER NEED DATE YEAR AND MONTH*/
   /* IS 9202.  ANY CUSTOMER NEED DATE THAT FALLS IN FEB. 1992 IS*/
   /* WITHIN THE BUY MONTH RANGE.  IF THE CUSTOMER NEED DATE IS*/
   /* OUTSIDE THE RANGE, DISPLAY AND HIGHLIGHT THE CUSTOMER NEED*/
   /* DATE AND OUTPUT AN ERROR MESSAGE.*/
   /* ------------------------------------------------------------*/
    ;
    PA0UW01.PA0UW-PA1BUYMO-YY = PA0UW01.PA0UW-PC3POIDT-YY;
    ;
    if (PA0UW01.PA0UW-PC3POIDT-BUY-MM == 12
     || PA0UW01.PA0UW-PC3POIDT-BUY-MM == 01
     || PA0UW01.PA0UW-PC3POIDT-BUY-MM == 02)
      if (PA0UW01.PA0UW-PC3POIDT-YY == 99)
        PA0UW01.PA0UW-PA1BUYMO-YY = 00;
      else
        PA0UW01.PA0UW-PA1BUYMO-YY = PA0UW01.PA0UW-PA1BUYMO-YY + 1;
      end
    end
    ;
    PA0UW01.PA0UW-PA1BUYMO-MM = PA0UW01.PA0UW-PC3POIDT-BUY-MM + 1;
    ;
    if (PA0UW01.PA0UW-PA1BUYMO-MM > 12)
      PA0UW01.PA0UW-PA1BUYMO-MM = PA0UW01.PA0UW-PA1BUYMO-MM - 12;
    end
    ;
  end
  ;
   /* FORMAT CUSTOMER NEED DATE FOR MAP DISPLAY*/
  ;
  PA0UW01.PA0UW-OP1CUNDT = OP1REC.OP1CUNDT;
  ;
  PA0U-516(); /* FORMAT CUSTOMER NEED DATE FOR MAP DISPLAY*/
  ;
   /* MKS: 06/22/93*/
  if (PA0UW02.YETCD == "NO") /* 06/22/93*/
    return;
  end
  ;
  if (PA0UW01.PA0UW-OP1CUNDT-YY == PA0UW01.PA0UW-PA1BUYMO-YY
   && PA0UW01.PA0UW-OP1CUNDT-MM == PA0UW01.PA0UW-PA1BUYMO-MM)
    return;
  end
  ;
  if (PA0UW01.PA0UW-OP1CUNDT-YY != 0
   || PA0UW01.PA0UW-OP1CUNDT-MM != 0)
    if (PA0UW01.PA0UW-OP1CUNDT > PA0UW02.PA0UW-END-CCYYMMDD)
        /* NEXT SENTENCE*/
    else
      return;
    end
  end
  ;
  set PA0UM001.OP1CUOID[XX1] cursor, bold;
  set PA0UM001.OP1NORID[XX1] bold;
  set PA0UM001.PA0UM-OP1CUNDT[XX1] bold, protect;
  PA0UW01.PA0UW-XXXMODID = "515";
  converseLib.validationFailed(230); /* date not within range*/
  ;
   /* ------------- End of process PA0U-515 ----------------------*/
  ;
end // end PA0U-515

// MOVE CUST INFO TO MAP
Function PA0U-516()
   /* ------------------------------------------------------------*/
   /* FORMAT THE CUSTOMER XREF AND CUSTOMER NUMBER FOR MAP*/
   /* DISPLAY.  ALSO, SKIP ANY DIVISION '10' WAREHOUSE SALES ORDERS.*/
   /* OVERRIDE WHSE AND DIRECT SHIP CODE FOR WAREHOUSE SALES ORDERS.*/
   /* ------------------------------------------------------------*/
  ;
  PA0UM001.KUCCOID[XX1] = OP1REC.KUCCOID;
  PA0UM001.KUMSTRID[XX1] = OP1REC.KUMSTRID;
  PA0UM001.XNXCD[XX1] = OP1REC.XNXCD;
  ;
  PA0UW01.KUCCOID[XX1] = OP1REC.KUCCOID;
  PA0UW01.KUMSTRID[XX1] = OP1REC.KUMSTRID;
  PA0UW01.XNXCD[XX1] = OP1REC.XNXCD;
  ;
   /* ------------------------------------------------------------*/
   /* GIVEN CUSTOMER NUMBER DETERMINE CUSTOMER XREF.*/
   /* ------------------------------------------------------------*/
  ;
  set PC2REC empty;
  set VPRDCU02 empty;
  set KUMREC empty;
  PC2REC.XGPCD = "02";
  PC2REC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUCCOID = OP1REC.KUCCOID;
  PC2REC.KUMSTRID = OP1REC.KUMSTRID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;
  PC2REC.XNXCD = OP1REC.XNXCD;
  ;
   /* PA0U IS PROCESSING ONLY THE MVSPROD CUSTOMER'S SALES ORDERS*/
  ;
  PC2REC.PC-PRDCU-APAO-FL = " "; /* MVSPROD CUSTOMER*/
  ;
  PA0US-02-IO3340-SA();
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    PA0UM001.PC2CUXID = "N/A";
  else
    PA0UM001.PC2CUXID[XX1] = PC2REC.PC2CUXID;
    PA0UW01.PC2CUXID[XX1] = PC2REC.PC2CUXID;
    if (PC2REC.PC-PRDCU-APAO-FL == "W") /* check for warehouse customer*/
      VPRDCU02.XGPCD = "02";
      VPRDCU02.PC2CUXID = PC2REC.PC2CUXID;
      PA0US-VPRDCU02-S();
      if (SQLCA.VAGen_SQLCODE == 0)
        OP1REC.XDSCD = "2";
        OP1REC.XWHCD = VPRDCU02.XWHCD;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* FORMAT THE CUSTOMER NEED DATE FOR MAP DISPLAY.*/
   /*  */
   /* LOAD CUSTOMER NEED DATE INTO PA0UW01.PA0UW-OP1CUNDT;*/
   /* ------------------------------------------------------------*/
  ;
  PA0UM001.PA0UM-OP1CUNDT[XX1] = PA0UW01.PA0UW-OP1CUNDT;
  ;
   /* ------------- End of process PA0U-516 ----------------------*/
  ;
end // end PA0U-516

// CHECK FOR DUPLICATED INFO
Function PA0U-517()
   /* ------------------------------------------------------------*/
   /* CHECK TO SEE IF THE SAME INFORMATION WAS ENTERED ON TWO*/
   /* DIFFERENT LINES.  IF SO, SKIP DUPLICATE RECORD*/
   /* ------------------------------------------------------------*/
  ;
  PA0UW01.XX3 = 1;
  while (PA0UW01.XX3 < PA0UW01.XX4
   && PA0UW01.XX3 <= 9) /* MAXIMUM NUMBER OF ENTRIES*/
    ;
    if (PA0UM001.OP1CUOID[XX1] == PA0UW05.OP1CUOID[XX3]
     && PA0UM001.OP1NORID[XX1] == PA0UW05.OP1NORID[XX3])
      PA0UW01.PA0UW-DUP-LINE = "Y";
      return; /* SKIP THIS RECORD, IT HAS ALREADY BEEN ENTERED*/
    end
    ;
    PA0UW01.XX3 = PA0UW01.XX3 + 1;
    ;
  end
  ;
  PA0UW05.OP1CUOID[XX4] = PA0UM001.OP1CUOID[XX1];
  PA0UW05.OP1NORID[XX4] = PA0UM001.OP1NORID[XX1];
  PA0UW01.PA0UW-DUP-LINE = "N";
  ;
  PA0UW01.XX4 = PA0UW01.XX4 + 1;
  ;
   /* ------------- End of process PA0U-517 -----------------------*/
  ;
end // end PA0U-517

// Load W.S. Update table
Function PA0U-518()
   /* ------------------------------------------------------------*/
   /* Load working storage update table*/
   /* ------------------------------------------------------------*/
  ;
  PA0UW03.OP1PARTN[XX2] = OP2REC.OP1PARTN; /* part character*/
  PA0UW03.OP1CUOID[XX2] = OP2REC.OP1CUOID; /* cust order id*/
  PA0UW03.OP1NORID[XX2] = OP2REC.OP1NORID; /* nike order id*/
  PA0UW03.OP2LNINB[XX2] = OP2REC.OP2LNINB; /* line item number*/
  PA0UW03.PC2CUXID[XX2] = PA0UW01.PC2CUXID[XX1]; /* prod cust id*/
  PA0UW03.OP1CUNDT[XX2] = OP1REC.OP1CUNDT; /* cust need date*/
  PA0UW03.SY1STNBR[XX2] = OP2REC.SY1STNBR; /* style number*/
  PA0UW03.SY2CLRID[XX2] = OP2REC.SY2CLRID; /* color id*/
  PA0UW03.XDMCD[XX2] = OP2REC.XDMCD; /* dimension code*/
  PA0UW03.XDSCD[XX2] = OP1REC.XDSCD; /* direct ship code*/
  PA0UW03.YSMXDV[XX2] = PA0UW01.YSMXDV; /* SUMMARY DIVISION CODE*/
  PA0UW03.XWHCD[XX2] = OP1REC.XWHCD; /* WAREHOUSE CODE*/
  ;
  if (PA0UW02.YETCD == "NO")
    PA0UW03.PC3POIDT[XX2] = PA0UW02.PC3POIDT;
  else
    ;
     /* DETERMINE IF THE SO IS FOR A FUTURE SALES ORDER, AND FORMAT*/
     /* PO ID MONTH RANGE.*/
    ;
   /*  */
   /* MKS 12/15/93: ALWAYS DETERMINE THE PO-ID-MO-RNG USING THE SALES*/
   /* ORDER CUSTOMER NEED DATE.  THIS IS SO THAT IF A DOMESTIC O/A WANTS*/
   /* TO ADD AN INTERNATIONAL ORDER, THE CORRECT PO-ID-MO-RNG IS WRITTEN*/
   /* TO THE DPRODA.VSOPOX01 TABLE.*/
   /*  */
    /* IF PA0UW01.PA0UW-OP1CUNDT-YY = PA0UW02.PA0UW-BEG-YY*/
    /* AND PA0UW01.PA0UW-OP1CUNDT-MM = PA0UW02.PA0UW-BEG-MM;*/
       /* MOVE PA0UW02.PC3POIDT TO PA0UW03.PC3POIDT(XX2);     /* po number*/
    /* ELSE;*/
    PA0U-51801();
    PA0UW03.PC3POIDT[XX2] = PA0UW01.PA0UW-FUTURE-PC3POIDT;
    /* END;*/
    ;
  end
  ;
  XX2 = XX2 + 1; /* Increment load index*/
  ;
  ;
   /* ------------- End of process PA0U-518 ------------------*/
  ;
end // end PA0U-518

// FORMAT PO ID MONTH RANGE
Function PA0U-51801()
   /* -------------------------------------------------------------------*/
   /* FORMAT THE PO ID MONTH RANGE FOR THE VSOPOX01 UPDATE.*/
   /*  */
   /* FOR NIL ORDERS, THE PO ID MONTH RANGE IS EQUAL TO THE NEED DATE*/
   /* MONTH AND YEAR.*/
   /*  */
   /* FOR DOMESTIC ORDERS, THE PO ID MONTH RANGE IS EQUAL TO THE CUSTOMER*/
   /* NEED DATE YEAR AND MONTH - 1.  IF THE CUSTMOER NEED DATE MONTH IS*/
   /* 01 OR 02, THEN 1 MUST BE SUBTRACTED FROM THE YEAR.  FOR EXAMPLE,*/
   /* IF THE CUSTOMER NEED DATE IS 9401, THE PO ID IS 931101.*/
   /*  */
   /* -------------------------------------------------------------------*/
  ;
  PA0UW01.PA0UW-FUTURE-PC3POIDT-CC = PA0UW01.PA0UW-OP1CUNDT-CC;
  PA0UW01.PA0UW-FUTURE-PC3POIDT-YY = PA0UW01.PA0UW-OP1CUNDT-YY;
  PA0UW01.PA0UW-FUTURE-PC3POIDT-BUY-MM = PA0UW01.PA0UW-OP1CUNDT-MM;
  ;
  if (PA0UW01.YSMXDV == "10") /* DOMESTIC ONLY*/
    PA0UW01.PA0UW-FUTURE-PC3POIDT-BUY-MM = PA0UW01.PA0UW-FUTURE-PC3POIDT-BUY-MM - 1;
    if (PA0UW01.PA0UW-FUTURE-PC3POIDT-BUY-MM == 0)
      PA0UW01.PA0UW-FUTURE-PC3POIDT-BUY-MM = 12;
      if (PA0UW01.PA0UW-FUTURE-PC3POIDT-YY == 00)
        PA0UW01.PA0UW-FUTURE-PC3POIDT-YY = 99;
        PA0UW01.PA0UW-FUTURE-PC3POIDT-CC = PA0UW01.PA0UW-FUTURE-PC3POIDT-CC - 1;
      else
        PA0UW01.PA0UW-FUTURE-PC3POIDT-YY = PA0UW01.PA0UW-FUTURE-PC3POIDT-YY - 1;
      end
    end
  end
  ;
   /* SUBTRACT TWO MONTHS*/
  ;
  PA0UW01.PA0UW-FUTURE-PC3POIDT-MM = PA0UW01.PA0UW-FUTURE-PC3POIDT-BUY-MM - 2;
  ;
  if (PA0UW01.PA0UW-FUTURE-PC3POIDT-MM <= 0)
    if (PA0UW01.PA0UW-FUTURE-PC3POIDT-YY == 0)
      PA0UW01.PA0UW-FUTURE-PC3POIDT-YY = 99;
    else
      PA0UW01.PA0UW-FUTURE-PC3POIDT-YY = PA0UW01.PA0UW-FUTURE-PC3POIDT-YY - 1;
    end
    PA0UW01.PA0UW-FUTURE-PC3POIDT-MM = PA0UW01.PA0UW-FUTURE-PC3POIDT-MM + 12;
  end
  ;
  if (PA0UW01.PA0UW-FUTURE-PC3POIDT-YY > 60)
    PA0UW01.PA0UW-FUTURE-PC3POIDT-CC = 19;
  else
    PA0UW01.PA0UW-FUTURE-PC3POIDT-CC = 20;
  end
  ;
   /* ------------------ End of Process PA0U-51801 ---------------*/
  ;
end // end PA0U-51801

// Load W.S. Update table
Function PA0U-519()
   /* ------------------------------------------------------------*/
   /* Load working storage update table*/
   /* ------------------------------------------------------------*/
  ;
   /* ONLY LOAD THE SO INFORMATION IF THE SALES ORDER IS NOT*/
   /* ALREADY ON THE VSOPOX01 TABLE.  TO CHECK THIS, LOOK AT THE*/
   /* RECORDS IN PA0UW05.*/
  ;
  PA0UW01.XX4 = 1;
  while (PA0UW01.XX4 <= 100
   && PA0UW01.XX4 <= PA0UW04.PA0UW-OP2KEY-MAX)
    ;
    if (OP2REC.OP2KEY == PA0UW04.OP2KEY[XX4])
      return;
    end
    ;
    PA0UW01.XX4 = PA0UW01.XX4 + 1;
    ;
  end
  ;
  PA0U-518();
  ;
  ;
   /* ------------- End of process PA0U-519 ------------------*/
  ;
end // end PA0U-519

// Process valid input request
Function PA0U-600()
   /* ------------------------------------------------------------*/
   /* Process valid input request*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* enter pressed*/
    converseLib.validationFailed(30); /* ; press pf9 to accept*/
    return; /* ; return to display map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf9) /* pf9   pressed*/
    PA0U-610(); /* Update SP/PO cross reference table*/
    if (converseVar.validationMsgNum <= 0)
      converseLib.validationFailed(1);
      ;
      COMMAREA.CATOAP = "PA0Q"; /* TRANSFER TO PA0Q*/
      ;
      XSPAS01(); /* Transfer to another program*/
      ;
      return; /* ; commarea*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------ end of process PA0U-600 ------------------*/
end // end PA0U-600

// Process valid input request
Function PA0U-610()
   /* ------------------------------------------------------------*/
   /* Update the SO/PO Cross Reference Table*/
   /* ------------------------------------------------------------*/
  ;
  XX2 = XX2 - 1; /* Decr by 1 for true record count*/
  ;
  move XX2 to XX3 withV60Compat; /* Total load records read in*/
  ;
  XX2 = 1; /* Set index*/
  ;
  while (XX2 <= XX3)
    ;
     /* CHECK TO SEE IF THE RECORD IS ALREADY ON THE VSOPOX01 TABLE.*/
     /* IF IT IS, SKIP THE RECORD.*/
    ;
    set VSOPOX01 empty;
    ;
    VSOPOX01.OP1CUOID = PA0UW03.OP1CUOID[XX2];
    VSOPOX01.OP1NORID = PA0UW03.OP1NORID[XX2];
    VSOPOX01.SY1STNBR = PA0UW03.SY1STNBR[XX2];
    VSOPOX01.SY2CLRID = PA0UW03.SY2CLRID[XX2];
    VSOPOX01.XDMCD = PA0UW03.XDMCD[XX2];
    VSOPOX01.PC2CUXID = PA0UW03.PC2CUXID[XX2];
    VSOPOX01.PC3POIDT = PA0UW03.PC3POIDT[XX2];
    ;
    PA0US-11-IO6020-S(); /* SELECT UNIQUE ROW*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* RECORD NOT FOUND - ADD RECORD*/
      set VSOPOX01 empty;
      VSOPOX01.VSOPOX01-GROUP = PA0UW03.VSOPOX01-GROUP[XX2];
      VSOPOX01.ZZZSDT = XX0XW01.XX0XWDAT; /* Entered date*/
      VSOPOX01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* SAME AS ENTERED DATE*/
      VSOPOX01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* SAMES AS ENTERED TIME*/
      VSOPOX01.ZZZCHGCT = 0; /* Change count*/
      ;
      PA0U-620(); /* Add to SO/PO cross reference table*/
      ;
    end
    ;
    XX2 = XX2 + 1; /* Increment the index*/
    ;
  end
  ;
   /* ------------------ end of process PA0U-610 ------------------*/
end // end PA0U-610

// Insert DPRODA.VSOPOX01
Function PA0U-620()
   /* ------------------------------------------------------------*/
   /* Insert Sales Order / Purchase Order Cross Reference Table*/
   /* DPRODA.VSOPOX01 - IO6020*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Add the row to the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6020" ("A ", SQLCA, VSOPOX01) {isNoRefresh = yes, isExternal = yes};
  end /* Add row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    else
      ;
      PA0UW01.PA0UW-XXXMODID = "620"; /* Module identification*/
      converseLib.validationFailed(247); /* SALES ORDER NOT ADDED*/
      set PA0UM001.OP1CUOID[XX1] cursor, bold;
      set PA0UM001.OP1NORID[XX1] bold;
      ;
      return;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  PA0UW01.PA0UW-XXXMODID = "620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    converseLib.validationFailed(10); /* 'error - please notify programmer*/
    TA1REC.TA1FUNC = "RETN";
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE SO/PO XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PA0UW01.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VSOPOX01 "; /* Table view name*/
  PA0UW01.OP1CUOID = VSOPOX01.OP1CUOID; /* Key field 1*/
  PA0UW01.OP1NORID = VSOPOX01.OP1NORID; /* Key field 2*/
  TA1REC.TA1TBLKE = PA0UW01.PA0UW-KEY; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ------------- End of process PA0U-620---------------------*/
  ;
end // end PA0U-620

// FAST PATH PF-KEY PROCESSING
Function PA0US-00-FAST-PATH()
   /* ------------------------------------------------------------*/
   /* This procedure will determine what the catoap will be*/
   /* based on the pf-key pressed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* RETURN TO PA0Q*/
    COMMAREA.CATOAP = "PA0Q";
  end
  ;
   /* Setup the leveling for subsequent applications*/
  ;
  if (PAWREC.CAFROMAP[1] == " ")
    PAWREC.CAFROMAP[1] = COMMAREA.CACURRAP;
  else
    if (PAWREC.CAFROMAP[2] == " ")
      PAWREC.CAFROMAP[2] = COMMAREA.CACURRAP;
    else
      if (PAWREC.CAFROMAP[3] == " ")
        PAWREC.CAFROMAP[3] = COMMAREA.CACURRAP;
      else
        if (PAWREC.CAFROMAP[4] == " ")
          PAWREC.CAFROMAP[4] = COMMAREA.CACURRAP;
        else
          PAWREC.CAFROMAP[5] = COMMAREA.CACURRAP;
        end
      end
    end
  end
  ;
  ;
end // end PA0US-00-FAST-PATH

// Read Alt key DPRODC.VPRDCU01
Function PA0US-02-IO3340-SA()
   /* ------------------------------------------------------------*/
   /* Obtain customer xref from IOMOD IO3340*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* ROW NOT FOUND*/
      return; /* Exit to display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  PA0UW01.PA0UW-XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    ;
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PA0UW01.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2GROUP;
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ------------- End of statment PA0US-02-IO3340-SA ---------------*/
  ;
end // end PA0US-02-IO3340-SA

// Open DORDER.VITEM001 IO0440
Function PA0US-07-IO0440-SS()
   /* ------------------------------------------------------------*/
   /* Obtain Sales Order Item from IOMOD IO0440 (scan = ss)*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  PA0UW01.PA0UW-XXXMODID = "S07"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    ;
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PA0UW01.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VITEM001 "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ------------- END OF STATEMENT PA0US-07-IO0440-SS ------------*/
  ;
end // end PA0US-07-IO0440-SS

// Read next DORDER.VITEM001
Function PA0US-08-IO0440-SN()
   /* ------------------------------------------------------------*/
   /* Obtain next Sales Order Item from IOMOD IO0440 (scan = sn)*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* ROW NOT FOUND*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  PA0UW01.PA0UW-XXXMODID = "S08"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    ;
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PA0UW01.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDERA  "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VITEM001 "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* -------- END OF STATEMENT PA0US-08-IO0440-SN -------------*/
  ;
end // end PA0US-08-IO0440-SN

// Close DORDER.VITEM001
Function PA0US-09-IO0440-CS()
   /* ------------------------------------------------------------*/
   /* Close Sales Order Item IOMOD IO0440.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  PA0UW01.PA0UW-XXXMODID = "S09"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    ;
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PA0UW01.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VITEM001 "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ------------ End of STATEMENT PA0US-09-IO0440-SC ------------*/
  ;
end // end PA0US-09-IO0440-CS

// Read DORDER.VORHDR01 IO0430
Function PA0US-10-IO0430-S()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* ROW NOT FOUND*/
      return; /* Exit to display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  PA0UW01.PA0UW-XXXMODID = "S10"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    ;
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PA0UW01.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VORHDR01 "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ------------- End of process PA0US-10-IO0430-S--------------*/
  ;
end // end PA0US-10-IO0430-S

// SELECT UNIQUE DPRODA.VSOPOX01
Function PA0US-11-IO6020-S()
   /* ------------------------------------------------------------*/
   /* SELECT UNIQUE ROW.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6020" ("S ", SQLCA, VSOPOX01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PA0UW01.PA0UW-XXXMODID = "S11"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DPRODA.VSOPOX01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0US11"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSOPOX01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSOPOX01.VSOPOX01-GROUP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
   /* -------------End of Statement PA0US-11-IO6020-S-------------------*/
end // end PA0US-11-IO6020-S

// SELECT UNIQUE DCORP.VSUMCD01
Function PA0US-12-IO2640-S()
   /* ------------------------------------------------------------*/
   /* SELECT UNIQUE ROW.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  PA0UW01.PA0UW-XXXMODID = "S12"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DCORP.VSUMCD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0US12"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
   /* -------------End of Statement PA0US-12-IO2640-S ------------------*/
end // end PA0US-12-IO2640-S

// call date routine
Function PA0US-13-TA0040-G()
   /* ------------------------------------------------------------*/
   /* call ta2 date convert  routine*/
   /* ------------------------------------------------------------*/
  ;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DTOPT = "LASTDAY";
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date convert*/
  ;
  if (sysVar.errorCode == "00000000") /* Good system return code*/
    return;
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  PA0UW01.PA0UW-XXXMODID = "S13"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Good system return code*/
   && SQLCA.VAGen_SQLCODE == -911)   /* RESOURCE UNAVAILABLE*/
    converseLib.validationFailed(11);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "TA0040 DATE CONVERT     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application name*/
  TA1REC.TA1PGMNM = "PA0US13"; /* Process name*/
  TA1REC.TA1TBLKE = TA2REC.TA2GRGGN;
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Flow to converse map*/
  ;
   /* ------------- end of process PA0US-13-TA0040-G -------------*/
  ;
  ;
end // end PA0US-13-TA0040-G

// Read DPRODC.VPRDCU02
Function PA0US-VPRDCU02-S()
   /* ------------------------------------------------------------*/
   /* Obtain Warehouse from IOMOD VPRDCU02*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VPRDCU02" ("S ", SQLCA, VPRDCU02) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* ROW NOT FOUND*/
      return; /* Exit to display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    ;
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0US-VPRDCU02-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PA0UW01.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VPRDCU02 "; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU02.VPRDCU02-KEY;
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
   /* ------------- End of statment PA0US-VPRDCU02-S ----------------*/
  ;
end // end PA0US-VPRDCU02-S

//*** RECORD=PA0UW01 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PA0UW01 type basicRecord
  10 PA0UW-KEY PA0UW-KEY ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
  10 PC2CUXID PC2CUXID [9] ; 
  10 KUCCOID KUCCOID [9] ; 
  10 KUMSTRID KUMSTRID [9] ; 
  10 XNXCD XNXCD [9] ; 
  10 PA0UW-OP1CUOID PA0UW-OP1CUOID ; 
    15 PA0UW-OP1CUOID-8 PA0UW-OP1CUOID-8 ; 
    15 PA0UW-OP1PARTN PA0UW-OP1PARTN ; 
  10 PA0UW-PC3POIDT PA0UW-PC3POIDT ; 
    15 PA0UW-PC3POIDT-CC PA0UW-PC3POIDT-CC ; 
    15 PA0UW-PC3POIDT-YY PA0UW-PC3POIDT-YY ; 
    15 PA0UW-PC3POIDT-MM PA0UW-PC3POIDT-MM ; 
    15 PA0UW-PC3POIDT-BUY-MM PA0UW-PC3POIDT-BUY-MM ; 
  10 PA0UW-PA1BUYMO PA0UW-PA1BUYMO ; 
    15 PA0UW-PA1BUYMO-YY PA0UW-PA1BUYMO-YY ; 
    15 PA0UW-PA1BUYMO-MM PA0UW-PA1BUYMO-MM ; 
  10 PA0UW-OP1CUNDT PA0UW-OP1CUNDT ; 
    15 PA0UW-OP1CUNDT-CC PA0UW-OP1CUNDT-CC ; 
    15 PA0UW-OP1CUNDT-YY PA0UW-OP1CUNDT-YY ; 
    15 PA0UW-OP1CUNDT-MM PA0UW-OP1CUNDT-MM ; 
    15 PA0UW-OP1CUNDT-DD PA0UW-OP1CUNDT-DD ; 
  10 PA0UW-MAP-OP1CUNDT PA0UW-MAP-OP1CUNDT ; 
    15 PA0UW-MAP-OP1CUNDT-MM PA0UW-MAP-OP1CUNDT-MM ; 
    15 PA0UW-MAP-OP1CUNDT-1 PA0UW-MAP-OP1CUNDT-1 ; 
    15 PA0UW-MAP-OP1CUNDT-DD PA0UW-MAP-OP1CUNDT-DD ; 
    15 PA0UW-MAP-OP1CUNDT-2 PA0UW-MAP-OP1CUNDT-2 ; 
    15 PA0UW-MAP-OP1CUNDT-YY PA0UW-MAP-OP1CUNDT-YY ; 
  10 XX1 XX1 ; 
  10 XX2 XX2 ; 
  10 XX3 XX3 ; 
  10 XX4 XX4 ; 
  10 XX5 XX5 ; 
  10 PA0UW-REQUEST-FOR-DATA PA0UW-REQUEST-FOR-DATA ; 
  10 PA0UW-PROCESS-TYPE PA0UW-PROCESS-TYPE ; 
  10 PA0UW-VSOPOX01-FOUND PA0UW-VSOPOX01-FOUND ; 
  10 PA0UW-END-OF-VSOPOX01 PA0UW-END-OF-VSOPOX01 ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 PA0UW-XXXMODID PA0UW-XXXMODID ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 YSMXDV YSMXDV ; 
  10 PA0UW-DUP-LINE PA0UW-DUP-LINE ; 
  10 PA0UW-FUTURE-PC3POIDT PA0UW-FUTURE-PC3POIDT ; 
    15 PA0UW-FUTURE-PC3POIDT-CC PA0UW-FUTURE-PC3POIDT-CC ; 
    15 PA0UW-FUTURE-PC3POIDT-YY PA0UW-FUTURE-PC3POIDT-YY ; 
    15 PA0UW-FUTURE-PC3POIDT-MM PA0UW-FUTURE-PC3POIDT-MM ; 
    15 PA0UW-FUTURE-PC3POIDT-BUY-MM PA0UW-FUTURE-PC3POIDT-BUY-MM ; 
end // end PA0UW01

//*** RECORD=PA0UW02 ****
// ********** ORDER ADJUSTMENTS COMMON PASS DATA *************
// 
//   This record is the redefined record of PAWREC.  The extra
//   area at the bottom of PAWREC is redefined here to receive
//   the STYLE, COLOR, DIMENSION, and other fields as needed.
// 
//   See PA0QW06 record layout.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 10/22/91   DFRANC   New record.
// 08/27/93   MSMIT2   PA0344 - add fields for future sales
//                     order customer need date range.
// ***********************
Record PA0UW02 type basicRecord
  5 CAUSERA CAUSERA ; 
    10 PAWOANBR PAWOANBR ; 
    10 XXXMODID XXXMODID ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 FB9COFTM FB9COFTM ; 
    10 PAWBUYDT PAWBUYDT ; 
      15 PAWBUYCC PAWBUYCC ; 
      15 PAWBUYYM PAWBUYYM ; 
      15 PAWBUYDD PAWBUYDD ; 
    10 PAWCOFDT PAWCOFDT ; 
      15 PAWCOFCC PAWCOFCC ; 
      15 PAWCOFYM PAWCOFYM ; 
      15 PAWCOFDD PAWCOFDD ; 
    10 PAWDRVR PAWDRVR ; 
    10 PAWOAIDX PAWOAIDX ; 
    10 PA1OANBR PA1OANBR [25] ; 
    10 CAFROMAP CAFROMAP [5] ; 
    10 PAWPREQ PAWPREQ ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 PAWTSP PAWTSP ; 
    10 PAWTSL PAWTSL ; 
    10 PAWSWU PAWSWU ; 
    10 PAWIXM PAWIXM ; 
    10 PAWEXTRA PAWEXTRA ; 
      15 PC2CUXID PC2CUXID ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 PC3POIDT PC3POIDT ; 
      15 * char(49) ; 
      15 YETCD YETCD ; 
      15 * char(270) ; 
      15 PA0UW-BEG-CCYYMMDD PA0UW-BEG-CCYYMMDD ; 
        20 PA0UW-BEG-CC PA0UW-BEG-CC ; 
        20 PA0UW-BEG-YYMM PA0UW-BEG-YYMM ; 
          25 PA0UW-BEG-YY PA0UW-BEG-YY ; 
          25 PA0UW-BEG-MM PA0UW-BEG-MM ; 
        20 PA0UW-BEG-DD PA0UW-BEG-DD ; 
      15 PA0UW-END-CCYYMMDD PA0UW-END-CCYYMMDD ; 
        20 PA0UW-END-CC PA0UW-END-CC ; 
        20 PA0UW-END-YYMM PA0UW-END-YYMM ; 
          25 PA0UW-END-YY PA0UW-END-YY ; 
          25 PA0UW-END-MM PA0UW-END-MM ; 
        20 PA0UW-END-DD PA0UW-END-DD ; 
      15 * char(1159) ; 
end // end PA0UW02

//*** RECORD=PA0UW03 ****
// This is a copy of the SO/PO Cross Reference table
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 11/05/91   DFRANC   New record.
// 02/27/97   WROBIN   Increase number of items record can hold
// ***********************
Record PA0UW03 type basicRecord
  10 VSOPOX01-GROUP VSOPOX01-GROUP [1000] ; 
    15 OP1PARTN OP1PARTN ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 OP2LNINB OP2LNINB ; 
    15 PC2CUXID PC2CUXID ; 
    15 OP1CUNDT OP1CUNDT ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XDSCD XDSCD ; 
    15 YSMXDV YSMXDV ; 
    15 PC3POIDT PC3POIDT ; 
    15 XWHCD XWHCD ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end PA0UW03

//*** RECORD=PA0UW04 ****
// ***************** po date pass record *********************
// 
//   THIS RECORD CONTAINS THE EXISTING VSOPOX01 RECORDS WHEN
//   BY CUSTOMER ONLY.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 12/26/91   MSMIT2   New record.
// ***********************
Record PA0UW04 type basicRecord
  10 OP2KEY OP2KEY [100] ; 
    15 OP1PARTN OP1PARTN ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 OP2LNINB OP2LNINB ; 
  10 PA0UW-OP2KEY-MAX PA0UW-OP2KEY-MAX ; 
end // end PA0UW04

//*** RECORD=PA0UW05 ****
// ***************** po date pass record *********************
// 
//   THIS RECORD IS USED TO HOLD THE LINE ENTERED ON THE
//   SCREEN.  THIS IS SO THAT THE PROGRAM CAN CHECK TO SEE
//   IF THE USER HAS ENTERED THE SAME DATA ON TWO DIFFERENT
//   LINES.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 01/02/92   MSMIT2   New record.
// ***********************
Record PA0UW05 type basicRecord
  5 PA0UW-PA0UW05-GROUP PA0UW-PA0UW05-GROUP [9] ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
end // end PA0UW05

DataItem PA0UW-BEG-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-BEG-CCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-BEG-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-BEG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-BEG-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-DUP-LINE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0UW-END-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-END-CCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-END-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of file VSOPOX01 switch
DataItem PA0UW-END-OF-VSOPOX01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0UW-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-END-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SAVE FOOTWEAR BUY FORCAST DATE
DataItem PA0UW-FUTURE-PC3POIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po nbr month
DataItem PA0UW-FUTURE-PC3POIDT-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po nbr century
DataItem PA0UW-FUTURE-PC3POIDT-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po nbr day
DataItem PA0UW-FUTURE-PC3POIDT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po nbr year
DataItem PA0UW-FUTURE-PC3POIDT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag-tbl-key
DataItem PA0UW-KEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen need date
DataItem PA0UW-MAP-OP1CUNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// (-)
DataItem PA0UW-MAP-OP1CUNDT-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// (-)
DataItem PA0UW-MAP-OP1CUNDT-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen need day
DataItem PA0UW-MAP-OP1CUNDT-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen need month
DataItem PA0UW-MAP-OP1CUNDT-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen need year
DataItem PA0UW-MAP-OP1CUNDT-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date
DataItem PA0UW-OP1CUNDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need century
DataItem PA0UW-OP1CUNDT-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need day
DataItem PA0UW-OP1CUNDT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need month
DataItem PA0UW-OP1CUNDT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need year
DataItem PA0UW-OP1CUNDT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP-CUST-ORD-ID GROUP
DataItem PA0UW-OP1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP-CUST-ORD-ID FIRST 8 NUMBERS
DataItem PA0UW-OP1CUOID-8 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP-ORD-PART-CHAR
DataItem PA0UW-OP1PARTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-OP2KEY-MAX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0UW-PA0UW05-GROUP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy date
DataItem PA0UW-PA1BUYMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem PA0UW-PA1BUYMO-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem PA0UW-PA1BUYMO-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SAVE FOOTWEAR BUY FORCAST DATE
DataItem PA0UW-PC3POIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po nbr month
DataItem PA0UW-PC3POIDT-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po nbr century
DataItem PA0UW-PC3POIDT-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po nbr day
DataItem PA0UW-PC3POIDT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po nbr year
DataItem PA0UW-PC3POIDT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Process type for iomod
DataItem PA0UW-PROCESS-TYPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem PA0UW-REQUEST-FOR-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VSOPOX01 flag
DataItem PA0UW-VSOPOX01-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errid - module id
DataItem PA0UW-XXXMODID char(5)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

