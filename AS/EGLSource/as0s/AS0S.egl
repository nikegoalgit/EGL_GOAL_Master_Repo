package as0s;

import ab.common.*;
import af.common.AF5REC;
import as1.common.AS1-XSN-YY;
import as1.common.AS1REC;
import as1.common.ASWREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAS-00000;
import corpcom3.XPAS-39999;
import corpcom3.XPAS-51200;
import corpcom3.XPXDV01;
import corpcom3.XPXX001;
import corpcom3.XSASS-XOW;
import corpcom3.XSASS-XSE;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XOWTBL;
import corpx1.XSETBL;
import corpx2.XOWCD;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpy2.YSNTBL;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import pg.common.PG1REC;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import sy.common.SY1BSTNB;
import sy.common.SY1STNBR;
import sy.common.SY2BCLCD;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VPRTPL01;
//*** PROGRAM=AS0S ****
// ************************************************************
// ***                  PRINT PLAN                         ***
// ************************************************************
// 
// AS0S - PRINT PLAN style inpuiry
// 
// CREATED 01/93 - lrein
// 
// *********************
Program AS0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF5REC AF5REC; // record
  AS0SW01 AS0SW01; // record
  AS0SW02 AS0SW02; // record
  AS0SW03 AS0SW03; // record
  AS0SW04 AS0SW04; // record
  AS1REC AS1REC; // record
  ASWREC ASWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPRTPL01 VPRTPL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AS0SM.AS0SM001, // form
  		AS0SM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAS-00000: XPAS-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* ------------------------------------------------------------*/
    ;
    set AS0SW01 empty; /* general ws AREA*/
    set AS0SW02 empty; /* Factory Ws Area*/
    set AS0SW03 empty; /* Temp TSQ Area*/
    set AF5REC empty; /* DACAST.VAFCLR01*/
    set ASWREC empty; /* ===> Initialize working storage*/
    set ERRSQLCA empty;
    set FY1REC empty; /* DFCTY.VFCTY001*/
    set PG1REC empty; /* DPRODG.VSYCLR01*/
    set PG2REC empty; /* DPRODG.VSYCLR01*/
    set SQLCA empty;
    set TA1REC empty;
    set TA3REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set VPRTPL01 empty; /* Print plan detail*/
    set AS0SM001 initial; /* ===> Initialize - map output area*/
    ;
    ASWREC.ASW-NEW-DATA-FL = "N";
    ;
     /* Move As1rec fields to map*/
    ;
    AS0SW01.FY1FCTYC = AS1REC.FY1FCTYC;
    AS0SW01.SY1STNBR = AS1REC.SY1STNBR; /* style*/
    AS0SW01.XOWCD = AS1REC.XOWCD; /* own grp cd*/
    AS0SW01.XDVCD = AS1REC.XDVCD; /* Division Cd*/
    AS0SW01.XSECD = AS1REC.XSECD; /* sesn cd*/
    AS0SW01.XSNYR = AS1REC.XSNYR; /* year*/
    AS0SW01.AS1-XSN-YY = AS1REC.AS1-XSN-YY;
    ;
    if (AS1REC.XSNYR < 100)
      ;
      if (AS1REC.XSNYR > 85)
        AS1REC.XSNYR = AS1REC.XSNYR + 1900;
      else
        AS1REC.XSNYR = AS1REC.XSNYR + 2000;
      end
      ;
    end
    ;
    AS0SW01.AS0SW-TSL = +846; /* set tsq length*/
    ASWREC.ASW-FIRST-TIME = "Y";
    ;
    if (COMMAREA.CAFROMAP == "AS0N") /* color inquiry*/
      ASWREC.ASW-NEW-DATA-FL = "Y"; /* request new data*/
    else
      ASWREC.ASW-NEW-DATA-FL = "N";
    end
    ;
    AS0S-0000: AS0S-0000();
     /* ----------------------------------------------------------------------*/
     /* Flow to converse Process*/
     /* ----------------------------------------------------------------------*/
    ;
    goto AS0S-0000; /* Converse Main Process*/
    ;
  end // end main
end // end AS0S

// Process AS0S map
Function AS0S-0000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AS0S-1000(); /* Obtain the data to display*/
  ;
  AS0S-2000(); /* Format and display the map*/
  ;
  AS0S-3000(); /* Check attention identifier*/
  ;
  AS0S-4000(); /* Reset fields to normal intensity*/
  ;
  AS0S-5000(); /* Verify the entered data*/
  ;
  AS0S-6000(); /* Process valid input request*/
  ;
  ;
  ;
end // end AS0S-0000

// Obtain data to display
Function AS0S-1000()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN THE DATA TO DISPLAY*/
   /*  */
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* At end of rows, close the selected set cursor,*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* if there is an error ... skip process*/
    return;
  end
  ;
  ;
  if (ASWREC.ASW-FIRST-TIME == "Y")
    AS0S-S000(); /* Setup Months*/
    ;
    if (ASWREC.ASW-NEW-DATA-FL == "N") /* New Selection Criteria not Entered*/
      return;
    end
    ;
  end
  ;
  if (ASWREC.ASW-NEW-DATA-FL == "Y" /* New Selection Criteria Entered*/
   || AS0SW01.AS0SW-NEW-FCTY-DATA == "Y")
    set AS0SW03 empty; /* Initailize Style Storage Area.*/
    AS0S-1005();
  end
  ;
  if (ASWREC.ASW-NEW-DATA-FL == "Y") /* New Selection Criteria Entered*/
    set AS0SW02 empty; /* Initailize Factory Area.*/
    AS0S-1100(); /* select factory list*/
    AS0SW01.AS0SW-END-OF-CSR = "N";
    AS0SW01.AS0SW-NEW-FCTY-DATA = "N";
    AS0SW02.AS0SW-FCTY-IDX = 0; /* set current factory*/
    AS0SW02.AS0SW-MAX-FCTY = 0; /* set max factory*/
    ;
    while (AS0SW01.AS0SW-END-OF-CSR == "N")
      AS0S-1200(); /* process factory list*/
    end
    ;
    AS0S-1300(); /* close factory list*/
    AS0SW02.AS0SW-MAX-FCTY = AS0SW02.AS0SW-FCTY-IDX; /* nbr of fctys*/
    AS0SW02.AS0SW-FCTY-IDX = 1; /* set current factory*/
    ;
    if (AS0SW02.AS0SW-MAX-FCTY > 0)
      AS0SW01.AS0SW-NEW-FCTY-DATA = "Y";
    end
    ;
  end
  ;
  if (AS0SW01.AS0SW-NEW-FCTY-DATA == "Y"
   && converseVar.validationMsgNum == 0)
    move 0 to AS0SW02.AS0SW-FCTY-TOTAL[1] for all; /* clear factory totals*/
    move 0 to AS0SW02.AS0SW-STYLE-TOTAL[1] for all; /* clear style totals*/
    AS0SW01.AS0SW-SCREEN-DISPLAYED = 1;
    AS0SW02.AS0SW-CURR-FCTY = AS0SW02.AS0SW-FACTORY[AS0SW-FCTY-IDX];
    AS0SW02.AS0SW-CURR-STY = AS0SW02.SY1STNBR[AS0SW-FCTY-IDX];
    AS0S-1400(); /* get print plan data for curr fcty*/
    AS0SW01.AS0SW-NEW-FCTY-DATA = "N";
  end
  ;
end // end AS0S-1000

// Purge temp storage queue
Function AS0S-1005()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "AS0S"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  call "TA0050" (AS0SW03, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage*/
                                  /* ; subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AS0SM001.XXXPRCNM = "AS0S-1405";
    TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  AS0SW01.AS0SW-CURRENT-PAGE = 1; /* Reset current page number*/
  AS0SW01.AS0SW-LAST-PAGE = 0; /* Reset last page number*/
  AS0SW01.AS0SW-MAX-PAGE = 0; /* Reset highest page number*/
  ;
  ;
end // end AS0S-1005

// Select fcty csr DABUY.VPRTPL01
Function AS0S-1100()
   /* call IO6440 to get factory list for gpc cd '03'*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  set VPRTPL01 empty;
  ;
  AS0S-S008();
  try
    call "IO6440" ("S2", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0SM001.XXXPRCNM = "AS0S-1100"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET DISTINCT FCTY ";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0S-1100

// Fetch FCTY csr DABUY.VPRTPL01
Function AS0S-1200()
   /* process factory list*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/
  ;
  set VPRTPL01 empty;
  ;
  try
    call "IO6440" ("N2", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
   /* ****************************************************/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
       /* add factory to as0sW02*/
    ;
    if (AS0SW02.AS0SW-FCTY-IDX == 0)
      AS0SW02.AS0SW-FCTY-IDX = AS0SW02.AS0SW-FCTY-IDX + 1;
      AS0SW02.AS0SW-FACTORY[AS0SW-FCTY-IDX] = VPRTPL01.FY1FCTYC;
      AS0SW02.SY1STNBR[AS0SW-FCTY-IDX] = " ";
    end
    ;
    if (AS0SW02.AS0SW-FACTORY[AS0SW-FCTY-IDX] != VPRTPL01.FY1FCTYC)
      AS0SW02.AS0SW-FCTY-IDX = AS0SW02.AS0SW-FCTY-IDX + 1;
      AS0SW02.AS0SW-FACTORY[AS0SW-FCTY-IDX] = VPRTPL01.FY1FCTYC;
    /* MOVE VPRTPL01.SY1STNBR TO AS0SW02.SY1STNBR(AS0SW-FCTY-IDX);*/
      AS0SW02.SY1STNBR[AS0SW-FCTY-IDX] = " ";
    end
    ;
    return; /* Return to Calling Process*/
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* End of selected set*/
    AS0SW01.AS0SW-END-OF-CSR = "Y"; /* Indicate end of file*/
    return; /* Return to previous process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0SM001.XXXPRCNM = "AS0S-1200"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "SELECT NEXT DISTINCT FCTY";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0S-1200

// Close FCTY csr DABUY.VPRTPL01
Function AS0S-1300()
   /* close factory list*/
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6440" ("C2", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AS0SM001.XXXPRCNM = "AS0S-1300"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AS0S-1300

// Obtain print plan data
Function AS0S-1400()
  ;
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN THE PRINT PLAN DATA*/
   /*  */
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* At end of rows, close the selected set cursor,*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* if there is an error ... skip process*/
    return;
  end
  ;
  AS0S-1410(); /* Select Print Plan Data*/
  AS0SW01.AS0SW-END-OF-CSR = "N";
  ;
  while (AS0SW01.AS0SW-END-OF-CSR == "N")
    AS0S-1420(); /* Process Print Plan Cursor*/
    ;
    if (AS0SW01.AS0SW-VALID-PRTPLN-ROW == "Y")
      AS0S-1430(); /* Process Print Plan Cursor*/
    end
    ;
  end
  AS0S-1440(); /* Close Print PLan Cursor*/
  ;
  if (AS0SW-TSQ-MAX > 0)
    AS0S-S012(); /* compute line total*/
    AS0S-1432(); /* ADD LAST PAGE*/
  end
  ;
end // end AS0S-1400

// Select set VPRTPL01
Function AS0S-1410()
   /* call IO6440 to get Prin Plan Data*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  set VPRTPL01 empty;
  ;
  AS0S-S001(); /* Process Selection Options*/
  ;
  try
    call "IO6440" ("S3", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0SM001.XXXPRCNM = "AS0S-1410"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "SELECT NXT DETAIL DATA   ";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0S-1410

// Process selected set VPRTPL01
Function AS0S-1420()
   /* process Print Plan Data*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/
  ;
  set VPRTPL01 empty;
  AS0SW01.AS0SW-VALID-PRTPLN-ROW = "N";
  ;
  try
    call "IO6440" ("N3", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AS0SW01.AS0SW-VALID-PRTPLN-ROW = "Y";
    return; /* Return to Calling Process*/
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* End of selected set*/
    AS0SW01.AS0SW-END-OF-CSR = "Y"; /* Indicate end of file*/
    return; /* Return to previous process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0SM001.XXXPRCNM = "AS0S-1420"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "SELECT NEXT PRINT PLN DET";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0S-1420

// Process retrieved detail row
Function AS0S-1430()
  ;
  if (VPRTPL01.AB-PRT-PLN-MO > AS0SW01.AS0SW-MONTH-BUCKET[11])
    return;
  end
  ;
  if (AS0SW01.XSECD > " ") /* Season Entered*/
    AS0S-1431();
    if (AS0SW01.AS0SW-VALID-SEASON-ROW == "N")
      return;
    end
  end
  ;
  set PG2REC empty;
  PG2REC.SY1STNBR = VPRTPL01.SY1STNBR;
  PG2REC.SY2CLRID = VPRTPL01.SY2CLRID;
  PG2REC.XGPCD = "03";
  PG2REC.XDMCD = "00";
  AS0S-1433(); /* get scheduler, blank sty nbr*/
  ;
   /* valid print plan and season row.  Add row to WS*/
  ;
  if (AS0SW-TSQ-MAX > 0)
    /* IF VPRTPL01.FY1FCTYC NE as0sW03.FY1FCTYC(as0sW-TSQ-MAX);*/
    if (VPRTPL01.FY1FCTYC != AS0SW02.AS0SW-CURR-FCTY
     || VPRTPL01.SY1STNBR != AS0SW03.SY1STNBR[AS0SW-TSQ-MAX]
     /* OR VPRTPL01.SY2CLRID NE as0sW03.SY2CLRID(as0sW-TSQ-MAX);*/
     || VPRTPL01.XOWCD != AS0SW03.XOWCD[AS0SW-TSQ-MAX]
     || VPRTPL01.XDVCD != AS0SW03.XDVCD[AS0SW-TSQ-MAX])
      if (AS0SW-TSQ-MAX == 10)
        AS0S-S012(); /* build line totals*/
        AS0S-1432(); /* add data to temp tsq*/
        AS0SW-TSQ-MAX = 1; /* start new page*/
        AS0S-S003();
      else
        AS0SW03.AS0SW-TSQ-MAX = AS0SW-TSQ-MAX + 1;
        AS0S-S003();
      end
    end
  else
    AS0SW-TSQ-MAX = 1;
    AS0S-S003();
  end
  ;
  AS0S-S004();
  ;
end // end AS0S-1430

// Select unique DACAST.VAFCLR01
Function AS0S-1431()
   /* --------------------------------------------------------------------*/
   /* - Select Unique From DACAST.VAFCLR01 To Verify Season For Style    -*/
   /* --------------------------------------------------------------------*/
  ;
   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/
  ;
  AS0S-S002();
  ;
   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/
  ;
  try
    call "IO3520" ("S ", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    AS0SW01.AS0SW-VALID-SEASON-ROW = "Y"; /* row is valid for season*/
    return; /* Return to calling process*/
  end
  ;
  AS0SW01.AS0SW-VALID-SEASON-ROW = "N"; /* row is valid for season*/
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      return; /* Return to calling process*/
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0SM001.XXXPRCNM = "AS0S-1431"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "GET DACAST.VAFCLR01   ";
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0S-1431

// Add page to temp storage queue
Function AS0S-1432()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  set TA5REC empty;
  AS0SW03.AS0SW-TSQ-LENGTH = AS0SW01.AS0SW-TSL; /* Temp storage lngth*/
  TA5REC.TA5APPID = "AS0S"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (AS0SW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/
    ;
    AS0SM001.XXXPRCNM = "AS0S-1432"; /* PROCESS NAME*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    return; /* Return to previous process*/
    ;
  end
  ;
  AS0SW01.AS0SW-MAX-PAGE = TA5REC.TA5TSQIX; /* Highest page number*/
  ;
  set AS0SW03 empty; /* Clear temporary storage record*/
  ;
  ;
end // end AS0S-1432

// Select unique DPRODG.VSYCLR01
Function AS0S-1433()
  ;
   /* *=============================**/
   /* *  Access DPRODG.VSYCLR01 DB  * Obtain style,color desc*/
   /* *=============================**/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      PG2REC.SY1BSTNB = " "; /* Move blank style nbr*/
      PG2REC.PG1SC4CD = "??"; /* Move scheduler code*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AS0SM001.XXXPRCNM = "AS0S1433"; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AS0S-1433

// Close detail cursor VPRTPL01
Function AS0S-1440()
   /* Close Print Plan Csr*/
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6440" ("C3", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AS0SM001.XXXPRCNM = "AS0S-1440"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AS0S-1440

// Format and display map
Function AS0S-2000()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || ASWREC.ASW-FIRST-TIME == "Y")     /* or first time through*/
    set AS0SM001 initial; /* Clear map output area*/
    AS0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    AS0S-2100(); /* Format the data on the page*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ASWREC.ASW-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ASWREC.ASW-MSG-NO);
      end /* Information message number*/
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* ===> No error message to display*/
    set AS0SM001 alarm; /* ===> Indicate sound alarm*/
  end
  ;
  ASWREC.ASW-IDX1 = 10; /* last line*/
  ;
  while (ASWREC.ASW-IDX1 > 0 /* for each line*/
   && AS0SM001.AS0SM-STYLE[ASW-IDX1] == " ") /* no entry this line*/
    set AS0SM001.AS0SM-SELECT[ASW-IDX1] skip, invisible;
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 - 1; /* previous line*/
  end
  ;
  converse AS0SM001 ;
  ;
  ;
end // end AS0S-2000

// Format map data
Function AS0S-2100()
   /* FORMAT DATA ON SCREEN*/
   /* -------------------------------------------*/
   /* --             MOVE HEADER FIELDS        --*/
   /* -------------------------------------------*/
  ;
  AS0S-S005(); /* move header fields*/
  ;
  if (AS0SW01.AS0SW-CURRENT-PAGE != AS0SW01.AS0SW-LAST-PAGE) /* on same page*/
    if (AS0SW01.AS0SW-MAX-PAGE > 0)
      AS0S-2110(); /* Obtain Tsq Page;*/
    else
      if (AS0SW02.AS0SW-MAX-FCTY > 1)
        converseLib.validationFailed(131);
      else
        converseLib.validationFailed(5);
      end
      /* EZERTN;*/
    end
  end
  ;
  AS0S-S006(); /* Move Data To Map*/
  AS0S-S007(); /* Process Factory Totals*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
end // end AS0S-2100

// Obtain data from TSQ
Function AS0S-2110()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  AS0SW03.AS0SW-TSQ-LENGTH = AS0SW01.AS0SW-TSL; /* temp tsq length*/
  TA5REC.TA5APPID = "AS0S"; /* Application identification*/
  TA5REC.TA5TSQIX = AS0SW01.AS0SW-CURRENT-PAGE; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (AS0SW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    AS0SM001.XXXPRCNM = "AS0S-2110"; /* prcess name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AS0S-2110

// Check attention identifier
Function AS0S-3000()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(0);
  AS1REC.AS1-MSG-NO = 0;
  ASWREC.ASW-MSG-NO = 0;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    AS0SW-VALID-UPD-FL = "N";
    AS0SW-CONFIRM-UPD-FL = "N";
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (AS0SM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = AS0SM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AS0SM001.CAITEM; /* Application data*/
      ;
      XPAS-39999(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set AS0SM001.CATOAP cursor, modified, bold; /* Highlight*/
    AS0SM001.XXXPRCNM = "AS0S-3000"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ASWREC.ASW-PROCESS-NBR = "3000"; /* Process number*/
    AS0SM001.XXXPRCNM = "AS0S-3000"; /* Process name*/
    XPAS-39999(); /* Exit to another application*/
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ASWREC.ASW-PROCESS-NBR = "3000"; /* Process number*/
    AS0SM001.XXXPRCNM = "AS0S-3000"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
end // end AS0S-3000

// Reset highlighted fields
Function AS0S-4000()
   /* ------------------------------------------------------------*/
   /* RESET HIGHLIGHTED FIELDS*/
   /* ------------------------------------------------------------*/
   /*  */
   /* ------------------------------------------------------------*/
   /* Reset selection field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/
   /*  */
  set AS0SM001.FY1FCTYC initialAttributes, cursor; /* Factory*/
  set AS0SM001.SY1STNBR initialAttributes; /* Style*/
  set AS0SM001.XOWCD initialAttributes; /* Owner Group*/
  set AS0SM001.XDVCD initialAttributes; /* Division code*/
  set AS0SM001.XSECD initialAttributes; /* Season Code*/
  set AS0SM001.XSNYR initialAttributes; /* Season Year*/
  ASWREC.ASW-IDX1 = +1;
  ;
  while (ASWREC.ASW-IDX1 <= 10) /* for each line*/
    set AS0SM001.AS0SM-SELECT[ASW-IDX1] initialAttributes;
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1; /* next line*/
  end
  ;
end // end AS0S-4000

// Validate entered data
Function AS0S-5000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0SM001.CAITEM > " ") /* Application data was entered*/
    set AS0SM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ASWREC.ASW-PROCESS-NBR = "5000"; /* Process number*/
    AS0SM001.XXXPRCNM = "AS0S-5000"; /* Process name*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* VERIFY THE ENTERED DATA*/
   /* ------------------------------------------------------------*/
  ;
  ASWREC.ASW-NEW-DATA-FL = "N";
  ;
  if (AS0SM001.FY1FCTYC != AS0SW01.FY1FCTYC /* factory*/
   || AS0SM001.SY1STNBR != AS0SW01.SY1STNBR /* style*/
   || AS0SM001.XOWCD != AS0SW01.XOWCD       /* owner group*/
   || AS0SM001.XDVCD != AS0SW01.XDVCD       /* owner group*/
   || AS0SM001.XSECD != AS0SW01.XSECD       /* season*/
   || AS0SM001.XSNYR != AS0SW01.AS1-XSN-YY  /* season yr*/
   || ASWREC.ASW-FIRST-TIME == "Y")         /* OR FIRST TIME PROCESSING*/
    ASWREC.ASW-NEW-DATA-FL = "Y";
    ASWREC.ASW-FIRST-TIME = "N";
    AS0S-5100(); /* validate changes*/
    converseLib.clearScreen();
    
    return;
  end
  ;
  AS0S-5200(); /* validate select field*/
  converseLib.clearScreen();
  
  return;
  ;
end // end AS0S-5000

// Verify entered data
Function AS0S-5100()
   /* ------------------------------------------------------------*/
   /* VERIFY THE SELECTION CRITERIA*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0SM001.XSNYR == "?")
    set AS0SM001.XSNYR cursor, bold;
    converseLib.validationFailed(42); /* not a pop-up window*/
    ASWREC.ASW-PROCESS-NBR = "AS0S-5100";
  else
    ;
    if (AS0SM001.XSECD != AS0SW01.XSECD
     || AS0SM001.XSNYR != AS0SW01.XSNYR)
      AS0S-5110(); /* verify sesn & yr*/
    end
    ;
  end
  ;
  if (AS0SM001.XDVCD != AS0SW01.XDVCD)
    AS0S-5120(); /* verify division*/
  end
  ;
  if (AS0SM001.XOWCD != AS0SW01.XOWCD)
    AS0S-5130(); /* verify owner group*/
  end
  ;
  if (AS0SM001.SY1STNBR == "?")
    set AS0SM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(42); /* not a pop-up window*/
    ASWREC.ASW-PROCESS-NBR = "AS0S-5100";
  end
  ;
  if (AS0SM001.SY1STNBR != AS0SW01.SY1STNBR)
    AS0S-5140(); /* verify owner group*/
  end
  ;
  if (AS0SM001.FY1FCTYC == "?")
    set AS0SM001.FY1FCTYC cursor, bold;
    converseLib.validationFailed(42); /* not a pop-up window*/
    ASWREC.ASW-PROCESS-NBR = "AS0S-5100";
  else
    ;
    if (AS0SM001.FY1FCTYC != AS0SW01.FY1FCTYC)
      AS0S-5150(); /* verify factory*/
    end
    ;
  end
  ;
end // end AS0S-5100

// Validate season cd/yr
Function AS0S-5110()
   /* ------------------------------------------------------------*/
   /* VERIFY SESN & YR*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0SM001.XSECD == "  "
   && AS0SM001.XSNYR == 0)
    AS0SW01.XSECD = AS0SM001.XSECD;
    AS0SW01.XSNYR = AS0SM001.XSNYR;
    AS1REC.XSECD = AS0SM001.XSECD;
    AS1REC.XSNYR = AS0SM001.XSNYR;
    AS1REC.AS1-XSN-CC-YY = 0;
    AS0SW01.AS1-XSN-YY = 0;
    return;
  end
  ;
  if (AS0SM001.XSECD == "  "
   && AS0SM001.XSNYR > 0)
    set AS0SM001.XSECD cursor, bold;
    converseLib.validationFailed(16); /* not a valid season yr*/
    AS0SM001.XXXPRCNM = "AS0S-5110";
    return;
  end
  ;
  if (AS0SM001.XSECD > "  "
   && AS0SM001.XSNYR == 0)
    set AS0SM001.XSNYR cursor, bold;
    converseLib.validationFailed(26); /* not a valid season yr*/
    AS0SM001.XXXPRCNM = "AS0S-5110";
    return;
  end
  ;
  AS1REC.AS1-VALID-XSE-FL = "0";
  AS1REC.AS1-VALID-XSN-FL = "0";
  AS1REC.AS1-VALID-XSE-XSN-FL = "0";
  ;
  AS1REC.XSECD = AS0SM001.XSECD;
  ;
  XSASS-XSE(); /* perform 'pop-up window' processing*/
  if (AS1REC.AS1-VALID-XSE-FL == "0")
    AS0SM001.XSECD = AS1REC.XSECD;
  end
  ;
  AS1REC.AS1-XSN-CC-YY = AS0SM001.XSNYR;
  ;
  XPAS-51200();
  ;
  if (AS1REC.AS1-VALID-XSE-XSN-FL != "0")
    set AS0SM001.XSECD cursor, bold;
    set AS0SM001.XSNYR bold;
    AS1REC.AS1-MSG-NO = 71; /* invalid sesn/yr msg*/
    AS0SM001.XXXPRCNM = "AS0S-5110";
  end
  if (AS1REC.AS1-VALID-XSN-FL != "0")
    set AS0SM001.XSNYR cursor, bold;
    AS1REC.AS1-MSG-NO = 26; /* invalid yr msg;*/
    AS0SM001.XXXPRCNM = "AS0S-5110";
  end
  ;
  if (AS1REC.AS1-VALID-XSE-FL != "0")
    set AS0SM001.XSECD cursor, bold;
    AS1REC.AS1-MSG-NO = 16; /* invalid sesn msg;*/
    AS0SM001.XXXPRCNM = "AS0S-5110";
  end
  ;
  if (AS1REC.AS1-VALID-XSE-XSN-FL != "0"
   || AS1REC.AS1-VALID-XSN-FL != "0"
   || AS1REC.AS1-VALID-XSE-FL != "0")
    if (AS1REC.AS1-MSG-NO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AS1REC.AS1-MSG-NO);
    end /* invalid yr msg;*/
    return;
  end
  AS0SW01.XSECD = AS0SM001.XSECD;
  AS0SW01.XSNYR = AS0SM001.XSNYR;
  AS0SW01.AS1-XSN-YY = AS0SM001.XSNYR;
  AS1REC.XSECD = AS0SM001.XSECD;
  AS1REC.AS1-XSN-YY = AS0SM001.XSNYR;
  ;
  if (AS1REC.AS1-XSN-YY > 75)
    AS1REC.AS1-XSN-CC = 19;
    AS0SW01.XSNYR = AS0SW01.XSNYR + 1900;
  else
    AS1REC.AS1-XSN-CC = 20;
    AS0SW01.XSNYR = AS0SW01.XSNYR + 2000;
  end
  ;
end // end AS0S-5110

// Validate division
Function AS0S-5120()
  if (AS0SM001.XDVCD == " ")
    AS0SW01.XDVCD = "  ";
    AS1REC.XDVCD = "  ";
    return;
  end
  ;
  if (AS0SM001.XDVCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "DIVISION CODE        ";
    ;
    while (XX0XW02.XX0XWEND == "N")
      ;
      XPXDV01(); /* perform pop up window routine*/
      ;
    end
    ;
    if (XX0XW02.XX0XWPIX > 0)
      AS0SM001.XDVCD = XDVTBL.XDVCD[XX0XWPIX];
    else
      AS0SM001.XDVCD = " ";
    end
    ;
  else
    if (AS0SM001.XDVCD in XDVTBL.XDVCD) /* IF code is on table*/
      AS0SM001.XDVCD = XDVTBL.XDVCD[sysVar.arrayIndex];
      AS1REC.XDVCD = XDVTBL.XDVCD[sysVar.arrayIndex];
    else /* ELSE(CODE is not on table)*/
      set AS0SM001.XDVCD bold, cursor;
      converseLib.validationFailed(75);
      AS0SM001.XXXPRCNM = "AS0S-5120";
      return;
    end
  end
  ;
  AS0SW01.XDVCD = AS0SM001.XDVCD;
  AS1REC.XDVCD = AS0SM001.XDVCD;
  ;
end // end AS0S-5120

// Validate owner group
Function AS0S-5130()
   /* ------------------------------------------------------------*/
   /* VERIFY OWNER GROUP*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0SM001.XOWCD == " ")
    AS0SW01.XOWCD = " ";
    AS1REC.XOWCD = " ";
    return;
  end
  ;
  if (AS0SM001.XOWCD == "?")
    XSASS-XOW();
    if (AS1REC.AS1-VALID-FL != "0")
      set AS0SM001.XOWCD cursor, bold;
      converseLib.validationFailed(44); /* invalid owner group msg*/
      AS0SM001.XXXPRCNM = "AS0S-5130";
      return;
    else
      AS0SM001.XOWCD = AS1REC.XOWCD;
    end
    ;
  else
    if (AS0SM001.XOWCD in XOWTBL.XOWCD
     && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* CONTINUE*/
    else
      set AS0SM001.XOWCD cursor, bold;
      converseLib.validationFailed(44); /* invalid owner group msg*/
      AS0SM001.XXXPRCNM = "AS0S-5130";
      return;
    end
  end
  ;
  AS0SW01.XOWCD = AS0SM001.XOWCD;
  AS1REC.XOWCD = AS0SM001.XOWCD;
  ;
   /* **                                                        ***/
   /* ****************** End of as0s-5130 ************************/
end // end AS0S-5130

// Validate style
Function AS0S-5140()
   /* ------------------------------------------------------------*/
   /* VERIFY STYLE/CLR*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0SM001.SY1STNBR == " ")
    AS0SW01.SY1STNBR = " ";
    AS0SW01.SY2CLRID = " ";
    AS1REC.SY1STNBR = " ";
    AS1REC.SY2CLRID = " ";
    return;
  end
  ;
  if (AS0SM001.SY1STNBR > " ")
    AS0SW01.SY2CLRID = " ";
    AS0S-5141(); /* select set dprodg.vsyclr01*/
    AS0S-5142(); /* select set dprodg.vsyclr01*/
    AS0S-5143(); /* select set dprodg.vsyclr01*/
  else /* process for style/color*/
    AS0S-5144(); /* select set dprodg.vsyclr01*/
  end
  ;
  ;
end // end AS0S-5140

// Select set DPRODG.VSYCLR01
Function AS0S-5141()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set PG2REC empty; /* Reset rec work area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AS0SM001.SY1STNBR; /* Style no.*/
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0SM001.XXXPRCNM = "AS0S-5141"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
end // end AS0S-5141

// Fetch next DPRODG.VSYCLR01
Function AS0S-5142()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AS0SW01.SY1STNBR = AS0SM001.SY1STNBR; /* move style number*/
      AS1REC.SY1STNBR = AS0SM001.SY1STNBR; /* move style number*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AS0SM001.SY1STNBR cursor, bold; /* Highlight field*/
      converseLib.validationFailed(38); /* Indicate error message*/
      AS0SM001.XXXPRCNM = "AS0S-5142"; /* Process number*/
      return; /* Exit to calling rtn*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0SM001.XXXPRCNM = "AS0S-5142"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AS0SM001"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0S-5142

// Close cursor DPRODG.VSYCLR01
Function AS0S-5143()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AS0SM001.XXXPRCNM = "AS0S-5143"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AS0S-5143

// Select sty/clr DPRODG.VSYCLR01
Function AS0S-5144()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select Unique' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set PG2REC empty; /* Reset rec work area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.XDMCD = "00"; /* XDM cd*/
  PG2REC.SY1STNBR = AS0SM001.SY1STNBR; /* Style*/
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than 1*/
      AS0SW01.SY1STNBR = AS0SM001.SY1STNBR; /* Style*/
      AS1REC.SY1STNBR = AS0SM001.SY1STNBR; /* Style*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        set AS0SM001.SY1STNBR cursor, bold; /* Highlight field*/
        converseLib.validationFailed(126); /* Indicate error message*/
        AS0SM001.XXXPRCNM = "AS0S-5144"; /* Process number*/
        return; /* Exit to calling rtn*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0SM001.XXXPRCNM = "AS0S-5144"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
end // end AS0S-5144

// Select unique DFCTY.VFCTY001
Function AS0S-5150()
  if (AS0SM001.FY1FCTYC == " ") /* as0sM001 Field eq spaces*/
    AS0SW01.FY1FCTYC = " "; /* space out ws*/
    AS1REC.FY1FCTYC = " "; /* space out ws*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/
  ;
   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/
  ;
  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = "03"; /* gpc cd*/
  FY1REC.FY1FCTYC = AS0SM001.FY1FCTYC; /* factory code*/
  ;
   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    AS0SW01.FY1FCTYC = AS0SM001.FY1FCTYC;
    AS1REC.FY1FCTYC = AS0SM001.FY1FCTYC;
    return; /* Return to calling process*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AS0SM001.FY1FCTYC cursor, bold; /* Highlight field*/
      converseLib.validationFailed(41); /* Indicate error message*/
      AS0SM001.XXXPRCNM = "AS0S-5150 "; /* Process number*/
      return; /* Return to calling process*/
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0SM001.XXXPRCNM = "AS0S-5150"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0S-5150

// Validate select fields
Function AS0S-5200()
  ASWREC.ASW-IDX1 = 1; /* first line*/
  AS0SW01.AS0SW-SEL-COUNT = 0; /* initialise counter*/
  ;
  while (ASW-IDX1 <= 10 /* for each screen line*/
   && AS0SM001.AS0SM-STYLE[ASW-IDX1] != " ") /* a line entry*/
    ;
    if (AS0SM001.AS0SM-SELECT[ASW-IDX1] != " ") /* line selected*/
      AS0SW01.AS0SW-SEL-COUNT = AS0SW01.AS0SW-SEL-COUNT + 1;
    end
    ;
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1; /* next line*/
  end
  ;
  if (AS0SW01.AS0SW-SEL-COUNT > 1) /* more than 1 line selected*/
    converseLib.validationFailed(9);
    ASWREC.ASW-IDX1 = 1; /* first line*/
    ;
    while (ASW-IDX1 <= 10 /* for each screen line*/
     && AS0SM001.AS0SM-STYLE[ASW-IDX1] != " ") /* with a line entry*/
      ;
      if (AS0SM001.AS0SM-SELECT[ASW-IDX1] != " ") /* line selected*/
        set AS0SM001.AS0SM-SELECT[ASW-IDX1] cursor, bold;
      end
      ;
      ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1; /* next line*/
    end
    ;
  end
  ;
end // end AS0S-5200

// Process valid input request
Function AS0S-6000()
   /* ------------------------------------------------------------*/
   /*  */
   /* PROCESS VALID INPUT REQUESTS*/
   /*  */
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum > 0) /* ===> errors have occurred*/
    return; /* ===> return to previous process*/
  end
  ;
  if (converseVar.eventKey is pf7  /* ===> Pf7 was pressed*/
   || converseVar.eventKey is pf8  /* ===> Pf8 was pressed*/
   || converseVar.eventKey is pf10 /* ===> Pf10 was pressed*/
   || converseVar.eventKey is pf11 /* ===> Pf11 was pressed*/
   || converseVar.eventKey is pf19 /* ===> Pf19 was pressed*/
   || converseVar.eventKey is pf20) /* ===> Pf20 was pressed*/
    /* ------------------------------------------------------------*/
    /* If a scroll backward was requested, decrement the page*/
    /* number and return to the previous process.*/
    /* If no prev pages check prev factories.*/
    /* ------------------------------------------------------------*/
    ;
    if (AS0SW-VALID-UPD-FL == "Y")
      AS0SM001.XXXPRCNM = "AS0S-6000";
      converseLib.clearScreen();
      
      ASWREC.ASW-MSG-NO = 14; /* no scroll allowed*/
      exit stack;
    end
    ;
    if (converseVar.eventKey is pf7) /* ===> Scroll back requested*/
      if (AS0SW01.AS0SW-CURRENT-PAGE > 1)
        AS0SW01.AS0SW-CURRENT-PAGE = AS0SW01.AS0SW-CURRENT-PAGE - 1;
      else
        if (AS0SW02.AS0SW-FCTY-IDX > 1)
          AS0SW02.AS0SW-FCTY-IDX = AS0SW02.AS0SW-FCTY-IDX - 1;
          AS0SW01.AS0SW-NEW-FCTY-DATA = "Y";
        else
          AS0SM001.XXXPRCNM = "AS0S-6000";
          converseLib.validationFailed(127); /* no scroll forward*/
        end
      end
      return; /* ===> Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If a scroll forward was requested, increment the page*/
    /* number and return to the previous process.*/
    /* If no Next pages check Next factories.*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is pf8) /* ===> Scroll forward requested*/
      if (AS0SW01.AS0SW-CURRENT-PAGE < AS0SW01.AS0SW-MAX-PAGE)
        AS0SW01.AS0SW-CURRENT-PAGE = AS0SW01.AS0SW-CURRENT-PAGE + 1;
      else
        if (AS0SW02.AS0SW-FCTY-IDX < AS0SW02.AS0SW-MAX-FCTY)
          AS0SW02.AS0SW-FCTY-IDX = AS0SW02.AS0SW-FCTY-IDX + 1;
          AS0SW01.AS0SW-NEW-FCTY-DATA = "Y";
        else
          AS0SM001.XXXPRCNM = "AS0S-6000";
          converseLib.validationFailed(128); /* no scroll forward*/
        end
      end
      return; /* ===> Return to previous process*/
    end
    ;
    if (converseVar.eventKey is pf19) /* ===> Scroll fcty back requested*/
      if (AS0SW02.AS0SW-FCTY-IDX > 1)
        AS0SW02.AS0SW-FCTY-IDX = AS0SW02.AS0SW-FCTY-IDX - 1;
        AS0SW01.AS0SW-NEW-FCTY-DATA = "Y";
      else
        AS0SM001.XXXPRCNM = "AS0S-6000";
        converseLib.validationFailed(129); /* no scroll forward*/
      end
      return; /* ===> Return to previous process*/
    end
    ;
    if (converseVar.eventKey is pf20) /* ===> Scroll fcty forward requested*/
      if (AS0SW02.AS0SW-FCTY-IDX < AS0SW02.AS0SW-MAX-FCTY)
        AS0SW02.AS0SW-FCTY-IDX = AS0SW02.AS0SW-FCTY-IDX + 1;
        AS0SW01.AS0SW-NEW-FCTY-DATA = "Y";
      else
        AS0SM001.XXXPRCNM = "AS0S-6000";
        converseLib.validationFailed(130); /* no scroll forward*/
      end
      return; /* ===> Return to previous process*/
    end
    ;
    if (converseVar.eventKey is pf10) /* ===> Scroll left requested*/
      if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 3)
        AS0SW01.AS0SW-SCREEN-DISPLAYED = 2;
      else
        if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 2)
          AS0SW01.AS0SW-SCREEN-DISPLAYED = 1;
        else
          AS0SM001.XXXPRCNM = "AS0S-6000";
          converseLib.validationFailed(49); /* no scroll forward*/
        end
      end
      return; /* ===> Return to previous process*/
    end
    ;
    if (converseVar.eventKey is pf11) /* ===> Scroll right requested*/
      if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 1)
        AS0SW01.AS0SW-SCREEN-DISPLAYED = 2;
      else
        if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 2)
          AS0SW01.AS0SW-SCREEN-DISPLAYED = 3;
        else
          AS0SM001.XXXPRCNM = "AS0S-6000";
          converseLib.validationFailed(50); /* no scroll forward*/
        end
      end
      return; /* ===> Return to previous process*/
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
  ASWREC.ASW-IDX1 = 1; /* first line*/
  ;
  while (ASWREC.ASW-IDX1 <= 10 /* for each entry*/
   && AS0SM001.AS0SM-SELECT[ASW-IDX1] == " ") /* line not selected*/
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1; /* next line*/
  end
  ;
  AS0SW04.FY1FCTYC = AS0SM001.FY1FCTYC;
  AS0SW04.XSECD = AS0SM001.XSECD;
  AS0SW04.XSNYR = AS0SM001.XSNYR;
  AS0SW04.SY1STNBR = AS0SM001.SY1STNBR;
  AS0SW04.XOWCD = AS0SM001.XOWCD;
  AS0SW04.XDVCD = AS0SM001.XDVCD;
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "AS99"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  call "TA0050" (AS0SW04, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage*/
                                  /* ; subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AS0SM001.XXXPRCNM = "AS0S-1405";
    TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Write the TSQ for as0s*/
   /* ------------------------------------------------------------*/
  ;
  if (ASWREC.ASW-IDX1 < 11) /* sompin was selected*/
    AS1REC.FY1FCTYC = AS0SM001.FY1FCTYC;
    AS1REC.XSECD = AS0SM001.XSECD;
    AS1REC.XSNYR = AS0SM001.XSNYR;
    AS1REC.SY1STNBR = AS0SM001.AS0SM-STYLE[ASW-IDX1];
    AS1REC.XOWCD = AS0SM001.AS0SM-XOW[ASW-IDX1];
    AS1REC.XDVCD = AS0SM001.AS0SM-XDV[ASW-IDX1];
    ;
    AS0SW04.AS0SW-TSQ-LENGTH = 22; /* temp tsq length*/
    TA5REC.TA5APPID = "AS99"; /* Application identification*/
    TA5REC.TA5TSQIX = 1; /* Page number*/
    TA5REC.TA5FNCCD = "A"; /* Function code*/
    ;
    try
      call "TA0050" (AS0SW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
    end /* Temporary storage*/
                                  /* ;subroutine*/
    ;
    if (TA5REC.TA5RTNCD != 0) /* Error was found*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      AS0SM001.XXXPRCNM = "AS0S-1405";
      TA1REC.TA1PGMNM = "AS0S"; /* Error location*/
      TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
      TA1REC.TA1MAP = "AS0SM001"; /* Map name*/
      SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
    ;
    ASWREC.ASW-PROCESS-NBR = "3000"; /* Process number*/
    AS0SM001.XXXPRCNM = "AS0S-3000"; /* Process name*/
    COMMAREA.CATOAP = "AS0N"; /* pgm to which to xfer*/
    XPAS-39999(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
end // end AS0S-6000

// Set up month buckets
Function AS0S-S000()
  ASW-DATE = VGVar.currentShortGregorianDate;
  AS0SW01.AS0SW-WORK-DATE-YYMM = ASWREC.ASW-YY-MM;
  ;
  if (ASWREC.ASW-YY > 75)
    AS0SW01.AS0SW-WORK-DATE-CC = 19;
  else
    AS0SW01.AS0SW-WORK-DATE-CC = 20;
  end
  ;
  ASWREC.ASW-IDX1 = 1;
  ;
  while (ASWREC.ASW-IDX1 < 12)
    AS0SW01.AS0SW-MONTH-BUCKET[ASW-IDX1] = AS0SW01.AS0SW-WORK-DATE-A;
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
    AS0SW01.AS0SW-WORK-DATE-MM = AS0SW01.AS0SW-WORK-DATE-MM + 1;
    ;
    if (AS0SW01.AS0SW-WORK-DATE-MM == 13)
      AS0SW01.AS0SW-WORK-DATE-MM = 1;
      ;
      if (AS0SW01.AS0SW-WORK-DATE-YY == 99)
        AS0SW01.AS0SW-WORK-DATE-CC = 20;
        AS0SW01.AS0SW-WORK-DATE-YY = 0;
      else
        AS0SW01.AS0SW-WORK-DATE-YY = AS0SW01.AS0SW-WORK-DATE-YY + 1;
      end
      ;
    end
    ;
  end
  ;
end // end AS0S-S000

// Move selection data
Function AS0S-S001()
  ;
    /* Move Selection Data to VPRTPL01*/
  ;
  VPRTPL01.FY1FCTYC = AS0SW02.AS0SW-CURR-FCTY; /* get current factory*/
  ;
  if (AS0SW01.SY1STNBR > " ")
    VPRTPL01.SY1STNBR = AS0SW01.SY1STNBR; /* Move Style*/
  else
    VPRTPL01.SY1STNBR = "*"; /* Wildcard Style*/
  end
  ;
  VPRTPL01.SY2CLRID = "*"; /* Wildcard Color*/
  ;
  if (AS0SW01.XOWCD > " ")
    VPRTPL01.XOWCD = AS0SW01.XOWCD; /* Move Owner Group*/
  else
    VPRTPL01.XOWCD = "*"; /* Wildcard Owner Group*/
  end
  ;
  if (AS0SW01.XDVCD > " ")
    VPRTPL01.XDVCD = AS0SW01.XDVCD; /* Move Division Code*/
  else
    VPRTPL01.XDVCD = "*"; /* Wildcard Division Code*/
  end
  ;
  if (AS0SW01.XSECD > " ")
    VPRTPL01.XSECD = AS0SW01.XSECD; /* Move Season Code*/
  else
    VPRTPL01.XSECD = "*"; /* Wildcard Season Code*/
  end
  ;
  if (AS0SW01.XSNYR > 00)
    ;
    if (AS0SW01.XSNYR > 100)
      VPRTPL01.XSNYR = AS0SW01.XSNYR; /* Move Season year range*/
    else
      if (AS0SW01.XSNYR > 85)
        VPRTPL01.XSNYR = AS0SW01.XSNYR + 1900;
      else
        VPRTPL01.XSNYR = AS0SW01.XSNYR + 2000;
      end
      ;
    end
  else
    VPRTPL01.XSNYR = -1; /* Wildcard Season year range*/
  end
  ;
  VPRTPL01.AB-PRT-PLN-VER-NBR = -1;
  ;
end // end AS0S-S001

// Build VAFCLR01 key
Function AS0S-S002()
   /* ---------------------------------------------------------------------*/
   /* -     Build Header Data                                             -*/
   /* ---------------------------------------------------------------------*/
  ;
   /* *  Build Header Data*/
  ;
  AF5REC.SY1STNBR = VPRTPL01.SY1STNBR;
  AF5REC.SY2CLRID = VPRTPL01.SY2CLRID;
  AF5REC.XDMCD = "00";
  AF5REC.XOWCD = VPRTPL01.XOWCD;
  AF5REC.XDVCD = "01";
  AF5REC.XSECD = AS0SW01.XSECD;
  if (AS0SW01.XSNYR > 100)
    AF5REC.XSNYR = AS0SW01.XSNYR;
  else
    ;
    if (AS0SW01.XSNYR < 85)
      AF5REC.XSNYR = AS0SW01.XSNYR + 2000;
    else
      AF5REC.XSNYR = AS0SW01.XSNYR + 1900;
    end
    ;
  end
  ;
end // end AS0S-S002

// Store new header data to temp
Function AS0S-S003()
  ;
   /* MOVE VPRTPL01.FY1FCTYC TO as0sW03.FY1FCTYC(as0sW-TSQ-MAX);*/
  AS0SW03.SY1STNBR[AS0SW-TSQ-MAX] = VPRTPL01.SY1STNBR;
   /* MOVE VPRTPL01.SY2CLRID TO AS0SW03.SY2CLRID(AS0SW-TSQ-MAX);*/
  AS0SW03.XOWCD[AS0SW-TSQ-MAX] = VPRTPL01.XOWCD;
  AS0SW03.XDVCD[AS0SW-TSQ-MAX] = VPRTPL01.XDVCD;
  AS0SW01.AS0SW-SEASON-CODE = VPRTPL01.XSECD;
  AS0SW01.AS0SW-SEASON-YEAR = VPRTPL01.XSNYR;
  AS0SW01.AS0SM-XSE1 = AS0SW01.AS0SW-XSE1;
  AS0SW01.AS0SM-XSN4 = AS0SW01.AS0SW-XSN4;
  AS0SW03.AS0SM-XSE-XSN[AS0SW-TSQ-MAX] = AS0SW01.AS0SM-XSE-XSN;
  AS0SW03.PG1SC4CD[AS0SW-TSQ-MAX] = PG2REC.PG1SC4CD;
  AS0SW03.SY1BSTNB[AS0SW-TSQ-MAX] = PG2REC.SY1BSTNB;
  ;
end // end AS0S-S003

// Store data to temp
Function AS0S-S004()
  ;
  AS0SW01.AS0SW-NMBR-PRINTS = VPRTPL01.AB-BELT-PRT-FCTR +   VPRTPL01.AB-SPOT-PRT-FCTR + VPRTPL01.AB-EMB-PRT-FCTR;
  ;
  AS0SW01.AS0SW-QUANTITY = VPRTPL01.AB-PRT-PLN-QTY[1] +   VPRTPL01.AB-PRT-PLN-QTY[2] +   VPRTPL01.AB-PRT-PLN-QTY[3] +   VPRTPL01.AB-PRT-PLN-QTY[4] +   VPRTPL01.AB-PRT-PLN-QTY[5] +   VPRTPL01.AB-PRT-PLN-QTY[6] +   VPRTPL01.AB-PRT-PLN-QTY[7] +   VPRTPL01.AB-PRT-PLN-QTY[8] +   VPRTPL01.AB-PRT-PLN-QTY[9] +   VPRTPL01.AB-PRT-PLN-QTY[10];
  ;
  AS0SW01.AS0SW-PRT-QTY = AS0SW01.AS0SW-NMBR-PRINTS * AS0SW-QUANTITY;
  ;
  AS0SW03.AS0SW-NBR-PRTS[AS0SW-TSQ-MAX] = AS0SW01.AS0SW-NMBR-PRINTS;
  ;
  if (VPRTPL01.AB-PRT-PLN-MO < AS0SW01.AS0SW-MONTH-BUCKET[1])
    AS0SW03.AS0SW-PRT-PLN-QTY1[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY1[AS0SW-TSQ-MAX] + AS0SW01.AS0SW-PRT-QTY;
    AS0SW02.AS0SW-FCTY-TOTAL[1] = AS0SW-FCTY-TOTAL[1] + AS0SW-PRT-QTY;
  else
    ;
    if (VPRTPL01.AB-PRT-PLN-MO == AS0SW01.AS0SW-MONTH-BUCKET[1])
      AS0SW03.AS0SW-PRT-PLN-QTY2[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY2[AS0SW-TSQ-MAX] + AS0SW01.AS0SW-PRT-QTY;
      AS0SW02.AS0SW-FCTY-TOTAL[2] = AS0SW-FCTY-TOTAL[2] + AS0SW-PRT-QTY;
    else
      ;
      if (VPRTPL01.AB-PRT-PLN-MO == AS0SW01.AS0SW-MONTH-BUCKET[2])
        AS0SW03.AS0SW-PRT-PLN-QTY3[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY3[AS0SW-TSQ-MAX] + AS0SW01.AS0SW-PRT-QTY;
        AS0SW02.AS0SW-FCTY-TOTAL[3] = AS0SW-FCTY-TOTAL[3] + AS0SW-PRT-QTY;
      else
        ;
        if (VPRTPL01.AB-PRT-PLN-MO == AS0SW01.AS0SW-MONTH-BUCKET[3])
          AS0SW03.AS0SW-PRT-PLN-QTY4[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY4[AS0SW-TSQ-MAX] +           AS0SW01.AS0SW-PRT-QTY;
          AS0SW02.AS0SW-FCTY-TOTAL[4] = AS0SW-FCTY-TOTAL[4] + AS0SW-PRT-QTY;
        else
          ;
          if (VPRTPL01.AB-PRT-PLN-MO == AS0SW01.AS0SW-MONTH-BUCKET[4])
            AS0SW03.AS0SW-PRT-PLN-QTY5[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY5[AS0SW-TSQ-MAX] +             AS0SW01.AS0SW-PRT-QTY;
            AS0SW02.AS0SW-FCTY-TOTAL[5] = AS0SW-FCTY-TOTAL[5] +             AS0SW-PRT-QTY;
          else
            if (VPRTPL01.AB-PRT-PLN-MO == AS0SW01.AS0SW-MONTH-BUCKET[5])
              AS0SW03.AS0SW-PRT-PLN-QTY6[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY6[AS0SW-TSQ-MAX] +               AS0SW01.AS0SW-PRT-QTY;
              AS0SW02.AS0SW-FCTY-TOTAL[6] = AS0SW-FCTY-TOTAL[6] +               AS0SW-PRT-QTY;
            else
              if (VPRTPL01.AB-PRT-PLN-MO == AS0SW01.AS0SW-MONTH-BUCKET[6])
                AS0SW03.AS0SW-PRT-PLN-QTY7[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY7[AS0SW-TSQ-MAX] +                 AS0SW01.AS0SW-PRT-QTY;
                AS0SW02.AS0SW-FCTY-TOTAL[7] = AS0SW-FCTY-TOTAL[7] +                 AS0SW-PRT-QTY;
              else
                ;
                if (VPRTPL01.AB-PRT-PLN-MO == AS0SW01.AS0SW-MONTH-BUCKET[7])
                  AS0SW03.AS0SW-PRT-PLN-QTY8[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY8[AS0SW-TSQ-MAX] +                   AS0SW01.AS0SW-PRT-QTY;
                  AS0SW02.AS0SW-FCTY-TOTAL[8] = AS0SW-FCTY-TOTAL[8] +                   AS0SW-PRT-QTY;
                else
                  ;
                  if (VPRTPL01.AB-PRT-PLN-MO == 
                  AS0SW01.AS0SW-MONTH-BUCKET[8])
                    AS0SW03.AS0SW-PRT-PLN-QTY9[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY9[AS0SW-TSQ-MAX] +                     AS0SW01.AS0SW-PRT-QTY;
                    AS0SW02.AS0SW-FCTY-TOTAL[9] = AS0SW-FCTY-TOTAL[9] +                     AS0SW-PRT-QTY;
                  else
                    ;
                    if (VPRTPL01.AB-PRT-PLN-MO == 
                    AS0SW01.AS0SW-MONTH-BUCKET[9])
                      AS0SW03.AS0SW-PRT-PLN-QTY10[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY10[AS0SW-TSQ-MAX] +                       AS0SW01.AS0SW-PRT-QTY;
                      AS0SW02.AS0SW-FCTY-TOTAL[10] = AS0SW-FCTY-TOTAL[10] +                       AS0SW-PRT-QTY;
                      AS0SW02.AS0SW-STYLE-TOTAL[10] = AS0SW-STYLE-TOTAL[10]                       + AS0SW-PRT-QTY;
                    else
                      ;
                      if (VPRTPL01.AB-PRT-PLN-MO == 
                      AS0SW01.AS0SW-MONTH-BUCKET[10])
                        AS0SW03.AS0SW-PRT-PLN-QTY11[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY11[AS0SW-TSQ-MAX] +                         AS0SW01.AS0SW-PRT-QTY;
                        AS0SW02.AS0SW-FCTY-TOTAL[11] = AS0SW-FCTY-TOTAL[11]                         + AS0SW-PRT-QTY;
                      else
                        ;
                        if (VPRTPL01.AB-PRT-PLN-MO == 
                        AS0SW01.AS0SW-MONTH-BUCKET[11])
                          AS0SW03.AS0SW-PRT-PLN-QTY12[AS0SW-TSQ-MAX] = AS0SW03.AS0SW-PRT-PLN-QTY12[AS0SW-TSQ-MAX] +                           AS0SW01.AS0SW-PRT-QTY;
                          AS0SW02.AS0SW-FCTY-TOTAL[12] = AS0SW-FCTY-TOTAL[12] + AS0SW-PRT-QTY;
                        end
                        ;
                      end
                      ;
                    end
                    ;
                  end
                  ;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end AS0S-S004

// Move map header fields
Function AS0S-S005()
   /* -------------------------------------------*/
   /* --             MOVE HEADER FIELDS        --*/
   /* -------------------------------------------*/
  ;
  AS0SM001.FY1FCTYC = AS0SW01.FY1FCTYC; /* Factory Code*/
  AS0SM001.SY1STNBR = AS0SW01.SY1STNBR; /* Style Number*/
  AS0SM001.XOWCD = AS0SW01.XOWCD; /* Owner Group Cd*/
  AS0SM001.XDVCD = AS0SW01.XDVCD; /* Division Cd*/
  AS0SM001.XSECD = AS0SW01.XSECD; /* Season Cd*/
  AS0SM001.XSNYR = AS1REC.AS1-XSN-YY; /* Season Year*/
  ;
  AS0SM001.AS0SM-CURR-FCTY = AS0SW02.AS0SW-CURR-FCTY; /* curr fcty*/
  ;
  if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 3)
    AS0SM001.AS0SM-MONTH-HDR1 = AS0SW01.AS0SW-MONTH-BUCKET[8];
    AS0SM001.AS0SM-MONTH-HDR2 = AS0SW01.AS0SW-MONTH-BUCKET[9];
    AS0SM001.AS0SM-MONTH-HDR3 = AS0SW01.AS0SW-MONTH-BUCKET[10];
    AS0SM001.AS0SM-MONTH-HDR4 = AS0SW01.AS0SW-MONTH-BUCKET[11];
  else
    if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 2)
      AS0SM001.AS0SM-MONTH-HDR1 = AS0SW01.AS0SW-MONTH-BUCKET[4];
      AS0SM001.AS0SM-MONTH-HDR2 = AS0SW01.AS0SW-MONTH-BUCKET[5];
      AS0SM001.AS0SM-MONTH-HDR3 = AS0SW01.AS0SW-MONTH-BUCKET[6];
      AS0SM001.AS0SM-MONTH-HDR4 = AS0SW01.AS0SW-MONTH-BUCKET[7];
    else
      AS0SM001.AS0SM-MONTH-HDR1 = "  PAST ";
      AS0SM001.AS0SM-MONTH-HDR2 = "CURRENT";
      AS0SM001.AS0SM-MONTH-HDR3 = AS0SW01.AS0SW-MONTH-BUCKET[2];
      AS0SM001.AS0SM-MONTH-HDR4 = AS0SW01.AS0SW-MONTH-BUCKET[3];
    end
  end
  ;
  ;
end // end AS0S-S005

// Move data to map
Function AS0S-S006()
   /* -----------------------------------------------------------------*/
   /* Move data from temp storage area to map*/
   /* -----------------------------------------------------------------*/
  ;
  ASWREC.ASW-IDX1 = 1;
  while (ASW-IDX1 <= 10)
    if (AS0SW03.SY1STNBR[ASW-IDX1] > " ") /* Data Row Has Been Retrieved*/
     /* MOVE AS0SW03.SY2BCLCD(ASW-IDX1) TO AS0SM001.SY2BCLCD(ASW-IDX1);*/
      AS0SM001.AS0SM-STYLE[ASW-IDX1] = AS0SW03.SY1STNBR[ASW-IDX1];
     /* MOVE as0sW03.SY2CLRID(ASW-IDX1) TO as0sM001.as0sM-COLOR(ASW-IDX1);*/
      AS0SM001.PG1SC4CD[ASW-IDX1] = AS0SW03.PG1SC4CD[ASW-IDX1];
      AS0SM001.SY1BSTNB[ASW-IDX1] = AS0SW03.SY1BSTNB[ASW-IDX1];
      AS0SM001.AS0SM-XOW[ASW-IDX1] = AS0SW03.XOWCD[ASW-IDX1];
      AS0SM001.AS0SM-XDV[ASW-IDX1] = AS0SW03.XDVCD[ASW-IDX1];
      AS0SM001.AS0SM-XSE-XSN[ASW-IDX1] = AS0SW03.AS0SM-XSE-XSN[ASW-IDX1];
      AS0SM001.AS0SM-PRTS[ASW-IDX1] = AS0SW03.AS0SW-NBR-PRTS[ASW-IDX1];
      AS0SM001.AS0SM-MNTH-TOTL[ASW-IDX1] = AS0SW03.AS0SM-MNTH-TOTL[ASW-IDX1];
      if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 1)
        AS0SM001.AS0SM-MNTH-QTY1[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY1[ASW-IDX1];
        AS0SM001.AS0SM-MNTH-QTY2[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY2[ASW-IDX1];
        AS0SM001.AS0SM-MNTH-QTY3[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY3[ASW-IDX1];
        AS0SM001.AS0SM-MNTH-QTY4[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY4[ASW-IDX1];
      else
        if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 2)
          AS0SM001.AS0SM-MNTH-QTY1[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY5[ASW-IDX1];
          AS0SM001.AS0SM-MNTH-QTY2[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY6[ASW-IDX1];
          AS0SM001.AS0SM-MNTH-QTY3[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY7[ASW-IDX1];
          AS0SM001.AS0SM-MNTH-QTY4[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY8[ASW-IDX1];
        else
          AS0SM001.AS0SM-MNTH-QTY1[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY9[ASW-IDX1];
          AS0SM001.AS0SM-MNTH-QTY2[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY10[ASW-IDX1];
          AS0SM001.AS0SM-MNTH-QTY3[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY11[ASW-IDX1];
          AS0SM001.AS0SM-MNTH-QTY4[ASW-IDX1] = AS0SW03.AS0SW-PRT-PLN-QTY12[ASW-IDX1];
        end
      end
    else
      set AS0SM001.AS0SM-SELECT[ASW-IDX1] invisible, protect;
      set AS0SM001.AS0SM-MNTH-QTY1[ASW-IDX1] invisible, protect;
      set AS0SM001.AS0SM-MNTH-QTY2[ASW-IDX1] invisible, protect;
      set AS0SM001.AS0SM-MNTH-QTY3[ASW-IDX1] invisible, protect;
      set AS0SM001.AS0SM-MNTH-QTY4[ASW-IDX1] invisible, protect;
    end
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
  end
  ;
end // end AS0S-S006

// Process fcty totals
Function AS0S-S007()
  ;
  if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 1 /* screen 1*/
   && AS0SW01.AS0SW-CURRENT-PAGE == AS0SW01.AS0SW-MAX-PAGE) /* last Fcty Pg*/
    AS0SM001.AS0SM-MNTH-TOT1 = AS0SW02.AS0SW-FCTY-TOTAL[1]; /* Move*/
    AS0SM001.AS0SM-MNTH-TOT2 = AS0SW02.AS0SW-FCTY-TOTAL[2]; /* Fcty*/
    AS0SM001.AS0SM-MNTH-TOT3 = AS0SW02.AS0SW-FCTY-TOTAL[3]; /* Totals*/
    AS0SM001.AS0SM-MNTH-TOT4 = AS0SW02.AS0SW-FCTY-TOTAL[4];
    AS0SM001.AS0SM-MNTH-TTOT = 0;
    ASWREC.ASW-IDX2 = 1;
    ;
    while (ASWREC.ASW-IDX2 <= 12)
      AS0SM001.AS0SM-MNTH-TTOT = AS0SM001.AS0SM-MNTH-TTOT +       AS0SW02.AS0SW-FCTY-TOTAL[ASW-IDX2];
      ASWREC.ASW-IDX2 = ASWREC.ASW-IDX2 + 1;
    end
    ;
    return;
  end
  ;
  if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 2 /* screen 2*/
   && AS0SW01.AS0SW-CURRENT-PAGE == AS0SW01.AS0SW-MAX-PAGE) /* last Fcty Pg*/
    AS0SM001.AS0SM-MNTH-TOT1 = AS0SW02.AS0SW-FCTY-TOTAL[5]; /* Move*/
    AS0SM001.AS0SM-MNTH-TOT2 = AS0SW02.AS0SW-FCTY-TOTAL[6]; /* Fcty*/
    AS0SM001.AS0SM-MNTH-TOT3 = AS0SW02.AS0SW-FCTY-TOTAL[7]; /* Totals*/
    AS0SM001.AS0SM-MNTH-TOT4 = AS0SW02.AS0SW-FCTY-TOTAL[8];
    AS0SM001.AS0SM-MNTH-TTOT = 0;
    ASWREC.ASW-IDX2 = 1;
    ;
    while (ASWREC.ASW-IDX2 <= 12)
      AS0SM001.AS0SM-MNTH-TTOT = AS0SM001.AS0SM-MNTH-TTOT +       AS0SW02.AS0SW-FCTY-TOTAL[ASW-IDX2];
      ASWREC.ASW-IDX2 = ASWREC.ASW-IDX2 + 1;
    end
    ;
    return;
  end
  ;
  if (AS0SW01.AS0SW-SCREEN-DISPLAYED == 3 /* screen 3*/
   && AS0SW01.AS0SW-CURRENT-PAGE == AS0SW01.AS0SW-MAX-PAGE) /* last Fcty Pg*/
    AS0SM001.AS0SM-MNTH-TOT1 = AS0SW02.AS0SW-FCTY-TOTAL[9]; /* Totals*/
    AS0SM001.AS0SM-MNTH-TOT2 = AS0SW02.AS0SW-FCTY-TOTAL[10];
    AS0SM001.AS0SM-MNTH-TOT3 = AS0SW02.AS0SW-FCTY-TOTAL[11];
    AS0SM001.AS0SM-MNTH-TOT4 = AS0SW02.AS0SW-FCTY-TOTAL[12];
    AS0SM001.AS0SM-MNTH-TTOT = 0;
    ASWREC.ASW-IDX2 = 1;
    ;
    while (ASWREC.ASW-IDX2 <= 12)
      AS0SM001.AS0SM-MNTH-TTOT = AS0SM001.AS0SM-MNTH-TTOT +       AS0SW02.AS0SW-FCTY-TOTAL[ASW-IDX2];
      ASWREC.ASW-IDX2 = ASWREC.ASW-IDX2 + 1;
    end
    ;
    return;
  end
  ;
  set AS0SM001.AS0SM-TOTAL-LINE invisible, protect;
  set AS0SM001.AS0SM-MNTH-TOT1 invisible, protect;
  set AS0SM001.AS0SM-MNTH-TOT2 invisible, protect;
  set AS0SM001.AS0SM-MNTH-TOT3 invisible, protect;
  set AS0SM001.AS0SM-MNTH-TOT4 invisible, protect;
  set AS0SM001.AS0SM-MNTH-TTOT invisible, protect;
end // end AS0S-S007

// Move select fields for fcty
Function AS0S-S008()
  ;
    /* Move Selection Data to vprtpl01*/
  ;
  if (AS0SW01.FY1FCTYC > " ")
    VPRTPL01.FY1FCTYC = AS0SW01.FY1FCTYC; /* get ONE factory*/
  else
    VPRTPL01.FY1FCTYC = "*"; /* get ALL factory*/
  end
  ;
  if (AS0SW01.SY1STNBR > " ")
    VPRTPL01.SY1STNBR = AS0SW01.SY1STNBR; /* Move Style*/
  else
    VPRTPL01.SY1STNBR = "*"; /* Wildcard Style*/
  end
  ;
  VPRTPL01.SY2CLRID = "*"; /* Wildcard Color*/
  ;
  if (AS0SW01.XOWCD > " ")
    VPRTPL01.XOWCD = AS0SW01.XOWCD; /* Move Owner Group*/
  else
    VPRTPL01.XOWCD = "*"; /* Wildcard Owner Group*/
  end
  ;
  if (AS0SW01.XDVCD > " ")
    VPRTPL01.XDVCD = AS0SW01.XDVCD; /* Move Division Code*/
  else
    VPRTPL01.XDVCD = "*"; /* Wildcard Owner Division Code*/
  end
  ;
  VPRTPL01.XSECD = "*"; /* Wildcard Season code*/
  VPRTPL01.XSNYR = -1;
  VPRTPL01.AB-PRT-PLN-VER-NBR = -1;
  ;
end // end AS0S-S008

// Compute line total
Function AS0S-S012()
  AS0SW03.AS0SW-TSQ-MAX = 1;
  ;
  while (AS0SW03.AS0SW-TSQ-MAX <= 10
   && AS0SW03.SY1STNBR[AS0SW-TSQ-MAX] != " ") /* an entry this line*/
    AS0SW03.AS0SM-MNTH-TOTL[AS0SW-TSQ-MAX] = AS0SW-PRT-PLN-QTY1[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY2[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY3[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY4[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY5[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY6[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY7[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY8[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY9[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY10[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY11[AS0SW-TSQ-MAX] +     AS0SW-PRT-PLN-QTY12[AS0SW-TSQ-MAX];
    AS0SW03.AS0SW-TSQ-MAX = AS0SW-TSQ-MAX + 1;
  end
end // end AS0S-S012

//*** RECORD=AS0SW01 ****
// ************************************************************
// This record holds the data for creating the maps for AS0s.
// 
// DATE CREATED:        01-07-93
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 01-07-93  lrein      INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record AS0SW01 type basicRecord
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XOWCD XOWCD ; 
  10 XDVCD XDVCD ; 
  10 XSECD XSECD ; 
  10 AS0SW-SEASON-CODE AS0SW-SEASON-CODE ; 
    15 AS0SW-XSE1 AS0SW-XSE1 ; 
    15 * char(1) ; 
  10 XSNYR XSNYR ; 
  10 AS1-XSN-YY AS1-XSN-YY ; 
  10 AS0SW-SEASON-YEAR AS0SW-SEASON-YEAR ; 
    15 * char(3) ; 
    15 AS0SW-XSN4 AS0SW-XSN4 ; 
  10 AS0SM-XSE-XSN AS0SM-XSE-XSN ; 
    15 AS0SM-XSE1 AS0SM-XSE1 ; 
    15 AS0SM-XSN4 AS0SM-XSN4 ; 
  10 AS0SW-NEW-KEY AS0SW-NEW-KEY ; 
  10 AS0SW-SCREEN-DISPLAYED AS0SW-SCREEN-DISPLAYED ; 
  10 AS0SW-END-OF-CSR AS0SW-END-OF-CSR ; 
  10 AS0SW-MAX-PAGE AS0SW-MAX-PAGE ; 
  10 AS0SW-CURRENT-PAGE AS0SW-CURRENT-PAGE ; 
  10 AS0SW-LAST-PAGE AS0SW-LAST-PAGE ; 
  10 AS0SW-NEW-FCTY-DATA AS0SW-NEW-FCTY-DATA ; 
  10 AS0SW-VALID-PRTPLN-ROW AS0SW-VALID-PRTPLN-ROW ; 
  10 AS0SW-VALID-SEASON-ROW AS0SW-VALID-SEASON-ROW ; 
  10 AS0SW-WORK-DATE-A AS0SW-WORK-DATE-A ; 
    15 AS0SW-WORK-DATE-CC AS0SW-WORK-DATE-CC ; 
    15 AS0SW-WORK-DATE-YYMM AS0SW-WORK-DATE-YYMM ; 
      20 AS0SW-WORK-DATE-YY AS0SW-WORK-DATE-YY ; 
      20 AS0SW-WORK-DATE-MM AS0SW-WORK-DATE-MM ; 
  10 AS0SW-MONTH-BUCKET-B AS0SW-MONTH-BUCKET-B [11] ; 
    15 * num(3) ; // ************
    15 AS0SW-MONTH-BUCKET AS0SW-MONTH-BUCKET ; 
  10 AS0SW-TSL AS0SW-TSL ; 
  10 AS0SW-NMBR-PRINTS AS0SW-NMBR-PRINTS ; 
  10 AS0SW-QUANTITY AS0SW-QUANTITY ; 
  10 AS0SW-PRT-QTY AS0SW-PRT-QTY ; 
  10 AS0SW-VALID-UPD-FL AS0SW-VALID-UPD-FL ; 
  10 AS0SW-CONFIRM-UPD-FL AS0SW-CONFIRM-UPD-FL ; 
  10 AS0SW-UPDATE-ROW AS0SW-UPDATE-ROW ; 
  10 AS0SW-UPDATES-MADE AS0SW-UPDATES-MADE ; 
  10 AS0SW-SEL-COUNT AS0SW-SEL-COUNT ; 
end // end AS0SW01

//*** RECORD=AS0SW02 ****
// ************************************************************
// This record holds Factory data for AS0S.
// 
// DATE CREATED:        01-07-93
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 01-07-93  lrein      INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record AS0SW02 type basicRecord
  10 AS0SW-CURR-FCTY AS0SW-CURR-FCTY ; 
  10 AS0SW-CURR-STY AS0SW-CURR-STY ; 
  10 AS0SW-FCTY-IDX AS0SW-FCTY-IDX ; 
  10 AS0SW-MAX-FCTY AS0SW-MAX-FCTY ; 
  10 AS0SW-FACTORY AS0SW-FACTORY [200] ; 
  10 SY1STNBR SY1STNBR [200] ; 
  10 AS0SW-FCTY-TOTAL AS0SW-FCTY-TOTAL [12] ; 
  10 AS0SW-STYLE-TOTAL AS0SW-STYLE-TOTAL [12] ; 
end // end AS0SW02

//*** RECORD=AS0SW03 ****
// ************************************************************
// This record holds Print Plan Data for AS0S:
// 
// DATE CREATED:        01-07-93
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 01-07-93  lrein      INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record AS0SW03 type basicRecord
  5 * char(846) ; 
    10 AS0SW-TSQ-LENGTH AS0SW-TSQ-LENGTH ; 
    10 AS0SW-TSQ-MAX AS0SW-TSQ-MAX ; 
    10 * char(84) [10] ; 
      15 AS0SM-XSE-XSN AS0SM-XSE-XSN ; 
      15 SY2BCLCD SY2BCLCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 SY1BSTNB SY1BSTNB ; 
      15 PG1SC4CD PG1SC4CD ; 
      15 XOWCD XOWCD ; 
      15 XDVCD XDVCD ; 
      15 AS0SW-NBR-PRTS AS0SW-NBR-PRTS ; 
      15 AS0SW-PRT-PLN-QTY1 AS0SW-PRT-PLN-QTY1 ; 
      15 AS0SW-PRT-PLN-QTY2 AS0SW-PRT-PLN-QTY2 ; 
      15 AS0SW-PRT-PLN-QTY3 AS0SW-PRT-PLN-QTY3 ; 
      15 AS0SW-PRT-PLN-QTY4 AS0SW-PRT-PLN-QTY4 ; 
      15 AS0SW-PRT-PLN-QTY5 AS0SW-PRT-PLN-QTY5 ; 
      15 AS0SW-PRT-PLN-QTY6 AS0SW-PRT-PLN-QTY6 ; 
      15 AS0SW-PRT-PLN-QTY7 AS0SW-PRT-PLN-QTY7 ; 
      15 AS0SW-PRT-PLN-QTY8 AS0SW-PRT-PLN-QTY8 ; 
      15 AS0SW-PRT-PLN-QTY9 AS0SW-PRT-PLN-QTY9 ; 
      15 AS0SW-PRT-PLN-QTY10 AS0SW-PRT-PLN-QTY10 ; 
      15 AS0SW-PRT-PLN-QTY11 AS0SW-PRT-PLN-QTY11 ; 
      15 AS0SW-PRT-PLN-QTY12 AS0SW-PRT-PLN-QTY12 ; 
      15 AS0SM-MNTH-TOTL AS0SM-MNTH-TOTL ; 
end // end AS0SW03

Record AS0SW04 type basicRecord
  5 AS0SW04-GROUP AS0SW04-GROUP ; 
    10 AS0SW-TSQ-LENGTH AS0SW-TSQ-LENGTH ; 
    10 AS0SW-TSQ-DATA AS0SW-TSQ-DATA ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 SY1STNBR SY1STNBR ; 
      15 XOWCD XOWCD ; 
      15 XDVCD XDVCD ; 
end // end AS0SW04

DataItem AS0SM-MNTH-TOTL num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0SM-XSE-XSN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0SM-XSE1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0SM-XSN4 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CONFIRM Update Flag
DataItem AS0SW-CONFIRM-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current Facotry
DataItem AS0SW-CURR-FCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current Facotry
DataItem AS0SW-CURR-STY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page Displayed
DataItem AS0SW-CURRENT-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of Csr
DataItem AS0SW-END-OF-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print Plan Factory
DataItem AS0SW-FACTORY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current Facotry index
DataItem AS0SW-FCTY-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FACTORY ARRAY
DataItem AS0SW-FCTY-TOTAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last Page Fetched from TSQ
DataItem AS0SW-LAST-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Maximum Fctys to Display
DataItem AS0SW-MAX-FCTY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Maximum Pages to Display
DataItem AS0SW-MAX-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month Header Buckets Curr-12-R
DataItem AS0SW-MONTH-BUCKET num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month Header Buckets Curr-12
DataItem AS0SW-MONTH-BUCKET-B num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number Of Prints Computed
DataItem AS0SW-NBR-PRTS bin(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request New Data For Factory
DataItem AS0SW-NEW-FCTY-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New Selection Key Flag
DataItem AS0SW-NEW-KEY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Nbr Of Prints
DataItem AS0SW-NMBR-PRINTS bin(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 1
DataItem AS0SW-PRT-PLN-QTY1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 10
DataItem AS0SW-PRT-PLN-QTY10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 11
DataItem AS0SW-PRT-PLN-QTY11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 12
DataItem AS0SW-PRT-PLN-QTY12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 2
DataItem AS0SW-PRT-PLN-QTY2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 3
DataItem AS0SW-PRT-PLN-QTY3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 4
DataItem AS0SW-PRT-PLN-QTY4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 5
DataItem AS0SW-PRT-PLN-QTY5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 6
DataItem AS0SW-PRT-PLN-QTY6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 7
DataItem AS0SW-PRT-PLN-QTY7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 8
DataItem AS0SW-PRT-PLN-QTY8 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Plan Quantity Month 9
DataItem AS0SW-PRT-PLN-QTY9 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Print Qty
DataItem AS0SW-PRT-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Qty
DataItem AS0SW-QUANTITY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen Displayed
DataItem AS0SW-SCREEN-DISPLAYED smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0SW-SEASON-CODE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0SW-SEASON-YEAR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0SW-SEL-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FACTORY ARRAY
DataItem AS0SW-STYLE-TOTAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp Storage Length
DataItem AS0SW-TSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0SW-TSQ-DATA char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ LENGTH
DataItem AS0SW-TSQ-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAX LOADED INTO ARRAY
DataItem AS0SW-TSQ-MAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicate Row To Update
DataItem AS0SW-UPDATE-ROW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Indicate Row To Update
DataItem AS0SW-UPDATES-MADE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid Print Plan Detail Row
DataItem AS0SW-VALID-PRTPLN-ROW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prnt Pln Dt Valid for Season
DataItem AS0SW-VALID-SEASON-ROW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid Update Flag
DataItem AS0SW-VALID-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Date
DataItem AS0SW-WORK-DATE-A num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Date Century
DataItem AS0SW-WORK-DATE-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Date Month
DataItem AS0SW-WORK-DATE-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Date Year
DataItem AS0SW-WORK-DATE-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Date Year/Month
DataItem AS0SW-WORK-DATE-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0SW-XSE1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0SW-XSN4 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0SW04-GROUP char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

