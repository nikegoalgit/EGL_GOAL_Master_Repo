package as0u;

import ab.common.*;
import as1.common.AS1REC;
import as1.common.ASWREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAS-00000;
import corpcom3.XPAS-39999;
import corpcom3.XPAS-51200;
import corpcom3.XPXDV01;
import corpcom3.XPXX001;
import corpcom3.XSASS-XOW;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDVABRV;
import corpx1.XDVCD;
import corpx1.XDVDESC;
import corpx1.XDVTBL;
import corpx1.XOWTBL;
import corpx1.XSETBL;
import corpx2.XOWABRV;
import corpx2.XOWCD;
import corpx2.XOWKEY;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpx2.XWHCD;
import corpy2.YSNTBL;
import corpz3.ZZZCHGCT;
import fy.common.FY1FCTSN;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY4IDDSC;
import sy.common.SY4REC;
import sy.common.SY5SZID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TAEREC;
import vv.common.VPRTPL01;
//*** PROGRAM=AS0U ****
// This  application is part of the print plan system.  It is
// used to change the quantities generated by the Print Plan
// Load (submitted by AS0P).  The quantities are changed in
// total, and the application figures out what the size quan-
// tities should be based on the proportion they were of the
// original total.  The only exception to this is if there is a
// row with no size quantities or size id's.  In that case, the
// only way to determine the size quantities is to enter them
// on the screen.  The purpose of this program is to move quan-
// tities from month to month.  The overall style/color/fcty/
// owner group total may not change.
// 
// *----------M A I N T E N A N C E   H I S T O R Y------------
// 
// S.R. #   Date   Perp   Comments
// ------ -------- ------ -------------------------------------
// AB0248 07-25-94 LREIN  Original Implementation
// *********************
Program AS0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AS0UW00 AS0UW00; // record
  AS0UW01 AS0UW01; // record
  AS0UW02 AS0UW02; // record
  AS1REC AS1REC; // record
  ASWREC ASWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TAEREC TAEREC; // record
  VPRTPL01 VPRTPL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AS0UM.AS0UM001, // form
  		AS0UM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAS-00000: XPAS-00000();
    set AS0UW00 empty;
    set AS0UW01 empty;
    set AS0UW02 empty;
    set ASWREC empty;
    set ERRSQLCA empty;
    AS0UW00.AS0UW-MAX-STYLES = +1000;
    AS0UW00.AS0UW-LINES-PER-SCREEN = +10;
    AS0UW00.AS0UW-OBTAIN-DATA-SW = "N";
    AS0UW00.AS0UW-FORMAT-MAP-SW = "Y";
    AS0UW00.AS0UW-KEY-CHANGED-SW = "Y";
    AS0UW00.AS0UW-UPDATES-CONFIRMED = "N";
    AS0UW00.AS0UW-GET-UPDATE-CONFIRM = "N";
    AS0UW00.AS0UW-PAGE-TO-DISPLAY = 1;
    AS0UW00.AS0UW-STYCLRS-INDEX = 1;
    AS0UW00.AS0UW-FIRST-TIME = "Y";
    ;
    set AS0UM001 initial;
    AS0UM001.XSECD = AS1REC.XSECD; /* start season*/
    AS0UM001.XSNYR = AS1REC.XSNYR; /* start season year*/
    AS0UM001.XDVCD = AS1REC.XDVCD; /* start division*/
    AS0UM001.FY1FCTYC = AS1REC.FY1FCTYC;
    AS0UM001.SY1STNBR = AS1REC.SY1STNBR;
    AS0UM001.SY2CLRID = AS1REC.SY2CLRID; /* start color*/
    AS0UM001.XOWCD = " "; /* start owner group*/
    AS0U-0000: AS0U-0000();
    goto AS0U-0000;
  end // end main
end // end AS0U

// process data
Function AS0U-0000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AS0U-1000(); /* Obtain the data to display*/
  AS0U-2000(); /* Format and display the map*/
  AS0U-3000(); /* Check attention identifier*/
  AS0U-4000(); /* Reset fields to normal intensity*/
  AS0U-5000(); /* Verify the entered data*/
  AS0U-6000(); /* Process valid input request*/
  ;
end // end AS0U-0000

// obtain data to display
Function AS0U-1000()
  if (AS0UW00.AS0UW-OBTAIN-DATA-SW == "N") /* dont get data*/
    return;
  end
  ;
  AS0U-1100(); /* format select key*/
  AS0U-1200(); /* declare cursor vprtpln*/
  AS0U-1300(); /* fetch first vprtpln row*/
  AS0U-1400(); /* save key*/
  ;
  if (converseVar.eventKey is pf20) /* next sty/clr*/
    /* ;*/
    while (SQLCA.VAGen_SQLCODE != 100
     && VPRTPL01.XDVCD == AS0UW01.AS0UM-CURR-XDV
     && VPRTPL01.FY1FCTYC == AS0UW01.AS0UM-CURR-FCTY
     && VPRTPL01.SY1STNBR == AS0UW01.AS0UM-CURR-STY
     && VPRTPL01.SY2CLRID == AS0UW01.AS0UM-CURR-CLR
     && VPRTPL01.XOWCD == AS0UW01.AS0UM-CURR-XOW) /* record key = curr*/
      AS0U-1300();
    end
    AS0U-1400();
  end
  ;
  AS0UW00.AS0UW-MONTH-INDEX = 1;
  move "N" to AS0UW00.AS0UW-SIZE-FLAGS[1] for all; /* this size not used*/
  move 0 to AS0UW01.AS0UM-SZ-TOT[1] for all; /* totals for screen*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    AS0UM001.XXXPRCNM = "AS0U1000";
    converseLib.validationFailed(5);
    AS0UW00.AS0UW-OBTAIN-DATA-SW = "N";
    AS0U-S005(); /* reset saved key*/
    return;
  end
  ;
  while (SQLCA.VAGen_SQLCODE != 100
   && VPRTPL01.XDVCD == AS0UW01.AS0UM-CURR-XDV
   && VPRTPL01.FY1FCTYC == AS0UW01.AS0UM-CURR-FCTY
   && VPRTPL01.SY1STNBR == AS0UW01.AS0UM-CURR-STY
   && VPRTPL01.SY2CLRID == AS0UW01.AS0UM-CURR-CLR
   && VPRTPL01.XOWCD == AS0UW01.AS0UM-CURR-XOW) /* record key = work key*/
    AS0U-1500(); /* process vprtpln row*/
    AS0U-1300(); /* fetch vprtpln row*/
  end
  ;
  AS0U-1600(); /* close vprtpln cursor*/
  AS0UW02.AS0UW-DETAIL-DATA = AS0UW01.AS0UW-DETAIL-DATA;
  AS0UW00.AS0UW-FORMAT-MAP-SW = "Y"; /* format map*/
  AS0UW00.AS0UW-OBTAIN-DATA-SW = "N"; /* done with getting data*/
  AS0UW00.AS0UW-MONTH-INDEX = 1; /* start display at beginning*/
end // end AS0U-1000

// format select key
Function AS0U-1100()
  set VPRTPL01 empty;
  ;
  if (AS0UW00.AS0UW-KEY-CHANGED-SW == "Y")
    VPRTPL01.XDVCD = AS0UM001.XDVCD;
    VPRTPL01.FY1FCTYC = AS0UM001.FY1FCTYC;
    VPRTPL01.SY1STNBR = AS0UM001.SY1STNBR;
    VPRTPL01.SY2CLRID = AS0UM001.SY2CLRID;
    VPRTPL01.XOWCD = AS0UM001.XOWCD;
  else
    VPRTPL01.XDVCD = AS0UW01.AS0UM-CURR-XDV;
    VPRTPL01.FY1FCTYC = AS0UW01.AS0UM-CURR-FCTY;
    VPRTPL01.SY1STNBR = AS0UW01.AS0UM-CURR-STY;
    VPRTPL01.SY2CLRID = AS0UW01.AS0UM-CURR-CLR;
    VPRTPL01.XOWCD = AS0UW01.AS0UM-CURR-XOW;
    ;
    AS0UW01.AS0UM-CURR-XDV = " ";
    AS0UW01.AS0UM-CURR-FCTY = " ";
    AS0UW01.AS0UM-CURR-STY = " ";
    AS0UW01.AS0UM-CURR-CLR = " ";
    AS0UW01.AS0UM-CURR-XOW = " ";
  end
  ;
  VPRTPL01.XSECD = AS0UM001.XSECD;
  VPRTPL01.XSNYR = AS0UM001.XSNYR;
  ;
  if (VPRTPL01.XSNYR < 85)
    VPRTPL01.XSNYR = VPRTPL01.XSNYR + 2000;
  else
    VPRTPL01.XSNYR = VPRTPL01.XSNYR + 1900;
  end
  ;
end // end AS0U-1100

// declare DABUY.VPRTPL01 cursor
Function AS0U-1200()
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO6440" ("S4", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0UM001.XXXPRCNM = "AS0U-1200"; /* PROCESS NUMBER*/
  TA1REC.TA1PGMNM = "AS0U1200"; /* Error location*/
  TA1REC.TA1LOC = "SELECT BLANK ROW";
  TA1REC.TA1MAP = "AS0UM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRTPL01.VPRTPL01-GROUP; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AS0UW00.AS0UW-OBTAIN-DATA-SW = "N";
  exit stack; /* Exit to redisplay map*/
end // end AS0U-1200

// fetch DABUY.VPRTPL01 row
Function AS0U-1300()
  ;
  try
    call "IO6440" ("N4", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Return code normal*/
     || SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0UM001.XXXPRCNM = "AS0U-1300"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0U1300"; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VPRTPL01 ROW";
  TA1REC.TA1MAP = "AS0UM001"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRTPL01.VPRTPL01-GROUP; /* table key*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AS0U-1600(); /* close cursor*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0U-1300

// save retrieved key
Function AS0U-1400()
  if (AS0UW00.AS0UW-KEY-CHANGED-SW == "Y") /* key changed*/
    set AS0UW01 empty;
    AS0UW00.AS0UW-STYCLRS-INDEX = 1;
  else
    AS0UW01.AS0UW-DETAIL-DATA = " ";
  end
  ;
  if (SQLCA.VAGen_SQLCODE != 100) /* rows found*/
    AS0UW00.XSNYR = VPRTPL01.XSNYR;
    AS0UW01.AS0UM-CURR-XDV = VPRTPL01.XDVCD;
    AS0UW01.AS0UM-CURR-FCTY = VPRTPL01.FY1FCTYC;
    AS0UW01.AS0UM-CURR-STY = VPRTPL01.SY1STNBR;
    AS0UW01.AS0UM-CURR-CLR = VPRTPL01.SY2CLRID;
    AS0UW01.AS0UM-CURR-XOW = VPRTPL01.XOWCD; /* current key for map*/
    ;
    if (VPRTPL01.AB-ROW-MAN-MNTN-FL == "Y")
      AS0UW01.AB-ROW-MAN-MNTN-FL = "Y";
    else
      AS0UW01.AB-ROW-MAN-MNTN-FL = "N";
    end
    ;
    if (AS0UW00.AS0UW-STYCLRS-INDEX > 1)
      AS0UW00.AS0UW-HIT-COUNT = 1;
      AS0UW00.AS0UW-STYCLRS-INDEX = AS0UW00.AS0UW-STYCLRS-INDEX - 1; /* prev bucket*/
    end
    ;
    if (VPRTPL01.XDVCD != AS0UW00.AS0UM-CURR-XDV[AS0UW-STYCLRS-INDEX]
     || VPRTPL01.FY1FCTYC != AS0UW00.AS0UM-CURR-FCTY[AS0UW-STYCLRS-INDEX]
     || VPRTPL01.SY1STNBR != AS0UW00.AS0UM-CURR-STY[AS0UW-STYCLRS-INDEX]
     || VPRTPL01.SY2CLRID != AS0UW00.AS0UM-CURR-CLR[AS0UW-STYCLRS-INDEX]
     || VPRTPL01.XOWCD != AS0UW00.AS0UM-CURR-XOW[AS0UW-STYCLRS-INDEX])
      ;
      if (AS0UW00.AS0UW-STYCLRS-INDEX > 1
       || AS0UW00.AS0UW-HIT-COUNT == 1)
        AS0UW00.AS0UW-HIT-COUNT = 0;
        AS0UW00.AS0UW-STYCLRS-INDEX = AS0UW00.AS0UW-STYCLRS-INDEX + 1; /* next bucket*/
      end
      ;
      AS0UW00.AS0UM-CURR-XDV[AS0UW-STYCLRS-INDEX] = VPRTPL01.XDVCD;
      AS0UW00.AS0UM-CURR-FCTY[AS0UW-STYCLRS-INDEX] = VPRTPL01.FY1FCTYC;
      AS0UW00.AS0UM-CURR-STY[AS0UW-STYCLRS-INDEX] = VPRTPL01.SY1STNBR;
      AS0UW00.AS0UM-CURR-CLR[AS0UW-STYCLRS-INDEX] = VPRTPL01.SY2CLRID;
      AS0UW00.AS0UM-CURR-XOW[AS0UW-STYCLRS-INDEX] = VPRTPL01.XOWCD;
    end
    ;
    AS0UW00.AS0UW-STYCLRS-INDEX = AS0UW00.AS0UW-STYCLRS-INDEX + 1; /* next bucket*/
  end
  ;
  if (AS0UW00.AS0UW-STYCLRS-INDEX > AS0UW00.AS0UW-MAX-STYLES)
    AS0UW00.AS0UW-STYCLRS-INDEX = 2;
    ;
    while (AS0UW00.AS0UW-STYCLRS-INDEX < AS0UW00.AS0UW-MAX-STYLES)
      AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-STYCLRS-INDEX - 1;
      AS0UW00.AS0UM-CURR-XDV[AS0UW-TEMP-INDEX] = AS0UW00.AS0UM-CURR-XDV[AS0UW-STYCLRS-INDEX];
      AS0UW00.AS0UM-CURR-FCTY[AS0UW-TEMP-INDEX] = AS0UW00.AS0UM-CURR-FCTY[AS0UW-STYCLRS-INDEX];
      AS0UW00.AS0UM-CURR-STY[AS0UW-TEMP-INDEX] = AS0UW00.AS0UM-CURR-STY[AS0UW-STYCLRS-INDEX];
      AS0UW00.AS0UM-CURR-CLR[AS0UW-TEMP-INDEX] = AS0UW00.AS0UM-CURR-CLR[AS0UW-STYCLRS-INDEX];
      AS0UW00.AS0UM-CURR-XOW[AS0UW-TEMP-INDEX] = AS0UW00.AS0UM-CURR-XOW[AS0UW-STYCLRS-INDEX];
      AS0UW00.AS0UW-STYCLRS-INDEX = AS0UW00.AS0UW-STYCLRS-INDEX + 1;
    end
    ;
  end
  ;
end // end AS0U-1400

// process prtpl row
Function AS0U-1500()
  ;
  AS0UW01.ZZZCHGCT[AS0UW-MONTH-INDEX] = VPRTPL01.ZZZCHGCT;
  AS0UW00.AS0UW-PRT-PLN-MO = VPRTPL01.AB-PRT-PLN-MO;
  AS0UW01.AS0UM-PRT-PLN-MO[AS0UW-MONTH-INDEX] = AS0UW00.AS0UW-PRT-PLN-MM;
  AS0UW01.AS0UM-PRT-PLN-YR[AS0UW-MONTH-INDEX] = AS0UW00.AS0UW-PRT-PLN-CCYY;
  AS0UW01.AS0UM-MO-TOT[AS0UW-MONTH-INDEX] = 0;
  AS0UW00.AS0UW-SIZE-INDEX = 1; /* first bucket*/
  ;
  while (AS0UW00.AS0UW-SIZE-INDEX <= 10) /* for each size*/
    AS0UW01.SY5SZID[AS0UW-SIZE-INDEX] = VPRTPL01.SY5SZID[AS0UW-SIZE-INDEX];
    AS0UW01.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX] = AS0UW01.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX] +     VPRTPL01.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX];
    ;
    if (VPRTPL01.SY5SZID[AS0UW-SIZE-INDEX] != 0)
      AS0UW00.AS0UW-TEMP-INDEX = VPRTPL01.SY5SZID[AS0UW-SIZE-INDEX];
      AS0UW00.AS0UW-SIZE-FLAGS[AS0UW-TEMP-INDEX] = "Y";
    end
    ;
    AS0UW01.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX] = VPRTPL01.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX];
    AS0UW01.AS0UM-MO-TOT[AS0UW-MONTH-INDEX] = AS0UW01.AS0UM-MO-TOT[AS0UW-MONTH-INDEX] +     VPRTPL01.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX];
    AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1; /* next size*/
  end
  ;
  AS0UW00.AS0UW-SIZE-INDEX = 1; /* first bucket*/
  ;
  ;
  AS0UW01.AS0UW-SIZE-DATA[AS0UW-MONTH-INDEX] = AS0UW01.AS0UW-BREAKOUT-GROUP; /* from data base*/
   /* OVE AS0UW01.AS0UW-BREAKOUT-GROUP TO*/
                                  /* AS0UW02.AS0UW-SIZE-DATA(AS0UW-MONTH-I*/
                                  /* NDEX);/* for map, may be modified*/
  AS0UW00.AS0UW-MONTH-INDEX = AS0UW00.AS0UW-MONTH-INDEX + 1;
end // end AS0U-1500

// close DABUY.VPRTPL01 cursor
Function AS0U-1600()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6440" ("C4", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AS0UM001.XXXPRCNM = "AS0U-1300"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0U1300"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AS0UM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AS0U-1600

// format and display map
Function AS0U-2000()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  AS0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AS0UM001 alarm; /* Indicate sound alarm*/
  end
  ;
  if (AS0UW00.AS0UW-FORMAT-MAP-SW == "N" /* dont format map*/
   || converseVar.validationMsgNum != 0) /* Error message to display*/
    ;
    if (converseVar.validationMsgNum == 2
     || converseVar.validationMsgNum == 3
     || converseVar.validationMsgNum == 13
     || converseVar.validationMsgNum == 46
     || converseVar.validationMsgNum == 47
     || converseVar.validationMsgNum == 179) /* evil hard code for line data edit*/
      AS0U-2300(); /* format special attributes*/
      AS0U-2240(); /* darken unused columns*/
    else
      ;
      if (converseVar.validationMsgNum == 44
       || converseVar.validationMsgNum == 126
       || converseVar.validationMsgNum == 41
       || converseVar.validationMsgNum == 75
       || converseVar.validationMsgNum == 71
       || converseVar.validationMsgNum == 16
       || converseVar.validationMsgNum == 26
       || converseVar.validationMsgNum == 5) /* likewise for clear screen errors*/
        AS0U-2400(); /* clear detail lines*/
        AS0U-2240(); /* darken unused columns*/
      end
      ;
    end
    ;
  else
    ;
    if (AS0UW00.AS0UW-FIRST-TIME == "Y")
      AS0UW00.AS0UW-FIRST-TIME = "N";
    else
      AS0UW01.XSECD = AS0UM001.XSECD;
      AS0UW01.XSNYR = AS0UM001.XSNYR;
      AS0UW01.XDVCD = AS0UM001.XDVCD;
      AS0UW01.XDVABRV = AS0UM001.XDVABRV;
      AS0UW01.FY1FCTYC = AS0UM001.FY1FCTYC;
      AS0UW01.FY1FCTSN = AS0UM001.FY1FCTSN;
      AS0UW01.SY1STNBR = AS0UM001.SY1STNBR;
      AS0UW01.SY1SSTNM = AS0UM001.SY1SSTNM;
      AS0UW01.SY2CLRID = AS0UM001.SY2CLRID;
      AS0UW01.SY2CLRAB = AS0UM001.SY2CLRAB;
      AS0UW01.XOWCD = AS0UM001.XOWCD;
      AS0UW01.XOWABRV = AS0UM001.XOWABRV;
      /* IF AS0UW00.AS0UW-GET-UPDATE-CONFIRM = 'N';*/
      set AS0UM001 initial;
      /* END;*/
      AS0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
      if (AS1REC.AS1-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(AS1REC.AS1-MSG-NO);
      end /* Information message number*/
      AS1REC.AS1-MSG-NO = 0; /* Reset information message number*/
      AS0U-2100(); /* format header data*/
      if (AS0UW00.AS0UW-MONTH-INDEX > 0)
        AS0U-2200(); /* Format the data on the page*/
      end
      ;
      AS0UW00.AS0UW-FORMAT-MAP-SW = "N"; /* map is formatted*/
    end
    ;
  end
  ;
  AS0UW00.AS0UW-SCREEN-LINE = AS0UW00.AS0UW-LINES-PER-SCREEN;
  ;
  while (AS0UW00.AS0UW-SCREEN-LINE > 0
   && AS0UM001.AS0UM-PRT-PLN-YR[AS0UW-SCREEN-LINE] == " ")
    set AS0UM001.AS0UM-PRT-PLN-YR[AS0UW-SCREEN-LINE] skip, invisible;
    set AS0UM001.AS0UM-PRT-PLN-MO[AS0UW-SCREEN-LINE] skip, invisible;
    set AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] skip, invisible;
    AS0UW00.AS0UW-SCREEN-LINE = AS0UW00.AS0UW-SCREEN-LINE - 1;
  end
  ;
  if (AS0UW00.AS0UW-SCREEN-LINE == 0)
    set AS0UM001.AS0UM-DATE-LIT skip, invisible;
    set AS0UM001.AS0UM-TOTAL-LIT skip, invisible;
    set AS0UM001.AS0UM-SZ-TOT-LIT skip, invisible;
    AS0UW00.AS0UW-SIZE-INDEX = 1;
    ;
    while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
      set AS0UM001.SY4IDDSC[AS0UW-SIZE-INDEX] skip, invisible;
      AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
    end
    ;
  end
  ;
  if (AS0UW01.AB-ROW-MAN-MNTN-FL == "Y")
    set AS0UM001.AS0UM-RECALC-MESSAGE initialAttributes;
    set AS0UM001.AS0UM-RECALC-PFKEY initialAttributes;
  else
    set AS0UM001.AS0UM-RECALC-MESSAGE invisible;
    set AS0UM001.AS0UM-RECALC-PFKEY invisible;
  end
  ;
  converse AS0UM001 ;
end // end AS0U-2000

// format screen header
Function AS0U-2100()
  AS0UM001.XSECD = AS0UW01.XSECD;
  AS0UM001.XSNYR = AS0UW01.XSNYR;
  AS0UM001.XDVCD = AS0UW01.XDVCD;
  AS0UM001.XDVABRV = AS0UW01.XDVABRV;
  AS0UM001.FY1FCTYC = AS0UW01.FY1FCTYC;
  AS0UM001.FY1FCTSN = AS0UW01.FY1FCTSN;
  AS0UM001.SY1STNBR = AS0UW01.SY1STNBR;
  AS0UM001.SY1SSTNM = AS0UW01.SY1SSTNM;
  AS0UM001.SY2CLRID = AS0UW01.SY2CLRID;
  AS0UM001.SY2CLRAB = AS0UW01.SY2CLRAB;
  AS0UM001.XOWCD = AS0UW01.XOWCD;
  AS0UM001.XOWABRV = AS0UW01.XOWABRV;
  ;
  AS0UM001.AS0UM-CURR-XDV = AS0UW01.AS0UM-CURR-XDV;
  AS0UM001.AS0UM-CURR-FCTY = AS0UW01.AS0UM-CURR-FCTY;
  AS0UM001.AS0UM-CURR-STY = AS0UW01.AS0UM-CURR-STY;
  AS0UM001.AS0UM-CURR-CLR = AS0UW01.AS0UM-CURR-CLR;
  AS0UM001.AS0UM-CURR-XOW = AS0UW01.AS0UM-CURR-XOW;
  ;
  if (AS0UM001.AS0UM-CURR-XDV != " ")
    AS0UW00.XDVCD = AS0UM001.AS0UM-CURR-XDV;
    AS0U-S001(); /* get division abbrev*/
    AS0UM001.AS0UM-CURR-XDVABRV = AS0UW00.XDVDESC;
  else
    AS0UM001.AS0UM-CURR-XDVABRV = " ";
  end
  ;
  if (AS0UM001.AS0UM-CURR-FCTY != " ")
    set FY1REC empty;
    FY1REC.FY1FCTYC = AS0UM001.AS0UM-CURR-FCTY;
    FY1REC.XGPCD = "03";
    AS0U-S002(); /* get factory name*/
    AS0UM001.AS0UM-CURR-FCTY-NM = FY1REC.FY1FCTSN;
  else
    AS0UM001.AS0UM-CURR-FCTY-NM = " ";
  end
  ;
  if (AS0UM001.AS0UM-CURR-STY != " ")
    set PG2REC empty;
    PG2REC.XGPCD = "03";
    PG2REC.XDMCD = "00";
    PG2REC.SY1STNBR = AS0UM001.AS0UM-CURR-STY;
    PG2REC.SY2CLRID = AS0UM001.AS0UM-CURR-CLR;
    AS0U-S003(); /* get sty/clr name*/
    AS0UM001.AS0UM-CURR-STY-NM = PG2REC.SY1SSTNM;
    AS0UM001.AS0UM-CURR-CLR-AB = PG2REC.SY2CLRAB;
  else
    AS0UM001.AS0UM-CURR-STY-NM = " ";
    AS0UM001.AS0UM-CURR-CLR-AB = " ";
  end
  ;
  if (AS0UM001.AS0UM-CURR-XOW != " ")
    AS0UW00.XWHCD = "51";
    AS0UW00.XOWCD = AS0UM001.AS0UM-CURR-XOW;
    AS0U-S004(); /* get owner group abbrev*/
    AS0UM001.AS0UM-CURR-XOWABRV = AS0UW00.XOWABRV;
  else
    AS0UM001.AS0UM-CURR-XOWABRV = " ";
  end
  ;
end // end AS0U-2100

// format screen detail
Function AS0U-2200()
  if (PG2REC.SY4SZSCL != " ")
    AS0U-2210(); /* format size descriptions*/
  end
  ;
  AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-MONTH-INDEX;
  AS0UW00.AS0UW-SCREEN-LINE = 1;
  ;
  while (AS0UW00.AS0UW-SCREEN-LINE <= AS0UW00.AS0UW-LINES-PER-SCREEN
   && AS0UW01.AS0UM-PRT-PLN-YR[AS0UW-TEMP-INDEX] != " ")
    AS0UM001.AS0UM-PRT-PLN-YR[AS0UW-SCREEN-LINE] = AS0UW01.AS0UM-PRT-PLN-YR[AS0UW-TEMP-INDEX];
    AS0UM001.AS0UM-PRT-PLN-MO[AS0UW-SCREEN-LINE] = AS0UW01.AS0UM-PRT-PLN-MO[AS0UW-TEMP-INDEX];
    if (AS0UW00.AS0UW-GET-UPDATE-CONFIRM == "N")
      AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] = AS0UW01.AS0UM-MO-TOT[AS0UW-TEMP-INDEX];
    else
      AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] = AS0UW02.AS0UM-MO-TOT[AS0UW-TEMP-INDEX];
    end
    AS0U-2220(); /* load quantities*/
    AS0UW00.AS0UW-SCREEN-LINE = AS0UW00.AS0UW-SCREEN-LINE + 1;
    AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-TEMP-INDEX + 1;
  end
  ;
  AS0UW00.AS0UW-SIZE-INDEX = 1;
  AS0UW01.AS0UM-STY-TOT = +0;
  AS0UW02.AS0UM-STY-TOT = +0;
  ;
  while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
    if (AS0UW00.AS0UW-GET-UPDATE-CONFIRM == "N")
      AS0UM001.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX] = AS0UW01.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX];
      AS0UW01.AS0UM-STY-TOT = AS0UW01.AS0UM-STY-TOT +       AS0UW01.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX];
    else
      AS0UM001.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX] = AS0UW02.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX];
      AS0UW02.AS0UM-STY-TOT = AS0UW02.AS0UM-STY-TOT +       AS0UW02.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX];
    end
    AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
  end
  ;
  if (AS0UW00.AS0UW-GET-UPDATE-CONFIRM == "N")
    AS0UM001.AS0UM-STY-TOT = AS0UW01.AS0UM-STY-TOT;
  else
    AS0UM001.AS0UM-STY-TOT = AS0UW02.AS0UM-STY-TOT;
  end
  AS0U-2240(); /* darken unused columns*/
  ;
end // end AS0U-2200

// format size descriptions
Function AS0U-2210()
  set SY4REC empty;
  AS0UW-TEMP2-INDEX = 1;
  ;
  while (AS0UW00.AS0UW-TEMP2-INDEX <= 40)
    AS0UW00.SY4IDDSC[AS0UW-TEMP2-INDEX] = " ";
    AS0UW00.AS0UW-TEMP2-INDEX = AS0UW00.AS0UW-TEMP2-INDEX + 1;
  end
  SY4REC.SY4SZSCL = PG2REC.SY4SZSCL;
  AS0U-2211(); /* get size descriptions*/
  ;
   /* ------------------------------------------------------------*/
   /* Store all retrieved size descriptions.*/
   /* ------------------------------------------------------------*/
  ;
  AS0UW00.AS0UW-SIZE-INDEX = 1; /* Reset loop index*/
  AS0UW00.AS0UW-TEMP-INDEX = 1; /* Reset loop index*/
  ;
  while (AS0UW00.AS0UW-SIZE-INDEX <= 10
   && AS0UW00.AS0UW-TEMP-INDEX <= 40)
    ;
    while (AS0UW00.AS0UW-TEMP-INDEX <= 40)
      ;
      if (AS0UW00.AS0UW-SIZE-FLAGS[AS0UW-TEMP-INDEX] == "Y")
        AS0UM001.SY4IDDSC[AS0UW-SIZE-INDEX] = SY4REC.SY4IDDSC[AS0UW-TEMP-INDEX];
        AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
      end
      ;
      AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-TEMP-INDEX + 1;
    end
    ;
  end
  ;
  while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
    set AS0UM001.SY4IDDSC[AS0UW-SIZE-INDEX] skip, invisible;
    AS0UM001.SY4IDDSC[AS0UW-SIZE-INDEX] = " ";
    AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
  end
  ;
end // end AS0U-2210

// get size description
Function AS0U-2211()
  ;
   /* ------------------------------------------------------------*/
   /* Select unique the Dprod.Vscale01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE != 0       
   && SQLCA.VAGen_SQLCODE != 100)   
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If not successful, go to flow*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call successful*/
   || SQLCA.VAGen_SQLCODE != 0)      /* and normal return code*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AS0UM001.XXXPRCNM = "AS0U-2211"; /* Process number*/
    TA1REC.TA1PGMNM = "AS0U2111"; /* Error location*/
    TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
    TA1REC.TA1MAP = "AS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCALE01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
end // end AS0U-2211

// move print plan quantities
Function AS0U-2220()
  AS0UW00.AS0UW-TEMP2-INDEX = 10 * (AS0UW00.AS0UW-SCREEN-LINE - 1) + 1;
  ;
  if (AS0UW00.AS0UW-GET-UPDATE-CONFIRM == "N")
    AS0UW01.AS0UW-BREAKOUT-GROUP = AS0UW01.AS0UW-SIZE-DATA[AS0UW-TEMP-INDEX];
    AS0UW00.AS0UW-SIZE-INDEX = 1;
    ;
    while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
      AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX] = AS0UW01.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX];
      ;
      set AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX] normal;
      if (AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] == 0)
        set AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] skip;
      end
      ;
      AS0UW00.AS0UW-SIZE-INDEX = AS0UW-SIZE-INDEX + 1;
      AS0UW00.AS0UW-TEMP2-INDEX = AS0UW-TEMP2-INDEX + 1;
    end
  else
    ;
    AS0UW02.AS0UW-BREAKOUT-GROUP = AS0UW02.AS0UW-SIZE-DATA[AS0UW-TEMP-INDEX];
    AS0UW00.AS0UW-SIZE-INDEX = 1;
    ;
    while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
      AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX] = AS0UW02.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX];
      ;
      set AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX] normal;
      if (AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] == 0)
        set AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] skip;
      end
      ;
      AS0UW00.AS0UW-SIZE-INDEX = AS0UW-SIZE-INDEX + 1;
      AS0UW00.AS0UW-TEMP2-INDEX = AS0UW-TEMP2-INDEX + 1;
    end
  end
  ;
end // end AS0U-2220

// darken unused columns
Function AS0U-2240()
  AS0UW00.AS0UW-SIZE-INDEX = 1;
  ;
  while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
    ;
    if (AS0UM001.SY4IDDSC[AS0UW-SIZE-INDEX] == " ")
      set AS0UM001.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX] skip, invisible;
      AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-SIZE-INDEX;
      while (AS0UW00.AS0UW-TEMP-INDEX <= 100)
        set AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP-INDEX] skip, invisible;
        AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-TEMP-INDEX + 10;
      end
    end
    ;
    AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
  end
  ;
end // end AS0U-2240

// format special attributes
Function AS0U-2300()
  AS0UW00.AS0UW-SCREEN-LINE = 1;
  ;
  while (AS0UW00.AS0UW-SCREEN-LINE <= AS0UW00.AS0UW-LINES-PER-SCREEN
   && AS0UM001.AS0UM-PRT-PLN-MO[AS0UW-SCREEN-LINE] != " ")
    AS0UW00.AS0UW-TEMP2-INDEX = 10 * (AS0UW00.AS0UW-SCREEN-LINE - 1) + 1;
    AS0UW00.AS0UW-SIZE-INDEX = 1;
    ;
    while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
      ;
      set AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX] normal;
      if (AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] == 0)
        set AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] skip;
      end
      ;
      AS0UW00.AS0UW-SIZE-INDEX = AS0UW-SIZE-INDEX + 1;
      AS0UW00.AS0UW-TEMP2-INDEX = AS0UW-TEMP2-INDEX + 1;
    end
    ;
    AS0UW00.AS0UW-SCREEN-LINE = AS0UW00.AS0UW-SCREEN-LINE + 1;
  end
  ;
end // end AS0U-2300

// clear detail data
Function AS0U-2400()
  AS0UW00.AS0UW-SCREEN-LINE = 1;
  move 0 to AS0UM001.AB-PRT-PLN-QTY[1] for all;
  move " " to AS0UM001.AS0UM-PRT-PLN-YR[1] for all;
  move " " to AS0UM001.AS0UM-PRT-PLN-MO[1] for all;
  move " " to AS0UM001.SY4IDDSC[1] for all;
  move 0 to AS0UM001.AS0UM-SZ-TOT[1] for all;
  AS0UM001.AS0UM-STY-TOT = 0;
end // end AS0U-2400

// check attention identifier
Function AS0U-3000()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    /* SET AS0UM001 CLEAR;            /* Clear the map fields*/
    AS0UW00.AS0UW-OBTAIN-DATA-SW = "Y";
    AS0UW00.AS0UW-FORMAT-MAP-SW = "Y";
    AS0UW00.AS0UW-GET-UPDATE-CONFIRM = "N";
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AS0UM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      AS1REC.FY1FCTYC = AS0UM001.FY1FCTYC;
      AS1REC.SY1STNBR = AS0UM001.SY1STNBR;
      AS1REC.SY2CLRID = AS0UM001.SY2CLRID;
      AS1REC.XDVCD = AS0UM001.XDVCD;
      AS1REC.XOWCD = AS0UM001.XOWCD;
      AS1REC.XSECD = AS0UM001.XSECD;
      ;
      if (AS0UM001.XSNYR != 0)
        AS1REC.AS1-XSN-YY = AS0UM001.XSNYR;
        AS1REC.AS1-XSN-CC = 0;
        ;
        if (AS1REC.AS1-XSN-YY < 85)
          AS1REC.AS1-XSN-CC-YY = AS1REC.AS1-XSN-CC-YY + 2000;
        else
          AS1REC.AS1-XSN-CC-YY = AS1REC.AS1-XSN-CC-YY + 1900;
        end
        ;
        AS1REC.XSNYR = AS1REC.AS1-XSN-CC-YY;
      else
        AS1REC.XSNYR = 0;
      end
      ;
      COMMAREA.CATOAP = AS0UM001.CATOAP;
      COMMAREA.CAITEM = AS0UM001.CAITEM;
      XPAS-39999(); /* Exit to another application*/
    else
      converseLib.validationFailed(4); /* Indicate PF key not valid*/
    end
    ;
    set AS0UM001.CATOAP cursor, modified, bold; /* Highlight*/
    AS0UM001.XXXPRCNM = "AS0U-3000"; /* process number*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AS0UM001.CAITEM > " ") /* application data was entered*/
    set AS0UM001.CAITEM cursor, modified, bold; /* highlight data*/
    converseLib.validationFailed(7); /* enter only with fast path*/
    AS0UM001.XXXPRCNM = "AS0U-3000"; /* process number*/
    exit stack; /* redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* pf1 is pressed*/
      COMMAREA.CAITEM = "AS0UM001"; /* appl find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* pf3 is pressed*/
      COMMAREA.CATOAP = "AS0A"; /* fluctuations menu*/
    end
    ;
    AS1REC.FY1FCTYC = AS0UM001.FY1FCTYC;
    AS1REC.SY1STNBR = AS0UM001.SY1STNBR;
    AS1REC.SY2CLRID = AS0UM001.SY2CLRID;
    AS1REC.XDVCD = AS0UM001.XDVCD;
    AS1REC.XOWCD = AS0UM001.XOWCD;
    AS1REC.XSECD = AS0UM001.XSECD;
    ;
    if (AS0UM001.XSNYR != 0)
      AS1REC.AS1-XSN-YY = AS0UM001.XSNYR;
      AS1REC.AS1-XSN-CC = 0;
      ;
      if (AS1REC.AS1-XSN-YY < 85)
        AS1REC.AS1-XSN-CC-YY = AS1REC.AS1-XSN-CC-YY + 2000;
      else
        AS1REC.AS1-XSN-CC-YY = AS1REC.AS1-XSN-CC-YY + 1900;
      end
      ;
      AS1REC.XSNYR = AS1REC.AS1-XSN-CC-YY;
    else
      AS1REC.XSNYR = 0;
    end
    ;
    XPAS-39999(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* or scroll forward*/
   && converseVar.eventKey not pf8   /* or scroll backward*/
   /* AND EZEAID NOT PF13            /* or*/
   /* add screen*/
   && converseVar.eventKey not pf18  /* RESET CALC*/
   && converseVar.eventKey not pf19  /* or prev entry*/
   && converseVar.eventKey not pf20) /* or next entry*/
    AS0UM001.XXXPRCNM = "AS0U-3000"; /* process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf18 /* reset calc*/
   && AS0UW01.AB-ROW-MAN-MNTN-FL != "Y")
    AS0UM001.XXXPRCNM = "AS0U-3000"; /* process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    exit stack; /* Exit to redisplay map*/
  end
end // end AS0U-3000

// reset highlighted fields
Function AS0U-4000()
  set AS0UM001.SY1STNBR initialAttributes;
  set AS0UM001.XSECD initialAttributes;
  set AS0UM001.XSNYR initialAttributes;
  set AS0UM001.XDVCD initialAttributes;
  set AS0UM001.FY1FCTYC initialAttributes;
  set AS0UM001.XOWCD initialAttributes;
  set AS0UM001.AS0UM-TOTAL-LIT initialAttributes;
  set AS0UM001.AS0UM-SZ-TOT-LIT initialAttributes;
  set AS0UM001.CATOAP initialAttributes;
  set AS0UM001.CAITEM initialAttributes;
  ;
  AS0UW00.AS0UW-SIZE-INDEX = 1;
  ;
  while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
    set AS0UM001.SY4IDDSC[AS0UW-SIZE-INDEX] initialAttributes;
    set AS0UM001.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX] initialAttributes;
    AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
  end
  ;
  AS0UW00.AS0UW-SCREEN-LINE = 1;
  ;
  while (AS0UW00.AS0UW-SCREEN-LINE <= AS0UW00.AS0UW-LINES-PER-SCREEN)
    set AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] initialAttributes;
    AS0UW00.AS0UW-SCREEN-LINE = AS0UW00.AS0UW-SCREEN-LINE + 1;
  end
  ;
  AS0UW00.AS0UW-TEMP-INDEX = 1;
  ;
  while (AS0UW00.AS0UW-TEMP-INDEX <= 100)
    set AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP-INDEX] initialAttributes;
    AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-TEMP-INDEX + 1;
  end
  ;
  /* ************************************************************************/
  /* process pop up window requests*/
  /* ************************************************************************/
  ;
  if (AS0UM001.XDVCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "DIVISION CODE        ";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPXDV01(); /* perform pop up window routine*/
    end
    ;
    converseLib.clearScreen();
    
    ;
    if (XX0XW02.XX0XWPIX > 0)
      AS0UM001.XDVCD = XDVTBL.XDVCD[XX0XWPIX];
    else
      AS0UM001.XDVCD = " ";
    end
    ;
  end
  ;
  ;
  if (AS0UM001.XOWCD == "?")
    AS1REC.XGPCD = "03";
    AS1REC.XWHCD = "51";
    XSASS-XOW();
    AS0UM001.XOWCD = AS1REC.XOWCD;
    converseLib.clearScreen();
    
  end
  ;
  ;
end // end AS0U-4000

// validate entered data
Function AS0U-5000()
  AS0UW00.AS0UW-KEY-CHANGED-SW = "N";
  ;
  if (converseVar.eventKey is enter
  )
    if (AS0UM001.XSECD != AS0UW01.XSECD
     || AS0UM001.XSNYR != AS0UW01.XSNYR
     || AS0UM001.XSECD == "  "
     || AS0UM001.XSNYR == 0
     || AS0UM001.XDVCD != AS0UW01.XDVCD
     || AS0UM001.FY1FCTYC != AS0UW01.FY1FCTYC
     || AS0UM001.SY1STNBR != AS0UW01.SY1STNBR
     || AS0UM001.SY2CLRID != AS0UW01.SY2CLRID
     || AS0UM001.XOWCD != AS0UW01.XOWCD)
      AS0UW00.AS0UW-KEY-CHANGED-SW = "Y";
      AS0UW00.AS0UW-OBTAIN-DATA-SW = "Y";
      AS0U-5100(); /* validate selection criteria*/
    end
    ;
  end
  ;
  if (AS0UW00.AS0UW-KEY-CHANGED-SW == "N") /* key not changed*/
    /* and any key pressed*/
    AS0U-5300(); /* save screen data*/
    AS0U-5200(); /* size/total totals*/
  end
  ;
  ;
  if (converseVar.eventKey is pf7
   && AS0UW00.AS0UW-MONTH-INDEX <= 10) /* on first page*/
    AS0UM001.XXXPRCNM = "AS0U5000";
    converseLib.validationFailed(2);
  else
    ;
    if (converseVar.eventKey is pf8)
      AS0UW00.AS0UW-TEMP-INDEX = AS0UW-MONTH-INDEX + 10;
      if (AS0UW01.AS0UM-PRT-PLN-MO[AS0UW-TEMP-INDEX] == " ") /* last entry*/
        AS0UM001.XXXPRCNM = "AS0U5000";
        converseLib.validationFailed(3);
      end
    else
      ;
      if (converseVar.eventKey is pf19
       && AS0UW00.AS0UW-STYCLRS-INDEX <= 2) /* first style*/
        AS0UM001.XXXPRCNM = "AS0U5000";
        converseLib.validationFailed(46);
      else
        ;
        if (converseVar.eventKey is pf20)
          AS0UW00.AS0UW-STYCLRS-INDEX = AS0UW00.AS0UW-STYCLRS-INDEX - 1;
          ;
          if (AS0UW00.AS0UM-CURR-STY[AS0UW-STYCLRS-INDEX] == " ")
            AS0UM001.XXXPRCNM = "AS0U5000";
            converseLib.validationFailed(47);
          end
          ;
          AS0UW00.AS0UW-STYCLRS-INDEX = AS0UW00.AS0UW-STYCLRS-INDEX + 1;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* errors to display*/
    AS0UW00.AS0UW-FORMAT-MAP-SW = "N";
    AS0UW00.AS0UW-OBTAIN-DATA-SW = "N";
    exit stack;
  end
end // end AS0U-5000

// validate selection criteria
Function AS0U-5100()
  ;
  if (AS0UM001.XOWCD != AS0UW01.XOWCD)
    ;
    if (AS0UM001.XOWCD == " ")
      AS0UM001.XOWABRV = " ";
    else
      AS0UW00.XWHCD = "51";
      AS0UW00.XOWCD = AS0UM001.XOWCD;
      AS0U-S004(); /* get owner group abbrev*/
      ;
      if (AS0UW00.XOWABRV != "NO DES")
        AS0UM001.XOWABRV = AS0UW00.XOWABRV;
      else
        AS0UM001.XOWABRV = AS0UW00.XOWABRV;
        set AS0UM001.XOWCD cursor, bold;
        AS0UM001.XXXPRCNM = "AS0U5100";
        converseLib.validationFailed(44);
      end
      ;
    end
    ;
  end
  ;
  if (AS0UM001.SY1STNBR != AS0UW01.SY1STNBR
   || AS0UM001.SY2CLRID != AS0UW01.SY2CLRID)
    ;
    AS0UM001.SY2CLRAB = " ";
    AS0UM001.SY1SSTNM = " ";
    ;
    if (AS0UM001.SY2CLRID != " "
     && AS0UM001.SY1STNBR == " ")
      set AS0UM001.SY1STNBR cursor, bold;
      set AS0UM001.SY2CLRID bold;
      AS0UM001.XXXPRCNM = "AS0UM5100";
      converseLib.validationFailed(126);
    end
    ;
    if (AS0UM001.SY2CLRID != " "
     && AS0UM001.SY1STNBR != " ")
      set PG2REC empty;
      PG2REC.XGPCD = "03";
      PG2REC.XDMCD = "00";
      PG2REC.SY1STNBR = AS0UM001.SY1STNBR;
      PG2REC.SY2CLRID = AS0UM001.SY2CLRID;
      AS0U-S003(); /* get sty/clr name*/
      ;
      if (PG2REC.SY1SSTNM != "NO DESC"
       && PG2REC.SY2CLRAB != "NO DESC")
        AS0UM001.SY1SSTNM = PG2REC.SY1SSTNM;
        AS0UM001.SY2CLRAB = PG2REC.SY2CLRAB;
      else
        set AS0UM001.SY1STNBR cursor, bold;
        set AS0UM001.SY2CLRID bold;
        AS0UM001.SY1SSTNM = PG2REC.SY1SSTNM;
        AS0UM001.SY2CLRAB = PG2REC.SY2CLRAB;
        AS0UM001.XXXPRCNM = "AS0UM5100";
        converseLib.validationFailed(126);
      end
      ;
    end
    ;
  end
  ;
  if (AS0UM001.FY1FCTYC != AS0UW01.FY1FCTYC)
    ;
    if (AS0UM001.FY1FCTYC == " ")
      AS0UM001.FY1FCTSN = " ";
    else
      set FY1REC empty;
      FY1REC.FY1FCTYC = AS0UM001.FY1FCTYC;
      FY1REC.XGPCD = "03";
      AS0U-S002(); /* get factory name*/
      ;
      if (FY1REC.FY1FCTSN != "NO DESC")
        AS0UM001.FY1FCTSN = FY1REC.FY1FCTSN;
      else
        AS0UM001.FY1FCTSN = FY1REC.FY1FCTSN;
        set AS0UM001.FY1FCTYC cursor, bold;
        AS0UM001.XXXPRCNM = "AS0U5100";
        converseLib.validationFailed(41);
      end
      ;
    end
    ;
  end
  ;
  if (AS0UM001.XDVCD != AS0UW01.XDVCD)
    ;
    if (AS0UM001.XDVCD == " ")
      AS0UM001.XDVABRV = " ";
    else
      AS0UW00.XDVCD = AS0UM001.XDVCD;
      AS0U-S001(); /* get division abbrev*/
      ;
      if (AS0UW00.XDVDESC != "NO DESC")
        AS0UM001.XDVABRV = AS0UW00.XDVDESC;
      else
        AS0UM001.XDVABRV = AS0UW00.XDVDESC;
        set AS0UM001.XDVCD cursor, bold;
        AS0UM001.XXXPRCNM = "AS0U5100";
        converseLib.validationFailed(75);
      end
      ;
    end
    ;
  end
  ;
  if (AS0UM001.XSECD != AS0UW01.XSECD
   || AS0UM001.XSNYR != AS0UW01.XSNYR
   || AS0UM001.XSECD == " "
   || AS0UM001.XSNYR != 0)
    AS0UW01.XSECD = AS0UM001.XSECD;
    AS0UW01.XSNYR = AS0UM001.XSNYR;
    ;
    if (AS0UM001.XSECD == " ")
      set AS0UM001.XSECD cursor, bold;
      converseLib.validationFailed(16); /* invalid sesn msg*/
      AS0UM001.XXXPRCNM = "AS0U-5100";
      AS0UW01.XSNYR = 0;
    else
      if (AS0UM001.XSNYR == 0)
        set AS0UM001.XSNYR cursor, bold;
        converseLib.validationFailed(26); /* invalid year msg*/
        AS0UM001.XXXPRCNM = "AS0U-5100";
        AS0UW01.XSECD = " ";
      else
        AS0U-S006(); /* validate season/year*/
      end
    end
  end
  ;
  ;
end // end AS0U-5100

// validate updates
Function AS0U-5200()
  AS0UW00.AS0UW-TEMP-INDEX = 1;
  AS0UW00.AS0UM-STY-TOT = 0;
  move 0 to AS0UW02.AS0UM-SZ-TOT[1] for all;
  ;
  while (AS0UW02.AS0UW-SIZE-DATA[AS0UW-TEMP-INDEX] != " ")
    ;
    AS0UW02.AS0UW-BREAKOUT-GROUP = AS0UW02.AS0UW-SIZE-DATA[AS0UW-TEMP-INDEX];
    ;
    AS0UW00.AS0UW-SIZE-INDEX = 1;
    while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
      AS0UW02.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX] = AS0UW02.AS0UM-SZ-TOT[AS0UW-SIZE-INDEX] +       AS0UW02.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX];
      AS0UW00.AS0UM-STY-TOT = AS0UW00.AS0UM-STY-TOT +       AS0UW02.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX];
      AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
    end
    ;
    AS0UW02.AS0UW-SIZE-DATA[AS0UW-TEMP-INDEX] = AS0UW02.AS0UW-BREAKOUT-GROUP;
    AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-TEMP-INDEX + 1;
  end
  ;
  if (AS0UW00.AS0UM-STY-TOT != AS0UM001.AS0UM-STY-TOT
   && AS0UW00.AS0UW-GET-UPDATE-CONFIRM == "N")
    AS0UW00.AS0UW-GET-UPDATE-CONFIRM = "Y";
  else
    AS0UW00.AS0UW-GET-UPDATE-CONFIRM = "N";
  end
  ;
  ;
end // end AS0U-5200

// save screen data
Function AS0U-5300()
  AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-MONTH-INDEX;
  AS0UW00.AS0UW-SCREEN-LINE = 1;
  move "N" to AS0UW00.AS0UW-TOTAL-CHANGE[1] for all;
  ;
  while (AS0UW00.AS0UW-SCREEN-LINE <= AS0UW00.AS0UW-LINES-PER-SCREEN
   && AS0UM001.AS0UM-PRT-PLN-MO[AS0UW-SCREEN-LINE] != " ")
    AS0UW00.AS0UM-STY-TOT = 0;
    AS0UW02.AS0UW-BREAKOUT-GROUP = AS0UW02.AS0UW-SIZE-DATA[AS0UW-TEMP-INDEX];
    if (AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] != 
    AS0UW02.AS0UM-MO-TOT[AS0UW-TEMP-INDEX])
      AS0UW00.AS0UW-SIZE-INDEX = 1;
      while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
        AS0UW00.AS0UW-TEMP2-INDEX = (AS0UW00.AS0UW-SCREEN-LINE - 1) * 10         + AS0UW00.AS0UW-SIZE-INDEX;
        if (AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] != 0)
          if (AS0UW02.AS0UM-MO-TOT[AS0UW-TEMP-INDEX] != 0)
            AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX] = mathLib.round(AS0UW02.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX] *             AS0UM001.AS0UM-MO-TOT[AS0UW-SCREEN-LINE] /             AS0UW02.AS0UM-MO-TOT[AS0UW-TEMP-INDEX], -mathLib.decimals(AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX]));
          else
            AS0UW02.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX] = AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX];
          end
        else
          AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX] = 0;
        end
        AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
      end
    end
    AS0UW00.AS0UW-SIZE-INDEX = 1;
    AS0UW02.AS0UM-MO-TOT[AS0UW-TEMP-INDEX] = 0;
    ;
    while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
      AS0UW00.AS0UW-TEMP2-INDEX = (AS0UW00.AS0UW-SCREEN-LINE - 1) * 10       + AS0UW00.AS0UW-SIZE-INDEX;
      AS0UW02.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX] = AS0UM001.AB-PRT-PLN-QTY[AS0UW-TEMP2-INDEX];
      AS0UW02.AS0UM-MO-TOT[AS0UW-TEMP-INDEX] = AS0UW02.AS0UM-MO-TOT[AS0UW-TEMP-INDEX] +       AS0UW02.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX];
      AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
    end
    ;
    AS0UW02.AS0UW-SIZE-DATA[AS0UW-TEMP-INDEX] = AS0UW02.AS0UW-BREAKOUT-GROUP;
    AS0UW00.AS0UM-STY-TOT = AS0UW00.AS0UM-STY-TOT +     AS0UW02.AS0UM-MO-TOT[AS0UW-TEMP-INDEX];
    AS0UW00.AS0UW-SCREEN-LINE = AS0UW00.AS0UW-SCREEN-LINE + 1;
    AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-TEMP-INDEX + 1;
  end
end // end AS0U-5300

// process valid input
Function AS0U-6000()
  if (converseVar.eventKey is pf7) /* scroll up*/
    ;
    AS0UW00.AS0UW-MONTH-INDEX = AS0UW00.AS0UW-MONTH-INDEX -     10;
    AS0UW00.AS0UW-OBTAIN-DATA-SW = "N";
    AS0UW00.AS0UW-FORMAT-MAP-SW = "Y";
  else
    ;
    if (converseVar.eventKey is pf8) /* scroll down*/
      AS0UW00.AS0UW-MONTH-INDEX = AS0UW00.AS0UW-MONTH-INDEX + 10;
      AS0UW00.AS0UW-OBTAIN-DATA-SW = "N";
      AS0UW00.AS0UW-FORMAT-MAP-SW = "Y";
    else
      ;
      if (converseVar.eventKey is pf19) /* prev sty/clr*/
        AS0UW00.AS0UW-STYCLRS-INDEX = AS0UW00.AS0UW-STYCLRS-INDEX - 2;
        AS0UM001.AS0UM-CURR-XDV = AS0UW00.AS0UM-CURR-XDV[AS0UW-STYCLRS-INDEX];
        AS0UM001.AS0UM-CURR-FCTY = AS0UW00.AS0UM-CURR-FCTY[AS0UW-STYCLRS-INDEX];
        AS0UM001.AS0UM-CURR-STY = AS0UW00.AS0UM-CURR-STY[AS0UW-STYCLRS-INDEX];
        AS0UM001.AS0UM-CURR-CLR = AS0UW00.AS0UM-CURR-CLR[AS0UW-STYCLRS-INDEX];
        AS0UM001.AS0UM-CURR-XOW = AS0UW00.AS0UM-CURR-XOW[AS0UW-STYCLRS-INDEX];
        AS0UW01.AS0UM-CURR-XDV = AS0UM001.AS0UM-CURR-XDV;
        AS0UW01.AS0UM-CURR-FCTY = AS0UM001.AS0UM-CURR-FCTY;
        AS0UW01.AS0UM-CURR-STY = AS0UM001.AS0UM-CURR-STY;
        AS0UW01.AS0UM-CURR-CLR = AS0UM001.AS0UM-CURR-CLR;
        AS0UW01.AS0UM-CURR-XOW = AS0UM001.AS0UM-CURR-XOW;
        AS0UW00.AS0UW-KEY-CHANGED-SW = "N";
        AS0UW00.AS0UW-OBTAIN-DATA-SW = "Y";
        AS0UW00.AS0UW-FORMAT-MAP-SW = "Y";
      else
        ;
        if (converseVar.eventKey is pf20) /* next sty/clr*/
          AS0UW00.AS0UW-KEY-CHANGED-SW = "N";
          AS0UW00.AS0UW-OBTAIN-DATA-SW = "Y";
          AS0UW00.AS0UW-FORMAT-MAP-SW = "Y";
        else
          ;
          if (converseVar.eventKey is enter
           || converseVar.eventKey is pf18) /* RESET CALC FLG*/
            ;
            AS0UW00.AS0UW-FORMAT-MAP-SW = "Y";
            if (AS0UW00.AS0UW-KEY-CHANGED-SW == "N")
              AS0U-6100(); /* update quantities*/
            end
            ;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
end // end AS0U-6000

// update quantities
Function AS0U-6100()
  ;
  if (AS0UW00.AS0UW-GET-UPDATE-CONFIRM == "Y"
   && AS0UW00.AS0UW-UPDATES-CONFIRMED == "N"
   && converseVar.eventKey is enter)
    AS1REC.AS1-MSG-NO = 188; /* please approve updates*/
    return;
  end
  ;
  ;
  AS0UW00.AS0UW-GET-UPDATE-CONFIRM = "N";
  AS0UW00.AS0UW-UPDATES-CONFIRMED = "N";
  ;
  AS0UW00.AS0UW-TEMP-INDEX = 1;
  AS0UW00.AS0UW-UPDATES-PROCESSED = "N";
  if (converseVar.eventKey is pf18) /* ALL ROWS NEED TO BE UPDATED*/
    AS0UW00.AS0UW-UPDATES-PROCESSED = "A"; /* UPDATES PERFORMED*/
  else
    while (AS0UW01.AS0UM-PRT-PLN-MO[AS0UW-TEMP-INDEX] != 0
     && AS0UW01.AS0UM-PRT-PLN-MO[AS0UW-TEMP-INDEX] != " "
     && AS0UW00.AS0UW-UPDATES-PROCESSED != "A")
      ;
      if (AS0UW01.AS0UM-MO-TOT[AS0UW-TEMP-INDEX] != 
      AS0UW02.AS0UM-MO-TOT[AS0UW-TEMP-INDEX])
        if (AS0UW01.AB-ROW-MAN-MNTN-FL == "Y") /* only update chnged rows*/
          AS0UW00.AS0UW-UPDATES-PROCESSED = "Y"; /* an update perfomed*/
          AS0U-6110(); /* format for update*/
          AS0U-6120(); /* update vprtpl01 row*/
          if (converseVar.validationMsgNum == 0) /* no errors*/
            AS0UW02.ZZZCHGCT[AS0UW-TEMP-INDEX] = AS0UW02.ZZZCHGCT[AS0UW-TEMP-INDEX] + 1;
          end
        else
          AS0UW00.AS0UW-UPDATES-PROCESSED = "A"; /* UPDATE all rows*/
        end
      end
      ;
      AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-TEMP-INDEX + 1;
    end
  end
  ;
  if (AS0UW00.AS0UW-UPDATES-PROCESSED == "N") /* NO UPDATES REQUIRED*/
    return;
  end
  ;
  AS0UW00.AS0UW-TEMP-INDEX = 1;
  ;
  while (AS0UW00.AS0UW-UPDATES-PROCESSED == "A" /* update all rows*/
   && AS0UW01.AS0UM-PRT-PLN-MO[AS0UW-TEMP-INDEX] != " ")
    ;
    AS0U-6110(); /* format for update*/
    AS0U-6120(); /* update vprtpl01 row*/
    ;
    if (converseVar.validationMsgNum == 0) /* no errors*/
      AS0UW02.ZZZCHGCT[AS0UW-TEMP-INDEX] = AS0UW02.ZZZCHGCT[AS0UW-TEMP-INDEX] + 1;
    end
    AS0UW00.AS0UW-TEMP-INDEX = AS0UW00.AS0UW-TEMP-INDEX + 1;
  end
  ;
  if (converseVar.validationMsgNum == 0 /* no errors*/
   && AS0UW00.AS0UW-UPDATES-PROCESSED == "Y") /* UPDATES PERFORMED*/
    AS1REC.AS1-MSG-NO = 45; /* upates ok*/
    AS0UW00.AS0UW-TEMP-INDEX = 1;
    ;
    AS0UW01.AS0UW-DETAIL-DATA = AS0UW02.AS0UW-DETAIL-DATA;
  end
  ;
  if (converseVar.validationMsgNum == 0 /* no errors*/
   && AS0UW00.AS0UW-UPDATES-PROCESSED == "A") /* all rows updated*/
    AS1REC.AS1-MSG-NO = 45; /* upates ok*/
    AS0UW00.AS0UW-TEMP-INDEX = 1;
    ;
    AS0UW01.AS0UW-DETAIL-DATA = AS0UW02.AS0UW-DETAIL-DATA;
  end
  ;
end // end AS0U-6100

// format for update
Function AS0U-6110()
  set VPRTPL01 empty;
  ;
  if (converseVar.eventKey is pf18)
    VPRTPL01.AB-ROW-MAN-MNTN-FL = "N";
    AS0UW01.AB-ROW-MAN-MNTN-FL = "N";
  else
    VPRTPL01.AB-ROW-MAN-MNTN-FL = "Y";
    AS0UW01.AB-ROW-MAN-MNTN-FL = "Y";
  end
  ;
  XX0XS01(); /* get time & date*/
  ;
  VPRTPL01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPRTPL01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VPRTPL01.XZZ6CHR = "AS0U";
  VPRTPL01.ZZZCHGCT = AS0UW01.ZZZCHGCT[AS0UW-TEMP-INDEX];
  VPRTPL01.XSECD = AS0UW01.XSECD;
  VPRTPL01.XDVCD = AS0UW01.AS0UM-CURR-XDV;
  VPRTPL01.FY1FCTYC = AS0UW01.AS0UM-CURR-FCTY;
  VPRTPL01.SY1STNBR = AS0UW01.AS0UM-CURR-STY;
  VPRTPL01.SY2CLRID = AS0UW01.AS0UM-CURR-CLR;
  VPRTPL01.XOWCD = AS0UW01.AS0UM-CURR-XOW;
  VPRTPL01.XSNYR = AS0UW01.XSNYR;
  ;
  if (VPRTPL01.XSNYR <= 85)
    VPRTPL01.XSNYR = 2000 + VPRTPL01.XSNYR;
  else
    VPRTPL01.XSNYR = 1900 + VPRTPL01.XSNYR;
  end
  ;
  AS0UW00.AS0UW-PRT-PLN-MM = AS0UW01.AS0UM-PRT-PLN-MO[AS0UW-TEMP-INDEX];
  AS0UW00.AS0UW-PRT-PLN-YY = AS0UW01.AS0UM-PRT-PLN-YR[AS0UW-TEMP-INDEX];
  ;
  if (AS0UW00.AS0UW-PRT-PLN-YY <= 85)
    AS0UW00.AS0UW-PRT-PLN-CC = 20;
  else
    AS0UW00.AS0UW-PRT-PLN-CC = 19;
  end
  ;
  VPRTPL01.AB-PRT-PLN-MO = AS0UW00.AS0UW-PRT-PLN-MO;
  ;
  AS0UW01.AS0UW-BREAKOUT-GROUP = AS0UW01.AS0UW-SIZE-DATA[AS0UW-TEMP-INDEX]; /* original as read*/
  AS0UW02.AS0UW-BREAKOUT-GROUP = AS0UW02.AS0UW-SIZE-DATA[AS0UW-TEMP-INDEX]; /* as modified on screen*/
  ;
  AS0UW00.AS0UW-SIZE-INDEX = 1;
  ;
  while (AS0UW00.AS0UW-SIZE-INDEX <= 10)
    ;
    VPRTPL01.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX] = AS0UW02.AB-PRT-PLN-QTY[AS0UW-SIZE-INDEX];
    ;
    if (AS0UW01.SY5SZID[AS0UW-SIZE-INDEX] != 0)
      VPRTPL01.SY5SZID[AS0UW-SIZE-INDEX] = AS0UW01.SY5SZID[AS0UW-SIZE-INDEX];
    else
      AS0U-6111(); /* get size id*/
    end
    ;
    AS0UW00.AS0UW-SIZE-INDEX = AS0UW00.AS0UW-SIZE-INDEX + 1;
  end
end // end AS0U-6110

// get size id
Function AS0U-6111()
  AS0UW00.AS0UW-TEMP2-INDEX = 1;
  AS0UW00.AS0UW-HIT-COUNT = 0;
  ;
  while (AS0UW00.AS0UW-HIT-COUNT < AS0UW00.AS0UW-SIZE-INDEX
   && AS0UW00.AS0UW-TEMP2-INDEX <= 40)
    ;
    if (AS0UW00.AS0UW-SIZE-FLAGS[AS0UW-TEMP2-INDEX] == "Y")
      AS0UW00.AS0UW-HIT-COUNT = AS0UW00.AS0UW-HIT-COUNT + 1;
    end
    ;
    AS0UW00.AS0UW-TEMP2-INDEX = AS0UW00.AS0UW-TEMP2-INDEX + 1;
  end
  ;
  if (AS0UW00.AS0UW-HIT-COUNT == AS0UW00.AS0UW-SIZE-INDEX)
    AS0UW00.AS0UW-TEMP2-INDEX = AS0UW00.AS0UW-TEMP2-INDEX - 1;
    VPRTPL01.SY5SZID[AS0UW-SIZE-INDEX] = AS0UW00.AS0UW-TEMP2-INDEX;
  else
    VPRTPL01.SY5SZID[AS0UW-SIZE-INDEX] = 0;
  end
  ;
end // end AS0U-6111

// update VPRTPL01 row
Function AS0U-6120()
   /* ===================================**/
   /* Update row in   DABUY.VPRTPL01  **/
   /* ===================================**/
  ;
  try
    call "IO6440" ("U2", SQLCA, VPRTPL01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any updates*/
      AS0UM001.XXXPRCNM = "AS0U6120"; /* process number*/
      converseLib.validationFailed(13); /* data already updated or something*/
      exit stack; /* return to display the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* backout any changes*/
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0UM001.XXXPRCNM = "AS0U1611"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0U1611"; /* Error location*/
  TA1REC.TA1LOC = "UPDATE ROW        ";
  TA1REC.TA1MAP = "AS0UM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRTPL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
end // end AS0U-6120

// get division abbrev
Function AS0U-S001()
  if (AS0UW00.XDVCD in XDVTBL.XDVCD)
    AS0UW00.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
  else
    AS0UW00.XDVDESC = "NO DESC";
  end
  ;
end // end AS0U-S001

// get factory name
Function AS0U-S002()
  ;
   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      FY1REC.FY1FCTSN = "NO DESC"; /* space screen description*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0UM001.XXXPRCNM = "AS0US002"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0US002"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1MAP = "AS0UM001"; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0U-S002

// get style/color desc
Function AS0U-S003()
  ;
   /* *===================================**/
   /* *  Select     from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to calling process*/
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100)
        PG2REC.SY1SSTNM = "NO DESC";
        PG2REC.SY2CLRAB = "NO DESC";
        return;
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0UM001.XXXPRCNM = "AS0U-S003"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0US003"; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AS0UM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
end // end AS0U-S003

// get owner group abbrev
Function AS0U-S004()
  if (AS0UW00.XOWKEY in XOWTBL.XOWKEY)
    AS0UW00.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    AS0UW00.XOWABRV = "NO DESC";
  end
  ;
end // end AS0U-S004

// reset saved key
Function AS0U-S005()
  AS0UW01.XSECD = " ";
  AS0UW01.XSNYR = 0;
  AS0UW01.XDVCD = " ";
  AS0UW01.XDVABRV = " ";
  AS0UW01.FY1FCTYC = " ";
  AS0UW01.FY1FCTSN = " ";
  AS0UW01.SY1STNBR = " ";
  AS0UW01.SY1SSTNM = " ";
  AS0UW01.SY2CLRID = " ";
  AS0UW01.SY2CLRAB = " ";
  AS0UW01.XOWCD = " ";
  AS0UW01.XOWABRV = " ";
end // end AS0U-S005

// Validate season yr/cd
Function AS0U-S006()
  AS1REC.AS1-XSN-YY = AS0UM001.XSNYR;
  AS1REC.AS1-XSE-XSN = AS0UM001.XSECD;
  AS1REC.AS1-VALID-XSE-FL = "0";
  AS1REC.AS1-VALID-XSN-FL = "0";
  AS1REC.AS1-VALID-XSE-XSN-FL = "0";
  AS1REC.XSECD = AS0UM001.XSECD;
  AS1REC.AS1-XSN-CC = 0;
  XPAS-51200();
  ;
  if (AS1REC.AS1-VALID-XSE-XSN-FL != 0)
    set AS0UM001.XSECD cursor, bold;
    set AS0UM001.XSNYR bold;
    converseLib.validationFailed(71); /* invalid sesn/yr msg*/
    AS0UM001.XXXPRCNM = "AS0U-S006";
  end
  ;
  if (AS1REC.AS1-VALID-XSN-FL != 0)
    set AS0UM001.XSNYR cursor, bold;
    converseLib.validationFailed(26); /* invalid year msg*/
    AS0UM001.XXXPRCNM = "AS0U-S006";
  end
  ;
  if (AS1REC.AS1-VALID-XSE-FL != 0)
    set AS0UM001.XSECD cursor, bold;
    AS1REC.AS1-MSG-NO = 16; /* invalid sesn msg*/
    AS0UM001.XXXPRCNM = "AS0U-S006";
  end
  ;
end // end AS0U-S006

//*** RECORD=AS0UW00 ****
// Misc working storage for AS0U
// ***********************
Record AS0UW00 type basicRecord
  5 AS0UW00-GROUP AS0UW00-GROUP ; 
    10 AS0UW-MAX-STYLES AS0UW-MAX-STYLES ; 
    10 AS0UW-LINES-PER-SCREEN AS0UW-LINES-PER-SCREEN ; 
    10 AS0UW-HIT-COUNT AS0UW-HIT-COUNT ; 
    10 AS0UW-OBTAIN-DATA-SW AS0UW-OBTAIN-DATA-SW ; 
    10 AS0UW-KEY-CHANGED-SW AS0UW-KEY-CHANGED-SW ; 
    10 AS0UW-FORMAT-MAP-SW AS0UW-FORMAT-MAP-SW ; 
    10 AS0UW-FIRST-TIME AS0UW-FIRST-TIME ; 
    10 AS0UW-PAGE-TO-DISPLAY AS0UW-PAGE-TO-DISPLAY ; 
    10 AS0UW-SCREEN-LINE AS0UW-SCREEN-LINE ; 
    10 AS0UW-STYCLRS-INDEX AS0UW-STYCLRS-INDEX ; 
    10 AS0UW-MONTH-INDEX AS0UW-MONTH-INDEX ; 
    10 AS0UW-SIZE-INDEX AS0UW-SIZE-INDEX ; 
    10 AS0UM-STY-TOT AS0UM-STY-TOT ; 
    10 * char(17) [1000] ; 
      15 AS0UM-CURR-XDV AS0UM-CURR-XDV ; 
      15 AS0UM-CURR-FCTY AS0UM-CURR-FCTY ; 
      15 AS0UM-CURR-STY AS0UM-CURR-STY ; 
      15 AS0UM-CURR-CLR AS0UM-CURR-CLR ; 
      15 AS0UM-CURR-XOW AS0UM-CURR-XOW ; 
    10 AS0UW-TEMP-INDEX AS0UW-TEMP-INDEX ; 
    10 AS0UW-TEMP2-INDEX AS0UW-TEMP2-INDEX ; 
    10 AS0UW-TEMP-PCT AS0UW-TEMP-PCT ; 
    10 AS0UW-PRT-PLN-MO AS0UW-PRT-PLN-MO ; 
      15 AS0UW-PRT-PLN-CCYY AS0UW-PRT-PLN-CCYY ; 
        20 AS0UW-PRT-PLN-CC AS0UW-PRT-PLN-CC ; 
        20 AS0UW-PRT-PLN-YY AS0UW-PRT-PLN-YY ; 
      15 AS0UW-PRT-PLN-MM AS0UW-PRT-PLN-MM ; 
    10 AS0UW-SIZE-FLAGS AS0UW-SIZE-FLAGS [40] ; 
    10 XDVCD XDVCD ; 
    10 XDVDESC XDVDESC ; 
    10 XOWKEY XOWKEY ; 
      15 XWHCD XWHCD ; 
      15 XOWCD XOWCD ; 
    10 XOWABRV XOWABRV ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 XSNYR XSNYR ; 
    10 AS0UW-TOTAL-CHANGE AS0UW-TOTAL-CHANGE [10] ; 
    10 AS0UW-UPDATES-PROCESSED AS0UW-UPDATES-PROCESSED ; 
    10 AS0UW-UPDATES-CONFIRMED AS0UW-UPDATES-CONFIRMED ; 
    10 AS0UW-GET-UPDATE-CONFIRM AS0UW-GET-UPDATE-CONFIRM ; 
end // end AS0UW00

//*** RECORD=AS0UW01 ****
// AS0UW01 is display working storage for AS0U.  It represents
// the data as obtained from the database, unmodified.
// ***********************
Record AS0UW01 type basicRecord
  5 AS0UW01-GROUP AS0UW01-GROUP ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 XDVCD XDVCD ; 
    10 XDVABRV XDVABRV ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 FY1FCTSN FY1FCTSN ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRID SY2CLRID ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XOWCD XOWCD ; 
    10 XOWABRV XOWABRV ; 
    10 AS0UM-CURR-XDV AS0UM-CURR-XDV ; 
    10 AS0UM-CURR-FCTY AS0UM-CURR-FCTY ; 
    10 AS0UM-CURR-STY AS0UM-CURR-STY ; 
    10 AS0UM-CURR-CLR AS0UM-CURR-CLR ; 
    10 AS0UM-CURR-XOW AS0UM-CURR-XOW ; 
    10 AS0UW-DETAIL-DATA AS0UW-DETAIL-DATA ; 
      15 ZZZCHGCT ZZZCHGCT [100] ; 
      15 AS0UM-PRT-PLN-MO AS0UM-PRT-PLN-MO [100] ; 
      15 AS0UM-PRT-PLN-YR AS0UM-PRT-PLN-YR [100] ; 
      15 AS0UM-MO-TOT AS0UM-MO-TOT [100] ; 
      15 SY5SZID SY5SZID [10] ; 
      15 AS0UM-SZ-TOT AS0UM-SZ-TOT [10] ; 
      15 AS0UW-SIZE-DATA AS0UW-SIZE-DATA [100] ; 
    10 AS0UW-BREAKOUT-GROUP AS0UW-BREAKOUT-GROUP ; 
      15 AB-PRT-PLN-QTY AB-PRT-PLN-QTY [10] ; 
      15 AS0UW-SZ-PCT AS0UW-SZ-PCT [10] ; 
      15 AS0UM-STY-TOT AS0UM-STY-TOT [10] ; 
    10 AB-ROW-MAN-MNTN-FL AB-ROW-MAN-MNTN-FL ; 
end // end AS0UW01

//*** RECORD=AS0UW02 ****
// AS0UW01 is display working storage for AS0U.  It represents
// the data as obtained from the database, unmodified.
// ***********************
Record AS0UW02 type basicRecord
  5 AS0UW02-GROUP AS0UW02-GROUP ; 
    10 AS0UW-DETAIL-DATA AS0UW-DETAIL-DATA ; 
      15 ZZZCHGCT ZZZCHGCT [100] ; 
      15 AS0UM-PRT-PLN-MO AS0UM-PRT-PLN-MO [100] ; 
      15 AS0UM-PRT-PLN-YR AS0UM-PRT-PLN-YR [100] ; 
      15 AS0UM-MO-TOT AS0UM-MO-TOT [100] ; 
      15 SY5SZID SY5SZID [10] ; 
      15 AS0UM-SZ-TOT AS0UM-SZ-TOT [10] ; 
      15 AS0UW-SIZE-DATA AS0UW-SIZE-DATA [100] ; 
    10 AS0UW-BREAKOUT-GROUP AS0UW-BREAKOUT-GROUP ; 
      15 AB-PRT-PLN-QTY AB-PRT-PLN-QTY [10] ; 
      15 AS0UW-SZ-PCT AS0UW-SZ-PCT [10] ; 
      15 AS0UM-STY-TOT AS0UM-STY-TOT [10] ; 
end // end AS0UW02

// current color code
DataItem AS0UM-CURR-CLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current factory
DataItem AS0UM-CURR-FCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current style
DataItem AS0UM-CURR-STY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current division
DataItem AS0UM-CURR-XDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current owner group
DataItem AS0UM-CURR-XOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UM-MO-TOT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Print plan mm
DataItem AS0UM-PRT-PLN-MO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print plan ccyy
DataItem AS0UM-PRT-PLN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style total quantity
DataItem AS0UM-STY-TOT num(7)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// style size total
DataItem AS0UM-SZ-TOT num(5)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-BREAKOUT-GROUP char(150)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-DETAIL-DATA char(23570)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-FIRST-TIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-FORMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDICATE UPDATES CONFIRMNED
DataItem AS0UW-GET-UPDATE-CONFIRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-HIT-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-KEY-CHANGED-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-LINES-PER-SCREEN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-MAX-STYLES int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-MONTH-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-OBTAIN-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-PAGE-TO-DISPLAY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-PRT-PLN-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-PRT-PLN-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-PRT-PLN-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-PRT-PLN-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-PRT-PLN-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-SCREEN-LINE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-SIZE-DATA char(220)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-SIZE-FLAGS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW-SIZE-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-STYCLRS-INDEX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-SZ-PCT decimal(6,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-TEMP-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-TEMP-PCT decimal(7,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AS0UW-TEMP2-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL CHANGED INDICATOR
DataItem AS0UW-TOTAL-CHANGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDICATE UPDATES CONFIRMNED
DataItem AS0UW-UPDATES-CONFIRMED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDICATE UPDATES WERE PERFOMED
DataItem AS0UW-UPDATES-PROCESSED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW00-GROUP char(17327)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW01-GROUP char(23808)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0UW02-GROUP char(23720)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

