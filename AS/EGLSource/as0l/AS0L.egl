package as0l;

import as1.common.AS1REC;
import as1.common.ASWREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.XZZ6CHR;
import corpcom3.XPAS-00000;
import corpcom3.XPAS-39999;
import corpcom3.XSASS-XOW;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDVTBL;
import corpx1.XOWTBL;
import corpx1.XSETBL;
import corpx2.XOWCD;
import corpy2.YSNTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import fy.common.FY1REC;
import pg.common.PG1REC;
import pg.common.PG2REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AS0L ****
// ************************************************************
// ***                  PRINT PLAN                         ***
// ************************************************************
// 
// AS0M - PRINT PLAN DETAIL INQUIRY
// 
// CREATED 08/92 - KOJHN2
// 
// *********************
Program AS0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AS0LW01 AS0LW01; // record
  AS0LW02 AS0LW02; // record
  AS1REC AS1REC; // record
  ASWREC ASWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VASDFL01 VASDFL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDVTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AS0LM.AS0LM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAS-00000: XPAS-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* ------------------------------------------------------------*/
    ;
    set AS0LW01 empty; /* general ws AREA*/
    set AS0LW02 empty; /* general ws AREA*/
    set ASWREC empty; /* ===> Initialize working storage*/
    ;
    set ERRSQLCA empty;
    ;
    set FY1REC empty; /* DFCTY.VFCTY001*/
    ;
    set PG1REC empty; /* DPRODG.VSYCLR01*/
    set PG2REC empty; /* DPRODG.VSYCLR01*/
    ;
    set SQLCA empty;
    ;
    set TA1REC empty;
    set TA3REC empty;
    set TA5REC empty;
    ;
    set XX0XW01 empty;
    ;
    set VASDFL01 empty; /* Print plan default*/
    ;
    ;
    set AS0LM001 initial;
    ;
    ;
     /* Move As1rec fields to map*/
    ;
    ASWREC.ASW-FIRST-TIME = "Y";
    ;
    ;
    AS0L-0000: AS0L-0000();
     /* ----------------------------------------------------------------------*/
     /* Flow to converse Apparel Screener Production Process*/
     /* ----------------------------------------------------------------------*/
    ;
    goto AS0L-0000; /* Converse Main Process*/
    ;
  end // end main
end // end AS0L

// Process AS0M map1
Function AS0L-0000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AS0L-1000(); /* Obtain the data to display*/
  ;
  AS0L-2000(); /* Format and display the map*/
  ;
  AS0L-3000(); /* Check attention identifier*/
  ;
  AS0L-4000(); /* Reset fields to normal intensity*/
  ;
  AS0L-5000(); /* Verify the entered data*/
  ;
  AS0L-6000(); /* Process valid input request*/
  ;
  ;
  ;
end // end AS0L-0000

// Obtain data to display
Function AS0L-1000()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN THE DATA TO DISPLAY*/
   /*  */
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* At end of rows, close the selected set cursor,*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* if there is an error ... skip process*/
    return;
  end
  ;
  ;
  if (ASWREC.ASW-FIRST-TIME == "Y"
   || AS0LW01.AS0LW-NEW-DATA == "Y")
    AS0LW01.AS0LW-NEW-DATA = "N";
    set AS0LW02 empty; /* Initailize Style Storage Area.*/
    AS0L-1100();
    AS0L-S000(); /* MOVE DATA*/
  end
  ;
  ;
   /* ********************** End of AS0M-1000 ********************/
end // end AS0L-1000

// Select DABUY.VASDFL01
Function AS0L-1100()
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set VASDFL01 empty; /* Reset rec work area*/
  ;
   /* *===================================**/
   /* *  Select Set from DABUY.VASDFL01  **/
   /* *===================================**/
  ;
  try
    call "IO6420" ("S ", SQLCA, VASDFL01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0LM001.XXXPRCNM = "AS0L-1100"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0L"; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET              ";
  TA1REC.TA1MAP = "AS0LM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASDFL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0L-1100

// Display AS0lM001
Function AS0L-2000()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || ASWREC.ASW-FIRST-TIME == "Y")     /* or first time through*/
    set AS0LM001 initial; /* Clear map output area*/
    AS0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    AS0L-2100(); /* Format the data on the page*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ASWREC.ASW-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ASWREC.ASW-MSG-NO);
      end /* Information message number*/
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* ===> No error message to display*/
    set AS0LM001 alarm; /* ===> Indicate sound alarm*/
  end
  ;
  ;
  converse AS0LM001 ;
  ;
end // end AS0L-2000

// Format data on map
Function AS0L-2100()
   /* -------------------------------------------*/
   /* FORMAT DATA ON SCREEN*/
   /* -------------------------------------------*/
  ;
  AS0LM001.AS0LM-BELT-PRTS = AS0LW02.AB-DFLT-BELT-FCTR;
  AS0LM001.AS0LM-SPOT-PRTS = AS0LW02.AB-DFLT-SPOT-FCTR;
  AS0LM001.AS0LM-EMB-PRTS = AS0LW02.AB-DFLT-EMB-FCTR;
  AS0LM001.AS0LM-CAP-TOL = AS0LW02.AB-CAP-TOL-PCT;
  ;
  ;
   /* ----------------------------------------------------*/
   /* -- COMPRESS OWNER GROUPS BEFORE DISPLAYING ON MAP --*/
   /* ----------------------------------------------------*/
  ;
  ;
  ASW-IDX1 = 1;
  ;
  while (ASW-IDX1 <= 30)
    AS0LM001.XOWCD[ASW-IDX1] = AS0LW02.XOWCD[ASW-IDX1];
    ASW-IDX1 = ASW-IDX1 + 1;
  end
  ;
  ;
end // end AS0L-2100

// Check attention identifier
Function AS0L-3000()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(0);
  ASWREC.ASW-MSG-NO = 0;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    AS0L-S000();
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (AS0LM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = AS0LM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AS0LM001.CAITEM; /* Application data*/
      ;
      XPAS-39999(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set AS0LM001.CATOAP cursor, modified, bold; /* Highlight*/
    AS0LM001.XXXPRCNM = "AS0L-3000"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    ASWREC.ASW-PROCESS-NBR = "3000"; /* Process number*/
    AS0LM001.XXXPRCNM = "AS0L-3000"; /* Process name*/
    ;
    XPAS-39999(); /* Exit to another application*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    ASWREC.ASW-PROCESS-NBR = "3000"; /* Process number*/
    AS0LM001.XXXPRCNM = "AS0L-3000"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AS0L-3000

// Reset highlighted fields
Function AS0L-4000()
   /* ------------------------------------------------------------*/
   /* RESET HIGHLIGHTED FIELDS*/
   /* ------------------------------------------------------------*/
   /*  */
  ;
  set AS0LM001.AS0LM-SPOT-PRTS cursor, initialAttributes;
  set AS0LM001.AS0LM-BELT-PRTS initialAttributes;
  set AS0LM001.AS0LM-EMB-PRTS initialAttributes;
  set AS0LM001.AS0LM-CAP-TOL initialAttributes;
  ;
  ASW-IDX1 = 1;
  ;
  while (ASW-IDX1 <= 30)
    set AS0LM001.XOWCD[ASW-IDX1] initialAttributes;
    ASW-IDX1 = ASW-IDX1 + 1;
  end
  ;
end // end AS0L-4000

// Edit Selection Data
Function AS0L-5000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0LM001.CAITEM > " ") /* Application data was entered*/
    ;
    set AS0LM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ASWREC.ASW-PROCESS-NBR = "5000"; /* Process number*/
    AS0LM001.XXXPRCNM = "AS0L-5000"; /* Process name*/
    ;
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* VERIFY THE ENTERED DATA*/
   /* ------------------------------------------------------------*/
  ;
  ASWREC.ASW-NEW-DATA-FL = "N";
  ASWREC.ASW-FIRST-TIME = "N";
  AS0LW01.AS0LW-VALID-UPD-FL = "N";
  ;
  AS0L-5100(); /* validate changes*/
  ;
  converseLib.clearScreen();
  
  ;
end // end AS0L-5000

// Verify Entered Data
Function AS0L-5100()
   /* ------------------------------------------------------------*/
   /* VERIFY THE SELECTION CRITERIA*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ASW-IDX1 = 1;
  while (ASW-IDX1 <= 30)
    if (AS0LM001.XOWCD[ASW-IDX1] != AS0LW02.XOWCD[ASW-IDX1])
      AS0L-5110(); /* verify owner group*/
      AS0LW01.AS0LW-CONFIRM-UPD-FL = "N";
    end
    ASW-IDX1 = ASW-IDX1 + 1;
  end
  ;
  AS0L-S003(); /* Validate No Duplicates*/
  ;
  if (converseVar.validationMsgNum != 0)
    AS0LW-VALID-UPD-FL = "N";
    return;
  end
  ;
  if (AS0LM001.AS0LM-SPOT-PRTS != AS0LW02.AB-DFLT-SPOT-FCTR)
    AS0LW02.AB-DFLT-SPOT-FCTR = AS0LM001.AS0LM-SPOT-PRTS;
    AS0LW01.AS0LW-CONFIRM-UPD-FL = "N";
  end
  ;
  if (AS0LM001.AS0LM-BELT-PRTS != AS0LW02.AB-DFLT-BELT-FCTR)
    AS0LW02.AB-DFLT-BELT-FCTR = AS0LM001.AS0LM-BELT-PRTS;
    AS0LW01.AS0LW-CONFIRM-UPD-FL = "N";
  end
  ;
  if (AS0LM001.AS0LM-EMB-PRTS != AS0LW02.AB-DFLT-EMB-FCTR)
    AS0LW02.AB-DFLT-EMB-FCTR = AS0LM001.AS0LM-EMB-PRTS;
    AS0LW01.AS0LW-CONFIRM-UPD-FL = "N";
  end
  ;
  if (AS0LM001.AS0LM-CAP-TOL != AS0LW02.AB-CAP-TOL-PCT)
    AS0LW02.AB-CAP-TOL-PCT = AS0LM001.AS0LM-CAP-TOL;
    AS0LW01.AS0LW-CONFIRM-UPD-FL = "N";
  end
  ;
  AS0L-S001(); /* Compress Owner Groups*/
  ;
  ;
   /* ------------------------------------------------*/
   /* --- VERIFY THAT DATA DOES NOT MATCH DATABASE ---*/
   /* ------------------------------------------------*/
  ;
  ASW-IDX1 = 1;
  while (ASW-IDX1 <= 30)
    if (VASDFL01.XOWCD[ASW-IDX1] != AS0LW02.XOWCD[ASW-IDX1])
      AS0LW01.AS0LW-VALID-UPD-FL = "Y";
    end
    ASW-IDX1 = ASW-IDX1 + 1;
  end
  ;
  if (VASDFL01.AB-DFLT-SPOT-FCTR != AS0LW02.AB-DFLT-SPOT-FCTR)
    AS0LW01.AS0LW-VALID-UPD-FL = "Y";
  end
  ;
  if (VASDFL01.AB-DFLT-BELT-FCTR != AS0LW02.AB-DFLT-BELT-FCTR)
    AS0LW01.AS0LW-VALID-UPD-FL = "Y";
  end
  ;
  if (VASDFL01.AB-DFLT-EMB-FCTR != AS0LW02.AB-DFLT-EMB-FCTR)
    AS0LW01.AS0LW-VALID-UPD-FL = "Y";
  end
  ;
  if (VASDFL01.AB-CAP-TOL-PCT != AS0LW02.AB-CAP-TOL-PCT)
    AS0LW01.AS0LW-VALID-UPD-FL = "Y";
  end
  ;
   /* ****************** End of as0l-5100 *************************/
end // end AS0L-5100

// Validate Owner Group
Function AS0L-5110()
   /* ------------------------------------------------------------*/
   /* VERIFY OWNER GROUP*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0LM001.XOWCD[ASW-IDX1] == "  ")
    AS0LW02.XOWCD[ASW-IDX1] = " ";
    return;
  end
  ;
  if (AS0LM001.XOWCD[ASW-IDX1] == "?")
    XSASS-XOW();
    if (AS1REC.AS1-VALID-FL != "0")
      set AS0LM001.XOWCD[ASW-IDX1] cursor, bold;
      converseLib.validationFailed(44); /* invalid owner group msg*/
      AS0LM001.XXXPRCNM = "AS0L-5110";
      return;
    else
      AS0LM001.XOWCD[ASW-IDX1] = AS1REC.XOWCD;
    end
    ;
  else
    if (AS0LM001.XOWCD[ASW-IDX1] in XOWTBL.XOWCD
     && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* CONTINUE*/
    else
      set AS0LM001.XOWCD[ASW-IDX1] cursor, bold;
      converseLib.validationFailed(44); /* invalid owner group msg*/
      AS0LM001.XXXPRCNM = "AS0L-5130";
      return;
    end
  end
  ;
  AS0LW02.XOWCD[ASW-IDX1] = AS0LM001.XOWCD[ASW-IDX1];
  ;
   /* **                                                        ***/
   /* ****************** End of as0l-5130 ************************/
end // end AS0L-5110

// Process input request
Function AS0L-6000()
   /* ------------------------------------------------------------*/
   /*  */
   /* PROCESS VALID INPUT REQUESTS*/
   /*  */
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum > 0) /* ===> errors have occurred*/
    return; /* ===> return to previous process*/
  end
  ;
  if (AS0LW01.AS0LW-VALID-UPD-FL == "Y"
   && AS0LW01.AS0LW-CONFIRM-UPD-FL != "Y")
    AS0LW-CONFIRM-UPD-FL = "Y"; /* GET A CONFIRMATION*/
    ASWREC.ASW-MSG-NO = 89;
    return;
  end
  ;
  if (AS0LW01.AS0LW-VALID-UPD-FL == "Y"
   && AS0LW01.AS0LW-CONFIRM-UPD-FL == "Y")
    ;
    AS0LW01.AS0LW-VALID-UPD-FL = "N";
    AS0LW01.AS0LW-CONFIRM-UPD-FL = "N";
    AS0LW01.AS0LW-UPDATES-MADE = "N";
    ;
    AS0L-6100(); /* UPDATE PROCESS*/
    ;
  end
  ;
end // end AS0L-6000

// Update Output Record VASDFL01
Function AS0L-6100()
  ;
   /* Call IO6420 to Update Default Data*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  AS0L-S002(); /* move data*/
  ;
  XX0XS01();
  ;
  VASDFL01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VASDFL01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VASDFL01.XZZ6CHR = AS1REC.XXXUSRID;
  ;
  try
    call "IO6420" ("U ", SQLCA, VASDFL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    converseLib.validationFailed(45);
    exit stack; /* Return to calling process*/
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* row not found for update*/
    AS0LW01.AS0LW-NEW-DATA = "Y";
    ASWREC.ASW-MSG-NO = 13;
    exit stack; /* Return to calling process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0LM001.XXXPRCNM = "AS0L-6100"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0L"; /* Error location*/
  TA1REC.TA1LOC = "UPDATE PRINT PLAN DATA   ";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASDFL01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AS0L-6100

// Move Data To Work Field
Function AS0L-S000()
   /* --------------------------------------------*/
   /* --  Move data from VASDFL01 to work area  --*/
   /* --------------------------------------------*/
  ;
  AS0LW02.AB-DFLT-BELT-FCTR = VASDFL01.AB-DFLT-BELT-FCTR;
  AS0LW02.AB-DFLT-SPOT-FCTR = VASDFL01.AB-DFLT-SPOT-FCTR;
  AS0LW02.AB-DFLT-EMB-FCTR = VASDFL01.AB-DFLT-EMB-FCTR;
  AS0LW02.AB-CAP-TOL-PCT = VASDFL01.AB-CAP-TOL-PCT;
  ;
  ASW-IDX1 = 1;
  ;
  while (ASW-IDX1 <= 30)
    AS0LW02.XOWCD[ASW-IDX1] = VASDFL01.XOWCD[ASW-IDX1];
    ASW-IDX1 = ASW-IDX1 + 1;
  end
  ;
end // end AS0L-S000

// Compress Owner Groups
Function AS0L-S001()
  ;
  ASW-IDX1 = 1;
  ASW-IDX2 = 1;
  ;
  while (ASW-IDX1 <= 30)
    if (AS0LW02.XOWCD[ASW-IDX1] == " ")
      ASW-IDX2 = ASW-IDX1 + 1;
      while (ASW-IDX2 <= 30)
        if (AS0LW02.XOWCD[ASW-IDX2] > " ")
          AS0LW02.XOWCD[ASW-IDX1] = AS0LW02.XOWCD[ASW-IDX2];
          AS0LW02.XOWCD[ASW-IDX2] = " ";
          ASW-IDX2 = 99;
        end
        ASW-IDX2 = ASW-IDX2 + 1;
      end
    end
    if (ASW-IDX2 == 30)
      ASW-IDX1 = 99;
    else
      ASW-IDX1 = ASW-IDX1 + 1;
    end
  end
  ;
end // end AS0L-S001

// Move Update Data
Function AS0L-S002()
   /* --------------------------------------------*/
   /* MOVE DATA TO VASDFL01 FROM WORK AREA  --*/
   /* --------------------------------------------*/
  ;
  VASDFL01.AB-DFLT-BELT-FCTR = AS0LW02.AB-DFLT-BELT-FCTR;
  VASDFL01.AB-DFLT-SPOT-FCTR = AS0LW02.AB-DFLT-SPOT-FCTR;
  VASDFL01.AB-DFLT-EMB-FCTR = AS0LW02.AB-DFLT-EMB-FCTR;
  VASDFL01.AB-CAP-TOL-PCT = AS0LW02.AB-CAP-TOL-PCT;
  ;
  ASW-IDX1 = 1;
  ;
  while (ASW-IDX1 <= 30)
    VASDFL01.XOWCD[ASW-IDX1] = AS0LW02.XOWCD[ASW-IDX1];
    ASW-IDX1 = ASW-IDX1 + 1;
  end
  ;
end // end AS0L-S002

// Validate No Duplicates
Function AS0L-S003()
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  ASW-IDX1 = 30;
  ASW-IDX2 = 0;
  ;
  while (ASW-IDX1 > 1)
    if (AS0LM001.XOWCD[ASW-IDX1] > " ")
      ASW-IDX2 = ASW-IDX1 - 1;
      while (ASW-IDX2 > 0)
        if (AS0LM001.XOWCD[ASW-IDX2] == AS0LM001.XOWCD[ASW-IDX1])
          set AS0LM001.XOWCD[ASW-IDX2] bold;
          set AS0LM001.XOWCD[ASW-IDX1] bold;
          set AS0LM001.XOWCD[1] cursor;
          converseLib.validationFailed(143);
        end
        ASW-IDX2 = ASW-IDX2 - 1;
      end
    end
    ASW-IDX1 = ASW-IDX1 - 1;
  end
  ;
end // end AS0L-S003

//*** RECORD=AS0LW01 ****
// ************************************************************
// This record holds the data for creating the maps for AS0N.
// 
// DATE CREATED:        08-21-92
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 08-21-92  KJ         INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record AS0LW01 type basicRecord
  10 AS0LW-NEW-DATA AS0LW-NEW-DATA ; 
  10 AS0LW-VALID-UPDATE-ROW AS0LW-VALID-UPDATE-ROW ; 
  10 AS0LW-NMBR-PRINTS AS0LW-NMBR-PRINTS ; 
  10 AS0LW-VALID-UPD-FL AS0LW-VALID-UPD-FL ; 
  10 AS0LW-CONFIRM-UPD-FL AS0LW-CONFIRM-UPD-FL ; 
  10 AS0LW-UPDATE-ROW AS0LW-UPDATE-ROW ; 
  10 AS0LW-UPDATES-MADE AS0LW-UPDATES-MADE ; 
end // end AS0LW01

//*** RECORD=AS0LW02 ****
// *****************print plan default table*******************
// DB2 TABLE:         DAbuy.vasdfl01
// COPYLIB MEMBER:    DCL01069
// I/O MOD:           IO
// KEY TO DB2 TABLE:  none - one row only
// DATE CREATED:      08-03-92
// MAINTENANCE LOG:
//   DATE    USERID  COMMENT
// --------  ------  -------
// 08-03-92  LREIN   INITIAL INSTALLATION
// 09/30/92  jfugat  added 30 owner groups and corrected field
// *****************print plan default table*******************
// ***********************
Record AS0LW02 type basicRecord
  15 AB-DFLT-BELT-FCTR AB-DFLT-BELT-FCTR ; 
  15 AB-DFLT-SPOT-FCTR AB-DFLT-SPOT-FCTR ; 
  15 AB-DFLT-EMB-FCTR AB-DFLT-EMB-FCTR ; 
  15 AB-CAP-TOL-PCT AB-CAP-TOL-PCT ; 
  15 XOWCD XOWCD [30] ; 
end // end AS0LW02

//*** RECORD=VASDFL01 ****
// *****************print plan default table*******************
// DB2 TABLE:         DAbuy.vasdfl01
// COPYLIB MEMBER:    DCL01069
// I/O MOD:           IO
// KEY TO DB2 TABLE:  none - one row only
// DATE CREATED:      08-03-92
// MAINTENANCE LOG:
//   DATE    USERID  COMMENT
// --------  ------  -------
// 08-03-92  LREIN   INITIAL INSTALLATION
// 09/30/92  jfugat  added 30 owner groups and corrected field
// *****************print plan default table*******************
// ************************
Record VASDFL01 type basicRecord
  10 VASDFL01-GROUP VASDFL01-GROUP ; 
    15 AB-DFLT-BELT-FCTR AB-DFLT-BELT-FCTR ; 
    15 AB-DFLT-SPOT-FCTR AB-DFLT-SPOT-FCTR ; 
    15 AB-DFLT-EMB-FCTR AB-DFLT-EMB-FCTR ; 
    15 AB-CAP-TOL-PCT AB-CAP-TOL-PCT ; 
    15 XOWCD XOWCD [30] ; 
    15 ZZZCHGCT ZZZCHGCT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 XZZ6CHR XZZ6CHR ; 
end // end VASDFL01

// AB-CAP-TOL-PCT
DataItem AB-CAP-TOL-PCT decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB-DFLT-BELT-FCTR
DataItem AB-DFLT-BELT-FCTR decimal(3,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AB-DFLT-EMP-FCTR
DataItem AB-DFLT-EMB-FCTR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AB-DFLT-SPOT-FCTR
DataItem AB-DFLT-SPOT-FCTR decimal(3,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CONFIRM Update Flag
DataItem AS0LW-CONFIRM-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New Selection Key Flag
DataItem AS0LW-NEW-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Nbr Of Prints
DataItem AS0LW-NMBR-PRINTS bin(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicate Row To Update
DataItem AS0LW-UPDATE-ROW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Indicate Row To Update
DataItem AS0LW-UPDATES-MADE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid Update Flag
DataItem AS0LW-VALID-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid Print Plan Detail Row
DataItem AS0LW-VALID-UPDATE-ROW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VASDFL01-group
DataItem VASDFL01-GROUP char(85)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

