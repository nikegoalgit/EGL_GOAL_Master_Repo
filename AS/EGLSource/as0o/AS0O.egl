package as0o;

import ab.common.*;
import as1.common.AS1-XSN-YY;
import as1.common.AS1REC;
import as1.common.ASWREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAS-00000;
import corpcom3.XPAS-39999;
import corpcom3.XSASS-XSE;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XSETBL;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpy2.YSNTBL;
import pg.common.PG1REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VPRPCT01;
//*** PROGRAM=AS0O ****
// ************************************************************
// ***                  PRINT PLAN                         ***
// ************************************************************
// 
// AS0O - PRINT PLAN PRODUCTION PERCENTS MAINTENANCE.
// 
// CREATED 10/92 - KOJHN2
// AS0218  04/93 - TDODSO  Changed PF3 functionality on Map 3
//                         so that Map 1 is shown with original
//                         data if PF3 is pressed
// 02-15-95        kj      xsn-ysn
// 
// *********************
Program AS0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AS0OW01 AS0OW01; // record
  AS0OW02 AS0OW02; // record
  AS0OW03 AS0OW03; // record
  AS0OW04 AS0OW04; // record
  AS1REC AS1REC; // record
  ASWREC ASWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPRPCT01 VPRPCT01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AS0OM.AS0OM001,  // forms
      AS0OM.AS0OM002, 
      AS0OM.AS0OM003,
      AS0OM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAS-00000: XPAS-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* ------------------------------------------------------------*/
    ;
    set AS0OW01 empty; /* general ws AREA*/
    set AS0OW04 empty; /* Factory Ws Area*/
    set AS0OW02 empty; /* Temp TSQ Area*/
    set ASWREC empty; /* ===> Initialize working storage*/
    ;
     /* Dabuy.Vprpct01*/
    set VPRPCT01 empty;
    set ERRSQLCA empty;
    ;
    ;
    set SQLCA empty;
    ;
    set TA1REC empty;
    set TA3REC empty;
    set TA5REC empty;
    ;
    set XX0XW01 empty;
    ;
    ;
    set AS0OM001 initial; /* ===> Initialize - map output area*/
    set AS0OM002 initial; /* ===> Initialize - map output area*/
    set AS0OM003 initial; /* ===> Initialize - map output area*/
    ;
    ASWREC.ASW-NEW-DATA-FL = "N";
    ;
     /* Move As1rec fields to map*/
    ;
    AS0OW01.AS0OW-TSL = +856; /* set tsq length*/
    ;
    ASWREC.ASW-FIRST-TIME = "Y";
    ASWREC.ASW-NEW-DATA-FL = "N";
    ;
    AS0OW01.AS0OW-CURR-MAP = 1;
    AS0OW01.AS0OW-PREV-MAP = 0;
    ;
    AS0O-0000: AS0O-0000();
     /* ----------------------------------------------------------------------*/
     /* Flow to converse Process*/
     /* ----------------------------------------------------------------------*/
    ;
    goto AS0O-0000; /* Converse Main Process*/
    ;
  end // end main
end // end AS0O

// Process AS0O
Function AS0O-0000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (AS0OW-CURR-MAP == 1)
    AS0O-1000(); /* process map 1*/
  else
    if (AS0OW-CURR-MAP == 2)
      AS0O-2000(); /* / process map 2*/
    else
      if (AS0OW-CURR-MAP == 3)
        AS0O-3000(); /* / process map 3*/
      else
        AS0O-1000(); /* process map 1(default)*/
      end
    end
  end
  ;
  ;
end // end AS0O-0000

// ** Pcnts Code List  - MAP 1 **
Function AS0O-1000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map 1.  Processing*/
   /* always returns to the top of AS0o-0000 and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AS0O-1100(); /* Get Data to Display*/
  ;
  AS0O-1200(); /* Format and display the map*/
  ;
  AS0O-1300(); /* Check attention identifier*/
  ;
  AS0O-1400(); /* Reset fields to normal intensity*/
  ;
  AS0O-1500(); /* Verify the entered data*/
  ;
  AS0O-1600(); /* Process valid input request*/
  ;
  ;
  ;
end // end AS0O-1000

// Obtain data to display
Function AS0O-1100()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN THE DATA TO DISPLAY*/
   /*  */
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* At end of rows, close the selected set cursor,*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0 /* if there is an error ... skip process*/
   || ASWREC.ASW-FIRST-TIME == "Y"      /* or first time*/
   || ASWREC.ASW-NEW-DATA-FL != "Y")    /* No New Selection Criteria Entered*/
    return;
  end
  ;
  ;
  set AS0OW02 empty; /* Initailize Style Storage Area.*/
  set AS0OW04 empty; /* Initailize Style Storage Area.*/
  AS0O-1110(); /* Purge TSQ*/
  ;
  AS0O-1120(); /* Select Prd Pct Csr*/
  AS0OW01.AS0OW-END-OF-CSR = "N";
  ASWREC.ASW-NEW-DATA-FL = "N"; /* turn off New Selection Criteria*/
  while (AS0OW01.AS0OW-END-OF-CSR == "N")
    AS0O-1130(); /* process factory list*/
    if (AS0OW01.AS0OW-END-OF-CSR == "N")
      AS0O-1140(); /* Close factory list*/
    end
  end
  AS0O-1150(); /* close factory list*/
  ;
  ;
  if (AS0OW04.AS0OW-PCT-IDX > 0)
    AS0O-1141(); /* ADD LAST PAGE*/
  end
  ;
  if (AS0OW04.AS0OW-DATA-FOUND != "Y")
    ASWREC.ASW-MSG-NO = 5;
  end
   /* ********************** End of AS0O-1100 ********************/
end // end AS0O-1100

// Purge Temporary TSQ
Function AS0O-1110()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "AS0O"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  call "TA0050" (AS0OW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                  /* ; subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AS0OM001.XXXPRCNM = "AS0O-1100";
    TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AS0OM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  AS0OW01.AS0OW-CURRENT-PAGE = 1; /* Reset current page number*/
  AS0OW01.AS0OW-LAST-PAGE = 0; /* Reset last page number*/
  AS0OW01.AS0OW-MAX-PAGE = 0; /* Reset highest page number*/
  ;
  ;
end // end AS0O-1110

// Declare DABUY.VPRCT01 Cursor
Function AS0O-1120()
   /* call IO6560 to get Production Percents Codes*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  set VPRPCT01 empty;
  ;
  AS0O-S001();
  try
    call "IO6560" ("S1", SQLCA, VPRPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0OM001.XXXPRCNM = "AS0O-1120"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET PROD PCT CODES";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRPCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0O-1120

// Fetch Fcty Csr/DABUY.VPRPTC01
Function AS0O-1130()
   /* Fetch Production Percents Cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/
  ;
  set VPRPCT01 empty;
  ;
  try
    call "IO6560" ("N1", SQLCA, VPRPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
   /* ****************************************************/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AS0OW04.AS0OW-DATA-FOUND = "Y";
    return; /* Return to Calling Process*/
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* End of selected set*/
    AS0OW01.AS0OW-END-OF-CSR = "Y"; /* Indicate end of file*/
    return; /* Return to previous process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0OM001.XXXPRCNM = "AS0O-1130"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
  TA1REC.TA1LOC = "SELECT NEXT PROD PERCENT ";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRPCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0O-1130

// Process Prod Pcnt Codes
Function AS0O-1140()
  ;
  if (AS0OW04.AS0OW-PCT-IDX == 0)
    AS0OW04.AS0OW-PCT-IDX = AS0OW04.AS0OW-PCT-IDX + 1;
    AS0OW02.AB-PRDCTN-GRP-ID[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-GRP-ID;
    AS0OW02.XSNYR[AS0OW-PCT-IDX] = VPRPCT01.XSNYR;
    AS0OW02.XSECD[AS0OW-PCT-IDX] = VPRPCT01.XSECD;
  end
  ;
  if (VPRPCT01.AB-PRDCTN-GRP-ID != AS0OW02.AB-PRDCTN-GRP-ID[AS0OW-PCT-IDX]
   || VPRPCT01.XSNYR != AS0OW02.XSNYR[AS0OW-PCT-IDX]
   || VPRPCT01.XSECD != AS0OW02.XSECD[AS0OW-PCT-IDX])
    ;
    if (AS0OW04.AS0OW-PCT-IDX < 10)
      AS0OW04.AS0OW-PCT-IDX = AS0OW04.AS0OW-PCT-IDX + 1;
    else
      AS0O-1141(); /* add data to temp tsq*/
      AS0OW04.AS0OW-PCT-IDX = 1;
    end
    AS0OW02.AB-PRDCTN-GRP-ID[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-GRP-ID;
    AS0OW02.XSNYR[AS0OW-PCT-IDX] = VPRPCT01.XSNYR;
    AS0OW02.XSECD[AS0OW-PCT-IDX] = VPRPCT01.XSECD;
  end
  ;
  AS0O-S002();
  ;
end // end AS0O-1140

// Add Page to Temporary TSQ
Function AS0O-1141()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  set TA5REC empty;
  AS0OW02.AS0OW-TSQ-LENGTH = AS0OW01.AS0OW-TSL; /* Temp storage lngth*/
  TA5REC.TA5APPID = "AS0O"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (AS0OW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AS0OM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/
    ;
    AS0OM001.XXXPRCNM = "AS0O-1141"; /* PROCESS NAME*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    return; /* Return to previous process*/
    ;
  end
  ;
  AS0OW01.AS0OW-MAX-PAGE = TA5REC.TA5TSQIX; /* Highest page number*/
  ;
  set AS0OW02 empty; /* Clear temporary storage record*/
  ;
  ;
end // end AS0O-1141

// Close DABUY.VPRPCT01
Function AS0O-1150()
   /* Close Prd Pct Csr*/
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6560" ("C1", SQLCA, VPRPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AS0OM001.XXXPRCNM = "AS0O-1150"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AS0OM001"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRPCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
   /* ********************** End of AS0M-1500 ********************/
end // end AS0O-1150

// Display AS0OM001
Function AS0O-1200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || ASWREC.ASW-FIRST-TIME == "Y")     /* or first time through*/
    set AS0OM001 initial; /* Clear map output area*/
    AS0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    AS0O-1210(); /* Format the data on the page*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ASWREC.ASW-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ASWREC.ASW-MSG-NO);
      end /* Information message number*/
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* ===> No error message to display*/
    set AS0OM001 alarm; /* ===> Indicate sound alarm*/
  end
  ;
  ;
  converse AS0OM001 ;
  ;
end // end AS0O-1200

// Format data on map
Function AS0O-1210()
   /* FORMAT DATA ON SCREEN*/
   /* -------------------------------------------*/
   /* --             MOVE HEADER FIELDS        --*/
   /* -------------------------------------------*/
  ;
  AS0OM001.AS0OM-PRD-GRP-SEL = AS0OW01.AB-PRDCTN-GRP-ID;
  AS0OM001.AS0OM-SESN-CD-SEL = AS0OW01.XSECD;
  AS0OM001.AS0OM-SESN-YR-SEL = AS0OW01.XSNYR;
  ;
  if (AS0OW01.AS0OW-CURRENT-PAGE != AS0OW01.AS0OW-LAST-PAGE) /* on same page*/
    if (AS0OW01.AS0OW-MAX-PAGE > 0)
      AS0O-1211(); /* Obtain Tsq Page;*/
    else
      converseLib.validationFailed(5);
    end
  end
  ;
  AS0O-S003(); /* Move Data To Map*/
  ;
end // end AS0O-1210

// Obtain Data From TSQ
Function AS0O-1211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  AS0OW02.AS0OW-TSQ-LENGTH = AS0OW01.AS0OW-TSL; /* temp tsq length*/
  TA5REC.TA5APPID = "AS0O"; /* Application identification*/
  TA5REC.TA5TSQIX = AS0OW01.AS0OW-CURRENT-PAGE; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (AS0OW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AS0OM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AS0OM001.XXXPRCNM = "AS0O-1211"; /* prcess name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AS0O-1211

// Check attention identifier
Function AS0O-1300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(0);
  AS1REC.AS1-MSG-NO = 0;
  ASWREC.ASW-MSG-NO = 0;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AS0OM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = AS0OM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AS0OM001.CAITEM; /* Application data*/
      ;
      XPAS-39999(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set AS0OM001.CATOAP cursor, modified, bold; /* Highlight*/
    AS0OM001.XXXPRCNM = "AS0O-1300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    ASWREC.ASW-PROCESS-NBR = "1300"; /* Process number*/
    AS0OM001.XXXPRCNM = "AS0O-1300"; /* Process name*/
    ;
    XPAS-39999(); /* Exit to another application*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/
    ;
    ASWREC.ASW-PROCESS-NBR = "1300"; /* Process number*/
    AS0OM001.XXXPRCNM = "AS0O-1300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AS0O-1300

// Reset highlighted fields
Function AS0O-1400()
   /* ------------------------------------------------------------*/
   /* RESET HIGHLIGHTED FIELDS*/
   /* ------------------------------------------------------------*/
   /*  */
   /* ------------------------------------------------------------*/
   /* Reset selection field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/
   /*  */
  set AS0OM001.AS0OM-PRD-GRP-SEL initialAttributes, cursor; /* Prd Pct Grp*/
  set AS0OM001.AS0OM-SESN-CD-SEL initialAttributes; /* Season Cd*/
  set AS0OM001.AS0OM-SESN-YR-SEL initialAttributes; /* Season Year*/
  ;
  ASW-IDX1 = 1;
  while (ASW-IDX1 <= 10)
    set AS0OM001.AS0OM-SELECT initialAttributes; /* Select Field*/
    ASW-IDX1 = ASW-IDX1 + 1;
  end
   /*  */
end // end AS0O-1400

// Edit Selection Data
Function AS0O-1500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0OM001.CAITEM > " ") /* Application data was entered*/
    ;
    set AS0OM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ASWREC.ASW-PROCESS-NBR = "1500"; /* Process number*/
    AS0OM001.XXXPRCNM = "AS0O-1500"; /* Process name*/
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* VERIFY THE ENTERED DATA*/
   /* ------------------------------------------------------------*/
  ;
  ASWREC.ASW-NEW-DATA-FL = "N";
  AS0OW01.AS0OW-SELECT-MADE = "N";
  ;
  if (AS0OM001.AS0OM-PRD-GRP-SEL != AS0OW01.AB-PRDCTN-GRP-ID
   || AS0OM001.AS0OM-SESN-CD-SEL != AS0OW01.XSECD /* season*/
   || AS0OM001.AS0OM-SESN-YR-SEL != AS0OW01.XSNYR /* season yr*/
   || ASWREC.ASW-FIRST-TIME == "Y")               /* OR FIRST TIME PROCESSING*/
    ;
    ASWREC.ASW-NEW-DATA-FL = "Y";
    ASWREC.ASW-FIRST-TIME = "N";
    AS0O-1510(); /* validate changes*/
    ;
    converseLib.clearScreen();
    
    ;
    return;
    ;
  end
  ;
  AS0O-1520(); /* Process Selections*/
  ;
end // end AS0O-1500

// Verify Entered Data
Function AS0O-1510()
   /* ------------------------------------------------------------*/
   /* VERIFY THE SELECTION CRITERIA*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    converseLib.validationFailed(133); /* Cannot allow cahnge and scroll*/
    AS0OM001.XXXPRCNM = "AS0O-1510";
    return;
  end
  ;
  if (AS0OM001.AS0OM-SESN-YR-SEL == "?")
    set AS0OM001.AS0OM-SESN-YR-SEL cursor, bold;
    converseLib.validationFailed(42); /* not a pop-up window*/
    AS0OM001.XXXPRCNM = "AS0O-1510";
  else
    if (AS0OM001.AS0OM-SESN-CD-SEL != AS0OW01.XSECD
     || AS0OM001.AS0OM-SESN-YR-SEL != AS0OW01.XSNYR)
      AS0O-1511(); /* verify sesn & yr*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* No Validation Is Performed On The Select Codes ......*/
   /* ------------------------------------------------------------*/
  AS0OW01.AB-PRDCTN-GRP-ID = AS0OM001.AS0OM-PRD-GRP-SEL;
  ;
   /* ****************** End of AS0O-1510 *************************/
end // end AS0O-1510

// Validate Season CD/YR
Function AS0O-1511()
   /* ------------------------------------------------------------*/
   /* VERIFY SESN & YR*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0OM001.AS0OM-SESN-CD-SEL == "  "
   && AS0OM001.AS0OM-SESN-YR-SEL == 0)
    AS0OW01.XSECD = AS0OM001.AS0OM-SESN-CD-SEL;
    AS0OW01.XSNYR = AS0OM001.AS0OM-SESN-YR-SEL;
    AS1REC.XSECD = AS0OM001.AS0OM-SESN-CD-SEL;
    AS1REC.XSNYR = AS0OM001.AS0OM-SESN-YR-SEL;
    AS1REC.AS1-XSN-CC-YY = 0;
    AS0OW01.AS1-XSN-YY = 0;
    return;
  end
  ;
  if (AS0OM001.AS0OM-SESN-CD-SEL == "  "
   && AS0OM001.AS0OM-SESN-YR-SEL > 0)
    set AS0OM001.AS0OM-SESN-CD-SEL cursor, bold;
    converseLib.validationFailed(16); /* not a valid season cd*/
    AS0OM001.XXXPRCNM = "AS0O-1511";
    return;
  end
  ;
  if (AS0OM001.AS0OM-SESN-CD-SEL > "  "
   && AS0OM001.AS0OM-SESN-YR-SEL == 0)
    set AS0OM001.AS0OM-SESN-YR-SEL cursor, bold;
    converseLib.validationFailed(26); /* not a valid season yr*/
    AS0OM001.XXXPRCNM = "AS0O-1511";
    return;
  end
  ;
  AS1REC.XSECD = AS0OM001.AS0OM-SESN-CD-SEL;
  ;
  XSASS-XSE(); /* perform 'pop-up window' processing*/
  if (AS1REC.AS1-VALID-XSE-FL == "0")
    AS0OM001.AS0OM-SESN-CD-SEL = AS1REC.XSECD;
  end
  ;
  AS1REC.AS1-XSN-CC-YY = AS0OM001.AS0OM-SESN-YR-SEL;
  ;
   /* -----------------------------------------------------------*/
   /* Check for Valid Season Year*/
   /* -----------------------------------------------------------*/
  ;
  if (AS1REC.AS1-XSN-CC-YY in YSNTBL.XSNYR)
    AS1REC.AS1-XSN-SESN-YR = AS1REC.AS1-XSN-YY;
     /* -----------------------------------------------------------*/
     /* Check for Valid Season-Year Combination*/
     /* -----------------------------------------------------------*/
    ASWREC.ASW-IDX5 = 1; /* SET SEARCH INDEX TO 1*/
    while (ASWREC.ASW-IDX5 != 9999
     && ASWREC.ASW-IDX5 != 0) /* end of search condition*/
      if (YSNTBL.XSNABRV[ASW-IDX5]
       == AS1REC.AS1-XSE-XSN
       && YSNTBL.XGPCD[ASW-IDX5] == "03"
       && YSNTBL.XDR-PROD-REG-CD[ASW-IDX5] == "01")
        ;
        ASWREC.ASW-IDX5 = 0; /* END OF TABLE*/
       /* continue*/
      else
        if (YSNTBL.XGPCD[ASW-IDX5] != "99")
          ASWREC.ASW-IDX5 = ASWREC.ASW-IDX5 + 1;
        else
          ASWREC.ASW-IDX5 = 9999; /* END OF TABLE*/
          set AS0OM001.AS0OM-SESN-CD-SEL cursor, bold;
          set AS0OM001.AS0OM-SESN-YR-SEL bold;
          AS1REC.AS1-MSG-NO = 71; /* invalid sesn/yr msg*/
          AS0OM001.XXXPRCNM = "AS0O-1511";
          AS1REC.AS1-XSN-SESN-YR = 0;
          AS1REC.AS1-XSN-CC-YY = 0;
          return;
        end
      end
    end
    ;
  else
    set AS0OM001.AS0OM-SESN-CD-SEL cursor, bold;
    set AS0OM001.AS0OM-SESN-YR-SEL bold;
    AS1REC.AS1-MSG-NO = 26; /* invalid yr msg;*/
    AS0OM001.XXXPRCNM = "AS0O-1511";
    AS1REC.AS1-XSN-SESN-YR = 0;
    AS1REC.AS1-XSN-CC-YY = 0;
    return;
  end
  ;
  ;
  ;
  ;
  AS0OW01.XSECD = AS0OM001.AS0OM-SESN-CD-SEL;
  AS0OW01.XSNYR = AS0OM001.AS0OM-SESN-YR-SEL;
  ;
   /* ****************** End of AS0O-1510 *************************/
end // end AS0O-1511

// Verify Selections
Function AS0O-1520()
  move "N" to AS0OW01.AS0OW-SELECT[1] for all;
  AS0OW01.AS0OW-SELECT-MADE = "N";
  AS0OW01.AS0OW-CURR-CODE = 0;
  ;
  ASW-IDX1 = 1;
  ;
  while (ASW-IDX1 <= 10)
    if (AS0OM-SELECT[ASW-IDX1] > " ")
      if (AS0OW01.AS0OW-SELECT-MADE == "Y")
        converseLib.validationFailed(9);
        set AS0OM001.AS0OM-SELECT[ASW-IDX1] bold;
        AS0OM001.XXXPRCNM = "AS0O-1520";
      else
        AS0OW01.AS0OW-SELECT[ASW-IDX1] = "Y";
        AS0OW01.AS0OW-SELECT-MADE = "Y";
        AS0OW01.AS0OW-CURR-CODE = ASW-IDX1;
      end
    end
    ASW-IDX1 = ASW-IDX1 + 1;
  end
  ;
end // end AS0O-1520

// Process request
Function AS0O-1600()
   /* ------------------------------------------------------------*/
   /*  */
   /* PROCESS VALID INPUT REQUESTS*/
   /*  */
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum > 0) /* ===> errors have occurred*/
    return; /* ===> return to previous process*/
  end
  ;
  if (converseVar.eventKey is pf7 /* ===> Pf7 was pressed*/
   || converseVar.eventKey is pf8) /* ===> Pf8 was pressed*/
    ;
    if (AS0OW-SELECT-MADE == "Y")
      AS0OM001.XXXPRCNM = "AS0O-1600";
      converseLib.validationFailed(14); /* no selection when scrolling*/
      return; /* ===> Return to previous process*/
    end
    ;
    ;
    ;
    /* ------------------------------------------------------------*/
    /* If a scroll backward was requested, decrement the page*/
    /* number and return to the previous process.*/
    /* If no prev pages display msg*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is pf7) /* ===> Scroll back requested*/
      if (AS0OW01.AS0OW-CURRENT-PAGE > 1)
        AS0OW01.AS0OW-CURRENT-PAGE = AS0OW01.AS0OW-CURRENT-PAGE - 1;
      else
        AS0OM001.XXXPRCNM = "AS0O-1600";
        converseLib.validationFailed(2); /* no scroll forward*/
      end
      return; /* ===> Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If a scroll forward was requested, increment the page*/
    /* number and return to the previous process.*/
    /* If no Next pages display error.*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is pf8) /* ===> Scroll forward requested*/
      if (AS0OW01.AS0OW-CURRENT-PAGE < AS0OW01.AS0OW-MAX-PAGE)
        AS0OW01.AS0OW-CURRENT-PAGE = AS0OW01.AS0OW-CURRENT-PAGE + 1;
      else
        AS0OM001.XXXPRCNM = "AS0O-1600";
        converseLib.validationFailed(3); /* no scroll forward*/
      end
      return; /* ===> Return to previous process*/
    end
    ;
    ;
  end
  ;
  if (converseVar.validationMsgNum > 0) /* ===> errors have occurred*/
    return; /* ===> return to previous process*/
  end
  ;
  if (converseVar.eventKey is pf13) /* ===> Add Percents Code*/
    if (AS0OW-SELECT-MADE == "Y")
      AS0OM001.XXXPRCNM = "AS0O-1600";
      converseLib.validationFailed(135); /* no adds allowed*/
      return; /* ===> Return to previous process*/
    end
    AS0OW-SELECT-MADE = "N";
    move "N" to AS0OW01.AS0OW-SELECT[1] for all; /* Erase Any Selections Made*/
    AS0OW01.AS0OW-CURR-MAP = 2; /* Current Map*/
    AS0OW01.AS0OW-PREV-MAP = 1; /* Current Map*/
    set AS0OW03 empty;
    return; /* ===> Return to previous process*/
  end
  ;
  if (converseVar.validationMsgNum > 0) /* ===> errors have occurred*/
    return; /* ===> return to previous process*/
  end
  ;
  if (AS0OW01.AS0OW-SELECT-MADE == "Y") /* Selection Requested For Update*/
    AS0OW01.AS0OW-CURR-MAP = 3; /* Current Map*/
    AS0OW01.AS0OW-PREV-MAP = 1; /* Current Map*/
    return; /* ===> Return to previous process*/
  end
  ;
end // end AS0O-1600

// ** Add pcnts Code   - Map 2 **
Function AS0O-2000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map 2.  Processing*/
   /* always returns to the top of AS0O-0000 and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AS0O-2200(); /* Format and display the map*/
  ;
  AS0O-2300(); /* Check attention identifier*/
  ;
  AS0O-2400(); /* Reset fields to normal intensity*/
  ;
  AS0O-2500(); /* Verify the entered data*/
  ;
  AS0O-2600(); /* Process valid input request*/
  ;
  ;
  ;
end // end AS0O-2000

// Display AS0OM002
Function AS0O-2200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    set AS0OM002 initial; /* Clear map output area*/
    AS0OM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    AS0O-2210(); /* Format the data on the page*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ASWREC.ASW-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ASWREC.ASW-MSG-NO);
      end /* Information message number*/
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* ===> No error message to display*/
    set AS0OM002 alarm; /* ===> Indicate sound alarm*/
  end
  ;
  ;
  converse AS0OM002 ;
  ;
end // end AS0O-2200

// Format Data on Map
Function AS0O-2210()
   /* FORMAT DATA ON SCREEN*/
   /* -------------------------------------------*/
   /* --             MOVE HEADER FIELDS        --*/
   /* -------------------------------------------*/
  ;
  AS0OM002.AS0OM-NEW-PCT-CODE = AS0OW03.AB-PRDCTN-GRP-ID;
  AS0OM002.AS0OM-NEW-SESN-CD = AS0OW03.XSECD;
  AS0OM002.AS0OM-NEW-SESN-YR = AS0OW03.XSNYR;
  AS0OM002.AS0OM-NEW-BEG-MO = AS0OW03.AS0OW-BEGIN-MO;
  AS0OM002.AS0OM-NEW-END-MO = AS0OW03.AS0OW-END-MO;
  ;
  ;
end // end AS0O-2210

// Check Attention Identifier
Function AS0O-2300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(0);
  AS1REC.AS1-MSG-NO = 0;
  ASWREC.ASW-MSG-NO = 0;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AS0OM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = AS0OM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AS0OM002.CAITEM; /* Application data*/
      ;
      XPAS-39999(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set AS0OM002.CATOAP cursor, modified, bold; /* Highlight*/
    AS0OM002.XXXPRCNM = "AS0O-2300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    ASWREC.ASW-PROCESS-NBR = "2300"; /* Process number*/
    AS0OM002.XXXPRCNM = "AS0O-2300"; /* Process name*/
    ;
    XPAS-39999(); /* Exit to another application*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf14) /* and PF13 was not pressed*/
    ;
    ASWREC.ASW-PROCESS-NBR = "2300"; /* Process number*/
    AS0OM002.XXXPRCNM = "AS0O-2300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AS0O-2300

// Reset Highlighted Fields
Function AS0O-2400()
   /* ------------------------------------------------------------*/
   /* RESET HIGHLIGHTED FIELDS*/
   /* ------------------------------------------------------------*/
   /*  */
   /* ------------------------------------------------------------*/
   /* Reset selection field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/
   /*  */
  set AS0OM002.AS0OM-NEW-PCT-CODE initialAttributes, cursor; /* Prd Pct Grp*/
  set AS0OM002.AS0OM-NEW-SESN-CD initialAttributes; /* Season Cd*/
  set AS0OM002.AS0OM-NEW-SESN-YR initialAttributes; /* Season Year*/
  ;
  set AS0OM002.AS0OM-NEW-BEG-MO initialAttributes; /* Begin Month*/
  set AS0OM002.AS0OM-NEW-END-MO initialAttributes; /* End Month*/
  ;
end // end AS0O-2400

// Edit Selection Data
Function AS0O-2500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0OM002.CAITEM > " ") /* Application data was entered*/
    ;
    set AS0OM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ASWREC.ASW-PROCESS-NBR = "2500"; /* Process number*/
    AS0OM002.XXXPRCNM = "AS0O-2500"; /* Process name*/
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* VERIFY THE ENTERED DATA*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AS0O-2510(); /* validate changes*/
  ;
  converseLib.clearScreen();
  
  ;
end // end AS0O-2500

// Validate Entered Data
Function AS0O-2510()
   /* ------------------------------------------------------------*/
   /* VERIFY THE SELECTION CRITERIA*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14)
    return;
  end
  ;
  AS0O-2511(); /* Need Dates*/
  ;
  if (AS0OM002.AS0OM-NEW-SESN-YR == "?")
    set AS0OM002.AS0OM-NEW-SESN-YR cursor, bold;
    converseLib.validationFailed(42); /* not a pop-up window*/
    AS0OM001.XXXPRCNM = "AS0O-2510";
  else
    AS0OW-SESN-VALID = "N";
    AS0O-2512(); /* verify sesn & yr*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* VALIDATE THAT SELECT CODE WITH SEASON COMB IS NOT USED*/
   /* ------------------------------------------------------------*/
  AS0OW03.AB-PRDCTN-GRP-ID = AS0OM002.AS0OM-NEW-PCT-CODE;
  ;
  if (AS0OW-SESN-VALID == "N")
    return;
  end
  ;
  AS0O-2513(); /* Select Set from VPRCPRT*/
  AS0O-2514(); /* Select Set from VPRCPRT*/
  AS0O-2515(); /* Select Set from VPRCPRT*/
  ;
  ;
  ;
  ;
   /* ****************** End of AS0O-1510 *************************/
end // end AS0O-2510

// Validate Need Dates
Function AS0O-2511()
   /* ------------------------------------------------------------*/
   /* VERIFY NEED DATES*/
   /* ------------------------------------------------------------*/
  if (AS0OM002.AS0OM-NEW-BEG-MO > 0
   && AS0OM002.AS0OM-NEW-END-MO == 0)
    AS0OW03.AS0OW-BEGIN-MO = AS0OM002.AS0OM-NEW-BEG-MO;
    return;
  end
  ;
  if (AS0OM002.AS0OM-NEW-BEG-MO == 0)
    converseLib.validationFailed(136); /* not a pop-up window*/
    set AS0OM002.AS0OM-NEW-BEG-MO cursor, bold;
    AS0OM001.XXXPRCNM = "AS0O-2511";
    return;
  end
  ;
  if (AS0OM002.AS0OM-NEW-END-MO < AS0OM002.AS0OM-NEW-BEG-MO)
    converseLib.validationFailed(137); /* not a pop-up window*/
    set AS0OM002.AS0OM-NEW-END-MO cursor, bold;
    ASWREC.ASW-PROCESS-NBR = "AS0O-2511";
    return;
  end
  ;
   /* *------------------------------------------------------**/
   /* *        COUNT MONTHS BETWEEN BEG AND END             -**/
   /* *------------------------------------------------------**/
  ;
  ASW-IDX1 = 0;
  ;
  move 0 to AS0OW03.AB-PRDCTN-PCT-MO[1] for all;
  ;
  AS0OW01.AS0OW-WORK-MO = AS0OM002.AS0OM-NEW-END-MO;
  ;
  while (AS0OW01.AS0OW-WORK-MO > AS0OM002.AS0OM-NEW-BEG-MO)
    ASW-IDX1 = ASW-IDX1 + 1;
    AS0OW01.AS0OW-WORK-MM = AS0OW01.AS0OW-WORK-MM - 1;
    if (AS0OW01.AS0OW-WORK-MM == 0)
      AS0OW01.AS0OW-WORK-MM = 1;
      AS0OW01.AS0OW-WORK-CCYY = AS0OW01.AS0OW-WORK-CCYY - 1;
    end
  end
  ;
  if (ASW-IDX1 > 8)
    converseLib.validationFailed(138); /* month range to much*/
    set AS0OM002.AS0OM-NEW-BEG-MO cursor, bold;
    set AS0OM002.AS0OM-NEW-END-MO bold;
    AS0OM001.XXXPRCNM = "AS0O-2511";
    return;
  end
  ;
  AS0OW03.AS0OW-BEGIN-MO = AS0OM002.AS0OM-NEW-BEG-MO;
  AS0OW03.AS0OW-END-MO = AS0OM002.AS0OM-NEW-END-MO;
  ;
   /* ****************** End of AS0O-2511 *************************/
end // end AS0O-2511

// Validate Seson Cd/Season Year
Function AS0O-2512()
   /* ------------------------------------------------------------*/
   /* VERIFY SESN & YR*/
   /* ------------------------------------------------------------*/
  ;
  if (AS0OM002.AS0OM-NEW-SESN-YR == 0)
    set AS0OM002.AS0OM-NEW-SESN-YR cursor, bold;
    AS0OM002.XXXPRCNM = "AS0O-2511";
    converseLib.validationFailed(26); /* not a valid season yr*/
  end
  ;
  if (AS0OM002.AS0OM-NEW-SESN-CD == "  ")
    set AS0OM002.AS0OM-NEW-SESN-CD cursor, bold;
    AS0OM002.XXXPRCNM = "AS0O-2511";
    converseLib.validationFailed(16); /* not a valid season cd*/
  end
  ;
  AS1REC.XSECD = AS0OM002.AS0OM-NEW-SESN-CD;
  ;
  XSASS-XSE(); /* perform 'pop-up window' processing*/
  if (AS1REC.AS1-VALID-XSE-FL == "0")
    AS0OM002.AS0OM-NEW-SESN-CD = AS1REC.XSECD;
  end
  ;
  AS1REC.AS1-XSN-CC-YY = AS0OM002.AS0OM-NEW-SESN-YR;
  ;
   /* -----------------------------------------------------------*/
   /* Check for Valid Season Year*/
   /* -----------------------------------------------------------*/
  ;
  if (AS1REC.AS1-XSN-CC-YY in YSNTBL.XSNYR)
    AS1REC.AS1-XSN-SESN-YR = AS1REC.AS1-XSN-YY;
    ;
     /* -----------------------------------------------------------*/
     /* Check for Valid Season-Year Combination*/
     /* -----------------------------------------------------------*/
    ;
    ASWREC.ASW-IDX5 = 1; /* SET SEARCH INDEX TO 1*/
    while (ASWREC.ASW-IDX5 != 9999
     && ASWREC.ASW-IDX5 != 0) /* end of search condition*/
      if (YSNTBL.XSNABRV[ASW-IDX5]
       == AS1REC.AS1-XSE-XSN
       && YSNTBL.XGPCD[ASW-IDX5] == "03"
       && YSNTBL.XDR-PROD-REG-CD[ASW-IDX5] == "01")
        ;
        ASWREC.ASW-IDX5 = 0; /* END seasrch*/
      else
        if (YSNTBL.XGPCD[ASW-IDX5] != "99")
          ASWREC.ASW-IDX5 = ASWREC.ASW-IDX5 + 1;
        else
          ASWREC.ASW-IDX5 = 9999; /* END OF TABLE*/
          set AS0OM002.AS0OM-NEW-SESN-CD cursor, bold;
          set AS0OM002.AS0OM-NEW-SESN-YR bold;
          converseLib.validationFailed(71);
          AS0OM002.XXXPRCNM = "AS0O-2511";
          return;
        end
      end
    end
    ;
  else
    set AS0OM002.AS0OM-NEW-SESN-CD cursor, bold;
    set AS0OM002.AS0OM-NEW-SESN-YR bold;
    converseLib.validationFailed(26);
    AS0OM002.XXXPRCNM = "AS0O-2511";
    return;
  end
  ;
  AS0OW-SESN-VALID = "Y";
  AS0OW03.XSECD = AS0OM002.AS0OM-NEW-SESN-CD;
  AS0OW03.XSNYR = AS0OM002.AS0OM-NEW-SESN-YR;
  ;
   /* ****************** End of AS0O-1510 *************************/
end // end AS0O-2512

// Select PRPCT CD For Verify
Function AS0O-2513()
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set VPRPCT01 empty; /* Reset rec work area*/
  ;
  VPRPCT01.AB-PRDCTN-GRP-ID = AS0OM002.AS0OM-NEW-PCT-CODE;
  VPRPCT01.XSECD = AS0OM002.AS0OM-NEW-SESN-CD;
  VPRPCT01.XSNYR = AS0OM002.AS0OM-NEW-SESN-YR;
  ;
   /* *===================================**/
   /* *  Select Set from DABUY.VPRPCT01  **/
   /* *===================================**/
  ;
  try
    call "IO6560" ("S1", SQLCA, VPRPCT01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0OM002.XXXPRCNM = "AS0O-2513"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET              ";
  TA1REC.TA1MAP = "AS0OM002"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRPCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
end // end AS0O-2513

// Fetch PRPCT CD/Verfify Exist.
Function AS0O-2514()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
   /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6560" ("N1", SQLCA, VPRPCT01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Return code normal*/
      AS0OW03.AB-PRDCTN-GRP-ID = AS0OM002.AS0OM-NEW-PCT-CODE;
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* data found*/
      set AS0OM002.AS0OM-NEW-PCT-CODE cursor, bold; /* Highlight field*/
      set AS0OM002.AS0OM-NEW-SESN-YR bold; /* Highlight field*/
      set AS0OM002.AS0OM-NEW-SESN-CD bold; /* Highlight field*/
      converseLib.validationFailed(139); /* Indicate error message*/
      AS0OM002.XXXPRCNM = "AS0O-2514"; /* Process number*/
      return; /* Exit to calling rtn*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0OM002.XXXPRCNM = "AS0O-2514"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VPRPCT01 ROW";
  TA1REC.TA1MAP = "AS0OM002"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRPCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0O-2514

// Close DABUY.VPRPCT01
Function AS0O-2515()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6560" ("C1", SQLCA, VPRPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AS0OM002.XXXPRCNM = "AS0O-2515"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AS0OM002"; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPTPCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AS0O-2515

// Process Request
Function AS0O-2600()
   /* ------------------------------------------------------------*/
   /*  */
   /* PROCESS VALID INPUT REQUESTS*/
   /*  */
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum > 0) /* ===> errors have occurred*/
    return; /* ===> return to previous process*/
  end
  ;
  ;
  if (converseVar.eventKey is pf14) /* ===> RTN Percents Code*/
    AS0OW-SELECT-MADE = "N";
    move "N" to AS0OW01.AS0OW-SELECT[1] for all; /* Erase Any Selections Made*/
    AS0OW01.AS0OW-CURR-MAP = 1; /* Current Map*/
    AS0OW01.AS0OW-PREV-MAP = 0; /* Current Map*/
    return; /* ===> Return to previous process*/
  end
  ;
  ;
  ASW-IDX1 = 1;
  ;
  AS0OW01.AS0OW-WORK-MO = AS0OW03.AS0OW-BEGIN-MO;
  AS0OW03.AB-PRDCTN-PCT-MO[ASW-IDX1] = AS0OW03.AS0OW-BEGIN-MO;
  ;
  while (ASW-IDX1 <= 7)
    ASW-IDX1 = ASW-IDX1 + 1;
    AS0OW01.AS0OW-WORK-MM = AS0OW01.AS0OW-WORK-MM + 1;
    if (AS0OW01.AS0OW-WORK-MM == 13)
      AS0OW01.AS0OW-WORK-MM = 1;
      AS0OW01.AS0OW-WORK-CCYY = AS0OW01.AS0OW-WORK-CCYY + 1;
    end
    if (AS0OW01.AS0OW-WORK-MO > AS0OW03.AS0OW-END-MO
     && AS0OW03.AS0OW-END-MO > 0)
      ASW-IDX1 = 99;
    else
      AS0OW03.AB-PRDCTN-PCT-MO[ASW-IDX1] = AS0OW01.AS0OW-WORK-MO;
    end
  end
  ;
  ;
  ;
  AS0OW01.AS0OW-CURR-MAP = 3; /* Current Map*/
  AS0OW01.AS0OW-PREV-MAP = 2; /* Current Map*/
  ;
end // end AS0O-2600

// ** Pcnts Code Maint - Map 3 **
Function AS0O-3000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map 3.  Processing*/
   /* always returns to the top of AS0O-0000 and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AS0O-3100(); /* OBTAIN DATA TO DISPLAY*/
  ;
  AS0O-3200(); /* Format and display the map*/
  ;
  AS0O-3300(); /* Check attention identifier*/
  ;
  AS0O-3400(); /* Reset fields to normal intensity*/
  ;
  AS0O-3500(); /* Verify the entered data*/
  ;
  AS0O-3600(); /* Process valid input request*/
  ;
  ;
  ;
end // end AS0O-3000

// Obtain Data to Display
Function AS0O-3100()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN THE DATA TO DISPLAY*/
   /*  */
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Move data from MAP1 save area to work area*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0 /* if there is an error ... skip process*/
   || AS0OW01.AS0OW-VALID-UPD-FL == "Y")
    return;
  end
  ;
  if (AS0OW01.AS0OW-PREV-MAP == 2)
    move 0 to AS0OW03.AB-PRDCTN-PCT[1] for all;
    AS0OW01.AS0OW-TOTAL-PCT = 0;
    return;
  end
  ;
  set AS0OW03 empty; /* Initailize Output Area*/
  ;
  AS0OW03.XSECD = AS0OW02.XSECD[AS0OW-CURR-CODE];
  AS0OW03.XSNYR = AS0OW02.XSNYR[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-GRP-ID = AS0OW02.AB-PRDCTN-GRP-ID[AS0OW-CURR-CODE];
  ;
  AS0OW03.AB-PRDCTN-PCT-MO[1] = AS0OW02.AS0OW-PCT-MO1[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT-MO[2] = AS0OW02.AS0OW-PCT-MO2[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT-MO[3] = AS0OW02.AS0OW-PCT-MO3[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT-MO[4] = AS0OW02.AS0OW-PCT-MO4[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT-MO[5] = AS0OW02.AS0OW-PCT-MO5[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT-MO[6] = AS0OW02.AS0OW-PCT-MO6[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT-MO[7] = AS0OW02.AS0OW-PCT-MO7[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT-MO[8] = AS0OW02.AS0OW-PCT-MO8[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT-MO[9] = AS0OW02.AS0OW-PCT-MO9[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT-MO[10] = AS0OW02.AS0OW-PCT-MO10[AS0OW-CURR-CODE];
  ;
  AS0OW03.AB-PRDCTN-PCT[1] = AS0OW02.AS0OW-PCT1[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT[2] = AS0OW02.AS0OW-PCT2[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT[3] = AS0OW02.AS0OW-PCT3[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT[4] = AS0OW02.AS0OW-PCT4[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT[5] = AS0OW02.AS0OW-PCT5[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT[6] = AS0OW02.AS0OW-PCT6[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT[7] = AS0OW02.AS0OW-PCT7[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT[8] = AS0OW02.AS0OW-PCT8[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT[9] = AS0OW02.AS0OW-PCT9[AS0OW-CURR-CODE];
  AS0OW03.AB-PRDCTN-PCT[10] = AS0OW02.AS0OW-PCT10[AS0OW-CURR-CODE];
  ;
  ;
  ASWREC.ASW-IDX1 = 1;
  AS0OW01.AS0OW-TOTAL-PCT = 0;
  ;
  while (ASWREC.ASW-IDX1 <= 8)
    AS0OW01.AS0OW-TOTAL-PCT = AS0OW01.AS0OW-TOTAL-PCT + AS0OW03.AB-PRDCTN-PCT[ASW-IDX1];
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
  end
  ;
  ;
   /* ********************** End of AS0O-3100 ********************/
end // end AS0O-3100

// Display AS0OM003
Function AS0O-3200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No error message to display*/
    set AS0OM003 initial; /* Clear map output area*/
    AS0OM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    AS0O-3210(); /* Format Data On Page (UPDATE)*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ASWREC.ASW-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ASWREC.ASW-MSG-NO);
      end /* Information message number*/
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* ===> No error message to display*/
    set AS0OM003 alarm; /* ===> Indicate sound alarm*/
  end
  ;
  converse AS0OM003 ;
  ;
end // end AS0O-3200

// Format Data On Map
Function AS0O-3210()
   /* FORMAT DATA ON SCREEN*/
   /* -------------------------------------------*/
   /* -- MOVE DATA TO MAP                      --*/
   /* -------------------------------------------*/
  ;
  AS0OM003.AS0OM-PRD-GRP-SEL = AS0OW03.AB-PRDCTN-GRP-ID;
  AS0OM003.AS0OM-SESN-CD-SEL = AS0OW03.XSECD;
  AS0OM003.AS0OM-SESN-YR-SEL = AS0OW03.XSNYR;
  ;
  ASWREC.ASW-IDX1 = 1;
  ;
  while (ASWREC.ASW-IDX1 <= 8)
    if (AS0OW03.AB-PRDCTN-PCT-MO[ASW-IDX1] > 0)
      AS0OM003.AS0OM-MAINT-MO[ASW-IDX1] = AS0OW03.AB-PRDCTN-PCT-MO[ASW-IDX1];
      AS0OM003.AS0OM-MAINT-PCT[ASW-IDX1] = AS0OW03.AB-PRDCTN-PCT[ASW-IDX1];
    else
      set AS0OM003.AS0OM-MAINT-MO[ASW-IDX1] invisible, protect;
      set AS0OM003.AS0OM-MAINT-PCT[ASW-IDX1] invisible, protect;
    end
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
  end
  ;
  AS0OM003.AS0OM-TOTAL-PCT = AS0OW01.AS0OW-TOTAL-PCT;
  ;
end // end AS0O-3210

// Check Attention Id
Function AS0O-3300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(0);
  AS1REC.AS1-MSG-NO = 0;
  ASWREC.ASW-MSG-NO = 0;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (AS0OW-PREV-MAP == 2)
      move 0 to AS0OW03.AB-PRDCTN-PCT-MO[1] for all;
      move 0 to AS0OW03.AB-PRDCTN-PCT[1] for all;
      AS0OW-CURR-MAP = 2;
      AS0OW-PREV-MAP = 1;
      ASWREC.ASW-MSG-NO = 142;
    else
      set AS0OW03 empty;
      AS0OW-CURR-MAP = 1;
      AS0OW-PREV-MAP = 0;
      AS0OW01.AS0OW-VALID-UPD-FL = "N";
      ASWREC.ASW-MSG-NO = 142;
    end
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AS0OM003.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = AS0OM003.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AS0OM003.CAITEM; /* Application data*/
      ;
      XPAS-39999(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set AS0OM003.CATOAP cursor, modified, bold; /* Highlight*/
    AS0OM003.XXXPRCNM = "AS0O-3300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    set AS0OW03 empty;
    AS0OW-CURR-MAP = 1;
    AS0OW-PREV-MAP = 0;
  /* MOVE 'N' TO AS0OW01.AS0OW-VALID-UPD-FL;*/
  /* MOVE 142 TO ASWREC.ASW-MSG-NO;*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    ASWREC.ASW-PROCESS-NBR = "1300"; /* Process number*/
    AS0OM003.XXXPRCNM = "AS0O-3300"; /* Process name*/
    ;
    XPAS-39999(); /* Exit to another application*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    ASWREC.ASW-PROCESS-NBR = "3300"; /* Process number*/
    AS0OM003.XXXPRCNM = "AS0O-3300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AS0O-3300

// Reset Highlighted Fields
Function AS0O-3400()
   /* ------------------------------------------------------------*/
   /* RESET HIGHLIGHTED FIELDS*/
   /* ------------------------------------------------------------*/
   /*  */
   /* ------------------------------------------------------------*/
   /* Reset selection field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/
   /*  */
  set AS0OM003.AS0OM-PRD-GRP-SEL initialAttributes; /* Prd Pct Grp*/
  set AS0OM003.AS0OM-SESN-CD-SEL initialAttributes; /* Season Cd*/
  set AS0OM003.AS0OM-SESN-YR-SEL initialAttributes; /* Season Year*/
  ;
  ASW-IDX1 = 1;
  while (ASW-IDX1 <= 8)
    set AS0OM003.AS0OM-MAINT-PCT initialAttributes; /* Select Field*/
    ASW-IDX1 = ASW-IDX1 + 1;
  end
   /*  */
end // end AS0O-3400

// Edit Maintaineance Data
Function AS0O-3500()
   /* Verfiry Total Pcts Add Up To 100.*/
  ;
  ASWREC.ASW-IDX1 = 1;
  AS0OW01.AS0OW-TOTAL-PCT = 0;
  AS0OW01.AS0OW-VALID-UPD-FL = "N";
  ;
  while (ASWREC.ASW-IDX1 <= 8)
    AS0OW01.AS0OW-TOTAL-PCT = AS0OW01.AS0OW-TOTAL-PCT + AS0OM003.AS0OM-MAINT-PCT[ASW-IDX1];
    if (AS0OM003.AS0OM-MAINT-PCT[ASW-IDX1]
     != AS0OW03.AB-PRDCTN-PCT[ASW-IDX1]
     && AS0OW01.AS0OW-PREV-MAP == 1)
      AS0OW01.AS0OW-VALID-UPD-FL = "Y";
    end
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
  end
  ;
  AS0OM003.AS0OM-TOTAL-PCT = AS0OW01.AS0OW-TOTAL-PCT;
  ;
  if (AS0OW01.AS0OW-TOTAL-PCT != 100.0)
    set AS0OM003.AS0OM-TOTAL-PCT bold;
    converseLib.validationFailed(140);
    AS0OM001.XXXPRCNM = "AS0O-3500";
    return;
  end
  ;
  ;
end // end AS0O-3500

// Process input request
Function AS0O-3600()
   /* ------------------------------------------------------------*/
   /*  */
   /* PROCESS VALID INPUT REQUESTS*/
   /*  */
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum > 0) /* ===> errors have occurred*/
    return; /* ===> return to previous process*/
  end
  ;
   /* ----------------------------------------------------------------*/
   /* Note: We Will Not Require Confirmation On Newly Created rows   ;*/
   /* ----------------------------------------------------------------*/
  ;
  if (AS0OW01.AS0OW-VALID-UPD-FL == "Y"
   && AS0OW01.AS0OW-CONFIRM-UPD-FL != "Y"
   && AS0OW01.AS0OW-PREV-MAP == 1)
    AS0OW-CONFIRM-UPD-FL = "Y"; /* GET A CONFIRMATION*/
    converseLib.validationFailed(89);
    return;
  end
  ;
  if (AS0OW01.AS0OW-VALID-UPD-FL == "Y"
   && AS0OW01.AS0OW-CONFIRM-UPD-FL == "Y"
   && AS0OW01.AS0OW-PREV-MAP == 1)
    ;
    AS0OW01.AS0OW-VALID-UPD-FL = "N";
    AS0OW01.AS0OW-CONFIRM-UPD-FL = "N";
    AS0OW01.AS0OW-UPDATES-MADE = "N";
    ;
    /* Update Process*/
    ;
    ASWREC.ASW-IDX1 = 1;
    while (ASW-IDX1 <= 8)
      AS0O-3610(); /* make changes*/
      ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
    end
    AS0O-3620(); /* TSQ Update*/
    if (converseVar.validationMsgNum > 0)
      AS0OW01.AS0OW-VALID-UPD-FL = "N";
      exit stack; /* EXIT TO REDISPAY MAP WITH ERRORS*/
    end
    if (AS0OW01.AS0OW-UPDATES-MADE == "Y")
      ASWREC.ASW-MSG-NO = 45;
    end
    ;
    return;
  end
  ;
  if (AS0OW01.AS0OW-PREV-MAP == 2)
    AS0O-3630();
  end
  ;
  ;
end // end AS0O-3600

// Process Print Plan Updates
Function AS0O-3610()
   /* *******  Update Rows *************/
  ;
  if (AS0OM003.AS0OM-MAINT-PCT[ASW-IDX1] != AS0OW03.AB-PRDCTN-PCT[ASW-IDX1])
    AS0OW03.AB-PRDCTN-PCT[ASW-IDX1] = AS0OM003.AS0OM-MAINT-PCT[ASW-IDX1];
    AS0O-3611(); /* select Row*/
    AS0O-3612(); /* Perform Update*/
  end
  ;
  if (AS0OW01.AS0OW-UPDATES-MADE == "Y")
    ASWREC.ASW-MSG-NO = 45;
  end
  ;
  AS0OW01.AS0OW-CURR-MAP = 1;
  AS0OW01.AS0OW-PREV-MAP = 0;
  ;
end // end AS0O-3610

// Select Row For Upd(VPRPCT01)
Function AS0O-3611()
   /* call IO6560 to get Prin Plan Data*/
  ;
   /* ------------------------------------------------------------*/
   /* Select Unique Row with Group Id, Season Cd, Season Yr, and*/
   /* Production Month not available, return an error message to*/
   /* the user.*/
   /* ------------------------------------------------------------*/
  ;
  set VPRPCT01 empty;
  ;
  VPRPCT01.XSECD = AS0OW03.XSECD;
  VPRPCT01.XSNYR = AS0OW03.XSNYR;
  VPRPCT01.AB-PRDCTN-GRP-ID = AS0OW03.AB-PRDCTN-GRP-ID;
  VPRPCT01.AB-PRDCTN-PCT-MO = AS0OW03.AB-PRDCTN-PCT-MO[ASW-IDX1];
  ;
  try
    call "IO6560" ("S ", SQLCA, VPRPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0OM001.XXXPRCNM = "AS0O-3611"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
  TA1REC.TA1LOC = "SELECT NXT DETAIL DATA   ";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRPCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0O-3611

// Update Row (DABUY.VPRPCT01)
Function AS0O-3612()
   /* Call IO6560 to Update Production Percents*/
  ;
   /* ------------------------------------------------------------*/
   /* Update Producion Percents*/
   /* ------------------------------------------------------------*/
  ;
  VPRPCT01.AB-PRDCTN-PCT = AS0OW03.AB-PRDCTN-PCT[ASW-IDX1];
  ;
  XX0XS01();
  ;
  VPRPCT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPRPCT01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VPRPCT01.XZZ6CHR = AS1REC.XXXUSRID;
  ;
  try
    call "IO6560" ("U ", SQLCA, VPRPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AS0OW01.AS0OW-UPDATES-MADE = "Y";
    return; /* Return to calling process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0OM001.XXXPRCNM = "AS0O-3612"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
  TA1REC.TA1LOC = "UPDATE PRODUCTION PERCENT";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRPCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0O-3612

// Update TSQ Page
Function AS0O-3620()
   /* ------------------------------------------------------------*/
   /* Update TSQ page*/
   /* ------------------------------------------------------------*/
  ;
  AS0O-S004();
  ;
  AS0OW02.AS0OW-TSQ-LENGTH = AS0OW01.AS0OW-TSL; /* temp tsq length*/
  TA5REC.TA5APPID = "AS0O"; /* Application identification*/
  TA5REC.TA5TSQIX = AS0OW01.AS0OW-CURRENT-PAGE; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (AS0OW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
    TA1REC.TA1LOC = "UPDATE PAGE IN TSQ STORAGE      ";
    TA1REC.TA1MAP = "AS0OM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AS0OM001.XXXPRCNM = "AS0O-3620"; /* prcess name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AS0O-3620

// Process Inserts
Function AS0O-3630()
   /* *******Look for Rows *************/
  ;
  ASW-IDX1 = 1;
  ;
  AS0OW01.AS0OW-INSERTS-MADE = "N";
  ;
  while (ASW-IDX1 <= 8)
    ;
    if (AS0OM003.AS0OM-MAINT-MO[ASW-IDX1] > 0)
      AS0OW03.AB-PRDCTN-PCT[ASW-IDX1] = AS0OM003.AS0OM-MAINT-PCT[ASW-IDX1];
      AS0O-3631(); /* Insert Row*/
    end
    ;
    ASW-IDX1 = ASW-IDX1 + 1;
    ;
  end
  ;
  if (AS0OW01.AS0OW-INSERTS-MADE == "Y")
    AS0OW-CURR-MAP = 2;
    AS0OW-PREV-MAP = 0;
    ASWREC.ASW-MSG-NO = 141;
  end
  ;
end // end AS0O-3630

// Insert Row (DABUY.VPRPCT01)
Function AS0O-3631()
   /* Call IO6560 to Update Production Percents*/
  ;
   /* ------------------------------------------------------------*/
   /* Insert Producion Percents*/
   /* ------------------------------------------------------------*/
  ;
  AS0O-S005();
  ;
  XX0XS01();
  ;
  VPRPCT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPRPCT01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO6560" ("A ", SQLCA, VPRPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AS0OW01.AS0OW-INSERTS-MADE = "Y";
    return; /* Return to calling process*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0OM001.XXXPRCNM = "AS0O-3612"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0O"; /* Error location*/
  TA1REC.TA1LOC = "INSERT PRODUCTION PERCENT";
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRPCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  converseLib.validationFailed(10); /* Indicate system error*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0O-3631

// Move Selection Data
Function AS0O-S001()
  ;
    /* Move Selection Data to VPRPCT01*/
  ;
  if (AS0OW01.XSECD > " ")
    VPRPCT01.XSECD = AS0OW01.XSECD; /* Move Season Code*/
  else
    VPRPCT01.XSECD = "*"; /* Wildcard Season Code*/
  end
  ;
  if (AS0OW01.XSNYR > 0)
    VPRPCT01.XSNYR = AS0OW01.XSNYR; /* Move Season Year*/
  else
    VPRPCT01.XSNYR = -1; /* Wildcard Season Year*/
  end
  ;
  if (AS0OW01.AB-PRDCTN-GRP-ID > " ")
    VPRPCT01.AB-PRDCTN-GRP-ID = AS0OW01.AB-PRDCTN-GRP-ID;
  else
    VPRPCT01.AB-PRDCTN-GRP-ID = "*"; /* Wildcard Prd Grp Cd*/
  end
  ;
  ;
end // end AS0O-S001

// Move Months/Pcnt To Temp Area
Function AS0O-S002()
   /* ---------------------------------------------------------------------*/
   /* -     Move Month Data                                               -*/
   /* ---------------------------------------------------------------------*/
  ;
  if (AS0OW-PCT-MO1[AS0OW-PCT-IDX] == 0)
    AS0OW02.AS0OW-PCT-MO1[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
    AS0OW02.AS0OW-PCT1[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT;
AS0OW02.AS0OW-BEGIN-MO[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
  else
    if (AS0OW-PCT-MO2[AS0OW-PCT-IDX] == 0)
      AS0OW02.AS0OW-PCT-MO2[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
      AS0OW02.AS0OW-PCT2[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT;
    else
      if (AS0OW-PCT-MO3[AS0OW-PCT-IDX] == 0)
        AS0OW02.AS0OW-PCT-MO3[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
        AS0OW02.AS0OW-PCT3[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT;
      else
        if (AS0OW-PCT-MO4[AS0OW-PCT-IDX] == 0)
          AS0OW02.AS0OW-PCT-MO4[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
          AS0OW02.AS0OW-PCT4[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT;
        else
          if (AS0OW-PCT-MO5[AS0OW-PCT-IDX] == 0)
            AS0OW02.AS0OW-PCT-MO5[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
            AS0OW02.AS0OW-PCT5[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT;
          else
            if (AS0OW-PCT-MO6[AS0OW-PCT-IDX] == 0)
              AS0OW02.AS0OW-PCT-MO6[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
              AS0OW02.AS0OW-PCT6[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT;
            else
              if (AS0OW-PCT-MO7[AS0OW-PCT-IDX] == 0)
                AS0OW02.AS0OW-PCT-MO7[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
                AS0OW02.AS0OW-PCT7[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT;
              else
                if (AS0OW-PCT-MO8[AS0OW-PCT-IDX] == 0)
                  AS0OW02.AS0OW-PCT-MO8[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
                  AS0OW02.AS0OW-PCT8[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT;
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  AS0OW02.AS0OW-END-MO[AS0OW-PCT-IDX] = VPRPCT01.AB-PRDCTN-PCT-MO;
  ;
end // end AS0O-S002

// Move Data To Map
Function AS0O-S003()
   /* -----------------------------------------------------------------*/
   /* Move data from temp storage area to map*/
   /* -----------------------------------------------------------------*/
  ;
  ASWREC.ASW-IDX1 = 1;
  while (ASW-IDX1 <= 10)
    if (AS0OW02.AB-PRDCTN-GRP-ID[ASW-IDX1] > " ") /* Data Row Retrieved*/
      AS0OM001.AS0OM-PRD-GRP[ASW-IDX1] = AS0OW02.AB-PRDCTN-GRP-ID[ASW-IDX1];
      AS0OM001.AS0OM-SESN-CD[ASW-IDX1] = AS0OW02.XSECD[ASW-IDX1];
      AS0OM001.AS0OM-SESN-YR[ASW-IDX1] = AS0OW02.XSNYR[ASW-IDX1];
      AS0OM001.AS0OM-BEG-MO[ASW-IDX1] = AS0OW02.AS0OW-BEGIN-MO[ASW-IDX1];
      AS0OM001.AS0OM-END-MO[ASW-IDX1] = AS0OW02.AS0OW-END-MO[ASW-IDX1];
    else
      set AS0OM001.AS0OM-SELECT[ASW-IDX1] invisible, protect;
      set AS0OM001.AS0OM-PRD-GRP[ASW-IDX1] invisible, protect;
      set AS0OM001.AS0OM-SESN-CD[ASW-IDX1] invisible, protect;
      set AS0OM001.AS0OM-SESN-YR[ASW-IDX1] invisible, protect;
      set AS0OM001.AS0OM-BEG-MO[ASW-IDX1] invisible, protect;
      set AS0OM001.AS0OM-END-MO[ASW-IDX1] invisible, protect;
    end
    ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
  end
  ;
end // end AS0O-S003

// Move Data to TSQ Area
Function AS0O-S004()
  ;
  AS0OW02.AS0OW-PCT1[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[1];
  AS0OW02.AS0OW-PCT2[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[2];
  AS0OW02.AS0OW-PCT3[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[3];
  AS0OW02.AS0OW-PCT4[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[4];
  AS0OW02.AS0OW-PCT5[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[5];
  AS0OW02.AS0OW-PCT6[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[6];
  AS0OW02.AS0OW-PCT7[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[7];
  AS0OW02.AS0OW-PCT8[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[8];
  AS0OW02.AS0OW-PCT9[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[9];
  AS0OW02.AS0OW-PCT10[AS0OW-CURR-CODE] = AS0OW03.AB-PRDCTN-PCT[10];
  ;
   /* ********************** End of AS0O-S004 ********************/
end // end AS0O-S004

// Move Insert Rows
Function AS0O-S005()
   /* ------------------------------------------------------------*/
   /* move insert data*/
   /* ------------------------------------------------------------*/
  ;
  set VPRPCT01 empty;
  ;
  VPRPCT01.XSECD = AS0OW03.XSECD;
  ;
  VPRPCT01.XSNYR = AS0OW03.XSNYR;
  ;
  VPRPCT01.AB-PRDCTN-GRP-ID = AS0OW03.AB-PRDCTN-GRP-ID;
  ;
  VPRPCT01.AB-PRDCTN-PCT-MO = AS0OW03.AB-PRDCTN-PCT-MO[ASW-IDX1];
  ;
  VPRPCT01.AB-PRDCTN-PCT = AS0OW03.AB-PRDCTN-PCT[ASW-IDX1];
  ;
  VPRPCT01.XZZ6CHR = AS1REC.XXXUSRID;
  ;
end // end AS0O-S005

//*** RECORD=AS0OW01 ****
// ************************************************************
// This record holds the data for creating the maps for AS0O.
// 
// DATE CREATED:        10-05-92
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 10-05-92  KJ         INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record AS0OW01 type basicRecord
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
  10 AB-PRDCTN-GRP-ID AB-PRDCTN-GRP-ID ; 
  10 AS1-XSN-YY AS1-XSN-YY ; 
  10 AS0OW-NEW-KEY AS0OW-NEW-KEY ; 
  10 AS0OW-SCREEN-DISPLAYED AS0OW-SCREEN-DISPLAYED ; 
  10 AS0OW-END-OF-CSR AS0OW-END-OF-CSR ; 
  10 AS0OW-MAX-PAGE AS0OW-MAX-PAGE ; 
  10 AS0OW-CURRENT-PAGE AS0OW-CURRENT-PAGE ; 
  10 AS0OW-LAST-PAGE AS0OW-LAST-PAGE ; 
  10 AS0OW-TSL AS0OW-TSL ; 
  10 AS0OW-VALID-UPD-FL AS0OW-VALID-UPD-FL ; 
  10 AS0OW-CONFIRM-UPD-FL AS0OW-CONFIRM-UPD-FL ; 
  10 AS0OW-UPDATE-ROW AS0OW-UPDATE-ROW ; 
  10 AS0OW-UPDATES-MADE AS0OW-UPDATES-MADE ; 
  10 AS0OW-INSERTS-MADE AS0OW-INSERTS-MADE ; 
  10 AS0OW-SELECT-MADE AS0OW-SELECT-MADE ; 
  10 AS0OW-SELECT AS0OW-SELECT [10] ; 
  10 AS0OW-CURR-MAP AS0OW-CURR-MAP ; 
  10 AS0OW-PREV-MAP AS0OW-PREV-MAP ; 
  10 AS0OW-WORK-MO AS0OW-WORK-MO ; 
    15 AS0OW-WORK-CCYY AS0OW-WORK-CCYY ; 
    15 AS0OW-WORK-MM AS0OW-WORK-MM ; 
  10 AS0OW-SESN-VALID AS0OW-SESN-VALID ; 
  10 AS0OW-CURR-CODE AS0OW-CURR-CODE ; 
  10 AS0OW-TOTAL-PCT AS0OW-TOTAL-PCT ; 
end // end AS0OW01

//*** RECORD=AS0OW02 ****
// ************************************************************
// This record holds Print Plan Data for AS0O:
// 
// DATE CREATED:        10-05-92
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 10-05-92  KJ         INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record AS0OW02 type basicRecord
  5 * char(856) ; 
    10 AS0OW-TSQ-LENGTH AS0OW-TSQ-LENGTH ; 
    10 AS0OW-TSQ-MAX AS0OW-TSQ-MAX ; 
    10 * char(85) [10] ; 
      15 XSECD XSECD ; 
      15 XSNYR XSNYR ; 
      15 AB-PRDCTN-GRP-ID AB-PRDCTN-GRP-ID ; 
      15 AS0OW-BEGIN-MO AS0OW-BEGIN-MO ; 
      15 AS0OW-END-MO AS0OW-END-MO ; 
      15 AS0OW-PCT-MO1 AS0OW-PCT-MO1 ; 
      15 AS0OW-PCT-MO2 AS0OW-PCT-MO2 ; 
      15 AS0OW-PCT-MO3 AS0OW-PCT-MO3 ; 
      15 AS0OW-PCT-MO4 AS0OW-PCT-MO4 ; 
      15 AS0OW-PCT-MO5 AS0OW-PCT-MO5 ; 
      15 AS0OW-PCT-MO6 AS0OW-PCT-MO6 ; 
      15 AS0OW-PCT-MO7 AS0OW-PCT-MO7 ; 
      15 AS0OW-PCT-MO8 AS0OW-PCT-MO8 ; 
      15 AS0OW-PCT-MO9 AS0OW-PCT-MO9 ; 
      15 AS0OW-PCT-MO10 AS0OW-PCT-MO10 ; 
      15 AS0OW-PCT1 AS0OW-PCT1 ; 
      15 AS0OW-PCT2 AS0OW-PCT2 ; 
      15 AS0OW-PCT3 AS0OW-PCT3 ; 
      15 AS0OW-PCT4 AS0OW-PCT4 ; 
      15 AS0OW-PCT5 AS0OW-PCT5 ; 
      15 AS0OW-PCT6 AS0OW-PCT6 ; 
      15 AS0OW-PCT7 AS0OW-PCT7 ; 
      15 AS0OW-PCT8 AS0OW-PCT8 ; 
      15 AS0OW-PCT9 AS0OW-PCT9 ; 
      15 AS0OW-PCT10 AS0OW-PCT10 ; 
end // end AS0OW02

//*** RECORD=AS0OW03 ****
// ************************************************************
// This record holds Print Plan Data for AS0O:
// 
// DATE CREATED:        10-05-92
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 10-05-92  KJ         INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record AS0OW03 type basicRecord
  5 XSECD XSECD ; 
  5 XSNYR XSNYR ; 
  5 AB-PRDCTN-GRP-ID AB-PRDCTN-GRP-ID ; 
  5 AS0OW-BEGIN-MO AS0OW-BEGIN-MO ; 
  5 AS0OW-END-MO AS0OW-END-MO ; 
  5 AB-PRDCTN-PCT-MO AB-PRDCTN-PCT-MO [10] ; 
  5 AB-PRDCTN-PCT AB-PRDCTN-PCT [10] ; 
end // end AS0OW03

//*** RECORD=AS0OW04 ****
// ************************************************************
// This record holds Factory data for AS0O.
// 
// DATE CREATED:        10-05-92
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 10-05-92  KJ         INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record AS0OW04 type basicRecord
  10 AS0OW-CURR-PCT-CD AS0OW-CURR-PCT-CD ; 
  10 AS0OW-PCT-IDX AS0OW-PCT-IDX ; 
  10 AS0OW-MO-IDX AS0OW-MO-IDX ; 
  10 AS0OW-PCT-TOTAL AS0OW-PCT-TOTAL [12] ; 
  10 AS0OW-DATA-FOUND AS0OW-DATA-FOUND ; 
end // end AS0OW04

// Begin Month
DataItem AS0OW-BEGIN-MO int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CONFIRM Update Flag
DataItem AS0OW-CONFIRM-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current Pct Cd index
DataItem AS0OW-PCT-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT POSITION SELECTED CODE
DataItem AS0OW-CURR-CODE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current Map
DataItem AS0OW-CURR-MAP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current Pct Code
DataItem AS0OW-CURR-PCT-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page Displayed
DataItem AS0OW-CURRENT-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Found Ind.
DataItem AS0OW-DATA-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ending Month
DataItem AS0OW-END-MO int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// End of Csr
DataItem AS0OW-END-OF-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Indicate Row To Update
DataItem AS0OW-INSERTS-MADE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last Page Fetched from TSQ
DataItem AS0OW-LAST-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Maximum Pages to Display
DataItem AS0OW-MAX-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current Month index
DataItem AS0OW-MO-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New Selection Key Flag
DataItem AS0OW-NEW-KEY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO1 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO10 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO2 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO3 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO4 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO5 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO6 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO7 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO8 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT_MO
DataItem AS0OW-PCT-MO9 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL FACTORY ARRAY
DataItem AS0OW-PCT-TOTAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT1 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT10 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT2 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT3 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT4 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT5 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT6 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT7 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT8 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT
DataItem AS0OW-PCT9 decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Prev Map
DataItem AS0OW-PREV-MAP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen Displayed
DataItem AS0OW-SCREEN-DISPLAYED smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicate Row that was Selected
DataItem AS0OW-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Indicate Row has been Selected
DataItem AS0OW-SELECT-MADE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season Valid Ind
DataItem AS0OW-SESN-VALID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AB_PRDCTN_PCT (total map 3)
DataItem AS0OW-TOTAL-PCT decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temp Storage Length
DataItem AS0OW-TSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ LENGTH
DataItem AS0OW-TSQ-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAX LOADED INTO ARRAY
DataItem AS0OW-TSQ-MAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicate Row To Update
DataItem AS0OW-UPDATE-ROW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Indicate Row To Update
DataItem AS0OW-UPDATES-MADE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid Update Flag
DataItem AS0OW-VALID-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work CCYY
DataItem AS0OW-WORK-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Month
DataItem AS0OW-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work Month
DataItem AS0OW-WORK-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

