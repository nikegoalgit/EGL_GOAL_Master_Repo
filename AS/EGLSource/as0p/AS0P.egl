package as0p;

import ab.common.*;
import as1.common.AS1REC;
import as1.common.ASWREC;
import corpcom2.XX0XW02;
import corpcom3.XPAS-00000;
import corpcom3.XPAS-39999;
import corpcom3.XPAS-51200;
import corpcom3.XPTA0P;
import corpcom3.XSASS-XOW;
import corpcom3.XSASS-XSE;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XOWTBL;
import corpx1.XSETBL;
import corpx2.XOWCD;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpy2.YSNTBL;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import pg.common.PG1REC;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=AS0P ****
// ************************************************************
// *                                                          *
// * CONTROL   DATE   USERID  COMMENTS                        *
// * -------  ------  ------  --------------------------------*
// * AF9999   090393  Tdodso  4.1 conversion                  *
// * prtpl    11--94  kj      season validation               *
// *                                                          *
// ************************************************************
// *********************
Program AS0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AS0PW00 AS0PW00; // record
  AS0PW01 AS0PW01; // record
  AS0PW02 AS0PW02; // record
  AS1REC AS1REC; // record
  ASWREC ASWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOWTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AS0PT01 {deleteAfterUse = yes}; // table
  use AS0PT02 {deleteAfterUse = yes}; // table
  use AS0PT03 {deleteAfterUse = yes}; // table
  use AS0PM.AS0PM001, // form
  		AS0PM.XX0XM001,
  		AS0PM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAS-00000: XPAS-00000();
    set ASWREC empty;
    set AS0PM001 initial;
    AS0PM001.AS0PM-PRINT-PLAN-IND = "Y"; /* select print plan report*/
    AS0PM001.AS0PM-DETAIL-REPT-IND = "N"; /* not select detail report*/
    AS0PM001.AS0PM-PRNT-PLN-RPT-TYP = "D"; /* detail type of prt pln*/
    ;
    if (CAFRMSYS == "AS") /* entering from another as app*/
      AS0PM001.FY1FCTYC = AS1REC.FY1FCTYC;
      AS0PM001.SY1STNBR = AS1REC.SY1STNBR;
      AS0PM001.SY2CLRID = AS1REC.SY2CLRID;
      AS0PM001.XOWCD = AS1REC.XOWCD;
      AS0PW00.AS0PW-FORMAT-MAP-SW = "Y";
    end
    ;
    ASWREC.ASW-FIRST-TIME = "Y"; /* first tiem with this data*/
    goto AS0P-0001; /* converse main process*/
    AS0P-0001: AS0P-0001();
    goto AS0P-0001; /* converse main process*/
  end // end main
end // end AS0P

// main process loop
Function AS0P-0001()
  AS0P-2000(); /* format map*/
  AS0P-3000(); /* validate pf keys/ pop up windows*/
  AS0P-4000(); /* reset highlighted fields*/
  AS0P-5000(); /* validate input data*/
  AS0P-6000(); /* process valid input data*/
end // end AS0P-0001

// format data to display
Function AS0P-2000()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  AS0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AS0PM001 alarm; /* Indicate sound alarm*/
  end
  ;
  if (AS0PW00.AS0PW-FORMAT-MAP-SW == "N") /* dont format map*/
    if (converseVar.validationMsgNum == 0) /* no error message to display*/
      if (ASWREC.ASW-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ASWREC.ASW-MSG-NO);
      end /* Information message number*/
      ASWREC.ASW-MSG-NO = 0; /* Reset information message number*/
    end
    ;
  else
    set AS0PM001 initial;
    AS0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    AS0P-2100(); /* get short names and save data*/
    if (ASWREC.ASW-MSG-NO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(ASWREC.ASW-MSG-NO);
    end /* Information message number*/
    ASWREC.ASW-MSG-NO = 0; /* Reset information message number*/
    AS0PW00.AS0PW-FORMAT-MAP-SW = "N"; /* map is formatted*/
  end
  ;
  converse AS0PM001 ;
end // end AS0P-2000

// format and save data
Function AS0P-2100()
  AS0PW01.FY1FCTYC = AS0PM001.FY1FCTYC;
  AS0PW01.SY1STNBR = AS0PM001.SY1STNBR;
  AS0PW01.SY2CLRID = AS0PM001.SY2CLRID;
  AS0PW01.XOWCD = AS0PM001.XOWCD;
  AS0PW01.XSECD = AS0PM001.XSECD;
  AS0PW01.XSNYR = AS0PM001.XSNYR;
  AS0PW01.AS0PM-PRINT-PLAN-IND = AS0PM001.AS0PM-PRINT-PLAN-IND;
  AS0PW01.AS0PM-DETAIL-REPT-IND = AS0PM001.AS0PM-DETAIL-REPT-IND;
  AS0PW01.AS0PM-PRNT-PLN-RPT-TYP = AS0PM001.AS0PM-PRNT-PLN-RPT-TYP;
  AS0PW01.AS0PW-SCD = AS0PM001.PG1SC4CD;
  ;
  if (AS0PM001.FY1FCTYC != " ") /* a factory entered*/
    AS0PS-0001(); /* get factory short name*/
  end
  ;
  if (AS0PM001.SY1STNBR != " ") /* a style entered*/
    AS0PS-0002(); /* get style short name*/
  end
  ;
  if (AS0PM001.SY2CLRID != " ") /* a color entered*/
    AS0PS-0003(); /* get color abbrv*/
  end
  ;
  if (AS0PM001.XOWCD != " ") /* an owner group entered*/
    AS0PS-0004(); /* get owner group desc;*/
  end
  ;
  if (AS0PM001.PG1SC4CD != " " /* a scheduler code entered*/
   && AS0PM001.PG1SC4CD != "ALL")
    AS0PS-0009(); /* get user id*/
  end
end // end AS0P-2100

// validate attention id
Function AS0P-3000()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AS0PM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AS0PM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AS0PM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AS0PM001.CAITEM;
      XPAS-39999(); /* Exit to another application*/
    else
      converseLib.validationFailed(4); /* Indicate PF key not valid*/
    end
    ;
    set AS0PM001.CATOAP cursor, modified, bold; /* Highlight*/
    AS0PM001.XXXPRCNM = "AS0P-3000 "; /* process number*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AS0PM001.CAITEM > " ") /* application data was entered*/
    set AS0PM001.CAITEM cursor, modified, bold; /* highlight data*/
    converseLib.validationFailed(7); /* enter only with fast path*/
    AS0PM001.XXXPRCNM = "AS0P-3000 "; /* process number*/
    exit stack; /* redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* pf1 is pressed*/
      COMMAREA.CAITEM = "AS0PM001"; /* appl find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* pf3 is pressed*/
      COMMAREA.CATOAP = "AS0A"; /* fluctuations menu*/
    end
    ;
    XPAS-39999(); /* Exit to another application*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    AS0PM001.XXXPRCNM = "AS0P-3000"; /* process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
end // end AS0P-3000

// reset highlighted fields
Function AS0P-4000()
  set AS0PM001.FY1FCTYC initialAttributes;
  set AS0PM001.SY1STNBR initialAttributes;
  set AS0PM001.SY2CLRID initialAttributes;
  set AS0PM001.XOWCD initialAttributes;
  set AS0PM001.XSECD initialAttributes;
  set AS0PM001.XSNYR initialAttributes;
  set AS0PM001.AS0PM-PRINT-PLAN-IND initialAttributes;
  set AS0PM001.AS0PM-DETAIL-REPT-IND initialAttributes;
  set AS0PM001.AS0PM-PRNT-PLN-RPT-TYP initialAttributes;
  set AS0PM001.PG1SC4CD initialAttributes;
  ;
  if (AS0PM001.XOWCD == "?")
    AS1REC.XWHCD = "51";
    AS1REC.XOWCD = AS0PM001.XOWCD;
    XSASS-XOW(); /* pop up window routine*/
    AS0PM001.XOWCD = AS1REC.XOWCD;
    converseLib.clearScreen();
    
  end
  ;
  if (AS0PM001.XSECD == "?")
    AS1REC.XOWCD = AS0PM001.XOWCD;
    XSASS-XSE(); /* pop up window routine*/
    AS0PM001.XSECD = AS1REC.XSECD;
    converseLib.clearScreen();
    
  end
  ;
end // end AS0P-4000

// edit changed data
Function AS0P-5000()
  AS0PW00.AS0PW-DATA-CHANGED-IND = "N";
  ;
  if (AS0PM001.FY1FCTYC != AS0PW01.FY1FCTYC
   || AS0PM001.SY1STNBR != AS0PW01.SY1STNBR
   || AS0PM001.SY2CLRID != AS0PW01.SY2CLRID
   || AS0PM001.XOWCD != AS0PW01.XOWCD
   || AS0PM001.XSECD == " "
   || AS0PM001.XSNYR == 0
   || AS0PM001.XSECD != AS0PW01.XSECD
   || AS0PM001.XSNYR != AS0PW01.XSNYR
   || AS0PM001.AS0PM-PRINT-PLAN-IND != AS0PW01.AS0PM-PRINT-PLAN-IND
   || AS0PM001.AS0PM-DETAIL-REPT-IND != AS0PW01.AS0PM-DETAIL-REPT-IND
   || AS0PM001.AS0PM-PRNT-PLN-RPT-TYP != AS0PW01.AS0PM-PRNT-PLN-RPT-TYP
   || AS0PM001.PG1SC4CD != AS0PW01.AS0PW-SCD)
    AS0PW00.AS0PW-DATA-CHANGED-IND = "Y";
  end
  ;
  if (AS0PW00.AS0PW-DATA-CHANGED-IND == "N" /* data didnt change*/
   && ASWREC.ASW-FIRST-TIME == "Y")         /* but its been in once*/
    return; /* return to calling routine*/
  end
  ;
  ASWREC.ASW-FIRST-TIME = " "; /* time to edit data*/
  ;
  if (AS0PM001.XSECD != AS0PW01.XSECD
   || AS0PM001.XSECD == " "
   || AS0PM001.XSNYR == 0)
    AS0P-5100(); /* validate season code*/
  end
  ;
  if (AS0PM001.AS0PM-PRINT-PLAN-IND != AS0PW01.AS0PM-PRINT-PLAN-IND
   || AS0PM001.AS0PM-DETAIL-REPT-IND != AS0PW01.AS0PM-DETAIL-REPT-IND
   || AS0PM001.AS0PM-PRNT-PLN-RPT-TYP != AS0PW01.AS0PM-PRNT-PLN-RPT-TYP)
    AS0P-5200(); /* validate switches*/
  end
  ;
  if (AS0PM001.XOWCD != AS0PW01.XOWCD
   && AS0PM001.XOWCD != " ")
    AS0PS-0004(); /* validate owner group*/
  end
  ;
  if (AS0PM001.SY1STNBR != AS0PW01.SY1STNBR
   && AS0PM001.SY1STNBR != " ")
    AS0PS-0002(); /* validate style number*/
  end
  ;
  if (AS0PM001.SY2CLRID != AS0PW01.SY2CLRID
   && AS0PM001.SY2CLRID != " ")
    ;
    if (AS0PM001.SY1STNBR != " ")
      AS0PS-0003(); /* validate color code*/
    else
      converseLib.validationFailed(54); /* color needs style*/
      AS0PM001.XXXPRCNM = "AS0P-5000";
      set AS0PM001.SY1STNBR cursor, bold;
    end
    ;
  end
  ;
  if (AS0PM001.FY1FCTYC != AS0PW01.FY1FCTYC
   && AS0PM001.FY1FCTYC != " ")
    AS0PS-0001(); /* validate factory code*/
  end
  ;
  if (AS0PM001.PG1SC4CD != AS0PW01.AS0PW-SCD)
    if (AS0PM001.PG1SC4CD == "ALL")
      AS0PM001.XXXUSRID = " "; /* don't validate if 'all' codes*/
    else
      if (AS0PM001.PG1SC4CD != " ")
        AS0PS-0009(); /* get user id*/
      else
        AS0PM001.XXXUSRID = " "; /* don't validate if no code entered*/
      end
    end
  end
  ;
  if (converseVar.validationMsgNum == 0) /* no errors*/
    AS0PW01.SY1STNBR = AS0PM001.SY1STNBR; /* save data*/
    AS0PW01.SY2CLRID = AS0PM001.SY2CLRID;
    AS0PW01.XOWCD = AS0PM001.XOWCD;
    AS0PW01.XSECD = AS0PM001.XSECD;
    AS0PW01.XSNYR = AS0PM001.XSNYR;
    AS0PW01.AS0PM-PRINT-PLAN-IND = AS0PM001.AS0PM-PRINT-PLAN-IND;
    AS0PW01.AS0PM-DETAIL-REPT-IND = AS0PM001.AS0PM-DETAIL-REPT-IND;
    AS0PW01.AS0PM-PRNT-PLN-RPT-TYP = AS0PM001.AS0PM-PRNT-PLN-RPT-TYP;
    AS0PW01.AS0PW-SCD = AS0PM001.PG1SC4CD;
    return;
  else
    AS0PW00.AS0PW-FORMAT-MAP-SW = "N";
    exit stack;
  end
  ;
end // end AS0P-5000

// validate season/season yr
Function AS0P-5100()
  AS1REC.AS1-XSN-YY = AS0PM001.XSNYR;
  AS1REC.AS1-XSE-XSN = AS0PM001.XSECD;
  AS1REC.AS1-VALID-XSE-FL = "0";
  AS1REC.AS1-VALID-XSN-FL = "0";
  AS1REC.AS1-VALID-XSE-XSN-FL = "0";
  AS1REC.XSECD = AS0PM001.XSECD;
  AS1REC.AS1-XSN-CC = 0;
  XPAS-51200();
  ;
  if (AS1REC.AS1-VALID-XSE-XSN-FL != 0
   && AS0PM001.XSNYR > 0
   && AS0PM001.XSECD > " ")
    set AS0PM001.XSNYR bold;
    set AS0PM001.XSECD cursor, bold;
    converseLib.validationFailed(94); /* invalid sesn/yr msg*/
    AS0PM001.XXXPRCNM = "AS0P-5100";
  end
  if (AS1REC.AS1-VALID-XSN-FL != 0
   || AS0PM001.XSNYR == 0)
    set AS0PM001.XSNYR cursor, bold;
    converseLib.validationFailed(26); /* invalid yr msg;*/
    AS0PM001.XXXPRCNM = "AS0P-5100";
  end
  ;
  if (AS1REC.AS1-VALID-XSE-FL != "0"
   || AS0PM001.XSECD == " ")
    set AS0PM001.XSECD cursor, bold;
    converseLib.validationFailed(16); /* invalid sesn msg;*/
    AS0PM001.XXXPRCNM = "AS0P-5100";
  end
  ;
end // end AS0P-5100

// validate report switches
Function AS0P-5200()
  if (AS0PM001.AS0PM-DETAIL-REPT-IND == "Y"
   || AS0PM001.AS0PM-DETAIL-REPT-IND == "N")
   /* next sentence*/
  else
    converseLib.validationFailed(118); /* yes or no only*/
    AS0PM001.XXXPRCNM = "AS0P5200";
    set AS0PM001.AS0PM-DETAIL-REPT-IND cursor, bold;
  end
  ;
  if (AS0PM001.AS0PM-PRINT-PLAN-IND == "Y")
    ;
    if (AS0PM001.AS0PM-PRNT-PLN-RPT-TYP == "D" /* detail type*/
     || AS0PM001.AS0PM-PRNT-PLN-RPT-TYP == "S" /* summary type*/
     || AS0PM001.AS0PM-PRNT-PLN-RPT-TYP == "B") /* both kinds*/
   /* next sentence*/
    else
      converseLib.validationFailed(132); /* invalid value*/
      AS0PM001.XXXPRCNM = "AS0P5200";
      set AS0PM001.AS0PM-PRNT-PLN-RPT-TYP cursor, bold;
    end
    ;
  end
  ;
  if (AS0PM001.AS0PM-PRINT-PLAN-IND == "Y"
   || AS0PM001.AS0PM-PRINT-PLAN-IND == "N")
   /* next sentence*/
  else
    converseLib.validationFailed(118); /* yes or no only*/
    AS0PM001.XXXPRCNM = "AS0P5200";
    set AS0PM001.AS0PM-PRINT-PLAN-IND cursor, bold;
  end
  ;
end // end AS0P-5200

// process valid input request
Function AS0P-6000()
  if (ASWREC.ASW-FIRST-TIME == " ")
    ASWREC.ASW-FIRST-TIME = "Y";
    ASWREC.ASW-MSG-NO = 79; /* press enter to submit*/
    AS0PW01.FY1FCTYC = AS0PM001.FY1FCTYC;
    AS0PW01.SY1STNBR = AS0PM001.SY1STNBR;
    AS0PW01.SY2CLRID = AS0PM001.SY2CLRID;
    AS0PW01.XOWCD = AS0PM001.XOWCD;
    AS0PW01.XSECD = AS0PM001.XSECD;
    AS0PW01.XSNYR = AS0PM001.XSNYR;
    AS0PW01.AS0PM-PRINT-PLAN-IND = AS0PM001.AS0PM-PRINT-PLAN-IND;
    AS0PW01.AS0PM-DETAIL-REPT-IND = AS0PM001.AS0PM-DETAIL-REPT-IND;
    AS0PW01.AS0PW-SCD = AS0PM001.PG1SC4CD;
    AS0PW00.AS0PW-FORMAT-MAP-SW = "N";
    return;
  end
  ;
  AS0P-6100(); /* determine region*/
  set TA6REC empty; /* subroutine work area*/
  TA6REC.TA6INDEX = 1; /* initialize parameters index*/
  ;
  if (TA3REC.TA3RGNID == "03") /* if production region*/
    ASWREC.ASW-IDX1 = 1; /* set index to point at prod jcl*/
  else
    ;
    if ("/*EOF" in AS0PT01.TARJCL) /* find end of prod jcl*/
      ASWREC.ASW-IDX1 = sysVar.arrayIndex;
      ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
    else
      ASWREC.ASW-IDX1 = 1;
    end
    ;
  end
  ;
   /* --------------------------------------------------------*/
   /* format jcl and parameters into the subroutine work area.*/
   /* --------------------------------------------------------*/
  ;
  while (ASWREC.ASW-IDX1 > 0) /* until end of table*/
    ;
    if (AS0PT01.TARTYPE[ASW-IDX1] == "P") /* parameters statement*/
      AS0P-6150(); /* build parm for create print plan*/
    end
    ;
   /* --------------------------------------------------------*/
   /* format the job control language statement from the table*/
   /* --------------------------------------------------------*/
    ;
    TA6REC.TARJCL[TA6INDEX] = AS0PT01.TARJCL[ASW-IDX1]; /* jcl*/
    TA6REC.TARTYPE[TA6INDEX] = AS0PT01.TARTYPE[ASW-IDX1]; /* type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms index*/
    ;
   /* --------------------------------------------------------*/
   /* if not end of table, increment the table index*/
   /* --------------------------------------------------------*/
    ;
    if (AS0PT01.TARJCL[ASW-IDX1] == "/*EOF") /* end of table*/
      ASWREC.ASW-IDX1 = 0; /* indicate end of table*/
    else
      ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1; /* increment table index*/
    end
  end
  ;
  if (TA3REC.TA3RGNID == "03") /* if production region*/
    ASWREC.ASW-IDX1 = 1; /* set index to point at prod jcl*/
  else
    ;
    if ("/*EOF" in AS0PT02.TARJCL) /* find end of prod jcl*/
      ASWREC.ASW-IDX1 = sysVar.arrayIndex;
      ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
    else
      ASWREC.ASW-IDX1 = 1;
    end
    ;
  end
  ;
  if (AS0PM001.AS0PM-PRINT-PLAN-IND == "Y") /* print plan report selected*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* get rid of /*eof*/
    ;
    while (ASWREC.ASW-IDX1 > 0) /* until end of table*/
      ;
      if (AS0PT02.TARTYPE[ASW-IDX1] == "P") /* parameters statement*/
        AS0P-6200(); /* build parm for print plan report*/
      end
      ;
   /* --------------------------------------------------------*/
   /* format the job control language statement from the table*/
   /* --------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = AS0PT02.TARJCL[ASW-IDX1]; /* jcl*/
      TA6REC.TARTYPE[TA6INDEX] = AS0PT02.TARTYPE[ASW-IDX1]; /* type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms index*/
      ;
   /* --------------------------------------------------------*/
   /* if not end of table, increment the table index*/
   /* --------------------------------------------------------*/
      ;
      if (AS0PT02.TARJCL[ASW-IDX1] == "/*EOF") /* end of table*/
        ASWREC.ASW-IDX1 = 0; /* indicate end of table*/
      else
        ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1; /* increment table index*/
      end
      ;
    end
    ;
  end
  ;
  if (TA3REC.TA3RGNID == "03") /* if production region*/
    ASWREC.ASW-IDX1 = 1; /* set index to point at prod jcl*/
  else
    ;
    if ("/*EOF" in AS0PT03.TARJCL) /* find end of prod jcl*/
      ASWREC.ASW-IDX1 = sysVar.arrayIndex;
      ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1;
    else
      ASWREC.ASW-IDX1 = 1;
    end
    ;
  end
  ;
  if (AS0PM001.AS0PM-DETAIL-REPT-IND == "Y") /* detail print rept selected*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* get rid of /*eof*/
    ;
    while (ASWREC.ASW-IDX1 > 0) /* until end of table*/
      ;
      if (AS0PT03.TARTYPE[ASW-IDX1] == "P") /* parameters statement*/
        AS0P-6300(); /* build parm for detail-report*/
      end
      ;
   /* --------------------------------------------------------*/
   /* format the job control language statement from the table*/
   /* --------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = AS0PT03.TARJCL[ASW-IDX1]; /* jcl*/
      TA6REC.TARTYPE[TA6INDEX] = AS0PT03.TARTYPE[ASW-IDX1]; /* type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms index*/
      ;
   /* --------------------------------------------------------*/
   /* if not end of table, increment the table index*/
   /* --------------------------------------------------------*/
      ;
      if (AS0PT03.TARJCL[ASW-IDX1] == "/*EOF") /* end of table*/
        ASWREC.ASW-IDX1 = 0; /* indicate end of table*/
      else
        ASWREC.ASW-IDX1 = ASWREC.ASW-IDX1 + 1; /* increment table index*/
      end
      ;
    end
    ;
  end
  ;
  AS0P-6400(); /* submit jcl/jobstream for batch run*/
  set AS0PM001 initial; /* clear map*/
  ;
  ;
end // end AS0P-6000

// determine cics region
Function AS0P-6100()
   /* ------------------------------------------------------------*/
   /* FIND IN WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING*/
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ALLFLDS";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    AS0PM001.XXXPRCNM = "AS0P-6100"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "AS0P-6100"; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    AS0PM001.XXXPRCNM = "AS0P-6100"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "AS0P-6100"; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
  ;
end // end AS0P-6100

// build parm for print plan
Function AS0P-6150()
  set AS0PW02 empty; /* reset parameters statement*/
  ;
  if (AS0PM001.XSNYR != 0)
    AS0PW02.AS0PW-YEAR = AS0PM001.XSNYR;
    ;
    if (AS0PM001.XSNYR < 89)
      AS0PW02.AS0PW-YEAR = 2000 + AS0PW02.AS0PW-YEAR;
    else
      AS0PW02.AS0PW-YEAR = 1900 + AS0PW02.AS0PW-YEAR;
    end
    ;
  else
    AS0PW02.AS0PW-YEAR = 0;
  end
  ;
  if (AS0PM001.XSECD != " ")
    AS0PW02.XSECD = AS0PM001.XSECD;
  else
    AS0PW02.XSECD = "**"; /* wild card*/
  end
  ;
  AS0PT01.TARJCL[ASW-IDX1] = AS0PW02.AS0PW-JCL;
  ;
end // end AS0P-6150

// build parm for print plan rept
Function AS0P-6200()
  set AS0PW02 empty; /* reset parameters statement*/
  ;
  if (AS0PM001.XSNYR != 0)
    AS0PW02.AS0PW-YEAR = AS0PM001.XSNYR;
    ;
    if (AS0PM001.XSNYR < 89)
      AS0PW02.AS0PW-YEAR = 2000 + AS0PW02.AS0PW-YEAR;
    else
      AS0PW02.AS0PW-YEAR = 1900 + AS0PW02.AS0PW-YEAR;
    end
    ;
  else
    AS0PW02.AS0PW-YEAR = 0;
  end
  ;
  if (AS0PM001.FY1FCTYC != " ")
    AS0PW02.FY1FCTYC = AS0PM001.FY1FCTYC;
  else
    AS0PW02.FY1FCTYC = "****"; /* wild card*/
  end
  ;
  if (AS0PM001.SY1STNBR != " ")
    AS0PW02.SY1STNBR = AS0PM001.SY1STNBR;
  else
    AS0PW02.SY1STNBR = "******"; /* wild card*/
  end
  ;
  if (AS0PM001.SY2CLRID != " ")
    AS0PW02.SY2CLRID = AS0PM001.SY2CLRID;
  else
    AS0PW02.SY2CLRID = "***"; /* wild card*/
  end
  ;
  if (AS0PM001.XOWCD != " ")
    AS0PW02.XOWCD = AS0PM001.XOWCD;
  else
    AS0PW02.XOWCD = "**"; /* wild card*/
  end
  ;
  if (AS0PM001.XSECD != " ")
    AS0PW02.XSECD = AS0PM001.XSECD;
  else
    AS0PW02.XSECD = "**"; /* wild card*/
  end
  ;
  if (AS0PM001.AS0PM-PRNT-PLN-RPT-TYP == "D")
    AS0PW02.AS0PW-DETAIL-FLAG = "Y";
  else
    if (AS0PM001.AS0PM-PRNT-PLN-RPT-TYP == "S")
      AS0PW02.AS0PW-SUMMARY-FLAG = "Y";
    else
      if (AS0PM001.AS0PM-PRNT-PLN-RPT-TYP == "B")
        AS0PW02.AS0PW-DETAIL-FLAG = "Y";
        AS0PW02.AS0PW-SUMMARY-FLAG = "Y";
      end
    end
  end
  if (AS0PM001.PG1SC4CD != " ")
    AS0PW02.PG1SC4CD = AS0PM001.PG1SC4CD;
  else
    AS0PW02.PG1SC4CD = "**"; /* wild card*/
  end
  AS0PT02.TARJCL[ASW-IDX1] = AS0PW02.AS0PW-JCL;
end // end AS0P-6200

// build parm for detail rept
Function AS0P-6300()
  set AS0PW02 empty; /* reset parameters statement*/
  ;
  if (AS0PM001.XSNYR != 0)
    AS0PW02.AS0PW-YEAR = AS0PM001.XSNYR;
    ;
    if (AS0PM001.XSNYR < 89)
      AS0PW02.AS0PW-YEAR = 2000 + AS0PW02.AS0PW-YEAR;
    else
      AS0PW02.AS0PW-YEAR = 1900 + AS0PW02.AS0PW-YEAR;
    end
    ;
  else
    AS0PW02.AS0PW-YEAR = 0;
  end
  ;
  if (AS0PM001.FY1FCTYC != " ")
    AS0PW02.FY1FCTYC = AS0PM001.FY1FCTYC;
  else
    AS0PW02.FY1FCTYC = "****"; /* wild card*/
  end
  ;
  if (AS0PM001.SY1STNBR != " ")
    AS0PW02.SY1STNBR = AS0PM001.SY1STNBR;
  else
    AS0PW02.SY1STNBR = "******"; /* wild card*/
  end
  ;
  ;
  if (AS0PM001.SY2CLRID != " ")
    AS0PW02.SY2CLRID = AS0PM001.SY2CLRID;
  else
    AS0PW02.SY2CLRID = "***"; /* wild card*/
  end
  ;
  ;
  if (AS0PM001.XOWCD != " ")
    AS0PW02.XOWCD = AS0PM001.XOWCD;
  else
    AS0PW02.XOWCD = "**"; /* wild card*/
  end
  ;
  if (AS0PM001.XSECD != " ")
    AS0PW02.XSECD = AS0PM001.XSECD;
  else
    AS0PW02.XSECD = "**"; /* wild card*/
  end
  ;
  if (AS0PM001.PG1SC4CD != " ")
    AS0PW02.PG1SC4CD = AS0PM001.PG1SC4CD;
  else
    AS0PW02.PG1SC4CD = "**"; /* wild card*/
  end
  ;
  AS0PT03.TARJCL[ASW-IDX1] = AS0PW02.AS0PW-JCL;
  ;
  ;
end // end AS0P-6300

// submit jcl
Function AS0P-6400()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Send a message to the user when done*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
  ;
   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/
  ;
  AS0PM001.XXXPRCNM = "AS0P-6500"; /* Process number*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(22); /* Indicate job was submitted*/
    set AS0PM001.FY1FCTYC cursor; /* Set cursor to XSECD field*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    converseLib.validationFailed(23); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AS0P-6400

// get factory short name
Function AS0PS-0001()
  if (AS0PM001.FY1FCTYC == " ") /* as0pm001 Field eq spaces*/
    AS0PM001.FY1FCTSN = " "; /* space out short name*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify if Factory cd entered is found in DFCTY.VFCTY001*/
   /* ------------------------------------------------------------*/
  ;
   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/
  ;
  set FY1REC empty; /* initialize db record*/
  FY1REC.XGPCD = "03"; /* gpc cd*/
  FY1REC.FY1FCTYC = AS0PM001.FY1FCTYC; /* factory code*/
  ;
   /* *=============================**/
   /* *  Access DFCTY.VFCTY001 DB   **/
   /* *=============================**/
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AS0PM001.FY1FCTSN = FY1REC.FY1FCTSN;
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AS0PM001.FY1FCTYC cursor, bold; /* Highlight field*/
      AS0PM001.FY1FCTSN = " "; /* space screen description*/
      converseLib.validationFailed(41); /* Indicate error message*/
      AS0PM001.XXXPRCNM = "AS0S-0001 "; /* Process number*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0PM001.XXXPRCNM = "AS0PS-0001"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0PS01"; /* Error location*/
  TA1REC.TA1LOC = "GET DFCTY.VFCTY001 ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0PS-0001

// get style short name
Function AS0PS-0002()
  AS0PM001.SY1SSTNM = " "; /* space out short name*/
  AS0PS-0005(); /* select set syclr*/
  AS0PS-0006(); /* fetch one row*/
  AS0PS-0007(); /* close cursor syclr*/
end // end AS0PS-0002

// get color abbrv
Function AS0PS-0003()
   /* ------------------------------------------------------------*/
   /* Obtain Style and Color descriptions from DPRODG.VSYCLR01.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/
  ;
  set PG2REC empty; /* initialize db record*/
  PG2REC.XGPCD = "03"; /* gpc cd*/
  PG2REC.SY1STNBR = AS0PM001.SY1STNBR; /* style*/
  PG2REC.SY2CLRID = AS0PM001.SY2CLRID; /* color*/
  PG2REC.XDMCD = "00"; /* dimension cd*/
  ;
  ;
   /* *=============================**/
   /* *  Access DPRODG.VSYCLR01 DB  * Obtain style,color desc*/
   /* *=============================**/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      AS0PM001.SY2CLRAB = PG2REC.SY2CLRAB; /* move color desc*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AS0PM001.SY2CLRAB = " "; /* Blank out color abbrev*/
      converseLib.validationFailed(91); /* invalid color*/
      set AS0PM001.SY2CLRID cursor, bold; /* highlight*/
      return; /* Return to calling process*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "AS0PS-0003"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AS0PM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AS0PM001.XXXPRCNM = "AS0PS-0003"; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AS0PS-0003

// get owner group abbrv
Function AS0PS-0004()
  AS1REC.XWHCD = "51"; /* default whse*/
  AS1REC.XOWCD = AS0PM001.XOWCD; /* owner group*/
  ;
  if (AS1REC.AS1-XOW-KEY in XOWTBL.XOWKEY /* a match*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    AS0PM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else /* an error*/
    AS0PM001.XOWABRV = " ";
    converseLib.validationFailed(44);
    set AS0PM001.XOWCD cursor, bold;
  end
end // end AS0PS-0004

// select set dprodg.vsyclr01
Function AS0PS-0005()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set PG2REC empty; /* Reset rec work area*/
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AS0PM001.SY1STNBR; /* Style no.*/
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0PM001.XXXPRCNM = "AS0PS-0005"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0PS16"; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AS0PM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
end // end AS0PS-0005

// fetch row dprodg.vsyclr01
Function AS0PS-0006()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      AS0PM001.SY1SSTNM = PG2REC.SY1SSTNM; /* move style desc*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AS0PM001.SY1SSTNM = " "; /* Space out desc*/
      set AS0PM001.SY1STNBR cursor, bold; /* Highlight field*/
      converseLib.validationFailed(38); /* Indicate error message*/
      AS0PM001.XXXPRCNM = "AS0PS-0006"; /* Process number*/
      return; /* Exit to calling rtn*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AS0PM001.XXXPRCNM = "AS0PS-0006"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0PS-0006"; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AS0PM001"; /* MAP NAME*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AS0PS-0006

// close cursor dprodg.vsyclr01
Function AS0PS-0007()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AS0PM001.XXXPRCNM = "AS0PS-0007"; /* Process number*/
  TA1REC.TA1PGMNM = "AS0PS-0007"; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AS0PM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
end // end AS0PS-0007

// get user id
Function AS0PS-0009()
   /* ---------------------------------------------------------------------*/
   /* obtain user id from dprodg.vsuser01*/
   /* ---------------------------------------------------------------------*/
  ;
   /* *=====================**/
   /* *  build access keys  **/
   /* *=====================**/
  ;
  set PG1REC empty; /* initialize db record*/
  PG1REC.XGPCD = "03"; /* gpc cd*/
  PG1REC.PG1SC4CD = AS0PM001.PG1SC4CD; /* scheduler code*/
  PG1REC.PG1FCTCD = " "; /* forecaster code*/
  ;
   /* *=============================**/
   /* *  access dprodg.vsuser01 db  * obtain user id*/
   /* *=============================**/
  ;
  try
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* -------------------------------------------------------------------*/
   /* if successful call, save userid to working storage*/
   /* -------------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      ;
      AS0PM001.XXXUSRID = PG1REC.XXXUSER; /* move user id to map*/
      return; /* return to calling process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* no data found*/
      ;
      AS0PM001.XXXUSRID = " "; /* blank out user id*/
      converseLib.validationFailed(20); /* user id not found on database*/
      set AS0PM001.PG1SC4CD cursor, bold; /* highlight*/
      return; /* return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* -------------------------------------------------------------------*/
   /* if data not available, return error condition*/
   /* -------------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
      ;
      converseLib.validationFailed(11); /* indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      converseLib.clearScreen();
       /* clear screen before redisplay*/
      ;
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* save csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* save sql commarea*/
  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1PGMNM = "AS0PS00090"; /* error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSUSER01 ROW";
  TA1REC.TA1MAP = "AS0PM001"; /* map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis rtn*/
  AS0PM001.XXXPRCNM = "AS0PS00090"; /* process name*/
  exit stack; /* exit to redisplay map*/
end // end AS0PS-0009

//*** RECORD=AS0PW00 ****
// misc working storage for AS0O submit create print plan
// ***********************
Record AS0PW00 type basicRecord
  10 AS0PW-FORMAT-MAP-SW AS0PW-FORMAT-MAP-SW ; 
  10 AS0PW-DATA-CHANGED-IND AS0PW-DATA-CHANGED-IND ; 
end // end AS0PW00

//*** RECORD=AS0PW01 ****
// display working storage for AS0O submit create print plan
// ***********************
Record AS0PW01 type basicRecord
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XOWCD XOWCD ; 
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
  10 AS0PM-PRINT-PLAN-IND AS0PM-PRINT-PLAN-IND ; 
  10 AS0PM-PRNT-PLN-RPT-TYP AS0PM-PRNT-PLN-RPT-TYP ; 
  10 AS0PM-DETAIL-REPT-IND AS0PM-DETAIL-REPT-IND ; 
  10 AS0PW-SCD char(3) ; // 3 btye scheduler code
end // end AS0PW01

//*** RECORD=AS0PW02 ****
// work area for passed parameter between AS0O and the batch
// report programs it kicks off
// ***********************
Record AS0PW02 type basicRecord
  10 AS0PW-JCL AS0PW-JCL ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 * char(1) ; 
    15 SY1STNBR SY1STNBR ; 
    15 * char(1) ; 
    15 SY2CLRID SY2CLRID ; 
    15 * char(1) ; 
    15 XOWCD XOWCD ; 
    15 * char(1) ; 
    15 XSECD XSECD ; 
    15 * char(1) ; 
    15 AS0PW-YEAR AS0PW-YEAR ; 
    15 * char(1) ; 
    15 AS0PW-DETAIL-FLAG AS0PW-DETAIL-FLAG ; 
    15 * char(1) ; 
    15 AS0PW-SUMMARY-FLAG AS0PW-SUMMARY-FLAG ; 
    15 * char(1) ; 
    15 PG1SC4CD PG1SC4CD ; 
    15 * char(1) [47] ; 
end // end AS0PW02

// print plan det rept selected
DataItem AS0PM-DETAIL-REPT-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print plan rept selected
DataItem AS0PM-PRINT-PLAN-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print plan report type
DataItem AS0PM-PRNT-PLN-RPT-TYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0PW-DATA-CHANGED-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print plan detail rept flag
DataItem AS0PW-DETAIL-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0PW-FORMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AS0PW-JCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print plan summary rept flag
DataItem AS0PW-SUMMARY-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season year
DataItem AS0PW-YEAR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

