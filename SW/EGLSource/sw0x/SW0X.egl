package sw0x;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0X ****
// This application allows a user to display work order data
// for a specific whse, work order number and package carton
// sequence number.  The user may add a new work order number
// modify an existing work order, or transfer carton
// information to another work order number.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/03/90  rgilli  new program
//          02/14/91  ryonke  program changes for table changes
//                            and change output parm card.
//          02/27/91  rchini  1.  Set sl-wo-crtn-prt of
//                            DCLVWOPIT01 (SLMREC) to 'Y' when
//                            a new work order item is created.
//                            2.  Set sl-wo-prt-fl of
//                            DCLVWOPHD01 (SLLREC) to 'Y' when
//                            a new work order header is
//                            created.
//          04/19/91  rgilli  1. allow transfer to q/c loc
//                               only if mult-product loc.
//                            2. fixed the rlitm 'to' location.
//                               update problem.
// SL#0     10/10/91  SPOPA   Change "Allow Implicits" to NO.
// MAINT    01/31/92  GRAY    INITIALIZE RECORDS AND MAPS.
// SL#0     04/14/92  RYONKE  Fix new pallet logic.
// SL#0     06/02/92  jfiat   Keep ts-crtn-unt on rlitm when
//                            slc is the only field altered.
//                            Fix lane nbr bug on plnsz table.
// SL#0     06/09/92  Ryonke  set cursor to carton sequence
//                            number afet transaction complete.
// SL#0     10/10/92  Ryonke  code changes due to tables change
// WV RCV   03/22/93  tglenn  changes for wilsonville recv
//                            project.
// SL#0     03/03/94  Ryonke  code changes due to tables change
// ASW001   12/29/95  hkempe  Recompiled due to VPLCPO01 table
//                            change.
// Y2KFIX   03/12/98  ksumme  Y2K MODIFICATIONS MADE TO:
//                            regen to pick up xx0xs01
// retroft  09/02/98  sjohn6  do not allow to store to 02/49
// retroft  12/14/98  sjohn6  fix for 02/81
// *********************
Program SW0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PCYREC PCYREC; // record
  SL1REC SL1REC; // record
  SL2REC SL2REC; // record
  SL3REC SL3REC; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SL7REC SL7REC; // record
  SLLREC SLLREC; // record
  SLMREC SLMREC; // record
  SLOREC SLOREC; // record
  SLSREC SLSREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0XW00 SW0XW00; // record
  SW0XW01 SW0XW01; // record
  SW0XW02 SW0XW02; // record
  SW0XW03 SW0XW03; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SWGREC SWGREC; // record
  SWHREC SWHREC; // record
  SWIREC SWIREC; // record
  SWJREC SWJREC; // record
  SWMREC SWMREC; // record
  SWNREC SWNREC; // record
  SWQREC SWQREC; // record
  SWVREC SWVREC; // record
  SWXREC SWXREC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XARREC XARREC; // record
  XOWREC XOWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SW0XT01; // table
  use SW0XT02 {deleteAfterUse = yes}; // table
  use XARTBL; // table
  use XDMTBL; // table
  use XEGTBL; // table
  use XGPTBL; // table
  use XLCTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XSLTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use YLTTBL; // table
  use YZTTBL; // table
  use SW0XM.SW0XM001,  // forms
      SW0XM.TA0PM001, 
      SW0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0XM001 initial; /* M001 input/output*/
    set TA0PM001 initial;
    set XX0XM001 initial; /* pop-up window put*/
    set SW0XW00 empty; /* Working storage*/
    set SW0XW01 empty; /* M001 display storage*/
    set SW0XW02 empty; /* M001 display storage*/
    set SW0XW03 empty; /* M001 display storage*/
    set PCYREC empty;
    set PC2REC empty;
    set SLLREC empty;
    set SLMREC empty;
    set SLOREC empty;
    set SLSREC empty;
    set SLVREC empty;
    set SL1REC empty;
    set SL2REC empty;
    set SL3REC empty;
    set SL4REC empty;
    set SL5REC empty;
    set SL7REC empty;
    set SQLCA empty; /* SQL communication area*/
    set SWEREC empty;
    set SWFREC empty;
    set SWGREC empty;
    set SWHREC empty;
    set SWIREC empty;
    set SWJREC empty;
    set SWMREC empty;
    set SWNREC empty;
    set SWQREC empty;
    set SWVREC empty;
    set SWXREC empty;
    set SYCREC empty;
    set SYPREC empty;
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* submit jcl*/
    set XARREC empty;
    set XOWREC empty;
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty;
    set ERRSQLCA empty;

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    SW0XW00.SW0XWSWR = "N"; /* Request for data switch*/
    SW0XW00.SW0XWSWF = "Y"; /* format screen data switch*/
    SLWREC.XXXAPPID = COMMAREA.CACURRAP;
    SW0XW01.XWHCD = SLWREC.XWHCD;
    if (SLWREC.XWHCD == " ")
      SW0XW01.XWHCD = COMMAREA.XWHCD;
    end
    if (SW0XW01.XWHCD in XWHTBL.XWHCD)
      SW0XW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end

     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/

    goto SW0X001;

    SW0X001: SW0X001();
    goto SW0X001;
  end // end main
end // end SW0X

// Inquire/maintainance m001
Function SW0X001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0X100(); /* Obtain the data to display*/

  SW0X200(); /* Format and display the map*/

  SW0X300(); /* Check attention identifier*/

  SW0X400(); /* Reset fields to normal intensity*/

  SW0X500(); /* Verify the entered data*/

  SW0X600(); /* Process valid input request*/

end // end SW0X001

// Obtain the data to display
Function SW0X100()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0XW00.SW0XWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if key data has been entered and is valid obtain*/
   /* work order product information for display.*/
   /* ------------------------------------------------------------*/

  set SLLREC empty;

  SLLREC.XWHCD = SW0XW01.XWHCD;
  SLLREC.SL8WONBR = SW0XW01.SL8WONBR;

  SW0XS01(); /* Select 's ' dstloc.vwophd01 row*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(332);
    SLWREC.XXXLOCID = "100";
    return;
  else
    SW0X110(); /* select 's ' dstloc.vrlhdr01 row*/
    if (SL1REC.YRSCD == "01"
     || SL1REC.YRSCD == "02")
       /* next sentence*/
    else
      converseLib.validationFailed(334); /* invalid receiving status*/
      SLWREC.XXXLOCID = "100";
      return;
    end
  end

  SW0X120(); /* load dstloc.vwophd01 into w/s*/

   /* ------------------------------------------------------------*/
    /* obtain size id and quanities from the dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  move 0 to SW0XW01.SY5SZID[1] for all;
  move 0 to SW0XW01.SL9WOQTY[1] for all;

  move " " to SW0XW01.SW0XWNSZ[1] for all;
  move 0 to SW0XW01.SW0XWNSI[1] for all;
  move 0 to SW0XW01.SW0XWNQT[1] for all;

  set SLMREC empty;

  SLMREC.XWHCD = SW0XW01.XWHCD;
  SLMREC.SL8WONBR = SW0XW01.SL8WONBR;
  SLMREC.PKDNCSQN = SW0XW01.PKDNCSQN;

  SW0XS02(); /* Select 's1' dstloc.vwopit01 rows*/

  SW0XS03(); /* fetch  'n1' dstloc.vwopit01 row*/

  SW0XW00.SW0XWIDX = 1; /* init index*/
  while (SQLCA.VAGen_SQLCODE == 0
   && SW0XW00.SW0XWIDX <= 8)

    SW0XW01.TSOCRTNB = SLMREC.TSOCRTNB; /* curr carton nbr*/
    SW0XW01.SW0XWTSO = 0;
    SW0XW01.SW0XWTSO = SW0XW01.SW0XWTSO + SLMREC.TSOCRTNB;
    SW0XW01.SY5SZID[SW0XWIDX] = SLMREC.SY5SZID; /* curr sz id*/
    SW0XW01.SL9WOQTY[SW0XWIDX] = SLMREC.SL9WOQTY; /* curr qty*/
    SW0XW01.SW0XWNSI[SW0XWIDX] = SLMREC.SY5SZID; /* new sz id*/
    SW0XW01.SW0XWNQT[SW0XWIDX] = SLMREC.SL9WOQTY; /* new qty*/

    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

    SW0XS03(); /* fetch  'n1' dstloc.vwopit01 row*/

  end

  SW0XS04(); /* close  'c#' dstloc.vwopit01 row*/

   /* ------------------------------------------------------------*/
   /* obtain the style and color description from dprod.vcolor02*/
   /* ------------------------------------------------------------*/

  set SYCREC empty; /* Clear row storage area*/

  SYCREC.XGPCD = SW0XW01.XGPCD;
  SYCREC.SY1STNBR = SW0XW01.SY1STNBR;
  SYCREC.SY2CLRID = SW0XW01.SY2CLRID;
  SYCREC.XDMCD = SW0XW01.XDMCD;

  SW0XS05(); /* select 's ' dprod.vcolor02 row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SW0XW01.SY1SSTNM = SYCREC.SY1SSTNM; /* curr style desc*/
    SW0XW01.SY2CLRAB = SYCREC.SY2CLRAB; /* curr color desc*/
    SW0XW01.SW0XWNSD = SYCREC.SY1SSTNM; /* new style desc*/
    SW0XW01.SW0XWNCD = SYCREC.SY2CLRAB; /* new color desc*/

  end

   /* ------------------------------------------------------------*/
   /* translate size id to size description for display*/
   /* ------------------------------------------------------------*/

  set SYPREC empty;

  SW0XW00.SW0XWTFL = "N"; /* init translate flag*/
  SYPREC.SYPFC = "IE"; /* internal to external translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate not compressed format*/

  SYPREC.XGPCD = SW0XW01.XGPCD;
  SYPREC.SY1STNBR = SW0XW01.SY1STNBR;
  SYPREC.SY2CLRID = SW0XW01.SY2CLRID;
  SYPREC.XDMCD = SW0XW01.XDMCD;
  SYPREC.XQACD = SW0XW01.XQACD;

  SW0XW00.SW0XWLIX = +1; /* initialize load index*/
  SW0XW00.SW0XWIDX = +1; /* initialize index*/
  while (SW0XWIDX <= 8)
    if (SW0XW01.SY5SZID[SW0XWIDX] > 0)
      SYPREC.SY5SZID[SW0XWLIX] = SW0XW01.SY5SZID[SW0XWIDX];
      SW0XW00.SW0XWLIX = SW0XW00.SW0XWLIX + 1;
      SW0XW00.SW0XWTFL = "Y";
    end
    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;
  end

  if (SW0XW00.SW0XWTFL == "Y") /* size id's to translate*/

    /* ------------------------------------------------------------*/
      /* This routine will move each xlated size description to w/s*/
    /* ------------------------------------------------------------*/

    SW0XS06(); /* convert sizes*/

    SW0XW00.SW0XWIDX = 1; /* initialize index*/
    while (SW0XWIDX <= 8)
      if (SYPREC.SYPSZRC[SW0XWIDX] == 0) /* good size return code*/
        SW0XW01.SY4IDDSC[SW0XWIDX] = SYPREC.SY4IDDSC[SW0XWIDX];
        SW0XW01.SW0XWNSZ[SW0XWIDX] = SYPREC.SY4IDDSC[SW0XWIDX];
      else
        SLWREC.XXXLOCID = "100";
        converseLib.validationFailed(0001); /* <--- severe error msg*/
      end
      SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0XW00.SW0XWSWR = "N"; /* Request for data switch*/
  SW0XW01.CACHGFL = "Y"; /* data is available for change*/

end // end SW0X100

// select 's' dstloc.vrlhdr01 row
Function SW0X110()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlhdr01 table row*/
   /* ------------------------------------------------------------*/

  set SLVREC empty; /* Clear row storage area*/
  SLVREC.SLVFNC = "S "; /* function*/

  set SL1REC empty; /* Clear row storage area*/
  SL1REC.XWHCD = SLLREC.XWHCD;
  SL1REC.TS3CNTNR = SLLREC.TSHCNTNR;

  try
    call "IO1570" (SLVREC, SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL1REC.SL1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0X110

// load dstloc.vwophd01 into w/s
Function SW0X120()

   /* ------------------------------------------------------*/
   /* load "current" data into w/s*/
   /* ------------------------------------------------------*/

  SW0XW01.TSHCNTNR = SLLREC.TSHCNTNR;
  SW0XW01.SWEPLLNB = SLLREC.SWEPLLNB;
  SW0XW01.SL8WOGRP = SLLREC.SL8WOGRP;
  SW0XW01.PC3PONBR = SLLREC.PC3PONBR;
  SW0XW01.PC3POIDT = SLLREC.PC3POIDT;
  SW0XW01.PC4ORTYP = SLLREC.PC4ORTYP;
  SW0XW01.XGPCD = SLLREC.XGPCD;
  SW0XW01.SY1STNBR = SLLREC.SY1STNBR;
  SW0XW01.SY2CLRID = SLLREC.SY2CLRID;
  SW0XW01.XDMCD = SLLREC.XDMCD;
  SW0XW01.XQACD = SLLREC.XQACD;
  SW0XW01.PC2INSEG = SLLREC.PC2INSEG;
  SW0XW01.XEGCD = SLLREC.XEGCD;
  SW0XW01.XPGCD = SLLREC.XPGCD;
  SW0XW01.XUMCD = SLLREC.XUMCD;
  SW0XW01.XOWCD = SLLREC.XOWCD;
  SW0XW01.XSLCD = SLLREC.XSLCD;
  SW0XW01.SL8FRAR = SLLREC.SL8FRAR;
  SW0XW01.SL8FRZN = SLLREC.SL8FRZN;
  SW0XW01.SL8FRLC = SLLREC.SL8FRLC;
  SW0XW01.SL8TOAR = SLLREC.SL8TOAR;
  SW0XW01.SL8TOZN = SLLREC.SL8TOZN;
  SW0XW01.SL8TOLC = SLLREC.SL8TOLC;
  SW0XW01.SL2PALET = SLLREC.SL2PALET;
  SW0XW01.SY1UNPCS = SLLREC.SY1UNPCS;

  SW0XW01.PCFSECD = SLLREC.PCFSECD;
  SW0XW01.FY1FCTYC = SLLREC.FY1FCTYC;
  SW0XW01.SL8WOPY = SLLREC.SL8WOPY;
  SW0XW01.SL8WOPFL = SLLREC.SL8WOPFL;
  SW0XW01.YWTCD = SLLREC.YWTCD;
  SW0XW01.YWSCD = SLLREC.YWSCD;

   /* ------------------------------------------------------*/
   /* load "new" data into w/s*/
   /* ------------------------------------------------------*/

  SW0XW01.SW0XWGPC = SLLREC.XGPCD;
  SW0XW01.SW0XWSTY = SLLREC.SY1STNBR;
  SW0XW01.SW0XWCLR = SLLREC.SY2CLRID;
  SW0XW01.SW0XWDIM = SLLREC.XDMCD;
  SW0XW01.SW0XWXQA = SLLREC.XQACD;
  SW0XW01.SW0XWSEG = SLLREC.PC2INSEG;
  SW0XW01.SW0XWEDF = SLLREC.XEGCD;
  SW0XW01.SW0XWPKG = SLLREC.XPGCD;
  SW0XW01.SW0XWUOM = SLLREC.XUMCD;
  SW0XW01.SW0XWOWN = SLLREC.XOWCD;
  SW0XW01.SW0XWSLC = SLLREC.XSLCD;
  SW0XW01.SW0XWNFA = SLLREC.SL8FRAR;
  SW0XW01.SW0XWNFZ = SLLREC.SL8FRZN;
  SW0XW01.SW0XWNFL = SLLREC.SL8FRLC;
  SW0XW01.SW0XWNPL = SLLREC.SL2PALET;
  SW0XW01.SW0XWUPC = SLLREC.SY1UNPCS;


end // end SW0X120

// Format and converse the map
Function SW0X200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0XW00.SW0XWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0XW00.SW0XWSWF == "Y") /* Map must be formatted*/
      SW0X210(); /* Format the data on the map*/
    end

  end

  SW0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW0XM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0XM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")
    if (SLWREC.SLWMSGNO != 0)
      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end
    else
      SW0XM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
    SW0XM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/
    set SW0XM001 alarm; /* Indicate sound alarm*/
  end

  converse SW0XM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;
  COMMAREA.CAMSG = " ";

  COMMAREA.CATOAP = SW0XM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0XM001.CAITEM; /* Application data*/


end // end SW0X200

// Format m001 display data
Function SW0X210()

   /* ------------------------------------------------------------*/
   /* init map sw0xm001*/
   /* ------------------------------------------------------------*/

  set SW0XM001 initial; /* m001 input/ouput area*/

  SW0XW00.SW0XWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format sw0xm001 using key data*/
   /* ------------------------------------------------------------*/

  SW0XM001.XWHCD = SW0XW01.XWHCD; /* warehouse code*/
  SW0XM001.XWHABRV = SW0XW01.XWHABRV; /* warehous abrv desc*/
  SW0XM001.PKDNCSQN = SW0XW01.PKDNCSQN; /* pk carton seq number*/
  SW0XM001.XROPDEST = SW0XW01.XROPDEST; /* remote*/
  SW0XM001.SL8WONBR = SW0XW01.SL8WONBR; /* wo number*/

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (SW0XW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* position cursor for updates*/
   /* ------------------------------------------------------------*/

  if (SW0XW00.SW0XWSCF == "Y")
    set SW0XM001.PKDNCSQN cursor;
  else
    set SW0XM001.SW0XMSTY cursor;
  end

  SW0XW00.SW0XWSCF = "N";

   /* ------------------------------------------------------------*/
   /* load "current" data from sw0xw01 work record*/
   /* ------------------------------------------------------------*/

  SW0XM001.TSHCNTNR = SW0XW01.TSHCNTNR; /* container*/
  SW0XM001.SWEPLLNB = SW0XW01.SWEPLLNB; /* plan nbr*/
  SW0XM001.SL8WOGRP = SW0XW01.SL8WOGRP; /* wo group*/
  SW0XM001.PC3PONBR = SW0XW01.PC3PONBR; /* po number*/

   /* ------------------------------------------------------------*/
   /* get po id display format*/
   /* ------------------------------------------------------------*/

  set SWVREC empty;
  SWVREC.SWVWFNC = "ID";
  SWVREC.XGPCD = SW0XW01.XGPCD;
  SWVREC.PC3PONBR = SW0XW01.PC3PONBR;
  XSSLS10(); /* obtain po id*/
  if (SWVREC.SWVWRTN == 0)
    SW0XM001.SW0XMPID = SWVREC.SWVWPOID;
  end

  SW0XM001.PC4ORTYP = SW0XW01.PC4ORTYP; /* po id*/
  SW0XM001.SW0XMCRT = SW0XW01.SL2CASE; /* carton nbr*/
  SW0XM001.XGPCD = SW0XW01.XGPCD; /* gpc code*/
  SW0XM001.SY1STNBR = SW0XW01.SY1STNBR; /* style nbr*/
  SW0XM001.SY2CLRID = SW0XW01.SY2CLRID; /* color id*/
  SW0XM001.XDMCD = SW0XW01.XDMCD; /* dimension code*/
  SW0XM001.SY1SSTNM = SW0XW01.SY1SSTNM; /* style description*/
  SW0XM001.SY2CLRAB = SW0XW01.SY2CLRAB; /* color id description*/
  SW0XM001.XQACD = SW0XW01.XQACD; /* quality code*/
  SW0XM001.PC2INSEG = SW0XW01.PC2INSEG; /* iseg code*/
  SW0XM001.XEGCD = SW0XW01.XEGCD; /* edif code*/
  SW0XM001.XPGCD = SW0XW01.XPGCD; /* package code*/
  SW0XM001.XUMCD = SW0XW01.XUMCD; /* unit of measure*/
  SW0XM001.XOWCD = SW0XW01.XOWCD; /* owner group code*/
  SW0XM001.XSLCD = SW0XW01.XSLCD; /* class code*/
  SW0XM001.SL8FRAR = SW0XW01.SL8FRAR; /* from area code*/
  SW0XM001.SL8FRZN = SW0XW01.SL8FRZN; /* from zone code*/
  SW0XM001.SL8FRLC = SW0XW01.SL8FRLC; /* from location*/
  SW0XM001.SL8TOAR = SW0XW01.SL8TOAR; /* to area code*/
  SW0XM001.SL8TOZN = SW0XW01.SL8TOZN; /* to zone code*/
  SW0XM001.SL8TOLC = SW0XW01.SL8TOLC; /* to location*/
  SW0XM001.SL2PALET = SW0XW01.SL2PALET; /* pallet*/

  SW0XW00.SW0XWIDX = 1; /* init index*/
  while (SW0XW00.SW0XWIDX <= 8)

    SW0XM001.SY4IDDSC[SW0XWIDX] = SW0XW01.SY4IDDSC[SW0XWIDX]; /* size id*/
    SW0XM001.SL9WOQTY[SW0XWIDX] = SW0XW01.SL9WOQTY[SW0XWIDX]; /* size qty*/

    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* load "new" data from sw0xw01 work record*/
   /* ------------------------------------------------------------*/

  SW0XM001.SW0XMGPC = SW0XW01.SW0XWGPC; /* gpc code*/
  SW0XM001.SW0XMSTY = SW0XW01.SW0XWSTY; /* style nbr*/
  SW0XM001.SW0XMCLR = SW0XW01.SW0XWCLR; /* color id*/
  SW0XM001.SW0XMDIM = SW0XW01.SW0XWDIM; /* dimension code*/
  SW0XM001.SW0XMNSD = SW0XW01.SW0XWNSD; /* style description*/
  SW0XM001.SW0XMNCD = SW0XW01.SW0XWNCD; /* color id description*/
  SW0XM001.SW0XMXQA = SW0XW01.SW0XWXQA; /* quality code*/
  SW0XM001.SW0XMSEG = SW0XW01.SW0XWSEG; /* iseg code*/
  SW0XM001.SW0XMEDF = SW0XW01.SW0XWEDF; /* edif code*/
  SW0XM001.SW0XMPKG = SW0XW01.SW0XWPKG; /* package code*/
  SW0XM001.SW0XMUOM = SW0XW01.SW0XWUOM; /* unit of measure*/
  SW0XM001.SW0XMOWN = SW0XW01.SW0XWOWN; /* owner group code*/
  SW0XM001.SW0XMSLC = SW0XW01.SW0XWSLC; /* class code*/
  SW0XM001.SW0XMNFA = SW0XW01.SW0XWNFA; /* from area code*/
  SW0XM001.SW0XMNFZ = SW0XW01.SW0XWNFZ; /* from zone code*/
  SW0XM001.SW0XMNFL = SW0XW01.SW0XWNFL; /* from location code*/
  SW0XM001.SW0XMNPL = SW0XW01.SW0XWNPL; /* new pallet*/

  SW0XW00.SW0XWIDX = 1; /* init index*/
  while (SW0XW00.SW0XWIDX <= 8)

    SW0XM001.SW0XMNSZ[SW0XWIDX] = SW0XW01.SW0XWNSZ[SW0XWIDX];
                                   /* sz id*/
    SW0XM001.SW0XMNQT[SW0XWIDX] = SW0XW01.SW0XWNQT[SW0XWIDX]; /* sz qty*/

    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

  end


end // end SW0X210

// Check attention identifier
Function SW0X300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    SW0XW00.SW0XWSWR = "N"; /* request for data*/
    SW0XW00.SW0XWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSL001(); /* Exit to another application*/

      set SW0XM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(259); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    COMMAREA.XWHCD = SW0XM001.XWHCD;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0XM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* Application find code*/
    end

    XSSL001(); /* Exit to another application*/

    SW0XW00.SW0XWSWR = "N"; /* request for data*/
    SW0XW00.SW0XWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15) /* pf15 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0X300

// Reset highlighted fields
Function SW0X400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0XM001.XWHCD initialAttributes; /* warehouse code*/
  set SW0XM001.SL8WONBR initialAttributes; /* work order number*/
  set SW0XM001.PKDNCSQN initialAttributes; /* pk carton seq number*/

   /* ------------------------------------------------------------*/
   /* load "new" data from sw0xw01 work record*/
   /* ------------------------------------------------------------*/

  set SW0XM001.SW0XMXQA initialAttributes; /* quality code*/
  set SW0XM001.SW0XMSTY initialAttributes; /* style nbr*/
  set SW0XM001.SW0XMCLR initialAttributes; /* color id*/
  set SW0XM001.SW0XMDIM initialAttributes; /* dimension code*/
  set SW0XM001.SW0XMSEG initialAttributes; /* iseg code*/
  set SW0XM001.SW0XMEDF initialAttributes; /* edif code*/
  set SW0XM001.SW0XMPKG initialAttributes; /* package code*/
  set SW0XM001.SW0XMUOM initialAttributes; /* unit of measure*/
  set SW0XM001.SW0XMOWN initialAttributes; /* owner group code*/
  set SW0XM001.SW0XMSLC initialAttributes; /* class code*/
  set SW0XM001.SW0XMNFA initialAttributes; /* from area code*/
  set SW0XM001.SW0XMNFZ initialAttributes; /* from zone code*/
  set SW0XM001.SW0XMNFL initialAttributes; /* from location code*/
  set SW0XM001.SW0XMNTA initialAttributes; /* to area code*/
  set SW0XM001.SW0XMNTZ initialAttributes; /* to zone code*/
  set SW0XM001.SW0XMNTL initialAttributes; /* to location code*/
  set SW0XM001.SW0XMNPL initialAttributes; /* new pallet*/

  SW0XW00.SW0XWIDX = 1; /* init index*/
  while (SW0XW00.SW0XWIDX <= 8)

    set SW0XM001.SW0XMNSZ[SW0XWIDX] initialAttributes; /* sz id*/
    set SW0XM001.SW0XMNQT[SW0XWIDX] initialAttributes; /* sz qty*/

    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

  end

  set SW0XM001.CATOAP initialAttributes;
  set SW0XM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.XWHCD == "?"    /* warehouse list req*/
   || SW0XM001.SW0XMDIM == "?" /* or dimension list req*/
   || SW0XM001.SW0XMXQA == "?" /* or quality code req*/
   || SW0XM001.SW0XMEDF == "?" /* or edif list req*/
   || SW0XM001.SW0XMPKG == "?" /* or package list req*/
   || SW0XM001.SW0XMUOM == "?" /* or unit of measure list*/
   || SW0XM001.SW0XMOWN == "?" /* or owner group code*/
   || SW0XM001.SW0XMSLC == "?") /* or class code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.XWHCD == "?") /* warehouse requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0XM001.XWHCD = SW0XW01.XWHCD; /* Restore prior code*/
    else
      SW0XM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0XM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];
      SW0XW01.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0XW01.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];

    end

    set SW0XM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SW0XMDIM == "?") /* dimension list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIMENSION CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the dimension list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0XM001.SW0XMDIM = SW0XW01.SW0XWDIM; /* Restore prior code*/
    else
      SW0XW01.SW0XWDIM = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      SW0XM001.SW0XMDIM = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0XM001.SW0XMDIM cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of quality codes*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SW0XMXQA == "?") /* quality list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " QUALITY CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the quality list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0XM001.SW0XMXQA = SW0XW01.SW0XWXQA; /* Restore prior code*/
    else
      SW0XW01.SW0XWXQA = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
      SW0XM001.SW0XMXQA = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/

    end

    set SW0XM001.SW0XMXQA cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of engineering difference*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SW0XMEDF == "?") /* eng. dif list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "ENGINEERING CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXEG01(); /* Display the edf list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0XM001.SW0XMEDF = SW0XW01.SW0XWEDF; /* Restore prior code*/
    else
      SW0XW01.SW0XWEDF = XEGTBL.XEGCD[XX0XWPIX]; /* Selected code*/
      SW0XM001.SW0XMEDF = XEGTBL.XEGCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0XM001.SW0XMEDF cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of package codes.*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SW0XMPKG == "?") /* Package list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PACKAGE TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPG01(); /* Display the package list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0XM001.SW0XMPKG = SW0XW01.SW0XWPKG; /* Restore prior code*/
    else
      SW0XW01.SW0XWPKG = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
      SW0XM001.SW0XMPKG = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
    end

    set SW0XM001.SW0XMPKG cursor; /* Establish cursor position*/


  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of unit of measure codes*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SW0XMUOM == "?") /* Unit of measure requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "UNIT OF MEASURE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXUM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0XM001.SW0XMUOM = SW0XW01.SW0XWUOM; /* Restore prior code*/
    else
      SW0XM001.SW0XMUOM = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
      SW0XW01.SW0XWUOM = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0XM001.SW0XMUOM cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of owner group codes.*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SW0XMOWN == "?") /* Owner group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "OWNER GROUP CODES"; /* Heading*/
    XX0XW02.XWHCD = SW0XM001.XWHCD;

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOW01(); /* Display the owner group list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0XM001.SW0XMOWN = SW0XW01.SW0XWOWN; /* Restore prior code*/
    else
      SW0XW01.SW0XWOWN = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
      SW0XM001.SW0XMOWN = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0XM001.SW0XMOWN cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of stock locate class codes*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SW0XMSLC == "?") /* Owner group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "S.L. CLASS CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSL01(); /* Display the owner group list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0XM001.SW0XMSLC = SW0XW01.SW0XWSLC; /* Restore prior code*/
    else
      SW0XW01.SW0XWSLC = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/
      SW0XM001.SW0XMSLC = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0XM001.SW0XMSLC cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0X400

// Verify the entered data
Function SW0X500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0XM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* if requested screen print(pf6)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* request to print screen data(pf6)*/

    SW0X510(); /* verify if data has been modified*/

    if (SW0XW00.SW0XWMOD == "Y") /* data cannot be modified when*/
      converseLib.validationFailed(275); /* requesting print function*/
      SLWREC.XXXLOCID = "500";
    else
      if (SW0XW01.CACHGFL != "Y") /* if no data has been displayed*/
        converseLib.validationFailed(287); /* print function invalid*/
        SLWREC.XXXLOCID = "500";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* request to display: receiving r/l carton data(pf14)*/
                       /* receiving product key(pf15)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* request to display m002(pf14)*/
   || converseVar.eventKey is pf15) /* request to display m003(pf15)*/

    SW0X510(); /* verify if data has been mod*/

    if (SW0XW00.SW0XWMOD == "Y") /* data cannot be modified*/
      converseLib.validationFailed(265); /* display data cannot be changed*/
      SLWREC.XXXLOCID = "500";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    SW0X520(); /* verify qtys/product modified*/

    SW0X530(); /* validate entry fields*/

    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    if (SW0XM001.XWHCD != SW0XW01.XWHCD       /* warehouse changed*/
     || SW0XM001.XWHCD == " "                 
     || SW0XM001.SL8WONBR != SW0XW01.SL8WONBR /* work order number*/
     || SW0XM001.SL8WONBR == 0                
     || SW0XM001.PKDNCSQN != SW0XW01.PKDNCSQN /* pk seq nbr*/
     || SW0XM001.PKDNCSQN == 0)              

      SW0X510(); /* ck modifiable fields*/

      if (converseVar.validationMsgNum == 0)
        SW0XW00.SW0XWSWR = "Y"; /* request data request*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end SW0X500

// check modifiable fields
Function SW0X510()

   /* -----------------------------------------------------*/
   /* check modifiable fields*/
   /* -----------------------------------------------------*/

  SW0XW00.SW0XWMOD = "N";

  SW0XW00.SW0XWIDX = 1; /* init index*/
  while (SW0XW00.SW0XWIDX <= 8)

    if (SW0XM001.SW0XMNSZ[SW0XWIDX] != " ")
      if (SW0XM001.SW0XMNSZ[SW0XWIDX] != SW0XW01.SY4IDDSC[SW0XWIDX])
                                   /* sz id*/
        set SW0XM001.SW0XMNSZ[SW0XWIDX] cursor, bold;
        SW0XW00.SW0XWMOD = "Y";
      end
      if (SW0XM001.SW0XMNQT[SW0XWIDX] != SW0XW01.SL9WOQTY[SW0XWIDX])
                                   /* sz id*/
        set SW0XM001.SW0XMNQT[SW0XWIDX] cursor, bold;
        SW0XW00.SW0XWMOD = "Y";
      end
    end
    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;
  end

  if (SW0XW01.SW0XWNPL != SW0XM001.SW0XMNPL) /* new pallet*/
    set SW0XM001.SW0XMNPL cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWNTL != SW0XM001.SW0XMNTL /* to location code*/
   && SW0XM001.SW0XMNTL != " ")            
    set SW0XM001.SW0XMNTL cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWNTZ != SW0XM001.SW0XMNTZ /* to zone code*/
   && SW0XM001.SW0XMNTZ != " ")            
    set SW0XM001.SW0XMNTZ cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWNTA != SW0XM001.SW0XMNTA /* to area code*/
   && SW0XM001.SW0XMNTA != " ")            
    set SW0XM001.SW0XMNTA cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWSLC != SW0XM001.SW0XMSLC) /* class code*/
    set SW0XM001.SW0XMSLC cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWOWN != SW0XM001.SW0XMOWN) /* owner group code*/
    set SW0XM001.SW0XMOWN cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWUOM != SW0XM001.SW0XMUOM) /* unit of measure*/
    set SW0XM001.SW0XMUOM cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWPKG != SW0XM001.SW0XMPKG) /* package code*/
    set SW0XM001.SW0XMPKG cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWEDF != SW0XM001.SW0XMEDF) /* edif code*/
    set SW0XM001.SW0XMEDF cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWSEG != SW0XM001.SW0XMSEG) /* iseg code*/
    set SW0XM001.SW0XMSEG cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWXQA != SW0XM001.SW0XMXQA) /* quality code*/
    set SW0XM001.SW0XMXQA cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWDIM != SW0XM001.SW0XMDIM) /* dimension code*/
    set SW0XM001.SW0XMDIM cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWCLR != SW0XM001.SW0XMCLR) /* color id*/
    set SW0XM001.SW0XMCLR cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWSTY != SW0XM001.SW0XMSTY) /* style nbr*/
    set SW0XM001.SW0XMSTY cursor, bold;
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW00.SW0XWMOD == "Y")
    converseLib.validationFailed(264);
  end

   /* -----------------------------------------------------*/
   /* verify modifiable key fields*/
   /* -----------------------------------------------------*/

  if (converseVar.eventKey not enter)

    if (SW0XW01.SL8WONBR != SW0XM001.SL8WONBR) /* work order number*/
      set SW0XM001.SL8WONBR cursor, bold;
      converseLib.validationFailed(265);
    end

    if (SW0XW01.XROPDEST != SW0XM001.XROPDEST) /* remote number*/
      set SW0XM001.XROPDEST cursor, bold;
      converseLib.validationFailed(265);
    end

    if (SW0XW01.PKDNCSQN != SW0XM001.PKDNCSQN) /* pk carton seq number*/
      set SW0XM001.PKDNCSQN cursor, bold;
      converseLib.validationFailed(265);
    end

    if (SW0XW01.XWHCD != SW0XM001.XWHCD) /* warehouse code*/
      set SW0XM001.XWHCD cursor, bold;
      converseLib.validationFailed(265);
    end
  end

  if (SW0XW00.SW0XWMOD == "Y")
    SLWREC.XXXLOCID = "510";
    SW0XW00.SW0XWMOD = "N";
  end


end // end SW0X510

// verify data has been modified
Function SW0X520()

   /* -----------------------------------------------------*/
   /* check modifiable fields*/
   /* -----------------------------------------------------*/

  SW0XW00.SW0XWMOD = "N";
  SW0XW00.SW0XWPDE = "N";
  SW0XW00.SW0XWSZF = "N";
  SW0XW00.SW0XWQTF = "N";

  SW0XW00.SW0XWIDX = 1; /* init index*/
  while (SW0XW00.SW0XWIDX <= 8)

    SW0XW00.SW0XWCIX = 1; /* compare index*/
    while (SW0XW00.SW0XWCIX <= 8)
      if (SW0XM001.SW0XMNSZ[SW0XWCIX] != " ")
        if (SW0XM001.SW0XMNSZ[SW0XWCIX] != SW0XW01.SY4IDDSC[SW0XWIDX] /* sz id*/
         && SW0XW01.SY4IDDSC[SW0XWIDX] != " ")                       
          SW0XW00.SW0XWSZF = "Y";
          SW0XW00.SW0XWMOD = "Y";
        end
        if (SW0XM001.SW0XMNQT[SW0XWCIX] != SW0XW01.SL9WOQTY[SW0XWIDX] /* sz id*/
         && SW0XW01.SL9WOQTY[SW0XWIDX] != 0)                         
          SW0XW00.SW0XWMOD = "Y";
          SW0XW00.SW0XWQTF = "Y";
        end
      end
      SW0XW00.SW0XWCIX = SW0XW00.SW0XWCIX + 1;
    end
    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;
  end

  if (SW0XW01.SW0XWNPL != SW0XM001.SW0XMNPL /* new pallet*/
   || SW0XW01.SW0XWNTL != SW0XM001.SW0XMNTL /* to location code*/
   || SW0XW01.SW0XWNTZ != SW0XM001.SW0XMNTZ /* to zone code*/
   || SW0XW01.SW0XWNTA != SW0XM001.SW0XMNTA) /* to area code*/
    SW0XW00.SW0XWMOD = "Y";
  end

  if (SW0XW01.SW0XWSLC != SW0XM001.SW0XMSLC /* class code*/
   || SW0XW01.SW0XWOWN != SW0XM001.SW0XMOWN /* owner group code*/
   || SW0XW01.SW0XWUOM != SW0XM001.SW0XMUOM /* unit of measure*/
   || SW0XW01.SW0XWPKG != SW0XM001.SW0XMPKG /* package code*/
   || SW0XW01.SW0XWEDF != SW0XM001.SW0XMEDF /* edif code*/
   || SW0XW01.SW0XWSEG != SW0XM001.SW0XMSEG /* iseg code*/
   || SW0XW01.SW0XWDIM != SW0XM001.SW0XMDIM /* dimension code*/
   || SW0XW01.SW0XWCLR != SW0XM001.SW0XMCLR /* color id*/
   || SW0XW01.SW0XWSTY != SW0XM001.SW0XMSTY /* style nbr*/
   || SW0XW01.SW0XWXQA != SW0XM001.SW0XMXQA) /* quality code*/
    SW0XW00.SW0XWMOD = "Y";
    SW0XW00.SW0XWPDE = "Y";
  end


end // end SW0X520

// Verify the entered data
Function SW0X530()


   /* ------------------------------------------------------------*/
   /* Edit the required fields starting at the bottom of the*/
   /* map.*/
   /* ------------------------------------------------------------*/

  if (SW0XW01.CACHGFL == "Y")

    /* ------------------------------------------------------------*/
     /* Edit the required fields starting at the bottom of the*/
     /* map.*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
     /* If a size was entered, verify that a qty was entered also.*/
     /* only complete sets are moved to sw0xW02*/
    /* ------------------------------------------------------------*/

    SW0XW00.SW0XWSFL = "N"; /* init size entry flag*/
    SW0XW00.SW0XWTQT = 0; /* total original qty's*/
    SW0XW00.SW0XWTNQ = 0; /* total new qty's*/
    SW0XW00.SW0XWCNT = 0; /* init count field*/
    SW0XW00.SW0XWIDX = 8; /* init index*/

    while (SW0XW00.SW0XWIDX > 0) /* for each entry*/
      if (SW0XM001.SW0XMNSZ[SW0XWIDX] > " ") /* if size entered*/
        SW0XW00.SW0XWSFL = "Y";
        SW0XW00.SW0XWCNT = SW0XW00.SW0XWCNT + 1;
        if (SW0XM001.SW0XMNQT[SW0XWIDX] <= 0) /* if qty entered*/
          set SW0XM001.SW0XMNQT[SW0XWIDX] cursor, bold;
          converseLib.validationFailed(283); /* missing qty field*/
          SLWREC.XXXLOCID = "530";
        end
      else
        if (SW0XM001.SW0XMNQT[SW0XWIDX] > 0) /* qty entered*/
          converseLib.validationFailed(284); /* missing size field*/
          SLWREC.XXXLOCID = "530";
          set SW0XM001.SW0XMNSZ[SW0XWIDX] cursor, bold; /* Highlight*/
        end
      end
      SW0XWIDX = SW0XWIDX - 1; /* decrement index*/
    end

    if (SW0XW00.SW0XWSFL != "Y" /* no sizes were entered*/
     && converseVar.validationMsgNum == 0) /* no qty's were entered*/
      converseLib.validationFailed(359); /* siz/qty entry required*/
      SLWREC.XXXLOCID = "530";
      set SW0XM001.SW0XMNSZ[1] cursor, bold; /* Highlight*/
    else
      if (SW0XW00.SW0XWCNT > 1)
        if (SW0XM001.SW0XMXQA == "01")
          converseLib.validationFailed(377); /* one size for xqacd 01*/
          SLWREC.XXXLOCID = "530";
          set SW0XM001.SW0XMNSZ[1] cursor;
        end
        if (SW0XM001.SW0XMNPL != " "
         && SW0XM001.SW0XMXQA == "02")
          converseLib.validationFailed(377); /* one size for xqacd 02 if*/
          SLWREC.XXXLOCID = "530"; /* on a pallet*/
          set SW0XM001.SW0XMNSZ[1] cursor;
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* convert all sizes to internal format. check size return*/
     /* codes for invalid sizes.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0)

      set SYPREC empty;

      SYPREC.SYPFC = "EI"; /* external to internal translate*/
      SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

      SYPREC.XGPCD = SW0XM001.SW0XMGPC;
      SYPREC.SY1STNBR = SW0XM001.SW0XMSTY;
      SYPREC.SY2CLRID = SW0XM001.SW0XMCLR;
      SYPREC.XDMCD = SW0XM001.SW0XMDIM;
      SYPREC.XQACD = SW0XM001.SW0XMXQA;

      SW0XW00.SW0XWLIX = +1; /* initialize load index*/
      SW0XW00.SW0XWIDX = +1; /* initialize index*/
      move " " to SW0XW01.SW0XWSER[1] for all;
      move " " to SW0XW01.SW0XWNSZ[1] for all;
      move 0 to SW0XW01.SW0XWNSI[1] for all;
      move 0 to SW0XW01.SW0XWNQT[1] for all;

      while (SW0XWIDX <= 8)
        if (SW0XM001.SW0XMNSZ[SW0XWIDX] > " ")
          SYPREC.SY4IDDSC[SW0XWLIX] = SW0XM001.SW0XMNSZ[SW0XWIDX];
          SW0XW01.SW0XWNSZ[SW0XWLIX] = SW0XM001.SW0XMNSZ[SW0XWIDX];
          SW0XW01.SW0XWNQT[SW0XWLIX] = SW0XM001.SW0XMNQT[SW0XWIDX];
          SW0XW00.SW0XWTQT = SW0XW00.SW0XWTQT + SW0XM001.SL9WOQTY[SW0XWIDX];
          SW0XW00.SW0XWTNQ = SW0XW00.SW0XWTNQ + SW0XM001.SW0XMNQT[SW0XWIDX];
          SW0XM001.SW0XMNSZ[SW0XWIDX] = " ";
          SW0XM001.SW0XMNQT[SW0XWIDX] = 0;
          SW0XW00.SW0XWLIX = SW0XW00.SW0XWLIX + 1;
        end

        SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

      end

      /* ------------------------------------------------------------*/
        /* This routine will validate each size entered*/
        /* If any bad size return codes, set the screen attributes.*/
      /* ------------------------------------------------------------*/

      SW0XS06(); /* convert sizes*/

      SW0XW00.SW0XWIDX = 8; /* initialize index*/

      while (SW0XWIDX > 0)
        if (SYPREC.SYPSZRC[SW0XWIDX] != 0) /* good size return code*/
          set SW0XM001.SW0XMNSZ[SW0XWIDX] cursor, bold;
          SW0XW01.SW0XWSER[SW0XWIDX] = "E";
          SLWREC.XXXLOCID = "530";
          converseLib.validationFailed(238); /* size invalid for this product*/
        end
        SW0XW01.SW0XWNSI[SW0XWIDX] = SYPREC.SY5SZID[SW0XWIDX];
        SW0XM001.SW0XMNSZ[SW0XWIDX] = SW0XW01.SW0XWNSZ[SW0XWIDX];
        SW0XM001.SW0XMNQT[SW0XWIDX] = SW0XW01.SW0XWNQT[SW0XWIDX];

        SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX - 1;

      end
    end

    /* ------------------------------------------------------------*/
     /* verify no duplicate sizes have been entered*/
    /* ------------------------------------------------------------*/

    SW0XW00.SW0XWIDX = 1;
    while (SW0XW00.SW0XWIDX <= 8
     && converseVar.validationMsgNum == 0)

      /* ------------------------------------------------------------*/
       /* validate duplicate entries*/
      /* ------------------------------------------------------------*/

      SW0XW00.SW0XWCIX = 8;
      while (SW0XW00.SW0XWCIX >= 1)

        if (SW0XW00.SW0XWIDX < SW0XW00.SW0XWCIX
         && SW0XM001.SW0XMNSZ[SW0XWIDX] == SW0XM001.SW0XMNSZ[SW0XWCIX]
         && SW0XM001.SW0XMNSZ[SW0XWIDX] != " "
         && SW0XM001.SW0XMNSZ[SW0XWCIX] != " ")
          converseLib.validationFailed(41);
          SLWREC.XXXLOCID = "530";
          set SW0XM001.SW0XMNSZ[SW0XWCIX] cursor, bold;
        end
        SW0XW00.SW0XWCIX = SW0XW00.SW0XWCIX - 1;
      end
      SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;
    end

    /* ------------------------------------------------------------*/
     /* validate pallet nbr*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.XWHCD == "07"
     && SW0XM001.SW0XMNPL != SW0XM001.SL2PALET)
      converseLib.validationFailed(440);
      SW0XM001.XXXLOCID = "530";
      set SW0XM001.SW0XMNPL cursor, bold;
    else
      if (SW0XM001.SW0XMNPL != SW0XM001.SL2PALET
       /* transfer to existing pallet*/
       && SW0XM001.SW0XMNPL != " " /* hand stack pallet*/
       && SW0XM001.SW0XMNPL != "?") /* add to new pallet*/

        SW0X531(); /* select 'sa' dstloc.vwophdr01*/

        if (SQLCA.VAGen_SQLCODE == 100)
          set SW0XM001.SW0XMNPL cursor, bold;
          converseLib.validationFailed(340); /* invalid pallet for new product*/
          SW0XM001.XXXLOCID = "530";
        else

          SW0XM001.SW0XMNFL = SLLREC.SL8FRLC;

          set SLMREC empty;
          SLMREC.XWHCD = SLLREC.XWHCD;
          SLMREC.SL8WONBR = SLLREC.SL8WONBR;

          SW0XS07(); /* select 's2' dstloc.vwopit01*/

          SW0XS08(); /* select 'n2' dstloc.vwopit01*/

          SW0XW00.SW0XWIDX = +1; /* initialize index*/
          while (SW0XWIDX <= 8)

            if (SW0XM001.SW0XMNSZ[SW0XWIDX] != " "
             && SW0XW01.SW0XWSER[SW0XWIDX] != "E")
              if (SW0XW01.SW0XWNSI[SW0XWIDX] != SLMREC.SY5SZID
               || SW0XW01.SW0XWNQT[SW0XWIDX] != SLMREC.SL9WOQTY)
                SLWREC.XXXLOCID = "530";
                converseLib.validationFailed(340); /* pallet invalid for product*/
                set SW0XM001.SW0XMNPL cursor, bold;
              end
            end

            SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;
          end

          SW0XS09(); /* select 'n2' dstloc.vwopit01*/


          if (converseVar.validationMsgNum != 340) /* pallet is valid for new product*/
            SW0XM001.SW0XMNWO = SLLREC.SL8WONBR;
            if (SW0XM001.SW0XMNTA == " "
             && SW0XM001.SW0XMNTZ == " "
             && SW0XM001.SW0XMNTL == " ")
              SW0XM001.SW0XMNTA = SLLREC.SL8TOAR;
              SW0XM001.SW0XMNTZ = SLLREC.SL8TOZN;
              SW0XM001.SW0XMNTL = SLLREC.SL8TOLC;
            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* to area/zone cannot be 02/49*/
    /* ------------------------------------------------------------*/


    if (SW0XM001.SW0XMNTA == "02"
     && SW0XM001.SW0XMNTZ == "49") /* new from zone*/
      set SW0XM001.SW0XMNTZ cursor, bold;
      converseLib.validationFailed(420); /* invalid area zone*/
      SW0XM001.XXXLOCID = "530";
    end
    /* ------------------------------------------------------------*/
     /* validate 'to' area/zone/location codes*/
    /* ------------------------------------------------------------*/


    if (SW0XM001.SW0XMNTA != " " /* new from area*/
     || SW0XM001.SW0XMNTZ != " " /* new from zone*/
     || SW0XM001.SW0XMNTL != " ") /* new from location*/

      SW0X532(); /* validate user entered a/z/l*/

    end

    /* ------------------------------------------------------------*/
     /* sl class code*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.SW0XMSLC != SW0XW01.SW0XWSLC) /* class code*/
      if (SW0XM001.SW0XMSLC == " ")
        set SW0XM001.SW0XMSLC cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0XM001.XXXLOCID = "530";
      else
        if (SW0XM001.SW0XMSLC in XSLTBL.XSLCD)
          if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
             /* next sentence*/
          else
            set SW0XM001.SW0XMSLC cursor, bold;
            converseLib.validationFailed(10); /* inactive field*/
            SW0XM001.XXXLOCID = "530";
          end
        else
          set SW0XM001.SW0XMSLC cursor, bold;
          converseLib.validationFailed(360); /* invalid class code*/
          SW0XM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the owner group code*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.SW0XMOWN != SW0XW01.SW0XWOWN) /* Unit of measure entered*/
      if (SW0XM001.SW0XMOWN == " ")
        set SW0XM001.SW0XMOWN cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0XM001.XXXLOCID = "530";
      else
        XOWREC.XWHCD = SW0XM001.XWHCD;
        XOWREC.XOWCD = SW0XM001.SW0XMOWN;
        if (XOWREC.XOWKEY in XOWTBL.XOWCD)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
             /* next sentence*/
          else
            set SW0XM001.SW0XMOWN cursor, bold;
            converseLib.validationFailed(10); /* inactive field*/
            SW0XM001.XXXLOCID = "530";
          end
        else
          set SW0XM001.SW0XMOWN cursor, bold;
          converseLib.validationFailed(361); /* invalid owner group code*/
          SW0XM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit unit of measure*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.SW0XMUOM != SW0XW01.SW0XWUOM) /* Unit of measure entered*/
      if (SW0XM001.SW0XMUOM == "  ")
        set SW0XM001.SW0XMUOM cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0XM001.XXXLOCID = "530";
      else
        if (SW0XM001.SW0XMUOM in XUMTBL.XUMCD)
          if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
             /* next sentence*/
          else
            set SW0XM001.SW0XMUOM cursor, bold;
            converseLib.validationFailed(10); /* inactive field*/
            SW0XM001.XXXLOCID = "530";
          end
        else
          set SW0XM001.SW0XMUOM cursor, bold;
          converseLib.validationFailed(362); /* invalid unit of measure*/
          SW0XM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the package type*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.SW0XMPKG != SW0XW01.SW0XWPKG) /* package type code*/
      if (SW0XM001.SW0XMPKG == "  ")
        set SW0XM001.SW0XMPKG cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0XM001.XXXLOCID = "530";
      else
        if (SW0XM001.SW0XMPKG in XPGTBL.XPGCD)
          if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
             /* next sentence*/
          else
            set SW0XM001.SW0XMPKG cursor, bold;
            converseLib.validationFailed(10); /* inactive*/
            SW0XM001.XXXLOCID = "530";
          end
        else
          set SW0XM001.SW0XMPKG cursor, bold;
          converseLib.validationFailed(363); /* invalid package type code*/
          SW0XM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the edf*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.SW0XMEDF != SW0XW01.SW0XWEDF) /* edf code*/
      if (SW0XM001.SW0XMEDF == "  ")
        set SW0XM001.SW0XMEDF cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0XM001.XXXLOCID = "530";
      else
        if (SW0XM001.SW0XMEDF in XEGTBL.XEGCD)
          if (XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
             /* next sentence*/
          else
            set SW0XM001.SW0XMEDF cursor, bold;
            converseLib.validationFailed(10); /* inactive field*/
            SW0XM001.XXXLOCID = "530";
          end
        else
          set SW0XM001.SW0XMEDF cursor, bold;
          converseLib.validationFailed(364); /* invalid engineering difference code*/
          SW0XM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* validate iseg code*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.SW0XMSEG != SW0XW01.SW0XWSEG) /* seg code*/
      if (SW0XM001.SW0XMSEG == " ")
        converseLib.validationFailed(9); /* required field*/
        SLWREC.XXXLOCID = "530";
      else
        set PC2REC empty; /* Clear row storage area*/
        PC2REC.XGPCD = SW0XM001.SW0XMGPC;
        PC2REC.PC2INSEG = SW0XM001.SW0XMSEG;

        SW0XS13(); /* select 's ' dprodc.vprdcu01*/

        if (SQLCA.VAGen_SQLCODE == 100)
          set SW0XM001.SW0XMSEG cursor, bold;
          converseLib.validationFailed(365); /* invalid customer segment code*/
          SW0XM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the quality code*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.SW0XMXQA != SW0XW01.SW0XWXQA) /* quality code*/
      if (SW0XM001.SW0XMXQA == "  ")
        set SW0XM001.SW0XMXQA cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0XM001.XXXLOCID = "530";
      else
        if (SW0XM001.SW0XMXQA in XQATBL.XQACD)
          if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
             /* next sentence*/
          else
            set SW0XM001.SW0XMXQA cursor, bold;
            converseLib.validationFailed(10); /* inactive field*/
            SW0XM001.XXXLOCID = "530";
          end
        else
          set SW0XM001.SW0XMXQA cursor, bold;
          converseLib.validationFailed(366); /* invalid quality code*/
          SW0XM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the dimension code*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.SW0XMDIM != SW0XW01.SW0XWDIM) /* Unit of measure entered*/
      if (SW0XM001.SW0XMDIM == "  ")
        set SW0XM001.SW0XMDIM cursor, bold;
        converseLib.validationFailed(9); /* requiredfield*/
        SW0XM001.XXXLOCID = "530";
      else
        if (SW0XM001.SW0XMDIM in XDMTBL.XDMCD)
          if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
             /* next sentence*/
          else
            set SW0XM001.SW0XMDIM cursor, bold;
            converseLib.validationFailed(10); /* inactive field*/
            SW0XM001.XXXLOCID = "530";
          end
        else
          set SW0XM001.SW0XMDIM cursor, bold;
          converseLib.validationFailed(367); /* inactive field*/
          SW0XM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the product style color and dimension.*/
    /* ------------------------------------------------------------*/

    if (SW0XM001.SW0XMSTY != SW0XW01.SW0XWSTY
     || SW0XM001.SW0XMCLR != SW0XW01.SW0XWCLR)
      if (SW0XM001.SW0XMSTY == " " /* Style not entered*/
       || SW0XM001.SW0XMCLR == " ") /* color not entered*/
        if (SW0XM001.SW0XMSTY == " ") /* Style not entered*/
          converseLib.validationFailed(9); /* required field*/
          SW0XM001.XXXLOCID = "530";
          set SW0XM001.SW0XMSTY cursor, bold;
        end
        if (SW0XM001.SW0XMCLR == " ") /* color not entered*/
          converseLib.validationFailed(9); /* required field*/
          SW0XM001.XXXLOCID = "530";
          set SW0XM001.SW0XMCLR cursor, bold;
        end
      else

        set SYCREC empty;

        SYCREC.XGPCD = SW0XM001.SW0XMGPC;
        SYCREC.SY1STNBR = SW0XM001.SW0XMSTY;
        SYCREC.SY2CLRID = SW0XM001.SW0XMCLR;
        SYCREC.XDMCD = SW0XM001.SW0XMDIM;

        SW0XS05(); /* ; validate using dprod.vcolor02*/

        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          converseLib.validationFailed(56); /* Style/color is missing or invalid*/
          SW0XM001.XXXLOCID = "530";
          set SW0XM001.SW0XMSTY cursor, bold;
          set SW0XM001.SW0XMCLR bold;
          set SW0XM001.SW0XMDIM bold;
          SW0XM001.SW0XMNSD = " ";
          SW0XM001.SW0XMNCD = " ";
        else
          SW0XM001.SW0XMNSD = SYCREC.SY1SSTNM;
          SW0XM001.SW0XMNCD = SYCREC.SY2CLRAB;
        end
      end
    else
      SW0XM001.SW0XMNSD = SW0XW01.SY1SSTNM;
      SW0XM001.SW0XMNCD = SW0XW01.SY2CLRAB;
    end

    /* ------------------------------------------------------------*/
     /* if the 'new' product changed and the pallet number has*/
     /* not changed error out*/
    /* ------------------------------------------------------------*/

    if (SW0XW00.SW0XWPDE == "Y" /* product modified*/
     || SW0XW00.SW0XWSZF == "Y" /* or size was changed*/
     || SW0XW00.SW0XWQTF == "Y") /* or qty was changed*/
      if (SW0XM001.SL2PALET != " "
       && SW0XM001.SL2PALET == SW0XM001.SW0XMNPL)
        set SW0XM001.SW0XMNPL cursor, bold;
        converseLib.validationFailed(374); /* new location required*/
        SW0XM001.XXXLOCID = "530";
      end
    end
  end

    /* ------------------------------------------------------------*/
     /*  */
    /* ------------------------------------------------------------*/
  if (SW0XM001.XWHCD == "07")

    if (SW0XM001.SL8TOAR == "02")

      if (SW0XW00.SW0XWPDE == "Y"
       || SW0XW00.SW0XWSZF == "Y")

        if (SW0XM001.SW0XMNTA == " "
         && SW0XM001.SW0XMNTZ == " ")

          converseLib.validationFailed(443);
          SLWREC.XXXLOCID = "530";
          set SW0XM001.SW0XMNTA cursor, bold;

        end
      end
    end
  end
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* validate "KEY' fields*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* validate work order number*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SL8WONBR != SW0XW01.SL8WONBR
   && SW0XM001.SL8WONBR != 0)

    set SLLREC empty; /* Clear row storage area*/
    SLLREC.XWHCD = SW0XM001.XWHCD;
    SLLREC.SL8WONBR = SW0XM001.SL8WONBR;

    SW0XS01();

    if (SQLCA.VAGen_SQLCODE == 100)
      set SW0XM001.SL8WONBR bold;
      set SW0XM001.XWHCD cursor, bold;
      converseLib.validationFailed(369); /* whse/work order number invalid*/
      SW0XM001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate whse/carton seq/ work order number combination*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.PKDNCSQN > 0 
   && SW0XM001.XWHCD != " " /* warehouse code*/
   && SW0XM001.SL8WONBR != 0) /* work order entry made*/

    set SLOREC empty; /* Clear row storage area*/
    SLOREC.XWHCD = SW0XM001.XWHCD;
    SLOREC.PKDNCSQN = SW0XM001.PKDNCSQN;
    SLOREC.SL8WONBR = SW0XM001.SL8WONBR;

    SW0XS14(); /* select 's6' dstloc.vwophd02*/

    SW0XS15(); /* fetch 'n6' dstloc.vwophd02*/

    if (SQLCA.VAGen_SQLCODE == 100)
      set SW0XM001.PKDNCSQN bold;
      set SW0XM001.SL8WONBR bold;
      set SW0XM001.XWHCD cursor, bold;
      converseLib.validationFailed(370); /* invalid whse/crtn/wo nbr enterd*/
      SLWREC.XXXLOCID = "530";
    end

    SW0XS16(); /* close 'c6' dstloc.vwophd02*/

  end

   /* ------------------------------------------------------------*/
   /* validate whse/carton seq combination*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.PKDNCSQN > 0 
   && SW0XM001.XWHCD != " " /* warehouse code*/
   && SW0XM001.SL8WONBR == 0) /* work order nbr not entered*/

    SW0XW00.SW0XWCNT = 0; /* zero count*/
    set SLMREC empty; /* Clear row storage area*/
    SLMREC.XWHCD = SW0XM001.XWHCD;
    SLMREC.PKDNCSQN = SW0XM001.PKDNCSQN;

    SW0X533(); /* select 's3' dstloc.vwopit01*/

    SW0X534(); /* fetch  'n3' dstloc.vwopit01*/

    if (SQLCA.VAGen_SQLCODE == 100)
      set SW0XM001.PKDNCSQN bold;
      set SW0XM001.XWHCD cursor, bold;
      converseLib.validationFailed(371); /* invalid value*/
      SLWREC.XXXLOCID = "530";
    else
      while (SQLCA.VAGen_SQLCODE != 100)

        SW0XW00.SW0XWCNT = SW0XW00.SW0XWCNT + 1;

        SW0X534(); /* fetch  'n3' dstloc.vwopit01*/

      end

      if (SW0XW00.SW0XWCNT > 1)
        set SW0XM001.PKDNCSQN bold;
        set SW0XM001.XWHCD cursor, bold;
        SW0XM001.SL8WONBR = 0;
        converseLib.validationFailed(372); /* work order number required*/
        SLWREC.XXXLOCID = "530";
      else
        SW0XM001.SL8WONBR = SLMREC.SL8WONBR;
      end
    end

    SW0X535(); /* close  'c3' dstloc.vwopit01*/

  end

   /* ------------------------------------------------------------*/
   /* validate pk carton sequence number*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.PKDNCSQN == 0)
    set SW0XM001.PKDNCSQN cursor, bold;
    converseLib.validationFailed(9); /* carton sequence required*/
    SLWREC.XXXLOCID = "530";
  end

   /* ------------------------------------------------------------*/
   /* Edit whse code*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.XWHCD == "  ")
    set SW0XM001.XWHCD cursor, bold;
    converseLib.validationFailed(9); /* required field*/
    SLWREC.XXXLOCID = "530";
  else
    if (SW0XM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SW0XM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      else
        SW0XM001.XWHABRV = " ";
        set SW0XM001.XWHCD cursor, bold;
        converseLib.validationFailed(10); /* inactive*/
        SLWREC.XXXLOCID = "530";
      end
    else
      SW0XM001.XWHABRV = " ";
      set SW0XM001.XWHCD cursor, bold;
      converseLib.validationFailed(373); /* invalid warehouse code entered*/
      SLWREC.XXXLOCID = "530";
    end
  end



end // end SW0X530

// select 'sa' dstloc.vwophd01
Function SW0X531()

   /* ------------------------------------------------------------*/
   /* Select alternate unique dstloc.vwophd01 table row*/
   /* ------------------------------------------------------------*/

  set SLLREC empty;

  SLLREC.XWHCD = SW0XM001.XWHCD;
  SLLREC.XGPCD = SW0XM001.SW0XMGPC;
  SLLREC.SY1STNBR = SW0XM001.SW0XMSTY;
  SLLREC.SY2CLRID = SW0XM001.SW0XMCLR;
  SLLREC.XDMCD = SW0XM001.SW0XMDIM;
  SLLREC.XQACD = SW0XM001.SW0XMXQA;
  SLLREC.PC2INSEG = SW0XM001.SW0XMSEG;
  SLLREC.XEGCD = SW0XM001.SW0XMEDF;
  SLLREC.XPGCD = SW0XM001.SW0XMPKG;
  SLLREC.XUMCD = SW0XM001.SW0XMUOM;
  SLLREC.XOWCD = SW0XM001.SW0XMOWN;
  SLLREC.XSLCD = SW0XM001.SW0XMSLC;
  SLLREC.SL2PALET = SW0XM001.SW0XMNPL;
  SLLREC.SY1UNPCS = 0;

  try
    call "IO5400" ("SA", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "531"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X531

// Validate user entered a/z/l
Function SW0X532()

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

   /* validate user entered area/zone/location*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate "NEW" area code*/
   /* -----------------------------------------------------------*/

  if (SW0XM001.SW0XMNTA in XARTBL.XARCD)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")

      if (SW0XM001.XWHCD == "07")
        if (SW0XM001.SW0XMNTA == "01")

          converseLib.validationFailed(444);
          SLWREC.XXXLOCID = "532";
          set SW0XM001.SW0XMNTA cursor, bold;

        end
      end

    else

      converseLib.validationFailed(10); /* inactive area code*/
      SLWREC.XXXLOCID = "532";
      set SW0XM001.SW0XMNTA cursor, bold;

    end

  else

    converseLib.validationFailed(36); /* invalid area code*/
    SLWREC.XXXLOCID = "532";
    set SW0XM001.SW0XMNTA cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* validate "NEW" zone code*/
   /* -----------------------------------------------------------*/

  SW0XS26(); /* select 's' dstloc.vazone01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL4REC.YZTCD in YZTTBL.YZTCD)
      if (YZTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        converseLib.validationFailed(10); /* inactive zone code*/
        SLWREC.XXXLOCID = "532";
        set SW0XM001.SW0XMNTZ cursor, bold;
      end
    else
      converseLib.validationFailed(113); /* invalid zone code*/
      SLWREC.XXXLOCID = "532";
      set SW0XM001.SW0XMNTZ cursor, bold;
    end
  else
    converseLib.validationFailed(402); /* invalid area/zone*/
    SLWREC.XXXLOCID = "532";
    set SW0XM001.SW0XMNTZ bold;
    set SW0XM001.SW0XMNTA cursor, bold;
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* -----------------------------------------------------------*/
   /* if 'to' location was entered validate complete 'to'*/
   /* location.*/
   /* -----------------------------------------------------------*/

  if (SW0XM001.SW0XMNTL != " ")

    SW0XS17(); /* validate "to" a/z/l*/

  else /* ; obtain location using area/zone*/

    SW0XS18(); /* validate "to" a/z and obtain location*/

  end


end // end SW0X532

// select 's3' dstloc.vwopit01
Function SW0X533()
   /* ------------------------------------------------------------*/
   /* select set from dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("S3", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "533"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S3 ON DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X533

// fetch 'n3' dstloc.vwopit01
Function SW0X534()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("N3", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "534"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N3 ON DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X534

// close 'c3' dstloc.vwopit01
Function SW0X535()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("C3", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "535"; /* module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.validationFailed(1); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C3 ON DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X535

// Process valid input request
Function SW0X600()


   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  SW0XW00.SW0XWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update key data*/
   /* ------------------------------------------------------------*/

  SW0XW01.XWHCD = SW0XM001.XWHCD; /* warehouse*/
  if (SW0XW01.XWHCD in XWHTBL.XWHCD)
    SW0XW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  SW0XW01.SL8WONBR = SW0XM001.SL8WONBR;
  SW0XW01.PKDNCSQN = SW0XM001.PKDNCSQN;
  SW0XW01.XROPDEST = SW0XM001.XROPDEST;

  if (converseVar.eventKey is enter
   && SW0XW00.SW0XWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end


   /* --------------------------------------------------------*/
   /* request to transfer to unx carton maintenance appl.*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* transfer to application sw0y*/

    COMMAREA.XWHCD = SW0XM001.XWHCD;
    COMMAREA.CATOAP = "SW0Y"; /* transfer to applicaiton*/

    XSSL001(); /* Exit to another application*/

    SW0XW00.SW0XWSWR = "N"; /* request for data*/
    SW0XW00.SW0XWSWF = "Y"; /* format screen m001*/

    set SW0XM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* --------------------------------------------------------*/
   /* request to transfer to receiving product key maint. appl*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* transfer to application sw0z*/

    COMMAREA.XWHCD = SW0XM001.XWHCD;
    COMMAREA.CATOAP = "SW0Z"; /* transfer to applicaiton*/

    XSSL001(); /* Exit to another application*/

    SW0XW00.SW0XWSWR = "N"; /* request for data*/
    SW0XW00.SW0XWSWF = "Y"; /* format screen m001*/

    set SW0XM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* if data has been changed and entered pressed database*/
   /* update requested.  (go....for it !!!!)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* update requested*/

    if (SW0XW00.SW0XWMOD == "Y") /* product has been modified*/

      XX0XS01(); /* Obtain date and time*/

      /* ------------------------------------------------------------*/
       /* determine if a new w/o number is required for update*/
      /* ------------------------------------------------------------*/

      if (SW0XM001.SW0XMNWO == 0)
        SW0XM001.SW0XMNWO = SW0XM001.SL8WONBR;
      end

      if (SW0XM001.SW0XMNPL == "?")
        SW0XW02.SW0XWFNC = "G1";
        SW0XS20(); /* obtain next w/o number*/
        SW0XM001.SW0XMNWO = SL3REC.SL3NXWON;
      else
        if (SW0XM001.SL2PALET != " "
         && SW0XM001.SW0XMNPL == " ")
          SW0XW02.SW0XWFNC = "G1";
          SW0XS20(); /* obtain next w/o number*/
          SW0XM001.SW0XMNWO = SL3REC.SL3NXWON;
        end
      end

      /* ------------------------------------------------------------*/
       /* determine if a new pallet number is required for update*/
      /* ------------------------------------------------------------*/

      SW0XW00.SW0XWRPL = "N"; /* request for new pallet nbr*/
      if (SW0XM001.SW0XMNPL == "?")

        SW0XS21(); /* obtain next pallet number*/

        SW0XW00.SW0XWRPL = "Y"; /* request for new pallet nbr*/
        SW0XW01.SW0XWPLT = SWEREC.SWEPPLTN;
        SW0XM001.SW0XMNPL = SW0XW01.SW0XWPLT;

        SWEREC.SWEPPLTN = SWEREC.SWEPPLTN + 1;

        SW0XS25(); /* increment next pallet number*/

      end

      /* ------------------------------------------------------------*/
       /* verify/update dstloc.vlocate row*/
      /* ------------------------------------------------------------*/

      SW0X610(); /* verify/upd of "current" a/z/l*/

      /* ------------------------------------------------------------*/
       /* obtain default location and/or update location status*/
      /* ------------------------------------------------------------*/

      SW0X620(); /* obtain new location*/

      /* ------------------------------------------------------------*/
       /* process 'CURRENT' / 'NEW' dstloc.vwophd01/vwopit01 data*/
      /* ------------------------------------------------------------*/

      SW0X630();

      /* ------------------------------------------------------------*/
       /* process 'CURRENT' / 'NEW' dstloc.vrlitm01 data*/
      /* ------------------------------------------------------------*/

      SW0X640();

      /* ------------------------------------------------------------*/
       /* process the 'CURRENT' dstloc.vplnsy01 data*/
      /* ------------------------------------------------------------*/

      SW0X650();

      /* ------------------------------------------------------------*/
       /* process the 'CURRENT' dstloc.vplnlc01/dstloc.vplnsz01 data*/
      /* ------------------------------------------------------------*/

      SW0X660();

      /* ------------------------------------------------------------*/
       /* process the 'NEW' stock locate plan data*/
      /* ------------------------------------------------------------*/

      if (SW0XW00.SW0XWPDE == "Y") /* product changed*/

        /* ------------------------------------------------------------*/
         /* update/add 'new' dstloc.vplnsy01 row*/
        /* ------------------------------------------------------------*/

        SW0X670();

        /* ------------------------------------------------------------*/
         /* add 'new' dstloc.vplnlc01,dstloc.vplnsz01,dstloc.vplnta01*/
        /* ------------------------------------------------------------*/

        SW0X680();

      end

      /* ------------------------------------------------------*/
       /* submit lables*/
      /* ------------------------------------------------------*/

      if (SW0XM001.XWHCD == "51")

        SW0X690(); /* submit label job sl4131 for apparel*/

      else

        SW0X691(); /* submit label job sl4131 for footwear*/

      end

      /* ------------------------------------------------------------*/
       /* update dstloc.vplnhdr01 status to 'IP'*/
      /* ------------------------------------------------------------*/

      SW0XS21(); /* select 's' dstloc.vplnhdr01*/

      SWEREC.XRPCD = "IP"; /* receiving status code*/

      SW0XS25(); /* update 'u' dstloc.vplnhdr01*/


      /* --------------------------------------------------------*/
       /* commit all database changes*/
      /* --------------------------------------------------------*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();

      /* --------------------------------------------------------*/
       /* display the "new" work order data*/
      /* --------------------------------------------------------*/

      set SW0XW01 empty;
      SW0XW01.XWHCD = SW0XM001.XWHCD;
      SW0XW01.XWHABRV = SW0XM001.XWHABRV;
      SW0XW01.PKDNCSQN = SW0XM001.PKDNCSQN;
      SW0XW01.SL8WONBR = SW0XM001.SW0XMNWO;
      SW0XW01.XROPDEST = TA6REC.XURDEST;
      SW0XW00.SW0XWSWR = "Y"; /* requested data switch*/

      SW0XW00.SW0XWMOD = "N"; /* init tsq update flag*/
      SW0XW00.SW0XWPDE = "N"; /* product data entered*/
      SW0XW00.SW0XWPDD = "N"; /* product deleted flag*/
      SW0XW00.SW0XWOKY = "N"; /* key data flag*/

      SLWREC.SLWMSGNO = 20;
      SLWREC.XXXLOCID = "600";

    end
  end



end // end SW0X600

// VERIFY/UPDATE "CUR" A/Z/L
Function SW0X610()

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

   /* The select statement below verifies if more than one*/
   /* pk carton exist on the 'current' pallet. (excluding the*/
   /* 'current' pk carton, see iomod)  If not, the 'current'*/
   /* area/zone/location will be released (status 01) for*/
   /* reassignment.*/

   /* NOTE: a/z/l can not be shared between bulk and handstack*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SL2PALET != "  ")

    SW0X611(); /* select 's7' dstloc.vwophd02*/

    SW0X612(); /* fetch 'n7' dstloc.vwophd02*/

    if (SQLCA.VAGen_SQLCODE == 100)

      SW0X613(); /* select 's' dstloc.vlocat01*/

      SL5REC.YLSCD = "01"; /* empty status*/

      SW0XS22(); /* update 'u' dstloc.vlocat01*/

    end

    SW0X614(); /* close 'c7' dstloc.vwophd02*/

  else

    if (SW0XM001.SL2PALET == "  "
     && SW0XM001.SW0XMNPL != " ")

      SW0X613(); /* select 's' dstloc.vlocat01*/

      if (SL5REC.SL5MPDFL != "Y") /* not mul product location*/
        SL5REC.YLSCD = "01"; /* empty status*/

        SW0XS22(); /* update 'u' dstloc.vlocat01*/

      end

    else

      SW0X613(); /* select 's' dstloc.vlocat01*/

      if (SL5REC.YLTCD == "22" /* handstack location*/
       && SL5REC.SL5MPDFL != "Y") /* not mul product location*/
        SL5REC.YLSCD = "01"; /* empty status*/

        SW0XS22(); /* update 'u' dstloc.vlocat01*/

      end

    end
  end

end // end SW0X610

// select 's7' dstloc.vwophd02
Function SW0X611()

   /* ------------------------------------------------------------*/
   /* select dstloc.vwophd02 using current product and pallet*/
   /* ------------------------------------------------------------*/

  set SLSREC empty;
  SLSREC.SLSFNC = "S7";

  set SLOREC empty;

  SLOREC.XWHCD = SW0XW01.XWHCD;
  SLOREC.XGPCD = SW0XW01.XGPCD;
  SLOREC.SY1STNBR = SW0XW01.SY1STNBR;
  SLOREC.SY2CLRID = SW0XW01.SY2CLRID;
  SLOREC.XDMCD = SW0XW01.XDMCD;
  SLOREC.XQACD = SW0XW01.XQACD;
  SLOREC.PC2INSEG = SW0XW01.PC2INSEG;
  SLOREC.XEGCD = SW0XW01.XEGCD;
  SLOREC.XPGCD = SW0XW01.XPGCD;
  SLOREC.XUMCD = SW0XW01.XUMCD;
  SLOREC.XOWCD = SW0XW01.XOWCD;
  SLOREC.XSLCD = SW0XW01.XSLCD;
  SLOREC.SL2PALET = SW0XW01.SL2PALET;
  SLOREC.SY5SZID = SW0XW01.SY5SZID;
  SLOREC.PKDNCSQN = SW0XW01.PKDNCSQN; /* this is a ^= cond in iomod*/

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S7 TABLE DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0X611

// fetch 'n7' dstloc.vwophd02
Function SW0X612()

   /* ------------------------------------------------------------*/
   /* fetch  dstloc.vwophd02*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "N7";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row's not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH  N7 TABLE DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0X612

// "FROM" sel 's' dstloc.vlocat01
Function SW0X613()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vlocat01 table row*/
   /* ------------------------------------------------------------*/

  set SL5REC empty;

  SL5REC.XWHCD = SW0XM001.XWHCD;
  SL5REC.XARCD = SW0XM001.SL8TOAR;
  SL5REC.SL4ZONE = SW0XM001.SL8TOZN;
  SL5REC.SL5LOCTN = SW0XM001.SL8TOLC;

  try
    call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0X613

// close 'c7' dstloc.vwophd02
Function SW0X614()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwophd02 row*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "C7";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  SLWREC.XXXLOCID = "614";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C7 DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X614

// OBTAIN NEW A/Z/L DATA
Function SW0X620()


   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

   /* If "current" /  "new" product are both handstack reuse the*/
   /* area/zone/location.  If the product is transfered from*/
   /* bulk to handstack, or handstack to bulk, or bulk to bulk*/
   /* assign a new a/z/l.*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SW0XMNTA == " "
   && SW0XM001.SW0XMNTZ == " "
   && SW0XM001.SW0XMNTL == " ")

    if (SW0XM001.SL2PALET == " "
     && SW0XM001.SW0XMNPL == " ")

      SW0XM001.SW0XMNTA = SW0XM001.SL8TOAR;
      SW0XM001.SW0XMNTZ = SW0XM001.SL8TOZN;
      SW0XM001.SW0XMNTL = SW0XM001.SL8TOLC;

    else


      /* ------------------------------------------------------------*/
      /* ------------------------------------------------------------*/

       /* obtain "NEW" area/zone/location*/

      /* ------------------------------------------------------------*/
      /* ------------------------------------------------------------*/

      set SL5REC empty;

      SL5REC.XWHCD = SW0XM001.XWHCD;

      if (SW0XM001.SW0XMNPL == " ") /* handstack*/
        SL5REC.XARCD = "02";
        SL5REC.YLTCD = "22";
      else /* bulk*/
        SL5REC.XARCD = "01";
        SL5REC.YLTCD = "01";
      end

      SL5REC.SL4ZONE = "*";
      SL5REC.YLSCD = "01";
      SL5REC.SL-LOC-SZ-IND = "N";
      SL5REC.SL5MPDFL = "N";

      SW0XS10(); /* select 's2' dstloc.vlocat01*/

      SW0XS11(); /* fetch  'n2' dstloc.vlocat01*/

      if (SQLCA.VAGen_SQLCODE == 0)

        SW0XM001.SW0XMNTA = SL5REC.XARCD;
        SW0XM001.SW0XMNTZ = SL5REC.SL4ZONE;
        SW0XM001.SW0XMNTL = SL5REC.SL5LOCTN;

      end

      SW0XS12(); /* close 'c2' dstloc.vlocat01*/

    end
  end

   /* ------------------------------------------------------------*/
   /* change location status to in use for the defualt location*/
   /* and/or user entered location*/
   /* ------------------------------------------------------------*/

  if (SW0XW00.SW0XW-SYASG01-USED == "Y")

    SW0XW00.SW0XW-SYASG01-USED = "N";

  else

    set SL5REC empty;

    SL5REC.XWHCD = SW0XM001.XWHCD;
    SL5REC.XARCD = SW0XM001.SW0XMNTA;
    SL5REC.SL4ZONE = SW0XM001.SW0XMNTZ;
    SL5REC.SL5LOCTN = SW0XM001.SW0XMNTL;

    SW0XS19(); /* sel 's' dstloc.vlocat01*/

    if (SL5REC.YLTCD == "01" /* bulk*/
     || SL5REC.YLTCD == "22") /* handstack*/

      SL5REC.YLSCD = "08"; /* plan received status*/

    else

      SL5REC.YLSCD = "02"; /* occupied status*/

    end

    SW0XS22(); /* update 'u' dstloc.vlocat01*/

  end

end // end SW0X620

// PROCESS VWOPHD01/VWOPIT01
Function SW0X630()

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

   /* process dstloc.vwophd01/dstloc.vwopit01*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* verify if more than one pk crtn seq nbr exist for the*/
   /* 'current' work order, if so do not delete the dstloc.vwophd*/

   /* note: one w/o number per pallet (mult pk crtn seq nbr)*/
   /* ------------------------------------------------------------*/

  set SLOREC empty;

  SLOREC.XWHCD = SW0XM001.XWHCD;
  SLOREC.SL8WONBR = SW0XM001.SL8WONBR;
  SLOREC.PKDNCSQN = -1;

  SW0XS14(); /* select 's6' dstloc.vwophd02 cur*/

  SW0XS15(); /* fetch  'n6' dstloc.vwophd02 cur*/

  SW0XW00.SW0XWCNT = 0; /* init count field*/
  SW0XW01.SW0XWSPK = 0; /* init saved pk crtn seq nbr*/

  while (SQLCA.VAGen_SQLCODE == 0)

    if (SLOREC.PKDNCSQN != SW0XW01.SW0XWSPK)

      SW0XW00.SW0XWCNT = SW0XW00.SW0XWCNT + 1;
      SW0XW01.SW0XWSPK = SLOREC.PKDNCSQN;

    end

    SW0XS15(); /* fetch  'n6' dstloc.vwophd02 cur*/

  end

  SW0XS16(); /* close  'c6' dstloc.vwophd02 cur*/

   /* ------------------------------------------------------------*/
   /* select dstloc.vwophd01 using the 'current' work order*/
   /* if the pk crtn seq being processed is the only pk crtn seq*/
   /* nbr attached to this work order delete the dstloc.vwophd01*/
   /* ------------------------------------------------------------*/

  set SLLREC empty;

  SLLREC.XWHCD = SW0XM001.XWHCD;
  SLLREC.SL8WONBR = SW0XM001.SL8WONBR;

  SW0XS01(); /* select 's' dstloc.vwophd01 cur*/

  if (SW0XW00.SW0XWCNT == 1) /* no more cartons for this w/o*/

    SW0X632(); /* delete 'd' dstloc.vwophd01 cur*/

  end

   /* ------------------------------------------------------------*/
   /* select dstloc.vwophd01 using the 'new' work order*/
   /* if the w/o nbr exists update it else add it.*/
   /* ------------------------------------------------------------*/

  SLLREC.XWHCD = SW0XM001.XWHCD;
  SLLREC.SL8WONBR = SW0XM001.SW0XMNWO;

  SW0XS01(); /* select 's' dstloc.vwophd01 new*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SW0X633(); /* update 'u' dstloc.vwophdr01 new*/

  else

    SW0X634(); /* add 'a' dstloc.vwophdr01 new*/

  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

   /* delete "CURRENT" dstloc.vwopit01*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  SW0XW00.SW0XWOKY = "Y"; /* current item must exist*/
  SW0XW00.SW0XWIDX = 1;
  while (SW0XW00.SW0XWIDX <= 8) /* process all sizes*/

    if (SW0XM001.SY4IDDSC[SW0XWIDX] != " ")
      set SLMREC empty;
      SLMREC.XWHCD = SW0XM001.XWHCD;
      SLMREC.SL8WONBR = SW0XM001.SL8WONBR;
      SLMREC.PKDNCSQN = SW0XM001.PKDNCSQN;
      SLMREC.SY5SZID = SW0XW01.SY5SZID[SW0XWIDX];

      SW0X635(); /* select 's' dstloc.vwopit01 row*/

      SW0X636(); /* delete 'd' dstloc.vwopit01 row*/

    end
    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

   /* add "NEW" dstloc.vwopit01*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  SW0XW00.SW0XWOKY = "N"; /* new item optional*/
  SW0XW00.SW0XWIDX = 1;
  while (SW0XW00.SW0XWIDX <= 8) /* process all sizes*/

    if (SW0XM001.SW0XMNSZ[SW0XWIDX] != " ")
      set SLMREC empty;
      SLMREC.XWHCD = SW0XM001.XWHCD;
      SLMREC.SL8WONBR = SW0XM001.SW0XMNWO;
      SLMREC.PKDNCSQN = SW0XM001.PKDNCSQN;
      SLMREC.SY5SZID = SW0XW01.SW0XWNSI[SW0XWIDX];

      SW0X635(); /* select 's' dstloc.vwopit01 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        SW0X637(); /* update 'u' dstloc.vwopit01 row*/
      else
        SW0X638(); /* add 'a' dstloc.vwopit01 row*/
      end

    end
    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* verify if all the prk crtn seq labels have been printed*/
   /* if so update dstloc.vwophdr01 w/o print flag*/
   /* ------------------------------------------------------------*/

  set SLOREC empty;

  SLOREC.XWHCD = SW0XM001.XWHCD;
  SLOREC.SL8WONBR = SW0XM001.SL8WONBR;
  SLOREC.PKDNCSQN = -1;

  SW0XS14(); /* select 's6' dstloc.vwophd02 cur*/

  SW0XS15(); /* fetch  'n6' dstloc.vwophd02 cur*/

  SW0XW00.SW0XWPTF = "Y"; /* print flag*/
  while (SQLCA.VAGen_SQLCODE == 0
   && SW0XW00.SW0XWPTF == "Y")

    if (SLOREC.SLMWCPFL != "Y")
      SW0XW00.SW0XWPTF = "N";
    end

    SW0XS15(); /* fetch  'n6' dstloc.vwophd02 cur*/

  end

  SW0XS16(); /* close  'c6' dstloc.vwophd02 cur*/

   /* ------------------------------------------------------------*/
   /* select dstloc.vwophd01 using the 'new' work order*/
   /* update the w/o print flag*/
   /* ------------------------------------------------------------*/

  if (SW0XW00.SW0XWPTF == "Y") /* all crtns for w/o have been prt*/

    set SLLREC empty;

    SLLREC.XWHCD = SW0XM001.XWHCD;
    SLLREC.SL8WONBR = SW0XM001.SW0XMNWO;

    SW0XS01(); /* select 's' dstloc.vwophd01 new*/

    if (SQLCA.VAGen_SQLCODE == 0)

      SLLREC.SL8WOPFL = "Y"; /* set print flag to yes*/

      SW0XS29(); /* update 'u' dstloc.vwophdr01 new*/

    end
  end


end // end SW0X630

// del 'd' dstloc.vwophd01 cur
Function SW0X632()
   /* ------------------------------------------------------------*/
   /* delete unique dstloc.vwophd01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5400" ("D ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "632"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DEL DSTLOC.VWOPHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0X632

// update 'u' dstloc.vwophd01 new
Function SW0X633()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vwophd01 table row*/
   /* ------------------------------------------------------------*/

  if (SLLREC.XQACD == "01")

    SLLREC.SY1UNPCS = SW0XW00.SW0XWTNQ;

  else
    if (SW0XM001.SW0XMXQA == "02")

      /* ------------------------------------------------------*/
       /* subtract the old qty's out of the unit per case total*/
      /* ------------------------------------------------------*/

      SLLREC.SY1UNPCS = SLLREC.SY1UNPCS - SW0XW00.SW0XWTQT;

      /* ------------------------------------------------------*/
       /* add the new qty's into the unit per case total*/
      /* ------------------------------------------------------*/

      SLLREC.SY1UNPCS = SLLREC.SY1UNPCS + SW0XW00.SW0XWTNQ;

    end
  end

  SLLREC.SL8TOAR = SW0XM001.SW0XMNTA;
  SLLREC.SL8TOZN = SW0XM001.SW0XMNTZ;
  SLLREC.SL8TOLC = SW0XM001.SW0XMNTL;

  SLLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SLLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5400" ("U ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "633"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VWOPHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X633

// add 'a' dstloc.vwophd01 new
Function SW0X634()
   /* ------------------------------------------------------------*/
   /* add dstloc.vwophd01 table row*/
   /* ------------------------------------------------------------*/

   /* load new work order number*/

  SLLREC.SL8WONBR = SW0XM001.SW0XMNWO;

   /* load data modified on m001*/

  SLLREC.SY1STNBR = SW0XM001.SW0XMSTY;
  SLLREC.SY2CLRID = SW0XM001.SW0XMCLR;
  SLLREC.XDMCD = SW0XM001.SW0XMDIM;
  SLLREC.XOWCD = SW0XM001.SW0XMOWN;
  SLLREC.PC2INSEG = SW0XM001.SW0XMSEG;
  SLLREC.XEGCD = SW0XM001.SW0XMEDF;
  SLLREC.XPGCD = SW0XM001.SW0XMPKG;
  SLLREC.XQACD = SW0XM001.SW0XMXQA;
  SLLREC.XUMCD = SW0XM001.SW0XMUOM;
  SLLREC.XSLCD = SW0XM001.SW0XMSLC;
  SLLREC.SL8TOAR = SW0XM001.SW0XMNTA;
  SLLREC.SL8TOZN = SW0XM001.SW0XMNTZ;
  SLLREC.SL8TOLC = SW0XM001.SW0XMNTL;
  SLLREC.SL2PALET = SW0XM001.SW0XMNPL;
  SLLREC.SY1UNPCS = SW0XW00.SW0XWTNQ;
  SLLREC.SL8CRTBY = COMMAREA.CAUSERID;
  SLLREC.SL8UPDBY = COMMAREA.CAUSERID;
  SLLREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  SLLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SLLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  SLLREC.SL8WOPFL = "N";

  try
    call "IO5400" ("A ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "634"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VWOPHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0X634

// select 's' dstloc.vwopit01 cur
Function SW0X635()
   /* ------------------------------------------------------------*/
   /* select unique dstloc.vwopit01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("S ", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SW0XW00.SW0XWOKY == "Y" /* current item must exist*/
       && SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        /* next sentence*/

      else

        return;

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "635"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SEL DSTLOC.VWOPIT01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLMREC.SLMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X635

// delete 'd' dstloc.vwopit01 cur
Function SW0X636()
   /* ------------------------------------------------------------*/
   /* delete unique dstloc.vwopit01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("D ", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "636"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DEL DSTLOC.VWOPIT01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLMREC.SLMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0X636

// update 'u' dstloc.vwopit01 new
Function SW0X637()
   /* ------------------------------------------------------------*/
   /* update unique dstloc.vwopit01 row*/
   /* ------------------------------------------------------------*/

  SLMREC.SL9WOQTY = SW0XM001.SW0XMNQT[SW0XWIDX];
  SLMREC.SLMWCPFL = "Y";

  SLMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SLMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5410" ("U ", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0XW00.SW0XWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "637"; /* Module identification*/
      SLWREC.SLWMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "637"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VWOPIT01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLMREC.SLMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X637

// add 'a' dstloc.vwopit01 new
Function SW0X638()
   /* ------------------------------------------------------------*/
   /* add dstloc.vwopit01 table row*/
   /* ------------------------------------------------------------*/

  set SLMREC empty;

  SLMREC.XWHCD = SW0XM001.XWHCD;
  SLMREC.SL8WONBR = SW0XM001.SW0XMNWO;
  SLMREC.SY5SZID = SW0XW01.SW0XWNSI[SW0XWIDX];
  SLMREC.PKDNCSQN = SW0XW01.PKDNCSQN;
  SLMREC.TSOCRTNB = SW0XW01.TSOCRTNB;
  SLMREC.SLMWCPFL = "Y";
  SLMREC.SL9WOQTY = SW0XM001.SW0XMNQT[SW0XWIDX];
  SLMREC.SLMPUNBR = 0;
  SLMREC.SLDLBLDT = 0;

  SLMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SLMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5410" ("A ", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "638"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VWOPIT01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLMREC.SLMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0X638

// PROCESS VRLHDR01/VRLITM01
Function SW0X640()

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

   /* process "CURRENT" dstloc.vrlitm01 data*/

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

  set SL2REC empty; /* Clear row storage area*/

  SL2REC.XWHCD = SW0XW01.XWHCD;
  SL2REC.TS3CNTNR = SW0XW01.TSHCNTNR;
  SL2REC.SWEPLLNB = SW0XW01.SWEPLLNB;
  SL2REC.SL2PALET = SW0XW01.SL2PALET;
  SL2REC.SL2CASE = SW0XW01.SL2CASE;
  SL2REC.PKDNCSQN = SW0XW01.PKDNCSQN;
  SL2REC.PC3POIDT = SW0XW01.PC3POIDT;
  SL2REC.PCFSECD = SW0XW01.PCFSECD;
  SL2REC.FY1FCTYC = SW0XW01.FY1FCTYC;
  SL2REC.PC4ORTYP = SW0XW01.PC4ORTYP;
  SL2REC.PC3PONBR = SW0XW01.PC3PONBR;
  SL2REC.XGPCD = SW0XW01.XGPCD;
  SL2REC.SY1STNBR = SW0XM001.SY1STNBR;
  SL2REC.SY2CLRID = SW0XM001.SY2CLRID;
  SL2REC.XDMCD = SW0XM001.XDMCD;
  SL2REC.XQACD = SW0XM001.XQACD;
  SL2REC.XOWCD = SW0XM001.XOWCD;
  SL2REC.XUMCD = SW0XM001.XUMCD;
  SL2REC.PC2INSEG = SW0XM001.PC2INSEG;
  SL2REC.XEGCD = SW0XM001.XEGCD;
  SL2REC.XPGCD = SW0XM001.XPGCD;
  SL2REC.XSLCD = SW0XM001.XSLCD;

   /* ---------------------------------------------------*/
   /* process 'current' dstloc.vrlitm01 sizes*/
   /* ---------------------------------------------------*/

  SW0XW00.SW0XWOKY = "Y";

  SW0XW00.SW0XWIDX = 1;
  while (SW0XW00.SW0XWIDX <= 8) /* process all sizes*/

    if (SW0XM001.SY4IDDSC[SW0XWIDX] != " ")

      /* ------------------------------------------------------*/
       /* if the product has not change, determine which sizes*/
       /* have been removed from the product.(if any)*/
      /* ------------------------------------------------------*/

      if (SW0XW00.SW0XWPDE == "N") /* product has not changed*/
        SW0XW00.SW0XWCIX = 1; /* init compare index*/
        SW0XW00.SW0XWFFL = "N"; /* init found flag*/

        while (SW0XW00.SW0XWCIX <= 8
         && SW0XW00.SW0XWFFL != "Y")

          if (SW0XM001.SY4IDDSC[SW0XWIDX] == SW0XM001.SW0XMNSZ[SW0XWCIX])
            SW0XW00.SW0XWFFL = "Y";
          end

          SW0XW00.SW0XWCIX = SW0XW00.SW0XWCIX + 1;

        end
      end

      /* ------------------------------------------------------*/
       /* if the size has been removed from this product or the*/
       /* product has changed delete the size row(s).*/
      /* ------------------------------------------------------*/

      if (SW0XW00.SW0XWFFL == "N" /* delete size*/
       || SW0XW00.SW0XWPDE == "Y" /* product changed*/
       || SW0XM001.SW0XMNPL != SW0XM001.SL2PALET) /* pallet changed*/

        SL2REC.SY5SZID = SW0XW01.SY5SZID[SW0XWIDX];

        SW0X641(); /* select 'sb' dstloc.vrlitm01 cur*/

        SW0XW01.SW0XWSQT[SW0XWIDX] = SL2REC.TSOSHPQT;

        SW0X642(); /* delete 'd2' dstloc.vrlitm01 cur*/

        if (SW0XW00.SW0XWFFL == "N"
         || SW0XW00.SW0XWPDE == "Y")

          SL2REC.TSOSHPQT = 0;

        end

      end
    end

    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

  end


   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

   /* process "NEW" dstloc.vrlitm01 data*/

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

  SL2REC.SY1STNBR = SW0XM001.SW0XMSTY;
  SL2REC.SY2CLRID = SW0XM001.SW0XMCLR;
  SL2REC.XDMCD = SW0XM001.SW0XMDIM;
  SL2REC.XQACD = SW0XM001.SW0XMXQA;
  SL2REC.XOWCD = SW0XM001.SW0XMOWN;
  SL2REC.XUMCD = SW0XM001.SW0XMUOM;
  SL2REC.PC2INSEG = SW0XM001.SW0XMSEG;
  SL2REC.XEGCD = SW0XM001.SW0XMEDF;
  SL2REC.XPGCD = SW0XM001.SW0XMPKG;
  SL2REC.XSLCD = SW0XM001.SW0XMSLC;

  SW0XW00.SW0XWOKY = "N";

  SW0XW00.SW0XWIDX = 1;
  while (SW0XW00.SW0XWIDX <= 8) /* process all sizes*/

    if (SW0XM001.SW0XMNSZ[SW0XWIDX] != " ")

      SL2REC.SY5SZID = SW0XW01.SW0XWNSI[SW0XWIDX];

      SW0X641(); /* select 'sb' dstloc.vrlitm01 new*/

      if (SQLCA.VAGen_SQLCODE == 0)

        SW0XW01.SW0XWSQT[SW0XWIDX] = SL2REC.TSOSHPQT;

        SW0X642(); /* delete 'd2' dstloc.vrlitm01 row new*/

      end

      if (SW0XM001.SW0XMXQA == "01")
        SL2REC.SY1UNPCS = SW0XW00.SW0XWTNQ;
      end

      /* ******************************************************/
      /* NEXT: WE'LL CHECK IF THE ONLY FIELD               **/
      /* CHANGED WAS THE XSL-CLASS-CD XSLCD          **/
      /* BY CHECKING ALL OTHER FIELDS IN THE PRODUCT **/
      /* ******************************************************/

      if (SW0XW00.SW0XWSZF == "N"
       && SW0XW01.SW0XWOWN == SW0XM001.SW0XMOWN
       && SW0XW01.SW0XWUOM == SW0XM001.SW0XMUOM
       && SW0XW01.SW0XWPKG == SW0XM001.SW0XMPKG
       && SW0XW01.SW0XWEDF == SW0XM001.SW0XMEDF
       && SW0XW01.SW0XWSEG == SW0XM001.SW0XMSEG
       && SW0XW01.SW0XWDIM == SW0XM001.SW0XMDIM
       && SW0XW01.SW0XWCLR == SW0XM001.SW0XMCLR
       && SW0XW01.SW0XWSTY == SW0XM001.SW0XMSTY
       && SW0XW01.SW0XWXQA == SW0XM001.SW0XMXQA)
        SL2REC.TSOSHPQT = SW0XW01.SW0XWSQT[SW0XWIDX];
      else
        SL2REC.TSOSHPQT = 0;
      end

      SL2REC.SL2RCVD = SW0XM001.SW0XMNQT[SW0XWIDX];
      SL2REC.SL5LOCTN = SW0XM001.SW0XMNFL;
      SL2REC.SL8TOAR = SW0XM001.SW0XMNTA;
      SL2REC.SL8TOZN = SW0XM001.SW0XMNTZ;
      SL2REC.SL8TOLC = SW0XM001.SW0XMNTL;
      SL2REC.SL2PALET = SW0XM001.SW0XMNPL;

      SW0X643(); /* add dstloc.vrlitm01 row new*/

    end

    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

  end

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

   /* if 'new' quality code is 02 update all products*/
   /* for the specific whse / pk carton seq nbr with the*/
   /* new units per case total*/

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

  if (SW0XM001.SW0XMXQA == "02")

    /* ------------------------------------------------------*/
     /* subtract the old qty's out of the unit per case total*/
    /* ------------------------------------------------------*/

    SL2REC.SY1UNPCS = SL2REC.SY1UNPCS - SW0XW00.SW0XWTQT;

    /* ------------------------------------------------------*/
     /* add the new qty's into the unit per case total*/
    /* ------------------------------------------------------*/

    SL2REC.SY1UNPCS = SL2REC.SY1UNPCS + SW0XW00.SW0XWTNQ;

    /* ------------------------------------------------------*/
     /* save new units per case total*/
    /* ------------------------------------------------------*/

    SW0XW00.SW0XWNM1 = SL2REC.SY1UNPCS;

    /* ------------------------------------------------------*/
     /* update all products for the whse/pk carton unit per*/
     /* case total.*/
    /* ------------------------------------------------------*/

    SW0X644(); /* select 'sc' dstloc.vrlitm01*/

    SW0X645(); /* fetch  'nc' dstloc.vrlitm01*/

    while (SQLCA.VAGen_SQLCODE == 0)

      if (SL2REC.XQACD == "02")

        SW0X642(); /* delete 'd1' dstloc.vrlitm01 case*/

        SL2REC.SY1UNPCS = SW0XW00.SW0XWNM1;

        SW0X643(); /* add 'a' dstloc.vrlitm01 case*/

      end

      SW0X645(); /* fetch  'nc' dstloc.vrlitm01*/

    end

    SW0X646(); /* close 'cc' dstloc.vrlitm01 row*/

  end


end // end SW0X640

// sel 'sb' dstloc.vrlitm01 row
Function SW0X641()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "SB"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 100
       && SW0XW00.SW0XWOKY == "Y")
        /* next sentence*/
      else

        return;

      end
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "641"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0X641

// del 'd2' dstloc.vrlitm01 row
Function SW0X642()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "D2"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "642"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE DSTLOC.VRLITM01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X642

// add 'a' dstloc.vrlitm01 row
Function SW0X643()

   /* ------------------------------------------------------------*/
   /* add dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "A "; /* function*/

  SL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "643"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VRLITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X643

// sel 'sc' dstloc.vrlitm01 set
Function SW0X644()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "SC"; /* function*/

  set SL2REC empty; /* Clear row storage area*/
  SL2REC.XWHCD = SW0XW01.XWHCD;
  SL2REC.PKDNCSQN = SW0XW01.PKDNCSQN;

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "644"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SC SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X644

// fetch 'nc' dstloc.vrlitm01 row
Function SW0X645()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "NC"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "645"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NC NEXT ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X645

// close 'cc' dstloc.vrlitm01
Function SW0X646()
   /* ------------------------------------------------------------*/
   /* close dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "CC"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  SLWREC.XXXLOCID = "646";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CC VRLITM01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X646

// PROCESS 'CUR' PRODUCT DATA
Function SW0X650()

   /* ------------------------------------------------------------*/
   /* select 'current' dstloc.vplnsy01 row*/
   /* ------------------------------------------------------------*/

  SW0X651();

  SW0XW01.SWGPSEQN = SWGREC.SWGPSEQN; /* save field for task cd*/

   /* ----------------------------------------------------*/
   /* process 'current' dstloc.vplnsy01 totals*/
   /* ----------------------------------------------------*/

   /* ----------------------------------------------------*/
   /* if the 'current' product changes:*/

   /* -subtract 1 from total cartons*/
   /* -subtract 'current' qty's from total carton units*/
   /* ----------------------------------------------------*/

  if (SW0XW00.SW0XWPDE == "Y") /* product has been changed*/

    SWGREC.SWGPRDCS = SWGREC.SWGPRDCS - 1;
    SWGREC.SWGPRDUN = SWGREC.SWGPRDUN - SW0XW00.SW0XWTQT;

  else

    /* ----------------------------------------------------*/
     /* if the 'current' product did NOT change:*/

     /* -subtract the difference between the 'current'*/
      /* and 'new' from the total carton units*/
    /* ----------------------------------------------------*/

    SW0XW00.SW0XWNM1 = SW0XW00.SW0XWTNQ - SW0XW00.SW0XWTQT;
    SWGREC.SWGPRDUN = SWGREC.SWGPRDUN + SW0XW00.SW0XWNM1;

  end

   /* ----------------------------------------------------*/
   /* if the 'current' product is in bulk storage and*/
   /* is being moved to handstack, verify if the 'current'*/
   /* carton is the only carton on that pallet, if so*/
   /* subtract one out of the dstloc.vplnsy01 pallet total*/
   /* ----------------------------------------------------*/

  if (SW0XM001.SL2PALET != " ") /* transfer from bulk storage*/

    SW0X652(); /* sel 's5' dstloc.vplnlc01*/

    SW0X653(); /* fetch 'n5' dstloc.vplnlc01*/

    SW0XW00.SW0XWCNT = 0; /* init count field*/
    while (SQLCA.VAGen_SQLCODE == 0)

      SW0XW00.SW0XWCNT = SW0XW00.SW0XWCNT + 1;

      SW0X653(); /* fetch 'n5' dstloc.vplnlc01*/

    end

    SW0X654(); /* close 'c5' dstloc.vplnlc01*/

    if (SW0XW00.SW0XWCNT == 1)
      SWGREC.SWGPRDPL = SWGREC.SWGPRDPL - 1;
    end

  end

  if (SW0XW00.SW0XWRPL == "Y") /* new pallet nbr assigned*/
    SWGREC.SWGPRDPL = SWGREC.SWGPRDPL + 1;
  end

   /* ----------------------------------------------------*/
   /* if the 'current' dstloc.vplnsy01 totals are le to*/
   /* zero the 'current' s/l plan data will be deleted.*/
   /* ----------------------------------------------------*/

  if (SWGREC.SWGPRDCS <= 0
   && SWGREC.SWGPRDUN <= 0
   && SWGREC.SWGPRDPL <= 0)

    /* ------------------------------------------------------------*/
     /* delete 'current' dstloc.vplnsy01 row*/
    /* ------------------------------------------------------------*/

    SW0X655();

    SW0XW00.SW0XWPDD = "Y"; /* deleted 'current' dstloc.vplnsy01*/

  else

    SW0XS23(); /* upd 'cur' dstloc.vplnsy01*/

  end


end // end SW0X650

// sel 'sa' dstloc.vplnsy01
Function SW0X651()

   /* ------------------------------------------------------------*/
   /* Select 'sa' dstloc.vplnsy01 using 'current' key.*/
   /* ------------------------------------------------------------*/

  set SWGREC empty; /* Clear row storage area*/

  SWGREC.XWHCD = SW0XW01.XWHCD;
  SWGREC.TSHCNTNR = SW0XW01.TSHCNTNR;
  SWGREC.SWEPLLNB = SW0XW01.SWEPLLNB;
  SWGREC.XGPCD = SW0XW01.XGPCD;
  SWGREC.PC3PONBR = SW0XW01.PC3PONBR;
  SWGREC.SY1STNBR = SW0XM001.SY1STNBR;
  SWGREC.SY2CLRID = SW0XM001.SY2CLRID;
  SWGREC.XDMCD = SW0XM001.XDMCD;
  SWGREC.XQACD = SW0XM001.XQACD;
  SWGREC.XOWCD = SW0XM001.XOWCD;
  SWGREC.XUMCD = SW0XM001.XUMCD;
  SWGREC.PC2INSEG = SW0XM001.PC2INSEG;
  SWGREC.XEGCD = SW0XM001.XEGCD;
  SWGREC.XPGCD = SW0XM001.XPGCD;
  SWGREC.XSLCD = SW0XM001.XSLCD;

  try
    call "IO5370" ("SA", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select r*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return;

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  SW0XM001.XXXLOCID = "651";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0X651"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0X651

// sel 's5' dstloc.vplnlc01 cur
Function SW0X652()

   /* ------------------------------------------------------------*/
   /* Select 's5' dstloc.vplncl01 using current key.*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "S5";

  set SWHREC empty;

  SWHREC.XWHCD = SW0XM001.XWHCD;
  SWHREC.SWEPLLNB = SW0XM001.SWEPLLNB;
  SWHREC.TSHCNTNR = SW0XM001.TSHCNTNR;
  SWHREC.XGPCD = SW0XM001.XGPCD;
  SWHREC.PC3PONBR = SW0XM001.PC3PONBR;
  SWHREC.SWGPSEQN = SWGREC.SWGPSEQN;
  SWHREC.SL2PALET = SW0XM001.SL2PALET;

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return;

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  SW0XM001.XXXLOCID = "652";
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0X652"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT S5 DSTLOC.VPLNLC01";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0X652

// fetch 'n5' dstloc.vplnlc01 cur
Function SW0X653()

   /* ------------------------------------------------------------*/
   /* fetch  'n5' dstloc.vplncl01 using current key.*/
   /* ------------------------------------------------------------*/

  SWXREC.SWXFUNCD = "N5";

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return;

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  SW0XM001.XXXLOCID = "653";
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0X653"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "FETCH  N5 DSTLOC.VPLNLC01";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0X653

// close 'c5' dstloc.vplnlc01 cur
Function SW0X654()

   /* ------------------------------------------------------------*/
   /* close  'c5' dstloc.vplncl01 using current key.*/
   /* ------------------------------------------------------------*/

  SWXREC.SWXFUNCD = "C5";

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return;

    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  SW0XM001.XXXLOCID = "654";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0X654"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "CLOSE  C5 DSTLOC.VPLNLC01";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0X654

// del 'd ' dstloc.vplnsy01 cur
Function SW0X655()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnsy01 table row using 'cur' key*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("D ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "655"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X655

// PROCESS 'CUR' L/C & SIZE DATA
Function SW0X660()

   /* ------------------------------------------------------------*/
   /* select 'current' dstloc.vplnlc01 row*/
   /* ------------------------------------------------------------*/

  SW0X661();

  SW0XW00.SW0XWFSL = SW0XM001.SW0XMNFL;


   /* ----------------------------------------------------*/
   /* process 'current' dstloc.vplnlc01 totals*/
   /* ----------------------------------------------------*/

  if (SW0XW00.SW0XWPDE == "Y") /* if the product changed*/

    /* ------------------------------------------------------------*/
     /* delete 'current' dstloc.vplnlc01 row*/
    /* ------------------------------------------------------------*/

    SW0X662(); /* del 'cur' dstloc.vplnlc01*/

  else

    /* ------------------------------------------------------------*/
     /* update 'current' dstloc.vplnlc01 row*/
    /* ------------------------------------------------------------*/

    SW0X663(); /* upd 'cur' dstloc.vplnlc01*/

  end

   /* ------------------------------------------------------------*/
   /* process 'current' dstloc.vplnsz01 row's*/
   /* ------------------------------------------------------------*/

  set SWNREC empty; /* init dstloc.vplnsz01 record*/

  SW0XW00.SW0XWIDX = 1;
  while (SW0XW00.SW0XWIDX <= 8)

    if (SW0XM001.SY4IDDSC[SW0XWIDX] != " ")

      /* ------------------------------------------------------------*/
       /* select 'current' dstloc.vplnsz01 row*/
      /* ------------------------------------------------------------*/

      SWNREC.SY5SZID = SW0XW01.SY5SZID[SW0XWIDX];

      SW0X664();

      /* ------------------------------------------------------------*/
       /* delete 'current' dstloc.vplnsz01 row*/
      /* ------------------------------------------------------------*/

      SW0X665();

    end

    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* if the 'current' product did not change add the new*/
   /* sizes/qtys for the 'current' product.*/
   /* ------------------------------------------------------------*/

  if (SW0XW00.SW0XWPDE == "Y") /* if the product changed*/
     /* next sentence*/
  else

    SW0XW00.SW0XWIDX = 1; /* init index*/
    while (SW0XW00.SW0XWIDX <= 8) /* process all sizes*/

      if (SW0XM001.SW0XMNSZ[SW0XWIDX] != " ")

        SW0XS24(); /* add 'cur' dstloc.vplnsz01*/

      end

      SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

    end
  end


end // end SW0X660

// sel 'sa' dstloc.vplnlc01 cur
Function SW0X661()

   /* ------------------------------------------------------------*/
   /* Select 'sa' dstloc.vplncl01 using current key.*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "SA";

  set SWHREC empty;
  SWHREC.XWHCD = SW0XM001.XWHCD;
  SWHREC.SWEPLLNB = SW0XM001.SWEPLLNB;
  SWHREC.TSHCNTNR = SW0XM001.TSHCNTNR;
  SWHREC.XGPCD = SW0XM001.XGPCD;
  SWHREC.PC3PONBR = SW0XM001.PC3PONBR;
  SWHREC.SWGPSEQN = SWGREC.SWGPSEQN;
  SWHREC.PKDNCSQN = SW0XM001.PKDNCSQN;

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return;

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  SW0XM001.XXXLOCID = "661";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0X661"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0X661

// del 'd ' dstloc.vplnlc01 cur
Function SW0X662()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnlc01 table row using 'new' key*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "D ";

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "662"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X662

// upd 'u' dstloc.vplnlc01 cur
Function SW0X663()
   /* ------------------------------------------------------------*/
   /* upd 'current' dstloc.vplnlc01 table row*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "U ";

  SWHREC.SL8WONBR = SW0XM001.SW0XMNWO;
  SWHREC.SL2PALET = SW0XM001.SW0XMNPL;

  SW0XW00.SW0XWFSL = SW0XM001.SW0XMNFL;
  SWHREC.SWCLNENB = SW0XW00.SW0XWSLN;

  if (SWHREC.SWHLNCAT != "QC"
   && SWHREC.SWHLNCAT != "WP"
   && SWHREC.SWHLNCAT != "UX")
    if (SW0XM001.SW0XMNPL != " ")
      SWHREC.SWHLNCAT = "PL";
    else
      SWHREC.SWHLNCAT = "LN";
    end
  end
  SWHREC.SWHCRTUN = SW0XW00.SW0XWTNQ;

  SWHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SWHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "663"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X663

// sel 's' dstloc.vplnsz01 cur
Function SW0X664()

   /* ------------------------------------------------------------*/
   /* Select 's' dstloc.vplnsz01*/
   /* ------------------------------------------------------------*/

  SWNREC.XWHCD = SW0XW01.XWHCD;
  SWNREC.SWEPLLNB = SW0XW01.SWEPLLNB;
  SWNREC.SWGPSEQN = SWHREC.SWGPSEQN;
  SW0XW00.SW0XWOSL = SW0XM001.SL8FRLC;
  SWNREC.SWCLNENB = SW0XW00.SW0XWOLN;
  SWNREC.PKDNCSQN = SW0XW01.PKDNCSQN;

  try
    call "IO5380" ("S ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return;

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  SW0XM001.XXXLOCID = "664";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0X664"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0X664

// del 'd' dstloc.vplnsz01 cur
Function SW0X665()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnsz01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5380" ("D ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "665"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DEL DSTLOC.VPLNSZ01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X665

// PROCESS 'NEW' PRODUCT DATA
Function SW0X670()

   /* -------------------------------------------------------*/
   /* selcet 'new' dstloc.vplnsy01 data*/
   /* -------------------------------------------------------*/

  SW0X671();

  if (SQLCA.VAGen_SQLCODE == 0)

    /* -------------------------------------------------------*/
     /* update 'new' dstloc.vplnsy01 data*/
    /* -------------------------------------------------------*/

    SWGREC.SWGPRDCS = SWGREC.SWGPRDCS + 1;
    SWGREC.SWGPRDUN = SWGREC.SWGPRDUN + SW0XW00.SW0XWTNQ;

    SW0XS23(); /* upd 'new' dstloc.vplnsy01*/

  else

    /* --------------------------------------------------------*/
     /* the 'new' product DOES NOT exist and the 'current'*/
     /* product was NOT deleted, get a new product seq number*/
     /* else reuse the 'current' product sequence number and*/
     /* add a row to the dstloc.viyhsy001 table.*/
    /* --------------------------------------------------------*/

    if (SW0XW00.SW0XWPDD == "Y") /* product was deleted*/

      SW0X672(); /* add 'a' dstloc.vihsy001 new*/

    else

      SW0XW02.SW0XWFNC = "G7";
      SW0XS20(); /* get 'new' product seq number*/
      SWGREC.SWGPSEQN = SL3NXPSN;

    end

    /* ----------------------------------------------------*/
     /* add the 'new' dstloc.vplnsy01 row*/
    /* ----------------------------------------------------*/

    SWGREC.SWGPRDCS = 1;
    SWGREC.SWGPRDUN = SW0XW00.SW0XWTNQ;
    if (SW0XM001.SW0XMNPL != " ")
      SWGREC.SWGPRDPL = 1;
    else
      SWGREC.SWGPRDPL = 0;
    end

    SW0X673(); /* add 'new' dstloc.vplnsy01*/

  end


end // end SW0X670

// sel 'sa' dstloc.vplnsy01 new
Function SW0X671()

   /* ----------------------------------------------------*/
   /* select dstloc.vplnsy01 using "new" product key*/
   /* ----------------------------------------------------*/

  SWGREC.SY1STNBR = SW0XM001.SW0XMSTY;
  SWGREC.SY2CLRID = SW0XM001.SW0XMCLR;
  SWGREC.XDMCD = SW0XM001.SW0XMDIM;
  SWGREC.XQACD = SW0XM001.SW0XMXQA;
  SWGREC.XOWCD = SW0XM001.SW0XMOWN;
  SWGREC.XUMCD = SW0XM001.SW0XMUOM;
  SWGREC.PC2INSEG = SW0XM001.SW0XMSEG;
  SWGREC.XEGCD = SW0XM001.SW0XMEDF;
  SWGREC.XPGCD = SW0XM001.SW0XMPKG;
  SWGREC.XSLCD = SW0XM001.SW0XMSLC;

   /* ------------------------------------------------------------*/
   /* Select 'sa' dstloc.vplnsy01 using current key.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("SA", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select r*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return;

    end
  end

  SW0XM001.XXXLOCID = "671";

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0X671"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0X671

// add 'a ' dstloc.vihsy001 new
Function SW0X672()
   /* ------------------------------------------------------------*/
   /* add dstloc.vihsy001 table row using 'current' data*/
   /* ------------------------------------------------------------*/

  set SWJREC empty;

  SWJREC.XWHCD = SWGREC.XWHCD;
  SWJREC.XGPCD = SWGREC.XGPCD;
  SWJREC.TSHCNTNR = SWGREC.TSHCNTNR;
  SWJREC.PC3PONBR = SWGREC.PC3PONBR;
  SWJREC.PC3POIDT = SW0XW01.PC3POIDT;
  SWJREC.PCFSECD = SW0XW01.PCFSECD;
  SWJREC.FY1FCTYC = SW0XW01.FY1FCTYC;
  SWJREC.PC4ORTYP = SW0XW01.PC4ORTYP;
  SWJREC.SY1STNBR = SWGREC.SY1STNBR;
  SWJREC.SY2CLRID = SWGREC.SY2CLRID;
  SWJREC.XDMCD = SWGREC.XDMCD;
  SWJREC.XQACD = SWGREC.XQACD;
  SWJREC.XOWCD = SWGREC.XOWCD;
  SWJREC.PC2INSEG = SWGREC.PC2INSEG;
  SWJREC.XEGCD = SWGREC.XEGCD;
  SWJREC.XPGCD = SWGREC.XPGCD;
  SWJREC.XUMCD = SWGREC.XUMCD;
  SWJREC.XSLCD = SWGREC.XSLCD;
  SWJREC.SWGPSEQN = SWGREC.SWGPSEQN;
  SWJREC.SWGPRDCS = SWGREC.SWGPRDCS;
  SWJREC.SWGPRDUN = SWGREC.SWGPRDUN;
  SWJREC.SWGINUN1 = SWGREC.SWGINUN1;
  SWJREC.SWGINCS1 = SWGREC.SWGINCS1;
  SWJREC.SWGINMM1 = SWGREC.SWGINMM1;
  SWJREC.SWGINUN2 = SWGREC.SWGINUN2;
  SWJREC.SWGINCS2 = SWGREC.SWGINCS2;
  SWJREC.SWGINMM2 = SWGREC.SWGINMM2;

  SWJREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SWJREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

  try
    call "IO5280" ("A ", SQLCA, SWJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "672"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VIHSY001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIHSY001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X672

// add 'a' dstloc.vplnsy01 new
Function SW0X673()

   /* ------------------------------------------------------------*/
   /* add 'new' dstloc.vplnsy01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("A ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "673"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X673

// PROCESS 'NEW' L/C, SIZE, TASK
Function SW0X680()

   /* ----------------------------------------------------*/
   /* add the 'new' dstloc.vplnlc01 row*/
   /* ----------------------------------------------------*/

  SW0X681(); /* add 'new' dstloc.vplnlc01*/

   /* ----------------------------------------------------*/
   /* add the 'new' dstloc.vplnsz01 row*/
   /* ----------------------------------------------------*/

  SW0XW00.SW0XWIDX = 1; /* init index*/
  while (SW0XW00.SW0XWIDX <= 8) /* process all sizes*/

    if (SW0XM001.SW0XMNSZ[SW0XWIDX] != " ")

      SW0XS24(); /* add 'new' dstloc.vplnsz01*/

    end

    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;

  end

   /* ----------------------------------------------------*/
   /* transfer all task belonging to the 'current' data*/
   /* to the 'new' data.*/
   /* ----------------------------------------------------*/

  if (SW0XW01.SWGPSEQN != SWGREC.SWGPSEQN)

    SW0X682(); /* sel 's1' dstloc.vplnta01*/

    SW0X683(); /* fetch 'n1' dstloc.vplnta01*/

    while (SQLCA.VAGen_SQLCODE == 0)

      SW0X684(); /* add 'a' dstloc.vplnta01*/

      SW0X683(); /* fetch 'n1' dstloc.plnta01*/

    end

    SW0X685(); /* close 'c1' dstloc.plnta01*/

    SW0X686(); /* delete 'd1' dstloc.plnta01*/

  end


end // end SW0X680

// add 'a' dstloc.vplnlc01 new
Function SW0X681()
   /* ------------------------------------------------------------*/
   /* add 'current' dstloc.vplnlc01 table row*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "A";

  SWHREC.SWGPSEQN = SWGREC.SWGPSEQN;
  SWHREC.SL8WONBR = SW0XM001.SW0XMNWO;
  SWHREC.SL2PALET = SW0XM001.SW0XMNPL;
  if (SW0XM001.SW0XMNPL != " ")
    SWHREC.SWHLNCAT = "PL";
  else
    SWHREC.SWHLNCAT = "LN";
  end
  SWHREC.SWHCRTUN = SW0XW00.SW0XWTNQ;

  SWHREC.XXXUSRID = " ";
  SWHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SWHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "681"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X681

// sel 's1' dstloc.vplnta01
Function SW0X682()

   /* ------------------------------------------------------------*/
   /* select set dstloc.vplnta01 using the 'old' product seq nbr*/
   /* ------------------------------------------------------------*/
  set SWIREC empty;

  SWIREC.XWHCD = SW0XW01.XWHCD;
  SWIREC.SWGPSEQN = SW0XW01.SWGPSEQN;
  SWIREC.SWEPLLNB = SW0XW01.SWEPLLNB;
  SWIREC.PKDNCSQN = SW0XW01.PKDNCSQN;
  SWIREC.SWCLNENB = -1;
  SWIREC.SWYTACD = -1;

  try
    call "IO5390" ("S1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "682"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 TABLE DSTLOC.VPLNTA01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X682

// fetch 'n1' dstloc.vplnta01
Function SW0X683()

   /* ------------------------------------------------------------*/
   /* fetch set dstloc.vplnta01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("N1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "683"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH  N1 TABLE DSTLOC.VPLNTA01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X683

// add 'a ' dstloc.vplnta01
Function SW0X684()
   /* ------------------------------------------------------------*/
   /* add dstloc.vplnta01 table row using 'new' key*/
   /* ------------------------------------------------------------*/

  SWIREC.SWGPSEQN = SWHREC.SWGPSEQN;

  try
    call "IO5390" ("A ", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "684"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VPLNTA01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X684

// close 'c1' dstloc.vplnta01
Function SW0X685()
   /* ------------------------------------------------------------*/
   /* close 'c1' dstloc.vplnta01 table row using 'new' key*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("C1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "685"; /* Module identification*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DSTLOC.VPLNTA01 SET";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X685

// del 'd1' dstloc.vplnta01
Function SW0X686()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnta01 table row using 'cur' product seq nbr*/
   /* ------------------------------------------------------------*/

  SWIREC.SWGPSEQN = SW0XW01.SWGPSEQN;

  try
    call "IO5390" ("D1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* no data found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "686"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE DSTLOC.VPLNTA01 ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0X686

// submit job sl4131 labels
Function SW0X690()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set SW0XW03 empty; /* Parameters work area*/

  move " " to TA6REC.TA6ROW[1] for all; /* jcl work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0XT01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      SW0XW03.XWHCD = SW0XW01.XWHCD; /* warehouse code*/
      SW0XW03.TSHCNTNR = SW0XW01.TSHCNTNR; /* container*/

      if (SW0XW00.SW0XWTYF == "P") /* pallet work order*/
        SW0XW03.SW0XWOFL = "P";
      else
        SW0XW03.SW0XWOFL = "C"; /* carton work order*/
      end

      SW0XW03.SW0XWCSQ = SW0XM001.PKDNCSQN; /* seq nbr*/
      SW0XW03.SL2PALET = SW0XM001.SW0XMNPL; /* pallet nbr*/
      SW0XW03.SL5LOCTN = SW0XM001.SL8FRLC; /* from location*/
      SW0XW03.SW0XWPLN = SW0XM001.SWEPLLNB; /* plan nbr*/
      SW0XW03.SW0XWWOG = SW0XM001.SL8WOGRP; /* wo grp*/
      SW0XW03.SW0XWNBR = SW0XM001.SW0XMNWO; /* wo nbr*/
      SW0XW03.SW0XWCRT = COMMAREA.CAUSERID; /* crt user*/
      SW0XW03.SW0XWPUW = "C"; /* planned/unplanned wo*/

      TA6REC.TARJCL[TA6INDEX] = SW0XW03.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0XT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0XT01.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0XT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* print request subroutine*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0XW00.SW0XWSWF = "Y"; /* format map switch*/
    SW0XW00.SW0XWSWR = "Y"; /* request for data switch*/
    SW0XW00.SW0XWSCF = "Y"; /* set crtn seq cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  exit stack; /* Exit to display map*/


end // end SW0X690

// submit job sl4131 labels
Function SW0X691()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/


  set SW0XW03 empty; /* Parameters work area*/

  move " " to TA6REC.TA6ROW[1] for all; /* jcl work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0XT02.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      SW0XW03.XWHCD = SW0XW01.XWHCD; /* warehouse code*/
      SW0XW03.TSHCNTNR = SW0XW01.TSHCNTNR; /* container*/

      if (SW0XW00.SW0XWTYF == "P") /* pallet work order*/
        SW0XW03.SW0XWOFL = "P";
      else
        SW0XW03.SW0XWOFL = "C"; /* carton work order*/
      end

      SW0XW03.SW0XWCSQ = SW0XM001.PKDNCSQN; /* seq nbr*/
      SW0XW03.SL2PALET = SW0XM001.SW0XMNPL; /* pallet nbr*/
      SW0XW03.SL5LOCTN = SW0XM001.SL8FRLC; /* from location*/
      SW0XW03.SW0XWPLN = SW0XM001.SWEPLLNB; /* plan nbr*/
      SW0XW03.SW0XWWOG = SW0XM001.SL8WOGRP; /* wo grp*/
      SW0XW03.SW0XWNBR = SW0XM001.SW0XMNWO; /* wo nbr*/
      SW0XW03.SW0XWCRT = COMMAREA.CAUSERID; /* crt user*/
      SW0XW03.SW0XWPUW = "C"; /* planned/unplanned wo*/

      TA6REC.TARJCL[TA6INDEX] = SW0XW03.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0XT02.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0XT02.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0XT02.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* print request subroutine*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0XW00.SW0XWSWF = "Y"; /* format map switch*/
    SW0XW00.SW0XWSWR = "Y"; /* request for data switch*/
    SW0XW00.SW0XWSCF = "Y"; /* set crtn seq cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  exit stack; /* Exit to display map*/


end // end SW0X691

// select 's' dstloc.vwophd01 row
Function SW0XS01()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vwophd01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5400" ("S ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS01

// select 's1' dstloc.vwopit01
Function SW0XS02()

   /* ------------------------------------------------------------*/
   /* select set dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("S1", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 TABLE DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS02

// select 'n1' dstloc.vwopit01
Function SW0XS03()

   /* ------------------------------------------------------------*/
   /* fetch set dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("N1", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT N1 TABLE DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS03

// close 'c1' dstloc.vwopit01
Function SW0XS04()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwopti01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("C1", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end


  SLWREC.XXXLOCID = "S04";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS04

// select 's ' dprod.vcolor02 row
Function SW0XS05()
   /* ------------------------------------------------------------*/
   /* Select dprod.vcolor02 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS05

// convert sizes
Function SW0XS06()

   /* ------------------------------------------------------------*/
    /* This routine will translate the size id to size desc*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOCAT[2] = "SW0XS06 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSYPI1(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC > 8)
      if (SYPREC.SYPRC == +10)
        SLWREC.XXXLOCID = "S06";
        converseLib.validationFailed(12); /* <--- not on db msg*/
      else
        if (SYPREC.SYPRC == +9)
          SLWREC.XXXLOCID = "S06";
          converseLib.validationFailed(31); /* <--- try again msg*/
        else
          SLWREC.XXXLOCID = "S06";
          converseLib.validationFailed(1); /* <--- severe error msg*/
        end
        exit stack;
      end
    end
  end


end // end SW0XS06

// select 's2' dstloc.vwopit01
Function SW0XS07()

   /* ------------------------------------------------------------*/
   /* select set dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("S2", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 TABLE DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS07

// select 'n2' dstloc.vwopit01
Function SW0XS08()

   /* ------------------------------------------------------------*/
   /* fetch set dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("N2", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT N2 TABLE DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS08

// close 'c2' dstloc.vwopit01
Function SW0XS09()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwopti01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("C2", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end


  SLWREC.XXXLOCID = "S09";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C2 DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS09

// select 's2' dstloc.vlocat01
Function SW0XS10()

   /* ------------------------------------------------------------*/
   /* select set dstloc.vlocat01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1490" ("S2", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 TABLE DSTLOC.VLOCAT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS10

// fetch 'n2' dstloc.vlocat01
Function SW0XS11()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vlocat01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO1490" ("N2", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N2 DSTLOC.VLOCAT01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS11

// close 'c2' dstloc.vlocat01
Function SW0XS12()
   /* ------------------------------------------------------------*/
   /* close dstloc.vlocat01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO1490" ("C2", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  SLWREC.XXXLOCID = "S12";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C2 DSTLOC.VLOCAT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0XW01.SW0XWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS12

// sel 's ' dprodc.vprdcu01 row
Function SW0XS13()
   /* ------------------------------------------------------------*/
   /* Select dprodc.vprdcu01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS13

// sel 's6' dstloc.vwophd02
Function SW0XS14()
   /* ------------------------------------------------------------*/
   /* select set from dstloc.vwophd02*/
   /* ------------------------------------------------------------*/
  set SLSREC empty;
  SLSREC.SLSFNC = "S6";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S14"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S6 ON DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS14

// fetch 'n6' dstloc.vwophd02
Function SW0XS15()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vwophd02*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "N6";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S15"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N6 ON DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS15

// close 'c6' dstloc.vwophd02
Function SW0XS16()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwophd02*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "C6";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S16"; /* module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.validationFailed(1); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C6 ON DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS16

// validate "to" a/z/l
Function SW0XS17()

   /* -----------------------------------------------------------*/
   /* if the "NEW" area/zone/location using dstloc.vlocat01*/
   /* -----------------------------------------------------------*/

  set SL5REC empty;
  SL5REC.XWHCD = SW0XM001.XWHCD;
  SL5REC.XARCD = SW0XM001.SW0XMNTA;
  SL5REC.SL4ZONE = SW0XM001.SW0XMNTZ;
  SL5REC.SL5LOCTN = SW0XM001.SW0XMNTL;

  SW0XS19(); /* select 's' dstloc.vlocat01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL5REC.YLTCD in YLTTBL.YLTCD)
      if (YLTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        converseLib.validationFailed(10); /* inactive location type*/
        SLWREC.XXXLOCID = "S17";
        set SW0XM001.SW0XMNTZ cursor, bold;
      end
    else
      converseLib.validationFailed(113); /* invalid location type*/
      SLWREC.XXXLOCID = "S17";
      set SW0XM001.SW0XMNTZ cursor, bold;
    end
  else
    converseLib.validationFailed(38); /* area/zone/location not found*/
    SLWREC.XXXLOCID = "S17";
    set SW0XM001.SW0XMNTL bold;
    set SW0XM001.SW0XMNTZ bold;
    set SW0XM001.SW0XMNTA cursor, bold;
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate bulk, handstack, picking, q/c, and misc locations*/
   /* ------------------------------------------------------------*/

  if (SW0XM001.SW0XMNPL != " ")
    if (SL5REC.YLTCD == "01") /* bulk storage*/
      if (SW0XM001.SW0XMNPL != "?")
         /* next sentence*/
      else
        if (SL5REC.YLSCD == "01") /* empty status*/
          /* next sentence*/
        else
          set SW0XM001.SW0XMNTA cursor, bold;
          set SW0XM001.SW0XMNTZ bold;
          set SW0XM001.SW0XMNTL bold;
          SLWREC.XXXLOCID = "S17";
          converseLib.validationFailed(399); /* location in use*/
        end
      end
    else
      set SW0XM001.SW0XMNTA cursor, bold;
      set SW0XM001.SW0XMNTZ bold;
      set SW0XM001.SW0XMNTL bold;
      SLWREC.XXXLOCID = "S17";
      converseLib.validationFailed(401); /* BULK LOCATION REQUIRED*/
    end
  else

    /* ------------------------------------------------------------*/
      /* handstack location*/
    /* ------------------------------------------------------------*/

    if (SL5REC.YLTCD == "22") /* handstack*/
      if (SL5REC.YLSCD == "01") /* empty status*/
         /* next sentence*/
      else
        set SW0XM001.SW0XMNTA cursor, bold;
        set SW0XM001.SW0XMNTZ bold;
        set SW0XM001.SW0XMNTL bold;
        SLWREC.XXXLOCID = "S17";
        converseLib.validationFailed(399); /* location in use*/
      end
    end

    /* ------------------------------------------------------------*/
      /* location type codes 60  q/c*/
                          /* 70  misc*/
    /* ------------------------------------------------------------*/

    if (SL5REC.YLTCD == "60"
     || SL5REC.YLTCD == "70")
      if (SL5REC.SL5MPDFL == "Y")
         /* NEXT SENTENCE*/
      else
        set SW0XM001.SW0XMNTA cursor, bold;
        set SW0XM001.SW0XMNTZ bold;
        set SW0XM001.SW0XMNTL bold;
        SLWREC.XXXLOCID = "S17";
        converseLib.validationFailed(398); /* location must be defined as mult-prod loc*/
      end
    end

    /* ------------------------------------------------------------*/
      /* location type code 11  picking - flow*/
                         /* 12  picking - static*/
                         /* 16  picking - default*/
    /* ------------------------------------------------------------*/

    if (SL5REC.YLTCD == "11"
     || SL5REC.YLTCD == "12"
     || SL5REC.YLTCD == "16")
      if (SL5REC.SL5MPDFL == "Y")
        SW0XS27(); /* verify processing location*/
      else
        set SW0XM001.SW0XMNTA cursor, bold;
        set SW0XM001.SW0XMNTZ bold;
        set SW0XM001.SW0XMNTL bold;
        SLWREC.XXXLOCID = "S17";
        converseLib.validationFailed(398); /* loc must be defined as*/
      end /* mult-prod loc*/
    end

    /* ------------------------------------------------------------*/
     /* if a specific location has been entered and is to one of*/
     /* to location listed below the user is required to enter a*/
     /* handstack location*/
    /* ------------------------------------------------------------*/

    if (SL5REC.YLTCD != "11" /* picking - flow*/
     && SL5REC.YLTCD != "12" /* picking - static*/
     && SL5REC.YLTCD != "16") /* picking - default*/
    else
      if (SL5REC.YLTCD != "22" /* handstack*/
       && SL5REC.YLTCD != "60" /* q/c*/
       && SL5REC.YLTCD != "70") /* misc*/
        set SW0XM001.SW0XMNTA cursor, bold;
        set SW0XM001.SW0XMNTZ bold;
        set SW0XM001.SW0XMNTL bold;
        SLWREC.XXXLOCID = "S17";
        converseLib.validationFailed(400); /* handstack location required*/
      end
    end
  end


end // end SW0XS17

// validate "to" area/zone
Function SW0XS18()

   /* ------------------------------------------------------------*/
   /* validate area/zone obtain default location using*/
   /* dstloc.vlocat01*/
   /* ------------------------------------------------------------*/

  SL5REC.XWHCD = SW0XM001.XWHCD;
  SL5REC.XARCD = SW0XM001.SW0XMNTA;
  SL5REC.SL4ZONE = SW0XM001.SW0XMNTZ;
   /* OVE SW0XM001.SW0XMNTL TO SL5REC.SL5LOCTN;*/

  if (SW0XM001.SW0XMNPL != " ")
    SL5REC.YLTCD = "01"; /* bulk*/
    SL5REC.SL5MPDFL = "N";
  else

    if (SW0XM001.SW0XMNTZ == "81")
      SL5REC.YLTCD = "81";
    else
      SL5REC.YLTCD = SL4REC.YZTCD;
    end

    if (SL4REC.YZTCD == "22")
      SL5REC.SL5MPDFL = "N";
    else
      SL5REC.SL5MPDFL = "Y";
    end

    /* ------------------------------------------------------------*/
    /* obtain location from dstloc.vsyasg01 when warehouse is an*/
    /* auto-palletizer warehouse and area is processing(02) and*/
    /* it is a picking zone(10 or 26).*/
    /* --------------------------------------------------------------*/

    if (SW0XM001.XWHCD == "07") /* auto palletizer warehouse*/

      if (SL4REC.YZTCD == "10" /* picking zone*/
       || SL4REC.YZTCD == "26") /* picking default zone*/

        SW0XW00.SW0XW-SYASG01-USED = "Y";

        SW0XS27(); /* obtain location from product asgn*/

        SL5REC.XWHCD = SL7REC.XWHCD;
        SL5REC.XARCD = SL7REC.XARCD;
        SL5REC.SL4ZONE = SL7REC.SL4ZONE;
        SL5REC.SL5LOCTN = SL7REC.SL5LOCTN;

        SW0XS19(); /* verify to location*/

        SW0XS28(); /* check split carton indicator*/

      end

      if (converseVar.validationMsgNum != 0) /* processing location not setup*/
        return; /* for the "new" product*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* obtain next empty location for the requested 'to' area/zone*/
   /* for non auto-palletizer warehouse.*/
   /* --------------------------------------------------------------*/

  if (SW0XM001.XWHCD == "07"
   && SW0XW00.SW0XW-SYASG01-USED == "Y")

    /* next sentence*/

  else

    SL5REC.SL-LOC-SZ-IND = "N";
    SL5REC.YLSCD = "01";

    SW0XS10(); /* select 's2' dstloc.vlocat01*/

    SW0XS11(); /* fetch  'n2' dstloc.vlocat01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      SW0XM001.SW0XMNTL = SL5REC.SL5LOCTN;
      if (SL5REC.YLTCD in YLTTBL.YLTCD)
        if (YLTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          converseLib.validationFailed(10); /* inactive location type*/
          SLWREC.XXXLOCID = "S18";
          set SW0XM001.SW0XMNTZ cursor, bold;
        end
      else
        converseLib.validationFailed(113); /* invalid location type*/
        SLWREC.XXXLOCID = "S18";
        set SW0XM001.SW0XMNTZ cursor, bold;
      end
    else
      set SW0XM001.SW0XMNTA cursor, bold;
      set SW0XM001.SW0XMNTZ bold;
      set SW0XM001.SW0XMNTL bold;
      converseLib.validationFailed(38); /* area/zone/location not found*/
      SLWREC.XXXLOCID = "S18";
    end

    SW0XS12(); /* close 'c2' dstloc.vlocat01*/

  end


end // end SW0XS18

// select 's ' dstloc.vlocat01
Function SW0XS19()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vlocat01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0XS19

// nxt wo/prd seq dstloc.vslctl01
Function SW0XS20()
   /* ------------------------------------------------------------*/
   /* obtain next w/o nbr / product seq nbr dstloc.vslctl01*/
   /* ------------------------------------------------------------*/

  set SL3REC empty; /* Clear row storage area*/

  SL3REC.XWHCD = SW0XW01.XWHCD;
  SL3REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL3REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO1500" (SW0XW02, SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VSLCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSLCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0XS20

// select 's ' dstloc.vplnhdr01
Function SW0XS21()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vplnhdr01 table row*/
   /* ------------------------------------------------------------*/
  set SWEREC empty;

  SWEREC.XWHCD = SW0XM001.XWHCD;
  SWEREC.SWEPLLNB = SW0XM001.SWEPLLNB;

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS21

// update 'u ' dstloc.vlocat01
Function SW0XS22()

   /* ------------------------------------------------------------*/
   /* upd dstloc.vlocat01 table usiing 'current' key*/
   /* ------------------------------------------------------------*/

  SL5REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL5REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO1490" ("U ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VLOCAT01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS22

// upd 'u ' dstloc.vplnsy01
Function SW0XS23()

   /* ------------------------------------------------------------*/
   /* upd 'current' dstloc.vplnsy01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("U ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS23

// add 'a ' dstloc.vplnsz01
Function SW0XS24()
   /* ------------------------------------------------------------*/
   /* add 'new' dstloc.vplnsz01 table*/
   /* ------------------------------------------------------------*/

  SWNREC.SWGPSEQN = SWHREC.SWGPSEQN;
  SWNREC.SWCLNENB = SW0XW00.SW0XWSLN;
  SWNREC.SY5SZID = SW0XW01.SW0XWNSI[SW0XWIDX];
  SWNREC.SWNSZUN = SW0XM001.SW0XMNQT[SW0XWIDX];

  SWNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5380" ("A ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VPLNSZ01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS24

// update 'u ' dstloc.vplnhd01
Function SW0XS25()

   /* ------------------------------------------------------------*/
   /* upd dstloc.vplnhd01 table usiing 'current' key*/
   /* ------------------------------------------------------------*/

  SL5REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL5REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5350" ("U ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VPLNHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS25

// select 's ' dstloc.vazone01
Function SW0XS26()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vazone01 table row*/
   /* ------------------------------------------------------------*/

  set SL4REC empty;
  SL4REC.XWHCD = SW0XM001.XWHCD;
  SL4REC.XARCD = SW0XM001.SW0XMNTA;
  SL4REC.SL4ZONE = SW0XM001.SW0XMNTZ;

  try
    call "IO1480" ("S ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZONE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0XS26

// verify processing location
Function SW0XS27()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vsyasg01 table row*/
   /* ------------------------------------------------------------*/


  set SL7REC empty;

  SL7REC.XWHCD = SW0XM001.XWHCD;
  SL7REC.XARCD = SW0XM001.SW0XMNTA;
  SL7REC.SL4ZONE = SW0XM001.SW0XMNTZ;
  SL7REC.SL5LOCTN = "*";
  SL7REC.XGPCD = SW0XM001.XGPCD;
  SL7REC.SY1STNBR = SW0XM001.SW0XMSTY;
  SL7REC.SY2CLRID = SW0XM001.SW0XMCLR;
  SL7REC.XDMCD = SW0XM001.SW0XMDIM;
  SL7REC.XQACD = SW0XM001.SW0XMXQA;
  SL7REC.XOWCD = SW0XM001.SW0XMOWN;
  SL7REC.XSDCD = SW0XM001.SW0XMEDF;
  SL7REC.XSACD = SW0XM001.SW0XMSEG;
  SL7REC.XPGCD = SW0XM001.SW0XMPKG;
  SL7REC.XUMCD = SW0XM001.SW0XMUOM;
  SL7REC.XXXSTAT = "A";

  SW0XW00.SW0XWIDX = 1;
  while (SW0XW00.SW0XWIDX <= 8
   && converseVar.validationMsgNum == 0)

    if (SW0XM001.SW0XMNSZ[SW0XWIDX] != " "
     && SW0XW01.SW0XWSER[SW0XWIDX] != "E")
      SL7REC.SY5SZID = SW0XW01.SW0XWNSI[SW0XWIDX];

      SW0XS50(); /* declare & open dstloc.vsyasg01 cursor*/

      if (SQLCA.VAGen_SQLCODE == 100)
        set SW0XM001.SW0XMNTA cursor, bold;
        set SW0XM001.SW0XMNTZ bold;
        set SW0XM001.SW0XMNTL bold;
        SLWREC.XXXLOCID = "S27";
        converseLib.validationFailed(398); /* process loc not defined for product*/
        return;

      end

      SW0XS51(); /* fetch next dstloc.vsyasg01 cursor*/

      if (SQLCA.VAGen_SQLCODE == 0)
        SW0XM001.SW0XMNTL = SL7REC.SL5LOCTN;
      end

      if (SQLCA.VAGen_SQLCODE == 100)
        set SW0XM001.SW0XMNTA cursor, bold;
        set SW0XM001.SW0XMNTZ bold;
        set SW0XM001.SW0XMNTL bold;
        SLWREC.XXXLOCID = "S27";
        converseLib.validationFailed(398); /* process loc not defined for product*/
        return;

      end
    end
    SW0XW00.SW0XWIDX = SW0XW00.SW0XWIDX + 1;
  end

  SW0XS52(); /* close dstloc.vsyasg01 cursor*/

end // end SW0XS27

// select 's ' dstloc.vsyasg01
Function SW0XS28()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vplnlc01 table row*/
   /* ------------------------------------------------------------*/

  set SWHREC empty;

  SWHREC.XWHCD = SW0XM001.XWHCD;
  SWHREC.PKDNCSQN = SW0XM001.PKDNCSQN;

  SW0XS60(); /* declare & open dstloc.vplnlc01 cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SW0XS61(); /* fetch dstloc.vplnlc01 cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)

      if (SWHREC.SL-SPLT-CRTN-IND != "R")

        SWHREC.SL-SPLT-CRTN-IND = "R";

        SW0XS63(); /* update split carton indicator to 'r'*/

      end

    end

   /* close dstloc.vplnlc01 cursor*/
    SW0XS62();
  end


end // end SW0XS28

// upd 'u ' dstloc.vwophd01
Function SW0XS29()

   /* ------------------------------------------------------------*/
   /* upd dstloc.vwophd01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5400" ("U ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S29"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS29

// select 's1' dstloc.vsyasg01
Function SW0XS50()


   /* ------------------------------------------------------------*/
   /* declare and open dstloc.vsyasg01 table row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1550" ("S1", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S50"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYASG01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0XS50

// select 'n1' dstloc.vsyasg01
Function SW0XS51()


   /* ------------------------------------------------------------*/
   /* fetch dstloc.vsyasg01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO1550" ("N1", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S51"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYASG01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0XS51

// select 'c1' dstloc.vsyasg01
Function SW0XS52()


   /* ------------------------------------------------------------*/
   /* close dstloc.vsyasg01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO1550" ("C1", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S52"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYASG01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0XS52

// select 's3' dstloc.vplnlc01
Function SW0XS60()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vplnlc01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5360" ("S3", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S60"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE SCAN 3      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS60

// fetch 'n3' dstloc.vplnlc01
Function SW0XS61()

   /* ------------------------------------------------------------*/
   /* fetch dstloc.vplnlc01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5360" ("N3", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S61"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH SCAN 3        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS61

// close dstloc.vplnlc01 cursor
Function SW0XS62()

   /* ------------------------------------------------------------*/
   /* fetch dstloc.vplnlc01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5360" ("C3", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S62"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SCAN 3        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS62

// update 'u ' dstloc.vplnlc01
Function SW0XS63()

   /* ------------------------------------------------------------*/
   /* update dstloc.vplnlc01 split carton indicator*/
   /* ------------------------------------------------------------*/

  try
    call "IO5360" ("U ", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S63"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE              ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0XS63

//*** RECORD=SW0XW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
//   CONTROL       DATE    PROGRAMMER         DESRCIPTION
//  ---------    -------- ------------      -------------
//  WV RCV       03/29/93   TGLENN      Add field to control
//                                       when dstloc.vsyasg01
//                                       is used to get loc.
//                                       field = syasg01-used.
// ***********************
Record SW0XW00 type basicRecord
  10 SW0XWPDD SW0XWPDD ; 
  10 SW0XWSWR SW0XWSWR ; 
  10 SW0XWSWF SW0XWSWF ; 
  10 SW0XWDCF SW0XWDCF ; 
  10 SW0XWTFL SW0XWTFL ; 
  10 SW0XWPTF SW0XWPTF ; 
  10 SW0XWTYF SW0XWTYF ; 
  10 SW0XWSFL SW0XWSFL ; 
  10 SW0XWPDE SW0XWPDE ; 
  10 SW0XWFFL SW0XWFFL ; 
  10 SW0XWOKY SW0XWOKY ; 
  10 SW0XWSZF SW0XWSZF ; 
  10 SW0XWQTF SW0XWQTF ; 
  10 SW0XWSLF SW0XWSLF ; 
  10 SW0XWRPL SW0XWRPL ; 
  10 SW0XWOSL SW0XWOSL ; 
    15 * num(2) ; 
    15 SW0XWOLN num(4) ; // old from save lane number
  10 SW0XWFSL SW0XWFSL ; 
    15 * num(2) ; 
    15 SW0XWSLN num(4) ; // new from save lane number
  10 SW0XWSWD SW0XWSWD ; 
  10 SW0XWMOD SW0XWMOD ; 
  10 SW0XWDIS SW0XWDIS ; 
  10 SW0XWIDX SW0XWIDX ; 
  10 SW0XWLIX SW0XWLIX ; 
  10 SW0XWSIX SW0XWSIX ; 
  10 SW0XWCIX SW0XWCIX ; 
  10 SW0XWIXT SW0XWIXT ; 
  10 SW0XWCNT SW0XWCNT ; 
  10 SW0XWTQT SW0XWTQT ; 
  10 SW0XWTNQ SW0XWTNQ ; 
  10 SW0XWNM1 SW0XWNM1 ; 
  10 SW0XWSCF SW0XWSCF ; 
  10 SW0XW-SYASG01-USED SW0XW-SYASG01-USED ; 
end // end SW0XW00

//*** RECORD=SW0XW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record SW0XW01 type basicRecord
  5 SW0XWGP1 SW0XWGP1 ; 
    10 XWHABRV XWHABRV ; 
    10 SW0XWKEY SW0XWKEY ; 
      15 XWHCD XWHCD ; 
      15 SL8WONBR SL8WONBR ; 
      15 PKDNCSQN PKDNCSQN ; 
    10 XROPDEST XROPDEST ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 SW0XWSPK SW0XWSPK ; 
    10 SL8WOGRP SL8WOGRP ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 TSOCRTNB TSOCRTNB ; 
    10 SL2CASE SL2CASE ; 
      15 * num(2) ; 
      15 SW0XWTSO SW0XWTSO ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 XSLCD XSLCD ; 
    10 SL8FRAR SL8FRAR ; 
    10 SL8FRZN SL8FRZN ; 
    10 SL8FRLC SL8FRLC ; 
    10 SL8TOAR SL8TOAR ; 
    10 SL8TOZN SL8TOZN ; 
    10 SL8TOLC SL8TOLC ; 
    10 SL2PALET SL2PALET ; 
    10 SY1UNPCS SY1UNPCS ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SL8WOPY SL8WOPY ; 
    10 SL8WOPFL SL8WOPFL ; 
    10 YWTCD YWTCD ; 
    10 YWSCD YWSCD ; 
    10 SY5SZID SY5SZID [8] ; 
    10 SY4IDDSC SY4IDDSC [8] ; 
    10 SL9WOQTY SL9WOQTY [8] ; 
    10 SWGPSEQN SWGPSEQN [8] ; 
    10 SW0XWGPC SW0XWGPC ; 
    10 SW0XWSTY SW0XWSTY ; 
    10 SW0XWCLR SW0XWCLR ; 
    10 SW0XWDIM SW0XWDIM ; 
    10 SW0XWNSD SW0XWNSD ; 
    10 SW0XWNCD SW0XWNCD ; 
    10 SW0XWXQA SW0XWXQA ; 
    10 SW0XWSEG SW0XWSEG ; 
    10 SW0XWEDF SW0XWEDF ; 
    10 SW0XWPKG SW0XWPKG ; 
    10 SW0XWUOM SW0XWUOM ; 
    10 SW0XWOWN SW0XWOWN ; 
    10 SW0XWSLC SW0XWSLC ; 
    10 SW0XWNFA SW0XWNFA ; 
    10 SW0XWNFZ SW0XWNFZ ; 
    10 SW0XWNFL SW0XWNFL ; 
    10 SW0XWNTA SW0XWNTA ; 
    10 SW0XWNTZ SW0XWNTZ ; 
    10 SW0XWNTL SW0XWNTL ; 
    10 SW0XWNPL SW0XWNPL ; 
    10 SW0XWUPC SW0XWUPC ; 
    10 SW0XWNWO SW0XWNWO ; 
    10 SW0XWNSZ SW0XWNSZ [8] ; 
    10 SW0XWNSI SW0XWNSI [8] ; 
    10 SW0XWNQT SW0XWNQT [8] ; 
    10 SW0XWSER SW0XWSER [8] ; 
    10 SW0XWSQT SW0XWSQT [8] ; 
    10 SW0XWPLT SW0XWPLT ; 
    10 CACHGFL CACHGFL ; 
end // end SW0XW01

//*** RECORD=SW0XW02 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record SW0XW02 type basicRecord
  10 SW0XWFNC SW0XWFNC ; 
end // end SW0XW02

//*** RECORD=SW0XW03 ****
// ------------------------------------------------------------
// Parameters for SL4141 - Unexpected Work Order Creation.
// ------------------------------------------------------------
// ***********************
Record SW0XW03 type basicRecord
  5 TARJCL TARJCL ; 
    10 XWHCD XWHCD ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 SW0XWOFL SW0XWOFL ; 
    10 SW0XWCSQ SW0XWCSQ ; 
    10 SL2PALET SL2PALET ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SW0XWPLN SW0XWPLN ; 
    10 SW0XWWOG SW0XWWOG ; 
    10 SW0XWNBR SW0XWNBR ; 
    10 SW0XWCRT SW0XWCRT ; 
    10 SW0XWPUW SW0XWPUW ; 
    10 * char(7) ; 
end // end SW0XW03

// vsyasg01 switch
DataItem SW0XW-SYASG01-USED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// compare index
DataItem SW0XWCIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new color id
DataItem SW0XWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count field
DataItem SW0XWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// crt user
DataItem SW0XWCRT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton sequence number
DataItem SW0XWCSQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data change flag
DataItem SW0XWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new dimension code
DataItem SW0XWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data displayed switch
DataItem SW0XWDIS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new xeg-engr-diff-cd
DataItem SW0XWEDF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found flag
DataItem SW0XWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fucntion code
DataItem SW0XWFNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new from save location
DataItem SW0XWFSL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sw0xw01 group level
DataItem SW0XWGP1 char(480)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new gpc code
DataItem SW0XWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SW0XWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// jcl index
DataItem SW0XWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem SW0XWKEY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load index
DataItem SW0XWLIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// data modified switch
DataItem SW0XWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order number
DataItem SW0XWNBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// new color desc
DataItem SW0XWNCD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new from area code
DataItem SW0XWNFA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new from location code
DataItem SW0XWNFL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new from zone code
DataItem SW0XWNFZ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric work field
DataItem SW0XWNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// new pallet
DataItem SW0XWNPL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new size quanity
DataItem SW0XWNQT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new style desc
DataItem SW0XWNSD char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new size description
DataItem SW0XWNSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new size desc
DataItem SW0XWNSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new to area code
DataItem SW0XWNTA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new to location code
DataItem SW0XWNTL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new to zone code
DataItem SW0XWNTZ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new work order number
DataItem SW0XWNWO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order type flag
DataItem SW0XWOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current product key
DataItem SW0XWOKY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old from save location
DataItem SW0XWOSL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new own group
DataItem SW0XWOWN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product delete flag
DataItem SW0XWPDD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product data entered
DataItem SW0XWPDE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new package code
DataItem SW0XWPKG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan number
DataItem SW0XWPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pallet w/s field
DataItem SW0XWPLT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// print flag
DataItem SW0XWPTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unplanned/planned wo flag
DataItem SW0XWPUW char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// qty  flag
DataItem SW0XWQTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request pallet
DataItem SW0XWRPL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format crtn seq switch
DataItem SW0XWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new iseg code
DataItem SW0XWSEG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size in error
DataItem SW0XWSER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size flag
DataItem SW0XWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size index
DataItem SW0XWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new class code
DataItem SW0XWSLC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty  flag
DataItem SW0XWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save pk crtn seq nbr
DataItem SW0XWSPK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new size quanity
DataItem SW0XWSQT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new style number
DataItem SW0XWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map request switch
DataItem SW0XWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0XWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0XWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size flag
DataItem SW0XWSZF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// translate size desc flag
DataItem SW0XWTFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new total qty
DataItem SW0XWTNQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// total qty
DataItem SW0XWTQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work carton number
DataItem SW0XWTSO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem SW0XWTYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new unit of measure
DataItem SW0XWUOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new units per case
DataItem SW0XWUPC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work oder group nbr
DataItem SW0XWWOG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new quality code
DataItem SW0XWXQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

