package sw0e;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0E ****
// This application allows users to inquire and/or maintain
// the existing rows in the warehouse lane table as well as add
// new rows. The user will specify the warehouse and/or one or
// more of the following: lane number; length; and type. All
// rows meeting the specified selection criteria will be re-
// turned for user inquiry or maintenance. A maximum of tewlve
// rows will be formatted and displayed. The users will be
// given scrolling capability via standard PF keys. If any
// existing data has been modified or added, scrolling will not
// be permitted until the update is committed or cancelled.
// 
// The user may modify up to one page( 12 rows) at a time. All
// fields may be modified with the exception of the lane num-
// ber. The ENTER key will commit all updates.
// 
// The user may add new lane rows by pressing PF14 from the
// Maintenance mode regardless of the number of rows that exist
// for the warehouse. This will clear the screen with the ex-
// ception of the selection criteria which will be used to
// format the first row and place the user in the ADD mode. The
// user will be allowed to add up to one page (12 rows) at a
// time. The ENTER key will commit all additions.
// 
// There is no row deletion capability for the Lane table in
// this program; however, rows can be inactivated via the lane
// status.
// 
// The user may 'toggle' between inquire, change, and add modes
// using the PF15 key.
// 
// Lane number, type, length, and status are required fields.
// Lane type and lane length will be validated when the value
// is greater than zero. Context sensitive help will be
// available for the lane type and lane length columns.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      10/05/90  RGUTMA  New application.
// FIX      01/09/91  MSMIT3  Chg error msg to for Lane Status
//                            Inactive/Lane Open incompatiblity
// CDE001   01/15/91  CENGEL  Do not allow Inspection Number
//                            to be entered for 'WP' or 'UX'
//                            Lane Type.  SW0E520 & SW0E530
//                            were updated for this edit.
//          02/12/91  ryonke  program changes for table changes
// PK4020   02/28/91  KHEINA  Modify application to handle
//                            additional fields from the lane
//                            table. The additional fields
//                            were added to satisfy the
//                            requirements of the leveling
//                            process.
//                            Since the run mode is now part
//                            of the key to the table, the
//                            table may contain 2 rows for a
//                            lane: the normal lane row and the
//                            plan lane row. When displaying
//                            the plan lane info, protect the
//                            lane length and dimension, since
//                            these columns should always
//                            contain the same values for the
//                            normal and plan lane. When
//                            updating the length or dimension
//                            for the normal lane, update the
//                            plan lane as well to keep the
//                            values in sync.
//                            Add additional wild card values
//                            to the heading, including run
//                            mode. Modified iomod IO5330 to
//                            handle the new wild card values.
//                            Also modified application to
//                            conform to Nike stds. Removed
//                            paging logic from 300 level
//                            processes. For paging, appl now
//                            drops through 300, 400, 500, and
//                            600 level processes. Formats a
//                            new screen in 200 lvl processes.
//                            Added logic to SW0E210 to obtain
//                            a new page from temp storage and
//                            move the data to the map. Added
//                            process SW0E550 to edit for valid
//                            paging request.
//                            Modified map so that a numeric
//                            value must be entered in the lane
//                            group field. The db field is
//                            alpha, but it should always
//                            contain a numeric value.
//                            contain a numeric value. When
//                            the application work records
//                            are initialized, the lane
//                            group field(s) must also be
//                            initialized to "00".
// SBEAUC  04/17/91   Allow 's' and 'n' as valid run modes for
//                    'pk' and 'qi' types, disallow ' '. Also
//                    force entry of lane group if 'pk' or 'qi'
// tbl chg 06/11/91   change ylgcd to swclngrp for table chng.
// SL#0     10/10/91  SPOPA   Add XGPCD to XHDTBL search key
//                            using XGPCD1 from XWHTBL.
// MAINT    01/30/92  GRAY    INITIALIZE ALL MAPS AND RECORDS.
// SL#0     09/25/95  RYONKE  Added XGPCD2 AND XGPCD3 TO XHDTBL
//                            SEARCH PROCESS.
// fc vas   07/17/96  pshank  Modify lane type edits for whse -
//                            = '51'.Allow lane type 'FC' for
//                            full case VAS. Edits for lane typ
//                            'FC' are similar to lane type PK
//                            Modules changed are SW0E510
//                                                SW0E520 and
//                                                SW0E530
// dcsplit  11/06/96  psharm  changed logic to protect the lane
//                            type in change(update) mode.
//                            Modules changed is SW0ES05.
// apparel  05/21/97  sjohn6  removed logic to protect the lane
//                            type in change(update) mode.
//                            Modules changed is SW0ES05.
// maint    06/25/97  dgerlt  Added a line on the screen to
//                            allow global changes to a range
//                            of lanes.
// *********************
Program SW0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0EW00 SW0EW00; // record
  SW0EW01 SW0EW01; // record
  SWAREC SWAREC; // record
  SWCREC SWCREC; // record
  SWQREC SWQREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XHDTBL; // table
  use XLLTBL; // table
  use XLNTBL; // table
  use XWHTBL; // table
  use SW0EM.SW0EM001,  // forms
      SW0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
     /* Note:*/
      /* If additional fields are added to the screen, be sure*/
      /* to move the correct work record length to the temp*/
      /* storage length (SW0EW00.XXXTSLEN).*/
     /* ------------------------------------------------------------*/

    set SW0EM001 initial; /* M001 input/output*/
    set XX0XM001 initial;
    set SW0EW00 empty; /* Working storage*/
    set SW0EW01 empty;
    set SWAREC empty;
    set SWCREC empty;
    set SWQREC empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set XX0XW02 empty;

    SW0EW00.SW0EMGRP = "00"; /* Heading lane group*/

    set SW0EW01 empty; /* Working storage*/

    SW0EW00.SW0EWIX3 = 1; /* Work index*/

    while (SW0EW00.SW0EWIX3 <= 12) /* Occurs*/

      SW0EW01.SWCLNGRP[SW0EWIX3] = "00"; /* Det line lane grp*/

      SW0EW00.SW0EWIX3 = SW0EW00.SW0EWIX3 + 1; /* Work index*/

    end

    SW0EW00.SW0EWSWF = "Y"; /* Format the map switch*/
    SW0EW00.SW0EWSWR = "N"; /* Request for data switch*/
    SW0EW00.SW0EWTS = "N"; /* PA2 logic switch*/
    SW0EW00.SW0EWACP = "N"; /* ADD complete indicator*/
    SW0EW00.XXXTSLEN = 300; /* Temporary storage length*/

     /* ------------------------------------------------------------*/
     /* Intilalize Map and switches based upon authority/origin.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.CAADDFL == "Y") /* If ADD authority*/
      SW0EM001.SW0EMP14 = "14:ADD"; /* Display PF14 option*/
    else
      SW0EM001.SW0EMP14 = "      "; /* Do not display PF14 option*/
    end

    if (COMMAREA.CAFROMAP == "SW0C" /* If from 'SW0C' application*/
     && SLWREC.SLWFMSEL == "5"      /* and SW0C option is '5'*/
     && COMMAREA.CACHGFL == "Y")    /* and MNT mode is allowed by security*/
      SW0EW00.SW0EWMDE = "C"; /* there is an update option*/
    else
      SW0EW00.SW0EWMDE = "I"; /* else it is inquiry only*/
    end
     /* ----------------------------------------------------------*/
     /* default to passed warehouse if not blank*/
     /* ----------------------------------------------------------*/

    if (SLWREC.XWHCD != "  ") /* there is a whse code*/

      SW0EW00.XWHCD = SLWREC.XWHCD; /* save it in display storage*/
      SW0EM001.XWHCD = SLWREC.XWHCD; /* save it in screen*/
      if (SW0EW00.XWHCD in XWHTBL.XWHCD)
        SW0EM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end /* save abrv*/
      SW0EW00.SW0EWSWR = "Y"; /* request for data*/
      SW0EW00.SW0EWSWF = "N"; /* clear format request*/
      SW0EW00.SW0EWNWD = "Y"; /* new header data switch*/

    else

      converseLib.validationFailed(9); /* field required msg*/
      set SW0EM001.XWHCD cursor, bold; /* highlight*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0E001; /* Converse the main process*/

    SW0E001: SW0E001();
    goto SW0E001; /* Converse the main process*/
  end // end main
end // end SW0E

// Main process to display a map
Function SW0E001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0E100(); /* Obtain the data to display*/

  SW0E200(); /* Format and display the map*/

  SW0E300(); /* Check attention identifier*/

  SW0E400(); /* Reset fields to normal intensity*/

  SW0E500(); /* Verify the data that was entered*/

  SW0E600(); /* Process valid input request*/



end // end SW0E001

// Obtain the data to display
Function SW0E100()
   /* ------------------------------------------------------------*/
   /* 1 - Delete temp storage as a result of first time or PA2*/
   /* 2 - If a previous error (EZEMNO NE 0) then return*/
   /* 3 - sw0e110 - obtain data*/
           /* i. sw0e111 - select unique/wildcard*/
         /* ------*/
   /* Loop  | ii. sw0e112 - select next (n1)*/
         /* | iii. sw0e113 - move row to temp storage (IX)*/
         /* |    a. If page full, then sw0e114 write temp storage*/
         /* ------*/
           /* iv. sw0e115 - Close cursor*/
            /* v. sw0e116 - Read 1st page temp storage on MNT/INQ*/
                       /* - Move rows to map on add*/
                       /* - Move empty rows to map on add*/
                       /* - Set attributes*/
                       /* - Set cursor for add*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Delete temporary storage*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWSWR == "N") /* Data was not requested*/

    SW0ES01(); /* Delete temp storage*/
    SW0EW00.SW0EWSWR = "Y"; /* Data to be requested*/
    return; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* or an error was found*/

    if (converseVar.validationMsgNum == 20) /* Continue for "transaction complete'*/
       /* NEXT SENTENCE*/
    else
      return; /* Return to previous process*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Retrieve database information, build temp storage & screens*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWNWD == "Y") /* If there is new data to be built*/
    if (converseVar.eventKey is enter /* With the ENTER key*/
     || converseVar.eventKey is pf15) /* With the pf15 key*/
      SW0E110(); /* Obtain data to display*/
      return; /* Return to converse map*/
    end
  end


  if (converseVar.eventKey is pf14) /* With the pf14 key*/
    if (SW0EW00.SW0EWMDE == "A") /* ADD mode*/
      SW0E116(); /* Move data to screen*/
      return; /* Return to converse map*/
    else /* Not ADD mode*/
      SW0E110(); /* Obtain data to display*/
      return; /* Return to converse map*/
    end
  end


  if (SW0EW00.SW0EWACP == "Y") /* If ADD function is complete*/
    SW0E110(); /* Obtain data to display*/
    SW0EW00.SW0EWACP = "N"; /* Reset ADD complete indicator*/
    return; /* Return to converse map*/
  end

end // end SW0E100

// Obtain Lane database data
Function SW0E110()
   /* ------------------------------------------------------------*/
   /* Select from Lane Table DB*/
   /* ------------------------------------------------------------*/

  SW0E111(); /* Select lane DB table*/

  SW0EW00.SW0EWCNT = 0; /* Number of lanes into TS*/

   /* ------------------------------------------------------------*/
   /* Select set and open cursor*/
   /* Fetch and build temp storage until end of cursor*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If data exists*/
    if (SWQREC.SWQFUNCD == "S1") /* If wildcard select*/
      SW0EW00.SW0EWIXM = 0; /* Initialize TS index*/
      SW0EW00.SW0EWSWC = "N"; /* End of cursor switch*/

      while (SW0EW00.SW0EWSWC == "N") /* Until end of cursor*/
        SW0E112(); /* Fetch next row*/
      end
      SW0E115(); /* Close the selected cursor*/
      if (SW0EW00.SW0EWIXM > 0) /* Remaining data*/
        SW0E114(); /* Write remaining data to temp storage*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into one temp storage page*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If data exists*/
    if (SWQREC.SWQFUNCD == "S ") /* If unique select*/
      SW0EW00.SW0EWIXM = 0; /* Initialize TS index*/
      SW0E113(); /* Move to temp storage*/
      SW0E114(); /* Write data to temp storage*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain data for page to be sent*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "A") /* If ADD mode*/
    SW0E116(); /* Obtain data for page to be sent*/
  else
    if (SW0EW00.SW0EWCNT > 0) /* If lanes retrieved gt 0*/
      SW0E116(); /* Obtain data for page to be sent*/
    else /* maintain current screen*/
      converseLib.validationFailed(12); /* Record is not on database*/
      SLWREC.XXXLOCID = "110"; /* Module identification*/
      set SW0EM001.XWHCD cursor; /* Cursor to warehouse*/
    end
  end

end // end SW0E110

// Obtain the Lane Table rows
Function SW0E111()
   /* ------------------------------------------------------------*/
   /* Select lane DB Lane*/
   /* If ADD mode, then force wildcard select*/
   /* ------------------------------------------------------------*/

  set SWCREC empty; /* Clear row storage area*/

  SWCREC.XWHCD = SW0EM001.XWHCD; /* Warehouse code*/
  SWCREC.PKURUNMD = " "; /* picking run mode*/

  if (SW0EM001.SW0EMLNB > 0 /* Lane number entered*/
   && SW0EW00.SW0EWMDE != "A") /* Not ADD mode*/
    SWCREC.SWCLNENB = SW0EM001.SW0EMLNB; /* Lane number*/
  else /* Lane numbere  not entered*/
    SWCREC.SWCLNENB = -1; /* Lane number*/
  end

  if (SW0EM001.SW0EMRMD > " " /* Run mode  entered*/
   && SW0EW00.SW0EWMDE != "A") /* Not ADD mode*/
    SWCREC.PKURUNMD = SW0EM001.SW0EMRMD; /* Run mode*/
  else /* Run mode not entered*/
    SWCREC.PKURUNMD = "*"; /* Run mode*/
  end

  if (SW0EM001.SW0EMLTP > " " /* Lane type entered*/
   && SW0EW00.SW0EWMDE != "A") /* Not ADD mode*/
    SWCREC.XLNCD = SW0EM001.SW0EMLTP; /* Lane type*/
  else /* Lane type not entered*/
    SWCREC.XLNCD = "*"; /* Lane type*/
  end

  if (SW0EM001.SW0EMLLN > " " /* Lane length  entered*/
   && SW0EW00.SW0EWMDE != "A") /* Not ADD mode*/
    SWCREC.XLLCD = SW0EM001.SW0EMLLN; /* Lane length*/
  else /* Lane length not entered*/
    SWCREC.XLLCD = "*"; /* Lane length*/
  end

   /* IF SW0EM001.SW0EMGRP GT ' '     ; Lane group entered*/
  if (SW0EM001.SW0EMGRP > 0 /* Lane group entered*/
   && SW0EW00.SW0EWMDE != "A") /* Not ADD mode*/
    SWCREC.SWCLNGRP = SW0EM001.SW0EMGRP; /* Lane group*/
  else /* Lane group not entered*/
    SWCREC.SWCLNGRP = "*"; /* Lane group*/
  end

  if (SW0EM001.SW0EMHND > " " /* Hndl cd entered*/
   && SW0EW00.SW0EWMDE != "A") /* Not ADD mode*/
    SWCREC.XHDCD = SW0EM001.SW0EMHND; /* Hndl cd*/
  else /* Hnld cd not entered*/
    SWCREC.XHDCD = "*"; /* Hndl cd*/
  end

  if (SW0EM001.SW0EM1T1 > " " /* 1 to 1 flag entered*/
   && SW0EW00.SW0EWMDE != "A") /* Not ADD mode*/
    SWCREC.SWC1T1FL = SW0EM001.SW0EM1T1; /* 1 to 1 fl*/
  else /* 1 to 1 fl not entered*/
    SWCREC.SWC1T1FL = "*"; /* 1 to 1 fl*/
  end

   /* ------------------------------------------------------------*/
   /* Select lane IO call*/
   /* ------------------------------------------------------------*/

  set SWQREC empty; /* Clear swqREC*/

  if (SW0EM001.SW0EMLNB > 0    /* Lane number entered*/
   && SW0EM001.SW0EMRMD > " "  /* Lane run mode entered*/
   && SW0EW00.SW0EWMDE != "A"  /* Not ADD mode*/
   && SW0EM001.SW0EMLTP <= " " /* Lane type not entered*/
   && SW0EM001.SW0EMLLN <= " " /* Lane length not entered*/
   /* AND SW0EM001.SW0EMGRP LE ' '  ; Lane group not entered*/
   && SW0EM001.SW0EMGRP <= 0   /* Lane group not entered*/
   && SW0EM001.SW0EMHND <= " " /* Lane hndl cd not entered*/
   && SW0EM001.SW0EM1T1 <= " ") /* Lane 1 to 1 flag not entered*/
    SWQREC.SWQFUNCD = "S "; /* SQL select unique value*/
  else
    SWQREC.SWQFUNCD = "S1"; /* SQL select wildcard value*/
  end

  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WAREHOUSE/LANE TYPE   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
  SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
  SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
  SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
  SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
  TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E111

// Select next lane DB record
Function SW0E112()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted*/
   /* ------------------------------------------------------------*/
  set SWQREC empty; /* Clear swqREC*/
  SWQREC.SWQFUNCD = "N1"; /* SQL next wildcard value*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    SW0E113(); /* load into temporary storage*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If end of the selected set, indicate end of cursor*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* End of selected set*/

    SW0EW00.SW0EWSWC = "Y"; /* Indicate end of cursor*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT LANE DATABASE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
  SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
  SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
  SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
  SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
  TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E112

// Load lane DB record into TS
Function SW0E113()
   /* ------------------------------------------------------------*/
   /* Load SWCREC into SW0EW01 temp storage area*/
   /* ------------------------------------------------------------*/
   /* Note:*/
    /* Write 11 or 12 lines to the temp storage page, depending*/
    /* on the contents of the last line. If 11 lines have been*/
    /* written to temp storage and the current lane is a normal*/
    /* lane, write the temp storage page and start a new one*/
    /* with the normal lane at the top. If 11 lines have been*/
    /* written and the current lane is a plan lane, move the*/
    /* plan info the the 12th line and write the temp storage*/
    /* page with the plan lane at the bottom.*/

    /* This logic was added to make sure that the plan lane*/
    /* for a normal lane always appears on the same page*/
    /* as the normal lane. When the lane length or dimension*/
    /* are updated for a normal lane, those fields must be*/
    /* updated on the plan lane as well. If the plan lane*/
    /* is always on the same page as the normal lane, the*/
    /* the processing required to update temp storage for*/
    /* the plan lane is simpler.*/
   /* Note:*/
    /* Always set work lane group to a numeric value. The*/
    /* map field is defined as a numeric field, and the*/
    /* application uses a comparison of the values in the*/
    /* map field and the work field to determine whether*/
    /* any updates have taken place. The work field must*/
    /* be initialized to zero, and must be loaded with*/
    /* zeros when the database field contains spaces, for*/
    /* the application to work properly.*/
   /* ------------------------------------------------------------*/

  if (SWCREC.PKURUNMD == "P") /* Run mode*/
     /* Next sentence*/
  else
    if (SW0EW00.SW0EWIXM > 10) /* TS area full*/
      SW0E114(); /* Write Temp Storage*/
    end
  end

  SW0EW00.SW0EWCNT = SW0EW00.SW0EWCNT + 1; /* Increment lanes retrieved*/

  SW0EW00.SW0EWIXM = SW0EW00.SW0EWIXM + 1; /* Increment TS index*/

  SW0EW01.SW0EWLU[SW0EWIXM] = "Y"; /* Line has data*/
  SW0EW01.ZZZCHGCT[SW0EWIXM] = SWCREC.ZZZCHGCT; /* ZZ chg cnt*/
  SW0EW01.SWCLNENB[SW0EWIXM] = SWCREC.SWCLNENB; /* Lane number*/
  SW0EW01.XLNCD[SW0EWIXM] = SWCREC.XLNCD; /* Lane type*/
  SW0EW01.XLLCD[SW0EWIXM] = SWCREC.XLLCD; /* Lane length*/
  SW0EW01.SWCMAXCS[SW0EWIXM] = SWCREC.SWCMAXCS; /* Max cases*/
  SW0EW01.SWAINSNB[SW0EWIXM] = SWCREC.SWAINSNB; /* Inspection number*/
  SW0EW01.XXXSTAT[SW0EWIXM] = SWCREC.XXXSTAT; /* Lane status*/
  SW0EW01.SWCAVLFL[SW0EWIXM] = SWCREC.SWCAVLFL; /* Lane availability*/
  SW0EW01.PKURUNMD[SW0EWIXM] = SWCREC.PKURUNMD; /* Run mode*/
  SW0EW01.SWCLNDIM[SW0EWIXM] = SWCREC.SWCLNDIM; /* Lane dimen*/
  if (SWCREC.SWCLNGRP == "  ") /* Lane group code*/
    SW0EW01.SWCLNGRP[SW0EWIXM] = "00"; /* Init work lane group*/
  else
    SW0EW01.SWCLNGRP[SW0EWIXM] = SWCREC.SWCLNGRP; /* Lane group code*/
  end
  SW0EW01.XHDCD[SW0EWIXM] = SWCREC.XHDCD; /* Hndl cd*/
  SW0EW01.SWCQLTFL[SW0EWIXM] = SWCREC.SWCQLTFL; /* Qual insp cd*/
  SW0EW01.SWC1T1FL[SW0EWIXM] = SWCREC.SWC1T1FL; /* 1 to 1 flag*/

   /* ------------------------------------------------------------*/
   /* Test for full temp storage area*/
   /* ------------------------------------------------------------*/

  if (SWCREC.PKURUNMD == "P") /* Run mode*/
    if (SW0EW00.SW0EWIXM > 11) /* TS area full*/
      SW0E114(); /* Write Temp Storage*/
    end
  end

end // end SW0E113

// Write temporary storage
Function SW0E114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0EW01.XXXTSLEN = SW0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0EW01 empty; /* M001 display storage*/

    SW0EW00.SW0EWIX3 = 1; /* Work index*/

    while (SW0EW00.SW0EWIX3 <= 12) /* Occurs*/

      SW0EW01.SWCLNGRP[SW0EWIX3] = "00"; /* Lane group*/

      SW0EW00.SW0EWIX3 = SW0EW00.SW0EWIX3 + 1; /* Work index*/

    end

    SW0EW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    SW0EW00.XXXTSPAG = TA5REC.TA5TSQIX; /* Current page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    SW0EW00.SW0EWIXM = 0; /* Reset TS index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "114"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E114

// Close selected cursor DB lane
Function SW0E115()
   /* ------------------------------------------------------------*/
   /* Close selected cursor*/
   /* ------------------------------------------------------------*/

  set SWQREC empty; /* Clear swqREC*/
  SWQREC.SWQFUNCD = "C1"; /* SQL Close wildcard value*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E115

// Obtain rows for screen
Function SW0E116()
  SW0EW00.SW0EWNWD = "N"; /* Data no longer new*/

   /* ------------------------------------------------------------*/
   /* If ADD function (regardless of whether or not there is data)*/
      /* Clear TS area*/
      /* Move header fields to first line*/
      /* Add 1 to last page*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "A") /* If ADD request*/
    SW0EW01.SWCLNENB[1] = SW0EM001.SW0EMLNB; /* Hdr lane num to TS*/
    SW0EW01.XLLCD[1] = SW0EM001.SW0EMLLN; /* Hdr lane len to TS*/
    SW0EW01.XLNCD[1] = SW0EM001.SW0EMLTP; /* Hdr lane typ to TS*/
    SW0EW01.PKURUNMD[1] = SW0EM001.SW0EMRMD; /* Hdr run mode to TS*/
    SW0EW01.SWCLNGRP[1] = SW0EM001.SW0EMGRP; /* Hdr lane grp to TS*/
    SW0EW01.XHDCD[1] = SW0EM001.SW0EMHND; /* Hdr hndl cd to TS*/
    SW0EW01.SWC1T1FL[1] = SW0EM001.SW0EM1T1; /* Hdr 1 to 1 fl to TS*/
    SW0EW00.XWHCD = SW0EM001.XWHCD; /* Reset warehouse*/
    SW0EM001.SW0EMLNB = 0; /* Clear hdr lane num*/
    SW0EW00.SW0EMLNB = 0; /* Clear w-s lane num*/
    SW0EM001.SW0EMLLN = " "; /* Clear hdr lane length*/
    SW0EW00.SW0EMLLN = " "; /* Clear w-s lane length*/
    SW0EM001.SW0EMLTP = " "; /* Clear hdr lane type*/
    SW0EW00.SW0EMLTP = " "; /* Clear w-s lane type*/
    SW0EM001.SW0EMRMD = " "; /* Clear hdr run mode*/
    SW0EW00.SW0EMRMD = " "; /* Clear w-s run mode*/
    SW0EM001.SW0EMGRP = 0; /* Clear hdr lane group*/
    SW0EW00.SW0EMGRP = "00"; /* Clear w-s lane group*/
    SW0EM001.SW0EMHND = " "; /* Clear hdr hndl cd*/
    SW0EW00.SW0EMHND = " "; /* Clear w-s hndl cd*/
    SW0EM001.SW0EM1T1 = " "; /* Clear hdr 1 to 1 flag*/
    SW0EW00.SW0EM1T1 = " "; /* Clear w-s 1 to 1 flag*/
  end

   /* ------------------------------------------------------------*/
   /* If INQ or MNT functions*/
      /* If there is data (or temp storage)*/
         /* Read the first page*/
         /* Move current w-s pages to map*/
      /* else*/
         /* Move current w-s pages to map (equal zeros)*/
         /* Send 'Record not on database' message*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "I" /* If INQ request*/
   || SW0EW00.SW0EWMDE == "C") /* Or MNT request*/
    if (SW0EW00.TA5TSQIX > 0) /* if temp storage exists*/
      if (SW0EW00.SW0EWGCHG != "Y") /* if global change requested*/
        SW0EW00.XXXTSPAG = 1; /* Set the page number at 1*/
      else
        SW0EW00.XXXTSPAG = SW0EW00.SW0EWHPG;
                                   /* Set the page back to prev*/
      end
      SW0EW00.SW0EWGCHG = "N";
      SW0ES02(); /* Read temporary storage page*/
      SW0EM001.MAPLMPNO = SW0EW00.XXXTSPAG; /* move curr page number*/
      SW0EM001.MAPLMPAG = SW0EW00.TA5TSQIX; /* move max page number*/
    else
      SW0EM001.MAPLMPNO = SW0EW00.XXXTSPAG; /* move curr page number*/
      SW0EM001.MAPLMPAG = SW0EW00.TA5TSQIX; /* move max page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Load temp storage into map area*/
   /* ------------------------------------------------------------*/


  SW0EW00.SW0EWIXM = 1; /* Initialize map field index*/
  while (SW0EW00.SW0EWIXM <= 12) /* while occur is 1 to 12*/
    SW0ES03(); /* move ts occur to map occur*/
  end

   /* ------------------------------------------------------------*/
   /* Reset attributes*/
   /* ------------------------------------------------------------*/

  SW0ES04(); /* Header attributes*/

  SW0EW00.SW0EWIXM = 1; /* Initialize map field index*/
  while (SW0EW00.SW0EWIXM <= 12) /* while occur is 1 to 12*/
    SW0ES05(); /* move attributes to map occur*/
  end

   /* ------------------------------------------------------------*/
   /* Set up cursor for ADD request*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "A") /* If ADD request*/
    if (SW0EW01.SWCLNENB[1] == 0) /* If lane number not entered*/
      set SW0EM001.SWCLNENB[1] cursor; /* Move cursor to lane number*/
    else
      if (SW0EW01.PKURUNMD[1] <= " ") /* If run mode not entered*/
        set SW0EM001.PKURUNMD[1] cursor; /* Move cursor to run mode*/
      else
        if (SW0EW01.XLLCD[1] <= " ") /* If lane length not entered*/
          set SW0EM001.XLLCD[1] cursor; /* Move cursor to lane length*/
        else
          set SW0EM001.SWCLNDIM[1] cursor; /* Move cursor to lane dimen*/
        end
      end
    end
  end

end // end SW0E116

// Format and converse the map
Function SW0E200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0EW00.SW0EWSWF == "Y") /* Map must be formatted*/
      SW0E210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0EM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* Format pf14/pf15 map options*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "I") /* Inquiry mode*/
    SW0EM001.SW0EMLIT = "   I N Q U I R Y "; /* Map sub title*/
    if (COMMAREA.CACHGFL == "Y") /* MNT authority*/
      SW0EM001.SW0EMP15 = "15:CHG"; /* Map pf15 field*/
    else
      SW0EM001.SW0EMP15 = "        "; /* Map pf15 field*/
    end
  end

  SW0EM001.SW0EMFRLNM = "          ";
  SW0EM001.SW0EMTOLNM = "        ";
  SW0EM001.SW0EMRNMDM = "         ";
  SW0EM001.SW0EMLNSTM = "          ";
  SW0EM001.SW0EMLNOPM = "          ";

  if (SW0EW00.SW0EWMDE == "C") /* chg mode*/
    SW0EM001.SW0EMLIT = "    C H A N G E "; /* Map sub title*/
    SW0EM001.SW0EMP15 = "15:INQ"; /* Map pf15 field*/
    if (SW0EM001.XWHCD == "51")
      SW0EM001.SW0EMFRLNM = "FROM LANE:";
      SW0EM001.SW0EMTOLNM = "TO LANE:";
      SW0EM001.SW0EMRNMDM = "RUN MODE:";
      SW0EM001.SW0EMLNSTM = "LANE STAT:";
      SW0EM001.SW0EMLNOPM = "LANE OPEN:";
    end
  end

  if (SW0EW00.SW0EWMDE == "A") /* ADD mode*/
    SW0EM001.SW0EMLIT = "       A D D         "; /* Map sub title*/
    SW0EM001.SW0EMP15 = "15:INQ"; /* Map pf15 field*/

    if (SLWREC.SLWFMSEL == "5") /* SW0C menu option 5 maintenance*/
      SW0EM001.SW0EMP14 = "14:CHG"; /* Map pf14 field*/
    else
      SW0EM001.SW0EMP14 = " "; /* Map pf14 field*/
    end

  else
    if (COMMAREA.CAADDFL == "Y") /* If ADD security and mode is INQ/MNT*/
      SW0EM001.SW0EMP14 = "14:ADD"; /* Map pf14 field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0EM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0EM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0EM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0EM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information*/
   /* ------------------------------------------------------------*/

  SW0EM001.XXXMODID = " "; /* Module identification*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0EM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = SW0EM001.CAITEM; /* Application data*/

end // end SW0E200

// Format the display data
Function SW0E210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0EM001 initial; /* M001 input/output area*/

  SW0EW00.SW0EWSWF = "N"; /* Format the map switch*/
  SW0EW00.SW0EWSWR = "Y"; /* Request for data*/

  if (COMMAREA.CAADDFL == "Y") /* IF ADD authority*/
    set SW0EM001.SW0EMP14 protect, modified; /* Normal intensity protect*/
  else
    set SW0EM001.SW0EMP14 protect, invisible; /* Dark protect*/
  end

  if (COMMAREA.CACHGFL == "Y") /* IF chg authority*/
    set SW0EM001.SW0EMP15 protect, modified; /* Normal intensity protect*/
  else
    if (SW0EW00.SW0EWMDE == "A") /* In Add mode*/
      set SW0EM001.SW0EMP15 protect, modified; /* Normal intensity protect*/
    else
      set SW0EM001.SW0EMP15 protect, invisible; /* Dark protect*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
    /* obtain the desired page from temp storage*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0EW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest*/
        /* page in storage, default to the highest page number*/
      /* ------------------------------------------------------------*/

      if (SW0EW00.XXXTSPAG > SW0EW00.TA5TSQIX) /* Desired page greater*/
        SW0EW00.XXXTSPAG = SW0EW00.TA5TSQIX; /* Default to highest*/
      end

      SW0ES02(); /* Obtain temp storage page*/

    end

    set SW0EM001.MAPLMPGL skip; /* Page literal*/
    SW0EM001.MAPLMPNO = SW0EW00.XXXTSPAG; /* Page number*/
    set SW0EM001.MAPLMPOL skip; /* Page literal*/
    SW0EM001.MAPLMPAG = SW0EW00.TA5TSQIX; /* Number pages*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data on the map from temp storage*/
   /* ------------------------------------------------------------*/

  SW0EM001.XWHCD = SW0EW00.XWHCD; /* Reset whse*/
  SW0EM001.SW0EMLNB = SW0EW00.SW0EMLNB; /* Reset lane number*/
  SW0EM001.SW0EMLLN = SW0EW00.SW0EMLLN; /* Reset lane length*/
  SW0EM001.SW0EMLTP = SW0EW00.SW0EMLTP; /* Reset lane type*/
  SW0EM001.SW0EMRMD = SW0EW00.SW0EMRMD; /* Reset run mode*/
  SW0EM001.SW0EMGRP = SW0EW00.SW0EMGRP; /* Reset group*/
  SW0EM001.SW0EMHND = SW0EW00.SW0EMHND; /* Reset hndl cd*/
  SW0EM001.SW0EM1T1 = SW0EW00.SW0EM1T1; /* Reset 1 to 1 flag*/

  SW0EW00.SW0EWIXM = 1; /* Init map field index*/

  while (SW0EW00.SW0EWIXM <= 12) /* Until screen is full*/

    SW0ES03(); /* Move ts occur to map occur*/

  end

  SW0ES04(); /* Set hdr attrib, cursor*/

  SW0EW00.SW0EWIXM = 1; /* Init map field index*/

  while (SW0EW00.SW0EWIXM <= 12) /* Until screen is full*/

    SW0ES05(); /* Set line attributes*/

  end

  if (converseVar.eventKey is pf7)
    converseLib.validationFailed(14); /* Scroll backward successful*/
  else
    if (converseVar.eventKey is pf8)
      converseLib.validationFailed(13); /* Scroll forward successful*/
    end
  end


end // end SW0E210

// Check attention identifier
Function SW0E300()
   /* ------------------------------------------------------------*/
   /* Attention identifiers are processed in the following order:*/
   /* - PA2 cancel perform*/
   /* - Fast path with <enter> key*/
   /* - Transfers to other applications*/
   /* - PF7/8 perform for plausible/allowable scrolling*/
   /* - PF14 switch to add mode when valid/allowable*/
   /* - PF15 switch into INQ/MNT mode when allowable*/
   /* - If not <enter> , then invalid pf key message*/
   /* - <enter> key and*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0E310(); /* Clear or restore screen*/
    return; /* Exit to set attributes*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/


      SW0ES01(); /* Delete temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SW0EM001.CATOAP cursor, bold; /* Highlight*/

    else

      set SW0EM001.CATOAP cursor, bold; /* Highlight*/

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6 /* or PF6 was pressed*/
   || converseVar.eventKey is pf9 /* or PF9 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0EM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    if (converseVar.eventKey is pf9) /* PF9  was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "SW0B"; /* TO application*/
    end

    SW0ES01(); /* Delete temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll backward*/
   || converseVar.eventKey is pf8) /* Scroll forward*/

    return; /* Exit*/

  end

   /* ------------------------------------------------------------*/
   /* PF14 to ADD mode process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* From MNT/INQ to ADD*/
    if (SLWREC.SLWFMSEL == "5"  /* SW0C Menu option is maintenance*/
     && SW0EW00.SW0EWMDE == "A" /* If currently ADD*/
     && COMMAREA.CACHGFL == "Y") /* CHG security*/
      SW0EW00.SW0EWMDE = "C"; /* To CHG*/
      SW0EW00.SW0EWNWD = "Y"; /* New data*/
      return; /* Exit*/

    else
      if (SW0EW00.SW0EWMDE != "A" /* If currently not in ADD mode*/
       && COMMAREA.CAADDFL == "Y") /* ADD security*/
        SW0EW00.SW0EWMDE = "A"; /* To ADD*/
        SW0EW00.SW0EWNWD = "Y"; /* New data*/
        return; /* Exit*/

      else
        converseLib.validationFailed(4); /* PF key not supported*/
        SLWREC.XXXLOCID = "300"; /* Module identification*/
        exit stack; /* Return to display error msg*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Change of 'INQ', 'ADD', or 'MNT' mode    pf/15*/

   /* ADD ===> INQ*/
     /* If temporary storage exists*/
        /* send the last page*/
     /* else*/
        /* send an empty page*/

   /* MNT ===> INQ*/

   /* INQ ===> MNT*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* Change mode request*/
    if (SW0EW00.SW0EWMDE == "I" /* if in INQ mode*/
     && COMMAREA.CACHGFL != "Y") /* No MNT authority*/
      converseLib.validationFailed(4); /* PF key not supported*/
      SLWREC.XXXLOCID = "300"; /* Module identification*/
      exit stack; /* Return to display error msg*/
    end
  end

  if (converseVar.eventKey is pf15 /* Change mode request*/
   && SW0EW00.SW0EWTS == "N")      /* No update in progress*/

    if (SW0EW00.SW0EWMDE == "A") /* If currently ADD*/
      SW0EW00.SW0EWMDE = "I"; /* Change mode to INQ*/
      SW0EW00.SW0EWNWD = "Y"; /* New data*/
      return; /* Exit to set attributes*/

    else
      if (SW0EW00.SW0EWMDE == "C") /* If currently MNT*/
        SW0EW00.SW0EWMDE = "I"; /* Change mode to INQ*/
        return; /* Exit to set attributes*/
      else

        if (SW0EW00.SW0EWMDE == "I") /* If currently INQ*/
          SW0EW00.SW0EWMDE = "C"; /* From mode MNT*/
          return; /* Exit to set attributes*/

        end
      end
    end
  end

  if (converseVar.eventKey is pf15) /* Change mode request*/
    if (SW0EW00.SW0EWTS == "Y") /* If update in session*/

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(18); /* Selection valid only with (ENTER)*/
      exit stack; /* Exit to display map*/

    end
  end
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER key*/
     /* If MNT or ADD mode and there are lanes*/
        /* and update attempt has been made so set the switch*/
        /* that will restore the screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    if (SW0EW00.SW0EWMDE == "I") /* Mode is INQ*/
      SW0EW00.SW0EWTS = "N"; /* Clear screen on PA2*/
    else
      if (SW0EW00.TA5TSQIX > 0) /* and no is occur data*/
        SW0EW00.SW0EWTS = "Y"; /* Restore screen*/
      end
    end
  end


end // end SW0E300

// PA2 Cancel Process
Function SW0E310()
   /* ------------------------------------------------------------*/
   /* If occur data not entered for update then clear screen*/
     /* and return*/
   /* If update attempt was made (for MNT/ADD only)*/
     /* restore screen from temp storage*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/
  COMMAREA.CAITEM = " "; /* Application data*/

  if (SW0EW00.SW0EWTS == "N") /* Clear screen*/
    SW0EW00.SW0EWSWF = "Y"; /* Format the map switch*/
    SW0EW00.SW0EWSWR = "N"; /* Request for data switch*/

  else /* Exit*/

    SW0EM001.XWHCD = SW0EW00.XWHCD; /* reset warehouse*/
    SW0EM001.SW0EMLNB = SW0EW00.SW0EMLNB; /* reset lane number*/
    SW0EM001.SW0EMLLN = SW0EW00.SW0EMLLN; /* reset lane length*/
    SW0EM001.SW0EMLTP = SW0EW00.SW0EMLTP; /* reset lane type*/
    SW0EM001.SW0EMRMD = SW0EW00.SW0EMRMD; /* reset run mode*/
    SW0EM001.SW0EMGRP = SW0EW00.SW0EMGRP; /* reset lane group*/
    SW0EM001.SW0EMHND = SW0EW00.SW0EMHND; /* reset hndl cd*/
    SW0EM001.SW0EM1T1 = SW0EW00.SW0EM1T1; /* reset 1 to 1 flag*/

    SW0EW00.SW0EWIXM = 1; /* Initialize map field index*/
    while (SW0EW00.SW0EWIXM <= 12) /* while occur is 1 to 12*/
      SW0ES03(); /* move ts occur to map occur*/
    end

    SW0EW00.SW0EWTS = "N"; /* Update session will be cancelled*/

  end


end // end SW0E310

// Reset highlighted fields
Function SW0E400()
   /* ------------------------------------------------------------*/
   /* Reset header/trailer attributes*/
   /* Reset attributes for all 12 occurrences*/
   /* Pop-up window lane length*/
   /* Pop-up window lane type*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SW0ES04(); /* Header/trailer attributes*/

   /* ------------------------------------------------------------*/
   /* Set attributes for all 12 occurrences.*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIXM = 1; /* Initialize work subscript*/
  while (SW0EW00.SW0EWIXM <= 12) /* Until end of lines*/
    SW0ES05(); /* Set attributes for work sub occur*/
  end

   /* ------------------------------------------------------------*/
   /* Return for Cancel/Scroll*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If cancel*/
    /* OR EZEAID IS PF7              ; scroll backward*/
    /* OR EZEAID IS PF8              ; scroll forward*/
    exit stack; /* exit to converse map*/
  end

   /* ------------------------------------------------------------*/
   /* Pop-up window lane length*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EMLLN == "?") /* lane length list requested*/

    SW0E410(); /* Pop-up Lane length*/

  end

   /* ------------------------------------------------------------*/
   /* Pop-up window lane type*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EMLTP == "?") /* lane type list requested*/

    SW0E420(); /* Pop-up Lane type*/

  end

   /* ------------------------------------------------------------*/
   /* Pop-up window hanling code*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EMHND == "?") /* Hndl cd list requested*/

    SW0E430(); /* Pop-up hndl cd*/

  end


end // end SW0E400

// Pop-up window - lane length
Function SW0E410()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of lane length codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "  LANE LENGTH"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXLL01(); /* Display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    SW0EM001.SW0EMLLN = " "; /* Restore prior code*/
  else
    SW0EM001.SW0EMLLN = XLLTBL.XLLCD[XX0XWPIX]; /* Selected length*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/


end // end SW0E410

// Pop-up window - lane type
Function SW0E420()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of lane type codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "  LANE TYPE"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXLN01(); /* Display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    SW0EM001.SW0EMLTP = " "; /* Restore prior code*/
  else
    SW0EM001.SW0EMLTP = XLNTBL.XLNCD[XX0XWPIX]; /* Selected type*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/


end // end SW0E420

// Pop-up window - hndl code
Function SW0E430()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of handling codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "  HNDL CODE"; /* Heading*/
  if (SW0EM001.XWHCD in XWHTBL.XWHCD)
    XX0XW02.XGPCD = XWHTBL.XGPCD1[sysVar.arrayIndex];
  end /* GPC code*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXHD01(); /* Display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    SW0EM001.SW0EMHND = " "; /* Restore prior code*/
  else
    SW0EM001.SW0EMHND = XHDTBL.XHDCD[XX0XWPIX]; /* Selected type*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/


end // end SW0E430

// Verify/edit data
Function SW0E500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Compare header data for changes*/
      /* If change*/
          /* delete temporary storage*/
          /* ezeflo to sw0e100 to obtain data*/
   /* Preliminary edits of ADD/MNT requests*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0EM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Reset Edit error switch*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWSWE = "Y"; /* Assume edits will pass*/

   /* ------------------------------------------------------------*/
   /* Edit scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll backward*/
   || converseVar.eventKey is pf8) /* Scroll forward*/

    SW0E550(); /* Edit scroll request*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Compare current map header data with w-s for any changes*/
   /* If hdr data has been changed, set new data switch to 'y'*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XWHCD != SW0EW00.XWHCD /* Check for warehouse change*/
   || SW0EM001.XWHCD <= " ")          /* No warehouse entry*/
    SW0EW00.SW0EWNWD = "Y"; /* Flag new header data switch*/
  end

  if (SW0EM001.SW0EMLNB != SW0EW00.SW0EMLNB) /* Header lane number change*/
    SW0EW00.SW0EWNWD = "Y"; /* Flag new header data switch*/
  end

  if (SW0EM001.SW0EMLLN <= " " /* If no header lane length entered*/
   && SW0EW00.SW0EMLLN <= " ") /* No previous header lane length*/
      /* NEXT SENTENCE*/
  else
    if (SW0EM001.SW0EMLLN != SW0EW00.SW0EMLLN) /* Header lane length change*/
      SW0EW00.SW0EWNWD = "Y"; /* Flag new header data switch*/
    end
  end

  if (SW0EM001.SW0EMLTP <= " " /* If no header lane type entered*/
   && SW0EW00.SW0EMLTP <= " ") /* No previous header lane type*/
      /* NEXT SENTENCE*/
  else
    if (SW0EM001.SW0EMLTP != SW0EW00.SW0EMLTP) /* Header lane type*/
      SW0EW00.SW0EWNWD = "Y"; /* Flag new header data switch*/
    end
  end

  if (SW0EM001.SW0EMRMD <= " " /* If no header run mode entered*/
   && SW0EW00.SW0EMRMD <= " ") /* No previous header run mode*/
      /* NEXT SENTENCE*/
  else
    if (SW0EM001.SW0EMRMD != SW0EW00.SW0EMRMD) /* Header run mode type*/
      SW0EW00.SW0EWNWD = "Y"; /* Flag new header data switch*/
    end
  end

  if (SW0EM001.SW0EMGRP <= "00" /* If no header lane group entered*/
   && SW0EW00.SW0EMGRP <= "00") /* No previous header lane group*/
      /* NEXT SENTENCE*/
  else
    if (SW0EM001.SW0EMGRP != SW0EW00.SW0EMGRP) /* Header lane group type*/
      SW0EW00.SW0EWNWD = "Y"; /* Flag new header data switch*/
    end
  end

  if (SW0EM001.SW0EMHND <= " " /* If no header hndl cd entered*/
   && SW0EW00.SW0EMHND <= " ") /* No previous header hndl cd*/
      /* NEXT SENTENCE*/
  else
    if (SW0EM001.SW0EMHND != SW0EW00.SW0EMHND) /* Header hndl cd*/
      SW0EW00.SW0EWNWD = "Y"; /* Flag new header data switch*/
    end
  end

  if (SW0EM001.SW0EM1T1 <= " " /* If no header 1 to 1 fl entered*/
   && SW0EW00.SW0EM1T1 <= " ") /* No previous header 1 to 1 fl*/
      /* NEXT SENTENCE*/
  else
    if (SW0EM001.SW0EM1T1 != SW0EW00.SW0EM1T1) /* Header 1 to 1 fl*/
      SW0EW00.SW0EWNWD = "Y"; /* Flag new header data switch*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If any changes or no warehouse entered, edit header data*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWNWD == "Y") /* There is new data*/
    SW0EW00.SW0EWTS = "N"; /* On PA2, Clear (not restore) screen*/
    SW0E510(); /* Edit header data*/
    exit stack; /* Return to Main Process*/
  end

   /* ------------------------------------------------------------*/
   /* If change mode, edit global change*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "C") /* If mode is MNT*/
    SW0E511(); /* Edit global change header*/
  end

   /* ------------------------------------------------------------*/
   /* ezeflo for pf15 request now that hdr change checked*/
   /* ezeflo for Inquiry mode*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* Header changes checked - return*/
   || SW0EW00.SW0EWMDE == "I")     /* INQ mode - return*/
    exit stack; /* Return to Main Process*/
  end

   /* ------------------------------------------------------------*/
   /* Edit ADD entries from row 12 to row 1*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "A") /* If mode is ADD*/
    SW0EW00.SW0EWCNT = 0; /* Initialize occurs added*/
    SW0EW00.SW0EWIXM = 13; /* Initialize occur index*/
    while (SW0EW00.SW0EWIXM > 1)
      SW0E520(); /* Edit ADD entries 12 times*/
    end
    if (SW0EW00.SW0EWCNT == 0) /* If no entries were added*/
      set SW0EM001.SWCLNENB[1] cursor; /* Move cursor to first lane num*/
      SLWREC.XXXLOCID = "500"; /* Module identification*/
      converseLib.validationFailed(5); /* New input required*/
    end
    return; /* Return*/
  end

   /* ------------------------------------------------------------*/
   /* Edit MNT entries from row 12 to row 1*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "C") /* If mode is MNT*/
    SW0EW00.SW0EWCNT = 0; /* Initialize occurs maintained*/
    SW0EW00.SW0EWIXM = 13; /* Initialize occur index*/
    while (SW0EW00.SW0EWIXM > 1)
      SW0E530(); /* Edit MNT entries 12 times*/
    end
    if (SW0EW00.SW0EWCNT == 0 /* If no entries were maintained*/
     && SW0EMFRLN == 0000)    /* and global change not entered*/
      if (SW0EM001.PKURUNMD[1] == "P") /* Run mode*/
        set SW0EM001.XLNCD[1] cursor; /* Cursor - lane type*/
      else
        set SW0EM001.XLLCD[1] cursor; /* Cursor - lane length*/
      end
      SLWREC.XXXLOCID = "500"; /* Module identification*/
      converseLib.validationFailed(5); /* New input required*/
    else
      /* NEXT SENTENCE*/
    end
    return; /* Return*/
  end
end // end SW0E500

// Edit Map header data
Function SW0E510()
   /* ------------------------------------------------------------*/
   /* Edit map header data*/
     /* Verify that no detail line fields were changed*/
     /* Delete temp storage for the previous header*/
     /* Clear row and page fields on map*/
     /* Edit header fields*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verify that no detail line fields were changed*/
   /* ------------------------------------------------------------*/

  SW0E555(); /* Test for changes to detail lines*/

  if (converseVar.validationMsgNum != 0) /* Message number not equal to zero*/
    SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/

    return; /* Return to process*/
  end

   /* ------------------------------------------------------------*/
   /* Delete temp storage for the previous header*/
   /* Clear row and page fields on map*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.TA5TSQIX > 0) /* If temporary storage exists*/
    SW0ES01(); /* Delete temp storage*/
  end

  SW0EM001.MAPLMPNO = 0; /* Current map page*/
  SW0EM001.MAPLMPAG = 0; /* Maximum map page*/

  SW0EW00.SW0EWIXM = 1; /* Initialize index to 1*/
  while (SW0EW00.SW0EWIXM <= 12) /* Loop 12 times*/
    SW0ES03(); /* Move (empty) temp storage to map*/
  end

  SW0EW00.SW0EWIXM = 1; /* Initialize index to 1*/
  while (SW0EW00.SW0EWIXM <= 12) /* Loop 12 times*/
    SW0ES05(); /* Reset attributes*/
  end

   /* ------------------------------------------------------------*/
   /* Edit 1 to 1 flag*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EM1T1 == "Y" /* Header run mode*/
   || SW0EM001.SW0EM1T1 == "N" /* equal " " or "Y" or "N"*/
   || SW0EM001.SW0EM1T1 == " ")
     /* Next sentence*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
    SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
    set SW0EM001.SW0EM1T1 cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* Check for hndl cd in table*/
   /* ------------------------------------------------------------*/

  SW0EW00.XHDCD = SW0EM001.SW0EMHND; /* Handling code*/
  if (SW0EM001.XWHCD in XWHTBL.XWHCD)
    SW0EW00.XGPCD = XWHTBL.XGPCD1[sysVar.arrayIndex];
  end /* GPC code*/

  if (SW0EW00.XHDKEY in XHDTBL.XHDKEY /* If hndl cd in table*/
   && SW0EM001.SW0EMHND != "999")     /* Not EOF table*/
  else
    if (SW0EM001.SW0EMHND <= " ") /* If hndl cd not entered*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0EM001.SW0EMHND cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit lane group*/
   /* ------------------------------------------------------------*/

   /* NO EDIT FOR THIS FIELD*/

   /* ------------------------------------------------------------*/
   /* Check for lane type in table*/
   /* ------------------------------------------------------------*/
  if (SW0EM001.SW0EMLTP in XLNTBL.XLNCD /* if lane type in table*/
   && SW0EM001.SW0EMLTP != "99")        /* Not EOF table*/
  else
    if (SW0EM001.SW0EMLTP <= " ") /* if lane type not entered*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0EM001.SW0EMLTP cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Lane type 'FC' is valid only for warehouse '51'*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EMLTP == "FC")
    if (SW0EM001.XWHCD != "51")
      SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0EM001.SW0EMLTP cursor, bold; /* Highlight*/
      converseLib.validationFailed(465); /* Invalid value entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Lane type 'PB' is valid only for warehouse '51'*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EMLTP == "PB")
    if (SW0EM001.XWHCD != "51")
      SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0EM001.SW0EMLTP cursor, bold; /* Highlight*/
      converseLib.validationFailed(469); /* Invalid value entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Check for lane length in table*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EMLLN in XLLTBL.XLLCD /* if lane length in table*/
   && SW0EM001.SW0EMLLN != "99")        /* Not EOF table*/
  else
    if (SW0EM001.SW0EMLLN <= " ") /* if lane length blank*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0EM001.SW0EMLLN cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Edit run mode*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EMRMD == " " /* Header run mode eq " "*/
   || SW0EM001.SW0EMRMD == "P" /* or "P"*/
   || SW0EM001.SW0EMRMD == "S" /* or "s"*/
   || SW0EM001.SW0EMRMD == "N") /* or "n"*/
     /* Next sentence*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
    SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
    set SW0EM001.SW0EMRMD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* Numeric check on Lane Number*/
   /* ------------------------------------------------------------*/

   /* NO EDIT FOR THIS FIELD*/

   /* ------------------------------------------------------------*/
   /* Preliminary check for data entered in warehouse field*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XWHCD in XWHTBL.XWHCD /* If warehouse in table*/
   && SW0EM001.XWHCD > " "           /* Table hdr makes for a blank xwhcd entry*/
   && SW0EM001.XWHCD != "99")        /* Not EOF table*/
    if (SW0EM001.XWHCD in XWHTBL.XWHCD)
      SW0EM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
  else
    if (SW0EM001.XWHCD == "  ") /* blank warehouse*/

      SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      SW0EM001.XWHABRV = " "; /* Clear warehouse description*/
      set SW0EM001.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(09); /* Required field msg*/

    else
      SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      SW0EM001.XWHABRV = " "; /* Clear warehouse description*/
      set SW0EM001.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If header edits pass, then move map to working storage*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWSWE == "Y") /* No header errors*/
    SW0EW00.XWHCD = SW0EM001.XWHCD; /* Warehouse*/
    SW0EW00.SW0EMLNB = SW0EM001.SW0EMLNB; /* Header lane number*/
    SW0EW00.SW0EMLLN = SW0EM001.SW0EMLLN; /* Header lane length*/
    SW0EW00.SW0EMLTP = SW0EM001.SW0EMLTP; /* Header lane type*/
    SW0EW00.SW0EMRMD = SW0EM001.SW0EMRMD; /* Header lane run mode*/
    SW0EW00.SW0EMGRP = SW0EM001.SW0EMGRP; /* Header lane group*/
    SW0EW00.SW0EMHND = SW0EM001.SW0EMHND; /* Header lane hndl cd*/
    SW0EW00.SW0EM1T1 = SW0EM001.SW0EM1T1; /* Header lane 1 to 1 fl*/
  end


end // end SW0E510

// Edit Map header data
Function SW0E511()
   /* ------------------------------------------------------------*/
     /* Edit header fields*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EMLNOP == "Y"
   || SW0EM001.SW0EMLNOP == "N"
   || SW0EM001.SW0EMLNOP == " ")
     /* Next sentence*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
    SLWREC.XXXLOCID = "511"; /* move paragraph number to map*/
    set SW0EM001.SW0EMLNOP cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

  if (SW0EM001.SW0EMLNST == "I"
   || SW0EM001.SW0EMLNST == "A"
   || SW0EM001.SW0EMLNST == " ")
     /* Next sentence*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
    SLWREC.XXXLOCID = "511"; /* move paragraph number to map*/
    set SW0EM001.SW0EMLNST cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

  if (SW0EM001.SW0EMRNMD == "N"
   || SW0EM001.SW0EMRNMD == "P"
   || SW0EM001.SW0EMRNMD == "S"
   || SW0EM001.SW0EMRNMD == " ")
     /* Next sentence*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Set edit switch to not pass*/
    SLWREC.XXXLOCID = "511"; /* move paragraph number to map*/
    set SW0EM001.SW0EMRNMD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* If header edits pass, then move map to working storage*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWSWE == "Y") /* No header errors*/
    SW0EW00.SW0EWFRLN = SW0EM001.SW0EMFRLN; /* Global from lane*/
    SW0EW00.SW0EWTOLN = SW0EM001.SW0EMTOLN; /* Global to lane*/
    SW0EW00.SW0EWRNMD = SW0EM001.SW0EMRNMD; /* Global run mode*/
    SW0EW00.SW0EWLNST = SW0EM001.SW0EMLNST; /* Global lane status*/
    SW0EW00.SW0EWLNOP = SW0EM001.SW0EMLNOP; /* Global lane open*/
  end


end // end SW0E511

// Edit occur detail data for ADD
Function SW0E520()
   /* ------------------------------------------------------------*/
   /* Edit lane detail entries for ADD finction*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIXM = SW0EW00.SW0EWIXM - 1; /* Increment occur index*/


   /* ------------------------------------------------------------*/
   /* Edit for data entered on the line*/
   /* If row not entered then exit*/
   /* ------------------------------------------------------------*/
  if (SW0EM001.SWCLNENB[SW0EWIXM] <= 0    /* No lane nbr entry*/
   && SW0EM001.XLLCD[SW0EWIXM] <= " "     /* No lane type entry*/
   && SW0EM001.XLNCD[SW0EWIXM] <= " "     /* No lane length entry*/
   && SW0EM001.SWCMAXCS[SW0EWIXM] <= 0    /* No max cases entry*/
   && SW0EM001.SWAINSNB[SW0EWIXM] <= 0    /* No Inspection nbr entry*/
   && SW0EM001.SWCAVLFL[SW0EWIXM] <= " "  /* No lane status entry*/
   && SW0EM001.XXXSTAT[SW0EWIXM] <= " "   /* No Lane open entry*/
   && SW0EM001.PKURUNMD[SW0EWIXM] <= " "  /* No Lane run mode entry*/
   && SW0EM001.SWCLNDIM[SW0EWIXM] <= 0    /* No Lane dimen entry*/
   && SW0EM001.SWCLNGRP[SW0EWIXM] <= "00" /* No lane group cd entry*/
   && SW0EM001.XHDCD[SW0EWIXM] <= " "     /* No Lane hndl cd entry*/
   && SW0EM001.SWC1T1FL[SW0EWIXM] <= " ") /* No Lane 1 to 1 fl entry*/
    return; /* Do not edit fields*/
  end

   /* ------------------------------------------------------------*/
   /* Data has been entered so increment counter*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWCNT = SW0EW00.SW0EWCNT + 1; /* Data entered on occur*/

   /* ------------------------------------------------------------*/
   /* Edit Lane Open - valid is 'Y' or 'N'*/
   /* Lane Open of 'Y' incompatible with Lane Status of 'I'*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWCAVLFL[SW0EWIXM] == "Y" /* If Lane Open equal Y*/
   && SW0EM001.XXXSTAT[SW0EWIXM] == "I") /* and Lane status equal I or A*/
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.XXXSTAT[SW0EWIXM] cursor, bold; /* Highlight*/
    set SW0EM001.SWCAVLFL[SW0EWIXM] bold; /* Highlight*/
    converseLib.validationFailed(353); /* Invalid value entered*/
  else
    if (SW0EM001.SWCAVLFL[SW0EWIXM] == "Y" /* If Lane Open equal Y or N*/
     || SW0EM001.SWCAVLFL[SW0EWIXM] == "N" 
     || SW0EM001.SWCAVLFL[SW0EWIXM] == " ")
       /* NEXT SENTENCE*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
      set SW0EM001.SWCAVLFL[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit Lane Status - valid is 'A' or 'I'*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XXXSTAT[SW0EWIXM] == "I" /* If Lane status equal I or A*/
   || SW0EM001.XXXSTAT[SW0EWIXM] == "A" 
   || SW0EM001.XXXSTAT[SW0EWIXM] == " ")
      /* NEXT SENTENCE*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.XXXSTAT[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* Edit 1 to 1 flag*/
    /* If entered, lane type must be "PK" or "QI"or "FC"*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWC1T1FL[SW0EWIXM] == " " /* 1 to 1 fl blank - bypass edit*/
   || SW0EM001.SWC1T1FL[SW0EWIXM] == "N" /* 1 to 1 fl blank - bypass edit*/
   || SW0EM001.SWC1T1FL[SW0EWIXM] == "Y") /* 1 to 1 fl blank - bypass edit*/
     /* NEXT sentence                      ; then no error*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.SWC1T1FL[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

  if (SW0EM001.SWC1T1FL[SW0EWIXM] == "Y") /* 1 to 1 fl*/
    if (SW0EM001.XLNCD[SW0EWIXM] == "PK" /* Lane type 'PK','QI' or 'FC'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "QI" 
     || SW0EM001.XLNCD[SW0EWIXM] == "FC")
       /* NEXT sentence                     ; then no error*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
      set SW0EM001.SWC1T1FL[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(385); /* Not allowed for this lane type*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit handling code*/
    /* Check for handling code in table*/
    /* If entered, lane type must be "PK" or "QI" or "FC" or "PB"*/
   /* ------------------------------------------------------------*/

  SW0EW00.XHDCD = SW0EM001.XHDCD[SW0EWIXM]; /* Handling code*/
  if (SW0EM001.XWHCD in XWHTBL.XWHCD)
    SW0EW00.XGPCD = XWHTBL.XGPCD1[sysVar.arrayIndex];
  end /* GPC code*/

  if (SW0EW00.XHDKEY in XHDTBL.XHDKEY /* if hndl cd in table*/
   && SW0EM001.XHDCD[SW0EWIXM] != "999") /* Not EOF table*/
     /* NEXT sentence                     ; then no error*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.XHDCD[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

  if (SW0EM001.XHDCD[SW0EWIXM] == "   ") /* Hndl cd blank - bypass edit*/
     /* NEXT sentence                     ; then no error*/
  else
    if (SW0EM001.XLNCD[SW0EWIXM] == "PK" /* Lane type 'PK','QI','FC','PB'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "QI" 
     || SW0EM001.XLNCD[SW0EWIXM] == "FC" 
     || SW0EM001.XLNCD[SW0EWIXM] == "PB")
       /* NEXT sentence                     ; then no error*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
      set SW0EM001.XHDCD[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(386); /* Not allowed for this lane type*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit Inspection number*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWAINSNB[SW0EWIXM] == 0) /* If no insp nbr entered*/
     /* NEXT SENTENCE*/
  else
    if (SW0EM001.XLNCD[SW0EWIXM] == "WP" /* Lane Type 'WP'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "UX" /* Lane Type 'UX'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "PK" /* Lane Type 'PK'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "QI" /* Lane Type 'QI'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "FC") /* Lane Type 'FC'*/
      SW0EW00.SW0EWSWE = "N"; /* flag edit switch*/
      SLWREC.XXXLOCID = "520"; /* identify module*/
      set SW0EM001.SWAINSNB[SW0EWIXM] cursor, bold; /* posit & hi csr*/
      converseLib.validationFailed(314); /* insp/lane error message*/
    else
      SW0E540(); /* Validate inspection number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit max cases*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWCMAXCS[SW0EWIXM] == 0)
    SW0EW00.SW0EWSWE = "N"; /* flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.SWCMAXCS[SW0EWIXM] cursor, bold; /* position cursor*/
    converseLib.validationFailed(9); /* Required field message*/
  end

   /* -------------------------------------------------*/
   /* lane type 'FC' can exist only for warehouse '51'*/
   /* -------------------------------------------------*/

  if (SW0EM001.XLNCD[SW0EWIXM] == "FC")
    if (SW0EM001.XWHCD == "51")
          /* next sentence*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
      set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(465); /* invalid value entered*/
    end
  else
            /* Next sentence*/
  end

   /* -------------------------------------------------*/
   /* lane type 'PB' can exist only for warehouse '51'*/
   /* -------------------------------------------------*/

  if (SW0EM001.XLNCD[SW0EWIXM] == "PB")
    if (SW0EM001.XWHCD == "51")

    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
      set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(469); /* invalid value entered*/
    end
  else
            /* Next sentence*/
  end

   /* ------------------------------------------------------------*/
   /* Edit lane group*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XLNCD[SW0EWIXM] == "PK" /* if Lane type 'PK','QI','FC'*/
   || SW0EM001.XLNCD[SW0EWIXM] == "QI" /* or 'PB'*/
   || SW0EM001.XLNCD[SW0EWIXM] == "FC" 
   || SW0EM001.XLNCD[SW0EWIXM] == "PB")

    if (SW0EM001.SWCLNGRP[SW0EWIXM] == 0) /* Lane group must not = zero*/
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
      set SW0EM001.SWCLNGRP[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(396); /* Must be greater than zero for lane type*/
    else
       /* NEXT sentence                     ; then no error*/
    end
  else
    if (SW0EM001.SWCLNGRP[SW0EWIXM] == 0) /* Lane group zero*/
       /* NEXT sentence                     ; then no error*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
      set SW0EM001.SWCLNGRP[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(387); /* Not allowed for this lane type*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit lane type*/
    /* Check for lane type in table*/
   /* ------------------------------------------------------------*/
  if (SW0EM001.XLNCD[SW0EWIXM] in XLNTBL.XLNCD /* if lane type in table*/
   && SW0EM001.XLNCD[SW0EWIXM] != "99")        /* Not EOF table*/
     /* NEXT sentence                     ; then no error*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* Run mode may only be 'p','s', or 'n' if type is 'pk' or 'qi*/
    /* otherwise, can be 'p' or ' ', any other entry is invalid*/
   /* ------------------------------------------------------------*/
  if (SW0EM001.PKURUNMD[SW0EWIXM] == "P" /* Run mode = 'P'*/
   || SW0EM001.PKURUNMD[SW0EWIXM] == "S" /* Run mode = 's'*/
   || SW0EM001.PKURUNMD[SW0EWIXM] == "N" /* Run mode = 'n'*/
   || SW0EM001.PKURUNMD[SW0EWIXM] == " ") /* Run mode = ' '*/
    if (SW0EM001.XLNCD[SW0EWIXM] == "PK"
     /* Plan lane - must be 'PK', 'QI','FC'*/
     /* or 'PB'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "QI"
     || SW0EM001.XLNCD[SW0EWIXM] == "FC"
     || SW0EM001.XLNCD[SW0EWIXM] == "PB")
      if (SW0EM001.PKURUNMD[SW0EWIXM] != " ") /* then no error*/
         /* next sentence*/
      else
        SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
        SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
        set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(391); /* Invalid lane type for run mode*/
      end
    else
      if (SW0EM001.PKURUNMD[SW0EWIXM] == "S" /* not valid for type*/
       || SW0EM001.PKURUNMD[SW0EWIXM] == "N") /* not valid for type*/
        SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
        SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
        set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(391); /* Invalid lane type for runmode*/
      end
    end
  else /* invalid value was entered*/
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.PKURUNMD[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* Check for lane length in table*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XLLCD[SW0EWIXM] in XLLTBL.XLLCD /* if lane length in table*/
   && SW0EM001.XLLCD[SW0EWIXM] != "99")        /* Not EOF table*/
     /* NEXT sentence                     ; then no error*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.XLLCD[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/

  end

   /* ------------------------------------------------------------*/
   /* Edit occur lane number*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWCLNENB[SW0EWIXM] == 0) /* If lane number not gt 0*/
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.SWCLNENB[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/

  end

   /* ------------------------------------------------------------*/
   /* Edit add for plan lane*/
    /* If run mode = plan, test that norm lane exists for lane #*/
    /* If normal lane exists, lane type must be "PK" or "QI"*/
    /* If normal lane exists, lane length and dimen must match*/
     /* (Cannot change these values for plan lane)*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.PKURUNMD[SW0EWIXM] == "P" /* Lane run mode = plan*/
   || SW0EM001.PKURUNMD[SW0EWIXM] == "S") /* Lane run mode = sameday*/
     /* next sentence*/
  else
    return; /* Bypass remaining edit*/
  end

  SWCREC.XWHCD = SW0EM001.XWHCD; /* Whse*/
  SWCREC.SWCLNENB = SW0EM001.SWCLNENB[SW0EWIXM]; /* Lane nbr*/
  SWCREC.PKURUNMD = "N"; /* Lane run mode*/

  set SWQREC empty; /* Clear swcrec*/
  SWQREC.SWQFUNCD = "S"; /* SQL select unique*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select tbl row*/

  if (sysVar.errorCode == "00000000") /* Call sucessful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
        SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
        set SW0EM001.SWCLNENB[SW0EWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(388); /* Cannot add when no norm lane*/

        return; /* Bypass remaining edit*/

      else
        converseLib.validationFailed(01); /* Unexpected error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before display*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "SELECT UNIQUE LANE DATABASE";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
        TA1REC.TA1DBASE = "DSTLOC  "; /* Database name*/
        TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
        SW0EW00.XWHCD = SWCREC.XWHCD; /* Whse*/
        SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
        SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
        SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
        TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

        exit stack;

      end
    end
  else
    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT UNIQUE LANE DATABASE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
    TA1REC.TA1DBASE = "DSTLOC  "; /* Database name*/
    TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
    SW0EW00.XWHCD = SWCREC.XWHCD; /* Whse*/
    SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
    SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
    SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
    TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

    exit stack;

  end

  if (SWCREC.XLNCD == "PK" /* Lane type*/
   || SWCREC.XLNCD == "QI" /* Lane type*/
   || SWCREC.XLNCD == "FC" /* Lane type*/
   || SWCREC.XLNCD == "PB") /* Lane type*/
     /* next sentence*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    set SW0EM001.SWCLNENB[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(389); /* Cannot add plan lane - wrong type*/
  end

  if (SWCREC.XLLCD == SW0EM001.XLLCD[SW0EWIXM] /* Lane length*/
   && SWCREC.SWCLNDIM == SW0EM001.SWCLNDIM[SW0EWIXM]) /* Lane dimen*/
     /* next sentence*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
    converseLib.validationFailed(390); /* Len, dimen must match norm*/
    if (SWCREC.XLLCD == SW0EM001.XLLCD[SW0EWIXM]) /* Lane length*/
      set SW0EM001.SWCLNDIM[SW0EWIXM] cursor, bold; /* Highlight*/
    else
      if (SWCREC.SWCLNDIM == SW0EM001.SWCLNDIM[SW0EWIXM]) /* Lane dimen*/
        set SW0EM001.XLLCD[SW0EWIXM] cursor, bold; /* Highlight*/
      else
        set SW0EM001.SWCLNDIM[SW0EWIXM] bold; /* Highlight*/
        set SW0EM001.XLLCD[SW0EWIXM] cursor, bold; /* Highlight*/
      end
    end
  end


end // end SW0E520

// Edit occur detail data for MNT
Function SW0E530()
   /* ------------------------------------------------------------*/
   /* Edit lane detail entries for MNT finction*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIXM = SW0EW00.SW0EWIXM - 1; /* Increment occur index*/


   /* ------------------------------------------------------------*/
   /* Edit for data entered on the line*/
   /* ------------------------------------------------------------*/

  if (SW0EW01.SW0EWLU[SW0EWIXM] <= " ") /* No data on line (NE 'Y')*/

    return; /* Do not edit fields*/

  end

   /* ------------------------------------------------------------*/
   /* Compare data with temporary storage*/
      /* If different (or data was changed)*/
         /* add 1 to counter which shows data was changed*/
      /* else*/
         /* return*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XLNCD[SW0EWIXM] == SW0EW01.XLNCD[SW0EWIXM]       /* Lane type*/
   && SW0EM001.XLLCD[SW0EWIXM] == SW0EW01.XLLCD[SW0EWIXM]       /* Lane length*/
   && SW0EM001.SWCMAXCS[SW0EWIXM] == SW0EW01.SWCMAXCS[SW0EWIXM] 
   /* Max cases*/
   && SW0EM001.SWAINSNB[SW0EWIXM] == SW0EW01.SWAINSNB[SW0EWIXM] 
   /* Insp Nbr*/
   && SW0EM001.XXXSTAT[SW0EWIXM] == SW0EW01.XXXSTAT[SW0EWIXM]   /* Status*/
   && SW0EM001.SWCAVLFL[SW0EWIXM] == SW0EW01.SWCAVLFL[SW0EWIXM] 
   /* Lane Open*/
   && SW0EM001.SWCLNDIM[SW0EWIXM] == SW0EW01.SWCLNDIM[SW0EWIXM] /* Dimen*/
   && SW0EM001.SWCLNGRP[SW0EWIXM] == SW0EW01.SWCLNGRP[SW0EWIXM] 
   /* Group cd*/
   && SW0EM001.XHDCD[SW0EWIXM] == SW0EW01.XHDCD[SW0EWIXM]       /* Hndl cd*/
   && SW0EM001.SWC1T1FL[SW0EWIXM] == SW0EW01.SWC1T1FL[SW0EWIXM])
                                   /* 1 to 1 fl*/
    return; /* Leave loop*/
  else
    SW0EW00.SW0EWCNT = SW0EW00.SW0EWCNT + 1; /* Counter showing maintenance*/
  end

   /* ------------------------------------------------------------*/
   /* Edit Lane Open - valid is 'Y' or 'N'*/
   /* Lane Open 'Y' incompatible with Lane Status 'I'*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWCAVLFL[SW0EWIXM] == "Y" /* If Lane Open equal Y*/
   && SW0EM001.XXXSTAT[SW0EWIXM] == "I") /* and Lane status equal I or A*/
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
    set SW0EM001.XXXSTAT[SW0EWIXM] cursor, bold; /* Highlight*/
    set SW0EM001.SWCAVLFL[SW0EWIXM] bold; /* Highlight*/
    converseLib.validationFailed(353); /* Invalid value entered*/
  else
    if (SW0EM001.SWCAVLFL[SW0EWIXM] == "Y" /* If Lane Open equal Y or N*/
     || SW0EM001.SWCAVLFL[SW0EWIXM] == "N")
       /* NEXT SENTENCE*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
      set SW0EM001.SWCAVLFL[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit Lane Status - valid 'A' or 'I'*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XXXSTAT[SW0EWIXM] == "I" /* If Lane status equal I or A*/
   || SW0EM001.XXXSTAT[SW0EWIXM] == "A")
      /* NEXT SENTENCE*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
    set SW0EM001.XXXSTAT[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* Edit 1 to 1 flag*/
    /* Must be 'Y' or 'N'*/
    /* Lane type must be 'PK' or 'QI' or 'FC' or 'PB'*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWC1T1FL[SW0EWIXM] == "Y" /* 1 to 1 fl 'Y' or 'N'*/
   || SW0EM001.SWC1T1FL[SW0EWIXM] == "N")
     /* NEXT sentence                      ; then no error*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
    set SW0EM001.SWC1T1FL[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

  if (SW0EM001.SWC1T1FL[SW0EWIXM] == "Y") /* 1 to 1 fl*/
    if (SW0EW01.XLNCD[SW0EWIXM] == "PK" /* Work lane type 'PK','QI','FC'*/
     || SW0EW01.XLNCD[SW0EWIXM] == "QI" 
     || SW0EW01.XLNCD[SW0EWIXM] == "FC" 
     || SW0EW01.XLNCD[SW0EWIXM] == "PB")
       /* NEXT sentence                    ; then no error*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
      set SW0EM001.SWC1T1FL[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(385); /* Not allowed for this lane type*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit handling code*/
    /* Check for handling code in table*/
    /* Lane type must be 'PK' or 'QI' or 'FC' or 'PB'*/
   /* ------------------------------------------------------------*/

  SW0EW00.XHDCD = SW0EM001.XHDCD[SW0EWIXM]; /* Handling code*/
  if (SW0EM001.XWHCD in XWHTBL.XWHCD)
    SW0EW00.XGPCD = XWHTBL.XGPCD1[sysVar.arrayIndex];
  end /* GPC code*/

  if (SW0EW00.XHDKEY in XHDTBL.XHDKEY /* If hndl cd in table*/
   && SW0EM001.XHDCD[SW0EWIXM] != "999") /* Not EOF table*/
     /* NEXT sentence                     ; then no error*/
  else
    if (SW0EM001.XWHCD in XWHTBL.XWHCD)
      SW0EW00.XGPCD = XWHTBL.XGPCD2[sysVar.arrayIndex];
    end /* GPC code*/

    if (SW0EW00.XHDKEY in XHDTBL.XHDKEY /* If hndl cd in table*/
     && SW0EM001.XHDCD[SW0EWIXM] != "999") /* Not EOF table*/
       /* NEXT sentence                     ; then no error*/
    else
      if (SW0EM001.XWHCD in XWHTBL.XWHCD)
        SW0EW00.XGPCD = XWHTBL.XGPCD3[sysVar.arrayIndex];
      end /* GPC code*/

      if (SW0EW00.XHDKEY in XHDTBL.XHDKEY /* If hndl cd in table*/
       && SW0EM001.XHDCD[SW0EWIXM] != "999") /* Not EOF table*/
       /* NEXT sentence                     ; then no error*/
      else
        SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
        SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
        set SW0EM001.XHDCD[SW0EWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(11); /* Invalid value entered*/
      end
    end
  end

  if (SW0EM001.XHDCD[SW0EWIXM] == "   ") /* Hndl cd blank - bypass edit*/
     /* NEXT sentence                     ; then no error*/
  else
    if (SW0EW01.XLNCD[SW0EWIXM] == "PK" /* Work lane type 'PK','QI','FC'*/
     || SW0EW01.XLNCD[SW0EWIXM] == "QI" /* or 'PB'*/
     || SW0EW01.XLNCD[SW0EWIXM] == "FC" 
     || SW0EW01.XLNCD[SW0EWIXM] == "PB")
       /* NEXT sentence                     ; then no error*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
      set SW0EM001.XHDCD[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(386); /* Not allowed for this lane type*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit Inspection number*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWAINSNB[SW0EWIXM] == 0) /* IF NO INSP NBR ENTERED*/
    /* NEXT SENTENCE*/
  else
    if (SW0EM001.XLNCD[SW0EWIXM] == "WP" /* Lane Type 'WP'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "UX" /* Lane Type 'UX'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "PK" /* Lane Type 'PK'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "QI" /* Lane Type 'QI'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "FC" /* Lane Type 'FC'*/
     || SW0EM001.XLNCD[SW0EWIXM] == "PB") /* Lane Type 'PB'*/
      SW0EW00.SW0EWSWE = "N"; /* flag edit switch*/
      SLWREC.XXXLOCID = "530"; /* identify module*/
      set SW0EM001.SWAINSNB[SW0EWIXM] cursor, bold; /* posit & hi csr*/
      converseLib.validationFailed(314); /* insp/lane error msg*/
    else
      SW0E540(); /* Validate inspection number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit max cases*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWCMAXCS[SW0EWIXM] == 0)
    SW0EW00.SW0EWSWE = "N"; /* flag edit switch*/
    SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
    set SW0EM001.SWCMAXCS[SW0EWIXM] cursor, bold; /* position cursor*/
    converseLib.validationFailed(9); /* Required field message*/
  end

   /* ------------------------------------------------------------*/
   /* Edit lane group*/
   /* ------------------------------------------------------------*/

   /* IF SW0EM001.swclngrp(SW0EWIXM) EQ '00' Hndl cd zero - bypass*/
  if (SW0EM001.SWCLNGRP[SW0EWIXM] == 0) /* Hndl cd zero - bypass*/
     /* NEXT sentence                     ; then no error*/
  else
    if (SW0EW01.XLNCD[SW0EWIXM] == "PK" /* Work lane type 'PK','QI','FC'*/
     || SW0EW01.XLNCD[SW0EWIXM] == "QI" /* or 'PB'*/
     || SW0EW01.XLNCD[SW0EWIXM] == "FC" 
     || SW0EW01.XLNCD[SW0EWIXM] == "PB")
       /* NEXT sentence                     ; then no error*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
      set SW0EM001.SWCLNGRP[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(387); /* Not allowed for this lane type*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit lane type*/
    /* Check for lane type in table*/
    /* If plan lane, lane type must be 'PK' or 'QI'or 'FC'*/
    /* If normal lane and old lane type is 'PK' or 'QI' or 'FC' or 'PB'*/
     /* new lane type must be 'PK' or 'QI' or 'FC' or 'PB'*/
    /* If normal lane and old lane type is not 'PK' or 'QI' or 'FC'*/
     /* new lane type cannot be 'PK' or 'QI' or 'FC'*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XLNCD[SW0EWIXM] in XLNTBL.XLNCD /* if lane type in table*/
   && SW0EM001.XLNCD[SW0EWIXM] != "99")        /* Not EOF table*/
     /* NEXT sentence                     ; then no error*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
    set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

  if (SW0EM001.PKURUNMD[SW0EWIXM] == "P") /* Plan lane*/
    if (SW0EM001.XLNCD[SW0EWIXM] == "PK" /* Lane type*/
     || SW0EM001.XLNCD[SW0EWIXM] == "QI" 
     || SW0EM001.XLNCD[SW0EWIXM] == "FC")
       /* NEXT sentence                     ; then no error*/
    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
      set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(391); /* Wrong lane type for plan*/
    end
  else /* Normal lane*/
    if (SW0EW01.XLNCD[SW0EWIXM] == "PK" /* Work lane type*/
     || SW0EW01.XLNCD[SW0EWIXM] == "QI" 
     || SW0EW01.XLNCD[SW0EWIXM] == "FC" 
     || SW0EW01.XLNCD[SW0EWIXM] == "PB")
      if (SW0EM001.XLNCD[SW0EWIXM] == "PK" /* Map lane type*/
       || SW0EM001.XLNCD[SW0EWIXM] == "QI" 
       || SW0EM001.XLNCD[SW0EWIXM] == "FC" 
       || SW0EM001.XLNCD[SW0EWIXM] == "PB")
         /* NEXT sentence                     ; then no error*/
      else
        SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
        SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
        set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(393); /* Cannot change to this lane type*/
      end
    else
      if (SW0EM001.XLNCD[SW0EWIXM] == "PK" /* Map lane type*/
       || SW0EM001.XLNCD[SW0EWIXM] == "QI" 
       || SW0EM001.XLNCD[SW0EWIXM] == "FC" 
       || SW0EM001.XLNCD[SW0EWIXM] == "PB")
        SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
        SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
        set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(392); /* Cannot change to this lane type*/
      end
    end
  end

   /* ---------------------------------------------------*/
   /* lane types 'fc' and 'pb' can exist only for warehouse '51'*/
   /* ---------------------------------------------------*/

  if (SW0EM001.XLNCD[SW0EWIXM] == "FC"
   || SW0EM001.XLNCD[SW0EWIXM] == "PB")
    if (SW0EM001.XWHCD == "51")

    else
      SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
      SLWREC.XXXLOCID = "520"; /* move paragraph number to map*/
      set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(465); /* invalid value entered*/
    end
  end

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check for lane length in table*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XLLCD[SW0EWIXM] in XLLTBL.XLLCD /* if lane length in table*/
   && SW0EM001.XLLCD[SW0EWIXM] != "99")        /* Not EOF table*/
     /* NEXT sentence                     ; then no error*/
  else
    SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
    SLWREC.XXXLOCID = "530"; /* move paragraph number to map*/
    set SW0EM001.XLLCD[SW0EWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/

  end

end // end SW0E530

// Inspection DB validity check
Function SW0E540()
   /* ------------------------------------------------------------*/
   /* Select Inspection number*/
   /* ------------------------------------------------------------*/

  set SWAREC empty; /* Clear row storage area*/

  SWAREC.XWHCD = SW0EM001.XWHCD; /* Warehouse code*/
  SWAREC.SWAINSNB = SW0EM001.SWAINSNB[SW0EWIXM]; /* Inspection number*/

  try
    call "IO5310" ("S ", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        SW0EW00.SW0EWSWE = "N"; /* Flag edit switch*/
        converseLib.validationFailed(11); /* Invalid value entered*/
        SLWREC.XXXLOCID = "540"; /* Module identification*/
        set SW0EM001.SWAINSNB[SW0EWIXM] cursor, bold; /* Highlight*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "540"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WAREHOUSE INSPECTION  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/
  SW0EW00.SW0EWINS = SWAREC.SWAINSNB; /* Work inspect number*/
  TA1REC.TA1TBLKE = SW0EW00.SW0EWINS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E540

// Verify scroll request
Function SW0E550()
   /* ------------------------------------------------------------*/
   /* Verify scroll request*/
    /* For backward request, test that prev page exists*/
    /* For forward request, test that next page exists*/
    /* Verify that no hdr or line flds were changed*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Scrolling invalid on add screen*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "A") /* Add*/

    converseLib.validationFailed(394); /* Cannot scroll on add screen*/
    SLWREC.XXXLOCID = "550"; /* Module identification*/

    return; /* Return*/

  end

   /* ------------------------------------------------------------*/
   /* Backward scrolling*/
    /* Test that prev page exists*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If scroll backward request*/

    if (SW0EW00.XXXTSPAG <= 1) /* If already on page one*/
      SW0EW00.XXXTSPAG = 1; /* Safety reset*/
      converseLib.validationFailed(07); /* Unable to scroll backward*/
      SLWREC.XXXLOCID = "550"; /* Module identification*/

      return; /* Return*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Forward scrolling*/
    /* Test that next page exists*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* If scroll forward request*/

    if (SW0EW00.XXXTSPAG >= SW0EW00.TA5TSQIX) /* if on last page*/
      SW0EW00.XXXTSPAG = SW0EW00.TA5TSQIX; /* Safety reset*/
      converseLib.validationFailed(08); /* Unable to scroll forward*/
      SLWREC.XXXLOCID = "550"; /* Module identification*/

      return; /* Return*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Make sure that no hdr or line fields were changed*/
   /* ------------------------------------------------------------*/

  SW0E555(); /* Test line fields for changes*/

  if (SW0EM001.SW0EM1T1 != SW0EW00.SW0EM1T1) /* 1 to 1 flag*/
    SLWREC.XXXLOCID = "550"; /* Move para number*/
    set SW0EM001.SW0EM1T1 cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Selection valid only with enter*/
  end

  if (SW0EM001.SW0EMHND != SW0EW00.SW0EMHND) /* Hndl code*/
    SLWREC.XXXLOCID = "550"; /* Move para number*/
    set SW0EM001.SW0EMHND cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Selection valid only with enter*/
  end

  if (SW0EM001.SW0EMGRP != SW0EW00.SW0EMGRP) /* Group*/
    SLWREC.XXXLOCID = "550"; /* Move para number*/
    set SW0EM001.SW0EMGRP cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Selection valid only with*/
  end

  if (SW0EM001.SW0EMLTP != SW0EW00.SW0EMLTP) /* Lane type*/
    SLWREC.XXXLOCID = "550"; /* Move para number*/
    set SW0EM001.SW0EMLTP cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Selection valid only with enter*/
  end

  if (SW0EM001.SW0EMLLN != SW0EW00.SW0EMLLN) /* Lane length*/
    SLWREC.XXXLOCID = "550"; /* Move para number*/
    set SW0EM001.SW0EMLLN cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Selection valid only with enter*/
  end

  if (SW0EM001.SW0EMRMD != SW0EW00.SW0EMRMD) /* Run mode*/
    SLWREC.XXXLOCID = "550"; /* Move para number*/
    set SW0EM001.SW0EMRMD cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Selection valid only with enter*/
  end

  if (SW0EM001.SW0EMLNB != SW0EW00.SW0EMLNB) /* Lane number*/
    SLWREC.XXXLOCID = "550"; /* Move para number*/
    set SW0EM001.SW0EMLNB cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Selection valid only with enter*/
  end

  if (SW0EW00.SW0EWMDE == "C") /* Change*/
    if (SW0EM001.SW0EMLNOP != SW0EW00.SW0EWLNOP)
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SW0EMLNOP cursor, bold; /* Highlight*/
      converseLib.validationFailed(18); /* Selection valid only with enter*/
    end
    if (SW0EM001.SW0EMLNST != SW0EW00.SW0EWLNST)
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SW0EMLNST cursor, bold; /* Highlight*/
      converseLib.validationFailed(18); /* Selection valid only with enter*/
    end
    if (SW0EM001.SW0EMRNMD != SW0EW00.SW0EWRNMD)
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SW0EMRNMD cursor, bold; /* Highlight*/
      converseLib.validationFailed(18); /* Selection valid only with enter*/
    end
    if (SW0EM001.SW0EMTOLN != SW0EW00.SW0EWTOLN)
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SW0EMTOLN cursor, bold; /* Highlight*/
      converseLib.validationFailed(18); /* Selection valid only with enter*/
    end
    if (SW0EM001.SW0EMFRLN != SW0EW00.SW0EWFRLN)
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SW0EMFRLN cursor, bold; /* Highlight*/
      converseLib.validationFailed(18); /* Selection valid only with enter*/
    end
  end
end // end SW0E550

// Verify scroll request
Function SW0E555()
   /* ------------------------------------------------------------*/
   /* Verify that line fields were not changed*/
    /* Executed for:*/
      /* Paging request (PF7, PF8)*/
      /* Header fields changed (select rows for new screen)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Make sure that no hdr or line fields were changed*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIXM = 12; /* Line index*/

  while (SW0EWIXM > 0) /* Until end of lines*/

    if (SW0EM001.SWCAVLFL[SW0EWIXM] != SW0EW01.SWCAVLFL[SW0EWIXM])
                                   /* Lane open*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SWCAVLFL[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    if (SW0EM001.XXXSTAT[SW0EWIXM] != SW0EW01.XXXSTAT[SW0EWIXM]) /* Status*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.XXXSTAT[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    if (SW0EM001.SWC1T1FL[SW0EWIXM] != SW0EW01.SWC1T1FL[SW0EWIXM]) /* 1 to 1*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SWC1T1FL[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    if (SW0EM001.XHDCD[SW0EWIXM] != SW0EW01.XHDCD[SW0EWIXM]) /* Hndl cd*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.XHDCD[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    if (SW0EM001.SWAINSNB[SW0EWIXM] != SW0EW01.SWAINSNB[SW0EWIXM])
                                   /* Insp no*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SWAINSNB[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    if (SW0EM001.SWCMAXCS[SW0EWIXM] != SW0EW01.SWCMAXCS[SW0EWIXM]) /* Max cs*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SWCMAXCS[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    if (SW0EM001.SWCLNGRP[SW0EWIXM] != SW0EW01.SWCLNGRP[SW0EWIXM]) /* Grp*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SWCLNGRP[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    if (SW0EM001.XLNCD[SW0EWIXM] != SW0EW01.XLNCD[SW0EWIXM]) /* Lane type*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.XLNCD[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    if (SW0EM001.SWCLNDIM[SW0EWIXM] != SW0EW01.SWCLNDIM[SW0EWIXM]) /* Dimen*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.SWCLNDIM[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    if (SW0EM001.XLLCD[SW0EWIXM] != SW0EW01.XLLCD[SW0EWIXM]) /* Lane length*/
      SLWREC.XXXLOCID = "550"; /* Move para number*/
      set SW0EM001.XLLCD[SW0EWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(265); /* Displayed data can't be changed*/
    end

    SW0EW00.SW0EWIXM = SW0EW00.SW0EWIXM - 1; /* Line index*/

  end

end // end SW0E555

// Process valid input request
Function SW0E600()
   /* ------------------------------------------------------------*/
   /* Apply database updates*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Test return conditions*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* If error message or*/
   || SW0EW00.SW0EWSWE == "N")          /* Or edit error*/
    exit stack; /* Return*/
  end

   /* ------------------------------------------------------------*/
   /* Process valid scroll backward request*/
    /* Decrement page number and return to prev process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll backward*/

    SW0EW00.SW0EWSWF = "Y"; /* Format map switch*/

    SW0EW00.XXXTSPAG = SW0EW00.XXXTSPAG - 1; /* Subtract 1 from page*/

    return; /* Return*/

  end

   /* ------------------------------------------------------------*/
   /* Process valid scroll forward request*/
    /* Increment page number and return to prev process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward*/

    SW0EW00.SW0EWSWF = "Y"; /* Format map switch*/

    SW0EW00.XXXTSPAG = SW0EW00.XXXTSPAG + 1; /* Add 1 to page*/

    return; /* Return*/

  end

   /* ------------------------------------------------------------*/
   /* Apply ADD to Lane Database*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "A") /* If ADD request*/
    SW0E610();
    return; /* Return*/
  end


   /* ------------------------------------------------------------*/
   /* Apply MNT to Lane Database*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWMDE == "C") /* If MNT request*/
    SW0E620();
    return; /* Return*/
  end

end // end SW0E600

// Process ADD request
Function SW0E610()
   /* ------------------------------------------------------------*/
   /* Process ADD request*/

   /* Add occurs to Lane database (loop 12 times)*/
     /* If errors then rollback else commit adds*/
   /* Delete temp storage - it will be rebuilt in sw0e100*/
   /* Send 'transaction completed' message*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIXM = 13; /* Initialize index*/
  while (SW0EW00.SW0EWIXM > 1) /* Loop 12 times*/
    SW0E611(); /* Add records to database*/
  end

   /* -----------------------------------------------------------*/
   /* TEST SWITCH*/
   /* IF ERRORS, ROLLBACK THE ADDS, ELSE COMMIT*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWSWE == "N") /* ADD error*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    exit stack; /* Return and send message*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all ADDs*/
  end

   /* -----------------------------------------------------------*/
   /* Delete temporary storage*/
   /* Set ADD complete flag so that data will be obtained sw0e1xx*/
   /* Set to MNT mode*/
   /* Move 'transaction complete' message*/
   /* ------------------------------------------------------------*/


  SW0ES01(); /* Delete temporary storage*/

  converseLib.validationFailed(20); /* Transaction completed*/

  SW0EW00.SW0EWTS = "N"; /* Update not pending*/
  SW0EW00.SW0EWACP = "Y"; /* Add function complete*/
   /* MOVE 'I' TO SW0EW00.SW0EWMDE    ; Change mode from ADD to I*/
  SW0EW00.XWHCD = SW0EM001.XWHCD; /* Reset warehouse*/


end // end SW0E610

// ADD record(s) to Lane database
Function SW0E611()
   /* ------------------------------------------------------------*/
   /* Add record(s) to Lane database - performed 12 times*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIXM = SW0EW00.SW0EWIXM - 1; /* Decrement counter*/

   /* ------------------------------------------------------------*/
   /* Test for entry*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWCLNENB[SW0EWIXM] <= 0) /* If there is no entry*/
    return; /* Leave loop*/
  end

   /* ------------------------------------------------------------*/
   /* ADD to lane DB Lane*/
   /* ------------------------------------------------------------*/

  set SWCREC empty; /* Clear row storage area*/

  SWCREC.XWHCD = SW0EM001.XWHCD; /* Warehouse code*/
  SWCREC.SWCLNENB = SW0EM001.SWCLNENB[SW0EWIXM]; /* Lane number*/
  SWCREC.PKURUNMD = SW0EM001.PKURUNMD[SW0EWIXM]; /* Run mode*/

  SWCREC.XLNCD = SW0EM001.XLNCD[SW0EWIXM]; /* Lane type*/
  SWCREC.XLLCD = SW0EM001.XLLCD[SW0EWIXM]; /* Lane length*/
  SWCREC.SWCMAXCS = SW0EM001.SWCMAXCS[SW0EWIXM]; /* Max cases*/
  SWCREC.SWAINSNB = SW0EM001.SWAINSNB[SW0EWIXM]; /* Insp Nbr*/
  SWCREC.SWCLNGRP = SW0EM001.SWCLNGRP[SW0EWIXM]; /* Group cd*/
  SWCREC.SWCLNDIM = SW0EM001.SWCLNDIM[SW0EWIXM]; /* Lane dimen*/
  SWCREC.XHDCD = SW0EM001.XHDCD[SW0EWIXM]; /* Hndl cd*/

  if (SW0EM001.SWC1T1FL[SW0EWIXM] == " ") /* 1 to 1 fl*/
    SWCREC.SWC1T1FL = "N"; /* 1 to 1 fl*/
  else
    SWCREC.SWC1T1FL = SW0EM001.SWC1T1FL[SW0EWIXM]; /* 1 to 1 fl*/
  end

  if (SW0EM001.SWCAVLFL[SW0EWIXM] == " ") /* Lane avail*/
    SWCREC.SWCAVLFL = "Y"; /* Lane avail*/
  else
    SWCREC.SWCAVLFL = SW0EM001.SWCAVLFL[SW0EWIXM]; /* Lane avail*/
  end

  if (SW0EM001.XXXSTAT[SW0EWIXM] == " ") /* lane status*/
    SWCREC.XXXSTAT = "A"; /* lane status*/
  else
    SWCREC.XXXSTAT = SW0EM001.XXXSTAT[SW0EWIXM]; /* lane status*/
  end

  if (SW0EM001.XLNCD[SW0EWIXM] == "QI") /* If qty inspect lane*/
    SWCREC.SWCQLTFL = "Y"; /* Qty insp fl*/
  else
    SWCREC.SWCQLTFL = "N"; /* Qty insp fl*/
  end

   /* ------------------------------------------------------------*/
   /* Obtain the current data and time; Operator ID*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain data and time*/

  SWCREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  SWCREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWCREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/

  SWCREC.XXXUSRID = COMMAREA.CAUSERID; /* CRT operator ID*/

   /* ------------------------------------------------------------*/
   /* Add database record*/
   /* ------------------------------------------------------------*/

  set SWQREC empty; /* Clear swqREC*/
  SWQREC.SWQFUNCD = "A "; /* SQL insert row*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == -803) /* Duplicate*/
        SLWREC.XXXLOCID = "611"; /* Module identification*/
        converseLib.validationFailed(045); /* Duplicate data*/
        SW0EW00.SW0EWSWE = "N"; /* Edit switch*/
        set SW0EM001.SWCLNENB[SW0EWIXM] cursor, bold; /* Lane number*/
        set SW0EM001.XLNCD[SW0EWIXM] bold; /* Lane type*/
        set SW0EM001.XLLCD[SW0EWIXM] bold; /* Lane length*/
        set SW0EM001.SWCMAXCS[SW0EWIXM] bold; /* Max cases*/
        set SW0EM001.SWAINSNB[SW0EWIXM] bold; /* Insp Nbr*/
        set SW0EM001.XXXSTAT[SW0EWIXM] bold; /* Lane Status*/
        set SW0EM001.SWCAVLFL[SW0EWIXM] bold; /* Lane Open*/
        set SW0EM001.PKURUNMD[SW0EWIXM] bold; /* Run mode*/
        set SW0EM001.SWCLNGRP[SW0EWIXM] bold; /* Group cd*/
        set SW0EM001.SWCLNDIM[SW0EWIXM] bold; /* Lane dimen*/
        set SW0EM001.XHDCD[SW0EWIXM] bold; /* Hndl cd*/
        set SW0EM001.SWC1T1FL[SW0EWIXM] bold; /* 1 to 1 fl*/
        return; /* Return to previous process*/
      end
    end

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD WAREHOUSE/LANE TYPE      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
  SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
  SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
  SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
  SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
  TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E611

// Process MNT request
Function SW0E620()
   /* ------------------------------------------------------------*/
   /* Process MNT request*/

   /* Update the Lane database (loop 12 times)*/
      /* if errors then rollback else commit updates*/
   /* Move map row to temporary storage work row (loop 12 times)*/
   /* Rewrite temporary storage*/
   /* Send 'transaction complete' message*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* make global changes and restore the data*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SW0EMFRLN > 0000)
    SW0E630();
    SW0EW00.SW0EWNWD = "Y"; /* Flag new header data switch*/
    SW0EW00.SW0EWGCHG = "Y"; /* Global change request*/
    SW0EW00.SW0EWHPG = SW0EW00.XXXTSPAG; /* Hold current page*/
    SW0ES06(); /* clear temp storage*/
    SW0EM001.SW0EMFRLN = 0000;
    SW0EW00.SW0EWFRLN = 0000;
    SW0EM001.SW0EMTOLN = 0000;
    SW0EW00.SW0EWTOLN = 0000;
    SW0EM001.SW0EMRNMD = " ";
    SW0EW00.SW0EWRNMD = " ";
    SW0EM001.SW0EMLNST = " ";
    SW0EW00.SW0EWLNST = " ";
    SW0EM001.SW0EMLNOP = " ";
    SW0EW00.SW0EWLNOP = " ";
    SW0EW00.XWHCD = SW0EM001.XWHCD; /* Warehouse*/
    converseLib.validationFailed(20); /* Transaction completed*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* MNT occurs to Lane database*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIXM = 13; /* Initialize index*/
  while (SW0EW00.SW0EWIXM > 1) /* Read current page*/
    SW0E621(); /* MNT records to database*/
  end

   /* ------------------------------------------------------------*/
   /* Test switch*/
   /* If errors, rollback the MNTs, else commit*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWSWE == "N") /* MNT error*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    exit stack; /* Return and send message*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all MNTs*/
  end

   /* ------------------------------------------------------------*/
   /* Update the temporary storage page*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIXM = 0; /* Set index*/
  while (SW0EWIXM < 12) /* Loop 12 times*/
    SW0E622(); /* Prepare to update Temp storage*/
  end

  SW0E623(); /* rewrite temporary storage*/

   /* ------------------------------------------------------------*/
   /* Test switch*/
   /* If no errors, move 'Transaction completed' msg and send*/
   /* last page*/
   /* ------------------------------------------------------------*/


  if (SW0EW00.SW0EWSWE == "N" /* MNT error*/
   || converseVar.validationMsgNum != 0) /* Error message*/
    exit stack; /* Return to send message*/
  end

  converseLib.validationFailed(20); /* Transaction completed*/

  SW0EW00.SW0EWTS = "N"; /* PA2 cancel will clear screen*/

end // end SW0E620

// CHG record(s) on LANE database
Function SW0E621()
   /* ------------------------------------------------------------*/
   /* Chg record(s) on Lane database -  performed 12 times*/

   /* Test row for entry or change - ezertn if no new data*/
   /* Read unique for zzzchgct compare*/
     /* if record not found, it has been deleted*/
     /* if zzzchgct not match, it has since been updated*/
   /* Move map row to swcrec*/
   /* Obtain data and time*/
   /* Update Lane database*/
   /* Increment temporary storage zzzchgct*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIXM = SW0EW00.SW0EWIXM - 1; /* Decrement counter*/

   /* ------------------------------------------------------------*/
   /* Test for entry - if row not entered then leave loop*/
   /* ------------------------------------------------------------*/

  if (SW0EW01.SW0EWLU[SW0EWIXM] <= " ") /* If there is no entry (NE 'Y')*/
    return; /* Leave loop*/
  end

   /* ------------------------------------------------------------*/
   /* Compare map with temp storage for change*/
   /* If no difference then leave loop*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.XLNCD[SW0EWIXM] == SW0EW01.XLNCD[SW0EWIXM]       /* Lane type*/
   && SW0EM001.XLLCD[SW0EWIXM] == SW0EW01.XLLCD[SW0EWIXM]       /* Lane length*/
   && SW0EM001.SWCMAXCS[SW0EWIXM] == SW0EW01.SWCMAXCS[SW0EWIXM] 
   /* Max cases*/
   && SW0EM001.SWAINSNB[SW0EWIXM] == SW0EW01.SWAINSNB[SW0EWIXM] 
   /* Insp Nbr*/
   && SW0EM001.XXXSTAT[SW0EWIXM] == SW0EW01.XXXSTAT[SW0EWIXM]   /* Status*/
   && SW0EM001.SWCAVLFL[SW0EWIXM] == SW0EW01.SWCAVLFL[SW0EWIXM] 
   /* Lane Open*/
   && SW0EM001.PKURUNMD[SW0EWIXM] == SW0EW01.PKURUNMD[SW0EWIXM] 
   /* Run mode*/
   && SW0EM001.SWCLNGRP[SW0EWIXM] == SW0EW01.SWCLNGRP[SW0EWIXM] 
   /* Group cd*/
   && SW0EM001.SWCLNDIM[SW0EWIXM] == SW0EW01.SWCLNDIM[SW0EWIXM] /* Dimen*/
   && SW0EM001.XHDCD[SW0EWIXM] == SW0EW01.XHDCD[SW0EWIXM]       /* Group cd*/
   && SW0EM001.SWC1T1FL[SW0EWIXM] == SW0EW01.SWC1T1FL[SW0EWIXM])
                                   /* 1 to 1 fl*/
    return; /* Leave loop*/
  end

   /* ------------------------------------------------------------*/
   /* Mnt to lane DB Lane*/
   /* ------------------------------------------------------------*/
  SWCREC.XWHCD = SW0EM001.XWHCD; /* Warehouse code*/
  SWCREC.SWCLNENB = SW0EM001.SWCLNENB[SW0EWIXM]; /* Lane number*/
  SWCREC.PKURUNMD = SW0EM001.PKURUNMD[SW0EWIXM]; /* Run mode*/

  SWCREC.XLNCD = SW0EM001.XLNCD[SW0EWIXM]; /* Lane type*/
  SWCREC.XLLCD = SW0EM001.XLLCD[SW0EWIXM]; /* Lane length*/
  SWCREC.SWCMAXCS = SW0EM001.SWCMAXCS[SW0EWIXM]; /* Max cases*/
  SWCREC.SWAINSNB = SW0EM001.SWAINSNB[SW0EWIXM]; /* Insp Nbr*/
  SWCREC.XXXSTAT = SW0EM001.XXXSTAT[SW0EWIXM]; /* lane status*/
  SWCREC.SWCAVLFL = SW0EM001.SWCAVLFL[SW0EWIXM]; /* Lane avail*/
  SWCREC.SWCLNGRP = SW0EM001.SWCLNGRP[SW0EWIXM]; /* Group cd*/
  SWCREC.SWCLNDIM = SW0EM001.SWCLNDIM[SW0EWIXM]; /* Dimen*/
  SWCREC.XHDCD = SW0EM001.XHDCD[SW0EWIXM]; /* Hndl cd*/
  SWCREC.SWC1T1FL = SW0EM001.SWC1T1FL[SW0EWIXM]; /* 1 to 1 fl*/

  if (SW0EM001.XLNCD[SW0EWIXM] == "QI") /* Qty inspect lane*/
    SWCREC.SWCQLTFL = "Y"; /* Qty insp fl*/
  else
    SWCREC.SWCQLTFL = "N"; /* Qty insp fl*/
  end

   /* ------------------------------------------------------------*/
   /* Obtain the current data and time; move userid*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain data and time*/

  SWCREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date*/
  SWCREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/

  SWCREC.XXXUSRID = COMMAREA.CAUSERID; /* CRT operator ID*/

   /* ------------------------------------------------------------*/
   /* Set change count before update*/
   /* ------------------------------------------------------------*/
  SWCREC.ZZZCHGCT = SW0EW01.ZZZCHGCT[SW0EWIXM]; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Mnt database record*/
   /* ------------------------------------------------------------*/

  set SWQREC empty; /* Clear swqREC*/
  SWQREC.SWQFUNCD = "U "; /* SQL Update*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, update temp storage zzzchgct and return*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      SW0EW01.ZZZCHGCT[SW0EWIXM] = SW0EW01.ZZZCHGCT[SW0EWIXM] + 1;

      if (SW0EM001.PKURUNMD[SW0EWIXM] == " ") /* Normal lane*/
        if (SW0EM001.XLLCD[SW0EWIXM] == SW0EW01.XLLCD[SW0EWIXM] /* Lane length*/
         && SW0EM001.SWCLNDIM[SW0EWIXM] == SW0EW01.SWCLNDIM[SW0EWIXM]) /* Dim*/
           /* Next sentence*/
        else
          SW0E624(); /* Update plan lane for normal*/
        end
      end

      return; /* Return to previous process*/
    end

  end

  SLWREC.XXXLOCID = "621"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error*/

  SW0EW00.SW0EWSWE = "N"; /* Edit switch*/

  set SW0EM001.SWCLNENB[SW0EWIXM] bold; /* Lane number*/
  set SW0EM001.XLNCD[SW0EWIXM] bold; /* Lane type*/
  set SW0EM001.XLLCD[SW0EWIXM] bold; /* Lane length*/
  set SW0EM001.SWCMAXCS[SW0EWIXM] bold; /* Max cases*/
  set SW0EM001.SWAINSNB[SW0EWIXM] bold; /* Insp Nbr*/
  set SW0EM001.XXXSTAT[SW0EWIXM] bold; /* Lane Status*/
  set SW0EM001.SWCAVLFL[SW0EWIXM] bold; /* Lane Open*/
  set SW0EM001.PKURUNMD[SW0EWIXM] bold; /* Run mode*/
  set SW0EM001.SWCLNGRP[SW0EWIXM] bold; /* Group cd*/
  set SW0EM001.SWCLNDIM[SW0EWIXM] bold; /* Dimen*/
  set SW0EM001.XHDCD[SW0EWIXM] bold; /* Hndl cd*/
  set SW0EM001.SWC1T1FL[SW0EWIXM] bold; /* 1 to 1 fl*/

  SW0EW00.SW0EWSWE = "N"; /* Edit switch*/


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "MNT WAREHOUSE/LANE TYPE      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
  SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
  SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
  SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
  SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
  TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E621

// Move rows to Temp storage
Function SW0E622()
   /* ------------------------------------------------------------*/
   /* Update temp storage*/
   /* ------------------------------------------------------------*/
  SW0EW00.SW0EWIXM = SW0EW00.SW0EWIXM + 1; /* Increment index*/

   /* ------------------------------------------------------------*/
   /* Test for entry*/
   /* ------------------------------------------------------------*/

  if (SW0EM001.SWCLNENB[SW0EWIXM] <= 0) /* If there is no entry*/
    return; /* Leave loop*/
  end


   /* ------------------------------------------------------------*/
   /* Move map fields to TS work area*/
   /* ------------------------------------------------------------*/

  SW0EW01.XLNCD[SW0EWIXM] = SW0EM001.XLNCD[SW0EWIXM]; /* Lane type*/
  SW0EW01.XLLCD[SW0EWIXM] = SW0EM001.XLLCD[SW0EWIXM]; /* Lane length*/
  SW0EW01.SWCMAXCS[SW0EWIXM] = SW0EM001.SWCMAXCS[SW0EWIXM]; /* Max cases*/
  SW0EW01.SWAINSNB[SW0EWIXM] = SW0EM001.SWAINSNB[SW0EWIXM]; /* Insp nbr*/
  SW0EW01.XXXSTAT[SW0EWIXM] = SW0EM001.XXXSTAT[SW0EWIXM]; /* status*/
  SW0EW01.SWCAVLFL[SW0EWIXM] = SW0EM001.SWCAVLFL[SW0EWIXM]; /* Avail*/
  SW0EW01.PKURUNMD[SW0EWIXM] = SW0EM001.PKURUNMD[SW0EWIXM]; /* Run mode*/
  SW0EW01.SWCLNGRP[SW0EWIXM] = SW0EM001.SWCLNGRP[SW0EWIXM]; /* Group cd*/
  SW0EW01.SWCLNDIM[SW0EWIXM] = SW0EM001.SWCLNDIM[SW0EWIXM]; /* Dimen*/
  SW0EW01.XHDCD[SW0EWIXM] = SW0EM001.XHDCD[SW0EWIXM]; /* Hndl cd*/
  SW0EW01.SWC1T1FL[SW0EWIXM] = SW0EM001.SWC1T1FL[SW0EWIXM]; /* 1 to 1 fl*/


end // end SW0E622

// Rewrite temporary strorage
Function SW0E623()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "623"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E623

// Update plan lane for norm lane
Function SW0E624()
   /* ------------------------------------------------------------*/
   /* Update plan lane for normal lane*/
    /* When lane length or lane dimension are updated for normal*/
     /* lane, update plan lane so that the fields match*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Test that plan lane exists for normal lane*/
    /* If not, bypass remaining processing*/
   /* ------------------------------------------------------------*/

  set SWCREC empty; /* Clear Swcrec*/

  SWCREC.XWHCD = SW0EM001.XWHCD; /* Warehouse code*/
  SWCREC.SWCLNENB = SW0EM001.SWCLNENB[SW0EWIXM]; /* Lane number*/
  SWCREC.PKURUNMD = "P"; /* picking run mode*/

  set SWQREC empty; /* Clear swqREC*/
  SWQREC.SWQFUNCD = "S "; /* SQL Update*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/

   /* ------------------------------------------------------------*/
   /* Handle return conditions from select*/
    /* Row found - continue*/
    /* Row not found - return*/
    /* Bad return code - display unexpected error message*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
       /* Next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        return; /* Return to previous process*/
      else

        converseLib.validationFailed(01); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before display*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "MNT WAREHOUSE/LANE TYPE      ";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
        TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
        SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
        SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
        SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
        SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
        TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

        exit stack; /* Exit to display map*/

      end

    end

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "MNT WAREHOUSE/LANE TYPE      ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
    TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
    SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
    SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
    SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
    SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
    TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Mnt to lane DB Lane*/
   /* ------------------------------------------------------------*/

  SWCREC.XLLCD = SW0EM001.XLLCD[SW0EWIXM]; /* Lane length*/
  SWCREC.SWCLNDIM = SW0EM001.SWCLNDIM[SW0EWIXM]; /* Dimen*/

   /* ------------------------------------------------------------*/
   /* Obtain the current data and time; move userid*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain data and time*/

  SWCREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date*/
  SWCREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/

  SWCREC.XXXUSRID = COMMAREA.CAUSERID; /* CRT operator ID*/

   /* ------------------------------------------------------------*/
   /* Mnt database record*/
   /* ------------------------------------------------------------*/

  set SWQREC empty; /* Clear swqREC*/
  SWQREC.SWQFUNCD = "U "; /* SQL Update*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, update temp storage zzzchgct and return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      SW0E625(); /* Update temp storage for plan lane*/

      return; /* Return to previous process*/

    end

  end

  SLWREC.XXXLOCID = "624"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error*/

  SW0EW00.SW0EWSWE = "N"; /* Edit switch*/

  set SW0EM001.SWCLNENB[SW0EWIXM] bold; /* Lane number*/
  set SW0EM001.XLNCD[SW0EWIXM] bold; /* Lane type*/
  set SW0EM001.XLLCD[SW0EWIXM] bold; /* Lane length*/
  set SW0EM001.SWCMAXCS[SW0EWIXM] bold; /* Max cases*/
  set SW0EM001.SWAINSNB[SW0EWIXM] bold; /* Insp Nbr*/
  set SW0EM001.XXXSTAT[SW0EWIXM] bold; /* Lane Status*/
  set SW0EM001.SWCAVLFL[SW0EWIXM] bold; /* Lane Open*/
  set SW0EM001.PKURUNMD[SW0EWIXM] bold; /* Run mode*/
  set SW0EM001.SWCLNGRP[SW0EWIXM] bold; /* Group cd*/
  set SW0EM001.SWCLNDIM[SW0EWIXM] bold; /* Dimen*/
  set SW0EM001.XHDCD[SW0EWIXM] bold; /* Hndl cd*/
  set SW0EM001.SWC1T1FL[SW0EWIXM] bold; /* 1 to 1 fl*/

  SW0EW00.SW0EWSWE = "N"; /* Edit switch*/


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "624"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "MNT WAREHOUSE/LANE TYPE      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
  SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
  SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
  SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
  SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
  TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E624

// Upd temp storage for plan lane
Function SW0E625()
   /* ------------------------------------------------------------*/
   /* Update temp storage for plan lane*/
    /* When the plan lane is updated for a matching normal lane,*/
     /* the application must also update the temp storage fields*/
     /* for the plan lane. The plan lane will be displayed on the*/
     /* current page. (Logic in SW0E113 makes sure that the plan*/
     /* lane is not displayed on the next page). This process*/
     /* finds the plan lane and updates the appropriate temp*/
     /* storage and map fields.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Find temp storage for plan lane*/
   /* ------------------------------------------------------------*/

  SW0EW00.SW0EWIX3 = SW0EW00.SW0EWIXM + 1; /* Work index*/
  SW0EW00.SW0EWSWT = "N"; /* Plan lane found sw*/

  while (SW0EW00.SW0EWIX3 <= 12 /* Look for plan lane info on curr page*/
   && SW0EW00.SW0EWSWT == "N")
    if (SWCREC.SWCLNENB == SW0EW01.SWCLNENB[SW0EWIX3] /* Lane number*/
     && SWCREC.PKURUNMD == SW0EW01.PKURUNMD[SW0EWIX3]) /* Run mode*/
      SW0EW00.SW0EWSWT = "Y"; /* Plan lane found sw*/
    else
      SW0EW00.SW0EWIX3 = SW0EW00.SW0EWIX3 + 1; /* Work index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If plan lane found on current page, move updated fields*/
    /* to temp storage*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.SW0EWSWT == "Y") /* Plan lane found*/

    SW0EW01.XLLCD[SW0EWIX3] = SWCREC.XLLCD; /* Lane length*/
    SW0EW01.SWCLNDIM[SW0EWIX3] = SWCREC.SWCLNDIM; /* Dim*/
    SW0EW01.ZZZCHGCT[SW0EWIX3] = SWCREC.ZZZCHGCT; /* Count*/

    SW0EM001.XLLCD[SW0EWIX3] = SWCREC.XLLCD; /* Lane length*/
    SW0EM001.SWCLNDIM[SW0EWIX3] = SWCREC.SWCLNDIM; /* Dim*/

    return;
  end

end // end SW0E625

Function SW0E630()
  SW0EW00.SW0EWSWC = "N";
  SW0E631();
  SW0E632();
  while (SW0EW00.SW0EWSWC == "N")
    if (SWCREC.SWCLNENB >= SW0EM001.SW0EMFRLN
     && SWCREC.SWCLNENB <= SW0EM001.SW0EMTOLN)
      if (SW0EM001.SW0EMRNMD == " ")
        SW0E634();
      else
        if (SW0EM001.SW0EMRNMD == SWCREC.PKURUNMD)
          SW0E634();
        end
      end
    end
    SW0E632();
  end
  SW0E633();
end // end SW0E630

// Obtain the Lane Table rows
Function SW0E631()
   /* ------------------------------------------------------------*/
   /* Select lane DB Lane*/
   /* ------------------------------------------------------------*/

  set SWCREC empty; /* Clear row storage area*/

  SWCREC.XWHCD = SW0EM001.XWHCD; /* Warehouse code*/

  SWCREC.SWCLNENB = -1; /* Lane number*/

  if (SW0EM001.SW0EMRMD > " ") /* Run mode  entered*/
    SWCREC.PKURUNMD = SW0EM001.SW0EMRMD; /* Run mode*/
  else /* Run mode not entered*/
    SWCREC.PKURUNMD = "*"; /* Run mode*/
  end

  SWCREC.XLNCD = "*"; /* Lane type*/

  SWCREC.XLLCD = "*"; /* Lane length*/

  SWCREC.SWCLNGRP = "*"; /* Lane group*/

  SWCREC.XHDCD = "*"; /* Hndl cd*/

  SWCREC.SWC1T1FL = "*"; /* 1 to 1 fl*/

   /* ------------------------------------------------------------*/
   /* Select lane IO call*/
   /* ------------------------------------------------------------*/

  set SWQREC empty; /* Clear swqREC*/

  SWQREC.SWQFUNCD = "S1"; /* SQL select wildcard value*/

  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WAREHOUSE/LANE TYPE   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
  SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
  SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
  SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
  SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
  TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E631

// Select next lane DB record
Function SW0E632()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted*/
   /* ------------------------------------------------------------*/
  set SWQREC empty; /* Clear swqREC*/
  SWQREC.SWQFUNCD = "N1"; /* SQL next wildcard value*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If end of the selected set, indicate end of cursor*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* End of selected set*/

    SW0EW00.SW0EWSWC = "Y"; /* Indicate end of cursor*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "632"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT LANE DATABASE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
  SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
  SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
  SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
  SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
  TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E632

// Close selected cursor DB lane
Function SW0E633()
   /* ------------------------------------------------------------*/
   /* Close selected cursor*/
   /* ------------------------------------------------------------*/

  set SWQREC empty; /* Clear swqREC*/
  SWQREC.SWQFUNCD = "C1"; /* SQL Close wildcard value*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "633"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E633

// CHG record(s) on LANE database
Function SW0E634()
   /* ------------------------------------------------------------*/
   /* Chg record(s) on Lane database -  performed 12 times*/

   /* Test row for entry or change - ezertn if no new data*/
   /* Read unique for zzzchgct compare*/
     /* if record not found, it has been deleted*/
     /* if zzzchgct not match, it has since been updated*/
   /* Move map row to swcrec*/
   /* Obtain data and time*/
   /* Update Lane database*/
   /* Increment temporary storage zzzchgct*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Mnt to lane DB Lane*/
   /* ------------------------------------------------------------*/
  if (SW0EM001.SW0EMLNST > " ")
    SWCREC.XXXSTAT = SW0EM001.SW0EMLNST; /* Lane status*/
  end
  if (SW0EM001.SW0EMLNOP > " ")
    SWCREC.SWCAVLFL = SW0EM001.SW0EMLNOP; /* Lane avail*/
  end

   /* ------------------------------------------------------------*/
   /* Obtain the current data and time; move userid*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain data and time*/

  SWCREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date*/
  SWCREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/

  SWCREC.XXXUSRID = COMMAREA.CAUSERID; /* CRT operator ID*/

   /* ------------------------------------------------------------*/
   /* Mnt database record*/
   /* ------------------------------------------------------------*/

  set SWQREC empty; /* Clear swqREC*/
  SWQREC.SWQFUNCD = "U "; /* SQL Update*/
  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, update temp storage zzzchgct and return*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

  SLWREC.XXXLOCID = "634"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error*/

  SW0EW00.SW0EWSWE = "N"; /* Edit switch*/

  set SW0EM001.SW0EMFRLN bold; /* from lane number*/
  set SW0EM001.SW0EMTOLN bold; /* to lane number*/
  set SW0EM001.SW0EMRNMD bold; /* run mode*/
  set SW0EM001.SW0EMLNOP bold; /* lane open flag*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "634"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "MNT WAREHOUSE/LANE TYPE      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
  SW0EW00.XWHCD = SWCREC.XWHCD; /* Warehouse code*/
  SW0EW00.SW0EMLNB = SWCREC.SWCLNENB; /* Lane number*/
  SW0EW00.SW0EMLTP = SWCREC.XLNCD; /* Lane type*/
  SW0EW00.SW0EMLLN = SWCREC.XLLCD; /* Lane length*/
  TA1REC.TA1TBLKE = SW0EW00.SW0EWHDR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0E634

// Delete temporary storage
Function SW0ES01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/

   /* Note:*/
    /* Init lane group to zero. The map field is defined as a*/
    /* numeric field, and the application compares the map*/
    /* fields to the work fields to determine whether any*/
    /* updates have been requested. The work field for lane*/
    /* group must be initialized to zero for the application*/
    /* to work properly.*/
   /* ------------------------------------------------------------*/

  set SW0EW01 empty; /* M001 display storage*/

  SW0EW00.SW0EWIX3 = 1; /* Work index*/

  while (SW0EW00.SW0EWIX3 <= 12) /* Work index*/

    SW0EW01.SWCLNGRP[SW0EWIX3] = "00"; /* Group*/

    SW0EW00.SW0EWIX3 = SW0EW00.SW0EWIX3 + 1; /* Work index*/

  end

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0EW00.XXXTSPAG = 0; /* Current page number*/
  SW0EW00.TA5TSQIX = 0; /* Highest page number*/

  SW0EM001.MAPLMPNO = 0; /* Current Map page*/
  SW0EM001.MAPLMPAG = 0; /* Maximum Map page*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SW0EW00.SW0EWTS = "N"; /* Clear screen on PA2*/
    SW0EW00.XWHCD = " "; /* Clear w-s warehouse*/
    SW0EW00.SW0EMLNB = 0; /* Clear w-s lane number*/
    SW0EW00.SW0EMLLN = " "; /* Clear w-s lane length*/
    SW0EW00.SW0EMLTP = " "; /* Clear w-s lane type*/
    SW0EW00.SW0EMRMD = " "; /* Clear w-s lane run mode*/
    SW0EW00.SW0EMGRP = "00"; /* Clear w-s lane group*/
    SW0EW00.SW0EMHND = " "; /* Clear w-s lane hndl cd*/
    SW0EW00.SW0EM1T1 = " "; /* Clear w-s lane 1 to 1 fl*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ES01

// Read temporary storage page
Function SW0ES02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0EW01.XXXTSLEN = SW0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SW0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ES02

// Move temp storage to map area
Function SW0ES03()
   /* ------------------------------------------------------------*/
   /* Move temp storage occur into map occur.*/
   /* ------------------------------------------------------------*/

  SW0EM001.SWCLNENB[SW0EWIXM] = SW0EW01.SWCLNENB[SW0EWIXM]; /* Num*/
  SW0EM001.XLLCD[SW0EWIXM] = SW0EW01.XLLCD[SW0EWIXM]; /* Len*/
  SW0EM001.XLNCD[SW0EWIXM] = SW0EW01.XLNCD[SW0EWIXM]; /* Type*/
  SW0EM001.SWCMAXCS[SW0EWIXM] = SW0EW01.SWCMAXCS[SW0EWIXM]; /* Cases*/
  SW0EM001.SWAINSNB[SW0EWIXM] = SW0EW01.SWAINSNB[SW0EWIXM]; /* Insp num*/
  SW0EM001.XXXSTAT[SW0EWIXM] = SW0EW01.XXXSTAT[SW0EWIXM];
                                   /* Lane stat*/
  SW0EM001.SWCAVLFL[SW0EWIXM] = SW0EW01.SWCAVLFL[SW0EWIXM]; /* Lane avai*/
  SW0EM001.PKURUNMD[SW0EWIXM] = SW0EW01.PKURUNMD[SW0EWIXM]; /* Run mode*/
  SW0EM001.SWCLNDIM[SW0EWIXM] = SW0EW01.SWCLNDIM[SW0EWIXM];
                                   /* Lane dimen*/
  SW0EM001.SWCLNGRP[SW0EWIXM] = SW0EW01.SWCLNGRP[SW0EWIXM]; /* Lane grp*/
  SW0EM001.XHDCD[SW0EWIXM] = SW0EW01.XHDCD[SW0EWIXM]; /* Hndl cd*/
  SW0EM001.SWC1T1FL[SW0EWIXM] = SW0EW01.SWC1T1FL[SW0EWIXM]; /* 1 to 1 fl*/

  SW0EW00.SW0EWIXM = SW0EW00.SW0EWIXM + 1; /* Increment occur index*/

end // end SW0ES03

// Set header/trailer attributes
Function SW0ES04()
   /* ------------------------------------------------------------*/
   /* Reset header attributes and cursor*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Reset cursor*/
   /* ------------------------------------------------------------*/

  set SW0EM001.XWHCD initialAttributes; /* Warehouse code*/
  set SW0EM001.SW0EMLNB initialAttributes; /* Header lane number*/
  set SW0EM001.SW0EMLLN initialAttributes; /* Header lane length*/
  set SW0EM001.SW0EMLTP initialAttributes; /* Header lane type*/
  set SW0EM001.SW0EMRMD initialAttributes; /* Header lane run mode*/
  set SW0EM001.SW0EMGRP initialAttributes; /* Header lane group cd*/
  set SW0EM001.SW0EMHND initialAttributes; /* Header lane hndl cd*/
  set SW0EM001.SW0EM1T1 initialAttributes; /* Header lane 1 to 1 fl*/
  set SW0EM001.SW0EMFRLN protect, invisible, noHighLight;
  set SW0EM001.SW0EMTOLN protect, invisible, noHighLight;
  set SW0EM001.SW0EMRNMD protect, invisible, noHighLight;
  set SW0EM001.SW0EMLNST protect, invisible, noHighLight;
  set SW0EM001.SW0EMLNOP protect, invisible, noHighLight;
  set SW0EM001.SWCLNENB[1] initialAttributes; /* Lane number*/
  set SW0EM001.XLLCD[1] initialAttributes; /* Lane length*/
  set SW0EM001.XLNCD[1] initialAttributes; /* Lane type*/
  set SW0EM001.SWCMAXCS[1] initialAttributes; /* Max cases*/
  set SW0EM001.PKURUNMD[1] initialAttributes; /* Run mode*/
  set SW0EM001.SWCLNGRP[1] initialAttributes; /* Group cd*/
  set SW0EM001.SWCLNDIM[1] initialAttributes; /* Lane dimen*/
  set SW0EM001.XHDCD[1] initialAttributes; /* Hndl cd*/
  set SW0EM001.SWC1T1FL[1] initialAttributes; /* 1 to 1 flag*/

  if (SW0EW00.SW0EWMDE == "I") /* INQ mode*/
    set SW0EM001.XWHCD cursor; /* Lane number*/
  end

  if (SW0EW00.SW0EWMDE == "A") /* Add mode*/
    set SW0EM001.SWCLNENB[1] cursor, normal; /* Lane number*/
    set SW0EM001.XLLCD[1] normal; /* Lane length*/
    set SW0EM001.XLNCD[1] normal; /* Lane type*/
    set SW0EM001.SWCMAXCS[1] normal; /* Max cases*/
    set SW0EM001.PKURUNMD[1] normal; /* Run mode*/
    set SW0EM001.SWCLNGRP[1] normal; /* Group cd*/
    set SW0EM001.SWCLNDIM[1] normal; /* Lane dimen*/
    set SW0EM001.XHDCD[1] normal; /* Hndl cd*/
    set SW0EM001.SWC1T1FL[1] normal; /* 1 to 1 flag*/
  end


  if (SW0EW00.SW0EWMDE == "C") /* MNT mode*/
    if (SW0EW00.TA5TSQIX > 0) /* Occurs mapped*/
      if (SW0EM001.XWHCD == "51")
        set SW0EM001.SW0EMFRLN initialAttributes;
        set SW0EM001.SW0EMTOLN initialAttributes;
        set SW0EM001.SW0EMRNMD initialAttributes;
        set SW0EM001.SW0EMLNST initialAttributes;
        set SW0EM001.SW0EMLNOP initialAttributes;
      end
      if (SW0EM001.PKURUNMD[1] == "P") /* Plan lane*/
        set SW0EM001.XLLCD[1] normal; /* Lane length*/
        set SW0EM001.XLNCD[1] cursor, normal; /* Lane type*/
      else
        set SW0EM001.XLLCD[1] cursor, normal; /* Lane length*/
        set SW0EM001.XLNCD[1] normal; /* Lane type*/
      end
      set SW0EM001.SWCMAXCS[1] normal; /* Max cases*/
      set SW0EM001.PKURUNMD[1] normal; /* Run mode*/
      set SW0EM001.SWCLNGRP[1] normal; /* Group cd*/
      set SW0EM001.SWCLNDIM[1] normal; /* Lane dimen*/
      set SW0EM001.XHDCD[1] normal; /* Hndl cd*/
      set SW0EM001.SWC1T1FL[1] normal; /* 1 to 1 flag*/
    else
      set SW0EM001.XWHCD cursor; /* Lane number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Reset header attributes.*/
   /* ------------------------------------------------------------*/
  set SW0EM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set SW0EM001.CAITEM initialAttributes; /* FAST PATH application data*/
  set SW0EM001.MAPLMPNO initialAttributes; /* Page number*/
  set SW0EM001.MAPLMPAG initialAttributes; /* Page of number*/
  set SW0EM001.XWHABRV initialAttributes; /* Warehouse name*/

  if (SW0EW00.SW0EWMDE == "A" /* If ADD mode*/
   && SW0EW00.SW0EWNWD == "N") /* and no new header data*/
    set SW0EM001.XWHCD protect; /* Warehouse*/
    set SW0EM001.SW0EMLNB protect; /* Lane number*/
    set SW0EM001.SW0EMLLN protect; /* Lane length*/
    set SW0EM001.SW0EMLTP protect; /* Lane type*/
    set SW0EM001.SW0EMRMD protect; /* Header lane run mode*/
    set SW0EM001.SW0EMGRP protect; /* Header lane group cd*/
    set SW0EM001.SW0EMHND protect; /* Header lane hndl cd*/
    set SW0EM001.SW0EM1T1 protect; /* Header lane 1 to 1 fl*/

  else

    if (SW0EW00.SW0EWMDE == "A" /* If ADD mode*/
     && SW0EW00.SW0EWNWD == "Y" /* New header data*/
     && SW0EW00.SW0EWSWE == "Y") /* and no header error*/
      set SW0EM001.XWHCD protect; /* Warehouse*/
      set SW0EM001.SW0EMLNB protect; /* Lane number*/
      set SW0EM001.SW0EMLLN protect; /* Lane length*/
      set SW0EM001.SW0EMLTP protect; /* Lane type*/
      set SW0EM001.SW0EMRMD protect; /* Header lane run mode*/
      set SW0EM001.SW0EMGRP protect; /* Header lane group cd*/
      set SW0EM001.SW0EMHND protect; /* Header lane hndl cd*/
      set SW0EM001.SW0EM1T1 protect; /* Header lane 1 to 1 fl*/

    else

      set SW0EM001.XWHCD initialAttributes; /* Warehouse*/
      set SW0EM001.SW0EMLNB initialAttributes; /* Lane number*/
      set SW0EM001.SW0EMLLN initialAttributes; /* Lane length*/
      set SW0EM001.SW0EMLTP initialAttributes; /* Lane type*/
      set SW0EM001.SW0EMRMD initialAttributes; /* Header lane run mode*/
      set SW0EM001.SW0EMGRP initialAttributes; /* Header lane group cd*/
      set SW0EM001.SW0EMHND initialAttributes; /* Header lane hndl cd*/
      set SW0EM001.SW0EM1T1 initialAttributes; /* Header lane 1 to 1 fl*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Reset PF14/15 visibility attributes*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAADDFL == "Y") /* IF ADD authority*/
    set SW0EM001.SW0EMP14 protect, modified; /* Normal intensity protect*/
  else
    set SW0EM001.SW0EMP14 protect, invisible; /* Dark protect*/
  end

  if (COMMAREA.CACHGFL == "Y") /* IF chg authority*/
    set SW0EM001.SW0EMP15 protect, modified; /* Normal intensity protect*/
  else
    if (SW0EW00.SW0EWMDE == "A") /* In Add mode*/
      set SW0EM001.SW0EMP15 protect, modified; /* Normal intensity protect*/
    else
      set SW0EM001.SW0EMP15 protect, invisible; /* Dark protect*/
    end
  end

  if (SW0EW00.SW0EWMDE == "A") /* In Add mode*/
    set SW0EM001.MAPLMPGL protect, invisible; /* Page literal dark protect*/
    set SW0EM001.MAPLMPOL protect, invisible; /* of literal dark protect*/
  else
    set SW0EM001.MAPLMPGL protect, bold; /* Page literal bright protect*/
    set SW0EM001.MAPLMPOL protect, bold; /* of literal bright protect*/
  end

end // end SW0ES04

// Set row(12) attributes
Function SW0ES05()
   /* ------------------------------------------------------------*/
   /* Reset field attributes in occur area.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity in occur area.*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.TA5TSQIX == 0) /* No occur data*/
    if (SW0EW00.SW0EWMDE == "A") /* Add mode*/
      set SW0EM001.SWCLNENB[SW0EWIXM] normal; /* Lane number*/
      set SW0EM001.XLLCD[SW0EWIXM] normal; /* Lane length*/
      set SW0EM001.XLNCD[SW0EWIXM] normal; /* Lane type*/
      set SW0EM001.SWCMAXCS[SW0EWIXM] normal; /* Maximum cases*/
      set SW0EM001.SWAINSNB[SW0EWIXM] normal; /* Inspection number*/
      set SW0EM001.XXXSTAT[SW0EWIXM] normal; /* Lane status*/
      set SW0EM001.SWCAVLFL[SW0EWIXM] normal; /* Lane open*/
      set SW0EM001.PKURUNMD[SW0EWIXM] normal; /* Run mode*/
      set SW0EM001.SWCLNGRP[SW0EWIXM] normal; /* Group cd*/
      set SW0EM001.SWCLNDIM[SW0EWIXM] normal; /* Dimen*/
      set SW0EM001.XHDCD[SW0EWIXM] normal; /* Hndl cd*/
      set SW0EM001.SWC1T1FL[SW0EWIXM] normal; /* 1 to 1 flag*/
    else
      set SW0EM001.SWCLNENB[SW0EWIXM] initialAttributes; /* Lane number*/
      set SW0EM001.XLLCD[SW0EWIXM] initialAttributes; /* Lane length*/
      set SW0EM001.XLNCD[SW0EWIXM] initialAttributes; /* Lane type*/
      set SW0EM001.SWCMAXCS[SW0EWIXM] initialAttributes; /* Maximum cases*/
      set SW0EM001.SWAINSNB[SW0EWIXM] initialAttributes; /* Inspection number*/
      set SW0EM001.XXXSTAT[SW0EWIXM] initialAttributes; /* Lane status*/
      set SW0EM001.SWCAVLFL[SW0EWIXM] initialAttributes; /* Lane open*/
      set SW0EM001.PKURUNMD[SW0EWIXM] initialAttributes; /* Run mode*/
      set SW0EM001.SWCLNGRP[SW0EWIXM] initialAttributes; /* Group cd*/
      set SW0EM001.SWCLNDIM[SW0EWIXM] initialAttributes; /* Dimen*/
      set SW0EM001.XHDCD[SW0EWIXM] initialAttributes; /* Hndl cd*/
      set SW0EM001.SWC1T1FL[SW0EWIXM] initialAttributes; /* 1 to 1 flag*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if screen has lane data*/
      /* if inquiry mode then protect occur line*/
      /* if add mode then unprotect occur line*/
      /* if maintenance mode*/
         /* if occur has data then unprotect occur line*/
            /* if run mode = plan then protect lane length, dimen*/
            /* else                  unprotect lane length, dimen*/
         /* else                     protect occur line*/
   /* ------------------------------------------------------------*/

  if (SW0EW00.TA5TSQIX > 0) /* occur data exists*/
    if (SW0EW00.SW0EWMDE == "I") /* Inquiry mode*/
      set SW0EM001.SWCLNENB[SW0EWIXM] initialAttributes; /* Lane number*/
      set SW0EM001.XLLCD[SW0EWIXM] initialAttributes; /* Lane length*/
      set SW0EM001.XLNCD[SW0EWIXM] initialAttributes; /* Lane type*/
      set SW0EM001.SWCMAXCS[SW0EWIXM] initialAttributes; /* Maximum cases*/
      set SW0EM001.SWAINSNB[SW0EWIXM] initialAttributes; /* Inspection number*/
      set SW0EM001.XXXSTAT[SW0EWIXM] initialAttributes; /* Lane status*/
      set SW0EM001.SWCAVLFL[SW0EWIXM] initialAttributes; /* Lane open*/
      set SW0EM001.PKURUNMD[SW0EWIXM] initialAttributes; /* Run mode*/
      set SW0EM001.SWCLNGRP[SW0EWIXM] initialAttributes; /* Group cd*/
      set SW0EM001.SWCLNDIM[SW0EWIXM] initialAttributes; /* Dimen*/
      set SW0EM001.XHDCD[SW0EWIXM] initialAttributes; /* Hndl cd*/
      set SW0EM001.SWC1T1FL[SW0EWIXM] initialAttributes; /* 1 to 1 flag*/
    else
      if (SW0EW00.SW0EWMDE == "A") /* Add mode*/
        set SW0EM001.SWCLNENB[SW0EWIXM] normal; /* Lane number*/
        set SW0EM001.XLLCD[SW0EWIXM] normal; /* Lane type*/
        set SW0EM001.XLNCD[SW0EWIXM] normal; /* Lane length*/
        set SW0EM001.SWCMAXCS[SW0EWIXM] normal; /* Maximum cases*/
        set SW0EM001.SWAINSNB[SW0EWIXM] normal; /* Inspection number*/
        set SW0EM001.XXXSTAT[SW0EWIXM] normal; /* Lane status*/
        set SW0EM001.SWCAVLFL[SW0EWIXM] normal; /* Lane open*/
        set SW0EM001.PKURUNMD[SW0EWIXM] normal; /* Run mode*/
        set SW0EM001.SWCLNGRP[SW0EWIXM] normal; /* Group cd*/
        set SW0EM001.SWCLNDIM[SW0EWIXM] normal; /* Dimen*/
        set SW0EM001.XHDCD[SW0EWIXM] normal; /* Hndl cd*/
        set SW0EM001.SWC1T1FL[SW0EWIXM] normal; /* 1 to 1 flag*/
      else
        if (SW0EW00.SW0EWMDE == "C") /* MNT mode*/
          if (SW0EW01.SW0EWLU[SW0EWIXM] == "Y") /* Line has data*/
            set SW0EM001.SWCLNENB[SW0EWIXM] initialAttributes; /* Lane number*/
            /* protect Lane type*/
            set SW0EM001.XLNCD[SW0EWIXM] normal; /* Lane type*/
            set SW0EM001.SWCMAXCS[SW0EWIXM] normal; /* Maximum cases*/
            set SW0EM001.SWAINSNB[SW0EWIXM] normal; /* Inspection number*/
            set SW0EM001.XXXSTAT[SW0EWIXM] normal; /* Lane status*/
            set SW0EM001.SWCAVLFL[SW0EWIXM] normal; /* Lane open*/
            set SW0EM001.PKURUNMD[SW0EWIXM] initialAttributes; /* Run mode*/
            set SW0EM001.SWCLNGRP[SW0EWIXM] normal; /* Group cd*/
            set SW0EM001.XHDCD[SW0EWIXM] normal; /* Hndl cd*/
            set SW0EM001.SWC1T1FL[SW0EWIXM] normal; /* 1 to 1 flag*/
            if (SW0EM001.PKURUNMD[SW0EWIXM] == "P") /* Plan run mode*/
              set SW0EM001.XLLCD[SW0EWIXM] initialAttributes; /* Lane length*/
              set SW0EM001.SWCLNDIM[SW0EWIXM] initialAttributes; /* Dimen*/
            else
              set SW0EM001.XLLCD[SW0EWIXM] normal; /* Lane length*/
              set SW0EM001.SWCLNDIM[SW0EWIXM] normal; /* Dimen*/
            end
          else
            set SW0EM001.SWCLNENB[SW0EWIXM] initialAttributes; /* Lane number*/
            set SW0EM001.XLLCD[SW0EWIXM] initialAttributes; /* Lane length*/
            set SW0EM001.XLNCD[SW0EWIXM] initialAttributes; /* Lane type*/
            set SW0EM001.SWCMAXCS[SW0EWIXM] initialAttributes; /* Maximum cases*/
            set SW0EM001.SWAINSNB[SW0EWIXM] initialAttributes; /* Inspection number*/
            set SW0EM001.XXXSTAT[SW0EWIXM] initialAttributes; /* Lane status*/
            set SW0EM001.SWCAVLFL[SW0EWIXM] initialAttributes; /* Lane open*/
            set SW0EM001.PKURUNMD[SW0EWIXM] initialAttributes; /* Run mode*/
            set SW0EM001.SWCLNGRP[SW0EWIXM] initialAttributes; /* Group cd*/
            set SW0EM001.SWCLNDIM[SW0EWIXM] initialAttributes; /* Dimen*/
            set SW0EM001.XHDCD[SW0EWIXM] initialAttributes; /* Hndl cd*/
            set SW0EM001.SWC1T1FL[SW0EWIXM] initialAttributes; /* 1 to 1 flag*/

          end
        end
      end
    end
  end

  SW0EWIXM = SW0EWIXM + 1; /* increment work index*/

end // end SW0ES05

// Delete temporary storage
Function SW0ES06()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/

   /* Note:*/
    /* Init lane group to zero. The map field is defined as a*/
    /* numeric field, and the application compares the map*/
    /* fields to the work fields to determine whether any*/
    /* updates have been requested. The work field for lane*/
    /* group must be initialized to zero for the application*/
    /* to work properly.*/
   /* ------------------------------------------------------------*/

  set SW0EW01 empty; /* M001 display storage*/

  SW0EW00.SW0EWIX3 = 1; /* Work index*/

  while (SW0EW00.SW0EWIX3 <= 12) /* Work index*/

    SW0EW01.SWCLNGRP[SW0EWIX3] = "00"; /* Group*/

    SW0EW00.SW0EWIX3 = SW0EW00.SW0EWIX3 + 1; /* Work index*/

  end

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0EW00.XXXTSPAG = 0; /* Current page number*/
  SW0EW00.TA5TSQIX = 0; /* Highest page number*/

  SW0EM001.MAPLMPNO = 0; /* Current Map page*/
  SW0EM001.MAPLMPAG = 0; /* Maximum Map page*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SW0EW00.SW0EWTS = "N"; /* Clear screen on PA2*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S06"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ES06

// converse pop up window
Function XPXLL01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XLLTBL.XLLCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XLLTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLLTBL.XLLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLLTBL.XLLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XLLTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XLLTBL.XLLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XLLTBL.XLLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XLLTBL.XLLCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXLL01

//*** RECORD=SW0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
//  Note:
//   XXXTSLEN contains the temp storage length.
//   The value of the field is set in the flow
//   for the XSPL001 process at the beginning
//   of the application.
// ----------------------------
// ***********************
Record SW0EW00 type basicRecord
  10 SW0EWIXM SW0EWIXM ; 
  10 SW0EWIX1 SW0EWIX1 ; 
  10 SW0EWIX2 SW0EWIX2 ; 
  10 SW0EWIX3 SW0EWIX3 ; 
  10 SW0EWCNT SW0EWCNT ; 
  10 SW0EWMDE SW0EWMDE ; 
  10 SW0EWSWC SW0EWSWC ; 
  10 SW0EWSWD SW0EWSWD ; 
  10 SW0EWSWE SW0EWSWE ; 
  10 SW0EWSWF SW0EWSWF ; 
  10 SW0EWSWN SW0EWSWN ; 
  10 SW0EWSWR SW0EWSWR ; 
  10 SW0EWSWT SW0EWSWT ; 
  10 SW0EWSWU SW0EWSWU ; 
  10 SW0EWACP SW0EWACP ; 
  10 SW0EWNWD SW0EWNWD ; 
  10 SW0EWTS SW0EWTS ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SW0EWINS SW0EWINS ; 
  10 SW0EWSAV SW0EWSAV ; 
  10 SW0EWHDR SW0EWHDR ; 
    15 XWHCD XWHCD ; 
    15 SW0EMLNB SW0EMLNB ; 
    15 SW0EMLLN SW0EMLLN ; 
    15 SW0EMLTP SW0EMLTP ; 
    15 SW0EMRMD SW0EMRMD ; 
    15 SW0EMGRP SW0EMGRP ; 
    15 SW0EMHND SW0EMHND ; 
    15 SW0EM1T1 SW0EM1T1 ; 
    15 SW0EMQIN SW0EMQIN ; 
  10 XHDKEY XHDKEY ; 
    15 XHDCD XHDCD ; 
    15 XGPCD XGPCD ; 
  10 SW0EWFRLN SW0EWFRLN ; 
  10 SW0EWTOLN SW0EWTOLN ; 
  10 SW0EWRNMD SW0EWRNMD ; 
  10 SW0EWLNST SW0EWLNST ; 
  10 SW0EWLNOP SW0EWLNOP ; 
  10 SW0EWGCHG SW0EWGCHG ; 
  10 SW0EWHPG SW0EWHPG ; 
end // end SW0EW00

//*** RECORD=SW0EW01 ****
// ------------------------
// TS 001 display storage.
// ------------------------
// Note:
//  If additional fields are
//  added to the screen, be
//  sure to move the correct
//  temp storage length to the
//  application work record in
//  the flow for XPSL001.
// ------------------------
// ***********************
Record SW0EW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 SW0EWTMP SW0EWTMP ; 
    10 SW0EWLU SW0EWLU [12] ; 
    10 ZZZCHGCT ZZZCHGCT [12] ; 
    10 SWCLNENB SWCLNENB [12] ; 
    10 XLLCD XLLCD [12] ; 
    10 XLNCD XLNCD [12] ; 
    10 SWCMAXCS SWCMAXCS [12] ; 
    10 SWAINSNB SWAINSNB [12] ; 
    10 XXXSTAT XXXSTAT [12] ; 
    10 SWCAVLFL SWCAVLFL [12] ; 
    10 PKURUNMD PKURUNMD [12] ; 
    10 SWCLNGRP SWCLNGRP [12] ; 
    10 SWCLNDIM SWCLNDIM [12] ; 
    10 XHDCD XHDCD [12] ; 
    10 SWCQLTFL SWCQLTFL [12] ; 
    10 SWC1T1FL SWC1T1FL [12] ; 
end // end SW0EW01

// Header 1 to 1 flag
DataItem SW0EM1T1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header group
DataItem SW0EMGRP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header hndl cd
DataItem SW0EMHND char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header warehouse lane length
DataItem SW0EMLLN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header warehouse lane number
DataItem SW0EMLNB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Header warehouse lane type
DataItem SW0EMLTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header qty insp flag
DataItem SW0EMQIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header run mode
DataItem SW0EMRMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ADD function completed (Y)
DataItem SW0EWACP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Variable work counter
DataItem SW0EWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0EWFRLN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0EWGCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map header fields
DataItem SW0EWHDR char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0EWHPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work inspection number
DataItem SW0EWINS num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Variable work index
DataItem SW0EWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variable work index
DataItem SW0EWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variable work index
DataItem SW0EWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SW0EWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0EWLNOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0EWLNST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Occurrence used('Y' or BLANK)
DataItem SW0EWLU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update mode (I or C or A)
DataItem SW0EWMDE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map header change switch
DataItem SW0EWNWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0EWRNMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save area for temp storage pag
DataItem SW0EWSAV char(300)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0EWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SW0EWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit pass switch (Y or N)
DataItem SW0EWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0EWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit switch for numeric data
DataItem SW0EWSWN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0EWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line found in temp stor sw
DataItem SW0EWSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SW0EWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temp storage group level
DataItem SW0EWTMP char(300)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0EWTOLN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Return to TS page before updat
DataItem SW0EWTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

