package sw02;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW02 ****
// This application allows a user to inquire upon the plan
// reconcilation data.  The user may select data by warehouse
// and container and / or product.  If the user selects only
// the warehouse and container all products will be displayed.
// The pf6 key, if pressed, will build/submit jcl to print the
// 'Plan Reconcilation Detail report'.
// 
// The user may exit to any allowed application, via fast path
// or from this screen.  Pf7 pf8 allow the user to page forward
// and backwards.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/17/91  jmoore  new program
//          04/23/91  jmoore  Fixed program to display totals
//                            for each product.
//                            Changed the UPRT QT to print when
//                            slorec.slmwcpfl ne 'y' in sw02120
// SL#0     10/10/91  SPOPA   Change "Allow Implicits" to NO.
// MAINT    01/31/92  GRAY    INITIALIZE RECORDS AND MAPS.
// tbl chg  03/04/94  Ryonke  Code changes for table changes.
// TSOCRTNB 06/20/95  RMORGA  Increase tsocrtnb from 4 to 6
// y2kproj  02-03-98  oricha  y2k modifications:  regen to pick
//                            up new version of xx0xs01.
// *********************
Program SW02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PCYREC PCYREC; // record
  SL1REC SL1REC; // record
  SL2REC SL2REC; // record
  SLKREC SLKREC; // record
  SLLREC SLLREC; // record
  SLOREC SLOREC; // record
  SLSREC SLSREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW02W00 SW02W00; // record
  SW02W01 SW02W01; // record
  SW02W03 SW02W03; // record
  SW02W04 SW02W04; // record
  SW02W05 SW02W05; // record
  SWVREC SWVREC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XOWREC XOWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SW02T01; // table
  use XDMTBL; // table
  use XEGTBL; // table
  use XGPTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XRETBL; // table
  use YRSTBL; // table
  use XSLTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use SW02M.SW02M001,  // forms
      SW02M.TA0PM001, 
      SW02M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW02M001 initial; /* M001 input/output*/
    set TA0PM001 initial;
    set XX0XM001 initial; /* pop-up window put*/
    set SW02W00 empty; /* Working storage*/
    set SW02W01 empty; /* M001 header storage*/
    set SW02W03 empty; /* temp storage*/
    set SW02W04 empty; /* JCL work area*/
    set SW02W05 empty; /* size array*/
    set PCYREC empty;
    set PC2REC empty;
    set PC3REC empty;
    set SLKREC empty;
    set SLLREC empty;
    set SLOREC empty;
    set SLSREC empty;
    set SL1REC empty;
    set SL2REC empty;
    set SQLCA empty; /* SQL communication area*/
    set SYCREC empty; /* Error diagnosis information*/
    set SYPREC empty; /* Error diagnosis information*/
    set SWVREC empty; /* Error diagnosis information*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA3REC empty; /* convert code to descriptions*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* submit jcl*/
    set XOWREC empty;
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty;
    set ERRSQLCA empty;

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    SW02W00.SW02WSWR = "N"; /* Request for data switch*/
    SW02W00.SW02WSWF = "Y"; /* format screen data switch*/

    SW02W00.XXXTSLEN = 457; /* temp storage length*/

    SLWREC.XXXAPPID = COMMAREA.CACURRAP;

    SW02W01.XWHCD = SLWREC.XWHCD; /* warehouse*/
    if (SLWREC.XWHCD == " ")
      SW02W01.XWHCD = COMMAREA.XWHCD;
    end
    if (SW02W01.XWHCD in XWHTBL.XWHCD)
      SW02W01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    SW02W01.TSHCNTNR = SLWREC.TSHCNTNR; /* container*/

    if (SLWREC.XWHCD != " " /* warehouse passed*/
     && SLWREC.TSHCNTNR != " ") /* container passed*/
      SW02W00.SW02WSWR = "Y"; /* Request data*/
    end

    SW02W00.XGPCD = "03"; /* group code*/
    SW02W01.XGPCD = "03"; /* group code*/
    SW02W00.XDMCD = "00"; /* dimension code*/
    SW02W01.XDMCD = "00"; /* dimension code*/
    SW02W00.XQACD = "01"; /* quality code*/
    SW02W01.XQACD = "01"; /* quality code*/
    SW02W00.PC2INSEG = "000"; /* iseg*/
    SW02W01.PC2INSEG = "000"; /* iseg*/
    SW02W00.XEGCD = "000"; /* engineering difference code*/
    SW02W01.XEGCD = "000"; /* engineering difference code*/
    SW02W00.XPGCD = "00"; /* package*/
    SW02W01.XPGCD = "00"; /* package*/
    SW02W00.XUMCD = "00"; /* uom code*/
    SW02W01.XUMCD = "00"; /* uom code*/
    SW02W00.XOWCD = "00"; /* own group code*/
    SW02W01.XOWCD = "00"; /* own group code*/
    SW02W00.XSLCD = "000"; /* class code*/
    SW02W01.XSLCD = "000"; /* class code*/

     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/

    goto SW02001;

    SW02001: SW02001();
    goto SW02001;
  end // end main
end // end SW02

// Inquire/maintainance m001
Function SW02001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW02100(); /* Obtain the data to display*/

  SW02200(); /* Format and display the map*/

  SW02300(); /* Check attention identifier*/

  SW02400(); /* Reset fields to normal intensity*/

  SW02500(); /* Verify the entered data*/

  SW02600(); /* Process valid input request*/

end // end SW02001

// Obtain the data to display
Function SW02100()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW02W00.SW02WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* purge temporary storage*/
   /* ------------------------------------------------------------*/

  set SW02W05 empty; /* initialize w05*/

  SW02S01(); /* purge temp storage*/

   /* ------------------------------------------------------------*/
   /* if key data has been entered and is valid obtain*/
   /* work order product information for display.*/
   /* ------------------------------------------------------------*/

  set SL1REC empty;

  SL1REC.XWHCD = SW02W01.XWHCD; /* warehouse*/
  SL1REC.TS3CNTNR = SW02W01.TSHCNTNR; /* container*/

  SW02S02(); /* Select 's ' dstloc.vrlhdr01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL1REC.YRSCD == "02" /* Receiving status*/
     || SL1REC.YRSCD == "03" 
     || SL1REC.YRSCD == "04")
      SW02102(); /* get receipt log data*/
    else
      set SW02M001.XWHCD cursor;
      converseLib.validationFailed(317); /* receiving status invalid*/
      SLWREC.XXXLOCID = "100";
      return;
    end
  else

    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(350); /* no products to display*/
      SLWREC.XXXLOCID = "100";
      return;
    end
  end

   /* get a product*/

  if (SW02W00.SW02WPRF == "Y") /* product was entered*/

     /* build slkkey*/

    set SLKREC empty; /* init slkrec*/

    SLKREC.XWHCD = SW02W01.XWHCD; /* warehouse*/
    SLKREC.TSHCNTNR = SW02W01.TSHCNTNR; /* container*/
    SLKREC.PC3PONBR = SW02W01.PC3PONBR; /* po nbr*/
    SLKREC.XGPCD = SW02W01.XGPCD;
    SLKREC.SY1STNBR = SW02W01.SY1STNBR;
    SLKREC.SY2CLRID = SW02W01.SY2CLRID;
    SLKREC.XDMCD = SW02W01.XDMCD;
    SLKREC.XQACD = SW02W01.XQACD;
    SLKREC.XOWCD = SW02W01.XOWCD;
    SLKREC.PC2INSEG = SW02W01.PC2INSEG;
    SLKREC.XPGCD = SW02W01.XPGCD;
    SLKREC.XUMCD = SW02W01.XUMCD;
    SLKREC.XSLCD = SW02W01.XSLCD;

    SW02S10(); /* select 's ' dstloc.vrlcmp01*/

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      SLWREC.XXXLOCID = "100";
      converseLib.validationFailed(44); /* no data found for product*/
    else
      SW02110(); /* get header data*/
      SW02120(); /* get quantities*/
    end

  else

     /* get all products in the container*/

    SW02W00.SW02WEOF = "N"; /* product flag*/

    set SLKREC empty; /* init slkrec*/
    SLKREC.XWHCD = SW02W01.XWHCD; /* warehouse*/
    SLKREC.TSHCNTNR = SW02W01.TSHCNTNR; /* container*/

    SW02S11(); /* select 's1' dstloc.vrlcmp01*/
    SW02S12(); /* select 'n1' dstloc.vrlcmp01*/

    while (SW02W00.SW02WEOF == "N") /* more products*/

      SW02110(); /* get header data*/
      SW02120(); /* get quantities*/
      SW02S12(); /* select 'n1' dstloc.vrlcmp01*/

    end
    SW02S13(); /* select 'c1' dstloc.vrlcmp01*/
    if (SW02W00.TA5TSQIX == 0) /* not found*/
      SLWREC.XXXLOCID = "100";
      converseLib.validationFailed(267); /* no data found for container*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW02W00.XXXTSPAG = 1; /* first page*/
  SW02W00.SW02WSWR = "N"; /* Request for data switch*/
  SW02W00.SW02WPRF = "N"; /* Request product*/
  SW02W01.CACHGFL = "Y"; /* data is available for change*/

end // end SW02100

// load dstloc.vwophd01 into w/s
Function SW02102()
   /* ------------------------------------------------------*/
   /* load receipt data into w/s*/
   /* ------------------------------------------------------*/

  SW02W01.XARCD = SL1REC.XARCD; /* area*/
  SW02W01.SL4ZONE = SL1REC.SL4ZONE; /* zone*/

  SW02W01.YRSCD = SL1REC.YRSCD; /* rcv status*/
  if (SL1REC.YRSCD in YRSTBL.YRSCD)
    SW02W01.YRSABRV = YRSTBL.YRSABRV[sysVar.arrayIndex];
  end /* rcv abrv*/
  SW02W01.XITCD = SL1REC.XITCD; /* rcv type*/
  SW02W01.SL1RCRNO = SL1REC.SL1RCRNO; /* rcv rpt*/
  SW02W01.SL1CRTDT = SL1REC.SL1CRTDT; /* rcv date*/

  SW02W01.ZZZCHGDT = SL1REC.ZZZCHGDT; /* update date*/

  if (SL1REC.SL1UPDBY != " ")

    SW02105(); /* get user name -- call ta0230*/

    if (TA3REC.TA3RTNCD != 0)
      SW02W01.XURUSRID = SL1REC.SL1UPDBY;
      SW02W01.SW02WDSH = " - ";
      SW02W01.SW02WLTR = "UNKNOWN";
    else
      SW02W01.XURUSRNM = TA3REC.XURUSRNM;
    end
  end

end // end SW02102

// Obtain the user information
Function SW02105()
   /* ------------------------------------------------------------*/
   /* Obtain the user report distribution information.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty; /* Initialize subroutine parameters*/

  TA3REC.TA3OPTN = "NAMEONLY"; /* Indicate subroutine option*/
  TA3REC.TA3USRID = SL1REC.SL1UPDBY; /* USER*/

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user information*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call was successful*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(1); /* CSP return code*/
  SLWREC.XXXLOCID = "105"; /* APPL MODULE*/
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Error information*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN THE USER INFORMATION";
  TA1REC.TA1PGMNM = "SW02105"; /* Process name*/
  TA1REC.TA1MAP = "SW02M001"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to calling application*/


end // end SW02105

// load dstloc.vwophd01 into w/s
Function SW02110()
   /* ------------------------------------------------------*/
   /* Format po id/ type using the common routine*/
                               /* xsslp01/xsslw01*/
   /* ------------------------------------------------------*/

  set SWVREC empty; /* initialize swvrec*/
  SWVREC.XGPCD = SLKREC.XGPCD; /* gpc code*/
  SWVREC.PC3PONBR = SLKREC.PC3PONBR; /* po number*/
  SWVREC.SWVWFNC = "ID"; /* function*/

  XSSLS10(); /* obtain po id*/

   /* ------------------------------------------------------------*/
   /* If successful return code*/
   /* ------------------------------------------------------------*/

  if (SWVREC.SWVWRTN == 0) /* Call successful*/

    SW02W01.PC3PONBR = SWVREC.PC3PONBR; /* po number*/
    SW02W01.SWVWPOID = SWVREC.SWVWPOID; /* po id*/
    SW02W01.PC4ORTYP = SWVREC.PC4ORTYP; /* po type*/

  else

    SW02W01.PC3PONBR = 0; /* po number*/
    SW02W01.SWVWPOID = " "; /* po id*/

  end

   /* ------------------------------------------------------*/
   /* load product data into w/s*/
   /* ------------------------------------------------------*/

  if (SW02W00.SW02WPRF != "Y") /* product not entered*/

    SW02W01.XGPCD = SLKREC.XGPCD;
    SW02W01.SY1STNBR = SLKREC.SY1STNBR;
    SW02W01.SY2CLRID = SLKREC.SY2CLRID;
    SW02W01.XDMCD = SLKREC.XDMCD;
    SW02W01.XQACD = SLKREC.XQACD;
    SW02W01.PC2INSEG = SLKREC.PC2INSEG;
    SW02W01.XEGCD = SLKREC.XEGCD;
    SW02W01.XPGCD = SLKREC.XPGCD;
    SW02W01.XUMCD = SLKREC.XUMCD;
    SW02W01.XOWCD = SLKREC.XOWCD;
    SW02W01.XSLCD = SLKREC.XSLCD;


  end

   /* ------------------------------------------------------------*/
   /* get style and color description/ determine L/C code*/
   /* ------------------------------------------------------------*/

  SW02116(); /* get descriptions*/

   /* --------------------------------------------------*/
    /* check receipt status for production set aside*/
   /* --------------------------------------------------*/

  SW02W01.SW02WSTA = " "; /* prod set aside*/

  if (SLKREC.XRECD > " ")
    if (SLKREC.XRECD in XRETBL.XRECD)
      if (XRETBL.XXXSTAT[sysVar.arrayIndex] == "A"
       && XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y")
        SW02W01.SW02WSTA = "*"; /* prod set aside*/
      end
    end
  end

end // end SW02110

// load style/color description
Function SW02116()

   /* ------------------------------------------------------------*/
   /* obtain the style and color description from dprod.vcolor02*/
   /* ------------------------------------------------------------*/

  set SYCREC empty; /* Clear row storage area*/

  SYCREC.XGPCD = SW02W01.XGPCD;
  SYCREC.SY1STNBR = SW02W01.SY1STNBR;
  SYCREC.SY2CLRID = SW02W01.SY2CLRID;
  SYCREC.XDMCD = SW02W01.XDMCD;
  SW02W01.XLCCD = "**";

  SW02S05(); /* select 's ' dprod.vcolor02 row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SW02W01.SY1SSTNM = SYCREC.SY1SSTNM; /* style desc*/
    SW02W01.SY2CLRAB = SYCREC.SY2CLRAB; /* color desc*/
    SW02118(); /* format L/C*/

  end

end // end SW02116

// Get L/C
Function SW02118()
    /* get current date*/

  XX0XS01();

  if (SYCREC.SY2CEDT1 <= XX0XW01.XX0XWDAT)
    SW02W01.XLCCD = SYCREC.XLCCD1; /* L/C*/
  else

    if (SYCREC.SY2CEDT2 <= XX0XW01.XX0XWDAT)
      SW02W01.XLCCD = SYCREC.XLCCD2; /* L/C*/
    else

      if (SYCREC.SY2CEDT3 <= XX0XW01.XX0XWDAT)
        SW02W01.XLCCD = SYCREC.XLCCD3; /* L/C*/
      else

        if (SYCREC.SY2CEDT4 <= XX0XW01.XX0XWDAT)
          SW02W01.XLCCD = SYCREC.XLCCD4; /* L/C*/
        end
      end
    end
  end

end // end SW02118

// load dstloc.vwophd01 into w/s
Function SW02120()
   /* ------------------------------------------------------------*/
    /* load detail line*/
   /* ------------------------------------------------------------*/

  set SW02W05 empty; /* initialize w05 totals*/
  set SW02W03 empty; /* initialize w03 W/O*/
  SW02W00.SW02WIDX = 1; /* initialize index*/
  SW02W03.SW02W3IX = 1; /* initialize index*/
  SW02W00.SW02WPFF = "N"; /* page full flag (8 lines)*/

  while (SW02W00.SW02WIDX <= 40) /* walk thru sizes 1 - 40*/

    if (SLKREC.TSOSHPQT[SW02WIDX] > 0 /* shipped qty*/
     || SLKREC.SL2RCVD[SW02WIDX] > 0) /* received qty*/

      /* ------------------------------------------------------*/
       /* get size description*/
      /* ------------------------------------------------------*/

      SW02126(); /* size description*/

      SW02S17(); /* select 'sd' dstloc.vrlitm01*/

      SW02S18(); /* select 'nd' dstloc.vrlitm01*/

      while (SQLCA.VAGen_SQLCODE == 0) /* process dstloc.vrlitm01 rows*/

        SW02W03.SY4IDDSC[SW02W3IX] = SYPREC.SY4IDDSC[1];

        SW02W03.SL8FRLC[SW02W3IX] = SL2REC.SL5LOCTN;
        SW02W03.PKDNCSQN[SW02W3IX] = SL2REC.PKDNCSQN;
        SW02W03.TSOSHPQT[SW02W3IX] = SL2REC.TSOSHPQT;
        SW02W00.TSOSHPQT = SL2REC.TSOSHPQT; /* ship qty*/
        SW02W03.SL2RCVD[SW02W3IX] = SL2REC.SL2RCVD; /* unex qty*/
        SW02W00.SL2RCVD = SL2REC.SL2RCVD; /* rec qty*/
        SW02W00.SW02WCAS = SL2REC.SL2CASE; /* case*/

        SW02W00.SW02WDIF = SW02W00.SL2RCVD - SW02W00.TSOSHPQT; /* diff qty*/
        SW02W03.SW02WDIF[SW02W3IX] = SW02W00.SW02WDIF;

        if (SL2REC.SWHLNCAT == "UX") /* unexpected quantities*/
          SW02W03.SW02WUXQ[SW02W3IX] = SL2REC.SL2RCVD;
        end

        SW02S16(); /* Select unique dstloc.vwophd02*/

        if (SQLCA.VAGen_SQLCODE == 0)
          SW02W03.SL8WONBR[SW02W3IX] = SLOREC.SL8WONBR; /* W/O nbr*/
          if (SLOREC.SLMWCPFL != "Y") /* not prted*/
            SW02W03.SL9WOQTY[SW02W3IX] = SLOREC.SL9WOQTY; /* unpt qty*/
          end
        end

         /* add to product total*/

        SW02W05.SW02WPLT = SW02W05.SW02WPLT + SW02W03.TSOSHPQT[SW02W3IX];
        SW02W05.SW02WRCT = SW02W05.SW02WRCT + SW02W03.SL2RCVD[SW02W3IX];
        SW02W05.SW02WDFT = SW02W05.SW02WDFT + SW02W03.SW02WDIF[SW02W3IX];
        SW02W05.SW02WUXT = SW02W05.SW02WUXT + SW02W03.SW02WUXQ[SW02W3IX];
        SW02W05.SW02WUPT = SW02W05.SW02WUPT + SW02W03.SL9WOQTY[SW02W3IX];

        SW02W03.SW02W3MX = SW02W03.SW02W3IX; /* set max w03 index*/
        SW02W03.SW02W3IX = SW02W03.SW02W3IX + 1; /* increment w03 index*/

         /* if the page is full, add to temporary storage*/

        if (SW02W03.SW02W3IX > 8) /* page is full*/
          SW02128(); /* move w01 to w03 header*/
          SW02S28(); /* add page to temp storage*/
          set SW02W03 empty; /* initialize w03*/
          SW02W03.SW02W3IX = 1; /* w03 index*/
          SW02W00.SW02WPFF = "Y"; /* page full flag (8 lines)*/
        end

        SW02S18(); /* fetch 'nd' dstloc.vrlitm01*/

      end

      SW02S19(); /* select 'cd' dstloc.vrlitm01*/
    end

    SW02W00.SW02WIDX = SW02W00.SW02WIDX + 1; /* increment size index*/

  end

   /* ----------------------------------------------------------*/
   /* add totals to the full page already written to the queue*/
   /* ----------------------------------------------------------*/

  if (SW02W00.SW02WPFF == "Y") /* fill the last page*/
    SW02S25(); /* read temp storage*/
    SW02129(); /* move w05 to w03 totals*/
    SW02S29(); /* update temp storage with totals*/
  else
    /* -------------------------------------------------------*/
     /* add any partially formatted last page to the queue*/
    /* -------------------------------------------------------*/

    if (SW02W03.SW02W3IX > 1)
      SW02128(); /* move w01 to w03 header*/
      SW02129(); /* move w05 to w03 totals*/
      SW02S28(); /* add page to temp storage*/
    end
  end
end // end SW02120

// get size descriptions - sy1131
Function SW02126()
   /* ------------------------------------------------------------*/
   /* translate size id to size description for display*/
   /* ------------------------------------------------------------*/

  set SYPREC empty;

  SW02W00.SW02WTFL = "N"; /* init translate flag*/
  SYPREC.SYPFC = "IE"; /* internal to external translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate not compressed format*/

  SYPREC.XGPCD = SW02W01.XGPCD;
  SYPREC.SY1STNBR = SW02W01.SY1STNBR;
  SYPREC.SY2CLRID = SW02W01.SY2CLRID;
  SYPREC.XDMCD = SW02W01.XDMCD;
  SYPREC.XQACD = SW02W01.XQACD;

  SYPREC.SY5SZID[1] = SW02W00.SW02WIDX; /* size code*/

   /* ------------------------------------------------------------*/
    /* This routine will move each xlated size description to w/s*/
   /* ------------------------------------------------------------*/

  SW02S06(); /* convert sizes*/

  if (SYPREC.SYPSZRC[1] != 0) /* good size return code*/
    SYPREC.SY4IDDSC[1] = "*****";
  end

end // end SW02126

// move product to w03 temp stor
Function SW02128()
   /* ------------------------------------------------------*/
   /* load product data into w/s*/
   /* ------------------------------------------------------*/

   /* po data*/

  SW02W03.PC3PONBR = SW02W01.PC3PONBR; /* po nbr*/
  SW02W03.SWVWPOID = SW02W01.SWVWPOID; /* po id*/
  SW02W03.PC4ORTYP = SW02W01.PC4ORTYP; /* po type*/
  SW02W03.SW02WSTA = SW02W01.SW02WSTA; /* sas altert*/

   /* product data*/

  SW02W03.XGPCD = SW02W01.XGPCD;
  SW02W03.SY1STNBR = SW02W01.SY1STNBR;
  SW02W03.SY2CLRID = SW02W01.SY2CLRID;
  SW02W03.XDMCD = SW02W01.XDMCD;
  SW02W03.SY1SSTNM = SW02W01.SY1SSTNM;
  SW02W03.SY2CLRAB = SW02W01.SY2CLRAB;
  SW02W03.XQACD = SW02W01.XQACD;
  SW02W03.XLCCD = SW02W01.XLCCD;
  SW02W03.PC2INSEG = SW02W01.PC2INSEG;
  SW02W03.XEGCD = SW02W01.XEGCD;
  SW02W03.XPGCD = SW02W01.XPGCD;
  SW02W03.XUMCD = SW02W01.XUMCD;
  SW02W03.XOWCD = SW02W01.XOWCD;
  SW02W03.XSLCD = SW02W01.XSLCD;


end // end SW02128
// move totals to w03 temp storag
Function SW02129()
   /* ------------------------------------------------------------*/
   /* write to total line to temp storage*/
   /* ------------------------------------------------------------*/

  SW02W03.SW02WTTF = "Y"; /* total  flag*/
  SW02W03.SW02WPLT = SW02W05.SW02WPLT; /* shipped total*/
  SW02W03.SW02WRCT = SW02W05.SW02WRCT; /* received total*/
  SW02W03.SW02WDFT = SW02W05.SW02WDFT; /* diff total*/
  SW02W03.SW02WUXT = SW02W05.SW02WUXT; /* unexpect qty total*/
  SW02W03.SW02WUPT = SW02W05.SW02WUPT; /* unprt qty total*/

end // end SW02129

// Format and converse the map
Function SW02200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW02W00.SW02WSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW02W00.SW02WSWF == "Y") /* Map must be formatted*/
      SW02210(); /* Format the data on the map*/
    end

  end

  if (SW02W00.TA5TSQIX > 0)
    set SW02M001.SW02MPAG skip;
    SW02M001.XXXTSPAG = SW02W00.XXXTSPAG; /* current page*/
    set SW02M001.SW02MOF skip;
    SW02M001.TA5TSQIX = SW02W00.TA5TSQIX; /* total pages*/
  else
    set SW02M001.SW02MPAG initialAttributes; /* dark*/
    set SW02M001.SW02MOF initialAttributes; /* dark*/
  end

  SW02M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW02M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW02M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW02M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW02M001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SW02M001 alarm; /* Indicate sound alarm*/

  end

  converse SW02M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;
  COMMAREA.CAMSG = " "; /* commarea Message*/

  COMMAREA.CATOAP = SW02M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW02M001.CAITEM; /* Application data*/


end // end SW02200

// Format m001 display data
Function SW02210()

   /* ------------------------------------------------------------*/
   /* init map SW02m001*/
   /* ------------------------------------------------------------*/

  set SW02M001 initial; /* m001 input/ouput area*/

  SW02W00.SW02WSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format SW02m001 using key data*/
   /* ------------------------------------------------------------*/

  SW02211(); /* move w01 heading to map*/

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (SW02W01.CACHGFL != "Y")
    return;
  end

  SW02S25(); /* read temp storage*/

   /* ------------------------------------------------------------*/
    /* move key data to map from w03 temp storage*/
   /* ------------------------------------------------------------*/

  SW02212(); /* move heading to map*/

   /* ------------------------------------------------------------*/
    /* move sizes to map*/
   /* ------------------------------------------------------------*/

  SW02W03.SW02W3IX = 1; /* init index*/
  while (SW02W03.SW02W3IX <= 8)

    SW02M001.SL8WONBR[SW02W3IX] = SW02W03.SL8WONBR[SW02W3IX]; /* W/O*/
    SW02M001.SL8FRLC[SW02W3IX] = SW02W03.SL8FRLC[SW02W3IX]; /* loc*/
    SW02M001.SW02M-TSOCRTNB[SW02W3IX] = 0;
    SW02M001.SW02M-TSOCRTNB[SW02W3IX] = SW02M001.SW02M-TSOCRTNB[SW02W3IX] +   SW02W03.TSOCRTNB[SW02W3IX];
    SW02M001.PKDNCSQN[SW02W3IX] = SW02W03.PKDNCSQN[SW02W3IX]; /* ctn seq*/
    SW02M001.SY4IDDSC[SW02W3IX] = SW02W03.SY4IDDSC[SW02W3IX]; /* size*/
    SW02M001.TSOSHPQT[SW02W3IX] = SW02W03.TSOSHPQT[SW02W3IX]; /* ship qty*/
    SW02M001.SL2RCVD[SW02W3IX] = SW02W03.SL2RCVD[SW02W3IX]; /* rcvd qty*/
    SW02M001.SW02MDIF[SW02W3IX] = SW02W03.SW02WDIF[SW02W3IX]; /* diff qty*/
    SW02M001.SW02MUXQ[SW02W3IX] = SW02W03.SW02WUXQ[SW02W3IX]; /* unex qty*/
    SW02M001.SL9WOQTY[SW02W3IX] = SW02W03.SL9WOQTY[SW02W3IX]; /* miss qty*/

    SW02W03.SW02W3IX = SW02W03.SW02W3IX + 1;

  end

  if (SW02W03.SW02WTTF == "Y") /* print total line*/
    set SW02M001.SW02MTOT skip; /* literal 'total'*/
    SW02M001.SW02MPLT = SW02W03.SW02WPLT; /* total ship qty*/
    SW02M001.SW02MRCT = SW02W03.SW02WRCT; /* total rcvd qty*/
    SW02M001.SW02MDFT = SW02W03.SW02WDFT; /* total diff qty*/
    SW02M001.SW02MUXT = SW02W03.SW02WUXT; /* total unex qty*/
    SW02M001.SW02MUPT = SW02W03.SW02WUPT; /* total unprt qty*/
  else
    set SW02M001.SW02MTOT initialAttributes; /* literal 'total'*/
  end

end // end SW02210

// Format m001 with w01 data
Function SW02211()
   /* ------------------------------------------------------------*/
   /* Format SW02m001 using key data*/
   /* ------------------------------------------------------------*/

  SW02M001.XWHCD = SW02W01.XWHCD; /* warehouse code*/
  SW02M001.XWHABRV = SW02W01.XWHABRV; /* warehous abrv desc*/
  SW02M001.TSHCNTNR = SW02W01.TSHCNTNR; /* container*/
  SW02M001.XARCD = SW02W01.XARCD; /* area*/
  SW02M001.SL4ZONE = SW02W01.SL4ZONE; /* zone*/
  SW02M001.YRSCD = SW02W01.YRSCD; /* rcv status*/
  SW02M001.YRSABRV = SW02W01.YRSABRV; /* rcv abrv*/
  SW02M001.XITCD = SW02W01.XITCD; /* rcv type*/
  SW02M001.SL1RCRNO = SW02W01.SL1RCRNO; /* rcv report*/

  if (SW02W01.SL1CRTDT > 0)
    SW02W00.SW02WDAT = SW02W01.SL1CRTDT; /* date ccyymmdd*/
    SW02W00.SW02WFYY = SW02W00.SW02WDYY; /* year*/
    SW02W00.SW02WFMM = SW02W00.SW02WDMM; /* month*/
    SW02W00.SW02WFDS = "-"; /* dash*/
    SW02W00.SW02WFDH = "-"; /* dash*/
    SW02W00.SW02WFDD = SW02W00.SW02WDDD; /* day*/
    SW02M001.SW02MRDT = SW02W00.SW02WFDT; /* RCV DATE*/
  end

  if (SW02W01.ZZZCHGDT > 0)
    SW02W00.SW02WDAT = SW02W01.ZZZCHGDT; /* datee ccyymmdd*/
    SW02W00.SW02WFYY = SW02W00.SW02WDYY; /* year*/
    SW02W00.SW02WFMM = SW02W00.SW02WDMM; /* month*/
    SW02W00.SW02WFDS = "-"; /* dash*/
    SW02W00.SW02WFDH = "-"; /* dash*/
    SW02W00.SW02WFDD = SW02W00.SW02WDDD; /* day*/
    SW02M001.SW02MCDT = SW02W00.SW02WFDT; /* update date*/
  end

  SW02M001.XURUSRNM = SW02W01.XURUSRNM; /* user name*/
  SW02M001.SW02MSTA = SW02W01.SW02WSTA; /* sas alert*/

   /* ------------------------------------------------------------*/
   /* move po nbr/id/type*/
   /* ------------------------------------------------------------*/

  SW02M001.PC3PONBR = SW02W01.PC3PONBR;
  SW02M001.SWVWPOID = SW02W01.SWVWPOID;
  SW02M001.PC4ORTYP = SW02W01.PC4ORTYP; /* po id*/

   /* move product to map*/

  SW02M001.XGPCD = SW02W01.XGPCD; /* gpc code*/
  SW02M001.SY1STNBR = SW02W01.SY1STNBR; /* style nbr*/
  SW02M001.SY2CLRID = SW02W01.SY2CLRID; /* color id*/
  SW02M001.XDMCD = SW02W01.XDMCD; /* dimension code*/
  SW02M001.SY1SSTNM = SW02W01.SY1SSTNM; /* style description*/
  SW02M001.SY2CLRAB = SW02W01.SY2CLRAB; /* color id description*/
  SW02M001.XQACD = SW02W01.XQACD; /* quality code*/
  SW02M001.XLCCD = SW02W01.XLCCD; /* L/C code*/
  SW02M001.PC2INSEG = SW02W01.PC2INSEG; /* iseg code*/
  SW02M001.XEGCD = SW02W01.XEGCD; /* edif code*/
  SW02M001.XPGCD = SW02W01.XPGCD; /* package code*/
  SW02M001.XUMCD = SW02W01.XUMCD; /* unit of measure*/
  SW02M001.XOWCD = SW02W01.XOWCD; /* owner group code*/
  SW02M001.XSLCD = SW02W01.XSLCD; /* class code*/
end // end SW02211

// Format m001 header data
Function SW02212()
   /* ------------------------------------------------------------*/
   /* move po nbr/id/type*/
   /* ------------------------------------------------------------*/

  SW02M001.PC3PONBR = SW02W03.PC3PONBR;
  SW02W01.PC3PONBR = SW02W03.PC3PONBR;
  SW02M001.SWVWPOID = SW02W03.SWVWPOID;
  SW02W01.SWVWPOID = SW02W03.SWVWPOID;
  SW02M001.PC4ORTYP = SW02W03.PC4ORTYP; /* po id*/
  SW02W01.PC4ORTYP = SW02W03.PC4ORTYP; /* po id*/
  SW02M001.SW02MSTA = SW02W03.SW02WSTA; /* sas*/
  SW02W01.SW02WSTA = SW02W03.SW02WSTA; /* sas*/

   /* move product to map*/

  SW02M001.XGPCD = SW02W03.XGPCD; /* gpc code*/
  SW02W01.XGPCD = SW02W03.XGPCD; /* gpc code*/
  SW02M001.SY1STNBR = SW02W03.SY1STNBR; /* style nbr*/
  SW02W01.SY1STNBR = SW02W03.SY1STNBR; /* style nbr*/
  SW02M001.SY2CLRID = SW02W03.SY2CLRID; /* color id*/
  SW02W01.SY2CLRID = SW02W03.SY2CLRID; /* color id*/
  SW02M001.XDMCD = SW02W03.XDMCD; /* dimension code*/
  SW02W01.XDMCD = SW02W03.XDMCD; /* dimension code*/
  SW02M001.SY1SSTNM = SW02W03.SY1SSTNM; /* style description*/
  SW02W01.SY1SSTNM = SW02W03.SY1SSTNM; /* style description*/
  SW02M001.SY2CLRAB = SW02W03.SY2CLRAB; /* color id description*/
  SW02W01.SY2CLRAB = SW02W03.SY2CLRAB; /* color id description*/
  SW02M001.XQACD = SW02W03.XQACD; /* quality code*/
  SW02W01.XQACD = SW02W03.XQACD; /* quality code*/
  SW02M001.XLCCD = SW02W03.XLCCD; /* L/C code*/
  SW02W01.XLCCD = SW02W03.XLCCD; /* L/C code*/
  SW02M001.PC2INSEG = SW02W03.PC2INSEG; /* iseg code*/
  SW02W01.PC2INSEG = SW02W03.PC2INSEG; /* iseg code*/
  SW02M001.XEGCD = SW02W03.XEGCD; /* edif code*/
  SW02W01.XEGCD = SW02W03.XEGCD; /* edif code*/
  SW02M001.XPGCD = SW02W03.XPGCD; /* package code*/
  SW02W01.XPGCD = SW02W03.XPGCD; /* package code*/
  SW02M001.XUMCD = SW02W03.XUMCD; /* unit of measure*/
  SW02W01.XUMCD = SW02W03.XUMCD; /* unit of measure*/
  SW02M001.XOWCD = SW02W03.XOWCD; /* owner group code*/
  SW02W01.XOWCD = SW02W03.XOWCD; /* owner group code*/
  SW02M001.XSLCD = SW02W03.XSLCD; /* class code*/
  SW02W01.XSLCD = SW02W03.XSLCD; /* class code*/
end // end SW02212

// Check attention identifier
Function SW02300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    SW02W00.SW02WSWR = "N"; /* request for data*/
    SW02W00.SW02WSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW02M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW02S01(); /* Purge temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SW02M001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(259); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    COMMAREA.XWHCD = SW02M001.XWHCD;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW02M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* Application find code*/
    end

    SW02S01(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* pf6  was not pressed*/
   && converseVar.eventKey not pf7   /* pf7  was not pressed*/
   && converseVar.eventKey not pf8   /* pf8  was not pressed*/
   && converseVar.eventKey not pf15) /* PF15 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW02300

// Reset highlighted fields
Function SW02400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW02M001.XWHCD initialAttributes; /* warehouse*/
  set SW02M001.TSHCNTNR initialAttributes; /* container*/
  set SW02M001.PC3PONBR initialAttributes; /* PO nbr*/
  set SW02M001.SWVWPOID initialAttributes; /* PO ID*/
  set SW02M001.PC4ORTYP initialAttributes; /* PO Type*/
  set SW02M001.XGPCD initialAttributes; /* GPC code*/
  set SW02M001.SY1STNBR initialAttributes; /* style nbr*/
  set SW02M001.SY2CLRID initialAttributes; /* color id*/
  set SW02M001.XDMCD initialAttributes; /* dimension code*/
  set SW02M001.XQACD initialAttributes; /* quality code*/
  set SW02M001.XLCCD initialAttributes; /* L/C code*/
  set SW02M001.PC2INSEG initialAttributes; /* iseg code*/
  set SW02M001.XEGCD initialAttributes; /* edif code*/
  set SW02M001.XPGCD initialAttributes; /* package code*/
  set SW02M001.XUMCD initialAttributes; /* unit of measure*/
  set SW02M001.XOWCD initialAttributes; /* owner group code*/
  set SW02M001.XSLCD initialAttributes; /* class code*/

  set SW02M001.CATOAP initialAttributes;
  set SW02M001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XWHCD == "?" /* warehouse list req*/
   || SW02M001.XGPCD == "?" /* or gen product code*/
   || SW02M001.XDMCD == "?" /* or dimension list req*/
   || SW02M001.XQACD == "?" /* or quality code req*/
   || SW02M001.XEGCD == "?" /* or edif list req*/
   || SW02M001.XPGCD == "?" /* or package list req*/
   || SW02M001.XUMCD == "?" /* or unit of measure list*/
   || SW02M001.XOWCD == "?" /* or owner group code*/
   || SW02M001.XSLCD == "?") /* or class code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XWHCD == "?") /* warehouse requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW02M001.XWHCD = SW02W01.XWHCD; /* Restore prior code*/
    else
      SW02M001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW02M001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];
      SW02W01.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW02W01.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];

    end

    set SW02M001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of GPC codes*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XGPCD == "?") /* GPC code list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " GPC CODES "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the GPC code list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW02M001.XGPCD = SW02W01.XGPCD; /* Restore prior code*/
    else
      SW02W01.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
      SW02M001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/

    end

    set SW02M001.XGPCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XDMCD == "?") /* dimension list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIMENSION CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the dimension list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW02M001.XDMCD = SW02W01.XDMCD; /* Restore prior code*/
    else
      SW02W01.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      SW02M001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set SW02M001.XDMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of quality codes*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XQACD == "?") /* quality list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " QUALITY CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the quality list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW02M001.XQACD = SW02W01.XQACD; /* Restore prior code*/
    else
      SW02W01.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
      SW02M001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/

    end

    set SW02M001.XQACD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of engineering difference*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XEGCD == "?") /* eng. dif list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "ENGINEERING CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXEG01(); /* Display the edf list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW02M001.XEGCD = SW02W01.XEGCD; /* Restore prior code*/
    else
      SW02W01.XEGCD = XEGTBL.XEGCD[XX0XWPIX]; /* Selected code*/
      SW02M001.XEGCD = XEGTBL.XEGCD[XX0XWPIX]; /* Selected code*/

    end

    set SW02M001.XEGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of package codes.*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XPGCD == "?") /* Package list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PACKAGE TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPG01(); /* Display the package list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW02M001.XPGCD = SW02W01.XPGCD; /* Restore prior code*/
    else
      SW02W01.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
      SW02M001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
    end

    set SW02M001.XPGCD cursor; /* Establish cursor position*/


  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of unit of measure codes*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XUMCD == "?") /* Unit of measure requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "UNIT OF MEASURE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXUM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW02M001.XUMCD = SW02W01.XUMCD; /* Restore prior code*/
    else
      SW02M001.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
      SW02W01.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/

    end

    set SW02M001.XUMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of owner group codes.*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XOWCD == "?") /* Owner group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "OWNER GROUP CODES"; /* Heading*/
    XX0XW02.XWHCD = SW02M001.XWHCD;

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOW01(); /* Display the owner group list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW02M001.XOWCD = SW02W01.XOWCD; /* Restore prior code*/
    else
      SW02W01.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
      SW02M001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/

    end

    set SW02M001.XOWCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of stock locate class codes*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XSLCD == "?") /* Owner group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "S.L. CLASS CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSL01(); /* Display the owner group list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW02M001.XSLCD = SW02W01.XSLCD; /* Restore prior code*/
    else
      SW02W01.XSLCD = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/
      SW02M001.XSLCD = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/

    end

    set SW02M001.XSLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/
  converseLib.validationFailed(264); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW02400

// Verify the entered data
Function SW02500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW02M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* if requested screen print(pf6)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* request to print screen data(pf6)*/

    SW02505(); /* check modified  data*/

    if (converseVar.validationMsgNum == 0)
      if (SW02W01.CACHGFL != "Y") /* if no data has been displayed*/
        converseLib.validationFailed(287); /* print function invalid*/
        SLWREC.XXXLOCID = "500";
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* request to scroll*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* scroll forward*/
   || converseVar.eventKey is pf8) /* scroll backward*/

    SW02505(); /* check modified  data*/

    if (converseVar.validationMsgNum == 0) /* no errors*/
      SW02520(); /* scroll*/
    end

  end

   /* ------------------------------------------------------------*/
   /* request to display reconcilation detail*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf16) /* request to display sw02*/

    SW02505(); /* check modified  data*/

  end
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    SW02510(); /* verify if data has been modified*/

    SW02530(); /* validate entry fields*/

    if (SW02W00.SW02WMOD == "Y") /* data has been modified*/
      if (converseVar.validationMsgNum == 0)
        SW02W00.SW02WSWR = "Y"; /* request data request*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW02500

// check modifiable fields
Function SW02505()

   /* -----------------------------------------------------*/
   /* verify modifiable key fields*/
   /* -----------------------------------------------------*/

  if (SW02W01.XSLCD != SW02M001.XSLCD)
    set SW02M001.XSLCD cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.XUMCD != SW02M001.XUMCD)
    set SW02M001.XUMCD cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.XOWCD != SW02M001.XOWCD)
    set SW02M001.XOWCD cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.XPGCD != SW02M001.XPGCD)
    set SW02M001.XPGCD cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.XEGCD != SW02M001.XEGCD)
    set SW02M001.XEGCD cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.PC2INSEG != SW02M001.PC2INSEG)
    set SW02M001.PC2INSEG cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.XQACD != SW02M001.XQACD)
    set SW02M001.XQACD cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.XDMCD != SW02M001.XDMCD)
    set SW02M001.XDMCD cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.SY2CLRID != SW02M001.SY2CLRID) /* color id*/
    set SW02M001.SY2CLRID cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.SY1STNBR != SW02M001.SY1STNBR)
    set SW02M001.SY1STNBR cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.XGPCD != SW02M001.XGPCD)
    set SW02M001.XGPCD cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.PC4ORTYP != SW02M001.PC4ORTYP)
    set SW02M001.PC4ORTYP cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.SWVWPOID != SW02M001.SWVWPOID)
    set SW02M001.SWVWPOID cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.PC3PONBR != SW02M001.PC3PONBR)
    set SW02M001.PC3PONBR cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.TSHCNTNR != SW02M001.TSHCNTNR)
    set SW02M001.TSHCNTNR cursor, bold;
    converseLib.validationFailed(265);
  end

  if (SW02W01.XWHCD != SW02M001.XWHCD)
    set SW02M001.XWHCD cursor, bold;
    converseLib.validationFailed(265);
  end

  if (converseVar.validationMsgNum == 265)
    SLWREC.XXXLOCID = "505";
  end


end // end SW02505

// verify data has been modified
Function SW02510()
   /* -----------------------------------------------------*/
   /* check modifiable fields*/
   /* -----------------------------------------------------*/

  SW02W00.SW02WMOD = "N";
  SW02W00.SW02WPRF = "N"; /* request product*/

  if (SW02W01.XWHCD != SW02M001.XWHCD /* warehouse*/
   || SW02W01.TSHCNTNR != SW02M001.TSHCNTNR) /* container*/
    SW02W00.SW02WMOD = "Y";
  end

  if (SW02W01.PC3PONBR != SW02M001.PC3PONBR /* po nbr*/
   || SW02W01.SWVWPOID != SW02M001.SWVWPOID /* po id*/
   || SW02W01.PC4ORTYP != SW02M001.PC4ORTYP /* po type*/
   || SW02W01.XGPCD != SW02M001.XGPCD       /* GPC code*/
   || SW02W01.SY1STNBR != SW02M001.SY1STNBR /* style nbr*/
   || SW02W01.SY2CLRID != SW02M001.SY2CLRID /* color id*/
   || SW02W01.XDMCD != SW02M001.XDMCD       /* dimension code*/
   || SW02W01.XQACD != SW02M001.XQACD       /* quality code*/
   || SW02W01.PC2INSEG != SW02M001.PC2INSEG /* iseg code*/
   || SW02W01.XEGCD != SW02M001.XEGCD       /* edif code*/
   || SW02W01.XPGCD != SW02M001.XPGCD       /* package code*/
   || SW02W01.XOWCD != SW02M001.XOWCD       /* owner group code*/
   || SW02W01.XUMCD != SW02M001.XUMCD       /* unit of measure*/
   || SW02W01.XSLCD != SW02M001.XSLCD)      /* class code*/
    SW02W00.SW02WMOD = "Y";
    SW02W00.SW02WPRF = "Y"; /* product entered by user*/
  end


end // end SW02510

// verify data for scrolling
Function SW02520()
   /* --------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* scroll back request*/
   && SW02W00.XXXTSPAG < 2)       /* no previous pages*/
    SLWREC.XXXLOCID = "520"; /* application module*/
    converseLib.validationFailed(7); /* no previous pages to display*/
  end

   /* --------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* scroll forward request*/
   && SW02W00.XXXTSPAG >= SW02W00.TA5TSQIX) /* no more pages*/
    SLWREC.XXXLOCID = "520"; /* application module*/
    converseLib.validationFailed(8); /* no more pages to display*/
  end

end // end SW02520

// Verify the entered data
Function SW02530()
   /* ------------------------------------------------------------*/
   /* Edit the required fields starting at the bottom of the*/
   /* map.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* sl class code*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XSLCD != SW02W01.XSLCD) /* class code*/
    if (SW02M001.XSLCD in XSLTBL.XSLCD)
      if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* next sentence*/
      else
        set SW02M001.XSLCD cursor, bold;
        converseLib.validationFailed(10); /* inactive field*/
        SW02M001.XXXLOCID = "530";
      end
    else
      set SW02M001.XSLCD cursor, bold;
      converseLib.validationFailed(360); /* invalid class code*/
      SW02M001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the owner group code*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XOWCD != SW02W01.XOWCD) /* Unit of measure entered*/
    set XOWREC empty;
    XOWREC.XWHCD = SW02M001.XWHCD;
    XOWREC.XOWCD = SW02M001.XOWCD;
    if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* next sentence*/
      else
        set SW02M001.XOWCD cursor, bold;
        converseLib.validationFailed(10); /* inactive field*/
        SW02M001.XXXLOCID = "530";
      end
    else
      set SW02M001.XOWCD cursor, bold;
      converseLib.validationFailed(361); /* invalid owner group code*/
      SW02M001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit unit of measure*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XUMCD != SW02W01.XUMCD) /* Unit of measure entered*/
    if (SW02M001.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW02M001.XUMCD cursor, bold;
        converseLib.validationFailed(10); /* inactive field*/
        SW02M001.XXXLOCID = "530";
      end
    else
      set SW02M001.XUMCD cursor, bold;
      converseLib.validationFailed(362); /* invalid unit of measure*/
      SW02M001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the package type*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XPGCD != SW02W01.XPGCD) /* package type code*/
    if (SW02M001.XPGCD in XPGTBL.XPGCD)
      if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW02M001.XPGCD cursor, bold;
        converseLib.validationFailed(10); /* inactive*/
        SW02M001.XXXLOCID = "530";
      end
    else
      set SW02M001.XPGCD cursor, bold;
      converseLib.validationFailed(363); /* invalid package type code*/
      SW02M001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the edf*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XEGCD != SW02W01.XEGCD) /* edf code*/
    if (SW02M001.XEGCD in XEGTBL.XEGCD)
      if (XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW02M001.XEGCD cursor, bold;
        converseLib.validationFailed(10); /* inactive field*/
        SW02M001.XXXLOCID = "530";
      end
    else
      set SW02M001.XEGCD cursor, bold;
      converseLib.validationFailed(364); /* invalid engineering difference code*/
      SW02M001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate iseg code*/
   /* ------------------------------------------------------------*/

  if (SW02M001.PC2INSEG != SW02W01.PC2INSEG) /* seg code*/
    set PC2REC empty; /* Clear row storage area*/
    PC2REC.XGPCD = SW02M001.XGPCD;
    PC2REC.PC2INSEG = SW02M001.PC2INSEG;

    SW02S20(); /* select 's ' dprodc.vprdcu01*/

    if (SQLCA.VAGen_SQLCODE != 0) /* normal return*/
      set SW02M001.PC2INSEG cursor, bold;
      converseLib.validationFailed(365); /* invalid customer segment code*/
      SW02M001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the quality code*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XQACD != SW02W01.XQACD) /* quality code*/
    if (SW02M001.XQACD in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* next sentence*/
      else
        set SW02M001.XQACD cursor, bold;
        converseLib.validationFailed(10); /* inactive field*/
        SW02M001.XXXLOCID = "530";
      end
    else
      set SW02M001.XQACD cursor, bold;
      converseLib.validationFailed(366); /* invalid quality code*/
      SW02M001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the dimension code*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XDMCD != SW02W01.XDMCD) /* Unit of measure entered*/
    if (SW02M001.XDMCD in XDMTBL.XDMCD)
      if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW02M001.XDMCD cursor, bold;
        converseLib.validationFailed(10); /* inactive field*/
        SW02M001.XXXLOCID = "530";
      end
    else
      set SW02M001.XDMCD cursor, bold;
      converseLib.validationFailed(367); /* inactive field*/
      SW02M001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the product style color and dimension.*/
   /* ------------------------------------------------------------*/

  if (SW02M001.SY1STNBR != SW02W01.SY1STNBR
   || SW02M001.SY2CLRID != SW02W01.SY2CLRID)
    if (SW02M001.SY1STNBR == " " /* Style not entered*/
     || SW02M001.SY2CLRID == " ") /* color not entered*/
      if (SW02M001.SY2CLRID == " ") /* color not entered*/
        converseLib.validationFailed(9); /* required field*/
        SW02M001.XXXLOCID = "530";
        set SW02M001.SY2CLRID cursor, bold;
      end
      if (SW02M001.SY1STNBR == " ") /* Style not entered*/
        converseLib.validationFailed(9); /* required field*/
        SW02M001.XXXLOCID = "530";
        set SW02M001.SY1STNBR cursor, bold;
      end
    else

      set SYCREC empty;

      SYCREC.XGPCD = SW02M001.XGPCD;
      SYCREC.SY1STNBR = SW02M001.SY1STNBR;
      SYCREC.SY2CLRID = SW02M001.SY2CLRID;
      SYCREC.XDMCD = SW02M001.XDMCD;

      SW02S05(); /* ; validate dprod.vcolor02*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(56); /* Style/color is missing or invalid*/
        SW02M001.XXXLOCID = "530";
        set SW02M001.SY1STNBR cursor, bold;
        set SW02M001.SY2CLRID bold;
        set SW02M001.XDMCD bold;
        SW02M001.SY1SSTNM = " ";
        SW02M001.SY2CLRAB = " ";
      else
        SW02W00.SW02WPRF = "Y"; /* product change flag*/
        SW02M001.SY1SSTNM = SYCREC.SY1SSTNM;
        SW02M001.SY2CLRAB = SYCREC.SY2CLRAB;
      end
    end
  else
    SW02M001.SY1SSTNM = SW02W01.SY1SSTNM;
    SW02M001.SY2CLRAB = SW02W01.SY2CLRAB;
  end

   /* ------------------------------------------------------------*/
   /* Edit the GPC code*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XGPCD != SW02W01.XGPCD) /* GPC code*/
    if (SW02M001.XGPCD in XGPTBL.XGPCD)
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW02M001.XGPCD cursor, bold;
        converseLib.validationFailed(10); /* inactive field*/
        SW02M001.XXXLOCID = "530";
      end
    else
      set SW02M001.XGPCD cursor, bold;
      converseLib.validationFailed(11); /* inactive field*/
      SW02M001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate po number/id/type using xssls10*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XGPCD == SW02W01.XGPCD       /* gpc code*/
   && SW02M001.PC3PONBR == SW02W01.PC3PONBR /* po number*/
   && SW02M001.SWVWPOID == SW02W01.SWVWPOID /* po id*/
   && SW02M001.PC4ORTYP == SW02W01.PC4ORTYP) /* po type*/
    /* next sentence*/
  else
    SW02531();
  end

   /* ------------------------------------------------------------*/
   /* validate whse/container combination*/
   /* ------------------------------------------------------------*/

  if (SW02M001.TSHCNTNR == " ")
    set SW02M001.TSHCNTNR cursor, bold;
    converseLib.validationFailed(9); /* inactive field*/
    SW02M001.XXXLOCID = "530";
  else

    set SL1REC empty; /* Clear row storage area*/
    SL1REC.XWHCD = SW02M001.XWHCD; /* warehouse*/
    SL1REC.TS3CNTNR = SW02M001.TSHCNTNR; /* container*/

    SW02535(); /* select 's ' dstloc.vrlhdr01*/

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      set SW02M001.TSHCNTNR cursor, bold; /* hilite*/
      converseLib.validationFailed(85); /* container not on file*/
      SLWREC.XXXLOCID = "530";
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* normal*/

        if (SL1REC.YRSCD == "02"
         || SL1REC.YRSCD == "03"
         || SL1REC.YRSCD == "04")
          /* next sentence;*/
        else

          set SW02M001.XWHCD cursor;
          converseLib.validationFailed(317); /* receiving status invalid*/
          SLWREC.XXXLOCID = "530";
        end
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Edit whse code*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XWHCD == "  ")
    set SW02M001.XWHCD cursor, bold;
    converseLib.validationFailed(9); /* required field*/
    SLWREC.XXXLOCID = "530";
  else
    if (SW02M001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SW02M001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      else
        SW02M001.XWHABRV = " ";
        set SW02M001.XWHCD cursor, bold;
        converseLib.validationFailed(10); /* inactive*/
        SLWREC.XXXLOCID = "530";
      end
    else
      SW02M001.XWHABRV = " ";
      set SW02M001.XWHCD cursor, bold;
      converseLib.validationFailed(373); /* invalid warehouse code entered*/
      SLWREC.XXXLOCID = "530";
    end
  end

  if (converseVar.validationMsgNum == 0
   && SW02W00.SW02WPRF == "Y")
    if (SW02M001.SY2CLRID == " ") /* color not entered*/
      converseLib.validationFailed(9); /* required field*/
      SW02M001.XXXLOCID = "530";
      set SW02M001.SY2CLRID cursor, bold;
    end
    if (SW02M001.SY1STNBR == " ") /* Style not entered*/
      converseLib.validationFailed(9); /* required field*/
      SW02M001.XXXLOCID = "530";
      set SW02M001.SY1STNBR cursor, bold;
    end
  end

end // end SW02530

// call xssls10 for po id/type
Function SW02531()
   /* ------------------------------------------------------------*/
   /* validate footwear*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XGPCD == "02") /* footwear*/
    if (SW02M001.PC3PONBR != 0)
      SW02532(); /* use 'id' function*/
    else
      if (SW02M001.SWVWPOID != " " /* po id*/
       || SW02M001.PC4ORTYP != " ") /* po type*/
        SW02533(); /* use 'no' function*/
      else
        converseLib.validationFailed(268); /* enter po id/type or po no*/
        SLWREC.XXXLOCID = "531"; /* appl module*/
        set SW02M001.PC4ORTYP bold; /* po type*/
        set SW02M001.SWVWPOID bold; /* po id*/
        set SW02M001.PC3PONBR cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate apparel*/
   /* ------------------------------------------------------------*/

  if (SW02M001.XGPCD == "03") /* apparel*/
    if (SW02M001.PC3PONBR != 0)
      SW02532(); /* use 'id' function*/
    else
      set SW02M001.PC3PONBR cursor, bold;
      converseLib.validationFailed(9); /* enter po number*/
      SLWREC.XXXLOCID = "531"; /* appl module*/
    end
  end


end // end SW02531

// call xssls10 for po number
Function SW02532()
   /* ------------------------------------------------------------*/
   /* move data to swvrec*/
   /* ------------------------------------------------------------*/

  set SWVREC empty; /* initialize swvrec*/
  SWVREC.XGPCD = SW02M001.XGPCD; /* gpc code*/
  SWVREC.PC3PONBR = SW02M001.PC3PONBR; /* po number*/
  SWVREC.SWVWFNC = "ID"; /* function*/

  XSSLS10(); /* obtain po id*/

   /* ------------------------------------------------------------*/
   /* If successful return code*/
   /* ------------------------------------------------------------*/

  if (SWVREC.SWVWRTN == 0) /* Call successful*/
    SW02M001.SWVWPOID = SWVREC.SWVWPOID; /* po id*/
    SW02M001.PC4ORTYP = SWVREC.PC4ORTYP; /* po type*/
  else
    set SW02M001.PC3PONBR cursor, bold; /* hilite po number*/
    converseLib.validationFailed(272); /* invalid po number*/
    SLWREC.XXXLOCID = "532"; /* appl module*/
  end

end // end SW02532

// call xssls10 for po id/type
Function SW02533()
   /* ------------------------------------------------------------*/
   /* move data to swvrec*/
   /* ------------------------------------------------------------*/

  set SWVREC empty; /* initialize swvrec*/
  SWVREC.XGPCD = SW02M001.XGPCD; /* gpc code*/
  SWVREC.SWVWPOID = SW02M001.SWVWPOID; /* po id*/
  SWVREC.PC4ORTYP = SW02M001.PC4ORTYP; /* po type*/
  SWVREC.SWVWFNC = "NO"; /* function*/

  XSSLS10(); /* obtain po id*/

   /* ------------------------------------------------------------*/
   /* If successful return code*/
   /* ------------------------------------------------------------*/

  if (SWVREC.SWVWRTN == 0) /* Call successful*/
    SW02M001.PC3PONBR = SWVREC.PC3PONBR; /* po number*/
  else
    set SW02M001.SWVWPOID cursor, bold; /* hilite po id*/
    set SW02M001.PC4ORTYP bold; /* hilite po type*/
    converseLib.validationFailed(271); /* invalid po id/type*/
    SLWREC.XXXLOCID = "533"; /* appl module*/
  end

end // end SW02533

// select 's ' dstloc.vrlhdr01
Function SW02535()
   /* ------------------------------------------------------------*/
   /* select set from dstloc.vrlhdr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1570" ("S ", SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unq*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "536"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNQ ON DSTLOC.VRLHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW02535

// Process valid input request
Function SW02600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  SW02W00.SW02WSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* update working storage w03*/
   /* ------------------------------------------------------------*/

  SW02610(); /* move m001 to w03*/

   /* --------------------------------------------------------*/
   /* Build and submit PLAN RECONCILIATION DETAIL REPORT.*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* print report*/
    SW02620(); /* build/submit job SL4351*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Request to scroll back*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* backward*/
    SW02W00.XXXTSPAG = SW02W00.XXXTSPAG - 1; /* decrement page*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Request to scroll forward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* forward*/
    SW02W00.XXXTSPAG = SW02W00.XXXTSPAG + 1; /* increment page*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Display new request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter
   && SW02W00.SW02WSWR == "Y") /* KEY DATA MODIFIED*/
    SW02W00.SW02WMOD = "N"; /* reset MODIFIED data flag*/
    SW02W01.CACHGFL = "N"; /* reset change flag*/
    return;
  end

   /* --------------------------------------------------------*/
   /* request to transfer to Plan Reconciliation detail.*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* transfer to application sw01*/

    COMMAREA.XWHCD = SW02M001.XWHCD;
    SLWREC.TSHCNTNR = SW02M001.TSHCNTNR;
    COMMAREA.CATOAP = "SW01"; /* transfer to applicaiton*/

    SW02S01(); /* Purge temp storage*/

    XSSL001(); /* Exit to another application*/

    set SW02M001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

end // end SW02600

// move m001 to w01
Function SW02610()

   /* ------------------------------------------------------------*/
   /* move key data fields from the map (m001) to work rec (m001)*/
   /* ------------------------------------------------------------*/

  SW02W01.XWHCD = SW02M001.XWHCD;
  if (SW02W01.XWHCD in XWHTBL.XWHCD)
    SW02W01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end /* warehouse desc*/

  SW02W01.TSHCNTNR = SW02M001.TSHCNTNR;
  SW02W01.PC3PONBR = SW02M001.PC3PONBR;
  SW02W01.SWVWPOID = SW02M001.SWVWPOID;
  SW02W01.PC4ORTYP = SW02M001.PC4ORTYP;
  SW02W01.XGPCD = SW02M001.XGPCD;
  SW02W01.SY1STNBR = SW02M001.SY1STNBR;
  SW02W01.SY2CLRID = SW02M001.SY2CLRID;
  SW02W01.XDMCD = SW02M001.XDMCD;
  SW02W01.XQACD = SW02M001.XQACD;
  SW02W01.PC2INSEG = SW02M001.PC2INSEG;
  SW02W01.XEGCD = SW02M001.XEGCD;
  SW02W01.XPGCD = SW02M001.XPGCD;
  SW02W01.XUMCD = SW02M001.XUMCD;
  SW02W01.XOWCD = SW02M001.XOWCD;
  SW02W01.XSLCD = SW02M001.XSLCD;


end // end SW02610

// Process valid input request
Function SW02620()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format plan reconciliation detail parameter*/
   /* ------------------------------------------------------------*/

  set SW02W04 empty;

  SW02W04.XWHCD1 = SW02M001.XWHCD; /* warehouse code*/
  SW02W04.TSHCNTNR = SW02M001.TSHCNTNR; /* container*/
  SW02W04.XURUSRNM = SW02M001.XURUSRNM; /* user name*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW02W00.SW02WIXT = 1; /* input table*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW02T01.TARTYPE[SW02WIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW02W04.SW02WPRM; /* Parameters*/
    else
      if (SW02T01.TARTYPE[SW02WIXT] == "S") /* symbolic*/
        SW02W04.SW02WSYM = SW02T01.TARJCL[SW02WIXT];
        SW02W04.XWHCD2 = SW02M001.XWHCD; /* warehouse code*/
        TA6REC.TARJCL[TA6INDEX] = SW02W04.SW02WSYM; /* symbolic*/
      else
        if (SW02T01.TARTYPE[SW02WIXT] == "D") /* symbolic*/
          SW02W04.SW02WDAS = SW02T01.TARJCL[SW02WIXT];
          SW02W04.XWHCD3 = SW02M001.XWHCD; /* warehouse code*/
          TA6REC.TARJCL[TA6INDEX] = SW02W04.SW02WDAS; /* symbolic*/
        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = SW02T01.TARJCL[SW02WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = SW02T01.TARTYPE[SW02WIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW02T01.TARJCL[SW02WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW02W00.SW02WIXT = SW02W00.SW02WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW02W00.SW02WSWF = "Y"; /* format map switch*/

    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW02M001 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW02620

// purge temporary storage
Function SW02S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW02W03 empty; /* M001 temporary storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW02W00.TA5TSQIX = 0; /* Highest page number*/
  SW02W00.XXXTSPAG = 0; /* INIT TEMP STORAGE PAGE*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW02W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA5REC.TA5RTNCD == 0 /* and normal return code*/
     || TA5REC.TA5RTNCD == 4) /* and not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW02S01

// select 's' dstloc.vwophd01 row
Function SW02S02()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlhdr01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO1570" ("S ", SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL1REC.SL1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW02S02

// color / size description
Function SW02S05()

   /* ------------------------------------------------------------*/
   /* Select dprod.vcolor02 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW02S05

// convert sizes
Function SW02S06()

   /* ------------------------------------------------------------*/
    /* This routine will translate the size id to size desc*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOCAT[2] = "SW02S06 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSYPI1(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC > 8)
      if (SYPREC.SYPRC == +10)
        SLWREC.XXXLOCID = "S06";
        converseLib.validationFailed(12); /* <--- not on db msg*/
      else
        if (SYPREC.SYPRC == +9)
          SLWREC.XXXLOCID = "S06";
          converseLib.validationFailed(31); /* <--- try again msg*/
        else
          SLWREC.XXXLOCID = "S06";
          converseLib.validationFailed(1); /* <--- severe error msg*/
        end
        exit stack;
      end
    end
  end


end // end SW02S06

// select 's' dstloc.vrlcmp01 row
Function SW02S10()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlcmp01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4930" ("S ", SQLCA, SLKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLCMP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLKREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW02S10

// select 's1' dstloc.vrlcmp01
Function SW02S11()

   /* ------------------------------------------------------------*/
   /* select set dstloc.vrlcmp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4930" ("S1", SQLCA, SLKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 TABLE DSTLOC.VRLCMP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLCMP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW02W01.SW02WKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW02S11

// fetch 'n1' dstloc.vrlcmp01
Function SW02S12()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vrlcmp01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4930" ("N1", SQLCA, SLKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      SW02W00.SW02WEOF = "Y"; /* eof flag*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DSTLOC.VRLCMP01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLCMP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW02W01.SW02WKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW02S12

// close 'c1' dstloc.vrlcmp01
Function SW02S13()
   /* ------------------------------------------------------------*/
   /* close dstloc.vrlcmp01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4930" ("C1", SQLCA, SLKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  SLWREC.XXXLOCID = "S13";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DSTLOC.VRLCMP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLCMP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW02W01.SW02WKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW02S13

// sel 'sa' dstloc.vwophd02
Function SW02S16()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vwophd02 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "SA"; /* function*/

  set SLOREC empty;
  SLOREC.XWHCD = SL2REC.XWHCD;
  SLOREC.TSHCNTNR = SL2REC.TS3CNTNR;
  SLOREC.SWEPLLNB = SL2REC.SWEPLLNB;
  SLOREC.PKDNCSQN = SL2REC.PKDNCSQN;
  SLOREC.SY5SZID = SL2REC.SY5SZID;

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALT UNIQUE   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = SLOREC.SLOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW02S16

// sel 's5' dstloc.vrlitm01
Function SW02S17()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "SD"; /* function*/

   /* ------------------------------------------------------*/
   /* load data into sl2rec key - dstloc.vrlitm01*/
   /* ------------------------------------------------------*/

  set SL2REC empty; /* initialize sl2rec*/

  SL2REC.XWHCD = SW02W01.XWHCD; /* warehouse*/
  SL2REC.TS3CNTNR = SW02W01.TSHCNTNR; /* container*/
  SL2REC.PC3PONBR = SW02W01.PC3PONBR; /* PO nbr*/

  SL2REC.XGPCD = SW02W01.XGPCD;
  SL2REC.SY1STNBR = SW02W01.SY1STNBR;
  SL2REC.SY2CLRID = SW02W01.SY2CLRID;
  SL2REC.XDMCD = SW02W01.XDMCD;
  SL2REC.XQACD = SW02W01.XQACD;
  SL2REC.PC2INSEG = SW02W01.PC2INSEG;
  SL2REC.XEGCD = SW02W01.XEGCD;
  SL2REC.XPGCD = SW02W01.XPGCD;
  SL2REC.XUMCD = SW02W01.XUMCD;
  SL2REC.XOWCD = SW02W01.XOWCD;
  SL2REC.XSLCD = SW02W01.XSLCD;
  SL2REC.SY5SZID = SW02W00.SW02WIDX;

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET SD       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW02S17

// sel 's5' dstloc.vrlitm01
Function SW02S18()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty;
  SLSREC.SLSFNC = "ND"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH ND            ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW02S18

// sel 's5' dstloc.vrlitm01
Function SW02S19()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "CD"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CD            ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW02S19

// sel 's ' dprodc.vprdcu01 row
Function SW02S20()
   /* ------------------------------------------------------------*/
   /* Select dprodc.vprdcu01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW02S20

// read temporary storage
Function SW02S25()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of orders to display.*/
   /* ------------------------------------------------------------*/

  SW02W03.XXXTSLEN = SW02W00.XXXTSLEN; /* temp storage length*/
  TA5REC.TA5TSQIX = SW02W00.XXXTSPAG; /* page number*/
  TA5REC.TA5APPID = "SW02"; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (SW02W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && TA5REC.TA5RTNCD == 0)          /* normal return code*/

    return; /* Return to previous process*/

  end
  converseLib.validationFailed(1); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = "SW02S25"; /* Process name*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "SW02M001"; /* Map name*/
  SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  SLWREC.XXXLOCID = "S25 "; /* Error location*/
  exit stack;

end // end SW02S25

// add temporary storage
Function SW02S28()
   /* ------------------------------------------------------------*/
   /* add page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW02W03.XXXTSLEN = SW02W00.XXXTSLEN; /* temp storage length*/
  TA5REC.TA5APPID = "SW02"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (SW02W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "SW02S28"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "SW02M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    SLWREC.XXXLOCID = "S28 "; /* Error location*/
    return; /* Return to previous process*/

  end

  SW02W00.TA5TSQIX = TA5REC.TA5TSQIX; /* highest page*/
  SW02W00.XXXTSPAG = TA5REC.TA5TSQIX; /* last page for upd*/

end // end SW02S28

// update temporary storage
Function SW02S29()
   /* ------------------------------------------------------------*/
   /* add page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW02W03.XXXTSLEN = SW02W00.XXXTSLEN; /* temp storage length*/
  TA5REC.TA5TSQIX = SW02W00.XXXTSPAG; /* page number*/
  TA5REC.TA5APPID = "SW02"; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (SW02W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* return to previous process*/
  end

  converseLib.validationFailed(1); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = "SW02S25"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1MAP = "SW02M001"; /* Map name*/
  SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  SLWREC.XXXLOCID = "S29 "; /* Error location*/
  exit stack; /* Exit to display map*/

end // end SW02S29

//*** RECORD=SW02W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record SW02W00 type basicRecord
  10 SW02WSWR SW02WSWR ; 
  10 SW02WSWF SW02WSWF ; 
  10 SW02WPRF SW02WPRF ; 
  10 SW02WPFF SW02WPFF ; 
  10 SW02WEOF SW02WEOF ; 
  10 SW02WTFL SW02WTFL ; 
  10 SW02WMOD SW02WMOD ; 
  10 SW02WIDX SW02WIDX ; 
  10 SW02WLIX SW02WLIX ; 
  10 SW02WIXT SW02WIXT ; 
  10 TSOSHPQT TSOSHPQT ; 
  10 SL2RCVD SL2RCVD ; 
  10 SW02WDIF SW02WDIF ; 
  10 XGPCD XGPCD ; 
  10 XDMCD XDMCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XQACD XQACD ; 
  10 XEGCD XEGCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 XSLCD XSLCD ; 
  10 SW02WCAS SW02WCAS ; 
    15 SW02WCS1 SW02WCS1 ; 
    15 SW02WCS2 SW02WCS2 ; 
  10 SW02WDAT SW02WDAT ; 
    15 SW02WDCC SW02WDCC ; 
    15 SW02WDYY SW02WDYY ; 
    15 SW02WDMM SW02WDMM ; 
    15 SW02WDDD SW02WDDD ; 
  10 SW02WFDT SW02WFDT ; 
    15 SW02WFMM SW02WFMM ; 
    15 SW02WFDS SW02WFDS ; 
    15 SW02WFDD SW02WFDD ; 
    15 SW02WFDH SW02WFDH ; 
    15 SW02WFYY SW02WFYY ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end SW02W00

//*** RECORD=SW02W01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record SW02W01 type basicRecord
  5 SW02WGP1 SW02WGP1 ; 
    10 SW02WKEY SW02WKEY ; 
      15 XWHCD XWHCD ; 
      15 TSHCNTNR TSHCNTNR ; 
    10 XWHABRV XWHABRV ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 YRSCD YRSCD ; 
    10 YRSABRV YRSABRV ; 
    10 XITCD XITCD ; 
    10 SL1RCRNO SL1RCRNO ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 SL1CRTDT SL1CRTDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 XURUSRNM XURUSRNM ; 
      15 XURUSRID XURUSRID ; 
      15 SW02WDSH SW02WDSH ; 
      15 SW02WLTR SW02WLTR ; 
    10 SW02WSTA SW02WSTA ; 
    10 TSOCRTNB TSOCRTNB ; 
    10 SL2CASE SL2CASE ; 
    10 * char(1) ; 
    10 PC3PONBR PC3PONBR ; 
    10 SWVWPOID SWVWPOID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XLCCD XLCCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 XSLCD XSLCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 CACHGFL CACHGFL ; 
end // end SW02W01

Record SW02W03 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 SW02WGP3 SW02WGP3 ; 
    10 SW02W3IX SW02W3IX ; 
    10 SW02W3MX SW02W3MX ; 
    10 * char(15) ; 
    10 PC3PONBR PC3PONBR ; 
    10 SWVWPOID SWVWPOID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 SW02WSTA SW02WSTA ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XLCCD XLCCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 XSLCD XSLCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 * char(43) [8] ; 
      15 SL8WONBR SL8WONBR ; 
      15 SL8FRLC SL8FRLC ; 
      15 TSOCRTNB TSOCRTNB ; 
      15 PKDNCSQN PKDNCSQN ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 TSOSHPQT TSOSHPQT ; 
      15 SL2RCVD SL2RCVD ; 
      15 SW02WDIF SW02WDIF ; 
      15 SW02WUXQ SW02WUXQ ; 
      15 SL9WOQTY SL9WOQTY ; 
    10 * char(21) ; 
      15 SW02WTTF SW02WTTF ; 
      15 SW02WPLT SW02WPLT ; 
      15 SW02WRCT SW02WRCT ; 
      15 SW02WDFT SW02WDFT ; 
      15 SW02WUXT SW02WUXT ; 
      15 SW02WUPT SW02WUPT ; 
end // end SW02W03

//*** RECORD=SW02W04 ****
// ------------------------------------------------------------
// PARAMETERS FOR SL434D - PLAN RECONCILIATION SUMMARY REPORT
// ------------------------------------------------------------
// ***********************
Record SW02W04 type basicRecord
  5 SW02WPRM SW02WPRM ; 
    10 XWHCD1 XWHCD1 ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 XURUSRNM XURUSRNM ; 
    10 * char(44) ; 
  5 SW02WSYM SW02WSYM ; 
    10 * char(21) ; 
    10 XWHCD2 XWHCD2 ; 
    10 * char(57) ; 
  5 SW02WDAS SW02WDAS ; 
    10 * char(52) ; 
    10 XWHCD3 XWHCD3 ; 
    10 * char(26) ; 
end // end SW02W04

//*** RECORD=SW02W05 ****
// ------------------------------------------------------------
// Parameters for SL4141 - Unexpected Work Order Creation.
// ------------------------------------------------------------
// ***********************
Record SW02W05 type basicRecord
  5 SW02WPLT SW02WPLT ; 
  5 SW02WRCT SW02WRCT ; 
  5 SW02WDFT SW02WDFT ; 
  5 SW02WUXT SW02WUXT ; 
  5 SW02WUPT SW02WUPT ; 
end // end SW02W05

// temp storage index
DataItem SW02W3IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max lines per page
DataItem SW02W3MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unformatted date
DataItem SW02WCAS char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all zeroes
DataItem SW02WCS1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// crt nbr
DataItem SW02WCS2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW02WDAS char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unformatted date
DataItem SW02WDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem SW02WDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem SW02WDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty difference
DataItem SW02WDFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// qty difference
DataItem SW02WDIF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month
DataItem SW02WDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// value ' - '
DataItem SW02WDSH char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem SW02WDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EOF flag
DataItem SW02WEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted day
DataItem SW02WFDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem SW02WFDH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem SW02WFDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unformatted date
DataItem SW02WFDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted month
DataItem SW02WFMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted year
DataItem SW02WFYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SW02w01 group level
DataItem SW02WGP1 char(165)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW02WGP3 char(457)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SW02WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// jcl index
DataItem SW02WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem SW02WKEY char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load index
DataItem SW02WLIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// value 'unknown    '
DataItem SW02WLTR char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified switch
DataItem SW02WMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page full flag
DataItem SW02WPFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total shipped qty
DataItem SW02WPLT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// request product flag
DataItem SW02WPRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW02WPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total receiving qty
DataItem SW02WRCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prod set aside
DataItem SW02WSTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW02WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// Request for data switch
DataItem SW02WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW02WSYM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// translate size desc flag
DataItem SW02WTFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total flag
DataItem SW02WTTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total unprt qty
DataItem SW02WUPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unxpected QTY
DataItem SW02WUXQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total unexp qty
DataItem SW02WUXT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

