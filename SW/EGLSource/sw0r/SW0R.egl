package sw0r;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0R ****
// This menu program gives users access to receipt entry and
// maintenance applications.  These applications will allow the
// user to set up and modify receipts as well as inquire on and
// enter receipt history data.
// 
// Since this is simply a menu and only transfers the user to
// one point or another, it does not request, validate or
// process any data.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      10/10/90  MKRAUS  New application.
// WILRCV   04/05/93  BGILDE  Added:
//                            SW06(Delete unexpected cartons)
//                            SW07(Pallet units/case adjust)
//                            Reformatted the map.
// ?        07/06/93  mpluth  screen changes
// *********************
Program SW0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SW0RW00 SW0RW00; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SW0RT; // table
  use SW0RM.SW0RM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0RM001 initial; /* M001 input/output*/
    set SW0RW00 empty; /* Working storage*/

    SW0RW00.SW0RWSWF = "Y"; /* Format the map switch*/
    SW0RW00.SW0RWSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0R001; /* Converse the main process*/


    SW0R001: SW0R001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0R001; /* Converse the main process*/


  end // end main
end // end SW0R

// Main process to display a map
Function SW0R001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0R100(); /* Obtain the data to display*/

  SW0R200(); /* Format and display the map*/

  SW0R300(); /* Check attention identifier*/

  SW0R400(); /* Reset fields to normal intensity*/

  SW0R500(); /* Verify the data that was entered*/

  SW0R600(); /* Process valid input request*/


end // end SW0R001

// Obtain the data to display
Function SW0R100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0RW00.SW0RWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0RW00.SW0RWSWR = "N"; /* Request for data switch*/


end // end SW0R100

// Format and converse the map
Function SW0R200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0RW00.SW0RWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0RW00.SW0RWSWF == "Y") /* Map must be formatted*/
      SW0R210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0RM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0RM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0RM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0RM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0RM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0RM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0RM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = SW0RM001.CAITEM; /* Application data*/

end // end SW0R200

// Format the display data
Function SW0R210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0RM001 initial; /* M001 input/output area*/

  SW0RW00.SW0RWSWF = "N"; /* Format the map switch*/


end // end SW0R210

// Check attention identifier
Function SW0R300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0RW00.SW0RWSWF = "Y"; /* Format the map switch*/
    SW0RW00.SW0RWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0RM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSL001(); /* Exit to another application*/

      set SW0RM001.CATOAP cursor, bold; /* Highlight*/
      SW0RW00.SW0RWSWF = "Y";

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0RM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF3 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0D"; /* TO application*/
    end

    XSSL001(); /* Exit to another application*/

    set SW0RM001.CATOAP cursor, bold;

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0R300

// Reset highlighted fields
Function SW0R400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0RM001.SW0RMSEL initialAttributes; /* Menu selection*/
  set SW0RM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set SW0RM001.CAITEM initialAttributes; /* FAST PATH application data*/

end // end SW0R400

// Verify data that was entered
Function SW0R500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0RM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the menu selection that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0RM001.SW0RMSEL in SW0RT.SW0RMSEL) /* Selection in table*/

     /* NEXT SENTENCE*/

  else
    if (SW0RM001.SW0RMSEL <= 0) /* No entry in selection*/

      SLWREC.XXXLOCID = "500"; /* Module identification*/
      set SW0RM001.SW0RMSEL cursor, bold; /* Highlight*/
      converseLib.validationFailed(09); /* Field missing or invalid*/

    else

      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "500"; /* Module identification*/
      set SW0RM001.SW0RMSEL cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Field missing or invalid*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0R500

// Process valid input request
Function SW0R600()
   /* ------------------------------------------------------------*/
   /* Invoke the application indicated by the table entry.*/
   /* ------------------------------------------------------------*/

  if (SW0RM001.SW0RMSEL in SW0RT.SW0RMSEL)
    COMMAREA.CATOAP = SW0RT.CATOAP[sysVar.arrayIndex];
  end
  SLWREC.SLWFMSEL = SW0RM001.SW0RMSEL; /* Move map select to rec*/

  XSSL001(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/

  set SW0RM001.SW0RMSEL cursor, bold; /* Highlight*/


end // end SW0R600

//*** RECORD=SW0RW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0RW00 type basicRecord
  10 SW0RWSWF SW0RWSWF ; 
  10 SW0RWSWR SW0RWSWR ; 
end // end SW0RW00

DataItem SW0RWSWF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0RWSWR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

