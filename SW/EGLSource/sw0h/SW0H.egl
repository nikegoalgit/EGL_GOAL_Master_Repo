package sw0h;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=SW0H ****
//     This on-line application provides the users with the
// means to create and/or modify plans. The user can add new
// containers to existing and newly created plans as well as
// maintain information regarding the plan at both the
// container/po and product levels. This application is called
// from SW0C.
//     This program consists of two (2) screens. On the first
// screen, SW0HM001, the user is required to specify the
// warehouse code. The user is also required to enter at least
// one of the following, plan number of container(s). Up to 12
// containers may be entered per screen. If more than 12
// containers are required, the user can re-enter the plan
// number along with a new screen of container requests on
// screen 1 after the work has been completed or cancelled for
// the containers specified during the previous process of
// screen 1.
//     If plan number and one or more containers are entered,
// all of the fields are editted and validated against other
// tables. If all of the validation and editting is completed
// successfully, the second screen is displayedusing all of the
// specified containers, otherwise, an error message is
// displayed and the invalid field is highlighted.
//     If plan number is not entered and one or more containers
// are, the system will edit and validate the specified
// containers. If the specified containers are not available,
// then an error message is displayed, the invalid container is
// highlighted, and the users required to change or delete the
// specified container or cancel. If the specified containers
// are all available, a plan is created. The plan number is
// assigned by retrieving the next plan number found in the
// Stock Locate Control table. The designated containers are
// then used.
//     If the plan number is entered and no containers are
// entered, edit and validate the plan number.  If the
// designated plan exists, the second screen is displayed using
// all of the containers that are assigned. If the designated
// plan does not exist, an error message will be displayed,
// plan number field highlighted, and the user required to
// enter a valid plan number or cancel.
//     The second screen, SW0HM002, will allow the user to
// inquire on detail plan information at the plan, purchase
// order, and product levels. Also, the user will be able to
// attach inspections to a plan by modifying and/or adding
// inspection and quality control codes, inspection percentages
// and handstack hold flags. The user can inquire on greater
// detail via PF Keys to Packing List Inquiry and Purchase
// Order Inquiry.
//    This program uses the standard initialization routine,
// exit routine, date and time routine, temporary storage
// routine, error routines and PF keys
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/16/90  bgoff   New Application
// ;
// slp8     01/05/91  jcarey  -if insp % not entered, the
//                            default is used
//                            -inspection # in header cannot
//                            be used in a detail insp #
//                            -quality control code in
//                            header cannot be used in
//                            detail qc code
//                            -insp # can be erased at
//                            either header or detail level
// slp12    01/05/91  jcarey  -updated the slwrec for both
//                            maps when exiting to a sl or
//                            sw application
//                            -pk_crtn_seq# retained in the
//                            planning tables should
//                            contain a julian day in the
//                            first three positions. Does
//                            not affect the number in
//                            picking. Also added a check
//                            to rollover number when
//                            999999 is reached.
// fix      01/08/91  jcarey  add swxrec to io5360 call
// slp36    01/10/91  jcarey  verify containers against the
//                            plan header table(vplnhd01).
//                            if not wk,rc,ca,si,or sb,
//                            it is not valid. Use the
//                            warehouse and plan from
//                            vplcpo01 to do select.
//                            -sum of header inspection task
//                            and product level insp cannot
//                            be greater than 20.
// swh0-2   01/16/90  jcampb  fix insp percent errors, check
//                            validity of insp/qc numbers &
//                            for inactive numbers.
// swh0-3   01/18/90  jcampb  require qc code at all times
//                            even before allowing a pf* ext
// sl91022  01/22/91  kande1  fixed map 1 trans. type field
//                            to be semi-colon.
//          02/13/91  ryonke  program changes for table chng
// fix      03/01/91  ryonke  change select scan for io2570
//                            to scan-8 from scan-3. the
//                            table scanned dtrans.vcplhd01.
// sl00     04/09/91  ryonke  change references to tsorec
//                            for table changes.
// sl00     07/02/91  jlucas  only allow plan updt when plan
//                            status, wk,ca,sv.  edit trans
//                            cd for xigcd = 10.  when trans
//                            cd = 13,14 require entry of
//                            stock transfer #, if any packi
//                            list quant eq 0 no plan will
//                            be created.
// sl00     09/12/91  ryonke  change application to build
//                            rows for the lane/carton and
//                            lane/carton size tables by the
//                            use of the subroutine sl4310.
// SL#0     10/10/91  SPOPA   Change "Allow Implicits" to NO.
// sl#0     12/19/91  ryonke  change julian date logic to get
//                            the julian day by using the
//                            pkdrec.pkdlbldt(1) value insted
//                            of getting the julian day from
//                            the system for current day.
// MAINT    01/30/92  GRAY    INITIALIZE ALL RECORDS AND MAPS.
//          10/10/92  Ryonke  code changes due to tables change
// WV RCV   01/21/93  Tglenn  code changes for WV RCV.
//                            A) turn off auto QC carton
//                               routing in procedure SW0H250.
//                            B) new procedure SW0H16A to
//                               access DTRANS.VSHPHD01.
//                            C) new procedure SW0H16B to
//                               access DTRANS.VCRAFT01.
//                            D) add MODE CODE to insert of
//                               DSTLOC.VSHPHD01 in procedure
//                               SW0H164.
// WV RCV   05/27/93  hchapm  added code for warehouse 07 to
//                            transfer from map1 to sw0i.
// WV RCV   06/18/93  ryonke  chg default handstack cases to 4.
//   NONE   10/07/93  WTATE   RENAMED XSACD TO XEG-ENGR-DIFF-CD
//   NONE   10/07/93  RYONKE  CORRECT PREVIOUS FIX
// tblchg   03/08/94  RYONKE  code change for table changes.
// asw001   12/13/95  hkempe  added a field needed to identify
//                            products by po that will be stord
//                            at the satellite warehouse.
// asw001   01/26/96  Mleyth  Bypassed QC field edit for whse
//                            51.
// asw001   02/28/96  RIbane  Added QA flag in the PO level for
//                            whse 51. QC field will be dis-
//                            abled
// APRLPRJ  02/14/97  Echan   changed the attritbute to protect
//                            for sl-sat-stg-loc-ind. comment
//                            out set sl-sat-stg-loc-ind to
//                            normal.
//          04/04/97  dgerlt  Changed hold hand stack defaults
//                            for whse 51.
// retroft  08/26/97  sjohn6  Changed hold hand stack defaults
//                            back to n
// *********************
Program SW0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  IN7REC IN7REC; // record
  PC3REC PC3REC; // record
  PKDREC PKDREC; // record
  SL1REC SL1REC; // record
  SL3REC SL3REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0HW00 SW0HW00; // record
  SW0HW01 SW0HW01; // record
  SW0HW02 SW0HW02; // record
  SW0HW03 SW0HW03; // record
  SW1REC SW1REC; // record
  SWAREC SWAREC; // record
  SWBREC SWBREC; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SWGREC SWGREC; // record
  SWHREC SWHREC; // record
  SWNREC SWNREC; // record
  SWVREC SWVREC; // record
  SWXREC SWXREC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSFREC TSFREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSOREC TSOREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XITTBL; // table
  use XRPTBL; // table
  use XWHTBL; // table
  use SW0HM.SW0HM001,  // forms
      SW0HM.SW0HM002, 
      SW0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* -----------------------------------------------------------*/
     /* Initialize working storage area and display storage areas.*/
     /* -----------------------------------------------------------*/

    set SW0HM001 initial; /* m001 i/o*/
    set SW0HM002 initial; /* m002 i/o*/
    set XX0XM001 initial;
    set SW0HW00 empty; /* working storage*/
    set SW0HW01 empty; /* m001 display storage*/
    set SW0HW02 empty; /* m002 display storage*/
    set SW0HW03 empty; /* m002 display storage*/
    set IN7REC empty; /* sql communication area*/
    set PC3REC empty;
    set PKDREC empty;
    set SL3REC empty;
    set SW1REC empty;
    set SWAREC empty;
    set SWBREC empty;
    set SWEREC empty;
    set SWFREC empty;
    set SWGREC empty;
    set SWHREC empty;
    set SWNREC empty;
    set SWVREC empty;
    set SQLCA empty; /* sql communication area*/
    set SWXREC empty;
    set SY2REC empty;
    set TAEREC empty; /* error diagnosis information*/
    set TA1REC empty; /* error diagnosis information*/
    set TA2REC empty; /* error diagnosis information*/
    set TA5REC empty; /* temporary storage parameters*/
    set TSHREC empty; /* temporary storage parameters*/
    set TSIREC empty; /* temporary storage parameters*/
    set TSOREC empty; /* temporary storage parameters*/
    set XX0XW01 empty;
    set XX0XW02 empty;
    SW0HW00.SW0HWSWD = "1"; /* MAP TO BE DISPLAYED SWITCH*/
    SW0HW00.SW0HWSWF = "Y"; /* format the map switch*/
    SW0HW00.SW0HWFFL = "Y"; /* first time switch*/
    SW0HW00.SW0HWSWR = "N"; /* request for data switch*/
    SW0HW01.XITCD = "10"; /* initialize tran type code to 10*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the commarea, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* data was passed*/

      SW0HM001.XWHCD = COMMAREA.XWHCD; /* warehouse code*/

      COMMAREA.CAITEM = " "; /* clear passed data*/

      SW0HW00.SW0HWSWR = "Y"; /* request for data switch*/

    else

      SW0HW01.XWHCD = COMMAREA.XWHCD; /* warehouse code*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0H001; /* converse the main process*/



    SW0H001: SW0H001();
     /* ---------------------------------------------------*/
     /* Flow to converse main process to display a map   -*/
     /* ---------------------------------------------------*/

    goto SW0H001; /* Converse main process*/



  end // end main
end // end SW0H

// Main process to display a map
Function SW0H001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWSWD == "1") /* Map 1 was requested*/

    SW0H100(); /* Display map 1*/

  else

    if (SW0HW00.SW0HWSWD == "2") /* Map 2 was requested*/

      SW0H200(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "001"; /* Module identification*/
      SLWREC.SLWMSGNO = 1; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = SW0HW00.SW0HWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "SW0C"; /* TO application*/

      XSSL001(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end SW0H001

// Plan and container entry
Function SW0H100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0H110(); /* Obtain the data to display*/

  SW0H120(); /* Format and display the map*/

  SW0H130(); /* Check attention identifier*/

  SW0H140(); /* Reset fields to normal intensity*/

  SW0H150(); /* Verify the entered data*/

  SW0H160(); /* Process valid input request*/


end // end SW0H100

// Obtain the data to display
Function SW0H110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/


  if (SW0HW00.SW0HWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* check to see if container exists currently for this whse*/
   /* ------------------------------------------------------------*/

  set SL1REC empty; /* initialize dclgen*/

  SL1REC.XWHCD = SW0HM001.XWHCD; /* move in whse code*/
  SW0HW00.SW0HWIX1 = 1; /* initialize counter*/

  while (SW0HW00.SW0HWIX1 <= 12) /* check for all containers*/

    SL1REC.TS3CNTNR = SW0HM001.TSHCNTNR[SW0HWIX1];

    SW0HS70(); /* select 's ' dstloc.vrlhdr01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* check to see if container*/
      SLWREC.XXXLOCID = "110"; /* exists currently and if so*/
      converseLib.validationFailed(445); /* load error message and set*/
      set SW0HM001.TSHCNTNR[SW0HWIX1] cursor, bold;
    end

    SW0HW00.SW0HWIX1 = SW0HW00.SW0HWIX1 + 1; /* increment counter*/

  end


   /* ------------------------------------------------------------*/
   /* clear the map storage area and save the key fields*/
   /* ------------------------------------------------------------*/

  set SW0HW01 empty; /* m001 display storage*/

  SW0HW01.XWHCD = SW0HM001.XWHCD; /* warehouse code*/
  SW0HW01.SWEPLLNB = SW0HM001.SWEPLLNB; /* plan number*/
  SW0HW01.XITCD = SW0HM001.XITCD; /* tran type code*/
  SW0HW01.IN7STNBR = SW0HM001.IN7STNBR; /* stktfnbr*/

  SW0HW00.SW0HWIX1 = 1; /* initialize index*/

  while (SW0HW00.SW0HWIX1 <= 12) /* until end of containers*/

    SW0HW01.TSHCNTNR[SW0HWIX1] = SW0HM001.TSHCNTNR[SW0HWIX1];

    SW0HW00.SW0HWIX1 = SW0HW00.SW0HWIX1 + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Retrieve current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* obtain date and time*/

  SW0HM001.XXXCURDT = XX0XW01.XX0XWDAT; /* current date*/

   /* ------------------------------------------------------------*/
   /* if ezeaid is enter, normal processing*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter)
    SW0HW00.SW0HWFFL = "N"; /* first time switch*/
  end

   /* ------------------------------------------------------------*/
   /* indicate that the request for data is complete*/
   /* ------------------------------------------------------------*/
  SW0HW00.SW0HWSWR = "N"; /* request for data switch*/


end // end SW0H110

// Format and converse the map
Function SW0H120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  else

    /* ------------------------------------------------------------*/
     /* if first time thru display map,else exit to next process*/
    /* ------------------------------------------------------------*/

    if (SW0HW00.SW0HWFFL == "N") /* first time switch*/
      return; /* return to next process*/
    end
  end

  if (SW0HW00.SW0HWSWR == "Y" /* request for data*/
   || converseVar.validationMsgNum == 0) /* no error*/

    if (SW0HWSWF == "Y") /* format the map*/
      SW0H121(); /* format data on map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0HM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0HM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0HM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0HM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0HM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0HM001.CAITEM; /* Application data*/


end // end SW0H120

// format data on map
Function SW0H121()
   /* --------------------------------------------------------*/
   /* clear fields in the map storage area to be formated*/
   /* --------------------------------------------------------*/

  SW0HW01.XWHCD = COMMAREA.XWHCD; /* warehouse code*/

  set SW0HM001 initial; /* moo1 input/output area*/

  SW0HW00.SW0HWSWF = "N"; /* format the map switch*/

   /* ---------------------------------------------------------*/
   /* format the data on the map.*/
   /* ---------------------------------------------------------*/

  SW0HM001.XWHCD = SW0HW01.XWHCD; /* warehouse code*/
  SW0HM001.SWEPLLNB = SW0HW01.SWEPLLNB; /* plan number*/
  SW0HM001.XITCD = SW0HW01.XITCD; /* tran type*/
  SW0HM001.IN7STNBR = SW0HW01.IN7STNBR;
  if (SW0HW01.TSHCNTNR[1] == "*") /* used as wildcard*/
    SW0HW01.TSHCNTNR[1] = " ";
  end
  move SW0HW01.TSHCNTNR to SW0HM001.TSHCNTNR[1] for all; /* container*/

   /* ------------------------------------------------------*/
   /* position cursor*/
   /* ------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors*/

    if (SW0HW01.SWEPLLNB <= 0) /* not entered*/

      set SW0HM001.SWEPLLNB cursor; /* set cursor*/

    end

    if (" " in SW0HW01.TSHCNTNR) /* find first empty*/

      SW0HW00.SW0HWIX1 = sysVar.arrayIndex; /* map index*/
      set SW0HM001.TSHCNTNR[SW0HWIX1] cursor; /* set cursor*/

    end

    if (SW0HM001.XWHCD == " ") /* warehouse*/

      set SW0HM001.XWHCD cursor; /* set cursor*/

    end
  end


end // end SW0H121

// Check attention identifier
Function SW0H130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SW0HW01 empty; /* M001 display storage*/

    SW0HW00.SW0HWSWF = "Y"; /* Format the map switch*/
    SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/
    SW0HW00.SW0HWFFL = "Y"; /* First time switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0HM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0HS03(); /* update the slwrec*/

      XSSL001(); /* Exit to another application*/

      set SW0HM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "130"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ---------------------------------------------------------*/
   /* Update the slwrec before leaving*/
   /* ---------------------------------------------------------*/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf5)

    SW0HS03();

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0HM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction. Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "130"; /* module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is invalid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0H130

// Reset highlighted fields
Function SW0H140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0HM001.XWHCD initialAttributes; /* Warehouse code*/
  set SW0HM001.SWEPLLNB initialAttributes; /* Plan number*/
  set SW0HM001.XITCD initialAttributes; /* tran type code*/
  set SW0HM001.IN7STNBR initialAttributes; /* ikftfnbr*/

  SW0HW00.SW0HWIX1 = 1; /* initialize index*/

  while (SW0HW00.SW0HWIX1 <= 12) /* until end of containers*/

    set SW0HM001.TSHCNTNR[SW0HWIX1] initialAttributes; /* containers*/

    SW0HW00.SW0HWIX1 = SW0HW00.SW0HWIX1 + 1; /* increment index*/

  end

  set SW0HM001.CATOAP initialAttributes; /* TO application*/
  set SW0HM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested. return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0HM001.XWHCD == "?" /* Warehouse list requested*/
   || SW0HM001.XITCD == "?") /* Tran type code list requested*/

    if (converseVar.eventKey not enter) /* Enter was not pressed*/

      SLWREC.XXXLOCID = "140"; /* Module identification*/
      converseLib.validationFailed(4); /* PF key may not be used*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* ; Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes.*/
   /* ------------------------------------------------------------*/

  if (SW0HM001.XWHCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  WAREHOUSE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0HM001.XWHCD = SW0HW01.XWHCD; /* Restore prior code*/
    else
      SW0HM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0HM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of tran type codes.*/
   /* ------------------------------------------------------------*/

  if (SW0HM001.XITCD == "?") /* Tran type list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  TRAN TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXIT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0HM001.XITCD = SW0HW01.XITCD; /* Restore prior code*/
    else
      SW0HM001.XITCD = XITTBL.XITCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0HM001.XITCD cursor; /* Establish cursor position*/

  end

  converseLib.clearScreen();
   /* clear screen before display*/



end // end SW0H140

// Verify data that was entered
Function SW0H150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0HM001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SW0HM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* validate stktfnbr against the dinvnt.vtfhdr01 table*/
   /* field not required, but if entered must be validated*/
   /* fld is required when trans type cd = 13 or 14 (stck transf)*/
   /* ------------------------------------------------------------*/


  if (SW0HM001.IN7STNBR > 0) /* field not required*/

    SW0H151(); /* select from dinvnt.vtfhdr01*/

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/

      SLWREC.XXXLOCID = "150"; /* Module identification*/
      set SW0HM001.IN7STNBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Field missing or invalid*/

    else

      if (IN7REC.XIUCD == "01"
       || IN7REC.XIUCD == "02"
       || IN7REC.XIUCD == "03")

         /* next sentence*/
      else

        SLWREC.XXXLOCID = "150"; /* Module identification*/
        set SW0HM001.IN7STNBR cursor, bold; /* Highlight*/
        converseLib.validationFailed(11); /* Field missing or invalid*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the tran type code and status.*/
   /* ------------------------------------------------------------*/

  if (SW0HM001.SWEPLLNB == 0 /* plan number not entere*/
   && SW0HW00.SW0HWCRQ == "Y")

    if (SW0HM001.XITCD in XITTBL.XITCD           /* Code in table*/
     && XITTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XITTBL.XIGCD[sysVar.arrayIndex] == "10") /* group code must eq 10*/

      if (SW0HM001.XITCD == "13") /* Transaction code*/
        if (SW0HM001.IN7STNBR == 0) /* Stock transfer number not entered*/
          SLWREC.XXXLOCID = "150"; /* Module identification*/
          set SW0HM001.IN7STNBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(09); /* Field missing*/
        end
      else
        if (SW0HM001.XITCD == "10") /* Transaction code*/
          if (SW0HM001.IN7STNBR > 0) /* Stock transfer number entered*/
            SLWREC.XXXLOCID = "150"; /* Module identification*/
            set SW0HM001.IN7STNBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(11); /* Field invalid*/
          end
        else
          SLWREC.XXXLOCID = "150"; /* Module identification*/
          set SW0HM001.XITCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(11); /* Field invalid*/
        end
      end

    else

      SLWREC.XXXLOCID = "150"; /* Module identification*/
      set SW0HM001.XITCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(09); /* required Field missing or invalid*/

    end
  else
    if (SW0HM001.XITCD > " ")
      if (SW0HM001.XITCD in XITTBL.XITCD           /* Code in table*/
       && XITTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XITTBL.XIGCD[sysVar.arrayIndex] == "10") /* group code must eq 10*/

        if (SW0HM001.XITCD == "13") /* Transaction code*/
          if (SW0HM001.IN7STNBR == 0) /* Stock transfer number not entered*/
            SLWREC.XXXLOCID = "150"; /* Module identification*/
            set SW0HM001.IN7STNBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(09); /* Field missing*/
          end
        else
          if (SW0HM001.XITCD == "10") /* Transaction code*/
            if (SW0HM001.IN7STNBR > 0) /* Stock transfer number entered*/
              SLWREC.XXXLOCID = "150"; /* Module identification*/
              set SW0HM001.IN7STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(11); /* Field invalid*/
            end
          else
            SLWREC.XXXLOCID = "150"; /* Module identification*/
            set SW0HM001.XITCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(11); /* Field invalid*/
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine the mode in which the application will function*/
   /* ------------------------------------------------------------*/

  SW0HW00.SW0HWCRQ = "N"; /* container requested flag*/
  SW0HW00.SW0HWIX1 = 12; /* Initialize line index*/

  while (SW0HW00.SW0HWIX1 > 0) /* Until end of lines*/

    if (SW0HM001.TSHCNTNR[SW0HWIX1] != " ") /* containers are requested*/

      SW0HW00.SW0HWCRQ = "Y"; /* container request flag*/

    end

    SW0HW00.SW0HWIX1 = SW0HW00.SW0HWIX1 - 1; /* Decrement line number*/

  end

  if (SW0HM001.SWEPLLNB > 0 /* plan number entered*/
   && SW0HW00.SW0HWCRQ == "N") /* and no containers requested*/

    SW0HW00.SW0HWFNC = "M"; /* function code*/

  end

  if (SW0HM001.SWEPLLNB == 0 /* plan number not entered*/
   && SW0HW00.SW0HWCRQ == "Y") /* and containers requested*/

    SW0HW00.SW0HWFNC = "N"; /* function code (new plan)*/

  end

  if (SW0HM001.SWEPLLNB > 0 /* plan number entered*/
   && SW0HW00.SW0HWCRQ == "Y") /* and containers requested*/

    SW0HW00.SW0HWFNC = "E"; /* function code (existing plan)*/

  end

  if (SW0HM001.SWEPLLNB == 0 /* plan number not entered*/
   && SW0HW00.SW0HWCRQ == "N") /* and containers not requested*/

    converseLib.validationFailed(256); /* plan and/or cont. required*/
    set SW0HM001.SWEPLLNB cursor, bold; /* highlight*/

  end

  if (SW0HW00.SW0HWFNC == "E"
   || SW0HW00.SW0HWFNC == "M")
    SW0HW01.XWHCD = SW0HM001.XWHCD; /* warehouse*/
    SW0HW01.SWEPLLNB = SW0HM001.SWEPLLNB; /* Plan number*/
    SW0H161();
    /* ------------------------------------------------------------*/
     /* do not edit if plan status is rc sb sc si ip*/
    /* ------------------------------------------------------------*/
    if (SWEREC.XRPCD == "RC" /* Plan status*/
     || SWEREC.XRPCD == "SB" 
     || SWEREC.XRPCD == "SC" 
     || SWEREC.XRPCD == "SI" 
     || SWEREC.XRPCD == "IP")
      /* next sentence*/
    else
      if (SW0HM001.XITCD == "13" /* Transaction code*/
       || SW0HM001.XITCD == "14")
        if (SW0HM001.IN7STNBR == 0) /* Stock transfer number not entered*/
          SLWREC.XXXLOCID = "150"; /* Module identification*/
          set SW0HM001.IN7STNBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(09); /* Field missing*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the warehouse code and status.*/
   /* ------------------------------------------------------------*/

  if (SW0HM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SW0HM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

  SW0HW00.SW0HWSWR = "Y"; /* request for data switch*/


end // end SW0H150

// Select from DINVNT.VTFHDR01
Function SW0H151()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set IN7REC empty; /* Row storage area*/

  IN7REC.IN7STNBR = SW0HM001.IN7STNBR; /* stktfnbr*/

  try
    call "IO0720" ("S ", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "INVNT   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTFHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN7REC.IN7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H151

// Process valid input request
Function SW0H160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* update the commarea*/
   /* ------------------------------------------------------------*/


  SW0HW00.SW0HWSWF = "Y"; /* Format the map switch*/
  COMMAREA.XWHCD = SW0HM001.XWHCD; /* waehouse code*/

   /* ------------------------------------------------------------*/
   /* if the search key was changed, save the search information*/
   /* ------------------------------------------------------------*/

  if (SW0HM001.XWHCD != SW0HW01.XWHCD       /* warehouse changed*/
   || SW0HM001.SWEPLLNB != SW0HW01.SWEPLLNB /* plan number*/
   || SW0HM001.XITCD != SW0HW01.XITCD       /* tran type*/
   || SW0HM001.IN7STNBR != SW0HW01.IN7STNBR /* stktfnbr*/
   || SW0HM001.TSHCNTNR[1] != SW0HW01.TSHCNTNR[1]
   || SW0HM001.TSHCNTNR[2] != SW0HW01.TSHCNTNR[2]
   || SW0HM001.TSHCNTNR[3] != SW0HW01.TSHCNTNR[3]
   || SW0HM001.TSHCNTNR[4] != SW0HW01.TSHCNTNR[4]
   || SW0HM001.TSHCNTNR[5] != SW0HW01.TSHCNTNR[5]
   || SW0HM001.TSHCNTNR[6] != SW0HW01.TSHCNTNR[6]
   || SW0HM001.TSHCNTNR[7] != SW0HW01.TSHCNTNR[7]
   || SW0HM001.TSHCNTNR[8] != SW0HW01.TSHCNTNR[8]
   || SW0HM001.TSHCNTNR[9] != SW0HW01.TSHCNTNR[9]
   || SW0HM001.TSHCNTNR[10] != SW0HW01.TSHCNTNR[10]
   || SW0HM001.TSHCNTNR[11] != SW0HW01.TSHCNTNR[11]
   || SW0HM001.TSHCNTNR[12] != SW0HW01.TSHCNTNR[12])

    /* ----------------------------------------------------------*/
     /* if a search key was entered, request the data to display.*/
    /* ----------------------------------------------------------*/

    if (SW0HM001.XWHCD > " ") /* warehouse was entered*/
      SW0HW00.SW0HWSWR = "Y"; /* request for data swi*/
      SW0HW00.SW0HWFFL = "Y"; /* first time sitch*/
    else
      SW0HW00.SW0HWSWR = "N"; /* request for data swi*/
      set SW0HW01 empty; /* purge display storage*/
    end

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If function code is 'E'xisting or 'M'aintain select plan no*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWFNC == "E" /* Existing plan number*/
   || SW0HW00.SW0HWFNC == "M") /* or Maintain plan number*/

    SW0H161(); /* select from DSTLOC.VPLNHD01*/

    /* ----------------------------------------------------*/
     /* after selection check xitcd and in7stnbr to see*/
     /* if entered then update DSTLOC.VPLNHD01*/
     /* only update if plan status is wk, ca, sv*/
    /* ----------------------------------------------------*/

    if (SWEREC.XRPCD == "WK" /* Plan status*/
     || SWEREC.XRPCD == "SV" 
     || SWEREC.XRPCD == "CA")

      if (SW0HM001.XITCD != " " /* if tran type entered*/
       || SW0HM001.IN7STNBR != 0) /* if stktfnbr entered*/

        if (SW0HM001.XITCD != " ") /* if tran type entered*/
          SWEREC.XITCD = SW0HM001.XITCD; /* tran type code*/
        end

        if (SW0HM001.IN7STNBR != 0) /* if stktfnbr entered*/
          SWEREC.IN7STNBR = SW0HM001.IN7STNBR; /* stktbnbr*/
        end

        SW0H182(); /* update DSTLOC.VPLNHD01*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If function code is 'N'ew or 'E'xisting*/
     /* set plan status accordingly*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWFNC == "N") /* new plan number*/
    SW0HW00.XRPCD = "WK"; /* set plan status to working*/
  end

  if (SW0HW00.SW0HWFNC == "E") /* existing plan number*/
    if (SWEREC.XRPCD == "WK") /* working*/
      SW0HW00.XRPCD = "WK"; /* plan status*/
    else

      if (SWEREC.XRPCD == "SV" /* saved*/
       || SWEREC.XRPCD == "CA") /* calculated*/
        SW0HW00.XRPCD = "SV"; /* plan status*/
      else
        converseLib.validationFailed(250); /* plan status will not allow new cont.*/
        SLWREC.XXXLOCID = "160"; /* module id*/
        set SW0HM001.SWEPLLNB cursor, bold; /* highlight*/
        return; /* return to previous process*/
      end
    end
  end

  if (SW0HW00.SW0HWFNC == "M") /* maintain plan number*/
    if (SWEREC.XRPCD == "WK" /* plan status*/
     || SWEREC.XRPCD == "SV" 
     || SWEREC.XRPCD == "CA")
      /* next sentence*/
    else
      converseLib.validationFailed(218); /* plan status will not allow update*/
      SLWREC.XXXLOCID = "160"; /* module id*/
      set SW0HM001.SWEPLLNB cursor, bold; /* highlight*/
      return; /* return to previous process*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Validate add authority if function is 'N' or 'E'*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAADDFL == "Y") /* authorization to add*/
     /* next sentence*/
  else
    converseLib.validationFailed(248);
                                   /* insufficient authority to create plan*/
    SLWREC.XXXLOCID = "160"; /* module id*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Select container numbers if entered, and build a table*/
     /* if function is 'N' or 'E'*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWFNC == "N" /* New plan*/
   || SW0HW00.SW0HWFNC == "E") /* Existing plan*/

    /* --------------------------------------------------------*/
     /* Initialize for building the tables.*/
    /* --------------------------------------------------------*/

    SW0HW00.SW0HWIX1 = 12; /* initialize container index*/
    SW0HW00.SW0HWIXA = 1; /* initialize table index*/
    move " " to SW0HW00.TSHCNTNR[1] for all; /* container array*/
    move 0 to SW0HW00.TSFSHPID[1] for all; /* shipid array*/
    move 0 to SW0HW00.TSHNKCN[1] for all; /* nike container array*/

    /* --------------------------------------------------------*/
     /* julian date conversion process.*/
    /* --------------------------------------------------------*/

    SW0HS65(); /* pick control table*/

    SW1REC.SW1CURDT = PKDREC.PKDLBLDT[1]; /* pick label date*/

   /* convert label date to julian*/
    XSSLS-DATE2JULIAN();
    SW0HW00.SW0HWDAY = SW1REC.SW1JULNN;
    /* --------------------------------------------------------*/
     /* select and build tables from containers entered.*/
    /* --------------------------------------------------------*/

    while (SW0HW00.SW0HWIX1 > 0) /* until no more containers*/

      if (SW0HM001.TSHCNTNR[SW0HWIX1] > " ") /* container entered*/

        SW0H162(); /* Build table process*/
        SW0H183(); /* Set cursor vplcpo01*/
        SW0HW00.SW0HWDNF = "N"; /* set done flag to 'no'*/

        while (SW0HW00.SW0HWDNF == "N")

          SW0H184(); /* get vplcpo01*/
          if (SW0HW00.SW0HWDNF == "N")
            SW0H185(); /* Select plan header*/
            if (SWEREC.XRPCD == "WK" /* Plan status*/
             || SWEREC.XRPCD == "RC" 
             || SWEREC.XRPCD == "CA" 
             || SWEREC.XRPCD == "SI" 
             || SWEREC.XRPCD == "SB")
               /* next sentence*/
            else
              SLWREC.XXXLOCID = "160";
              converseLib.validationFailed(356);
              set SW0HM001.TSHCNTNR[SW0HWIX1] cursor, bold;
              SW0HW00.SW0HWDNF = "Y";

            end
          end
        end
        SW0H186(); /* close vplcpo01*/
      end
      SW0HW00.SW0HWIX1 = SW0HW00.SW0HWIX1 - 1; /* decrement index*/
    end
    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If function is 'N'ew get info from stock locate table*/
   /* and insert new row in DSTLOC.VPLNHD01*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWFNC == "N") /* new plan*/
    SW0H163(); /* select from DSTLOC.VSLCTL01*/
    SW0HW00.SW0HWPLN = SL3REC.SL3NXPLN; /* plan number*/

    SW0HW01.SWEPLLNB = SW0HW00.SW0HWPLN; /* plan number*/

         /* Obtain mode code wv rcv 1/26/93 tmg*/
    SW0H16A(); /* Access DTRANS.VSHPHD01*/

    SW0H16B(); /* Access DTRANS.VCRAFT01*/
         /* Obtain mode code wv rcv 1/26/93 tmg*/

    SW0H164(); /* insert new row into DSTLOC.VPLNHD01*/
  end

   /* ------------------------------------------------------------*/
   /* If 'N' or 'E' get Nike packing list header information.*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWFNC == "N" /* New plan*/
   || SW0HW00.SW0HWFNC == "E") /* Existing plan*/

    SW0HW00.SW0HWCNR = " "; /* container hold*/
    SW0HW00.SW0HWIXA = 1; /* initialize table index*/

    while (SW0HW00.SW0HWIXA <= 200 /* until index eq 200*/
     && SW0HW00.TSHCNTNR[SW0HWIXA] != " ") /* or no container*/

      SW0H165(); /* open cursor for DTRANS.VCPLHD01*/
      SW0HW00.SW0HWSC1 = "N"; /* end of file switch*/
      SW0HW00.PC3PONBR = 0; /* prime for condition*/

      /* --------------------------------------------------------*/
       /* fetch rows from packing list header while containers*/
      /* --------------------------------------------------------*/

      while (SW0HW00.SW0HWSC1 == "N") /* until end*/

        SW0H166(); /* fetch from DTRANS.VCPLHD01*/
        if (SW0HW00.SW0HWSC1 == "N") /* not end of file*/

          SW0H171(); /* select SL3NXPSN from DSTLOC.VSLCTL01*/
          SW0HW00.SL3NXPSN = SL3REC.SL3NXPSN; /* product seq num*/

          /* -------------------------------------------------------*/
           /* if po changes then insert new row in DSTLOC.VPLCPO01*/
          /* -------------------------------------------------------*/

          if (TSIREC.PC3PONBR != SW0HW00.PC3PONBR) /* po changes*/

            /* -----------------------------------------------------*/
             /* check to see if container already exists on plan,*/
               /* if it does then move 'Y' to SW0HWSC1 and stop loop.*/
            /* -------------------------------------------------------*/

            SW0HS63(); /* select from DSTLOC.VPLCPO01*/

            if (SW0HW00.SW0HWSC1 == "Y") /* end of switch*/
               /* next sentence*/
            else
              SW0H169(); /* select po hdr from DPRODC.VPOHDR01*/
              SW0H170(); /* insert row in DSTLOC.VPLCPO01*/
            end
            SW0HW00.SW0HWCNR = SW0HW00.TSHCNTNR[SW0HWIXA];
          end
        end

        SW0HW00.PC3PONBR = TSIREC.PC3PONBR; /* prim for condition*/
        if (SW0HW00.SW0HWSC1 == "N") /* not end of cursor*/

          /* ---------------------------------------------------------*/
           /* if p/l comments not found when cont/po insert then update*/
          /* ---------------------------------------------------------*/

          if (TSIREC.TSRTEXT != " " /* packing list comments*/
           && SW0HW00.SW0HWFPL == "Y") /* p/l switch*/
            SW0HS64(); /* update DSTLOC.VPLCPO01*/
          end
        end

        SW0HW00.SW0HWCTN = 0; /* cartons*/
        SW0HW00.TSOSHPQT = 0; /* units*/

        /* -------------------------------------------------------*/
         /* insert rows in carton/size table while row of*/
        /* -------------------------------------------------------*/

        if (SW0HW00.SW0HWSC1 == "N") /* not end of cursor*/
          SW0HS07(); /* insert lane carton and size rows*/

          SW0H172();

        end

      end
      SW0H180(); /* close cursor for DTRANS.VCPLHD01*/
      SW0HW00.SW0HWIXA = SW0HW00.SW0HWIXA + 1; /* increment table index*/

    end

    /* ---------------------------------------------------------*/
     /* If 'N' or 'E' commit changes*/
    /* ---------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/
  end

  if (SW0HW01.XWHCD == "07" /* if Wilsonville*/
   && SW0HM001.SWEPLLNB == 0) /* and screen plan number eq 0*/
    COMMAREA.CATOAP = "SW0I"; /* transfer to SW0I*/
    SW0HS03(); /* initialize slwrec*/
    XSSL001(); /* exit to application*/
  else
    SW0HW00.SW0HWSWD = "2"; /* Map to be displayed switch*/
    SW0HW00.SW0HWSWR = "Y"; /* Request for data switch*/
    SW0HM002.XWHCD = SW0HW01.XWHCD; /* Warehouse*/
    SW0HM002.SW0HMPLN = SW0HW01.SWEPLLNB; /* plan number*/
  end


end // end SW0H160

// Select from DSTLOC.VPLNHD01
Function SW0H161()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set SWEREC empty; /* Row storage area*/

  SWEREC.XWHCD = SW0HW01.XWHCD; /* warehouse code*/
  SWEREC.SWEPLLNB = SW0HW01.SWEPLLNB; /* plan number*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* multiple rows returned*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        converseLib.validationFailed(249); /* plan not found*/
        set SW0HM001.SWEPLLNB cursor, bold; /* highlight*/
        SLWREC.XXXLOCID = "161"; /* module identification*/
        SW0HW00.SW0HWSWF = "N"; /* format the map switch*/
        exit stack; /* exit to display map*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H161

// select container process
Function SW0H162()
   /* ------------------------------------------------------------*/
   /* select containers from DTRANS.VCNTNR01*/
   /* ------------------------------------------------------------*/

  SW0HS60(); /* open cursor in DTRANS.VCNTNR01*/

  SW0HW00.SW0HWSC3 = "N"; /* cursor switch*/
  SW0HW00.SW0HWFCS = "Y"; /* first time container switch*/

  while (SW0HW00.SW0HWSC3 == "N") /* until end*/

    SW0HS61(); /* fetch row in DTRANS.VCNTNR01*/

    if (SW0HW00.SW0HWSC3 == "N") /* not end*/

      SW0HW00.SW0HWFCS = "N"; /* first container switch;*/
      SW0HW00.TSFSHPID[SW0HWIXA] = TSHREC.TSFSHPID;
      SW0HW00.TSHNKCN[SW0HWIXA] = TSHREC.TSHNKCN;
      SW0HW00.TSHCNTNR[SW0HWIXA] = TSHREC.TSHCNTNR;

      SW0HW00.SW0HWIXA = SW0HW00.SW0HWIXA + 1; /* increment index*/

    end
  end

  SW0HS62(); /* close cursor in DTRANS.VCNTNR01*/



end // end SW0H162

// Select/update DSTLOC.VSLCTL01
Function SW0H163()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set SL3REC empty; /* clear record*/

  SL3REC.XWHCD = SW0HW01.XWHCD; /* warehouse code*/

  try
    call "IO1500" ("G4", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        set SW0HM001.XWHCD cursor, bold; /* highlight*/
        converseLib.validationFailed(214); /* warehouse not found on stock locate*/
        SLWREC.XXXLOCID = "163"; /* module identification*/

        exit stack; /* exit to display map*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "163"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSLCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H163

// Insert row in DSTLOC.VPLNHD01
Function SW0H164()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  set SWEREC empty; /* Row storage area*/

  SWEREC.XWHCD = SW0HW01.XWHCD; /* warehouse code*/
  SWEREC.SWEPLLNB = SW0HW00.SW0HWPLN; /* plan number*/
  SWEREC.XRPCD = SW0HW00.XRPCD; /* plan status*/
  SWEREC.XITCD = SW0HW01.XITCD; /* tran type code*/
  SWEREC.IN7STNBR = SW0HW01.IN7STNBR; /* stktknbr*/
  SWEREC.SL8WOGRP = 0000; /* work order group*/
  SWEREC.SWEPPLTN = 1; /* pallet number*/
  SWEREC.SWEHSTFL = "Y"; /* inspection history fl*/
  SWEREC.YMTCD = TS5REC.YMTCD; /* mode code*/
  SWEREC.SL-LAST-CRTN-FL = "N"; /* initialize to 'n'*/
  SWEREC.SL-PRDCTN-SAS-FL = "N"; /* initialize to 'n'*/

  if (SW0HM001.XWHCD == "07")
    SWEREC.SL-LOC-SZ-IND = "N";
    SWEREC.SL-HANDSTK-CS-QTY = 04;
  end

  SWEREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  SWEREC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  SWEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  SWEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  SWEREC.ZZZCHGCT = 0; /* change count*/

  try
    call "IO5350" ("A ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "164"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H164

// Open cursor  DTRANS.VCPLHD01
Function SW0H165()
   /* ------------------------------------------------------------*/
   /* Select set and open cursor for DTRANS.VCPLHD01.*/
   /* ------------------------------------------------------------*/

  set TSIREC empty; /* Set record empty*/

  TSIREC.PC3PONBR = -1; /* wildcard po number*/
  TSIREC.TSFSHPID = SW0HW00.TSFSHPID[SW0HWIXA]; /* nike ship id*/
  TSIREC.TSHNKCN1 = SW0HW00.TSHNKCN[SW0HWIXA]; /* nike container*/
  TSIREC.TSHNKCN2 = SW0HW00.TSHNKCN[SW0HWIXA]; /* nike container*/
  TSIREC.TSHNKCN3 = SW0HW00.TSHNKCN[SW0HWIXA]; /* nike container*/
  TSIREC.TSHNKCN4 = SW0HW00.TSHNKCN[SW0HWIXA]; /* nike container*/
  TSIREC.TSHNKCN5 = SW0HW00.TSHNKCN[SW0HWIXA]; /* nike container*/
  TSIREC.TSHNKCN6 = SW0HW00.TSHNKCN[SW0HWIXA]; /* nike container*/
  TSIREC.TSHNKCN7 = SW0HW00.TSHNKCN[SW0HWIXA]; /* nike container*/
  TSIREC.TSHNKCN8 = SW0HW00.TSHNKCN[SW0HWIXA]; /* nike container*/

  try
    call "IO2570" ("S8", SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "165"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H165

// Fetch row from DTRANS.VCPLHD01
Function SW0H166()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2570" ("N8", SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0HW00.SW0HWSC1 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "166"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H166

// Select from DPRODC.VPOHDR01
Function SW0H169()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set PC3REC empty; /* Row storage area*/

  PC3REC.XGPCD = TSIREC.XGPCD; /* gpc*/
  PC3REC.PC3PONBR = TSIREC.PC3PONBR; /* po number*/

  try
    call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        converseLib.validationFailed(214); /* po and gpc not found*/
        SLWREC.XXXLOCID = "169"; /* module id*/
        set SW0HM001.XWHCD cursor; /* set cursor*/

        exit stack; /* exit to display map*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "169"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H169

// Select from DTRANS.VSHPHD01
Function SW0H16A()
   /* ------------------------------------------------------------*/
   /* Access DTRANS.VSHPHD01 to obtain key information for*/
   /* accessing DTRANS.VCRAFT01. ( WV RCV 1/26/93 tmg)*/
   /* ------------------------------------------------------------*/

  set TSFREC empty;

  TSFREC.TSFSHPID = TSHREC.TSFSHPID;

  try
    call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2"; /* type of error*/
    TA1REC.TA1LOC = "SELECT TABLE ROW"; /* type of operation*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
    TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* module id*/
    TA1REC.TA1DBASE = "DTRANS"; /* database name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* table view name*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnostics*/
    return;
  end

end // end SW0H16A

// Select from DTRANS.VCRAFT01
Function SW0H16B()
   /* ------------------------------------------------------------*/
   /* Access DTRANS.VCRAFT01 to obtain mode code field for*/
   /* passing to insert to DSTLOC.VPLNHD01. (WV RCV 1/26/93 tmg)*/
   /* ------------------------------------------------------------*/

  set TS5REC empty;

  TS5REC.TSACARCD = TSFREC.TSACARCD;
  TS5REC.TS5CRAFT = TSFREC.TS5CRAFT;

  try
    call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2"; /* type of error*/
    TA1REC.TA1LOC = "SELECT TABLE ROW"; /* type of operation*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
    TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* module id*/
    TA1REC.TA1DBASE = "DTRANS"; /* database name*/
    TA1REC.TA1TBLVU = "VCRAFT01"; /* table view name*/
    TA1REC.TA1TBLKE = TS5REC.TS5KEY; /* table key*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnostics*/
    return;
  end

end // end SW0H16B

// Insert row in DSTLOC.VPLCPO01
Function SW0H170()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* clear csp record*/

  SWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  SWFREC.XWHCD = SW0HW01.XWHCD; /* warehouse code*/
  SWFREC.SWEPLLNB = SW0HW01.SWEPLLNB; /* plan number*/
  SWFREC.TSHCNTNR = SW0HW00.TSHCNTNR[SW0HWIXA]; /* container number*/
  SWFREC.XGPCD = TSIREC.XGPCD; /* gpc code*/
  SWFREC.PC3PONBR = TSIREC.PC3PONBR; /* po number*/
  SWFREC.PC3POIDT = PC3REC.PC3POIDT; /* po id.*/
  SWFREC.PCFSECD = PC3REC.PCFSECD; /* po id (season code)*/
  SWFREC.FY1FCTYC = PC3REC.FY1FCTYC; /* factory code*/
  SWFREC.PC4ORTYP = PC3REC.PC4ORTYP; /* po ot code*/
  SWFREC.SL4ZONE = "00"; /* zone code*/
  SWFREC.SWFCRCFL = "N"; /* po rcn flag*/
  SWFREC.SWFCPWOF = "N"; /* crt pl wo flag*/
  if (SW0HW01.XWHCD == "51")
    SWFREC.SWFHLDHS = "N"; /* hold handstack*/
  else
    SWFREC.SWFHLDHS = "N"; /* hold handstack*/
  end

   /* --------------------------------------------------------*/
   /* if p/l comments found insert, else set switch 'y'*/
      /* and update later.*/
   /* --------------------------------------------------------*/

  if (TSIREC.TSRTEXT != " ") /* p/l comments*/

    SWFREC.TSRTEXT = TSIREC.TSRTEXT; /* p/l comments*/
    SW0HW00.SW0HWFPL = "N"; /* p/l switch*/

  else
    SW0HW00.SW0HWFPL = "Y"; /* p/l switch*/
  end

   /* ------------------------------------------------------------*/
   /* insert row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("A ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "170"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL3REC.SL3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H170

// Select/update DSTLOC.VCSLCTL01
Function SW0H171()
   /* ------------------------------------------------------------*/
   /* Select and update prod sequence number.*/
   /* ------------------------------------------------------------*/

  set SL3REC empty; /* clear record*/

  SL3REC.XWHCD = SW0HW01.XWHCD; /* warehouse code*/

  try
    call "IO1500" ("G7", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        set SW0HM001.XWHCD cursor, bold; /* highlight*/
        converseLib.validationFailed(214); /* warehouse not found on stock locate*/
        SLWREC.XXXLOCID = "171"; /* module identification*/

        exit stack; /* exit to display map*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "171"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSLCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H171

// Insert row in DSTLOC.VPLNSY01
Function SW0H172()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/


  set SWGREC empty; /* clear csp record*/

  SWGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  SWGREC.XWHCD = SW0HW01.XWHCD; /* warehouse code*/
  SWGREC.SWEPLLNB = SW0HW01.SWEPLLNB; /* plan number*/
  SWGREC.TSHCNTNR = SW0HW00.TSHCNTNR[SW0HWIXA]; /* container number*/
  SWGREC.TSFSHPID = SW0HW00.TSFSHPID[SW0HWIXA]; /* ship id*/
  SWGREC.XGPCD = TSIREC.XGPCD; /* gpc code*/
  SWGREC.PC3PONBR = TSIREC.PC3PONBR; /* po number*/
  SWGREC.SY1STNBR = TSIREC.SY1STNBR; /* style number*/
  SWGREC.SY2CLRID = TSIREC.SY2CLRID; /* color id*/
  SWGREC.XDMCD = TSIREC.XDMCD; /* dimension code*/
  SWGREC.XQACD = TSIREC.XQACD; /* quality code*/
  SWGREC.XOWCD = TSIREC.XOWCD; /* owner group code*/
  SWGREC.PC2INSEG = TSIREC.PC2INSEG; /* pc_cu_in_seg_cd*/
  SWGREC.XUMCD = TSIREC.XUMCD; /* unit of measure code*/
  SWGREC.SWGPSEQN = SW0HW00.SL3NXPSN; /* po id.*/
  SWGREC.SWFHLDHS = "N"; /* hold handstack flag*/
  SWGREC.XSLCD = "000"; /* sl class code*/
  SWGREC.XPGCD = "00"; /* packaging code*/
  SWGREC.XEGCD = "000"; /* engineering differenc*/
  SWGREC.SL-PRDCTN-SAS-FL = "N"; /* initialize to 'n'*/
  SWGREC.SWGPRDCS = SW0HW03.SWGPRDCS; /* cartons*/
  SWGREC.SWGPRDUN = SW0HW03.SWGPRDUN; /* units*/
  SWGREC.TSISTAT = TSIREC.TSISTAT; /* p/l status*/

   /* ------------------------------------------------------------*/
   /* insert row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("A ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "172"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H172

// Close cursor  DTRANS.VCPLHD01
Function SW0H180()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2570" ("C8", SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "180"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H180

// Update row in DSTLOC.VPLNHD01
Function SW0H182()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  SWEREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  SWEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  SWEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

  try
    call "IO5350" ("U ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback all changes*/

      SW0HW00.SW0HWSWR = "Y"; /* request for data switch*/
      SLWREC.XXXLOCID = "182"; /* module identification*/
      converseLib.validationFailed(300); /* plan not found update cancelled*/
      exit stack;

    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "182"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H182

// select DSTLOC.VplCPO01
Function SW0H183()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* clear csp record*/
  SWFREC.TSHCNTNR = SW0HW01.TSHCNTNR[SW0HWIX1];

  try
    call "IO5340" ("S4", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "183"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL3REC.SL3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H183

// fetch row from dstloc.vplcpo01
Function SW0H184()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("N4", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        SW0HW00.SW0HWDNF = "Y"; /* end of search*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "184"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL3REC.SL3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H184

// select unique vplnhr01
Function SW0H185()
   /* ------------------------------------------------------------*/
   /* select unique*/
   /* ------------------------------------------------------------*/

  set SWEREC empty;

  SWEREC.XWHCD = SWFREC.XWHCD;
  SWEREC.SWEPLLNB = SWFREC.SWEPLLNB;

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "185"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL3REC.SL3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H185

// close dstloc.vplcpo01
Function SW0H186()
   /* ------------------------------------------------------------*/
   /* close the file*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("C4", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "186"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL3REC.SL3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H186

// Display the plan
Function SW0H200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0H210(); /* Obtain the data to display*/

  SW0H220(); /* Format and display the map*/

  SW0H230(); /* Check attention identifier*/

  SW0H240(); /* Reset fields to normal intensity*/

  SW0H250(); /* Verify the entered data*/

  SW0H260(); /* Process valid input request*/


end // end SW0H200

// Obtain the data
Function SW0H210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWSWR == "Y" /* Obtain data*/
   && converseVar.validationMsgNum == 0) /* or no error was found*/
    /* next sentence*/
  else
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* establish temporary storage length.*/
   /* ------------------------------------------------------------*/

  SW0HW00.XXXTSLEN = 740; /* temporary storage length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* no message to display*/
    SW0HW00.XXXTSPAG = 1; /* page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  SW0H231(); /* Purge temporay storage*/

  SW0HW02.XWHCD = SW0HM002.XWHCD; /* Warehouse code*/
  SW0HW02.SW0HWPLN = SW0HM002.SW0HMPLN; /* plan statusr*/

   /* ------------------------------------------------------------*/
   /* retrieve warehouse and plan status description.*/
   /* ------------------------------------------------------------*/

  if (SW0HW02.XWHCD in XWHTBL.XWHCD)
    SW0HW00.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  SW0HS29(); /* select from dstloc.vplnhd01*/

  SW0HW00.XRPCD = SWEREC.XRPCD; /* plan status*/

  if (SW0HW00.XRPCD in XRPTBL.XRPCD)
    SW0HW00.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* Obtain detail information from these tables :*/
       /* DSTLOC.VPLCPO01, DSTLOC.VPLNSY01 and DTRANS.VCPLHD01*/
   /* ------------------------------------------------------------*/
   /* initialize indexes*/
   /* ------------------------------------------------------------*/

  SW0HW00.SW0HWIX2 = 1; /* Initialize line  index*/
  SW0HW00.SW0HWIX1 = 1; /* Initialize array index*/

   /* -----------------------------------------------------------*/
   /* if function is 'M'aintain then wildcard for all containers*/
   /* -----------------------------------------------------------*/

  if (SW0HW00.SW0HWFNC == "M") /* maintain*/
    move " " to SW0HW01.TSHCNTNR[1] for all; /* container array*/
    SW0HW01.TSHCNTNR[1] = "*"; /* setup wildcard*/
  end

   /* ------------------------------------------------------------*/
   /* fetch and format data until end of containers and cursors*/
   /* ------------------------------------------------------------*/

  while (SW0HW00.SW0HWIX1 <= 12) /* until eq 12*/

    if (SW0HW01.TSHCNTNR[SW0HWIX1] != " ") /* container entered*/

      SW0H211(); /* open cursor for DSTLOC.VPLCPO01*/
      SW0HW00.SW0HWSC4 = "N"; /* Initialize cursor switch*/

      while (SW0HW00.SW0HWSC4 == "N") /* Until end of cursor*/

        SW0H212(); /* Fetch row from DSTLOC.VPLCPO01*/
        SW0H213(); /* open cursor for DSTLOC.VPLNSY01*/

        SW0HW00.SW0HWSC5 = "N"; /* Initialize cursor switch*/

        while (SW0HW00.SW0HWSC5 == "N") /* until end of cursor*/

          SW0H214(); /* fetch row from DSTLOC.VPLNSY01*/
          SW0H215(); /* obtain life cycle info*/

          /* --------------------------------------------------------*/
           /* save data in display storage*/
          /* --------------------------------------------------------*/

          if (SW0HW00.SW0HWSC5 == "N" /* not end of cursor*/
           && SW0HW00.SW0HWSC4 == "N") /* not end of cursor*/

            SW0HS20(); /* save data in display storage*/

            /* --------------------------------------------------------*/
             /* if page is full add it to temporary storage*/
            /* --------------------------------------------------------*/

            if (SW0HW00.SW0HWIX2 > 12) /* page is full*/

              SW0HS21(); /* add page to temporary storage*/
              SW0HW00.SW0HWIX2 = 1; /* display line index*/

            end
          end
        end

        SW0H217(); /* Close cursor DSTLOC.VPLNSY01*/

        /* ----------------------------------------------------------*/
         /* after each po/container from DSTLOC.VPLCPO01*/
           /* add the page to temporary storage.*/
        /* ----------------------------------------------------------*/

        if (SW0HW00.SW0HWSC4 == "N") /* not end of cursor*/
          SW0HS21(); /* add page to temporary storage*/
          SW0HW00.SW0HWIX2 = 1; /* line index*/
          SW0HW00.SW0HWPCT = 0; /* percent total*/
          SW0HW00.SW0HWTCT = 0; /* carton total*/
        end
      end

      SW0H218(); /* Close cursor DSTLOC.VPLCPO01*/

    end

    SW0HW00.SW0HWIX1 = SW0HW00.SW0HWIX1 + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* add any partially formatted last page to the queue*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWIX2 > 1) /* page was formatted*/
    SW0HS21(); /* add page to temporary storage*/
    SW0HW00.SW0HWPCT = 0; /* percent total*/
    SW0HW00.SW0HWTCT = 0; /* carton total*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/
  SW0HW00.SW0HWFFL = "N"; /* First time flag*/


end // end SW0H210

// Open cursor in DSTLOC.VPLCPO01
Function SW0H211()
   /* ------------------------------------------------------------*/
   /* Select set and open cursor in DSTLOC.VPLCPO01.*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* Set record empty*/

  SWFREC.XWHCD = SW0HW01.XWHCD; /* warehouse code*/
  SWFREC.SWEPLLNB = SW0HW01.SWEPLLNB; /* plan number*/
  SWFREC.TSHCNTNR = SW0HW01.TSHCNTNR[SW0HWIX1]; /* container*/
  SWFREC.XGPCD = "*"; /* gpc code*/
  SWFREC.PC3PONBR = -1; /* po number*/

  try
    call "IO5340" ("S1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "211"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H211

// Fetch row in DSTLOC.VPLCPO01
Function SW0H212()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("N1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0HW00.SW0HWSC4 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "212"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  SW0H218(); /* Close cursor DSTLOC.VPLCPO01*/
  exit stack; /* Exit to display map*/


end // end SW0H212

// Open cursor in DSTLOC.VPLNSY01
Function SW0H213()
   /* ------------------------------------------------------------*/
   /* Select set and open cursor for DSTLOC.VPLNSY01.*/
   /* ------------------------------------------------------------*/

  set SWGREC empty; /* Set record empty*/

  SWGREC.XWHCD = SWFREC.XWHCD; /* warehouse*/
  SWGREC.SWEPLLNB = SWFREC.SWEPLLNB; /* plan number*/
  SWGREC.TSHCNTNR = SWFREC.TSHCNTNR; /* container*/
  SWGREC.XGPCD = SWFREC.XGPCD; /* gpc code*/
  SWGREC.PC3PONBR = SWFREC.PC3PONBR; /* po number*/

  try
    call "IO5370" ("S1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "213"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H213

// Fetch row in DSTLOC.VPLNSY01
Function SW0H214()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("N1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0HW00.SW0HWSC5 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "214"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H214

// Obtain info for life cycle
Function SW0H215()
   /* ------------------------------------------------------------*/
   /* Select life cycle code and determine which one to use.*/
   /* ------------------------------------------------------------*/

  SW0HS22(); /* select life cycle code from DPROD.VCOLOR01*/

  if (SQLCA.VAGen_SQLCODE != 0) /* row not found*/

    SW0HW00.SW0HWLCC = "  "; /* life cycle code*/
    SLWREC.XXXLOCID = "215"; /* module id*/
    converseLib.validationFailed(282); /* data not found for display*/
    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* check life cycle codes and effective dates 1 thru 4*/
   /* ------------------------------------------------------------*/

  if (SY2REC.SY2CEDT1 <= XX0XW01.XX0XWDAT /* not gt current date*/
   && SY2REC.XLCCD1 != " ")               /* and not spaces*/

    SW0HW00.SW0HWLCC = SY2REC.XLCCD1; /* life cycle code*/

  else

    if (SY2REC.SY2CEDT2 <= XX0XW01.XX0XWDAT /* not gt current date*/
     && SY2REC.XLCCD2 != " ")               /* and not spaces*/

      SW0HW00.SW0HWLCC = SY2REC.XLCCD2; /* life cycle code*/

    else

      if (SY2REC.SY2CEDT3 <= XX0XW01.XX0XWDAT /* not gt current date*/
       && SY2REC.XLCCD3 != " ")               /* and not spaces*/

        SW0HW00.SW0HWLCC = SY2REC.XLCCD3; /* life cycle code*/

      else

        if (SY2REC.SY2CEDT4 <= XX0XW01.XX0XWDAT /* not gt current date*/
         && SY2REC.XLCCD4 != " ")               /* and not spaces*/

          SW0HW00.SW0HWLCC = SY2REC.XLCCD4; /* life cycle code*/

        else

          SW0HW00.SW0HWLCC = SY2REC.XLCCD1; /* life cycle code*/

        end
      end
    end
  end


end // end SW0H215

// Close cursor  DSTLOC.VPLNSY01
Function SW0H217()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("C1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "217"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H217

// Close cursor  DSTLOC.VPLCPO01
Function SW0H218()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("C1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "218"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H218

// Format and converse the map
Function SW0H220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0HW00.SW0HWSWF == "Y") /* Map must be formatted*/
      SW0H221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Show satellite indicator only for whse '51'.*/
   /* ------------------------------------------------------------*/

  if (SW0HM002.XWHCD == "51") /* If whse 51*/

    if (SW0HM002.SL-SAT-STG-LOC-IND == " ")
      SW0HM002.SL-SAT-STG-LOC-IND = "N";
    end

    set SW0HM002.SW0HM-SAT-LABEL skip;
   /* SET SW0HM002.SL-SAT-STG-LOC-IND NORMAL;*/

  else
    SW0HM002.SL-SAT-STG-LOC-IND = " ";
    set SW0HM002.SW0HM-SAT-LABEL skip, invisible;
    set SW0HM002.SL-SAT-STG-LOC-IND skip, invisible;
  end

   /* ------------------------------------------------------------*/
   /* Show QA flag only for whse '51'.*/
   /* ------------------------------------------------------------*/

  if (SW0HM002.XWHCD == "51") /* If whse 51*/

    if (SW0HM002.SW0HMQAF == " ")
      SW0HM002.SW0HMQAF = "N"; /* Default to N*/
    end

    set SW0HM002.SW0HMQCD skip; /* Disable QC code field*/
    set SW0HM002.SW0HMQAL skip;
    set SW0HM002.SW0HMQAF normal;

  else
    SW0HM002.SW0HMQAF = " ";
    set SW0HM002.SW0HMQAL skip, invisible; /* Hide QA field*/
    set SW0HM002.SW0HMQAF skip, invisible;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0HM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0HM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0HM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0HM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0HM002.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0HM002 alarm; /* Indicate sound alarm*/

  end

  converse SW0HM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0HM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0HM002.CAITEM; /* Application data*/



end // end SW0H220

// Format the display data
Function SW0H221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  SW0HW02.XWHCD = SW0HM002.XWHCD; /* warehouse code*/
  SW0HW02.SW0HWPLN = SW0HM002.SW0HMPLN; /* plan status*/
  SW0HW02.SL-SAT-STG-LOC-IND = SW0HM002.SL-SAT-STG-LOC-IND;

  set SW0HM002 initial; /* M001 input/output area*/

  SW0HW00.SW0HWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0HW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SW0HW00.SW0HWSWU == "Y") /* Current page was changed*/

        SW0HS01(); /* Update temporary storage page*/

        SW0HW00.SW0HWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SW0HW00.XXXTSPAG > SW0HW00.TA5TSQIX) /* Desired greater highest*/
        SW0HW00.XXXTSPAG = SW0HW00.TA5TSQIX; /* Default to highest*/
      end

      SW0HS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SW0HM002.XXXLITPG skip; /* "PAGE" literal*/
    SW0HM002.XXXTSPAG = SW0HW00.XXXTSPAG; /* Current page*/
    set SW0HM002.XXXLITOF skip; /* "OF" literal*/
    SW0HM002.TA5TSQIX = SW0HW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (SW0HW02.SW0HMICD <= 0) /* inspection number not present*/
    set SW0HM002.SW0HMICD cursor; /* Position cursor*/
  end

  SW0HM002.XWHCD = SW0HW02.XWHCD; /* Warehouse code*/
  SW0HM002.XWHABRV = SW0HW02.XWHABRV; /* warehouse description*/
  SW0HM002.SW0HMPLN = SW0HW02.SW0HWPLN; /* plan number*/
  SW0HM002.XRPCD = SW0HW02.XRPCD; /* plan status*/
  SW0HM002.XRPDESC = SW0HW02.XRPDESC; /* plan description*/
  SW0HM002.TSHCNTNR = SW0HW02.TSHCNTNR; /* container*/
  SW0HM002.PC3PONBR = SW0HW02.PC3PONBR; /* po number*/
  SW0HM002.SW0HMPOT = SW0HW02.SW0HMPOT; /* po id*/
  SW0HM002.PCFSECD = SW0HW02.PCFSECD; /* season*/
  SW0HM002.SL-SAT-STG-LOC-IND = SW0HW02.SL-SAT-STG-LOC-IND;
  SW0HM002.SW0HMCMT = SW0HW02.SW0HMCMT; /* comments*/
  SW0HM002.SW0HMICD = SW0HW02.SW0HMICD;
  SW0HM002.SW0HMPIN = SW0HW02.SW0HMPIN; /* percent inspected*/
  if (SW0HW02.XWHCD == "51") /* QA flag translation*/
    if (SW0HW02.SW0HMQCD == 10)
      SW0HW02.SW0HMQCD = 0;
    end
  end

  SW0HM002.SW0HMQCD = SW0HW02.SW0HMQCD; /* quality code*/
  SW0HM002.SW0HMQAF = SW0HW02.SW0HMQAI; /* QA flag*/
  SW0HM002.SW0HMTCN = SW0HW02.SW0HMTCN; /* total cartons*/
  SW0HM002.SW0HMHHS = SW0HW02.SW0HMHHS; /* hold hand stack*/

  SW0HW00.SW0HWIX2 = 1; /* Initialize line index*/

  while (SW0HW00.SW0HWIX2 <= 12 /* Until screen is full*/
   && SW0HW02.XGPCD[SW0HWIX2] > " ")

    set SW0HM002.SWHINSN1[SW0HWIX2] normal;
    set SW0HM002.SWAPCTIN[SW0HWIX2] normal;
    set SW0HM002.SWHINSN2[SW0HWIX2] normal;
    set SW0HM002.SWFHLDHS[SW0HWIX2] normal;
    if (SW0HM002.XWHCD == "51") /* Disable QC cd for whse 51*/
      set SW0HM002.SWHINSN2[SW0HWIX2] skip;
    end

    SW0HM002.TSISTAT[SW0HWIX2] = SW0HW02.TSISTAT[SW0HWIX2];
    SW0HM002.XGPCD[SW0HWIX2] = SW0HW02.XGPCD[SW0HWIX2];
    SW0HM002.SY1STNBR[SW0HWIX2] = SW0HW02.SY1STNBR[SW0HWIX2];
    SW0HM002.SY2CLRID[SW0HWIX2] = SW0HW02.SY2CLRID[SW0HWIX2];
    SW0HM002.XDMCD[SW0HWIX2] = SW0HW02.XDMCD[SW0HWIX2];
    SW0HM002.XQACD[SW0HWIX2] = SW0HW02.XQACD[SW0HWIX2];
    SW0HM002.SW0HMLCD[SW0HWIX2] = SW0HW02.SW0HMLCD[SW0HWIX2];
    SW0HM002.PC2INSEG[SW0HWIX2] = SW0HW02.PC2INSEG[SW0HWIX2];
    SW0HM002.XEGCD[SW0HWIX2] = SW0HW02.XEGCD[SW0HWIX2];
    SW0HM002.XPGCD[SW0HWIX2] = SW0HW02.XPGCD[SW0HWIX2];
    SW0HM002.XUMCD[SW0HWIX2] = SW0HW02.XUMCD[SW0HWIX2];
    SW0HM002.XOWCD[SW0HWIX2] = SW0HW02.XOWCD[SW0HWIX2];
    SW0HM002.SWGPRDUN[SW0HWIX2] = SW0HW02.SWGPRDUN[SW0HWIX2];
    SW0HM002.SWGPRDCS[SW0HWIX2] = SW0HW02.SWGPRDCS[SW0HWIX2];
    SW0HM002.SWHINSN1[SW0HWIX2] = SW0HW02.SWHINSN1[SW0HWIX2];
    SW0HM002.SWAPCTIN[SW0HWIX2] = SW0HW02.SWAPCTIN[SW0HWIX2];
    SW0HM002.SWHINSN2[SW0HWIX2] = SW0HW02.SWHINSN2[SW0HWIX2];
    SW0HM002.SWFHLDHS[SW0HWIX2] = SW0HW02.SWFHLDHS[SW0HWIX2];

    SW0HW00.SW0HWIX2 = SW0HW00.SW0HWIX2 + 1; /* Increment line index*/

  end


end // end SW0H221

// Check attention identifier
Function SW0H230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0HW00.SW0HWSWR == "Y") /* Request for data*/
      set SW0HW02 empty; /* M001 display storage*/
    end

    SW0HW00.SW0HWFFL = "Y"; /* first time switch*/
    SW0HW00.SW0HWSWF = "Y"; /* Format the map switch*/
    SW0HW00.SW0HWSWR = "Y"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0HM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0HS23(); /* update the slwrec*/
      SW0H231(); /* purge temporary storage*/
      XSSL001(); /* Exit to another application*/

      set SW0HM002.CATOAP cursor, bold; /* Highlight*/
      SW0HW00.SW0HWSWD = "1"; /* map to be displayed switch*/

    else

      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* -----------------------------------------------------------*/
   /* Update the fields in the slwrec*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf17)

    SW0HS23();

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf6  /* or PF6 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf17) /* or PF17 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0HM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      SW0HW01.SWEPLLNB = 0; /* plan number*/
      move " " to SW0HW01.TSHCNTNR[1] for all; /* container*/
      SW0HW01.XITCD = " "; /* transaction code*/
      SW0HW01.IN7STNBR = 0; /* stock transfer number*/

      SW0HW00.SW0HWFFL = "Y"; /* first time switch*/
      SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/
      SW0HW00.SW0HWSWD = "1"; /* map to be displayed switch*/
      SW0HW00.SW0HWSWF = "Y"; /* format the map switch*/

      exit stack;

    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "TS09"; /* TO application*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "TS0N"; /* TO application*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "SW0I"; /* TO application*/
    end

    SW0H231(); /* purge temporary storage*/
    XSSL001(); /* Exit to another application*/
    SW0HW00.SW0HWSWD = "1"; /* map to be displayed switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* if pa2 was previously hit, we need to get request data*/
   /* ------------------------------------------------------------*/
  if (SW0HW00.SW0HWFFL == "Y" /* first time flag*/
   || SW0HW00.SW0HWSWR == "Y") /* data request flag*/
    exit stack; /* exit to display map*/
  end


end // end SW0H230

// Purge any temporary storage
Function SW0H231()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0HW02 empty; /* M002 display storage*/

  SW0HW00.SW0HWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0HW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "231"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H231

// Reset highlighted fields
Function SW0H240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set SW0HM002.CATOAP initialAttributes; /* TO application*/
  set SW0HM002.CAITEM initialAttributes; /* Application data*/
  set SW0HM002.SW0HMICD initialAttributes; /* inspection number*/
  set SW0HM002.SW0HMQCD initialAttributes; /* quality code*/
  set SW0HM002.SW0HMHHS initialAttributes; /* hold handstack*/
  set SW0HM002.SW0HMPIN initialAttributes; /* percent inspected*/
  if (SW0HM002.XWHCD == "51")
    set SW0HM002.SW0HMQAF initialAttributes; /* QA flag*/
  end

  SW0HW00.SW0HWIX2 = 1; /* intialize line index*/

  while (SW0HW00.SW0HWIX2 <= 12 /* until end of lines*/
   && SW0HM002.TSISTAT[SW0HWIX2] > " ") /* or end of display*/

    set SW0HM002.SWHINSN1[SW0HWIX2] normal; /* reset inspection number*/
    set SW0HM002.SWAPCTIN[SW0HWIX2] normal; /* reset percent*/
    set SW0HM002.SWHINSN2[SW0HWIX2] normal; /* reset inspection number*/
    set SW0HM002.SWFHLDHS[SW0HWIX2] normal; /* reset hold hand stack*/

    SW0HW00.SW0HWIX2 = SW0HW00.SW0HWIX2 + 1; /* increment line index*/

  end



end // end SW0H240

// Verify data that was entered
Function SW0H250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/


  if (SW0HM002.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "250"; /* Module identification*/
    set SW0HM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SW0H251(); /* Verify scroll request*/

    if (converseVar.validationMsgNum != 0)
      exit stack;
    else
      return;
    end
  end

   /* -----------------------------------------------------------*/
   /* get header task and qc counts*/
   /* -----------------------------------------------------------*/

  SW0HW00.SW0HWHTC = 0;
  SW0HW00.SW0HWHQC = 0;
  if (SW0HM002.SW0HMICD != 0)
    SW0HW00.SW0HWSUM = 0;
    SW0HW00.XGPCD = "*";
    SW0HW00.SW0HWINB = SW0HM002.SW0HMICD; /* inspection num*/
    SW0H254(); /* get count of tasks*/
    SW0HW00.SW0HWHTC = SW0HW00.SW0HWSUM;
  end

  if (SW0HM002.SW0HMQCD != 0)
    SW0HW00.SW0HWSUM = 0;
    SW0HW00.XGPCD = "*";
    SW0HW00.SW0HWINB = SW0HM002.SW0HMQCD; /* inspection num*/
    SW0H254(); /* get count of tasks*/
    SW0HW00.SW0HWHQC = SW0HW00.SW0HWSUM;
  end

   /* -----------------------------------------------------------*/
   /* verify the modified fields in lines 1 to 12 (product level)*/
   /* -----------------------------------------------------------*/

  SW0HW00.SW0HWIX2 = 12; /* initialize screen index*/

  while (SW0HW00.SW0HWIX2 > 0) /* until no lines left*/

    if (SW0HM002.TSISTAT[SW0HWIX2] != " ") /* last line of data*/

      /* ------------------------------------------------------------*/
       /* validate hold hanstack entered*/
      /* ------------------------------------------------------------*/

      if (SW0HM002.SWFHLDHS[SW0HWIX2] == " " /* valid hold hand stack*/
       || SW0HM002.SWFHLDHS[SW0HWIX2] == "Y" 
       || SW0HM002.SWFHLDHS[SW0HWIX2] == "N")
         /* next sentence*/
      else

        set SW0HM002.SWFHLDHS[SW0HWIX2] cursor, bold; /* highlight*/
        SLWREC.XXXLOCID = "250"; /* module id*/
        converseLib.validationFailed(11); /* invalid value entered*/

      end

      if (SW0HM002.SWHINSN1[SW0HWIX2] != 0)
        SW0HW00.SW0HWSUM = 0;
        SW0HW00.XGPCD = SW0HM002.XGPCD[SW0HWIX2];
        SW0HW00.SW0HWINB = SW0HM002.SWHINSN1[SW0HWIX2];
        SW0H254(); /* get count of tasks*/
        SW0HW00.SW0HWSUM = SW0HW00.SW0HWSUM + SW0HW00.SW0HWHTC;
        if (SW0HW00.SW0HWSUM > 20)

          SLWREC.XXXLOCID = "250"; /* module id*/
          converseLib.validationFailed(301);
          set SW0HM002.SWHINSN1[SW0HWIX2] cursor, bold;
          set SW0HM002.SW0HMICD bold;

        end
      end

      if (SW0HM002.SWHINSN2[SW0HWIX2] != 0) /* there is a new qc code*/

        if (SW0HM002.SWHINSN2[SW0HWIX2] == SW0HM002.SW0HMQCD)

          SLWREC.XXXLOCID = "250"; /* module identification*/
          converseLib.validationFailed(266); /* duplicate qc codes*/
          set SW0HM002.SWHINSN2[SW0HWIX2] cursor, bold;
          set SW0HM002.SW0HMQCD bold;

        end

        if (SW0HM002.SW0HMQAF == "Y") /* If PO was flagged to QA*/

          SLWREC.XXXLOCID = "250"; /* module identification*/
          converseLib.validationFailed(266); /* duplicate qc codes*/
          set SW0HM002.SWHINSN2[SW0HWIX2] cursor, bold;
          set SW0HM002.SW0HMQAF bold;

        end
      end


      if (SW0HM002.SWHINSN2[SW0HWIX2] != 0) /* there is a new qc code*/
        SW0HW00.SW0HWSUM = 0;
        SW0HW00.XGPCD = SW0HM002.XGPCD[SW0HWIX2];
        SW0HW00.SW0HWINB = SW0HM002.SWHINSN2[SW0HWIX2];
        SW0H254(); /* get count of tasks*/
        SW0HW00.SW0HWSUM = SW0HW00.SW0HWSUM + SW0HW00.SW0HWHQC;
        if (SW0HW00.SW0HWSUM > 20)

          SLWREC.XXXLOCID = "250"; /* module id*/
          converseLib.validationFailed(301);
          set SW0HM002.SWHINSN2[SW0HWIX2] cursor, bold;
          set SW0HM002.SW0HMQCD bold;

        end
      end
      /* ---------------------------------------------------*/
       /* validate percent is numeric*/
      /* ---------------------------------------------------*/

      if (SW0HM002.SWAPCTIN[SW0HWIX2] <= 100 /* numeric*/
       && SW0HM002.SWAPCTIN[SW0HWIX2] > 0)  

        if (SW0HM002.SWHINSN1[SW0HWIX2] == 0)
          SLWREC.XXXLOCID = "250"; /* module id*/
          converseLib.validationFailed(11);
          set SW0HM002.SWAPCTIN[SW0HWIX2] cursor, bold;
        end
      end

      if (SW0HM002.SWAPCTIN[SW0HWIX2] <= 100 /* numeric*/
       && SW0HM002.SWAPCTIN[SW0HWIX2] >= 0) 
         /* next sentence*/
      else
        SLWREC.XXXLOCID = "250"; /* module id*/
        converseLib.validationFailed(11);
        set SW0HM002.SWAPCTIN[SW0HWIX2] cursor, bold;
      end

      if (SW0HM002.SWAPCTIN[SW0HWIX2] <= 100 /* numeric*/
       && SW0HM002.SWAPCTIN[SW0HWIX2] >= 0   
       && SW0HM002.SWHINSN1[SW0HWIX2] > 0)  

        if (SW0HM002.SWAPCTIN[SW0HWIX2] != SW0HW02.SWAPCTIN[SW0HWIX2])
          SW0HW00.SW0HWINB = SW0HM002.SWHINSN1[SW0HWIX2];
          SW0H253(); /* select max% from DSTLOC.VINTSK01*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (SWBREC.SWAPCTIN == 0)
              SWBREC.SWAPCTIN = 1.0;
            end
            SWBREC.SWAPCTIN = SWBREC.SWAPCTIN * 100;
            if (SW0HM002.SWAPCTIN[SW0HWIX2] <= SWBREC.SWAPCTIN)
               /* next sentence*/
            else
              set SW0HM002.SWAPCTIN[SW0HWIX2] cursor, bold;
              SLWREC.XXXLOCID = "250"; /* module id*/
              converseLib.validationFailed(11); /* invalid value entered*/
            end
          else
            set SW0HM002.SWHINSN1[SW0HWIX2] cursor, bold;
            SLWREC.XXXLOCID = "250"; /* module id*/
            converseLib.validationFailed(11); /* invalid value entered*/

          end
        end
      end

      if (SW0HM002.SWHINSN1[SW0HWIX2] != 0)

        if (SW0HM002.SWHINSN1[SW0HWIX2] == SW0HM002.SW0HMICD)
          SLWREC.XXXLOCID = "250"; /* module id*/
          converseLib.validationFailed(355); /* duplicate insp codes*/
          set SW0HM002.SWHINSN1[SW0HWIX2] cursor, bold;
          set SW0HM002.SW0HMICD bold;
        end

        if (SW0HM002.SW0HMQAF == "Y") /* If PO was flagged to QA*/

          SLWREC.XXXLOCID = "250"; /* module identification*/
          converseLib.validationFailed(355); /* duplicate insp codes*/
          set SW0HM002.SWHINSN1[SW0HWIX2] cursor, bold;
          set SW0HM002.SW0HMQAF bold;

        end
      end

      if (SW0HM002.SWHINSN1[SW0HWIX2] > 0) /* numeric*/
        SW0HW00.SW0HWINB = SW0HM002.SWHINSN1[SW0HWIX2];
        SW0H252(); /* select from DSTLOC.VINSP001*/
        if (SQLCA.VAGen_SQLCODE != 0)
          set SW0HM002.SWHINSN1[SW0HWIX2] cursor, bold; /* highlight*/
          SLWREC.XXXLOCID = "250"; /* module id*/
          converseLib.validationFailed(245); /* inspection does not exist*/
        else
          if (SWAREC.XXXSTAT != "A")
            set SW0HM002.SWHINSN1[SW0HWIX2] cursor, bold; /* highlight*/
            SLWREC.XXXLOCID = "250"; /* module id*/
            converseLib.validationFailed(10); /* status inactive for this code*/
          end
        end
      end

      if (SW0HM002.SWHINSN2[SW0HWIX2] > 0) /* numeric*/
        SW0HW00.SW0HWINB = SW0HM002.SWHINSN2[SW0HWIX2];
        SW0H252(); /* select from DSTLOC.VINSP001*/
        if (SQLCA.VAGen_SQLCODE != 0)
          set SW0HM002.SWHINSN2[SW0HWIX2] cursor, bold; /* highlight*/
          SLWREC.XXXLOCID = "250"; /* module id*/
          converseLib.validationFailed(245); /* inspection does not exist*/
        else
          if (SWAREC.XXXSTAT != "A")
            set SW0HM002.SWHINSN2[SW0HWIX2] cursor, bold; /* highlight*/
            SLWREC.XXXLOCID = "250"; /* module id*/
            converseLib.validationFailed(10); /* status inactive for this code*/
          end
        end
      end

    end

    SW0HW00.SW0HWIX2 = SW0HW00.SW0HWIX2 - 1; /* decrement index*/

  end
   /* -----------------------------------------------------------*/
   /* verify the modified fields in hdr(plan level)*/
   /* -----------------------------------------------------------*/

  if (SW0HM002.XWHCD == "51") /* Edit for whse 51 only*/

    if (SW0HM002.SL-SAT-STG-LOC-IND == "Y" /* valid satellite bulk ind*/
     || SW0HM002.SL-SAT-STG-LOC-IND == "N")
      /* next sentence*/
    else

      set SW0HM002.SL-SAT-STG-LOC-IND cursor, bold; /* highlight*/
      SLWREC.XXXLOCID = "250"; /* module id*/
      converseLib.validationFailed(11); /* invalid value entered*/

    end

    if (SW0HM002.SW0HMQAF == "Y" /* valid QA flag*/
     || SW0HM002.SW0HMQAF == "N" /* Y or N or space*/
     || SW0HM002.SW0HMQAF == " ") /* Y or N or space*/
      /* next sentence*/
    else

      set SW0HM002.SW0HMQAF cursor, bold; /* highlight*/
      SLWREC.XXXLOCID = "250"; /* module id*/
      converseLib.validationFailed(11); /* invalid value entered*/

    end

  end
  if (SW0HM002.SW0HMHHS == " " /* valid hold hand stack*/
   || SW0HM002.SW0HMHHS == "Y" 
   || SW0HM002.SW0HMHHS == "N")
     /* next sentence*/
  else

    set SW0HM002.SW0HMHHS cursor, bold; /* highlight*/
    SLWREC.XXXLOCID = "250"; /* module id*/
    converseLib.validationFailed(11); /* invalid value entered*/

  end

  if (SW0HM002.XWHCD != "07" /* BYPASS QC CARTON ROUTING FOR WHSE 07*/
   && SW0HM002.XWHCD != "51") /* BYPASS QC CARTON ROUTING FOR WHSE 51*/
    if (SW0HM002.SW0HMQCD == 0)
      set SW0HM002.SW0HMQCD cursor, bold;
      SLWREC.XXXLOCID = "250"; /* module id*/
      converseLib.validationFailed(09); /* required field*/
    end
  end

  if (SW0HM002.SW0HMICD > 0) /* numeric*/
    SW0HW00.SW0HWINB = SW0HM002.SW0HMICD;
    SW0H252(); /* select from DSTLOC.VINSP001*/
    if (SQLCA.VAGen_SQLCODE != 0)
      set SW0HM002.SW0HMICD cursor, bold; /* highlight*/
      SLWREC.XXXLOCID = "250"; /* module id*/
      converseLib.validationFailed(245); /* inspection does not exist*/
    else
      if (SWAREC.XXXSTAT != "A")
        set SW0HM002.SW0HMICD cursor, bold; /* highlight*/
        SLWREC.XXXLOCID = "250"; /* module id*/
        converseLib.validationFailed(10); /* status inactive for this code*/
      end
    end
  end

  if (SW0HM002.SW0HMQCD > 0) /* numeric*/
    SW0HW00.SW0HWINB = SW0HM002.SW0HMQCD;
    SW0H252(); /* select from DSTLOC.VINSP001*/
    if (SQLCA.VAGen_SQLCODE != 0)
      set SW0HM002.SW0HMQCD cursor, bold; /* highlight*/
      SLWREC.XXXLOCID = "250"; /* module id*/
      converseLib.validationFailed(245); /* inspection does not exist*/
    else
      if (SWAREC.XXXSTAT != "A")
        set SW0HM002.SW0HMQCD cursor, bold; /* highlight*/
        SLWREC.XXXLOCID = "250"; /* module id*/
        converseLib.validationFailed(10); /* status inactive for this code*/
      end
    end
  end

   /* ---------------------------------------------------*/
   /* validate percent is numeric, and less than percent*/
   /* in the inspection task, compare the 2 after taking*/
   /* away decimal point.*/
   /* ---------------------------------------------------*/

  if (SW0HM002.SW0HMPIN != 0
   && SW0HM002.SW0HMICD == 0)

    set SW0HM002.SW0HMPIN cursor, bold; /* highlight*/
    SLWREC.XXXLOCID = "250"; /* module id*/
    converseLib.validationFailed(337); /* % entry needs insp code*/
  end

  if (SW0HM002.SW0HMICD != SW0HW02.SW0HMICD /* insp changed*/
   || SW0HM002.SW0HMPIN != SW0HW02.SW0HMPIN) /* % changed*/

    if (SW0HM002.SW0HMICD > 0    
     && SW0HM002.SW0HMPIN <= 100 /* numeric*/
     && SW0HM002.SW0HMPIN > 0)  
      SW0HW00.SW0HWINB = SW0HM002.SW0HMICD; /* inspection num*/
      SW0H253(); /* select % from  inspection table*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (SWBREC.SWAPCTIN == 0)
          SWBREC.SWAPCTIN = 1.0;
        end
        SWBREC.SWAPCTIN = SWBREC.SWAPCTIN * 100; /* percent*/
        if (SW0HM002.SW0HMPIN <= SWBREC.SWAPCTIN)
           /* next sentence*/
        else
          set SW0HM002.SW0HMPIN cursor, bold; /* highlight*/
          SLWREC.XXXLOCID = "250"; /* module id*/
          converseLib.validationFailed(11); /* invalid value entered*/
        end
      else /* not found*/
        set SW0HM002.SW0HMICD cursor, bold; /* highlight*/
        SLWREC.XXXLOCID = "250"; /* module id*/
        converseLib.validationFailed(11); /* invalid value entered*/
      end
    end
  end


  if (converseVar.validationMsgNum != 0) /* errors were found*/
    exit stack; /* exit to display map*/
  end


end // end SW0H250

// Verify scroll request
Function SW0H251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0HW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0HW00.XXXTSPAG >= SW0HW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  SW0HW00.SW0HWIX2 = 12; /* Initialize line index*/

  while (SW0HW00.SW0HWIX2 > 0) /* Until end of lines*/

    if (SW0HM002.SWFHLDHS[SW0HWIX2] != SW0HW02.SWFHLDHS[SW0HWIX2])

      SLWREC.XXXLOCID = "251"; /* Module identification*/
      set SW0HM002.SWFHLDHS[SW0HWIX2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Mods not allowed when back or forward*/
                                   /* requested*/

    end

    if (SW0HM002.SWHINSN2[SW0HWIX2] != SW0HW02.SWHINSN2[SW0HWIX2])

      SLWREC.XXXLOCID = "251"; /* Module identification*/
      set SW0HM002.SWHINSN2[SW0HWIX2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Mods not allowed when back or forward*/
                                   /* requested*/

    end

    if (SW0HM002.SWAPCTIN[SW0HWIX2] != SW0HW02.SWAPCTIN[SW0HWIX2])

      SLWREC.XXXLOCID = "251"; /* Module identification*/
      set SW0HM002.SWAPCTIN[SW0HWIX2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Mods not allowed when back or forward*/
                                   /* requested*/

    end

    if (SW0HM002.SWHINSN1[SW0HWIX2] != SW0HW02.SWHINSN1[SW0HWIX2])

      SLWREC.XXXLOCID = "251"; /* Module identification*/
      set SW0HM002.SWHINSN1[SW0HWIX2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Mods not allowed when back or forward*/
                                   /* requested*/

    end

    SW0HW00.SW0HWIX2 = SW0HW00.SW0HWIX2 - 1; /* Decrement line number*/

  end

  if (SW0HM002.SW0HMHHS != SW0HW02.SW0HMHHS) /* hold hand stack changed*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    set SW0HM002.SW0HMHHS cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Mods not allowed when back or forward*/
                                   /* requested*/

  end

  if (SW0HM002.SW0HMQCD != SW0HW02.SW0HMQCD) /* quality code*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    set SW0HM002.SW0HMQCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Mods not allowed when back or forward*/
                                   /* requested*/

  end

  if (SW0HM002.SW0HMPIN != SW0HW02.SW0HMPIN) /* percent changed*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    set SW0HM002.SW0HMPIN cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Mods not allowed when back or forward*/
                                   /* requested*/

  end

  if (SW0HM002.SW0HMICD != SW0HW02.SW0HMICD) /* inspection code changed*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    set SW0HM002.SW0HMICD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Mods not allowed when back or forward*/
                                   /* requested*/

  end



end // end SW0H251

// Select from DSTLOC.VINSP001
Function SW0H252()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set SWAREC empty; /* Clear row storage area*/

  SWAREC.XWHCD = SW0HW02.XWHCD; /* Warehouse code*/
  SWAREC.SWAINSNB = SW0HW00.SW0HWINB; /* Inspection number*/


  try
    call "IO5310" ("S ", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select max*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "252"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE  ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H252

// Select from DSTLOC.VINTSK01
Function SW0H253()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set SWBREC empty; /* Clear row storage area*/

  SWBREC.XWHCD = SW0HW02.XWHCD; /* Warehouse code*/
  SWBREC.SWAINSNB = SW0HW00.SW0HWINB; /* Inspection number*/


  try
    call "IO5320" ("M ", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select max*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "253"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT MAXIMUM ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0H253

// count tasks in dstloc.vintsk01
Function SW0H254()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set SWBREC empty; /* Clear row storage area*/

  SWBREC.XWHCD = SW0HW02.XWHCD; /* Warehouse code*/
  SWBREC.SWAINSNB = SW0HW00.SW0HWINB; /* Inspection number*/
  SWBREC.XGPCD = SW0HW00.XGPCD; /* gpc code*/
  SWBREC.SL-TASK-CD = -1; /* task code*/

  SW0HS04(); /* select set dstloc.vintsk01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    SW0HS05(); /* fetch first dstloc.vintsk01*/
    while (SQLCA.VAGen_SQLCODE == 0)
      if (SWBREC.XXXSTAT == "A")
        SW0HW00.SW0HWSUM = SW0HW00.SW0HWSUM + 1;
      end
      SW0HS05(); /* fetch next dstloc.vintsk01*/
    end
  end

  SW0HS06(); /* close  set dstloc.vintsk01*/

end // end SW0H254

// Process valid input request
Function SW0H260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SW0HW00.SW0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SW0HW00.XXXTSPAG = SW0HW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SW0HW00.XXXTSPAG = SW0HW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* verify update authority*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL != "Y") /* authorized to change*/

    SLWREC.XXXLOCID = "260"; /* module id*/
    converseLib.validationFailed(255); /* insufficient authority to modify a*/
                                   /* plan*/

    return; /* return to previous step*/

  end

   /* ------------------------------------------------------------*/
   /* Save the modified fields and set temp storage update switch*/
   /* ------------------------------------------------------------*/

  SW0HW02.SW0HWHUS = "N"; /* header update switch*/
  move "N" to SW0HW02.SW0HWLUS[1] for all; /* line update switch*/

  if (SW0HM002.SW0HMICD != 0) /* inspection number*/
    if (SW0HM002.SW0HMPIN == 0) /* percent*/

      SW0HW00.SW0HWINB = SW0HM002.SW0HMICD;
      SW0H252(); /* select % from DSTLOC.VINSP001*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        if (SWAREC.SWAPCTIN == 0)
          SWAREC.SWAPCTIN = 1.0;
        end
        SW0HM002.SW0HMPIN = SWAREC.SWAPCTIN * 100; /* percent*/
        SW0HW02.SW0HMPIN = SW0HM002.SW0HMPIN;

      else
        SLWREC.XXXLOCID = "260"; /* module id*/
        converseLib.validationFailed(214); /* data not found for display*/
        exit stack; /* exit to display map*/
      end
      SW0HW02.SW0HMICD = SW0HM002.SW0HMICD; /* inspectin number*/
      SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
    end
  end

  SW0HW02.SW0HWHUS = "Y"; /* header update switch*/

  if (SW0HM002.SL-SAT-STG-LOC-IND != SW0HW02.SL-SAT-STG-LOC-IND)

    SW0HW00.SW0HWSWU = "Y"; /* storage update switch*/
    SW0HW02.SW0HWHUS = "Y"; /* header update switch*/
    SW0HW02.SL-SAT-STG-LOC-IND = SW0HM002.SL-SAT-STG-LOC-IND;

  end

  if (SW0HM002.SW0HMICD != SW0HW02.SW0HMICD) /* insp code changed*/

    SW0HW00.SW0HWSWU = "Y"; /* storage update switch*/
    SW0HW02.SW0HWHUS = "Y"; /* header update switch*/
    SW0HW02.SW0HMICD = SW0HM002.SW0HMICD; /* inspection number*/

  end

  if (SW0HM002.SW0HMPIN != SW0HW02.SW0HMPIN) /* percent inspected*/

    SW0HW02.SW0HMPIN = SW0HM002.SW0HMPIN; /* percent inspected*/
    SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
    SW0HW02.SW0HWHUS = "Y"; /* header update switch*/

  end

  if (SW0HM002.SW0HMQCD != SW0HW02.SW0HMQCD) /* quality code*/

    SW0HW02.SW0HMQCD = SW0HM002.SW0HMQCD; /* quality code*/
    SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
    SW0HW02.SW0HWHUS = "Y"; /* header update switch*/

  end

  if (SW0HM002.SW0HMQAF != SW0HW02.SW0HMQAI) /* QA flag*/

    SW0HW00.SW0HWSWU = "Y"; /* storage update switch*/
    SW0HW02.SW0HWHUS = "Y"; /* header update switch*/
    SW0HW02.SW0HMQAI = SW0HM002.SW0HMQAF;

  end

  if (SW0HM002.SW0HMHHS != SW0HW02.SW0HMHHS) /* hold hand stack*/

    SW0HW02.SW0HMHHS = SW0HM002.SW0HMHHS; /* hold hand stack*/
    SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
    SW0HW02.SW0HWHUS = "Y"; /* header update switch*/

  end

  SW0HW00.SW0HWIX2 = 1; /* Initialize line index*/

  while (SW0HW00.SW0HWIX2 <= 12) /* Until end of lines*/

    if (SW0HM002.SWHINSN1[SW0HWIX2] != 0)
      if (SW0HM002.SWAPCTIN[SW0HWIX2] == 0) /* percent*/

        SW0HW00.SW0HWINB = SW0HM002.SWHINSN1[SW0HWIX2];
        SW0H252(); /* select % from DSTLOC.VINSP001*/

        if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
          if (SWAREC.SWAPCTIN == 0)
            SWAREC.SWAPCTIN = 1.0;
          end
          SW0HM002.SWAPCTIN[SW0HWIX2] = SWAREC.SWAPCTIN * 100; /* percent*/
          SW0HW02.SWAPCTIN[SW0HWIX2] = SW0HM002.SWAPCTIN[SW0HWIX2];

        else
          SLWREC.XXXLOCID = "260"; /* module id*/
          converseLib.validationFailed(214); /* data not found for display*/
          exit stack; /* exit to display map*/
        end
      end
      SW0HW02.SWHINSN1[SW0HWIX2] = SW0HM002.SWHINSN1[SW0HWIX2];
      SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
      SW0HW02.SW0HWLUS[SW0HWIX2] = "Y"; /* line update switc*/
    end

    /* junetest*/
    if (SW0HM002.SWHINSN2[SW0HWIX2] != 0)
      SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
      SW0HW02.SW0HWLUS[SW0HWIX2] = "Y"; /* line update switc*/
    end

    if (SW0HM002.SWHINSN1[SW0HWIX2] != SW0HW02.SWHINSN1[SW0HWIX2])

      SW0HW02.SWHINSN1[SW0HWIX2] = SW0HM002.SWHINSN1[SW0HWIX2];
      SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
      SW0HW02.SW0HWLUS[SW0HWIX2] = "Y"; /* line update switch*/

    end

    if (SW0HM002.SWAPCTIN[SW0HWIX2] != SW0HW02.SWAPCTIN[SW0HWIX2])

      SW0HW02.SWAPCTIN[SW0HWIX2] = SW0HM002.SWAPCTIN[SW0HWIX2];
      SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
      SW0HW02.SW0HWLUS[SW0HWIX2] = "Y"; /* line update switch*/

    end

    if (SW0HM002.SWHINSN2[SW0HWIX2] != SW0HW02.SWHINSN2[SW0HWIX2])

      SW0HW02.SWHINSN2[SW0HWIX2] = SW0HM002.SWHINSN2[SW0HWIX2];
      SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
      SW0HW02.SW0HWLUS[SW0HWIX2] = "Y"; /* line update switch*/

    end

    if (SW0HM002.SWFHLDHS[SW0HWIX2] != SW0HW02.SWFHLDHS[SW0HWIX2])

      SW0HW02.SWFHLDHS[SW0HWIX2] = SW0HM002.SWFHLDHS[SW0HWIX2];
      SW0HW00.SW0HWSWU = "Y"; /* Storage update switch*/
      SW0HW02.SW0HWLUS[SW0HWIX2] = "Y"; /* line update switch*/

    end

    SW0HW00.SW0HWIX2 = SW0HW00.SW0HWIX2 + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* if storage update switch is 'Y' it means something needs*/
      /* to be updated.*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWSWU == "Y") /* storage update switch*/

    /* ------------------------------------------------------------*/
     /* Get correct date and time*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* date and time routine*/

    /* ------------------------------------------------------------*/
     /* Update DSTLOC.VPLCPO01 (container level)*/
    /* ------------------------------------------------------------*/

    if (SW0HW02.SW0HWHUS == "Y") /* header needs updated*/

      SW0H261(); /* select dstloc.vplcpo01*/
      SW0H262(); /* update dstloc.vplcpo01*/

    end

    /* ------------------------------------------------------------*/
     /* Update DSTLOC.VPLNSY01 (product level)*/
    /* ------------------------------------------------------------*/

    SW0HW00.SW0HWIX2 = 1; /* initialize line index*/

    while (SW0HW00.SW0HWIX2 <= 12) /* until end of lines*/

      if (SW0HW02.SW0HWLUS[SW0HWIX2] == "Y") /* line needs update*/

        SW0H263(); /* select dstloc.vplnsy01*/
        SW0H264(); /* update dstloc.vplnsy01*/

      end

      SW0HW00.SW0HWIX2 = SW0HW00.SW0HWIX2 + 1; /* increment index*/

    end

    converseLib.clearScreen();
     /* clear screen*/

    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(20); /* transaction completed*/
    end

  end

  exit stack;



end // end SW0H260

// Select row in dstloc.vplcpo01
Function SW0H261()
   /* ------------------------------------------------------------*/
   /* select row in the table.*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* clear record*/

  SWFREC.XWHCD = SW0HW02.XWHCD; /* warehouse*/
  SWFREC.SWEPLLNB = SW0HW02.SW0HWPLN; /* plan number*/
  SWFREC.PC3PONBR = SW0HW02.PC3PONBR; /* po number*/
  SWFREC.TSHCNTNR = SW0HW02.TSHCNTNR; /* container*/
  SWFREC.XGPCD = SW0HW02.XGPCD[1]; /* gpc*/

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      SLWREC.XXXLOCID = "261"; /* module identification*/
      SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/
      converseLib.validationFailed(12); /* record not on database*/
      set SW0HM002.SW0HMICD cursor; /* set cursor*/

      exit stack; /* exit to display map*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "261"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H261

// Update row in dstloc.vplcpo01
Function SW0H262()
   /* ------------------------------------------------------------*/
   /* Update row in the table.*/
   /* ------------------------------------------------------------*/

  SWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  SWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  SWFREC.SWHINSN1 = SW0HW02.SW0HMICD; /* inpection number*/
  SWFREC.SWHINSN2 = SW0HW02.SW0HMQCD; /* quality code*/
  if (SW0HW02.SW0HMQAI == "Y") /* QA flag*/
    SWFREC.SWHINSN2 = 10; /* 10 corresponds to a QA insp*/
  end
  SWFREC.SWFHLDHS = SW0HW02.SW0HMHHS; /* hold hand stack*/
  SWFREC.SWAPCTIN = SW0HW02.SW0HMPIN / 100; /* percent stored w/decimal*/
  SWFREC.XWHCD = SW0HW02.XWHCD; /* warehouse*/
  SWFREC.SWEPLLNB = SW0HW02.SW0HWPLN; /* plan number*/
  SWFREC.PC3PONBR = SW0HW02.PC3PONBR; /* po number*/
  SWFREC.SL-SAT-STG-LOC-IND = SW0HW02.SL-SAT-STG-LOC-IND;
  SWFREC.TSHCNTNR = SW0HW02.TSHCNTNR; /* container*/
  SWFREC.XGPCD = SW0HW02.XGPCD[1]; /* gpc*/

  try
    call "IO5340" ("U ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit all changes*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback all changes*/

      SLWREC.XXXLOCID = "262"; /* module identification*/
      SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/
      converseLib.validationFailed(29); /* update cancelled*/
      set SW0HM002.SW0HMICD cursor; /* set cursor*/

      return; /* return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "262"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H262

// Select row in dstloc.vplnsy01
Function SW0H263()
   /* ------------------------------------------------------------*/
   /* Select the row in the table.*/
   /* ------------------------------------------------------------*/

  set SWGREC empty; /* clear record*/

  SWGREC.XWHCD = SW0HW02.XWHCD; /* warehouse*/
  SWGREC.SWEPLLNB = SW0HW02.SW0HWPLN; /* plan number*/
  SWGREC.SWGPSEQN = SW0HW02.SWGPSEQN[SW0HWIX2]; /* prod sequence number*/

  try
    call "IO5370" ("S ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      SLWREC.XXXLOCID = "263"; /* module identification*/
      converseLib.validationFailed(12); /* record not found*/
      SW0HW00.SW0HWSWR = "N"; /* request for data switch*/
      set SW0HM002.SWHINSN1[SW0HWIX2] cursor;

      exit stack; /* exit to display map*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "263"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H263

// Update row in dstloc.vplnsy01
Function SW0H264()
   /* ------------------------------------------------------------*/
   /* Update the row in the table.*/
   /* ------------------------------------------------------------*/

  SWGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  SWGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  SWGREC.SWHINSN1 = SW0HW02.SWHINSN1[SW0HWIX2]; /* inpection number*/
  SWGREC.SWHINSN2 = SW0HW02.SWHINSN2[SW0HWIX2]; /* quality code*/
  SWGREC.SWFHLDHS = SW0HW02.SWFHLDHS[SW0HWIX2]; /* hold hand stack*/
  SWGREC.SWAPCTIN = SW0HW02.SWAPCTIN[SW0HWIX2] / 100; /* percent w/decimal*/
  SWGREC.XWHCD = SW0HW02.XWHCD; /* warehouse*/
  SWGREC.SWEPLLNB = SW0HW02.SW0HWPLN; /* plan number*/
  SWGREC.SWGPSEQN = SW0HW02.SWGPSEQN[SW0HWIX2]; /* prod sequence number*/

  try
    call "IO5370" ("U ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit all changes*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback all changes*/

      SLWREC.XXXLOCID = "264"; /* module identification*/
      converseLib.validationFailed(29); /* update cancelled*/
      SW0HW00.SW0HWSWR = "N"; /* request for data switch*/
      set SW0HM002.SWHINSN1[SW0HWIX2] cursor;

      return; /* return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "264"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0H264

// Update temporary storage page
Function SW0HS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0HS01

// Read temporary storage page
Function SW0HS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0HW02.XXXTSLEN = SW0HW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SW0HW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0HS02

// update the slwrec
Function SW0HS03()

   /* ----------------------------------------------------*/
   /* Update the slwrec before leaving application.*/
   /* ----------------------------------------------------*/

  SLWREC.XWHCD = SW0HW01.XWHCD; /* xwh_whse_cd*/
  SLWREC.XWHOWNGF = " "; /* xwh_own_grp_fl*/
  SLWREC.SLWWKDTE = 0; /* work date (ccyymmdd)*/
  SLWREC.SLWINDTE = 0; /* input date (mmddyy)*/
  SLWREC.SWEPLLNB = SW0HW01.SWEPLLNB; /* sl_rcv_plan_nbr*/
  SLWREC.TSHCNTNR = " "; /* ts_cntnr_nbr*/
  SLWREC.XGPCD = " "; /* xgp_gpc_cd*/
  SLWREC.PC3PONBR = 0; /* pc_po_nbr*/
  SLWREC.PC3POIDT = 0; /* pc_po_id_mo_rng*/
  SLWREC.PC4ORTYP = " "; /* pc_po_ot_cd*/
  SLWREC.PCFSECD = " "; /* pc_po_id_sesn_cd*/
  SLWREC.FY1FCTYC = " "; /* fy_fcty_cd*/
  SLWREC.SY1STNBR = " "; /* style number*/
  SLWREC.SY2CLRID = " "; /* identifying color*/
  SLWREC.XDMCD = " "; /* xdm_dim_cd*/
  SLWREC.XQACD = " "; /* xqa_qual_cd*/
  SLWREC.XOWCD = " "; /* xow_own_grp_cd*/
  SLWREC.PC2INSEG = " "; /* pc_cu_in_seg_cd*/
  SLWREC.XEG-ENGR-DIFF-CD = " "; /* shade code*/
  SLWREC.XUMCD = " "; /* xum_uom_cd*/
  SLWREC.XSLCD = " "; /* xsl_class_cd*/
  SLWREC.TSOCRTNB = 0; /* ts_crtn_nbr*/


end // end SW0HS03

// select set dstloc.vintsk01
Function SW0HS04()
   /* ------------------------------------------------------------*/
   /* Select the set from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5320" ("S1", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select max*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VINTSK01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0HS04

// fetch next dstloc.vintsk01
Function SW0HS05()
   /* ------------------------------------------------------------*/
   /* Select the set from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5320" ("N1", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select max*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT VINTSK01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0HS05

// close  set dstloc.vintsk01
Function SW0HS06()
   /* ------------------------------------------------------------*/
   /* close the set from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5320" ("C1", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select max*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE  SET VINTSK01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0HS06

// get nil forecast sale qtys
Function SW0HS07()

   /* ------------------------------------------------------------*/
   /* insert rows into the plan lane/carton table and plan*/
      /* lane/carton size table.*/

   /* note:  program sl4310 builds a cursor on the transportation*/
          /* container pack list table.  it then processes the*/
          /* cursor and builds an internal table that that contains*/
          /* the carton number, size, and quantity data to be inserted*/
          /* into the plan lane/carton table and plan lane/carton size*/
          /* table.*/
   /* ------------------------------------------------------------*/

   /* load values into data record to be passed to subroutine*/

   /* ------------------------------------------------------------*/

   /* Clear row storage area*/
  set SW0HW03 empty;
  SW0HW03.SW0HWTSK = "SS"; /* task function cd*/
  SW0HW03.XWHCD = SW0HW01.XWHCD; /* whse cd*/
  SW0HW03.SWEPLLNB = SW0HW01.SWEPLLNB; /* plan nbr*/
  SW0HW03.TSHCNTNR = SW0HW00.SW0HWCNR; /* container*/
  SW0HW03.XGPCD = TSIREC.XGPCD; /* gpc cd*/
  SW0HW03.PC3PONBR = TSIREC.PC3PONBR; /* po nbr*/
  SW0HW03.XQACD = TSIREC.XQACD; /* qlty cd*/
  SW0HW03.SWGPSEQN = SW0HW00.SL3NXPSN; /* prod seq nbr*/
  SW0HW03.TSFSHPID = SW0HW00.TSFSHPID[SW0HWIXA]; /* ship id*/
  SW0HW03.TSHNKCN = SW0HW00.TSHNKCN[SW0HWIXA]; /* nike cntnr*/
  SW0HW03.TSIPLNBR = TSIREC.TSIPLNBR; /* pack list nbr*/
  SW0HW03.SW0HWJUL = SW0HW00.SW0HWJUL; /* jul date*/
  SW0HW03.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  SW0HW03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  SW0HW03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

   /* ------------------------------------------------------------*/
   /* Summarize month master by category table.*/
   /* ------------------------------------------------------------*/

  try
    call "SL4310" (SW0HW03, SQLCA, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(31); /* Data in use by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

     /* NEXT SENTENCE*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "BUILD PLAN LANE/CARTON";
    TAEREC.TAEDESC1 = "SUBROUTINE SL4310 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/

  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/

  exit stack; /* Exit to display map*/


end // end SW0HS07

// Save data in display storage
Function SW0HS20()
   /* ------------------------------------------------------------*/
   /* call the common po routine to get formated po id/type*/
   /* ------------------------------------------------------------*/

  set SWVREC empty; /* clear record*/
  SWVREC.SWVWFNC = "ID"; /* function*/
  SWVREC.XGPCD = SWFREC.XGPCD; /* gpc*/
  SWVREC.PC3PONBR = SWFREC.PC3PONBR; /* po number*/

  XSSLS10(); /* po routine*/

  if (SWVREC.SWVWRTN != 0) /* routine failed*/

    SLWREC.XXXLOCID = "S20"; /* module id*/
    converseLib.validationFailed(295); /* po rtn failed*/
    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  if (SW0HW00.SW0HWIX2 == 1)

    SW0HW02.XWHCD = SW0HW01.XWHCD; /* warehouse*/
    SW0HW02.SW0HWPLN = SW0HW01.SWEPLLNB; /* plan number*/
    SW0HW02.XWHABRV = SW0HW00.XWHABRV; /* warehouse abrv*/
    SW0HW02.XRPDESC = SW0HW00.XRPDESC; /* plan desc*/
    SW0HW02.XRPCD = SW0HW00.XRPCD; /* plan status*/
    SW0HW02.SW0HMCMT = SWFREC.TSRTEXT; /* p/l comments*/
    SW0HW02.SW0HMICD = SWFREC.SWHINSN1; /* inspection number*/
    SW0HW02.SW0HMQCD = SWFREC.SWHINSN2; /* quality code*/
    SW0HW02.SW0HMHHS = SWFREC.SWFHLDHS; /* hold hand stack*/
    SW0HW02.TSHCNTNR = SWFREC.TSHCNTNR; /* container*/
    SW0HW02.PC3PONBR = SWFREC.PC3PONBR; /* po number*/
    SW0HW02.SW0HMPIN = SWFREC.SWAPCTIN * 100; /* inspection percent*/
    SW0HW02.SW0HMPOT = SWVREC.SWVWPOID; /* formated po id*/
    SW0HW02.PCFSECD = SWVREC.PC4ORTYP; /* formated po type*/
    SW0HW02.SL-SAT-STG-LOC-IND = SWFREC.SL-SAT-STG-LOC-IND;

    if (SW0HW02.XWHCD == "51") /* translate 10 to Y for QA*/
      if (SWFREC.SWHINSN2 == 10)
        SW0HW02.SW0HMQAI = "Y";
      end
    end
  end

  SW0HW02.TSISTAT[SW0HWIX2] = SWGREC.TSISTAT;
  SW0HW02.XGPCD[SW0HWIX2] = SWGREC.XGPCD; /* gpc code*/
  SW0HW02.SY1STNBR[SW0HWIX2] = SWGREC.SY1STNBR; /* style*/
  SW0HW02.SY2CLRID[SW0HWIX2] = SWGREC.SY2CLRID; /* color*/
  SW0HW02.XDMCD[SW0HWIX2] = SWGREC.XDMCD; /* dimension*/
  SW0HW02.XQACD[SW0HWIX2] = SWGREC.XQACD; /* quality code*/
  SW0HW02.SW0HMLCD[SW0HWIX2] = SW0HW00.SW0HWLCC; /* life cycle code*/
  SW0HW02.PC2INSEG[SW0HWIX2] = SWGREC.PC2INSEG; /* cu in seg code*/
  SW0HW02.XEGCD[SW0HWIX2] = SWGREC.XEGCD; /* engineer code*/
  SW0HW02.XPGCD[SW0HWIX2] = SWGREC.XPGCD; /* packaging code*/
  SW0HW02.XUMCD[SW0HWIX2] = SWGREC.XUMCD; /* unit of measure*/
  SW0HW02.XOWCD[SW0HWIX2] = SWGREC.XOWCD; /* owner group*/
  SW0HW02.SWGPRDCS[SW0HWIX2] = SWGREC.SWGPRDCS; /* tot prod cs*/
  SW0HW02.SWGPRDUN[SW0HWIX2] = SWGREC.SWGPRDUN; /* tot prod units*/
  SW0HW02.SWHINSN1[SW0HWIX2] = SWGREC.SWHINSN1; /* inspection number*/
  SW0HW02.SWAPCTIN[SW0HWIX2] = SWGREC.SWAPCTIN * 100; /* inspection percent*/
  SW0HW02.SWHINSN2[SW0HWIX2] = SWGREC.SWHINSN2; /* inspection number*/
  SW0HW02.SWFHLDHS[SW0HWIX2] = SWGREC.SWFHLDHS; /* hold hand stack*/
  SW0HW02.SWGPSEQN[SW0HWIX2] = SWGREC.SWGPSEQN; /* prod seq number*/

  SW0HW00.SW0HWTCT = SW0HW00.SW0HWTCT + SWGREC.SWGPRDCS; /* total cartons*/
  SW0HW00.SW0HWPCT = SW0HW00.SW0HWPCT + SWGREC.SWAPCTIN; /* percent total*/
  SW0HW02.SW0HMTCN = SW0HW00.SW0HWTCT; /* total cartons*/

  SW0HW00.SW0HWIX2 = SW0HW00.SW0HWIX2 + 1; /* Increment line index*/



end // end SW0HS20

// Add page to temporary storage
Function SW0HS21()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0HW02.XXXTSLEN = SW0HW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0HW02 empty; /* M001 display storage*/

    SW0HW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S21"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0HS21

// select from  DPROD.VCOLOR01
Function SW0HS22()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set SY2REC empty; /* Row storage area*/

  SY2REC.XGPCD = SWGREC.XGPCD; /* gpc*/
  SY2REC.SY1STNBR = SWGREC.SY1STNBR; /* style number*/
  SY2REC.SY2CLRID = SWGREC.SY2CLRID; /* color id*/
  SY2REC.XDMCD = SWGREC.XDMCD; /* dimension code*/

  try
    call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  SLWREC.XXXLOCID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0HS22

// update the slwrec
Function SW0HS23()

   /* ----------------------------------------------------*/
   /* Update the slwrec before leaving application.*/
   /* ----------------------------------------------------*/

  SLWREC.XWHCD = SW0HW02.XWHCD; /* xwh_whse_cd*/
  SLWREC.XWHOWNGF = " "; /* xwh_own_grp_fl*/
  SLWREC.SLWWKDTE = 0; /* work date (ccyymmdd)*/
  SLWREC.SLWINDTE = 0; /* input date (mmddyy)*/
  SLWREC.SWEPLLNB = SW0HW01.SWEPLLNB; /* sl_rcv_plan_nbr*/
  SLWREC.TSHCNTNR = SW0HW02.TSHCNTNR; /* ts_cntnr_nbr*/
  SLWREC.XGPCD = SW0HW02.XGPCD; /* xgp_gpc_cd*/
  SLWREC.PC3PONBR = SW0HW02.PC3PONBR; /* pc_po_nbr*/
  SLWREC.PC3POIDT = 0; /* pc_po_id_mo_rng*/
  SLWREC.PC4ORTYP = " "; /* pc_po_ot_cd*/
  SLWREC.PCFSECD = SW0HW02.PCFSECD; /* pc_po_id_sesn_cd*/
  SLWREC.FY1FCTYC = " "; /* fy_fcty_cd*/
  SLWREC.SY1STNBR = SW0HW02.SY1STNBR; /* style number*/
  SLWREC.SY2CLRID = SW0HW02.SY2CLRID; /* identifying color*/
  SLWREC.XDMCD = SW0HW02.XDMCD; /* xdm_dim_cd*/
  SLWREC.XQACD = SW0HW02.XQACD; /* xqa_qual_cd*/
  SLWREC.XOWCD = SW0HW02.XOWCD; /* xow_own_grp_cd*/
  SLWREC.PC2INSEG = SW0HW02.PC2INSEG; /* pc_cu_in_seg_cd*/
  SLWREC.XEG-ENGR-DIFF-CD = " "; /* shade code*/
  SLWREC.XUMCD = SW0HW02.XUMCD; /* xum_uom_cd*/
  SLWREC.XSLCD = " "; /* xsl_class_cd*/
  SLWREC.TSOCRTNB = 0; /* ts_crtn_nbr*/


end // end SW0HS23

// Select from  DSTLOC.VPLNHD01
Function SW0HS29()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set SWEREC empty; /* Row storage area*/

  SWEREC.XWHCD = SW0HW02.XWHCD; /* warehouse*/
  SWEREC.SWEPLLNB = SW0HW02.SW0HWPLN; /* plan number*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Or row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Or multple rows found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S29"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0HS29

// Open cursor in DTRANS.VCNTNR01
Function SW0HS60()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set TSHREC empty; /* Row storage area*/

  TSHREC.TSHCNTNR = SW0HW01.TSHCNTNR[SW0HWIX1]; /* container*/
  TSHREC.TSHSTAT = "RC"; /* container status*/

  try
    call "IO2590" ("S2", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S60"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0HS60

// Fetch row in DTRANS.VCNTNR01
Function SW0HS61()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2590" ("N2", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      SW0HW00.SW0HWSC3 = "Y"; /* end of cursor switch*/

      if (SW0HW00.SW0HWFCS == "Y") /* container not found*/

        converseLib.validationFailed(85); /* container does not exist*/
        SLWREC.XXXLOCID = "S61"; /* module id*/
        set SW0HM001.TSHCNTNR[SW0HWIX1] cursor, bold; /* highlight*/
        SW0HW00.SW0HWSWF = "N"; /* format the map switch*/
        exit stack; /* exit to display map*/

      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S61"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0HS61

// Close cursor DTRANS.VCNTNR01
Function SW0HS62()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2590" ("C2", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S62"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0HS62

// select from DSTLOC.VPLCPO01
Function SW0HS63()
   /* ------------------------------------------------------------*/
   /* Select table row from DSTLOC.VPLCPO01*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* clear csp record*/

  SWFREC.XWHCD = SW0HW01.XWHCD; /* warehouse code*/
  SWFREC.SWEPLLNB = SW0HW01.SWEPLLNB; /* plan number*/
  SWFREC.TSHCNTNR = SW0HW00.TSHCNTNR[SW0HWIXA]; /* container number*/
  SWFREC.XGPCD = TSIREC.XGPCD; /* gpc code*/
  SWFREC.PC3PONBR = TSIREC.PC3PONBR; /* po number*/

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      SW0HW00.SW0HWSC1 = "Y"; /* end of cursor switch*/
      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        return; /* return to previous process*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S63"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0HS63

// Update DSTLOC.VPLCPO01
Function SW0HS64()
   /* ------------------------------------------------------------*/
   /* Update row in the table.*/
   /* ------------------------------------------------------------*/

  SWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  SWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  SWFREC.XWHCD = SW0HW01.XWHCD; /* warehouse*/
  SWFREC.SWEPLLNB = SW0HW01.SWEPLLNB; /* plan number*/
  SWFREC.TSHCNTNR = SW0HW00.TSHCNTNR[SW0HWIXA]; /* container*/
  SWFREC.XGPCD = TSIREC.XGPCD; /* gpc*/
  SWFREC.PC3PONBR = TSIREC.PC3PONBR; /* po number*/
  SWFREC.TSRTEXT = TSIREC.TSRTEXT; /* p/l comments*/

  try
    call "IO5340" ("U ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* IF NOT FOUND, RETURN TO DISPLAY MAP*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback all changes*/
      SLWREC.XXXLOCID = "S64"; /* module identification*/

      SW0HW00.SW0HWIX1 = 1;
      while (SW0HW00.SW0HWIX1 <= 12)
        if (SW0HW00.SW0HWCNR != SW0HM001.TSHCNTNR[SW0HWIX1])
          SW0HW00.SW0HWIX1 = SW0HW00.SW0HWIX1 + 1;
        else
          set SW0HM001.TSHCNTNR[SW0HWIX1] cursor, bold;
          SW0HW00.SW0HWIX1 = 13;
        end
      end

      converseLib.validationFailed(410); /* notify programming*/
      SW0HW00.SW0HWSWF = "N"; /* format the map*/
      exit stack; /* exit to display map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S64"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes*/
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0HS64

// get carton sequence number
Function SW0HS65()
   /* ------------------------------------------------------------*/
   /* read carton sequence number*/
   /* ------------------------------------------------------------*/

  set PKDREC empty; /* clear record*/

  PKDREC.XWHCD = SW0HW01.XWHCD; /* set warehouse key*/

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, update carton seq nbr, then return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      set SW0HM001.XWHCD cursor, bold; /* invalid warehouse*/
      SLWREC.XXXLOCID = "S65"; /* module id*/
      SW0HW00.SW0HWSWF = "N"; /* format the map switch*/
      converseLib.validationFailed(9);
      exit stack;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "S65"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.validationFailed(31); /* Data in use by another*/
    end
  else
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0HS65

// select 's' dstloc.vrlhdr01
Function SW0HS70()
   /* ------------------------------------------------------------*/
   /* Select row from dstloc.vrlhdr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1570" ("S ", SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0HW00.SW0HWSWD = "1"; /* Map to be displayed switch*/
  SW0HW00.SW0HWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S70"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0HS70

//*** RECORD=SW0HW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0HW00 type basicRecord
  10 SW0HWIX1 SW0HWIX1 ; 
  10 SW0HWIX2 SW0HWIX2 ; 
  10 SW0HWIXA SW0HWIXA ; 
  10 SW0HWSC1 SW0HWSC1 ; 
  10 SW0HWSC2 SW0HWSC2 ; 
  10 SW0HWSC3 SW0HWSC3 ; 
  10 SW0HWSC4 SW0HWSC4 ; 
  10 SW0HWSC5 SW0HWSC5 ; 
  10 SW0HWSWD SW0HWSWD ; 
  10 SW0HWCRQ SW0HWCRQ ; 
  10 SW0HWSWF SW0HWSWF ; 
  10 SW0HWFQA SW0HWFQA ; 
  10 SW0HWFPL SW0HWFPL ; 
  10 SW0HWFFL SW0HWFFL ; 
  10 SW0HWFCS SW0HWFCS ; 
  10 SW0HWSWR SW0HWSWR ; 
  10 SW0HWFNC SW0HWFNC ; 
  10 SW0HWSWU SW0HWSWU ; 
  10 SW0HWPLC SW0HWPLC ; 
  10 SW0HWPCT SW0HWPCT ; 
  10 SW0HWTCT SW0HWTCT ; 
  10 SW0HWCTN SW0HWCTN ; 
  10 SW0HWCSU SW0HWCSU ; 
  10 SW0HWCNR SW0HWCNR ; 
  10 TSFSHPID TSFSHPID [200] ; 
  10 TSHNKCN TSHNKCN [200] ; 
  10 TSHCNTNR TSHCNTNR [200] ; 
  10 XWHCD XWHCD ; 
  10 XRPCD XRPCD ; 
  10 SL3NXWZC SL3NXWZC ; 
  10 SW0HWWZC SW0HWWZC ; 
  10 XGPCD XGPCD ; 
  10 SW0HWINB SW0HWINB ; 
  10 TSOCRTNB TSOCRTNB ; 
  10 PC3PONBR PC3PONBR ; 
  10 TSOSHPQT TSOSHPQT ; 
  10 SW0HWPLN SW0HWPLN ; 
  10 SL3NXPSN SL3NXPSN ; 
  10 SW0HWLCC SW0HWLCC ; 
  10 PKDNCSQN PKDNCSQN ; 
  10 XWHABRV XWHABRV ; 
  10 XRPDESC XRPDESC ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SW0HWDAY SW0HWDAY ; 
    15 * num(2) ; 
    15 SW0HWJUL SW0HWJUL ; 
  10 SW0HWPSQ SW0HWPSQ ; 
    15 SW0HWP3 SW0HWP3 ; 
    15 SW0HWP6 SW0HWP6 ; 
  10 SW0HWSUM SW0HWSUM ; 
  10 SW0HWDNF SW0HWDNF ; 
  10 SW0HWHTC SW0HWHTC ; 
  10 SW0HWHQC SW0HWHQC ; 
end // end SW0HW00

//*** RECORD=SW0HW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SW0HW01 type basicRecord
  5 CACHGFL CACHGFL ; 
  5 CAADDFL CAADDFL ; 
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(180) ; 
    10 XWHCD XWHCD ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 TSHCNTNR TSHCNTNR [12] ; 
    10 XITCD XITCD ; 
    10 IN7STNBR IN7STNBR ; 
end // end SW0HW01

//*** RECORD=SW0HW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record SW0HW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(740) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 SW0HWPLN SW0HWPLN ; 
    10 XRPCD XRPCD ; 
    10 XRPDESC XRPDESC ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 PC3PONBR PC3PONBR ; 
    10 SW0HMPOT SW0HMPOT ; 
    10 PCFSECD PCFSECD ; 
    10 SL-SAT-STG-LOC-IND SL-SAT-STG-LOC-IND ; 
    10 SW0HMCMT SW0HMCMT ; 
    10 SW0HMICD SW0HMICD ; 
    10 SW0HMPIN SW0HMPIN ; 
    10 SW0HMQCD SW0HMQCD ; 
    10 SW0HMQAI SW0HMQAI ; 
    10 SW0HMTCN SW0HMTCN ; 
    10 SW0HMHHS SW0HMHHS ; 
    10 SW0HWHUS SW0HWHUS ; 
    10 SW0HWLUS SW0HWLUS [12] ; 
    10 TSISTAT TSISTAT [12] ; 
    10 XGPCD XGPCD [12] ; 
    10 SY1STNBR SY1STNBR [12] ; 
    10 SY2CLRID SY2CLRID [12] ; 
    10 XDMCD XDMCD [12] ; 
    10 XQACD XQACD [12] ; 
    10 SW0HMLCD SW0HMLCD [12] ; 
    10 PC2INSEG PC2INSEG [12] ; 
    10 XEGCD XEGCD [12] ; 
    10 XPGCD XPGCD [12] ; 
    10 XUMCD XUMCD [12] ; 
    10 XOWCD XOWCD [12] ; 
    10 SWGPRDCS SWGPRDCS [12] ; 
    10 SWGPRDUN SWGPRDUN [12] ; 
    10 SWHINSN1 SWHINSN1 [12] ; 
    10 SWAPCTIN SWAPCTIN [12] ; 
    10 SWHINSN2 SWHINSN2 [12] ; 
    10 SWFHLDHS SWFHLDHS [12] ; 
    10 SWGPSEQN SWGPSEQN [12] ; 
end // end SW0HW02

//*** RECORD=SW0HW03 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record SW0HW03 type basicRecord
  10 SW0HWTSK SW0HWTSK ; 
  10 XWHCD XWHCD ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 XGPCD XGPCD ; 
  10 PC3PONBR PC3PONBR ; 
  10 XQACD XQACD ; 
  10 SWGPSEQN SWGPSEQN ; 
  10 TSFSHPID TSFSHPID ; 
  10 TSIPLNBR TSIPLNBR ; 
  10 TSHNKCN TSHNKCN ; 
  10 SWGPRDCS SWGPRDCS ; 
  10 SWGPRDUN SWGPRDUN ; 
  10 SW0HWJUL SW0HWJUL ; 
  10 XXXUSRID XXXUSRID ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
end // end SW0HW03

// packing list comments
DataItem SW0HMCMT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold handstack
DataItem SW0HMHHS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inspection code
DataItem SW0HMICD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lane code
DataItem SW0HMLCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent inspected
DataItem SW0HMPIN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formated po type
DataItem SW0HMPOT char(9)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// sl_sat_stg_loc_ind
DataItem SW0HMQAI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quality control cd
DataItem SW0HMQCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total cartons
DataItem SW0HMTCN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold container
DataItem SW0HWCNR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Container request flag
DataItem SW0HWCRQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton size units
DataItem SW0HWCSU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// carton (product level)
DataItem SW0HWCTN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// julian date (yymmm)
DataItem SW0HWDAY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// search done flag
DataItem SW0HWDNF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first carton switch
DataItem SW0HWFCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch
DataItem SW0HWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function flag
DataItem SW0HWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// packing list switch
DataItem SW0HWFPL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first quality cd flag
DataItem SW0HWFQA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header qc task count*
DataItem SW0HWHQC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header task count
DataItem SW0HWHTC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header update flag
DataItem SW0HWHUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inspection number hold
DataItem SW0HWINB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map 1 fields
DataItem SW0HWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map 2 fields
DataItem SW0HWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for container table
DataItem SW0HWIXA smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// julian date
DataItem SW0HWJUL num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// life cycle code
DataItem SW0HWLCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line update flag
DataItem SW0HWLUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// julian
DataItem SW0HWP3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// carton #
DataItem SW0HWP6 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL_PCT_OF_UNT_INSP
DataItem SW0HWPCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pack list counter
DataItem SW0HWPLC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next plan number
DataItem SW0HWPLN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// carton with julian
DataItem SW0HWPSQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0HWSC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0HWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0HWSC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0HWSC4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0HWSC5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp sum store
DataItem SW0HWSUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed switch
DataItem SW0HWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0HWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0HWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SW0HWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton total (container)
DataItem SW0HWTCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0HWTSK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next work order zone code
DataItem SW0HWWZC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

