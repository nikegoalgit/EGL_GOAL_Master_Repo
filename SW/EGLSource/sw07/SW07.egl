package sw07;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW07 ****
// This application will update the units per case for
// pallet(s) within a specified plan product and container.
// 
// The update can be done by plan or by specific pallet.
// 
// When updating by plan, a list of all pallets that correspond
// to the criteria information entered on the screen (Wharehou-
// se, plan, container, product information, and current units
// per case) will be displayed on the screen.  From this list
// the user will select one or more pallets to get updated.
// 
// When updating by pallet, only the particular pallet for the
// Wharehouse, plan, container entered will be updated.
// 
// In both cases the user has to confirm update before anything
// is done to the Dstloc.Vrlitn01 and Dstloc.Vwophd01 tables.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      03/18/93  OVAZQU  New application.
// y2kproj  02-03-98  oricha  y2k modifications:  SW07S08,S11 -
//                            replace ezedte with ezedtel for
//                            obtaining century.
// *********************
Program SW07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SL2REC SL2REC; // record
  SLLREC SLLREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW07W00 SW07W00; // record
  SW07W01 SW07W01; // record
  SW07W02 SW07W02; // record
  SWEREC SWEREC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use SW07M.SW07M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set SW07M001 initial; /* M001 input/output*/
    set SW07W00 empty; /* working storage*/
    set SW07W01 empty; /* Working storage*/
    set SW07W02 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set SLLREC empty; /* dstloc.vwophd01 table*/
    set SL2REC empty; /* Dstloc.vrlitm01 table*/
    set SWEREC empty; /* Dstloc.vplnhd01 table*/
    set SYCREC empty; /* Dprod.vcolor02 table*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* tsq record*/
    SW07W00.SW07WPAS = "1"; /* force pass 1 check for converse*/
    SW07W00.XXXTSLEN = 384; /* establish tsq page length*/
    SW07M001.XWHCD = COMMAREA.XWHCD; /* warehouse from commarea*/
    SLWREC.XWHCD = COMMAREA.XWHCD;

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW07001; /* Converse the main process*/

    SW07001: SW07001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW07001; /* Converse the main process*/


  end // end main
end // end SW07

// Main process to display a map
Function SW07001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW07010(); /* Format and display the map*/

  SW07020(); /* Check attention identifier*/

  SW07030(); /* Reset fields to normal intensity*/

  SW07040(); /* Verify the data that was entered*/

  SW07050(); /* Process valid input request*/


end // end SW07001

// Format and display the map
Function SW07010()

   /* -----------------------------------------------------------*/
   /* If first pass, reset page and page of numbers.*/
   /* -----------------------------------------------------------*/

  if (SW07W00.SW07WPAS == "1" /* if first pass*/
  )                          
    SW07W00.TA5TSQIX = 1; /* set page*/
    SW07W00.XXXTSPAG = 1;
    SW07W01.SW07MCNF = "N"; /* confirmation = 'n'*/
    SW07M001.SW07MCNF = "N";

  end

   /* -----------------------------------------------------------*/
   /* If an error was found, save the error message number*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* if error found, save it*/

    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* -----------------------------------------------------------*/
   /* If required, format data to display.*/
   /* -----------------------------------------------------------*/

  if (SW07W00.SW07WSWF == "Y") /* Map must be formatted*/

    SW07011(); /* Format the data on the map*/

  end

   /* -----------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* -----------------------------------------------------------*/

  SW07M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW07M001.XWHCD = SLWREC.XWHCD; /* warehouse code*/

  SW07M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW07M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* -----------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)

    if (SLWREC.SLWMSGNO > 0 /* Message to display*/
     || COMMAREA.CAMSG > " ") /* or message text*/

      if (SLWREC.SLWMSGNO > 0) /* Message to display*/

        if (SLWREC.SLWMSGNO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(SLWREC.SLWMSGNO);
        end /* Message number*/

      else

        SW07M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

      end

      set SW07M001 alarm; /* Indicate sound alarm*/

    end

  end

   /* -------------------------------------------------------*/
   /* if needed, display default data for product on screen.*/
   /* -------------------------------------------------------*/

  if (SW07M001.XGPCD == " ")
    if (SW07M001.XWHCD == "51") /* whse cd = '51'*/
      SW07M001.XGPCD = "03";
    else /* other whse cd*/
      SW07M001.XGPCD = "02";
    end
  end

  if (SW07M001.XDMCD == " ")
    SW07M001.XDMCD = "00";
  end

  if (SW07M001.XQACD == " ")
    SW07M001.XQACD = "01";
  end

  if (SW07M001.PC2INSEG == " ")
    SW07M001.PC2INSEG = "000";
  end

  if (SW07M001.XEGCD == " ")
    SW07M001.XEGCD = "000";
  end

  if (SW07M001.XPGCD == " ")
    SW07M001.XPGCD = "00";
  end

  if (SW07M001.XUMCD == " ")
    SW07M001.XUMCD = "01";
  end

  if (SW07M001.XOWCD == " ")
    SW07M001.XOWCD = "00";
  end

  if (SW07M001.XSLCD == " ")
    SW07M001.XSLCD = "000";
  end

   /* -------------------------------------------------------*/
   /* display the page information on the screen.*/
   /* -------------------------------------------------------*/

  SW07M001.XXXTSPAG = SW07W00.XXXTSPAG;
  SW07M001.TA5TSQIX = SW07W00.TA5TSQIX;

  SW07M001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/


  converse SW07M001 ;


   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  SW07W00.SW07WSWF = "N"; /* Map format switch*/


end // end SW07010

// format the map
Function SW07011()
   /* -----------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* -----------------------------------------------------------*/

  SW07W00.SW07WSWF = "N"; /* Format the map switch*/

   /* -----------------------------------------------------------*/
   /* Format the data on map from the display storage.*/
   /* -----------------------------------------------------------*/

  set SW07M001 initial; /* m001 input/output area*/

  SW07M001.XWHCD = SLWREC.XWHCD;
  SW07M001.XWHABRV = SW07W01.XWHABRV;
  SW07M001.SW07MOPT = SW07W01.SW07MOPT;
  SW07M001.SWEPLLNB = SW07W01.SWEPLLNB;
  SW07M001.TS3CNTNR = SW07W01.TS3CNTNR;
  SW07M001.XGPCD = SW07W01.XGPCD;
  SW07M001.SY1STNBR = SW07W01.SY1STNBR;
  SW07M001.SY2CLRID = SW07W01.SY2CLRID;
  SW07M001.SY1SSTNM = SW07W01.SY1SSTNM;
  SW07M001.SY2CLRAB = SW07W01.SY2CLRAB;
  SW07M001.XDMCD = SW07W01.XDMCD;
  SW07M001.XQACD = SW07W01.XQACD;
  SW07M001.PC2INSEG = SW07W01.PC2INSEG;
  SW07M001.XEGCD = SW07W01.XEGCD;
  SW07M001.XPGCD = SW07W01.XPGCD;
  SW07M001.XUMCD = SW07W01.XUMCD;
  SW07M001.XOWCD = SW07W01.XOWCD;
  SW07M001.XSLCD = SW07W01.XSLCD;
  SW07M001.SL2PALET = SW07W01.SL2PALET;
  SW07M001.SY1UNPCS = SW07W01.SY1UNPCS;
  SW07M001.SW07MNUP = SW07W01.SW07MNUP;
  SW07M001.SW07MSAL = SW07W01.SW07MSAL;
  SW07M001.SW07MCNF = SW07W01.SW07MCNF;

  /* -------------------------------------------------------*/
  /* see if list of pallets needs to be displayed*/
  /* -------------------------------------------------------*/

  if (SW07W01.SW07MOPT == "P" /* plan option*/
   && SW07W00.SW07WPAS > "1") /* not first pass*/

    SW07012(); /* display pallets for plan*/

  end

  /* -------------------------------------------------------*/
  /* check the option and set field attributes as needed*/
  /*  */
  /* note: pallet option does not have a second pass.  Only 1 & 3*/
  /* -------------------------------------------------------*/

  if (SW07W01.SW07MOPT == "P") /* plan option*/

    set SW07M001.SL2PALET protect;

    if (SW07W00.SW07WPAS > "1") /* not first pass*/

      set SW07M001.XWHCD protect; /* protect key data*/
      set SW07M001.SW07MOPT protect;
      set SW07M001.SWEPLLNB protect;
      set SW07M001.TS3CNTNR protect;
      set SW07M001.XGPCD protect;
      set SW07M001.SY1STNBR protect;
      set SW07M001.SY2CLRID protect;
      set SW07M001.XDMCD protect;
      set SW07M001.XQACD protect;
      set SW07M001.PC2INSEG protect;
      set SW07M001.XEGCD protect;
      set SW07M001.XPGCD protect;
      set SW07M001.XUMCD protect;
      set SW07M001.XOWCD protect;
      set SW07M001.XSLCD protect;
      set SW07M001.SY1UNPCS protect;

      if (SW07W00.SW07WPAS == "2") /* second pass*/

        set SW07M001.SW07MSAL normal, cursor; /* open up 'select all'*/
        set SW07M001.SW07MCNF protect;

      end

      if (SW07W00.SW07WPAS == "3") /* third pass*/

      /* ---------------------------------------------------------*/
      /* protect all fields except the confirmation code.*/
      /* ---------------------------------------------------------*/

        set SW07M001.SW07MCNF cursor, normal;
        set SW07M001.SW07MNUP protect;
        set SW07M001.SW07MSAL protect;
        SW07W00.SW07WIXM = 1; /* reset map index*/

        while (SW07W00.SW07WIXM <= 64)

          set SW07M001.SW07MSEL[SW07WIXM] protect; /* protect select cd*/

          SW07W00.SW07WIXM = SW07W00.SW07WIXM + 1;

        end

      end

    end

  end

  if (SW07W01.SW07MOPT == "A") /* pallet option*/

    set SW07M001.XGPCD protect; /* protect style data*/
    set SW07M001.SY1STNBR protect;
    set SW07M001.SY2CLRID protect;
    set SW07M001.XDMCD protect;
    set SW07M001.XQACD protect;
    set SW07M001.PC2INSEG protect;
    set SW07M001.XEGCD protect;
    set SW07M001.XPGCD protect;
    set SW07M001.XUMCD protect;
    set SW07M001.XOWCD protect;
    set SW07M001.XSLCD protect;
    set SW07M001.SY1UNPCS protect;
    set SW07M001.SW07MSAL protect;

    if (SW07W00.SW07WPAS == "3") /* third pass*/

      /* ---------------------------------------------------------*/
      /* protect all fields except the confirmation code.*/
      /* ---------------------------------------------------------*/

      set SW07M001.XWHCD protect; /* protect key data*/
      set SW07M001.SW07MOPT protect;
      set SW07M001.SWEPLLNB protect;
      set SW07M001.TS3CNTNR protect;
      set SW07M001.SL2PALET protect;
      set SW07M001.SY1UNPCS protect;
      set SW07M001.SW07MNUP protect;
      set SW07M001.SW07MCNF cursor, normal;

    end

  end


end // end SW07011

// display pallets for plan
Function SW07012()

  /* ------------------------------------------------------------*/
  /* obtain the desired page from temporary storage.*/
  /* ------------------------------------------------------------*/

  SW07S01(); /* Obtain temporary storage page*/

  /* ---------------------------------------------------------*/
  /* Format the data in the map and load map display area from*/
  /* tsq data*/
  /* ---------------------------------------------------------*/

  SW07W01.SW07MGRP = SW07W02.SW07MGRP; /* move tsq page to w01*/
  SW07W00.SW07WIXM = 1; /* Initialize line index*/

  while (SW07W00.SW07WIXM <= 64 /* Until work area full*/
   && SW07W01.SW07MPLT[SW07WIXM] > " ") /* or no more data*/

    set SW07M001.SW07MSEL[SW07WIXM] normal;

    SW07M001.SW07MSEL[SW07WIXM] = SW07W01.SW07MSEL[SW07WIXM];
    SW07M001.SW07MPLT[SW07WIXM] = SW07W01.SW07MPLT[SW07WIXM];

    SW07W00.SW07WIXM = SW07W00.SW07WIXM + 1; /* Increment line index*/

  end


end // end SW07012

// Check attention identifier
Function SW07020()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SW07W01 empty; /* M001 display storage*/
    set SW07M001 initial;

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    SW07W00.SW07WPAS = "1"; /* set pass to 1*/
    SLWREC.XXXLOCID = "020";
    SLWREC.SLWMSGNO = 217; /* cancel request*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
    /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW07M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW07S04(); /* purge the tsq*/

      COMMAREA.CATOAP = SW07M001.CATOAP;
      COMMAREA.CAITEM = SW07M001.CAITEM;

      XSSL001(); /* Exit to another application*/

      set SW07M001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "020"; /* Module identification*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
    /* If HELP, exit to the previous level or exit to the Master*/
    /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW07M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* TO application*/
    end

    SW07S04(); /* purge the tsq*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    return; /* continue w/logic*/

  end


  if (converseVar.eventKey is pf7 /* and pf7 was pressed*/
   || converseVar.eventKey is pf8) /* and pf8 was pressed*/

    if (SW07M001.SW07MOPT == "P" /* plan option*/
     && SW07W00.SW07WPAS == "2") /* second pass*/

      return; /* Exit to display map*/

    end

  end


  converseLib.clearScreen();
   /* Clear screen before display*/
  SLWREC.XXXLOCID = "020"; /* Module identification*/
  converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

  exit stack; /* Exit to display map*/


end // end SW07020

// Reset highlighted fields
Function SW07030()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity (by pass# & option)*/
   /*  */
   /* note: pallet option does not have a second pass.  Only 1 & 3*/
   /* ------------------------------------------------------------*/

  if (SW07W00.SW07WPAS == "1") /* first pass*/

    set SW07M001.XWHCD normal;
    set SW07M001.SW07MOPT normal;
    set SW07M001.SWEPLLNB normal;
    set SW07M001.TS3CNTNR normal;
    set SW07M001.SW07MNUP normal;

    if (SW07M001.SW07MOPT == "P") /* plan option*/

      set SW07M001.XGPCD normal;
      set SW07M001.SY1STNBR normal;
      set SW07M001.SY2CLRID normal;
      set SW07M001.XDMCD normal;
      set SW07M001.XQACD normal;
      set SW07M001.PC2INSEG normal;
      set SW07M001.XEGCD normal;
      set SW07M001.XPGCD normal;
      set SW07M001.XUMCD normal;
      set SW07M001.XOWCD normal;
      set SW07M001.XSLCD normal;
      set SW07M001.SY1UNPCS normal;

    else /* pallet option*/

      set SW07M001.SL2PALET normal;

    end

  else

    if (SW07W00.SW07WPAS == "2") /* second pass*/

      set SW07M001.SW07MSAL normal;
      SW07W00.SW07WIXM = 1; /* reset map index*/

      while (SW07W00.SW07WIXM <= 64
       && SW07M001.SW07MPLT[SW07WIXM] > " ") /* until no more data*/

        set SW07M001.SW07MSEL[SW07WIXM] normal; /* reset select cd*/

        SW07W00.SW07WIXM = SW07W00.SW07WIXM + 1;

      end

    else /* third pass*/

      set SW07M001.SW07MCNF normal;

    end

  end


end // end SW07030

// verify the entered data
Function SW07040()
   /* -----------------------------------------------------------*/
   /* first save the map variable fields to working storage*/
   /* -----------------------------------------------------------*/

  COMMAREA.XWHCD = SW07M001.XWHCD;
  SLWREC.XWHCD = SW07M001.XWHCD;
  SW07W01.XWHCD = SW07M001.XWHCD;
  SW07W01.XWHABRV = SW07M001.XWHABRV;
  SW07W01.SWEPLLNB = SW07M001.SWEPLLNB;
  SW07W01.TS3CNTNR = SW07M001.TS3CNTNR;
  SW07W01.SW07MOPT = SW07M001.SW07MOPT;
  SW07W01.XGPCD = SW07M001.XGPCD;
  SW07W01.SY1STNBR = SW07M001.SY1STNBR;
  SW07W01.SY2CLRID = SW07M001.SY2CLRID;
  SW07W01.XDMCD = SW07M001.XDMCD;
  SW07W01.SY1SSTNM = SW07M001.SY1SSTNM;
  SW07W01.SY2CLRAB = SW07M001.SY2CLRAB;
  SW07W01.XQACD = SW07M001.XQACD;
  SW07W01.PC2INSEG = SW07M001.PC2INSEG;
  SW07W01.XEGCD = SW07M001.XEGCD;
  SW07W01.XPGCD = SW07M001.XPGCD;
  SW07W01.XUMCD = SW07M001.XUMCD;
  SW07W01.XOWCD = SW07M001.XOWCD;
  SW07W01.XSLCD = SW07M001.XSLCD;
  SW07W01.SL2PALET = SW07M001.SL2PALET;
  SW07W01.SY1UNPCS = SW07M001.SY1UNPCS;
  SW07W01.SW07MNUP = SW07M001.SW07MNUP;
  SW07W01.SW07MSAL = SW07M001.SW07MSAL;
  SW07W01.SW07MCNF = SW07M001.SW07MCNF;

  if (SW07M001.SW07MOPT == "P" /* plan option*/
   && SW07W00.SW07WPAS == "2") /* second pass*/

    SW07W00.SW07WIXM = 1; /* initialize line index*/
    while (SW07W00.SW07WIXM <= 64)

      SW07W01.SW07MSEL[SW07WIXM] = SW07M001.SW07MSEL[SW07WIXM];
      SW07W01.SW07MPLT[SW07WIXM] = SW07M001.SW07MPLT[SW07WIXM];

      SW07W00.SW07WIXM = SW07W00.SW07WIXM + 1; /* increment index*/

    end

  end

   /* -----------------------------------------------------------*/
   /* determine editing to be done based on pass number*/
   /*  */
   /* note: pallet option does not have a second pass.  Only 1 & 3.*/
   /* -----------------------------------------------------------*/

  if (SW07W00.SW07WPAS == "1") /* ; if first time thru*/

    SW07041();

  else

    if (SW07W00.SW07WPAS == "2") /* if second time thru*/

      SW07045();

    else /* if third time trhu*/

      SW07046();

    end

  end


end // end SW07040

// validate key data
Function SW07041()

   /* ------------------------------------------------------------*/
   /* If a required field was not entered on the first pass*/
   /* indicate that it is missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SW07M001.XWHCD == " ")
    set SW07M001.XWHCD cursor, bold;
    converseLib.validationFailed(09);
  else
    if (SW07M001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SW07W01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      else
        set SW07M001.XWHCD cursor, bold;
        converseLib.validationFailed(11);
      end
    else
      set SW07M001.XWHCD cursor, bold;
      converseLib.validationFailed(11);
    end
  end

  if (SW07M001.SWEPLLNB == 0)
    set SW07M001.SWEPLLNB cursor, bold;
    converseLib.validationFailed(150);
  else
    set SWEREC empty;
    SWEREC.XWHCD = SW07M001.XWHCD;
    SWEREC.SWEPLLNB = SW07M001.SWEPLLNB;

    SW07S14(); /* get plan header row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* plan not found*/
      set SW07M001.SWEPLLNB cursor, bold;
      converseLib.validationFailed(249);
    end

  end

  if (SW07M001.TS3CNTNR == " ")
    set SW07M001.TS3CNTNR cursor, bold;
    converseLib.validationFailed(09);
  end

  if (SW07M001.SW07MOPT == " ")
    set SW07M001.SW07MOPT cursor, bold;
    converseLib.validationFailed(09);
  else
    if (SW07M001.SW07MOPT != "P"
     && SW07M001.SW07MOPT != "A")
      set SW07M001.SW07MOPT cursor, bold;
      converseLib.validationFailed(11);
    end
  end

  if (SW07M001.SW07MNUP == 0)
    set SW07M001.SW07MNUP cursor, bold;
    converseLib.validationFailed(150);
  end

  if (converseVar.validationMsgNum != 0) /* errors found?*/
    SLWREC.XXXLOCID = "041";
  end

   /* ---------------------------------------------------*/
   /* do option dependent special editings.*/
   /* ---------------------------------------------------*/

  if (SW07M001.SW07MOPT == "P") /* plan option*/

    SW07042(); /* edit plan data*/

  else

    if (SW07M001.SW07MOPT == "A") /* pallet option*/

      SW07043(); /* edit pallet data*/

    end

  end

   /* ---------------------------------------------------*/
   /* get style and color descriptions.*/
   /* ---------------------------------------------------*/

  SW07W01.SY1SSTNM = " "; /* style name*/
  SW07M001.SY1SSTNM = " ";
  SW07W01.SY2CLRAB = " "; /* color abrev*/
  SW07M001.SY2CLRAB = " ";

  if (converseVar.validationMsgNum == 0) /* no errors*/

    set SYCREC empty;

    SYCREC.XGPCD = SW07W01.XGPCD;
    SYCREC.SY1STNBR = SW07W01.SY1STNBR;
    SYCREC.SY2CLRID = SW07W01.SY2CLRID;
    SYCREC.XDMCD = SW07W01.XDMCD;

    SW07S13();

    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/

      SW07W01.SY1SSTNM = SYCREC.SY1SSTNM; /* style name*/
      SW07M001.SY1SSTNM = SYCREC.SY1SSTNM;
      SW07W01.SY2CLRAB = SYCREC.SY2CLRAB; /* color abrev*/
      SW07M001.SY2CLRAB = SYCREC.SY2CLRAB;

    else /* row not found*/

      set SW07M001.XGPCD cursor, bold; /* set attributes*/
      set SW07M001.SY1STNBR bold;
      set SW07M001.SY2CLRID bold;
      set SW07M001.XDMCD bold;
      converseLib.validationFailed(056);
      SLWREC.XXXLOCID = "041"; /* module id*/

    end

  end


end // end SW07041

// validate plan key data
Function SW07042()

   /* -----------------------------------------------------*/
   /* for plan option, blank out some fields & edit others*/
   /* -----------------------------------------------------*/

  SW07W01.SL2PALET = " "; /* blank out pallet*/
  SW07M001.SL2PALET = " ";
  set SW07M001.SL2PALET protect;

  if (SW07M001.XGPCD == " " /* valid product data?*/
   || SW07M001.SY1STNBR == " "
   || SW07M001.SY2CLRID == " "
   || SW07M001.XDMCD == " " 
   || SW07M001.XQACD == " " 
   || SW07M001.PC2INSEG == " "
   || SW07M001.XEGCD == " " 
   || SW07M001.XPGCD == " " 
   || SW07M001.XUMCD == " " 
   || SW07M001.XOWCD == " " 
   || SW07M001.XSLCD == " ")
    set SW07M001.XGPCD cursor, bold;
    set SW07M001.SY1STNBR bold;
    set SW07M001.SY2CLRID bold;
    set SW07M001.XDMCD bold;
    set SW07M001.XQACD bold;
    set SW07M001.PC2INSEG bold;
    set SW07M001.XEGCD bold;
    set SW07M001.XPGCD bold;
    set SW07M001.XUMCD bold;
    set SW07M001.XOWCD bold;
    set SW07M001.XSLCD bold;
    converseLib.validationFailed(43);
  end

  if (SW07M001.SY1UNPCS == 0)
    set SW07M001.SY1UNPCS cursor, bold;
    converseLib.validationFailed(150);
  end

  if (converseVar.validationMsgNum > 0)
    SLWREC.XXXLOCID = "042";
  end


end // end SW07042

// validate pallet key data
Function SW07043()

   /* -----------------------------------------------------------*/
   /* for pallet option, blank out some fields & edit others.*/
   /* -----------------------------------------------------------*/

  SW07W01.XGPCD = " "; /* blank product, upcs & pallets*/
  SW07M001.XGPCD = " ";
  set SW07M001.XGPCD protect;
  SW07W01.SY1STNBR = " ";
  SW07M001.SY1STNBR = " ";
  set SW07M001.SY1STNBR protect;
  SW07W01.SY2CLRID = " ";
  SW07M001.SY2CLRID = " ";
  set SW07M001.SY2CLRID protect;
  SW07W01.XDMCD = " ";
  SW07M001.XDMCD = " ";
  set SW07M001.XDMCD protect;
  SW07W01.XQACD = " ";
  SW07M001.XQACD = " ";
  set SW07M001.XQACD protect;
  SW07W01.PC2INSEG = " ";
  SW07M001.PC2INSEG = " ";
  set SW07M001.PC2INSEG protect;
  SW07W01.XEGCD = " ";
  SW07M001.XEGCD = " ";
  set SW07M001.XEGCD protect;
  SW07W01.XPGCD = " ";
  SW07M001.XPGCD = " ";
  set SW07M001.XPGCD protect;
  SW07W01.XUMCD = " ";
  SW07M001.XUMCD = " ";
  set SW07M001.XUMCD protect;
  SW07W01.XOWCD = " ";
  SW07M001.XOWCD = " ";
  set SW07M001.XOWCD protect;
  SW07W01.XSLCD = " ";
  SW07M001.XSLCD = " ";
  set SW07M001.XSLCD protect;
  SW07W01.SY1UNPCS = 0;
  SW07M001.SY1UNPCS = 0;
  set SW07M001.SY1UNPCS protect;
  SW07W01.SW07MSAL = " ";
  SW07M001.SW07MSAL = " ";
  set SW07M001.SW07MSAL protect;
  SW07W01.SW07MGRP = " ";

   /* -----------------------------------------------------------*/
   /* if pallet number was entered, go get row from Vrlitm01 tbl.*/
   /* -----------------------------------------------------------*/

  if (SW07M001.SL2PALET == " ")
    set SW07M001.SL2PALET cursor, bold;
    converseLib.validationFailed(09);
    SLWREC.XXXLOCID = "043";
  else
    if (converseVar.validationMsgNum == 0)

      SW07044(); /* get single pallet row*/

    end
  end


end // end SW07043

// get Vrlitm data for pallet
Function SW07044()

  /* ------------------------------------------------------------*/
  /* initialize records and set key*/
  /* ------------------------------------------------------------*/

  set SQLCA empty;
  set SL2REC empty; /* Dstloc.Vrlitm01*/

  SL2REC.XWHCD = SW07W01.XWHCD;
  SL2REC.SWEPLLNB = SW07W01.SWEPLLNB;
  SL2REC.TS3CNTNR = SW07W01.TS3CNTNR;
  SL2REC.SL2PALET = SW07W01.SL2PALET;
  SL2REC.XGPCD = "*";
  SL2REC.SY1STNBR = "*";
  SL2REC.SY2CLRID = "*";
  SL2REC.XDMCD = "*";
  SL2REC.XQACD = "*";
  SL2REC.PC2INSEG = "*";
  SL2REC.XEGCD = "*";
  SL2REC.XPGCD = "*";
  SL2REC.XUMCD = "*";
  SL2REC.XOWCD = "*";
  SL2REC.XSLCD = "*";
  SL2REC.PKDNCSQN = -1;
  SL2REC.PC3PONBR = -1;
  SL2REC.SL2CASE = "*";

  /* ------------------------------------------------------------*/
  /* declare the table cursor and read first row*/
  /* ------------------------------------------------------------*/

  SW07S05(); /* declare cursor and open*/

  SW07S06(); /* fetch row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* data found*/

    SW07W01.XGPCD = SL2REC.XGPCD;
    SW07M001.XGPCD = SL2REC.XGPCD;
    SW07W01.SY1STNBR = SL2REC.SY1STNBR;
    SW07M001.SY1STNBR = SL2REC.SY1STNBR;
    SW07W01.SY2CLRID = SL2REC.SY2CLRID;
    SW07M001.SY2CLRID = SL2REC.SY2CLRID;
    SW07W01.XDMCD = SL2REC.XDMCD;
    SW07M001.XDMCD = SL2REC.XDMCD;
    SW07W01.XQACD = SL2REC.XQACD;
    SW07M001.XQACD = SL2REC.XQACD;
    SW07W01.PC2INSEG = SL2REC.PC2INSEG;
    SW07M001.PC2INSEG = SL2REC.PC2INSEG;
    SW07W01.XEGCD = SL2REC.XEGCD;
    SW07M001.XEGCD = SL2REC.XEGCD;
    SW07W01.XPGCD = SL2REC.XPGCD;
    SW07M001.XPGCD = SL2REC.XPGCD;
    SW07W01.XUMCD = SL2REC.XUMCD;
    SW07M001.XUMCD = SL2REC.XUMCD;
    SW07W01.XOWCD = SL2REC.XOWCD;
    SW07M001.XOWCD = SL2REC.XOWCD;
    SW07W01.XSLCD = SL2REC.XSLCD;
    SW07M001.XSLCD = SL2REC.XSLCD;
    SW07W01.SY1UNPCS = SL2REC.SY1UNPCS;
    SW07M001.SY1UNPCS = SL2REC.SY1UNPCS;

  else

    /* ----------------------------------------------------------*/
    /* If no data found indicate no data to display*/
    /* ----------------------------------------------------------*/

    set SW07M001.SL2PALET cursor, bold;
    SLWREC.XXXLOCID = "044";
    converseLib.validationFailed(214);

  end

  /* ------------------------------------------------------------*/
  /* close the cursor*/
  /* ------------------------------------------------------------*/

  SW07S07();


end // end SW07044

// validate update by plan
Function SW07045()

   /* -----------------------------------------------------------*/
   /* If a required field was not entered on the second pass*/
   /* for plan, indicate that it is missing or invalid.*/
   /* -----------------------------------------------------------*/

  if (SW07M001.SW07MSAL == " ")
    set SW07M001.SW07MSAL cursor, bold;
    converseLib.validationFailed(09);
  else
    if (SW07M001.SW07MSAL != "Y"
     && SW07M001.SW07MSAL != "N")
      set SW07M001.SW07MSAL cursor, bold;
      converseLib.validationFailed(257);
    end
  end

   /* -----------------------------------------------------------*/
   /* edit selection codes on list of pallets*/
   /* -----------------------------------------------------------*/

  SW07W00.SW07WSWS = "N"; /* reset pallets selected sw*/
  SW07W00.SW07WIXM = 1;

  while (SW07W00.SW07WIXM <= 64
   && SW07M001.SW07MPLT[SW07WIXM] > " ")

    if (SW07M001.SW07MSEL[SW07WIXM] > " ") /* data on select cd*/

      if (SW07M001.SW07MSAL == "Y") /* all selected*/

        set SW07M001.SW07MSAL cursor, bold; /* incompatible*/
        set SW07M001.SW07MSEL[SW07WIXM] bold;
        converseLib.validationFailed(11);

      else /* not all selected*/

        if (SW07M001.SW07MSEL[SW07WIXM] == "S") /* good select cd*/

          SW07W00.SW07WSWS = "Y"; /* a pallet selected*/
          SW07W02.SW07MSEL[SW07WIXM] = SW07M001.SW07MSEL[SW07WIXM];

        else

          set SW07M001.SW07MSEL[SW07WIXM] cursor, bold;
          converseLib.validationFailed(228); /* invalid code (not 's')*/

        end

      end

    end

    SW07W00.SW07WIXM = SW07W00.SW07WIXM + 1;

  end

   /* -----------------------------------------------------------*/
   /* if no "select all" and no pallets on list were selected*/
   /* display error message.*/
   /* -----------------------------------------------------------*/

  if (SW07M001.SW07MSAL == "N" /* not "select all"*/
   && SW07W00.SW07WSWS == "N") /* not pallets selected*/

    converseLib.validationFailed(228); /* no lines selected*/

  end

   /* -----------------------------------------------------------*/
   /* if no errors, update tsq page*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors found*/

    SW07S03(); /* update current page*/

  else /* errors found?*/

    SLWREC.XXXLOCID = "045";

  end


end // end SW07045

// validate confirmation code
Function SW07046()

  if (SW07M001.SW07MCNF == " ")
    set SW07M001.SW07MCNF cursor, bold;
    converseLib.validationFailed(09);
  else
    if (SW07M001.SW07MCNF != "Y"
     && SW07M001.SW07MCNF != "N")
      set SW07M001.SW07MCNF cursor, bold;
      converseLib.validationFailed(257);
    end
  end

  if (converseVar.validationMsgNum != 0)
    SLWREC.XXXLOCID = "046";
  end


end // end SW07046

// process valid option
Function SW07050()

   /* -----------------------------------------------------------*/
   /* if any errors, get out*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0)

    return;

  end

   /* -----------------------------------------------------------*/
   /* process according to option and pass number*/
   /*  */
   /* note: pallet option does not have a second pass.  Only 1 & 3.*/
   /* -----------------------------------------------------------*/

  if (SW07W00.SW07WPAS == "1")

    SW07051();

  else

    if (SW07W00.SW07WPAS == "2")

      SW07053();

    else /* third pass*/

      SW07054();

    end

  end

   /* -----------------------------------------------------------*/
   /* if any errors, get out*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0)

    return;

  end

   /* -----------------------------------------------------------*/
   /* set new pass number*/
   /*  */
   /* note: pallet option does not have a second pass.  Only 1 & 3.*/
   /* -----------------------------------------------------------*/

  if (SW07W00.SW07WPAS == "1") /* ; if first time thru*/

    if (SW07W01.SW07MOPT == "P") /* plan option*/

      SW07W00.SW07WPAS = "2";

    else /* pallet option*/

      SW07W00.SW07WPAS = "3";
      SW07W01.SW07MCNF = "Y";

    end

  else

    if (SW07W00.SW07WPAS == "2") /* if second time thru*/

      if (converseVar.eventKey not pf7
       && converseVar.eventKey not pf8)

        SW07W00.SW07WPAS = "3";
        SW07W01.SW07MCNF = "Y";

      end

    else /* third time thru*/

      SW07W00.SW07WPAS = "1"; /* start first pass again*/

    end

  end

  SW07W00.SW07WSWF = "Y"; /* format screen*/


end // end SW07050

// process pass 1
Function SW07051()

   /* ---------------------------------------------------*/
   /* if plan option, go get all pallets for plan.*/
   /* ---------------------------------------------------*/

  if (SW07W01.SW07MOPT == "P") /* plan option*/

    SW07052(); /* get all pallets for plan*/

  end


end // end SW07051

// get all pallets for plan
Function SW07052()

  /* ------------------------------------------------------------*/
  /* purge any tempory storage*/
  /* ------------------------------------------------------------*/

  SW07S04(); /* purge tsq*/

  /* ------------------------------------------------------------*/
  /* initialize records and set key*/
  /* ------------------------------------------------------------*/

  set SQLCA empty;
  set SL2REC empty; /* Dstloc.Vrlitm01*/

  SL2REC.XWHCD = SW07W01.XWHCD;
  SL2REC.SWEPLLNB = SW07W01.SWEPLLNB;
  SL2REC.TS3CNTNR = SW07W01.TS3CNTNR;
  SL2REC.XGPCD = SW07W01.XGPCD;
  SL2REC.SY1STNBR = SW07W01.SY1STNBR;
  SL2REC.SY2CLRID = SW07W01.SY2CLRID;
  SL2REC.XDMCD = SW07W01.XDMCD;
  SL2REC.XQACD = SW07W01.XQACD;
  SL2REC.PC2INSEG = SW07W01.PC2INSEG;
  SL2REC.XEGCD = SW07W01.XEGCD;
  SL2REC.XPGCD = SW07W01.XPGCD;
  SL2REC.XUMCD = SW07W01.XUMCD;
  SL2REC.XOWCD = SW07W01.XOWCD;
  SL2REC.XSLCD = SW07W01.XSLCD;
  SL2REC.SY1UNPCS = SW07W01.SY1UNPCS;
  SL2REC.SL2PALET = "*";
  SL2REC.PKDNCSQN = -1;
  SL2REC.PC3PONBR = -1;
  SL2REC.SL2CASE = "*";

  /* ------------------------------------------------------------*/
  /* declare the table cursor and read first row*/
  /* ------------------------------------------------------------*/

  SW07S05(); /* declare cursor and open*/

  SW07S06(); /* fetch 1st row*/

  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* (only those rows were plan number and units per case match*/
  /* the user's criteria).*/
  /* ------------------------------------------------------------*/

  set SW07W02 empty;
  SW07W00.SW07SPLT = " "; /* reset save pallet*/
  SW07W00.SW07WIXM = 0; /* map line index*/

  while (SQLCA.VAGen_SQLCODE == 0) /* while not end of cursor*/

    if (SL2REC.SWEPLLNB == SW07W01.SWEPLLNB
     && SL2REC.SY1UNPCS == SW07W01.SY1UNPCS
     && SL2REC.SL2PALET > " "
     && SL2REC.SL2PALET != SW07W00.SW07SPLT) /* no = last*/

      SW07WIXM = SW07WIXM + 1;
      SW07W02.SW07MSEL[SW07WIXM] = " ";
      SW07W02.SW07MPLT[SW07WIXM] = SL2REC.SL2PALET;
      SW07W00.SW07SPLT = SL2REC.SL2PALET; /* save pallet*/

    /* ----------------------------------------------------------*/
    /* if page is full add page to tsq*/
    /* ----------------------------------------------------------*/

      if (SW07W00.SW07WIXM == 64) /* page is full*/

        SW07S02();

        SW07W00.SW07WIXM = 0;
        set SW07W02 empty;

      end

    end

    SW07S06(); /* fetch next row*/

  end

  /* ------------------------------------------------------------*/
  /* close the cursor*/
  /* ------------------------------------------------------------*/

  SW07S07();

  /* ------------------------------------------------------------*/
  /* add any  partialy formatted pages to tsq*/
  /* ------------------------------------------------------------*/

  if (SW07W00.SW07WIXM > 0)

    SW07S02();

  end

  /* ------------------------------------------------------------*/
  /* if no data found, indicate no data to display*/
  /* ------------------------------------------------------------*/

  if (SW07W00.TA5TSQIX == 0)

    SLWREC.XXXLOCID = "052";
    converseLib.validationFailed(214);

  end


end // end SW07052

// process second pass
Function SW07053()

  /* ------------------------------------------------------------*/
  /* If a scroll was requested, increment or decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    if (SW07W00.XXXTSPAG > 1)
      SW07W00.XXXTSPAG = SW07W00.XXXTSPAG - 1; /* Decrement page*/
    else
      converseLib.validationFailed(7); /* already at top*/
      SLWREC.XXXLOCID = "053";
    end

  else

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/

      if (SW07W00.XXXTSPAG < SW07W00.TA5TSQIX)
        SW07W00.XXXTSPAG = SW07W00.XXXTSPAG + 1; /* Increment page*/
      else
        converseLib.validationFailed(8); /* already at bottom*/
        SLWREC.XXXLOCID = "053";
      end

    end

  end


end // end SW07053

// process third pass
Function SW07054()

   /* -----------------------------------------------------------*/
   /* check confirmation flag*/
   /* -----------------------------------------------------------*/

  if (SW07M001.SW07MCNF == "Y") /* update confirmed*/

    SW07055(); /* update pallet(s)*/

    if (converseVar.validationMsgNum == 0)

      SLWREC.SLWMSGNO = 20; /* request completed*/

    end

  else /* update not confirmed*/

    /* -----------------------------------------------------------*/
    /* confirmation = 'no'*/
    /* -----------------------------------------------------------*/

    SLWREC.SLWMSGNO = 29; /* request cancelled*/

  end

  SLWREC.XXXLOCID = "054";


end // end SW07054

// update pallets
Function SW07055()
  /* ------------------------------------------------------------*/
  /* do updates for third pass depending on option*/
  /*  */
  /* first, prepare sl2rec and sllrec*/
  /* ------------------------------------------------------------*/

  set SQLCA empty;
  set SL2REC empty; /* Dstloc.Vrlitm01*/
  SL2REC.XWHCD = SW07W01.XWHCD;
  SL2REC.TS3CNTNR = SW07W01.TS3CNTNR;
  SL2REC.SWEPLLNB = SW07W01.SWEPLLNB;
  SL2REC.XGPCD = SW07W01.XGPCD;
  SL2REC.SY1STNBR = SW07W01.SY1STNBR;
  SL2REC.SY2CLRID = SW07W01.SY2CLRID;
  SL2REC.XDMCD = SW07W01.XDMCD;
  SL2REC.XQACD = SW07W01.XQACD;
  SL2REC.XOWCD = SW07W01.XOWCD;
  SL2REC.PC2INSEG = SW07W01.PC2INSEG;
  SL2REC.XEGCD = SW07W01.XEGCD;
  SL2REC.XPGCD = SW07W01.XPGCD;
  SL2REC.XUMCD = SW07W01.XUMCD;
  SL2REC.XSLCD = SW07W01.XSLCD;

  set SLLREC empty; /* Dstloc.Vwophd01*/
  SLLREC.XWHCD = SW07W01.XWHCD; /* build wo hdr rec key*/
  SLLREC.TSHCNTNR = SW07W01.TS3CNTNR;
  SLLREC.SWEPLLNB = SW07W01.SWEPLLNB;
  SLLREC.SL8WOGRP = SWEREC.SL8WOGRP;

  if (SW07M001.SW07MOPT == "P") /* plan option*/

    /* -----------------------------------------------------------*/
    /* process all tsq pages updating all selected pallets*/
    /* -----------------------------------------------------------*/

    SW07W00.XXXTSPAG = 1;

    while (SW07W00.XXXTSPAG <= SW07W00.TA5TSQIX
     && converseVar.validationMsgNum == 0)

      SW07S01(); /* read tsq page*/

      SW07W01.SW07MGRP = SW07W02.SW07MGRP;
      SW07W00.SW07WIXM = 1;

      while (SW07W00.SW07WIXM <= 64 /**/
       && SW07W01.SW07MPLT[SW07WIXM] > " ") /* do until no more data*/

        if (SW07W01.SW07MSAL == "Y" /* selected?*/
         || SW07W01.SW07MSEL[SW07WIXM] == "S")

          SL2REC.SL2PALET = SW07W01.SW07MPLT[SW07WIXM];
          SLLREC.SL2PALET = SW07W01.SW07MPLT[SW07WIXM];

          SW07056(); /* update vrlitm01/vwophd01*/

          if (SW07W00.SW07WSWU == "N") /* pallet not updated*/
            set SW07M001.SW07MSEL[SW07WIXM] cursor, bold;
          end

        end

        SW07W00.SW07WIXM = SW07W00.SW07WIXM + 1;

      end

      SW07W00.XXXTSPAG = SW07W00.XXXTSPAG + 1;

    end

    SW07W00.XXXTSPAG = TA5REC.TA5TSQIX; /* set last page processed*/

  else /* pallet option*/

    SL2REC.SL2PALET = SW07W01.SL2PALET;
    SLLREC.SL2PALET = SW07W01.SL2PALET;

    SW07056(); /* update vrlitm01/vwophd01*/

    if (SW07W00.SW07WSWU == "N") /* pallet not updated*/
      set SW07M001.SL2PALET cursor, bold;
    end

  end

  /* ------------------------------------------------------------*/
  /* if errors found, rollback updates.*/
  /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* errors found?*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all updates*/

  end


end // end SW07055

// update tbl rows for pallet
Function SW07056()

  SW07W00.SW07WSWU = "N"; /* row updated switch*/

  /* ------------------------------------------------------------*/
  /* set generic fields for cursor read*/
  /* ------------------------------------------------------------*/

  SL2REC.PKDNCSQN = -1;
  SL2REC.PC3PONBR = -1;
  SL2REC.SL2CASE = "*";

  /* ------------------------------------------------------------*/
  /* declare the table cursor for selected pallet, then fetch 1st row*/
  /* ------------------------------------------------------------*/

  SW07S05(); /* declare cursor and open*/

  SW07S06(); /* fetch row*/

  /* ----------------------------------------------------------*/
  /* update rows one at a time.*/
  /* ----------------------------------------------------------*/

  while (SQLCA.VAGen_SQLCODE == 0)

    /* --------------------------------------------------------*/
    /* make sure we have a correct row*/
    /* --------------------------------------------------------*/

    if (SL2REC.SWEPLLNB == SW07W01.SWEPLLNB
     && SL2REC.SY1UNPCS == SW07W01.SY1UNPCS)

    /* --------------------------------------------------------*/
    /* update vrlitm01 table. Then if a row for the current data*/
    /* also exists on vwophd01 table, update it.*/
    /* --------------------------------------------------------*/

      SL2REC.SY1UNPCS = SW07W01.SW07MNUP; /* new u per case*/

      SW07S08(); /* update vrlitm01*/

      if (SQLCA.VAGen_SQLCODE == 0)
        SW07W00.SW07WSWU = "Y"; /* row updated*/
      end

    end

    SW07S06(); /* fetch next dstloc.vrlitm01 row*/

  end

  /* ------------------------------------------------------------*/
  /* close the dstloc.vrlitm01 cursor*/
  /* ------------------------------------------------------------*/

  SW07S07();

  /* ----------------------------------------------------------*/
  /* If no data to update was found, display error msg, get out*/
  /* ----------------------------------------------------------*/

  if (SW07W00.SW07WSWU == "N") /* no rows updated*/

    converseLib.validationFailed(316);
    SLWREC.XXXLOCID = "056"; /* row not found for update*/

    return;

  end

  /* ------------------------------------------------------------*/
  /* see if rows for data entered on screen exists on the*/
  /* dstloc.vwophd01 table, if so, update it.*/
  /* ------------------------------------------------------------*/

  SLLREC.SL8WONBR = -1; /* make these fields generic for read*/
  SLLREC.SL8FRAR = "*";
  SLLREC.SL8FRZN = "*";
  SLLREC.SL8FRLC = "*";

  SW07S09(); /* open wo hdr cursor*/

  SW07S10(); /* fetch wo hdr row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* wo hdr exists*/

    SLLREC.SY1UNPCS = SW07W01.SW07MNUP; /* new u per case*/
    SLLREC.SL8UPDBY = COMMAREA.CAUSERID; /* user id*/

    SW07S11(); /* update vwophd01*/

  end

  SW07S12(); /* close wo hdr cursor*/


end // end SW07056

// obtain tsq page
Function SW07S01()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW07W02.XXXTSLEN = SW07W00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5TSQIX = SW07W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(109); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S01

// add tsq page
Function SW07S02()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW07W02.XXXTSLEN = SW07W00.XXXTSLEN;
  if (SW07W00.TA5TSQIX > 0)
    SW07W00.TA5TSQIX = SW07W00.TA5TSQIX + 1;
  else
    SW07W00.TA5TSQIX = 1;
  end
  TA5REC.TA5TSQIX = SW07W00.TA5TSQIX; /* Highest page number*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SW07W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(109); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S02

// update current tsq page
Function SW07S03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  SW07W02.XXXTSLEN = SW07W00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/
  converseLib.validationFailed(109); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S03

// delete tsq pages
Function SW07S04()

   /* -----------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* -----------------------------------------------------------*/

  SW07W00.TA5TSQIX = 0;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* -----------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* -----------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* -----------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* -----------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/
  converseLib.validationFailed(109); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S04

// declare dstloc.vrlitm01 crsr
Function SW07S05()

   /* ------------------------------------------------------------*/
   /* declare and open cursor for the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("S9", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR FOR TBL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2DATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S05

// fetch dstloc.vrlitm01 crsr
Function SW07S06()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("N9", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2DATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S06

// close dstloc.vrlitm01 crsr
Function SW07S07()
   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("C9", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE THE CURSOR    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2DATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S07

// update dstloc.vrlitm01
Function SW07S08()
   /* -------- y2k out begin -------*/
   /* MOVE EZEDTE TO SL2REC.ZZZCHGDT;*/
   /* SL2REC.ZZZCHGDT = SL2REC.ZZZCHGDT + 19000000;*/
   /* -------- y2k out end ---------*/

   /* -------- y2k in  begin -------*/
  SL2REC.ZZZCHGDT = VGVar.currentGregorianDate;
   /* -------- y2k in end ----------*/

  SW07W00.SW07WTIM = VGVar.currentFormattedTime;
  SW07W00.SW07WHH2 = SW07W00.SW07WHH1;
  SW07W00.SW07WMM2 = SW07W00.SW07WMM1;
  SL2REC.ZZZCHGTM = SW07W00.SW07WTME;

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("U ", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2DATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S08

// open dstloc.vwophd01 cursor
Function SW07S09()
   /* ------------------------------------------------------------*/
   /* open cursor for dstloc.vwophd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5400" ("S4", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR FOR TBL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S09

// fetch dstloc.vwophd01 crsr
Function SW07S10()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vwophd01 cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5400" ("N4", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or  not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S10

// update dstloc.vwophd01
Function SW07S11()
   /* ------- y2k out begin --------*/
   /* MOVE EZEDTE TO SLLREC.ZZZCHGDT;*/
   /* SLLREC.ZZZCHGDT = SLLREC.ZZZCHGDT + 19000000;*/
   /* ------- y2k out end ----------*/

   /* ------- y2k in  begin --------*/
  SLLREC.ZZZCHGDT = VGVar.currentGregorianDate;
   /* ------- y2k in end -----------*/

  SW07W00.SW07WTIM = VGVar.currentFormattedTime;
  SW07W00.SW07WHH2 = SW07W00.SW07WHH1;
  SW07W00.SW07WMM2 = SW07W00.SW07WMM1;
  SLLREC.ZZZCHGTM = SW07W00.SW07WTME;

   /* -----------------------------------------------------------*/
   /* update dstloc.vwophd01.*/
   /* -----------------------------------------------------------*/

  try
    call "IO5400" ("U ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or  not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S11

// close dstloc.vwophd01 crsr
Function SW07S12()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwophd01 cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5400" ("C4", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR FOR TBL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S12

// verify style & color
Function SW07S13()
   /* -----------------------------------------------------------*/
   /* Verify the style and color                  DPROD.VCOLOR02*/
   /* -----------------------------------------------------------*/

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* return to calling process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S13"; /* module id*/

  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";

  else

    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";

    converseLib.clearScreen();
     /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FROM TBL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S13

// get plan hdr row
Function SW07S14()
   /* ------------------------------------------------------------*/
   /* get plan header row                         DSTL0C.VPLNHD01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* return to calling process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S14"; /* module id*/

  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";

  else

    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";

    converseLib.clearScreen();
     /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FROM TBL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW07S14

//*** RECORD=SW07W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW07W00 type basicRecord
  5 * char(37) ; 
    10 SW07WSWF SW07WSWF ; 
    10 SW07WSWS SW07WSWS ; 
    10 SW07WSWU SW07WSWU ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 SLWMSGNO SLWMSGNO ; 
    10 SW07WIXM SW07WIXM ; 
    10 SW07WPAS SW07WPAS ; 
    10 SW07SPLT SW07SPLT ; 
    10 SW07WTIM SW07WTIM ; 
      15 SW07WHH1 SW07WHH1 ; 
      15 * char(1) ; 
      15 SW07WMM1 SW07WMM1 ; 
      15 * char(3) ; 
    10 SW07WTME SW07WTME ; 
      15 SW07WHH2 SW07WHH2 ; 
      15 SW07WMM2 SW07WMM2 ; 
end // end SW07W00

//*** RECORD=SW07W01 ****
// ************************************************************
// working storage for sw07 map.
// ************************************************************
// 
// ***********************
Record SW07W01 type basicRecord
  3 XXXTSLEN XXXTSLEN ; 
  3 * char(486) ; 
    5 XWHCD XWHCD ; 
    5 XWHABRV XWHABRV ; 
    5 SW07MOPT SW07MOPT ; 
    5 SWEPLLNB SWEPLLNB ; 
    5 TS3CNTNR TS3CNTNR ; 
    5 XGPCD XGPCD ; 
    5 SY1STNBR SY1STNBR ; 
    5 SY2CLRID SY2CLRID ; 
    5 XDMCD XDMCD ; 
    5 SY1SSTNM SY1SSTNM ; 
    5 SY2CLRAB SY2CLRAB ; 
    5 XQACD XQACD ; 
    5 PC2INSEG PC2INSEG ; 
    5 XEGCD XEGCD ; 
    5 XPGCD XPGCD ; 
    5 XUMCD XUMCD ; 
    5 XOWCD XOWCD ; 
    5 XSLCD XSLCD ; 
    5 SL2PALET SL2PALET ; 
    5 SY1UNPCS SY1UNPCS ; 
    5 SW07MNUP SW07MNUP ; 
    5 SW07MSAL SW07MSAL ; 
    5 SW07MGRP SW07MGRP ; 
      10 * char(6) [64] ; 
        15 SW07MSEL SW07MSEL ; 
        15 SW07MPLT SW07MPLT ; 
    5 SW07MCNF SW07MCNF ; 
end // end SW07W01

//*** RECORD=SW07W02 ****
// ************************************************************
// working storage for plan - pallets storage and display
// 
// ************************************************************
// 
// ***********************
Record SW07W02 type basicRecord
  3 XXXTSLEN XXXTSLEN ; 
  3 * char(384) ; 
    5 SW07MGRP SW07MGRP ; 
      10 * char(6) [64] ; 
        15 SW07MSEL SW07MSEL ; 
        15 SW07MPLT SW07MPLT ; 
end // end SW07W02

// confirm delete
DataItem SW07MCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW07MGRP char(384)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new units per case
DataItem SW07MNUP num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map option
DataItem SW07MOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pallet number
DataItem SW07MPLT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select all
DataItem SW07MSAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select indicator
DataItem SW07MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save last pallet# read
DataItem SW07SPLT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW07WHH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW07WHH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem SW07WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW07WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW07WMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map pass count
DataItem SW07WPAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW07WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line selected on map
DataItem SW07WSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row to update was found
DataItem SW07WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// time work area (hh:mm:ss)
DataItem SW07WTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// time work area (hhmm)
DataItem SW07WTME num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

