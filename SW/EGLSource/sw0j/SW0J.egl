package sw0j;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0J ****
// This application allows a user to display plan data for
// a specific warehouse, plan and/or lane.  The data is
// displayed in container, gpc code and P.O. number sequence.
// All detail totals are accumulated in the sequence listed
// above.  The plan totals are an accumulation of the column
// totals with the exception of insp/qc minutes.  these totals
// are accumulated at the plan product level.
// 
// Once the data is viewed and approved, the user may save the
// plan by pressing the pf9 key.
// 
// The user may scroll forward and backwards using the
// appropriate PF keys.  The user may exit to any allowed
// application, via fast path or PF key from this screen.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/30/90  jmoore  New application.
// FIX      01/17/91  CENGEL  The following changes were
//                            requested: default to '*' for
//                            Lane Category, display 'ALL' in
//                            Lane Description when Lane
//                            Category = '*', replace ';' with
//                            ':' after PLAN heading on map,
//                            replace ':' with ';' after LANE
//                            CATEGORY heading on map, display
//                            plan status, position csr on
//                            PLAN field and generate message
//                            indicating required field if PLAN
//                            not entered,  if LANE CATEGORY
//                            = '*' then clear the CATG TOTALS
//                            - CRTNS field (because the CATG
//                            total will be the same as the
//                            PLAN total when all lane
//                            categories are selected).
// sl91022  01/22/91  kande1  fix message for calc. to indicate
//                            calc was submitted from sw0i
// MAINT    01/30/92  GRAY    INITIALIZE ALL RECORDS AND MAPS.
// y2kproj  02-03-98  oricha  y2k modifications:  regen to pick
//                            up new version of xx0xs01.
// *********************
Program SW0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0JW00 SW0JW00; // record
  SW0JW01 SW0JW01; // record
  SW0JW02 SW0JW02; // record
  SW0JW03 SW0JW03; // record
  SWEREC SWEREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XRPTBL; // table
  use XLLTBL; // table
  use XLNTBL; // table
  use SW0JM.SW0JM001,  // forms
      SW0JM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0JM001 initial; /* M001 input/output*/
    set XX0XM001 initial; /* M001 input/output*/
    set SWEREC empty;
    set SW0JW01 empty; /* M001 display storage*/
    set SW0JW02 empty; /* M001 temporary storage*/
    set SW0JW03 empty; /* batch submit storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temporary storage area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    SW0JW00.XXXTSLEN = 596; /* temp storage length*/

    SW0JW00.SW0JWSWR = "N"; /* Request for data switch*/
    SW0JW00.SW0JWSWF = "Y"; /* format screen data switch*/
    SLWREC.XXXAPPID = COMMAREA.CACURRAP;

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    if (SLWREC.XWHCD != " ")

      SW0JM001.XWHCD = SLWREC.XWHCD;
      SW0JW01.XWHCD = SLWREC.XWHCD;
       /* MOVE 'Y' TO SW0JW00.SW0JWSWR;*/

    end

    if (SLWREC.SWEPLLNB != 0)

      SW0JM001.SWEPLLNB = SLWREC.SWEPLLNB;
      SW0JW01.SWEPLLNB = SLWREC.SWEPLLNB;
       /* MOVE 'Y' TO SW0JW00.SW0JWSWR  ; set data request flag*/

    end

     /* ------------------------------------------------------------*/
     /* Flow*/
     /* ------------------------------------------------------------*/

    goto SW0J001; /* application flow*/

    SW0J001: SW0J001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0J001; /* Converse the main process*/

  end // end main
end // end SW0J

// Inquire/maintain a table row
Function SW0J001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0J100(); /* Obtain the data to display*/

  SW0J200(); /* Format and display the map*/

  SW0J300(); /* Check attention identifier*/

  SW0J400(); /* Reset fields to normal intensity*/

  SW0J500(); /* Verify the entered data*/

  SW0J600(); /* Process valid input request*/

end // end SW0J001

// Obtain the data to display
Function SW0J100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0JW00.SW0JWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* purge temporary storage*/
   /* ------------------------------------------------------------*/

  SW0JS02(); /* initialize work area and purge temp storage*/

   /* ------------------------------------------------------------*/
   /* retrieve warehouse short description from xwhtbl*/
   /* ------------------------------------------------------------*/

  if (SW0JW01.XWHCD in XWHTBL.XWHCD)
    SW0JW01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* retrieve receiving plan code description from xrptbl*/
   /* ------------------------------------------------------------*/

  if (SW0JW01.XRPCD in XRPTBL.XRPCD)
    SW0JW01.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* If Lane Category = '*' (wildcard), then move 'ALL' to the*/
   /* Lane Description field; otherwise, search the XLLTBL table*/
   /* for a the Lane Category, and retrieve the Lane Description.*/
   /* If the Lane Description is still blank, search XLNTBL.*/
   /* ------------------------------------------------------------*/

  if (SW0JW01.SWHLNCAT == "*")
    SW0JW01.SW0JMLDS = "ALL";
  else
    if (SW0JW01.SWHLNCAT in XLLTBL.XLLCD)
      SW0JW01.SW0JMLDS = XLLTBL.XLLDESC[sysVar.arrayIndex];
    end
    if (SW0JW01.SW0JMLDS == " ")
      if (SW0JW01.SWHLNCAT in XLNTBL.XLNCD)
        SW0JW01.SW0JMLDS = XLNTBL.XLNDESC[sysVar.arrayIndex];
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* call sl4260 to do the io and load it into temp storage*/
   /* ------------------------------------------------------------*/

  SW0JS03(); /* call io mod*/

   /* ------------------------------------------------------------*/
   /* if no pages were formatted, indicate no data to display*/
   /* ------------------------------------------------------------*/

  if (SW0JW00.TA5TSQIX == 0) /* no pages formatted*/
    SLWREC.XXXLOCID = "100"; /* module identification*/
    converseLib.validationFailed(115); /* indicate no data to display*/
    SW0JW01.CACHGFL = "N"; /* change flag*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0JW00.XXXTSPAG = 1; /* Desired page number*/
  SW0JW00.SW0JWSWR = "N"; /* Request for data switch*/
  SW0JW01.CACHGFL = "Y"; /* change flag*/

end // end SW0J100

// Format and converse the map
Function SW0J200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0JW00.SW0JWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0JW00.SW0JWSWF == "Y") /* Map must be formatted*/

      SW0J210(); /* Format the data on the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (SW0JW00.TA5TSQIX > 0)
    set SW0JM001.SW0JMPAG bold; /* page literal*/
    SW0JM001.XXXTSPAG = SW0JW00.XXXTSPAG; /* Current page*/
    set SW0JM001.SW0JMOF bold; /* of literal*/
    SW0JM001.TA5TSQIX = SW0JW00.TA5TSQIX; /* max pages*/
  end

  SW0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0JM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0JM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0) /* Message to display*/
    if (SLWREC.SLWMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SLWREC.SLWMSGNO);
    end /* error message number*/
    SW0JM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/
    set SW0JM001 alarm; /* Indicate sound alarm*/
  end

  converse SW0JM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;

  COMMAREA.CATOAP = SW0JM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0JM001.CAITEM; /* Application data*/


end // end SW0J200

// Format the display data
Function SW0J210()

   /* ------------------------------------------------------------*/
   /* init map sw0jm001*/
   /* ------------------------------------------------------------*/

  set SW0JM001 initial; /* m001 input/ouput area*/

  SW0JW00.SW0JWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format sw0jm001 using passed data*/
   /* ------------------------------------------------------------*/

  SW0JM001.XWHCD = SW0JW01.XWHCD;
  SW0JM001.XWHSABRV = SW0JW01.XWHSABRV;
  SW0JM001.SWEPLLNB = SW0JW01.SWEPLLNB;
  SW0JM001.SWHLNCAT = SW0JW01.SWHLNCAT;
  SW0JM001.SW0JMLDS = SW0JW01.SW0JMLDS;
  SW0JM001.XRPCD = SW0JW01.XRPCD;
  SW0JM001.XRPDESC = SW0JW01.XRPDESC;

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (SW0JW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* obtain plan summary by lane category from tempory storage*/
   /* ------------------------------------------------------------*/

  SW0JW00.SW0JWPIX = 1;

  SW0JS04(); /* read temporary storage*/

  while (SW0JW00.SW0JWPIX <= SW0JW02.SW0JWNLD) /* process temp*/

    SW0JM001.TSHCNTNR[SW0JWPIX] = SW0JW02.TSHCNTNR[SW0JWPIX];
    SW0JM001.XGPCD[SW0JWPIX] = SW0JW02.XGPCD[SW0JWPIX];
    SW0JM001.PC3PONBR[SW0JWPIX] = SW0JW02.PC3PONBR[SW0JWPIX];
    SW0JM001.SW0JMPID[SW0JWPIX] = SW0JW02.SW0JWPID[SW0JWPIX];
    SW0JM001.SW0JMLCT[SW0JWPIX] = SW0JW02.SW0JWLCT[SW0JWPIX];
    SW0JM001.SW0JMCTN[SW0JWPIX] = SW0JW02.SW0JWCTN[SW0JWPIX];
    SW0JM001.SW0JMNLN[SW0JWPIX] = SW0JW02.SW0JWNLN[SW0JWPIX];
    SW0JM001.SW0JMICT[SW0JWPIX] = SW0JW02.SW0JWICT[SW0JWPIX];
    SW0JM001.SW0JMIUN[SW0JWPIX] = SW0JW02.SW0JWIUN[SW0JWPIX];
    SW0JM001.SW0JMEMM[SW0JWPIX] = SW0JW02.SW0JWEMM[SW0JWPIX];


    SW0JW00.SW0JWPIX = SW0JW00.SW0JWPIX + 1; /* increment load*/

  end

  SW0JM001.SW0JMTCT = SW0JW03.SW0JWTCT;

  if (SW0JW01.SWHLNCAT != "*") /* if a specific Lane Cat selected*/
    SW0JM001.SW0JMCCT = SW0JW03.SW0JWCCT; /* display count for Lane Cat*/
  else
    SW0JM001.SW0JMCCT = 0; /* clear because Lane Cat same as Plan totals*/
  end

  SW0JM001.SW0JMTIM = SW0JW03.SW0JWTIM;
  SW0JM001.SW0JMTQM = SW0JW03.SW0JWTQM;

end // end SW0J210

// Check attention identifier
Function SW0J300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    if (SW0JW00.SW0JWSWR == "Y")
      set SW0JW01 empty; /* m001 display storage*/
    end

    SW0JW00.SW0JWSWR = "N"; /* request for data*/
    SW0JW00.SW0JWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0JM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0JS02(); /* purge temp storage*/

      XSSL001(); /* Exit to another application*/

      SW0JW00.SW0JWSWR = "Y"; /* request for data*/
      SW0JW00.SW0JWSWF = "Y"; /* format screen m001*/
      converseLib.validationFailed(166);

      set SW0JM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(258); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0JM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* Application find code*/
    end

    SW0JS02(); /* purge temp storage*/

    XSSL001(); /* Exit to another application*/

    SW0JW00.SW0JWSWR = "Y"; /* request for data*/
    SW0JW00.SW0JWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf16) /* pf16 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0J300

// Reset highlighted fields
Function SW0J400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0JM001.XWHCD initialAttributes; /* WHSE CODE*/
  set SW0JM001.SWEPLLNB initialAttributes; /* PLAN NUMBER*/
  set SW0JM001.SWHLNCAT initialAttributes; /* LANE CATEGORY*/
  set SW0JM001.CATOAP initialAttributes; /* option*/
  set SW0JM001.CAITEM initialAttributes; /* item*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0JM001.XWHCD == "?" /* WAREHOUSE CODE*/
   || SW0JM001.SWHLNCAT == "?") /* LANE CATEGORY*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(264);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0JM001.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0JM001.XWHCD = SW0JW01.XWHCD; /* display orig warehouse*/

    else

      SW0JM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected*/
      SLWREC.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected co*/

    end

    set SW0JM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of lane categories*/
   /* ------------------------------------------------------------*/
  if (SW0JM001.SWHLNCAT == "?") /* lane category*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "            LANE CATEGORY"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXLN01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/

      SW0JM001.SWHLNCAT = SW0JW01.SWHLNCAT; /* orig lane cat*/
      SW0JM001.SW0JMLDS = SW0JW01.SW0JMLDS; /* orig lane cat desc*/

    else

      if (XX0XW02.XX0XWPIX > 0) /* selection made*/

        SW0JM001.SWHLNCAT = XLNTBL.XLNCD[XX0XWPIX]; /* Selected*/
        SW0JM001.SW0JMLDS = XLNTBL.XLNDESC[XX0XWPIX]; /* Selected*/

      end
    end

    set SW0JM001.SWHLNCAT cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before displa*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/
  converseLib.validationFailed(241); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0J400

// Verify the entered data
Function SW0J500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0JM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* check key fields for modification*/
   /* ------------------------------------------------------------*/

  if (SW0JM001.XWHCD != SW0JW01.XWHCD
   || SW0JM001.SWEPLLNB != SW0JW01.SWEPLLNB
   || SW0JM001.SWHLNCAT != SW0JW01.SWHLNCAT)
    SLWREC.SLWSKYSW = "Y";
  else
    SLWREC.SLWSKYSW = "N";
  end

   /* ------------------------------------------------------------*/
   /* check pfkey*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter)
     /* IF SLWREC.SLWSKYSW EQ 'Y';*/
    SW0J510(); /* validate key fields*/
    if (converseVar.validationMsgNum == 0)
      SW0JW00.SW0JWSWR = "Y"; /* request for data*/
    end
     /* END ;*/
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      SW0J520(); /* validate scroll request*/
    else
      if (converseVar.eventKey is pf15)
        if (SLWREC.SLWSKYSW == "Y")
          SW0JS05();
          SLWREC.XXXLOCID = "500"; /* Module identification*/
          converseLib.validationFailed(265); /* cannot change key*/
        else
          if (SW0JW01.XRPCD != "CA"
           && SW0JW01.XRPCD != "SV")
            SLWREC.XXXLOCID = "500"; /* Module identification*/
            converseLib.validationFailed(263); /* invalid plan status for save req*/
          end
        end
      else
        if (converseVar.eventKey is pf16)
          if (SLWREC.SLWSKYSW == "Y")
            SW0JS05();
            SLWREC.XXXLOCID = "500"; /* Module identification*/
            converseLib.validationFailed(265); /* data not mod for this req*/
          end
        end
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end SW0J500

// Verify the Entered Data
Function SW0J510()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* lane category edit*/
   /* ------------------------------------------------------------*/

  SW0JM001.SW0JMLDS = " "; /* lane cat desc*/
  SW0JW01.SW0JMLDS = " "; /* lane cat desc*/

  if (SW0JM001.SWHLNCAT != " ") /* if Lane Cat non-blank*/
    if (SW0JM001.SWHLNCAT != "*") /* and Lane Cat not wildcard*/
      if (SW0JM001.SWHLNCAT in XLLTBL.XLLCD /* search XLLTBL*/
       && XLLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if Status = 'A'*/
        SW0JM001.SW0JMLDS = XLLTBL.XLLDESC[sysVar.arrayIndex]; /* Lane Descr*/
      else
        if (SW0JM001.SWHLNCAT in XLNTBL.XLNCD /* search XLNTBL*/
         && XLNTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if Status = 'A'*/
          SW0JM001.SW0JMLDS = XLNTBL.XLNSDESC[sysVar.arrayIndex]; /* Lane Descr*/
        else
          SLWREC.XXXLOCID = "510";
          set SW0JM001.SWHLNCAT cursor, bold; /* position & highlight csr*/
          converseLib.validationFailed(261); /* invalid lane category*/
        end
      end
    else
      SW0JM001.SW0JMLDS = "ALL"; /* move 'ALL' to Lane Descr*/
    end
  else
    SW0JM001.SWHLNCAT = "*"; /* replace with wildcard value*/
    SW0JM001.SW0JMLDS = "ALL"; /* move 'ALL' to Lane Descr*/
  end

   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0JM001.SWEPLLNB > 0)
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "510";
    set SW0JM001.SWEPLLNB cursor, bold;
    converseLib.validationFailed(249); /* invalid plan number*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0JM001.XWHCD > " ")
    if (SW0JM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.XXXLOCID = "510";
        set SW0JM001.XWHCD cursor, bold;
        converseLib.validationFailed(10); /* status is inactive*/
      end
    else
      SLWREC.XXXLOCID = "510";
      set SW0JM001.XWHCD cursor, bold;
      converseLib.validationFailed(11); /* invalid warehouse*/
    end
  else
    SLWREC.XXXLOCID = "510";
    set SW0JM001.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* validate plan number*/
   /* ------------------------------------------------------------*/

  set SWEREC empty;

  SWEREC.XWHCD = SW0JM001.XWHCD; /* warehouse number*/
  SWEREC.SWEPLLNB = SW0JM001.SWEPLLNB; /* plan number*/

  SW0JS06(); /* sel set unq dstloc.vplnhd01*/
  if (SQLCA.VAGen_SQLCODE == 100)
    SLWREC.XXXLOCID = "510";
    set SW0JM001.XWHCD cursor, bold;
    set SW0JM001.SWEPLLNB cursor, bold;
    SW0JW00.SW0JWSWR = "Y"; /* data failed*/
    converseLib.validationFailed(12); /* plan header record not found*/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SWEREC.XRPCD in XRPTBL.XRPCD)
        SW0JM001.XRPCD = SWEREC.XRPCD; /* plan status*/
        SW0JM001.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex]; /* plan stat desc*/
        if (XRPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          /* next sentence;*/
        else
          SLWREC.XXXLOCID = "510";
          set SW0JM001.SWEPLLNB cursor;
          set SW0JM001.XRPCD bold;
          set SW0JM001.XRPDESC bold;
          converseLib.validationFailed(10); /* status is inactive*/
        end
        if (SWEREC.XRPCD == "WK")
          SLWREC.XXXLOCID = "510";
          set SW0JM001.SWEPLLNB cursor;
          set SW0JM001.XRPCD bold;
          set SW0JM001.XRPDESC bold;
          converseLib.validationFailed(218); /* invalid plan status*/
        end
      else
        SLWREC.XXXLOCID = "510";
        set SW0JM001.SWEPLLNB cursor;
        set SW0JM001.XRPCD bold;
        set SW0JM001.XRPDESC bold;
        converseLib.validationFailed(218); /* plan status not in table*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0J510

// validate key fields
Function SW0J520()
   /* ------------------------------------------------------------*/
   /* If key has changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW == "Y") /* key has not changed*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    converseLib.validationFailed(5); /* change the key on enter*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0JW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0JW00.XXXTSPAG >= SW0JW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

end // end SW0J520

// pass vaild input
Function SW0J600()

  SW0JW00.SW0JWSWF = "Y"; /* format map*/
  SW0JW01.XWHCD = SW0JM001.XWHCD; /* warehouse*/
  SW0JW01.SWEPLLNB = SW0JM001.SWEPLLNB; /* plan*/
  SW0JW01.SWHLNCAT = SW0JM001.SWHLNCAT; /* lane category*/
  if (SW0JW01.SWHLNCAT != "  "
   && SW0JW01.SWHLNCAT != "* ")
    if (SW0JM001.SWHLNCAT in XLLTBL.XLLCD)
      SW0JW01.SW0JMLDS = XLLTBL.XLLDESC[sysVar.arrayIndex];
    end
                                   /* plan status desc*/
  end
  if (SW0JW01.SW0JMLDS == " ")
    if (SW0JM001.SWHLNCAT in XLNTBL.XLNCD)
      SW0JW01.SW0JMLDS = XLNTBL.XLNDESC[sysVar.arrayIndex];
    end
                                   /* plan status desc*/
  end
  SW0JW01.XRPCD = SW0JM001.XRPCD; /* plan status*/
  if (SW0JM001.XRPCD in XRPTBL.XRPCD)
    SW0JW01.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex];
  end /* plan status desc*/

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    SW0JW00.XXXTSPAG = SW0JW00.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    SW0JW00.XXXTSPAG = SW0JW00.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* pf15 update the receiving plan status to 'sv'*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* update*/

    SW0J610(); /* update dstloc.vplnhd01*/

    SW0JW00.SW0JWSWR = "Y"; /* request for data switch*/

    /* ------------------------------------------------------------*/
     /* commit all changes to protected resources*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/


  end

   /* ------------------------------------------------------------*/
   /* pf16 transfer to sw0k*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* transfer to sw0k*/

    COMMAREA.CATOAP = "SW0K"; /* to application field*/
    COMMAREA.XWHCD = SW0JM001.XWHCD; /* warehouse*/
    SLWREC.SWEPLLNB = SW0JM001.SWEPLLNB; /* plan*/
    COMMAREA.CAUSERA = SLWREC.SLWGROUP; /* commarea*/

    SW0JS02(); /* purge temp storage*/

    XSSL001(); /* exit to another application*/

    exit stack; /* exit to display map*/

  end

end // end SW0J600

// Update the changed table row
Function SW0J610()
   /* ------------------------------------------------------------*/
   /* obtain current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* date and time*/

  SWEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  SWEREC.XWHCD = SW0JM001.XWHCD; /* Warehouse*/
  SWEREC.SWEPLLNB = SW0JM001.SWEPLLNB; /* receiving plan*/
  SWEREC.XRPCD = "SV"; /* receiving plan status*/


   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5350" ("U ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0JW00.SW0JWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "610"; /* Module identification*/
      converseLib.validationFailed(32); /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(262); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DSTLOC.VPLNHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  SW0JW00.XWHCD = SW0JW01.XWHCD; /* warehouse*/
  SW0JW00.SWEPLLNB = SW0JW01.SWEPLLNB; /* plan*/
  TA1REC.TA1TBLKE = SW0JW00.SW0JWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0J610

// purge temporary storage
Function SW0JS02()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0JW02 empty; /* M001 temporary storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0JW00.TA5TSQIX = 0; /* Highest page number*/
  SW0JW00.XXXTSLEN = 596; /* Temp storage length*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0JS02

// call sl4260 obtain data
Function SW0JS03()
   /* ------------------------------------------------------------*/
   /* set up sl4260 area.*/
   /* ------------------------------------------------------------*/

  set SW0JW03 empty; /* parameters passed sl4260*/
  SW0JW03.SW0JWTSK = "J1"; /* task*/
  SW0JW03.XWHCD = SW0JW01.XWHCD; /* warehouse code*/
  SW0JW03.SWEPLLNB = SW0JW01.SWEPLLNB; /* plan nbr*/
  SW0JW03.SWHLNCAT = SW0JW01.SWHLNCAT; /* lane category*/
  SW0JW03.XXXTSLEN = SW0JW00.XXXTSLEN; /* move temp storage len*/
  SW0JW03.SW0JWDLN = 11; /* nbr of lines per page*/
  SW0JW03.CACURRAP = COMMAREA.CACURRAP; /* sw01*/

   /* ------------------------------------------------------------*/
   /* call sl4260 to get all data for map.*/
   /* ------------------------------------------------------------*/

  try
    call "SL4260" (SW0JW03, SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* io mod*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SW0JW03.SW0JWRCD == 0) /* and normal return code*/

      set SW0JW02 empty; /* M001 display storage*/

      SW0JW00.SW0JWIDX = 1; /* Display line index*/

      SW0JW00.TA5TSQIX = SW0JW03.SW0JWCNT; /* Highest page number*/
      SW0JW03.SW0JWCNT = 0; /* Current page number*/
      /* ------------------------------------------------------------*/
       /* If successful return to the previous process.*/
      /* ------------------------------------------------------------*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

        return;

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PLAN TABLE JOIN - SL4260";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "PLAN TBL"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0JS03

// read temporary storage
Function SW0JS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SW0JW02.XXXTSLEN = SW0JW00.XXXTSLEN;
  TA5REC.TA5TSQIX = SW0JW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0JS04

// key fields changed - highlight
Function SW0JS05()
   /* -------------------------------------------------------*/
    /* if key has changed, highlight*/
   /* -------------------------------------------------------*/

  if (SW0JW01.SWHLNCAT != SW0JM001.SWHLNCAT) /* lane category changed*/
    set SW0JM001.SWHLNCAT cursor, bold;
  end

  if (SW0JW01.SWEPLLNB != SW0JM001.SWEPLLNB) /* plan number changed*/
    set SW0JM001.SWEPLLNB cursor, bold;
  end

  if (SW0JW01.XWHCD != SW0JM001.XWHCD) /* warehouse changed*/
    set SW0JM001.XWHCD cursor, bold;
  end
end // end SW0JS05

// select 's' dstloc.vplnhd01
Function SW0JS06()

   /* ------------------------------------------------------------*/
   /* obtain plan header from dstloc.vplnhd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    if (sysVar.errorCode == "00000000") /* Call successful*/

      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before displa*/

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VPLNHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  SW0JW00.XWHCD = SW0JW01.XWHCD; /* warehouse*/
  SW0JW00.SWEPLLNB = SW0JW01.SWEPLLNB; /* plan*/
  TA1REC.TA1TBLKE = SW0JW00.SW0JWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0JS06

//*** RECORD=SW0JW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// add for wv rcv
// ***********************
Record SW0JW00 type basicRecord
  10 SW0JWERF SW0JWERF ; 
  10 SW0JWSWR SW0JWSWR ; 
  10 SW0JWSWF SW0JWSWF ; 
  10 SW0JWPIX SW0JWPIX ; 
  10 SW0JWIDX SW0JWIDX ; 
  10 SW0JWIXT SW0JWIXT ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 SW0JWSTP SW0JWSTP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SW0JWKEY SW0JWKEY ; 
    15 XWHCD XWHCD ; 
    15 SWEPLLNB SWEPLLNB ; 
end // end SW0JW00
//*** RECORD=SW0JW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record SW0JW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHSABRV XWHSABRV ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 SWHLNCAT SWHLNCAT ; 
  10 SW0JMLDS SW0JMLDS ; 
  10 CACHGFL CACHGFL ; 
  10 XRPCD XRPCD ; 
  10 XRPDESC XRPDESC ; 
  10 SW0JWPRM SW0JWPRM ; 
    15 SW0JWHSE SW0JWHSE ; 
    15 SW0JWPLN SW0JWPLN ; 
    15 SW0JWEND SW0JWEND ; 
end // end SW0JW01

//*** RECORD=SW0JW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record SW0JW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 SW0JWGP3 SW0JWGP3 ; 
    10 SW0JWNLD SW0JWNLD ; 
    10 * char(54) [11] ; 
      15 TSHCNTNR TSHCNTNR ; 
      15 XGPCD XGPCD ; 
      15 PC3PONBR PC3PONBR ; 
      15 SW0JWPID SW0JWPID ; 
      15 SW0JWLCT SW0JWLCT ; 
      15 SW0JWCTN SW0JWCTN ; 
      15 SW0JWNLN SW0JWNLN ; 
      15 SW0JWICT SW0JWICT ; 
      15 SW0JWIUN SW0JWIUN ; 
      15 SW0JWEMM SW0JWEMM ; 
end // end SW0JW02

//*** RECORD=SW0JW03 ****
// -------------------------
// parameters for sw0lio
// -------------------------
// ***********************
Record SW0JW03 type basicRecord
  5 SW0JWIOP SW0JWIOP ; 
    10 SW0JWTSK SW0JWTSK ; 
    10 XWHCD XWHCD ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 SWHLNCAT SWHLNCAT ; 
    10 SW0JWDLN SW0JWDLN ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 CACURRAP CACURRAP ; 
    10 SW0JWCNT SW0JWCNT ; 
    10 SW0JWRCD SW0JWRCD ; 
    10 SW0JWTCT SW0JWTCT ; 
    10 SW0JWTIM SW0JWTIM ; 
    10 SW0JWTQM SW0JWTQM ; 
    10 SW0JWCCT SW0JWCCT ; 
end // end SW0JW03

// lane cat description
DataItem SW0JMLDS char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total carton count
DataItem SW0JWCCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// csp count
DataItem SW0JWCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr crtns
DataItem SW0JWCTN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines
DataItem SW0JWDLN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem SW0JWEMM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler
DataItem SW0JWEND char(69)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem SW0JWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage layout
DataItem SW0JWGP3 char(596)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// warehouse code
DataItem SW0JWHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// insp crtns
DataItem SW0JWICT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem SW0JWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// sw0jio parms
DataItem SW0JWIOP char(43)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// ins units
DataItem SW0JWIUN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl index
DataItem SW0JWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// swerec key
DataItem SW0JWKEY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// lane count
DataItem SW0JWLCT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of lines per page
DataItem SW0JWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines
DataItem SW0JWNLN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted po id
DataItem SW0JWPID char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SW0JWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end
// reciving plan number
DataItem SW0JWPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl parm
DataItem SW0JWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem SW0JWRCD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save current temp storage page
DataItem SW0JWSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0JWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0JWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// total carton count
DataItem SW0JWTCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// total insp min
DataItem SW0JWTIM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qc min
DataItem SW0JWTQM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io task
DataItem SW0JWTSK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

