package sw09;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW09 ****
// This application displays the Background Job Request Menu
// screen and subordinate Background Job Submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Background Job Request Subroutine (TA0P).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.  The data in working storage is substituted
// and the statement is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      01/18/96  HKEMPE  New application.
// *********************
Program SW09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW09W01 SW09W01; // record
  SW09W02 SW09W02; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SW09T02 {deleteAfterUse = yes}; // table
  use XWHTBL; // table
  use SW09M.SW09M099,  // forms
      SW09M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set SW09M099 initial; /* M099 input/output*/
    set SW09W01 empty; /* Working storage*/
    set SW09W02 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Indicate that the report distribution must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Obtain distribution information*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW09001; /* Converse the main process*/


    SW09001: SW09001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW09001; /* Converse the main process*/


  end // end main
end // end SW09

// Main process to display a map
Function SW09001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SW09W01.SW09WSWX != "Y") /* EXIT not requested*/

    if (SW09W01.SW09W-PRINT-FLAG == "Y")

      SW09010(); /* Specify report distribution*/

      SW09020(); /* Print consolidated bol*/

    end

  end

  SW09W01.SW09WSWX = "N"; /* Reset exit requested switch*/

  SW09990(); /* Report Request Menu*/


end // end SW09001

// Specify output destination
Function SW09010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the report distribution for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Report distribution information*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        SW09W01.SW09W-PRINT-FLAG = "*";
                                   /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      SW09W01.SW09W-PRINT-FLAG = "C";
                                   /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXERRID = "010"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/


end // end SW09010

// Process valid input request
Function SW09020()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SW09W01.SW09WIXT = 1; /* Initialize table index*/

  SW09S-TA0230(); /* Determine CICS region*/

  if (TA3REC.TA3RGNID == "03") /* PROD region*/
    SW09W01.SW09WIXT = 1;
  else /* TEST region*/

    if ("/*EOF" in SW09T02.TARJCL)
      SW09W01.SW09WIXT = sysVar.arrayIndex;
      SW09W01.SW09WIXT = SW09W01.SW09WIXT + 1;
    else
      SW09W01.SW09WIXT = 1;
    end

  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (SW09W01.SW09WIXT > 0) /* Until end of table*/

    if (SW09T02.TARTYPE[SW09WIXT] == "D") /* dnsT/dsnD statement*/

        /* ------------------------------------------------------------*/
        /* Format dsnT/dsnT statement.*/
        /* ------------------------------------------------------------*/

      set SW09W02 empty;

      SW09W02.TARJCL = SW09T02.TARJCL[SW09WIXT];

      if (TA3REC.TA3RGNID == "04"
       || TA3REC.TA3RGNID == "08")
        SW09W02.SW09W-DSN = "T"; /* dsnT region*/
      else
        SW09W02.SW09W-DSN = "D"; /* dsnD region*/
      end

      TA6REC.TARJCL[TA6INDEX] = SW09W02.TARJCL;

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW09T02.TARJCL[SW09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW09T02.TARTYPE[SW09WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW09T02.TARJCL[SW09WIXT] == "/*EOF") /* End of table*/

      SW09W01.SW09WIXT = 0; /* Indicate end of table*/
    else
      SW09W01.SW09WIXT = SW09W01.SW09WIXT + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXERRID = "020"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW09W01.SW09W-PRINT-FLAG = "*"; /* Indicate function completed*/

    set SW09M099 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SW09020

// Print request screen
Function SW09990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW09991(); /* Format and display the map*/

  SW09992(); /* Check attention identifier*/

  SW09993(); /* Reset fields to normal intensity*/

  SW09994(); /* Verify the data that was entered*/

  SW09995(); /* Process valid input request*/


end // end SW09990

// Format and display the map
Function SW09991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set SW09M099 initial; /* M099 input/output*/

    SW09M099.XWHCD = SLWREC.XWHCD; /* Warehouse code*/

    SW09M099.SW09M-PRINT-FLAG = SW09W01.SW09W-PRINT-FLAG;

  end

  if (SW09M099.XWHCD == " ")
    set SW09M099.XWHCD cursor;
  else
    set SW09M099.SW09M-PRINT-FLAG cursor;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW09M099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW09M099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW09M099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW09M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW09M099.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

    set SW09M099 alarm; /* Indicate sound alarm*/

  end

  converse SW09M099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXERRID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW09M099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW09M099.CAITEM; /* Application data*/


end // end SW09991

// Check attention identifier
Function SW09992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SW09M099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    SW09S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSEXIT(); /* Exit to another application*/

      set SW09M099.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXERRID = "992"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    SW09S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW09M099"; /* Application find code*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "TS0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF3 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    XSEXIT(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    SW09S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXERRID = "992"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    SW09S99(); /* Exit to display map*/

  end


end // end SW09992

// Reset highlighted fields
Function SW09993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW09M099.XWHCD initialAttributes; /* warehouse code*/

  set SW09M099.SW09M-PRINT-FLAG initialAttributes; /* Reset select field*/

  set SW09M099.CATOAP initialAttributes; /* TO application*/
  set SW09M099.CAITEM initialAttributes; /* Application data*/


end // end SW09993

// Verify entered data
Function SW09994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXERRID = "994"; /* Module identification*/
    set SW09M099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  if (SW09M099.SW09M-PRINT-FLAG != " "
   && SW09M099.SW09M-PRINT-FLAG != "N"
   && SW09M099.SW09M-PRINT-FLAG != "Y")

    SLWREC.XXXERRID = "994"; /* Module identification*/
    set SW09M099.SW09M-PRINT-FLAG cursor, bold; /* Highlight*/
    converseLib.validationFailed(257); /* Only "S" is may be entered*/

  end

   /* ------------------------------------------------------------*/
   /* Verify warehouse code.*/
   /* ------------------------------------------------------------*/

  if (SW09M099.XWHCD == " " /* warehouse code blank*/
   || SW09M099.XWHCD != "51") /* warehouse code 51*/
    set SW09M099.XWHCD cursor, bold; /* highlight*/
    SLWREC.XXXERRID = "994"; /* module id*/
    converseLib.validationFailed(118); /* warehouse code is invalid*/
  else
    if (SW09M099.XWHCD != SLWREC.XWHCD) /* warehouse code changed*/
      if (SW09M099.XWHCD in XWHTBL.XWHCD /* code in table*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      /* NEXT SENTENCE*/
      else
        set SW09M099.XWHCD cursor, bold; /* highlight*/
        SLWREC.XXXERRID = "994"; /* module id*/
        converseLib.validationFailed(118); /* warehouse code is invalid*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SW09S99(); /* Exit to display map*/
  end


end // end SW09994

// Process valid input request
Function SW09995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  SLWREC.XWHCD = SW09M099.XWHCD; /* warehouse code*/

  SW09W01.SW09W-PRINT-FLAG = SW09M099.SW09M-PRINT-FLAG;

   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/


end // end SW09995

// Determine CICS region
Function SW09S-TA0230()
   /* ------------------------------------------------------------*/
   /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /*  */
   /* PRODUCTION REGION CAUSES PRODUCTION JCL TO BE EXECUTED,*/
   /* TEST REGION CAUSES TEST JCL TO BE EXECUTED USING DSNT OR DSND.*/
   /*  */
   /* ALL VERSIONS OF JCL ARE FOUND IN TS09T01*/
   /*  */
   /* ------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ASSIGN";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)         

    return;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/

  SLWREC.XXXERRID = "020"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "FIND CICS REGION";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXERRID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M099"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW09S-TA0230

// Clear selection and exit
Function SW09S99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  SW09W01.SW09W-PRINT-FLAG = " ";

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end SW09S99

//*** RECORD=SW09W01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW09W01 type basicRecord
  10 SW09WIXT SW09WIXT ; 
  10 SW09WSWX SW09WSWX ; 
  10 SW09W-PRINT-FLAG SW09W-PRINT-FLAG ; 
end // end SW09W01

//*** RECORD=SW09W02 ****
// JCL SYstsin card
// ***********************
Record SW09W02 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(14) ; // DSN SYSTEM(DSN
    10 SW09W-DSN SW09W-DSN ; 
    10 * char(1) ; // )
    10 * char(64) ; 
end // end SW09W02

// T or D
DataItem SW09W-DSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print flag
DataItem SW09W-PRINT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem SW09WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem SW09WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

