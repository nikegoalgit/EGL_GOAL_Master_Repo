package sw0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0B ****
// This application displays the Submit Job Request Menu screen
// and subordinate job submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/26/90  rgilli  New application.
//          10/22/90  sjohns  Finish Coding.
//          01/28/91  bgilde  Add Generic Label Print.
//          01/28/91  jcampb  pass or_typ_id in blank wrksh prt
//          01/28/91  cengle  pass data to blank weight/pf sht
//          01/31/91  rchini  Added Lane from and/to ranges to
//                            SW0BM002 map.  The lane numbers
//                            entered will be moved to the
//                            JCL that submits the Lane Work
//                            Sheet Report job.
//          04/12/91  ovazqu  Add label format load
//          05/22/91  sjohns  added planned label print
//          05/24/91  sjohns  added print flag update to t14
//          01/22/92  SHENDE  Removed USER= and PASSWORD=
//          01/30/92  GRAY    INITIALIZE ALL MAPS AND RECORDS.
// ASW001   12/29/95  hkempe  Recompiled due to VPLCPO01 table
//                            change.
// *********************
Program SW0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SL1REC SL1REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0BW00 SW0BW00; // record
  SW0BW08 SW0BW08; // record
  SW0BWP10 SW0BWP10; // record
  SW0BWP11 SW0BWP11; // record
  SW0BWP13 SW0BWP13; // record
  SW0BWP14 SW0BWP14; // record
  SW0BWP2 SW0BWP2; // record
  SW0BWP3 SW0BWP3; // record
  SW0BWP4 SW0BWP4; // record
  SW0BWP5 SW0BWP5; // record
  SW0BWP6 SW0BWP6; // record
  SW0BWP7 SW0BWP7; // record
  SW0BWP8 SW0BWP8; // record
  SW0BWP9 SW0BWP9; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SWVREC SWVREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XGPTBL; // table
  use XRPTBL; // table
  use SW0BT02; // table
  use SW0BT03; // table
  use SW0BT04; // table
  use SW0BT05; // table
  use SW0BT06; // table
  use SW0BT07; // table
  use SW0BT09; // table
  use SW0BT1O; // table
  use SW0BT11; // table
  use SW0BT12; // table
  use SW0BT13; // table
  use SW0BT14 {deleteAfterUse = yes}; // table
  use SW0BT8A; // table
  use SW0BT8B; // table
  use SW0BM.SW0BM002,  // forms
      SW0BM.SW0BM003, 
      SW0BM.SW0BM004, 
      SW0BM.SW0BM005, 
      SW0BM.SW0BM006, 
      SW0BM.SW0BM007, 
      SW0BM.SW0BM008, 
      SW0BM.SW0BM009, 
      SW0BM.SW0BM010, 
      SW0BM.SW0BM011, 
      SW0BM.SW0BM013, 
      SW0BM.SW0BM014, 
      SW0BM.SW0BM099, 
      SW0BM.TA0PM001, 
      SW0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set SW0BM002 initial; /* M002 input/output*/
    set SW0BM003 initial; /* M003 input/output*/
    set SW0BM004 initial; /* M004 input/output*/
    set SW0BM005 initial; /* M005 input/output*/
    set SW0BM006 initial; /* M006 input/output*/
    set SW0BM007 initial; /* M007 input/output*/
    set SW0BM008 initial; /* M008 input/output*/
    set SW0BM009 initial; /* M009 input/output*/
    set SW0BM010 initial; /* M010 input/output*/
    set SW0BM011 initial; /* M011 input/output*/
    set SW0BM013 initial; /* M013 input/output*/
    set SW0BM014 initial; /* M014 input/output*/
    set SW0BM099 initial; /* M099 input/output - main map*/
    set TA0PM001 initial; /* TA0P input/output link*/
    set XX0XM001 initial;
    set SL1REC empty;
    set SW0BW00 empty; /* Working storage*/
    set SW0BW08 empty;
    set SW0BWP2 empty;
    set SW0BWP3 empty;
    set SW0BWP4 empty;
    set SW0BWP5 empty;
    set SW0BWP6 empty;
    set SW0BWP7 empty;
    set SW0BWP8 empty;
    set SW0BWP9 empty;
    set SW0BWP10 empty;
    set SW0BWP11 empty;
    set SW0BWP13 empty;
    set SW0BWP14 empty;
    set SWEREC empty;
    set SWFREC empty;
    set SWVREC empty;
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA3REC empty;
    set TA2REC empty; /* date routine parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/
    set XX0XW01 empty; /* current date and time fields*/
    set XX0XW02 empty; /* current date and time fields*/

     /* ------------------------------------------------------------*/
     /* set default values*/
     /* ------------------------------------------------------------*/

    SLWREC.XGPCD = COMMAREA.XGPCD;

     /* ------------------------------------------------------------*/
     /* Indicate that the output destination must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/

    SW0BW00.SW0BWIXL = 14; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0B001; /* Converse the main process*/


    SW0B001: SW0B001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0B001; /* Converse the main process*/


  end // end main
end // end SW0B

// Main process to display a map
Function SW0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/

   /* Please notice that the sequence specified for SW0BMSEL is*/
   /* not the same as the sequence in which the entry lines*/
   /* appear on the map.  SW0BMSEL(11) and SW0BMSEL(12) were*/
   /* inserted between SW0BMSEL(6) and SW0BMSEL(7).  See the map.*/
   /* ------------------------------------------------------------*/

  if (SW0BW00.SW0BWSWX != "Y") /* EXIT not requested*/

    if (SW0BW00.SW0BMSEL[1] == "S"
     || TA6REC.TA6SUBSW == "I") /* or information requested*/

      SW0B010(); /* Specify output destination*/

    end

    if (SW0BW00.SW0BMSEL[2] == "S")
      SW0B020(); /* lane work sheet report*/
    end

    if (SW0BW00.SW0BMSEL[3] == "S")
      SW0B030(); /* quality control work sheet report*/
    end

    if (SW0BW00.SW0BMSEL[4] == "S")
      SW0B040(); /* weight/pack factor work sheet rpt*/
    end

    if (SW0BW00.SW0BMSEL[5] == "S")
      SW0B050(); /* blank work sheet report*/
    end

    if (SW0BW00.SW0BMSEL[6] == "S")
      SW0B060(); /* blank w/p factor report*/
    end

    if (SW0BW00.SW0BMSEL[7] == "S")
      SW0B070(); /* receiving plan summary report*/
    end

    if (SW0BW00.SW0BMSEL[8] == "S")
      SW0B080(); /* plan reconciliation report*/
    end

    if (SW0BW00.SW0BMSEL[9] == "S")
      SW0B090(); /* cartons not on pkg list*/
    end

    if (SW0BW00.SW0BMSEL[10] == "S")
      SW0B100(); /* unprinted label report*/
    end

    if (SW0BW00.SW0BMSEL[11] == "S")
      SW0B110(); /* print generic labels*/
    end

    if (SW0BW00.SW0BMSEL[12] == "S")
      SW0B120(); /* label format load*/
    end

    if (SW0BW00.SW0BMSEL[13] == "S")
      SW0B130(); /* plan reports by status*/
    end

    if (SW0BW00.SW0BMSEL[14] == "S")
      SW0B140(); /* planned label print*/
    end

  end

  SW0BW00.SW0BWSWX = "N"; /* Reset exit requested switch*/

  SW0B990(); /* Report Request Menu*/


end // end SW0B001

// Specify output destination
Function SW0B010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        SW0BW00.SW0BMSEL[1] = "*"; /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      SW0BW00.SW0BMSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "010"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/


end // end SW0B010

// LANE WORK SHEET REPORT
Function SW0B020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B021(); /* Format and display the map*/

  SW0B022(); /* Check attention identifier*/

  SW0B023(); /* Reset fields to normal intensity*/

  SW0B024(); /* Verify the data that was entered*/

  SW0B025(); /* Process valid input request*/


end // end SW0B020

// Format and display the map
Function SW0B021()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM002 alarm; /* Indicate sound alarm*/

  end

  SW0BM002.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B021

// Check attention identifier
Function SW0B022()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[2] = "C"; /* Indicate selection cancelled*/

    set SW0BM002 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[2] = " "; /* Reinit selection field*/

    set SW0BM002 initial; /* m002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "022"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B022

// Reset highlighted fields
Function SW0B023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM002.XWHCD normal; /* WHSE CODE*/
  set SW0BM002.SWEPLLNB normal; /* PLAN NUMBER*/
  set SW0BM002.SW0BMLNF normal; /* from lane*/
  set SW0BM002.SW0BMLNT normal; /* to lane*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0BM002.XWHCD == "?") /* WAREHOUSE CODE*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "023"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0BM002.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SW0BM002.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0BM002.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Selected code*/

    end

    set SW0BM002.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "023"; /* Module identification*/
  converseLib.validationFailed(214); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0B023

// Verify the Entered Data
Function SW0B024()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  set SWEREC empty;

   /* ------------------------------------------------------------*/
   /* validate lane category option*/
   /* ------------------------------------------------------------*/

  if (SW0BM002.SW0BMLCO == "LN" /* lane work sheet*/
   || SW0BM002.SW0BMLCO == "WP" /* weight/pack factore work sheet*/
   || SW0BM002.SW0BMLCO == "B " /* both lane and w/p work sheet*/
   || SW0BM002.SW0BMLCO == " B") /* both*/
    /* next sentence*/
  else
    SLWREC.XXXLOCID = "024";
    set SW0BM002.SW0BMLCO cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* validate lane from and to range*/
   /* ------------------------------------------------------------*/

  SW0B026(); /* validate the lane ranges*/

   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0BM002.SWEPLLNB > 0)
    SWEREC.SWEPLLNB = SW0BM002.SWEPLLNB;
  else
    SLWREC.XXXLOCID = "024";
    set SW0BM002.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM002.XWHCD > " ")
    if (SW0BM002.XWHCD in XWHTBL.XWHCD)
      SWEREC.XWHCD = SW0BM002.XWHCD;
      SW0BM002.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM002.XWHABRV = " ";
      SLWREC.XXXLOCID = "024";
      set SW0BM002.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM002.XWHABRV = " ";
    SLWREC.XXXLOCID = "024";
    set SW0BM002.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* validate plan header*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    SW0BS01(); /* select dstloc.vplnhd01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SWEREC.XRPCD != "SC"
       && SWEREC.XRPCD != "IP")
        SLWREC.XXXLOCID = "024";
        set SW0BM002.SWEPLLNB cursor, bold;
        converseLib.validationFailed(218); /* invalid code*/
      end
    else
      SLWREC.XXXLOCID = "024";
      set SW0BM002.SWEPLLNB cursor, bold;
      converseLib.validationFailed(011); /* invalid plan*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0B024

// Process valid input request
Function SW0B025()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter*/
   /* ------------------------------------------------------------*/

  SW0BWP2.XWHCD = SW0BM002.XWHCD; /* warehouse code*/
  SW0BWP2.SW0BWPLN = SW0BM002.SWEPLLNB; /* plan number*/
  SW0BWP2.SW0BWITP = SW0BM002.SW0BMLCO; /* inspection type*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT02.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP2.SW0BWP2A; /* Parameters*/
    else
      if (SW0BT02.TARTYPE[SW0BWIXT] == "S") /* symbolic*/
        SW0BWP2.SW0BWP2B = SW0BT02.TARJCL[SW0BWIXT];
        SW0BWP2.XWHCD2 = SW0BM002.XWHCD; /* warehouse code*/
        TA6REC.TARJCL[TA6INDEX] = SW0BWP2.SW0BWP2B; /* symbolic*/
      else
        if (SW0BT02.TARTYPE[SW0BWIXT] == "D") /* symbolic*/
          SW0BWP2.SW0BWP2C = SW0BT02.TARJCL[SW0BWIXT];
          SW0BWP2.XWHCD3 = SW0BM002.XWHCD; /* warehouse code*/
          TA6REC.TARJCL[TA6INDEX] = SW0BWP2.SW0BWP2C; /* symbolic*/
        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = SW0BT02.TARJCL[SW0BWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = SW0BT02.TARTYPE[SW0BWIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT02.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "025"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[2] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B025

// Validate from/to lane range
Function SW0B026()
   /* ------------------------------------------------------------*/
   /* Check the TO lane*/
   /* ------------------------------------------------------------*/

  if (SW0BM002.SW0BMLNT > 0)
    if (SW0BM002.SW0BMLNT < 1000 /* if TO lane is < 1000*/
     || SW0BM002.SW0BMLNT > 1999) /* or TO lane is > 1999*/
      SLWREC.XXXLOCID = "026";
      set SW0BM002.SW0BMLNT cursor, bold;
      converseLib.validationFailed(296); /* invalid lane range*/
    else
      SW0BWP2.SW0BWLNT = SW0BM002.SW0BMLNT; /* move to parm*/
    end
  else
    SW0BWP2.SW0BWLNT = 0; /* move zero to parm TO lane*/
  end

   /* ------------------------------------------------------------*/
   /* Check the FROM lane*/
   /* ------------------------------------------------------------*/

  if (SW0BM002.SW0BMLNF > 0)
    if (SW0BM002.SW0BMLNF < 1000 /* if FROM lane is < 1000*/
     || SW0BM002.SW0BMLNF > 1999) /* or FROM lane is > 1999*/
      SLWREC.XXXLOCID = "026";
      set SW0BM002.SW0BMLNF cursor, bold;
      converseLib.validationFailed(296); /* invalid lane range*/
    else
      SW0BWP2.SW0BWLNF = SW0BM002.SW0BMLNF; /* move to parm*/
    end
  else
    SW0BWP2.SW0BWLNF = 0; /* move zero to parm FROM lane*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found, return to previous process*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* if an error was found*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If the lane from and to range was not entered, return*/
   /* to previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0BWP2.SW0BWLNF == 0 /* if From lane not entered*/
   && SW0BWP2.SW0BWLNT == 0) /* if To lane not entered*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If the FROM lane was entered and the TO lane was not*/
   /* entered, move the From lane to the To lane.  The same will*/
   /* be true for the To lane.  If the TO lane was entered and*/
   /* the FROM lane was not entered, move the To lane to the*/
   /* From lane.*/
   /* ------------------------------------------------------------*/

  if (SW0BWP2.SW0BWLNF > 0 /* if From lane entered*/
   && SW0BWP2.SW0BWLNT == 0) /* if To lane not entered*/
    SW0BWP2.SW0BWLNT = SW0BWP2.SW0BWLNF; /* move FROM to TO*/
    SW0BM002.SW0BMLNT = SW0BWP2.SW0BWLNF; /* move FROM to TO*/
  end

  if (SW0BWP2.SW0BWLNT > 0 /* if To lane entered*/
   && SW0BWP2.SW0BWLNF == 0) /* if From lane not entered*/
    SW0BWP2.SW0BWLNF = SW0BWP2.SW0BWLNT; /* move TO to FROM*/
    SW0BM002.SW0BMLNF = SW0BWP2.SW0BWLNT; /* move TO to FROM*/
  end

   /* ------------------------------------------------------------*/
   /* Check to make sure the from lane is not higher than than*/
   /* to lane.*/
   /* ------------------------------------------------------------*/

  if (SW0BWP2.SW0BWLNF > SW0BWP2.SW0BWLNT) /* if from ln > to lane*/
    SLWREC.XXXLOCID = "026";
    set SW0BM002.SW0BMLNF cursor, bold;
    converseLib.validationFailed(222); /* from lane > to lane*/
  end


end // end SW0B026

// QUALITY CONTROL WORK SHEET
Function SW0B030()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B031(); /* Format and display the map*/

  SW0B032(); /* Check attention identifier*/

  SW0B033(); /* Reset fields to normal intensity*/

  SW0B034(); /* Verify the data that was entered*/

  SW0B035(); /* Process valid input request*/


end // end SW0B030

// Format and display the map
Function SW0B031()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM003.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM003 alarm; /* Indicate sound alarm*/

    SW0BM003.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  end

  converse SW0BM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B031

// Check attention identifier
Function SW0B032()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[3] = "C"; /* Indicate selection cancelled*/

    set SW0BM003 initial; /* m003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[3] = " "; /* Reinit selection field*/

    set SW0BM003 initial; /* m003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "032"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B032

// Reset highlighted fields
Function SW0B033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM003.XWHCD normal; /* WHSE CODE*/
  set SW0BM003.SWEPLLNB normal; /* plan number*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0BM003.XWHCD == "?") /* warehouse code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "033"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0BM003.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SW0BM003.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0BM003.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Selected code*/

    end

    set SW0BM003.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "033"; /* Module identification*/
  converseLib.validationFailed(214); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0B033

// Verify the Entered Data
Function SW0B034()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/
  set SWEREC empty;
   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0BM003.SWEPLLNB > 0)
    SWEREC.SWEPLLNB = SW0BM003.SWEPLLNB;
  else
    SLWREC.XXXLOCID = "034";
    set SW0BM003.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM003.XWHCD > " ")
    if (SW0BM003.XWHCD in XWHTBL.XWHCD)
      SWEREC.XWHCD = SW0BM003.XWHCD;
      SW0BM003.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM003.XWHABRV = " ";
      SLWREC.XXXLOCID = "034";
      set SW0BM003.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM003.XWHABRV = " ";
    SLWREC.XXXLOCID = "034";
    set SW0BM003.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* validate plan header*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    SW0BS01(); /* select dstloc.vplnhd01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SWEREC.XRPCD != "SC"
       && SWEREC.XRPCD != "IP")
        SLWREC.XXXLOCID = "034";
        set SW0BM003.SWEPLLNB cursor, bold;
        converseLib.validationFailed(218); /* invalid code*/
      end
    else
      SLWREC.XXXLOCID = "034";
      set SW0BM003.SWEPLLNB cursor, bold;
      converseLib.validationFailed(011); /* invalid plan*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0B034

// Process valid input request
Function SW0B035()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter*/
   /* ------------------------------------------------------------*/

  SW0BWP3.XWHCD = SW0BM003.XWHCD; /* warehouse code*/
  SW0BWP3.SW0BWPLN = SW0BM003.SWEPLLNB; /* plan number*/
  SW0BWP3.SW0BWITP = "QC"; /* insp type*/
  SW0BWP3.SW0BWLNF = 0; /* From lane*/
  SW0BWP3.SW0BWLNT = 9999; /* To lane*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT03.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP3.SW0BWP3A; /* Parameters*/
    else
      if (SW0BT03.TARTYPE[SW0BWIXT] == "S") /* symbolic*/
        SW0BWP3.SW0BWP3B = SW0BT03.TARJCL[SW0BWIXT];
        SW0BWP3.XWHCD2 = SW0BM003.XWHCD; /* warehouse code*/
        TA6REC.TARJCL[TA6INDEX] = SW0BWP3.SW0BWP3B; /* Parameters*/
      else
        if (SW0BT03.TARTYPE[SW0BWIXT] == "D") /* symbolic*/
          SW0BWP3.SW0BWP3C = SW0BT03.TARJCL[SW0BWIXT];
          SW0BWP3.XWHCD3 = SW0BM003.XWHCD; /* warehouse code*/
          TA6REC.TARJCL[TA6INDEX] = SW0BWP3.SW0BWP3C; /* Parameters*/
        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = SW0BT03.TARJCL[SW0BWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = SW0BT03.TARTYPE[SW0BWIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT03.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

   /* *************************************************************/
   /* This report currently not available - do not submit*/
   /* *************************************************************/
   /* MOVE '035' TO SLWREC.XXXLOCID   ; Module identification*/
   /* MOVE 237 TO EZEMNO              ; report not available*/
   /* EZEFLO                          ; Exit to display map*/

   /* *************************************************************/

  XPTA0P(); /* Submit JCL for background j*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[3] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B035

// WEIGHT/PACK FACTOR WRK SHT
Function SW0B040()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B041(); /* Format and display the map*/

  SW0B042(); /* Check attention identifier*/

  SW0B043(); /* Reset fields to normal intensity*/

  SW0B044(); /* Verify the data that was entered*/

  SW0B045(); /* Process valid input request*/


end // end SW0B040

// Format and display the map
Function SW0B041()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM004.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM004.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM004.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM004.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM004 alarm; /* Indicate sound alarm*/

  end

  SW0BM004.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B041

// Check attention identifier
Function SW0B042()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[4] = "C"; /* Indicate selection cancelled*/

    set SW0BM004 initial; /* m004 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[4] = " "; /* Reinit selection field*/

    set SW0BM004 initial; /* m004 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "042"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B042

// Reset highlighted fields
Function SW0B043()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM004.XWHCD normal; /* WHSE CODE*/
  set SW0BM004.SWEPLLNB normal; /* plan number*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0BM004.XWHCD == "?") /* warehouse code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "043"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0BM004.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SW0BM004.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0BM004.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Selected code*/

    end

    set SW0BM004.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "043"; /* Module identification*/
  converseLib.validationFailed(214); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0B043

// Verify the Entered Data
Function SW0B044()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/
  set SWEREC empty;
   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0BM004.SWEPLLNB > 0)
    SWEREC.SWEPLLNB = SW0BM004.SWEPLLNB;
  else
    SLWREC.XXXLOCID = "044";
    set SW0BM004.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM004.XWHCD > " ")
    if (SW0BM004.XWHCD in XWHTBL.XWHCD)
      SWEREC.XWHCD = SW0BM004.XWHCD;
      SW0BM004.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM004.XWHABRV = " ";
      SLWREC.XXXLOCID = "044";
      set SW0BM004.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM004.XWHABRV = " ";
    SLWREC.XXXLOCID = "044";
    set SW0BM004.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* validate plan header*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    SW0BS01(); /* select dstloc.vplnhd01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SWEREC.XRPCD != "SC"
       && SWEREC.XRPCD != "IP")
        SLWREC.XXXLOCID = "044";
        set SW0BM004.SWEPLLNB cursor, bold;
        converseLib.validationFailed(218); /* invalid code*/
      end
    else
      SLWREC.XXXLOCID = "044";
      set SW0BM004.SWEPLLNB cursor, bold;
      converseLib.validationFailed(011); /* invalid plan*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0B044

// Process valid input request
Function SW0B045()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter*/
   /* ------------------------------------------------------------*/

  SW0BWP4.XWHCD = SW0BM004.XWHCD; /* warehouse code*/
  SW0BWP4.SW0BWPLN = SW0BM004.SWEPLLNB; /* plan number*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT04.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP4.SW0BWP4A; /* Parameters*/
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0BT04.TARJCL[SW0BWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0BT04.TARTYPE[SW0BWIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT04.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

   /* *************************************************************/
   /* This report currently not available - do not submit*/
   /* *************************************************************/
   /* MOVE '045' TO SLWREC.XXXLOCID   ; Module identification*/
   /* MOVE 237 TO EZEMNO              ; report not available*/
   /* EZEFLO                          ; Exit to display map*/

   /* *************************************************************/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "045"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[4] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B045

// BLANK WORK SHEET REPORT
Function SW0B050()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B051(); /* Format and display the map*/

  SW0B052(); /* Check attention identifier*/

  SW0B053(); /* Reset fields to normal intensity*/

  SW0B054(); /* Verify the data that was entered*/

  SW0B055(); /* Process valid input request*/


end // end SW0B050

// Format and display the map
Function SW0B051()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM005.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM005.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM005.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM005.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM005.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SW0BM005.SW0BMQTY == 0)
    SW0BM005.SW0BMQTY = 40; /* Number of worksheets*/
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM005 alarm; /* Indicate sound alarm*/

  end

  SW0BM005.XXXERRID = SLWREC.XXXERRID; /* Module identification*/
  SW0BM005.XWHCD = SLWREC.XWHCD;
  SW0BM005.XGPCD = SLWREC.XGPCD;

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM005.XWHCD > " ")
    if (SW0BM005.XWHCD in XWHTBL.XWHCD)
      SW0BM005.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM005.XWHABRV = " ";
      SLWREC.XXXLOCID = "054";
      set SW0BM005.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM005.XWHABRV = " ";
    SLWREC.XXXLOCID = "054";
    set SW0BM005.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

  if (SW0BM005.XGPCD > " ")
    if (SW0BM005.XGPCD in XGPTBL.XGPCD)
      SW0BM005.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    else
      SW0BM005.XGPDESC = " ";
      SLWREC.XXXLOCID = "054";
      set SW0BM005.XGPCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM005.XGPDESC = " ";
    SLWREC.XXXLOCID = "054";
    set SW0BM005.XGPCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end
  converse SW0BM005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B051

// Check attention identifier
Function SW0B052()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[5] = "C"; /* Indicate selection cancelled*/

    set SW0BM005 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[5] = " "; /* Reinit selection field*/

    set SW0BM005 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "052"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B052

// Reset highlighted fields
Function SW0B053()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM005.XWHCD normal; /* warehouse*/
  set SW0BM005.XGPCD normal; /* gpc code*/
  set SW0BM005.SWEPLLNB normal; /* plan*/
  set SW0BM005.TSHCNTNR normal; /* container*/
  set SW0BM005.PC3PONBR normal; /* p/o number*/
  set SW0BM005.SW0BMQTY normal; /* number of forms*/

end // end SW0B053

// Verify the Entered Data
Function SW0B054()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* number of worksheets*/
   /* ------------------------------------------------------------*/

  if (SW0BM005.SW0BMQTY < 0)
    SLWREC.XXXLOCID = "054";
    set SW0BM005.SW0BMQTY cursor, bold;
    converseLib.validationFailed(150); /* must be greater than zero*/
  end

  set SWFREC empty;
   /* ------------------------------------------------------------*/
   /* check pc3ponbr*/
   /* ------------------------------------------------------------*/
  if (SW0BM005.PC3PONBR > 0)
    SWFREC.PC3PONBR = SW0BM005.PC3PONBR;
  else
    SLWREC.XXXLOCID = "054";
    set SW0BM005.PC3PONBR cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end


   /* ------------------------------------------------------------*/
   /* check container*/
   /* ------------------------------------------------------------*/
  if (SW0BM005.TSHCNTNR > " ")
    SWFREC.TSHCNTNR = SW0BM005.TSHCNTNR;
  else
    SLWREC.XXXLOCID = "054";
    set SW0BM005.TSHCNTNR cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0BM005.SWEPLLNB > 0)
    SWFREC.SWEPLLNB = SW0BM005.SWEPLLNB;
  else
    SLWREC.XXXLOCID = "054";
    set SW0BM005.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check gp code*/
   /* ------------------------------------------------------------*/

  if (SW0BM005.XGPCD > " ")
    if (SW0BM005.XGPCD in XGPTBL.XGPCD)
      SWFREC.XGPCD = SW0BM005.XGPCD;
      SLWREC.XGPCD = SW0BM005.XGPCD;
      SW0BM005.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    else
      SW0BM005.XGPDESC = " ";
      SLWREC.XXXLOCID = "054";
      set SW0BM005.XGPCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM005.XGPDESC = " ";
    SLWREC.XXXLOCID = "054";
    set SW0BM005.XGPCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM005.XWHCD > " ")
    if (SW0BM005.XWHCD in XWHTBL.XWHCD)
      SWFREC.XWHCD = SW0BM005.XWHCD;
      SLWREC.XWHCD = SW0BM005.XWHCD;
      SW0BM005.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM005.XWHABRV = " ";
      SLWREC.XXXLOCID = "054";
      set SW0BM005.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM005.XWHABRV = " ";
    SLWREC.XXXLOCID = "054";
    set SW0BM005.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* validate data*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    SW0BS02(); /* select dstloc.vplcpo01*/
    if (SQLCA.VAGen_SQLCODE != 0)
      SLWREC.XXXLOCID = "054";
      set SW0BM005.SWEPLLNB cursor, bold;
      set SW0BM005.TSHCNTNR bold;
      set SW0BM005.PC3PONBR bold;
      converseLib.validationFailed(115); /* invalid plan*/
    else
      set SWVREC empty;
      SWVREC.SWVWFNC = "T2";
      SWVREC.XGPCD = SWFREC.XGPCD;
      SWVREC.PC3POIDT = SWFREC.PC3POIDT;
      SWVREC.PCFSECD = SWFREC.PCFSECD;
      SWVREC.FY1FCTYC = SWFREC.FY1FCTYC;
      XSSLS10();
    end
  end


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0B054

// Process valid input request
Function SW0B055()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter*/
   /* ------------------------------------------------------------*/

  set SW0BWP5 empty;
  SW0BWP5.SW0BMQTY = SW0BM005.SW0BMQTY; /* number of worksheets*/
  SW0BWP5.XWHCD = SW0BM005.XWHCD; /* whsecd*/
  SW0BWP5.XGPCD = SW0BM005.XGPCD; /* gpccd*/
  SW0BWP5.SW0BWPLN = SW0BM005.SWEPLLNB; /* plan*/
  SW0BWP5.TSHCNTNR = SW0BM005.TSHCNTNR; /* container*/
  SW0BWP5.SW0BWPON = SW0BM005.PC3PONBR; /* ponbr*/
  SW0BWP5.SWVWPOID = SWVREC.SWVWPOID; /* poid/typ*/
  SW0BWP5.PC4ORTYP = SWFREC.PC4ORTYP; /* or_typ*/
  SW0BWP5.SW0BWIP1 = SWFREC.SWHINSN1; /* SL-INSP-NBR1*/
  SW0BWP5.SW0BWIP2 = SWFREC.SWHINSN2; /* SL-INSP-NBR2*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT05.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP5.SW0BWP5A; /* Parameters*/
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0BT05.TARJCL[SW0BWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0BT05.TARTYPE[SW0BWIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT05.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

   /* *************************************************************/
   /* This report currently not available - do not submit*/
   /* *************************************************************/
   /* OVE '065' TO slWREC.xxxlocid   ; Module identification*/
   /* OVE 237 TO EZEMNO               ; report not available*/
   /* ZEFLO                          ; Exit to display map*/

   /* *************************************************************/

  XPTA0P(); /* Submit JCL for background*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "055"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[5] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B055

// BLANK W/P FACTOR WORKSHEET
Function SW0B060()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B061(); /* Format and display the map*/

  SW0B062(); /* Check attention identifier*/

  SW0B063(); /* Reset fields to normal intensity*/

  SW0B064(); /* Verify the data that was entered*/

  SW0B065(); /* Process valid input request*/


end // end SW0B060

// Format and display the map
Function SW0B061()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM006.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM006.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM006.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM006.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM006.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

  if (SW0BM006.SW0BMQTY == 0)
    SW0BM006.SW0BMQTY = 40;
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM006 alarm; /* Indicate sound alarm*/

  end

  SW0BM006.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B061

// Check attention identifier
Function SW0B062()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[6] = "C"; /* Indicate selection cancelled*/

    set SW0BM006 initial; /* m006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[6] = " "; /* Reinit selection field*/

    set SW0BM006 initial; /* m006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "062"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B062

// Reset highlighted fields
Function SW0B063()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM006.XWHCD normal; /* warehouse*/
  set SW0BM006.XGPCD normal; /* gpc code*/
  set SW0BM006.SWEPLLNB normal; /* plan*/
  set SW0BM006.TSHCNTNR normal; /* container*/
  set SW0BM006.PC3PONBR normal; /* p/o number*/
  set SW0BM006.SW0BMQTY normal; /* number of forms*/

end // end SW0B063

// Verify the Entered Data
Function SW0B064()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* number of worksheets*/
   /* ------------------------------------------------------------*/

  if (SW0BM006.SW0BMQTY < 0)
    SLWREC.XXXLOCID = "064";
    set SW0BM006.SW0BMQTY cursor, bold;
    converseLib.validationFailed(150); /* must be greater than zero*/
  end

  set SWFREC empty;
   /* ------------------------------------------------------------*/
   /* check pc3ponbr*/
   /* ------------------------------------------------------------*/
  if (SW0BM006.PC3PONBR > 0)
    SWFREC.PC3PONBR = SW0BM006.PC3PONBR;
  else
    SLWREC.XXXLOCID = "064";
    set SW0BM006.PC3PONBR cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check container*/
   /* ------------------------------------------------------------*/
  if (SW0BM006.TSHCNTNR > " ")
    SWFREC.TSHCNTNR = SW0BM006.TSHCNTNR;
  else
    SLWREC.XXXLOCID = "064";
    set SW0BM006.TSHCNTNR cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0BM006.SWEPLLNB > 0)
    SWFREC.SWEPLLNB = SW0BM006.SWEPLLNB;
  else
    SLWREC.XXXLOCID = "064";
    set SW0BM006.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check gp code*/
   /* ------------------------------------------------------------*/

  if (SW0BM006.XGPCD > " ")
    if (SW0BM006.XGPCD in XGPTBL.XGPCD)
      SWFREC.XGPCD = SW0BM006.XGPCD;
      SLWREC.XGPCD = SW0BM006.XGPCD;
      SW0BM006.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    else
      SW0BM006.XGPDESC = " ";
      SLWREC.XXXLOCID = "064";
      set SW0BM006.XGPCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM006.XGPDESC = " ";
    SLWREC.XXXLOCID = "064";
    set SW0BM006.XGPCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM006.XWHCD > " ")
    if (SW0BM006.XWHCD in XWHTBL.XWHCD)
      SWFREC.XWHCD = SW0BM006.XWHCD;
      SLWREC.XWHCD = SW0BM006.XWHCD;
      SW0BM006.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM006.XWHABRV = " ";
      SLWREC.XXXLOCID = "064";
      set SW0BM006.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM006.XWHABRV = " ";
    SLWREC.XXXLOCID = "064";
    set SW0BM006.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* validate data*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    SW0BS02(); /* select dstloc.vplcpo01*/
    if (SQLCA.VAGen_SQLCODE != 0)
      SLWREC.XXXLOCID = "064";
      set SW0BM006.SWEPLLNB cursor, bold;
      set SW0BM006.TSHCNTNR bold;
      set SW0BM006.PC3PONBR bold;
      converseLib.validationFailed(115); /* invalid plan*/
    else
      set SWVREC empty;
      SWVREC.SWVWFNC = "T2";
      SWVREC.XGPCD = SWFREC.XGPCD;
      SWVREC.PC3POIDT = SWFREC.PC3POIDT;
      SWVREC.PCFSECD = SWFREC.PCFSECD;
      SWVREC.FY1FCTYC = SWFREC.FY1FCTYC;
      XSSLS10();
    end
  end


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0B064

// Process valid input request
Function SW0B065()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter & parm values for the SL429D*/
   /* COBOL program that this SW0B option submits.*/
   /* ------------------------------------------------------------*/

  set SW0BWP6 empty; /* clear parm record*/
  SW0BWP6.SW0BMQTY = SW0BM006.SW0BMQTY; /* nbr of wkshts*/
  SW0BWP6.XWHCD = SW0BM006.XWHCD; /* Warehouse code*/
  SW0BWP6.XWHABRV = SW0BM006.XWHABRV; /* Warehouse Descr*/
  SW0BWP6.XGPCD = SW0BM006.XGPCD; /* GPC code*/
  SW0BWP6.SW0BWPLN = SW0BM006.SWEPLLNB; /* Plan*/
  SW0BWP6.TSHCNTNR = SW0BM006.TSHCNTNR; /* Container*/
  SW0BWP6.SW0BWPON = SW0BM006.PC3PONBR; /* PO nbr*/
  SW0BWP6.SWVWPOID = SWVREC.SWVWPOID; /* PO ID/Typ*/
  SW0BWP6.PC4ORTYP = SWFREC.PC4ORTYP; /* OR Type*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT06.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP6.SW0BWP6A; /* Parameters*/
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0BT06.TARJCL[SW0BWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0BT06.TARTYPE[SW0BWIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT06.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "065"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[6] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B065

// RECEIVING PLAN SUMMARY REPORT
Function SW0B070()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B071(); /* Format and display the map*/

  SW0B072(); /* Check attention identifier*/

  SW0B073(); /* Reset fields to normal intensity*/

  SW0B074(); /* Verify the data that was entered*/

  SW0B075(); /* Process valid input request*/


end // end SW0B070

// Format and display the map
Function SW0B071()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM007.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM007.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM007.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM007.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM007.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM007.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM007 alarm; /* Indicate sound alarm*/

  end

  SW0BM007.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM007 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B071

// Check attention identifier
Function SW0B072()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[7] = "C"; /* Indicate selection cancelled*/

    set SW0BM007 initial; /* m007 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[7] = " "; /* Reinit selection field*/

    set SW0BM007 initial; /* m007 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "072"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B072

// Reset highlighted fields
Function SW0B073()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM007.XWHCD normal; /* WHSE CODE*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0BM007.XWHCD == "?") /* warehouse code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "073"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0BM007.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SW0BM007.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0BM007.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Selected code*/

    end

    set SW0BM007.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "073"; /* Module identification*/
  converseLib.validationFailed(214); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0B073

// Verify the Entered Data
Function SW0B074()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM007.XWHCD > " ")
    if (SW0BM007.XWHCD in XWHTBL.XWHCD)
      SWEREC.XWHCD = SW0BM007.XWHCD;
      SW0BM007.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM007.XWHABRV = " ";
      SLWREC.XXXLOCID = "074";
      set SW0BM007.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM007.XWHABRV = " ";
    SLWREC.XXXLOCID = "074";
    set SW0BM007.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0B074

// Process valid input request
Function SW0B075()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter*/
   /* ------------------------------------------------------------*/

  SW0BWP7.XWHCD = SW0BM007.XWHCD; /* warehouse code*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT07.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP7.SW0BWP7A; /* Parameters*/
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0BT07.TARJCL[SW0BWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0BT07.TARTYPE[SW0BWIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT07.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

   /* *************************************************************/
   /* This report currently not available - do not submit*/
   /* *************************************************************/
   /* MOVE '075' TO SLWREC.XXXLOCID   ; Module identification*/
   /* MOVE 237 TO EZEMNO              ; report not available*/
   /* EZEFLO                          ; Exit to display map*/

   /* *************************************************************/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "075"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[7] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B075

// Plan Reconciliation Report
Function SW0B080()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B081(); /* Format and display the map*/

  SW0B082(); /* Check attention identifier*/

  SW0B083(); /* Reset fields to normal intensity*/

  SW0B084(); /* Verify the data that was entered*/

  SW0B085(); /* Process valid input request*/


end // end SW0B080

// Format and Display the Map
Function SW0B081()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM008.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM008.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM008.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM008.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM008.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM008.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM008 alarm; /* Indicate sound alarm*/

  end

  SW0BM008.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM008 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B081

// Check Attention Identifier
Function SW0B082()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[8] = "C"; /* Indicate selection cancelled*/

    set SW0BM008 initial; /* m008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[8] = " "; /* Reinit selection field*/

    set SW0BM008 initial; /* m008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXERRID = "SW0B082"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B082

// Reset Highlighted Fields
Function SW0B083()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM008.XWHCD normal; /* Warehouse Code*/
  set SW0BM008.TSHCNTNR normal; /* Container Number*/
  set SW0BM008.SW0BMRTY normal; /* Report Type*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0BM008.XWHCD == "?") /* warehouse code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXERRID = "SW0B083"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0BM008.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SW0BM008.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0BM008.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Selected code*/

    end

    set SW0BM008.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXERRID = "SW0B083"; /* Module identification*/
  converseLib.validationFailed(214); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0B083

// Verify the Entered Data
Function SW0B084()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate report type*/
   /* ------------------------------------------------------------*/

  if (SW0BM008.SW0BMRTY == "D" /* report type 's' or 'd' or 'b'*/
   || SW0BM008.SW0BMRTY == "S" 
   || SW0BM008.SW0BMRTY == "B")
     /* next sentence*/
  else
    if (SW0BM008.SW0BMRTY == " ")
      SLWREC.XXXERRID = "SW0B084";
      set SW0BM008.SW0BMRTY cursor, bold;
      converseLib.validationFailed(009); /* required field*/
    else
      SLWREC.XXXERRID = "SW0B084";
      set SW0BM008.SW0BMRTY cursor, bold;
      converseLib.validationFailed(011); /* invalid entry*/
    end
  end

   /* ------------------------------------------------------------*/
   /* validate container number*/
   /* ------------------------------------------------------------*/

  if (SW0BM008.TSHCNTNR == " ") /* container number*/
    SLWREC.XXXERRID = "SW0B084";
    set SW0BM008.TSHCNTNR cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  else

    /* ------------------------------------------------------------*/
     /* Validate Warehouse Container Number*/
    /* ------------------------------------------------------------*/

    SW0BS08(); /* Select DSTLOC.VRLHDR01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (SL1REC.YRSCD != "01"
       && SL1REC.YRSCD != "02"
       && SL1REC.YRSCD != "03"
       && SL1REC.YRSCD != "04")
        SLWREC.XXXERRID = "SW0B084";
        converseLib.validationFailed(317); /* invalid receiving status*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        SLWREC.XXXERRID = "SW0B084";
        set SW0BM008.TSHCNTNR cursor, bold;
        converseLib.validationFailed(085); /* container not on file*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM008.XWHCD > " ")
    if (SW0BM008.XWHCD in XWHTBL.XWHCD)
      SW0BM008.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM008.XWHABRV = " ";
      SLWREC.XXXERRID = "SW0B084";
      set SW0BM008.XWHCD cursor, bold;
      converseLib.validationFailed(373); /* invalid value*/
    end
  else
    SW0BM008.XWHABRV = " ";
    SLWREC.XXXERRID = "SW0B084";
    set SW0BM008.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end SW0B084

// submit sl4341/sl4351 jcl
Function SW0B085()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format plan reconciliation summary/detail parameter*/
   /* ------------------------------------------------------------*/

  set SW0BWP8 empty;

  if (SL1REC.SL1UPDBY != " ")

    SW0B086(); /* Obtain User Name*/

    if (TA3REC.XURUSRNM == " ")
      SW0BW08.XURUSRID = SL1REC.SL1UPDBY;
      SW0BW08.SW0BWDSH = " - ";
      SW0BW08.SW0BWLTR = "UNKNOWN";
      SW0BWP8.XURUSRNM = SW0BW08.XURUSRNM;
    else
      SW0BWP8.XURUSRNM = TA3REC.XURUSRNM;
    end
  end

  SW0BWP8.XWHCD1 = SW0BM008.XWHCD; /* warehouse code*/
  SW0BWP8.TSHCNTNR = SW0BM008.TSHCNTNR; /* container*/

   /* ------------------------------------------------------------*/
   /* TEST FOR REPORT MAP FIELD BEING "D" OR "S" PERFORM 87 OR 88*/
   /* ------------------------------------------------------------*/

  if (SW0BM008.SW0BMRTY == "B") /* submit sl4341, and sl4351*/

    SW0B087();

    SW0B088();

  else
    if (SW0BM008.SW0BMRTY == "S") /* submit sl4341*/
      SW0B087();
    else
      if (SW0BM008.SW0BMRTY == "D") /* submit sl4351*/
        SW0B088();
      end
    end
  end

  set SW0BM008 initial; /* reset map after jobs have been submitted*/


end // end SW0B085

// Get User Name
Function SW0B086()
   /* ------------------------------------------------------------*/
   /* Obtain the user information.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty; /* Initialize subroutine parameters*/

  TA3REC.TA3OPTN = "NAMEONLY"; /* Indicate subroutine option*/
  TA3REC.TA3USRID = SL1REC.SL1UPDBY;

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user information*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call was successful*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(1);
  SLWREC.XXXERRID = "SW0B086";
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Error information*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN THE USER INFORMATION";
  TA1REC.TA1PGMNM = "SW0B086"; /* Process name*/
  TA1REC.TA1MAP = "SW0BM008"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to calling application*/


end // end SW0B086

// build sl434d jcl - reconc sum
Function SW0B087()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* input table*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT8A.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP8.SW0BWP8A; /* Parameters*/
    else
      if (SW0BT8A.TARTYPE[SW0BWIXT] == "S") /* symbolic*/
        SW0BWP8.SW0BWP8B = SW0BT8A.TARJCL[SW0BWIXT];
        SW0BWP8.XWHCD2 = SW0BM008.XWHCD; /* warehouse code*/
        TA6REC.TARJCL[TA6INDEX] = SW0BWP8.SW0BWP8B; /* symbolic*/
      else
        if (SW0BT8A.TARTYPE[SW0BWIXT] == "D") /* symbolic*/
          SW0BWP8.SW0BWP8C = SW0BT8A.TARJCL[SW0BWIXT];
          SW0BWP8.XWHCD3 = SW0BM008.XWHCD; /* warehouse code*/
          TA6REC.TARJCL[TA6INDEX] = SW0BWP8.SW0BWP8C; /* symbolic*/
        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = SW0BT8A.TARJCL[SW0BWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = SW0BT8A.TARTYPE[SW0BWIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT8A.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[8] = "*";
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.XXXERRID = "SW0B087"; /* Module identification*/
    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SW0B087

// build sl435d jcl - reconc dtl
Function SW0B088()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* input table*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT8B.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP8.SW0BWP8A; /* Parameters*/
    else
      if (SW0BT8B.TARTYPE[SW0BWIXT] == "S") /* symbolic*/
        SW0BWP8.SW0BWP8B = SW0BT8B.TARJCL[SW0BWIXT];
        SW0BWP8.XWHCD2 = SW0BM008.XWHCD; /* warehouse code*/
        TA6REC.TARJCL[TA6INDEX] = SW0BWP8.SW0BWP8B; /* symbolic*/
      else
        if (SW0BT8B.TARTYPE[SW0BWIXT] == "D") /* symbolic*/
          SW0BWP8.SW0BWP8C = SW0BT8B.TARJCL[SW0BWIXT];
          SW0BWP8.XWHCD3 = SW0BM008.XWHCD; /* warehouse code*/
          TA6REC.TARJCL[TA6INDEX] = SW0BWP8.SW0BWP8C; /* symbolic*/
        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = SW0BT8B.TARJCL[SW0BWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = SW0BT8B.TARTYPE[SW0BWIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT8B.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[8] = "*"; /* Indicate function complete*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.XXXERRID = "SW0B088"; /* Module identification*/
    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SW0B088

// CARTONS NOT ON PKG LIST
Function SW0B090()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B091(); /* Format and display the map*/

  SW0B092(); /* Check attention identifier*/

  SW0B093(); /* Reset fields to normal intensity*/

  SW0B094(); /* Verify the data that was entered*/

  SW0B095(); /* Process valid input request*/


end // end SW0B090

// Format and display the map
Function SW0B091()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM009.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM009.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM009.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM009.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM009.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM009.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM009 alarm; /* Indicate sound alarm*/

  end

  SW0BM009.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM009 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B091

// Check attention identifier
Function SW0B092()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[9] = "C"; /* Indicate selection cancelled*/

    set SW0BM009 initial; /* m009 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[9] = " "; /* Reinit selection field*/

    set SW0BM009 initial; /* m009 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "092"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B092

// Reset highlighted fields
Function SW0B093()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM009.XWHCD normal; /* WHSE CODE*/
  set SW0BM009.SWEPLLNB normal; /* plan number*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0BM009.XWHCD == "?") /* warehouse code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "093"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0BM009.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SW0BM009.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0BM009.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Selected code*/

    end

    set SW0BM009.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "093"; /* Module identification*/
  converseLib.validationFailed(214); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0B093

// Verify the Entered Data
Function SW0B094()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/
  set SWEREC empty;
   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0BM009.SWEPLLNB > 0)
    SWEREC.SWEPLLNB = SW0BM009.SWEPLLNB;
  else
    SLWREC.XXXLOCID = "094";
    set SW0BM009.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM009.XWHCD > " ")
    if (SW0BM009.XWHCD in XWHTBL.XWHCD)
      SWEREC.XWHCD = SW0BM009.XWHCD;
      SW0BM009.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM009.XWHABRV = " ";
      SLWREC.XXXLOCID = "094";
      set SW0BM009.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM009.XWHABRV = " ";
    SLWREC.XXXLOCID = "094";
    set SW0BM009.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* validate plan header*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    SW0BS01(); /* select dstloc.vplnhd01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SWEREC.XRPCD != "RC"
       && SWEREC.XRPCD != "IP")
        SLWREC.XXXLOCID = "094";
        set SW0BM009.SWEPLLNB cursor, bold;
        converseLib.validationFailed(218); /* invalid code*/
      end
    else
      SLWREC.XXXLOCID = "094";
      set SW0BM009.SWEPLLNB cursor, bold;
      converseLib.validationFailed(011); /* invalid plan*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0B094

// Process valid input request
Function SW0B095()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter*/
   /* ------------------------------------------------------------*/

  SW0BWP9.XWHCD = SW0BM009.XWHCD; /* warehouse code*/
  SW0BWP9.SW0BWPLN = SW0BM009.SWEPLLNB; /* plan number*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT09.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP9.SW0BWP9A; /* Parameters*/
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0BT09.TARJCL[SW0BWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0BT09.TARTYPE[SW0BWIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT09.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

   /* *************************************************************/
   /* This report currently not available - do not submit*/
   /* *************************************************************/
   /* MOVE '095' TO SLWREC.XXXLOCID   ; Module identification*/
   /* MOVE 237 TO EZEMNO              ; report not available*/
   /* EZEFLO                          ; Exit to display map*/

   /* *************************************************************/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "095"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[9] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B095

// UNPRINTED P/L NOT RCVD REPORT
Function SW0B100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B101(); /* Format and display the map*/

  SW0B102(); /* Check attention identifier*/

  SW0B103(); /* Reset fields to normal intensity*/

  SW0B104(); /* Verify the data that was entered*/

  SW0B105(); /* Process valid input request*/


end // end SW0B100

// Format and display the map
Function SW0B101()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM010.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM010.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM010.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM010 alarm; /* Indicate sound alarm*/

  end

  SW0BM010.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B101

// Check attention identifier
Function SW0B102()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[10] = "C"; /* Indicate selection cancelled*/

    set SW0BM010 initial; /* m010 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[10] = " "; /* Reinit selection field*/

    set SW0BM010 initial; /* m010 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "102"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B102

// Reset highlighted fields
Function SW0B103()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM010.XWHCD normal; /* WHSE CODE*/
  set SW0BM010.SWEPLLNB normal; /* plan number*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0BM010.XWHCD == "?") /* warehouse code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "103"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0BM010.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SW0BM010.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0BM010.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Selected code*/

    end

    set SW0BM010.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "103"; /* Module identification*/
  converseLib.validationFailed(214); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0B103

// Verify the Entered Data
Function SW0B104()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  set SWEREC empty;

   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0BM010.SWEPLLNB > 0)
    SWEREC.SWEPLLNB = SW0BM010.SWEPLLNB;
  else
    SLWREC.XXXLOCID = "104";
    set SW0BM010.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM010.XWHCD > " ")
    if (SW0BM010.XWHCD in XWHTBL.XWHCD)
      SWEREC.XWHCD = SW0BM010.XWHCD;
      SW0BM010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM010.XWHABRV = " ";
      SLWREC.XXXLOCID = "104";
      set SW0BM010.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM010.XWHABRV = " ";
    SLWREC.XXXLOCID = "104";
    set SW0BM010.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* validate plan header*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    SW0BS01(); /* select dstloc.vplnhd01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SWEREC.XRPCD != "RC"
       && SWEREC.XRPCD != "IP")
        SLWREC.XXXLOCID = "104";
        set SW0BM010.SWEPLLNB cursor, bold;
        converseLib.validationFailed(218); /* invalid code*/
      end
    else
      SLWREC.XXXLOCID = "104";
      set SW0BM010.SWEPLLNB cursor, bold;
      converseLib.validationFailed(011); /* invalid plan*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0B104

// Process valid input request
Function SW0B105()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter*/
   /* ------------------------------------------------------------*/

  SW0BWP5.XWHCD = SW0BM010.XWHCD;
  SW0BWP5.SW0BWPLN = SW0BM010.SWEPLLNB;

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT1O.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP5.SW0BWP5A; /* Parameters*/
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0BT1O.TARJCL[SW0BWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0BT1O.TARTYPE[SW0BWIXT]; /* Type*/

    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT1O.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "055"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[10] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B105

// PRINT GENERIC LABELS
Function SW0B110()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B111(); /* Format and display the map*/

  SW0B112(); /* Check attention identifier*/

  SW0B113(); /* Reset fields to normal intensity*/

  SW0B114(); /* Verify the data that was entered*/

  SW0B115(); /* Process valid input request*/


end // end SW0B110

// Format and display the map
Function SW0B111()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM011.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM011.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM011.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM011.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM011.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM011.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM011.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM011 alarm; /* Indicate sound alarm*/

  end

  SW0BM011.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM011 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B111

// Check attention identifier
Function SW0B112()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[11] = "C"; /* Indicate selection cancelled*/

    set SW0BM011 initial; /* m011 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[11] = " "; /* Reinit selection field*/

    set SW0BM011 initial; /* m011 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "112"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B112

// Reset highlighted fields
Function SW0B113()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SW0BW00.SW0BWIX3 = 1; /* intialize index*/

  while (SW0BW00.SW0BWIX3 <= 10) /* until end of table*/

    set SW0BM011.SW0BWSPR[SW0BWIX3] initialAttributes; /* spur number*/
    set SW0BM011.SW0BWLBL[SW0BWIX3] initialAttributes; /* number of labels*/
    SW0BW00.SW0BWIX3 = SW0BW00.SW0BWIX3 + 1; /* increment index*/

  end
end // end SW0B113

// Verify the Entered Data
Function SW0B114()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  set SWEREC empty;

   /* ------------------------------------------------------------*/
   /* check spur number and number of labels*/
   /* ------------------------------------------------------------*/

  SW0BW00.SW0BWIX3 = 10;

  while (SW0BW00.SW0BWIX3 > 0)

    if (SW0BM011.SW0BWLBL[SW0BWIX3] == 0
     && SW0BM011.SW0BWSPR[SW0BWIX3] > 0)

      SLWREC.XXXLOCID = "114";
      set SW0BM011.SW0BWLBL[SW0BWIX3] cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/

    end

    if (SW0BM011.SW0BWSPR[SW0BWIX3] == 0
     && SW0BM011.SW0BWLBL[SW0BWIX3] > 0)

      SLWREC.XXXLOCID = "114";
      set SW0BM011.SW0BWSPR[SW0BWIX3] cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/

    end

    SW0BW00.SW0BWIX3 = SW0BW00.SW0BWIX3 - 1;

  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end SW0B114

// Process valid input request
Function SW0B115()
   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format parameters*/
   /* ------------------------------------------------------------*/

  SW0BW00.SW0BWIX3 = 1;

  while (SW0BW00.SW0BWIX3 <= 10)

    SW0BWP11.SW0BWSPR[SW0BWIX3] = SW0BM011.SW0BWSPR[SW0BWIX3];
    SW0BWP11.SW0BWLBL[SW0BWIX3] = SW0BM011.SW0BWLBL[SW0BWIX3];
    SW0BW00.SW0BWIX3 = SW0BW00.SW0BWIX3 + 1;

  end

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIX3 = 1;
  TA6REC.TA6INDEX = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT11.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      SW0BW00.SW0BWIXT = 1;
      while (SW0BW00.SW0BWIXT <= 10)

        if (SW0BWP11.SW0BWSPR[SW0BWIXT] > 0)

          TA6REC.TARJCL[SW0BWIX3] = SW0BWP11.SW0BWP9A[SW0BWIXT];
          SW0BW00.SW0BWIX3 = SW0BW00.SW0BWIX3 + 1;

        end

        SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1;

      end

    else

      TA6REC.TARJCL[SW0BWIX3] = SW0BT11.TARJCL[TA6INDEX];
      TA6REC.TARTYPE[SW0BWIX3] = SW0BT11.TARTYPE[TA6INDEX];

    end

    if (SW0BT11.TARJCL[TA6INDEX] == "/*EOF")

      TA6REC.TA6INDEX = 0;

    else

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
      SW0BW00.SW0BWIX3 = SW0BW00.SW0BWIX3 + 1;

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "055"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[11] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B115

// LABEL FORMAT LOAD
Function SW0B120()
   /* ------------------------------------------------------------*/
   /* 5) Process loading the zpl label format(s)*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B125(); /* Process loading label format*/

end // end SW0B120

// Process loading label format
Function SW0B125()
   /* ------------------------------------------------------------*/
   /* process loading the zebra label format(s)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIX3 = 1;
  TA6REC.TA6INDEX = 1;

   /* ------------------------------------------------------------*/
   /* Format JCL into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    TA6REC.TARJCL[SW0BWIX3] = SW0BT12.TARJCL[TA6INDEX];
    TA6REC.TARTYPE[SW0BWIX3] = SW0BT12.TARTYPE[TA6INDEX];

    if (SW0BT12.TARJCL[TA6INDEX] == "/*EOF")

      TA6REC.TA6INDEX = 0;

    else

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
      SW0BW00.SW0BWIX3 = SW0BW00.SW0BWIX3 + 1;

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "125"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[12] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SW0BW00.SW0BMSEL[12] = "*"; /* do not request function twice*/
    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B125

// PLAN REPORT BY STATUS
Function SW0B130()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B131(); /* Format and display the map*/

  SW0B132(); /* Check attention identifier*/

  SW0B133(); /* Reset fields to normal intensity*/

  SW0B134(); /* Verify the data that was entered*/

  SW0B135(); /* Process valid input request*/


end // end SW0B130

// Format and display the map
Function SW0B131()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0
   && SW0BW00.SW0BWDPF == "Y")
    converseLib.validationFailed(0);
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM013.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW0BM013.XWHCD = "51"; /* warehouse*/
  if (SW0BM013.XWHCD in XWHTBL.XWHCD)
    SW0BM013.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end /* warehouse desc*/

  SW0BM013.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM013.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM013.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM013.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM013.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM013.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM013 alarm; /* Indicate sound alarm*/

  end

  SW0BM013.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM013 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B131

// Check attention identifier
Function SW0B132()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[13] = "C"; /* Indicate selection cancelled*/

    set SW0BM013 initial; /* m013 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[13] = " "; /* Reinit selection field*/

    set SW0BM013 initial; /* m013 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "132"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B132

// Reset highlighted fields
Function SW0B133()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM013.SWEPLLNB normal; /* plan number*/
  set SW0BM013.XRPCD normal; /* report code status*/

end // end SW0B133

// Verify the Entered Data
Function SW0B134()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/
  SW0BW00.SW0BWDPF = "N"; /* display flag*/

  set SWEREC empty;
  SWEREC.XWHCD = SW0BM013.XWHCD;

   /* ------------------------------------------------------------*/
   /* check plan header*/
   /* ------------------------------------------------------------*/

  if (SW0BM013.SWEPLLNB > 0)
    SWEREC.SWEPLLNB = SW0BM013.SWEPLLNB;
    SW0BS01(); /* select dstloc.vplnhd01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SW0BM013.XRPCD == " ") /* receiving status*/
        SW0BM013.XRPCD = SWEREC.XRPCD; /* receiving status*/
        SW0BW00.SW0BWDPF = "Y"; /* display flag*/
        converseLib.validationFailed(11); /* redisplay map*/
      end
    else
      SLWREC.XXXLOCID = "134";
      set SW0BM013.SWEPLLNB cursor, bold;
      converseLib.validationFailed(011); /* invalid plan*/
    end
  end

   /* ------------------------------------------------------------*/
   /* validate receiving plan status*/
   /* ------------------------------------------------------------*/

  if (SW0BM013.XRPCD in XRPTBL.XRPCD) /* receiving status*/
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "134";
    set SW0BM013.XRPCD cursor, bold;
    converseLib.validationFailed(011); /* invalid planstatus*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end SW0B134

// Process valid input request
Function SW0B135()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter*/
   /* ------------------------------------------------------------*/

  SW0BWP13.XWHCD = SW0BM013.XWHCD; /* warehouse code*/
  SW0BWP13.SW0BWPLN = SW0BM013.SWEPLLNB; /* plan number*/
  SW0BWP13.XRPCD = SW0BM013.XRPCD; /* receiving plan code*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT13.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP13.SW0BW13A; /* Parameters*/
    else
      if (SW0BT13.TARTYPE[SW0BWIXT] == "S") /* symbolic*/
        SW0BWP13.SW0BW13B = SW0BT13.TARJCL[SW0BWIXT];
        SW0BWP13.XWHCD2 = SW0BM013.XWHCD; /* warehouse code*/
        TA6REC.TARJCL[TA6INDEX] = SW0BWP13.SW0BW13B; /* symbolic*/
      else
        if (SW0BT13.TARTYPE[SW0BWIXT] == "D") /* symbolic*/
          SW0BWP13.SW0BW13C = SW0BT13.TARJCL[SW0BWIXT];
          SW0BWP13.XWHCD3 = SW0BM013.XWHCD; /* warehouse code*/
          TA6REC.TARJCL[TA6INDEX] = SW0BWP13.SW0BW13C; /* symbolic*/
        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = SW0BT13.TARJCL[SW0BWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = SW0BT13.TARTYPE[SW0BWIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT13.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "135"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[13] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM013 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B135

// planned label print
Function SW0B140()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B141(); /* Format and display the map*/

  SW0B142(); /* Check attention identifier*/

  SW0B143(); /* Reset fields to normal intensity*/

  SW0B144(); /* Verify the data that was entered*/

  SW0B145(); /* Process valid input request*/


end // end SW0B140

// Format and display the map
Function SW0B141()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0
   && SW0BW00.SW0BWDPF == "Y")
    converseLib.validationFailed(0);
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SW0BM014.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM014.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SW0BM014.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SW0BM014.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SW0BM014.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  SW0BM014.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM014.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM014 alarm; /* Indicate sound alarm*/

  end

  SW0BM014.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM014 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SW0B141

// Check attention identifier
Function SW0B142()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0BW00.SW0BMSEL[14] = "C"; /* Indicate selection cancelled*/

    set SW0BM014 initial; /* m014 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SW0BW00.SW0BWSWX = "Y"; /* Indicate exit requested*/

    SW0BW00.SW0BMSEL[14] = " "; /* Reinit selection field*/

    set SW0BM014 initial; /* m014 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "142"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0B142

// Reset highlighted fields
Function SW0B143()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0BM014.XWHCD normal; /* WHSE CODE*/
  set SW0BM014.SWEPLLNB normal; /* plan number*/
  set SW0BM014.SW0BMPGN normal; /* plan number*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0BM014.XWHCD == "?") /* warehouse code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "143"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0BM014.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SW0BM014.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0BM014.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Selected code*/

    end

    set SW0BM014.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "143"; /* Module identification*/
  converseLib.validationFailed(214); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0B143

// Verify the Entered Data
Function SW0B144()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/
  set SWEREC empty;
   /* ------------------------------------------------------------*/
   /* check generation*/
   /* ------------------------------------------------------------*/

  if (SW0BM014.SW0BMPGN > " ")
    if (SW0BM014.SW0BMPGN == "+0"
     || SW0BM014.SW0BMPGN == " 0"
     || SW0BM014.SW0BMPGN == "00"
     || SW0BM014.SW0BMPGN == "0 "
     || SW0BM014.SW0BMPGN == "-1"
     || SW0BM014.SW0BMPGN == "-2")
      if (SW0BM014.SW0BMPGN == " 0"
       || SW0BM014.SW0BMPGN == "00"
       || SW0BM014.SW0BMPGN == "0 ")
        SW0BM014.SW0BMPGN = "+0";
      end
    else
      SLWREC.XXXLOCID = "144";
      set SW0BM014.SW0BMPGN cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SLWREC.XXXLOCID = "144";
    set SW0BM014.SW0BMPGN cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0BM014.SWEPLLNB > 0)
    SWEREC.SWEPLLNB = SW0BM014.SWEPLLNB;
  else
    SLWREC.XXXLOCID = "144";
    set SW0BM014.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0BM014.XWHCD > " ")
    if (SW0BM014.XWHCD in XWHTBL.XWHCD)
      SWEREC.XWHCD = SW0BM014.XWHCD;
      SW0BM014.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0BM014.XWHABRV = " ";
      SLWREC.XXXLOCID = "144";
      set SW0BM014.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SW0BM014.XWHABRV = " ";
    SLWREC.XXXLOCID = "144";
    set SW0BM014.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* validate plan header*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    SW0BS01(); /* select dstloc.vplnhd01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SWEREC.XRPCD != "SC"
       && SWEREC.XRPCD != "IP")
        SLWREC.XXXLOCID = "144";
        set SW0BM014.SWEPLLNB cursor, bold;
        converseLib.validationFailed(218); /* invalid code*/
      end
    else
      SLWREC.XXXLOCID = "144";
      set SW0BM014.SWEPLLNB cursor, bold;
      converseLib.validationFailed(011); /* invalid plan*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0B144

// Process valid input request
Function SW0B145()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* format quantity parameter*/
   /* ------------------------------------------------------------*/

  SW0BWP14.XWHCD = SW0BM014.XWHCD; /* warehouse code*/
  SW0BWP14.SW0BWWOG = SWEREC.SL8WOGRP; /* wo grp nbr*/
  SW0BWP14.SW0BMPGN = SW0BM014.SW0BMPGN; /* print generation*/

  SW0BWP14.XWHCD1 = SW0BM014.XWHCD; /* warehouse code*/
  SW0BWP14.SW0BWWG2 = SWEREC.SL8WOGRP; /* wo grp nbr*/
  SW0BWP14.SW0BWPLN = SWEREC.SWEPLLNB; /* plan nbr*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SW0BW00.SW0BWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0BT14.TARTYPE[SW0BWIXT] == "P") /* Parameters statement*/
      TA6REC.TARJCL[TA6INDEX] = SW0BWP14.SW0BW14A; /* Parameters*/
    else
      if (SW0BT14.TARTYPE[SW0BWIXT] == "C") /* Parameters statement*/
        TA6REC.TARJCL[TA6INDEX] = SW0BWP14.SW0BW14C; /* Parameters*/
      else
        if (SW0BT14.TARTYPE[SW0BWIXT] == "G") /* symbolic*/
          SW0BWP14.SW0BW14B = SW0BT14.TARJCL[SW0BWIXT];
          SW0BWP14.SW0BMPG2 = SW0BM014.SW0BMPGN; /* print generation*/
          TA6REC.TARJCL[TA6INDEX] = SW0BWP14.SW0BW14B; /* symbolic*/
        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = SW0BT14.TARJCL[SW0BWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = SW0BT14.TARTYPE[SW0BWIXT]; /* Type*/

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0BT14.TARJCL[SW0BWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0BW00.SW0BWIXT = SW0BW00.SW0BWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "145"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SW0BW00.SW0BMSEL[14] = "*"; /* Indicate function completed*/
    SLWREC.SLWMSGNO = 059; /* print request submitted*/

    set SW0BM014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/



end // end SW0B145

// Report Request Menu
Function SW0B990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0B991(); /* Format and display the map*/

  SW0B992(); /* Check attention identifier*/

  SW0B993(); /* Reset fields to normal intensity*/

  SW0B994(); /* Verify the data that was entered*/

  SW0B995(); /* Process valid input request*/


end // end SW0B990

// Format and display the map
Function SW0B991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set SW0BM099 initial; /* M099 input/output*/

    SW0BW00.SW0BWIXM = 1; /* Initialize map index*/

    while (SW0BW00.SW0BWIXM <= SW0BW00.SW0BWIXL) /* Until end of array*/

      SW0BM099.SW0BMSEL[SW0BWIXM] = SW0BW00.SW0BMSEL[SW0BWIXM];

      SW0BW00.SW0BWIXM = SW0BW00.SW0BWIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0BM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0BM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0BM099.CAITEM = COMMAREA.CAITEM; /* Application data*/

  SLWREC.XXXAPPID = "SW0B"; /* Application id*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0BM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    set SW0BM099 alarm; /* Indicate sound alarm*/

  end

  SW0BM099.XXXERRID = SLWREC.XXXERRID; /* Module identification*/

  converse SW0BM099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0BM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0BM099.CAITEM; /* Application data*/


end // end SW0B991

// Check attention identifier
Function SW0B992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SW0BM099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    SW0BS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSL001(); /* Exit to another application*/

      set SW0BM099.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "992"; /* Module identification*/
      converseLib.validationFailed(05); /* Indicate PF key not valid*/

    end

    SW0BS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to Production*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf9 /* or PF9 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0BM099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf9) /* PF4 was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    XSSL001(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    SW0BS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "992"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    SW0BS99(); /* Exit to display map*/

  end


end // end SW0B992

// Reset highlighted fields
Function SW0B993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SW0BW00.SW0BWIXM = 1; /* Initialize index*/

  while (SW0BW00.SW0BWIXM <= SW0BW00.SW0BWIXL) /* Until all lines are reset*/

    set SW0BM099.SW0BMSEL[SW0BWIXM] initialAttributes; /* Reset select field*/

    SW0BW00.SW0BWIXM = SW0BW00.SW0BWIXM + 1; /* Increment line index*/

  end

  set SW0BM099.CATOAP initialAttributes; /* TO application*/
  set SW0BM099.CAITEM initialAttributes; /* Application data*/


end // end SW0B993

// Verify the entered data
Function SW0B994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "994"; /* Module identification*/
    set SW0BM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  SW0BW00.SW0BWIXM = SW0BW00.SW0BWIXL; /* Initialize line index*/

  while (SW0BW00.SW0BWIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (SW0BM099.SW0BMSEL[SW0BWIXM] != SW0BW00.SW0BMSEL[SW0BWIXM]
     && SW0BM099.SW0BMSEL[SW0BWIXM] != " " /* Line was selected*/
     && SW0BM099.SW0BMSEL[SW0BWIXM] != "S") /* and not with an "S"*/

      SLWREC.XXXLOCID = "994"; /* Module identification*/
      set SW0BM099.SW0BMSEL[SW0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Only "S" is valid*/

    end

    SW0BW00.SW0BWIXM = SW0BW00.SW0BWIXM - 1; /* Decrement line number*/

  end


   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SW0BS99(); /* Exit to display map*/
  end


end // end SW0B994

// Process valid input request
Function SW0B995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move SW0BM099.SW0BMSEL to SW0BW00.SW0BMSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (SW0BW00.SW0BMSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end SW0B995

// select 's' dstloc.vplnhd01
Function SW0BS01()

   /* ------------------------------------------------------------*/
   /* obtain plan header from dstloc.vplnhd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      /* SET SL0BM005 PAGE             ; Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VPLNHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
   /* MOVE SWEREC.SWEDATA TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0BS01

// select 's ' dstloc.vplcpo01
Function SW0BS02()

   /* ------------------------------------------------------------*/
   /* obtain plan header from dstloc.vplcpo01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      /* SET SL0BM005 PAGE             ; Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VPLCPO01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
   /* MOVE SWfREC.SWfgroup TO TA1REC.TA1TBLKE ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0BS02

// Select 's' DSTLOC.VRLHDR01
Function SW0BS08()

   /* ------------------------------------------------------------*/
   /* Obtain Warehouse Code and Container Number from VRLHDR01*/
   /* ------------------------------------------------------------*/
  set SL1REC empty;

  SL1REC.XWHCD = SW0BM008.XWHCD;
  SL1REC.TS3CNTNR = SW0BM008.TSHCNTNR;

  try
    call "IO1570" ("S ", SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return from the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXERRID = "SW0BS08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VRLHDR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXERRID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0BS08

// Clear selections and exit
Function SW0BS99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  SW0BW00.SW0BWIXM = 1; /* Initialize map index*/

  while (SW0BW00.SW0BWIXM <= SW0BW00.SW0BWIXL) /* Until end of array*/

    if (SW0BW00.SW0BMSEL[SW0BWIXM] == "S") /* Entry is selected*/
      SW0BW00.SW0BMSEL[SW0BWIXM] = " "; /* Reset entry*/
    end

    SW0BW00.SW0BWIXM = SW0BW00.SW0BWIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end SW0BS99

//*** RECORD=SW0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0BW00 type basicRecord
  10 SW0BWFOR SW0BWFOR ; 
  10 SW0BWJOB SW0BWJOB ; 
  10 SW0BMSEL SW0BMSEL [14] ; 
  10 SW0BWIXL SW0BWIXL ; 
  10 SW0BWIXM SW0BWIXM ; 
  10 SW0BWIX2 SW0BWIX2 ; 
  10 SW0BWIXT SW0BWIXT ; 
  10 SW0BWSWX SW0BWSWX ; 
  10 SW0BWIDX SW0BWIDX ; 
  10 SW0BWIX3 SW0BWIX3 ; 
  10 SW0BWSLF SW0BWSLF ; 
  10 SW0BWDPF SW0BWDPF ; 
  10 SW0BWERF SW0BWERF ; 
end // end SW0BW00

//*** RECORD=SW0BW08 ****
// ------------------------------------------------------------
//                 Application Working Storage
// ------------------------------------------------------------
// ***********************
Record SW0BW08 type basicRecord
  10 XURUSRNM XURUSRNM ; 
    15 XURUSRID XURUSRID ; 
    15 SW0BWDSH SW0BWDSH ; 
    15 SW0BWLTR SW0BWLTR ; 
    15 * char(4) ; 
end // end SW0BW08

//*** RECORD=SW0BWP10 ****
// ----------------------------
// Jcl parms for lane worksheet
// ----------------------------
// ************************
Record SW0BWP10 type basicRecord
  10 SW0BWP9A SW0BWP9A ; 
    15 XWHCD XWHCD ; 
    15 SW0BWPLN SW0BWPLN ; 
    15 SW0BWITP SW0BWITP ; 
    15 * char(67) ; 
end // end SW0BWP10

//*** RECORD=SW0BWP11 ****
// ----------------------------
// Jcl parms for lane worksheet
// ----------------------------
// ************************
Record SW0BWP11 type basicRecord
  10 SW0BWP9A SW0BWP9A [10] ; 
    15 SW0BWLBL SW0BWLBL ; 
    15 SW0BWSPR SW0BWSPR ; 
    15 * char(72) ; 
end // end SW0BWP11

//*** RECORD=SW0BWP13 ****
// ----------------------------
// Jcl parms for weight/pack factor work sheet
// ----------------------------
// ************************
Record SW0BWP13 type basicRecord
  10 SW0BW13A SW0BW13A ; 
    15 XWHCD XWHCD ; 
    15 SW0BWPLN SW0BWPLN ; 
    15 XRPCD XRPCD ; 
    15 * char(67) ; 
  10 SW0BW13B SW0BW13B ; 
    15 * char(21) ; 
    15 XWHCD2 XWHCD2 ; 
    15 * char(57) ; 
  10 SW0BW13C SW0BW13C ; 
    15 * char(52) ; 
    15 XWHCD3 XWHCD3 ; 
    15 * char(26) ; 
end // end SW0BWP13

//*** RECORD=SW0BWP14 ****
// ----------------------------
// Jcl parms for planned label print
// ----------------------------
// ************************
Record SW0BWP14 type basicRecord
  10 SW0BW14A SW0BW14A ; 
    15 XWHCD XWHCD ; 
    15 SW0BWWOG SW0BWWOG ; 
    15 * num(9) ; 
    15 * num(9) ; 
    15 SW0BMPGN SW0BMPGN ; 
    15 * char(49) ; 
  10 SW0BW14B SW0BW14B ; 
    15 * char(20) ; 
    15 SW0BMPG2 SW0BMPG2 ; 
    15 * char(58) ; 
  10 SW0BW14C SW0BW14C ; 
    15 XWHCD1 XWHCD1 ; 
    15 SW0BWWG2 SW0BWWG2 ; 
    15 SW0BWPLN SW0BWPLN ; 
    15 * char(60) ; 
end // end SW0BWP14

//*** RECORD=SW0BWP2 ****
// ----------------------------
// Jcl parms for lane worksheet
// ----------------------------
// ***********************
Record SW0BWP2 type basicRecord
  10 SW0BWP2A SW0BWP2A ; 
    15 XWHCD XWHCD ; 
    15 SW0BWPLN SW0BWPLN ; 
    15 SW0BWITP SW0BWITP ; 
    15 SW0BWLNF SW0BWLNF ; 
    15 SW0BWLNT SW0BWLNT ; 
    15 * char(59) ; 
  10 SW0BWP2B SW0BWP2B ; 
    15 * char(21) ; 
    15 XWHCD2 XWHCD2 ; 
    15 * char(57) ; 
  10 SW0BWP2C SW0BWP2C ; 
    15 * char(52) ; 
    15 XWHCD3 XWHCD3 ; 
    15 * char(26) ; 
end // end SW0BWP2

//*** RECORD=SW0BWP3 ****
// ----------------------------
// Jcl parms for lane worksheet
// ----------------------------
// ***********************
Record SW0BWP3 type basicRecord
  10 SW0BWP3A SW0BWP3A ; 
    15 XWHCD XWHCD ; 
    15 SW0BWPLN SW0BWPLN ; 
    15 SW0BWITP SW0BWITP ; 
    15 SW0BWLNF SW0BWLNF ; 
    15 SW0BWLNT SW0BWLNT ; 
    15 * char(59) ; 
  10 SW0BWP3B SW0BWP3B ; 
    15 * char(21) ; 
    15 XWHCD2 XWHCD2 ; 
    15 * char(57) ; 
  10 SW0BWP3C SW0BWP3C ; 
    15 * char(52) ; 
    15 XWHCD3 XWHCD3 ; 
    15 * char(26) ; 
end // end SW0BWP3

//*** RECORD=SW0BWP4 ****
// ----------------------------
// Jcl parms for weight/pack factor work sheet
// ----------------------------
// ***********************
Record SW0BWP4 type basicRecord
  10 SW0BWP4A SW0BWP4A ; 
    15 XWHCD XWHCD ; 
    15 SW0BWPLN SW0BWPLN ; 
    15 * char(69) ; 
end // end SW0BWP4

//*** RECORD=SW0BWP5 ****
// ----------------------------
// Jcl parms for blank worksheet
// ----------------------------
// ***********************
Record SW0BWP5 type basicRecord
  10 SW0BWP5A SW0BWP5A ; 
    15 SW0BMQTY SW0BMQTY ; 
    15 * char(1) ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 XGPCD XGPCD ; 
    15 * char(1) ; 
    15 SW0BWPLN SW0BWPLN ; 
    15 * char(1) ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 * char(1) ; 
    15 SW0BWPON SW0BWPON ; 
    15 * char(1) ; 
    15 SWVWPOID SWVWPOID ; 
    15 * char(1) ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 * char(1) ; 
    15 SW0BWIP1 SW0BWIP1 ; 
    15 * char(1) ; 
    15 SW0BWIP2 SW0BWIP2 ; 
    15 * char(12) ; 
end // end SW0BWP5

//*** RECORD=SW0BWP6 ****
// ----------------------------
// Jcl parms for blank worksheet
// ----------------------------
// ***********************
Record SW0BWP6 type basicRecord
  10 SW0BWP6A SW0BWP6A ; 
    15 SW0BMQTY SW0BMQTY ; 
    15 * char(1) ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 XWHABRV XWHABRV ; 
    15 * char(1) ; 
    15 XGPCD XGPCD ; 
    15 * char(1) ; 
    15 SW0BWPLN SW0BWPLN ; 
    15 * char(1) ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 * char(1) ; 
    15 SW0BWPON SW0BWPON ; 
    15 * char(1) ; 
    15 SWVWPOID SWVWPOID ; 
    15 * char(1) ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 * char(9) ; 
end // end SW0BWP6

//*** RECORD=SW0BWP7 ****
// ----------------------------
// Jcl parms for lane worksheet
// ----------------------------
// ***********************
Record SW0BWP7 type basicRecord
  10 SW0BWP7A SW0BWP7A ; 
    15 XWHCD XWHCD ; 
    15 * char(78) ; 
end // end SW0BWP7

//*** RECORD=SW0BWP8 ****
// ------------------------------------------------------------
//        JCL work areas for Plan Reconciliation Reports
// ------------------------------------------------------------
// ***********************
Record SW0BWP8 type basicRecord
  10 SW0BWP8A SW0BWP8A ; 
    15 XWHCD1 XWHCD1 ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 XURUSRNM XURUSRNM ; 
    15 * char(44) ; 
  10 SW0BWP8B SW0BWP8B ; 
    15 * char(21) ; 
    15 XWHCD2 XWHCD2 ; 
    15 * char(57) ; 
  10 SW0BWP8C SW0BWP8C ; 
    15 * char(52) ; 
    15 XWHCD3 XWHCD3 ; 
    15 * char(26) ; 
end // end SW0BWP8

//*** RECORD=SW0BWP9 ****
// ----------------------------
// Jcl parms for lane worksheet
// ----------------------------
// ***********************
Record SW0BWP9 type basicRecord
  10 SW0BWP9A SW0BWP9A ; 
    15 XWHCD XWHCD ; 
    15 SW0BWPLN SW0BWPLN ; 
    15 * char(69) ; 
end // end SW0BWP9

// generation
DataItem SW0BMPG2 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// generation
DataItem SW0BMPGN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of worksheets
DataItem SW0BMQTY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// selection field
DataItem SW0BMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan reports status
DataItem SW0BW13A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan reports status
DataItem SW0BW13B char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan reports status
DataItem SW0BW13C char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan reports status
DataItem SW0BW14A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan reports status
DataItem SW0BW14B char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan reports status
DataItem SW0BW14C char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display flag
DataItem SW0BWDPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   ' - '
DataItem SW0BWDSH char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem SW0BWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms code
DataItem SW0BWFOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SW0BWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL_INSP_NBR1
DataItem SW0BWIP1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL_INSP_NBR2
DataItem SW0BWIP2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inspection type
DataItem SW0BWITP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem SW0BWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SW0BWIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// limit for map fields index
DataItem SW0BWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem SW0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem SW0BWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job identification
DataItem SW0BWJOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of labels
DataItem SW0BWLBL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from lane
DataItem SW0BWLNF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to lane
DataItem SW0BWLNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   'UNKNOWN'
DataItem SW0BWLTR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lane worksheet parm
DataItem SW0BWP2A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lane worksheet parm
DataItem SW0BWP2B char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// notify card
DataItem SW0BWP2C char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lane worksheet parm
DataItem SW0BWP3A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lane worksheet parm
DataItem SW0BWP3B char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// notify card
DataItem SW0BWP3C char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lane worksheet parm
DataItem SW0BWP4A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm for blank work sheet
DataItem SW0BWP5A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lane worksheet parm
DataItem SW0BWP6A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm
DataItem SW0BWP7A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Plan Recon input parm
DataItem SW0BWP8A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Plan Recon symbolic parm
DataItem SW0BWP8B char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Plan Recon dataset name parm
DataItem SW0BWP8C char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// generic labels parm
DataItem SW0BWP9A char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_RCV_PLAN_NBR
DataItem SW0BWPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_NBR
DataItem SW0BWPON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection flag
DataItem SW0BWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spur number
DataItem SW0BWSPR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// exit requested switch
DataItem SW0BWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_WO_GRP_NBR
DataItem SW0BWWG2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL_WO_GRP_NBR
DataItem SW0BWWOG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

