package sw06;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW06 ****
// This application allows a user to delete unexpected carton
// information.
// 
// This CSP online program will delete unexpected carton infor-
// mation from the receiving plan tables and the recepit log
// item table.
// 
// After the user selects what cartons are to be deleted, he/
// she is asked to confirm the request.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      04/15/93  OVAZQU  New application.
// SL00     06/21/93  MPLUTH  Update the SL-CRT-PLAN-WO-FL
//                            to 'N' in the VPLCPO01 table if
//                            unprinted cartons do not exist
//                            for the container/PO.
// tbl chg  03/04/94  Ryonke  Code changes for table changes.
// tsocrtnb 06/20/95  RMORGA  Change tsocrtnb from 4 to 6.
// ASW001   12/29/95  hkempe  Recompiled due to VPLCPO01 table
//                            change.
// *********************
Program SW06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SL1REC SL1REC; // record
  SL2REC SL2REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW06W00 SW06W00; // record
  SW06W01 SW06W01; // record
  SWFREC SWFREC; // record
  SWGREC SWGREC; // record
  SWHREC SWHREC; // record
  SWNREC SWNREC; // record
  SWVREC SWVREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use SW06M.SW06M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW06M001 initial; /* M001 input/output*/
    set SW06W00 empty; /* Working storage*/
    set SW06W01 empty; /* M001 display storage*/
    set SL1REC empty;
    set SL2REC empty;
    set SWFREC empty;
    set SWGREC empty;
    set SWHREC empty;
    set SWNREC empty;
    set SWVREC empty;
    set SLWREC empty;
    set SYPREC empty;
    set TAEREC empty; /* Error diagnosis parameters*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set SQLCA empty; /* SQL communication area*/
    set ERRSQLCA empty; /* SQL communication area*/

    SW06W00.SW06WSWF = "Y"; /* Format the map switch*/
    SW06W00.SW06WSWR = "N"; /* Request for data switch*/

    SW06W01.XWHCD = COMMAREA.XWHCD; /* Warehouse code*/
    SW06M001.XWHCD = COMMAREA.XWHCD; /* Warehouse code*/
    SW06M001.CAITEM = COMMAREA.CAITEM; /* Item*/
    COMMAREA.CAITEM = " "; /* Clear passed data*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW06001; /* Converse the main process*/


    SW06001: SW06001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW06001; /* Converse the main process*/


  end // end main
end // end SW06

// Main process to display a map
Function SW06001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW06100(); /* Obtain the data to display*/

  SW06200(); /* Format and display the map*/

  SW06300(); /* Check attention identifier*/

  SW06400(); /* Reset fields to normal intensity*/

  SW06500(); /* Verify the entered data*/

  SW06600(); /* Process valid input request*/


end // end SW06001

// Obtain the data to display
Function SW06100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW06W00.SW06WSWR != "Y" /* Data was not requested*/
   || SLWREC.SLWMSGNO != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Reset work areas for new data*/
   /* ------------------------------------------------------------*/

  SW06W00.XXXTSPAG = 0; /* Page number to display*/
  SW06W00.TA5TSQIX = 0; /* Max number of pages*/
  SW06W00.SW06WIXM = 1; /* Display line index*/
  SW06W00.XXXTSLEN = 1044; /* Temporary storage page length*/
  set SW06W01 empty; /* Clear work area*/

   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  set SL1REC empty; /* Clear row storage area*/

  SL1REC.XWHCD = SW06W00.XWHCD; /* Warehouse code*/
  SL1REC.SWEPLLNB = SW06W00.SWEPLLNB; /* Plan*/
  SL1REC.TS3CNTNR = SW06W00.TS3CNTNR; /* Container*/

  SW06S05(); /* Select the rlhdr information*/

   /* ------------------------------------------------------------*/
   /* If errors found, get out*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* if an error was found return*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Save header data.*/
   /* ------------------------------------------------------------*/

  SW06M001.XWHCD = SL1REC.XWHCD; /* Warehouse code*/
  SW06W00.XWHCD = SL1REC.XWHCD; /* Warehouse code*/
  SW06M001.TS3CNTNR = SL1REC.TS3CNTNR; /* Container*/
  SW06W00.TS3CNTNR = SL1REC.TS3CNTNR; /* Container*/
  SW06M001.SWEPLLNB = SL1REC.SWEPLLNB; /* Plan*/
  SW06W00.SWEPLLNB = SL1REC.SWEPLLNB; /* Plan*/
  SW06M001.XARCD = SL1REC.XARCD; /* from area code*/
  SW06W00.XARCD = SL1REC.XARCD; /* from area code*/
  SW06M001.SL4ZONE = SL1REC.SL4ZONE; /* from zone code*/
  SW06W00.SL4ZONE = SL1REC.SL4ZONE; /* from zone code*/

   /* ------------------------------------------------------------*/
   /* Prepare key data to read vrlitm01 table.r data requested*/
   /* ------------------------------------------------------------*/

  set SL2REC empty; /* Clear row storage area*/

  SL2REC.XWHCD = SL1REC.XWHCD; /* Warehouse code*/
  SL2REC.TS3CNTNR = SL1REC.TS3CNTNR; /* Container*/
  SL2REC.SWEPLLNB = SL1REC.SWEPLLNB; /* plan nbr*/
  SL2REC.SL8TOAR = " "; /* to area cd*/
  SL2REC.SL8TOZN = " "; /* to zone cd*/
  SL2REC.SL8TOLC = " "; /* to loc cd*/
  if (SW06W00.SL5LOCTN > " ") /* use location if entered on map*/
    SL2REC.SL5LOCTN = SW06W00.SL5LOCTN; /* location*/
  else
    SL2REC.SL5LOCTN = "*"; /* else, wild card the location*/
  end

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SW06S06(); /* Declare and open cursor*/

  SW06S08(); /* Fetch 1st row in the cursor*/

  while (SQLCA.VAGen_SQLCODE == 0) /* Until end of cursor*/

    SW06110(); /* Save data in display storage*/

    SW06W00.SW06WIXM = SW06W00.SW06WIXM + 1; /* Increment line index*/

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SW06W00.SW06WIXM > 13) /* Page is full*/

      SW06S01(); /* Add page to temporary storage*/

      set SW06W01 empty; /* Clear work area*/
      SW06W00.SW06WIXM = 1; /* Display line index*/

    end

    SW06S08(); /* Fetch next row in the cursor*/

  end

   /* ------------------------------------------------------------*/
   /* close the cursor for dstloc.vrlitm01.*/
   /* ------------------------------------------------------------*/

  SW06S09(); /* close the cursor*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SW06W00.SW06WIXM > 1) /* Page was formatted*/

    SW06S01(); /* Add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors were found*/

    if (SW06W00.TA5TSQIX == 0) /* No pages formatted*/

      SLWREC.XXXLOCID = "100"; /* Module identification*/
      converseLib.validationFailed(214); /* No data was found to display*/
      SW06M001.XWHCD = SW06W00.XWHCD; /* whse cd*/
      SW06M001.SWEPLLNB = SW06W00.SWEPLLNB; /* plan nbr*/
      SW06M001.TS3CNTNR = SW06W00.TS3CNTNR; /* container*/
      SW06M001.SL5LOCTN = SW06W00.SL5LOCTN; /* from loc cd*/
      set SW06M001.XWHCD cursor, bold; /* ;/* highlight whse cd*/
      set SW06M001.SWEPLLNB bold; /* highlight plan nbr*/
      set SW06M001.TS3CNTNR bold; /* highlight cntnr*/
      if (SW06W00.SL5LOCTN > " ")
        set SW06M001.SL5LOCTN bold; /* highlight location*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* move 1 to the page number.*/
   /* ------------------------------------------------------------*/

  SW06W00.SW06WSWR = "N"; /* Request for data switch*/
  SW06W00.XXXTSPAG = 1; /* Page number to display*/
  set SW06M001.SW06MSEL[1] cursor;


end // end SW06100

// Save data in display storage
Function SW06110()
   /* ------------------------------------------------------------*/
   /* If first line, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SW06W00.SW06WIXM == 1) /* First line on page*/

    SW06W01.XWHCD = SL1REC.XWHCD; /* Warehouse code*/
    SW06W01.SWEPLLNB = SL1REC.SWEPLLNB; /* Plan number*/
    SW06W01.TS3CNTNR = SL1REC.TS3CNTNR; /* Container*/
    SW06W01.XARCD = SL1REC.XARCD; /* from area*/
    SW06W01.SL4ZONE = SL1REC.SL4ZONE; /* from zone*/
    if (SW06M001.XWHCD in XWHTBL.XWHCD) /* Code in table*/
      SW06W01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    end

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW06W01.PKDNCSQN[SW06WIXM] = SL2REC.PKDNCSQN; /* Carton seq nbr*/
  SW06W00.SL2CASE = SL2REC.SL2CASE; /* case to ws*/
  SW06W01.TSOCRTNB[SW06WIXM] = SW06W00.SW06CASE; /* Carton nbr (case)*/
  SW06W01.PC3PONBR[SW06WIXM] = SL2REC.PC3PONBR; /* po nbr*/
  SW06W01.PC4ORTYP[SW06WIXM] = SL2REC.PC4ORTYP; /* po type code*/
  SW06W01.XGPCD[SW06WIXM] = SL2REC.XGPCD; /* gen prod code*/
  SW06W01.SY1STNBR[SW06WIXM] = SL2REC.SY1STNBR; /* style nbr*/
  SW06W01.SY2CLRID[SW06WIXM] = SL2REC.SY2CLRID; /* color id*/
  SW06W01.XDMCD[SW06WIXM] = SL2REC.XDMCD; /* dimension code*/
  SW06W01.XQACD[SW06WIXM] = SL2REC.XQACD; /* quality code*/
  SW06W01.PC2INSEG[SW06WIXM] = SL2REC.PC2INSEG; /* in seq cd*/
  SW06W01.XEGCD[SW06WIXM] = SL2REC.XEGCD; /* engr diff cd*/
  SW06W01.XSLCD[SW06WIXM] = SL2REC.XSLCD; /* class cd*/
  SW06W01.XPGCD[SW06WIXM] = SL2REC.XPGCD; /* packaging type cd*/
  SW06W01.XUMCD[SW06WIXM] = SL2REC.XUMCD; /* unit of measure code*/
  SW06W01.XOWCD[SW06WIXM] = SL2REC.XOWCD; /* owner group code*/
  SW06W01.SY5SZID[SW06WIXM] = SL2REC.SY5SZID; /* size id*/
  SW06W01.SL2RCVD[SW06WIXM] = SL2REC.SL2RCVD; /* received quantity*/
  SW06W01.SL2PALET[SW06WIXM] = SL2REC.SL2PALET; /* pallet nbr*/
  SW06W01.SL2CASE[SW06WIXM] = SL2REC.SL2CASE; /* case*/

   /* ------------------------------------------------------------*/
   /* Convert the size id to external*/
   /* ------------------------------------------------------------*/

  SW06111(); /* convert size id*/

  if (SYPREC.SYPRC == 0) /* if external size id found*/
    SW06W01.SY4IDDSC[SW06WIXM] = SYPREC.SY4IDDSC; /* size  id*/
  else
    SW06W01.SY4IDDSC[SW06WIXM] = "*NF*"; /* not found*/
  end

   /* ------------------------------------------------------------*/
   /* If not warehouse 51 convert elements into PO ID*/
   /* ------------------------------------------------------------*/

  if (SL2REC.XWHCD == "51")
    SW06W01.SW06WPOI[SW06WIXM] = " "; /* po id*/
  else
    SWVREC.SWVWFNC = "T2";
    SWVREC.XGPCD = SL2REC.XGPCD;
    SWVREC.PC3POIDT = SL2REC.PC3POIDT;
    SWVREC.PCFSECD = SL2REC.PCFSECD;
    SWVREC.FY1FCTYC = SL2REC.FY1FCTYC;
    TA1REC.TA1PGMNM = "SW06"; /* program name*/

    XSSLS10();

    SW06W01.SW06WPOI[SW06WIXM] = SWVREC.SWVWPOID; /* po id*/
  end


end // end SW06110

// translate size subroutine
Function SW06111()
   /* ************************************************************/
   /* *** obtain external size                                ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "IE"; /* external to internal translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/
  SYPREC.XGPCD = SL2REC.XGPCD;
  SYPREC.SY1STNBR = SL2REC.SY1STNBR;
  SYPREC.SY2CLRID = SL2REC.SY2CLRID;
  SYPREC.XDMCD = SL2REC.XDMCD;
  SYPREC.XQACD = SL2REC.XQACD;
  SYPREC.SY5SZID[1] = SL2REC.SY5SZID;

  TA1REC.TA1LOCAT[2] = "SW06111 ";
  TA1REC.TA1MAP = "SW06M001";

  XSSYPI1(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == 02
   || SYPREC.SYPRC == 10)
     /* ** next sentence ***/
  else

    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    else
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    end

    SLWREC.XXXLOCID = "111";

  end


end // end SW06111
// Format & converse sw06m001 map
Function SW06200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If no errors found, format data to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no error found*/
   && SW06W00.SW06WSWF == "Y")          /* Map must be formatted*/

    SW06210(); /* Format the data on the map*/

  end

   /* ------------------------------------------------------------*/
   /* set item attributes.*/
   /* ------------------------------------------------------------*/

  SW06W00.SW06WIXM = 1; /* initialize line index*/

  while (SW06W00.SW06WIXM <= 13) /* until all lines checked*/

    if (SW06M001.PKDNCSQN[SW06WIXM] > 0) /* if data on this line*/

      if (SW06M001.SW06MSEL[SW06WIXM] == "*") /* crtn already processed?*/

        set SW06M001.SW06MSEL[SW06WIXM] skip; /* protect select*/

      else

        if (converseVar.validationMsgNum == 0) /* no error found*/
          set SW06M001.SW06MSEL[SW06WIXM] normal; /* unprotect*/
        end

      end

    else

      set SW06M001.SW06MSEL[SW06WIXM] skip, invisible; /* protect select*/

    end

    SW06W00.SW06WIXM = SW06W00.SW06WIXM + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* Move the current and max pages to the map.*/
   /* ------------------------------------------------------------*/

  SW06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW06M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW06M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  SW06M001.XXXTSPAG = SW06W00.XXXTSPAG; /* current page*/
  SW06M001.TA5TSQIX = SW06W00.TA5TSQIX; /* max nbr of pages*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/
      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW06M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    SW06M001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/
    set SW06M001 alarm; /* Indicate sound alarm*/

  end


  converse SW06M001 ;


   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW06M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW06M001.CAITEM; /* Application data*/


end // end SW06200

// Format the display data
Function SW06210()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  set SW06M001 initial; /* M001 input/output area*/

   /* ------------------------------------------------------------*/
   /* If pages were formated, get current page from temp storage*/
   /* ------------------------------------------------------------*/

  if (SW06W00.TA5TSQIX > 0) /* Pages were formatted*/

    SW06S02(); /* Obtain temporary storage page*/

    SW06211(); /* build items on map from temp storage*/

  else

    SW06M001.XWHCD = SW06W01.XWHCD; /* Warehouse code*/

  end

  SW06W00.SW06WSWF = "N"; /* Format of map is done*/


end // end SW06210

// Build map from temp storage
Function SW06211()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SW06M001.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
  SW06M001.XWHABRV = SW06W01.XWHSABRV; /* Warehouse abbrev.*/
  SW06M001.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan nbr*/
  SW06M001.TS3CNTNR = SW06W01.TS3CNTNR; /* Container*/
  SW06M001.XARCD = SW06W01.XARCD; /* From area*/
  SW06M001.SL4ZONE = SW06W01.SL4ZONE; /* From zone*/
  SW06M001.SL5LOCTN = SW06W00.SL5LOCTN; /* From location*/

  SW06W00.SW06WIXM = 1; /* Initialize line index*/

  while (SW06W00.SW06WIXM <= 13 /* Until screen is full*/
   && SW06W01.XGPCD[SW06WIXM] > " ") /* or end of data*/

    SW06M001.SW06MSEL[SW06WIXM] = SW06W01.SW06MSEL[SW06WIXM];
    SW06M001.PKDNCSQN[SW06WIXM] = SW06W01.PKDNCSQN[SW06WIXM];
    SW06M001.SW06M-TSOCRTNB[SW06WIXM] = 0;
    SW06M001.SW06M-TSOCRTNB[SW06WIXM] = SW06M001.SW06M-TSOCRTNB[SW06WIXM] +   SW06W01.TSOCRTNB[SW06WIXM];
    SW06M001.PC4ORTYP[SW06WIXM] = SW06W01.PC4ORTYP[SW06WIXM];
    SW06M001.XGPCD[SW06WIXM] = SW06W01.XGPCD[SW06WIXM];
    SW06M001.SY1STNBR[SW06WIXM] = SW06W01.SY1STNBR[SW06WIXM];
    SW06M001.SY2CLRID[SW06WIXM] = SW06W01.SY2CLRID[SW06WIXM];
    SW06M001.XDMCD[SW06WIXM] = SW06W01.XDMCD[SW06WIXM];
    SW06M001.XQACD[SW06WIXM] = SW06W01.XQACD[SW06WIXM];
    SW06M001.PC2INSEG[SW06WIXM] = SW06W01.PC2INSEG[SW06WIXM];
    SW06M001.XPGCD[SW06WIXM] = SW06W01.XPGCD[SW06WIXM];
    SW06M001.XUMCD[SW06WIXM] = SW06W01.XUMCD[SW06WIXM];
    SW06M001.XOWCD[SW06WIXM] = SW06W01.XOWCD[SW06WIXM];
    SW06M001.SL2RCVD[SW06WIXM] = SW06W01.SL2RCVD[SW06WIXM];

    if (SW06W01.XWHCD == "51")
      SW06W00.SW06WPON = SW06W01.PC3PONBR[SW06WIXM];
      SW06M001.SW06MPON[SW06WIXM] = SW06W00.SW06WPON;
    else
      SW06M001.SW06MPON[SW06WIXM] = SW06W01.SW06WPOI[SW06WIXM];
    end

   /* IF SW06W01.XGPCD(SW06WIXM) = '03';/* if apparel gpc cd*/
    SW06M001.SY4IDDSC[SW06WIXM] = SW06W01.SY4IDDSC[SW06WIXM];
   /* ELSE;*/
     /* MOVE SW06W01.SY5SZID(SW06WIXM) TO SW06W00.SW06WSID;*/
     /* MOVE SW06W00.SW06WSID TO SW06M001.SY4IDDSC(SW06WIXM);*/
   /* END;*/

    SW06W00.SW06WIXM = SW06W00.SW06WIXM + 1; /* Increment line index*/

  end


end // end SW06211

// Check attention identifier
Function SW06300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SW06W00 empty; /* clear working storage*/
    set SW06W01 empty; /* clear working storage*/
    set SW06M001 initial; /* clear map*/

    SW06W00.XWHCD = COMMAREA.XWHCD; /* warehouse*/
    SW06M001.XWHCD = COMMAREA.XWHCD; /* warehouse*/

    SW06W00.SW06WSWF = "Y"; /* Format the map switch*/
    SW06W00.SW06WSWR = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* to application item*/

    SW06S03(); /* Purge temporary storage*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW06M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = SW06M001.CATOAP; /* Applicaiton to commarea*/

      XSSL001(); /* Exit to another application*/

      set SW06M001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "SW06M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    SW06S03(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    set SW06W01 empty; /* clear working storage*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW06300

// Reset highlighted fields
Function SW06400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW06M001.XWHCD initialAttributes; /* Warehouse cd*/
  set SW06M001.SWEPLLNB initialAttributes; /* Plan nbr*/
  set SW06M001.TS3CNTNR initialAttributes; /* Container*/
  set SW06M001.SL5LOCTN initialAttributes; /* From location*/
  set SW06M001.SW06MCNF initialAttributes; /* confirmation code*/

  SW06W00.SW06WIXM = 1; /* Initialize line index*/

  while (SW06W00.SW06WIXM <= 13 /* Until end of lines*/
   && SW06M001.PKDNCSQN[SW06WIXM] > 0) /* if crtn seq nbr has a value*/

    if (SW06M001.SW06MSEL[SW06WIXM] == "*") /* if crtn has been processed*/
      set SW06M001.SW06MSEL[SW06WIXM] skip; /* protect select*/
    else
      set SW06M001.SW06MSEL[SW06WIXM] normal; /* Reset map select*/
    end

    SW06W00.SW06WIXM = SW06W00.SW06WIXM + 1; /* Increment line index*/

  end

  set SW06M001.CATOAP initialAttributes; /* TO application*/
  set SW06M001.CAITEM initialAttributes; /* Application data*/


end // end SW06400

// Verify data that was entered
Function SW06500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW06M001.CAITEM > " ") /* Application data was entered*/
    set SW06M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Return to top of program if key fields not entered.*/
   /* ------------------------------------------------------------*/

  if (SW06M001.SW06MCNF != " " /* confirmation code*/
   && SW06M001.SW06MCNF != "Y" 
   && SW06M001.SW06MCNF != "N")
    set SW06M001.SW06MCNF cursor, normal; /* allow entry*/
    set SW06M001.SW06MCNF bold; /* bright*/
    converseLib.validationFailed(257); /* must be "y" or "n"*/
  end

  if (SW06M001.TS3CNTNR == " ") /* container*/
    set SW06M001.TS3CNTNR cursor, bold; /* bright*/
    converseLib.validationFailed(9); /* required firld*/
  end

  if (SW06M001.SWEPLLNB == 0) /* plan nbr*/
    set SW06M001.SWEPLLNB cursor, bold; /* bright*/
    converseLib.validationFailed(9); /* required firld*/
  end

  if (SW06M001.XWHCD == " ") /* warehouse code*/
    set SW06M001.XWHCD cursor, bold; /* bright*/
    converseLib.validationFailed(9); /* required firld*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0)

    SLWREC.XXXLOCID = "500"; /* location id*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Return to top of program if data entered.*/
   /* ------------------------------------------------------------*/

  if (SW06M001.XWHCD != SW06W00.XWHCD       /* warehouse code*/
   || SW06M001.SWEPLLNB != SW06W00.SWEPLLNB /* plan nbr*/
   || SW06M001.TS3CNTNR != SW06W00.TS3CNTNR /* container*/
   || SW06M001.SL5LOCTN != SW06W00.SL5LOCTN /* from location*/
   || SW06W00.SW06WSWR == "Y")              /* data not found reload*/

    SW06W00.XWHCD = SW06M001.XWHCD; /* warehouse code*/
    SW06W00.SWEPLLNB = SW06M001.SWEPLLNB; /* plan nbr*/
    SW06W00.TS3CNTNR = SW06M001.TS3CNTNR; /* container*/
    SW06W00.SL5LOCTN = SW06M001.SL5LOCTN; /* from location*/
    SW06W00.XARCD = " "; /* from area*/
    SW06W00.SL4ZONE = " "; /* from zone*/
    SW06W00.SW06WSWR = "Y"; /* request for data switch*/
    SW06W00.SW06WSWF = "Y"; /* format the map switch*/
    SW06W00.XXXTSPAG = 0; /* initialize temp storage page cnt*/
    SW06W00.TA5TSQIX = 0; /* initialize temp storage max # pages*/

    SW06S03(); /* purge temp storage*/

    set SW06W01 empty; /* clear temp storage record*/
    set SW06M001 initial;

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Move the whse, container, etc to working storage.*/
   /* ------------------------------------------------------------*/

  SW06W00.XWHCD = SW06M001.XWHCD; /* warehouse code*/
  SW06W00.SWEPLLNB = SW06M001.SWEPLLNB; /* plan nbr*/
  SW06W00.TS3CNTNR = SW06M001.TS3CNTNR; /* container*/
  SW06W00.SL5LOCTN = SW06M001.SL5LOCTN; /* from location*/

   /* ------------------------------------------------------------*/
   /* If page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (SW06W00.TA5TSQIX > 0) /* Page was formatted*/

    SW06W00.SW06WIXM = 13; /* Initialize line index*/

    while (SW06W00.SW06WIXM > 0) /* Until end of lines*/

      if (SW06M001.SW06MSEL[SW06WIXM] != "S" /* and is not a "S"*/
       && SW06M001.SW06MSEL[SW06WIXM] != " " /* and is not a space*/
       && SW06M001.SW06MSEL[SW06WIXM] != "*") /* and not processed yet*/

        set SW06M001.SW06MSEL[SW06WIXM] cursor, bold; /* Highlight*/
        SLWREC.XXXLOCID = "500"; /* Module identification*/
        converseLib.validationFailed(228); /* Only "S" may be entered*/

      else

        SW06W01.SW06MSEL[SW06WIXM] = SW06M001.SW06MSEL[SW06WIXM];

      end

      SW06W00.SW06WIXM = SW06W00.SW06WIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If no errors were found, update page in temporary sorage*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors*/

    SW06S04(); /* update temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SW06510(); /* Verify scroll request*/

  end


end // end SW06500

// Verify scroll request
Function SW06510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW06M001.XXXTSPAG < 2)      /* and no previous pages*/
    converseLib.validationFailed(7); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW06M001.XXXTSPAG >= SW06W00.TA5TSQIX) /* and no more pages*/
    converseLib.validationFailed(8); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (SW06M001.TS3CNTNR != SW06W01.TS3CNTNR) /* Container changed*/
    set SW06M001.TS3CNTNR cursor, bold; /* Highlight*/
    converseLib.validationFailed(227); /* Field may not change*/
  end

  if (SW06M001.SWEPLLNB != SW06W01.SWEPLLNB) /* Plan nbr changed*/
    set SW06M001.SWEPLLNB cursor, bold; /* Highlight*/
    converseLib.validationFailed(227); /* Field may not change*/
  end

  if (SW06M001.XWHCD != SW06W01.XWHCD) /* Warehouse changed*/
    set SW06M001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(227); /* Field may not change*/
  end

  if (converseVar.validationMsgNum > 0)
    SLWREC.XXXLOCID = "510"; /* Module identification*/
  end


end // end SW06510

// Process valid input request
Function SW06600()
   /* ------------------------------------------------------------*/
   /* Return to previous process if any errors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* if an error was found*/

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If enter is pressed, take action depending on confirmation cd*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter requested*/

    SW06W00.SW06WITF = " "; /* reset items selected flag*/

    SW06610(); /* see if any items selected*/

    if (SW06W00.SW06WITF == "Y") /* items selected*/

      if (SW06M001.SW06MCNF == " ") /* no confirmation yet*/

        SLWREC.SLWMSGNO = 310; /* done, ask for confirmation*/
        set SW06M001.SW06MCNF cursor, normal; /* allow entry*/

      else /* confirmation code entered*/

        SW06W00.SW06WSWF = "Y"; /* Format the map switch*/

        if (SW06M001.SW06MCNF == "Y") /* confirmation*/

          SW06620(); /* delete rows from tables*/

          if (converseVar.validationMsgNum == 0) /* if no error was found*/
            SLWREC.SLWMSGNO = 20; /* request completed*/
          end

        else /* confirmation code = 'n'*/

          SLWREC.SLWMSGNO = 29; /* request cancelled*/

        end

      end

    else /* no cartons selected*/

      converseLib.validationFailed(240); /* select 1 of the lines to submit*/
      SLWREC.XXXLOCID = "600";
      set SW06M001.SW06MSEL[1] cursor; /* set cursor at first select*/

    end

    return; /* return*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll was requested, decrement/increment the page nbr.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* Scroll forward requested*/

    SW06W00.SW06WSWF = "Y"; /* Format the map switch*/

    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      SW06W00.XXXTSPAG = SW06W00.XXXTSPAG - 1; /* Decrement page number*/
    else
      SW06W00.XXXTSPAG = SW06W00.XXXTSPAG + 1; /* Increment page number*/
    end

  end


end // end SW06600

// See if any item selected
Function SW06610()
   /* ------------------------------------------------------------*/
   /* Read thru temp storage from page 1 & see if any items selected*/
   /* ------------------------------------------------------------*/

  SW06W00.SW06WSPG = SW06W00.XXXTSPAG; /* save page nbr*/
  SW06W00.XXXTSPAG = 1; /* set page number to 1*/

  while (SW06W00.XXXTSPAG <= SW06W00.TA5TSQIX /* until no more pages*/
   && SW06W00.SW06WITF == " ") /* or items selected found*/

    SW06S02(); /* read temp storage*/

    if ("S" in SW06W01.SW06MSEL) /* if any cartons selected*/
      SW06W00.SW06WITF = "Y"; /* items selected found*/
    else
      SW06W00.XXXTSPAG = SW06W00.XXXTSPAG + 1; /* increment page number*/
    end

  end

  SW06W00.XXXTSPAG = SW06W00.SW06WSPG; /* reset page nbr*/


end // end SW06610

// Delete items selected
Function SW06620()
   /* ------------------------------------------------------------*/
   /* Read thru temp storage from page 1 for items selected,*/
   /* then, delete corresponding SL Receipt Log Items*/
   /* ------------------------------------------------------------*/

  SW06W00.SW06WSPG = SW06W00.XXXTSPAG; /* save page nbr*/
  SW06W00.XXXTSPAG = 1; /* set page number to 1*/

  while (SW06W00.XXXTSPAG <= SW06W00.TA5TSQIX)

    SW06S02(); /* read temp storage*/

    if ("S" in SW06W01.SW06MSEL) /* if any cartons selected*/

      SW06W00.SW06WIXM = +1; /* set index to +1*/

      while (SW06W00.SW06WIXM <= 13)

        if (SW06W01.SW06MSEL[SW06WIXM] == "S") /* selected*/

          /* ------------------------------------------------------------*/
           /* delete selected item, and flag it as processed ("*").*/
          /* ------------------------------------------------------------*/

          SW06621(); /* delete from vrlitm01 table*/

          if (converseVar.validationMsgNum == 0) /* successful delete*/

            SW06622(); /* delete from vplnsz01/vplnlc01 tbls*/

            SW06623(); /* delete from vplnsy01 table*/

            SW06624(); /* delete from vplcpo01 table*/

            SW06W01.SW06MSEL[SW06WIXM] = "*"; /* item now processed*/

          end

        end

        SW06W00.SW06WIXM = SW06W00.SW06WIXM + 1; /* increment index*/

      end

      SW06S04(); /* update temp storage page*/

    end

    SW06W00.XXXTSPAG = SW06W00.XXXTSPAG + 1; /* increment page number*/

  end

  SW06W00.XXXTSPAG = SW06W00.SW06WSPG; /* reset page nbr*/


end // end SW06620


// Delete from dstloc.vrlitm01
Function SW06621()
   /* ------------------------------------------------------------*/
   /* Delete the individual receving log item from the table*/
   /* ------------------------------------------------------------*/

  set SL2REC empty; /* Clear row storage area*/

  SL2REC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
  SL2REC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
  SL2REC.TS3CNTNR = SW06W01.TS3CNTNR; /* Container*/
  SL2REC.PKDNCSQN = SW06W01.PKDNCSQN[SW06WIXM]; /* crtn seq*/
  SL2REC.SL2PALET = SW06W01.SL2PALET[SW06WIXM]; /* pallet nbr*/
  SL2REC.SL2CASE = SW06W01.SL2CASE[SW06WIXM]; /* rlog case*/
  SL2REC.PC3PONBR = SW06W01.PC3PONBR[SW06WIXM]; /* po nbr*/
  SL2REC.XGPCD = SW06W01.XGPCD[SW06WIXM]; /* gpc cd*/
  SL2REC.SY1STNBR = SW06W01.SY1STNBR[SW06WIXM]; /* style nbr*/
  SL2REC.SY2CLRID = SW06W01.SY2CLRID[SW06WIXM]; /* color*/
  SL2REC.XDMCD = SW06W01.XDMCD[SW06WIXM]; /* dim cd*/
  SL2REC.XQACD = SW06W01.XQACD[SW06WIXM]; /* qual cd*/
  SL2REC.XOWCD = SW06W01.XOWCD[SW06WIXM]; /* own grp cd*/
  SL2REC.PC2INSEG = SW06W01.PC2INSEG[SW06WIXM]; /* iseg cd*/
  SL2REC.XEGCD = SW06W01.XEGCD[SW06WIXM]; /* engr diff cd*/
  SL2REC.XSLCD = SW06W01.XSLCD[SW06WIXM]; /* class cd*/
  SL2REC.XPGCD = SW06W01.XPGCD[SW06WIXM]; /* pkg type cd*/
  SL2REC.XUMCD = SW06W01.XUMCD[SW06WIXM]; /* unit of measure*/
  SL2REC.SY5SZID = SW06W01.SY5SZID[SW06WIXM]; /* size id*/

  SW06S10(); /* delete dstloc.vrlitm01 row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/

    converseLib.validationFailed(115); /* record to delete not found*/
    SLWREC.XXXLOCID = "621";

  end


end // end SW06621
// Delete from vplnsz01/vplnlc01
Function SW06622()
   /* ------------------------------------------------------------*/
   /* First get lane & product seq# from vplnlc01 table*/
   /* ------------------------------------------------------------*/

  SW06W00.SWGPSEQN = 0; /* Prod seq nbr in work area*/
  SW06W00.SWCLNENB = 0; /* lane nbr in work area*/

  set SWHREC empty; /* Clear row storage area*/

  SWHREC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
  SWHREC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
  SWHREC.PKDNCSQN = SW06W01.PKDNCSQN[SW06WIXM]; /* crtn seq*/
  SWHREC.SWGPSEQN = -1; /* Prod seq nbr*/
  SWHREC.SWCLNENB = -1; /* lane nbr*/

  SW06S12(); /* open dstloc.vplnlc01 crsr*/

  SW06S14(); /* fetch dstloc.vplnlc01 crsr*/

  while (SQLCA.VAGen_SQLCODE == 0 /* until end of cursor*/
   && SW06W00.SWGPSEQN == 0    /* or data found*/
   && SW06W00.SWCLNENB == 0)

    /* -----------------------------------------------------------*/
    /* See if data matches what we need.*/
    /* -----------------------------------------------------------*/

    if (SWHREC.TSHCNTNR == SW06W01.TS3CNTNR           /* Container nbr*/
     && SWHREC.XGPCD == SW06W01.XGPCD[SW06WIXM]       /* gen prod code*/
     && SWHREC.PC3PONBR == SW06W01.PC3PONBR[SW06WIXM] /* po nbr*/
     && SWHREC.TSOCRTNB == SW06W01.TSOCRTNB[SW06WIXM] /* Carton nbr*/
     && SWHREC.SL2PALET == SW06W01.SL2PALET[SW06WIXM]) /* pallet*/

      SW06W00.SWGPSEQN = SWHREC.SWGPSEQN; /* Prod seq nbr*/
      SW06W00.SWCLNENB = SWHREC.SWCLNENB; /* lane nbr*/

    else

      SW06S14(); /* fetch next dstloc.vplnlc01 crsr*/

    end

  end

  SW06S15(); /* close dstloc.vplnlc01 crsr*/


   /* ------------------------------------------------------------*/
   /* delete the individual plan size from the table*/
   /* ------------------------------------------------------------*/

  set SWNREC empty; /* Clear row storage area*/

  SWNREC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
  SWNREC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
  SWNREC.PKDNCSQN = SW06W01.PKDNCSQN[SW06WIXM]; /* crtn seq*/
  SWNREC.SY5SZID = SW06W01.SY5SZID[SW06WIXM]; /* size id*/
  SWNREC.SWGPSEQN = SW06W00.SWGPSEQN; /* Prod seq nbr*/
  SWNREC.SWCLNENB = SW06W00.SWCLNENB; /* lane nbr*/

  SW06S11(); /* delete dstloc.vplnsz01 row*/


   /* ------------------------------------------------------------*/
   /* Delete the individual plan lane/carton from the table*/
   /* ------------------------------------------------------------*/

  set SWHREC empty; /* Clear row storage area*/

  SWHREC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
  SWHREC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
  SWHREC.TSHCNTNR = SW06W01.TS3CNTNR; /* Container*/
  SWHREC.XGPCD = SW06W01.XGPCD[SW06WIXM]; /* gpc code*/
  SWHREC.PC3PONBR = SW06W01.PC3PONBR[SW06WIXM]; /* po nbr*/
  SWHREC.PKDNCSQN = SW06W01.PKDNCSQN[SW06WIXM]; /* crtn seq*/
  SWHREC.SWGPSEQN = SW06W00.SWGPSEQN; /* Prod seq nbr*/
  SWHREC.SWCLNENB = SW06W00.SWCLNENB; /* lane nbr*/

  SW06S16(); /* delete dstloc.vplnlc01 row*/


end // end SW06622

// Delete from dstloc.vplnsy01
Function SW06623()
   /* ------------------------------------------------------------*/
   /* See if any lane/carton rows left for product.*/
   /* ------------------------------------------------------------*/

  set SWHREC empty; /* Clear row storage area*/

  SWHREC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
  SWHREC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
  SWHREC.SWGPSEQN = SW06W00.SWGPSEQN; /* Prod seq nbr*/
  SWHREC.SWCLNENB = -1; /* lane nbr*/
  SWHREC.PKDNCSQN = -1; /* crtn seq*/

  SW06S12(); /* open dstloc.vplnlc01 csr*/

  SW06S14(); /* fetch dstloc.vplnlc01 csr*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no data found*/

    /* ------------------------------------------------------------*/
    /* Delete the individual plan product from the table*/
    /* ------------------------------------------------------------*/

    set SWGREC empty; /* Clear row storage area*/

    SWGREC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
    SWGREC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
    SWGREC.SWGPSEQN = SW06W00.SWGPSEQN; /* Prod seq nbr*/

    SW06S21(); /* delete dstloc.vplnsy01 row*/

  end

  SW06S15(); /* close dstloc.vplnlc01 csr*/


end // end SW06623

// delete from dstloc.vplcpo01
Function SW06624()
   /* ------------------------------------------------------------*/
   /* See if any product rows left for container/po.*/
   /* ------------------------------------------------------------*/

  set SWGREC empty; /* Clear row storage area*/

  SWGREC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
  SWGREC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
  SWGREC.TSHCNTNR = SW06W01.TS3CNTNR; /* Container*/
  SWGREC.XGPCD = SW06W01.XGPCD[SW06WIXM]; /* gpc code*/
  SWGREC.PC3PONBR = SW06W01.PC3PONBR[SW06WIXM]; /* po nbr*/

  SW06S17(); /* open dstloc.vplnsy01 csr*/

  SW06S19(); /* fetch dstloc.vplnsy01 csr*/

  if (SQLCA.VAGen_SQLCODE == 0) /* data found*/
    SW06630(); /* check to reset the SL-CRT-PLAN-WO-FL*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no data found*/

    /* ------------------------------------------------------------*/
    /* Delete the individual plan container/po from the table*/
    /* ------------------------------------------------------------*/

      set SWFREC empty; /* Clear row storage area*/

      SWFREC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
      SWFREC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
      SWFREC.TSHCNTNR = SW06W01.TS3CNTNR; /* Container*/
      SWFREC.XGPCD = SW06W01.XGPCD[SW06WIXM]; /* gpc code*/
      SWFREC.PC3PONBR = SW06W01.PC3PONBR[SW06WIXM]; /* po nbr*/

      SW06S22(); /* delete dstloc.vplcpo01 row*/

    end
  end

  SW06S20(); /* close dstloc.vplnsy01 csr*/


end // end SW06624

// check SL-CRT-PLAN-WO-FL update
Function SW06630()
   /* ------------------------------------------------------------*/
   /* See if any product rows left for container/po.*/
   /* ------------------------------------------------------------*/

  set SL2REC empty; /* Clear row storage area*/

  SL2REC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
  SL2REC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
  SL2REC.TS3CNTNR = SW06W01.TS3CNTNR; /* Container*/
  SL2REC.XGPCD = SW06W01.XGPCD[SW06WIXM]; /* gpc code*/
  SL2REC.PC3PONBR = SW06W01.PC3PONBR[SW06WIXM]; /* po nbr*/
  SL2REC.SL8TOAR = "  "; /* xar-area-cd*/
  SL2REC.SL8TOZN = "  "; /* sl-zone-cd*/
  SL2REC.SL8TOLC = "      "; /* sl-loc-cd*/

  SW06S25(); /* open dstloc.vrlitm01 csr*/

  SW06S30(); /* fetch dstloc.vrlitm01 csr*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no data found*/

    /* ------------------------------------------------------------*/
    /* Delete the individual plan container/po from the table*/
    /* ------------------------------------------------------------*/

    set SWFREC empty; /* Clear row storage area*/

    SWFREC.XWHCD = SW06W01.XWHCD; /* Warehouse code*/
    SWFREC.SWEPLLNB = SW06W01.SWEPLLNB; /* Plan number*/
    SWFREC.TSHCNTNR = SW06W01.TS3CNTNR; /* Container*/
    SWFREC.XGPCD = SW06W01.XGPCD[SW06WIXM]; /* gpc code*/
    SWFREC.PC3PONBR = SW06W01.PC3PONBR[SW06WIXM]; /* po nbr*/

    SW06S40(); /* select the dstloc.vplcpo01 row*/

    SWFREC.SWFCPWOF = "N"; /* sl-crt-plan-wo-fl*/

    SW06S45(); /* update the dstloc.vplcpo01 row*/

  end

  SW06S35(); /* close dstloc.vplnsy01 csr*/


end // end SW06630

// Add page to temporary storage
Function SW06S01()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW06W01.XXXTSLEN = SW06W00.XXXTSLEN;
                                   /* set temp storage page length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SW06W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S01

// Read temporary storage page
Function SW06S02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW06W01.XXXTSLEN = SW06W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SW06W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02 "; /* Module identification*/
  SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S02

// Purge temporary storage
Function SW06S03()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW06W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/
  SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S03

// Update temporary storage page
Function SW06S04()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = SW06W00.XXXTSPAG; /* page nbr*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S04 "; /* Module identification*/
  SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S04

// select from vrlhdr01 tbl
Function SW06S05()
   /* ------------------------------------------------------------*/
   /* Select the requested row from dstloc.vrlhdr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1570" ("SA", SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        SW06M001.XWHCD = SW06W00.XWHCD; /* whse cd*/
        SW06M001.SWEPLLNB = SW06W00.SWEPLLNB; /* plan nbr*/
        SW06M001.TS3CNTNR = SW06W00.TS3CNTNR; /* container*/
        SW06M001.SL5LOCTN = SW06W00.SL5LOCTN; /* from loc cd*/
        set SW06M001.XWHCD cursor, bold; /* highlight warehouse*/
        set SW06M001.SWEPLLNB bold;
        set SW06M001.TS3CNTNR bold;
        if (SW06M001.SL5LOCTN > " ")
          set SW06M001.SL5LOCTN bold;
        end
        SLWREC.XXXLOCID = "S05"; /* module identification*/
        converseLib.validationFailed(12); /* Recv. log hdr not found*/

        return; /* Return to previous process*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    SLWREC.SLWMSGNO = 31; /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 1; /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S05

// declare vrlitm01 csr
Function SW06S06()
   /* ------------------------------------------------------------*/
   /* Declare/open cursor for DSTLOC.VRLITM01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("SA", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  SLWREC.XXXLOCID = "S06"; /* module identification*/
  TA1REC.TA1LOC = "DECLARE CURSOR FOR TABLE";

  SW06S07(); /* error routine*/


end // end SW06S06

// error routine for vrlitm01
Function SW06S07()
   /* ------------------------------------------------------------*/
   /* Error for dstloc.vrlitm01.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Data base view*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S07

// fetch next row vrlitm01 csr
Function SW06S08()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from DSTLOC.VRLITM01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("NA", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

  SLWREC.XXXLOCID = "S08"; /* Module identification*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";

  SW06S07(); /* Error routine*/


end // end SW06S08

// close vrlitm01 csr
Function SW06S09()
   /* ------------------------------------------------------------*/
   /* Close the cursor for DSTLOC.VRLITM01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("CA", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  SLWREC.XXXLOCID = "S09"; /* Module identification*/
  TA1REC.TA1LOC = "CLOSE THE CURSOR";

  SW06S07(); /* Error routine*/


end // end SW06S09

// delete row from vrlitm01
Function SW06S10()
   /* ------------------------------------------------------------*/
   /* delete the receiving log item.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("D2", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
     || SQLCA.VAGen_SQLCODE == 100) /* not foundl*/

      return; /* get out*/

    end

  end

  SLWREC.XXXLOCID = "S10"; /* module identification*/
  TA1REC.TA1LOC = "DELETE UNIQUE RL LOG ITEM"; /* LOC*/

  SW06S07(); /* common error routine*/


end // end SW06S10

// delete row from vplnsz01
Function SW06S11()
   /* ------------------------------------------------------------*/
   /* delete the plan size row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5380" ("D ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return; /* get out*/

    end

  end

  SLWREC.XXXLOCID = "S11"; /* module identification*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE UNIQUE PLAN SIZE"; /* LOC*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Data base view*/
  TA1REC.TA1TBLKE = SWNREC.SWNGROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S11

// declare vplnlc01 csr
Function SW06S12()
   /* ------------------------------------------------------------*/
   /* Declare/open cursor for DSTLOC.VPLNLC01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5360" ("S1", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  SLWREC.XXXLOCID = "S12"; /* module identification*/
  TA1REC.TA1LOC = "DECLARE CURSOR FOR TABLE";

  SW06S13(); /* error routine*/


end // end SW06S12

// dstloc.vplnlc01 error routine
Function SW06S13()
   /* ------------------------------------------------------------*/
   /* error routine for dstloc.vplnlc01 table.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Data base view*/
  TA1REC.TA1TBLKE = SWHREC.SWHGROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S13

// fetch next row vplnlc01 csr
Function SW06S14()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from DSTLOC.VPLNLC01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5360" ("N1", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

  SLWREC.XXXLOCID = "S14"; /* Module identification*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";

  SW06S13(); /* Error routine*/


end // end SW06S14

// close vplnlc01 csr
Function SW06S15()
   /* ------------------------------------------------------------*/
   /* Close the cursor for DSTLOC.VPLNLC01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5360" ("C1", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  SLWREC.XXXLOCID = "S15"; /* Module identification*/
  TA1REC.TA1LOC = "CLOSE THE CURSOR";

  SW06S13(); /* Error routine*/


end // end SW06S15

// delete row from vplnlc01
Function SW06S16()
   /* ------------------------------------------------------------*/
   /* delete the plan lane carton row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5360" ("D ", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return; /* get out*/

    end

  end

  SLWREC.XXXLOCID = "S16"; /* module identification*/
  TA1REC.TA1LOC = "DELETE UNIQUE PLAN LANE/CRTN"; /* LOC*/

   /* error routine*/
  SW06S13();

end // end SW06S16

// declare vplnsy01 csr
Function SW06S17()
   /* ------------------------------------------------------------*/
   /* Declare/open cursor for DSTLOC.VPLNSY01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("S1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  SLWREC.XXXLOCID = "S17"; /* module identification*/
  TA1REC.TA1LOC = "DECLARE CURSOR FOR TABLE";

  SW06S18(); /* error routine*/


end // end SW06S17
// dstloc.vplnsy01 error routine
Function SW06S18()
   /* ------------------------------------------------------------*/
   /* dstloc.vplnsy01 error routine.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Data base view*/
  TA1REC.TA1TBLKE = SWGREC.SWGGROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S18

// fetch next row vplnsy01 csr
Function SW06S19()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from DSTLOC.VPLNSY01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("N1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

  SLWREC.XXXLOCID = "S19"; /* Module identification*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";

  SW06S18(); /* Error routine*/


end // end SW06S19

// close vplnsy01 csr
Function SW06S20()
   /* ------------------------------------------------------------*/
   /* Close the cursor for DSTLOC.VPLNSY01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("C1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  SLWREC.XXXLOCID = "S20"; /* Module identification*/
  TA1REC.TA1LOC = "CLOSE THE CURSOR";

  SW06S18(); /* Error routine*/


end // end SW06S20

// delete row from vplnsy01
Function SW06S21()
   /* ------------------------------------------------------------*/
   /* delete the plan product row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("D ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return; /* get out*/

    end

  end

  SLWREC.XXXLOCID = "S21"; /* module identification*/
  TA1REC.TA1LOC = "DELETE UNIQUE PLAN PRODUCT"; /* LOC*/

  SW06S18(); /* error routine*/


end // end SW06S21

// delete row from vplcpo01
Function SW06S22()
   /* ------------------------------------------------------------*/
   /* delete the plan container/po row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("D ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return; /* get out*/

    end

  end

  SLWREC.XXXLOCID = "S22"; /* module identification*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE UNIQUE PLAN CNTNR/PO"; /* LOC*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Data base view*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S22

// declare vrlitm01 csr
Function SW06S25()
   /* ------------------------------------------------------------*/
   /* Declare/open cursor for DSTLOC.VRLITM01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("SE", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  SLWREC.XXXLOCID = "S25"; /* module identification*/
  TA1REC.TA1LOC = "DECLARE CURSOR FOR TABLE";

  SW06S26(); /* error routine*/


end // end SW06S25

// dstloc.vrlitm01 error routine
Function SW06S26()
   /* ------------------------------------------------------------*/
   /* dstloc.vplnsy01 error routine.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Data base view*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S26
// fetch next row vrlitm01 csr
Function SW06S30()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from DSTLOC.VRLITM01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("NE", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

  SLWREC.XXXLOCID = "S30"; /* Module identification*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";

  SW06S26(); /* Error routine*/


end // end SW06S30

// close vrlitm01 csr
Function SW06S35()
   /* ------------------------------------------------------------*/
   /* Close the cursor for DSTLOC.VRLITM01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("CE", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  SLWREC.XXXLOCID = "S35"; /* Module identification*/
  TA1REC.TA1LOC = "CLOSE THE CURSOR";

  SW06S26(); /* Error routine*/


end // end SW06S35

// select row from vplcpo01
Function SW06S40()
   /* ------------------------------------------------------------*/
   /* select the plan container/po row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* select*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return; /* get out*/

    end

  end

  SLWREC.XXXLOCID = "S40"; /* module identification*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PLAN CNTNR/PO"; /* LOC*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Data base view*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S40

// update row in vplcpo01
Function SW06S45()
   /* ------------------------------------------------------------*/
   /* update the plan container/po row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("U ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* successful*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return; /* get out*/

    end

  end

  SLWREC.XXXLOCID = "S45"; /* module identification*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE UNIQUE PLAN CNTNR/PO"; /* LOC*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Data base view*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW06S45

//*** RECORD=SW06W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW06W00 type basicRecord
  10 SW06WIXM SW06WIXM ; 
  10 SW06WSWF SW06WSWF ; 
  10 SW06WSWR SW06WSWR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 SW06WSPG SW06WSPG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SW06WITF SW06WITF ; 
  10 XWHCD XWHCD ; 
  10 XWHSABRV XWHSABRV ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 TS3CNTNR TS3CNTNR ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SW06WSID SW06WSID ; 
  10 SW06WPOI SW06WPOI ; 
  10 SW06WPON SW06WPON ; 
  10 SWGPSEQN SWGPSEQN ; 
  10 SWCLNENB SWCLNENB ; 
  10 SL2CASE SL2CASE ; 
    15 * char(4) ; 
    15 SW06CASE SW06CASE ; 
end // end SW06W00

//*** RECORD=SW06W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SW06W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1044) ; 
    10 XWHCD XWHCD ; 
    10 XWHSABRV XWHSABRV ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 TS3CNTNR TS3CNTNR ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 * char(78) [13] ; // receiving log item info
      15 SW06MSEL SW06MSEL ; 
      15 PKDNCSQN PKDNCSQN ; 
      15 TSOCRTNB TSOCRTNB ; 
      15 PC3PONBR PC3PONBR ; 
      15 SW06WPOI SW06WPOI ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XEGCD XEGCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XOWCD XOWCD ; 
      15 SY5SZID SY5SZID ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 SL2RCVD SL2RCVD ; 
      15 XSLCD XSLCD ; 
      15 SL2PALET SL2PALET ; 
      15 SL2CASE SL2CASE ; 
end // end SW06W01

//   case's last 4 digits
DataItem SW06CASE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection input field
DataItem SW06MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first carton work order flag
DataItem SW06WITF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SW06WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem SW06WPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po nbr
DataItem SW06WPON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// size id unpacked
DataItem SW06WSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save temporary storage page
DataItem SW06WSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW06WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW06WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

