package sw0n;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0N ****
// This program will be used to enter the Inspection History on
// the Stock Locate "receiving plan" database.
// 
// After the user enters the task code information, and hits
// the enter key, the program will update the task code table.
// If there are more products for the carton sequence number,
// the program will advance to the next product.  If it is the
// last product for the carton sequence number, the user will
// see a message stating this fact.
// 
// From this map, the user will be able to use designated PF
// keys, to view the error code descriptions, view the next
// sequential product, exit to the Inspection, Stock Locate,
// or the Master menu, exit to the previous screen, cancel or
// select Help.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      10/17/90  FWALKE  New application.
// fix      01/07/90  jcarey  -Inspection date now required.
//                            Do not default date
//                            -Existing task codes should be
//                            protected. Updated through a
//                            maintenance screen
//                            -Rearrange the detail records
//                            to task code/task err cd/qty.
//                            -Add life cycle (LC) to the
//                            screen. Code not inserted at
//                            this time.
//                            -Rearrange the screen layout
//                            to read;
//                              QL: xx   LC: xx    OG: xx
//                             PKG: xx  UOM: xx   SLC: xxx
//                            OWN changed to OG and QLC changed
//                            to QL
//                            -Move insp date after CRTN SEQ NO
//                            -Move work order to the right
//                            -Move insp min to the left
//                            -Change inspector id to _._____
//                            where the first field is the
//                            inspector's first inital and
//                            the second field is the last
//                            name, characters 1-5
//                            -Put cursor on 1st blank field
//                            when initially entering screen
//                            -After a successful data pull,
//                            put the cursor on the carton
//                            the detail task codes, not new
//                            products
//                            -PF14, next product was not
//                            functioning
//                            -Deleted the paging code used
//                            with PF14
//                            -Changed the error codes to
//                            numeric and eliminated code 0
//                            fill for comparisons
//                            -Added code to update SLWREC
//                            before leaving
//                            -Validate crtn to plan nbr.
//                            If the XRP_Plan_Stat_Cd is not
//                            RC, no update are allowed
// TBL CHGS 2/13/91 cengel SW0N160, SW0N161, SW0N181, SW0N340,
//                         SW0N411, SW0N621, SW0N622, SW0N623 &
//                         SW0N625 were modified as a result
//                         of scheduled table changes which
//                         affected data items in SWIREC and
//                         SWOREC.
// MAINT   01/31/92 GRAY   INITIALIZE RECORDS AND MAPS.
// sl#0    03/31/92 ryonke modify program to accept new record
//                         definition of swzrec.
// sl365   09/28/93 GRAY   recompile for SLWREC chg.
// maint   01/14/97 dmays  increase plan number on screen to 9.
// Y2KFIX  02/03/98 MBURLE Changed map field SW0NMIYY to Not
//                         zero suppress.
// *********************
Program SW0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0NW01 SW0NW01; // record
  SW0NW02 SW0NW02; // record
  SW0NW03 SW0NW03; // record
  SW0NW04 SW0NW04; // record
  SWEREC SWEREC; // record
  SWGREC SWGREC; // record
  SWHREC SWHREC; // record
  SWIREC SWIREC; // record
  SWOREC SWOREC; // record
  SWVREC SWVREC; // record
  SWXREC SWXREC; // record
  SWYREC SWYREC; // record
  SWZREC SWZREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use SW0NM.SW0NM001,  // forms
      SW0NM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0NM001 initial; /* M001 input/output*/
    set XX0XM001 initial;
    set SW0NW01 empty; /* Working storage*/
    set SW0NW02 empty; /* M001 display storage*/
    set SW0NW03 empty; /* Comparison keys*/
    set SW0NW04 empty;
    set SWEREC empty;
    set SWGREC empty;
    set SWHREC empty;
    set SWIREC empty;
    set SWOREC empty;
    set SWVREC empty;
    set SWXREC empty;
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Error diagnosis parameters*/
    set TA5REC empty;
    set XPCREC empty;
    set SWYREC empty;
    set SWZREC empty;
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Date/time subroutine parameters*/

    SW0NW01.SW0NWSWF = "Y"; /* Format the map switch*/
    SW0NW01.SW0NWSWR = "N"; /* Request for data switch*/
    SW0NW01.SW0NWFTM = "Y"; /* First time flag*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.XWHCD > " ") /* warehouse was passed*/

      SW0NW01.XWHCD = COMMAREA.XWHCD; /* warehouse code*/

      COMMAREA.CAITEM = " "; /* Clear application data*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0N001; /* Converse the main process*/


    SW0N001: SW0N001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0N001; /* Converse the main process*/


  end // end main
end // end SW0N

// Main Processing for SW0N
Function SW0N001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  SW0N100(); /* Obtain the data to display*/

  SW0N200(); /* Format and display the map*/

  SW0N300(); /* Check attention identifier*/

  SW0N400(); /* Reset fields to normal intensity*/

  SW0N500(); /* Verify the entered data*/

  SW0N600(); /* Process valid input request*/


end // end SW0N001

// Obtain the data to display
Function SW0N100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0NW01.SW0NWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  set SW0NW02 empty;

  SW0NW01.XWHCD = SW0NM001.XWHCD;
  SW0NW01.PKDNCSQN = SW0NM001.PKDNCSQN;
  SW0NW01.SW0NMINT = SW0NM001.SW0NMINT;
  SW0NW01.SW0NMLNM = SW0NM001.SW0NMLNM;
  SW0NW01.SWHAINMM = SW0NM001.SWHAINMM;
  SW0NW01.SW0NWIYY = SW0NM001.SW0NMIYY;
  SW0NW01.SW0NWIMM = SW0NM001.SW0NMIMM;
  SW0NW01.SW0NWIDD = SW0NM001.SW0NMIDD;


  SW0N120(); /* select vplnlc01*/

   /* ---------------------------------------------------*/
   /* Build Product Carton Table*/
   /* ---------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* flush forward to the current record on screen. the key*/
   /* we're giving is not unique so when the record is retrieved*/
   /* we'll store a unique key in the sw0nw03 record. when the*/
   /* keys equal, we're repositioned on the current map record*/
   /* -----------------------------------------------------------*/

  if (SW0NW01.SW0NWP14 == "Y")

    SW0NW01.SW0NWCMP = "N"; /* set compare flag*/

    while (SW0NW01.SW0NWCMP == "N")

      SW0N130();

      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(1);
        SLWREC.XXXLOCID = "100";
        return;
      end
      if (SWHREC.XWHCD == SW0NW03.XWHCD
       && SWHREC.SWEPLLNB == SW0NW03.SWEPLLNB
       && SWHREC.TSHCNTNR == SW0NW03.TSHCNTNR
       && SWHREC.XGPCD == SW0NW03.XGPCD
       && SWHREC.PC3PONBR == SW0NW03.PC3PONBR
       && SWHREC.SWGPSEQN == SW0NW03.SWGPSEQN
       && SWHREC.SWCLNENB == SW0NW03.SWCLNENB
       && SWHREC.PKDNCSQN == SW0NW03.PKDNCSQN)

        SW0NWCMP = "Y"; /* record match found*/
      end
    end
  end

  SW0N130(); /* get next product*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no more*/
    if (SW0NW01.SW0NWP14 == "Y")
      converseLib.validationFailed(344);
      SLWREC.XXXLOCID = "100";
      SW0NW01.SW0NWP14 = "N";
      set SW0NM001.PKDNCSQN cursor;
    else
      SLWREC.XXXLOCID = "100";
      converseLib.validationFailed(201);
      set SW0NM001.PKDNCSQN cursor;
    end
    return;
  end

  SW0N131(); /* move swojw01*/

  SW0N132(); /* close vplnlc01*/

  SW0N133(); /* verify plan status vplnhd01*/

  if (SW0NW02.SW0NWRCF == "Y") /* not a valid status*/
    SW0NW02.SW0NWIX3 = 1;
    SW0NW02.SW0NWMX2 = 020;
    while (SW0NW02.SW0NWIX3 <= SW0NW02.SW0NWMX2)

      SW0NW02.SW0NWPCT[SW0NWIX3] = "Y";

      SW0NW02.SW0NWIX3 = SW0NW02.SW0NWIX3 + 1;

    end
  end

  SW0N140(); /* process for po information*/

  SW0N144(); /* move swgrec to w/s*/

  SW0N150(); /* process for detail data*/

  SW0N160(); /* process for detail data*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0NW01.SW0NWSWR = "N"; /* Request for data switch*/
  SW0NW01.CACHGFL = "Y"; /* There is data to display*/

  if (converseVar.validationMsgNum == 0)
    SW0NW01.SW0NWSWF = "Y"; /* Format the screen*/
  else
    SW0NW01.XWHCD = " "; /* reinitialize warehouse*/
    SW0NW01.PKDNCSQN = 0; /* reinitialize container*/
  end


end // end SW0N100

// declare vplnlc01 cursor
Function SW0N120()
   /* ------------------------------------------------------------*/
   /* Declare the vplnlc01 cursor*/
   /* ------------------------------------------------------------*/

  set SWXREC empty; /* Clear row storage area*/
  set SWHREC empty; /* Clear row storage area*/
  SWXREC.SWXFUNCD = "S3";
  SWHREC.XWHCD = SW0NW01.XWHCD; /* warehouse code*/
  SWHREC.PKDNCSQN = SW0NW01.PKDNCSQN; /* carton seq nbr*/

  try
    call "IO5360" ("S3", SQLCA, SWHREC, SWXREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      SLWREC.XXXLOCID = "120"; /* module identification*/
      converseLib.validationFailed(201); /* carton seq nbr not found*/
      set SW0NM001.PKDNCSQN cursor, bold;

      exit stack; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N120

// fetch vplnlc01 row
Function SW0N130()
   /* ------------------------------------------------------------*/
   /* Fetch the vplnlc01 row*/
   /* ------------------------------------------------------------*/

  SWXREC.SWXFUNCD = "N3";

  try
    call "IO5360" ("N3", SQLCA, SWHREC, SWXREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      SW0NW01.SW0NWES3 = "Y"; /* Move end of set to indicator*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N130

// move swhrec items to sw0jw01
Function SW0N131()
   /* ------------------------------------------------------------*/
   /* move swhrec items to sw0nw02*/
   /* ------------------------------------------------------------*/

  SW0NW02.XWHCD = SWHREC.XWHCD;
  SW0NW02.PKDNCSQN = SWHREC.PKDNCSQN;
  SW0NW01.XGPCD = SWHREC.XGPCD;
  SW0NW02.XGPCD = SWHREC.XGPCD;
  SW0NW02.SWEPLLNB = SWHREC.SWEPLLNB;
  SW0NW01.SWEPLLNB = SWHREC.SWEPLLNB;

  SW0NW02.SW0NWIDT = SWHREC.SWJINSDT;
  SW0NW01.SW0NWIDT = SWHREC.SWJINSDT;

  SW0NW02.XXXUSRID = SWHREC.XXXUSRID;
  SW0NW01.XXXUSRID = SWHREC.XXXUSRID;

  SW0NW02.SWHAINMM = SWHREC.SWHAINMM;
  SW0NW01.SWHAINMM = SWHREC.SWHAINMM;

  SW0NW02.SWAINSTP = SWHREC.SWAINSTP;
  SW0NW02.SL8WONBR = SWHREC.SL8WONBR;
  SW0NW02.TSHCNTNR = SWHREC.TSHCNTNR;
  SW0NW02.PC3PONBR = SWHREC.PC3PONBR;
  SW0NW02.SWGPSEQN = SWHREC.SWGPSEQN;
  SW0NW02.SWCLNENB = SWHREC.SWCLNENB;
  SW0NW02.SWHCRTUN = SWHREC.SWHCRTUN;

  SW0NW03.XWHCD = SWHREC.XWHCD;
  SW0NW03.SWEPLLNB = SWHREC.SWEPLLNB;
  SW0NW03.TSHCNTNR = SWHREC.TSHCNTNR;
  SW0NW03.XGPCD = SWHREC.XGPCD;
  SW0NW03.PC3PONBR = SWHREC.PC3PONBR;
  SW0NW03.SWGPSEQN = SWHREC.SWGPSEQN;
  SW0NW03.SWCLNENB = SWHREC.SWCLNENB;
  SW0NW03.PKDNCSQN = SWHREC.PKDNCSQN;

end // end SW0N131

// close vplnlc01 csr
Function SW0N132()
   /* ------------------------------------------------------------*/
   /* close the vplnlc01 row*/
   /* ------------------------------------------------------------*/

  SWXREC.SWXFUNCD = "C3";

  try
    call "IO5360" ("C3", SQLCA, SWHREC, SWXREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "132"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N132

// select unique vplnhd01
Function SW0N133()
   /* ------------------------------------------------------------*/
   /* select unique on vplnhd01*/
   /* ------------------------------------------------------------*/

  set SWEREC empty;

  SWEREC.XWHCD = SWHREC.XWHCD;
  SWEREC.SWEPLLNB = SWHREC.SWEPLLNB;

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, check for a receiving status*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (SWEREC.XRPCD != "RC") /* not receiving status*/
        SW0NW02.SW0NWRCF = "Y"; /* set receiving flag to yes*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "133"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N133

// select vplsy01
Function SW0N140()
   /* ------------------------------------------------------------*/
   /* select set vplnsy01*/
   /* ------------------------------------------------------------*/

  set SWGREC empty; /* Clear row storage area*/
  SWGREC.XWHCD = SW0NW01.XWHCD; /* warehouse code*/
  SWGREC.SWEPLLNB = SW0NW01.SWEPLLNB; /* receive plan number*/
  SWGREC.SWGPSEQN = SW0NW02.SWGPSEQN; /* sequence number*/

  try
    call "IO5370" ("S ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100)

      set SW0NM001.PKDNCSQN cursor, bold;
      converseLib.validationFailed(1);
      SLWREC.XXXLOCID = "140";

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N140

// move swgrec to working storage
Function SW0N144()
  SW0NW02.SY1STNBR = SWGREC.SY1STNBR;
  SW0NW02.SY2CLRID = SWGREC.SY2CLRID;
  SW0NW02.XDMCD = SWGREC.XDMCD;
  SW0NW02.XQACD = SWGREC.XQACD;
  SW0NW02.XOWCD = SWGREC.XOWCD;
  SW0NW02.PC2INSEG = SWGREC.PC2INSEG;
  SW0NW02.XEGCD = SWGREC.XEGCD;
  SW0NW02.XPGCD = SWGREC.XPGCD;
  SW0NW02.XUMCD = SWGREC.XUMCD;
  SW0NW02.XSLCD = SWGREC.XSLCD;

end // end SW0N144

// PROCESS FOR PO INFORMATION
Function SW0N150()
   /* ------------------------------------------------------------*/
   /* set swvrec*/
   /* ------------------------------------------------------------*/

  set SWVREC empty; /* Clear row storage area*/
  SWVREC.SWVWFNC = "ID"; /* po id*/
  SWVREC.XGPCD = SW0NW02.XGPCD; /* gpc*/
  SWVREC.PC3PONBR = SW0NW02.PC3PONBR; /* pc po number*/
  TA1REC.TA1PGMNM = "SW0N"; /* program name*/

  XSSLS10(); /* get pc po id type*/

  if (SWVREC.SWVWRTN == 0)
    SW0NW02.SWVWPOID = SWVREC.SWVWPOID; /* pc po id/ty*/
    SW0NW02.SWVWPOSE = SWVREC.PC4ORTYP; /* pc po id/ty*/
  end
end // end SW0N150

// PROCESS DETAIL DATA
Function SW0N160()
  SW0N161(); /* declare vplnta01 csr*/

  SW0NW01.SW0NWES4 = " ";

  SW0N162(); /* fetch   vplnta01 row*/

  SW0NW02.SW0NWIX3 = 1;
  SW0NW02.SW0NWMX2 = 020;

  while (SW0NW01.SW0NWES4 == " "
   && SW0NW02.SW0NWIX3 <= SW0NW02.SW0NWMX2)
    SW0NW02.SWYTACD[SW0NWIX3] = SWIREC.SWYTACD;
    SW0NW02.SW0NWPCT[SW0NWIX3] = "Y";
    SW0NW02.SW0NWEC9[SW0NWIX3] = SWIREC.SWZTECD;
    SW0NW02.SWIERQTY[SW0NWIX3] = SWIREC.SWIERQTY;
    SW0NW02.SW0NWIX3 = SW0NW02.SW0NWIX3 + 1;

    SW0N162(); /* fetch   vplnta01 row*/

  end

  SW0N164(); /* close vplnta01 csr*/

  if (SW0NW01.SW0NWES4 == " "
   && SW0NW02.SW0NWIX3 >= SW0NW02.SW0NWMX2)

    SLWREC.XXXLOCID = "160"; /* Module identification*/
    SLWREC.SLWMSGNO = 178; /* display limit reached*/

  end
end // end SW0N160

// declare vplnta01 cursor
Function SW0N161()
   /* ------------------------------------------------------------*/
   /* Declare the vplnta01 cursor*/
   /* ------------------------------------------------------------*/

  set SWIREC empty; /* Clear row storage area*/
  SWIREC.XWHCD = SW0NW01.XWHCD; /* warehouse code*/
  SWIREC.SWGPSEQN = -1; /* prod seq number*/
  SWIREC.SWCLNENB = -1; /* sl lane nbr*/
  SWIREC.PKDNCSQN = SW0NW01.PKDNCSQN; /* next carton seq #*/
  SWIREC.SWEPLLNB = SW0NW01.SWEPLLNB; /* recv plan number*/
  SWIREC.SWYTACD = -1; /* all tasks*/

  try
    call "IO5390" ("S1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N161

// fetch vplnta01 row
Function SW0N162()
   /* ------------------------------------------------------------*/
   /* Fetch the vplnta01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("N1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      SW0NW01.SW0NWES4 = "Y"; /* Move end of file to indicator*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N162

// close vplnta01 cursor
Function SW0N164()
   /* ------------------------------------------------------------*/
   /* close the vplnta01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("C1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "164"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N164

// Format and converse the map
Function SW0N200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0NW01.SW0NWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0NW01.SW0NWSWF == "Y") /* Map must be formatted*/
      SW0N210(); /* Format the data on the map*/
    end

  end

  if (SW0NW01.SW0NWFTM == "Y") /* First time through*/

    SW0NM001.XWHCD = COMMAREA.XWHCD; /* Initialize screen*/
    set SW0NM001.SW0NMINT cursor;

  end

  SW0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0NM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0NM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0NM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0NM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0NM001 alarm; /* Indicate sound alarm*/

  end

  SW0NW01.SW0NWFTM = "N"; /* Set the first time flag off*/

  converse SW0NM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0NM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0NM001.CAITEM; /* Application data*/


end // end SW0N200

// Format the display data
Function SW0N210()

   /* ------------------------------------------------------------*/
   /* Format the map heading area.*/
   /* If pages have been formatted in temporary storage, format*/
   /* the data lines of the current page to be displayed.*/
   /* ------------------------------------------------------------*/

  set SW0NM001 initial; /* Clear map storage area*/

  SW0NM001.XWHCD = SW0NW01.XWHCD; /* warehouse*/
  SW0NM001.XWHABRV = SW0NW01.XWHABRV; /* whse abbreviation*/
  SW0NM001.PKDNCSQN = SW0NW01.PKDNCSQN; /* carton seq nbr*/
  SW0NM001.SW0NMINT = SW0NW01.SW0NMINT; /* first insp init*/
  SW0NM001.SW0NMLNM = SW0NW01.SW0NMLNM; /* inspector*/
  SW0NM001.SW0NMIMM = SW0NW01.SW0NWIMM; /* insp mon*/
  SW0NM001.SW0NMIDD = SW0NW01.SW0NWIDD; /* insp day*/
  SW0NM001.SW0NMIYY = SW0NW01.SW0NWIYY; /* insp year*/
  SW0NM001.SWHAINMM = SW0NW01.SWHAINMM; /* insp min*/

  SW0NM001.SWEPLLNB = SW0NW02.SWEPLLNB; /* plan number*/
  SW0NM001.SL8WONBR = SW0NW02.SL8WONBR; /* wo*/
  SW0NM001.TSHCNTNR = SW0NW02.TSHCNTNR; /* container*/
  SW0NM001.PC3PONBR = SW0NW02.PC3PONBR; /* pc po number*/
  SW0NM001.SWVWPOID = SW0NW02.SWVWPOID; /* po id*/
  SW0NM001.SWVWPOSE = SW0NW02.SWVWPOSE; /* season*/

  SW0NM001.XGPCD = SW0NW02.XGPCD; /* prod-gpc*/
  SW0NM001.SY1STNBR = SW0NW02.SY1STNBR; /* style*/
  SW0NM001.SY2CLRID = SW0NW02.SY2CLRID; /* color*/
  SW0NM001.XDMCD = SW0NW02.XDMCD; /* dim*/
  SW0NM001.XQACD = SW0NW02.XQACD; /* qlt*/
  SW0NM001.XOWCD = SW0NW02.XOWCD; /* own*/
  SW0NM001.PC2INSEG = SW0NW02.PC2INSEG; /* iseg*/
  SW0NM001.XEGCD = SW0NW02.XEGCD; /* edif*/
  SW0NM001.XPGCD = SW0NW02.XPGCD; /* pkg*/
  SW0NM001.XUMCD = SW0NW02.XUMCD; /* uom*/
  SW0NM001.XSLCD = SW0NW02.XSLCD; /* slc*/
  SW0NM001.SWHCRTUN = SW0NW02.SWHCRTUN; /* insp qty*/

   /* fill in error task array*/
  SW0NW01.SW0NWIX1 = 1;
  SW0NW01.SW0NWIXM = 020;

  while (SW0NW01.SW0NWIX1 <= SW0NW01.SW0NWIXM)
    if (SW0NW01.SW0NWIX1 <= SW0NW02.SW0NWMX2)
      SW0NM001.SW0NMTSK[SW0NWIX1] = SW0NW02.SWYTACD[SW0NWIX1];


      SW0NM001.SW0NMQTY[SW0NWIX1] = SW0NW02.SWIERQTY[SW0NWIX1];
      SW0NM001.SW0NMRCD[SW0NWIX1] = SW0NW02.SW0NWEC9[SW0NWIX1];
    else
      SW0NM001.SW0NMTSK[SW0NWIX1] = 0;
      SW0NM001.SW0NMQTY[SW0NWIX1] = 0;
      SW0NM001.SW0NMRCD[SW0NWIX1] = 0;
    end
    if (SW0NW02.SW0NWPCT[SW0NWIX1] == "Y")
      set SW0NM001.SW0NMTSK[SW0NWIX1] protect;
      if (SW0NW02.SW0NWRCF == "Y")
        set SW0NM001.SW0NMQTY[SW0NWIX1] protect;
        set SW0NM001.SW0NMRCD[SW0NWIX1] protect;
        converseLib.validationFailed(50); /* not a receiving status code*/
      end
    end
    SW0NW01.SW0NWIX1 = SW0NW01.SW0NWIX1 + 1;

  end

  if (SW0NM001.SW0NMTSK[1] == 0 /* No task records*/
   && SW0NW01.SW0NWFTM != "Y"   
   && converseVar.validationMsgNum == 0)

    SLWREC.XXXLOCID = "213"; /* Module identification*/
    converseLib.validationFailed(214); /* No data to report*/
    set SW0NM001.PKDNCSQN cursor;

  end

  set SW0NM001.PKDNCSQN cursor;
  SW0NW01.SW0NWSWF = "N"; /* init map switch*/

end // end SW0N210

// Check attention identifier
Function SW0N300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0NW01.SW0NWSWR == "Y") /* Request for data pending*/
      set SW0NW01 empty; /* M001 display storage*/
    end

    SW0N301(); /* purge any temporary storage*/

    SW0NW01.SW0NWSWF = "Y"; /* Format the map switch*/
    SW0NW01.SW0NWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0NM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      /* ------------------------------------------------------------*/
       /* Save the application user area in the COMMAREA.*/
      /* ------------------------------------------------------------*/

      SW0NS01();

      if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

        COMMAREA.CAUSERA = SLWREC.SLWGROUP; /* Save user area*/
      else
        COMMAREA.CAUSERA = " "; /* Clear user area*/

      end

      SW0N301(); /* purge any temporary storage*/
      /* ------------------------------------------------------------*/
       /* Transfer control to the specified application.*/
      /* ------------------------------------------------------------*/
      XSEXIT(); /* Exit to another application*/

      set SW0NM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
      /* HELP*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CAITEM = "SW0NM001"; /* Application find code*/
    /* ------------------------------------------------------------*/
     /* Set the application to be invoked for PF1*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAP = "GD01"; /* Indicate Goal Documentation*/

    /* ------------------------------------------------------------*/
     /* Save the application user area in the COMMAREA.*/
    /* ------------------------------------------------------------*/

    if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

      COMMAREA.CAUSERA = SLWREC.SLWGROUP; /* Save user area*/
    else
      COMMAREA.CAUSERA = " "; /* Clear user area*/
    end

    /* ------------------------------------------------------------*/
     /* Transfer control to the specified application.*/
    /* ------------------------------------------------------------*/

    XSEXIT(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* Reestablish the COMMAREA application and item fields.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
    COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* CURR application*/

    COMMAREA.CAITEM = " "; /* Clear map name from item*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Update the slwrec before exiting*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf15)

    SW0NS01();

  end

   /* ------------------------------------------------------------*/
      /* PF3*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF4 was pressed*/

    COMMAREA.CATOAP = "SW0A"; /* Indicate Goal Documentation*/

    SW0N301(); /* purge any temporary storage*/

    SW0N310(); /* transfer to requested appl.*/

    COMMAREA.CAITEM = " "; /* Clear map name from item*/
    SW0NW01.SW0NWSWF = "Y"; /* Format the map switch*/
    SW0NW01.SW0NWSWR = "N"; /* Request for data switch*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
      /* PF4*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    COMMAREA.CATOAP = "MN0M"; /* Indicate Goal Documentation*/

    SW0N301(); /* purge any temporary storage*/

    SW0N310(); /* transfer to requested appl.*/

    COMMAREA.CAITEM = " "; /* Clear map name from item*/
    SW0NW01.SW0NWSWF = "Y"; /* Format the map switch*/
    SW0NW01.SW0NWSWR = "N"; /* Request for data switch*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
      /* PF5*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/

    COMMAREA.CATOAP = "SL0M"; /* Indicate Goal Documentation*/

    SW0N301(); /* purge any temporary storage*/

    SW0N310(); /* transfer to requested appl.*/

    SW0NW01.SW0NWSWF = "Y"; /* Format the map switch*/
    SW0NW01.SW0NWSWR = "N"; /* Request for data switch*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
      /* PF14*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/

    SW0N330(); /* process PF14 process      .*/

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
      /* PF15*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/

    SW0N340(); /* setup sw0rec*/
    SLWREC.SLWUSERA = SWOREC.SWODATA;

    COMMAREA.CATOAP = "SW0T"; /* Indicate Goal Documentation*/

    SW0N301(); /* purge any temporary storage*/

    SW0N310(); /* transfer to requested appl.*/

    SW0NW01.SW0NWSWF = "Y"; /* Format the map switch*/
    SW0NW01.SW0NWSWR = "N"; /* Request for data switch*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end SW0N300

// purge any temporary storage
Function SW0N301()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "SW0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (SW0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "SW0N301 "; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "SW0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  set SW0NW02 empty; /* Initialize temporary storage*/

  SW0NW01.SW0NWTSP = 1; /* Reset current page number*/
  SW0NW01.TA5TSQIX = 1; /* Reset temporary storage index*/

  SW0NW01.SW0NWSWF = "Y"; /* Reset format switch*/

end // end SW0N301

// common request to transfer
Function SW0N310()

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    COMMAREA.CAUSERA = SLWREC.SLWGROUP; /* Save user area*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* CURR application*/

  COMMAREA.CAITEM = " "; /* Clear map name from item*/
end // end SW0N310

// Process PF14 transaction
Function SW0N330()
  if (SW0NW01.XWHCD != SW0NM001.XWHCD
   || SW0NW01.SW0NMINT != SW0NM001.SW0NMINT
   || SW0NW01.SW0NMLNM != SW0NM001.SW0NMLNM
   || SW0NW01.SW0NWIMM != SW0NM001.SW0NMIMM
   || SW0NW01.SW0NWIDD != SW0NM001.SW0NMIDD
   || SW0NW01.SW0NWIYY != SW0NM001.SW0NMIYY
   || SW0NW01.SWHAINMM != SW0NM001.SWHAINMM
   || SW0NW01.PKDNCSQN != SW0NM001.PKDNCSQN)
    SLWREC.XXXLOCID = "330"; /* Module identification*/
    converseLib.validationFailed(219); /* data modified*/

    exit stack; /* redisplay the screen*/

  end
   /* fill in error task array*/
  SW0NW01.SW0NWIX1 = 1;
  SW0NW01.SW0NWIXM = 020;

  while (SW0NW01.SW0NWIX1 <= SW0NW01.SW0NWIXM)
    if (SW0NW02.SWYTACD[SW0NWIX1] != SW0NM001.SW0NMTSK[SW0NWIX1]
     || SW0NW02.SW0NWEC9[SW0NWIX1] != SW0NM001.SW0NMRCD[SW0NWIX1]
     || SW0NW02.SWIERQTY[SW0NWIX1] != SW0NM001.SW0NMQTY[SW0NWIX1])
      SLWREC.XXXLOCID = "330"; /* Module identification*/
      converseLib.validationFailed(219); /* data modified*/

      exit stack; /* redisplay the screen*/

    end

    SW0NW01.SW0NWIX1 = SW0NW01.SW0NWIX1 + 1;

  end

  SW0NW01.SW0NWP14 = "Y"; /* pf14 requested*/
  SW0NW01.SW0NWSWR = "Y"; /* request new data*/

  exit stack; /* redisplay the screen*/


end // end SW0N330

// move storage data to sworec
Function SW0N340()
  set SWOREC empty; /* clear record*/
  SWOREC.XWHCD = SW0NM001.XWHCD;
  SWOREC.XWHABRV = SW0NM001.XWHABRV;
  SW0NW01.SW0NMINT = SW0NM001.SW0NMINT;
  SW0NW01.SW0NMLNM = SW0NM001.SW0NMLNM;
  SWOREC.XXXUSRID = SW0NW01.XXXUSRID;
  SW0NW01.SW0NWIYY = SW0NM001.SW0NMIYY;
  SW0NW01.SW0NWIMM = SW0NM001.SW0NMIMM;
  SW0NW01.SW0NWIDD = SW0NM001.SW0NMIDD;
  SWOREC.PKDNCSQN = SW0NM001.PKDNCSQN;

  if (SW0NM001.SW0NMIYY > 60)
    SW0NW01.SW0NWICC = "19";
  else
    SW0NW01.SW0NWICC = "20";
  end

  SWOREC.SWJINSDT = SW0NW01.SW0NWIDT;
  SWOREC.SWHAINMM = SW0NM001.SWHAINMM;
  SW0NW01.SWHAINMM = SW0NM001.SWHAINMM;
  SWOREC.SW0NWTSP = SW0NW01.SW0NWTSP;
  SWOREC.TA5TSQIX = SW0NW01.TA5TSQIX;
  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 < 20)
    if (SW0NM001.SW0NMRCD[SLWIDX01] != " "
     || SW0NM001.SW0NMTSK[SLWIDX01] != 0
     || SW0NM001.SW0NMQTY[SLWIDX01] != 0)
      SWOREC.SWYTACD[SLWIDX01] = SW0NM001.SW0NMTSK[SLWIDX01];
      SWOREC.SWIERQTY[SLWIDX01] = SW0NM001.SW0NMQTY[SLWIDX01];
      SWOREC.SWOTECD[SLWIDX01] = SW0NM001.SW0NMRCD[SLWIDX01];
    else
      SWOREC.SWYTACD[SLWIDX01] = 0;
      SWOREC.SWIERQTY[SLWIDX01] = 0;
      SWOREC.SWOTECD[SLWIDX01] = "    ";
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

  end

end // end SW0N340

// Reset highlighted fields
Function SW0N400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  set SW0NM001.XWHCD initialAttributes; /* warehouse code*/
  set SW0NM001.SW0NMINT initialAttributes; /* inspector init*/
  set SW0NM001.SW0NMLNM initialAttributes; /* inspector last name*/
  set SW0NM001.SW0NMIMM initialAttributes; /* inspection month*/
  set SW0NM001.SW0NMIDD initialAttributes; /* inspection day*/
  set SW0NM001.SW0NMIYY initialAttributes; /* inspection year*/
  set SW0NM001.SWHAINMM initialAttributes; /* inspection minutes*/
  set SW0NM001.PKDNCSQN initialAttributes; /* carton sequence number*/
  set SW0NM001.CATOAP initialAttributes; /* Commarea TO application*/
  set SW0NM001.CAITEM initialAttributes; /* Commarea application data*/

  SW0NW01.SW0NWIX1 = 1; /* initialize index*/
  while (SW0NW01.SW0NWIX1 <= 20)
    set SW0NM001.SW0NMQTY[SW0NWIX1] initialAttributes; /* reset error quantity*/
    set SW0NM001.SW0NMRCD[SW0NWIX1] initialAttributes; /* reset error code*/
    if (SW0NW02.SW0NWPCT[SW0NWIX1] == "Y")
      set SW0NM001.SW0NMTSK[SW0NWIX1] protect; /* reset task code*/
      if (SW0NW02.SW0NWRCF == "Y")
        set SW0NM001.SW0NMQTY[SW0NWIX1] protect;
        set SW0NM001.SW0NMRCD[SW0NWIX1] protect;
      end
    else
      set SW0NM001.SW0NMTSK[SW0NWIX1] normal; /* allow entry*/
    end
    SW0NW01.SW0NWIX1 = SW0NW01.SW0NWIX1 + 1;
  end


   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0NM001.XWHCD == "?"   /* Warehouse code list request*/
   || SW0NW01.SW0NWEC1 == "?" /* error code list requested*/
   || SW0NW01.SW0NWEC2 == "?" /* error code list requested*/
   || SW0NW01.SW0NWEC3 == "?" /* error code list requested*/
   || SW0NW01.SW0NWEC4 == "?") /* error code list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "140"; /* Module identification*/
      converseLib.validationFailed(18); /* Indicate selection only*/
                                 /* ; valid with enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes*/
   /* ------------------------------------------------------------*/

  if (SW0NM001.XWHCD == "?") /* warehouse list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " WAREHOUSE CODES  "; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0NM001.XWHCD = SW0NW01.XWHCD; /* Restore prior code*/
    else
      SW0NM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0NM001.XWHCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of error codes.*/
   /* ------------------------------------------------------------*/

  SW0NW01.SW0NWIX1 = 1; /* initialize index*/
  while (SW0NW01.SW0NWIX1 <= 20)
    SW0NW01.SW0NWECC = SW0NM001.SW0NMRCD[SW0NWIX1]; /* char err cd*/
    if (SW0NW01.SW0NWEC1 == "?" /* error code list requested*/
     || SW0NW01.SW0NWEC2 == "?" /* error code list requested*/
     || SW0NW01.SW0NWEC3 == "?" /* error code list requested*/
     || SW0NW01.SW0NWEC4 == "?") /* error code list requested*/
      SW0N410(); /* process error code request*/
    end
    SW0NW01.SW0NWIX1 = SW0NW01.SW0NWIX1 + 1;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/

  exit stack;


end // end SW0N400

// process for error code table
Function SW0N410()
   /* ============================================================*/
   /* process: if screen error code has ?, list choices and select*/
          /* one, otherwise it defaults to previous screen*/
          /* selection.*/
   /* ============================================================*/

  COMMAREA.CATOAP = "SW0T"; /* Indicate Goal Documentation*/

  set SWOREC empty;

  SW0N340(); /* MOVE STORAGE DATA TO SWOREC*/

  SWOREC.SWOIDXPO = SW0NW01.SW0NWIX1;
  SLWREC.SLWUSERA = SWOREC.SWODATA;
  COMMAREA.CAUSERA = SLWREC.SLWGROUP; /* save user area*/

  SW0N310(); /* transfer to requested appl.*/

  SLWREC.SLWGROUP = COMMAREA.CAUSERA; /* save user area*/
  SWOREC.SWODATA = SLWREC.SLWUSERA;
  SW0NW01.TA5TSQIX = SWOREC.TA5TSQIX;
  SW0NW01.SW0NWTSP = SWOREC.SW0NWTSP;
  SW0NW01.SW0NWIX1 = SWOREC.SWOIDXPO;

  SW0N412(); /* MOVE sworec to sw0nw01 rec*/


end // end SW0N410

// move sworec to storage data
Function SW0N412()
  SW0NM001.XWHCD = SWOREC.XWHCD;
  SW0NM001.XWHABRV = SWOREC.XWHABRV;
  SW0NW01.XXXUSRID = SWOREC.XXXUSRID;
  SW0NM001.SW0NMINT = SW0NW01.SW0NMINT;
  SW0NM001.SW0NMLNM = SW0NW01.SW0NMLNM;
  SW0NW01.SW0NWIDT = SWOREC.SWJINSDT;
  SW0NM001.SW0NMIMM = SW0NW01.SW0NWIMM;
  SW0NM001.SW0NMIYY = SW0NW01.SW0NWIYY;
  SW0NM001.SW0NMIDD = SW0NW01.SW0NWIDD;
  SW0NM001.SWHAINMM = SWOREC.SWHAINMM;
end // end SW0N412

// Verify data that was entered
Function SW0N500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0NM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/

  end

  SW0NW01.SW0NWSW1 = "N"; /* init. head has changed switch*/
  SW0NW01.SW0NWSW2 = "N"; /* init. detl has changed switch*/

   /* ------------------------------------------------------------*/
   /* Inspection date is required.*/
   /* ------------------------------------------------------------*/

  if (SW0NM001.XWHCD == SW0NW02.XWHCD
   && SW0NM001.PKDNCSQN == SW0NW02.PKDNCSQN)

    if (SW0NM001.SW0NMIMM == 0 /* blank insp date*/
     && SW0NM001.SW0NMIDD == 0 
     && SW0NM001.SW0NMIYY == 0)

      SLWREC.XXXLOCID = "510"; /* module identification*/
      converseLib.validationFailed(11); /* invalid data*/
      set SW0NM001.SW0NMIMM cursor, bold; /* highlight*/
      set SW0NM001.SW0NMIDD bold;
      set SW0NM001.SW0NMIYY bold;

    end
  end

  if (SW0NM001.SW0NMIDD != SW0NW02.SW0NWIDD
   || SW0NM001.SW0NMIMM != SW0NW02.SW0NWIMM
   || SW0NM001.SW0NMIYY != SW0NW02.SW0NWIYY)

    SW0N512(); /* validate date*/

  end

   /* ------------------------------------------------*/
   /* Carton sequence number is required*/
   /* ------------------------------------------------*/

  if (SW0NM001.PKDNCSQN == 0) /* There is no seq no*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0NM001.PKDNCSQN cursor, bold; /* Highight*/
    converseLib.validationFailed(11); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------*/
   /* Validate inspector. Concatonate the first initial*/
   /* and last name into xxxuserid*/
   /* ------------------------------------------------------*/

  if (SW0NM001.XWHCD == SW0NW02.XWHCD
   && SW0NM001.PKDNCSQN == SW0NW02.PKDNCSQN)

    if (SW0NM001.SW0NMINT == " " /* There is no inspector name*/
     && SW0NM001.SW0NMLNM == " ")

      SLWREC.XXXLOCID = "500"; /* Module identification*/
      set SW0NM001.SW0NMINT cursor, bold; /* Highight*/
      set SW0NM001.SW0NMLNM bold;
      converseLib.validationFailed(11); /* Field missing*/

    else

      SW0NW01.SW0NMINT = SW0NM001.SW0NMINT; /* Concatonate init and*/
      SW0NW01.SW0NMLNM = SW0NM001.SW0NMLNM;
                                   /* last name into xxxusrid*/

    end
  end

   /* -----------------------------------------------------*/
   /* Validate warehouse*/
   /* -----------------------------------------------------*/
  if (SW0NM001.XWHCD == " ") /* There is no warehouse*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    converseLib.validationFailed(11); /* Field missing or invalid*/
    set SW0NM001.XWHCD cursor, bold; /* Highlight*/

  else

    if (SW0NM001.XWHCD != SW0NW02.XWHCD) /* Warehouse changed*/

      SW0NS02(); /* Edit the warehouse*/

    end
  end

  if (converseVar.validationMsgNum == 0)

    if (SW0NW02.XWHCD != SW0NM001.XWHCD /* warehouse changed*/
     || SW0NW02.PKDNCSQN != SW0NM001.PKDNCSQN)

      return; /* do not continue edits if key has changed*/

    end
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If key field changed, determine if any other field changed.*/
   /* ------------------------------------------------------------*/

  if (SW0NW02.XXXUSRID != SW0NW01.XXXUSRID
   || SW0NW02.SW0NWIMM != SW0NM001.SW0NMIMM
   || SW0NW02.SW0NWIDD != SW0NM001.SW0NMIDD
   || SW0NW02.SW0NWIYY != SW0NM001.SW0NMIYY
   || SW0NW02.SWHAINMM != SW0NM001.SWHAINMM)
    SW0NW01.SW0NWSW1 = "Y"; /* init. head has changed switch*/
  end

   /* ------------------------------------------------------------*/
   /* validate the detail data*/
   /* ------------------------------------------------------------*/
  SW0NW01.SW0NWIX1 = 20;

  while (SW0NW01.SW0NWIX1 >= 1)

    if (SW0NM001.SW0NMTSK[SW0NWIX1] != SW0NW02.SWYTACD[SW0NWIX1]
     || SW0NM001.SW0NMQTY[SW0NWIX1] != SW0NW02.SWIERQTY[SW0NWIX1]
     || SW0NM001.SW0NMRCD[SW0NWIX1] != SW0NW02.SW0NWEC9[SW0NWIX1])

      SW0NW01.SW0NWSW2 = "Y";
                                   /* init. detl has changed switch*/

      SW0N520(); /* Check for Task and errors codes*/
    end

    SW0NW01.SW0NWIX1 = SW0NW01.SW0NWIX1 - 1;

  end
   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
end // end SW0N500

// Validate the inspection date
Function SW0N512()
   /* ------------------------------------------------------------*/
   /* validate inspection date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "E"; /* type*/
  SW0NW01.SW0NWIMM = SW0NM001.SW0NMIMM;
  SW0NW01.SW0NWIDD = SW0NM001.SW0NMIDD;
  SW0NW01.SW0NWIYY = SW0NM001.SW0NMIYY;
  TA2REC.TA2GRGDD = SW0NM001.SW0NMIDD; /* dd to be validated*/
  TA2REC.TA2GRGYM = SW0NW01.SW0NWIYM;
                                   /* Beginning yymm to be validatd*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/

    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

      SW0NW01.SW0NWICC = TA2REC.TA2CENT; /* store century*/
      return;
    else
      SLWREC.XXXLOCID = "512"; /* Module identification*/
      set SW0NM001.SW0NMIMM cursor, bold; /* Highlight*/
      set SW0NM001.SW0NMIDD bold; /* Highlight*/
      set SW0NM001.SW0NMIYY bold; /* Highlight*/
      converseLib.validationFailed(21); /* invalid date*/

      return;

    end

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "XSFFS30 EDIT THE BEGINNING MONTH";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    SLWREC.XXXLOCID = "512"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    return; /* exit to display map*/

  end
end // end SW0N512

// Check task code & error qtys
Function SW0N520()
   /* ------------------------------------------------------------*/
   /* error code must be present if quantity was entered*/
   /* ------------------------------------------------------------*/
  if (SW0NM001.SW0NMQTY[SW0NWIX1] != 0
   && SW0NM001.SW0NMRCD[SW0NWIX1] == 0)

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    converseLib.validationFailed(011); /* data modified*/
    set SW0NM001.SW0NMQTY[SW0NWIX1] cursor, bold; /* Highlight*/
    set SW0NM001.SW0NMRCD[SW0NWIX1] bold; /* Highlight*/

    return; /* redisplay the screen*/


  end
   /* ------------------------------------------------------------*/
   /* task code must be present if error code entered*/
   /* ------------------------------------------------------------*/
  if (SW0NM001.SW0NMTSK[SW0NWIX1] == 0
   && SW0NM001.SW0NMRCD[SW0NWIX1] != 0)

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    converseLib.validationFailed(011); /* data modified*/
    set SW0NM001.SW0NMTSK[SW0NWIX1] cursor, bold; /* Highlight*/
    set SW0NM001.SW0NMRCD[SW0NWIX1] bold; /* Highlight*/

    return; /* redisplay the screen*/


  end
   /* ------------------------------------------------------------*/
   /* validate task error codes*/
   /* ------------------------------------------------------------*/
  if (SW0NM001.SW0NMRCD[SW0NWIX1] != 0)

    SW0N521(); /* validate task error code*/

  end

   /* ------------------------------------------------------------*/
   /* validate error quantity*/
   /* ------------------------------------------------------------*/
  if (SW0NM001.SW0NMQTY[SW0NWIX1] > SW0NW02.SWHCRTUN)
    SLWREC.XXXLOCID = "520"; /* Module identification*/
    converseLib.validationFailed(206); /* data modified*/
    set SW0NM001.SW0NMQTY[SW0NWIX1] cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* validate task codes*/
   /* ------------------------------------------------------------*/
  if (SW0NM001.SW0NMTSK[SW0NWIX1] != 0)

    SW0N522(); /* validate task code*/

  end

end // end SW0N520

// Validate task error codes
Function SW0N521()
   /* ------------------------------------------------------------*/
   /* validate task error codes*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* validate task error code against db table*/
   /* ------------------------------------------------------------*/

  SW0N523(); /* validate the error code*/

  if (SQLCA.VAGen_SQLCODE == 100 /* not found*/
   || SWZREC.XXXSTAT != "A")     /* not active*/

    SLWREC.XXXLOCID = "521"; /* module identification*/
    converseLib.validationFailed(11); /* invalid data*/
    set SW0NM001.SW0NMRCD[SW0NWIX1] cursor, bold;

  end

end // end SW0N521

// Validate task error codes
Function SW0N522()
   /* ------------------------------------------------------------*/
   /* validate task code against db table*/
   /* ------------------------------------------------------------*/

  SW0N524(); /* validate task code*/

  if (SQLCA.VAGen_SQLCODE == 100 /* not active*/
   || SWYREC.XXXSTAT != "A")     /* not found*/

    SLWREC.XXXLOCID = "522"; /* module identification*/
    converseLib.validationFailed(11);
    set SW0NM001.SW0NMTSK[SW0NWIX1] cursor, bold;

  end


end // end SW0N522

// Validate task error codes
Function SW0N523()
   /* ------------------------------------------------------------*/
   /* validate task error codes*/
   /* ------------------------------------------------------------*/

  set SWZREC empty;
  SWZREC.SWZTECD = SW0NM001.SW0NMRCD[SW0NWIX1];

  try
    call "IO5560" ("S ", SQLCA, SWZREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)

      return;

    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "523"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "SELC"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N523

// Validate task codes
Function SW0N524()
   /* ------------------------------------------------------------*/
   /* validate task codes*/
   /* ------------------------------------------------------------*/

  set SWYREC empty;
  SWYREC.XGPCD = SW0NW02.XGPCD; /* gpc code*/
  SWYREC.SWYTACD = SW0NM001.SW0NMTSK[SW0NWIX1]; /* task code*/

  try
    call "DC0070" ("S ", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)

      return;

    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "524"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "SELC"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE TABLE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VXTA0001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N524

// Process valid input request
Function SW0N600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SW0NW01.SW0NWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = SW0NM001.XWHCD; /* warehouse code*/

   /* ------------------------------------------------------------*/
   /* If the key fields changed, request the data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0NM001.XWHCD != SW0NW02.XWHCD /* warehouse changed*/
   || SW0NW02.PKDNCSQN != SW0NM001.PKDNCSQN) /* carton seq changed*/

    SW0NW01.SW0NWSWR = "Y"; /* Request for data switch*/
    SW0NW01.SW0NWSWF = "Y"; /* Format the next screen*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If any modifiable header data was changed, update the table*/
   /* ------------------------------------------------------------*/

  if (SW0NW01.SW0NWSW1 == "Y")

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
    /* ------------------------------------------------------------*/

    SW0N610(); /* Update the VPLNLC01*/
    /* ----------------------------------------------------------*/
     /* Store the inspector and inspection date*/
    /* ----------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Commit all changes to protected resources.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

    SW0NW02.XXXUSRID = SW0NW01.XXXUSRID;
    SW0NW02.SW0NWIDT = SW0NW01.SW0NWIDT;

  end

   /* ------------------------------------------------------------*/
   /* If any modifiable detail data was changed, update the table*/
   /* ------------------------------------------------------------*/

  if (SW0NW01.SW0NWSW2 == "Y")

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
    /* ------------------------------------------------------------*/

    SW0NW01.SW0NWIX1 = 1;

    while (SW0NW01.SW0NWIX1 <= 20)
      if (SW0NM001.SW0NMTSK[SW0NWIX1] != SW0NW02.SWYTACD[SW0NWIX1]
       || SW0NM001.SW0NMQTY[SW0NWIX1] != SW0NW02.SWIERQTY[SW0NWIX1]
       || SW0NM001.SW0NMRCD[SW0NWIX1] != SW0NW02.SW0NWEC9[SW0NWIX1])

        SW0N620(); /* Update the VPLNta01*/

      end

      SW0NW01.SW0NWIX1 = SW0NW01.SW0NWIX1 + 1;

    end

  end

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/
  if (SW0NW01.SW0NWSW2 == "N"
   && SW0NW01.SW0NWSW1 == "N")

    SLWREC.XXXLOCID = "600"; /* Module identification*/
    converseLib.validationFailed(70); /* Table update was completed*/

  else

    SLWREC.XXXLOCID = "600"; /* Module identification*/
    converseLib.validationFailed(205); /* Table update was completed*/

  end

  SW0NW01.SW0NWSWR = "N"; /* no request for data*/

  exit stack;
end // end SW0N600

// Update the Vplnlc01
Function SW0N610()
   /* ------------------------------------------------------------*/
   /* obtain the vplnlc01 record to be updated*/
   /* ------------------------------------------------------------*/
  SW0N611();
                                   /* obtain the vplncl01 row to be updated*/

   /* ------------------------------------------------------------*/
   /* Format the data from w01 into the table row.*/
   /* ------------------------------------------------------------*/

  SWHREC.XXXUSRID = SW0NW01.XXXUSRID; /* update user*/
  SWHREC.SWJINSDT = SW0NW01.SW0NWIDT; /* update date*/
  SWHREC.SWHAINMM = SW0NM001.SWHAINMM; /* inspection min*/
  SWHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  SWXREC.SWXFUNCD = "U ";

  try
    call "IO5360" ("U ", SQLCA, SWHREC, SWXREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0NW01.SW0NWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "610"; /* Module identification*/
      converseLib.validationFailed(12); /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N610

// GET VPLNLC01 to be updated
Function SW0N611()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "S ";
  set SWHREC empty; /* Clear row storage area*/
  SWHREC.XWHCD = SW0NW01.XWHCD; /* warehouse code*/
  SWHREC.SWEPLLNB = SW0NW01.SWEPLLNB; /* recv plan number*/
  SWHREC.TSHCNTNR = SW0NW02.TSHCNTNR; /* container number*/
  SWHREC.XGPCD = SW0NW02.XGPCD; /* gen prod code*/
  SWHREC.PC3PONBR = SW0NW02.PC3PONBR; /* pc po number*/
  SWHREC.SWGPSEQN = SW0NW02.SWGPSEQN; /* prod seq number*/
  SWHREC.SWCLNENB = SW0NW02.SWCLNENB; /* lane number*/
  SWHREC.PKDNCSQN = SW0NW01.PKDNCSQN; /* pk carton seq nbr*/

  try
    call "IO5360" ("S ", SQLCA, SWHREC, SWXREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N611

// update the Vplnta row
Function SW0N620()
   /* ------------------------------------------------------------*/
   /* New task code insert task*/
   /* ------------------------------------------------------------*/
  if (SW0NM001.SW0NMTSK[SW0NWIX1] == SW0NW02.SWYTACD[SW0NWIX1])
    SW0N622(); /* get vplnta01 row*/
    SW0N623(); /* update vplnta01 row*/
    SW0NW02.SWIERQTY[SW0NWIX1] = SW0NM001.SW0NMQTY[SW0NWIX1];
    SW0NW02.SW0NWECX[SW0NWIX1] = SW0NM001.SW0NMRCD[SW0NWIX1];
  else
    if (SW0NW02.SWYTACD[SW0NWIX1] == 0) /* add*/
      SW0N621(); /* create new vplnta01 row*/
    else
      if (SW0NM001.SW0NMTSK[SW0NWIX1] == 0)
        SW0N625(); /* delete vplnta01 row*/
      else
        SW0N625(); /* delete vplnta01 row*/
        SW0N621(); /* create new vplnta01 row*/
      end
    end
    SW0NW02.SWIERQTY[SW0NWIX1] = SW0NM001.SW0NMQTY[SW0NWIX1];
    SW0NW02.SW0NWECX[SW0NWIX1] = SW0NM001.SW0NMRCD[SW0NWIX1];
    SW0NW02.SWYTACD[SW0NWIX1] = SW0NM001.SW0NMTSK[SW0NWIX1];
  end

end // end SW0N620

// Create new PLNTA row
Function SW0N621()
  set SWIREC empty; /* initialize row*/
  SWIREC.XWHCD = SW0NW01.XWHCD; /* warehouse*/
  SWIREC.SWEPLLNB = SW0NW01.SWEPLLNB; /* plan number*/
  SWIREC.SWGPSEQN = SW0NW02.SWGPSEQN;
  SWIREC.SWCLNENB = SW0NW02.SWCLNENB;
  SWIREC.PKDNCSQN = SW0NW01.PKDNCSQN; /* product next carton*/
  SWIREC.SWYTACD = SW0NM001.SW0NMTSK[SW0NWIX1]; /* task code*/
  SWIREC.SWIERQTY = SW0NM001.SW0NMQTY[SW0NWIX1]; /* error quantity*/
  SW0NW01.SW0NWECC = SW0NM001.SW0NMRCD[SW0NWIX1];
  SWIREC.SWZTECD = SW0NW01.SW0NWECN; /* error code*/
  SWIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  SWIREC.ZZZCHGCT = XX0XW01.XX0XWTIM; /* Change time*/
   /* ------------------------------------------------------------*/
   /* add the row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("A ", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0N621

// get plnta row
Function SW0N622()
  set SWIREC empty; /* initialize row*/
  SWIREC.XWHCD = SW0NW01.XWHCD; /* warehouse*/
  SWIREC.SWEPLLNB = SW0NW01.SWEPLLNB; /* plan number*/
  SWIREC.SWGPSEQN = SW0NW02.SWGPSEQN;
  SWIREC.SWCLNENB = SW0NW02.SWCLNENB;
  SWIREC.PKDNCSQN = SW0NW01.PKDNCSQN; /* product next carton*/
  SWIREC.SWYTACD = SW0NM001.SW0NMTSK[SW0NWIX1]; /* task code*/
   /* ------------------------------------------------------------*/
   /* get the row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("S ", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N622

// update the plnta row
Function SW0N623()
  SWIREC.SWIERQTY = SW0NM001.SW0NMQTY[SW0NWIX1]; /* error quantity*/
  SW0NW01.SW0NWECC = SW0NM001.SW0NMRCD[SW0NWIX1];
  SWIREC.SWZTECD = SW0NW01.SW0NWECN; /* error code*/
  SWIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
   /* ------------------------------------------------------------*/
   /* add the row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("U ", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "623"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0N623

// get plnta row
Function SW0N625()
  set SWIREC empty; /* initialize row*/
  SWIREC.XWHCD = SW0NW01.XWHCD; /* warehouse*/
  SWIREC.SWEPLLNB = SW0NW01.SWEPLLNB; /* plan number*/
  SWIREC.SWGPSEQN = SW0NW02.SWGPSEQN;
  SWIREC.SWCLNENB = SW0NW02.SWCLNENB;
  SWIREC.PKDNCSQN = SW0NW01.PKDNCSQN; /* product next carton*/
  SWIREC.SWYTACD = SW0NW02.SWYTACD[SW0NWIX1]; /* task code*/
   /* ------------------------------------------------------------*/
   /* delete a row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("D ", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "625"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0N625

// Update slwrec before exiting
Function SW0NS01()

   /* ----------------------------------------------------*/
   /* Update the slwrec before leaving application.*/
   /* ----------------------------------------------------*/

  SLWREC.XWHCD = SW0NW01.XWHCD; /* xwh_whse_cd*/
  SLWREC.XWHOWNGF = " "; /* xwh_own_grp_fl*/
  SLWREC.SLWWKDTE = 0; /* work date (ccyymmdd)*/
  SLWREC.SLWINDTE = 0; /* input date (mmddyy)*/
  SLWREC.SWEPLLNB = SW0NW01.SWEPLLNB; /* sl_rcv_plan_nbr*/
  SLWREC.TSHCNTNR = SW0NW02.TSHCNTNR; /* ts_cntnr_nbr*/
  SLWREC.XGPCD = " "; /* xgp_gpc_cd*/
  SLWREC.PC3PONBR = SW0NW02.PC3PONBR; /* pc_po_nbr*/
  SLWREC.PC3POIDT = 0; /* pc_po_id_mo_rng*/
  SLWREC.PC4ORTYP = " "; /* pc_po_ot_cd*/
  SLWREC.PCFSECD = " "; /* pc_po_id_sesn_cd*/
  SLWREC.FY1FCTYC = " "; /* fy_fcty_cd*/
  SLWREC.SY1STNBR = " "; /* style number*/
  SLWREC.SY2CLRID = " "; /* identifying color*/
  SLWREC.XDMCD = " "; /* xdm_dim_cd*/
  SLWREC.XQACD = " "; /* xqa_qual_cd*/
  SLWREC.XOWCD = " "; /* xow_own_grp_cd*/
  SLWREC.PC2INSEG = " "; /* pc_cu_in_seg_cd*/
  SLWREC.XEG-ENGR-DIFF-CD = " "; /* engeneering difference*/
  SLWREC.XUMCD = " "; /* xum_uom_cd*/
  SLWREC.XSLCD = " "; /* xsl_class_cd*/
  SLWREC.TSOCRTNB = 0; /* ts_crtn_nbr*/


end // end SW0NS01

// Edit the warehouse
Function SW0NS02()
   /* -----------------------------------------------------*/
   /* Validate the warehouse code*/
   /* -----------------------------------------------------*/


  if (SW0NM001.XWHCD != SW0NW01.XWHCD) /* Warehouse changed*/

    if (SW0NM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      SW0NM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SW0NW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];

    else

      SLWREC.XXXLOCID = "S02"; /* Module identification*/
      set SW0NM001.XWHCD cursor, bold; /* Highlight*/
      SW0NW01.XWHCD = " "; /* Initialize warehouse*/
      SW0NW01.XWHABRV = " "; /* Initialize whse abbrv*/
      SW0NM001.XWHABRV = " "; /* Init the map field*/
      converseLib.validationFailed(11); /* Field missing or invalid*/

    end
  end

end // end SW0NS02

//*** RECORD=SW0NW01 ****
// WORKING STORAGE FIELD FOR SW0N
// ***********************
Record SW0NW01 type basicRecord
  10 SW0NWSWS SW0NWSWS ; 
    15 SW0NWES1 SW0NWES1 ; 
    15 SW0NWES2 SW0NWES2 ; 
    15 SW0NWES3 SW0NWES3 ; 
    15 SW0NWES4 SW0NWES4 ; 
    15 SW0NWES5 SW0NWES5 ; 
    15 SW0NWSWF SW0NWSWF ; 
    15 SW0NWSWR SW0NWSWR ; 
    15 SW0NWSW1 SW0NWSW1 ; 
    15 SW0NWSW2 SW0NWSW2 ; 
  10 SW0NWIXS SW0NWIXS ; 
    15 SW0NWIX1 SW0NWIX1 ; 
    15 SW0NWIX2 SW0NWIX2 ; 
    15 SW0NWIXM SW0NWIXM ; 
    15 SW0NWTSP SW0NWTSP ; 
    15 TA5TSQIX TA5TSQIX ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 PKDNCSQN PKDNCSQN ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 SWAINSTP SWAINSTP ; 
  10 XXXUSRID XXXUSRID ; 
    15 SW0NMINT SW0NMINT ; 
    15 SW0NMLNM SW0NMLNM ; 
    15 * char(2) ; 
  10 SW0NWIDT SW0NWIDT ; 
    15 SW0NWICC SW0NWICC ; 
    15 SW0NWIYM SW0NWIYM ; 
      20 SW0NWIYY SW0NWIYY ; 
      20 SW0NWIMM SW0NWIMM ; 
    15 SW0NWIDD SW0NWIDD ; 
  10 SW0NWCDT SW0NWCDT ; 
    15 SW0NWCCC SW0NWCCC ; 
    15 SW0NWDAT SW0NWDAT ; 
      20 SW0NWCYY SW0NWCYY ; 
      20 SW0NWCMM SW0NWCMM ; 
      20 SW0NWCDD SW0NWCDD ; 
  10 SWHAINMM SWHAINMM ; 
  10 SL8WONBR SL8WONBR ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 PCFSECD PCFSECD ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XOWCD XOWCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XEGCD XEGCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XSLCD XSLCD ; 
  10 SWHCRTUN SWHCRTUN ; 
  10 SWGPSEQN SWGPSEQN ; 
  10 SWCLNENB SWCLNENB ; 
  10 CACHGFL CACHGFL ; 
  10 SW0NWERC SW0NWERC ; 
  10 SW0NWECC SW0NWECC ; 
    15 SW0NWECN SW0NWECN ; 
      20 SW0NWEC1 SW0NWEC1 ; 
      20 SW0NWEC2 SW0NWEC2 ; 
      20 SW0NWEC3 SW0NWEC3 ; 
      20 SW0NWEC4 SW0NWEC4 ; 
  10 SW0NWECB SW0NWECB ; 
  10 SW0NWFTM SW0NWFTM ; 
  10 SW0NWP14 SW0NWP14 ; 
  10 SW0NWCMP SW0NWCMP ; 
end // end SW0NW01

Record SW0NW02 type basicRecord
  10 SW0NWLEN SW0NWLEN ; 
  10 SW0NWARY SW0NWARY ; 
    15 XWHCD XWHCD ; 
    15 SWEPLLNB SWEPLLNB ; 
    15 PKDNCSQN PKDNCSQN ; 
    15 XXXUSRID XXXUSRID ; 
    15 SW0NWIDT SW0NWIDT ; 
      20 SW0NWICC SW0NWICC ; 
      20 SW0NWIYY SW0NWIYY ; 
      20 SW0NWIMM SW0NWIMM ; 
      20 SW0NWIDD SW0NWIDD ; 
    15 SWHAINMM SWHAINMM ; 
    15 SWAINSTP SWAINSTP ; 
    15 SL8WONBR SL8WONBR ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 PC3PONBR PC3PONBR ; 
    15 SWVWPOID SWVWPOID ; 
    15 SWVWPOSE SWVWPOSE ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XSLCD XSLCD ; 
    15 SWHCRTUN SWHCRTUN ; 
    15 SWGPSEQN SWGPSEQN ; 
    15 SWCLNENB SWCLNENB ; 
    15 SW0NWIX3 SW0NWIX3 ; 
    15 SW0NWMX2 SW0NWMX2 ; 
    15 SW0NWRCF SW0NWRCF ; 
    15 SW0NWAY2 SW0NWAY2 [20] ; 
      20 SWYTACD SWYTACD ; 
      20 SW0NWPCT SW0NWPCT ; 
      20 SW0NWEC9 SW0NWEC9 ; 
        25 SW0NWECX SW0NWECX ; 
      20 SWIERQTY SWIERQTY ; 
end // end SW0NW02

Record SW0NW03 type basicRecord
  5 SW0NWKEY SW0NWKEY ; 
    10 XWHCD XWHCD ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 XGPCD XGPCD ; 
    10 PC3PONBR PC3PONBR ; 
    10 SWGPSEQN SWGPSEQN ; 
    10 SWCLNENB SWCLNENB ; 
    10 PKDNCSQN PKDNCSQN ; 
end // end SW0NW03

Record SW0NW04 type basicRecord
  10 SW0NWW04 SW0NWW04 ; 
    15 SW0NWEOF SW0NWEOF ; 
    15 SW0NWFFL SW0NWFFL ; 
    15 SW0NW4DX SW0NW4DX ; 
    15 SW0NWMAX SW0NWMAX ; 
    15 SW0NWATB SW0NWATB [100] ; 
      20 SWYTACD SWYTACD ; 
end // end SW0NW04

// user first init
DataItem SW0NMINT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0NMLNM char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0NW4DX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// the MAIN LEVEL
DataItem SW0NWARY char(330)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0NWATB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0NWAY2 char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current year
DataItem SW0NWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current day
DataItem SW0NWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem SW0NWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current month
DataItem SW0NWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare plan key flag
DataItem SW0NWCMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current year
DataItem SW0NWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem SW0NWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual characters -pos 1
DataItem SW0NWEC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual characters -pos 2
DataItem SW0NWEC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual characters -pos 3
DataItem SW0NWEC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual characters -pos 4
DataItem SW0NWEC4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XTE_TASK_ERR_CD
DataItem SW0NWEC9 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary error code
DataItem SW0NWECB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error code character
DataItem SW0NWECC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error code numeric
DataItem SW0NWECN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// character version of task erro
DataItem SW0NWECX char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0NWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0NWERC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of set switch for plcpo
DataItem SW0NWES1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of set switch for plnsy
DataItem SW0NWES2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of set switch for plnlc
DataItem SW0NWES3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of set switch for plnta
DataItem SW0NWES4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of set switch for xte00
DataItem SW0NWES5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0NWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch
DataItem SW0NWFTM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inspection century
DataItem SW0NWICC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inspection day
DataItem SW0NWIDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inspection date
DataItem SW0NWIDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inspection month
DataItem SW0NWIMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map
DataItem SW0NWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map
DataItem SW0NWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sw0nw02 record's index
DataItem SW0NWIX3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum for map
DataItem SW0NWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indexes
DataItem SW0NWIXS char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inspection year/month
DataItem SW0NWIYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inspection year
DataItem SW0NWIYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0NWKEY char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem SW0NWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0NWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sw0nw02 maximum index- detail
DataItem SW0NWMX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pf14 requested
DataItem SW0NWP14 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// task code protect indicator
DataItem SW0NWPCT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// receiving flag
DataItem SW0NWRCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header Data has changed
DataItem SW0NWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail Data has changed
DataItem SW0NWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0NWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0NWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// switches
DataItem SW0NWSWS char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0NWW04 char(206)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

