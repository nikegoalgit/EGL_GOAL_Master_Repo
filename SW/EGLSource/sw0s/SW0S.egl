package sw0s;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0S ****
// This application allows users to select specific containers
// for comparison or updating. The user will enter the
// warehouse and the plan number. The user can also enter
// any container number(s) needed or none at all. If no
// containers are entered, the program will create and display
// a list of containers based on the warehouse and the plan
// number. From here the user can select the specific
// containers to be used for comparison or updating.
// 
// Once the user has selected the specific containers, he/she
// must specify whether the function will be compare or update
// and set the "okay to submit" flag to yes or no. If "yes" was
// entered, the program will submit a batch job. If "no" was
// entered, the program will leave the warehouse, plan number
// and list of containers, but it will clear out all container
// selections, the function flag and the "okay to submit" flag.
// 
// The user can also transfer out of this applicaiton by
// using one of the PF keys displayed at the bottom of the
// map, or by entering fast path information (also at the
// bottom of the map).
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/20/90  BANTHO  New application.
// e0001    01/03/91  rchini  The 2 JCL tables containing the
//                            parms for the batch programs did
//                            not have the correct layout.  In
//                            addition, the parms were not
//                            getting built correctly for the
//                            batch programs.
// 0002     01/09/91  CENGEL  Modified logic in SW0S500 to
//                            default to a function code of
//                            'C' (comparison) if the function
//                            field was left blank.
// 0002     01/18/91  jcampb  default function to 'c'
// e0003    01/28/91  rchini  Changed the error message for
//                            invalid value entered for the
//                            okay to submit field.
// e0004    02/20/91  rchini  When a container is submitted for
//                            update, the sl-cntnr-po-rcn-fl
//                            (swfcrcfl) must be set to 'N'.
//                            Added logic to test the flag.
// e0005    03/01/91  rchini  An incorrect error message was
//                            being used in SW0S510.  A new
//                            error message has been created.
// e0006    03/14/91  ryonke  add proc to jcl that executes
//                            the availabilty alternate
//                            inventory update.
// MAINT    01/31/92  GRAY    INITIALIZE RECORDS AND MAPS
// WILRCV   03/30/93  BGILDE  ADDED EDIT CHECKS TO VERIFY WHEN
//                            UPDATE FUNCTION IS VALID.
// WILRCV   04/27/93  mpluth  added the SL4751 and SL4791 to
//                            the update JCL.  Also, added
//                            the PRINTER field to the screen.
// WILRCV   06/24/93  mpluth  fixed code in SW0S525 so the
//                            update cannot be submitted until
//                            all work orders have been
//                            created.
// WILRCV   10/13/93  mpluth  fixed code in SW0S525 so the
//                            update can be submitted even
//                            though not all work order have
//                            been created.  (temporary fix
//                            until sl0w is fixed)
// ASW001   12/29/95  hkempe  Recompiled due to VPLCPO01 table
//                            change.
// ASW001   02/16/96  ribane  Changed SW0ST01 to add execution
//                            of proc sl5261
// maint    01/14/97  dmays   increased plan number on screen
//                            to 9 chars.
// retroft  09/24/98  sjohn6  do not allow updates between
//                            19:00 and 03:00 for dcms
// *********************
Program SW0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SL1REC SL1REC; // record
  SLLREC SLLREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0SW00 SW0SW00; // record
  SW0SW01 SW0SW01; // record
  SW0SW02 SW0SW02; // record
  SW0SW03 SW0SW03; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SW0ST01 {deleteAfterUse = yes}; // table
  use SW0ST02 {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use SW0SM.SW0SM001,  // forms
      SW0SM.TA0PM001, 
      SW0SM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set SW0SM001 initial; /* M001 input/output*/
    set TA0PM001 initial;
    set XX0XM001 initial;
    set SW0SW01 empty; /* Working storage*/
    set SW0SW02 empty; /* Working storage*/
    set SW0SW03 empty; /* Working storage*/
    set XX0XW02 empty;
    set SQLCA empty; /* SQL communication area*/
    set SL1REC empty;
    set SLLREC empty;
    set SWEREC empty;
    set SWFREC empty;
    set SY2REC empty;
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Error diagnosis w-s record*/
    set TA6REC empty; /* Background job subroutine parameters*/

    SW0SW01.SW0SWSWR = "N"; /* request for data switch*/
    SW0SW01.SW0SWSWF = "Y"; /* format the map switch*/
    SW0SM001.SW0SMSUB = " "; /* ok to submit field*/

     /* ------------------------------------------------------------*/
     /* Initialize any data that was passed in the commarea*/
     /* ------------------------------------------------------------*/

    if (SLWREC.XWHCD > " ") /* was warehouse passed ?*/
      SW0SM001.XWHCD = SLWREC.XWHCD; /* set initial whse code*/
      SW0SW01.XWHCD = SLWREC.XWHCD; /* intialize work store*/
    end

    if (SLWREC.SWEPLLNB > 0) /* was receiving plan passed ?*/
      SW0SM001.SWEPLLNB = SLWREC.SWEPLLNB; /* set initial rcv plan code*/
      SW0SW01.SWEPLLNB = SLWREC.SWEPLLNB; /* intialize work store*/
    end

    if (SLWREC.XWHCD != " " /* there is a warehouse*/
     && SLWREC.SWEPLLNB > 0) /* there is a plan*/

      SW0SW01.SW0SWSWR = "Y"; /* yes to request for data*/

    end

    SW0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* set current date in map*/
    SW0SM001.XXXMODID = COMMAREA.CAFROMAP; /* set module id in map*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/

    SW0SW01.SW0SWIXL = 12; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0S001; /* Converse the main process*/

    SW0S001: SW0S001();
    goto SW0S001;
  end // end main
end // end SW0S

// Plan Receipt Comparison Update
Function SW0S001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0S100(); /* Obtain the data to display*/

  SW0S200(); /* Format and display the map*/

  SW0S300(); /* Check attention identifier*/

  SW0S400(); /* Reset fields to normal intensity*/

  SW0S500(); /* Verify the data that was entered*/

  SW0S600(); /* Process valid input request*/


end // end SW0S001

// Obtain the data to display
Function SW0S100()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0SW01.SW0SWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  set SW0SW01 empty; /* M001 display storage*/

  SW0SW01.XWHCD = SW0SM001.XWHCD; /* whse code*/
  SW0SW01.SWEPLLNB = SW0SM001.SWEPLLNB; /* plan number*/
  SW0SW01.SW0SWFNC = SW0SM001.SW0SMFNC; /* function code*/
  SW0SW01.SW0SWSUB = SW0SM001.SW0SMSUB; /* ok to submit flag*/
  SW0SW01.XROPDEST = SW0SM001.XROPDEST; /* ok to submit flag*/

   /* ------------------------------------------------------------*/
   /* Obtain the table rows to be displayed.*/
   /* ------------------------------------------------------------*/

  SW0S110(); /* Obtain the table rows*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0SW01.SW0SWSWR = "N"; /* Request for data switch*/

end // end SW0S100

// obtain requested data
Function SW0S110()
   /* ------------------------------------------------------------*/
   /* Select the rows to display from the table.*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* Clear row storage area*/

  SWFREC.XWHCD = SW0SW01.XWHCD; /* whse code*/
  SWFREC.SWEPLLNB = SW0SW01.SWEPLLNB; /* plan number*/
  SWFREC.TSHCNTNR = "*"; /* container wild card*/
  SWFREC.XGPCD = "*"; /* GPC code*/
  SWFREC.PC3PONBR = -1; /* po nbr wild card*/

  SW0S112(); /* select set dstloc.vplcpo01*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, fetch all rows*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    SW0S115(); /* fetch the containers*/
  else
    SLWREC.XXXLOCID = "110"; /* module identification*/
    converseLib.validationFailed(215); /* no containers found*/
  end
end // end SW0S110

// select set dstloc.vplcpo01
Function SW0S112()
  try
    call "IO5340" ("S1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, fetch all rows*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* no rows found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  SLWREC.XXXLOCID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0S112

// process containers
Function SW0S115()
  SW0SW01.SW0SWIXM = 1; /* initialize index*/
  SW0SW01.SW0SWDTA = "Y"; /* set switch on*/

  set SWFREC empty; /* clear record area*/

   /* ------------------------------------------------------------*/
   /* Fetch the rows from the table and save in w-s.*/
   /* ------------------------------------------------------------*/

  set SW0SM001.SW0SMSEL[1] cursor; /* position cursor*/

  while (SW0SW01.SW0SWDTA == "Y") /* while there is data*/
    SW0S120(); /* fetch the next row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (SW0SW01.SW0SWIXM == 13)
        SW0SW01.SW0SWDTA = "N";
        converseLib.validationFailed(178);
      end
      if (SWFREC.TSHCNTNR != SW0SW01.SW0SWSVC /* new cntnr nbr ?*/
       && SW0SW01.SW0SWIXM <= 12)            
        SW0SW01.TSHCNTNR[SW0SWIXM] = SWFREC.TSHCNTNR; /* save in w-s*/
        SW0SW01.SW0SWSVC = SWFREC.TSHCNTNR; /* save in w-s*/
        SW0SW01.SW0SWSWF = "Y"; /* format the map switch*/
        SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM + 1; /* set index up by 1*/
      end
    else
      SW0SW01.SW0SWDTA = "N"; /* set switch off*/
      if (SW0SW01.SW0SWIXM == 1) /* if index set to 1*/
        SLWREC.XXXLOCID = "115"; /* module identification*/
        converseLib.validationFailed(215); /* no containers found*/
        set SW0SM001.SW0SMFNC cursor; /* set cursor*/
      end
    end
  end

  SW0S125(); /* close file*/
end // end SW0S115

// fetch next dstloc.vplcpo01
Function SW0S120()
  try
    call "IO5340" ("N1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next row*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* next container found*/
     || SQLCA.VAGen_SQLCODE == 100) /* no more containers*/
      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  SLWREC.XXXLOCID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0S120

// close dstloc.vplcpo01
Function SW0S125()
  try
    call "IO5340" ("C1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close file*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  SLWREC.XXXLOCID = "125"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE THE TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0S125

// Format and display the map
Function SW0S200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0SW01.SW0SWSWR == "Y"           /* Obtain data failed*/
   || converseVar.validationMsgNum == 0 /* or no error found*/
   || converseVar.validationMsgNum == 178) /* too many lines for display*/
    if (SW0SW01.SW0SWSWF == "Y") /* Map must be formatted*/
      SW0S210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information*/
   /* ------------------------------------------------------------*/

  SW0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW0SM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0SM001.CAITEM = COMMAREA.CAITEM; /* application data*/
  if (SW0SM001.SW0SMFNC == " ")
    SW0SM001.SW0SMFNC = "C";
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0SM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0SM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0SM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0SM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0SM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0SM001.CAITEM; /* application data*/


end // end SW0S200

// format the display data
Function SW0S210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0SM001 initial; /* M001 input/output area*/

  SW0SW01.SW0SWSWF = "N"; /* Format the map switch*/

  SW0SM001.XWHCD = SW0SW01.XWHCD; /* warehouse code*/
  SW0SM001.SWEPLLNB = SW0SW01.SWEPLLNB; /* plan number*/
  SW0SM001.SW0SMFNC = SW0SW01.SW0SWFNC; /* function code*/
  SW0SM001.SW0SMSUB = SW0SW01.SW0SWSUB; /* ok to submit*/
  SW0SM001.XROPDEST = SW0SW01.XROPDEST; /* report destination*/

   /* ------------------------------------------------------------*/
   /* Format the map data fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  SW0SW01.SW0SWIXM = 1; /* set index to 1*/

  while (SW0SW01.SW0SWIXM <= 12) /* for all 12 occurrances*/
    SW0SM001.TSHCNTNR[SW0SWIXM] = SW0SW01.TSHCNTNR[SW0SWIXM];
    SW0SM001.SW0SMSEL[SW0SWIXM] = SW0SW01.SW0SWSEL[SW0SWIXM];
    SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM + 1; /* set index up by 1*/
  end

  if (SW0SM001.TSHCNTNR[1] != " ")

    set SW0SM001.SW0SMSEL[1] cursor; /* set the cursor*/

  end


end // end SW0S210

// Check attention identifier
Function SW0S300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SW0SM001 initial; /* M002 input/output*/

    SW0SW01.SW0SWSWR = "N"; /* request for data*/
    SW0SW01.SW0SWSWF = "Y"; /* format screen*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH requested, transfer to the application*/
   /* ------------------------------------------------------------*/

  if (SW0SM001.CATOAP > " ") /* fast path was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSSL001(); /* exit to another application*/

      SW0SW01.SW0SWSWR = "N"; /* do not get data*/
      SW0SW01.SW0SWSWF = "Y"; /* format the map*/

      set SW0SM001.CATOAP cursor, bold;
      converseLib.validationFailed(11); /* invalid value*/
      SLWREC.XXXLOCID = "300"; /* module identification*/

    else
      SLWREC.XXXLOCID = "300";
      converseLib.validationFailed(4);
    end
    exit stack; /* exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6 /* or PF6 was pressed*/
   || converseVar.eventKey is pf9 /* or PF9 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0SM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* to Application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* to Application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* Application find code*/
    end

    if (converseVar.eventKey is pf9) /* PF9 was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* Application code*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "SW0B"; /* Application code*/
    end

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf4   /* and PF4 was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6)  /* and PF6 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end SW0S300

// Reset highlighted fields
Function SW0S400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0SM001.XWHCD initialAttributes; /* warehouse*/
  set SW0SM001.SWEPLLNB initialAttributes; /* plan*/
  set SW0SM001.SW0SMFNC initialAttributes; /* function code*/
  set SW0SM001.SW0SMSUB initialAttributes; /* ok to submit code*/
  set SW0SM001.CATOAP initialAttributes; /* fast path*/
  set SW0SM001.CAITEM initialAttributes; /* fast path detail*/
  set SW0SM001.XROPDEST initialAttributes; /* report destination*/

  SW0SW01.SW0SWIXM = 1; /* set index to 1*/

  while (SW0SW01.SW0SWIXM <= 12) /* do for all 12 occurrances*/
    set SW0SM001.SW0SMSEL[SW0SWIXM] initialAttributes; /* selection fields*/
    set SW0SM001.TSHCNTNR[SW0SWIXM] initialAttributes; /* selection fields*/
    SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM + 1;
  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0SM001.XWHCD == "?") /* warehouse list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

      exit stack; /* Exit to display map*/

    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes*/
   /* ------------------------------------------------------------*/

  if (SW0SM001.XWHCD == "?") /* warehouse list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES"; /* Heading*/

    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0SM001.XWHCD = SW0SW01.XWHCD; /* Restore prior code*/
    else
      SW0SM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/

  exit stack; /* Exit to display map*/

end // end SW0S400

// Verify the entered data
Function SW0S500()
   /* ------------------------------------------------------------*/
   /* If data entered in the fast path area, indicate that it is*/
   /* invalid.*/
   /* ------------------------------------------------------------*/

  if (SW0SM001.CAITEM > " ") /* application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0SM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* invalid value entered*/

  end

   /* ------------------------------------------------------------*/
   /* Flush screen if warehouse/ plan has changed*/
   /* or either are now empty*/
   /* ------------------------------------------------------------*/
  if (SW0SM001.XWHCD != SW0SW01.XWHCD       /* warehouse changed*/
   || SW0SM001.SWEPLLNB != SW0SW01.SWEPLLNB /* plan changed*/
   || SW0SM001.XWHCD == " "                 /* warehouse empty*/
   || SW0SM001.SWEPLLNB == 0)               /* no plan*/

    SW0SW01.SW0SWIXM = 1;
    while (SW0SW01.SW0SWIXM <= 12)

      SW0SM001.TSHCNTNR[SW0SWIXM] = "             ";
      SW0SM001.SW0SMSEL[SW0SWIXM] = " ";
      SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM + 1;

    end
    SW0SM001.SW0SMSUB = " ";
  end

   /* ------------------------------------------------------------*/
   /* If submit is 'no', erase the detail fields*/
   /* ------------------------------------------------------------*/

  if (SW0SM001.SW0SMSUB == "N") /* submit is 'no'*/
    SW0SM001.SW0SMFNC = " "; /* erase the function*/
    SW0SM001.SW0SMSUB = " "; /* erase the submit field*/
    SW0SW01.SW0SWIXM = 1; /* set counter*/

    while (SW0SW01.SW0SWIXM <= 12)
      SW0SM001.TSHCNTNR[SW0SWIXM] = " "; /* erase container*/
      SW0SM001.SW0SMSEL[SW0SWIXM] = " "; /* erase select field*/
      SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM + 1; /* increase counter*/
    end
    move " " to SW0SW01.SW0SWGRP[1] for all; /* erase working storage*/
  end

   /* ------------------------------------------------------------*/
     /* set switches and indexes*/
   /* ------------------------------------------------------------*/

  SW0SW01.SW0SWENT = "N"; /* container entered sw off*/
  SW0SW01.SW0SWIXM = 1; /* initialize index*/

   /* ------------------------------------------------------------*/
     /* determine if any containers entered*/
   /* ------------------------------------------------------------*/

  SW0SW01.SW0SWIXM = 1; /* initialize index*/
  while (SW0SW01.SW0SWIXM <= 12) /* for all 12 possible containers*/
    if (SW0SM001.TSHCNTNR[SW0SWIXM] != " ") /* if entered*/
      SW0SW01.SW0SWENT = "Y"; /* container entered sw on*/
    end
    SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM + 1; /* set index up by 1*/
  end

   /* ------------------------------------------------------------*/
          /* validate okay-to-submit field*/
   /* ------------------------------------------------------------*/

  if (SW0SW01.SW0SWENT == "Y")
    if (SW0SM001.SW0SMSUB != "Y" /* ok to submit NE 'Y' and 'N'*/
     && SW0SM001.SW0SMSUB != "N")

      set SW0SM001.SW0SMSUB cursor, bold;
      converseLib.validationFailed(257); /* only 'y' or 'n' are valid values*/
      SLWREC.XXXLOCID = "500"; /* Module identification*/

    end
  end

   /* ------------------------------------------------------------*/
          /* validate containers*/
   /* ------------------------------------------------------------*/

  SW0SW01.SW0SWERR = "N"; /* reset cntnr/sel error flag*/
  SW0SW01.SW0SWICH = "N";
  SW0SW01.SW0SWENT = "N";
  SW0SW01.SW0SWIXM = 12;

  while (SW0SW01.SW0SWIXM > 0)

    if (SW0SM001.TSHCNTNR[SW0SWIXM] != " ") /* there is a container*/
      SW0S525(); /* validate container*/
      SW0SW01.SW0SWENT = "Y"; /* tag there is a cntnr*/
    end

    if (SW0SM001.SW0SMSEL[SW0SWIXM] != " ") /* if anything entered*/
      if (SW0SM001.SW0SMSEL[SW0SWIXM] == "S") /* if 's' entered*/
        SW0SW01.SW0SWICH = "Y"; /* indicates valid selection*/
        if (SW0SM001.TSHCNTNR[SW0SWIXM] == " ") /* if no container entered*/
          SLWREC.XXXLOCID = "500";
          converseLib.validationFailed(11); /* invalid value*/
          set SW0SM001.SW0SMSEL[SW0SWIXM] cursor, bold;
        end
      else
        SLWREC.XXXLOCID = "500"; /* module identification*/
        converseLib.validationFailed(228); /* only 's' allowed*/
        set SW0SM001.SW0SMSEL[SW0SWIXM] cursor, bold;
      end
    end
    SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM - 1; /* decrement index by 1*/
  end

  if (SW0SW01.SW0SWENT == "Y") /* if containers entered*/
    if (SW0SW01.SW0SWICH == "N") /* indicates no selection*/
      set SW0SM001.SW0SMSEL[1] cursor, bold; /* Highlight*/
      SLWREC.XXXLOCID = "530"; /* module identification*/
      converseLib.validationFailed(240); /* one must be selected*/
    end
  end

   /* ------------------------------------------------------------*/
   /* validate submit request against the work order table. only*/
   /* containers with an update function are checked.*/
   /* ------------------------------------------------------------*/

  SW0S540(); /* select vplnhd01 flags*/

  if (converseVar.validationMsgNum == 0 /* if no errors*/
   && SW0SM001.SW0SMFNC == "U"          /* it's an update*/
   && SW0SM001.XWHCD != " "             /* there is a warehouse*/
   && SW0SM001.SWEPLLNB != 0)           /* there is a plan*/
    if (SW0SM001.XWHCD != "07") /**/
      if (SWEREC.SL-PRDCTN-SAS-FL != "Y")
        SW0SW01.SW0SWIXM = 12; /* set index to 12*/
        while (SW0SW01.SW0SWIXM > 0) /* for each container*/
          if (SW0SM001.SW0SMSEL[SW0SWIXM] != " ") /* if container selected*/
            if (SW0SM001.TSHCNTNR[SW0SWIXM] != " ") /* if container entered*/
              SW0S510(); /* validate submit request*/
            end
          end
          SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM - 1; /* set index down by 1*/
        end
      else
        set SW0SM001.SW0SMSEL[1] cursor, bold; /* Highlight*/
        SLWREC.XXXLOCID = "530"; /* module identification*/
        converseLib.validationFailed(436); /* set aside detected for location*/
      end
    else
      if (SWEREC.SL-PRDCTN-SAS-FL != "Y")
        if (SWEREC.SL-LAST-CRTN-FL == "Y")
          SW0SW01.SW0SWIXM = 12; /* set index to 12*/
          while (SW0SW01.SW0SWIXM > 0) /* for each container*/
            if (SW0SM001.SW0SMSEL[SW0SWIXM] != " ") /* if container selected*/
              if (SW0SM001.TSHCNTNR[SW0SWIXM] != " ") /* if container entered*/
                SW0S510(); /* validate submit request*/
              end
            end
            SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM - 1; /* set index down by 1*/
          end
        else
          set SW0SM001.SWEPLLNB cursor, bold; /* Highlight*/
          SLWREC.XXXLOCID = "530"; /* module identification*/
          converseLib.validationFailed(435); /* last carton not detected*/
        end
      else
        set SW0SM001.SW0SMSEL[1] cursor, bold; /* Highlight*/
        SLWREC.XXXLOCID = "530"; /* module identification*/
        converseLib.validationFailed(436); /* set aside detected for location*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the containers against the receiving table.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* there are no errors*/
   && SW0SM001.XWHCD != " "             /* there is a warehouse*/
   && SW0SM001.SWEPLLNB != 0)           /* there is a plan*/

    if (SW0SM001.SW0SMFNC == "U" /* update requested*/
     || SW0SM001.SW0SMFNC == "C") /* comparison requested*/

      SW0SW01.SW0SWIXM = 12; /* set the index*/
      while (SW0SW01.SW0SWIXM > 0)

        if (SW0SM001.SW0SMSEL[SW0SWIXM] != " "
         && SW0SM001.TSHCNTNR[SW0SWIXM] != " ")

          SW0S517();

        end
        SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM - 1;
      end
    end
  end

   /* ------------------------------------------------------------*/
             /* check function code*/
   /* ------------------------------------------------------------*/

  if (SW0SM001.SW0SMFNC != "C" /* function NE 'C' or 'U' or blank*/
   && SW0SM001.SW0SMFNC != "U" 
   && SW0SM001.SW0SMFNC != " ")
    set SW0SM001.SW0SMFNC cursor, bold;
    converseLib.validationFailed(9);
    SLWREC.XXXLOCID = "500"; /* Module identification*/
  else
    if (SW0SM001.SW0SMFNC == " ")
      SW0SM001.SW0SMFNC = "C"; /* assign default value of 'C'*/
    end
  end

   /* ------------------------------------------------------------*/
                /* check plan number*/
   /* ------------------------------------------------------------*/

  SW0SW01.SW0SWPLF = "N"; /* initialize plan flag*/
  if (SW0SM001.SWEPLLNB <= 0) /* no data entered*/
    SLWREC.XXXLOCID = "500"; /* Module identification*/
    converseLib.validationFailed(9);
    set SW0SM001.SWEPLLNB cursor, bold;
    SW0SW01.SW0SWPLF = "Y"; /* set plan error*/
  else
    SW0S540(); /* validate plan number*/
  end

   /* ------------------------------------------------------------*/
   /* validate the plan receiving code*/
   /* ------------------------------------------------------------*/

  if (SW0SW01.SW0SWPLF == "N") /* there is no plan error*/

    if (SW0SM001.SW0SMFNC == "C" /* there is a valid func*/
     || SW0SM001.SW0SMFNC == "U")

      if (SW0SM001.SW0SMFNC == "U") /* the function is update*/
        if (SW0SW01.XRPCD == "IP") /* recv'ng plan code must be*/
           /* next sentence                            'ip'*/
        else
          SLWREC.XXXLOCID = "500";
          converseLib.validationFailed(218);
          set SW0SM001.SWEPLLNB cursor, bold;
        end
      else

        if (SW0SW01.XRPCD == "IP" /* the function is comparison*/
         || SW0SW01.XRPCD == "SB" /* and the rec'ng code is good*/
         || SW0SW01.XRPCD == "SI" 
         || SW0SW01.XRPCD == "SC")
           /* next sentence*/
        else
          SLWREC.XXXLOCID = "500";
          converseLib.validationFailed(218);
          set SW0SM001.SWEPLLNB cursor, bold;
        end
      end
    end
  end


   /* ------------------------------------------------------------*/
               /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0SM001.XWHCD in XWHTBL.XWHCD /* in warehouse table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0SM001.XWHCD cursor, bold;
    converseLib.validationFailed(11);
  end

   /* ------------------------------------------------------------*/
   /* do not allow updates at night (for DCMS conversion)*/
   /* ------------------------------------------------------------*/

  if (SW0SM001.SW0SMFNC == "U")
    XX0XS01(); /* get time*/
    if (XX0XW01.XX0XWTIM >= 1900
     || XX0XW01.XX0XWTIM <= 0100)
      SLWREC.XXXLOCID = "500"; /* Module identification*/
      set SW0SM001.SW0SMFNC cursor, bold;
      converseLib.validationFailed(475);
    end
  end

  if (SW0SM001.SW0SMFNC == "C") /* if the comparison function is entered*/
    SW0SW01.XROPDEST = " "; /* move spaces to report destination*/
    SW0SM001.XROPDEST = " "; /* move spaces to report destination*/
  else
    SW0SW01.XROPDEST = SW0SM001.XROPDEST; /* report destination*/
  end

   /* ------------------------------------------------------------*/
     /* if no containers entered, set switch and return*/
   /* ------------------------------------------------------------*/

  if (SW0SW01.SW0SWENT == "N" /* if no containers entered*/
   && converseVar.validationMsgNum == 0) /* no errors*/
    SW0SW01.SW0SWSWR = "Y"; /* set request for data switch*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end SW0S500

// validate submit request
Function SW0S510()
   /* ------------------------------------------------------------*/
     /* validate submit request                   dstloc.vwophd01*/
   /* ------------------------------------------------------------*/

  set SLLREC empty; /* clear record area*/

  SLLREC.XWHCD = SW0SM001.XWHCD;
  SLLREC.SWEPLLNB = SW0SM001.SWEPLLNB;
  SLLREC.TSHCNTNR = SW0SM001.TSHCNTNR[SW0SWIXM];

  SW0S512(); /* select set 5*/

  SW0S514(); /* fetch next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    if (SLLREC.SL8WOPFL != "Y")
      SLWREC.XXXLOCID = "510";
      converseLib.validationFailed(384); /* can't update, not all w/o printed or updated*/
      set SW0SM001.TSHCNTNR[SW0SWIXM] cursor, bold;
    end
  end

  SW0S516(); /* close data base*/
end // end SW0S510

// select set dstloc.vwophd01
Function SW0S512()
  try
    call "IO5400" ("S5", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* data found*/
      return;
    end
  end

  SLWREC.XXXLOCID = "512"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "512"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;
end // end SW0S512

// fetch next dstloc.vwophd01
Function SW0S514()

  try
    call "IO5400" ("N5", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
  end

  SLWREC.XXXLOCID = "514"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "514"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;
end // end SW0S514

// close dstloc.vwophd01
Function SW0S516()
  try
    call "IO5400" ("C5", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* closed ok*/
    return;
  end

  SLWREC.XXXLOCID = "516"; /* module identification*/
  converseLib.validationFailed(1);
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "516"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;
end // end SW0S516

// select set dstloc.vrlhdr01
Function SW0S517()
  set SL1REC empty;

  SL1REC.XWHCD = SW0SM001.XWHCD;
  SL1REC.TS3CNTNR = SW0SM001.TSHCNTNR[SW0SWIXM];
  SL1REC.YRSCD = "*";

  try
    call "IO1570" ("S ", SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* data found*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      SW0S519();

      return;
    end
  end

  SLWREC.XXXLOCID = "517"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "517"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* table view name*/
  TA1REC.TA1TBLKE = SL1REC.SL1KEY; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;
end // end SW0S517

// edit the receiving code
Function SW0S519()


  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/

    converseLib.validationFailed(267);
    SLWREC.XXXLOCID = "519";
    set SW0SM001.TSHCNTNR[SW0SWIXM] cursor, bold;

    return;
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    if (SW0SM001.SW0SMFNC == "U") /* this is an update*/
      if (SL1REC.YRSCD == "02" /* valid rec'vg stat code*/
       || SL1REC.YRSCD == "03")
         /* next sentence*/
      else
        converseLib.validationFailed(317); /* receiving status invalid*/
        SLWREC.XXXLOCID = "519";
        set SW0SM001.TSHCNTNR[SW0SWIXM] cursor, bold;
      end
    else
      if (SL1REC.YRSCD == "01" /* this is a comparison*/
       || SL1REC.YRSCD == "02") /* with a valid rec'vg stat code*/
         /* next sentence*/
      else
        converseLib.validationFailed(317); /* receiving stat invalid*/
        SLWREC.XXXLOCID = "519";
        set SW0SM001.TSHCNTNR[SW0SWIXM] cursor, bold;
      end
    end
  end
end // end SW0S519

// validate containers
Function SW0S525()
   /* ------------------------------------------------------------*/
     /* validate each container entered*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* clear record area*/

  SWFREC.XWHCD = SW0SM001.XWHCD; /* warehouse code*/
  SWFREC.SWEPLLNB = SW0SM001.SWEPLLNB; /* plan number*/
  SWFREC.TSHCNTNR = SW0SM001.TSHCNTNR[SW0SWIXM]; /* container number*/

  SW0S526(); /* open file*/

  SW0SW01.SW0SWDTA = "Y"; /* set loop control switch*/

  while (SW0SW01.SW0SWDTA == "Y") /* do until found or not found*/

    SW0S527(); /* fetch next row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* data found*/
      if (SWFREC.TSHCNTNR == SW0SM001.TSHCNTNR[SW0SWIXM]) /* container found*/

        if (SW0SM001.SW0SMFNC == "U" /* if this is an update*/
         && SW0SM001.SW0SMSEL[SW0SWIXM] == "S") /* and this cntnr selected*/

          /* we need to validate the plan reconciliation flag if this*/
          /* container has been selected for update.  if the flag = 'Y',*/
          /* this container will be flagged as an error.*/

          if (SWFREC.SWFCRCFL == "Y") /* and reconciliation flag = 'Y'*/
            set SW0SM001.TSHCNTNR[SW0SWIXM] bold; /* highlight cntnr*/
            set SW0SM001.SW0SMSEL[SW0SWIXM] cursor; /* highlight cntnr*/
            SLWREC.XXXLOCID = "525"; /* module identification*/
            converseLib.validationFailed(383);
            SW0SW01.SW0SWDTA = "N"; /* quit loop*/
                                   /* cntnr has been reconciled - no submit*/
          else

             /* we need to validate the create plan work order flag*/
             /* if this container has been selected for update.  If*/
             /* the flag = 'Y', an error message will be displayed.*/

            if (SW0SW01.XWHCD == "51") /* if memphis apparel*/
              if (SWFREC.SWFCPWOF == "Y") /* and wo's*/
                                   /* still have to be created*/
                set SW0SM001.TSHCNTNR[SW0SWIXM] bold; /* highlight cntnr*/
                set SW0SM001.SW0SMSEL[SW0SWIXM] cursor; /* highlight cntnr*/
                SLWREC.XXXLOCID = "525"; /* module identification*/
                converseLib.validationFailed(452);
                SW0SW01.SW0SWDTA = "N"; /* quit loop*/
              end
            end
          end
        end
      else
        if (SWFREC.TSHCNTNR > SW0SM001.TSHCNTNR[SW0SWIXM])
                                   /* cntnr not found*/
          SW0SW01.SW0SWDTA = "N"; /* quit loop*/
          SLWREC.XXXLOCID = "525"; /* module identification*/
          converseLib.validationFailed(85); /* set error msg nbr*/
          set SW0SM001.TSHCNTNR[SW0SWIXM] cursor, bold; /* set attributes*/
        end
      end
    else
      SW0SW01.SW0SWDTA = "N"; /* quit loop*/
    end

  end

  SW0S528(); /* close file*/
end // end SW0S525

// select set dstloc.vplcpo01
Function SW0S526()
  try
    call "IO5340" ("S2", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* data found*/
      return;
    end
  else
    SLWREC.XXXLOCID = "526"; /* module identification*/
    if (sysVar.errorCode == "00000000" /* if good return*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
      converseLib.validationFailed(31);
      TA1REC.TA1FUNC = "POST";
    else
      converseLib.validationFailed(1);
      TA1REC.TA1FUNC = "RETN";
    end
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "526"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* table view name*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  exit stack;
end // end SW0S526

// fetch next dstloc.vplcpo01
Function SW0S527()

  try
    call "IO5340" ("N2", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
  end

  SLWREC.XXXLOCID = "527"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "527"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* table view name*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  exit stack;
end // end SW0S527

// close dstloc.vplcpo01
Function SW0S528()
  try
    call "IO5340" ("C2", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* closed ok*/
    return;
  end

  SLWREC.XXXLOCID = "528"; /* module identification*/
  converseLib.validationFailed(1);
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "528"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* table view name*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  exit stack;
end // end SW0S528

// validate plan number
Function SW0S540()

   /* ------------------------------------------------------------*/
     /* Verify Plan number                        dstloc.vplnhd01*/
   /* ------------------------------------------------------------*/

  set SWEREC empty;

  SWEREC.XWHCD = SW0SM001.XWHCD;
  SWEREC.SWEPLLNB = SW0SM001.SWEPLLNB;

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* row found*/
    SW0SW01.XRPCD = SWEREC.XRPCD; /* valid status code*/
     /* next sentence*/
  else
    SW0SW01.SW0SWPLF = "Y"; /* set plan error flag*/
    SLWREC.XXXLOCID = "540"; /* module identification*/
    if (sysVar.errorCode == "00000000" /* if good return*/
     && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/
      set SW0SM001.SWEPLLNB cursor, bold; /* set attributes*/
      converseLib.validationFailed(12);
    else
      if (sysVar.errorCode == "00000000" /* if good return*/
       && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
        converseLib.validationFailed(31);
        TA1REC.TA1FUNC = "POST";
      else
        converseLib.validationFailed(1);
        TA1REC.TA1FUNC = "POST";
      end
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
      TA1REC.TA1PGMNO = "540"; /* program number*/
      TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
      TA1REC.TA1TBLVU = "VPLNHD01"; /* table view name*/
      TA1REC.TA1TBLKE = SW0SM001.SWEPLLNB; /* table key*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
      exit stack; /* exit*/
    end

    return; /* exit*/
  end
end // end SW0S540

// Process valid input request
Function SW0S600()
  SW0SW01.XROPDEST = SW0SM001.XROPDEST; /* report destination*/

  if (SW0SM001.SW0SMSUB == "N") /* NOT ok to submit*/
    SW0SM001.SW0SMFNC = " "; /* clear function field*/
    SW0SM001.SW0SMSUB = " "; /* clear ok to submit field*/
    SW0SW01.SW0SWIXM = 1; /* initialize index*/
    while (SW0SW01.SW0SWIXM <= 12) /* for each line on screen*/
      SW0SM001.SW0SMSEL[SW0SWIXM] = " "; /* clear selection fields*/
      SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM + 1; /* set index up by 1*/
    end
    SLWREC.XXXLOCID = "600"; /* module identification*/
    converseLib.validationFailed(217); /* set msg nbr*/
    set SW0SM001.SW0SMFNC cursor; /* position cursor*/
    return;
  else /* ok to submit*/
    SW0SW01.SW0SWIXM = 1;
    while (SW0SW01.SW0SWIXM <= 12)
      if (SW0SM001.SW0SMSEL[SW0SWIXM] == "S")
        SW0SM001.SW0SMSEL[SW0SWIXM] = "*";
        set TA6REC empty; /* clear TA6REC for jcl & data*/
        SW0SW01.SW0SWXT1 = 1; /* initialize table #1 index*/
        SW0SW01.SW0SWXT2 = 1; /* initialize table #2 index*/
        TA6REC.TA6INDEX = 1; /* initialize index*/
        if (SW0SM001.SW0SMFNC == "C") /* comparison requested*/
          SW0S610(); /* submit comparison JCL*/
        else
          SW0S620(); /* submit update JCL*/
        end
        SW0S630();
      end
      SW0SW01.SW0SWIXM = SW0SW01.SW0SWIXM + 1;
    end
  end

  SW0SM001.XROPDEST = SW0SW01.XROPDEST; /* report destination*/

end // end SW0S600

// submit comparison JCL
Function SW0S610()
  while (TA6REC.TA6INDEX > 0) /* until end of table*/
    if (SW0ST01.TARTYPE[TA6INDEX] == "A") /* first parm for job card*/
      SW0ST01.SW0SWWH1[TA6INDEX] = SW0SM001.XWHCD; /* job card whse*/
    else
      if (SW0ST01.TARTYPE[TA6INDEX] == "B") /* second parm for job step*/
        SW0ST01.SW0SWWH2[TA6INDEX] = SW0SM001.XWHCD; /* jobstep whse*/
      else
        if (SW0ST01.TARTYPE[TA6INDEX] == "P") /* parameter statement*/
          SW0SW03.XWHCD = SW0SM001.XWHCD; /* move whse cd*/
          SW0SW03.TSHCNTNR = SW0SM001.TSHCNTNR[SW0SWIXM];
                                   /* container*/
          SW0SW03.SW0SWPLN = SWEREC.SWEPLLNB; /* plan nbr*/
          SW0SW03.SW0SWWOG = SWEREC.SL8WOGRP; /* wo grp nbr*/
          SW0SW03.SW0SWRC = "W"; /* record type*/
          SW0ST01.TARJCL[TA6INDEX] = SW0SW03.SW0SWREC;
          TA6REC.TARJCL[TA6INDEX] = SW0ST01.TARJCL[TA6INDEX];
          TA6REC.TARTYPE[TA6INDEX] = SW0ST01.TARTYPE[TA6INDEX];
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    if (SW0ST01.TARTYPE[TA6INDEX] != "P") /* parameter statement ?*/
      TA6REC.TARJCL[TA6INDEX] = SW0ST01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0ST01.TARTYPE[TA6INDEX];
    end
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0ST01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = -1; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* set index up by 1*/
    end

  end
end // end SW0S610

// submit update JCL
Function SW0S620()
  while (TA6REC.TA6INDEX > 0) /* until end of table*/
    if (SW0ST02.TARTYPE[TA6INDEX] == "A") /* first parm for job card*/
      SW0ST02.SW0SWWH1[TA6INDEX] = SW0SM001.XWHCD; /* job card whse*/
    else
      if (SW0ST02.TARTYPE[TA6INDEX] == "B") /* second parm for job step*/
        SW0ST02.SW0SWWH2[TA6INDEX] = SW0SM001.XWHCD; /* jobstep whse*/
      else
        if (SW0ST02.TARTYPE[TA6INDEX] == "P") /* parameter statement*/
          SW0SW03.XWHCD = SW0SM001.XWHCD; /* move whse cd*/
          SW0SW03.TSHCNTNR = SW0SM001.TSHCNTNR[SW0SWIXM];
                                   /* container*/
          SW0SW03.SW0SWPLN = SWEREC.SWEPLLNB; /* plan nbr*/
          SW0SW03.SW0SWWOG = SWEREC.SL8WOGRP; /* wo grp nbr*/
          SW0SW03.SW0SWRC = "W"; /* record type*/
          SW0ST02.TARJCL[TA6INDEX] = SW0SW03.SW0SWREC;
          TA6REC.TARJCL[TA6INDEX] = SW0ST02.TARJCL[TA6INDEX];
          TA6REC.TARTYPE[TA6INDEX] = SW0ST02.TARTYPE[TA6INDEX];
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    if (SW0ST02.TARTYPE[TA6INDEX] != "P") /* parameter statement ?*/
      TA6REC.TARJCL[TA6INDEX] = SW0ST02.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0ST02.TARTYPE[TA6INDEX];
    end
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0ST02.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = -1; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* set index up by 1*/
    end

  end
end // end SW0S620

// Submit the job
Function SW0S630()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.XURDEST = SW0SW01.XROPDEST; /* report destination*/

  if (SW0SM001.SW0SMFNC == "C") /* submitting comparison jcl*/
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL only*/
  else
    if (TA6REC.XURDEST == " ")
      TA6REC.TA6SUBSW = "Y"; /* Display map, tailor, submit jcl*/
    else
      TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL only*/
    end
  end


  TA6REC.TA6MSGSW = "Y"; /* return on-line msg at EOJ*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "630"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    if (SW0SM001.SW0SMFNC == "C") /* if compare function*/
      converseLib.validationFailed(196); /* submitted for comparison*/
    else
      converseLib.validationFailed(187); /* submitted for update*/
    end

    if (SW0SM001.SW0SMFNC == "C") /* submitting comparison jcl*/
      SW0SW01.XROPDEST = " "; /* report destination*/
    else
      SW0SW01.XROPDEST = TA6REC.XURDEST; /* report destination*/
    end

    return; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end

  exit stack; /* Exit to display map*/
end // end SW0S630

Record SW0SW00 type basicRecord
  10 TA5TSQIX TA5TSQIX ; 
end // end SW0SW00

//*** RECORD=SW0SW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0SW01 type basicRecord
  10 SW0SWERR SW0SWERR ; 
  10 SW0SWPLF SW0SWPLF ; 
  10 SW0SWIXL SW0SWIXL ; 
  10 XRPCD XRPCD ; 
  10 SW0SWIXM SW0SWIXM ; 
  10 SW0SWXT1 SW0SWXT1 ; 
  10 SW0SWXT2 SW0SWXT2 ; 
  10 SW0SWSWX SW0SWSWX ; 
  10 SW0SWSWR SW0SWSWR ; 
  10 SW0SWSWF SW0SWSWF ; 
  10 XWHCD XWHCD ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 SW0SWFNC SW0SWFNC ; 
  10 SW0SWSUB SW0SWSUB ; 
  10 XROPDEST XROPDEST ; 
  10 * char(1) ; 
  10 SW0SWGRP SW0SWGRP [12] ; 
    15 SW0SWSEL SW0SWSEL ; 
    15 TSHCNTNR TSHCNTNR ; 
  10 SW0SWDTA SW0SWDTA ; 
  10 SW0SWICH SW0SWICH ; 
  10 SW0SWSVC SW0SWSVC ; 
  10 SW0SWENT SW0SWENT ; 
end // end SW0SW01

//*** RECORD=SW0SW02 ****
// ------------------------------------------------------------
// Parameters for sw1001 - Plan Receipt Comparison/Update Submi
// ------------------------------------------------------------
// ***********************
Record SW0SW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 * char(66) ; 
end // end SW0SW02

//*** RECORD=SW0SW03 ****
// ------------------------------------------------------------
// WSl6341 Record Layout
// ------------------------------------------------------------
// ***********************
Record SW0SW03 type basicRecord
  5 SW0SWREC SW0SWREC ; 
    10 XWHCD XWHCD ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 XGPCD XGPCD ; 
    10 SW0SWPOI SW0SWPOI ; 
    10 SW0SWPLN SW0SWPLN ; 
    10 SW0SWWOG SW0SWWOG ; 
    10 SW0SWFL4 SW0SWFL4 ; 
    10 SW0SWRC SW0SWRC ; 
end // end SW0SW03

// container fetch switch
DataItem SW0SWDTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// container entered switch
DataItem SW0SWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cntnr/sel error flag
DataItem SW0SWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem SW0SWFL4 char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function code
DataItem SW0SWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// container array
DataItem SW0SWGRP char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection ok switch
DataItem SW0SWICH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem SW0SWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SW0SWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Plan error flag
DataItem SW0SWPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_RCV_PLAN_NBR
DataItem SW0SWPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id (not used here)
DataItem SW0SWPOI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record type
DataItem SW0SWRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wsl6341 record
DataItem SW0SWREC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection character
DataItem SW0SWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work subscript
DataItem SW0SWSUB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous container field
DataItem SW0SWSVC char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format the map switch
DataItem SW0SWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem SW0SWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem SW0SWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order group number
DataItem SW0SWWOG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for JCL table # 1
DataItem SW0SWXT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for JCL table # 2
DataItem SW0SWXT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

