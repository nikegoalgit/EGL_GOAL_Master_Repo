package sw0d;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0D ****
// This application allows a user to inquire and maintain rows
// in a DB2 table.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all information for that table row.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// If more that one line was selected on the first screen, the
// next selection is displayed when the user presses the ENTER
// key without making any change to the displayed data.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed, indicating the selections that were viewed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/17/88  USERID  New application.
// 0001     12/19/90  jcampb  change screens per sonia
// 0002     01/07/91  cengel  Logic coded to automatically
//                            scroll (display map SWODM003)
//                            through every line selected in
//                            map SW0DM002.  CSP procs SW0D360
//                            and SW0D460 received modification
//                            to support this.  Also, a new
//                            message - 328 - was added to let
//                            the user know when there were no
//                            more rows selected from SW0DM002
//                            to show.
//                            Logic coded to permit the user to
//                            select rows from the VPLNHD01
//                            DB2 table using only From Date,
//                            To Date, & Warehouse through the
//                            first screen (SW0DM001).  CSP
//                            proc SW0D153 modified.
// 0003    01/17/91  jcampb   added code to allow 'al' to be
//                            entered for 'all' xrpcds, fixed
//                            cursor position when multi po#
//                            found when entering pi/id type.
// 0004    02/12/91  ryonke   program changes for table changes
// 0005    03/11/91  cengel   SW0DW02 updated for table changes
// MAINT   01/30/92  GRAY     INITIALIZE ALL RECORDS AND MAPS
// tblchg  02/22/93  ryonke   program changes for table changes
// ASW001  12/29/95  hkempe   Recompiled due to VPLCPO01 table
//                            change.
// y2kproj 02-03-98  oricha   y2k modifications:  zero fill
//                            year on map m001;  sw0d151 remove
//                            logic treating 00 year as invalid
// *********************
Program SW0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0DW00 SW0DW00; // record
  SW0DW01 SW0DW01; // record
  SW0DW02 SW0DW02; // record
  SW0DW03 SW0DW03; // record
  SW0DW04 SW0DW04; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SWGREC SWGREC; // record
  SWVREC SWVREC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  X2CREC X2CREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XRPTBL; // table
  use XGPTBL; // table
  use XWHTBL; // table
  use SW0DM.SW0DM001,  // forms
      SW0DM.SW0DM002, 
      SW0DM.SW0DM003, 
      SW0DM.SW0DM004
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0DM001 initial; /* M001 input/output*/
    set SW0DM002 initial; /* M002 input/output*/
    set SW0DM003 initial; /* M003 input/output*/
    set SW0DM004 initial; /* M004 input/output*/
    set SW0DW00 empty; /* Working storage*/
    set SW0DW01 empty; /* M001 display storage*/
    set SW0DW02 empty; /* M002 display storage*/
    set SW0DW03 empty; /* M003 display storage*/
    set SW0DW04 empty; /* M004 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set ERRSQLCA empty;
    set SLVREC empty;
    set SWEREC empty;
    set SWFREC empty;
    set SWGREC empty;
    set SWVREC empty;
    set SYCREC empty;
    set TAEREC empty;
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Temporary storage parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XPCREC empty;
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set X2CREC empty;

    SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/
    SW0DW00.SW0DWSWF = "Y"; /* Format the map switch*/
    SW0DW00.SW0DWSWR = "Y"; /* Request for data switch*/

    COMMAREA.CAITEM = " "; /* Clear passed data*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0D001; /* Converse the main process*/


    SW0D001: SW0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0D001; /* Converse the main process*/


  end // end main
end // end SW0D

// Main process to display a map
Function SW0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SW0DWSWD == "1") /* Map 1 was requested*/

    SW0D100(); /* Display map 1*/

  else

    if (SW0DW00.SW0DWSWD == "2") /* Map 2 was requested*/

      SW0D200(); /* Display map 2*/

    else

      if (SW0DW00.SW0DWSWD == "3") /* Map 3 was requested*/

        SW0D300(); /* Display map 3*/

      else

        if (SW0DW00.SW0DWSWD == "4") /* Map 4 was requested*/

          SW0D400(); /* Display map 4*/

        else

          /* ------------------------------------------------------------*/
           /* Write the error to the Error Diagnosis Reporting Facility.*/
          /* ------------------------------------------------------------*/

          SLWREC.XXXLOCID = "001"; /* Module identification*/
          SLWREC.SLWMSGNO = 10; /* Unexpected error occurred*/

          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
          TA1REC.TA1MAPNO = SW0DW00.SW0DWSWD; /* Map number*/
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

          /* ------------------------------------------------------------*/
           /* Exit to display the application system menu.*/
          /* ------------------------------------------------------------*/

          COMMAREA.CATOAP = "SW0C"; /* TO application*/

          XSSLS10(); /* Exit to another application*/

          /* ------------------------------------------------------------*/
           /* Abnormally terminate the transaction if the exit failed.*/
          /* ------------------------------------------------------------*/

          TA1REC.TA1FUNC = "ABND"; /* Termination function*/

          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

        end
      end
    end

  end


end // end SW0D001

// List the rows in the table
Function SW0D100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0D110(); /* Obtain the data to display*/

  SW0D120(); /* Format and display the map*/

  SW0D130(); /* Check attention identifier*/

  SW0D140(); /* Reset fields to normal intensity*/

  SW0D150(); /* Verify the entered data*/

  SW0D160(); /* Process valid input request*/


end // end SW0D100

// Obtain the data to display
Function SW0D110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SW0DWSWR[1] != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SW0DW00.XXXTSLEN = 698; /* Temporary storage page length*/

  XSX2CDT(); /* get current date*/
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SW0DW00.XXXTSPAG[1] = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  SW0D111(); /* Purge any temporary storage*/
  SW0D112(); /* Purge any temporary storage*/
  SW0D113(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWSWR[1] = "Y"; /* Request for data switch*/


end // end SW0D110

// Purge TSQ SW1D
Function SW0D111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set SW0DW02 empty;
  SW0DW00.SW0DWSWU[2] = "N";

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0DW00.TA5TSQIX[2] = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "SW1D"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "111"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D111

// Purge TSQ SW2D
Function SW0D112()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0DW03 empty; /* M001 display storage*/

  SW0DW00.SW0DWSWU[3] = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0DW00.TA5TSQIX[3] = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "SW2D"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0DW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "111"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D112

// Purge TSQ SW3D
Function SW0D113()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0DW04 empty; /* M004 display storage*/

  SW0DW00.SW0DWSWU[4] = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0DW00.TA5TSQIX[4] = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "SW3D"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0DW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "111"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M004"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D113

// Format and converse the map
Function SW0D120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SW0DW00.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SW0DWSWR[1] == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0DW00.SW0DWSWF[1] == "Y") /* Map must be formatted*/
      SW0D121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0DM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0DM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SW0DW00.SLWMSGNO != 0) /* Message to display*/

      if (SW0DW00.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SW0DW00.SLWMSGNO);
      end /* Message number*/
    else
      SW0DM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0DM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0DM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0DM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SW0DW00.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0DM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0DM001.CAITEM; /* Application data*/


end // end SW0D120

// Format the display data
Function SW0D121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0DM001 initial; /* M001 input/output area*/
  set SW0DW01 empty;
  SW0DM001.XWHCD = SLWREC.XWHCD;
  if (SLWREC.XWHCD in XWHTBL.XWHCD)
    SW0DM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    set SW0DM001.SWEPLLNB cursor;
  else
    SW0DM001.XWHCD = " ";
    SW0DM001.XWHABRV = " ";
    set SW0DM001.XWHCD cursor;
  end
  SW0DW00.SW0DWSWF[1] = "N"; /* Format the map switch*/


end // end SW0D121

// Check attention identifier
Function SW0D130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0DW00.SW0DWSWR == "Y") /* Request for data*/
      set SW0DW01 empty; /* M001 display storage*/
    end

    SW0DW00.SW0DWSWF[1] = "Y"; /* Format the map switch*/
    SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0DM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0D111(); /* Purge SWD1 tsq*/
      SW0D112(); /* Purge SWD2 tsq*/
      SW0D113(); /* Purge SWD3 tsq*/

      XSSL001(); /* Exit to another application*/

      set SW0DM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0DM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end


    SW0D111(); /* Purge SWD1 tsq*/
    SW0D112(); /* Purge SWD2 tsq*/
    SW0D113(); /* Purge SWD3 tsq*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    SLWREC.XXXLOCID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end SW0D130

// Reset highlighted fields
Function SW0D140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0DM001.XWHCD initialAttributes; /* whs code*/
  set SW0DM001.SWEPLLNB initialAttributes; /* plan number*/
  set SW0DM001.XRPCD initialAttributes; /* plan status*/
  set SW0DM001.TSHCNTNR initialAttributes; /* container*/
  set SW0DM001.PC3PONBR initialAttributes; /* po number*/
  set SW0DM001.SWVWPOID initialAttributes; /* po id*/
  set SW0DM001.PC4ORTYP initialAttributes; /* pc_po_ot_cd*/
  set SW0DM001.SW0DMFMM initialAttributes; /* from date*/
  set SW0DM001.SW0DMFDD initialAttributes; /* from date*/
  set SW0DM001.SW0DMFYY initialAttributes; /* from date*/
  set SW0DM001.SW0DMTMM initialAttributes; /* to   date*/
  set SW0DM001.SW0DMTDD initialAttributes; /* to   date*/
  set SW0DM001.SW0DMTYY initialAttributes; /* to   date*/
  set SW0DM001.XXXUSRID initialAttributes; /* user id*/
  set SW0DM001.CATOAP initialAttributes; /* TO application*/
  set SW0DM001.CAITEM initialAttributes; /* Application data*/


end // end SW0D140

// Verify data that was entered
Function SW0D150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0DM001.CAITEM > " ") /* Application data was entered*/
    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SW0DM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
  end


  if (converseVar.validationMsgNum == 0)
    if (SW0DM001.XWHCD == " ")
      set SW0DM001.XWHCD cursor, bold;
      converseLib.validationFailed(009); /* required field*/
      return;
    else
      if (SW0DM001.XWHCD in XWHTBL.XWHCD) /* Code in table*/
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if not active status*/
          converseLib.validationFailed(10); /* status inactive*/
          SLWREC.XXXLOCID = "150"; /* Module identification*/
          set SW0DM001.XWHCD cursor, bold; /* Highlight*/
          return;
        else
          SLWREC.XWHCD = SW0DM001.XWHCD;
        end
      else
        SLWREC.XXXLOCID = "150"; /* Module identification*/
        set SW0DM001.XWHCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(11); /* Field missing or invalid*/
      end

      SW0DM001.XRPDESC = " ";
      if (SW0DM001.XRPCD != " ")
        if (SW0DM001.XRPCD == "AL")
          SW0DM001.XRPDESC = "ALL PLAN STATUSES";
        else
          if (SW0DM001.XRPCD in XRPTBL.XRPCD) /* Code in table*/
            if (XRPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if not active status*/
              converseLib.validationFailed(10); /* status inactive*/
              SLWREC.XXXLOCID = "150"; /* Module identification*/
              set SW0DM001.XRPCD cursor, bold; /* Highlight*/
              return;
            else
              SW0DM001.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex];
            end
          else
            SLWREC.XXXLOCID = "150"; /* Module identification*/
            set SW0DM001.XRPCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(11); /* Field missing or invalid*/
            return;
          end
        end
      end
    end
  end

  SW0DM001.XGPDESC = " ";
  if (SW0DM001.XGPCD > " ")
    if (SW0DM001.XGPCD in XGPTBL.XGPCD)
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if not active status*/
        converseLib.validationFailed(10); /* status inactive*/
        SLWREC.XXXLOCID = "150"; /* Module identification*/
        set SW0DM001.XGPCD cursor, bold; /* Highlight*/
        return;
      else
        SW0DM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        if (SW0DM001.SWVWPOID == " "
         && SW0DM001.PC3PONBR == 0)
          set SW0DM001.PC3PONBR cursor, bold;
          set SW0DM001.SWVWPOID bold;
          set SW0DM001.PC4ORTYP bold;
          converseLib.validationFailed(299);
          return;
        end
      end
    else
      set SW0DM001.XGPCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value entered*/
      return;
    end
  end

  if (SW0DM001.XGPCD == "03"
   && SW0DM001.PC3PONBR == 0
   && SW0DM001.SWVWPOID > " ")
    set SW0DM001.PC3PONBR cursor, bold;
    converseLib.validationFailed(255);
    return;
  end

  if (converseVar.validationMsgNum == 0)
    if (SW0DM001.SW0DMFMM != 0
     || SW0DM001.SW0DMFDD != 0
     || SW0DM001.SW0DMFYY != 0
     || SW0DM001.SW0DMTMM != 0
     || SW0DM001.SW0DMTDD != 0
     || SW0DM001.SW0DMTYY != 0)
      SW0D151(); /* validate dates if entered*/
    end
  end

  if (converseVar.validationMsgNum == 0) /* all ok so far*/
    SW0D153(); /* set process option*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    SW0DW00.SW0DWPRO = " "; /* blank process option*/
    exit stack; /* Exit to display map*/
  end

end // end SW0D150

// validate dates entered
Function SW0D151()
   /* ------------------------------------------------------------*/
    /* get current date yeqr*/
   /* ------------------------------------------------------------*/

  SW0DW01.SW0DWFDT = 0;
  SW0DW01.SW0DWTDT = 0;
  XX0XW01.XX0XWDAT = VGVar.currentShortGregorianDate;
  if (XX0XW01.XX0XWYY < 81)
    XX0XW01.XX0XW19 = 20;
  else
    XX0XW01.XX0XW19 = 19;
  end

   /* ------------------------------------------------------------*/
    /* validate from date*/
   /* ------------------------------------------------------------*/

  if (SW0DM001.SW0DMFMM != 0)
    if (SW0DM001.SW0DMFDD != 0)
      /* -------y2k out begin --------*/
      /* IF SW0DM001.SW0DMFYY NE 0;*/
      /* -------y2k out end ----------*/
      SW0DW01.SW0DWFMM = SW0DM001.SW0DMFMM;
      SW0DW01.SW0DWFDD = SW0DM001.SW0DMFDD;
      SW0DW01.SW0DWFYY = SW0DM001.SW0DMFYY;
      /* -------y2k out begin --------*/
      /* ELSE;*/
       /* MOVE 21 TO EZEMNO;*/
      /* END;*/
      /* -------y2k out end ----------*/
    else
      converseLib.validationFailed(21);
    end
  else
    converseLib.validationFailed(21);
  end

  if (converseVar.validationMsgNum != 0)
    SLWREC.XXXLOCID = "151A";
    set SW0DM001.SW0DMFMM cursor, bold;
    set SW0DM001.SW0DMFDD bold;
    set SW0DM001.SW0DMFYY bold;
    return;
  end

  if (SW0DW01.SW0DWFYY < 81)
    SW0DW01.SW0DWFCC = 20;
  else
    SW0DW01.SW0DWFCC = 19;
  end

   /* ------------------------------------------------------------*/
    /* validate to date*/
   /* ------------------------------------------------------------*/

  if (SW0DM001.SW0DMTMM != 0)
    if (SW0DM001.SW0DMTDD != 0)
      /* -------y2k out begin --------*/
      /* IF SW0DM001.SW0DMTYY NE 0;*/
      /* -------y2k out end ----------*/
      SW0DW01.SW0DWTMM = SW0DM001.SW0DMTMM;
      SW0DW01.SW0DWTDD = SW0DM001.SW0DMTDD;
      SW0DW01.SW0DWTYY = SW0DM001.SW0DMTYY;
      /* -------y2k out begin --------*/
      /* ELSE;*/
       /* MOVE 21 TO EZEMNO;*/
      /* END;*/
      /* -------y2k out end ----------*/
    else
      converseLib.validationFailed(21);
    end
  else
    converseLib.validationFailed(21);
  end

  if (converseVar.validationMsgNum != 0)
    SLWREC.XXXLOCID = "151B";
    set SW0DM001.SW0DMTMM cursor, bold;
    set SW0DM001.SW0DMTDD bold;
    set SW0DM001.SW0DMTYY bold;
    return;
  end

  if (SW0DW01.SW0DWTYY < 81)
    SW0DW01.SW0DWTCC = 20;
  else
    SW0DW01.SW0DWTCC = 19;
  end

  if (SW0DW01.SW0DWFDT > SW0DW01.SW0DWTDT
   || SW0DW01.SW0DWFDT > XX0XW01.XX0XWDAT)
    SLWREC.XXXLOCID = "151C";
    set SW0DM001.SW0DMFMM cursor, bold;
    set SW0DM001.SW0DMFDD bold;
    set SW0DM001.SW0DMFYY bold;
    set SW0DM001.SW0DMTMM bold;
    set SW0DM001.SW0DMTDD bold;
    set SW0DM001.SW0DMTYY bold;
    converseLib.validationFailed(22);
    return;
  end

  if (SW0DW01.SW0DWTDT > XX0XW01.XX0XWDAT
   || SW0DW01.SW0DWTDT < SW0DW01.SW0DWFDT)
    SLWREC.XXXLOCID = "151D";
    set SW0DM001.SW0DMTMM cursor, bold;
    set SW0DM001.SW0DMTDD bold;
    set SW0DM001.SW0DMTYY bold;
    converseLib.validationFailed(21);
    return;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  TA2REC.TA2DBDFN = SW0DW01.SW0DWFDT;
  TA2REC.TA2DBDTN = SW0DW01.SW0DWTDT;
  SW0D152(); /* call ta0040*/
  if (TA2REC.TA2DBDDN > 14)
    set SW0DM001.SW0DMFMM cursor, bold;
    set SW0DM001.SW0DMFDD bold;
    set SW0DM001.SW0DMFYY bold;
    set SW0DM001.SW0DMTMM bold;
    set SW0DM001.SW0DMTDD bold;
    set SW0DM001.SW0DMTYY bold;
    converseLib.validationFailed(204);
    return;
  end
end // end SW0D151

// call ta0040
Function SW0D152()

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end
  if (sysVar.errorCode != "00000000" /* Call un-successful*/
   || TA2REC.TA2RTNCD != 0)          /* or abnormal return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TA0040";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end




end // end SW0D152

// set process option
Function SW0D153()

  SW0DW00.SW0DWPRO = " ";

   /* ------------------------------------------------------------*/
   /* If container and/or purchase order entries are entered*/
   /* set sw0dw00.sw0dwpro to 'c' (map sw0dm003)*/
   /* ------------------------------------------------------------*/

  if (SW0DM001.TSHCNTNR != " ")
    SW0DW00.SW0DWPRO = "C";
    set SW0DM001.TSHCNTNR cursor, bold;
  else
    if (SW0DM001.PC3PONBR != 0)
      SW0DW00.SW0DWPRO = "C";
      set SW0DM001.PC3PONBR cursor, bold;
    else
      if (SW0DM001.SWVWPOID != 0
       && SW0DM001.PC4ORTYP != " ")
        set SW0DM001.SWVWPOID cursor, bold;
        set SW0DM001.PC4ORTYP bold;
        SW0DW00.SW0DWPRO = "C";
      else
        if (SW0DM001.SWVWPOID != " "
         || SW0DM001.PC4ORTYP != " ")
          if (SW0DM001.XGPCD == " ")
            set SW0DM001.XGPCD cursor, bold;
            converseLib.validationFailed(229);
          else
            if (SW0DM001.XGPCD == "03")
              set SW0DM001.XGPCD cursor, bold;
              converseLib.validationFailed(191);
            else
              if (SW0DM001.SWVWPOID == " ")
                SW0DW00.SW0DWPRO = " ";
                set SW0DM001.SWVWPOID cursor, bold;
                set SW0DM001.PC4ORTYP bold;
                converseLib.validationFailed(171);
              else
                if (SW0DM001.PC4ORTYP == " ")
                  SW0DW00.SW0DWPRO = " ";
                  set SW0DM001.PC4ORTYP cursor, bold;
                  set SW0DM001.SWVWPOID bold;
                  converseLib.validationFailed(171);
                end
              end
            end
          end
        end
      end
    end
  end

  if (SW0DW00.SW0DWPRO == " ")
    if (SW0DM001.SWEPLLNB != 0)
      set SW0DM001.SWEPLLNB cursor, bold;
      SW0DW00.SW0DWPRO = "P";
    else
      if (SW0DM001.XRPCD != " ")
        set SW0DM001.XRPCD cursor, bold;
        SW0DW00.SW0DWPRO = "P";
      end
    end
  end
                                   /* Control # 0002 \/*/

  if (SW0DM001.SW0DMFMM != 0 /* This logic was added in January*/
   && SW0DM001.SW0DMFDD != 0 /* of 1991 in order to permit the*/
   && SW0DM001.SW0DMFYY != 0 /* user to select rows from VPLNHD01*/
   && SW0DM001.SW0DMTMM != 0 /* using just the 'from' and 'to'*/
   && SW0DM001.SW0DMTDD != 0 /* date fields entered on SWODM001*/
   && SW0DM001.SW0DMTYY != 0) /* (of course, Warehouse is still*/
    set SW0DM001.SW0DMFMM cursor, bold; /* required).*/
    SW0DW00.SW0DWPRO = "P";
  end /* Control # 0002 /\*/

  if (converseVar.validationMsgNum == 0)
    if (SW0DW00.SW0DWPRO == " ")
      set SW0DM001.SWEPLLNB cursor, bold;
      converseLib.validationFailed(212);
    else
      SW0DW01.XWHCD = SW0DM001.XWHCD;
      SW0DW01.SWEPLLNB = SW0DM001.SWEPLLNB;
      SW0DW01.XRPCD = SW0DM001.XRPCD;
      SW0DW01.XGPCD = SW0DM001.XGPCD;
      SW0DW01.TSHCNTNR = SW0DM001.TSHCNTNR;
      SW0DW01.PC3PONBR = SW0DM001.PC3PONBR;
      SW0DW01.SWVWPOID = SW0DM001.SWVWPOID;
      SW0DW01.PC4ORTYP = SW0DM001.PC4ORTYP;
      SW0DW01.XXXUSRID = SW0DM001.XXXUSRID;
      SW0DW01.SW0DWFMM = SW0DM001.SW0DMFMM;
      SW0DW01.SW0DWFDD = SW0DM001.SW0DMFDD;
      SW0DW01.SW0DWFYY = SW0DM001.SW0DMFYY;
      SW0DW01.SW0DWTMM = SW0DM001.SW0DMTMM;
      SW0DW01.SW0DWTDD = SW0DM001.SW0DMTDD;
      SW0DW01.SW0DWTYY = SW0DM001.SW0DMTYY;
      SW0D154(); /* validate swvwpoid if entered*/
    end
  end
end // end SW0D153

// validate po - po id/type
Function SW0D154()
   /* -----------------------------------------------------------*/
   /* format and validate po-po id/type if entered*/

  if (SW0DW00.SW0DWPRO == "C"
   && SW0DW01.PC3PONBR <= 0
   && SW0DW01.TSHCNTNR == " ")
    set SWVREC empty;
    SWVREC.XGPCD = SW0DM001.XGPCD;
    SWVREC.SWVWPOID = SW0DM001.SWVWPOID;
    SWVREC.PC4ORTYP = SW0DM001.PC4ORTYP;
    SWVREC.SWVWFNC = "NO";
    XSSLS10();
    if (SWVREC.SWVWRTN == 0)
      SW0DW01.PC3PONBR = SWVREC.PC3PONBR;
      SW0DM001.PC3PONBR = SWVREC.PC3PONBR;
    else
      if (SWVREC.SWVWRTN == 2)
        set SW0DM001.PC3PONBR cursor, bold;
        SW0DW00.SW0DWPRO = " ";
        SLWREC.XXXLOCID = "154";
        converseLib.validationFailed(213);
      else
        if (SWVREC.SWVWRTN == 12)
          set SW0DM001.PC3PONBR cursor;
          set SW0DM001.SWVWPOID bold;
          set SW0DM001.PC4ORTYP bold;
          SW0DW00.SW0DWPRO = " ";
          SLWREC.XXXLOCID = "154";
          converseLib.validationFailed(213);
        else
          set SW0DM001.SWVWPOID cursor, bold;
          set SW0DM001.PC4ORTYP bold;
          SW0DW00.SW0DWPRO = " ";
          SLWREC.XXXLOCID = "154";
          converseLib.validationFailed(271);
        end
      end
    end
  end
end // end SW0D154

// Process valid input request
Function SW0D160()
   /* ------------------------------------------------------------*/
   /* If no data entered or not enough data entered return to*/
   /* the selection screen.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0
   || SW0DW00.SW0DWPRO == " ")
    return;
  end


  if (SW0DW00.SW0DWPRO == "P")
    SW0DW00.SW0DWSWF[2] = "Y"; /* Format the map switch*/
    SW0DW00.SW0DWSWR[2] = "Y"; /* Request for data switch*/
    SW0DW00.SW0DWSWD = 2;
  else
    SW0DW00.SW0DWSWF[3] = "Y"; /* Format the map switch*/
    SW0DW00.SW0DWSWR[3] = "Y"; /* Request for data switch*/
    SW0DW00.SW0DWSWD = 3;
  end


end // end SW0D160

// Display the selected table row
Function SW0D200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0D210(); /* Obtain the data to display*/

  SW0D220(); /* Format and display the map*/

  SW0D230(); /* Check attention identifier*/

  SW0D240(); /* Reset fields to normal intensity*/

  SW0D250(); /* Verify the entered data*/

  SW0D260(); /* Process valid input request*/


end // end SW0D200

// Obtain the data to display
Function SW0D210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SW0DWSWR[2] != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* establish tsq page length*/
   /* ------------------------------------------------------------*/

  SW0DW00.XXXTSLEN[2] = 970;

   /* ------------------------------------------------------------*/
   /* if no message to display reset the page to display*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0)
    SW0DW00.XXXTSPAG[2] = 1;
  end

   /* ------------------------------------------------------------*/
   /* purge any tempory storage*/
   /* ------------------------------------------------------------*/

  SW0D111(); /* purge tsq*/

   /* ------------------------------------------------------------*/
   /* initialize records and set key*/
   /* ------------------------------------------------------------*/
  set SW0DW02 empty; /* M002 display storage*/
  set SWEREC empty;
  set SWVREC empty;

  SWEREC.XWHCD = SW0DW01.XWHCD;
  SWEREC.SWEPLLNB = SW0DW01.SWEPLLNB;
  if (SW0DW01.SWEPLLNB == 0)
    SWEREC.SWEPLLNB = -1;
  end
  SWEREC.XRPCD = SW0DW01.XRPCD;
  if (SWEREC.XRPCD == " "
   || SWEREC.XRPCD == "AL")
    SWEREC.XRPCD = "*";
  end
  SWEREC.SL8WOGRP = -1;
  SWEREC.SWEHSTFL = "*";
  if (SW0DW01.XXXUSRID == " ")
    SWEREC.XXXUSRID = "*";
  else
    SWEREC.XXXUSRID = SW0DW01.XXXUSRID;
  end
  if (SW0DW01.SW0DWFDT > 0)
    SLVREC.SLVSDT = SW0DW01.SW0DWFDT;
    SLVREC.SLVEDT = SW0DW01.SW0DWTDT;
  else
    SLVREC.SLVSDT = -99999999;
    SLVREC.SLVEDT = +99999999;
  end

   /* ------------------------------------------------------------*/
   /* declare the table cursor*/
   /* ------------------------------------------------------------*/

  SW0D211(); /* declare cursor and open*/

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 0; /* display line index*/

  while (SQLCA.VAGen_SQLCODE == 0) /* while not end of cursor*/
    SW0D212(); /* fetch row*/
    if (SQLCA.VAGen_SQLCODE != 100) /* ; not end of cursor*/
      SW0D213(); /* Save in display storage*/
    end
    /* ----------------------------------------------------------*/
     /* if page is full add page to tsq*/
    /* ----------------------------------------------------------*/
    if (SW0DW00.SW0DWIXM > 13) /* page is full*/
      SW0D215();
      SW0DW00.SW0DWIXM = 0;
    end
  end

   /* ------------------------------------------------------------*/
   /* add any  partialy formatted pages to tsq*/
   /* ------------------------------------------------------------*/
  if (SW0DW00.SW0DWIXM > 0)
    SW0D215();
  end

   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

  SW0D216();

   /* ------------------------------------------------------------*/
   /* If no data found indicate no data to display*/
   /* ------------------------------------------------------------*/
  if (SW0DW00.TA5TSQIX[2] == 0)
    SLWREC.XXXLOCID = "210";
    converseLib.validationFailed(214);
    SW0DW00.SW0DWSWD = 1;
    SW0DW00.SW0DWSWR[2] = "N"; /* Request for data switch*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWSWR[2] = "N"; /* Request for data switch*/


end // end SW0D210

// select set vplnhd01
Function SW0D211()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  SLVREC.SLVFNC = "S2";
  try
    call "IO5350" (SLVREC, SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "221"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D211

// fetch vplnhd01 cursor
Function SW0D212()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  SLVREC.SLVFNC = "N2";
  try
    call "IO5350" (SLVREC, SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR[2] = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "221"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (SQLCA.VAGen_SQLCODE == -911)
    exit stack; /* Exit to display map*/
  end

end // end SW0D212

// save data in display storage
Function SW0D213()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  if (SW0DW01.XXXUSRID != " "
   && SW0DW01.XXXUSRID != SWEREC.XXXUSRID)
    return;
  end
  SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1;
  SW0DW02.SW0DWGR2[SW0DWIXM] = SWEREC.SWEGROUP;

  set SWGREC empty;
  SWGREC.XWHCD = SWEREC.XWHCD;
  SWGREC.SWEPLLNB = SWEREC.SWEPLLNB;
  SW0D214(); /* get quanty sum of ctns and units*/
  SW0DW02.ZZQTY1[SW0DWIXM] = SWGREC.SWGPRDCS;
  SW0DW02.ZZQTY2[SW0DWIXM] = SWGREC.SWGPRDUN;

end // end SW0D213

// select sum vplnsy01
Function SW0D214()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("SS", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* No values found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "214"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWGREC.SWGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  SW0DW00.SW0DWSWD = 1;
  exit stack; /* Exit to display map*/


end // end SW0D214

// add page to tempory storage
Function SW0D215()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0DW02.XXXTSLEN = SW0DW00.XXXTSLEN[2];
  TA5REC.TA5APPID = "SW1D"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0DW02 empty; /* M001 display storage*/

    SW0DW00.TA5TSQIX[2] = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "116"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D215

// close vplnhd01 cursor
Function SW0D216()
   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

  SLVREC.SLVFNC = "C2";
  try
    call "IO5350" (SLVREC, SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR[2] = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "221"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (SQLCA.VAGen_SQLCODE == -911)
    exit stack; /* Exit to display map*/
  end

end // end SW0D216

// Format and converse the map
Function SW0D220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SW0DWSWR[2] == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0DW00.SW0DWSWF[2] == "Y") /* Map must be formatted*/
      SW0D221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  if (SW0DW02.XWHCD[1] in XWHTBL.XWHCD)
    SW0DM002.XWHCD = SW0DW02.XWHCD[1];
    SW0DM002.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  SW0DM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0DM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0DM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0DM002.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0DM002 alarm; /* Indicate sound alarm*/

  end

  converse SW0DM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0DM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0DM002.CAITEM; /* Application data*/

end // end SW0D220

// Format the display data
Function SW0D221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0DM002 initial; /* M002 input/output area*/

  SW0DW00.SW0DWSWF[2] = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.TA5TSQIX[2] > 0) /* Pages were formatted*/

    if (SW0DW00.XXXTSPAG[2] != TA5REC.TA5TSQIX /* Desired page not current*/
     || SW0DW00.SW0DWSWU[2] == "Y")            /* or update tsq requested*/

      /* ------------------------------------------------------------*/
       /* if data was changed update current page in tsq before*/
       /* obtaining the next one.*/
      /* ------------------------------------------------------------*/

      if (SW0DW00.SW0DWSWU[2] == "Y") /* data has changed*/

        SW0DS01(); /* update tsq*/

        SW0DW00.SW0DWSWU[2] = "N"; /* storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SW0DW00.XXXTSPAG[2] > SW0DW00.TA5TSQIX[2])
        SW0DW00.XXXTSPAG[2] = SW0DW00.TA5TSQIX[2];
      end

      SW0DS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SW0DM002.XXXLITPG skip; /* "PAGE" literal*/
    SW0DM002.XXXTSPAG = SW0DW00.XXXTSPAG[2]; /* Current page*/
    set SW0DM002.XXXLITOF skip; /* "OF" literal*/
    SW0DM002.TA5TSQIX = SW0DW00.TA5TSQIX[2]; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 1; /* Initialize line index*/

  while (SW0DW00.SW0DWIXM <= 14 /* Until screen is full*/
   && SW0DW02.XRPCD[SW0DWIXM] > " ") /* or end of data*/

    if (SW0DW00.SW0DWIXM == 1) /* First select field*/
      set SW0DM002.SW0DMSEL[SW0DWIXM] cursor, normal; /* Position cursor*/
    else
      set SW0DM002.SW0DMSEL[SW0DWIXM] normal; /* Unprotect*/
    end

    SW0DM002.SW0DMSEL[SW0DWIXM] = SW0DW02.SW0DMSEL[SW0DWIXM];
    SW0DM002.SWEPLLNB[SW0DWIXM] = SW0DW02.SWEPLLNB[SW0DWIXM];
    SW0DM002.XRPCD[SW0DWIXM] = SW0DW02.XRPCD[SW0DWIXM];
    SW0DM002.SL8WOGRP[SW0DWIXM] = SW0DW02.SL8WOGRP[SW0DWIXM];
    SW0DM002.SW0DMTCS[SW0DWIXM] = SW0DW02.ZZQTY1[SW0DWIXM];
    SW0DM002.SW0DMTUN[SW0DWIXM] = SW0DW02.ZZQTY2[SW0DWIXM];
    SW0DM002.XXXUSRID[SW0DWIXM] = SW0DW02.XXXUSRID[SW0DWIXM];
    SW0DM002.ZZZSDT[SW0DWIXM] = SW0DW02.ZZZSDT[SW0DWIXM];
    SW0DM002.ZZZCHGDT[SW0DWIXM] = SW0DW02.ZZZCHGDT[SW0DWIXM];

    SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1; /* Increment line index*/

  end


end // end SW0D221

// Check attention identifier
Function SW0D230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0DW00.SW0DWSWR[2] == "Y") /* Request for data*/
      set SW0DW02 empty; /* M002 display storage*/
    end

    SW0DW00.SW0DWSWF[1] = "Y"; /* Format the map switch*/
    SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/
    SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0D111(); /* Purge SW1D tsq*/
      SW0D112(); /* Purge SW2D tsq*/
      SW0D113(); /* Purge SW3D tsq*/

      XSSL001(); /* Exit to another application*/

      set SW0DM001.CATOAP cursor, bold; /* Highlight*/

      SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/

    else

      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0DM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/
      SW0DW00.SW0DWSWF[1] = "Y"; /* Format the map switch*/
      exit stack; /* Exit to display map*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M";
    end

    if (converseVar.eventKey is pf6) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SW0C";
    end


    SW0D111(); /* Purge SW1D tsq*/
    SW0D112(); /* Purge SW2D tsq*/
    SW0D113(); /* Purge SW3D tsq*/

    XSSL001(); /* Exit to another application*/

    SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0D230

// Reset highlighted fields
Function SW0D240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 1;
  while (SW0DW00.SW0DWIXM <= 14
   && SW0DM002.XRPCD[SW0DWIXM] > " ")

    set SW0DM002.SW0DMSEL[SW0DWIXM] normal; /* Unprotect*/
    SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1; /* Increment line index*/

  end
  set SW0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set SW0DM002.CAITEM initialAttributes; /* Commarea application data*/

end // end SW0D240

// Verify data that was entered
Function SW0D250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0DM002.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "250"; /* Module identification*/
    set SW0DM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* Determine if a valid scroll request was entered*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    SW0D251();

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted verify data in the line*/
    /* ------------------------------------------------------------*/

    if (SW0DW00.TA5TSQIX[2] > 0) /* Page was formatted*/

      SW0DW00.SW0DWIXM = 14; /* Init line index*/

      while (SW0DW00.SW0DWIXM > 0 /* Until end of lines*/
       && SW0DM002.XRPCD > " ")

        SW0D252(); /* Verify data in the line*/

        SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM - 1; /* decrement index*/

      end

    end

  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0D250

// Verify scroll request
Function SW0D251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0DW00.XXXTSPAG[2] < 2)    /* and no previous pages*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0DW00.XXXTSPAG[2] >= SW0DW00.TA5TSQIX[2]) /* and no more pages*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 14; /* Initialize line index*/

  while (SW0DW00.SW0DWIXM > 0) /* Until end of lines*/

    if (SW0DM002.SW0DMSEL[SW0DWIXM] != SW0DW02.SW0DMSEL[SW0DWIXM])

      SLWREC.XXXLOCID = "251"; /* Module identification*/
      set SW0DM002.SW0DMSEL[SW0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Field may not change*/

    end

    SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM - 1; /* Decrement line number*/

  end

end // end SW0D251

// Verify data in field
Function SW0D252()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (SW0DM002.SW0DMSEL[SW0DWIXM] != SW0DW02.SW0DMSEL[SW0DWIXM]
   && SW0DM002.SW0DMSEL[SW0DWIXM] != "S") /* and is not a "S"*/

    SLWREC.XXXLOCID = "252"; /* Module identification*/
    set SW0DM002.SW0DMSEL[SW0DWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Only "S" may be entered*/

  end


end // end SW0D252

// Process valid input request
Function SW0D260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWSWF[2] = "Y"; /* Format the map switch*/

  SW0DW00.SW0DWSWR[2] = "N"; /* Request for data switch*/


   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SW0DW00.XXXTSPAG[2] = SW0DW00.XXXTSPAG[2] - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SW0DW00.XXXTSPAG[2] = SW0DW00.XXXTSPAG[2] + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 1; /* Initialize line index*/

  while (SW0DW00.SW0DWIXM <= 14) /* Until end of lines*/

    if (SW0DM002.SW0DMSEL[SW0DWIXM] != SW0DW02.SW0DMSEL[SW0DWIXM])

      SW0DW02.SW0DMSEL[SW0DWIXM] = SW0DM002.SW0DMSEL[SW0DWIXM];
      SW0DW00.SW0DWSWU[2] = "Y"; /* Storage update switch*/

    end

    SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and indicate*/
   /* that map 002 is to be displayed.*/
   /* ------------------------------------------------------------*/

  if ("S" in SW0DW02.SW0DMSEL) /* Line was selected*/

    SW0DW00.SW0DWIXM = sysVar.arrayIndex; /* Map line index*/

    SW0DW02.SW0DMSEL[SW0DWIXM] = "V";
    SW0DM002.SW0DMSEL[SW0DWIXM] = "V";

    SW0DW00.SW0DWSWD = "3"; /* Map to be displayed switch*/
    SW0DW00.SW0DWSWF[3] = "Y"; /* format map switch*/
    SW0DW00.SW0DWSWR[3] = "Y"; /* Request for data switch*/
    SW0DW00.SW0DWSWU[2] = "Y"; /* update tsq to viewed stat*/
    SW0DW00.TA5DATA[2] = TA5REC.TA5DATA; /* SAVE TA5DATA*/
    SW0DW01.XWHCD = SW0DW02.XWHCD[SW0DWIXM];
    SW0DW01.SWEPLLNB = SW0DW02.SWEPLLNB[SW0DWIXM];
    SW0DW01.SL8WOGRP = SW0DW02.SL8WOGRP[SW0DWIXM];
    SW0DW01.XRPCD = SW0DW02.XRPCD[SW0DWIXM];

  end


end // end SW0D260

// Display the selected table row
Function SW0D300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0D310(); /* Obtain the data to display*/

  SW0D320(); /* Format and display the map*/

  SW0D330(); /* Check attention identifier*/

  SW0D340(); /* Reset fields to normal intensity*/

  SW0D350(); /* Verify the entered data*/

  SW0D360(); /* Process valid input request*/


end // end SW0D300

// Obtain the data to display
Function SW0D310()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SW0DWSWR[3] != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* establish tsq page length*/
   /* ------------------------------------------------------------*/

  SW0DW00.XXXTSLEN[3] = 1326;

   /* ------------------------------------------------------------*/
   /* if no message to display reset the page to display*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0)
    SW0DW00.XXXTSPAG[3] = 1;
  end

   /* ------------------------------------------------------------*/
   /* purge any tempory storage*/
   /* ------------------------------------------------------------*/

  SW0D112(); /* purge tsq*/

   /* ------------------------------------------------------------*/
   /* initialize records and set key*/
   /* ------------------------------------------------------------*/
  set SW0DW03 empty; /* M003 display storage*/
  set SWFREC empty;

  if (SW0DW00.SW0DWPRO == "P")
    SWFREC.XWHCD = SW0DW01.XWHCD;
    SWFREC.SWEPLLNB = SW0DW01.SWEPLLNB;
    SWFREC.TSHCNTNR = "*";
    SWFREC.XGPCD = "*";
    SWFREC.PC3PONBR = -1;
  else
    SWFREC.XWHCD = SW0DW01.XWHCD;
    SWFREC.SWEPLLNB = SW0DW01.SWEPLLNB;
    SWFREC.TSHCNTNR = SW0DW01.TSHCNTNR;
    SWFREC.PC3PONBR = SW0DW01.PC3PONBR;
    SWFREC.XGPCD = SW0DW01.XGPCD;
    if (SWFREC.SWEPLLNB == 0)
      SWFREC.SWEPLLNB = -1;
    end
    if (SWFREC.TSHCNTNR == " ")
      SWFREC.TSHCNTNR = "*";
    end
    if (SWFREC.XGPCD == " ")
      SWFREC.XGPCD = "*";
    end
    if (SWFREC.PC3PONBR == 0)
      SWFREC.PC3PONBR = -1;
    end
  end

   /* ------------------------------------------------------------*/
   /* declare the table cursor*/
   /* ------------------------------------------------------------*/

  SW0D311(); /* declare cursor and open*/

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 0; /* display line index*/

  while (SQLCA.VAGen_SQLCODE == 0) /* while not end of cursor*/
    SW0D312(); /* fetch row*/
    if (SQLCA.VAGen_SQLCODE != 100) /* ; not end of cursor*/
      if (SW0DW00.SW0DWPRO == "C"
       && SW0DW00.SW0DWIXM == 0
       && SW0DW00.TA5TSQIX[3] == 0)
        SWEREC.XWHCD = SWFREC.XWHCD;
        SWEREC.SWEPLLNB = SWFREC.SWEPLLNB;
        SW0D313();
        if (SQLCA.VAGen_SQLCODE == 0)
          SW0DW01.SWEPLLNB = SWEREC.SWEPLLNB;
          SW0DW01.SL8WOGRP = SWEREC.SL8WOGRP;
          SW0DW01.XRPCD = SWEREC.XRPCD;
          SW0D314(); /* Save in display storage*/
        end
      else
        SW0D314(); /* Save in display storage*/
      end
    end
    /* ----------------------------------------------------------*/
     /* if page is full add page to tsq*/
    /* ----------------------------------------------------------*/
    if (SW0DW00.SW0DWIXM >= 13) /* page is full*/
      SW0D316();
      SW0DW00.SW0DWIXM = 0;
    end
  end

   /* ------------------------------------------------------------*/
   /* add any  partialy formatted pages to tsq*/
   /* ------------------------------------------------------------*/
  if (SW0DW00.SW0DWIXM > 0)
    SW0D316();
  end

   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

  SW0D317();

   /* ------------------------------------------------------------*/
   /* If no data found indicate no data to display*/
   /* ------------------------------------------------------------*/
  if (SW0DW00.TA5TSQIX[3] == 0)
    SLWREC.XXXLOCID = "210";
    converseLib.validationFailed(214);
    SW0DW00.SW0DWSWD = 1;
    SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWSWR[3] = "N"; /* Request for data switch*/


end // end SW0D310

// select set vplncp01
Function SW0D311()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("S3", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "311"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D311

// fetch vplnsy01 cursor
Function SW0D312()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("N3", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "312"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (SQLCA.VAGen_SQLCODE == -911)
    exit stack; /* Exit to display map*/
  end

end // end SW0D312

// select unique vwohdr01
Function SW0D313()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  SLVREC.SLVFNC = "S ";
  try
    call "IO5350" (SLVREC, SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "313"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D313

// save data in display storage
Function SW0D314()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1;
  SW0DW03.SW0DWGR3[SW0DWIXM] = SWFREC.SWFGROUP;
  if (SW0DW00.SW0DWPRO != "P"
   && SWFREC.SWEPLLNB != SWEREC.SWEPLLNB)
    set SWEREC empty;
    SWEREC.XWHCD = SWFREC.XWHCD;
    SWEREC.SWEPLLNB = SWFREC.SWEPLLNB;
    SW0DS10(); /* GET PLAN HEADER*/
  end

  SW0DW03.XRPCD[SW0DWIXM] = SWEREC.XRPCD;
  SW0DW03.SL8WOGRP[SW0DWIXM] = SWEREC.SL8WOGRP;

  set SWVREC empty;
  SWVREC.XGPCD = SWFREC.XGPCD;
  SWVREC.PC3PONBR = SWFREC.PC3PONBR;
  SWVREC.PC3POIDT = SWFREC.PC3POIDT;
  SWVREC.PCFSECD = SWFREC.PCFSECD;
  SWVREC.FY1FCTYC = SWFREC.FY1FCTYC;
  SWVREC.PC4ORTYP = SWFREC.PC4ORTYP;
  SWVREC.SWVWFNC = "T2";
  XSSLS10();
  SW0DW03.SWVWPOID[SW0DWIXM] = SWVREC.SWVWPOID;

  SWGREC.XWHCD = SWFREC.XWHCD;
  SWGREC.SWEPLLNB = SWFREC.SWEPLLNB;
  SWGREC.TSHCNTNR = SWFREC.TSHCNTNR;
  SWGREC.XGPCD = SWFREC.XGPCD;
  SWGREC.PC3PONBR = SWFREC.PC3PONBR;
  SW0D315(); /* get quanty sum of ctns and units*/
  SW0DW03.ZZQTY1[SW0DWIXM] = SWGREC.SWGPRDCS;
  SW0DW03.ZZQTY2[SW0DWIXM] = SWGREC.SWGPRDUN;

end // end SW0D314

// select sum vplnsy01
Function SW0D315()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("ST", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "214"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWGREC.SWGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  SW0DW00.SW0DWSWD = 1;
  exit stack; /* Exit to display map*/


end // end SW0D315

// add page to tempory storage
Function SW0D316()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0DW03.XXXTSLEN = SW0DW00.XXXTSLEN[3];
  TA5REC.TA5APPID = "SW2D"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0DW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0DW03 empty; /* M001 display storage*/

    SW0DW00.TA5TSQIX[3] = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "116"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D316

// close vplnsy01 cursor
Function SW0D317()
   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("C3", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "2"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR[2] = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "221"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (SQLCA.VAGen_SQLCODE == -911)
    exit stack; /* Exit to display map*/
  end

end // end SW0D317

// Format and converse the map
Function SW0D320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SW0DWSWR[3] == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0DW00.SW0DWSWF[3] == "Y") /* Map must be formatted*/
      SW0D321(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0DM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  if (SW0DW03.XWHCD[1] in XWHTBL.XWHCD)
    SW0DM003.XWHCD = SW0DW03.XWHCD[1];
    SW0DM003.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  SW0DM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0DM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0DM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0DM003.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0DM003 alarm; /* Indicate sound alarm*/

  end

  converse SW0DM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0DM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0DM003.CAITEM; /* Application data*/

end // end SW0D320

// Format the display data
Function SW0D321()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0DM003 initial; /* m003 input/output area*/

  SW0DW00.SW0DWSWF[3] = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.TA5TSQIX[3] > 0) /* Pages were formatted*/

    if (SW0DW00.XXXTSPAG[3] != TA5REC.TA5TSQIX /* Desired page not current*/
     || SW0DW00.SW0DWSWU[3] == "Y")           

      /* ------------------------------------------------------------*/
       /* if data was changed update current page in tsq before*/
       /* obtaining the next one.*/
      /* ------------------------------------------------------------*/

      if (SW0DW00.SW0DWSWU[3] == "Y") /* data has changed*/

        SW0DS03(); /* update tsq*/


      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SW0DW00.XXXTSPAG[3] > SW0DW00.TA5TSQIX[3])
        SW0DW00.XXXTSPAG[3] = SW0DW00.TA5TSQIX[3];
      end

      SW0DS04(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SW0DM003.XXXLITPG skip; /* "PAGE" literal*/
    SW0DM003.XXXTSPAG = SW0DW00.XXXTSPAG[3]; /* Current page*/
    set SW0DM003.XXXLITOF skip; /* "OF" literal*/
    SW0DM003.TA5TSQIX = SW0DW00.TA5TSQIX[3]; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 1; /* Initialize line index*/

  while (SW0DW00.SW0DWIXM <= 13 /* Until screen is full*/
   && SW0DW03.TSHCNTNR[SW0DWIXM] != " ") /* or end of data*/

    set SW0DM003.SW0DMSEL[SW0DWIXM] normal; /* Unprotect*/
    if (SW0DW00.SW0DWSWU[3] == "Y")
      if (SW0DW03.SW0DMSEL[SW0DWIXM] == "V")
        set SW0DM003.SW0DMSEL[SW0DWIXM] cursor; /* Position cursor*/
      end
    else
      if (SW0DW00.SW0DWIXM == 1) /* First select field*/
        set SW0DM003.SW0DMSEL[SW0DWIXM] cursor; /* Position cursor*/
      end
    end

    SW0DM003.SW0DMSEL[SW0DWIXM] = SW0DW03.SW0DMSEL[SW0DWIXM];
    SW0DM003.SWEPLLNB[SW0DWIXM] = SW0DW03.SWEPLLNB[SW0DWIXM];
    SW0DM003.XRPCD[SW0DWIXM] = SW0DW03.XRPCD[SW0DWIXM];
    SW0DM003.TSHCNTNR[SW0DWIXM] = SW0DW03.TSHCNTNR[SW0DWIXM];
    SW0DM003.XGPCD[SW0DWIXM] = SW0DW03.XGPCD[SW0DWIXM];
    SW0DM003.PC3PONBR[SW0DWIXM] = SW0DW03.PC3PONBR[SW0DWIXM];
    SW0DM003.SWVWPOID[SW0DWIXM] = SW0DW03.SWVWPOID[SW0DWIXM];
    SW0DM003.PC4ORTYP[SW0DWIXM] = SW0DW03.PC4ORTYP[SW0DWIXM];
    SW0DM003.SW0DMTCS[SW0DWIXM] = SW0DW03.ZZQTY1[SW0DWIXM];
    SW0DM003.SW0DMTUN[SW0DWIXM] = SW0DW03.ZZQTY2[SW0DWIXM];
    SW0DM003.SL4ZONE[SW0DWIXM] = SW0DW03.SL4ZONE[SW0DWIXM];

    SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1; /* Increment line index*/

  end

  SW0DW00.SW0DWSWU[3] = "N"; /* storage update switch*/

end // end SW0D321

// Check attention identifier
Function SW0D330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0DW00.SW0DWSWR[3] == "Y") /* Request for data*/
      set SW0DW03 empty; /* m003 display storage*/
    end

    SW0DW00.SW0DWSWF[1] = "Y"; /* Format the map switch*/
    SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/
    SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0D111(); /* Purge SW1D tsq*/
      SW0D112(); /* Purge SW2D tsq*/
      SW0D113(); /* Purge SW3D tsq*/

      XSSL001(); /* Exit to another application*/

      set SW0DM001.CATOAP cursor, bold; /* Highlight*/

      SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/

    else

      SLWREC.XXXLOCID = "330"; /* Module identification*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0DM003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      SW0DW00.SW0DWSWD = "2"; /* Map to be displayed switch*/
      if (SW0DW00.SW0DWPRO == "P")
        TA5REC.TA5DATA = SW0DW00.TA5DATA[2]; /* Restore ta5rec*/
        SW0DW00.SW0DWSWF[2] = "Y"; /* Format the map switch*/
      else
        SW0DW00.SW0DWPRO = "P";
        if (SW0DW01.SWEPLLNB == 0)
          SW0DW01.SWEPLLNB = SW0DW03.SWEPLLNB[1];
        end
        SW0DW00.SW0DWSWF[2] = "Y"; /* format the map switch*/
        SW0DW00.SW0DWSWR[2] = "Y"; /* get the data switch*/
      end
      exit stack; /* Exit to display map*/
    end

    if (converseVar.eventKey is pf5) /* PF4 was pressed*/
      COMMAREA.CATOAP = "SL0M";
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0C";
    end

    SW0D111(); /* Purge SW1D tsq*/
    SW0D112(); /* Purge SW2D tsq*/
    SW0D113(); /* Purge SW3D tsq*/

    XSSL001(); /* Exit to another application*/

    SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "330"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0D330

// Reset highlighted fields
Function SW0D340()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 1;
  while (SW0DW00.SW0DWIXM < 14
   && SW0DM003.TSHCNTNR[SW0DWIXM] > " ")

    set SW0DM003.SW0DMSEL[SW0DWIXM] normal; /* Unprotect*/
    SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1; /* Increment line index*/

  end
  set SW0DM003.CATOAP initialAttributes; /* Commarea TO application*/
  set SW0DM003.CAITEM initialAttributes; /* Commarea application data*/

end // end SW0D340

// Verify data that was entered
Function SW0D350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0DM003.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "350"; /* Module identification*/
    set SW0DM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* Determine if a valid scroll request was entered*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    SW0D351();

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted verify data in the line*/
    /* ------------------------------------------------------------*/

    if (SW0DW00.TA5TSQIX[3] > 0) /* Page was formatted*/

      SW0DW00.SW0DWIXM = 13; /* Init line index*/

      while (SW0DW00.SW0DWIXM > 0) /* Until end of lines*/

        SW0D352(); /* Verify data in the line*/

        SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM - 1; /* decrement index*/

      end

    end

  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0D350

// Verify scroll request
Function SW0D351()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0DW00.XXXTSPAG[3] < 2)    /* and no previous pages*/

    SLWREC.XXXLOCID = "351"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0DW00.XXXTSPAG[3] >= SW0DW00.TA5TSQIX[3]) /* and no more pages*/

    SLWREC.XXXLOCID = "351"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 13; /* Initialize line index*/

  while (SW0DW00.SW0DWIXM > 0) /* Until end of lines*/

    if (SW0DM003.SW0DMSEL[SW0DWIXM] != SW0DW03.SW0DMSEL[SW0DWIXM])

      SLWREC.XXXLOCID = "351"; /* Module identification*/
      set SW0DM003.SW0DMSEL[SW0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Field may not change*/

    end

    SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM - 1; /* Decrement line number*/

  end

end // end SW0D351

// Verify data in field
Function SW0D352()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (SW0DM003.SW0DMSEL[SW0DWIXM] != SW0DW03.SW0DMSEL[SW0DWIXM]
   && SW0DM003.SW0DMSEL[SW0DWIXM] != "S") /* and is not a "S"*/

    SLWREC.XXXLOCID = "252"; /* Module identification*/
    set SW0DM003.SW0DMSEL[SW0DWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Only "S" may be entered*/

  end


end // end SW0D352

// Process valid input request
Function SW0D360()
  SW0DW00.SW0DWSWR[3] = "N";
  SW0DW00.SW0DWSWF[3] = "Y";
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SW0DW00.XXXTSPAG[3] = SW0DW00.XXXTSPAG[3] - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SW0DW00.XXXTSPAG[3] = SW0DW00.XXXTSPAG[3] + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* save the select fields*/
   /* ------------------------------------------------------------*/
  SW0DW00.SW0DWIXM = 1;

  while (SW0DW00.SW0DWIXM <= 13)

    if (SW0DM003.SW0DMSEL[SW0DWIXM] != SW0DW03.SW0DMSEL[SW0DWIXM])
      SW0DW03.SW0DMSEL[SW0DWIXM] = SW0DM003.SW0DMSEL[SW0DWIXM];
      SW0DW00.SW0DWSWU[3] = "Y";
    end

    SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1;

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and indicate*/
   /* that map 004 is to be displayed.*/
   /* ------------------------------------------------------------*/

  if ("S" in SW0DW03.SW0DMSEL) /* Line was selected*/

    SW0DW00.SW0DWIDX = sysVar.arrayIndex; /* Map line index*/

    SW0DW00.TA5DATA[3] = TA5REC.TA5DATA;
    SW0DW00.SW0DWSWD = "4"; /* Map to be displayed switch*/
    SW0DW00.SW0DWSWR[4] = "Y"; /* Request for data switch*/
    SW0DW00.SW0DWSWF[4] = "Y"; /* format map switch*/

  else

    if ("S" in SW0DW02.SW0DMSEL) /* Control # 0002 Changes \/*/
      SW0DW00.SW0DWIXM = sysVar.arrayIndex;
      SW0DW02.SW0DMSEL[SW0DWIXM] = "V";
                                   /* These changes were put here*/
      SW0DM002.SW0DMSEL[SW0DWIXM] = "V"; /* to automatically reshow*/
      SW0DW00.SW0DWSWD = "3"; /* SW0DM003 with data from the*/
      SW0DW00.SW0DWSWF[3] = "Y"; /* next selected row in*/
      SW0DW00.SW0DWSWR[3] = "Y"; /* SW0DM002.  The message below*/
      SW0DW00.SW0DWSWU[2] = "Y"; /* is shown after all of the*/
      SW0DW00.TA5DATA[2] = TA5REC.TA5DATA; /* selected rows from*/
      SW0DW01.XWHCD = SW0DW02.XWHCD[SW0DWIXM]; /* SW0DM002 have been*/
      SW0DW01.SWEPLLNB = SW0DW02.SWEPLLNB[SW0DWIXM]; /* processed.*/
      SW0DW01.SL8WOGRP = SW0DW02.SL8WOGRP[SW0DWIXM];
      SW0DW01.XRPCD = SW0DW02.XRPCD[SW0DWIXM];
    else
      SLWREC.XXXLOCID = "360";
      converseLib.validationFailed(328); /* Control # 0002 Changes /\*/
    end

  end


end // end SW0D360

// Display the selected table row
Function SW0D400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0D410(); /* Obtain the data to display*/

  SW0D420(); /* Format and display the map*/

  SW0D430(); /* Check attention identifier*/

  SW0D440(); /* Reset fields to normal intensity*/

  SW0D450(); /* Verify the entered data*/

  SW0D460(); /* Process valid input request*/


end // end SW0D400

// Obtain the data to display
Function SW0D410()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SW0DWSWR[4] != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* establish tsq page length*/
   /* ------------------------------------------------------------*/

  SW0DW00.XXXTSLEN[4] = 1248;

   /* ------------------------------------------------------------*/
   /* if no message to display reset the page to display*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0)
    SW0DW00.XXXTSPAG[4] = 1;
  end

   /* ------------------------------------------------------------*/
   /* purge any tempory storage*/
   /* ------------------------------------------------------------*/

  SW0D113(); /* purge tsq*/

   /* ------------------------------------------------------------*/
   /* initialize records and set key*/
   /* ------------------------------------------------------------*/
  set SW0DW04 empty; /* M002 display storage*/
  set SWGREC empty;
  set SWVREC empty;

  SW0DW03.SW0DMSEL[SW0DWIDX] = "V";
  SW0DM003.SW0DMSEL[SW0DWIDX] = "V";
  SWGREC.XWHCD = SW0DM003.XWHCD;
  SWGREC.SWEPLLNB = SW0DM003.SWEPLLNB[SW0DWIDX];
  SWGREC.TSHCNTNR = SW0DM003.TSHCNTNR[SW0DWIDX];
  SWGREC.XGPCD = SW0DM003.XGPCD[SW0DWIDX];
  SWGREC.PC3PONBR = SW0DM003.PC3PONBR[SW0DWIDX];

   /* ------------------------------------------------------------*/
   /* declare the table cursor*/
   /* ------------------------------------------------------------*/

  SW0D411(); /* declare cursor and open*/

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 0; /* display line index*/

  while (SQLCA.VAGen_SQLCODE == 0) /* while not end of cursor*/
    SW0D412(); /* fetch row*/
    if (SQLCA.VAGen_SQLCODE != 100) /* ; not end of cursor*/
      SW0D413(); /* Save in display storage*/
    end
    /* ----------------------------------------------------------*/
     /* if page is full add page to tsq*/
    /* ----------------------------------------------------------*/
    if (SW0DW00.SW0DWIXM > 13) /* page is full*/
      SW0D415();
      SW0DW00.SW0DWIXM = 0;
    end
  end

   /* ------------------------------------------------------------*/
   /* add any  partialy formatted pages to tsq*/
   /* ------------------------------------------------------------*/
  if (SW0DW00.SW0DWIXM > 0)
    SW0D415();
  end

   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

  SW0D416();

   /* ------------------------------------------------------------*/
   /* If no data found indicate no data to display*/
   /* ------------------------------------------------------------*/
  if (SW0DW00.TA5TSQIX == 0)
    SLWREC.XXXLOCID = "410";
    converseLib.validationFailed(214);
    SW0DW00.SW0DWSWD = 3;
    SW0DW00.SW0DWSWR = "N"; /* Request for data switch*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWSWR = "N"; /* Request for data switch*/


end // end SW0D410

// select set vplnsy01
Function SW0D411()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("S1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "3"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "421"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWGREC.SWGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D411

// fetch vplnsy01 cursor
Function SW0D412()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("N1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "3"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "421"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWGREC.SWGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end SW0D412

// save data in display storage
Function SW0D413()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1;
  SW0DW04.SW0DWGR4[SW0DWIXM] = SWGREC.SWGGROUP;
  SW0D414(); /* translate life cycle*/

end // end SW0D413

// translate xlc code
Function SW0D414()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/


  SYCREC.XGPCD = SW0DW04.XGPCD[SW0DWIXM];
  SYCREC.SY1STNBR = SW0DW04.SY1STNBR[SW0DWIXM];
  SYCREC.SY2CLRID = SW0DW04.SY2CLRID[SW0DWIXM];
  SYCREC.XDMCD = SW0DW04.XDMCD[SW0DWIXM];

  XSSYCI0(); /* <===  obtain style and color data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SW0DW04.XLCCD[SW0DWIXM] = " ";
  if (SQLCA.VAGen_SQLCODE == +0)
    if (SW0DW04.XUMCD[SW0DWIXM] == "  ")
      SW0DW04.XUMCD[SW0DWIXM] = SYCREC.XUMCD;
    end
    if (SYCREC.SY2CEDT1 <= X2CREC.X2CCURDT)
      SW0DW04.XLCCD[SW0DWIXM] = SYCREC.XLCCD1;
    else
      if (SYCREC.SY2CEDT2 <= X2CREC.X2CCURDT)
        SW0DW04.XLCCD[SW0DWIXM] = SYCREC.XLCCD2;
      else
        if (SYCREC.SY2CEDT3 <= X2CREC.X2CCURDT)
          SW0DW04.XLCCD[SW0DWIXM] = SYCREC.XLCCD3;
        else
          if (SYCREC.SY2CEDT4 <= X2CREC.X2CCURDT)
            SW0DW04.XLCCD[SW0DWIXM] = SYCREC.XLCCD4;
          else
            SW0DW04.XLCCD[SW0DWIXM] = "  ";
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <--- rec not found*/
      SQLCA.VAGen_SQLCODE = 0;
      return;
    else
      SLWREC.XXXLOCID = "SW0D";
      converseLib.validationFailed(0001);
      return;
    end
  end

end // end SW0D414

// add page to TSQ SW3D
Function SW0D415()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0DW04.XXXTSLEN = SW0DW00.XXXTSLEN[4];
  TA5REC.TA5APPID = "SW3D"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0DW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0DW04 empty; /* M001 display storage*/

    SW0DW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "415"; /* Module identification*/
  converseLib.validationFailed(3); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M004"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0D415

// close vplnsy01 cursor
Function SW0D416()
   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("C1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "3"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "416"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWGREC.SWGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end SW0D416

// Format and converse the map
Function SW0D420()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.SW0DWSWR[4] == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0DW00.SW0DWSWF[4] == "Y") /* Map must be formatted*/
      SW0D421(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0DM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW0DM004.XWHCD = SW0DM003.XWHCD;
  SW0DM004.XWHABRV = SW0DM003.XWHABRV;

  SW0DM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0DM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0DM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0DM004.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0DM004 alarm; /* Indicate sound alarm*/

  end

  converse SW0DM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0DM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0DM004.CAITEM; /* Application data*/

end // end SW0D420

// Format the display data
Function SW0D421()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0DM004 initial; /* m004 input/output area*/

  SW0DW00.SW0DWSWF[4] = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0DW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0DW00.XXXTSPAG[4] != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SW0DW00.XXXTSPAG[4] > SW0DW00.TA5TSQIX[4])
        SW0DW00.XXXTSPAG[4] = SW0DW00.TA5TSQIX; /* Default to highest*/
      end

      SW0DS05(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SW0DM004.XXXLITPG skip; /* "PAGE" literal*/
    SW0DM004.XXXTSPAG = SW0DW00.XXXTSPAG[4]; /* Current page*/
    set SW0DM004.XXXLITOF skip; /* "OF" literal*/
    SW0DM004.TA5TSQIX = SW0DW00.TA5TSQIX; /* Highest page*/

    /* ------------------------------------------------------------*/
     /* Display the fixed information on the screen.*/
    /* ------------------------------------------------------------*/
    SW0DM004.SWEPLLNB = SW0DM003.SWEPLLNB[SW0DWIDX];
    SW0DM004.XRPCD = SW0DM003.XRPCD[SW0DWIDX];
    SW0DM004.SL8WOGRP = SW0DW03.SL8WOGRP[SW0DWIDX];
    SW0DM004.TSHCNTNR = SW0DM003.TSHCNTNR[SW0DWIDX];
    SW0DM004.PC3PONBR = SW0DM003.PC3PONBR[SW0DWIDX];
    SW0DM004.SWVWPOID = SW0DM003.SWVWPOID[SW0DWIDX];
    SW0DM004.PC4ORTYP = SW0DM003.PC4ORTYP[SW0DWIDX];
    SW0DM004.SW0DMTCS = SW0DM003.SW0DMTCS[SW0DWIDX];
    SW0DM004.SW0DMTUN = SW0DM003.SW0DMTUN[SW0DWIDX];

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SW0DW00.SW0DWIXM = 1; /* Initialize line index*/

  while (SW0DW00.SW0DWIXM <= 12 /* Until screen is full*/
   && SW0DW04.XGPCD[SW0DWIXM] > " ") /* or end of data*/


    SW0DM004.XGPCD[SW0DWIXM] = SW0DW04.XGPCD[SW0DWIXM];
    SW0DM004.SY1STNBR[SW0DWIXM] = SW0DW04.SY1STNBR[SW0DWIXM];
    SW0DM004.SY2CLRID[SW0DWIXM] = SW0DW04.SY2CLRID[SW0DWIXM];
    SW0DM004.XDMCD[SW0DWIXM] = SW0DW04.XDMCD[SW0DWIXM];
    SW0DM004.XQACD[SW0DWIXM] = SW0DW04.XQACD[SW0DWIXM];
    SW0DM004.XLCCD[SW0DWIXM] = SW0DW04.XLCCD[SW0DWIXM];
    SW0DM004.PC2INSEG[SW0DWIXM] = SW0DW04.PC2INSEG[SW0DWIXM];
    SW0DM004.XEGCD[SW0DWIXM] = SW0DW04.XEGCD[SW0DWIXM];
    SW0DM004.XPGCD[SW0DWIXM] = SW0DW04.XPGCD[SW0DWIXM];
    SW0DM004.XUMCD[SW0DWIXM] = SW0DW04.XUMCD[SW0DWIXM];
    SW0DM004.XOWCD[SW0DWIXM] = SW0DW04.XOWCD[SW0DWIXM];
    SW0DM004.XSLCD[SW0DWIXM] = SW0DW04.XSLCD[SW0DWIXM];
    SW0DM004.SWGPRDCS[SW0DWIXM] = SW0DW04.SWGPRDCS[SW0DWIXM];
    SW0DM004.SWGPRDUN[SW0DWIXM] = SW0DW04.SWGPRDUN[SW0DWIXM];

    SW0DW00.SW0DWIXM = SW0DW00.SW0DWIXM + 1; /* Increment line index*/

  end


end // end SW0D421

// Check attention identifier
Function SW0D430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0DW00.SW0DWSWR == "Y") /* Request for data*/
      set SW0DW04 empty; /* M002 display storage*/
    end

    SW0DW00.SW0DWSWF[1] = "Y"; /* Format the map switch*/
    SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/
    SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0D111(); /* Purge SW1D tsq*/
      SW0D112(); /* Purge SW2D tsq*/
      SW0D113(); /* Purge SW3D tsq*/

      XSSL001(); /* Exit to another application*/

      set SW0DM001.CATOAP cursor, bold; /* Highlight*/

      SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/

    else

      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15)

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0DM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      TA5REC.TA5DATA = SW0DW00.TA5DATA[3]; /* restore ta5rec*/
      SW0DW00.SW0DWSWD = "3"; /* Map to be displayed switch*/
      SW0DW00.SW0DWSWF[3] = "Y"; /* Format the map switch*/
      SW0DW00.SW0DWSWU[3] = "Y"; /* update viewed recs in tsq*/
      exit stack; /* Exit to display map*/
    end

    if (converseVar.eventKey is pf5) /* PF4 was pressed*/
      COMMAREA.CATOAP = "SL0M";
    end

    if (converseVar.eventKey is pf6) /* PF4 was pressed*/
      COMMAREA.CATOAP = "SW0C";
    end

    if (converseVar.eventKey is pf15) /* PF4 was pressed*/
      COMMAREA.CATOAP = "SL0F";
    end

    SW0D111(); /* Purge SW1D tsq*/
    SW0D112(); /* Purge SW2D tsq*/
    SW0D113(); /* Purge SW3D tsq*/

    XSSL001(); /* Exit to another application*/

    SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "430"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0D430

// Reset highlighted fields
Function SW0D440()
   /* ------------------------------------------------------------*/
   /* there are no modifiable field attributes to reset*/
   /* ------------------------------------------------------------*/

end // end SW0D440

// Verify data that was entered
Function SW0D450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0DM004.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "450A"; /* Module identification*/
    set SW0DM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* Determine if a valid scroll request was entered*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    /* ------------------------------------------------------------*/
     /* If scroll back was requested, ensure that pages exist.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     && SW0DW00.XXXTSPAG[4] < 2)    /* and no previous pages*/

      SLWREC.XXXLOCID = "450B"; /* Module identification*/
      converseLib.validationFailed(7); /* No previous page to display*/

    end

    /* ------------------------------------------------------------*/
     /* If scroll forward was requested, ensure that pages exist.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf8 /* Scroll forward request*/
     && SW0DW00.XXXTSPAG[4] >= SW0DW00.TA5TSQIX[4])

      SLWREC.XXXLOCID = "450C"; /* Module identification*/
      converseLib.validationFailed(8); /* No more pages to display*/

    end


  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0D450

// Process valid input request
Function SW0D460()
  SW0DW00.SW0DWSWR[4] = "N";
  SW0DW00.SW0DWSWF[4] = "Y";

  if (converseVar.eventKey is enter)
    SW0DW00.SW0DWIDX = SW0DW00.SW0DWIDX + 1;
    if ("S" in SW0DM003.SW0DMSEL from SW0DWIDX)
      SW0DW00.SW0DWIDX = sysVar.arrayIndex;
      SW0DW00.SW0DWSWR[4] = "Y";
    else
                                                /* Control # 0002 \/*/
      if ("S" in SW0DW02.SW0DMSEL)
        SW0DW00.SW0DWIXM = sysVar.arrayIndex; /* These changes were put*/
        SW0DW02.SW0DMSEL[SW0DWIXM] = "V"; /* here to automatically*/
        SW0DM002.SW0DMSEL[SW0DWIXM] = "V";
                                   /* reshow SW0DM003 with data*/
        SW0DW00.SW0DWSWD = "3"; /* from the next selected*/
        SW0DW00.SW0DWSWF[3] = "Y"; /* row in SW0DM002.  The*/
        SW0DW00.SW0DWSWR[3] = "Y"; /* message below is shown*/
        SW0DW00.SW0DWSWU[2] = "Y"; /* after all of the selected*/
        SW0DW00.TA5DATA[2] = TA5REC.TA5DATA; /* rows from*/
        SW0DW01.XWHCD = SW0DW02.XWHCD[SW0DWIXM]; /* SWODM002 have*/
        SW0DW01.SWEPLLNB = SW0DW02.SWEPLLNB[SW0DWIXM]; /* been processed*/
        SW0DW01.SL8WOGRP = SW0DW02.SL8WOGRP[SW0DWIXM];
        SW0DW01.XRPCD = SW0DW02.XRPCD[SW0DWIXM];
      else
        SLWREC.XXXLOCID = "460";
        converseLib.validationFailed(328); /* Control # 0002 /\*/
        SW0DW00.SW0DWSWF[3] = "Y";
        SW0DW00.SW0DWSWU[3] = "Y";
        TA5REC.TA5DATA = SW0DW00.TA5DATA[3];
        SW0DW00.SW0DWSWD = "3";
      end

    end
  end
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SW0DW00.XXXTSPAG[4] = SW0DW00.XXXTSPAG[4] - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SW0DW00.XXXTSPAG[4] = SW0DW00.XXXTSPAG[4] + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

end // end SW0D460

// Update TSQ SW1D
Function SW0DS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0DW02.XXXTSLEN = SW0DW00.XXXTSLEN[2];
  TA5REC.TA5TSQIX = SW0DW00.TA5TSQIX[2];
  TA5REC.TA5APPID = "SW1D";
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0DS01

// fetch  TSQ SW1D
Function SW0DS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0DW02.XXXTSLEN = SW0DW00.XXXTSLEN[2];
  TA5REC.TA5APPID = "SW1D"; /* Application identification*/
  TA5REC.TA5TSQIX = SW0DW00.XXXTSPAG[2]; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0DS02

// Update TSQ SW2D
Function SW0DS03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0DW03.XXXTSLEN = SW0DW00.XXXTSLEN[3];
  TA5REC.TA5APPID = "SW2D";
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0DW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0DS03

// fetch  TSQ SW2D
Function SW0DS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0DW03.XXXTSLEN = SW0DW00.XXXTSLEN[3];
  TA5REC.TA5APPID = "SW2D"; /* Application identification*/
  TA5REC.TA5TSQIX = SW0DW00.XXXTSPAG[3]; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0DW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0DS04

// fetch TSQ SW3D
Function SW0DS05()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0DW04.XXXTSLEN = SW0DW00.XXXTSLEN[4]; /* Temporary storage length*/
  TA5REC.TA5APPID = "SW3D"; /* Application identification*/
  TA5REC.TA5TSQIX = SW0DW00.XXXTSPAG[4]; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0DW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M004"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0DS05

// Select unique planhdr
Function SW0DS10()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  SLVREC.SLVFNC = "S ";
  try
    call "IO5350" (SLVREC, SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0DW00.SW0DWSWD = "1"; /* Map to be displayed switch*/
  SW0DW00.SW0DWSWR[1] = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0DS10

//*** RECORD=SW0DW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0DW00 type basicRecord
  10 * char(25) [4] ; 
    15 SW0DWSWF SW0DWSWF ; 
    15 SW0DWSWR SW0DWSWR ; 
    15 SW0DWSWU SW0DWSWU ; 
    15 XXXTSPAG XXXTSPAG ; 
    15 TA5TSQIX TA5TSQIX ; 
    15 XXXTSLEN XXXTSLEN ; 
    15 TA5DATA TA5DATA ; 
  10 SW0DWSWD SW0DWSWD ; 
  10 SLWMSGNO SLWMSGNO ; 
  10 SW0DWIXM SW0DWIXM ; 
  10 SW0DWIDX SW0DWIDX ; 
  10 SW0DWPRO SW0DWPRO ; 
  10 SW0DWPID SW0DWPID ; 
    15 * num(3) ; 
    15 SW0DWYY1 SW0DWYY1 ; 
    15 SW0DWYY2 SW0DWYY2 ; 
    15 SW0DWMMM SW0DWMMM ; 
  10 SW0DWPIF SW0DWPIF ; 
    15 PCFSECD PCFSECD ; 
      20 SW0DWSE1 SW0DWSE1 ; 
      20 SW0DWSE2 SW0DWSE2 ; 
    15 SW0DWPMM SW0DWPMM ; 
    15 SW0DWFCD SW0DWFCD ; 
  10 SW0DWDT SW0DWDT ; 
    15 SW0DWCC SW0DWCC ; 
    15 SW0DWYY SW0DWYY ; 
    15 SW0DWMM SW0DWMM ; 
    15 SW0DWDD SW0DWDD ; 
end // end SW0DW00

//*** RECORD=SW0DW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SW0DW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 XRPCD XRPCD ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 XGPCD XGPCD ; 
  10 SL8WOGRP SL8WOGRP ; 
  10 SWVWPOID SWVWPOID ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 SW0DMTUN SW0DMTUN ; 
  10 SW0DMTCS SW0DMTCS ; 
  10 XXXUSRID XXXUSRID ; 
  10 SW0DWFDT SW0DWFDT ; 
    15 SW0DWFCC SW0DWFCC ; 
    15 SW0DWFYY SW0DWFYY ; 
    15 SW0DWFMM SW0DWFMM ; 
    15 SW0DWFDD SW0DWFDD ; 
  10 SW0DWTDT SW0DWTDT ; 
    15 SW0DWTCC SW0DWTCC ; 
    15 SW0DWTYY SW0DWTYY ; 
    15 SW0DWTMM SW0DWTMM ; 
    15 SW0DWTDD SW0DWTDD ; 
end // end SW0DW01

//*** RECORD=SW0DW02 ****
// ********************* PLAN HEADER TABLE ********************
// 
// DB2 TABLE:            dstloc.vplnhd01
// 
// COPYLIB MEMBER:       dcl00870
// 
// KEY TO DB2 TABLE:     xwhcd
//                       sweplnnb
// 
// DATE CREATED:         OCTOBER 3, 1990
// 
// MAINTENANCE LOG:
// 
// DATE     INIT   COMMENTS
// -------- ------ --------------------------------------------
// 10-03-90 esmith Created CSP record.
// 02-22-93 ryonke Changed for table cahnges.
// ************************************************************
// ***********************
Record SW0DW02 type basicRecord
  3 * char(970) ; 
    5 XXXTSLEN XXXTSLEN ; 
    5 SW0DMSEL SW0DMSEL [14] ; 
    5 SW0DWGR2 SW0DWGR2 [14] ; 
      10 XWHCD XWHCD ; 
      10 SWEPLLNB SWEPLLNB ; 
      10 XRPCD XRPCD ; 
      10 SL8WOGRP SL8WOGRP ; 
      10 SWEMPLCS SWEMPLCS ; 
      10 SWEMCLCS SWEMCLCS ; 
      10 SWEMWLCS SWEMWLCS ; 
      10 SWEPPLTN SWEPPLTN ; 
      10 SWENPUNB SWENPUNB ; 
      10 SWEHSTFL SWEHSTFL ; 
      10 SWEPIPDT SWEPIPDT ; 
      10 XITCD XITCD ; 
      10 YMTCD YMTCD ; 
      10 IN7STNBR IN7STNBR ; 
      10 SL-LOC-SZ-IND SL-LOC-SZ-IND ; 
      10 SL-HANDSTK-CS-QTY SL-HANDSTK-CS-QTY ; 
      10 SL-LAST-CRTN-FL SL-LAST-CRTN-FL ; 
      10 SL-PRDCTN-SAS-FL SL-PRDCTN-SAS-FL ; 
      10 XXXUSRID XXXUSRID ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
    5 ZZQTY1 ZZQTY1 [14] ; 
    5 ZZQTY2 ZZQTY2 [14] ; 
end // end SW0DW02

//*** RECORD=SW0DW03 ****
// **************  PLAN CONTAINER PO TABLE  *******************
// 
// DB2 TABLE:           dstloc.vplcpo01
// 
// COPYLIB MEMBER:      dcl00872
// 
// KEY TO DB2 TABLE:    xwhcd
//                      sweplnnb
//                      tshcntnr
//                      xgpcd
//                      pc3ponbr
// 
// DATE CREATED:        OCTOBER 3, 1990
// 
// MAINTENANCE:
// 
// DATE     INIT   COMMENTS
// -------- ------ --------------------------------------------
// 10-03-90 esmith Created CSP record.
// 02-22-93 ryonke Changed for table changes.
// ************************************************************
// ***********************
Record SW0DW03 type basicRecord
  3 XXXTSLEN XXXTSLEN ; 
  3 * char(1326) ; 
    5 SW0DMSEL SW0DMSEL [13] ; 
    5 XRPCD XRPCD [13] ; 
    5 SL8WOGRP SL8WOGRP [13] ; 
    5 SW0DWGR3 SW0DWGR3 [13] ; 
      10 XWHCD XWHCD ; 
      10 SWEPLLNB SWEPLLNB ; 
      10 TSHCNTNR TSHCNTNR ; 
      10 XGPCD XGPCD ; 
      10 PC3PONBR PC3PONBR ; 
      10 PC3POIDT PC3POIDT ; 
      10 PCFSECD PCFSECD ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 PC4ORTYP PC4ORTYP ; 
      10 SWHINSN1 SWHINSN1 ; 
      10 SWHINSN2 SWHINSN2 ; 
      10 SWAPCTIN SWAPCTIN ; 
      10 SWFHLDHS SWFHLDHS ; 
      10 SL-SAT-STG-LOC-IND SL-SAT-STG-LOC-IND ; 
      10 SL4ZONE SL4ZONE ; 
      10 SWFCRCFL SWFCRCFL ; 
      10 SWFCPWOF SWFCPWOF ; 
      10 SWFSLNFR SWFSLNFR ; 
      10 SWFSLNTH SWFSLNTH ; 
      10 SWFLLNFR SWFLLNFR ; 
      10 SWFLLNTH SWFLLNTH ; 
      10 SWFWLNFR SWFWLNFR ; 
      10 SWFWLNTH SWFWLNTH ; 
      10 SWFULNFR SWFULNFR ; 
      10 SWFULNTH SWFULNTH ; 
      10 SL-SPLT-LANE-FROM SL-SPLT-LANE-FROM ; 
      10 SL-SPLT-LANE-THRU SL-SPLT-LANE-THRU ; 
      10 * char(7) ; // filler
    5 SWVWPOID SWVWPOID [13] ; 
    5 ZZQTY1 ZZQTY1 [13] ; 
    5 ZZQTY2 ZZQTY2 [13] ; 
end // end SW0DW03

//*** RECORD=SW0DW04 ****
// *****************  PLAN PRODUCT TABLE  *********************
// 
// DB2 TABLE:           dstloc.vplnsy01
// 
// COPYLIB MEMBER:      dcl00873
// 
// KEY TO DB2 TABLE:    xwhcd
//                      sweplnnb
//                      tshcntnr
//                      xgpcd
//                      pc3ponbr
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      xqacd
//                      xowcd
//                      pc2inseg
//                      xegcd
//                      xpgcd
//                      xumcd
//                      xslcd
// 
// DATE CREATED:        OCTOBER 3, 1990
// 
// MAINTENANCE LOG:
// 
// DATE     INIT   COMMENTS
// -------- ------ --------------------------------------------
// 10-09-90 esmith CREATED NEW CSP RECORD.
// 02-22-93 ryonke Changed for table changes.
// ************************************************************
// ***********************
Record SW0DW04 type basicRecord
  3 XXXTSLEN XXXTSLEN ; 
  3 * char(1248) ; 
    5 SW0DWGR4 SW0DWGR4 [12] ; 
      10 XWHCD XWHCD ; 
      10 SWEPLLNB SWEPLLNB ; 
      10 TSHCNTNR TSHCNTNR ; 
      10 XGPCD XGPCD ; 
      10 PC3PONBR PC3PONBR ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 XOWCD XOWCD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XEGCD XEGCD ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XSLCD XSLCD ; 
      10 PK-CRTN-CD PK-CRTN-CD ; 
      10 SWGPSEQN SWGPSEQN ; 
      10 SWGPRDCS SWGPRDCS ; 
      10 SWGPRDPL SWGPRDPL ; 
      10 SWGPRDUN SWGPRDUN ; 
      10 SWAPCTIN SWAPCTIN ; 
      10 SWFHLDHS SWFHLDHS ; 
      10 SL-PRDCTN-SAS-FL SL-PRDCTN-SAS-FL ; 
      10 SWHINSN1 SWHINSN1 ; 
      10 SWGINCS1 SWGINCS1 ; 
      10 SWGINUN1 SWGINUN1 ; 
      10 SWGINMM1 SWGINMM1 ; 
      10 SWHINSN2 SWHINSN2 ; 
      10 SWGINCS2 SWGINCS2 ; 
      10 SWGINUN2 SWGINUN2 ; 
      10 SWGINMM2 SWGINMM2 ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
    5 XLCCD XLCCD [12] ; 
end // end SW0DW04

DataItem SW0DMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DMTCS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DMTUN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem SW0DWCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem SW0DWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem SW0DWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0DWFCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shortend factory code
DataItem SW0DWFCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from date
DataItem SW0DWFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DWGR2 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DWGR3 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DWGR4 char(102)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SW0DWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SW0DWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem SW0DWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0DWMMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// poid
DataItem SW0DWPID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted po/id
DataItem SW0DWPIF char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shippment mm/mm
DataItem SW0DWPMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process to be performed
DataItem SW0DWPRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/s
DataItem SW0DWSE1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y(yr of decade)
DataItem SW0DWSE2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SW0DWSWD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem SW0DWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0DWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SW0DWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DWTCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0DWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to date
DataItem SW0DWTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0DWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem SW0DWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0DWYY1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0DWYY2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

