package sw0y;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0Y ****
// This application allows a user to display receiving log data
// for a specific whse, container, and package carton sequence
// sequence number.  The user may modifiy, or transfer carton
// modify an existing work order, or transfer carton
// data
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/03/90  rgilli  new program
//          02/14/91  ryonke  program changes for table changes
// SL#0     10/10/91  SPOPA   Change "Allow Implicits" to NO.
// MAINT    01/31/92  GRAY    INITIALIZE RECORDS AND MAPS.
// Y2KFIX   02/03/98  MBURLE  Regenerated to pick latest
//                            version of date routine, XX0XS01.
// *********************
Program SW0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PCYREC PCYREC; // record
  SL1REC SL1REC; // record
  SL2REC SL2REC; // record
  SL3REC SL3REC; // record
  SL5REC SL5REC; // record
  SLSREC SLSREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0YW00 SW0YW00; // record
  SW0YW01 SW0YW01; // record
  SWGREC SWGREC; // record
  SWHREC SWHREC; // record
  SWJREC SWJREC; // record
  SWMREC SWMREC; // record
  SWNREC SWNREC; // record
  SWVREC SWVREC; // record
  SWXREC SWXREC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XOWREC XOWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use XEGTBL; // table
  use XGPTBL; // table
  use XLCTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XSLTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use SW0YM.SW0YM001,  // forms
      SW0YM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0YM001 initial; /* M001 input/output*/
    set XX0XM001 initial; /* pop-up window put*/
    set SW0YW00 empty; /* Working storage*/
    set SW0YW01 empty; /* M001 display storage*/
    set PCYREC empty;
    set PC2REC empty;
    set PC3REC empty;
    set SLVREC empty;
    set SL1REC empty;
    set SL2REC empty;
    set SL3REC empty;
    set SL5REC empty;
    set SLSREC empty;
    set SQLCA empty; /* SQL communication area*/
    set SWGREC empty;
    set SWHREC empty;
    set SWJREC empty;
    set SWMREC empty;
    set SWNREC empty;
    set SWXREC empty;
    set SWVREC empty;
    set SYCREC empty;
    set SYPREC empty;
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temporary storage area*/
    set XOWREC empty;
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty;
    set ERRSQLCA empty;

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    SW0YW00.SW0YWSWR = "N"; /* Request for data switch*/
    SW0YW00.SW0YWSWF = "Y"; /* format screen data switch*/
    SLWREC.XXXAPPID = COMMAREA.CACURRAP;
    SW0YW01.XWHCD = SLWREC.XWHCD;
    if (SW0YW01.XWHCD in XWHTBL.XWHCD)
      SW0YW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    if (SLWREC.XGPCD == " ")
      SW0YW01.XGPCD = "03";
    else
      SW0YW01.XGPCD = SLWREC.XGPCD;
    end
    SW0YW01.XDMCD = "00";
    SW0YW01.XEGCD = "000";
    SW0YW01.PC2INSEG = "000";
    SW0YW01.XUMCD = "01";
    SW0YW01.XOWCD = "00";
    SW0YW01.XQACD = "01";
    SW0YW01.XPGCD = "00";
    SW0YW01.XSLCD = "000";

     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/

    goto SW0Y001;

    SW0Y001: SW0Y001();
    goto SW0Y001;
  end // end main
end // end SW0Y

// Inquire/maintainance m001
Function SW0Y001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0Y100(); /* Obtain the data to display*/

  SW0Y200(); /* Format and display the map*/

  SW0Y300(); /* Check attention identifier*/

  SW0Y400(); /* Reset fields to normal intensity*/

  SW0Y500(); /* Verify the entered data*/

  SW0Y600(); /* Process valid input request*/

end // end SW0Y001

// Obtain the data to display
Function SW0Y100()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0YW00.SW0YWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
    /* set map defaults*/
   /* ------------------------------------------------------------*/

  if (SW0YW01.XGPCD == " ")
    SW0YW01.XGPCD = "03";
  end
  if (SW0YW01.XDMCD == " ")
    SW0YW01.XDMCD = "00";
  end
  if (SW0YW01.XEGCD == " ")
    SW0YW01.XEGCD = "000";
  end
  if (SW0YW01.PC2INSEG == " ")
    SW0YW01.PC2INSEG = "000";
  end
  if (SW0YW01.XUMCD == " ")
    SW0YW01.XUMCD = "01";
  end
  if (SW0YW01.XOWCD == " ")
    SW0YW01.XOWCD = "00";
  end
  if (SW0YW01.XQACD == " ")
    SW0YW01.XQACD = "01";
  end
  if (SW0YW01.XPGCD == " ")
    SW0YW01.XPGCD = "00";
  end
  if (SW0YW01.XSLCD == " ")
    SW0YW01.XSLCD = "000";
  end

   /* ------------------------------------------------------------*/
   /* if key data has been entered and is valid obtain the first*/
   /* row from the dstloc.vrlitm01 to get the container number*/
   /* then select unique against the dstloc.vrlhdr01 to verify*/
   /* the receiving status.*/
   /* ------------------------------------------------------------*/

  SW0YS01(); /* sel 'sb' dstloc.vrlitm01*/

  SW0YS02(); /* fetch 'nb' dstloc.vrlitm01*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(371); /* no whse/carton does not exist*/
    SLWREC.XXXLOCID = "100";
  else
    SW0YW01.TSHCNTNR = SL2REC.TS3CNTNR;
    SW0YW01.PC3PONBR = SL2REC.PC3PONBR;

    SW0YS04(); /* select 's' dstloc.vrlhdr01 row*/

    if (SL1REC.YRSCD == "01"
     || SL1REC.YRSCD == "02")
    else
      converseLib.validationFailed(334); /* invalid receiving status*/
      SLWREC.XXXLOCID = "100";
    end
  end

  SW0YS03(); /* close 'cb' dstloc.vrlitm01*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* if more than one item exists for the requested whse,*/
   /* container, and package sequence number display message*/
   /* indicating the user must enter the product informtion*/
   /* ------------------------------------------------------------*/

  if (SW0YW00.SW0YWPKE != "Y")

    SW0YS05(); /* Select 's8' dstloc.vrlitm01 rows*/

    SW0YS06(); /* fetch  'n8' dstloc.vrlitm01 row*/

    SW0YW00.SW0YWCNT = 0; /* count field*/
    while (SQLCA.VAGen_SQLCODE == 0)

      SW0YW00.SW0YWCNT = SW0YW00.SW0YWCNT + 1;

      SW0YS06(); /* fetch  'n8' dstloc.vrlitm01 row*/

    end

    SW0YS07(); /* close  'c8' dstloc.vrlitm01 row*/

    if (SW0YW00.SW0YWCNT > 1)
      converseLib.validationFailed(335); /* more than 1 prod, enter prod info*/
      set SW0YM001.XGPCD cursor;
      SLWREC.XXXLOCID = "100"; /* more than 1 product exists*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
    /* if the product information was not entered obtain the*/
    /* dstloc.vrlitm01 data using the whse and container, else*/
    /* use whse, container, and product data.*/
   /* ------------------------------------------------------------*/

  set SL2REC empty;
  if (SW0YW00.SW0YWPKE != "Y") /* the product was not entered*/

    SL2REC.XWHCD = SW0YW01.XWHCD;
    SL2REC.TS3CNTNR = SW0YW01.TSHCNTNR;
    SL2REC.PKDNCSQN = SW0YW01.PKDNCSQN;
    SL2REC.PC3PONBR = -1;
    SL2REC.XGPCD = "*";
    SL2REC.SY1STNBR = "*";
    SL2REC.SY2CLRID = "*";
    SL2REC.XDMCD = "*";
    SL2REC.XQACD = "*";
    SL2REC.XOWCD = "*";
    SL2REC.XUMCD = "*";
    SL2REC.PC2INSEG = "*";
    SL2REC.XEGCD = "*";
    SL2REC.XPGCD = "*";
    SL2REC.XSLCD = "*";
    SL2REC.SL2PALET = "*";
    SL2REC.SL2CASE = "*";

  else

    SL2REC.XWHCD = SW0YW01.XWHCD;
    SL2REC.TS3CNTNR = SW0YW01.TSHCNTNR;
    SL2REC.PKDNCSQN = SW0YW01.PKDNCSQN;
    SL2REC.PC3PONBR = SW0YW01.PC3PONBR;
    SL2REC.XGPCD = SW0YW01.XGPCD;
    SL2REC.SY1STNBR = SW0YW01.SY1STNBR;
    SL2REC.SY2CLRID = SW0YW01.SY2CLRID;
    SL2REC.XDMCD = SW0YW01.XDMCD;
    SL2REC.XQACD = SW0YW01.XQACD;
    SL2REC.XUMCD = SW0YW01.XUMCD;
    SL2REC.XOWCD = SW0YW01.XOWCD;
    SL2REC.PC2INSEG = SW0YW01.PC2INSEG;
    SL2REC.XEGCD = SW0YW01.XEGCD;
    SL2REC.XPGCD = SW0YW01.XPGCD;
    SL2REC.XSLCD = SW0YW01.XSLCD;
    SL2REC.SL2PALET = "*";
    SL2REC.SL2CASE = "*";

  end

  SW0YS08(); /* Select 's9' dstloc.vrlitm01 rows*/

  SW0YS09(); /* fetch  'n9' dstloc.vrlitm01 row*/

  if (SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(252); /* no products to display*/
    SLWREC.XXXLOCID = "100";

  else

    if (SL2REC.SL8TOAR > " "
     || SL2REC.SL8TOZN > " "
     || SL2REC.SL8TOLC > " ")

      converseLib.validationFailed(336);
      SLWREC.XXXLOCID = "100";

    else

      SW0Y110(); /* load product data*/

      move 0 to SW0YW01.SY5SZID[1] for all;
      move 0 to SW0YW01.SL2RCVD[1] for all;

      move " " to SW0YW01.SW0YWNSZ[1] for all;
      move 0 to SW0YW01.SW0YWNSI[1] for all;
      move 0 to SW0YW01.SW0YWNQT[1] for all;

      SW0YW00.SW0YWIDX = 1; /* init index*/
      while (SQLCA.VAGen_SQLCODE == 0
       && SW0YW00.SW0YWIDX <= 8)

        SW0YW01.SY5SZID[SW0YWIDX] = SL2REC.SY5SZID; /* curr sz id*/
        SW0YW01.SL2RCVD[SW0YWIDX] = SL2REC.SL2RCVD; /* curr qty*/
        SW0YW01.SW0YWNSI[SW0YWIDX] = SL2REC.SY5SZID; /* new sz id*/
        SW0YW01.SW0YWNQT[SW0YWIDX] = SL2REC.SL2RCVD; /* new qty*/

        SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;

        SW0YS09(); /* fetch  'n9' dstloc.vrlitm01 row*/

      end
    end
  end

  SW0YS10(); /* close  'c9' dstloc.vrlitm01 row*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* obtain the style and color description from dprod.vcolor02*/
   /* ------------------------------------------------------------*/

  set SYCREC empty; /* Clear row storage area*/

  SYCREC.XGPCD = SW0YW01.XGPCD;
  SYCREC.SY1STNBR = SW0YW01.SY1STNBR;
  SYCREC.SY2CLRID = SW0YW01.SY2CLRID;
  SYCREC.XDMCD = SW0YW01.XDMCD;

  SW0YS11(); /* select 's ' dprod.vcolor02 row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SW0YW01.SY1SSTNM = SYCREC.SY1SSTNM; /* curr style desc*/
    SW0YW01.SY2CLRAB = SYCREC.SY2CLRAB; /* curr color desc*/
    SW0YW01.SW0YWNSD = SYCREC.SY1SSTNM; /* new style desc*/
    SW0YW01.SW0YWNCD = SYCREC.SY2CLRAB; /* new color desc*/

  end

   /* ------------------------------------------------------------*/
   /* translate size id to size description for display*/
   /* ------------------------------------------------------------*/

  set SYPREC empty;

  SW0YW00.SW0YWTFL = "N"; /* init translate flag*/
  SYPREC.SYPFC = "IE"; /* internal to external translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate not compressed format*/

  SYPREC.XGPCD = SW0YW01.XGPCD;
  SYPREC.SY1STNBR = SW0YW01.SY1STNBR;
  SYPREC.SY2CLRID = SW0YW01.SY2CLRID;
  SYPREC.XDMCD = SW0YW01.XDMCD;
  SYPREC.XQACD = SW0YW01.XQACD;

  SW0YW00.SW0YWLIX = +1; /* initialize load index*/
  SW0YW00.SW0YWIDX = +1; /* initialize index*/
  while (SW0YWIDX <= 8)
    if (SW0YW01.SY5SZID[SW0YWIDX] > 0)
      SYPREC.SY5SZID[SW0YWLIX] = SW0YW01.SY5SZID[SW0YWIDX];
      SW0YW00.SW0YWLIX = SW0YW00.SW0YWLIX + 1;
      SW0YW00.SW0YWTFL = "Y";
    end
    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;
  end

  if (SW0YW00.SW0YWTFL == "Y") /* size id's to translate*/

    /* ------------------------------------------------------------*/
      /* This routine will move each xlated size description to w/s*/
    /* ------------------------------------------------------------*/

    SW0YS12(); /* convert sizes*/

    SW0YW00.SW0YWIDX = 1; /* initialize index*/
    while (SW0YWIDX <= 8)
      if (SYPREC.SYPSZRC[SW0YWIDX] == 0) /* good size return code*/
        SW0YW01.SY4IDDSC[SW0YWIDX] = SYPREC.SY4IDDSC[SW0YWIDX];
        SW0YW01.SW0YWNSZ[SW0YWIDX] = SYPREC.SY4IDDSC[SW0YWIDX];
      else
        SLWREC.XXXLOCID = "100";
        converseLib.validationFailed(0001); /* <--- severe error msg*/
      end
      SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0YW00.SW0YWSWR = "N"; /* Request for data switch*/
  SW0YW00.SW0YWPKE = "N"; /* product key entered switch*/
  SW0YW01.CACHGFL = "Y"; /* data is available for change*/

end // end SW0Y100

// load dstloc.vrlitm01 into w/s
Function SW0Y110()

   /* ------------------------------------------------------*/
   /* load "current" data into w/s*/
   /* ------------------------------------------------------*/

  SW0YW01.TSHCNTNR = SL2REC.TS3CNTNR;
  SW0YW01.SWEPLLNB = SL2REC.SWEPLLNB;
  SW0YW01.PC3PONBR = SL2REC.PC3PONBR;
  SW0YW01.PC3POIDT = SL2REC.PC3POIDT;
  SW0YW01.PC4ORTYP = SL2REC.PC4ORTYP;
  SW0YW01.PCFSECD = SL2REC.PCFSECD;
  SW0YW01.FY1FCTYC = SL2REC.FY1FCTYC;
  SW0YW01.SL2CASE = SL2REC.SL2CASE;
  SW0YW01.XGPCD = SL2REC.XGPCD;
  SW0YW01.SY1STNBR = SL2REC.SY1STNBR;
  SW0YW01.SY2CLRID = SL2REC.SY2CLRID;
  SW0YW01.XDMCD = SL2REC.XDMCD;
  SW0YW01.XQACD = SL2REC.XQACD;
  SW0YW01.PC2INSEG = SL2REC.PC2INSEG;
  SW0YW01.XEGCD = SL2REC.XEGCD;
  SW0YW01.XPGCD = SL2REC.XPGCD;
  SW0YW01.XUMCD = SL2REC.XUMCD;
  SW0YW01.XOWCD = SL2REC.XOWCD;
  SW0YW01.XSLCD = SL2REC.XSLCD;
  SW0YW01.XARCD = SL1REC.XARCD; /* **** loaded from r/l hdr*/
  SW0YW01.SL4ZONE = SL1REC.SL4ZONE; /* **** loaded from hdr*/
  SW0YW01.SL5LOCTN = SL2REC.SL5LOCTN;

   /* ------------------------------------------------------*/
   /* load "new" data into w/s*/
   /* ------------------------------------------------------*/

  SW0YW01.SW0YWGPC = SL2REC.XGPCD;
  SW0YW01.SW0YWSTY = SL2REC.SY1STNBR;
  SW0YW01.SW0YWCLR = SL2REC.SY2CLRID;
  SW0YW01.SW0YWDIM = SL2REC.XDMCD;
  SW0YW01.SW0YWXQA = SL2REC.XQACD;
  SW0YW01.SW0YWSEG = SL2REC.PC2INSEG;
  SW0YW01.SW0YWEDF = SL2REC.XEGCD;
  SW0YW01.SW0YWPKG = SL2REC.XPGCD;
  SW0YW01.SW0YWUOM = SL2REC.XUMCD;
  SW0YW01.SW0YWOWN = SL2REC.XOWCD;
  SW0YW01.SW0YWSLC = SL2REC.XSLCD;
  SW0YW01.SW0YWNFA = SL1REC.XARCD;
  SW0YW01.SW0YWNFZ = SL1REC.SL4ZONE;
  SW0YW01.SW0YWNFL = SL2REC.SL5LOCTN;


end // end SW0Y110

// Format and converse
Function SW0Y200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0YW00.SW0YWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0YW00.SW0YWSWF == "Y") /* Map must be formatted*/
      SW0Y210(); /* Format the data on the map*/
    end

  end

  SW0YM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW0YM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0YM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0) /* Message to display*/
    if (SLWREC.SLWMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SLWREC.SLWMSGNO);
    end /* error message number*/
    SW0YM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/
    set SW0YM001 alarm; /* Indicate sound alarm*/
  end

  converse SW0YM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;

  COMMAREA.CATOAP = SW0YM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0YM001.CAITEM; /* Application data*/


end // end SW0Y200

// Format m001 display data
Function SW0Y210()

   /* ------------------------------------------------------------*/
   /* init map sw0ym001*/
   /* ------------------------------------------------------------*/

  set SW0YM001 initial; /* m001 input/ouput area*/

  SW0YW00.SW0YWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format sw0ym001 using key data*/
   /* ------------------------------------------------------------*/

  SW0YM001.XWHCD = SW0YW01.XWHCD; /* warehouse code*/
  SW0YM001.XWHABRV = SW0YW01.XWHABRV; /* warehous abrv desc*/
  SW0YM001.PKDNCSQN = SW0YW01.PKDNCSQN; /* pk carton seq number*/

  SW0YM001.XGPCD = SW0YW01.XGPCD; /* gpc code*/
  SW0YM001.SY1STNBR = SW0YW01.SY1STNBR; /* style nbr*/
  SW0YM001.SY2CLRID = SW0YW01.SY2CLRID; /* color id*/
  SW0YM001.XDMCD = SW0YW01.XDMCD; /* dimension code*/
  SW0YM001.SY1SSTNM = SW0YW01.SY1SSTNM; /* style description*/
  SW0YM001.SY2CLRAB = SW0YW01.SY2CLRAB; /* color id description*/
  SW0YM001.XQACD = SW0YW01.XQACD; /* quality code*/
  SW0YM001.PC2INSEG = SW0YW01.PC2INSEG; /* iseg code*/
  SW0YM001.XEGCD = SW0YW01.XEGCD; /* edif code*/
  SW0YM001.XPGCD = SW0YW01.XPGCD; /* package code*/
  SW0YM001.XUMCD = SW0YW01.XUMCD; /* unit of measure*/
  SW0YM001.XOWCD = SW0YW01.XOWCD; /* owner group code*/
  SW0YM001.XSLCD = SW0YW01.XSLCD; /* class code*/

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (SW0YW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* position cursor for update*/
   /* ------------------------------------------------------------*/

  set SW0YM001.SW0YMSTY cursor;

   /* ------------------------------------------------------------*/
   /* load "current" data from sw0yw01 work record*/
   /* ------------------------------------------------------------*/

  SW0YM001.TSHCNTNR = SW0YW01.TSHCNTNR; /* container  number*/
  SW0YM001.PC4ORTYP = SW0YW01.PC4ORTYP; /* po id*/
  SW0YM001.SL2CASE = SW0YW01.SW0YWTSO; /* first 4 carton nbr*/
  SW0YM001.SWEPLLNB = SW0YW01.SWEPLLNB; /* plan nbr*/
  SW0YM001.PC3PONBR = SW0YW01.PC3PONBR; /* po number*/

   /* ------------------------------------------------------------*/
   /* get po id display format*/
   /* ------------------------------------------------------------*/

  set SWVREC empty;
  SWVREC.SWVWFNC = "ID";
  SWVREC.XGPCD = SW0YW01.XGPCD;
  SWVREC.PC3PONBR = SW0YW01.PC3PONBR;
  XSSLS10(); /* obtain po id*/
  if (SWVREC.SWVWRTN == 0)
    SW0YM001.SW0YMPID = SWVREC.SWVWPOID;
  end

  SW0YM001.XARCD = SW0YW01.XARCD; /* from area code*/
  SW0YM001.SL4ZONE = SW0YW01.SL4ZONE; /* from zone code*/
  SW0YM001.SL5LOCTN = SW0YW01.SL5LOCTN; /* from zone code*/

  SW0YW00.SW0YWIDX = 1; /* init index*/
  while (SW0YW00.SW0YWIDX <= 8)

    SW0YM001.SY4IDDSC[SW0YWIDX] = SW0YW01.SY4IDDSC[SW0YWIDX]; /* size id*/
    SW0YM001.SL2RCVD[SW0YWIDX] = SW0YW01.SL2RCVD[SW0YWIDX]; /* size qty*/

    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* load "new" data from sw0yw01 work record*/
   /* ------------------------------------------------------------*/

  SW0YM001.SW0YMGPC = SW0YW01.SW0YWGPC; /* gpc code*/
  SW0YM001.SW0YMSTY = SW0YW01.SW0YWSTY; /* style nbr*/
  SW0YM001.SW0YMCLR = SW0YW01.SW0YWCLR; /* color id*/
  SW0YM001.SW0YMDIM = SW0YW01.SW0YWDIM; /* dimension code*/
  SW0YM001.SW0YMNSD = SW0YW01.SW0YWNSD; /* style description*/
  SW0YM001.SW0YMNCD = SW0YW01.SW0YWNCD; /* color id description*/
  SW0YM001.SW0YMXQA = SW0YW01.SW0YWXQA; /* quality code*/
  SW0YM001.SW0YMSEG = SW0YW01.SW0YWSEG; /* iseg code*/
  SW0YM001.SW0YMEDF = SW0YW01.SW0YWEDF; /* edif code*/
  SW0YM001.SW0YMPKG = SW0YW01.SW0YWPKG; /* package code*/
  SW0YM001.SW0YMUOM = SW0YW01.SW0YWUOM; /* unit of measure*/
  SW0YM001.SW0YMOWN = SW0YW01.SW0YWOWN; /* owner group code*/
  SW0YM001.SW0YMSLC = SW0YW01.SW0YWSLC; /* class code*/
  SW0YM001.SW0YMNFA = SW0YW01.SW0YWNFA; /* from area code*/
  SW0YM001.SW0YMNFZ = SW0YW01.SW0YWNFZ; /* from zone code*/
  SW0YM001.SW0YMNFL = SW0YW01.SW0YWNFL; /* from location code*/

  SW0YW00.SW0YWIDX = 1; /* init index*/
  while (SW0YW00.SW0YWIDX <= 8)

    SW0YM001.SW0YMNSZ[SW0YWIDX] = SW0YW01.SW0YWNSZ[SW0YWIDX];
                                   /* sz id*/
    SW0YM001.SW0YMNQT[SW0YWIDX] = SW0YW01.SW0YWNQT[SW0YWIDX]; /* sz qty*/

    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;

  end


end // end SW0Y210

// Check attention ident. m001
Function SW0Y300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    SW0YW00.SW0YWSWR = "N"; /* request for data*/
    SW0YW00.SW0YWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSL001(); /* Exit to another application*/

      SW0YW00.SW0YWSWR = "N"; /* request for data*/
      SW0YW00.SW0YWSWF = "Y"; /* format screen m001*/

      set SW0YM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(258); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0YM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* Application find code*/
    end

    COMMAREA.XWHCD = SW0YM001.XWHCD;

    XSSL001(); /* Exit to another application*/

    SW0YW00.SW0YWSWR = "N"; /* request for data*/
    SW0YW00.SW0YWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13  /* pf13 was not pressed*/
   && converseVar.eventKey not pf15) /* pf15 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid pfkey*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0Y300

// Reset highlighted fields
Function SW0Y400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0YM001.XWHCD initialAttributes; /* warehouse code*/
  set SW0YM001.PKDNCSQN initialAttributes; /* pk carton seq number*/

   /* ------------------------------------------------------------*/
   /* reset "cur" data*/
   /* ------------------------------------------------------------*/

  set SW0YM001.SY1STNBR initialAttributes; /* style nbr*/
  set SW0YM001.SY2CLRID initialAttributes; /* color id*/
  set SW0YM001.XDMCD initialAttributes; /* dimension code*/
  set SW0YM001.PC2INSEG initialAttributes; /* iseg code*/
  set SW0YM001.XEGCD initialAttributes; /* edif code*/
  set SW0YM001.XPGCD initialAttributes; /* package code*/
  set SW0YM001.XUMCD initialAttributes; /* unit of measure*/
  set SW0YM001.XOWCD initialAttributes; /* owner group code*/
  set SW0YM001.XSLCD initialAttributes; /* class code*/
  set SW0YM001.XQACD initialAttributes; /* xqacd code*/

   /* ------------------------------------------------------------*/
   /* reset "new" data*/
   /* ------------------------------------------------------------*/

  set SW0YM001.SW0YMSTY initialAttributes; /* style nbr*/
  set SW0YM001.SW0YMCLR initialAttributes; /* color id*/
  set SW0YM001.SW0YMDIM initialAttributes; /* dimension code*/
  set SW0YM001.SW0YMSEG initialAttributes; /* iseg code*/
  set SW0YM001.SW0YMEDF initialAttributes; /* edif code*/
  set SW0YM001.SW0YMPKG initialAttributes; /* package code*/
  set SW0YM001.SW0YMUOM initialAttributes; /* unit of measure*/
  set SW0YM001.SW0YMOWN initialAttributes; /* owner group code*/
  set SW0YM001.SW0YMSLC initialAttributes; /* class code*/
  set SW0YM001.SW0YMXQA initialAttributes; /* quality code*/

  SW0YW00.SW0YWIDX = 1; /* init index*/
  while (SW0YW00.SW0YWIDX <= 8)

    set SW0YM001.SW0YMNSZ[SW0YWIDX] initialAttributes; /* sz id*/
    set SW0YM001.SW0YMNQT[SW0YWIDX] initialAttributes; /* sz qty*/

    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;

  end

  set SW0YM001.CATOAP initialAttributes;
  set SW0YM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XWHCD == "?"    /* product type group list req*/
   || SW0YM001.XGPCD == "?"    /* gpc code list req*/
   || SW0YM001.SW0YMDIM == "?" /* or new dimension list req*/
   || SW0YM001.XDMCD == "?"    /* or dimension list req*/
   || SW0YM001.SW0YMXQA == "?" /* or new quality code list req*/
   || SW0YM001.XQACD == "?"    /* or quality code list req*/
   || SW0YM001.SW0YMEDF == "?" /* or new edif list req*/
   || SW0YM001.XEGCD == "?"    /* or edif list req*/
   || SW0YM001.SW0YMPKG == "?" /* or new packagelist req*/
   || SW0YM001.XPGCD == "?"    /* or packagelist req*/
   || SW0YM001.SW0YMUOM == "?" /* or new unit of measure list*/
   || SW0YM001.XUMCD == "?"    /* or unit of measure list*/
   || SW0YM001.SW0YMOWN == "?" /* or new owner group code*/
   || SW0YM001.XOWCD == "?"    /* or owner group code*/
   || SW0YM001.SW0YMSLC == "?" /* or new class code*/
   || SW0YM001.XSLCD == "?")   /* or class code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(264); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XWHCD == "?") /* warehouse requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0YM001.XWHCD = SW0YW01.XWHCD; /* Restore prior code*/
    else
      SW0YM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0YM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];
      SW0YW01.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0YW01.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];

    end

    set SW0YM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of gpc codes*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XGPCD == "?") /* gpc codes requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "    GPC CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0YM001.XGPCD = SW0YW01.XGPCD; /* Restore prior code*/
    else
      SW0YM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
      SW0YW01.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0YM001.XGPCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.SW0YMDIM == "?" /* new dim list requested*/
   || SW0YM001.XDMCD == "?")   /* dimension list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIMENSION CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the dimension list*/
    end

    if (SW0YM001.SW0YMDIM == "?") /* new dim list requested*/
      set SW0YM001.SW0YMDIM cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.SW0YMDIM = SW0YW01.SW0YWDIM; /* Restore prior code*/
      else
        SW0YW01.SW0YWDIM = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.SW0YMDIM = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

      end
    end

    if (SW0YM001.XDMCD == "?") /* dimension list requested*/
      set SW0YM001.XDMCD cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.XDMCD = SW0YW01.XDMCD; /* Restore prior code*/
      else
        SW0YW01.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of quality codes*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.SW0YMXQA == "?" /* new quality list requested*/
   || SW0YM001.XQACD == "?")   /* quality list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " QUALITY CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the dimension list*/
    end

    if (SW0YM001.SW0YMXQA == "?") /* new quality list requested*/
      set SW0YM001.SW0YMXQA cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.SW0YMXQA = SW0YW01.SW0YWXQA; /* Restore prior code*/
      else
        SW0YW01.SW0YWXQA = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
        SW0YM001.SW0YMXQA = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/

      end
    end

    if (SW0YM001.XQACD == "?") /* quality list requested*/
      set SW0YM001.XQACD cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.XQACD = SW0YW01.XQACD; /* Restore prior code*/
      else
        SW0YW01.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
        SW0YM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of engineering difference*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.SW0YMEDF == "?" /* new eng. dif list requested*/
   || SW0YM001.XEGCD == "?")   /* eng. dif list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "ENGINEERING DIF CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXEG01(); /* Display the edf list*/
    end

    if (SW0YM001.SW0YMEDF == "?") /* new eng. dif list requested*/
      set SW0YM001.SW0YMEDF cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.SW0YMEDF = SW0YW01.SW0YWEDF; /* Restore prior code*/
      else
        SW0YW01.SW0YWEDF = XEGTBL.XEGCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.SW0YMEDF = XEGTBL.XEGCD[XX0XWPIX]; /* Selected code*/
      end
    end

    if (SW0YM001.XEGCD == "?") /* eng. dif list requested*/
      set SW0YM001.XEGCD cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.XEGCD = SW0YW01.XEGCD; /* Restore prior code*/
      else
        SW0YW01.XEGCD = XEGTBL.XEGCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.XEGCD = XEGTBL.XEGCD[XX0XWPIX]; /* Selected code*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of package codes.*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.SW0YMPKG == "?" /* new Package list requested*/
   || SW0YM001.XPGCD == "?")   /* Package list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PACKAGE TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPG01(); /* Display the package list*/
    end

    if (SW0YM001.SW0YMPKG == "?") /* new Package list requested*/
      set SW0YM001.SW0YMPKG cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.SW0YMPKG = SW0YW01.SW0YWPKG; /* Restore prior code*/
      else
        SW0YW01.SW0YWPKG = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.SW0YMPKG = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
      end

    end

    if (SW0YM001.XPGCD == "?") /* Package list requested*/
      set SW0YM001.XPGCD cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.XPGCD = SW0YW01.XPGCD; /* Restore prior code*/
      else
        SW0YW01.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
      end

    end

  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of unit of measure codes*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.SW0YMUOM == "?" /* new Unit of measure requested*/
   || SW0YM001.XUMCD == "?")   /* Unit of measure requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "UNIT OF MEASURE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXUM01(); /* Display the list*/
    end

    if (SW0YM001.SW0YMUOM == "?") /* new Unit of measure requested*/
      set SW0YM001.SW0YMUOM cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.SW0YMUOM = SW0YW01.SW0YWUOM; /* Restore prior code*/
      else
        SW0YM001.SW0YMUOM = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
        SW0YW01.SW0YWUOM = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/

      end
    end

    if (SW0YM001.XUMCD == "?") /* Unit of measure requested*/
      set SW0YM001.XUMCD cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.XUMCD = SW0YW01.XUMCD; /* Restore prior code*/
      else
        SW0YM001.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
        SW0YW01.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of owner group codes.*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.SW0YMOWN == "?" /* new Owner group list requested*/
   || SW0YM001.XOWCD == "?")   /* Owner group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "OWNER GROUP CODES"; /* Heading*/
    XX0XW02.XWHCD = SW0YM001.XWHCD;

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOW01(); /* Display the owner group list*/
    end

    if (SW0YM001.SW0YMOWN == "?") /* new Owner group list requested*/
      set SW0YM001.SW0YMOWN cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.SW0YMOWN = SW0YW01.SW0YWOWN; /* Restore prior code*/
      else
        SW0YW01.SW0YWOWN = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.SW0YMOWN = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/

      end
    end

    if (SW0YM001.XOWCD == "?") /* Owner group list requested*/
      set SW0YM001.XOWCD cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.XOWCD = SW0YW01.XOWCD; /* Restore prior code*/
      else
        SW0YW01.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of stock locate class codes*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.SW0YMSLC == "?" /* New owner group list requested*/
   || SW0YM001.XSLCD == "?")   /* Owner group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "S.L. CLASS CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSL01(); /* Display the owner group list*/
    end

    if (SW0YM001.SW0YMSLC == "?") /* New owner group list requested*/
      set SW0YM001.SW0YMSLC cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.SW0YMSLC = SW0YW01.SW0YWSLC; /* Restore prior code*/
      else
        SW0YW01.SW0YWSLC = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.SW0YMSLC = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/

      end

    end

    if (SW0YM001.XSLCD == "?") /* Owner group list requested*/
      set SW0YM001.XSLCD cursor; /* Establish cursor position*/
      if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

        SW0YM001.XSLCD = SW0YW01.XSLCD; /* Restore prior code*/
      else
        SW0YW01.XSLCD = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/
        SW0YM001.XSLCD = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/

      end

    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/
  converseLib.validationFailed(241); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0Y400

// Verify the entered data
Function SW0Y500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0YM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* request to display: receiving w/o carton maint.(pf14)*/
                       /* receiving product key(pf15)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* request to display m001(pf13)*/
   || converseVar.eventKey is pf15) /* request to display m003(pf15)*/

    SW0Y510(); /* verify if data has been mod*/

    if (SW0YW00.SW0YWMOD == "Y") /* data modified*/
      converseLib.validationFailed(219); /* data changes not allowed*/
      SLWREC.XXXLOCID = "500";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    SW0Y520(); /* verify qtys/new prd/key prd modified*/

    SW0Y530(); /* validate entry fields*/

    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    if (SW0YM001.XWHCD != SW0YW01.XWHCD       /* warehouse changed*/
     || SW0YM001.XWHCD == " "                 
     || SW0YM001.PKDNCSQN != SW0YW01.PKDNCSQN /* pk seq nbr*/
     || SW0YM001.PKDNCSQN == 0                
     || SW0YW00.SW0YWPKE == "Y")              /* "key" product data changed*/

      if (SW0YW00.SW0YWAPD == "Y"         
       && SW0YW00.SW0YWPDE == "Y"         /* product changed*/
       && SW0YM001.XWHCD == SW0YW01.XWHCD /* warehouse changed*/
       && SW0YM001.PKDNCSQN == SW0YW01.PKDNCSQN) /* pk seq nbr*/
         /* NEXT SENTENCE*/
      else
        SW0Y510(); /* ck modifiable fields*/

        if (converseVar.validationMsgNum == 0)
          SW0YW00.SW0YWSWR = "Y"; /* request data request*/
        end
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end SW0Y500

// check modifiable fields
Function SW0Y510()

   /* -----------------------------------------------------*/
   /* check modifiable fields*/
   /* -----------------------------------------------------*/

  SW0YW00.SW0YWMOD = "N";

  SW0YW00.SW0YWIDX = 1; /* init index*/
  while (SW0YW00.SW0YWIDX <= 8)

    if (SW0YM001.SW0YMNSZ[SW0YWIDX] != " ")
      if (SW0YM001.SW0YMNSZ[SW0YWIDX] != SW0YW01.SY4IDDSC[SW0YWIDX])
                                   /* sz id*/
        set SW0YM001.SW0YMNSZ[SW0YWIDX] cursor, bold;
        SW0YW00.SW0YWMOD = "Y";
      end
      if (SW0YM001.SW0YMNQT[SW0YWIDX] != SW0YW01.SL2RCVD[SW0YWIDX]) /* sz id*/
        set SW0YM001.SW0YMNQT[SW0YWIDX] cursor, bold;
        SW0YW00.SW0YWMOD = "Y";
      end
    end
    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;
  end

  if (SW0YW01.SW0YWSLC != SW0YM001.SW0YMSLC) /* class code*/
    set SW0YM001.SW0YMSLC cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

  if (SW0YW01.SW0YWOWN != SW0YM001.SW0YMOWN) /* owner group code*/
    set SW0YM001.SW0YMOWN cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

  if (SW0YW01.SW0YWUOM != SW0YM001.SW0YMUOM) /* unit of measure*/
    set SW0YM001.SW0YMUOM cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

  if (SW0YW01.SW0YWPKG != SW0YM001.SW0YMPKG) /* package code*/
    set SW0YM001.SW0YMPKG cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

  if (SW0YW01.SW0YWEDF != SW0YM001.SW0YMEDF) /* edif code*/
    set SW0YM001.SW0YMEDF cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

  if (SW0YW01.SW0YWSEG != SW0YM001.SW0YMSEG) /* iseg code*/
    set SW0YM001.SW0YMSEG cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

  if (SW0YW01.SW0YWXQA != SW0YM001.SW0YMXQA) /* quality code*/
    set SW0YM001.SW0YMXQA cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

  if (SW0YW01.SW0YWDIM != SW0YM001.SW0YMDIM) /* dimension code*/
    set SW0YM001.SW0YMDIM cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

  if (SW0YW01.SW0YWCLR != SW0YM001.SW0YMCLR) /* color id*/
    set SW0YM001.SW0YMCLR cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

  if (SW0YW01.SW0YWSTY != SW0YM001.SW0YMSTY) /* style nbr*/
    set SW0YM001.SW0YMSTY cursor, bold;
    converseLib.validationFailed(219); /* data changed not allowed*/
    SLWREC.XXXLOCID = "510";
  end

   /* -----------------------------------------------------*/
   /* verify modifiable key fields*/
   /* -----------------------------------------------------*/

  if (converseVar.eventKey not enter)

    if (SW0YW01.XSLCD != SW0YM001.XSLCD) /* sl class code*/
      set SW0YM001.XSLCD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.XOWCD != SW0YM001.XOWCD) /* own group*/
      set SW0YM001.XOWCD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.XUMCD != SW0YM001.XUMCD) /* unit of measure*/
      set SW0YM001.XUMCD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.XPGCD != SW0YM001.XPGCD) /* package code*/
      set SW0YM001.XPGCD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.XEGCD != SW0YM001.XEGCD) /* edif code*/
      set SW0YM001.XEGCD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.PC2INSEG != SW0YM001.PC2INSEG) /* seg code*/
      set SW0YM001.XQACD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.XQACD != SW0YM001.XQACD) /* dimension*/
      set SW0YM001.XQACD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.XDMCD != SW0YM001.XDMCD) /* dimension*/
      set SW0YM001.XDMCD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.SY2CLRID != SW0YM001.SY2CLRID) /* color*/
      set SW0YM001.SY2CLRID cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.SY1STNBR != SW0YM001.SY1STNBR) /* style*/
      set SW0YM001.SY1STNBR cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.XGPCD != SW0YM001.XGPCD) /* gpc number*/
      set SW0YM001.XGPCD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.PKDNCSQN != SW0YM001.PKDNCSQN) /* pk carton seq number*/
      set SW0YM001.PKDNCSQN cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.PC3PONBR != SW0YM001.PC3PONBR) /* po nbr*/
      set SW0YM001.PC3PONBR cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.TSHCNTNR != SW0YM001.TSHCNTNR) /* container  number*/
      set SW0YM001.TSHCNTNR cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end

    if (SW0YW01.XWHCD != SW0YM001.XWHCD) /* warehouse code*/
      set SW0YM001.XWHCD cursor, bold;
      converseLib.validationFailed(247); /* key field chg not valid*/
      SLWREC.XXXLOCID = "510";
    end
  end


end // end SW0Y510

// verify data has been modified
Function SW0Y520()

   /* -----------------------------------------------------*/
   /* check modifiable fields*/
   /* -----------------------------------------------------*/

  SW0YW00.SW0YWMOD = "N"; /* data modified*/
  SW0YW00.SW0YWAPD = "N"; /* add new product only*/
  SW0YW00.SW0YWPDE = "N"; /* new product entered*/
  SW0YW00.SW0YWSZF = "N"; /* sizes changed*/

  SW0YW00.SW0YWIDX = 1; /* init index*/
  while (SW0YW00.SW0YWIDX <= 8)

    if (SW0YM001.SW0YMNSZ[SW0YWIDX] != " ")
      if (SW0YM001.SW0YMNSZ[SW0YWIDX] != SW0YW01.SY4IDDSC[SW0YWIDX])
                                   /* sz id*/
        SW0YW00.SW0YWSZF = "Y";
        SW0YW00.SW0YWMOD = "Y";
      end
    end
    if (SW0YM001.SW0YMNQT[SW0YWIDX] != SW0YW01.SL2RCVD[SW0YWIDX] /* sz id*/
     && SW0YW01.SL2RCVD[SW0YWIDX] != 0)                         
      SW0YW00.SW0YWMOD = "Y";
    end
    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;
  end

   /* ---------------------------------------------------------*/
   /* "new" product changed*/
   /* ---------------------------------------------------------*/

  if (SW0YM001.SW0YMSTY != SW0YW01.SW0YWSTY /* style nbr*/
   || SW0YM001.SW0YMCLR != SW0YW01.SW0YWCLR /* color id*/
   || SW0YM001.SW0YMDIM != SW0YW01.SW0YWDIM /* dimension*/
   || SW0YM001.SW0YMXQA != SW0YW01.SW0YWXQA /* quality code*/
   || SW0YM001.SW0YMSEG != SW0YW01.SW0YWSEG /* seg code*/
   || SW0YM001.SW0YMEDF != SW0YW01.SW0YWEDF /* seg code*/
   || SW0YM001.SW0YMPKG != SW0YW01.SW0YWPKG /* seg code*/
   || SW0YM001.SW0YMUOM != SW0YW01.SW0YWUOM /* seg code*/
   || SW0YM001.SW0YMOWN != SW0YW01.SW0YWOWN /* seg code*/
   || SW0YM001.SW0YMSLC != SW0YW01.SW0YWSLC) /* seg code*/
    SW0YW00.SW0YWMOD = "Y"; /* data modified*/
    SW0YW00.SW0YWPDE = "Y"; /* new product modified*/
  end

   /* ---------------------------------------------------------*/
   /* "KEY" product changed*/
   /* ---------------------------------------------------------*/

  if (SW0YM001.XGPCD != SW0YW01.XGPCD       /* gpc code*/
   || SW0YM001.SY1STNBR != SW0YW01.SY1STNBR /* style nbr*/
   || SW0YM001.SY2CLRID != SW0YW01.SY2CLRID /* color id*/
   || SW0YM001.XDMCD != SW0YW01.XDMCD       /* dimension*/
   || SW0YM001.XQACD != SW0YW01.XQACD       /* quality code*/
   || SW0YM001.PC2INSEG != SW0YW01.PC2INSEG /* seg code*/
   || SW0YM001.XEGCD != SW0YW01.XEGCD       /* edif code*/
   || SW0YM001.XPGCD != SW0YW01.XPGCD       /* package code*/
   || SW0YM001.XUMCD != SW0YW01.XUMCD       /* unit of measure*/
   || SW0YM001.XOWCD != SW0YW01.XOWCD       /* own group*/
   || SW0YM001.XSLCD != SW0YW01.XSLCD)      /* class code*/
    SW0YW00.SW0YWPKE = "Y"; /* product key entered*/
    SW0YW00.SW0YWMOD = "Y";

    /* ---------------------------------------------------------*/
     /* request to "add' new product*/
    /* ---------------------------------------------------------*/

    if (SW0YM001.XGPCD == "  "        /* gpc code*/
     && SW0YM001.SY1STNBR == "      " /* style nbr*/
     && SW0YM001.SY2CLRID == "   "    /* color id*/
     && SW0YM001.XDMCD == "   ")      /* dimension*/
      SW0YW00.SW0YWAPD = "Y"; /* add new product*/
    end

  end

end // end SW0Y520

// Verify the entered data
Function SW0Y530()

   /* ------------------------------------------------------------*/
   /* validate "new" data*/
   /* ------------------------------------------------------------*/

  if (SW0YW01.CACHGFL == "Y") /* data has been loaded for display*/

    /* ------------------------------------------------------------*/
     /* Edit the required fields starting at the bottom of the*/
     /* map.*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
     /* If a size was entered, verify that a qty was entered also.*/
    /* ------------------------------------------------------------*/

    SW0YW00.SW0YWSFL = "N"; /* init size entry flag*/
    SW0YW00.SW0YWTQT = 0; /* total original qty's*/
    SW0YW00.SW0YWTNQ = 0; /* total new qty's*/
    SW0YW00.SW0YWCNT = 0; /* init count field*/
    SW0YW00.SW0YWIDX = 8; /* init index*/

    while (SW0YW00.SW0YWIDX > 0) /* for each entry*/
      if (SW0YM001.SW0YMNSZ[SW0YWIDX] > " ") /* if size entered*/
        SW0YW00.SW0YWSFL = "Y";
        SW0YW00.SW0YWCNT = SW0YW00.SW0YWCNT + 1;
        if (SW0YM001.SW0YMNQT[SW0YWIDX] <= 0) /* if qty entered*/
          set SW0YM001.SW0YMNQT[SW0YWIDX] cursor, bold;
          converseLib.validationFailed(283); /* missing qty field*/
          SLWREC.XXXLOCID = "530";
        end
      else
        if (SW0YM001.SW0YMNQT[SW0YWIDX] > 0) /* qty entered*/
          converseLib.validationFailed(284); /* missing size field*/
          SLWREC.XXXLOCID = "530";
          set SW0YM001.SW0YMNSZ[SW0YWIDX] cursor, bold; /* Highlight*/
        end
      end
      SW0YWIDX = SW0YWIDX - 1; /* decrement index*/
    end

    if (SW0YW00.SW0YWSFL != "Y" /* no sizes were entered*/
     && converseVar.validationMsgNum == 0) /* no qty's were entered*/
      converseLib.validationFailed(359); /* siz/qty entry required*/
      SLWREC.XXXLOCID = "530";
      set SW0YM001.SW0YMNSZ[1] cursor, bold; /* Highlight*/
    else
      if (SW0YW00.SW0YWCNT > 1
       && SW0YM001.SW0YMXQA == "01")
        converseLib.validationFailed(377); /* one size for xqacd 01*/
        set SW0YM001.SW0YMNSZ[1] cursor;
        SLWREC.XXXLOCID = "530";
      end
    end


    /* ------------------------------------------------------------*/
     /* convert all sizes to internal format. check size return*/
     /* codes for invalid sizes.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0)

      set SYPREC empty;

      SYPREC.SYPFC = "EI"; /* external to internal translate*/
      SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

      SYPREC.XGPCD = SW0YM001.SW0YMGPC;
      SYPREC.SY1STNBR = SW0YM001.SW0YMSTY;
      SYPREC.SY2CLRID = SW0YM001.SW0YMCLR;
      SYPREC.XDMCD = SW0YM001.SW0YMDIM;
      SYPREC.XQACD = SW0YM001.SW0YMXQA;

      move " " to SW0YW01.SW0YWNSZ[1] for all;
      move 0 to SW0YW01.SW0YWNSI[1] for all;
      move 0 to SW0YW01.SW0YWNQT[1] for all;

      SW0YW00.SW0YWLIX = +1; /* initialize load index*/
      SW0YW00.SW0YWIDX = +1; /* initialize index*/
      while (SW0YWIDX <= 8)
        if (SW0YM001.SW0YMNSZ[SW0YWIDX] > " ")
          SYPREC.SY4IDDSC[SW0YWLIX] = SW0YM001.SW0YMNSZ[SW0YWIDX];
          SW0YW01.SW0YWNSZ[SW0YWLIX] = SW0YM001.SW0YMNSZ[SW0YWIDX];
          SW0YW01.SW0YWNQT[SW0YWLIX] = SW0YM001.SW0YMNQT[SW0YWIDX];
          SW0YW00.SW0YWTQT = SW0YW00.SW0YWTQT + SW0YM001.SL2RCVD[SW0YWIDX];
          SW0YW00.SW0YWTNQ = SW0YW00.SW0YWTNQ + SW0YM001.SW0YMNQT[SW0YWIDX];
          SW0YM001.SW0YMNSZ[SW0YWIDX] = " ";
          SW0YM001.SW0YMNQT[SW0YWIDX] = 0;
          SW0YW00.SW0YWLIX = SW0YW00.SW0YWLIX + 1;
        end
        SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;
      end

      /* ------------------------------------------------------------*/
        /* This routine will validate each size entered*/
        /* If any bad size return codes, set the screen attributes.*/
      /* ------------------------------------------------------------*/

      SW0YS12(); /* convert sizes*/

      SW0YW00.SW0YWIDX = 8; /* initialize index*/

      while (SW0YW00.SW0YWIDX > 0)
        if (SYPREC.SYPSZRC[SW0YWIDX] != 0) /* good size return code*/
          set SW0YM001.SW0YMNSZ[SW0YWIDX] cursor, bold;
          SLWREC.XXXLOCID = "530";
          converseLib.validationFailed(238); /* size invalid for this product*/
        end
        SW0YW01.SW0YWNSI[SW0YWIDX] = SYPREC.SY5SZID[SW0YWIDX];
        SW0YM001.SW0YMNSZ[SW0YWIDX] = SW0YW01.SW0YWNSZ[SW0YWIDX];
        SW0YM001.SW0YMNQT[SW0YWIDX] = SW0YW01.SW0YWNQT[SW0YWIDX];

        SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX - 1;

      end
    end

    /* ------------------------------------------------------------*/
     /* verify no duplicate sizes have been entered*/
    /* ------------------------------------------------------------*/

    SW0YW00.SW0YWIDX = 1;
    while (SW0YW00.SW0YWIDX <= 8
     && converseVar.validationMsgNum == 0)

      /* ------------------------------------------------------------*/
       /* validate duplicate entries*/
      /* ------------------------------------------------------------*/

      SW0YW00.SW0YWCIX = 8;
      while (SW0YW00.SW0YWCIX >= 1)

        if (SW0YW00.SW0YWIDX < SW0YW00.SW0YWCIX
         && SW0YM001.SW0YMNSZ[SW0YWIDX] == SW0YM001.SW0YMNSZ[SW0YWCIX]
         && SW0YM001.SW0YMNSZ[SW0YWIDX] != " "
         && SW0YM001.SW0YMNSZ[SW0YWCIX] != " ")
          converseLib.validationFailed(382);
          SLWREC.XXXLOCID = "530";
          set SW0YM001.SW0YMNSZ[SW0YWCIX] cursor, bold;
        end
        SW0YW00.SW0YWCIX = SW0YW00.SW0YWCIX - 1;
      end
      SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;
    end

    /* ------------------------------------------------------------*/
     /* sl class code*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.SW0YMSLC != SW0YW01.SW0YWSLC) /* class code*/
      if (SW0YM001.SW0YMSLC == " ")
        set SW0YM001.SW0YMSLC cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0YM001.XXXLOCID = "530";
      else
        if (SW0YM001.SW0YMSLC in XSLTBL.XSLCD
         && XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          set SW0YM001.SW0YMSLC cursor, bold;
          converseLib.validationFailed(11); /* invalid value entered*/
          SW0YM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the owner group code*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.SW0YMOWN != SW0YW01.SW0YWOWN) /* Unit of measure entered*/
      if (SW0YM001.SW0YMOWN == "  ")
        set SW0YM001.SW0YMOWN cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0YM001.XXXLOCID = "530";
      else
        if (SW0YM001.SW0YMOWN in XOWTBL.XOWCD
         && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          set SW0YM001.SW0YMOWN cursor, bold;
          converseLib.validationFailed(11);
          SW0YM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit unit of measure*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.SW0YMUOM != SW0YW01.SW0YWUOM) /* Unit of measure entered*/
      if (SW0YM001.SW0YMUOM == "  ")
        set SW0YM001.SW0YMUOM cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0YM001.XXXLOCID = "530";
      else
        if (SW0YM001.SW0YMUOM in XUMTBL.XUMCD
         && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          set SW0YM001.SW0YMUOM cursor, bold;
          converseLib.validationFailed(11); /* invalid value*/
          SW0YM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the package type*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.SW0YMPKG != SW0YW01.SW0YWPKG) /* Unit of measure entered*/
      if (SW0YM001.SW0YMPKG == "  ")
        set SW0YM001.SW0YMPKG cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0YM001.XXXLOCID = "530";
      else
        if (SW0YM001.SW0YMPKG in XPGTBL.XPGCD
         && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          set SW0YM001.SW0YMPKG cursor, bold;
          converseLib.validationFailed(11); /* invalid value*/
          SW0YM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the edf*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.SW0YMEDF != SW0YW01.SW0YWEDF) /* edf code*/
      if (SW0YM001.SW0YMEDF == "  ")
        set SW0YM001.SW0YMEDF cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0YM001.XXXLOCID = "530";
      else
        if (SW0YM001.SW0YMEDF in XEGTBL.XEGCD
         && XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          set SW0YM001.SW0YMEDF cursor, bold;
          converseLib.validationFailed(11); /* invalid value*/
          SW0YM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* validate iseg code*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.SW0YMSEG != SW0YW01.SW0YWSEG) /* seg code*/
      if (SW0YM001.SW0YMSEG == " ")
        converseLib.validationFailed(9); /* required field*/
        SLWREC.XXXLOCID = "530";
      else
        set PC2REC empty; /* Clear row storage area*/
        PC2REC.XGPCD = SW0YM001.SW0YMGPC;
        PC2REC.PC2INSEG = SW0YM001.SW0YMSEG;

        SW0YS13(); /* select 's ' dprodc.vprdcu01*/

        if (SQLCA.VAGen_SQLCODE == 100)
          set SW0YM001.SW0YMSEG cursor, bold;
          converseLib.validationFailed(262); /* seg not fnd on cust xref*/
          SW0YM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the quality code*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.SW0YMXQA != SW0YW01.SW0YWXQA) /* quality code*/
      if (SW0YM001.SW0YMXQA == "  ")
        set SW0YM001.SW0YMXQA cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0YM001.XXXLOCID = "530";
      else
        if (SW0YM001.SW0YMXQA in XQATBL.XQACD
         && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          set SW0YM001.SW0YMXQA cursor, bold;
          converseLib.validationFailed(11); /* invalid value*/
          SW0YM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the dimension code*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.SW0YMDIM != SW0YW01.SW0YWDIM) /* Unit of measure entered*/
      if (SW0YM001.SW0YMDIM == "  ")
        set SW0YM001.SW0YMDIM cursor, bold;
        converseLib.validationFailed(9); /* required field*/
        SW0YM001.XXXLOCID = "530";
      else
        if (SW0YM001.SW0YMDIM in XDMTBL.XDMCD
         && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          set SW0YM001.SW0YMDIM cursor, bold;
          converseLib.validationFailed(11); /* invalid value*/
          SW0YM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the product style color and dimension.*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.SW0YMSTY != SW0YW01.SW0YWSTY
     || SW0YM001.SW0YMCLR != SW0YW01.SW0YWCLR)

      if (SW0YM001.SW0YMSTY == " " /* Style not entered*/
       || SW0YM001.SW0YMCLR == " ")

        if (SW0YM001.SW0YMSTY == " ") /* Style not entered*/

          converseLib.validationFailed(9); /* required field*/
          SW0YM001.XXXLOCID = "530";
          set SW0YM001.SW0YMSTY cursor, bold;
        end
        if (SW0YM001.SW0YMCLR == " ") /* Style not entered*/

          converseLib.validationFailed(9); /* required field*/
          SW0YM001.XXXLOCID = "530";
          set SW0YM001.SW0YMCLR cursor, bold;
        end

      else

        set SYCREC empty;

        SYCREC.XGPCD = SW0YM001.SW0YMGPC;
        SYCREC.SY1STNBR = SW0YM001.SW0YMSTY;
        SYCREC.SY2CLRID = SW0YM001.SW0YMCLR;
        SYCREC.XDMCD = SW0YM001.SW0YMDIM;

        SW0YS11(); /* ; validate using dprod.vcolor02*/

        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          converseLib.validationFailed(56); /* Style/color is missing or invalid*/
          SW0YM001.XXXLOCID = "530";
          set SW0YM001.SW0YMSTY cursor, bold;
          set SW0YM001.SW0YMCLR bold;
          set SW0YM001.SW0YMDIM bold;
          SW0YM001.SW0YMNSD = " ";
          SW0YM001.SW0YMNCD = " ";
        else
          SW0YM001.SW0YMNSD = SYCREC.SY1SSTNM;
          SW0YM001.SW0YMNCD = SYCREC.SY2CLRAB;
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* validate whse/container/carton seq nbr*/
   /* ------------------------------------------------------------*/

  SW0Y531(); /* validate high level key*/

   /* ------------------------------------------------------------*/
   /* validate product key data "current"*/
   /* ------------------------------------------------------------*/

  if (SW0YW00.SW0YWPKE == "Y") /* product key has been entered*/

    /* ------------------------------------------------------------*/
     /* if the gpc/style/color/dim equal to spaces*/
     /* do not validate the product key, the user has requested*/
     /* an add of a new product.*/
    /* ------------------------------------------------------------*/

    if (SW0YM001.XGPCD == " "
     && SW0YM001.SY1STNBR == " "
     && SW0YM001.SY2CLRID == " "
     && SW0YM001.XDMCD == " ")
      if (SW0YM001.XQACD != SW0YW01.XQACD       /* quality code*/
       || SW0YM001.PC2INSEG != SW0YW01.PC2INSEG /* seg code*/
       || SW0YM001.XEGCD != SW0YW01.XEGCD       /* edif code*/
       || SW0YM001.XPGCD != SW0YW01.XPGCD       /* package code*/
       || SW0YM001.XUMCD != SW0YW01.XUMCD       /* unit of measure*/
       || SW0YM001.XOWCD != SW0YW01.XOWCD       /* own group*/
       || SW0YM001.XSLCD != SW0YW01.XSLCD)      /* class code*/

        converseLib.validationFailed(379); /* required field*/
        SW0YM001.XXXLOCID = "530";
        set SW0YM001.XQACD cursor;

      else
        /* next sentence                ; validate high level key*/
      end

      if (SW0YW00.SW0YWAPD == "Y"
       && SW0YW00.SW0YWPDE == "N")

        converseLib.validationFailed(380); /* request to add new product must chg*/
        SW0YM001.XXXLOCID = "530";
        set SW0YM001.SW0YMSTY cursor;
      end

      if (SW0YW00.SW0YWAPD == "Y")

        if (SW0YM001.SW0YMXQA != "02")
          converseLib.validationFailed(381); /* request to add new prd xqacd = 02*/
          SW0YM001.XXXLOCID = "530";
          set SW0YM001.SW0YMXQA cursor, bold;
        end

        if (SW0YM001.XQACD != "02")
          converseLib.validationFailed(381); /* request to add new prd xqacd = 02*/
          SW0YM001.XXXLOCID = "530";
          set SW0YM001.XQACD cursor, bold;
        end
      end

    else

      SW0Y532(); /* validate product key*/

    end
  end


end // end SW0Y530

// validate key whse/cntnr/pk seq
Function SW0Y531()

   /* ------------------------------------------------------------*/
   /* Edit package carton sequence number*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.PKDNCSQN == 0)
    set SW0YM001.PKDNCSQN cursor, bold;
    converseLib.validationFailed(9); /* required field*/
    SW0YM001.XXXLOCID = "531";
  end

   /* ------------------------------------------------------------*/
   /* Edit whse code*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XWHCD == "  ")
    set SW0YM001.XWHCD cursor, bold;
    converseLib.validationFailed(9); /* required field*/
    SW0YM001.XXXLOCID = "531";
  else
    if (SW0YM001.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SW0YM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SW0YM001.XWHABRV = " ";
      set SW0YM001.XWHCD cursor, bold;
      converseLib.validationFailed(11); /* invalid value*/
      SW0YM001.XXXLOCID = "531";
    end
  end


end // end SW0Y531

// validate key product data
Function SW0Y532()

   /* ------------------------------------------------------------*/
   /* validate product key data "current"*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* class code*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XSLCD != SW0YW01.XSLCD) /* class code*/
    if (SW0YM001.XSLCD == " ")
      /* NEXT SENTENCE*/
    else
      if (SW0YM001.XSLCD in XSLTBL.XSLCD
       && XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW0YM001.XSLCD cursor, bold;
        converseLib.validationFailed(11); /* invalid value*/
        SW0YM001.XXXLOCID = "532";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the owner group code*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XOWCD != SW0YW01.XOWCD) /* Unit of measure entered*/
    if (SW0YM001.XOWCD == "  ")
      /* next sentence*/
    else
      if (SW0YM001.XOWCD in XOWTBL.XOWCD
       && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW0YM001.XOWCD cursor, bold;
        converseLib.validationFailed(11); /* invalid value*/
        SW0YM001.XXXLOCID = "532";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit unit of measure*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XUMCD != SW0YW01.XUMCD) /* Unit of measure entered*/
    if (SW0YM001.XUMCD == "  ")
      /* next sentence*/
    else
      if (SW0YM001.XUMCD in XUMTBL.XUMCD
       && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW0YM001.XUMCD cursor, bold;
        converseLib.validationFailed(11); /* invalid value*/
        SW0YM001.XXXLOCID = "532";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the package type*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XPGCD != SW0YW01.XPGCD) /* Unit of measure entered*/
    if (SW0YM001.XPGCD == "  ")
      /* next sentence*/
    else
      if (SW0YM001.XPGCD in XPGTBL.XPGCD
       && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW0YM001.XPGCD cursor, bold;
        converseLib.validationFailed(11); /* invalid value*/
        SW0YM001.XXXLOCID = "532";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the edf*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XEGCD != SW0YW01.XEGCD) /* edf code*/
    if (SW0YM001.XEGCD == "  ")
      /* next sentence*/
    else
      if (SW0YM001.XEGCD in XEGTBL.XEGCD
       && XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW0YM001.XEGCD cursor, bold;
        converseLib.validationFailed(11); /* invalid value*/
        SW0YM001.XXXLOCID = "532";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate iseg code*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.PC2INSEG != SW0YW01.PC2INSEG) /* seg code*/
    if (SW0YM001.PC2INSEG == " ")
      /* next sentence*/
    else
      set PC2REC empty; /* Clear row storage area*/
      PC2REC.XGPCD = SW0YM001.XGPCD;
      PC2REC.PC2INSEG = SW0YM001.PC2INSEG;

      SW0YS13(); /* select 's ' dprodc.vprdcu01*/

      if (SQLCA.VAGen_SQLCODE == 100)
        set SW0YM001.PC2INSEG cursor, bold;
        converseLib.validationFailed(262); /* seg not fnd on cust xref*/
        SW0YM001.XXXLOCID = "532";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the quality code*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XQACD != SW0YW01.XQACD) /* quality code*/
    if (SW0YM001.XQACD == "  ")
      /* next sentence*/
    else
      if (SW0YM001.XQACD != SW0YW01.XQACD) /* and changed*/
        if (SW0YM001.XQACD in XQATBL.XQACD
         && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          set SW0YM001.XQACD cursor, bold;
          converseLib.validationFailed(11); /* invalid value*/
          SW0YM001.XXXLOCID = "532";
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the dimension code*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XDMCD != SW0YW01.XDMCD) /* dimension*/
    if (SW0YM001.XDMCD == "  ")
      set SW0YM001.XDMCD cursor, bold;
      converseLib.validationFailed(9); /* required field*/
      SW0YM001.XXXLOCID = "532";
    else
      if (SW0YM001.XDMCD in XDMTBL.XDMCD
       && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW0YM001.XDMCD cursor, bold;
        converseLib.validationFailed(11); /* invalid value*/
        SW0YM001.XXXLOCID = "532";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the product style color and dimension.*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.SY1STNBR != SW0YW01.SY1STNBR
   || SW0YM001.SY2CLRID != SW0YW01.SY2CLRID)
    if (SW0YM001.SY1STNBR == " " /* Style not entered*/
     && SW0YM001.SY2CLRID == " ") /* color not entered*/
      /* next sentence*/
    else

      set SYCREC empty;

      SYCREC.XGPCD = SW0YM001.XGPCD;
      SYCREC.SY1STNBR = SW0YM001.SY1STNBR;
      SYCREC.SY2CLRID = SW0YM001.SY2CLRID;
      SYCREC.XDMCD = SW0YM001.XDMCD;

      SW0YS11(); /* ; validate using dprod.vcolor02*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(56); /* Style/color is missing or invalid*/
        SW0YM001.XXXLOCID = "532";
        set SW0YM001.SY1STNBR cursor, bold;
        set SW0YM001.SY2CLRID bold;
        set SW0YM001.XDMCD bold;
        SW0YM001.SY1SSTNM = " ";
        SW0YM001.SY2CLRAB = " ";
      else
        SW0YM001.SY1SSTNM = SYCREC.SY1SSTNM;
        SW0YM001.SY2CLRAB = SYCREC.SY2CLRAB;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate gpc code*/
   /* ------------------------------------------------------------*/

  if (SW0YM001.XGPCD != SW0YW01.XGPCD)
    if (SW0YM001.XGPCD == "  ")
      /* next sentence*/
    else
      if (SW0YM001.XGPCD in XGPTBL.XGPCD
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW0YM001.XGPCD cursor, bold;
        converseLib.validationFailed(11); /* invalid value*/
        SW0YM001.XXXLOCID = "532";
      end
    end
  end



end // end SW0Y532

// Process valid input request
Function SW0Y600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  SW0YW00.SW0YWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update key data*/
   /* ------------------------------------------------------------*/

  SW0YW01.XWHCD = SW0YM001.XWHCD; /* warehouse*/
  if (SW0YW01.XWHCD in XWHTBL.XWHCD)
    SW0YW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  SW0YW01.PKDNCSQN = SW0YM001.PKDNCSQN;

  if (SW0YM001.XGPCD == " "
   && SW0YM001.SY1STNBR == " "
   && SW0YM001.SY2CLRID == " "
   && SW0YM001.XDMCD == " ")
    /* next sentence*/
  else
    SW0YW01.XGPCD = SW0YM001.XGPCD;
    SW0YW01.SY1STNBR = SW0YM001.SY1STNBR;
    SW0YW01.SY2CLRID = SW0YM001.SY2CLRID;
    SW0YW01.XDMCD = SW0YM001.XDMCD;
  end
  SW0YW01.XQACD = SW0YM001.XQACD;
  SW0YW01.XOWCD = SW0YM001.XOWCD;
  SW0YW01.XUMCD = SW0YM001.XUMCD;
  SW0YW01.PC2INSEG = SW0YM001.PC2INSEG;
  SW0YW01.XEGCD = SW0YM001.XEGCD;
  SW0YW01.XPGCD = SW0YM001.XPGCD;
  SW0YW01.XSLCD = SW0YM001.XSLCD;

  if (converseVar.eventKey is enter
   && SW0YW00.SW0YWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* --------------------------------------------------------*/
   /* request to transfer to receiving w/o carton application*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* transfer to receiving w/o appl.*/

    COMMAREA.XWHCD = SW0YM001.XWHCD;
    COMMAREA.CATOAP = "SW0X"; /* transfer to applicaiton*/

    XSSL001(); /* Exit to another application*/

    SW0YW00.SW0YWSWR = "N"; /* request for data*/
    SW0YW00.SW0YWSWF = "Y"; /* format screen m001*/

    set SW0YM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* --------------------------------------------------------*/
   /* request to transfer to receiving product key maint. appl*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* transfer to product maint sw0z*/

    COMMAREA.XWHCD = SW0YM001.XWHCD;
    SLWREC.XGPCD = SW0YM001.XGPCD;
    COMMAREA.CATOAP = "SW0Z"; /* transfer to applicaiton*/

    XSSL001(); /* Exit to another application*/

    SW0YW00.SW0YWSWR = "N"; /* request for data*/
    SW0YW00.SW0YWSWF = "Y"; /* format screen m001*/

    set SW0YM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* if data has been changed and entered pressed update*/
   /* databases.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* explode not requested*/

    if (SW0YW00.SW0YWMOD == "Y") /* product has been modified*/

      XX0XS01(); /* Obtain date and time*/

      /* ------------------------------------------------------*/
       /* process dstloc.vrlhdr01/dstloc.vrlitm01*/
      /* ------------------------------------------------------*/

      SW0Y610();

      /* ------------------------------------------------------------*/
       /* process the 'CURRENT' dstloc.vplnsy01 data*/
      /* ------------------------------------------------------------*/

      SW0Y620();

      /* ------------------------------------------------------------*/
       /* process the 'CURRENT' dstloc.vplnlc01/dstloc.vplnsz01 data*/
      /* ------------------------------------------------------------*/

      SW0Y630();

      /* ------------------------------------------------------------*/
       /* process the 'NEW' stock locate plan data*/
      /* ------------------------------------------------------------*/

      if (SW0YW00.SW0YWPDE == "Y") /* product changed*/

        /* ------------------------------------------------------------*/
         /* update/add 'new' dstloc.vplnsy01 row*/
        /* ------------------------------------------------------------*/

        SW0Y640();

        /* ------------------------------------------------------------*/
         /* add 'new' dstloc.vplnlc01,dstloc.vplnsz01,dstloc.vplnta01*/
        /* ------------------------------------------------------------*/

        SW0Y650();

      end

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();

      /* --------------------------------------------------------*/
       /* display the "new" product*/
      /* --------------------------------------------------------*/

      set SW0YW01 empty;
      SW0YW01.XWHCD = SW0YM001.XWHCD;
      SW0YW01.XWHABRV = SW0YM001.XWHABRV;
      SW0YW01.PKDNCSQN = SW0YM001.PKDNCSQN;
      SW0YW01.PC3PONBR = SW0YM001.PC3PONBR;
      SW0YW01.TSHCNTNR = SW0YM001.TSHCNTNR;
      SW0YW01.XGPCD = SW0YM001.XGPCD;
      SW0YW01.SY1STNBR = SW0YM001.SW0YMSTY;
      SW0YW01.SY2CLRID = SW0YM001.SW0YMCLR;
      SW0YW01.XDMCD = SW0YM001.SW0YMDIM;
      SW0YW01.XQACD = SW0YM001.SW0YMXQA;
      SW0YW01.XOWCD = SW0YM001.SW0YMOWN;
      SW0YW01.XUMCD = SW0YM001.SW0YMUOM;
      SW0YW01.PC2INSEG = SW0YM001.SW0YMSEG;
      SW0YW01.XEGCD = SW0YM001.SW0YMEDF;
      SW0YW01.XPGCD = SW0YM001.SW0YMPKG;
      SW0YW01.XSLCD = SW0YM001.SW0YMSLC;

      SW0YW00.SW0YWSWR = "Y"; /* requested data switch*/
      SW0YW00.SW0YWPKE = "Y"; /* product key*/

      SW0YW00.SW0YWMOD = "N"; /* init tsq update flag*/
      SW0YW00.SW0YWPDE = "N"; /* product data entered*/
      SW0YW00.SW0YWPDD = "N"; /* product deleted flag*/
      SW0YW00.SW0YWAPD = "N"; /* add product flag*/
      SW0YW00.SW0YWOKY = "N"; /* key data flag*/

      SLWREC.SLWMSGNO = 20;
      SLWREC.XXXLOCID = "600";

    end
  end


end // end SW0Y600

// PROCESS VRLHDR01/VRLITM01
Function SW0Y610()

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

   /* process "CURRENT" dstloc.vrlitm01 data*/

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

  set SL2REC empty; /* Clear row storage area*/

  SL2REC.XWHCD = SW0YW01.XWHCD;
  SL2REC.TS3CNTNR = SW0YW01.TSHCNTNR;
  SL2REC.SWEPLLNB = SW0YW01.SWEPLLNB;
  SL2REC.SL2PALET = SW0YW01.SL2PALET;
  SL2REC.SL2CASE = SW0YW01.SL2CASE;
  SL2REC.PKDNCSQN = SW0YW01.PKDNCSQN;
  SL2REC.PC3POIDT = SW0YW01.PC3POIDT;
  SL2REC.PCFSECD = SW0YW01.PCFSECD;
  SL2REC.FY1FCTYC = SW0YW01.FY1FCTYC;
  SL2REC.PC4ORTYP = SW0YW01.PC4ORTYP;
  SL2REC.PC3PONBR = SW0YW01.PC3PONBR;
  SL2REC.XGPCD = SW0YW01.XGPCD;
  SL2REC.SY1STNBR = SW0YW01.SY1STNBR;
  SL2REC.SY2CLRID = SW0YW01.SY2CLRID;
  SL2REC.XDMCD = SW0YW01.XDMCD;
  SL2REC.XQACD = SW0YW01.XQACD;
  SL2REC.XOWCD = SW0YW01.XOWCD;
  SL2REC.XUMCD = SW0YW01.XUMCD;
  SL2REC.PC2INSEG = SW0YW01.PC2INSEG;
  SL2REC.XEGCD = SW0YW01.XEGCD;
  SL2REC.XPGCD = SW0YW01.XPGCD;
  SL2REC.XSLCD = SW0YW01.XSLCD;

   /* ---------------------------------------------------*/
   /* process 'current' dstloc.vrlitm01 sizes*/
   /* ---------------------------------------------------*/

  SW0YW00.SW0YWOKY = "Y";

  SW0YW00.SW0YWIDX = 1;
  while (SW0YW00.SW0YWIDX <= 8) /* process all sizes*/

    if (SW0YM001.SY4IDDSC[SW0YWIDX] != " ")

      /* ------------------------------------------------------*/
       /* if the product has not change, determine which sizes*/
       /* have been removed from the product.(if any)*/
      /* ------------------------------------------------------*/

      if (SW0YW00.SW0YWPDE == "N") /* product has not changed*/
        SW0YW00.SW0YWCIX = 1; /* init compare index*/
        SW0YW00.SW0YWFFL = "N"; /* init found flag*/

        while (SW0YW00.SW0YWCIX <= 8
         && SW0YW00.SW0YWFFL != "Y")

          if (SW0YM001.SY4IDDSC[SW0YWIDX] == SW0YM001.SW0YMNSZ[SW0YWCIX])
            SW0YW00.SW0YWFFL = "Y";
          end

          SW0YW00.SW0YWCIX = SW0YW00.SW0YWCIX + 1;

        end
      end

      /* ------------------------------------------------------*/
       /* if the size has been removed from this product or the*/
       /* product has changed delete the size row(s).*/
      /* ------------------------------------------------------*/

      if (SW0YW00.SW0YWFFL == "N" /* delete size*/
       || SW0YW00.SW0YWPDE == "Y") /* product changed*/

        SL2REC.SY5SZID = SW0YW01.SY5SZID[SW0YWIDX];

        SW0Y611(); /* select 'sb' dstloc.vrlitm01 cur*/

        if (SW0YW00.SW0YWAPD != "Y") /* add of new product not requested*/
          SW0Y612(); /* delete 'd2' dstloc.vrlitm01 cur*/
        end
      end
    end

    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;

  end

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

   /* process "NEW" dstloc.vrlitm01 data*/

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

  SL2REC.XGPCD = SW0YM001.SW0YMGPC;
  SL2REC.SY1STNBR = SW0YM001.SW0YMSTY;
  SL2REC.SY2CLRID = SW0YM001.SW0YMCLR;
  SL2REC.XDMCD = SW0YM001.SW0YMDIM;
  SL2REC.XQACD = SW0YM001.SW0YMXQA;
  SL2REC.XOWCD = SW0YM001.SW0YMOWN;
  SL2REC.XUMCD = SW0YM001.SW0YMUOM;
  SL2REC.PC2INSEG = SW0YM001.SW0YMSEG;
  SL2REC.XEGCD = SW0YM001.SW0YMEDF;
  SL2REC.XPGCD = SW0YM001.SW0YMPKG;
  SL2REC.XSLCD = SW0YM001.SW0YMSLC;

  SW0YW00.SW0YWOKY = "N";

  SW0YW00.SW0YWIDX = 1;
  while (SW0YW00.SW0YWIDX <= 8) /* process all sizes*/

    if (SW0YM001.SW0YMNSZ[SW0YWIDX] != " ")

      SL2REC.SY5SZID = SW0YW01.SW0YWNSI[SW0YWIDX];

      SW0Y611(); /* select 'sb' dstloc.vrlitm01 new*/

      if (SQLCA.VAGen_SQLCODE == 0)

        SW0Y612(); /* delete 'd2' dstloc.vrlitm01 row new*/

      else

        SL2REC.TSOSHPQT = 0; /* init p/l qty*/

      end

      if (SW0YM001.SW0YMXQA == "01")
        SL2REC.SY1UNPCS = SW0YW00.SW0YWTNQ;
      end
      SL2REC.SL2RCVD = SW0YM001.SW0YMNQT[SW0YWIDX];

      SW0Y613(); /* add dstloc.vrlitm01 row new*/

    end

    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;

  end

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

   /* if 'new' quality code is 02 update all products*/
   /* for the specific whse / pk carton seq nbr with the*/
   /* new units per case total*/

   /* ------------------------------------------------------*/
   /* ------------------------------------------------------*/

  if (SW0YM001.SW0YMXQA == "02")

    /* ------------------------------------------------------*/
     /* subtract the old qty's out of the unit per case total*/
    /* ------------------------------------------------------*/

    if (SW0YW00.SW0YWAPD != "Y")
      SL2REC.SY1UNPCS = SL2REC.SY1UNPCS - SW0YW00.SW0YWTQT;
    end

    /* ------------------------------------------------------*/
     /* add the new qty's into the unit per case total*/
    /* ------------------------------------------------------*/

    SL2REC.SY1UNPCS = SL2REC.SY1UNPCS + SW0YW00.SW0YWTNQ;

    /* ------------------------------------------------------*/
     /* save the new total units per case*/
    /* ------------------------------------------------------*/

    SW0YW00.SW0YWNM1 = SL2REC.SY1UNPCS;

    /* ------------------------------------------------------*/
     /* update all products for the whse/pk carton unit per*/
     /* case total.*/
    /* ------------------------------------------------------*/

    SW0YS01(); /* select 'sc' dstloc.vrlitm01*/

    SW0YS02(); /* fetch 'nc' dstloc.vrlitm01*/

    while (SQLCA.VAGen_SQLCODE == 0)

      if (SL2REC.XQACD == "02")

        SW0Y612(); /* del 'd2' dstloc.vrlitm01 case*/

        SL2REC.SY1UNPCS = SW0YW00.SW0YWNM1;

        SW0Y613(); /* add 'a ' dstloc.vrlitm01 case*/

      end

      SW0YS02(); /* fetch 'nc' dstloc.vrlitm01*/

    end

    SW0YS03(); /* close  'cc' dstloc.vrlitm01 row*/

  end


end // end SW0Y610

// sel 'sb' dstloc.vrlitm01 row
Function SW0Y611()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "SB"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 100
       && SW0YW00.SW0YWOKY == "Y")
        /* next sentence*/
      else

        return;

      end
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0Y611

// del 'd2' dstloc.vrlitm01 row
Function SW0Y612()

   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "D2"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE DSTLOC.VRLITM01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Y612

// add 'a' dstloc.vrlitm01 row
Function SW0Y613()

   /* ------------------------------------------------------------*/
   /* add dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "A "; /* function*/

  SL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VRLITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Y613

// PROCESS 'CUR' PRODUCT DATA
Function SW0Y620()

   /* ------------------------------------------------------------*/
   /* select 'current' dstloc.vplnsy01 row*/
   /* ------------------------------------------------------------*/

  SW0Y621();

  SW0YW01.SWGPSEQN = SWGREC.SWGPSEQN; /* save field for task cd*/

  if (SW0YW00.SW0YWAPD != "Y")

    /* ----------------------------------------------------*/
     /* process 'current' dstloc.vplnsy01 totals*/
    /* ----------------------------------------------------*/

    /* ----------------------------------------------------*/
     /* if the 'current' product changes:*/

     /* -subtract 1 from total cartons*/
     /* -subtract 'current' qty's from total carton units*/
    /* ----------------------------------------------------*/

    if (SW0YW00.SW0YWPDE == "Y") /* product has been changed*/

      SWGREC.SWGPRDCS = SWGREC.SWGPRDCS - 1;
      SWGREC.SWGPRDUN = SWGREC.SWGPRDUN - SW0YW00.SW0YWTQT;

    else

      /* ----------------------------------------------------*/
       /* if the 'current' product did NOT change:*/

       /* -subtract the difference between the 'current'*/
        /* and 'new' from the total carton units*/
      /* ----------------------------------------------------*/

      SW0YW00.SW0YWNM1 = SW0YW00.SW0YWTNQ - SW0YW00.SW0YWTQT;
      SWGREC.SWGPRDUN = SWGREC.SWGPRDUN + SW0YW00.SW0YWNM1;

    end

    /* ----------------------------------------------------*/
     /* if the 'current' dstloc.vplnsy01 totals are le to*/
     /* zero the 'current' s/l plan data will be deleted.*/
    /* ----------------------------------------------------*/

    if (SWGREC.SWGPRDCS <= 0
     && SWGREC.SWGPRDUN <= 0
     && SWGREC.SWGPRDPL <= 0)

      /* ------------------------------------------------------------*/
       /* delete 'current' dstloc.vplnsy01 row*/
      /* ------------------------------------------------------------*/

      SW0Y622();

      SW0YW00.SW0YWPDD = "Y"; /* deleted 'current' dstloc.vplnsy01*/

    else

      SW0YS20(); /* upd 'cur' dstloc.vplnsy01*/

    end
  end


end // end SW0Y620

// sel 'sa' dstloc.vplnsy01
Function SW0Y621()

   /* ------------------------------------------------------------*/
   /* Select 'sa' dstloc.vplnsy01 using 'current' key.*/
   /* ------------------------------------------------------------*/

  set SWGREC empty; /* Clear row storage area*/

  SWGREC.XWHCD = SW0YW01.XWHCD;
  SWGREC.TSHCNTNR = SW0YW01.TSHCNTNR;
  SWGREC.SWEPLLNB = SW0YW01.SWEPLLNB;
  SWGREC.XGPCD = SW0YW01.XGPCD;
  SWGREC.PC3PONBR = SW0YW01.PC3PONBR;
  SWGREC.SY1STNBR = SW0YW01.SY1STNBR;
  SWGREC.SY2CLRID = SW0YW01.SY2CLRID;
  SWGREC.XDMCD = SW0YW01.XDMCD;
  SWGREC.XQACD = SW0YW01.XQACD;
  SWGREC.XOWCD = SW0YW01.XOWCD;
  SWGREC.XUMCD = SW0YW01.XUMCD;
  SWGREC.PC2INSEG = SW0YW01.PC2INSEG;
  SWGREC.XEGCD = SW0YW01.XEGCD;
  SWGREC.XPGCD = SW0YW01.XPGCD;
  SWGREC.XSLCD = SW0YW01.XSLCD;

  try
    call "IO5370" ("SA", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select r*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return;

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  SW0YM001.XXXLOCID = "621";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0Y621"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0Y621

// del 'd ' dstloc.vplnsy01 cur
Function SW0Y622()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnsy01 table row using 'cur' key*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("D ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Y622

// PROCESS 'CUR' L/C & SIZE DATA
Function SW0Y630()

   /* ------------------------------------------------------------*/
   /* select 'current' dstloc.vplnlc01 row*/
   /* ------------------------------------------------------------*/

  SW0Y631();

   /* ----------------------------------------------------*/
   /* process 'current' dstloc.vplnlc01 totals*/
   /* ----------------------------------------------------*/

  if (SW0YW00.SW0YWAPD != "Y")
    if (SW0YW00.SW0YWPDE == "Y") /* if the product changed*/

      /* ------------------------------------------------------------*/
       /* delete 'current' dstloc.vplnlc01 row*/
      /* ------------------------------------------------------------*/

      SW0Y632(); /* del 'cur' dstloc.vplnlc01*/

    else

      /* ------------------------------------------------------------*/
       /* update 'current' dstloc.vplnlc01 row*/
      /* ------------------------------------------------------------*/

      SW0Y633(); /* upd 'cur' dstloc.vplnlc01*/

    end
  end

   /* ------------------------------------------------------------*/
   /* process 'current' dstloc.vplnsz01 row's*/
   /* ------------------------------------------------------------*/

  set SWNREC empty; /* init dstloc.vplnsz01 record*/

  SW0YW00.SW0YWIDX = 1;
  while (SW0YW00.SW0YWIDX <= 8)

    if (SW0YM001.SY4IDDSC[SW0YWIDX] != " ")

      /* ------------------------------------------------------------*/
       /* select 'current' dstloc.vplnsz01 row*/
      /* ------------------------------------------------------------*/

      SWNREC.SY5SZID = SW0YW01.SY5SZID[SW0YWIDX];

      SW0Y634();

      /* ------------------------------------------------------------*/
       /* delete 'current' dstloc.vplnsz01 row*/
      /* ------------------------------------------------------------*/

      if (SW0YW00.SW0YWAPD != "Y")

        SW0Y635();

      end

    end

    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* if the 'current' product did not change add the new*/
   /* sizes/qtys for the 'current' product.*/
   /* ------------------------------------------------------------*/

  if (SW0YW00.SW0YWPDE == "Y" /* if the product changed*/
   || SW0YW00.SW0YWAPD == "Y") /* request to add new product*/
     /* next sentence*/
  else

    SW0YW00.SW0YWIDX = 1; /* init index*/
    while (SW0YW00.SW0YWIDX <= 8) /* process all sizes*/

      if (SW0YM001.SW0YMNSZ[SW0YWIDX] != " ")

        SW0YS21(); /* add 'cur' dstloc.vplnsz01*/

      end

      SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;

    end
  end


end // end SW0Y630

// sel 'sa' dstloc.vplnlc01 cur
Function SW0Y631()

   /* ------------------------------------------------------------*/
   /* Select 'sa' dstloc.vplncl01 using current key.*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "SA";

  set SWHREC empty;
  SWHREC.XWHCD = SW0YW01.XWHCD;
  SWHREC.SWEPLLNB = SW0YW01.SWEPLLNB;
  SWHREC.TSHCNTNR = SW0YW01.TSHCNTNR;
  SWHREC.XGPCD = SW0YW01.XGPCD;
  SWHREC.PC3PONBR = SW0YW01.PC3PONBR;
  SWHREC.SWGPSEQN = SWGREC.SWGPSEQN;
  SWHREC.PKDNCSQN = SW0YW01.PKDNCSQN;

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return;

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  SW0YM001.XXXLOCID = "631";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0Y631"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0Y631

// del 'd ' dstloc.vplnlc01 cur
Function SW0Y632()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnlc01 table row using 'new' key*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "D ";

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "632"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Y632

// upd 'u' dstloc.vplnlc01 cur
Function SW0Y633()
   /* ------------------------------------------------------------*/
   /* upd 'current' dstloc.vplnlc01 table row*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "U ";
  SWHREC.SWHCRTUN = SW0YW00.SW0YWTNQ;

  SWHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SWHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "633"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Y633

// sel 's' dstloc.vplnsz01 cur
Function SW0Y634()

   /* ------------------------------------------------------------*/
   /* Select 's' dstloc.vplnsz01*/
   /* ------------------------------------------------------------*/

  SWNREC.XWHCD = SW0YW01.XWHCD;
  SWNREC.SWEPLLNB = SW0YW01.SWEPLLNB;
  SWNREC.SWGPSEQN = SWHREC.SWGPSEQN;
  SWNREC.SWCLNENB = SWHREC.SWCLNENB;
  SWNREC.PKDNCSQN = SW0YW01.PKDNCSQN;

  try
    call "IO5380" ("S ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return;

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  SW0YM001.XXXLOCID = "634";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0Y634"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0Y634

// del 'd' dstloc.vplnsz01 cur
Function SW0Y635()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnsz01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5380" ("D ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "635"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DEL DSTLOC.VPLNSZ01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Y635

// PROCESS 'NEW' PRODUCT DATA
Function SW0Y640()

   /* -------------------------------------------------------*/
   /* selcet 'new' dstloc.vplnsy01 data*/
   /* -------------------------------------------------------*/

  SW0Y641();

  if (SQLCA.VAGen_SQLCODE == 0)

    /* -------------------------------------------------------*/
     /* update 'new' dstloc.vplnsy01 data*/
    /* -------------------------------------------------------*/

    SWGREC.SWGPRDCS = SWGREC.SWGPRDCS + 1;
    SWGREC.SWGPRDUN = SWGREC.SWGPRDUN + SW0YW00.SW0YWTNQ;

    SW0YS20(); /* upd 'new' dstloc.vplnsy01*/

  else

    /* --------------------------------------------------------*/
     /* the 'new' product DOES NOT exist and the 'current'*/
     /* product was NOT deleted, get a new product seq number*/
     /* else reuse the 'current' product sequence number and*/
     /* add a row to the dstloc.viyhsy001 table.*/
    /* --------------------------------------------------------*/

    if (SW0YW00.SW0YWPDD == "Y") /* product was deleted*/

      SW0Y642(); /* add 'a' dstloc.vihsy001 new*/

    else

      SW0Y643(); /* get 'new' product seq number*/

      SWGREC.SWGPSEQN = SL3NXPSN;

    end

    /* ----------------------------------------------------*/
     /* add the 'new' dstloc.vplnsy01 row*/
    /* ----------------------------------------------------*/

    SWGREC.SWGPRDCS = 1;
    SWGREC.SWGPRDUN = SW0YW00.SW0YWTNQ;

    SW0Y644(); /* add 'new' dstloc.vplnsy01*/

  end


end // end SW0Y640

// sel 'sa' dstloc.vplnsy01 new
Function SW0Y641()

   /* ----------------------------------------------------*/
   /* select dstloc.vplnsy01 using "new" product key*/
   /* ----------------------------------------------------*/

  SWGREC.SY1STNBR = SW0YM001.SW0YMSTY;
  SWGREC.SY2CLRID = SW0YM001.SW0YMCLR;
  SWGREC.XDMCD = SW0YM001.SW0YMDIM;
  SWGREC.XQACD = SW0YM001.SW0YMXQA;
  SWGREC.XOWCD = SW0YM001.SW0YMOWN;
  SWGREC.XUMCD = SW0YM001.SW0YMUOM;
  SWGREC.PC2INSEG = SW0YM001.SW0YMSEG;
  SWGREC.XEGCD = SW0YM001.SW0YMEDF;
  SWGREC.XPGCD = SW0YM001.SW0YMPKG;
  SWGREC.XSLCD = SW0YM001.SW0YMSLC;

   /* ------------------------------------------------------------*/
   /* Select 'sa' dstloc.vplnsy01 using current key.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("SA", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select r*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return;

    end
  end

  SW0YM001.XXXLOCID = "641";

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0Y641"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0Y641

// add 'a ' dstloc.vihsy001 new
Function SW0Y642()
   /* ------------------------------------------------------------*/
   /* add dstloc.vihsy001 table row using 'current' data*/
   /* ------------------------------------------------------------*/

  set SWJREC empty;

  SWJREC.XWHCD = SWGREC.XWHCD;
  SWJREC.XGPCD = SWGREC.XGPCD;
  SWJREC.TSHCNTNR = SWGREC.TSHCNTNR;
  SWJREC.PC3PONBR = SWGREC.PC3PONBR;
  SWJREC.PC3POIDT = SW0YW01.PC3POIDT;
  SWJREC.PCFSECD = SW0YW01.PCFSECD;
  SWJREC.FY1FCTYC = SW0YW01.FY1FCTYC;
  SWJREC.PC4ORTYP = SW0YW01.PC4ORTYP;
  SWJREC.SY1STNBR = SWGREC.SY1STNBR;
  SWJREC.SY2CLRID = SWGREC.SY2CLRID;
  SWJREC.XDMCD = SWGREC.XDMCD;
  SWJREC.XQACD = SWGREC.XQACD;
  SWJREC.XOWCD = SWGREC.XOWCD;
  SWJREC.PC2INSEG = SWGREC.PC2INSEG;
  SWJREC.XEGCD = SWGREC.XEGCD;
  SWJREC.XPGCD = SWGREC.XPGCD;
  SWJREC.XUMCD = SWGREC.XUMCD;
  SWJREC.XSLCD = SWGREC.XSLCD;
  SWJREC.SWGPSEQN = SWGREC.SWGPSEQN;
  SWJREC.SWGPRDCS = SWGREC.SWGPRDCS;
  SWJREC.SWGPRDUN = SWGREC.SWGPRDUN;
  SWJREC.SWGINUN1 = SWGREC.SWGINUN1;
  SWJREC.SWGINCS1 = SWGREC.SWGINCS1;
  SWJREC.SWGINMM1 = SWGREC.SWGINMM1;
  SWJREC.SWGINUN2 = SWGREC.SWGINUN2;
  SWJREC.SWGINCS2 = SWGREC.SWGINCS2;
  SWJREC.SWGINMM2 = SWGREC.SWGINMM2;

  SWJREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SWJREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

  try
    call "IO5280" ("A ", SQLCA, SWJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "642"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VIHSY001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIHSY001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Y642

// get next product seq nbr
Function SW0Y643()
   /* ------------------------------------------------------------*/
   /* obtain next w/o nbr / product seq nbr dstloc.vslctl01*/
   /* ------------------------------------------------------------*/

  set SL3REC empty; /* Clear row storage area*/

  SL3REC.XWHCD = SW0YW01.XWHCD;
  SL3REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL3REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO1500" ("G7", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "643"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VSLCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSLCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0Y643

// add 'a' dstloc.vplnsy01 new
Function SW0Y644()

   /* ------------------------------------------------------------*/
   /* add 'new' dstloc.vplnsy01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("A ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "644"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Y644

// PROCESS 'NEW' L/C, SIZE, TASK
Function SW0Y650()

   /* ----------------------------------------------------*/
   /* add the 'new' dstloc.vplnlc01 row*/
   /* ----------------------------------------------------*/

  SW0Y651(); /* add 'new' dstloc.vplnlc01*/

   /* ----------------------------------------------------*/
   /* add the 'new' dstloc.vplnsz01 row*/
   /* ----------------------------------------------------*/

  SW0YW00.SW0YWIDX = 1; /* init index*/
  while (SW0YW00.SW0YWIDX <= 8) /* process all sizes*/

    if (SW0YM001.SW0YMNSZ[SW0YWIDX] != " ")

      SW0YS21(); /* add 'new' dstloc.vplnsz01*/

    end

    SW0YW00.SW0YWIDX = SW0YW00.SW0YWIDX + 1;

  end

end // end SW0Y650

// add 'a' dstloc.vplnlc01 new
Function SW0Y651()
   /* ------------------------------------------------------------*/
   /* add 'current' dstloc.vplnlc01 table row*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "A";

  SWHREC.SWGPSEQN = SWGREC.SWGPSEQN;
  SWHREC.SWHCRTUN = SW0YW00.SW0YWTNQ;

  SWHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SWHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "651"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Y651

// select 'sc' dstloc.vrlitm01
Function SW0YS01()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "SC"; /* function*/

  set SL2REC empty; /* Clear row storage area*/
  SL2REC.XWHCD = SW0YW01.XWHCD;
  SL2REC.PKDNCSQN = SW0YW01.PKDNCSQN;

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SC SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS01

// fetch 'nc' dstloc.vrlitm01
Function SW0YS02()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "NC"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NC NEXT ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS02

// close 'cc' dstloc.vrlitm01
Function SW0YS03()
   /* ------------------------------------------------------------*/
   /* close dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "CC"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  SLWREC.XXXLOCID = "S03";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CC VRLITM01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS03

// select 's' dstloc.vrlhdr01 row
Function SW0YS04()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlhdr01 table row*/
   /* ------------------------------------------------------------*/

  set SLVREC empty; /* Clear row storage area*/
  SLVREC.SLVFNC = "S "; /* function*/

  set SL1REC empty; /* Clear row storage area*/
  SL1REC.XWHCD = SW0YW01.XWHCD;
  SL1REC.TS3CNTNR = SW0YW01.TSHCNTNR;

  try
    call "IO1570" (SLVREC, SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL1REC.SL1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS04

// select 's8' dstloc.vrlitm01
Function SW0YS05()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "S8"; /* function*/

  set SL2REC empty; /* Clear row storage area*/
  SL2REC.XWHCD = SW0YW01.XWHCD;
  SL2REC.TS3CNTNR = SW0YW01.TSHCNTNR;
  SL2REC.PKDNCSQN = SW0YW01.PKDNCSQN;

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S8 SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS05

// fetch 'n8' dstloc.vrlitm01
Function SW0YS06()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "N8"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N8 NEXT ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS06

// close 'c8' dstloc.vrlitm01
Function SW0YS07()
   /* ------------------------------------------------------------*/
   /* close dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "C8"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  SLWREC.XXXLOCID = "S07";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C8 VRLITM01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS07

// select 's9' dstloc.vrlitm01
Function SW0YS08()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "S9"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS08

// fetch 'n9' dstloc.vrlitm01
Function SW0YS09()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "N9"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS09

// close 'c9' dstloc.vrlitm01
Function SW0YS10()
   /* ------------------------------------------------------------*/
   /* close dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "C9"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  SLWREC.XXXLOCID = "S10";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C9 VRLITM01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS10

// select 's ' dprod.vcolor02 row
Function SW0YS11()
   /* ------------------------------------------------------------*/
   /* Select dprod.vcolor02 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS11

// convert sizes
Function SW0YS12()

   /* ------------------------------------------------------------*/
    /* This routine will translate the size id to size desc*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOCAT[2] = "SW0YS12 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSYPI1(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC > 8)
      if (SYPREC.SYPRC == +10)
        SLWREC.XXXLOCID = "S12";
        converseLib.validationFailed(12); /* <--- not on db msg*/
      else
        if (SYPREC.SYPRC == +9)
          SLWREC.XXXLOCID = "S12";
          converseLib.validationFailed(31); /* <--- try again msg*/
        else
          SLWREC.XXXLOCID = "S12";
          converseLib.validationFailed(1); /* <--- severe error msg*/
        end
        exit stack;
      end
    end
  end


end // end SW0YS12

// sel 's ' dprodc.vprdcu01 row
Function SW0YS13()
   /* ------------------------------------------------------------*/
   /* Select dprodc.vprdcu01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS13

// upd 'u ' dstloc.vplnsy01
Function SW0YS20()

   /* ------------------------------------------------------------*/
   /* upd 'current' dstloc.vplnsy01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("U ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS20

// add 'a ' dstloc.vplnsz01
Function SW0YS21()
   /* ------------------------------------------------------------*/
   /* add 'new' dstloc.vplnsz01 table*/
   /* ------------------------------------------------------------*/

  SWNREC.SWGPSEQN = SWHREC.SWGPSEQN;
  SWNREC.SY5SZID = SW0YW01.SW0YWNSI[SW0YWIDX];
  SWNREC.SWNSZUN = SW0YM001.SW0YMNQT[SW0YWIDX];

  SWNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5380" ("A ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VPLNSZ01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0YS21

//*** RECORD=SW0YW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record SW0YW00 type basicRecord
  10 SW0YWSWR SW0YWSWR ; 
  10 SW0YWSWF SW0YWSWF ; 
  10 SW0YWPDD SW0YWPDD ; 
  10 SW0YWAPD SW0YWAPD ; 
  10 SW0YWTFL SW0YWTFL ; 
  10 SW0YWPDE SW0YWPDE ; 
  10 SW0YWFFL SW0YWFFL ; 
  10 SW0YWPKE SW0YWPKE ; 
  10 SW0YWOKY SW0YWOKY ; 
  10 SW0YWSZF SW0YWSZF ; 
  10 SW0YWSFL SW0YWSFL ; 
  10 SW0YWMOD SW0YWMOD ; 
  10 SW0YWIDX SW0YWIDX ; 
  10 SW0YWCIX SW0YWCIX ; 
  10 SW0YWLIX SW0YWLIX ; 
  10 SW0YWCNT SW0YWCNT ; 
  10 SW0YWNM1 SW0YWNM1 ; 
  10 SW0YWTQT SW0YWTQT ; 
  10 SW0YWTNQ SW0YWTNQ ; 
end // end SW0YW00

//*** RECORD=SW0YW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record SW0YW01 type basicRecord
  5 SW0YWGP1 SW0YWGP1 ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 PKDNCSQN PKDNCSQN ; 
    10 SWGPSEQN SWGPSEQN ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 SL2CASE SL2CASE ; 
      15 * char(4) ; 
      15 SW0YWTSO SW0YWTSO ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 XSLCD XSLCD ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SL2PALET SL2PALET ; 
    10 SY5SZID SY5SZID [8] ; 
    10 SY4IDDSC SY4IDDSC [8] ; 
    10 SL2RCVD SL2RCVD [8] ; 
    10 SW0YWGPC SW0YWGPC ; 
    10 SW0YWSTY SW0YWSTY ; 
    10 SW0YWCLR SW0YWCLR ; 
    10 SW0YWDIM SW0YWDIM ; 
    10 SW0YWNSD SW0YWNSD ; 
    10 SW0YWNCD SW0YWNCD ; 
    10 SW0YWXQA SW0YWXQA ; 
    10 SW0YWSEG SW0YWSEG ; 
    10 SW0YWEDF SW0YWEDF ; 
    10 SW0YWPKG SW0YWPKG ; 
    10 SW0YWUOM SW0YWUOM ; 
    10 SW0YWOWN SW0YWOWN ; 
    10 SW0YWSLC SW0YWSLC ; 
    10 SW0YWNFA SW0YWNFA ; 
    10 SW0YWNFZ SW0YWNFZ ; 
    10 SW0YWNFL SW0YWNFL ; 
    10 SW0YWNSZ SW0YWNSZ [8] ; 
    10 SW0YWNSI SW0YWNSI [8] ; 
    10 SW0YWNQT SW0YWNQT [8] ; 
    10 CACHGFL CACHGFL ; 
end // end SW0YW01

// add new product
DataItem SW0YWAPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SW0YWCIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new color id
DataItem SW0YWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row    count
DataItem SW0YWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new dimension code
DataItem SW0YWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new xeg-engr-diff-cd
DataItem SW0YWEDF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product data entered
DataItem SW0YWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sw0yw01 group level
DataItem SW0YWGP1 char(360)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new gpc code
DataItem SW0YWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SW0YWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// load index
DataItem SW0YWLIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// data modified switch
DataItem SW0YWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new color desc
DataItem SW0YWNCD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new from area code
DataItem SW0YWNFA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new from location code
DataItem SW0YWNFL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new from zone code
DataItem SW0YWNFZ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric work field 1
DataItem SW0YWNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// new size quanity
DataItem SW0YWNQT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new style desc
DataItem SW0YWNSD char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new size description
DataItem SW0YWNSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new size desc
DataItem SW0YWNSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current product entered
DataItem SW0YWOKY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new own group
DataItem SW0YWOWN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product deleted flag
DataItem SW0YWPDD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product data entered
DataItem SW0YWPDE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product key data entered
DataItem SW0YWPKE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new package code
DataItem SW0YWPKG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new iseg code
DataItem SW0YWSEG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size changed flag
DataItem SW0YWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new class code
DataItem SW0YWSLC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new style number
DataItem SW0YWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0YWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0YWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size entered flag
DataItem SW0YWSZF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// translate size desc flag
DataItem SW0YWTFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total new qty's
DataItem SW0YWTNQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// total original qty's
DataItem SW0YWTQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work carton number
DataItem SW0YWTSO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new unit of measure
DataItem SW0YWUOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new quality code
DataItem SW0YWXQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

