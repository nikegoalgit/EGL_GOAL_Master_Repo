package sw0t;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0T ****
// This application displays error code inquiry screen.
// The display will also provide a pop-up window for category
// selection. If entered via screen SW0N, a code may be passed
// back to calling program.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      10/24/90  SBEAUC  New application.
//          02/14/91  ryonke  program changes for table changes
// MAINT    01/31/92  GRAY    INITIALIZE RECORDS AND MAPS
// *********************
Program SW0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0TW00 SW0TW00; // record
  SW0TW01 SW0TW01; // record
  SWOREC SWOREC; // record
  SWZREC SWZREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XTCTBL; // table
  use SW0TM.SW0TM001,  // forms
      SW0TM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0TM001 initial; /* M001 input/output*/
    set XX0XM001 initial;
    set SWOREC empty;
    set SQLCA empty; /* sql communication area*/
    set TAEREC empty; /* error diagnosis information*/
    set TA1REC empty; /* error diagnosis parameters*/
    set TA5REC empty; /* temporary storage parameters*/
    set SW0TW00 empty; /* Working storage*/
    set SW0TW01 empty; /* M001 display storage*/
    set XX0XW02 empty;
    set SWZREC empty;

    SWOREC.SWODATA = SLWREC.SLWUSERA; /* move sl commarea*/

    SW0TW00.SW0TWSWS = "N"; /* no selection allowed*/
    if (SWOREC.SWOIDXPO != 0)

      if (COMMAREA.CAFROMAP == "SW0N"
       || COMMAREA.CAFROMAP == "SW0P")

        SW0TW00.SW0TWSWS = "Y"; /* set switch to allow selection*/

      end

    end

    SW0TW00.XXXSTAT = "A"; /* default to active status*/

    if (SW0TW00.SW0TWSWS == "Y") /* if selection is allowed*/
      set SW0TM001.XXXSTAT protect; /* no change to status allowed*/
      SW0TM001.SW0TMSEL = "SEL"; /* set select field title*/

    else

      SW0TM001.SW0TMSEL = "   "; /* remove title*/
      set SW0TM001.SW0TMSEL invisible; /* dont show select title*/
      SW0TW00.SW0TWLIX = 1; /* initialize counter*/
      while (SW0TW00.SW0TWLIX <= 15) /* set all select fields to protect*/

        set SW0TM001.SW0TSEL[SW0TWLIX] protect, invisible; /* protect select field*/
        SW0TW00.SW0TWLIX = SW0TW00.SW0TWLIX + 1; /* increment counter*/

      end
    end
    SW0TW00.SW0TWSWF = "Y"; /* Format the map switch*/
    SW0TW00.SW0TWSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0T001; /* Converse the main process*/


    SW0T001: SW0T001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0T001; /* Converse the main process*/


  end // end main
end // end SW0T

// Main process to display a map
Function SW0T001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0T100(); /* Obtain the data to display*/

  SW0T200(); /* Format and display the map*/

  SW0T300(); /* Check attention identifier*/

  SW0T400(); /* Reset fields to normal intensity*/

  SW0T500(); /* Verify the data that was entered*/

  SW0T600(); /* Process valid input request*/


end // end SW0T001

// Obtain the data to display
Function SW0T100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0TW00.SW0TWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  set SW0TW01 empty; /* M001 display storage*/
  SW0TW00.SWZTECD = SW0TM001.SWZTECD; /* save error code from map*/
  SW0TW00.XTCCD = SW0TM001.XTCCD; /* save category code from map*/
  if (SW0TW00.SW0TWSWS == "N") /* if selection not allowed*/

    SW0TW00.XXXSTAT = SW0TM001.XXXSTAT; /* save status from map*/

  else

    SW0TW00.XXXSTAT = "A"; /* must allow only active status*/

  end

   /* ------------------------------------------------------------*/
   /* set selection criteria fields*/
   /* ------------------------------------------------------------*/

  if (SW0TW00.SWZTECD == 0) /* if beginning error code blank*/
    SWZREC.SWZTECD = -1; /* set starting code to beginning*/
  else
    SWZREC.SWZTECD = SW0TW00.SWZTECD; /* use keyed value*/
  end

  if (SW0TW00.XTCCD == " ")
    SWZREC.XTCCD = "*"; /* set low category code to beginning*/
  else
    SWZREC.XTCCD = SW0TW00.XTCCD; /* use keyed value for select*/
  end

  if (SW0TW00.SW0TWSWS == "N") /* if entry of status is allowed*/
    if (SW0TW00.XXXSTAT == "A" /* if active is selected*/
     || SW0TW00.XXXSTAT == "I") /* or inactive*/
      SWZREC.XXXSTAT = SW0TW00.XXXSTAT; /* use specific status*/
    else
      SWZREC.XXXSTAT = "*"; /* both requested - blank denotes all*/
    end
  else
    SWZREC.XXXSTAT = "A"; /* default to active for this case*/
  end

   /* ------------------------------------------------------------*/
   /* purge temporary storage*/
   /* ------------------------------------------------------------*/

  SW0TW00.XXXTSLEN = 990; /* set t/s page length*/
  SW0T110(); /* purge t/s*/
  SW0TW00.XXXTSPAG = 1; /* set page for display*/

   /* ------------------------------------------------------------*/
   /* begin scan for error codes, based on selection criteria*/
   /* ------------------------------------------------------------*/

  SW0T120(); /* begin scan*/

   /* ------------------------------------------------------------*/
   /* read next error code entry and store to t/s when page full*/
   /* ------------------------------------------------------------*/

  SW0TW00.SW0TWSWC = "N"; /* set end of cursor switch to no*/
  SW0TW00.SW0TWLIX = 1; /* set line index to 1*/

  while (SW0TW00.SW0TWSWC == "N") /* until end-of-cursor*/
    SW0T130(); /* read and load t/s routine*/
  end

   /* ------------------------------------------------------------*/
   /* Done with retrieval - close cursor*/
   /* ------------------------------------------------------------*/

  SW0T140(); /* close cursor*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  if (SW0TW00.TA5TSQIX > 0) /* if t/s written*/
    SW0TW00.SW0TWSWR = "N"; /* Request for data switch*/
  end


end // end SW0T100

// Purge any temporary storage
Function SW0T110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0TW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0TW00.XXXTSPAG = 0; /* Current page number w/s*/
  SW0TW00.TA5TSQIX = 0; /* Highest page number w/s*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/
  converseLib.validationFailed(214); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0T110

// begin error code scan
Function SW0T120()
   /* *************************************************************/
   /* first select of error codes*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  call "IO5560" ("S1", SQLCA, SWZREC) {isNoRefresh = yes, isExternal = yes}; /* Start the scan*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* normal return code*/
    return; /* everything okay - return*/
  end
  SLWREC.XXXLOCID = "120"; /* Error location*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* no more entries on table*/
    converseLib.validationFailed(216); /* set message no data found*/
    exit stack;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0T120 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN FIRST ERROR CODE";
  TA1REC.TA1MAP = "SW0TM001"; /* Map name*/
  TA1REC.TA1TBLVU = "VTASKR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to previous process*/

end // end SW0T120

// read and load error codes
Function SW0T130()
   /* *************************************************************/
   /* Read and load the next error code - load to t/s when page*/
       /* is full (up to max 30 pages)*/
   /* If end of file, get out*/
   /* If any error, indicate a system error.*/
   /* *************************************************************/

  call "IO5560" ("N1", SQLCA, SWZREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    SW0TW00.SW0TWSWC = "Y"; /* End of cursor is reached*/
    if (SW0TW00.SW0TWLIX == 1 /* No lines for this page*/
     && SW0TW00.TA5TSQIX == 0) /* No pages written before this*/
      SLWREC.XXXLOCID = "130"; /* denote paragraph of failure*/

      converseLib.validationFailed(115); /* No record(s) found*/
      return;

    end

  end

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != +100) /* End of table is okay*/

    SLWREC.XXXLOCID = "130"; /* denote paragraph of failure*/
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "SW0T130 "; /* Process name*/
    TA1REC.TA1LOC = "READ NEXT ERROR CODE";
    TA1REC.TA1MAP = "SW0TM001"; /* Map name*/
    TA1REC.TA1TBLVU = "SWZREC"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if we had a successful retrieval, store data to display rec*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good return code*/

    SW0TW01.SWZTECD[SW0TWLIX] = SWZREC.SWZTECD; /* store error code*/
    SW0TW01.XTCCD[SW0TWLIX] = SWZREC.XTCCD; /* store category code*/
    SW0TW01.XXXSTAT[SW0TWLIX] = SWZREC.XXXSTAT; /* status*/
    SW0TW01.SWZTEDSC[SW0TWLIX] = SWZREC.SWZTEDSC; /* description*/
    SW0TW00.SW0TWLIX = SW0TW00.SW0TWLIX + 1; /* increment line counter*/
  end

   /* ------------------------------------------------------------*/
   /* if line index is > 15 or end of cursor, save to t/s*/
   /* ------------------------------------------------------------*/

  if (SW0TW00.SW0TWSWC == "Y") /* end of cursor and...*/
    if (SW0TW00.SW0TWLIX > 1) /* there is at least one line to save*/
      SW0T131(); /* routine to store page to t/s*/
    end
  else
    if (SW0TW00.SW0TWLIX > 15) /* full page?*/
      SW0T131(); /* routine to store page to t/s*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if page number > 30, set end of cursor switch and msg*/
   /* ------------------------------------------------------------*/

  if (SW0TW00.TA5TSQIX == 30)
    SW0TW00.SW0TWSWC = "Y"; /* force end of cursor*/
    converseLib.validationFailed(178); /* msg to say exceeds 30 pages*/
  end
end // end SW0T130

// Add page to temporary storage
Function SW0T131()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0TW01.XXXTSLEN = 990; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0TW01 empty; /* M001 display storage*/
    SW0TW00.SW0TWLIX = 1; /* reset line counter*/

    SW0TW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "116"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0T131

Function SW0T140()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5560" ("C1", SQLCA, SWZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0T140

// Format and converse the map
Function SW0T200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* overrides any informational ones*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display*/
   /* ------------------------------------------------------------*/

  if (SW0TW00.SW0TWSWR == "Y" /* obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no errors*/

    if (SW0TW00.SW0TWSWF == "Y") /* map must be formatted*/
      SW0T210(); /* format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0TM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0TM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* there is a message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* move in message number*/
    else
      SW0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move in msg text*/

    end
    SW0TM001.XXXMODID = SLWREC.XXXLOCID; /* module id*/
    set SW0TM001 alarm; /* Indicate sound alarm*/

  end
  SW0TW01.XXXSTAT = "A"; /* initialize to active status*/
  if (SW0TW00.SW0TWSWS == "Y") /* if selection is allowed*/
    SW0TM001.SW0TMSEL = "SEL"; /* set title*/
    set SW0TM001.XXXSTAT protect; /* no change to status allowed*/

  else

    SW0TW00.SW0TWLIX = 1; /* initialize counter*/
    set SW0TM001.SW0TMSEL protect, invisible; /* dont show select field title*/
    while (SW0TW00.SW0TWLIX <= 15) /* set all select fields to protect*/

      set SW0TM001.SW0TSEL[SW0TWLIX] protect, invisible; /* no selection*/
      SW0TW00.SW0TWLIX = SW0TW00.SW0TWLIX + 1; /* increment counter*/
    end
  end

  converse SW0TM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* there is no module id field*/
  SLWREC.SLWMSGNO = 0; /* there is no message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0TM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0TM001.CAITEM; /* Application data*/


end // end SW0T200

// Format the display data
Function SW0T210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0TM001 initial; /* M001 input/output area*/

  SW0TW00.SW0TWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0TW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0TW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      SW0TS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    SW0TM001.SW0TWCOL = SW0TW00.XXXTSPAG; /* Current page*/
    SW0TM001.SW0TMCOL = SW0TW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  set SW0TM001.SWZTECD cursor; /* Position cursor*/

  SW0TM001.SWZTECD = SW0TW00.SWZTECD; /* beginning error code*/
  SW0TM001.XTCCD = SW0TW00.XTCCD; /* category code selection*/
  SW0TM001.XXXSTAT = SW0TW00.XXXSTAT; /* status selection*/

  SW0TW00.SW0TWLIX = 1; /* Initialize line index*/
  move SW0TW01.XTCCD to SW0TM001.SW0TWCAT[1] for all; /* fill screen occurrances*/
  move SW0TW01.XXXSTAT to SW0TM001.SW0TMST[1] for all; /* fill screen occurrances*/
  move SW0TW01.SWZTEDSC to SW0TM001.SW0TWDSC[1] for all; /* fill screen occurrances*/
  move SW0TW01.SWZTECD to SW0TM001.SW0TWECD[1] for all; /* fill screen occurrances*/

  while (SW0TW00.SW0TWLIX <= 15) /* Until screen is full*/

    if (SW0TW01.SWZTECD[SW0TWLIX] == 0) /* empty occurrance*/
      set SW0TM001.SW0TSEL[SW0TWLIX] protect, invisible; /* protect*/
      set SW0TM001.SW0TWCAT[SW0TWLIX] protect, invisible; /* protect*/
      set SW0TM001.SW0TWECD[SW0TWLIX] protect, invisible; /* protect*/
      set SW0TM001.SW0TMST[SW0TWLIX] protect, invisible; /* protect*/
      set SW0TM001.SW0TWDSC[SW0TWLIX] protect, invisible; /* protect*/

    end
    if (SW0TW00.SW0TWSWS == "N") /* selection of code not allowed*/
      set SW0TM001.SW0TSEL[SW0TWLIX] protect, invisible; /* protect sel field*/
    end

    SW0TW00.SW0TWLIX = SW0TW00.SW0TWLIX + 1; /* Increment line index*/

  end


end // end SW0T210

// Check attention identifier
Function SW0T300()
  SLWREC.XXXLOCID = "300"; /* Module identification*/
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0TW00.SW0TWSWR == "Y") /* Request for data*/
      set SW0TW01 empty; /* M001 display storage*/
    end

    SW0TW00.SW0TWSWF = "Y"; /* Format the map switch*/
    SW0TW00.SW0TWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0T110(); /* Purge any temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SW0TM001.CATOAP cursor, bold; /* Highlight*/

      converseLib.validationFailed(166); /* Cant access requested appl*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identificaton*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Exit to GD00 screen - Goal Documentation*/
   /* PF3 - Exit to SW0N screen - Inspection History Entry*/
   /* PF4 - Exit to MN0M screen - Main Menu*/
   /* PF5 - Exit to SL0M screen - Stock Locate Menu*/
   /* PF9 - Exit to SW0A screen - Inspection Menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf9) /* or PF9 was pressed*/

    if (converseVar.eventKey is pf1) /* for PF1*/

      COMMAREA.CAITEM = "SW0TM001"; /* Application find code*/

    end

    if (converseVar.eventKey is pf3)

      COMMAREA.CATOAP = "SW0N";
                                   /* pf3 is transfer to sw0n screen*/

    end

    if (converseVar.eventKey is pf4)

      COMMAREA.CATOAP = "MN0M";
                                   /* pf4 is transfer to mn0m screen*/

    end

    if (converseVar.eventKey is pf5)

      COMMAREA.CATOAP = "SL0M"; /* Stock locate main menu xfer*/

    end

    if (converseVar.eventKey is pf9)

      COMMAREA.CATOAP = "SW0A"; /* Inspection menu*/

    end

    SW0T110(); /* Purge any temporary storage*/
    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0T300

// Reset highlighted fields
Function SW0T400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0TM001.SWZTECD initialAttributes; /* error code*/
  set SW0TM001.XTCCD initialAttributes; /* category code*/
  if (SW0TW00.SW0TWSWS == "N") /* if selection of status is allowed*/

    set SW0TM001.XXXSTAT initialAttributes; /* status code*/

  end

  set SW0TM001.CATOAP initialAttributes; /* to application*/
  set SW0TM001.CAITEM initialAttributes; /* to item (fast path info)*/

  SW0TW00.SW0TWLIX = 1; /* start counter at 1*/
  if (SW0TW00.SW0TWSWS == "Y") /* switch to allow selection of errcd*/

    while (SW0TW00.SW0TWLIX <= 15) /* loop through occurrances*/
      set SW0TM001.SW0TSEL[SW0TWLIX] initialAttributes; /* error code selection*/
      SW0TW00.SW0TWLIX = SW0TW00.SW0TWLIX + 1; /* increment subscript*/
    end

  else

    while (SW0TW00.SW0TWLIX <= 15) /* loop through occurrances*/
      set SW0TM001.SW0TSEL[SW0TWLIX] protect, invisible; /* dont allow entry*/
      SW0TW00.SW0TWLIX = SW0TW00.SW0TWLIX + 1; /* increment subscript*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0TM001.XTCCD == "?") /* category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (SW0TM001.XTCCD == "?") /* cat list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CAT"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXTC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0TM001.XTCCD = SW0TW01.XTCCD; /* Restore prior code*/
    else
      SW0TW00.SW0TWSWF = "Y"; /* Screen format switch*/
      SW0TW00.SW0TWSWR = "Y"; /* New request for data*/
      SW0TM001.XTCCD = XTCTBL.XTCCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0TM001.SWZTECD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/

  exit stack; /* Exit to display map*/


end // end SW0T400

// Verify data that was entered
Function SW0T500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0TM001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0TM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(02); /* Enter only with FAST PATH*/

  end
   /* ------------------------------------------------------------*/
   /* At least error code or category code must be entered*/
   /* ------------------------------------------------------------*/

  if (SW0TM001.SWZTECD == 0 /* if no error code entered*/
   && SW0TM001.XTCCD == " ") /* and no category code entered*/

    converseLib.validationFailed(235); /* must have at least one of these*/
    set SW0TM001.SWZTECD bold; /* highlight error code*/
    set SW0TM001.XTCCD bold; /* category code too*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SW0T510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (SW0TW00.TA5TSQIX > 0 /* Page was formatted*/
     && SW0TW00.SW0TWSWS == "Y") /* selection is allowed*/

      SW0TW00.SW0TWLIX = 15; /* Initialize line index*/

      while (SW0TW00.SW0TWLIX > 0) /* Until end of lines*/

        SW0T520(); /* Verify data in the line*/

        SW0TW00.SW0TWLIX = SW0TW00.SW0TWLIX - 1; /* Decrement line number*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the category code.*/
   /* ------------------------------------------------------------*/

  if (SW0TM001.XTCCD != "   ") /* if not blank*/

    if (SW0TM001.XTCCD in XTCTBL.XTCCD /* Code in table*/
     && XTCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

       /* NEXT SENTENCE*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      set SW0TM001.XTCCD cursor, bold; /* highlight*/
      converseLib.validationFailed(11); /* Field missing or invalid*/

    end

  end
  if (SW0TW00.SW0TWSWS == "N") /* if change of status is allowed*/

    if (SW0TM001.XXXSTAT != " " /* blank is okay*/
     && SW0TM001.XXXSTAT != "A" /* a is okay*/
     && SW0TM001.XXXSTAT != "I" /* i is okay*/
     && SW0TM001.XXXSTAT != "B") /* b is okay*/

      set SW0TM001.XXXSTAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* invalid value*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0T500

// Verify scroll request
Function SW0T510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0TW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0TW00.XXXTSPAG >= SW0TW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end



end // end SW0T510

// Verify data in the line
Function SW0T520()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (SW0TM001.SW0TSEL[SW0TWLIX] != "S" /* is not a "S"*/
   && SW0TM001.SW0TSEL[SW0TWLIX] != " ") /* and is not blank*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SW0TM001.SW0TSEL[SW0TWLIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Only "S" may be entered*/

  end


end // end SW0T520

// Process valid input request
Function SW0T600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SW0TW00.SW0TWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (SW0TM001.SWZTECD != SW0TW00.SWZTECD /* error code changed*/
   || SW0TM001.XTCCD != SW0TW00.XTCCD     /* category code changed*/
   || SW0TM001.XXXSTAT != SW0TW00.XXXSTAT) /* status changed*/

    SW0TW00.SW0TWSWR = "Y"; /* Request for data switch*/
    return; /* Return to previous process*/

  end
  if (SW0TW00.TA5TSQIX > 0) /* if there is existing display*/
    SW0TW00.SW0TWSWR = "N"; /* Request for data switch*/
  end


   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SW0TW00.XXXTSPAG = SW0TW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SW0TW00.XXXTSPAG = SW0TW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, pass the error code to calling map*/
   /* ------------------------------------------------------------*/

  if ("S" in SW0TM001.SW0TSEL) /* Line was selected*/

    SWOREC.SWOTNCD[SWOIDXPO] = SW0TW01.SWZTECD[sysVar.arrayIndex]; /* save code*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* set xfer applid*/
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* from sending applid*/

    XSEXIT(); /* hit the road, jack*/

  end


end // end SW0T600

Function SW0TS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0TW01.XXXTSLEN = 990; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SW0TW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0TS02

//*** RECORD=SW0TW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0TW00 type basicRecord
  10 SW0TWSWF SW0TWSWF ; 
  10 SW0TWSWR SW0TWSWR ; 
  10 SW0TWSWS SW0TWSWS ; 
  10 SW0TWSWC SW0TWSWC ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SWZTECD SWZTECD ; 
  10 XXXSTAT XXXSTAT ; 
  10 XTCCD XTCCD ; 
  10 SW0TWLIX SW0TWLIX ; 
  10 SW0TWECD SW0TWECD ; 
end // end SW0TW00

//*** RECORD=SW0TW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SW0TW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(990) ; 
    10 SWZTECD SWZTECD [15] ; 
    10 XTCCD XTCCD [15] ; 
    10 SWZTEDSC SWZTEDSC [15] ; 
    10 XXXSTAT XXXSTAT [15] ; 
end // end SW0TW01

// field for conversion of xtecd
DataItem SW0TWECD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line index for display
DataItem SW0TWLIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor switch
DataItem SW0TWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0TWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0TWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Allow selection switch
DataItem SW0TWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

