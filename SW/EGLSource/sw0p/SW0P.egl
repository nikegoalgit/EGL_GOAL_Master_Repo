package sw0p;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0P ****
// This application allows a user to access the inspection
// tables to setup new inspections.  It offers the users two
// different methods to develop new inspections;
//       1) By 's'electing tasks from a list of tasks from the
//          corporate task table.
//       2) By manually entering task numbers on the screen.
// 
// In the first case, users can enter TASK SELECTION CRITERIA
// to bring up a group of tasks.  The user will be able to
// scroll through these tasks, 's'electing those which are
// required for the inspection being setup.  If the user
// changes task selection CRITERIA and ENTER is pressed, then
// format the selected tasks BUT MAKE NO UPDATES. This will
// give users the ability to bring up several sets of tasks
// while byilding the new inspection. (User-selected tasks are
// stored in an array during scrolling.)
// 
// Update will be made when the ENTER key is pressed and no
// changes have been made to TASK SELECTION CRITERIA...provided
// everything is valid.  The screen will ve formatted with all
// data for the new inspection for the user to see the new
// inspection for the user to see the new inspection, but no
// maintenance or additions can be made on this screen at this
// point.  (The user can PF to the maintenance screen, if
// desired, to make any further changes, additions, or remove
// tasks.)
// IN THE SECOND CASE, users setup inspections by entering the
// task numbers needed for the inspection.  The user may enter
// up to 20 task numbers along with task information.  Scroll-
// ing is not applicable to this screen.
// 
// The user will be able to go back and forth between the two
// screens and use both methods to build the new isnpection.
// Once the inspection has been inserted, however, no further
// additions are allowed for the inspection.  This application
// is specifically geared to setup of NEW inspections.  If the
// user wishes to make changes, additions, or deletions to an
// existing inspection, a PF will allow them to transfer to the
// inspection maintenance screen.
// 
// PF keys will give users the ability to transfer to the
// related inspections screens to inquire and maintain existing
// insepctions.
// 
// NOTE - The inspection number is basically a way for the user
// to group specific tasks and apply them to cartons received.
// 
// A carton on a specific lane may have up to two inspection
// codes assigned to it:
// 
//     1) the inspection assigned at the container /po level
//     2) the isnpection assigned at the product level
// No single carton may have an aggregate task total that
// exceeds 20 tasks.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/30/90  jmoore  New application.
// sl1016   01/05/91  mchow   Added code to: default status to
//                            'a' (sw0p121); inactivate ENTER
//                            once tasks selected - instead,
//                            ENTER would trigger 'update
//                            required' msg (sw0p153, sw0p260).
// sl1016   01/07/91  mchow   Added code to: default inspection
//                            percent to 100 (sw0p121); Once
//                            updates complete, ENTER would
//                            give 'data cannot be modified'
//                            message (sw0p160); default task
//                            inspection percent, status to
//                            header inspection percent, status
//                            (sw0p121, sw0p221, sw0p253).
// fix      01/09/91  sbeauc  Default gpc from whse, add gpc
//                            to insp task array to update
//                            correct gpc with task.
// fix      01/09/91  jcampb  Default gpc from whse
//          02/13/91  ryonke  preogram changes for table change
//          10/10/92  Ryonke  preogram changes for table change
// Y2KFIX   02/03/98  MBURLE  Removed zero suppression from
//                            these map fields so the year 2000
//                            will properly display:
//                             - SW0PM001.SW0PMSYY
//                             - SW0PM001.SW0PMCYY
//                             - SW0PM002.SW0PMSYY
//                             - SW0PM002.SW0PMCYY
// *********************
Program SW0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SL3REC SL3REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0PW00 SW0PW00; // record
  SW0PW01 SW0PW01; // record
  SW0PW02 SW0PW02; // record
  SW0PW03 SW0PW03; // record
  SW0PW04 SW0PW04; // record
  SWAREC SWAREC; // record
  SWBREC SWBREC; // record
  SWOREC SWOREC; // record
  SWYREC SWYREC; // record
  SWZREC SWZREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL; // table
  use XTCTBL; // table
  use XTYTBL; // table
  use XWHTBL; // table
  use SW0PM.SW0PM001,  // forms
      SW0PM.SW0PM002, 
      SW0PM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0PM001 initial; /* M001 input/output*/
    set SW0PM002 initial; /* M002 input/output*/
    set XX0XM001 initial; /* xx0x input/output*/
    set ERRSQLCA empty;
    set SL3REC empty;
    set SWAREC empty;
    set SWBREC empty;
    set SWOREC empty;
    set SW0PW00 empty; /* Working storage*/
    set SW0PW01 empty; /* M001 display storage*/
    set SW0PW02 empty; /* M001 temporary storage*/
    set SW0PW03 empty; /* task array*/
    set SW0PW04 empty; /* m002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* temporary storage area*/
    set SWYREC empty; /* temporary storage area*/
    set SWZREC empty; /* temporary storage area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty;

    SW0PW00.XXXTSLEN = 742; /* temp storage length*/

    SW0PW00.SW0PWSWD = "1"; /* set map1 to display*/
    SW0PW00.CACHGFL = "N"; /* data changed*/
    SW0PW00.SW0PWSWR = "N"; /* Request for data switch*/
    SW0PW00.SW0PWUPD = "N"; /* no update switch*/
    SW0PW00.SW0PWINF = "N"; /* new inspection*/
    SW0PW00.SW0PWSWF = "Y"; /* format screen data switch*/
    SLWREC.XXXAPPID = COMMAREA.CACURRAP;
    SW0PW01.XXXUSRID = COMMAREA.CAUSERID;

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    if (SLWREC.XWHCD != " ")
      SW0PW01.XWHCD = SLWREC.XWHCD;
      if (SW0PW01.XWHCD in XWHTBL.XWHCD)
        SW0PW01.XGPCD = XWHTBL.XGPCD1[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0P001; /* converse the main process*/

    SW0P001: SW0P001();
     /* -----------------------------------------------------------*/
      /* flow to converse the main process used to display a map.*/
     /* -----------------------------------------------------------*/
    goto SW0P001;
  end // end main
end // end SW0P

// Inquire/maintain a table row
Function SW0P001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.SW0PWSWD == "1") /* map 1 was requested*/

    SW0P100(); /* display map 1*/

  else

    if (SW0PW00.SW0PWSWD == "2") /* map 1 was requested*/

      SW0P200(); /* display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "001"; /* Module identification*/
      SLWREC.SLWMSGNO = 10; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = SW0PW00.SW0PWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "SW0A"; /* TO application*/

      XSSL001(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end SW0P001

// main process
Function SW0P100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0P110(); /* Obtain the data to display*/

  SW0P120(); /* Format and display the map*/

  SW0P130(); /* Check attention identifier*/

  SW0P140(); /* Reset fields to normal intensity*/

  SW0P150(); /* Verify the entered data*/

  SW0P160(); /* Process valid input request*/

end // end SW0P100

// Obtain the data to display
Function SW0P110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  SW0P112(); /* get warehouse code & desc*/

  if (SW0PW00.SW0PWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* establish the temporary storage queue page length*/
   /* ------------------------------------------------------------*/

  SW0PW00.XXXTSLEN = 742; /* temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* get setup and change date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  SW0PW01.SW0PMSDT = XX0XW01.XX0XWDAT;
  SW0PW01.SW0PMCDT = XX0XW01.XX0XWDAT;

  SW0PW01.SW0PMSTM = XX0XW01.XX0XWTIM;
  SW0PW01.SW0PMCTM = XX0XW01.XX0XWTIM;

  SW0PW01.SW0PMSTA = "A"; /* default to active status*/

   /* ------------------------------------------------------------*/
   /* new inpection - obtain the next available inspection number*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.SW0PWINF == "Y") /* new inspection*/

    SW0PS01(); /* purge t/s*/
    SL3REC.XWHCD = SW0PW01.XWHCD; /* warehouse*/
    SW0PW01.SWAINSNB = 0; /* zero inspection number for now*/
    SW0PW00.SW0PWINF = "N"; /* no new inspection*/
    SW0PW01.SWAINSTP = " "; /* clear insp type*/
    SW0PW01.SWAINDSC = " "; /* clear insp desc*/
    SW0PW01.SW0PMEMM = 0; /* clear est min*/
    SW0PW01.SWAADMM = 0; /* clear adj min*/
    SW0PW01.SW0PMPIN = 0; /* clear percent*/
    if (SW0PW01.XWHCD in XWHTBL.XWHCD)
      SW0PW01.XGPCD = XWHTBL.XGPCD1[sysVar.arrayIndex];
    end
    SW0PW01.XTYCD = " "; /* clear type code*/
    SW0PW01.SW0PMXTA = 0; /* clear task code*/
    SW0PW01.XTCCD = " "; /* clear task category code*/
    SW0PW00.TA5TSQIX = 0; /* set total t/s pages to 0*/

    set SW0PW03 empty; /* initialize task array*/
    set SW0PW04 empty; /* initialize map 2 w/s*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SW0PW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* put task codes xvta0001 into temp storage*/
   /* ------------------------------------------------------------*/

  if (SW0PW01.XGPCD <= " " /* no gpc*/
   || SW0PW01.XTYCD <= " " /* no task type code*/
   || SW0PW01.SW0PMSTA <= " ") /* no status*/
    return;
  else
    SW0PS22(); /* get new temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* if no pages were formatted, indicate no data to display*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.TA5TSQIX == 0) /* no pages formatted*/
    SLWREC.XXXLOCID = "110"; /* module identification*/
    SLWREC.SLWMSGNO = 291; /* indicate no data to display*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0PW00.XXXTSPAG = 1; /* Desired page number*/
  SW0PW00.SW0PWSWR = "N"; /* Request for data switch*/
  SW0PW00.CACHGFL = "Y"; /* change flag*/

end // end SW0P110

// Format the display data
Function SW0P111()
   /* ------------------------------------------------------------*/
   /* move swyrec to w02 and write to temp storage*/
   /* ------------------------------------------------------------*/


  SW0PW02.SWYTACD[SW0PWIXM] = SWYREC.SWYTACD;
  SW0PW02.SWYTADSC[SW0PWIXM] = SWYREC.SWYTADSC;
  SW0PW02.SWYTAMM[SW0PWIXM] = SWYREC.SWYTAMM;
  SW0PW02.SWZTECD[SW0PWIXM] = SWYREC.SWZTECD;
  SW0PW02.XXXSTAT[SW0PWIXM] = SWYREC.XXXSTAT;
  SW0PW02.XTCCD[SW0PWIXM] = SWYREC.XTCCD;

  SW0PW00.SW0PWIXM = SW0PW00.SW0PWIXM + 1; /* increment load*/


end // end SW0P111

// Format the display data
Function SW0P112()
   /* ------------------------------------------------------------*/
   /* This process will validate the warehouse code passed in the*/
   /* stock work record and obtain the warehouse abbreviation.*/
   /* If the warehouse code is not valid, an error number is*/
   /* returned in EZEMNO and warehouse abbreviation is spaces.*/
   /* If the code is valid, EZEMNO remains unchanged.*/
   /* ------------------------------------------------------------*/

  if (SW0PW01.XWHABRV != " " /* Current warehouse code is valid and*/
   && SW0PW01.XWHCD == SW0PM001.XWHCD)
                                   /* warehouse code has not changed*/

    return; /* Return to caller*/

  end

  SLWREC.XWHCD = SW0PW01.XWHCD; /* Save current warehouse code*/
  SW0PW01.XWHABRV = " "; /* Clear warehouse abbreviation*/

  if (SW0PW01.XWHCD == "  ") /* Warehouse code not entered*/
    SLWREC.XXXLOCID = "112"; /* highlite warehouse code*/
    converseLib.validationFailed(11); /* Indicate warehouse code required*/
    set SW0PM001.XWHCD cursor, bold; /* highlite warehouse code*/
    return; /* Return to caller*/
  end

  if (SW0PW01.XWHCD in XWHTBL.XWHCD)
    SW0PW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    SLWREC.XXXLOCID = "112"; /* highlite warehouse code*/
    converseLib.validationFailed(11); /* Indicate invalid warehouse*/
    set SW0PM001.XWHCD cursor, bold; /* highlite warehouse code*/
    return; /* Return to caller*/

  end

  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/

    SW0PW01.XWHABRV = " "; /* Clear warehouse abbreviation*/
    converseLib.validationFailed(3); /* Indicate inactive warehouse*/
    set SW0PM001.XWHCD cursor, bold; /* highlite warehouse code*/
    SLWREC.XXXLOCID = "112"; /* highlite warehouse code*/
    return; /* Return to caller*/

  else
    SW0PW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end


end // end SW0P112

// Format and converse the map
Function SW0P120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.SW0PWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0PW00.SW0PWSWF == "Y") /* Map must be formatted*/

      SW0P121(); /* Format the data on the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* set attributes, before displaying*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.SW0PWUPD == "Y") /* updated switch*/
    SW0PS19(); /* protect fields*/
  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.TA5TSQIX > 0)
    set SW0PM001.SW0PMPAG skip, bold; /* white page title*/
    SW0PM001.XXXTSPAG = SW0PW00.XXXTSPAG; /* Current page*/
    set SW0PM001.SW0PMOF skip, bold; /* white of title*/
    SW0PM001.TA5TSQIX = SW0PW00.TA5TSQIX; /* max pages*/
  end

  SW0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0PM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0PM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0) /* Message to display*/
    if (SLWREC.SLWMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SLWREC.SLWMSGNO);
    end /* error message number*/
    SW0PM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/
    set SW0PM001 alarm; /* Indicate sound alarm*/
  end
  if (SW0PM001.XGPCD == " ")
    SW0PM001.XGPCD = COMMAREA.XGPCD;
  end

  converse SW0PM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;

  COMMAREA.CATOAP = SW0PM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0PM001.CAITEM; /* Application data*/

end // end SW0P120

// Format the display data
Function SW0P121()
   /* ------------------------------------------------------------*/
   /* init map sw0pm001*/
   /* ------------------------------------------------------------*/

  set SW0PM001 initial; /* m001 input/ouput area*/

  SW0PW00.SW0PWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* format the current date*/
   /* ------------------------------------------------------------*/

  SW0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/

   /* ------------------------------------------------------------*/
   /* Format sw0pm001 using passed data*/
   /* ------------------------------------------------------------*/

  SW0PM001.XWHCD = SW0PW01.XWHCD;
  SW0PM001.XWHABRV = SW0PW01.XWHABRV;
  SW0PM001.SWAINSNB = SW0PW01.SWAINSNB;
  SW0PM001.SWAINSTP = SW0PW01.SWAINSTP;
  SW0PM001.SW0PMEMM = SW0PW01.SW0PMEMM;
  SW0PM001.SWAADMM = SW0PW01.SWAADMM;
  if (SW0PW01.SW0PMSTA == " ") /* no status chosen*/
    SW0PM001.SW0PMSTA = "A"; /* default to active status*/
  else
    SW0PM001.SW0PMSTA = SW0PW01.SW0PMSTA;
  end
  if (SW0PW01.SW0PMPIN == 0) /* no percentage entered*/
    SW0PM001.SW0PMPIN = 100; /* default to 100 %*/
  else
    SW0PM001.SW0PMPIN = SW0PW01.SW0PMPIN;
  end
  SW0PM001.SWAINDSC = SW0PW01.SWAINDSC;
  SW0PM001.SW0PMSMM = SW0PW01.SW0PMSMM;
  SW0PM001.SW0PMSDD = SW0PW01.SW0PMSDD;
  SW0PM001.SW0PMSYY = SW0PW01.SW0PMSYY;
  SW0PM001.SW0PMSTM = SW0PW01.SW0PMSTM;
  SW0PM001.SW0PMCMM = SW0PW01.SW0PMCMM;
  SW0PM001.SW0PMCDD = SW0PW01.SW0PMCDD;
  SW0PM001.SW0PMCYY = SW0PW01.SW0PMCYY;
  SW0PM001.SW0PMCTM = SW0PW01.SW0PMCTM;
  SW0PM001.XXXUSRID = SW0PW01.XXXUSRID;
  SW0PM001.XGPCD = SW0PW01.XGPCD;
  SW0PM001.SW0PMXTA = SW0PW01.SW0PMXTA;
  SW0PM001.XTYCD = SW0PW01.XTYCD;
  SW0PM001.XTCCD = SW0PW01.XTCCD;

   /* ------------------------------------------------------------*/
   /* data has not been loaded yet*/
   /* ------------------------------------------------------------*/
  if (SW0PW00.CACHGFL == "N"
   || SW0PW00.TA5TSQIX == 0) /* no data formatted*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* obtain tasks from tempory storage*/
   /* ------------------------------------------------------------*/

  SW0PW00.SW0PWPIX = 1;

  SW0PS02(); /* read temporary storage*/

  while (SW0PW00.SW0PWPIX <= 10) /* task per page*/

    if (SW0PW00.SW0PWTMP == "Y") /* from map2*/
    end
    SW0PM001.SW0PMFNC[SW0PWPIX] = SW0PW02.SW0PMFNC[SW0PWPIX];
    SW0PM001.SWYTACD[SW0PWPIX] = SW0PW02.SWYTACD[SW0PWPIX];
    SW0PM001.SWYTADSC[SW0PWPIX] = SW0PW02.SWYTADSC[SW0PWPIX];
    SW0PM001.SW0PMCCD[SW0PWPIX] = SW0PW02.XTCCD[SW0PWPIX];
    SW0PM001.SWYTAMM[SW0PWPIX] = SW0PW02.SWYTAMM[SW0PWPIX];
    SW0PM001.SWZTECD[SW0PWPIX] = SW0PW02.SWZTECD[SW0PWPIX];
    SW0PM001.XXXSTAT[SW0PWPIX] = SW0PW02.XXXSTAT[SW0PWPIX];
    SW0PW00.SW0PWPCT = SW0PW02.SWAPCTIN[SW0PWPIX] * 100;
    if (SW0PW00.SW0PWPCT == 0 /* no task percent given*/
     && SW0PW00.SW0PWUPD == "N") /* inspection not yet updated*/
      SW0PM001.SWAPCTIN[SW0PWPIX] = SW0PW01.SW0PMPIN; /* default to hdr%*/
    else
      SW0PM001.SWAPCTIN[SW0PWPIX] = SW0PW00.SW0PWPCT;
    end

    SW0P122(); /* highlite insp task selected*/

    if (SW0PM001.SWYTACD[SW0PWPIX] != 0) /* data on line*/

      if (SW0PW00.SW0PWPIX == 1) /* position cursor*/
        set SW0PM001.SW0PMFNC[SW0PWPIX] cursor, normal; /* unprotect*/
        set SW0PM001.SWZTECD[SW0PWPIX] normal;
        set SW0PM001.XXXSTAT[SW0PWPIX] normal;
        set SW0PM001.SWAPCTIN[SW0PWPIX] normal;
      else
        set SW0PM001.SW0PMFNC[SW0PWPIX] normal; /* unprotect*/
        set SW0PM001.SWZTECD[SW0PWPIX] normal;
        set SW0PM001.XXXSTAT[SW0PWPIX] normal;
        set SW0PM001.SWAPCTIN[SW0PWPIX] normal;
      end

    end

    SW0PW00.SW0PWPIX = SW0PW00.SW0PWPIX + 1; /* increment load*/

  end



end // end SW0P121

// highlight inspection tasks
Function SW0P122()

   /* ------------------------------------------------------------*/
   /* add to task array*/
   /* ------------------------------------------------------------*/

  SW0PW03.SW0PW3IX = 1; /* set index to 1*/
  SW0PW00.SW0PWFND = "N"; /* not found switch*/

  while (SW0PW03.SW0PW3IX <= SW0PW03.SW0PW3MX /* total tasks in array*/
   && SW0PW00.SW0PWFND == "N")

    if (SW0PM001.SWYTACD[SW0PWPIX] == SW0PW03.SWYTACD[SW0PW3IX]) /* on array*/
      SW0PM001.SWZTECD[SW0PWPIX] = SW0PW03.SWZTECD[SW0PW3IX];
      SW0PM001.XXXSTAT[SW0PWPIX] = SW0PW03.XXXSTAT[SW0PW3IX];
      SW0PM001.SWAPCTIN[SW0PWPIX] = SW0PW03.SWAPCTIN[SW0PW3IX];
      set SW0PM001.SWYTACD[SW0PWPIX] skip, bold;
      SLWREC.XXXLOCID = "122"; /* location*/
      SW0PW00.SW0PWFND = "Y"; /* found*/

    else

      SW0PW03.SW0PW3IX = SW0PW03.SW0PW3IX + 1; /* increment load*/
    end

  end

end // end SW0P122

// Check attention identifier
Function SW0P130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    SW0PW00.SW0PWSWR = "N"; /* request for data*/
    SW0PW00.SW0PWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0PS01(); /* purge temp storage*/

      XSSL001(); /* Exit to another application*/

      converseLib.validationFailed(166); /* cant get to requested appl*/
      SW0PW00.SW0PWSWR = "Y"; /* request for data*/
      SW0PW00.SW0PWSWF = "N"; /* format data*/

      set SW0PM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "130"; /* Module identification*/
      converseLib.validationFailed(258); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0PM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* receipt inpection menu*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* main menu*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* Stock location menu*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "SW0F"; /* Inspection inquiry*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "SW0Q"; /* Inspection maintenance*/
    end

    SW0PS01(); /* purge temp storage*/

    XSSL001(); /* Exit to another application*/

    converseLib.validationFailed(166); /* cant get to requested appl*/
    SW0PW00.SW0PWSWR = "Y"; /* request for data*/
    SW0PW00.SW0PWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* pf7 was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf16  /* pf16 was not pressed*/
   && converseVar.eventKey not pf17  /* pf17 was not pressed*/
   && converseVar.eventKey not pf18) /* pf18 was not pressed*/

    SLWREC.XXXLOCID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0P130

// Reset highlighted fields
Function SW0P140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SW0PS17(); /* reset map*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XWHCD == "?" /* WAREHOUSE CODE*/
   || SW0PM001.XTYCD == "?" /* task type*/
   || SW0PM001.XGPCD == "?" /* gpc*/
   || SW0PM001.XTCCD == "?" /* task category*/
   || SW0PM001.SWAINSTP == "?") /* inspection type*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "140"; /* Module identification*/
      converseLib.validationFailed(264);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0PM001.XWHCD = SW0PW01.XWHCD; /* display orig warehouse*/

    else

      SW0PM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected*/
      SLWREC.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected co*/

    end

    set SW0PM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of GPC codes.*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XGPCD == "?") /* GPC list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  GPC"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0PM001.XGPCD = SW0PW01.XGPCD; /* Restore prior code*/
    else
      SW0PM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0PM001.XGPCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of task types*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XTYCD == "?") /* task type codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "TASK TYPE CODES "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXTY01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0PM001.XTYCD = SW0PW01.XTYCD; /* display orig warehouse*/

    else

      SW0PM001.XTYCD = XTYTBL.XTYCD[XX0XWPIX]; /* Selected*/

    end

    set SW0PM001.XTYCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of task category codes*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XTCCD == "?") /* task cat codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "TASK CATEGORY CODES "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXTC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0PM001.XTCCD = SW0PW01.XTCCD; /* display orig warehouse*/

    else

      SW0PM001.XTCCD = XTCTBL.XTCCD[XX0XWPIX]; /* Selected*/

    end

    set SW0PM001.XTCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of task types*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.SWAINSTP == "?") /* inspection type codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "INSPECTION TYPE CODES "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXTY01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0PM001.SWAINSTP = SW0PW01.SWAINSTP; /* display types*/

    else

      SW0PM001.SWAINSTP = XTYTBL.XTYCD[XX0XWPIX]; /* Selected*/

    end

    set SW0PM001.SWAINSTP cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before displa*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/
  converseLib.validationFailed(241); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0P140

// Verify the entered data
Function SW0P150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SW0PM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* check key fields for modification*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XWHCD != SW0PW01.XWHCD
   || SW0PM001.XGPCD != SW0PW01.XGPCD
   || SW0PM001.SW0PMXTA != SW0PW01.SW0PMXTA
   || SW0PM001.XTYCD != SW0PW01.XTYCD
   || SW0PM001.XTCCD != SW0PW01.XTCCD)
    SLWREC.SLWSKYSW = "Y";
  else
    SLWREC.SLWSKYSW = "N"; /* no changes*/
  end

  SW0P152(); /* validate fields*/

   /* ------------------------------------------------------------*/
   /* check pfkey*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf18
   || converseVar.eventKey is enter)
    if (converseVar.validationMsgNum == 0
     && SLWREC.SLWSKYSW == "N") /* no key changes*/
      if (SW0PM001.SW0PMPIN == 0)
        set SW0PM001.SW0PMPIN cursor, bold;
        SLWREC.XXXLOCID = "150"; /* Module identification*/
        converseLib.validationFailed(331); /* percentage must be > zero*/
      else
        SW0PW00.SW0PWSWR = "Y"; /* request for data*/
      end
    end
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      SW0P151(); /* validate pfkey request*/
    else
      if (converseVar.eventKey is pf17)
        if (converseVar.validationMsgNum == 0)
          SLWREC.SLWSKYSW = "N"; /* request for data*/
        end
        SW0P151(); /* validate pfkey request*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end SW0P150

// verify scroll request
Function SW0P151()
   /* ------------------------------------------------------------*/
   /* If key has changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW == "Y") /* key has changed*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(5); /* change the key on enter*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0PW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0PW00.XXXTSPAG >= SW0PW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

end // end SW0P151

// Verify header data
Function SW0P152()
   /* ------------------------------------------------------------*/
   /* verify tasks in line*/
   /* ------------------------------------------------------------*/

  SW0PW00.SW0PWPIX = 10;

  while (SW0PW00.SW0PWPIX >= 1)

    SW0P153();

    SW0PW00.SW0PWPIX = SW0PW00.SW0PWPIX - 1; /* increment load*/

  end

   /* ------------------------------------------------------------*/
   /* verify task selection criteria*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XGPCD <= " "  /* gpc*/
   && SW0PM001.SW0PMXTA <= 0 /* task*/
   && SW0PM001.XTYCD <= " "  /* type*/
   && SW0PM001.XTCCD <= " ") /* catg*/
    /* next sentence*/
  else
    SW0P156();
  end

   /* ------------------------------------------------------------*/
   /* check inspection percent*/
   /* must be: (1) no greater than 100%*/
       /* and  (2) no greater than the largest percent in array*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.SW0PMPIN != SW0PW01.SW0PMPIN) /* percent was changed*/

    if (SW0PM001.SW0PMPIN > 100) /* cant be more than 100%*/

      set SW0PM001.SW0PMPIN cursor, bold; /* highlight*/
      converseLib.validationFailed(11); /* invalid value*/

    end

  end

   /* ------------------------------------------------------------*/
   /* description required*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.SWAINDSC == " ") /* description not entered*/

    SLWREC.XXXLOCID = "152";
    set SW0PM001.SWAINDSC cursor, bold;
    converseLib.validationFailed(09); /* invalid value*/

  end

   /* ------------------------------------------------------------*/
   /* check header stat*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.SW0PMSTA == "A" /* active*/
   || SW0PM001.SW0PMSTA == "I") /* inactive*/
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "152";
    set SW0PM001.SW0PMSTA cursor, bold;
    converseLib.validationFailed(11); /* invalid status*/
  end

   /* ------------------------------------------------------------*/
   /* validate inspection type*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.SWAINSTP <= " ")
    SLWREC.XXXLOCID = "156";
    set SW0PM001.SWAINSTP cursor, bold;
    converseLib.validationFailed(11); /* invalid value*/
  else
    if (SW0PM001.SWAINSTP in XTYTBL.XTYCD)
      SW0PW01.SWAINSTP = XTYTBL.XTYCD[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0)
      SLWREC.XXXLOCID = "152";
      set SW0PM001.SWAINSTP cursor, bold;
      converseLib.validationFailed(11); /* invalid value*/
    else
      if (XTYTBL.XXXSTAT == "A")
        /* NEXT SENTENCE*/
      else
        SLWREC.XXXLOCID = "152";
        set SW0PM001.SWAINSTP cursor, bold;
        converseLib.validationFailed(10); /* inactive status*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XWHCD > " ")
    if (SW0PM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.XXXLOCID = "152";
        set SW0PM001.XWHCD cursor, bold;
        converseLib.validationFailed(266); /* status is inactive*/
      end
    else
      SLWREC.XXXLOCID = "152";
      set SW0PM001.XWHCD cursor, bold;
      converseLib.validationFailed(266); /* invalid warehouse*/
    end
  else
    SLWREC.XXXLOCID = "152";
    set SW0PM001.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end SW0P152

// verify tasks selected
Function SW0P153()
   /* ----------------------------------------------------------*/
   /* open fields if non-blank line*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.SWYTACD[SW0PWPIX] != 0)

    set SW0PM001.SW0PMFNC[SW0PWPIX] normal;
    set SW0PM001.SWZTECD[SW0PWPIX] normal;
    set SW0PM001.XXXSTAT[SW0PWPIX] normal;
    set SW0PM001.SWAPCTIN[SW0PWPIX] normal;

  else
    return;
  end

   /* ------------------------------------------------------------*/
   /* selection can be ' ' or 's'*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.SW0PMFNC[SW0PWPIX] == "S"
   || SW0PM001.SW0PMFNC[SW0PWPIX] == " ")
    if (SW0PM001.SW0PMFNC[SW0PWPIX] == "S")
      if (converseVar.eventKey is enter)
                                   /* enter pressed instead of PF17 or PF18*/
        SLWREC.XXXLOCID = "153"; /* module id*/
        set SW0PM001.SWYTACD[SW0PWPIX] skip, bold;
        set SW0PM001.SW0PMFNC[SW0PWPIX] cursor, bold;
             /* MOVE 248 TO EZEMNO        ;update required*/
        SLWREC.SLWMSGNO = 248; /* update required*/
      end
      if (SW0PW03.SW0PW3MX >= 20)
        SLWREC.XXXLOCID = "153"; /* module id*/
        set SW0PM001.SWYTACD[SW0PWPIX] skip, bold;
        set SW0PM001.SW0PMFNC[SW0PWPIX] cursor, bold;
        converseLib.validationFailed(301); /* max 20 tasks*/
      end
    end
  else
    SLWREC.XXXLOCID = "153";
    set SW0PM001.SW0PMFNC[SW0PWPIX] cursor, bold; /* highlight func*/
    converseLib.validationFailed(290); /* 's'election*/
  end

   /* ------------------------------------------------------------*/
   /* inspection %ins cannot be greater than 100%*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.SWAPCTIN[SW0PWPIX] > 100)
    set SW0PM001.SW0PMPIN bold;
    set SW0PM001.SWAPCTIN[SW0PWPIX] cursor, bold; /* highlight func*/
    SLWREC.XXXLOCID = "153"; /* module identifier*/
    converseLib.validationFailed(11); /* invalid value*/
  end

   /* ------------------------------------------------------------*/
   /* status can only be 'a' or 'i'*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XXXSTAT[SW0PWPIX] == "A"
   || SW0PM001.XXXSTAT[SW0PWPIX] == "I")
    /* next sentence*/
  else
    SLWREC.XXXLOCID = "153";
    set SW0PM001.XXXSTAT[SW0PWPIX] cursor, bold;
    converseLib.validationFailed(9); /* required field*/
  end

   /* -------------------------------------------------------*/
   /* task error code*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.SWZTECD[SW0PWPIX] == 0) /* no error code entered*/

    return;

  end
  SWZREC.SWZTECD = SW0PM001.SWZTECD[SW0PWPIX];

  SW0PS08(); /* select task error table*/

  if (SQLCA.VAGen_SQLCODE == 100)
    SLWREC.XXXLOCID = "153";
    set SW0PM001.SWZTECD[SW0PWPIX] cursor, bold;
    converseLib.validationFailed(279); /* invalid task error*/
    return;
  end
  if (SWZREC.XTCCD != SW0PW02.XTCCD[SW0PWPIX]) /* category codes dont match*/

    SLWREC.XXXLOCID = "153";
    set SW0PM001.SWZTECD[SW0PWPIX] cursor, bold;
    converseLib.validationFailed(330); /* non-matching category codes*/

  end


end // end SW0P153

// verify selection criteria
Function SW0P156()
  if (converseVar.eventKey is pf17) /* gpc is only required for m002*/
    /* next sentence;*/
  else
    /* ------------------------------------------------------------*/
     /* task cat cd not reqd, set to '*' when blank*/
    /* ------------------------------------------------------------*/

    if (SW0PM001.XTCCD <= " ") /* task cat blank*/
      /* next sentence;*/
    else
      if (SW0PM001.XTCCD in XTCTBL.XTCCD)
        SW0PW01.XTCCD = XTCTBL.XTCCD[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SLWREC.XXXLOCID = "156";
        set SW0PM001.XTCCD cursor, bold;
        converseLib.validationFailed(11); /* invalid value*/
      end
    end

    /* ------------------------------------------------------------*/
     /* task type code required*/
    /* ------------------------------------------------------------*/

    if (SW0PM001.XTYCD <= " ")
      SLWREC.XXXLOCID = "156";
      set SW0PM001.XTYCD cursor, bold;
      converseLib.validationFailed(9); /* invalid value*/
    else
      if (SW0PM001.XTYCD in XTYTBL.XTYCD)
        SW0PW01.XTYCD = XTYTBL.XTYCD[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SLWREC.XXXLOCID = "156";
        set SW0PM001.XTYCD cursor, bold;
        converseLib.validationFailed(11); /* invalid value*/
      else
        if (XTYTBL.XXXSTAT == "A")
          /* NEXT SENTENCE*/
        else
          SLWREC.XXXLOCID = "156";
          set SW0PM001.XTYCD cursor, bold;
          converseLib.validationFailed(10); /* inactive status*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* task code not entered, set to -1 for all tasks if blank*/
    /* ------------------------------------------------------------*/

    if (SW0PM001.SW0PMXTA <= 0) /* task code blank*/
      /* next sentence;*/
    else

      set SWYREC empty; /* initalize swyrec*/
      SWYREC.XGPCD = SW0PM001.XGPCD;
      SWYREC.SWYTACD = SW0PM001.SW0PMXTA;

      SW0PS14(); /* select task code table*/

      if (SQLCA.VAGen_SQLCODE == 100)
        SLWREC.XXXLOCID = "156";
        set SW0PM001.SW0PMXTA cursor, bold;
        converseLib.validationFailed(282); /* invalid task code*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* gpc is required*/
   /* ------------------------------------------------------------*/

  if (SW0PM001.XGPCD <= " ")
    SLWREC.XXXLOCID = "156";
    set SW0PM001.XGPCD cursor, bold;
    converseLib.validationFailed(9); /* invalid value*/
  else
    if (SW0PM001.XGPCD in XGPTBL.XGPCD)

       /* next sentence*/

    else
      SLWREC.XXXLOCID = "156";
      set SW0PM001.XGPCD cursor, bold;
      converseLib.validationFailed(11); /* invalid value*/
    end
  end

end // end SW0P156

// update tables from m001
Function SW0P160()

  SW0PW00.SW0PWSWF = "Y"; /* format map*/
  COMMAREA.XWHCD = SW0PM001.XWHCD; /* warehouse*/

  if (converseVar.eventKey is enter)
    if (SW0PW00.SW0PWUPD == "Y") /* data updated*/
      SLWREC.XXXLOCID = "160"; /* location*/
      converseLib.validationFailed(79); /* already updated*/
    else
      if (SLWREC.SLWSKYSW == "Y")

        SW0PW00.SW0PWSWR = "Y"; /* request for data switch*/
        SW0PS09();
      else

        SW0PS09(); /* update array*/
        SLWREC.SLWMSGNO = 273; /* use pf18 to update*/
        SLWREC.XXXLOCID = "160"; /* module id*/
        SW0PW00.SW0PWSWR = "Y"; /* request for data*/
      end
    end
    SW0P162(); /* format w01*/
    return; /* exit to display map*/
  end

  SW0P162(); /* format w01*/

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    SW0PS09(); /* save selected tasks in array*/
    SW0PW00.XXXTSPAG = SW0PW00.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    SW0PS09(); /* save selected tasks in array*/
    SW0PW00.XXXTSPAG = SW0PW00.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* new inspection*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* new inspection*/
    SW0PS17(); /* unprotect fields*/
    SW0PW00.SW0PWUPD = "N"; /* no update*/
    SW0PW00.SW0PWSWR = "Y"; /* request for data*/
    SW0PW00.SW0PWSWF = "Y"; /* format data*/
    SW0PW00.SW0PWINF = "Y"; /* new inspection flag*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* display task entry*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* display next map*/
    SW0PW00.SW0PWSWD = "2"; /* m002*/
    SW0PW00.SW0PWTMP = "Y"; /* going to m002*/
    SW0PW00.SW0PWSWF = "Y"; /* format data*/
    SW0PW00.SW0PWSWR = "N"; /* request data*/
    if (SW0PW00.SW0PWUPD == "N") /* no update*/
      SW0PS09(); /* save selected tasks in array*/
    end
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* add new inspection header*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* add new task*/

    if (SW0PW00.SW0PWUPD == "Y") /* data updated*/
      SLWREC.XXXLOCID = "160"; /* location*/
      converseLib.validationFailed(79); /* already updated*/
      return;
    else
      SW0PS09(); /* add tasks to array*/

      XX0XS01(); /* obtain date and time*/

      SW0PS03(); /* select on vlsct101 (next insp #)*/
      SW0PW01.SWAINSNB = SL3REC.SL3NXISN; /* store insp number*/
      SW0PM001.SWAINSNB = SL3REC.SL3NXISN; /* move insp# to map*/
      SW0PS11(); /* add new inspection header*/

      SW0PW03.SW0PW3IX = 1; /* set index to 1*/
      while (SW0PW03.SW0PW3IX <= SW0PW03.SW0PW3MX) /* process array*/

        SW0PS12(); /* add new inspection task*/

        SW0PW03.SW0PW3IX = SW0PW03.SW0PW3IX + 1; /* increment load*/

      end

      SLWREC.XXXLOCID = "160"; /* location*/
      converseLib.validationFailed(306); /* table update was successful*/
      SW0PW00.SW0PWUPD = "Y"; /* update switch*/
    end

    /* ------------------------------------------------------------*/
     /* commit all changes to protected resources*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/


  end

end // end SW0P160

// Format header data to w01
Function SW0P162()

   /* ------------------------------------------------------------*/
   /* Format sw0pw01 using map data*/
   /* ------------------------------------------------------------*/

  SW0PW01.XWHCD = SW0PM001.XWHCD;
  SW0PW01.SWAINSNB = SW0PM001.SWAINSNB;
  SW0PW01.SWAINSTP = SW0PM001.SWAINSTP;
  SW0PW01.SWAINDSC = SW0PM001.SWAINDSC;
  SW0PW01.SW0PMEMM = SW0PM001.SW0PMEMM;
  SW0PW01.SWAADMM = SW0PM001.SWAADMM;
  SW0PW01.SW0PMSTA = SW0PM001.SW0PMSTA;
  SW0PW01.SW0PMPIN = SW0PM001.SW0PMPIN;
  SW0PW01.SWAINDSC = SW0PM001.SWAINDSC;
  SW0PW01.SW0PMSMM = SW0PM001.SW0PMSMM;
  SW0PW01.SW0PMSDD = SW0PM001.SW0PMSDD;
  SW0PW01.SW0PMSYY = SW0PM001.SW0PMSYY;
  SW0PW01.SW0PMSTM = SW0PM001.SW0PMSTM;
  SW0PW01.SW0PMCMM = SW0PM001.SW0PMCMM;
  SW0PW01.SW0PMCDD = SW0PM001.SW0PMCDD;
  SW0PW01.SW0PMCYY = SW0PM001.SW0PMCYY;
  SW0PW01.SW0PMCTM = SW0PM001.SW0PMCTM;
  SW0PW01.XXXUSRID = SW0PM001.XXXUSRID;
  SW0PW01.XGPCD = SW0PM001.XGPCD;
  SW0PW01.SW0PMXTA = SW0PM001.SW0PMXTA;
  SW0PW01.XTYCD = SW0PM001.XTYCD;
  SW0PW01.XTCCD = SW0PM001.XTCCD;

end // end SW0P162

// main process
Function SW0P200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0P210(); /* Obtain the data to display*/

  SW0P220(); /* Format and display the map*/

  SW0P230(); /* Check attention identifier*/

  SW0P240(); /* Reset fields to normal*/

  SW0P250(); /* Verify the entered data*/

  SW0P260(); /* Process valid input reqt*/

end // end SW0P200

// Obtain the data to display
Function SW0P210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  SW0P212(); /* get warehouse code & desc*/

  if (SW0PW00.SW0PWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* establish the temporary storage queue page length*/
   /* ------------------------------------------------------------*/

  SW0PW02.XXXTSLEN = SW0PW00.XXXTSLEN; /* t/s page length*/

  SW0PS01(); /* purge temp storage*/

   /* ------------------------------------------------------------*/
   /* get setup and change date and time*/
   /* ------------------------------------------------------------*/

  SW0PW01.SW0PMSTA = "A";

  XX0XS01();

  SW0PW01.SW0PMSDT = XX0XW01.XX0XWDAT;
  SW0PW01.SW0PMCDT = XX0XW01.XX0XWDAT;

  SW0PW01.SW0PMSTM = XX0XW01.XX0XWTIM;
  SW0PW01.SW0PMCTM = XX0XW01.XX0XWTIM;

   /* ------------------------------------------------------------*/
   /* new inpection - obtain the next available inspection number*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.SW0PWINF == "Y") /* new inspection*/
    SL3REC.XWHCD = SW0PW01.XWHCD; /* warehouse*/
    SW0PW01.SWAINSNB = 0; /* zero insp number for now*/
    SW0PW00.SW0PWINF = "N"; /* no new inspection*/
    SW0PW01.SWAINSTP = " ";
    SW0PW01.SWAINDSC = " ";
    SW0PW01.SW0PMEMM = 0;
    SW0PW01.SWAADMM = 0;
    SW0PW01.SW0PMPIN = 0;
    if (SW0PW01.XWHCD in XWHTBL.XWHCD)
      SW0PW01.XGPCD = XWHTBL.XGPCD1[sysVar.arrayIndex];
    end
    SW0PW01.XTYCD = " ";
    SW0PW01.SW0PMXTA = 0;
    SW0PW01.XTCCD = " ";
    SW0PW00.TA5TSQIX = 0; /* zero t/s page count*/

    set SW0PW03 empty; /* initialize task array*/
    set SW0PW04 empty; /* initialize map 2 w/s*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0PW00.XXXTSPAG = 1; /* Desired page number*/
  SW0PW00.SW0PWSWR = "N"; /* Request for data switch*/
  SW0PW00.CACHGFL = "Y"; /* change flag*/

end // end SW0P210

// Format the display data
Function SW0P212()
   /* ------------------------------------------------------------*/
   /* This process will validate the warehouse code passed in the*/
   /* stock work record and obtain the warehouse abbreviation.*/
   /* If the warehouse code is not valid, an error number is*/
   /* returned in EZEMNO and warehouse abbreviation is spaces.*/
   /* If the code is valid, EZEMNO remains unchanged.*/
   /* ------------------------------------------------------------*/

  if (SW0PW01.XWHABRV != " " /* Current warehouse code is valid and*/
   && SW0PW01.XWHCD == SW0PM002.XWHCD)
                                   /* warehouse code has not changed*/

    return; /* Return to caller*/

  end

  SLWREC.XWHCD = SW0PW01.XWHCD; /* Save current warehouse code*/
  SW0PW01.XWHABRV = " "; /* Clear warehouse abbreviation*/

  if (SW0PW01.XWHCD == "  ") /* Warehouse code not entered*/
    SLWREC.XXXLOCID = "212"; /* highlite warehouse code*/
    converseLib.validationFailed(11); /* Indicate warehouse code required*/
    set SW0PM002.XWHCD cursor, bold; /* highlite warehouse code*/
    return; /* Return to caller*/
  end

  if (SW0PW01.XWHCD in XWHTBL.XWHCD)
    SW0PW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    SLWREC.XXXLOCID = "212"; /* highlite warehouse code*/
    converseLib.validationFailed(11); /* Indicate invalid warehouse*/
    set SW0PM002.XWHCD cursor, bold; /* highlite warehouse code*/
    return; /* Return to caller*/

  end

  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/

    SW0PW01.XWHABRV = " "; /* Clear warehouse abbreviation*/
    converseLib.validationFailed(3); /* Indicate inactive warehouse*/
    set SW0PM002.XWHCD cursor, bold; /* highlite warehouse code*/
    SLWREC.XXXLOCID = "212"; /* highlite warehouse code*/
    return; /* Return to caller*/

  else
    SW0PW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end


end // end SW0P212

// Format and converse the map
Function SW0P220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.SW0PWSWR == "Y"           /* Obtain data failed*/
   || converseVar.validationMsgNum == 0 /* or no error found*/
   || SW0PW00.SW0PWENT == "Y")          /* or enter pressed*/

    if (SW0PW00.SW0PWSWF == "Y") /* Map must be formatted*/

      SW0P221(); /* Format the data on the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* initialize the task array*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.SW0PWUPD == "Y") /* updated switch*/
    SW0PS20(); /* protect fields*/
  end

  SW0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0PM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0PM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0) /* Message to display*/
    if (SLWREC.SLWMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SLWREC.SLWMSGNO);
    end /* error message number*/
    SW0PM002.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/
    set SW0PM002 alarm; /* Indicate sound alarm*/
  end
  if (SW0PM002.XGPCD == " ")
    SW0PM002.XGPCD = COMMAREA.XGPCD;
  end

  converse SW0PM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;

  COMMAREA.CATOAP = SW0PM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0PM002.CAITEM; /* Application data*/

end // end SW0P220

// Format the display data
Function SW0P221()

   /* ------------------------------------------------------------*/
   /* init map sw0pm002*/
   /* ------------------------------------------------------------*/

  set SW0PM002 initial; /* m002 input/ouput area*/

  SW0PW00.SW0PWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* format the current date*/
   /* ------------------------------------------------------------*/

  SW0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/

   /* ------------------------------------------------------------*/
   /* Format sw0pm002 using passed data*/
   /* ------------------------------------------------------------*/

  SW0PM002.XWHCD = SW0PW01.XWHCD;
  SW0PM002.XWHABRV = SW0PW01.XWHABRV;
  SW0PM002.SWAINSNB = SW0PW01.SWAINSNB;
  SW0PM002.SWAINSTP = SW0PW01.SWAINSTP;
  SW0PM002.SW0PMEMM = SW0PW01.SW0PMEMM;
  SW0PM002.SWAADMM = SW0PW01.SWAADMM;
  SW0PM002.SW0PMSTA = SW0PW01.SW0PMSTA;
  SW0PM002.SW0PMPIN = SW0PW01.SW0PMPIN;
  SW0PM002.SWAINDSC = SW0PW01.SWAINDSC;
  SW0PM002.SW0PMSMM = SW0PW01.SW0PMSMM;
  SW0PM002.SW0PMSDD = SW0PW01.SW0PMSDD;
  SW0PM002.SW0PMSYY = SW0PW01.SW0PMSYY;
  SW0PM002.SW0PMSTM = SW0PW01.SW0PMSTM;
  SW0PM002.SW0PMCMM = SW0PW01.SW0PMCMM;
  SW0PM002.SW0PMCDD = SW0PW01.SW0PMCDD;
  SW0PM002.SW0PMCYY = SW0PW01.SW0PMCYY;
  SW0PM002.SW0PMCTM = SW0PW01.SW0PMCTM;
  SW0PM002.XXXUSRID = SW0PW01.XXXUSRID;
  SW0PM002.XGPCD = SW0PW01.XGPCD;



   /* ------------------------------------------------------------*/
   /* move task array (w03) to working storage (w04)*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.SW0PWTMP == "Y" /* from m001*/
   || SW0PW00.SW0PWUPD == "Y") /* updated, redisplay*/
    SW0PS13(); /* move w03 to w04*/
    SW0PW00.SW0PWTMP = "N"; /* reset map switch*/
  end

  if (SW0PW00.SW0PWENT == "Y") /* enter pressed*/
    SW0PW00.SW0PWENT = "N"; /* enter flag*/
  end


   /* ------------------------------------------------------------*/
   /* obtain tasks from w04*/
   /* ------------------------------------------------------------*/

  SW0PW00.SW0PWPIX = 1;

  while (SW0PW00.SW0PWPIX <= SW0PW04.SW0PW4MX) /* process temp*/

    SW0PM002.SWYTACD[SW0PWPIX] = SW0PW04.SWYTACD[SW0PWPIX];
    SW0PM002.XTCCD[SW0PWPIX] = SW0PW04.XTCCD[SW0PWPIX];
    SW0PW01.SW0PWECN = SW0PW04.SWZTECD[SW0PWPIX];
    if (SW0PW01.SW0PWEC1 == "0")
      SW0PW01.SW0PWEC1 = " "; /* blank fill*/
      if (SW0PW01.SW0PWEC2 == "0")
        SW0PW01.SW0PWEC2 = " "; /* blank fill*/
        if (SW0PW01.SW0PWEC3 == "0")
          SW0PW01.SW0PWEC3 = " "; /* blank fill*/
          if (SW0PW01.SW0PWEC4 == "0")
            SW0PW01.SW0PWEC4 = " "; /* blank fill*/
          end
        end
      end
    end
    SW0PM002.SW0PMTEC[SW0PWPIX] = SW0PW01.SW0PWECC;
    SW0PM002.SWYTAMM[SW0PWPIX] = SW0PW04.SWYTAMM[SW0PWPIX];
    if (SW0PW04.XXXSTAT[SW0PWPIX] == " ") /* no status selected*/
      SW0PM002.XXXSTAT[SW0PWPIX] = SW0PW01.SW0PMSTA;
    else
      SW0PM002.XXXSTAT[SW0PWPIX] = SW0PW04.XXXSTAT[SW0PWPIX];
    end
    if (SW0PW04.SWAPCTIN[SW0PWPIX] == 0) /* no insp %*/
      SW0PM002.SWAPCTIN[SW0PWPIX] = SW0PW01.SW0PMPIN;
    else
      SW0PM002.SWAPCTIN[SW0PWPIX] = SW0PW04.SWAPCTIN[SW0PWPIX];
    end

    SW0P222(); /* highlight dupl inspection task*/

    SW0PW00.SW0PWPIX = SW0PW00.SW0PWPIX + 1; /* increment load*/

  end



end // end SW0P221

// highlight dupl insp tasks
Function SW0P222()
  if (SW0PW00.SW0PWPIX < 20) /* can't check 21st line*/
    SW0PW04.SW0PW4IX = SW0PW00.SW0PWPIX + 1; /* next task in array*/
    SW0PW00.SW0PWFND = "N"; /* task in array switch*/

    while (SW0PW04.SW0PW4IX <= 20
     && SW0PW00.SW0PWFND == "N") /* task not found*/

      if (SW0PW04.SWYTACD[SW0PWPIX] <= 0) /* bypass*/
        /* next sentence*/
      else
        if (SW0PW04.SWYTACD[SW0PWPIX] == SW0PW04.SWYTACD[SW0PW4IX])
          set SW0PM002.SWYTACD[SW0PWPIX] bold;
          SW0PW00.SW0PWFND = "Y"; /* task found*/
        end
      end

      SW0PW04.SW0PW4IX = SW0PW04.SW0PW4IX + 1; /* increment task array*/

    end
  end

end // end SW0P222

// Check attention identifier
Function SW0P230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    SW0PW00.SW0PWSWR = "N"; /* request for data*/
    SW0PW00.SW0PWSWF = "Y"; /* format screen m002*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSL001(); /* Exit to another application*/

      converseLib.validationFailed(166); /* cant get to requested appl*/
      SW0PW00.SW0PWSWR = "Y"; /* request for data*/
      SW0PW00.SW0PWSWF = "Y"; /* format screen m002*/

      set SW0PM002.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(258); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0PM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* receipt inpection menu*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* main menu*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* Stock location menu*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "SW0F"; /* Inspection inquiry*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "SW0Q"; /* Inspection maintenance*/
    end

    XSSL001(); /* Exit to another application*/

    converseLib.validationFailed(166); /* cant get to requested appl*/
    SW0PW00.SW0PWSWR = "Y"; /* request for data*/
    SW0PW00.SW0PWSWF = "Y"; /* format screen m002*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* pf16 was not pressed*/
   && converseVar.eventKey not pf16  /* pf16 was not pressed*/
   && converseVar.eventKey not pf17  /* pf17 was not pressed*/
   && converseVar.eventKey not pf18) /* pf18 was not pressed*/

    SLWREC.XXXLOCID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0P230

// Reset highlighted fields
Function SW0P240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0PM002.XWHCD initialAttributes; /* WHSE CODE*/
  set SW0PM002.SWAINSNB initialAttributes; /* Inspection number*/
  set SW0PM002.SWAINSTP initialAttributes; /* Inspection type*/
  set SW0PM002.SW0PMEMM initialAttributes; /* estimated min/100 units*/
  set SW0PM002.SWAADMM initialAttributes; /* adjusted work month*/
  set SW0PM002.SW0PMSTA initialAttributes; /* Inspection status*/
  set SW0PM002.SW0PMPIN initialAttributes; /* pct of unit inspected*/
  set SW0PM002.SWAINDSC initialAttributes; /* inspection description*/
  set SW0PM002.XGPCD initialAttributes; /* gpc*/
  set SW0PM002.CATOAP initialAttributes; /* option*/
  set SW0PM002.CAITEM initialAttributes; /* item*/

   /* ------------------------------------------------------------*/
   /* reset the task list*/
   /* ------------------------------------------------------------*/

  SW0PW00.SW0PWPIX = 1;

  while (SW0PW00.SW0PWPIX <= 20)

    set SW0PM002.SWYTACD[SW0PWPIX] initialAttributes; /* select*/
    set SW0PM002.SW0PMTEC[SW0PWPIX] initialAttributes; /* task error code*/
    set SW0PM002.XXXSTAT[SW0PWPIX] initialAttributes; /* task status*/
    set SW0PM002.SWAPCTIN[SW0PWPIX] initialAttributes; /* task inspection*/

    SW0PW00.SW0PWPIX = SW0PW00.SW0PWPIX + 1; /* increment line*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of error codes.*/
   /* ------------------------------------------------------------*/

  SW0PW00.SW0PWPOP = "N";
  SW0PW00.SW0PWPIX = 1;

  while (SW0PW00.SW0PWPIX <= 20)

    SW0PW01.SW0PWECC = SW0PM002.SW0PMTEC[SW0PWPIX]; /* char err*/
    if (SW0PW01.SW0PWEC1 == "?" /* error code list requested*/
     || SW0PW01.SW0PWEC2 == "?" /* error code list requested*/
     || SW0PW01.SW0PWEC3 == "?" /* error code list requested*/
     || SW0PW01.SW0PWEC4 == "?") /* error code list requested*/
      SW0PW00.SW0PWPOP = "Y"; /* pop-up window*/
    end
    SW0PW00.SW0PWPIX = SW0PW00.SW0PWPIX + 1; /* increment index*/

  end

  if (SW0PW00.SW0PWPOP == "Y") /* pop-up window requested*/
    if (converseVar.eventKey is enter) /* ENTER pressed*/
      SW0P241(); /* process error code request*/
    else /* ENTER was not pressed*/
      SLWREC.XXXLOCID = "240"; /* Module identification*/
      converseLib.validationFailed(264);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/
    end
  else
    return; /* return*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before displa*/

  SLWREC.XXXLOCID = "240"; /* Module identification*/
  converseLib.validationFailed(241); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/



end // end SW0P240

// process for error code table
Function SW0P241()
   /* ============================================================*/
   /* process: if screen error code has ?, list choices and select*/
          /* one, otherwise it defaults to previous screen*/
          /* selection.*/
   /* ============================================================*/

  COMMAREA.CATOAP = "SW0T"; /* to program*/
  COMMAREA.CAFROMAP = "SW0P"; /* from program*/

  XSSL001(); /* transfer to requested appl.*/


end // end SW0P241

// Verify the entered data
Function SW0P250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "250"; /* Module identification*/
    set SW0PM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* check key fields for modification*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.XWHCD != SW0PW01.XWHCD
   || SW0PM002.XGPCD != SW0PW01.XGPCD)
    SLWREC.SLWSKYSW = "Y";
  else
    SLWREC.SLWSKYSW = "N";
  end


  SW0P252(); /* validate key fields*/

   /* ------------------------------------------------------------*/
   /* check pfkey*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf18
   || converseVar.eventKey is enter)
    if (converseVar.validationMsgNum == 0
     && SLWREC.SLWSKYSW == "N") /* no key changes*/
      if (SW0PM002.SW0PMPIN == 0) /* hdr % is zero*/
        set SW0PM002.SW0PMPIN cursor, bold;
        SLWREC.XXXLOCID = "250"; /* Module identification*/
        converseLib.validationFailed(331); /* cant be zero*/
      else
        SW0PW00.SW0PWSWR = "Y"; /* request for data*/
      end
    end
  else

  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end SW0P250

// Verify the header Data
Function SW0P252()
   /* ------------------------------------------------------------*/
   /* verify tasks in line*/
   /* ------------------------------------------------------------*/

  SW0PW00.SW0PWPIX = 20;

  while (SW0PW00.SW0PWPIX >= 1)

    SW0P253();

    SW0PW00.SW0PWPIX = SW0PW00.SW0PWPIX - 1; /* decrement load*/

  end

   /* ------------------------------------------------------------*/
   /* gpc is required*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.XGPCD <= " ")
    SLWREC.XXXLOCID = "252";
    set SW0PM002.XGPCD cursor, bold;
    converseLib.validationFailed(9); /* invalid value*/
  else
    if (SW0PM002.XGPCD in XGPTBL.XGPCD)
      SW0PW01.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0)
      SLWREC.XXXLOCID = "252";
      set SW0PM002.XGPCD cursor, bold;
      converseLib.validationFailed(11); /* invalid value*/
    end
  end

   /* ------------------------------------------------------------*/
   /* inspection percent cant excede 100*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.SW0PMPIN > 100)

    SLWREC.XXXLOCID = "252";
    set SW0PM002.SW0PMPIN cursor, bold;
    converseLib.validationFailed(11); /* invalid value*/

  end

  if (SW0PM002.SW0PMPIN > 0) /* if not zero*/

    SW0P254(); /* routine to validate value of percent*/

  end

   /* ------------------------------------------------------------*/
   /* description required*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.SWAINDSC == " ") /* description not entered*/

    SLWREC.XXXLOCID = "252";
    set SW0PM002.SWAINDSC cursor, bold;
    converseLib.validationFailed(09); /* invalid value*/

  end

   /* ------------------------------------------------------------*/
   /* check header stat*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.SW0PMSTA == "A" /* active*/
   || SW0PM002.SW0PMSTA == "I") /* inactive*/
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "252";
    set SW0PM002.SW0PMSTA cursor, bold;
    converseLib.validationFailed(11); /* invalid status*/
  end

   /* ------------------------------------------------------------*/
   /* validate inspection type*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.SWAINSTP <= " ")
    SLWREC.XXXLOCID = "252";
    set SW0PM002.SWAINSTP cursor, bold;
    converseLib.validationFailed(11); /* invalid value*/
  else
    if (SW0PM002.SWAINSTP in XTYTBL.XTYCD)
      SW0PW01.SWAINSTP = XTYTBL.XTYCD[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0)
      SLWREC.XXXLOCID = "252";
      set SW0PM002.SWAINSTP cursor, bold;
      converseLib.validationFailed(11); /* invalid value*/
    else
      if (XTYTBL.XXXSTAT == "A")
        /* NEXT SENTENCE*/
      else
        SLWREC.XXXLOCID = "252";
        set SW0PM002.SWAINSTP cursor, bold;
        converseLib.validationFailed(10); /* inactive status*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.XWHCD > " ")
    if (SW0PM002.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (SW0PM002.XWHCD != SW0PW01.XWHCD)
          SW0PW00.SW0PWINF = "Y"; /* new inspection number*/
        end
      else
        SLWREC.XXXLOCID = "252";
        set SW0PM002.XWHCD cursor, bold;
        converseLib.validationFailed(266); /* status is inactive*/
      end
    else
      SLWREC.XXXLOCID = "252";
      set SW0PM002.XWHCD cursor, bold;
      converseLib.validationFailed(266); /* invalid warehouse*/
    end
  else
    SLWREC.XXXLOCID = "252";
    set SW0PM002.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end


end // end SW0P252

// Format the display data
Function SW0P253()
   /* ------------------------------------------------------------*/
   /* edit task code, error code, status, %ins if entered*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.SWYTACD[SW0PWPIX] <= 0    /* task code not entered*/
   && SW0PM002.SW0PMTEC[SW0PWPIX] <= " " /* error code not entered*/
   && SW0PM002.XXXSTAT[SW0PWPIX] <= " "  /* status not entered*/
   && SW0PM002.SWAPCTIN[SW0PWPIX] <= 0)  /* percent not entered*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* inspection % cannot be greater than 100 %*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.SWAPCTIN[SW0PWPIX] > 100)
    set SW0PM002.SWAPCTIN[SW0PWPIX] cursor, bold; /* highlight*/
    SLWREC.XXXLOCID = "253"; /* module identifier*/
    converseLib.validationFailed(11); /* inspection percentage > task %*/
  end

   /* ------------------------------------------------------------*/
   /* if this is the greatest task percentage, hdr % cant be more*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.SWAPCTIN[SW0PWPIX] > 0)
    if (SW0PM002.SWAPCTIN[SW0PWPIX] > SW0PW00.SW0PWCPC)

      SW0PW00.SW0PWCPC = SW0PM002.SWAPCTIN[SW0PWPIX];
      if (SW0PM002.SW0PMPIN > SW0PW00.SW0PWCPC)

        set SW0PM002.SW0PMPIN cursor, bold; /* highlight*/
        SLWREC.XXXLOCID = "253"; /* module identifier*/
        converseLib.validationFailed(292); /* inspection percentage > task %*/

      end
    end
  else
    SW0PM002.SWAPCTIN[SW0PWPIX] = SW0PM002.SW0PMPIN; /* hdr default*/
    SW0PW00.SW0PWCPC = SW0PM002.SW0PMPIN;

  end

   /* ------------------------------------------------------------*/
   /* status can only be 'a' or 'i'*/
   /* ------------------------------------------------------------*/

  if (SW0PM002.XXXSTAT[SW0PWPIX] == "A"
   || SW0PM002.XXXSTAT[SW0PWPIX] == "I")
    /* next sentence*/
  else
    if (SW0PM002.XXXSTAT[SW0PWPIX] == " ")
      SW0PM002.XXXSTAT[SW0PWPIX] = SW0PM002.SW0PMSTA; /* hdr default*/
    else
      SLWREC.XXXLOCID = "253";
      set SW0PM002.XXXSTAT[SW0PWPIX] cursor, bold;
      converseLib.validationFailed(280); /* required field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* task code*/
   /* ------------------------------------------------------------*/

  set SWYREC empty;

  SWYREC.XGPCD = SW0PM002.XGPCD;
  SWYREC.SWYTACD = SW0PM002.SWYTACD[SW0PWPIX];

  SW0PS14(); /* select task code table*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SW0PW04.SWYTAMM = SWYREC.SWYTAMM; /* task minutes*/
    SW0PM002.SWYTAMM = SWYREC.SWYTAMM; /* task minutes*/
    SW0PW04.XTCCD[SW0PWPIX] = SWYREC.XTCCD;
                                   /* save task category code*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SLWREC.XXXLOCID = "253";
      set SW0PM002.SWYTACD[SW0PWPIX] cursor, bold;
      converseLib.validationFailed(282); /* invalid task code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* task error code*/
   /* ------------------------------------------------------------*/

   /* IF SW0PW04.swztecd(SW0PWPIX) EQ 0 ; no error code entered*/
  if (SW0PM002.SW0PMTEC[SW0PWPIX] == "    ") /* no error code entered*/

    return; /* no more editing*/

  end

  SW0P258(); /* task error code check*/

  if (SWZREC.XTCCD != SW0PW04.XTCCD[SW0PWPIX]) /* category codes dont match*/

    set SW0PM002.SW0PMTEC[SW0PWPIX] cursor, bold; /* highlight*/
    SLWREC.XXXLOCID = "253";
    converseLib.validationFailed(330); /* msg*/

  end


end // end SW0P253

// validate header pct vs. array
Function SW0P254()
   /* -----------------------------------------------------------*/
   /* run through array to get largest percentage there*/
   /* -----------------------------------------------------------*/

  SW0PW00.SW0PWIXM = 1;
  SW0PW00.SW0PWCPC = 0; /* start with zero*/

  while (SW0PW00.SW0PWIXM <= 20)

    if (SW0PW00.SW0PWCPC > SW0PM002.SWAPCTIN[SW0PWIXM])

      SW0PW00.SW0PWCPC = SW0PM002.SWAPCTIN[SW0PWIXM]; /* largest*/

    end
    SW0PW00.SW0PWIXM = SW0PW00.SW0PWIXM + 1;

  end

   /* -----------------------------------------------------------*/
   /* now, make sure that percentage is less than largest of*/
   /* array*/
   /* -----------------------------------------------------------*/

  if (SW0PM002.SW0PMPIN > SW0PW00.SW0PWCPC /* insp pct > largest in array*/
   && SW0PW00.SW0PWCPC != 0)              

    set SW0PM002.SW0PMPIN cursor, bold; /* highlight*/
    converseLib.validationFailed(292);

  end


end // end SW0P254

// Validate task error codes
Function SW0P258()
   /* ------------------------------------------------------------*/
   /* validate task error codes*/
   /* ------------------------------------------------------------*/

  SW0PW01.SW0PWECC = SW0PM002.SW0PMTEC[SW0PWPIX];

  SW0PS21();

  if (SW0PW01.SW0PWEC1 >= "0"
   && SW0PW01.SW0PWEC1 <= "9")
  else
    SLWREC.XXXLOCID = "258"; /* Module identification*/
    SLWREC.SLWMSGNO = 011; /* data modified*/
    set SW0PM002.SW0PMTEC[SW0PWPIX] cursor, bold; /* Highlight*/
    return; /* redisplay the screen*/
  end

  if (SW0PW01.SW0PWEC2 >= "0"
   && SW0PW01.SW0PWEC2 <= "9")
  else
    SLWREC.XXXLOCID = "258"; /* Module identification*/
    SLWREC.SLWMSGNO = 011; /* data modified*/
    set SW0PM002.SW0PMTEC[SW0PWPIX] cursor, bold; /* Highlight*/
    return; /* redisplay the screen*/
  end

  if (SW0PW01.SW0PWEC3 >= "0"
   && SW0PW01.SW0PWEC3 <= "9")
  else
    SLWREC.XXXLOCID = "258"; /* Module identification*/
    SLWREC.SLWMSGNO = 011; /* data modified*/
    set SW0PM002.SW0PMTEC[SW0PWPIX] cursor, bold; /* Highlight*/
    return; /* redisplay the screen*/
  end

  if (SW0PW01.SW0PWEC4 >= "0"
   && SW0PW01.SW0PWEC4 <= "9")
  else
    SLWREC.XXXLOCID = "258"; /* Module identification*/
    SLWREC.SLWMSGNO = 011; /* data modified*/
    set SW0PM002.SW0PMTEC[SW0PWPIX] cursor, bold; /* Highlight*/
    return; /* redisplay the screen*/
  end

   /* ------------------------------------------------------------*/
   /* validate error code against db table*/
   /* ------------------------------------------------------------*/

  set SWZREC empty; /* Clear row storage area*/
  SWZREC.SWZTECD = SW0PW01.SW0PWECN; /* task error code*/

  SW0PS08();

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    return; /* Return to previous process*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      converseLib.validationFailed(279); /* task error code not found*/
      set SW0PM002.SW0PMTEC[SW0PWPIX] cursor, bold; /* Highlight*/
      return; /* Exit to display map*/
    end

  end
end // end SW0P258

// update tables from m002
Function SW0P260()

  SW0PW00.SW0PWSWF = "Y"; /* format map*/

  SW0P262(); /* format w01*/

  if (SLWREC.SLWSKYSW == "Y")
    SW0PW00.SW0PWSWR = "Y"; /* request for data switch*/
    return;
  end

  if (converseVar.eventKey is enter)
    if (SW0PW00.SW0PWUPD == "Y") /* already updated*/
      SLWREC.XXXLOCID = "260"; /* location*/
      converseLib.validationFailed(79); /* table already updated*/
    else
      SW0PS15();
      SW0PS13();
      SW0PW00.SW0PWENT = "Y"; /* enter flag*/
      SLWREC.SLWMSGNO = 248; /* use pf18 to update*/
      SLWREC.XXXLOCID = "260"; /* module id*/
    end
    return; /* exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* new inspection task selection*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* new inspection*/

    SW0PS18(); /* unprotect fields*/
    SW0PW00.SW0PWSWR = "Y"; /* request for data*/
    SW0PW00.SW0PWSWF = "Y"; /* format data*/
    SW0PW00.SW0PWINF = "Y"; /* new inspection*/
    SW0PW00.SW0PWUPD = "N"; /* no update*/
    SW0PW00.SW0PWTMP = "N"; /* set flag off*/
    return; /* return to flow*/

  end

   /* ------------------------------------------------------------*/
   /* display task selection*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* task selection*/

    if (SW0PW01.XTYCD <= " ") /* no type code*/
      SW0PW01.XTYCD = SW0PW01.SWAINSTP; /* insp type code*/
    end

    SW0PW00.SW0PWSWD = "1"; /* m001*/
    SW0PW00.SW0PWTMP = "Y"; /* transferr to m001*/
    SW0PW00.SW0PWSWR = "N"; /* request for data*/
    SW0PW00.SW0PWSWF = "Y"; /* format data*/
    if (SW0PW00.SW0PWUPD == "N") /* transferring to m002*/
      SW0PS15(); /* add to task array*/
    end
    exit stack; /* return to flow*/

  end


   /* ------------------------------------------------------------*/
   /* add new inspection header*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* add new task*/

    if (SW0PW00.SW0PWUPD == "Y") /* already updated*/
      SLWREC.XXXLOCID = "260"; /* location*/
      converseLib.validationFailed(79); /* table already updated*/
      return;
    else
      XX0XS01(); /* obtain date and time*/

      SW0PS15(); /* add to task array*/

      SW0PS03(); /* get next available inspection number*/
      SW0PW01.SWAINSNB = SL3REC.SL3NXISN; /* store insp #*/
      SW0PM002.SWAINSNB = SL3REC.SL3NXISN; /* move insp # to map*/
      SW0PS11(); /* add inspection header*/

      SW0PW03.SW0PW3IX = 1; /* set index to 1*/
      while (SW0PW03.SW0PW3IX <= SW0PW03.SW0PW3MX) /* process array*/

        SW0PS12(); /* add new inspection task*/

        SW0PW03.SW0PW3IX = SW0PW03.SW0PW3IX + 1; /* increment load*/

      end

      SW0PS20(); /* protect enterable fields*/
      SW0PW00.SW0PWUPD = "Y"; /* updated*/
      SLWREC.XXXLOCID = "260"; /* location*/
      converseLib.validationFailed(20); /* table update was successful*/

      /* ------------------------------------------------------------*/
       /* commit all changes to protected resources*/
      /* ------------------------------------------------------------*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit all changes*/

    end

  end



end // end SW0P260

// Format header data to w01
Function SW0P262()

   /* ------------------------------------------------------------*/
   /* Format sw0pw01 using map data*/
   /* ------------------------------------------------------------*/

  SW0PW01.XWHCD = SW0PM002.XWHCD;
  SW0PW01.SWAINSNB = SW0PM002.SWAINSNB;
  SW0PW01.SWAINSTP = SW0PM002.SWAINSTP;
  SW0PW01.SWAINDSC = SW0PM002.SWAINDSC;
  SW0PW01.SW0PMEMM = SW0PM002.SW0PMEMM;
  SW0PW01.SWAADMM = SW0PM002.SWAADMM;
  SW0PW01.SW0PMSTA = SW0PM002.SW0PMSTA;
  SW0PW01.SW0PMPIN = SW0PM002.SW0PMPIN;
  SW0PW01.SWAINDSC = SW0PM002.SWAINDSC;
  SW0PW01.SW0PMSMM = SW0PM002.SW0PMSMM;
  SW0PW01.SW0PMSDD = SW0PM002.SW0PMSDD;
  SW0PW01.SW0PMSYY = SW0PM002.SW0PMSYY;
  SW0PW01.SW0PMSTM = SW0PM002.SW0PMSTM;
  SW0PW01.SW0PMCMM = SW0PM002.SW0PMCMM;
  SW0PW01.SW0PMCDD = SW0PM002.SW0PMCDD;
  SW0PW01.SW0PMCYY = SW0PM002.SW0PMCYY;
  SW0PW01.SW0PMCTM = SW0PM002.SW0PMCTM;
  SW0PW01.XXXUSRID = SW0PM002.XXXUSRID;
  SW0PW01.XGPCD = SW0PM002.XGPCD;


end // end SW0P262

// purge temporary storage
Function SW0PS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0PW02 empty; /* M001 temporary storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0PW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA5REC.TA5RTNCD == 0 /* and normal return code*/
     || TA5REC.TA5RTNCD == 4) /* and not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0PS01

// read temporary storage
Function SW0PS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SW0PW02.XXXTSLEN = SW0PW00.XXXTSLEN;
  TA5REC.TA5TSQIX = SW0PW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0PS02

// select 's' dstloc.vslctl01
Function SW0PS03()
   /* ------------------------------------------------------------*/
   /* obtain new inspection number from dstloc.vslctl01*/
   /* ------------------------------------------------------------*/

  set SL3REC empty; /* clear record*/

  SL3REC.XWHCD = SW0PW01.XWHCD; /* warehouse code*/

  try
    call "IO1500" ("G6", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    if (sysVar.errorCode == "00000000") /* Call successful*/

      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      if (SW0PW00.SW0PWSWD == "1")
        converseLib.clearScreen();
         /* Clear screen before displa*/
      else
        converseLib.clearScreen();
         /* Clear screen before displa*/
      end

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VSLCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSLCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0PW01.XWHCD; /* warehouse*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0PS03

// select single row
Function SW0PS04()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SWYREC empty; /* Clear row storage area*/

  SWYREC.XGPCD = SW0PW01.XGPCD; /* GPC*/

  if (SW0PW01.SW0PMXTA <= 0) /* ; task code not entered*/
    SWYREC.SWYTACD = -1; /* task code*/
  else
    SWYREC.SWYTACD = SW0PW01.SW0PMXTA; /* task code*/
  end

  SWYREC.XTYCD = SW0PW01.XTYCD; /* task type code*/

  if (SW0PW01.XTCCD <= " ") /* task cat code not entered*/
    SWYREC.XTCCD = "*"; /* task cat code*/
  else
    SWYREC.XTCCD = SW0PW01.XTCCD; /* task cat code*/
  end

  SWYREC.XXXSTAT = "A"; /* task status*/

  try
    call "IO5550" ("S1", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKS01"; /* Table view name*/
  SW0PW00.XGPCD = SW0PW01.XGPCD; /* GPC*/
  SW0PW00.SW0PMXTA = SW0PW01.SW0PMXTA; /* task code*/
  SW0PW00.XTYCD = SW0PW01.XTYCD; /* task type code*/
  SW0PW00.XTCCD = SW0PW01.XTCCD; /* task cat code*/
  TA1REC.TA1TBLKE = SW0PW00.SW0PWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0PS04

// fetch next row dcorp.vxta0001
Function SW0PS05()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5550" ("N1", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0PW00.SW0PWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0PW00.SW0PWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0PS05

// add page to temporary storage
Function SW0PS06()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0PW02.XXXTSLEN = SW0PW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = "SW0P"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (SW0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "SW0P190 "; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "SW0PM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    SLWREC.XXXLOCID = "S06 "; /* Error location*/
    return; /* Return to previous process*/

  end

  SW0PW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

end // end SW0PS06

// close cursor select set
Function SW0PS07()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5550" ("C1", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S07"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0PW00.SW0PWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0PS07

// select 's' dstloc.vslctl01
Function SW0PS08()

   /* ------------------------------------------------------------*/
   /* obtain task error code*/
   /* ------------------------------------------------------------*/

  try
    call "IO5560" ("S ", SQLCA, SWZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    if (sysVar.errorCode == "00000000") /* Call successful*/

      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before displa*/

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VSLCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0PW01.XWHCD; /* warehouse*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0PS08

// check 's'elected task function
Function SW0PS09()
   /* ------------------------------------------------------------*/
   /* check the map to see if task is already on the inspection*/
   /* ------------------------------------------------------------*/

  SW0PW00.SW0PWPIX = 1;

  while (SW0PW00.SW0PWPIX <= 10) /* process temp*/

    if (SW0PM001.SWYTACD[SW0PWPIX] != 0) /* data on line*/
      SW0PS10(); /* check if in task array already*/
      if (SW0PW00.SW0PWFND == "Y") /* task already in array*/
         /* check for fields to be updated*/
        if (SW0PM001.SWZTECD[SW0PWPIX] != SW0PW03.SWZTECD[SW0PW3IX])
          SW0PW03.SWZTECD[SW0PW3IX] = SW0PM001.SWZTECD[SW0PWPIX];
        end
        if (SW0PM001.XXXSTAT[SW0PWPIX] != SW0PW03.XXXSTAT[SW0PW3IX])
          SW0PW03.XXXSTAT[SW0PW3IX] = SW0PM001.XXXSTAT[SW0PWPIX];
        end
        if (SW0PM001.SWAPCTIN[SW0PWPIX] != SW0PW03.SWAPCTIN[SW0PW3IX])
          SW0PW03.SWAPCTIN[SW0PW3IX] = SW0PM001.SWAPCTIN[SW0PWPIX];
        end
      else
        if (SW0PM001.SW0PMFNC[SW0PWPIX] == "S") /* selected line - add*/
          SW0PW03.SWYTACD[SW0PW3IX] = SW0PM001.SWYTACD[SW0PWPIX];
          SW0PW03.SWYTADSC[SW0PW3IX] = SW0PM001.SWYTADSC[SW0PWPIX];
          SW0PW03.SWYTAMM[SW0PW3IX] = SW0PM001.SWYTAMM[SW0PWPIX];
          SW0PW03.SWZTECD[SW0PW3IX] = SW0PM001.SWZTECD[SW0PWPIX];
           /* using w01 gpc code - that was the one that brought up task*/
          SW0PW03.XGPCD[SW0PW3IX] = SW0PW01.XGPCD;
          SW0PW03.XXXSTAT[SW0PW3IX] = SW0PM001.XXXSTAT[SW0PWPIX];
          SW0PW03.SWAPCTIN[SW0PW3IX] = SW0PM001.SWAPCTIN[SW0PWPIX];
          SW0PW03.XTCCD[SW0PW3IX] = SW0PM001.SW0PMCCD[SW0PWPIX];
          SW0PW01.SW0PMEMM = SW0PW01.SW0PMEMM + SW0PW03.SWYTAMM[SW0PW3IX];
          SW0PW03.SW0PW3MX = SW0PW03.SW0PW3IX;
        end
      end
    end

    SW0PW00.SW0PWPIX = SW0PW00.SW0PWPIX + 1; /* increment load*/

  end

   /* -----------------------------------------------------------*/
   /* run through array to get largest percentage there*/
   /* -----------------------------------------------------------*/

  SW0PW00.SW0PWIXM = 1;
  SW0PW00.SW0PWCPC = 0; /* start with zero*/

  while (SW0PW00.SW0PWIXM <= SW0PW03.SW0PW3MX)

    if (SW0PW03.SWAPCTIN[SW0PWIXM] > SW0PW00.SW0PWCPC)

      SW0PW00.SW0PWCPC = SW0PW03.SWAPCTIN[SW0PWIXM];

    end
    SW0PW00.SW0PWIXM = SW0PW00.SW0PWIXM + 1; /* increment counter*/

  end

   /* -----------------------------------------------------------*/
   /* now, make sure that percentage is less than largest of*/
   /* array*/
   /* -----------------------------------------------------------*/

  if (SW0PM001.SW0PMPIN > SW0PW00.SW0PWCPC /* insp pct > largest in array*/
   && SW0PW00.SW0PWCPC != 0)              

    set SW0PM001.SW0PMPIN cursor, bold; /* highlight*/
    converseLib.validationFailed(292);

  end

  if (converseVar.validationMsgNum > 0)
    exit stack; /* return to display error*/
  end

end // end SW0PS09

// task already in array?
Function SW0PS10()

   /* ------------------------------------------------------------*/
   /* add to task array*/
   /* ------------------------------------------------------------*/

  SW0PW03.SW0PW3IX = 1; /* set index to 1*/
  SW0PW00.SW0PWFND = "N"; /* not found switch*/

  while (SW0PW03.SW0PW3IX <= SW0PW03.SW0PW3MX /* total tasks in array*/
   && SW0PW00.SW0PWFND == "N")

    if (SW0PM001.SWYTACD[SW0PWPIX] == SW0PW03.SWYTACD[SW0PW3IX]) /* on array*/
      SW0PW00.SW0PWFND = "Y"; /* found*/

    else

      SW0PW03.SW0PW3IX = SW0PW03.SW0PW3IX + 1; /* decrement load*/
    end

  end

end // end SW0PS10

// insert dstloc.vinsp001
Function SW0PS11()
  set SWAREC empty; /* initialize row*/
  SWAREC.XWHCD = SW0PW01.XWHCD; /* warehouse*/
  SWAREC.SWAINSNB = SW0PW01.SWAINSNB; /* insp number*/
  SWAREC.SWAINSTP = SW0PW01.SWAINSTP; /* insp type*/
  SWAREC.SWAINDSC = SW0PW01.SWAINDSC; /* insp description*/
  SW0PW00.SW0PWPCT = SW0PW01.SW0PMPIN / 100;
  SWAREC.SWAPCTIN = SW0PW00.SW0PWPCT; /* % insp*/
  SWAREC.SWAADMM = SW0PW01.SWAADMM; /* adj min*/
  SWAREC.XXXUSRID = SW0PW01.XXXUSRID; /* user*/
  SWAREC.XXXSTAT = SW0PW01.SW0PMSTA; /* insp status*/
  SWAREC.ZZZSDT = SW0PW01.SW0PMSDT; /* set up date*/
  SWAREC.ZZZCHGDT = SW0PW01.SW0PMCDT; /* Change date*/
  SWAREC.ZZZCHGTM = SW0PW01.SW0PMCTM; /* Change time*/
   /* ------------------------------------------------------------*/
   /* add the row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5310" ("A ", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0PS11

// insert vintsk01
Function SW0PS12()
  set SWBREC empty; /* initialize row*/
  SWBREC.XWHCD = SW0PW01.XWHCD; /* warehouse*/
  SWBREC.SWAINSNB = SW0PW01.SWAINSNB; /* insp number*/
  SWBREC.XGPCD = SW0PW03.XGPCD[SW0PW3IX]; /* gpc*/
  SWBREC.SL-TASK-CD = SW0PW03.SWYTACD[SW0PW3IX]; /* task code*/
  SWBREC.SL-TASK-ERR-CD = SW0PW03.SWZTECD[SW0PW3IX];
  SW0PW00.SW0PWPCT = SW0PW03.SWAPCTIN[SW0PW3IX] / 100;
  SWBREC.SWAPCTIN = SW0PW00.SW0PWPCT; /* % inps*/
  SWBREC.XXXUSRID = SW0PW01.XXXUSRID; /* user*/
  SWBREC.XXXSTAT = SW0PW03.XXXSTAT[SW0PW3IX]; /* insp stat*/
  SWBREC.ZZZSDT = SW0PW01.SW0PMSDT; /* setup date*/
  SWBREC.ZZZCHGDT = SW0PW01.SW0PMCDT; /* Change date*/
  SWBREC.ZZZCHGTM = SW0PW01.SW0PMCTM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* add the row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5320" ("A ", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(1); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0PS12

// move w03 to w04
Function SW0PS13()
  SW0PW03.SW0PW3IX = 1; /* first task array*/

  while (SW0PW03.SW0PW3IX <= SW0PW03.SW0PW3MX)

    SW0PW04.SW0PW4IX = SW0PW03.SW0PW3IX; /* sw0pw04 (map)*/

    SW0PW04.SWYTACD[SW0PW4IX] = SW0PW03.SWYTACD[SW0PW3IX];
    SW0PW04.SWYTAMM[SW0PW4IX] = SW0PW03.SWYTAMM[SW0PW3IX];
    SW0PW04.SWZTECD[SW0PW4IX] = SW0PW03.SWZTECD[SW0PW3IX];
    SW0PW04.XXXSTAT[SW0PW4IX] = SW0PW03.XXXSTAT[SW0PW3IX];
    SW0PW04.SWAPCTIN[SW0PW4IX] = SW0PW03.SWAPCTIN[SW0PW3IX];
    SW0PW04.XTCCD[SW0PW4IX] = SW0PW03.XTCCD[SW0PW3IX];

    SW0PW04.SW0PW4MX = SW0PW04.SW0PW4IX; /* total tasks*/

    SW0PW03.SW0PW3IX = SW0PW03.SW0PW3IX + 1; /* increment array*/

  end


end // end SW0PS13

// select unique vxta0001
Function SW0PS14()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/


  try
    call "IO5550" ("S ", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKS01"; /* Table view name*/
  SW0PW00.XGPCD = SW0PW01.XGPCD; /* GPC*/
  SW0PW00.SW0PMXTA = SW0PW01.SW0PMXTA; /* task code*/
  SW0PW00.XTYCD = SW0PW01.XTYCD; /* task type code*/
  SW0PW00.XTCCD = SW0PW01.XTCCD; /* task cat code*/
  TA1REC.TA1TBLKE = SW0PW00.SW0PWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0PS14

// move task to w04
Function SW0PS15()
   /* ------------------------------------------------------------*/
   /* check the map to see if task is already on the inspection*/
   /* ------------------------------------------------------------*/

  SW0PW00.SW0PWPIX = 1;

  while (SW0PW00.SW0PWPIX <= 20) /* process temp*/

    if (SW0PM002.SWYTACD[SW0PWPIX] <= 0) /* no task entered*/
      /* next sentence*/
    else
      SW0PS16(); /* check if in task array already*/
      if (SW0PW00.SW0PWFND == "Y") /* task already in array*/
         /* see if fields need to be updated*/
        if (SW0PM002.SWYTAMM[SW0PWPIX] != SW0PW03.SWYTAMM[SW0PW3IX]) /* chg*/
          SW0PW03.SWYTAMM[SW0PW3IX] = SW0PM002.SWYTAMM[SW0PWPIX];
        end
        SW0PS21(); /* convert from cha to num*/
        if (SW0PW01.SW0PWECN != SW0PW03.SWZTECD[SW0PW3IX]) /* chnged*/
          SW0PW03.SWZTECD[SW0PW3IX] = SW0PW01.SW0PWECN;
        end
        if (SW0PM002.XXXSTAT[SW0PWPIX] != SW0PW03.XXXSTAT[SW0PW3IX])
          SW0PW03.XXXSTAT[SW0PW3IX] = SW0PM002.XXXSTAT[SW0PWPIX];
        end
        if (SW0PM002.SWAPCTIN[SW0PWPIX] != SW0PW03.SWAPCTIN[SW0PW3IX])
          SW0PW03.SWAPCTIN[SW0PW3IX] = SW0PM002.SWAPCTIN[SW0PWPIX];
        end
      else
        SW0PW03.SWYTACD[SW0PW3IX] = SW0PM002.SWYTACD[SW0PWPIX];
        SW0PW03.SWYTAMM[SW0PW3IX] = SW0PM002.SWYTAMM[SW0PWPIX];
        SW0PS21(); /* convert from cha to num*/
        SW0PW03.SWZTECD[SW0PW3IX] = SW0PW01.SW0PWECN;
        SW0PW03.XXXSTAT[SW0PW3IX] = SW0PM002.XXXSTAT[SW0PWPIX];
        SW0PW03.SWAPCTIN[SW0PW3IX] = SW0PM002.SWAPCTIN[SW0PWPIX];
        SW0PW03.XTCCD[SW0PW3IX] = SW0PM002.XTCCD[SW0PWPIX];
        SW0PW01.SW0PMEMM = SW0PW01.SW0PMEMM + SW0PW03.SWYTAMM[SW0PW3IX];
        SW0PW03.SW0PW3MX = SW0PW03.SW0PW3IX;
      end

    end

    SW0PW00.SW0PWPIX = SW0PW00.SW0PWPIX + 1; /* increment load*/

  end

end // end SW0PS15

// task already in array?
Function SW0PS16()

   /* ------------------------------------------------------------*/
   /* search task array*/
   /* ------------------------------------------------------------*/

  SW0PW03.SW0PW3IX = 1; /* set index to 1*/
  SW0PW00.SW0PWFND = "N"; /* not found switch*/

  while (SW0PW03.SW0PW3IX <= SW0PW03.SW0PW3MX /* total tasks in array*/
   && SW0PW00.SW0PWFND == "N")

    if (SW0PM002.SWYTACD[SW0PWPIX] == SW0PW03.SWYTACD[SW0PW3IX]) /* on array*/
      SW0PW00.SW0PWFND = "Y"; /* found*/

    else

      SW0PW03.SW0PW3IX = SW0PW03.SW0PW3IX + 1; /* decrement load*/
    end

  end

end // end SW0PS16

// unprotect m001
Function SW0PS17()

   /* ------------------------------------------------------------*/
   /* unprotect all enterable field, except opt, item and whse*/
   /* ------------------------------------------------------------*/

  set SW0PM001.XWHCD initialAttributes; /* DEFINED warehouse*/
  set SW0PM001.SWAINSNB initialAttributes; /* DEFINED inspection number*/
  set SW0PM001.SWAINSTP initialAttributes; /* DEFINED inspection type*/
  set SW0PM001.SWAADMM initialAttributes; /* DEFINED adj min*/
  set SW0PM001.SW0PMSTA initialAttributes; /* DEFINED insp status*/
  set SW0PM001.SW0PMPIN initialAttributes; /* DEFINED insp % ins*/
  set SW0PM001.SWAINDSC initialAttributes; /* DEFINED insp description*/
  set SW0PM001.XGPCD initialAttributes; /* DEFINED gpc*/
  set SW0PM001.SW0PMXTA initialAttributes; /* DEFINED task code*/
  set SW0PM001.XTYCD initialAttributes; /* DEFINED task type*/
  set SW0PM001.XTCCD initialAttributes; /* DEFINED task catg*/
  set SW0PM001.CATOAP initialAttributes; /* DEFINED option*/
  set SW0PM001.CAITEM initialAttributes; /* DEFINED item*/

  SW0PW00.SW0PWPIX = 1; /* initalize map index*/
  while (SW0PW00.SW0PWPIX <= 10) /* max tasks on map*/

    set SW0PM001.SW0PMFNC[SW0PWPIX] initialAttributes; /* DEFINED select function*/
    set SW0PM001.SWZTECD[SW0PWPIX] initialAttributes; /* DEFINED error code*/
    set SW0PM001.XXXSTAT[SW0PWPIX] initialAttributes; /* DEFINED status*/
    set SW0PM001.SWAPCTIN[SW0PWPIX] initialAttributes; /* DEFINED % ins*/

    SW0PWPIX = SW0PWPIX + 1; /* increment map index*/

  end

end // end SW0PS17

// unprotect m002
Function SW0PS18()

   /* ------------------------------------------------------------*/
   /* defined all enterable field, except opt, item and whse*/
   /* ------------------------------------------------------------*/

  set SW0PM002.SWAINSTP initialAttributes; /* defined inspection type*/
  set SW0PM002.SWAADMM initialAttributes; /* defined adj min*/
  set SW0PM002.SW0PMSTA initialAttributes; /* defined insp status*/
  set SW0PM002.SW0PMPIN initialAttributes; /* defined insp % ins*/
  set SW0PM002.SWAINDSC initialAttributes; /* defined insp description*/
  set SW0PM002.XGPCD initialAttributes; /* defined gpc*/

  SW0PW00.SW0PWPIX = 1; /* initalize map index*/
  while (SW0PW00.SW0PWPIX <= 20) /* max tasks on map*/

    set SW0PM002.SWYTACD[SW0PWPIX] initialAttributes; /* defined select function*/
    set SW0PM002.SW0PMTEC[SW0PWPIX] initialAttributes; /* defined error code*/
    set SW0PM002.XXXSTAT[SW0PWPIX] initialAttributes; /* defined status*/
    set SW0PM002.SWAPCTIN[SW0PWPIX] initialAttributes; /* defined % ins*/

    SW0PWPIX = SW0PWPIX + 1; /* increment map index*/

  end

end // end SW0PS18

// protect m001
Function SW0PS19()

   /* ------------------------------------------------------------*/
   /* protect all enterable field, except opt, item and whse*/
   /* ------------------------------------------------------------*/

  set SW0PM001.SWAINSTP protect; /* protect inspection type*/
  set SW0PM001.SWAADMM protect; /* protect adj min*/
  set SW0PM001.SW0PMSTA protect; /* protect insp status*/
  set SW0PM001.SW0PMPIN protect; /* protect insp % ins*/
  set SW0PM001.SWAINDSC protect; /* protect insp description*/
  set SW0PM001.XGPCD protect; /* protect gpc*/
  set SW0PM001.SW0PMXTA protect; /* protect task code*/
  set SW0PM001.XTYCD protect; /* protect task type*/
  set SW0PM001.XTCCD protect; /* protect task catg*/

  SW0PW00.SW0PWPIX = 1; /* initalize map index*/
  while (SW0PW00.SW0PWPIX <= 10) /* max tasks on map*/

    if (SW0PM001.SW0PMFNC[SW0PWPIX] == "S") /* select function*/
      if (converseVar.eventKey is pf18) /* update only*/
        SW0PM001.SW0PMFNC[SW0PWPIX] = " "; /* blank select*/
      end
      set SW0PM001.SW0PMFNC[SW0PWPIX] protect; /* prot fnc*/
      set SW0PM001.SWYTACD[SW0PWPIX] protect, bold; /* error code*/
      set SW0PM001.SWYTADSC[SW0PWPIX] protect; /* error code*/
      set SW0PM001.SWYTAMM[SW0PWPIX] protect; /* error code*/
      set SW0PM001.SWZTECD[SW0PWPIX] protect; /* error code*/
      set SW0PM001.XXXSTAT[SW0PWPIX] protect; /* status*/
      set SW0PM001.SWAPCTIN[SW0PWPIX] protect; /* % ins*/
    else
      if (SW0PM001.SWYTACD[SW0PWPIX] == 0) /* no data on line*/

        set SW0PM001.SW0PMFNC[SW0PWPIX] protect, invisible; /* protect select*/
        set SW0PM001.SWZTECD[SW0PWPIX] protect, invisible; /* protect error code*/
        set SW0PM001.XXXSTAT[SW0PWPIX] protect, invisible; /* protect status*/
        set SW0PM001.SWAPCTIN[SW0PWPIX] protect, invisible; /* protect % ins*/
      else

        set SW0PM001.SW0PMFNC[SW0PWPIX] protect; /* protect select function*/
        set SW0PM001.SWZTECD[SW0PWPIX] protect; /* protect error code*/
        set SW0PM001.XXXSTAT[SW0PWPIX] protect; /* protect status*/
        set SW0PM001.SWAPCTIN[SW0PWPIX] protect; /* protect % ins*/

      end
    end

    SW0PWPIX = SW0PWPIX + 1; /* increment map index*/

  end

end // end SW0PS19

// protect m002
Function SW0PS20()

   /* ------------------------------------------------------------*/
   /* protect all enterable field, except opt, item and whse*/
   /* ------------------------------------------------------------*/

  set SW0PM002.SWAINSTP protect; /* protect inspection type*/
  set SW0PM002.SWAADMM protect; /* protect adj min*/
  set SW0PM002.SW0PMSTA protect; /* protect insp status*/
  set SW0PM002.SW0PMPIN protect; /* protect insp % ins*/
  set SW0PM002.SWAINDSC protect; /* protect insp description*/
  set SW0PM002.XGPCD protect; /* protect gpc*/

  SW0PW00.SW0PWPIX = 1; /* initalize map index*/
  while (SW0PW00.SW0PWPIX <= 20) /* max tasks on map*/


    set SW0PM002.SWYTACD[SW0PWPIX] protect; /* protect select function*/
    set SW0PM002.SW0PMTEC[SW0PWPIX] protect; /* protect error code*/
    set SW0PM002.XXXSTAT[SW0PWPIX] protect; /* protect status*/
    set SW0PM002.SWAPCTIN[SW0PWPIX] protect; /* protect % ins*/


    SW0PWPIX = SW0PWPIX + 1; /* increment map index*/

  end

end // end SW0PS20

// convert error code
Function SW0PS21()

  SW0PW01.SW0PWECC = SW0PM002.SW0PMTEC[SW0PWPIX];

  while (SW0PW01.SW0PWEC4 <= " ")
    SW0PW01.SW0PWEC4 = SW0PW01.SW0PWEC3;
    SW0PW01.SW0PWEC3 = SW0PW01.SW0PWEC2;
    SW0PW01.SW0PWEC2 = SW0PW01.SW0PWEC1;
    SW0PW01.SW0PWEC1 = "0";
  end

  if (SW0PW01.SW0PWEC1 <= " ")
    SW0PW01.SW0PWEC1 = "0";
  end

  if (SW0PW01.SW0PWEC2 <= " ")
    SW0PW01.SW0PWEC2 = "0";
  end

  if (SW0PW01.SW0PWEC3 <= " ")
    SW0PW01.SW0PWEC3 = "0";
  end


end // end SW0PS21

// get tasks xvta0001
Function SW0PS22()

  SW0PS01(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  SW0PS04(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SW0PW00.SW0PWIXM = 1; /* Display line index*/
  SW0PW00.SW0PWSWC = "N"; /* End of cursor switch*/
  set SW0PW02 empty; /* ; initalize task data*/

  while (SW0PW00.SW0PWSWC == "N") /* Until end of cursor*/

    SW0PS05(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SW0PW00.SW0PWSWC == "N") /* Not end of cursor*/
      SW0P111(); /* move xtarec data to sw0pw02*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SW0PW00.SW0PWIXM > 10) /* Page is full*/

      SW0PS06(); /* Add page to temporary storage*/

      SW0PW00.SW0PWIXM = 1; /* Display line index*/
      set SW0PW02 empty; /* ; initalize task data*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SW0PW00.SW0PWIXM > 1) /* Page was formatted*/
    SW0PS06(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  SW0PS07(); /* Close the selected set cursor*/


end // end SW0PS22

//*** RECORD=SW0PW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record SW0PW00 type basicRecord
  10 SW0PWERF SW0PWERF ; 
  10 SW0PWSWR SW0PWSWR ; 
  10 SW0PWSWF SW0PWSWF ; 
  10 SW0PWINF SW0PWINF ; 
  10 SW0PWFND SW0PWFND ; 
  10 SW0PWSWC SW0PWSWC ; 
  10 SW0PWSWD SW0PWSWD ; 
  10 SW0PWENT SW0PWENT ; 
  10 SW0PWEOF SW0PWEOF ; 
  10 SW0PWPOP SW0PWPOP ; 
  10 SW0PWUPD SW0PWUPD ; 
  10 SW0PWTMP SW0PWTMP ; 
  10 CACHGFL CACHGFL ; 
  10 SW0PWCPC SW0PWCPC ; 
  10 SW0PWPIX SW0PWPIX ; 
  10 SW0PWIDX SW0PWIDX ; 
  10 SW0PWIXM SW0PWIXM ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 SW0PWSTP SW0PWSTP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SW0PWPCT SW0PWPCT ; 
  10 SW0PWPTN SW0PWPTN ; 
  10 SW0PWKEY SW0PWKEY ; 
    15 XGPCD XGPCD ; 
    15 SW0PMXTA SW0PMXTA ; 
    15 XTYCD XTYCD ; 
    15 XTCCD XTCCD ; 
end // end SW0PW00

//*** RECORD=SW0PW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record SW0PW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 SWAINSNB SWAINSNB ; 
  10 SWAINSTP SWAINSTP ; 
  10 SWAINDSC SWAINDSC ; 
  10 SW0PMEMM SW0PMEMM ; 
  10 SWAADMM SWAADMM ; 
  10 SW0PMSTA SW0PMSTA ; 
  10 SW0PMPIN SW0PMPIN ; 
  10 SW0PMCDT SW0PMCDT ; 
    15 SW0PMCCC SW0PMCCC ; 
    15 SW0PMCYY SW0PMCYY ; 
    15 SW0PMCMM SW0PMCMM ; 
    15 SW0PMCDD SW0PMCDD ; 
  10 SW0PMCTM SW0PMCTM ; 
  10 SW0PMSDT SW0PMSDT ; 
    15 SW0PMSCC SW0PMSCC ; 
    15 SW0PMSYY SW0PMSYY ; 
    15 SW0PMSMM SW0PMSMM ; 
    15 SW0PMSDD SW0PMSDD ; 
  10 SW0PMSTM SW0PMSTM ; 
  10 XXXUSRID XXXUSRID ; 
  10 XGPCD XGPCD ; 
  10 SW0PMXTA SW0PMXTA ; 
  10 XTYCD XTYCD ; 
  10 XTCCD XTCCD ; 
  10 SW0PWEC9 SW0PWEC9 ; 
  10 SW0PWECC SW0PWECC ; 
    15 SW0PWECN SW0PWECN ; 
      20 SW0PWEC1 SW0PWEC1 ; 
      20 SW0PWEC2 SW0PWEC2 ; 
      20 SW0PWEC3 SW0PWEC3 ; 
      20 SW0PWEC4 SW0PWEC4 ; 
end // end SW0PW01

//*** RECORD=SW0PW02 ****
// -------------------------
// map 001 working storage
// -------------------------
// ***********************
Record SW0PW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 SW0PWGP2 SW0PWGP2 ; 
    10 SW0PWNLD SW0PWNLD ; 
    10 * char(74) [10] ; 
      15 SW0PMFNC SW0PMFNC ; 
      15 SWYTACD SWYTACD ; 
      15 SWYTADSC SWYTADSC ; 
      15 SWYTAMM SWYTAMM ; 
      15 SWZTECD SWZTECD ; 
      15 XXXSTAT XXXSTAT ; 
      15 SWAPCTIN SWAPCTIN ; 
      15 XTCCD XTCCD ; 
end // end SW0PW02

//*** RECORD=SW0PW03 ****
// -------------------------
// sw0pw03 task array
// -------------------------
// ***********************
Record SW0PW03 type basicRecord
  5 SW0PW3IX SW0PW3IX ; 
  5 SW0PW3MX SW0PW3MX ; 
  5 SW0PWTAR SW0PWTAR [20] ; 
    10 SWYTACD SWYTACD ; 
    10 SWYTADSC SWYTADSC ; 
    10 SWYTAMM SWYTAMM ; 
    10 SWZTECD SWZTECD ; 
    10 XXXSTAT XXXSTAT ; 
    10 SWAPCTIN SWAPCTIN ; 
    10 XTCCD XTCCD ; 
    10 XGPCD XGPCD ; 
end // end SW0PW03

//*** RECORD=SW0PW04 ****
// -------------------------
// map m002 working storage
// -------------------------
// ***********************
Record SW0PW04 type basicRecord
  5 SW0PW4IX SW0PW4IX ; 
  5 SW0PW4MX SW0PW4MX ; 
  5 SW0PWARY SW0PWARY [20] ; 
    10 SWYTACD SWYTACD ; 
    10 SWZTECD SWZTECD ; 
    10 SWYTAMM SWYTAMM ; 
    10 XXXSTAT XXXSTAT ; 
    10 SWAPCTIN SWAPCTIN ; 
    10 XTCCD XTCCD ; 
end // end SW0PW04

// change century
DataItem SW0PMCCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change day
DataItem SW0PMCDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change date
DataItem SW0PMCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change month
DataItem SW0PMCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change time
DataItem SW0PMCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change year
DataItem SW0PMCYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// est min/100 u
DataItem SW0PMEMM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// task function
DataItem SW0PMFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent ins
DataItem SW0PMPIN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// set-up centurty
DataItem SW0PMSCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set-up day
DataItem SW0PMSDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set-up date
DataItem SW0PMSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set-up month
DataItem SW0PMSMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status of table row
DataItem SW0PMSTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set-up time
DataItem SW0PMSTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set-up year
DataItem SW0PMSYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XTA_TASK_CD
DataItem SW0PMXTA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// task index
DataItem SW0PW3IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// task max
DataItem SW0PW3MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// task index
DataItem SW0PW4IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// task max
DataItem SW0PW4MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// task array
DataItem SW0PWARY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent ins
DataItem SW0PWCPC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// individual characters -pos 1
DataItem SW0PWEC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual characters -pos 2
DataItem SW0PWEC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual characters -pos 3
DataItem SW0PWEC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual characters -pos 4
DataItem SW0PWEC4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// binary error code
DataItem SW0PWEC9 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error code character
DataItem SW0PWECC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error code numeric
DataItem SW0PWECN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// enter flag
DataItem SW0PWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage eof flag
DataItem SW0PWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem SW0PWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// task array found switch
DataItem SW0PWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage layout
DataItem SW0PWGP2 char(742)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem SW0PWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new inspection flag
DataItem SW0PWINF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage index
DataItem SW0PWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// swerec key
DataItem SW0PWKEY num(11)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// number of lines per page
DataItem SW0PWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// packed percentage
DataItem SW0PWPCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem SW0PWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// pop-up window flag
DataItem SW0PWPOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric percentage
DataItem SW0PWPTN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save current temp storage page
DataItem SW0PWSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// change switch
DataItem SW0PWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map switch
DataItem SW0PWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0PWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0PWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// task array
DataItem SW0PWTAR char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// transfer maps
DataItem SW0PWTMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag
DataItem SW0PWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

