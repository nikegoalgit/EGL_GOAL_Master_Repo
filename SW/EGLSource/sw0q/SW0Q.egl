package sw0q;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0Q ****
// This application allows users to access the Inspection
// tables for maintenance of existing inspections. Only 1 in-
// spection will maintained at a time, but each inspection may
// have up to 20 tasks associated with it. It is also possible
// for an inspection to exist that has not yet had tasks
// attached to it.
// 
// This application displays inspection data on only 1 screen
// (SW0QM001). On this screen, users may:
// 
//              1) Change inspection header information
//              2) Change inspection task information
//              3) Add new tasks to the inspection
//              4) Remove tasks from the inspection
// 
// This screen wil allow scrolling. All tasks that are cur-
// rently associated with an inspection are first formatted in
// storage. When displayed on the map, the task numbers will be
// highlighted.
// 
// The 'A'dd function will not be valid for these tasks as they
// are already associated with the inspection. Users may change
// and delete these tasks. The delete, in this instance, re-
// moves the task from the inspection, but DOES NOT delete the
// task from the corporate task table.
// 
// If the user enters TASK SELECTION CRITERIA, then all tasks
// meeting the criteria will be formatted beneath the tasks
// that are already associated with the inspection.
// 
// The 'D'elete and 'C'hange functions will not be valid for
// these corporate tasks. These tasks will have normal attri-
// butes for the task numbers. Users may 'A'dd these tasks to
// the existing inspection.
// 
// Header data (Dstloc.Vinsp001) may be changed, but not
// deleted.
// 
// PF keys will give users the ability to transfer to the
// related inspection screens to maintain and setup new inspec-
// tions.
// 
// Scrolling will be allowed for the 'A'dd function;changes and
// deletes will not be valid when scrolling, however.
// 
// NOTE - The inspection number is basically a way for the user
// to group specific tasks and apply them to cartons recieved.
// 
// A carton on a specific lane may have up to two inspection
// codes assigned to it:
// 
//        1) the inspection assigned at the container/po level
//        2) the inspection assigned at the product level
// 
// No single carton may exceed 20 tasks.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/19/90  RGUTMA  New application.
// P-13     01/07/90  RVAKEL  Modify SW0QMAMM on map SL0QM001
//                            to display 0 (instead of blank)
//                            when the DB2 value is 0.
//                            Set SW0QMAMM dark until valid
//                            data entered (SW0Q200).
//                            Allow 0 to be entered in the
//                            SW0QMPIN map field (SW0Q500).
// e0000    01/18/91  jcampb  add pf6 to sw0g
//          02/13/91  ryonke  program changes for table changes
// FIX      03/15/91  cengel  change DC0070 call to IO5550 call
//                            in SW0Q114.
// MAINT    01/31/92  GRAY    INITIALIZE RECORDS AND MAPS
//          10/10/92  Ryonke  program changes for table changes
// Y2KFIX   02/03/98  MBURLE  Removed zero suppression from
//                            these map fields:
//                             - SW0QM001.SW0QMSYY
//                             - SW0QM001.SW0QMCYY
// *********************
Program SW0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0QW00 SW0QW00; // record
  SW0QW01 SW0QW01; // record
  SW0QW02 SW0QW02; // record
  SWAREC SWAREC; // record
  SWBREC SWBREC; // record
  SWYREC SWYREC; // record
  SWZREC SWZREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XTYTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XTCTBL {deleteAfterUse = yes}; // table
  use SW0QM.SW0QM001,  // forms
      SW0QM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0QM001 initial; /* M001 input/output*/
    set XX0XM001 initial;
    set SWAREC empty;
    set SWBREC empty;
    set SWYREC empty;
    set SWZREC empty;
    set SW0QW00 empty; /* Working storage*/
    set SW0QW01 empty; /* Working storage*/
    set SW0QW02 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set ERRSQLCA empty; /* SQL communication hold area*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TAEREC empty; /* Error Diagnosis information*/
    set XX0XW01 empty; /* Date/Time subroutine area*/
    set XX0XW02 empty;

    SW0QW00.SW0QWFFL = "Y"; /* set first time flag*/
    SW0QW00.SW0QWSWF = "Y"; /* Format the map switch*/
    SW0QW00.SW0QWSWR = "N"; /* Request for data switch*/
    SW0QW00.SW0QWTS = "N"; /* PA2 logic switch*/
    SW0QW00.SW0QWUCP = "N"; /* UPD complete indicator*/
    SW0QW00.XXXTSLEN = 1020; /* Temporary storage length*/
    SW0QW00.SW0QWT21 = 21; /* Set total SW0Qw02 to 21*/

    if (SLWREC.XWHCD != "  ") /* warehouse passed*/

      SW0QW00.XWHCD = SLWREC.XWHCD; /* save warehouse*/
      if (SLWREC.XWHCD in XWHTBL.XWHCD)
        SW0QW00.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end
      set SW0QM001.SWAINSNB cursor; /* cursor at next empty field*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0Q001; /* Converse the main process*/

    SW0Q001: SW0Q001();
    goto SW0Q001; /* Converse the main process*/
  end // end main
end // end SW0Q

// Main process to display a map
Function SW0Q001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0Q100(); /* Obtain the data to display*/

  SW0Q200(); /* Format and display the map*/

  SW0Q300(); /* Check attention identifier*/

  SW0Q400(); /* Reset fields to normal intensity*/

  SW0Q500(); /* Verify the data that was entered*/

  SW0Q600(); /* Process valid input request*/



end // end SW0Q001

// Obtain the data to display
Function SW0Q100()
   /* ------------------------------------------------------------*/
   /* 1 - Delete temp storage as a result of first time or PA2*/
   /* 2 - If a previous error (EZEMNO NE 0) then return*/
   /* 3 - sw0q110 - obtain data*/
           /* I. delete temp storage when it exists/clear sw0qw02*/
          /* II. sw0q111 - select unique Inspection table*/
             /* if not found or status 'inactive' exit sw0q110*/
         /* III. sw0q112 - select wildcard all Inspection tasks*/
         /* ------*/
   /* Loop  |  a. sw0q113 - select next (n1)*/
         /* |  b. sw0q114 - select corporate task for Insp task*/
         /* |  c. sw0q115 - move row to temp storage (IX)*/
         /* |    i. If page full, then sw0q130 write temp storage*/
         /* ------*/
           /* IV. sw0q116 - Close cursor*/
            /* V. If 'TASK SELECTION CRITERIA' entered*/
                  /* then fetch all corporate tasks not on*/
                  /* Inspection task tablein sw0q117*/
           /* sw0q117 - Wildcard Corporate task select*/
         /* ------*/
   /* Loop  |  a. sw0q118 - select next (n1)*/
         /* |  b. sw0q119 - move row to temp storage (IX)*/
         /* |    i. If page full, then sw0q130 write temp storage*/
         /* ------*/
           /* VI. sw0q120 - Close cursor*/
          /* VII. If temp storage exists,*/
                 /* then read first page*/
               /* else*/
                 /* send message record not on database*/
          /* VIII. Move temp storage to map looping 11 times*/
          /* IX.   Set Header attributes*/
          /* X.    Set Row attributes looping 11 times*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Delete temporary storage*/
   /* ------------------------------------------------------------*/

  if (SW0QW00.SW0QWSWR == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* ERRORS*/

    return; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Retrieve database information, build temp storage & screens*/
   /* ------------------------------------------------------------*/

  if (SW0QW00.SW0QWNWD == "Y") /* If there is new data to be built*/

    SW0Q110(); /* Obtain data to display*/

    if (SW0QW00.TA5TSQIX > 0) /* If data was found*/
      SW0QW00.XWHCD = SW0QM001.XWHCD; /* warehouse*/
      SW0QW00.SWAINSNB = SW0QM001.SWAINSNB; /* Header insp number*/
      SW0QW00.SW0QMTGP = SW0QM001.SW0QMTGP; /* Header gpc code*/
      SW0QW00.SW0QMTCD = SW0QM001.SW0QMTCD; /* Header start code*/
      SW0QW00.SW0QMTCT = SW0QM001.SW0QMTCT; /* Header task type*/
      SW0QW00.SW0QMTTP = SW0QM001.SW0QMTTP; /* Header task category*/
      SW0QW00.XXXTSPAG = 1; /* move 1 to current page number*/
      SW0QW00.SW0QWSWF = "Y"; /* format map*/
    else
      if (converseVar.validationMsgNum == 0) /* If no error message assigned*/
        converseLib.validationFailed(12); /* Record not on database*/
        SLWREC.XXXLOCID = "100"; /* Module identification*/
      end
    end

    SW0QW00.SWYTAMM = SW0QW02.SWYTAMM[SW0QWT21]; /* estimated minutes*/

  end


end // end SW0Q100

// read all task code databases
Function SW0Q110()
   /* ------------------------------------------------------------*/
   /* Delete temporary storage when it exists*/
   /* ------------------------------------------------------------*/

  if (SW0QW00.TA5TSQIX > 0) /* If temporary storage exists*/
    SW0QS01(); /* Then delete temporary storage*/

    SW0QW00.SW0QWIX2 = 1; /* Initialize work index*/
    while (SW0QW00.SW0QWIX2 <= SW0QW00.SW0QWT21) /* Loop 21 times*/
      SW0QS02(); /* Clear SW0QTTC*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Clear Header Map fields not used as selection criteria*/
   /* ------------------------------------------------------------*/

  SW0QM001.SW0QMEMM = 0; /* Estimated minutes*/
  SW0QM001.SW0QMAMM = 0; /* Adjusted minutes*/
  SW0QM001.SW0QMIST = " "; /* Header status*/
  SW0QM001.SW0QMPIN = 0; /* Header percentage*/
  SW0QM001.SW0QMDSC = " "; /* Header description*/


   /* ------------------------------------------------------------*/
   /* Initialize total fields*/
   /* ------------------------------------------------------------*/

  SW0QW00.SWYTAMM = 0; /* Total minutes*/
  SW0QW00.SW0QWPER = 0; /* Total percentage*/

   /* ------------------------------------------------------------*/
   /* Select from Inspection Table DB*/
   /* If Not Found/Unexpected Error*/
      /* then return*/
   /* else move swarec values to map*/
   /* ------------------------------------------------------------*/

  SW0Q111(); /* Select Inspection DB table*/

  if (converseVar.validationMsgNum != 0) /* If error*/
    return; /* Exit to display message*/
  end

  SW0QW00.SWAINSTP = SWAREC.SWAINSTP; /* Insp nbr*/
  SW0QW00.SWAADMM = SWAREC.SWAADMM; /* Adjusted minutes*/
  SW0QW00.XXXSTAT = SWAREC.XXXSTAT; /* Header status*/

  SW0QW00.SW0QWHPR = SWAREC.SWAPCTIN * 100; /* Header hold percent*/

  SW0QW00.SWAINDSC = SWAREC.SWAINDSC; /* header description*/
  SW0QW00.ZZZCHGCT = SWAREC.ZZZCHGCT; /* Inspection change ct*/

  SW0QW00.SW0QWDT = SWAREC.ZZZSDT; /* Setup date to work date*/

  SW0QW00.SW0QWDT = SWAREC.ZZZCHGDT; /* Change date to work date*/

  SW0QW00.SW0QWTM1 = SWAREC.ZZZCHGTM; /* Change time*/
  SW0QW00.SW0QWHH2 = SW0QW00.SW0QWHH1; /* Move HH work1 to HH work2*/
  SW0QW00.SW0QWMM2 = SW0QW00.SW0QWMM1; /* Move MM work1 to MM work2*/
  SW0QW00.SW0QWCL2 = ":"; /* Move : to hh/mm separator*/

  SW0QW00.XXXUSRID = SWAREC.XXXUSRID; /* User ID*/


   /* ------------------------------------------------------------*/
   /* Select from Inspection Task Table DB*/
   /* If found*/
     /* Select next until end of cursor*/
     /* For each record retrieved*/
        /* Select corporate task for map information*/
        /* Build Hold array*/
        /* Build temp storage*/
     /* At end of cursor close*/
   /* ------------------------------------------------------------*/

  SW0Q112(); /* Select Inspection Task DB table*/

  if (converseVar.validationMsgNum != 0) /* If error*/
    return; /* Exit to display message*/
  end

  SW0QW00.SW0QWINS = 0; /* Number of inspection tasks into TS*/
  SW0QW00.SW0QWIXM = 0; /* Current TS occurrence*/
  SW0QW00.SW0QWSWC = "N"; /* Cursor switch*/

  while (SW0QW00.SW0QWSWC == "N") /* Until end of cursor*/
    SW0Q113(); /* Fetch next row*/
  end

  SW0Q116(); /* Close the selected cursor Inspection*/

  if (SW0QM001.SW0QMTGP <= " " /* GPC not entered*/
   && SW0QM001.SW0QMTCD == 0   /* Start code not entered*/
   && SW0QM001.SW0QMTTP <= " " /* Task type not entered*/
   && SW0QM001.SW0QMTCT <= " ") /* Task category not entered*/

    if (SW0QW00.SW0QWIXM > 0) /* Remaining data*/
      SW0Q130(); /* Write remaining data to temp storage*/
    end

    return; /* Exit to format map*/
  end

  SW0Q117(); /* Select Corporate Task DB table*/

  if (converseVar.validationMsgNum != 0) /* If error*/
    return; /* Exit to display message*/
  end

  SW0QW00.SW0QWSWC = "N"; /* Cursor switch*/

  while (SW0QW00.SW0QWSWC == "N") /* Until end of cursor*/
    SW0Q118(); /* Fetch next row*/
  end

  if (SW0QW00.SW0QWIXM > 0) /* Remaining data*/
    SW0Q130(); /* Write remaining data to temp storage*/
  end

  SW0Q120(); /* Close the selected cursor Corporate*/
  SW0QW00.SW0QWSWF = "Y"; /* new data, must format screen*/
  SW0QW00.XXXTSPAG = 1; /* set first page to retrieve*/


end // end SW0Q110

// Select Inspection database
Function SW0Q111()
   /* ------------------------------------------------------------*/
   /* Select inspection DB*/
   /* ------------------------------------------------------------*/

  set SWAREC empty; /* Clear row storage area*/

  SWAREC.XWHCD = SW0QM001.XWHCD; /* Warehouse code*/
  SWAREC.SWAINSNB = SW0QM001.SWAINSNB; /* Inspection number*/

  try
    call "IO5310" ("S ", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      SW0QW00.SWAINDSC = SWAREC.SWAINDSC; /* description*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(12); /* Record not on database*/
        SLWREC.XXXLOCID = "111"; /* Module identification*/
        set SW0QM001.SWAINSNB cursor, bold; /* Highlight inspection number*/
        return; /* Return to previous process*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WAREHOUSE/INSP NUMBER ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/
  SW0QW00.SW0QWHSE = SWAREC.XWHCD; /* Warehouse code work key*/
  SW0QW00.SW0QWINP = SWAREC.SWAINSNB; /* inspection number work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q111

// Select Inspection Task DB
Function SW0Q112()
   /* ------------------------------------------------------------*/
   /* Select Inspection Task DB*/
   /* ------------------------------------------------------------*/

  set SWBREC empty; /* Clear row storage area*/

  SWBREC.XWHCD = SW0QM001.XWHCD; /* Warehouse code*/
  SWBREC.SWAINSNB = SW0QM001.SWAINSNB; /* Inspection number*/
  SWBREC.XGPCD = "*"; /* GPC code*/
  SWBREC.SL-TASK-CD = -1; /* Task code*/

  try
    call "IO5320" ("S1", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(12); /* Record not on database*/
        SLWREC.XXXLOCID = "112"; /* Module identification*/
        set SW0QM001.SW0QMTGP cursor, bold; /* Highlight cursor GPC code*/
        set SW0QM001.SW0QMTCD bold; /* Highlight startcode*/
        set SW0QM001.SW0QMTTP bold; /* Highlight task type*/
        set SW0QM001.SW0QMTCT bold; /* Highlight task category*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT INSPECTION TASK       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/
  SW0QW00.SW0QWHSE = SWBREC.XWHCD; /* Warehouse code work key*/
  SW0QW00.SW0QWINP = SWBREC.SWAINSNB; /* Inspection number work key*/
  SW0QW00.SW0QWGPC = SWBREC.XGPCD; /* GPC code work key*/
  SW0QW00.SW0QWTCD = SWBREC.SL-TASK-CD; /* Task code work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q112

// Select next Inspection Task
Function SW0Q113()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted*/
   /* ------------------------------------------------------------*/

  try
    call "IO5320" ("N1", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    SW0Q114(); /* Select unique Corporate Task*/
    SW0Q115(); /* Load into TS/SW0QTTC table*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If end of the selected set, indicate end of cursor*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* End of selected set*/

    SW0QW00.SW0QWSWC = "Y"; /* Indicate end of cursor*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT INSPECTION TASK  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/
  SW0QW00.SW0QWHSE = SWBREC.XWHCD; /* Warehouse code work key*/
  SW0QW00.SW0QWINP = SWBREC.SWAINSNB; /* Inspection number work key*/
  SW0QW00.SW0QWGPC = SWBREC.XGPCD; /* GPC code work key*/
  SW0QW00.SW0QWTCD = SWBREC.SL-TASK-CD; /* Task code work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q113

// Select unique SL Task
Function SW0Q114()
   /* ------------------------------------------------------------*/
   /* Select unique Stock Locate Task DB*/
   /* ------------------------------------------------------------*/

  set SWYREC empty; /* Clear row storage area*/

  SWYREC.XGPCD = SWBREC.XGPCD; /* GPC code*/
  SWYREC.SWYTACD = SWBREC.SL-TASK-CD; /* Task code*/

  try
    call "IO5550" ("S ", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSP TASK NOT ON SL TASK DB  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKS01"; /* Table view name*/
  SW0QW00.SW0QWHSE = SWBREC.XWHCD; /* Warehouse code work key*/
  SW0QW00.SW0QWINP = SWBREC.SWAINSNB; /* Inspection number work key*/
  SW0QW00.SW0QWGPC = SWBREC.XGPCD; /* GPC code work key*/
  SW0QW00.SW0QWTCD = SWBREC.SL-TASK-CD; /* Task code work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q114

// Load into TS/hold array
Function SW0Q115()
   /* ------------------------------------------------------------*/
   /* If there are more than 20 inspections tasks per warehouse*/
     /* then the request is aborted*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWINS = SW0QW00.SW0QWINS + 1;
                                   /* Increment inspections retrieved*/

  if (SW0QW00.SW0QWINS > 20) /* If inspection tasks allowed exceeded*/
    converseLib.validationFailed(01); /* Unexpected error*/
    SLWREC.XXXLOCID = "115"; /* Module identification*/
    if (SW0QW00.TA5TSQIX > 0) /* If temporary storage exists*/
      SW0QS01(); /* Delete temporary storage*/

      SW0QW00.SW0QWIX2 = 1; /* Initialize work index*/
      while (SW0QW00.SW0QWIX2 <= SW0QW00.SW0QWT21) /* Loop 21 times*/
        SW0QS02(); /* Clear sw0qw02*/
      end

    end
    exit stack; /* Return to top*/
  end

   /* ------------------------------------------------------------*/
   /* Load swbrec/swyrec into table hold array area*/
   /* ------------------------------------------------------------*/

  SW0QW02.SWYTACD[SW0QWINS] = SWBREC.SL-TASK-CD; /* Task code*/
  SW0QW02.XTCCD[SW0QWINS] = SWYREC.XTCCD; /* cat code*/

  SW0QW02.SWYTAMM[SW0QWINS] = SWYREC.SWYTAMM; /* Minutes*/
  SW0QW00.SWYTAMM = SW0QW00.SWYTAMM + SW0QW02.SWYTAMM[SW0QWINS];
  SW0QW02.SWYTAMM[SW0QWT21] = SW0QW00.SWYTAMM;

  SW0QW02.SW0QWPER[SW0QWINS] = SWBREC.SWAPCTIN * 100; /* percent*/
  SW0QW02.SW0QWPER[SW0QWT21] = SW0QW00.SW0QWPER;

  SW0QW02.SW0QWDB[SW0QWINS] = "I"; /* Inspection task database*/

   /* ------------------------------------------------------------*/
   /* Load swbrec/swyrec into sw0qW01 temp storage area*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWIXM = SW0QW00.SW0QWIXM + 1; /* Increment TS index*/

  SW0QW01.SW0QWLU[SW0QWIXM] = "Y"; /* Line has data*/
  SW0QW01.SW0QWDB[SW0QWIXM] = "I"; /* Inspection DB*/
  SW0QW01.ZZZCHGCT[SW0QWIXM] = SWBREC.ZZZCHGCT; /* ZZ chg cnt*/
  SW0QW01.SWYTACD[SW0QWIXM] = SWBREC.SL-TASK-CD; /* Task code*/
  SW0QW01.XGPCD[SW0QWIXM] = SWBREC.XGPCD; /* GPC code*/
  SW0QW01.SWYTADSC[SW0QWIXM] = SWYREC.SWYTADSC; /* Task description*/
  SW0QW01.SWZTECD[SW0QWIXM] = SWBREC.SL-TASK-ERR-CD; /* Error*/
  SW0QW01.SWYTAMM[SW0QWIXM] = SWYREC.SWYTAMM; /* Minutes*/
  SW0QW01.XTCCD[SW0QWIXM] = SWYREC.XTCCD; /* category code*/
  SW0QW01.XXXSTAT[SW0QWIXM] = SWBREC.XXXSTAT; /* Status*/
  SW0QW01.SW0QWPER[SW0QWIXM] = SWBREC.SWAPCTIN * 100; /* Percentage*/

   /* ------------------------------------------------------------*/
   /* Test for full temp storage area*/
   /* ------------------------------------------------------------*/

  if (SW0QW00.SW0QWIXM > 10) /* TS area full*/
    SW0Q130(); /* Write Temp Storage*/
  end

end // end SW0Q115

// Close cursor Inspection Task
Function SW0Q116()
   /* ------------------------------------------------------------*/
   /* Close selected cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO5320" ("C1", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "116"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q116

// Select wildcard Corporate Task
Function SW0Q117()
   /* ------------------------------------------------------------*/
   /* Select wildcard Corporate Task DB*/
   /* ------------------------------------------------------------*/

  set SWYREC empty; /* Clear row storage area*/

  if (SW0QM001.SW0QMTGP > " ") /* GPC code entered*/
    SWYREC.XGPCD = SW0QM001.SW0QMTGP; /* GPC code*/
  else
    SWYREC.XGPCD = "*"; /* GPC code*/
  end

  if (SW0QM001.SW0QMTCD == 0) /* If Start code entered*/
    SWYREC.SWYTACD = -1; /* Start code*/
  else
    SWYREC.SWYTACD = SW0QM001.SW0QMTCD; /* Start code*/
  end

  if (SW0QM001.SW0QMTTP > " ") /* Task type entered*/
    SWYREC.XTYCD = SW0QM001.SW0QMTTP; /* Task Category code*/
  else
    SWYREC.XTYCD = "*"; /* Task Category code*/
  end

  if (SW0QM001.SW0QMTCT > " ") /* Task Category entered*/
    SWYREC.XTCCD = SW0QM001.SW0QMTCT; /* Task Category code*/
  else
    SWYREC.XTCCD = "*"; /* Task Category code*/
  end

  SWYREC.XXXSTAT = "A"; /* Accept 'active' status only*/

  try
    call "IO5550" ("S1", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* not found*/

        converseLib.validationFailed(012); /* record not on database*/
        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "117"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CORP TASK WILDCARD SELECT    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/
  SW0QW00.SW0QWGPC = SWYREC.XGPCD; /* GPC code work key*/
  SW0QW00.SW0QWTCD = SWYREC.SWYTACD; /* Task code work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYX; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q117

// Select next Corporate Task
Function SW0Q118()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted*/
   /* ------------------------------------------------------------*/


  try
    call "IO5550" ("N1", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    if (SWYREC.SWYTACD in SW0QW02.SWYTACD) /* Task code already in table*/
       /* NEXT SENTENCE           Do not load into temp storage*/
    else
      SW0Q119(); /* Load into temporary storage*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If end of the selected set, indicate end of cursor*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* End of selected set*/

    SW0QW00.SW0QWSWC = "Y"; /* Indicate end of cursor*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "118"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT CORPORATE TASK   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VXTA0001"; /* Table view name*/
  SW0QW00.SW0QWGPC = SWYREC.XGPCD; /* GPC code work key*/
  SW0QW00.SW0QWTCD = SWYREC.SWYTACD; /* Task code work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYX; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q118

// Load Corp into Temp Storage
Function SW0Q119()
   /* ------------------------------------------------------------*/
   /* Move Corporate Task data into temporary storage*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWIXM = SW0QW00.SW0QWIXM + 1; /* Increment TS index*/

  SW0QW01.SW0QWLU[SW0QWIXM] = "Y"; /* Line has data*/
  SW0QW01.SW0QWDB[SW0QWIXM] = "C"; /* Corporate DB*/
  SW0QW01.ZZZCHGCT[SW0QWIXM] = 0; /* ZZ chg cnt*/

  SW0QW01.XGPCD[SW0QWIXM] = SW0QM001.SW0QMTGP; /* Task code*/
  SW0QW01.SWYTACD[SW0QWIXM] = SWYREC.SWYTACD; /* Task code*/
  SW0QW01.SWYTADSC[SW0QWIXM] = SWYREC.SWYTADSC; /* Task description*/
  SW0QW01.SWZTECD[SW0QWIXM] = SWYREC.SWZTECD; /* Error*/
  SW0QW01.SW0QWOER[SW0QWIXM] = SWYREC.SWZTECD; /* Old Error*/
  SW0QW01.XTCCD[SW0QWIXM] = SWYREC.XTCCD; /* category*/
  SW0QW01.SWYTAMM[SW0QWIXM] = SWYREC.SWYTAMM; /* Minutes*/
  SW0QW01.SW0QWOMM[SW0QWIXM] = SWYREC.SWYTAMM; /* Old Minutes*/
  SW0QW01.XXXSTAT[SW0QWIXM] = SWYREC.XXXSTAT; /* Status*/
  SW0QW01.SW0QWOST[SW0QWIXM] = SWYREC.XXXSTAT; /* Old Status*/
  SW0QW01.SW0QWPER[SW0QWIXM] = 100; /* Percentage*/

   /* ------------------------------------------------------------*/
   /* Test for full temp storage area*/
   /* ------------------------------------------------------------*/

  if (SW0QW00.SW0QWIXM > 10) /* TS area full*/
    SW0Q130(); /* Write Temp Storage*/
  end

end // end SW0Q119

// Close cursor Corporate Task
Function SW0Q120()
   /* ------------------------------------------------------------*/
   /* Close selected cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO5550" ("C1", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVTASKS1"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q120

// Write temporary storage
Function SW0Q130()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0QW01.XXXTSLEN = SW0QW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0QW01 empty; /* M001 display storage*/

    SW0QW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    SW0QW00.XXXTSPAG = TA5REC.TA5TSQIX; /* Current page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    SW0QW00.SW0QWIXM = 0; /* Reset TS index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "120"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q130

// Format and converse the map
Function SW0Q200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0QW00.SW0QWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0QW00.SW0QWSWF == "Y") /* Map must be formatted*/
      SW0Q210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW0QM001.XXXTSPAG = SW0QW00.XXXTSPAG; /* current page*/
  SW0QM001.TA5TSQIX = SW0QW00.TA5TSQIX; /* max pages*/

  SW0QM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0QM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0QM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0QM001 alarm; /* Indicate sound alarm*/

  end

   /* ------------------------------------------------------------*/
   /* Because of map modifications (see change P-13), SW0QMAMM*/
   /* would initially display a zero.  The code below will cause*/
   /* the field to be invisible until valid data is entered and*/
   /* a good DB2 call is made.    01/07/90  RVAKEL*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SWAINSNB < 1)
    set SW0QM001.SW0QMAMM invisible;
  end

  converse SW0QM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information*/
   /* ------------------------------------------------------------*/

  SW0QM001.XXXMODID = " "; /* Module identification*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0QM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = SW0QM001.CAITEM; /* Application data*/

end // end SW0Q200

// Format the display data
Function SW0Q210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0QM001 initial; /* M001 input/output area*/
  SW0QW00.SW0QWSWF = "N"; /* clear format flag*/
   /* format heading fields*/
  SW0QM001.XWHCD = SW0QW00.XWHCD; /* warehouse*/
  SW0QM001.XWHDESC = SW0QW00.XWHABRV; /* warehouse desc*/
  SW0QM001.SWAINSNB = SW0QW00.SWAINSNB; /* Header insp number*/
  SW0QM001.SW0QMTGP = SW0QW00.SW0QMTGP; /* Header gpc code*/
  SW0QM001.SW0QMTCD = SW0QW00.SW0QMTCD; /* Header start code*/
  SW0QM001.SW0QMTCT = SW0QW00.SW0QMTCT; /* Header task type*/
  SW0QM001.SW0QMTTP = SW0QW00.SW0QMTTP; /* Header task category*/

  SW0QM001.SWAINSTP = SW0QW00.SWAINSTP; /* Insp nbr*/
  SW0QM001.SW0QMAMM = SW0QW00.SWAADMM; /* Adjusted minutes*/
  SW0QM001.SW0QMEMM = SW0QW00.SWYTAMM; /* estimated minutes*/
  SW0QM001.SW0QMIST = SW0QW00.XXXSTAT; /* Header status*/
  SW0QM001.SW0QMPIN = SW0QW00.SW0QWHPR; /* Header hold percent*/
  SW0QM001.SW0QMDSC = SW0QW00.SWAINDSC; /* header description*/

  SW0QM001.SW0QMSMM = SW0QW00.SW0QWDMM; /* Setup date MM*/
  SW0QM001.SW0QMSDD = SW0QW00.SW0QWDDD; /* Setup date DD*/
  SW0QM001.SW0QMSYY = SW0QW00.SW0QWDYY; /* Setup date YY*/

  SW0QM001.SW0QMCMM = SW0QW00.SW0QWDMM; /* Change date MM*/
  SW0QM001.SW0QMCDD = SW0QW00.SW0QWDDD; /* Change date DD*/
  SW0QM001.SW0QMCYY = SW0QW00.SW0QWDYY; /* Change date YY*/

  SW0QM001.SW0QMCTM = SW0QW00.SW0QWTM2; /* Move work time 1 to map*/
  SW0QM001.XXXUSRID = SW0QW00.XXXUSRID; /* User ID*/

  SW0QW00.SW0QWSWF = "N"; /* Format the map switch*/
  SW0QW00.SW0QWSWR = "N"; /* request for data*/

  SW0QS05(); /* Header attributes*/

  if (SW0QW00.TA5TSQIX > 0) /* pages were formatted*/

    if (SW0QW00.XXXTSPAG != TA5REC.TA5TSQIX) /* desired page not current*/

      TA5REC.TA5TSQIX = SW0QW00.XXXTSPAG; /* set new page*/
      SW0QS03(); /* read t/s*/

      SW0QW00.SW0QWIXM = 1; /* Initialize map index field*/
      while (SW0QW00.SW0QWIXM <= 11) /* While occur is 1 to 11*/
        SW0QS04(); /* Move t/s fields to map occur*/
      end

    end

  end
  SW0QW00.SW0QWIXM = 1; /* Initialize map index field*/
  while (SW0QW00.SW0QWIXM <= 11) /* While occur is 1 to 11*/
    SW0QS06(); /* Move attributes to map occur*/
  end

  if (SW0QW00.SW0QWFFL == "Y")

    if (SW0QW00.XWHCD == "  ")

      set SW0QM001.XWHCD cursor;

    else

      set SW0QM001.SWAINSNB cursor;

    end
    SW0QW00.SW0QWFFL = "N"; /* clear first time flag*/

  end


end // end SW0Q210

// Check attention identifier
Function SW0Q300()
   /* ------------------------------------------------------------*/
   /* Attention identifiers are processed in the following order:*/
   /* - PA2 cancel perform*/
   /* - Fast path with <enter> key*/
   /* - Transfers to other applications*/
   /* - PF7/8 perform for plausible/allowable scrolling*/
   /* - If not <enter> , then invalid pf key message*/
   /* - <enter> key and*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0Q310(); /* Clear or restore screen*/
    return; /* Exit to set attributes*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/


      SW0QS01(); /* Delete temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SW0QM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(166); /* cant get to requested appl*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0QM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SW0G"; /* TO application*/
    end

    SW0QS01(); /* Delete temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end


  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && COMMAREA.CAADDFL == "Y")     /* User has ADD security*/
    COMMAREA.CATOAP = "SW0P"; /* TO application*/
    SW0QS01(); /* Delete temporary storage*/
    XSSL001(); /* Exit to another application*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   && COMMAREA.CAINQFL == "Y")     /* User has INQ security*/
    COMMAREA.CATOAP = "SW0F"; /* TO application*/
    SW0QS01(); /* Delete temporary storage*/
    XSSL001(); /* Exit to another application*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Process scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll backward request*/
   || converseVar.eventKey is pf8) /* Scroll forward  request*/
    if (SW0QW00.TA5TSQIX > 0) /* If temporary storage exists*/
      SW0QW00.SW0QWTS = "Y"; /* Restore screen on next pa2*/
    else
      SW0QW00.SW0QWTS = "N"; /* Cancel screen on next pa2*/
    end

  end

  if (converseVar.eventKey is pf7 /* scroll backward*/
   || converseVar.eventKey is pf8) /* scroll forward*/
    SW0QM001.XWHCD = SW0QW00.XWHCD; /* Reset warehouse*/
    SW0QM001.SWAINSNB = SW0QW00.SWAINSNB; /* Reset Inspection nbr*/
    SW0QM001.SW0QMTCD = SW0QW00.SW0QMTCD; /* Reset start code*/
    SW0QM001.SW0QMTGP = SW0QW00.SW0QMTGP; /* Reset GPC code*/
    SW0QM001.SW0QMTTP = SW0QW00.SW0QMTTP; /* Reset task type*/
    SW0QM001.SW0QMTCT = SW0QW00.SW0QMTCT; /* Reset task category*/
    if (SW0QW00.TA5TSQIX > 0) /* temp storage exists*/

      SW0Q320(); /* Edit for existing next page*/
      SW0QW00.SW0QWIXM = 12; /* Move 0 to work index*/
      while (SW0QW00.SW0QWIXM > 1) /* loop 11 times for scroll on chg/del*/
        SW0QW00.SW0QWIXM = SW0QW00.SW0QWIXM - 1; /* Decrement loop index*/
        if (SW0QM001.SW0QMFNC[SW0QWIXM] == "C" /* Change pending*/
         || SW0QM001.SW0QMFNC[SW0QWIXM] == "D") /* Delete pending*/
          set SW0QM001.SW0QMFNC[SW0QWIXM] bold; /* Highlight selection*/
          converseLib.validationFailed(104); /* Cannot scroll - update pend*/
          exit stack; /* Exit to display map*/
        end
      end
      return; /* Exit sw0q300*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER key*/
        /* update attempt has been made so set the switch*/
        /* that will restore the screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    if (SW0QW00.TA5TSQIX > 0) /* If temporary storage exists*/
      SW0QW00.SW0QWTS = "Y"; /* Restore screen on next pa2*/
    else
      SW0QW00.SW0QWTS = "N"; /* Cancel screen on next pa2*/
    end
  end


end // end SW0Q300

// PA2 Cancel Process
Function SW0Q310()
   /* ------------------------------------------------------------*/
   /* If occur data not entered for update then clear screen*/
     /* and return*/
   /* If update attempt was made*/
     /* restore screen from temp storage*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/
  COMMAREA.CAITEM = " "; /* Application data*/

  if (SW0QW00.SW0QWTS == "N") /* Clear screen*/
    SW0QW00.SW0QWSWF = "Y"; /* Format the map switch*/
    SW0QW00.SW0QWSWR = "N"; /* Request for data switch*/

  else /* Exit*/

    SW0QM001.XWHCD = SW0QW00.XWHCD; /* reset warehouse*/
    SW0QM001.SWAINSNB = SW0QW00.SWAINSNB; /* reset Insp nbr*/
    SW0QM001.SW0QMAMM = SWAREC.SWAADMM; /* reset adj minutes*/
    SW0QM001.SW0QMEMM = SW0QW02.SWYTAMM[SW0QWT21];
                                   /* reset est minutes*/
    SW0QM001.SW0QMIST = SWAREC.XXXSTAT; /* reset hdr status*/
    SW0QM001.SW0QMPIN = SWAREC.SWAPCTIN * 100; /* reset hdr percent*/
    SW0QM001.SW0QMTCD = SW0QW00.SW0QMTCD; /* reset start code*/
    SW0QM001.SW0QMTGP = SW0QW00.SW0QMTGP; /* reset GPC code*/
    SW0QM001.SW0QMTTP = SW0QW00.SW0QMTTP; /* reset task type*/
    SW0QM001.SW0QMTCT = SW0QW00.SW0QMTCT; /* reset task category*/
    SW0QM001.SW0QMDSC = SWAREC.SWAINDSC; /* reset hdr descrptn*/

    SW0QW00.SW0QWIXM = 1; /* Initialize map field index*/
    while (SW0QW00.SW0QWIXM <= 11) /* while occur is 1 to 11*/
      SW0QS04(); /* move ts occur to map occur*/
    end

    SW0QW00.SW0QWTS = "N"; /* Update session will be cancelled*/

  end


end // end SW0Q310

// Scroll validity check
Function SW0Q320()
   /* ------------------------------------------------------------*/
   /* Test that previous or next page exists*/
   /* Scrolling request (when valid) is handled in sw0q630*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Backward scrolling*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If scroll backward request*/

    if (SW0QW00.XXXTSPAG <= 1) /* If already on page one*/
      SW0QW00.XXXTSPAG = 1; /* Safety reset*/
      converseLib.validationFailed(07); /* Unable to scroll backward*/
      SLWREC.XXXLOCID = "320"; /* Module identification*/
      exit stack; /* Return to converse map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Forward scrolling*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* If scroll forward request*/

    if (SW0QW00.XXXTSPAG >= SW0QW00.TA5TSQIX) /* if on last page*/
      SW0QW00.XXXTSPAG = SW0QW00.TA5TSQIX; /* Safety reset*/
      converseLib.validationFailed(08); /* Unable to scroll forward*/
      SLWREC.XXXLOCID = "320"; /* Module identification*/
      exit stack; /* Return to converse map*/

    end
  end

end // end SW0Q320

// Reset highlighted fields
Function SW0Q400()
   /* ------------------------------------------------------------*/
   /* Reset header/trailer attributes*/
   /* Reset attributes for all 11 occurrences*/
   /* Pop-up window warehouse code*/
   /* Pop-up window gpc code*/
   /* Pop-up window task type*/
   /* Pop-up window task category*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SW0QS05(); /* Header/trailer attributes*/

   /* ------------------------------------------------------------*/
   /* Set attributes for all 11 occurrences.*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWIXM = 1; /* Initialize work subscript*/
  while (SW0QW00.SW0QWIXM <= 11) /* Until end of lines*/
    SW0QS06(); /* Set attributes for work sub occur*/
  end

   /* ------------------------------------------------------------*/
   /* Return for Cancel*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If cancel*/
    exit stack; /* exit to converse map*/
  end

   /* ------------------------------------------------------------*/
   /* Pop-up window warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.XWHCD == "?") /* warehouse code list requested*/

    SW0Q410(); /* Pop-up warehouse code*/

  end

   /* ------------------------------------------------------------*/
   /* Pop-up window gpc code*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTGP == "?") /* gpc code list requested*/

    SW0Q420(); /* Pop-up gpc code*/

  end

   /* ------------------------------------------------------------*/
   /* Pop-up window task type*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTTP == "?") /* task type list requested*/

    SW0Q430(); /* Pop-up task type*/

  end

   /* ------------------------------------------------------------*/
   /* Pop-up window task category*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTCT == "?") /* task category list requested*/

    SW0Q440(); /* Pop-up task category*/

  end
  converseLib.clearScreen();
   /* clear screen*/


end // end SW0Q400

// Pop-up window - warehouse code
Function SW0Q410()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse code codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "  WAREHOUSE CODE"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXWH01(); /* Display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    SW0QM001.XWHCD = " "; /* Clear warehouse*/
  else
    SW0QM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected xwhcd*/
    SW0QM001.XWHDESC = XWHTBL.XWHABRV[XX0XWPIX]; /* xwhcd desc*/

  end


end // end SW0Q410

// Pop-up window - gpc code
Function SW0Q420()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of gpc code codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "  GPC CODE"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXGP01(); /* Display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    SW0QM001.SW0QMTGP = " "; /* Clear GPC code*/
  else
    SW0QM001.SW0QMTGP = XGPTBL.XGPCD[XX0XWPIX]; /* Selected gpc*/

  end


end // end SW0Q420

// Pop-up window - task type
Function SW0Q430()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of task type codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "  TASK TYPE"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXTY01(); /* Display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    SW0QM001.SW0QMTTP = " "; /* Clear type*/
  else
    SW0QM001.SW0QMTTP = XTYTBL.XTYCD[XX0XWPIX]; /* Selected type*/

  end


end // end SW0Q430

// Pop-up window - task category
Function SW0Q440()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of task category codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "  TASK CATEGORY"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXTC01(); /* Display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

    SW0QM001.SW0QMTCT = " "; /* Clear type*/
  else
    SW0QM001.SW0QMTCT = XTCTBL.XTCCD[XX0XWPIX]; /* Selected category*/

  end


end // end SW0Q440

// Verify/edit data
Function SW0Q500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Compare header data for changes*/
      /* If change*/
          /* delete temporary storage*/
          /* ezeflo to sw0q100 to obtain data*/
   /* Preliminary edits of ADD/MNT requests*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0QM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(02); /* Invalid value entered*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Check for prior error*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack; /* Return to top*/
  end

   /* ------------------------------------------------------------*/
   /* Reset Edit error switch*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWEDP = "Y"; /* Assume edits will pass*/
  SW0QW00.SW0QWNWD = "N"; /* Assume no new header data*/
  SW0QW00.SW0QWSWU = "N"; /* Assume temp storage won't change*/

   /* ------------------------------------------------------------*/
   /* Compare current map header data with w-s for any changes*/
   /* If hdr data has been changed, set new data switch to 'y'*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Compare warehouse*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.XWHCD != SW0QW00.XWHCD /* Check for warehouse change*/
   || SW0QM001.XWHCD <= " ")          /* No warehouse entry*/
    SW0QW00.SW0QWNWD = "Y"; /* Flag new header data switch*/
  end

   /* ------------------------------------------------------------*/
   /* Compare inspection number*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SWAINSNB != SW0QW00.SWAINSNB /* Header insp number change*/
   || SW0QM001.SWAINSNB <= 0)               /* 0 is an invalid insp number*/
    SW0QW00.SW0QWNWD = "Y"; /* Flag new header data switch*/
  end

   /* ------------------------------------------------------------*/
   /* Compare GPC code*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTGP <= " " /* If no header gpc code entered*/
   && SW0QW00.SW0QMTGP <= " ") /* No previous header gpc code*/
      /* NEXT SENTENCE*/
  else
    if (SW0QM001.SW0QMTGP != SW0QW00.SW0QMTGP) /* Header gpc code change*/
      SW0QW00.SW0QWNWD = "Y"; /* Flag new header data switch*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Compare start code*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTCD != SW0QW00.SW0QMTCD) /* Header start code change*/
    SW0QW00.SW0QWNWD = "Y"; /* Flag new header data switch*/
  end

   /* ------------------------------------------------------------*/
   /* Compare task type*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTCT <= " " /* If no header task type entered*/
   && SW0QW00.SW0QMTCT <= " ") /* No previous header task type*/
      /* NEXT SENTENCE*/
  else
    if (SW0QM001.SW0QMTCT != SW0QW00.SW0QMTCT) /* Header task type change*/
      SW0QW00.SW0QWNWD = "Y"; /* Flag new header data switch*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Compare task category*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTTP <= " " /* If no header task category entered*/
   && SW0QW00.SW0QMTTP <= " ") /* No previous header task category*/
      /* NEXT SENTENCE*/
  else
    if (SW0QM001.SW0QMTTP != SW0QW00.SW0QMTTP)
                                   /* Header task category change*/
      SW0QW00.SW0QWNWD = "Y"; /* Flag new header data switch*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If any changes or no warehouse entered, edit header data*/
   /* ------------------------------------------------------------*/

  if (SW0QW00.SW0QWNWD == "Y") /* There is new data*/
    SW0QW00.SW0QWSWR = "Y"; /* data request*/
    SW0QW00.SW0QWTS = "N"; /* On PA2, Clear (not restore) screen*/
    SW0Q510(); /* Edit header data*/
    exit stack; /* Return to Main Process*/
  end

   /* ------------------------------------------------------------*/
   /* Loop for total adds/valid security*/

   /* Edit row data*/
   /* If Adds backed out, rewrite temp storage regardless of*/
     /* other errors*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWIXM = 12; /* Initialize occur index*/
  SW0QW00.SW0QWCNT = 0; /* Initialize work counter*/
  SW0QW00.SW0QWCT2 = SW0QW00.SW0QWINS; /* Number exisitng insp tasks*/

  while (SW0QW00.SW0QWIXM > 1) /* Loop 11 times*/
    SW0QW00.SW0QWIXM = SW0QW00.SW0QWIXM - 1; /* decrement occur index*/
    SW0Q520(); /* SECURITY/20 ADD LIMIT*/
    SW0Q530(); /* Edit row data*/
  end

  if (SW0QW00.SW0QWCT2 > 20) /* If 20 allowed insp tasks execeed*/
    converseLib.validationFailed(274); /* Maximum insp tasks allowed exceeded*/
  end

  if (SW0QW00.SW0QWSWU == "Y") /* Update TS switch on*/
    SW0QS07(); /* Rewrite temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Edit remaining header data which does not affect selection*/
   /* criteria*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Edit Header description*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMDSC <= " ") /* If description not entered*/
    converseLib.validationFailed(11); /* Invalid value*/
    SW0QW00.SW0QWEDP = "N"; /* Edits not pass*/
    set SW0QM001.SW0QMDSC cursor, bold; /* Highlight, cursor*/
    SLWREC.XXXLOCID = "500"; /* Module identification*/
  end

   /* ------------------------------------------------------------*/
   /* Compare Header percentage with tabled percentage*/
   /* If larger than any tabled percentage, then ERROR*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If <ENTER> key*/

    if (SW0QM001.SW0QMPIN < 101) /* between 0 and 100*/
       /* next sentence*/
    else

      SW0QW00.SW0QWEDP = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "500"; /* move paragraph number to map*/
      set SW0QM001.SW0QMPIN cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/
    end

    SW0QW00.SW0QWIXM = 1; /* Initialize index*/
    SW0QW00.SW0QWLPT = SW0QW02.SW0QWPER[SW0QWIXM];

    while (SW0QW00.SW0QWIXM < 21 /* Loop 20 times*/
     && SW0QW02.SWYTACD[SW0QWIXM] > 0) /* and table has data*/

      if (SW0QW02.SW0QWPER[SW0QWIXM] > SW0QW00.SW0QWLPT)
        SW0QW00.SW0QWLPT = SW0QW02.SW0QWPER[SW0QWIXM];
      end

      SW0QW00.SW0QWIXM = SW0QW00.SW0QWIXM + 1; /* increment index*/

    end

    if (SW0QM001.SW0QMPIN > SW0QW00.SW0QWLPT) /* compare percent*/

      if (SW0QW00.SW0QWLPT == 0) /* if largest task percent is zero*/

        /* next sentence*/

      else

        converseLib.validationFailed(292); /* Hdr percent exceeds table*/
        SW0QW00.SW0QWEDP = "N"; /* Edits not pass*/
        set SW0QM001.SW0QMPIN cursor, bold; /* Cursor, bright*/
        SLWREC.XXXLOCID = "500"; /* Module identification*/

      end
    end
  end
   /* ------------------------------------------------------------*/
   /* Edit Header status*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMIST == "A" /* IF ACTIVE*/
   || SW0QM001.SW0QMIST == "I") /* IF INACTIVE*/
    /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(11); /* Invalid value*/
    SW0QW00.SW0QWEDP = "N"; /* Edits not pass*/
    set SW0QM001.SW0QMIST cursor, bold; /* Highlight, cursor*/
    SLWREC.XXXLOCID = "500"; /* Module identification*/
  end

   /* ------------------------------------------------------------*/
   /* Edit header task type*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SWAINSTP in XTYTBL.XTYCD /* If header task type in table*/
   && SW0QM001.SWAINSTP != "99")        /* not eof table*/
  else /* NEXT SENTENCE*/
    SW0QW00.SW0QWEDP = "N"; /* set edit switch to not pass*/
    SLWREC.XXXLOCID = "510"; /* Module identification*/
    set SW0QM001.SWAINSTP cursor, bold; /* Highlight, cursor*/
    converseLib.validationFailed(11); /* Invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* If errors, EZEFLO to bypass applying updates*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* ; If errors*/
   || SW0QW00.SW0QWEDP == "N")         
    exit stack; /* Return to top*/
  end

   /* ------------------------------------------------------------*/
   /* Check for data changes*/
     /* If no changes were made, display NEW INPUT REQUIRED msg*/
   /* Note: If a change was done on another page, it must have*/
         /* been an 'A'DD request, thereby adding to*/
         /* sw0qw02.swytamm(SW0QWT21)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If update requestes*/
    if (SW0QWCNT == 0                                  /* If no row updates*/
     && SW0QM001.SWAINSTP == SWAREC.SWAINSTP           /* Header task type*/
     && SW0QM001.SW0QMEMM == SW0QW02.SWYTAMM[SW0QWT21] /* estimated minutes*/
     && SW0QM001.SW0QMAMM == SWAREC.SWAADMM            /* Adjusted minutes*/
     && SW0QM001.SW0QMIST == SWAREC.XXXSTAT            /* Status*/
     && SW0QM001.SW0QMPIN == SW0QW00.SW0QWHPR          /* Percent*/
     && SW0QM001.SW0QMDSC == SWAREC.SWAINDSC)          /* Description*/
      converseLib.validationFailed(05); /* New input required*/
    end
  end


end // end SW0Q500

// Edit Map header data
Function SW0Q510()
   /* ------------------------------------------------------------*/
   /* Edit map header data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Clear row and page fields on map*/
   /* ------------------------------------------------------------*/

  SW0QM001.XXXTSPAG = 0; /* Current map page*/
  SW0QM001.TA5TSQIX = 0; /* Maximum map page*/
  SW0QW00.SW0QWIXM = 1; /* Initialize index to 1*/
  set SW0QW01 empty; /* clear storage*/
  while (SW0QW00.SW0QWIXM <= 11) /* Loop 11 times*/
    SW0QS04(); /* Move (empty) temp storage*/
  end
  SW0QW00.SW0QWIXM = 1; /* Initialize index to 1*/
  while (SW0QW00.SW0QWIXM <= 11) /* Loop 11 times*/
    SW0QS06(); /* Reset attributes*/
  end

   /* ------------------------------------------------------------*/
   /* Task Selection criteria relational test*/
   /* If any data is entered, then GPC and Task type must be*/
      /* entered*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTGP <= " ") /* If GPC code not entered*/
    if (SW0QM001.SW0QMTCT > " " /* Task category  entered*/
     || SW0QM001.SW0QMTTP > " " /* Task type entered*/
     || SW0QM001.SW0QMTCD > 0)  /* Start code entered*/
      SW0QW00.SW0QWEDP = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0QM001.SW0QMTGP cursor, bold; /* Highlight*/
      converseLib.validationFailed(09); /* Required field*/

    end
  end

  if (SW0QM001.SW0QMTTP <= " ") /* If task type not entered*/
    if (SW0QM001.SW0QMTCT > " " /* Task category  entered*/
     || SW0QM001.SW0QMTGP > " " /* GPC code entered*/
     || SW0QM001.SW0QMTCD > 0)  /* Start code entered*/
      SW0QW00.SW0QWEDP = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0QM001.SW0QMTTP cursor, bold; /* Highlight*/
      converseLib.validationFailed(09); /* Required field*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Check for task category in table*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTCT in XTCTBL.XTCCD /* if task category in table*/
   && SW0QM001.SW0QMTCT != "999")       /* Not EOF table*/
  else
    if (SW0QM001.SW0QMTCT <= " ") /* if task category not entered*/
    else
      SW0QW00.SW0QWEDP = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0QM001.SW0QMTCT cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Check for task type in table*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTTP in XTYTBL.XTYCD /* if task type in table*/
   && SW0QM001.SW0QMTTP != "99")        /* Not EOF table*/
  else
    if (SW0QM001.SW0QMTTP <= " ") /* if task type not entered*/
    else
      SW0QW00.SW0QWEDP = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0QM001.SW0QMTTP cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Numeric check on Start Code*/
   /* ------------------------------------------------------------*/

   /* NO EDIT FOR THIS FIELD*/

   /* ------------------------------------------------------------*/
   /* Check for GPC code in table*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMTGP in XGPTBL.XGPCD /* if GPC code in table*/
   && SW0QM001.SW0QMTGP != "99")        /* Not EOF table*/
  else
    if (SW0QM001.SW0QMTGP <= " ") /* if GPC code not entered*/
       /* next sentence*/

    else
      SW0QW00.SW0QWEDP = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      set SW0QM001.SW0QMTGP cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Edit header Inspection number*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SWAINSNB == 0) /* If insp nbr not gt 0*/
    SW0QW00.SW0QWEDP = "N"; /* Set edit switch to not pass*/
    SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
    set SW0QM001.SWAINSNB cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* required field*/

  end

   /* ------------------------------------------------------------*/
   /* Preliminary check for data entered in warehouse field*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.XWHCD == "  ") /* no warehouse entered*/
    SW0QW00.SW0QWEDP = "N"; /* Set edit switch to not pass*/
    SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
    SW0QM001.XWHDESC = " "; /* Clear warehouse description*/
    set SW0QM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* required field*/

  else
    if (SW0QM001.XWHCD in XWHTBL.XWHCD /* If warehouse in table*/
     && SW0QM001.XWHCD > " "           /* Table hdr makes for a blank xwhcd entry*/
     && SW0QM001.XWHCD != "99")        /* Not EOF table*/
      if (SW0QM001.XWHCD in XWHTBL.XWHCD)
        SW0QM001.XWHDESC = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end
    else
      SW0QW00.SW0QWEDP = "N"; /* Set edit switch to not pass*/
      SLWREC.XXXLOCID = "510"; /* move paragraph number to map*/
      SW0QM001.XWHDESC = " "; /* Clear warehouse description*/
      set SW0QM001.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value entered*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If header edits pass, then move map to working storage*/
   /* ------------------------------------------------------------*/

  if (SW0QW00.SW0QWEDP == "Y") /* No header errors*/
    SW0QW00.XWHCD = SW0QM001.XWHCD; /* Warehouse*/
    SW0QW00.SWAINSNB = SW0QM001.SWAINSNB; /* header Insp number*/
    SW0QW00.SW0QMTCD = SW0QM001.SW0QMTCD; /* Header lane number*/
    SW0QW00.SW0QMTGP = SW0QM001.SW0QMTGP; /* Header GPC code*/
    SW0QW00.SW0QMTTP = SW0QM001.SW0QMTTP; /* Header Task type*/
    SW0QW00.SW0QMTCT = SW0QM001.SW0QMTCT; /* Header Task category*/
  end


end // end SW0Q510

// Security/20 limit check
Function SW0Q520()
   /* ------------------------------------------------------------*/
   /* No data on row*/
   /* ------------------------------------------------------------*/

  if (SW0QW01.SW0QWLU[SW0QWIXM] != "Y") /* No data in TS occur*/
    return; /* do not edit*/
  end

   /* ------------------------------------------------------------*/
   /* Security*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "D") /* If delete requested*/
    if (COMMAREA.CADELFL == "Y") /* If delete security*/
       /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(246); /* No authority*/
      SW0QW00.SW0QWEDP = "N"; /* Edit not passed*/
      set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
    end
  end

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "C") /* If change requested*/
    if (COMMAREA.CACHGFL == "Y") /* If change security*/
       /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(246); /* No authority*/
      SW0QW00.SW0QWEDP = "N"; /* Edit not passed*/
      set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
    end
  end

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "A") /* If add requested*/
    if (COMMAREA.CAADDFL == "Y") /* If add security*/
       /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(246); /* No authority*/
      SW0QW00.SW0QWEDP = "N"; /* Edit not passed*/
      SLWREC.XXXLOCID = "520"; /* Module Identification*/
      set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
    end
  end

  if (converseVar.validationMsgNum == 246) /* If no authority, then reset rows*/
    SW0QM001.SWYTADSC[SW0QWIXM] = SW0QW01.SWYTADSC[SW0QWIXM]; /* desc*/
    SW0QM001.SWZTECD[SW0QWIXM] = SW0QW01.SWZTECD[SW0QWIXM]; /* error*/
    SW0QM001.SWYTAMM[SW0QWIXM] = SW0QW01.SWYTAMM[SW0QWIXM]; /* minutes*/
    SW0QM001.XXXSTAT[SW0QWIXM] = SW0QW01.XXXSTAT[SW0QWIXM]; /* status*/
    SW0QM001.SWAPCTIN[SW0QWIXM] = SW0QW01.SW0QWPER[SW0QWIXM]; /* perc*/
    return; /* do not continue*/
  end

   /* ------------------------------------------------------------*/
   /* Previous ADD request cancelled*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] <= " " /* If no map request made*/
   && SW0QW01.SW0QMFNC[SW0QWIXM] == "A"  
   /* because previous add cancelled*/
   && SW0QW01.SW0QWDB[SW0QWIXM] == "C")  /* Corporate task*/
    SW0QW00.SW0QWCT2 = SW0QW00.SW0QWCT2 - 1; /* decrement*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Current map requests*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "D" /* If current delete request*/
   && SW0QW01.SW0QWDB[SW0QWIXM] == "I")  /* Inspection task*/
    SW0QW00.SW0QWCT2 = SW0QW00.SW0QWCT2 - 1; /* decrement*/
  end

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "A" /* If current add request*/
   && SW0QW01.SW0QWDB[SW0QWIXM] == "C")  /* Corporate task*/
    if (SW0QW01.SWYTACD[SW0QWIXM] in SW0QW02.SWYTACD) /* If task on table*/
      /* NEXT SENTENCE        Don't count as new ADD*/
    else
      SW0QW00.SW0QWCT2 = SW0QW00.SW0QWCT2 + 1; /* increment*/
    end
  end
end // end SW0Q520

// Edit row data
Function SW0Q530()
   /* ------------------------------------------------------------*/
   /* No data on row*/
   /* ------------------------------------------------------------*/

  if (SW0QW01.SW0QWLU[SW0QWIXM] != "Y") /* No data in TS occur*/
    return; /* do not edit*/
  end

   /* ------------------------------------------------------------*/
   /* if no selection made*/
      /* if Add was cancelled*/
         /* backout and ezertn*/
      /* else*/
         /* reset fields in case of operator change and ezertn*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] <= " ") /* If no map request was made*/
    if (SW0QW01.SW0QMFNC[SW0QWIXM] != "A") /* No add cancel*/
      SW0QM001.SWYTADSC[SW0QWIXM] = SW0QW01.SWYTADSC[SW0QWIXM]; /* Desc*/
      SW0QM001.SWZTECD[SW0QWIXM] = SW0QW01.SWZTECD[SW0QWIXM];
                                   /* Error*/
      SW0QM001.SWYTAMM[SW0QWIXM] = SW0QW01.SWYTAMM[SW0QWIXM]; /* Minutes*/
      SW0QM001.XXXSTAT[SW0QWIXM] = SW0QW01.XXXSTAT[SW0QWIXM];
      SW0QM001.SWAPCTIN[SW0QWIXM] = SW0QW01.SW0QWPER[SW0QWIXM];
    else
      SW0Q531(); /* Backout cancelled ADD*/
    end
    return; /* And exit paragraph*/
  end

   /* ------------------------------------------------------------*/
   /* Update selection edit (A or C or D)*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "A" /* If current ADD request*/
   || SW0QM001.SW0QMFNC[SW0QWIXM] == "C" /* If current CHG request*/
   || SW0QM001.SW0QMFNC[SW0QWIXM] == "D") /* If current DEL request*/
    SW0QW00.SW0QWCNT = SW0QWCNT + 1; /* Accum del/add/chg request*/
  else
    SW0QM001.SWYTADSC[SW0QWIXM] = SW0QW01.SWYTADSC[SW0QWIXM]; /* Desc*/
    SW0QM001.SWZTECD[SW0QWIXM] = SW0QW01.SWZTECD[SW0QWIXM]; /* Error*/
    SW0QM001.SWYTAMM[SW0QWIXM] = SW0QW01.SWYTAMM[SW0QWIXM];
                                   /* Minutes*/
    SW0QM001.XXXSTAT[SW0QWIXM] = SW0QW01.XXXSTAT[SW0QWIXM]; /* Status*/
    SW0QM001.SWAPCTIN[SW0QWIXM] = SW0QW01.SW0QWPER[SW0QWIXM];

    set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
    converseLib.validationFailed(11); /* Invalid value*/
    SW0QW00.SW0QWEDP = "N"; /* Edits not passed*/
    SLWREC.XXXLOCID = "530"; /* Module identification*/
    return;
  end

   /* ------------------------------------------------------------*/
               /* CHANGE/DELETE*/
   /* Change or delete not allowed on Corporate task*/
   /* Check that task codes exist on sw0qw02*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "C" /* If current CHG request*/
   || SW0QM001.SW0QMFNC[SW0QWIXM] == "D") /* If current DEL request*/
    if (SW0QW01.SW0QWDB[SW0QWIXM] == "I") /* Inspection task*/
      if (SW0QM001.SWYTACD[SW0QWIXM] in SW0QW02.SWYTACD) /* If task in table*/

        SW0QW02.SW0QWPER[sysVar.arrayIndex] = SW0QM001.SWAPCTIN[SW0QWIXM];

      else
        set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Selection*/
        set SW0QM001.SWYTADSC[SW0QWIXM] bold; /* Desc*/
        set SW0QM001.SWZTECD[SW0QWIXM] bold; /* Error*/
        set SW0QM001.SWYTAMM[SW0QWIXM] bold; /* Minutes*/
        set SW0QM001.XXXSTAT[SW0QWIXM] bold; /* Status*/
        set SW0QM001.SWAPCTIN[SW0QWIXM] bold; /* Percent*/
        converseLib.validationFailed(01); /* Unexpected error*/
        SW0QW00.SW0QWEDP = "N"; /* Edits not passed*/
        SLWREC.XXXLOCID = "530"; /* Module identification*/
        exit stack;
      end
    else
      set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Selection*/
      SW0QM001.SWYTADSC[SW0QWIXM] = SW0QW01.SWYTADSC[SW0QWIXM]; /* Desc*/
      SW0QM001.SWZTECD[SW0QWIXM] = SW0QW01.SWZTECD[SW0QWIXM];
                                   /* Error*/
      SW0QM001.SWYTAMM[SW0QWIXM] = SW0QW01.SWYTAMM[SW0QWIXM]; /* Minutes*/
      SW0QM001.XXXSTAT[SW0QWIXM] = SW0QW01.XXXSTAT[SW0QWIXM];
      SW0QM001.SWAPCTIN[SW0QWIXM] = SW0QW01.SW0QWPER[SW0QWIXM];
      converseLib.validationFailed(11); /* Invalid value*/
      SW0QW00.SW0QWEDP = "N"; /* Edits not passed*/
      SLWREC.XXXLOCID = "530"; /* Module identification*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
               /* ADD*/
   /* ADD not allowed on Inspection task*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "A") /* If current ADD request*/
    if (SW0QW01.SW0QWDB[SW0QWIXM] == "C") /* Corporate task*/
      return; /* no further editing on add*/
    else
      set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Selection*/
      SW0QM001.SWYTADSC[SW0QWIXM] = SW0QW01.SWYTADSC[SW0QWIXM]; /* Desc*/
      SW0QM001.SWZTECD[SW0QWIXM] = SW0QW01.SWZTECD[SW0QWIXM];
                                   /* Error*/
      SW0QM001.SWYTAMM[SW0QWIXM] = SW0QW01.SWYTAMM[SW0QWIXM]; /* Minutes*/
      SW0QM001.XXXSTAT[SW0QWIXM] = SW0QW01.XXXSTAT[SW0QWIXM];
      SW0QM001.SWAPCTIN[SW0QWIXM] = SW0QW01.SW0QWPER[SW0QWIXM];
      converseLib.validationFailed(11); /* Invalid value*/
      SW0QW00.SW0QWEDP = "N"; /* Edits not passed*/
      SLWREC.XXXLOCID = "530"; /* Module identification*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Reset fields in deleted row and exit paragraph*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "D") /* If current del request*/
    SW0QM001.SWYTADSC[SW0QWIXM] = SW0QW01.SWYTADSC[SW0QWIXM]; /* Desc*/
    SW0QM001.SWZTECD[SW0QWIXM] = SW0QW01.SWZTECD[SW0QWIXM]; /* Error*/
    SW0QM001.SWYTAMM[SW0QWIXM] = SW0QW01.SWYTAMM[SW0QWIXM];
                                   /* Minutes*/
    SW0QM001.XXXSTAT[SW0QWIXM] = SW0QW01.XXXSTAT[SW0QWIXM]; /* Status*/
    SW0QM001.SWAPCTIN[SW0QWIXM] = SW0QW01.SW0QWPER[SW0QWIXM];
    return;
  end

   /* ------------------------------------------------------------*/
   /* Edit PERCENTAGE*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SWAPCTIN[SW0QWIXM] >= 0 /* between 0 and 100*/
   && SW0QM001.SWAPCTIN[SW0QWIXM] <= 100)
     /* next sentence*/
  else

    set SW0QM001.SWAPCTIN[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
    converseLib.validationFailed(11); /* Invalid value*/
    SW0QW00.SW0QWEDP = "N"; /* Edits not passed*/
    SLWREC.XXXLOCID = "530"; /* Module identification*/
  end

   /* ------------------------------------------------------------*/
   /* Edit Status*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.XXXSTAT[SW0QWIXM] == "A" /* Status active*/
   || SW0QM001.XXXSTAT[SW0QWIXM] == "I") /* Status inactive*/
     /* NEXT SENTENCE*/
  else
    set SW0QM001.XXXSTAT[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
    converseLib.validationFailed(11); /* Invalid value*/
    SW0QW00.SW0QWEDP = "N"; /* Edits not passed*/
    SLWREC.XXXLOCID = "530"; /* Module identification*/
  end

   /* ------------------------------------------------------------*/
   /* Edit Error code*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SWZTECD[SW0QWIXM] > 0) /* err code entered*/

    SW0Q532(); /* select unique DCORP.VXTE0001*/

    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/

      if (SWZREC.XXXSTAT != "A") /* inactive status*/

        set SW0QM001.SWZTECD[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
        converseLib.validationFailed(10); /* Status is inactive*/
        SW0QW00.SW0QWEDP = "N"; /* Edits not passed*/
        SLWREC.XXXLOCID = "530"; /* Module identification*/

      else

        if (SWZREC.XTCCD != SW0QM001.XTCCD[SW0QWIXM]) /* categories dont match*/

          set SW0QM001.SWZTECD[SW0QWIXM] cursor, bold; /* highlight*/
          converseLib.validationFailed(330); /* msg categories must match*/
          SW0QW00.SW0QWEDP = "N"; /* edit not passed*/
          SLWREC.XXXLOCID = "530"; /* mod id*/

        end
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Edit Minutes*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SWYTAMM[SW0QWIXM] == 0) /* No minutes entered*/
    set SW0QM001.SWYTAMM[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
    converseLib.validationFailed(11); /* Invalid value*/
    SW0QW00.SW0QWEDP = "N"; /* Edits not passed*/
    SLWREC.XXXLOCID = "530"; /* Module identification*/
  end

end // end SW0Q530

// Backout cancelled ADD
Function SW0Q531()
   /* ------------------------------------------------------------*/
   /* If task code not in table, logic error in program*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SWYTACD[SW0QWIXM] in SW0QW02.SWYTACD)
    set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
    set SW0QM001.SWYTACD[SW0QWIXM] bold; /* Task code*/
    set SW0QM001.SWYTADSC[SW0QWIXM] bold; /* Task descptn*/
    set SW0QM001.SWZTECD[SW0QWIXM] bold; /* Error code*/
    set SW0QM001.SWYTAMM[SW0QWIXM] bold; /* Minutes*/
    set SW0QM001.XXXSTAT[SW0QWIXM] bold; /* Status*/
    set SW0QM001.SWAPCTIN[SW0QWIXM] bold; /* Percentage*/
  else
    converseLib.validationFailed(01); /* Invalid value*/
    SW0QW00.SW0QWEDP = "N"; /* Edit not passed*/
    SLWREC.XXXLOCID = "531"; /* Module identification*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear sw0qw02 occur data for the task code*/
   /* Subtract minutes/percent from total*/
   /* ------------------------------------------------------------*/

  SW0QW00.SWYTAMM = SW0QW00.SWYTAMM - SW0QW02.SWYTAMM[sysVar.arrayIndex];
  SW0QW02.SWYTAMM[SW0QWT21] = SW0QW00.SWYTAMM;

  SW0QW00.SW0QWPER = SW0QW00.SW0QWPER - SW0QW02.SW0QWPER[sysVar.arrayIndex];
  SW0QW02.SW0QWPER[SW0QWT21] = SW0QW00.SW0QWPER;

  SW0QW02.SWYTAMM[sysVar.arrayIndex] = 0; /* Clear minutes*/
  SW0QW02.SW0QWPER[sysVar.arrayIndex] = 0; /* Clear percent*/
  SW0QW02.SWYTACD[sysVar.arrayIndex] = 0; /* Clear task code*/

   /* ------------------------------------------------------------*/
   /* Reset temporary storage occur before 'A' requested*/
   /* Move original description, error, minutes and status*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWSWU = "Y"; /* Yes to rewrite temp storage*/

  SW0QW01.SW0QMFNC[SW0QWIXM] = " ";
                                   /* Clear Selection (formerly 'A')*/
  SW0QW01.SWZTECD[SW0QWIXM] = SW0QW01.SW0QWOER[SW0QWIXM];
                                   /* Old Error*/
  SW0QW01.SWYTAMM[SW0QWIXM] = SW0QW01.SW0QWOMM[SW0QWIXM]; /* Old Minutes*/
  SW0QW01.XXXSTAT[SW0QWIXM] = SW0QW01.SW0QWOST[SW0QWIXM]; /* Old status*/
  SW0QW01.SW0QWPER[SW0QWIXM] = 0; /* percent*/

   /* ------------------------------------------------------------*/
   /* Reset Map line*/
   /* Move original description, error and minutes*/
   /* ------------------------------------------------------------*/

  SW0QM001.SWZTECD[SW0QWIXM] = SW0QW01.SW0QWOER[SW0QWIXM]; /* Error*/
  SW0QM001.SWYTAMM[SW0QWIXM] = SW0QW01.SW0QWOMM[SW0QWIXM]; /* Minutes*/
  SW0QM001.XXXSTAT[SW0QWIXM] = SW0QW01.XXXSTAT[SW0QWIXM]; /* Status*/
  SW0QM001.SWAPCTIN[SW0QWIXM] = 0; /* percent*/

   /* ------------------------------------------------------------*/
   /* Adjust Map header estimated minutes*/
   /* ------------------------------------------------------------*/

  SW0QM001.SW0QMEMM = SW0QW02.SWYTAMM[SW0QWT21]; /* Estimated minutes*/

   /* ------------------------------------------------------------*/
   /* Adjust total task codes*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWINS = SW0QW00.SW0QWINS - 1; /* Subtract cancelled add*/

end // end SW0Q531

// Open cursor in DCORP.VXTE0001
Function SW0Q532()
   /* ------------------------------------------------------------*/
   /* Select unique Corporate Task error code DB*/
   /* ------------------------------------------------------------*/

  set SWZREC empty; /* Clear row storage area*/

  SWZREC.SWZTECD = SW0QM001.SWZTECD[SW0QWIXM]; /* Error code*/

  try
    call "IO5560" ("S ", SQLCA, SWZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set table*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "532"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET ERROR CODE     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0QM001.SWZTECD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0Q532

// Process valid input request
Function SW0Q600()
   /* ------------------------------------------------------------*/
   /* Test return conditions*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* If error message or*/
   || SW0QW00.SW0QWEDP == "N")          /* Or edit error*/
    exit stack; /* Return*/
  end

   /* ------------------------------------------------------------*/
   /* 1. Pf key ENTER, PF7 and PF8*/
      /* Update the current page in Update sw0qw02/temp storage*/
        /* resulting in rewrite of temporary storage*/
   /* 2. Pf key ENTER*/
      /* If Header data changed, update Inspection Table*/
         /* database (VINSP001)*/
   /* 3. Pf key ENTER*/
      /* Loop temp storage page 1 thru max page updating*/
         /* Inspection Task database (Vtasks01)*/
   /* 4. Pf PF7 and PF8*/
      /* Now that current page updated (ADD requests), process*/
        /* scroll request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Update sw0qw02/temp storage*/
   /* ------------------------------------------------------------*/

  if (SW0QW00.SW0QWCNT > 0) /* If at least 1 request this page*/
    if (converseVar.eventKey is enter /* ENTER key*/
     || converseVar.eventKey is pf7   /* Scroll backward*/
     || converseVar.eventKey is pf8)  /* Scroll forward*/
      SW0QW00.SW0QWIXM = 0; /* Initialize index*/
      while (SW0QW00.SW0QWIXM < 11) /* loop 11 times*/
        SW0Q610(); /* update sw0qw02/temp storage*/
      end
      SW0QS07(); /* Rewrite temporary storage*/
      SW0QW00.SW0QWSWR = "Y"; /* request for data*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Apply database updates*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Update Inspection table (VINTSK01)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If ENTER*/
    if (SW0QM001.SWAINSTP == SWAREC.SWAINSTP           /* Header task type*/
     && SW0QM001.SW0QMEMM == SW0QW02.SWYTAMM[SW0QWT21] /* estimated minutes*/
     && SW0QM001.SW0QMAMM == SWAREC.SWAADMM            /* Adjusted minutes*/
     && SW0QM001.SW0QMIST == SWAREC.XXXSTAT            /* Status*/
     && SW0QM001.SW0QMPIN == SW0QW00.SW0QWHPR          /* Percent*/
     && SW0QM001.SW0QMDSC == SWAREC.SWAINDSC)          /* Description*/
      /* NEXT SENTENCE*/
    else
      SW0Q620(); /* Update Inspection table(VINSP001)*/
      SW0QW00.SW0QWSWR = "Y"; /* request for data - reload t/s*/
    end
  end

  if (converseVar.validationMsgNum != 0 /* If error message or*/
   || SW0QW00.SW0QWEDP == "N")          /* Or edit error*/
    SW0QW00.SW0QWSWR = "N"; /* Will delete TS/Clear sw0qw02*/
    exit stack; /* Return*/
  end

   /* ------------------------------------------------------------*/
   /* Update Inspection Tasks (VXTA0001) looping all TS pages*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If PF ENTER*/
    SW0QW00.XXXTSPAG = 0; /* Go to begin of temp storage*/
    while (SW0QW00.XXXTSPAG < SW0QW00.TA5TSQIX /* Until end of TS*/
     && converseVar.validationMsgNum == 0   /* while no Error message*/
     && SW0QW00.SW0QWEDP == "Y") /* while no edit error*/
      SW0Q625(); /* Update Inspection tasks*/
    end
    if (converseVar.validationMsgNum != 0 /* If error message*/
     || SW0QWEDP == "N")                  /* Edit not passed*/
      SW0Q629(); /* Inspection task error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all updates*/
      exit stack; /* Return to top of program*/
    else /* Roll back all updates*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all updates*/
      SW0QW00.SW0QWMSG = 20; /* Transaction complete*/
      SW0QW00.SW0QWNWD = "Y"; /* New data to be built*/
      SW0QW00.SW0QWTS = "N"; /* Update not pending*/
      return; /* Exit paragraph*/
    end
  end

   /* ------------------------------------------------------------*/
   /* IF pf7/8 Scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll backward*/
   || converseVar.eventKey is pf8) /* Scroll forward*/
    SW0Q630(); /* Scroll request*/
  end

end // end SW0Q600

// Update SW0QTTC / temp storage
Function SW0Q610()
   /* ------------------------------------------------------------*/
   /* If task code not in table, logic error in program*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWIXM = SW0QW00.SW0QWIXM + 1; /* Increment index*/

   /* ------------------------------------------------------------*/
   /* If task code not in table, logic error in program*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] <= " ") /* No entry*/
    return; /* Exit paragraph*/
  end

   /* ------------------------------------------------------------*/
   /* Process CHANGE*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "C") /* Change request*/
    if (SW0QM001.SWYTACD[SW0QWIXM] in SW0QW02.SWYTACD)

           /* sw0qw02 Minutes*/
      SW0QW00.SWYTAMM = SW0QW00.SWYTAMM - SW0QW02.SWYTAMM[sysVar.arrayIndex];
      SW0QW00.SWYTAMM = SW0QW00.SWYTAMM + SW0QM001.SWYTAMM[SW0QWIXM];
      SW0QW02.SWYTAMM[SW0QWT21] = SW0QW00.SWYTAMM;
      SW0QW02.SWYTAMM[sysVar.arrayIndex] = SW0QM001.SWYTAMM[SW0QWIXM];
           /* sw0qw02 Percentage*/
      SW0QW02.SW0QWPER[sysVar.arrayIndex] = SW0QM001.SWAPCTIN[SW0QWIXM];

          /* Map header - estimated minutes*/
      SW0QM001.SW0QMEMM = SW0QW02.SWYTAMM[SW0QWT21]; /* Estimated minutes*/

          /* Temporary storage*/
      SW0QW00.SW0QWSWU = "Y"; /* Yes to rewrite temp storage*/
      SW0QW01.SW0QMFNC[SW0QWIXM] = "C"; /* Move 'c' to selection TS*/
      SW0QW01.SWYTADSC[SW0QWIXM] = SW0QM001.SWYTADSC[SW0QWIXM];
                                   /* desc*/
      SW0QW01.SWZTECD[SW0QWIXM] = SW0QM001.SWZTECD[SW0QWIXM];
                                   /* err cd*/
      SW0QW01.SW0QWOER[SW0QWIXM] = SW0QM001.SWZTECD[SW0QWIXM]; /* old err*/
      SW0QW01.XTCCD[SW0QWIXM] = SW0QM001.XTCCD[SW0QWIXM]; /* category*/
      SW0QW01.SWYTAMM[SW0QWIXM] = SW0QM001.SWYTAMM[SW0QWIXM]; /* minutes*/
      SW0QW01.SW0QWOMM[SW0QWIXM] = SW0QM001.SWYTAMM[SW0QWIXM]; /* old mm*/
      SW0QW01.XXXSTAT[SW0QWIXM] = SW0QM001.XXXSTAT[SW0QWIXM];
                                   /* status*/
      SW0QW01.SW0QWOST[SW0QWIXM] = SW0QM001.XXXSTAT[SW0QWIXM];
      SW0QW01.SW0QWPER[SW0QWIXM] = SW0QM001.SWAPCTIN[SW0QWIXM];
                                   /* perc*/
    else /* If task not in table , then ezeflo*/
      set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
      set SW0QM001.SWYTACD[SW0QWIXM] bold; /* Task code*/
      set SW0QM001.SWYTADSC[SW0QWIXM] bold; /* Task descptn*/
      set SW0QM001.SWZTECD[SW0QWIXM] bold; /* Error code*/
      set SW0QM001.XTCCD[SW0QWIXM] bold; /* Error code*/
      set SW0QM001.SWYTAMM[SW0QWIXM] bold; /* Minutes*/
      set SW0QM001.XXXSTAT[SW0QWIXM] bold; /* Status*/
      set SW0QM001.SWAPCTIN[SW0QWIXM] bold; /* Percentage*/
      converseLib.validationFailed(01); /* Unexpected error*/
      SW0QW00.SW0QWEDP = "N"; /* Edit not passed*/
      SLWREC.XXXLOCID = "610"; /* Module identification*/
      exit stack;
    end
  end


   /* ------------------------------------------------------------*/
   /* Process DELETE*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "D") /* DELETE request*/
    if (SW0QM001.SWYTACD[SW0QWIXM] in SW0QW02.SWYTACD)

           /* sw0qw02 Minutes*/
      SW0QW00.SWYTAMM = SW0QW00.SWYTAMM - SW0QW02.SWYTAMM[sysVar.arrayIndex];
      SW0QW02.SWYTAMM[SW0QWT21] = SW0QW00.SWYTAMM;
      SW0QW02.SWYTAMM[sysVar.arrayIndex] = 0;
           /* sw0qw02 Percentage*/
      SW0QW00.SW0QWPER = SW0QW00.SW0QWPER - SW0QW02.SW0QWPER[sysVar.arrayIndex];
      SW0QW02.SW0QWPER[SW0QWT21] = SW0QW00.SW0QWPER;
      SW0QW02.SW0QWPER[sysVar.arrayIndex] = 0;

          /* Map header - estimated minutes*/
      SW0QM001.SW0QMEMM = SW0QW02.SWYTAMM[SW0QWT21]; /* Estimated minutes*/

          /* Temporary storage*/
      SW0QW00.SW0QWSWU = "Y"; /* Yes to rewrite temp storage*/
      SW0QW01.SW0QMFNC[SW0QWIXM] = "D"; /* Move 'D' to selection TS*/
      SW0QW01.SWYTADSC[SW0QWIXM] = SW0QM001.SWYTADSC[SW0QWIXM];
                                   /* desc*/
      SW0QW01.SWZTECD[SW0QWIXM] = SW0QM001.SWZTECD[SW0QWIXM];
                                   /* err cd*/
      SW0QW01.SW0QWOER[SW0QWIXM] = 0; /* old err*/
      SW0QW01.SWYTAMM[SW0QWIXM] = SW0QM001.SWYTAMM[SW0QWIXM]; /* minutes*/
      SW0QW01.SW0QWOMM[SW0QWIXM] = 0; /* old mm*/
      SW0QW01.XXXSTAT[SW0QWIXM] = SW0QM001.XXXSTAT[SW0QWIXM];
                                   /* status*/
      SW0QW01.SW0QWOST[SW0QWIXM] = " "; /* Old status*/
      SW0QW01.SW0QWPER[SW0QWIXM] = SW0QM001.SWAPCTIN[SW0QWIXM];
                                   /* perc*/

      SW0QW00.SW0QWINS = SW0QW00.SW0QWINS - 1; /* Subtract total inps tasks*/

    else /* If task not in table , then ezeflo*/
      set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
      set SW0QM001.SWYTACD[SW0QWIXM] bold; /* Task code*/
      set SW0QM001.SWYTADSC[SW0QWIXM] bold; /* Task descptn*/
      set SW0QM001.SWZTECD[SW0QWIXM] bold; /* Error code*/
      set SW0QM001.SWYTAMM[SW0QWIXM] bold; /* Minutes*/
      set SW0QM001.XXXSTAT[SW0QWIXM] bold; /* Status*/
      set SW0QM001.SWAPCTIN[SW0QWIXM] bold; /* Percentage*/
      converseLib.validationFailed(01); /* Unexpected error*/
      SW0QW00.SW0QWEDP = "N"; /* Edit not passed*/
      SLWREC.XXXLOCID = "610"; /* Module identification*/
      exit stack;
    end
  end


   /* ------------------------------------------------------------*/
   /* Process ADD*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If ADD task code is already on table (due to scrolling)*/
   /* adjust any changes and exit paragraph*/
   /* ------------------------------------------------------------*/

  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "A") /* Add request*/
    if (SW0QM001.SWYTACD[SW0QWIXM] in SW0QW02.SWYTACD)

           /* sw0qw02 Minutes*/
      SW0QW00.SWYTAMM = SW0QW00.SWYTAMM - SW0QW02.SWYTAMM[sysVar.arrayIndex];
      SW0QW00.SWYTAMM = SW0QW00.SWYTAMM + SW0QM001.SWYTAMM[SW0QWIXM];
      SW0QW02.SWYTAMM[SW0QWT21] = SW0QW00.SWYTAMM;
      SW0QW02.SWYTAMM[sysVar.arrayIndex] = SW0QM001.SWYTAMM[SW0QWIXM];
           /* sw0qw02 Percentage*/
      SW0QW00.SW0QWPER = SW0QW00.SW0QWPER - SW0QW02.SW0QWPER[sysVar.arrayIndex];
      SW0QW00.SW0QWPER = SW0QW00.SW0QWPER + SW0QM001.SWAPCTIN[SW0QWIXM];
      SW0QW02.SW0QWPER[SW0QWT21] = SW0QW00.SW0QWPER;
      SW0QW02.SW0QWPER[sysVar.arrayIndex] = SW0QM001.SWAPCTIN[SW0QWIXM];

          /* Map header - estimated minutes*/
      SW0QM001.SW0QMEMM = SW0QW02.SWYTAMM[SW0QWT21]; /* Estimated minutes*/

          /* Temporary storage*/
      SW0QW00.SW0QWSWU = "Y"; /* Yes to rewrite temp storage*/
      SW0QW01.SWYTADSC[SW0QWIXM] = SW0QM001.SWYTADSC[SW0QWIXM];
                                   /* desc*/
      SW0QW01.SWZTECD[SW0QWIXM] = SW0QM001.SWZTECD[SW0QWIXM];
                                   /* err cd*/
      SW0QW01.SW0QWOER[SW0QWIXM] = SW0QM001.SWZTECD[SW0QWIXM]; /* old err*/
      SW0QW01.SWYTAMM[SW0QWIXM] = SW0QM001.SWYTAMM[SW0QWIXM]; /* minutes*/
      SW0QW01.SW0QWOMM[SW0QWIXM] = SW0QM001.SWYTAMM[SW0QWIXM]; /* old mm*/
      SW0QW01.XXXSTAT[SW0QWIXM] = SW0QM001.XXXSTAT[SW0QWIXM];
                                   /* status*/
      SW0QW01.SW0QWOST[SW0QWIXM] = SW0QM001.XXXSTAT[SW0QWIXM];
      SW0QW01.SW0QWPER[SW0QWIXM] = SW0QM001.SWAPCTIN[SW0QWIXM];
                                   /* perc*/
      return;
    end
  end


   /* ------------------------------------------------------------*/
   /* If ADD task code is not on table*/
   /* ------------------------------------------------------------*/
  if (SW0QM001.SW0QMFNC[SW0QWIXM] == "A") /* Add request*/
    if (0 in SW0QW02.SWYTACD)
           /* sw0qw02 Task code*/
      SW0QW02.SWYTACD[sysVar.arrayIndex] = SW0QM001.SWYTACD[SW0QWIXM];
           /* sw0qw02 Minutes*/
      SW0QW02.SWYTAMM[sysVar.arrayIndex] = SW0QM001.SWYTAMM[SW0QWIXM];
      SW0QW00.SWYTAMM = SW0QW00.SWYTAMM + SW0QW02.SWYTAMM[sysVar.arrayIndex];
      SW0QW02.SWYTAMM[SW0QWT21] = SW0QW00.SWYTAMM;
           /* sw0qw02 Percentage*/
      SW0QW02.SW0QWPER[sysVar.arrayIndex] = SW0QM001.SWAPCTIN[SW0QWIXM];
      SW0QW00.SW0QWPER = SW0QW00.SW0QWPER + SW0QW02.SW0QWPER[sysVar.arrayIndex];
      SW0QW02.SW0QWPER[SW0QWT21] = SW0QW00.SW0QWPER;
      SW0QW02.SW0QWPER[sysVar.arrayIndex] = 0;

          /* Map header - estimated minutes*/
      SW0QM001.SW0QMEMM = SW0QW02.SWYTAMM[SW0QWT21]; /* Estimated minutes*/

          /* Temporary storage*/
      SW0QW00.SW0QWSWU = "Y"; /* Yes to rewrite temp storage*/
      SW0QW01.SW0QMFNC[SW0QWIXM] = "A"; /* Move 'A' to selection TS*/
      SW0QW01.SWYTADSC[SW0QWIXM] = SW0QM001.SWYTADSC[SW0QWIXM];
                                   /* desc*/
      SW0QW01.SWZTECD[SW0QWIXM] = SW0QM001.SWZTECD[SW0QWIXM];
                                   /* err cd*/
      SW0QW01.SW0QWOER[SW0QWIXM] = SW0QM001.SWZTECD[SW0QWIXM]; /* old err*/
      SW0QW01.SWYTAMM[SW0QWIXM] = SW0QM001.SWYTAMM[SW0QWIXM]; /* minutes*/
      SW0QW01.SW0QWOMM[SW0QWIXM] = SW0QM001.SWYTAMM[SW0QWIXM]; /* old mm*/
      SW0QW01.XXXSTAT[SW0QWIXM] = SW0QM001.XXXSTAT[SW0QWIXM];
                                   /* status*/
      SW0QW01.SW0QWOST[SW0QWIXM] = SW0QM001.XXXSTAT[SW0QWIXM]; /* Old st*/
      SW0QW01.SW0QWPER[SW0QWIXM] = SW0QM001.SWAPCTIN[SW0QWIXM];
                                   /* perc*/

      SW0QW00.SW0QWINS = SW0QW00.SW0QWINS + 1; /* Add to total inps tasks*/

    else /* If task not in table , then ezeflo*/
      set SW0QM001.SW0QMFNC[SW0QWIXM] cursor, bold; /* Highlight, cursor*/
      set SW0QM001.SWYTACD[SW0QWIXM] bold; /* Task code*/
      set SW0QM001.SWYTADSC[SW0QWIXM] bold; /* Task descptn*/
      set SW0QM001.SWZTECD[SW0QWIXM] bold; /* Error code*/
      set SW0QM001.SWYTAMM[SW0QWIXM] bold; /* Minutes*/
      set SW0QM001.XXXSTAT[SW0QWIXM] bold; /* Status*/
      set SW0QM001.SWAPCTIN[SW0QWIXM] bold; /* Percentage*/
      converseLib.validationFailed(01); /* Unexpected error*/
      SW0QW00.SW0QWEDP = "N"; /* Edit not passed*/
      SLWREC.XXXLOCID = "610"; /* Module identification*/
      exit stack;
    end
  end


end // end SW0Q610

// Apply Inspection table
Function SW0Q620()
   /* ------------------------------------------------------------*/
   /* Read Inspection table for ZZZCHGCT*/
   /* ------------------------------------------------------------*/

  SW0Q621(); /* ZZZCHGCT check Inspection table*/

  if (converseVar.validationMsgNum != 0 /* If error message or*/
   || SW0QW00.SW0QWEDP == "N")          /* Or edit error*/
    return; /* Return*/
  end

  SW0Q622(); /* Update Inspection table*/


end // end SW0Q620

// Check ZZCHGCT Inspection table
Function SW0Q621()
   /* ------------------------------------------------------------*/
   /* Select inspection DB*/
   /* ------------------------------------------------------------*/

  set SWAREC empty; /* Clear row storage area*/

  SWAREC.XWHCD = SW0QM001.XWHCD; /* Warehouse code*/
  SWAREC.SWAINSNB = SW0QM001.SWAINSNB; /* Inspection number*/

  try
    call "IO5310" ("S ", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (SWAREC.ZZZCHGCT == SW0QW00.ZZZCHGCT)
        return; /* Exit paragraph to update*/
      else
        converseLib.validationFailed(32); /* Record updated since last displayed*/
        SW0QWEDP = "N"; /* Edits not passed*/
        set SW0QM001.XWHCD cursor, bold; /* Warehouse code*/
        set SW0QM001.SWAINSTP bold; /* Inspection number*/
        set SW0QM001.SW0QMEMM bold; /* estimated minutes*/
        set SW0QM001.SW0QMAMM bold; /* Adjusted minutes*/
        set SW0QM001.SW0QMIST bold; /* Status*/
        set SW0QM001.SW0QMPIN bold; /* Percent*/
        set SW0QM001.SW0QMDSC bold; /* Description*/
        SLWREC.XXXLOCID = "621"; /* Module identification*/
        return; /* Return to previous process*/
      end
    end
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(33); /* Record deleted since last displayed*/
      SW0QWEDP = "N"; /* Edits not passed*/
      set SW0QM001.XWHCD cursor, bold; /* Warehouse code*/
      set SW0QM001.SWAINSTP bold; /* Inspection number*/
      set SW0QM001.SW0QMEMM bold; /* estimated minutes*/
      set SW0QM001.SW0QMAMM bold; /* Adjusted minutes*/
      set SW0QM001.SW0QMIST bold; /* Status*/
      set SW0QM001.SW0QMPIN bold; /* Percent*/
      set SW0QM001.SW0QMDSC bold; /* Description*/
      SLWREC.XXXLOCID = "621"; /* Module identification*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WAREHOUSE/INSP NUMBER ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/
  SW0QW00.SW0QWHSE = SWAREC.XWHCD; /* Warehouse code work key*/
  SW0QW00.SW0QWINP = SWAREC.SWAINSNB; /* inspection number work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to top*/

end // end SW0Q621

// Update Inspection table
Function SW0Q622()
   /* ------------------------------------------------------------*/
   /* Move map fields to database record*/
   /* ------------------------------------------------------------*/
  SWAREC.SWAINSTP = SW0QM001.SWAINSTP; /* Header task type*/

  if (SW0QM001.SW0QMAMM > 0) /* Adjusted minutes entered*/
    SWAREC.SWAADMM = SW0QM001.SW0QMAMM; /* move Adjusted minutes*/
  else
    SWAREC.SWAADMM = SW0QM001.SW0QMEMM; /* Move Estimated minutes*/
  end

  SWAREC.XXXSTAT = SW0QM001.SW0QMIST; /* Status*/

  if (SW0QM001.SW0QMPIN == 0) /* If percentage is zero*/
    SWAREC.SWAPCTIN = SW0QM001.SW0QMPIN; /* Move percent*/
  else
    SWAREC.SWAPCTIN = SW0QM001.SW0QMPIN / 100; /* percent*/
  end

  SWAREC.SWAINDSC = SW0QM001.SW0QMDSC; /* Description*/

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time; move userid*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/
  SWAREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWAREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  SWAREC.XXXUSRID = COMMAREA.CAUSERID; /* CRT operator ID*/


   /* ------------------------------------------------------------*/
   /* Update Inspection table*/
   /* ------------------------------------------------------------*/

  try
    call "IO5310" ("U ", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Update successful*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN WAREHOUSE/INSP NUMBER ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/
  SW0QW00.SW0QWHSE = SWAREC.XWHCD; /* Warehouse code work key*/
  SW0QW00.SW0QWINP = SWAREC.SWAINSNB; /* inspection number work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to top*/

end // end SW0Q622

// Apply Inspection Task
Function SW0Q625()
   /* ------------------------------------------------------------*/
   /* Read next page*/
   /* ------------------------------------------------------------*/

  SW0QW00.XXXTSPAG = SW0QW00.XXXTSPAG + 1; /* Increment TS page indicator*/

  SW0QS03(); /* Read temporary storage*/

  SW0QW00.SW0QWIX2 = 0; /* Initialize map field index*/
  while (SW0QW00.SW0QWIX2 < 11             /* while occur is 1 to 11*/
   && converseVar.validationMsgNum == 0 /* while no error msg*/
   && SW0QW00.SW0QWEDP == "Y") /* while no edit errors*/
    SW0Q626(); /* Read/Update Inspection Task DB*/
  end

end // end SW0Q625

// Update Inpsection Task process
Function SW0Q626()
   /* ------------------------------------------------------------*/
   /* Read next page*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWIX2 = SW0QW00.SW0QWIX2 + 1; /* Increment index*/

  if (SW0QW01.SW0QMFNC[SW0QWIX2] <= " ") /* No update request*/
    return; /* Exit loop*/
  end

   /* ------------------------------------------------------------*/
   /* Deletes/Changes - Check ZZZCHGCT*/
   /* ------------------------------------------------------------*/

  if (SW0QW01.SW0QMFNC[SW0QWIX2] == "C" /* If Change request*/
   || SW0QW01.SW0QMFNC[SW0QWIX2] == "D") /* If Delete request*/
    SW0Q627(); /* Read for ZZZCHGCT*/
    if (converseVar.validationMsgNum != 0 /* If error message*/
     || SW0QW00.SW0QWEDP == "N")          /* Or edit error*/
      return; /* Exit paragraph*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Adds/Deletes/Changes - Update Inspection Task database*/
   /* ------------------------------------------------------------*/

  SW0Q628(); /* Update Inspection Task database*/

end // end SW0Q626

// Inspection task-ZZZCHGCT check
Function SW0Q627()
   /* ------------------------------------------------------------*/
   /* Select Inspection Task DB*/
   /* ------------------------------------------------------------*/

  set SWBREC empty; /* Clear row storage area*/

  SWBREC.XWHCD = SW0QM001.XWHCD; /* Warehouse code*/
  SWBREC.SWAINSNB = SW0QM001.SWAINSNB; /* Inspection number*/
  SWBREC.XGPCD = SW0QW01.XGPCD[SW0QWIX2]; /* GPC code*/
  SWBREC.SL-TASK-CD = SW0QW01.SWYTACD[SW0QWIX2]; /* Task code*/

  try
    call "IO5320" ("S ", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (SWBREC.ZZZCHGCT == SW0QW01.ZZZCHGCT[SW0QWIX2])
                                   /* Not since updated*/
        return; /* Exit to update*/
      else
        converseLib.validationFailed(32); /* Record updated since last displayed*/
        SW0QW00.SW0QWEDP = "N"; /* EDITS NOT PASSED*/
        SLWREC.XXXLOCID = "627"; /* Module identification*/
        return; /* Return to previous process*/
      end
    end
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(33); /* Record deleted since last displayed*/
      SW0QW00.SW0QWEDP = "N"; /* EDITS NOT PASSED*/
      set SW0QM001.XWHCD cursor, bold; /* Warehouse code*/
      SLWREC.XXXLOCID = "627"; /* Module identification*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT INSPECTION TASK       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/
  SW0QW00.SW0QWHSE = SWBREC.XWHCD; /* Warehouse code work key*/
  SW0QW00.SW0QWINP = SWBREC.SWAINSNB; /* Inspection number work key*/
  SW0QW00.SW0QWGPC = SWBREC.XGPCD; /* GPC code work key*/
  SW0QW00.SW0QWTCD = SWBREC.SL-TASK-CD; /* Task code work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end SW0Q627

// Update Inpsection Task
Function SW0Q628()
   /* ------------------------------------------------------------*/
   /* Update Inspection Task DB*/
   /* ------------------------------------------------------------*/

  SWBREC.XWHCD = SW0QM001.XWHCD; /* Warehouse code*/
  SWBREC.SWAINSNB = SW0QM001.SWAINSNB; /* Inspection number*/
  SWBREC.XGPCD = SW0QW01.XGPCD[SW0QWIX2]; /* GPC code*/
  SWBREC.SL-TASK-CD = SW0QW01.SWYTACD[SW0QWIX2]; /* Task code*/
  SWBREC.SL-TASK-ERR-CD = SW0QW01.SWZTECD[SW0QWIX2]; /* Error code*/
  SWBREC.XXXSTAT = SW0QW01.XXXSTAT[SW0QWIX2]; /* Status*/
  SWBREC.SWAPCTIN = SW0QW01.SW0QWPER[SW0QWIX2] / 100; /* Percentage*/

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time; move userid*/
   /* -------------------------------    -------------------------*/

  XX0XS01(); /* Obtain date and time*/

  if (SW0QW01.SW0QMFNC[SW0QWIX2] == "A") /* If ADDed record*/
    SWBREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  end
  SWBREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/

  SWBREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  SWBREC.XXXUSRID = COMMAREA.CAUSERID; /* CRT operator ID*/

  if (SW0QW01.SW0QMFNC[SW0QWIX2] == "A") /* If Added record*/
    try
      call "IO5320" ("A ", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
    end /* Select table row*/
  else
    if (SW0QW01.SW0QMFNC[SW0QWIX2] == "C") /* If Changed record*/
      try
        call "IO5320" ("U ", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
      end /* Select table row*/
    else
      if (SW0QW01.SW0QMFNC[SW0QWIX2] == "D") /* If Deleted record*/
        try
          call "IO5320" ("D ", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
        end /* Select table row*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Update successful*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == -803) /* Duplicate*/
        converseLib.validationFailed(290); /* Entry already exists*/
        SW0QW00.SW0QWEDP = "N"; /* Edits not passed*/
        return; /* Return to previous process*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE INSPECTION TASK       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/
  SW0QW00.SW0QWHSE = SWBREC.XWHCD; /* Warehouse code work key*/
  SW0QW00.SW0QWINP = SWBREC.SWAINSNB; /* Inspection number work key*/
  SW0QW00.SW0QWGPC = SWBREC.XGPCD; /* GPC code work key*/
  SW0QW00.SW0QWTCD = SWBREC.SL-TASK-CD; /* Task code work key*/
  TA1REC.TA1TBLKE = SW0QW00.SW0QWKYB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0Q628

// Inspection task error
Function SW0Q629()
  SW0QM001.XXXTSPAG = SW0QW00.XXXTSPAG; /* move current page number*/
  SW0QM001.TA5TSQIX = SW0QW00.TA5TSQIX; /* move maximum page number*/

  SW0QW00.SW0QWIXM = 1; /* Initialize map field index*/
  while (SW0QW00.SW0QWIXM <= 11) /* while occur is 1 to 11*/
    SW0QS04(); /* move ts occur to map occur*/
  end

  SW0QS05(); /* Header attributes*/

  SW0QW00.SW0QWIXM = 1; /* Initialize map field index*/
  while (SW0QW00.SW0QWIXM <= 11) /* while occur is 1 to 11*/
    SW0QS06(); /* move attributes to map occur*/
  end

   /* ----------------------------------------------------------*/
   /* Highlight fields, cursor*/
   /* ----------------------------------------------------------*/

  set SW0QM001.SW0QMFNC[SW0QWIX2] bold; /* Update typ*/
  set SW0QM001.SWYTACD[SW0QWIX2] bold; /* Task code*/
  set SW0QM001.SWYTADSC[SW0QWIX2] bold; /* Descriptn*/
  set SW0QM001.SWZTECD[SW0QWIX2] bold; /* Err*/
  set SW0QM001.SWYTAMM[SW0QWIX2] bold; /* Minutes*/
  set SW0QM001.XXXSTAT[SW0QWIX2] bold; /* Status*/
  set SW0QM001.SWAPCTIN[SW0QWIX2] bold; /* Percent*/

  SW0QW00.SW0QWSWR = "N"; /* Will delete TS/Clear SW0QTTC*/

end // end SW0Q629

// Forward/backward Obtain Data
Function SW0Q630()
   /* ------------------------------------------------------------*/
   /* process scroll request*/
   /* ------------------------------------------------------------*/

  SW0QW00.SW0QWSWR = "N"; /* dont request data*/
  SW0QW00.SW0QWSWF = "Y"; /* do request screen to be formatted*/
  if (converseVar.eventKey is pf7) /* If scroll backward*/
    SW0QW00.XXXTSPAG = SW0QW00.XXXTSPAG - 1; /* Subtract 1 from page*/
    SLWREC.SLWMSGNO = 14; /* Scroll backward successful*/
  else /* If scroll forward*/
    SW0QW00.XXXTSPAG = SW0QW00.XXXTSPAG + 1; /* Add 1 from page*/
    SLWREC.SLWMSGNO = 13; /* Scroll forward successful*/
  end


end // end SW0Q630

// Delete temporary storage
Function SW0QS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0QW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0QW00.XXXTSPAG = 0; /* Current page number*/
  SW0QW00.TA5TSQIX = 0; /* Highest page number*/

  SW0QM001.XXXTSPAG = 0; /* Current Map page*/
  SW0QM001.TA5TSQIX = 0; /* Maximum Map page*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SW0QW00.SW0QWINS = 0;
                                   /* Total number of Inspection task codes*/
    SW0QW00.SW0QWTS = "N"; /* Clear screen on PA2*/
    SW0QW00.SWAINSNB = 0; /* Clear w-s insp number*/
    SW0QW00.SW0QMTGP = " "; /* Clear w-s GPC code*/
     /* MOVE 0 TO SW0QW00.SW0QMTCD    ; Clear w-s start code*/
     /* MOVE ' ' TO SW0QW00.SW0QMTTP  ; Clear w-s task type*/
     /* MOVE ' ' TO SW0QW00.SW0QMTCT  ; CLEAR W-S TASK CATEGORY*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0QS01

// Clear SW0QTTC
Function SW0QS02()
  SW0QW02.SWYTACD[SW0QWIX2] = 0; /* Initialize task code*/
  SW0QW02.SWYTAMM[SW0QWIX2] = 0; /* Initialize adj minutes*/
  SW0QW02.SW0QWPER[SW0QWIX2] = 0; /* Initialize percentage*/
  SW0QW02.XTCCD[SW0QWIX2] = " "; /* Initialize cat code*/
  SW0QW02.SW0QWDB[SW0QWIX2] = " "; /* Initialize database*/

  if (SW0QW00.SW0QWIX2 == SW0QW00.SW0QWT21) /* If total occur (eq 21)*/
    SW0QW02.SWYTACD[SW0QWIX2] = 9999; /* move EOF to task code*/
  end

  SW0QW00.SW0QWIX2 = SW0QW00.SW0QWIX2 + 1; /* Increment index*/

end // end SW0QS02

// Read temporary storage page
Function SW0QS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0QW01.XXXTSLEN = SW0QW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SW0QW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0QS03

// Move temp storage to map area
Function SW0QS04()
   /* ------------------------------------------------------------*/
   /* Move temp storage occur into map occur.*/
   /* ------------------------------------------------------------*/

  SW0QM001.SW0QMFNC[SW0QWIXM] = SW0QW01.SW0QMFNC[SW0QWIXM]; /* Selection*/
  SW0QM001.SWYTACD[SW0QWIXM] = SW0QW01.SWYTACD[SW0QWIXM];
                                   /* Task code*/
  SW0QM001.SWYTADSC[SW0QWIXM] = SW0QW01.SWYTADSC[SW0QWIXM]; /* Descriptn*/
  SW0QM001.SWZTECD[SW0QWIXM] = SW0QW01.SWZTECD[SW0QWIXM]; /* Err*/
  SW0QM001.SWYTAMM[SW0QWIXM] = SW0QW01.SWYTAMM[SW0QWIXM]; /* Minutes*/
  SW0QM001.XTCCD[SW0QWIXM] = SW0QW01.XTCCD[SW0QWIXM];
                                   /* category code*/
  SW0QM001.XXXSTAT[SW0QWIXM] = SW0QW01.XXXSTAT[SW0QWIXM]; /* Status*/
  SW0QM001.SWAPCTIN[SW0QWIXM] = SW0QW01.SW0QWPER[SW0QWIXM];
                                   /* Percent*/

  SW0QW00.SW0QWIXM = SW0QW00.SW0QWIXM + 1; /* Increment occur index*/

end // end SW0QS04

// Set header attributes
Function SW0QS05()
   /* ------------------------------------------------------------*/
   /* Reset header attributes and cursor*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Reset cursor*/
   /* ------------------------------------------------------------*/

  set SW0QM001.XWHCD initialAttributes; /* Warehouse code*/
  set SW0QM001.SWAINSNB initialAttributes; /* Header Inspection number*/
  set SW0QM001.SWAINSTP initialAttributes; /* Header Task type*/
  set SW0QM001.SW0QMAMM initialAttributes; /* Adjusted minutes*/
  set SW0QM001.SW0QMIST initialAttributes; /* Header Status*/
  set SW0QM001.SW0QMPIN initialAttributes; /* Header percentage*/
  set SW0QM001.SW0QMDSC initialAttributes; /* Header description*/
  set SW0QM001.SW0QMTCD initialAttributes; /* Header start code*/
  set SW0QM001.SW0QMTGP initialAttributes; /* Header gpc code*/
  set SW0QM001.SW0QMTTP initialAttributes; /* Header task type*/
  set SW0QM001.SW0QMTCT initialAttributes; /* Header task category*/

  if (SW0QW00.TA5TSQIX > 0) /* Occurs mapped*/
    set SW0QM001.SW0QMFNC[1] cursor; /* Update select*/
  end

  if (COMMAREA.CAADDFL == "Y") /* User has ADD security*/
    set SW0QM001.SW0QMP14 protect, bold; /* PF option visible,protected*/
  end

  if (COMMAREA.CAINQFL == "Y") /* User has INQ security*/
    set SW0QM001.SW0QMP15 protect, bold; /* PF option visible,protected*/
  end
end // end SW0QS05

// Set row(11) attributes
Function SW0QS06()
   /* ------------------------------------------------------------*/
   /* Reset field attributes in occur area.*/
   /* ------------------------------------------------------------*/

  if (SW0QW01.SW0QWLU[SW0QWIXM] == "Y") /* Occur has row data*/
    if (SW0QW01.SW0QWDB[SW0QWIXM] == "I") /* If inspection Task code*/
      set SW0QM001.SW0QMFNC[SW0QWIXM] normal; /* Update typ*/
      set SW0QM001.SWYTACD[SW0QWIXM] skip, bold; /* Task code*/
      set SW0QM001.SWYTADSC[SW0QWIXM] initialAttributes; /* Descriptn*/
      set SW0QM001.SWZTECD[SW0QWIXM] normal; /* Err*/
      set SW0QM001.SWYTAMM[SW0QWIXM] initialAttributes; /* Minutes*/
      set SW0QM001.XXXSTAT[SW0QWIXM] normal; /* Status*/
      set SW0QM001.SWAPCTIN[SW0QWIXM] normal; /* Percent*/
    else /* If corporate  Task code*/
      set SW0QM001.SW0QMFNC[SW0QWIXM] normal; /* Update typ*/
      set SW0QM001.SWYTACD[SW0QWIXM] protect; /* Task code*/
      set SW0QM001.SWYTADSC[SW0QWIXM] protect; /* Descriptn*/
      set SW0QM001.SWZTECD[SW0QWIXM] protect; /* Err*/
      set SW0QM001.SWYTAMM[SW0QWIXM] protect; /* Minutes*/
      set SW0QM001.XXXSTAT[SW0QWIXM] protect; /* Status*/
      set SW0QM001.SWAPCTIN[SW0QWIXM] protect; /* Percent*/
    end
  else
    set SW0QM001.SW0QMFNC[SW0QWIXM] protect, invisible; /* Update typ*/
    set SW0QM001.SWYTACD[SW0QWIXM] protect, invisible; /* Task code*/
    set SW0QM001.SWYTADSC[SW0QWIXM] protect, invisible; /* Descriptn*/
    set SW0QM001.SWYTAMM[SW0QWIXM] protect, invisible; /* Minutes*/
    set SW0QM001.SWZTECD[SW0QWIXM] protect, invisible; /* Err*/
    set SW0QM001.XXXSTAT[SW0QWIXM] protect, invisible; /* Status*/
    set SW0QM001.SWAPCTIN[SW0QWIXM] protect, invisible; /* Percent*/
  end


  SW0QWIXM = SW0QWIXM + 1; /* increment work index*/

end // end SW0QS06

// Rewrite temporary storage
Function SW0QS07()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S07"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0QS07

//*** RECORD=SW0QW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0QW00 type basicRecord
  10 SW0QWIXM SW0QWIXM ; 
  10 SW0QWIX2 SW0QWIX2 ; 
  10 SW0QWCNT SW0QWCNT ; 
  10 SW0QWCT2 SW0QWCT2 ; 
  10 SW0QWT21 SW0QWT21 ; 
  10 SW0QWINS SW0QWINS ; 
  10 SW0QWSWC SW0QWSWC ; 
  10 SW0QWSWD SW0QWSWD ; 
  10 SW0QWEDP SW0QWEDP ; 
  10 SW0QWSWF SW0QWSWF ; 
  10 SW0QWSWR SW0QWSWR ; 
  10 SW0QWSWU SW0QWSWU ; 
  10 SW0QWFFL SW0QWFFL ; 
  10 SW0QWUCP SW0QWUCP ; 
  10 SW0QWNWD SW0QWNWD ; 
  10 SW0QWTS SW0QWTS ; 
  10 SW0QWMSG SW0QWMSG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SWYTAMM SWYTAMM ; 
  10 SW0QWPER SW0QWPER ; 
  10 SW0QWLPT SW0QWLPT ; 
  10 SW0QWHPR SW0QWHPR ; 
  10 ZZZCHGCT ZZZCHGCT ; 
  10 SWAINSNB SWAINSNB ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 SWAINSTP SWAINSTP ; 
  10 SWAADMM SWAADMM ; 
  10 XXXSTAT XXXSTAT ; 
  10 XXXUSRID XXXUSRID ; 
  10 SWAINDSC SWAINDSC ; 
  10 SW0QMTGP SW0QMTGP ; 
  10 SW0QMTCD SW0QMTCD ; 
  10 SW0QMTTP SW0QMTTP ; 
  10 SW0QMTCT SW0QMTCT ; 
  10 SW0QWDT SW0QWDT ; 
    15 SW0QWDCC SW0QWDCC ; 
    15 SW0QWDYY SW0QWDYY ; 
    15 SW0QWDMM SW0QWDMM ; 
    15 SW0QWDDD SW0QWDDD ; 
  10 SW0QWTM1 SW0QWTM1 ; 
    15 SW0QWHH1 SW0QWHH1 ; 
    15 SW0QWMM1 SW0QWMM1 ; 
  10 SW0QWTM2 SW0QWTM2 ; 
    15 SW0QWHH2 SW0QWHH2 ; 
    15 SW0QWCL2 SW0QWCL2 ; 
    15 SW0QWMM2 SW0QWMM2 ; 
  10 SW0QWKYB SW0QWKYB ; 
    15 SW0QWKYA SW0QWKYA ; 
      20 SW0QWHSE SW0QWHSE ; 
      20 SW0QWINP SW0QWINP ; 
    15 SW0QWKYX SW0QWKYX ; 
      20 SW0QWGPC SW0QWGPC ; 
      20 SW0QWTCD SW0QWTCD ; 
end // end SW0QW00

//*** RECORD=SW0QW01 ****
// ------------------------------------------------
// TS 001 display storage.
// ------------------------------------------------
// ***********************
Record SW0QW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1020) ; 
    10 SW0QWLU SW0QWLU [12] ; 
    10 SW0QWDB SW0QWDB [12] ; 
    10 SW0QMFNC SW0QMFNC [12] ; 
    10 SWYTACD SWYTACD [12] ; 
    10 XGPCD XGPCD [12] ; 
    10 SWYTADSC SWYTADSC [12] ; 
    10 SWZTECD SWZTECD [12] ; 
    10 SWYTAMM SWYTAMM [12] ; 
    10 XTCCD XTCCD [12] ; 
    10 XXXSTAT XXXSTAT [12] ; 
    10 SW0QWPER SW0QWPER [12] ; 
    10 SW0QWOER SW0QWOER [12] ; 
    10 SW0QWOMM SW0QWOMM [12] ; 
    10 SW0QWOST SW0QWOST [12] ; 
    10 ZZZCHGCT ZZZCHGCT [12] ; 
end // end SW0QW01

//*** RECORD=SW0QW02 ****
// ------------------------------------------------
// inspection/task array.
// ------------------------------------------------
// ***********************
Record SW0QW02 type basicRecord
  10 SWYTACD SWYTACD [21] ; 
  10 SWYTAMM SWYTAMM [21] ; 
  10 SW0QWPER SW0QWPER [21] ; 
  10 XTCCD XTCCD [21] ; 
  10 SW0QWDB SW0QWDB [21] ; 
end // end SW0QW02

// Update selection (A or C or D)
DataItem SW0QMFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header start code
DataItem SW0QMTCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Header task category
DataItem SW0QMTCT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header GPC code
DataItem SW0QMTGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header task type
DataItem SW0QMTTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work time colon   2
DataItem SW0QWCL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Variable work counter
DataItem SW0QWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variable work counter 2
DataItem SW0QWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Insp task/Corp task (I or C)
DataItem SW0QWDB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work date century
DataItem SW0QWDCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work date DD
DataItem SW0QWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work date MM
DataItem SW0QWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work full date
DataItem SW0QWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work date YY
DataItem SW0QWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Edit pass switch (Y or N)
DataItem SW0QWEDP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time flag
DataItem SW0QWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC code work key
DataItem SW0QWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work time hours   1
DataItem SW0QWHH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work time hours   2
DataItem SW0QWHH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Header hold percentage
DataItem SW0QWHPR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse code work key
DataItem SW0QWHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inspection number work key
DataItem SW0QWINP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of Insp task codes
DataItem SW0QWINS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variable work index
DataItem SW0QWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SW0QWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SWAREC work key
DataItem SW0QWKYA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SWBREC work key
DataItem SW0QWKYB char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XTAREC work key
DataItem SW0QWKYX char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// largest percentage hold
DataItem SW0QWLPT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Occurrence used('Y' or BLANK)
DataItem SW0QWLU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work time minutes 1
DataItem SW0QWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work time minutes 2
DataItem SW0QWMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work message number
DataItem SW0QWMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map header change switch
DataItem SW0QWNWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Old error
DataItem SW0QWOER smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Old minutes
DataItem SW0QWOMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Old status
DataItem SW0QWOST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Percentage
DataItem SW0QWPER num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0QWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SW0QWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0QWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0QWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SW0QWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IX 21 total xtamm/perc
DataItem SW0QWT21 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Task code work key
DataItem SW0QWTCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work full minutes 1
DataItem SW0QWTM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work full minutes 2
DataItem SW0QWTM2 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Return to TS page before updat
DataItem SW0QWTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// UPD function completed (Y)
DataItem SW0QWUCP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

