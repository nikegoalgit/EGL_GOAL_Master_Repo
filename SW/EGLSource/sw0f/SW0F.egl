package sw0f;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0F ****
//     This application provides the user to inquire upon DB2
// and CSP tables.
// 
//   On entry into this application, the summary screen
// (SW0FM001) is displayed. The user may specify selection of
// inspections by warehouse, type ('ln' or 'qc'), status or by
// a specific inspection number. If the selection criteria
// finds more than one inspection number, a summary screen will
// be formatted with all data selected. The user can then
// 'S'elect to get the detail (screen SW0FM001).
// 
//   If a specific code is 'S'elected, the detail screen is
// formatted automatically with all detail information for the
// selected inspection.
// 
//   The detail screen will allow users to view data that is
// associated with a specific inspection.
// 
//   PF keys will give users the ability to transfer to the
// related inspection screens to maintain and setup new
// inspections screens to maintain and setup new inspections.
// Note- The inspection number is basically a way for the user
// to group specific tasks and apply them to cartons received.
// 
//   A carton on a specific lane may have up to two inspection
// codes assigned to it:
//   1) the inspection assigned at the container/po level
//   2) the inspection assigned at the product level
// 
//   No single carton may have an aggregate task total that
// exceeds 20 tasks.
// 
// -------    --------  ------   ------------------------------
// CONTROL      DATE     NAME    DESCRIPTION OF CHANGE
// -------    --------  ------   ------------------------------
// NEW        10/30/90  bgoff    New Application
// 0001       01/05/91  jcampb   increase length of min fields
// 0002       01/18/91  jcampbadd 'v' to sel after selected
// 0003       02/13/91  ryonke   program changes for table chng
// MAINT      01/30/92  GRAY    INITIALIZE ALL RECORDS AND MAPS
//            10/10/92  Ryonke   Code changes due to table chng
// *********************
Program SW0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0FW00 SW0FW00; // record
  SW0FW01 SW0FW01; // record
  SW0FW02 SW0FW02; // record
  SWAREC SWAREC; // record
  SWBREC SWBREC; // record
  SWYREC SWYREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XTYTBL; // table
  use SW0FM.SW0FM001,  // forms
      SW0FM.SW0FM002, 
      SW0FM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* -----------------------------------------------------------*/
     /* Initialize working storage area and display storage areas.*/
     /* -----------------------------------------------------------*/

    set SW0FM001 initial; /* m001 i/o*/
    set SW0FM002 initial; /* m002 i/o*/
    set XX0XM001 initial;
    set SWAREC empty;
    set SWBREC empty;
    set SQLCA empty; /* sql communication area*/
    set ERRSQLCA empty;
    set SW0FW00 empty; /* working storage*/
    set SW0FW01 empty; /* m001 display storage*/
    set SW0FW02 empty; /* m002 display storage*/
    set TA1REC empty; /* error diagnosis information*/
    set TAEREC empty; /* error diagnosis information*/
    set TA5REC empty; /* temporary storage parameters*/
    set SWYREC empty;
    if (COMMAREA.CAITEM == "SW0FM002") /* returning from the second map*/

      SW0FW00.SW0FWSWD = "2"; /* set second map to show*/

    else

      SW0FW00.SW0FWSWD = "1"; /* MAP TO BE DISPLAYED SWITCH*/

    end
    SW0FW00.SW0FWSWF = "Y"; /* format the map switch*/
    SW0FW00.SW0FWSWR = "N"; /* request for data switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the commarea, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* data was passed*/

      SW0FM001.XWHCD = COMMAREA.XWHCD; /* warehouse code*/

      COMMAREA.CAITEM = " "; /* clear passed data*/

      SW0FW00.SW0FWSWR = "Y"; /* request for data switch*/

    else

      SW0FW01.XWHCD = COMMAREA.XWHCD; /* warehouse code*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0F001; /* converse the main process*/



    SW0F001: SW0F001();
     /* ---------------------------------------------------*/
     /* Flow to converse main process to display a map   -*/
     /* ---------------------------------------------------*/

    goto SW0F001; /* Converse main process*/



  end // end main
end // end SW0F

// Main process to display a map
Function SW0F001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.SW0FWSWD == "1") /* Map 1 was requested*/

    SW0F100(); /* Display map 1*/

  else

    if (SW0FW00.SW0FWSWD == "2") /* Map 2 was requested*/

      SW0F200(); /* Display map 2*/


    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "001"; /* Module identification*/
      SLWREC.SLWMSGNO = 1; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = SW0FW00.SW0FWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "SW0C"; /* TO application*/

      XSSL001(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end SW0F001

// List the rows in the table
Function SW0F100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0F110(); /* Obtain the data to display*/

  SW0F120(); /* Format and display the map*/

  SW0F130(); /* Check attention identifier*/

  SW0F140(); /* Reset fields to normal intensity*/

  SW0F150(); /* Verify the entered data*/

  SW0F160(); /* Process valid input request*/


end // end SW0F100

// Obtain the data to display
Function SW0F110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.SW0FWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SW0FW00.XXXTSLEN = 933; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SW0FW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  SW0F111(); /* Purge any temporary storage*/

  SW0FW01.XWHCD = SW0FM001.XWHCD; /* Warehouse code*/
  SW0FW01.SW0FMITP = SW0FM001.SW0FMITP; /* Inspection type*/
  SW0FW01.SW0FMINS = SW0FM001.SW0FMINS; /* Inspection number*/
  SW0FW01.SW0FMIST = SW0FM001.SW0FMIST; /* Inspection status*/
  if (SW0FM001.SW0FMIST == " ") /* status is blank*/

    SW0FM001.SW0FMIST = "*"; /* show wildcard*/
    SW0FW01.SW0FMIST = "*"; /* show wildcard*/

  end

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  SW0F112(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SW0FW00.SW0FWIXM = 1; /* Display line index*/
  SW0FW00.SW0FWSWC = "N"; /* End of cursor switch*/

  while (SW0FW00.SW0FWSWC == "N") /* Until end of cursor*/

    SW0F113(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SW0FW00.SW0FWSWC == "N") /* Not end of cursor*/
      SW0F114(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SW0FW00.SW0FWIXM > 14) /* Page is full*/

      SW0F115(); /* Add page to temporary storage*/

      SW0FW00.SW0FWIXM = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.SW0FWIXM > 1) /* Page was formatted*/
    SW0F115(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  SW0F116(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "110"; /* Module identification*/
    converseLib.validationFailed(245); /* inspection not found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0FW00.SW0FWSWR = "N"; /* Request for data switch*/


end // end SW0F110

// Purge any temporary storage
Function SW0F111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0FW01 empty; /* M001 display storage*/

  SW0FW00.SW0FWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0FW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "111"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F111

// Select set and open cursor
Function SW0F112()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SWAREC empty; /* Clear row storage area*/

  SWAREC.XWHCD = SW0FW01.XWHCD; /* Warehouse code*/
  SWAREC.SWAINSTP = SW0FW01.SW0FMITP; /* Inspection type*/

  if (SW0FW01.SW0FMITP == " ") /* inspection type not entered*/
    SWAREC.SWAINSTP = "*"; /* wildcard inspection type*/
  else
    SWAREC.SWAINSTP = SW0FW01.SW0FMITP; /* Inspection type*/
  end

  if (SW0FW01.SW0FMINS == 0) /* inspection number not entered*/
    SWAREC.SWAINSNB = -1; /* wildcard inspection number*/
  else
    SWAREC.SWAINSNB = SW0FW01.SW0FMINS; /* Inspection number*/
  end

  if (SW0FW01.SW0FMIST == " ") /* inspection status not entered*/
    SWAREC.XXXSTAT = "*"; /* wildcard inspection status*/
  else
    SWAREC.XXXSTAT = SW0FW01.SW0FMIST; /* Inspection status*/
  end

  try
    call "IO5310" ("S1", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/
  TA1REC.TA1TBLKE = SWAREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F112

// Fetch next row in the cursor
Function SW0F113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5310" ("N1", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0FW00.SW0FWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F113

// Save data in display storage
Function SW0F114()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.TA5TSQIX > 0 /* Not the first page*/
   && SW0FW00.SW0FWIXM == 1) /* and first line on page*/

    SW0FW01.XWHCD = SWAREC.XWHCD; /* Warehouse code*/
    SW0FW01.SW0FMINS = SWAREC.SWAINSNB; /* Inspection number*/
    SW0FW01.SW0FMITP = SWAREC.SWAINSTP; /* Inspection type*/
    SW0FW01.SW0FMIST = SWAREC.XXXSTAT; /* Inspection status*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0FW01.SWAINSNB[SW0FWIXM] = SWAREC.SWAINSNB; /* Inspection number*/
  SW0FW01.SWAINSTP[SW0FWIXM] = SWAREC.SWAINSTP; /* Inspection type*/
  SW0FW01.SWAINDSC[SW0FWIXM] = SWAREC.SWAINDSC; /* Inspection description*/
  SW0FW01.XXXSTAT[SW0FWIXM] = SWAREC.XXXSTAT; /* inspection status*/

  SW0FW00.SW0FWIXM = SW0FW00.SW0FWIXM + 1; /* Increment line index*/


end // end SW0F114

// Add page to temporary storage
Function SW0F115()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0FW01.XXXTSLEN = SW0FW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0FW01 empty; /* M001 display storage*/

    SW0FW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "115"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F115

// Close selected set cursor
Function SW0F116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5310" ("C1", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "116"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F116

// Format and converse the map
Function SW0F120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.SW0FWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0FW00.SW0FWSWF == "Y") /* Map must be formatted*/
      SW0F121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0FM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0FM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0FM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0FM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0FM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0FM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0FM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0FM001.CAITEM; /* Application data*/


end // end SW0F120

// Format the display data
Function SW0F121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0FM001 initial; /* M001 input/output area*/

  SW0FW00.SW0FWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0FW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SW0FW00.SW0FWSWU == "Y") /* Current page was changed*/

        SW0FS01(); /* Update temporary storage page*/

        SW0FW00.SW0FWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SW0FW00.XXXTSPAG > SW0FW00.TA5TSQIX) /* Desired greater highest*/
        SW0FW00.XXXTSPAG = SW0FW00.TA5TSQIX; /* Default to highest*/
      end

      SW0FS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SW0FM001.XXXLITPG skip; /* "PAGE" literal*/
    SW0FM001.XXXTSPAG = SW0FW00.XXXTSPAG; /* Current page*/
    set SW0FM001.XXXLITOF skip; /* "OF" literal*/
    SW0FM001.TA5TSQIX = SW0FW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Check for add and change authority and darken fields.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAADDFL == "Y") /* add authority*/
    set SW0FM001.SW0FMISL initialAttributes; /* normal attribute*/
  else
    set SW0FM001.SW0FMISL protect, invisible; /* dark attribute*/

  end

  if (COMMAREA.CACHGFL == "Y") /* change authority*/
    set SW0FM001.SW0FMIML initialAttributes; /* normal attribute*/
  else
    set SW0FM001.SW0FMIML protect, invisible; /* dark attribute*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (SW0FW01.XWHCD <= " ") /* Warehouse code not present*/
    set SW0FM001.XWHCD cursor; /* Position cursor*/
  end

  SW0FM001.XWHCD = SW0FW01.XWHCD; /* Warehouse code*/
  SW0FM001.SW0FMINS = SW0FW01.SW0FMINS; /* Inspection number*/
  SW0FM001.SW0FMITP = SW0FW01.SW0FMITP; /* Inspection type*/
  SW0FM001.SW0FMIST = SW0FW01.SW0FMIST; /* Inspection status*/

  SW0FW00.SW0FWIXM = 1; /* Initialize line index*/

  while (SW0FW00.SW0FWIXM <= 14 /* Until screen is full*/
   && SW0FW01.SWAINSNB[SW0FWIXM] > 0) /* or end of data*/

    if (SW0FW00.SW0FWIXM == 1) /* First select field*/

      set SW0FM001.SW0FMSEL[SW0FWIXM] cursor, normal; /* Position cursor*/
    else
      set SW0FM001.SW0FMSEL[SW0FWIXM] normal; /* Unprotect*/

    end

    SW0FM001.SW0FMSEL[SW0FWIXM] = SW0FW01.SW0FMSEL[SW0FWIXM];
    SW0FM001.SWAINSNB[SW0FWIXM] = SW0FW01.SWAINSNB[SW0FWIXM];
    SW0FM001.SWAINSTP[SW0FWIXM] = SW0FW01.SWAINSTP[SW0FWIXM];
    SW0FM001.SWAINDSC[SW0FWIXM] = SW0FW01.SWAINDSC[SW0FWIXM];
    SW0FM001.XXXSTAT[SW0FWIXM] = SW0FW01.XXXSTAT[SW0FWIXM];

    SW0FW00.SW0FWIXM = SW0FW00.SW0FWIXM + 1; /* Increment line index*/

  end


end // end SW0F121

// Check attention identifier
Function SW0F130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0FW00.SW0FWSWR == "Y") /* Request for data*/
      set SW0FW01 empty; /* M001 display storage*/
    end

    SW0FW00.SW0FWSWF = "Y"; /* Format the map switch*/
    SW0FW00.SW0FWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0F111(); /* Purge temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SW0FM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(166); /* cant get to requested appl*/

    else

      SLWREC.XXXLOCID = "130"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0FM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    SW0F111(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    converseLib.validationFailed(166); /* cant get to requested appl*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    SLWREC.XXXLOCID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

   /* --------------------------------------------------------*/
     /* check for add or change authority*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* pf14 pressed*/
   || converseVar.eventKey is pf15) /* pf15 pressed*/

    if (converseVar.eventKey is pf14) /* pf14 pressed*/

      if (COMMAREA.CAADDFL == "Y") /* Add authority*/

        COMMAREA.CATOAP = "SW0P"; /* TO application*/

        SW0F111(); /* Purge temporary storage*/

        XSSL001(); /* Exit to another application*/
        converseLib.validationFailed(166); /* cant get to requested appl*/

      else

        SLWREC.XXXLOCID = "130"; /* Module identification*/
        converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

      end

    end

    if (converseVar.eventKey is pf15) /* pf15 pressed*/

      if (COMMAREA.CACHGFL == "Y") /* change authority*/

        COMMAREA.CATOAP = "SW0Q"; /* TO application*/

        SW0F111(); /* Purge temporary storage*/

        XSSL001(); /* Exit to another application*/
        converseLib.validationFailed(166); /* cant get to requested appl*/

      else

        SLWREC.XXXLOCID = "130"; /* Module identification*/
        converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

      end

    end

    exit stack; /* Exit to display map*/

  end



end // end SW0F130

// Reset highlighted fields
Function SW0F140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0FM001.XWHCD initialAttributes; /* Warehouse code*/
  set SW0FM001.SW0FMINS initialAttributes; /* Inspection number*/
  set SW0FM001.SW0FMITP initialAttributes; /* Inspection type*/
  set SW0FM001.SW0FMIST initialAttributes; /* Inspection status*/

  SW0FW00.SW0FWIXM = 1; /* Initialize line index*/

  while (SW0FW00.SW0FWIXM <= 14 /* Until end of lines*/
   && SW0FM001.SWAINSNB[SW0FWIXM] > 0) /* or end of display*/

    set SW0FM001.SW0FMSEL[SW0FWIXM] normal; /* Reset select flag*/

    SW0FW00.SW0FWIXM = SW0FW00.SW0FWIXM + 1; /* Increment line index*/

  end

  set SW0FM001.CATOAP initialAttributes; /* TO application*/
  set SW0FM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested. return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.XWHCD == "?" /* Warehouse list requested*/
   || SW0FM001.SW0FMITP == "?") /* Task type list requested*/

    if (converseVar.eventKey not enter) /* Enter was not pressed*/

      SLWREC.XXXLOCID = "140"; /* Module identification*/
      converseLib.validationFailed(4); /* PF key may not be used*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* ; Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes.*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.XWHCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  WAREHOUSE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0FM001.XWHCD = SW0FW01.XWHCD; /* Restore prior code*/
    else
      SW0FM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0FW01.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/

    end

    SW0FW00.SW0FWSWF = "Y"; /* format map*/
    SW0FW00.SW0FWSWR = "N"; /* request data*/
    set SW0FM001.XWHCD cursor; /* Establish cursor position*/
    converseLib.clearScreen();
     /* clear window*/
    SLWREC.XXXLOCID = "140"; /* module indentification*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of task type codes*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.SW0FMITP == "?") /* Task type list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  TASK TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXTY01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0FM001.SW0FMITP = SW0FW01.SW0FMITP; /* Restore prior code*/
    else
      SW0FM001.SW0FMITP = XTYTBL.XTYCD[XX0XWPIX]; /* Selected code*/
      SW0FW01.SW0FMITP = XTYTBL.XTYCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0FM001.SW0FMITP cursor; /* Establish cursor position*/
    converseLib.clearScreen();
     /* clear screen*/
    SW0FW00.SW0FWSWF = "Y"; /* format screen*/
    SW0FW00.SW0FWSWR = "Y"; /* request data*/
    SLWREC.XXXLOCID = "140"; /* module indentification*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* clear screen from pop-ups, with message*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* clear screen before display*/

  SLWREC.XXXLOCID = "140"; /* module indentification*/
  converseLib.validationFailed(294); /* requested lists displayed*/

  exit stack; /* exit to display map*/



end // end SW0F140

// Verify data that was entered
Function SW0F150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SW0FM001.CATOAP cursor, bold; /* Highlight*/
    set SW0FM001.CAITEM bold; /* Highlight*/
    converseLib.validationFailed(02); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SW0F151(); /* Verify scroll request*/
    if (converseVar.validationMsgNum != 0) /* if errors found*/

      exit stack;

    else

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.TA5TSQIX > 0) /* Page was formatted*/

    SW0FW00.SW0FWIXM = 14; /* Initialize line index*/

    while (SW0FW00.SW0FWIXM > 0) /* Until end of lines*/

      SW0F152(); /* Verify data in the line*/

      SW0FW00.SW0FWIXM = SW0FW00.SW0FWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the task status.*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.SW0FMIST == "A" /* Status is 'A'ctive*/
   || SW0FM001.SW0FMIST == "I" /* or 'I'nactive*/
   || SW0FM001.SW0FMIST == " " /* or blank*/
   || SW0FM001.SW0FMIST == "*") /* or wildcard*/

    if (SW0FM001.SW0FMIST == " ") /* if blank*/

      SW0FM001.SW0FMIST = "*"; /* set field to wildcard char*/

    end

  else

    /* ------------------------------------------------------------*/
     /* If status not 'I'nactive or 'A'ctive or blank '*'*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SW0FM001.SW0FMIST cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* invalid value*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the task type code*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.SW0FMINS < 1) /* Number is blank*/

    if (SW0FM001.SW0FMITP == "  ") /* Code is blank*/

      SLWREC.XXXLOCID = "150"; /* Module identification*/
      set SW0FM001.SW0FMITP cursor, bold; /* Highlight*/
      converseLib.validationFailed(9); /* required field*/

    end

  end

  if (SW0FM001.SW0FMITP > "  ") /* Code not blank*/

    if (SW0FM001.SW0FMITP in XTYTBL.XTYCD) /* Code in table*/

      if (XTYTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* and active status*/

        SLWREC.XXXLOCID = "150"; /* Module identification*/
        set SW0FM001.SW0FMITP cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Inactive status*/

      end

    else

      /* ------------------------------------------------------------*/
       /* If not found on table, indicate invalid.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "150"; /* Module identification*/
      set SW0FM001.SW0FMITP cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* invlalid value*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the warehouse code and status.*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.XWHCD == "  ") /* if whse blank*/

    SLWREC.XXXLOCID = "150"; /* module id*/
    set SW0FM001.XWHCD cursor, bold; /* highlight*/
    converseLib.validationFailed(09); /* required field*/

  else

    if (SW0FM001.XWHCD in XWHTBL.XWHCD) /* Code in table*/

      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* and active status*/

        SLWREC.XXXLOCID = "150"; /* module id*/
        set SW0FM001.XWHCD cursor, bold; /* highlight*/
        converseLib.validationFailed(10); /* invalid status msg*/

      end

    else

      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "150"; /* Module identification*/
      set SW0FM001.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Required field*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0F150

// Verify scroll request
Function SW0F151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0FW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0FW00.XXXTSPAG >= SW0FW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  SW0FW00.SW0FWIXM = 14; /* Initialize line index*/

  while (SW0FW00.SW0FWIXM > 0) /* Until end of lines*/

    if (SW0FM001.SW0FMSEL[SW0FWIXM] != SW0FW01.SW0FMSEL[SW0FWIXM])

      SLWREC.XXXLOCID = "151"; /* Module identification*/
      set SW0FM001.SW0FMSEL[SW0FWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Mods not allowed when back or forward*/
                                   /* requested*/

    end

    SW0FW00.SW0FWIXM = SW0FW00.SW0FWIXM - 1; /* Decrement line number*/

  end



end // end SW0F151

// Verify data in the line
Function SW0F152()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.SW0FMSEL[SW0FWIXM] != SW0FW01.SW0FMSEL[SW0FWIXM]
   && SW0FM001.SW0FMSEL[SW0FWIXM] != "S") /* and is not a "S"*/

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SW0FM001.SW0FMSEL[SW0FWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(228); /* Only "S" may be entered*/

  end



end // end SW0F152

// Process valid input request
Function SW0F160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SW0FW00.SW0FWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (SW0FM001.XWHCD != SW0FW01.XWHCD       /* Warehouse code changed*/
   || SW0FM001.SW0FMINS != SW0FW01.SW0FMINS /* or inspection num changed*/
   || SW0FM001.SW0FMITP != SW0FW01.SW0FMITP /* or inspection type changed*/
   || SW0FM001.SW0FMIST != SW0FW01.SW0FMIST) /* or inspection stat changed*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (SW0FM001.XWHCD > " "    /* Whcd  was entered*/
     || SW0FM001.SW0FMINS > " " /* Inspection was entered*/
     || SW0FM001.SW0FMITP > " " /* Inspection was entered*/
     || SW0FM001.SW0FMIST > " ") /* Inspection was entered*/

      SW0FW00.SW0FWSWR = "Y"; /* Request for data switch*/

    else

      SW0FW00.SW0FWSWR = "N"; /* Request for data switch*/

      SW0F111(); /* Purge any temporary storage*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SW0FW00.XXXTSPAG = SW0FW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SW0FW00.XXXTSPAG = SW0FW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  SW0FW00.SW0FWIXM = 1; /* Initialize line index*/

  while (SW0FW00.SW0FWIXM <= 14) /* Until end of lines*/

    if (SW0FM001.SW0FMSEL[SW0FWIXM] != SW0FW01.SW0FMSEL[SW0FWIXM])

      SW0FW01.SW0FMSEL[SW0FWIXM] = SW0FM001.SW0FMSEL[SW0FWIXM];
      SW0FW00.SW0FWSWU = "Y"; /* Storage update switch*/

    end

    SW0FW00.SW0FWIXM = SW0FW00.SW0FWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and indicate*/
   /* that map 002 is to be displayed.*/
   /* ------------------------------------------------------------*/

  if ("S" in SW0FW01.SW0FMSEL) /* Line was selected*/

    SW0FW00.SW0FWIXM = sysVar.arrayIndex; /* Map line index*/

    SW0FM002.XWHCD = SW0FW01.XWHCD; /* Warehouse*/
    SW0FM002.SWAINSNB = SW0FW01.SWAINSNB[SW0FWIXM]; /* Inspection num*/
    SW0FM001.SW0FMSEL[SW0FWIXM] = "V"; /* clear first select field*/
    SW0FW01.SW0FMSEL[SW0FWIXM] = "V"; /* clear first select field*/

    SW0FW00.SW0FWSWD = "2"; /* Map to be displayed switch*/
    SW0FW00.SW0FWSWR = "Y"; /* Request for data switch*/

  end


end // end SW0F160

// Display the selected table row
Function SW0F200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0F210(); /* Obtain the data to display*/

  SW0F220(); /* Format and display the map*/

  SW0F230(); /* Check attention identifier*/

  SW0F240(); /* Reset fields to normal intensity*/

  SW0F250(); /* Verify the entered data*/

  SW0F260(); /* Process valid input request*/


end // end SW0F200

// Obtain the data to display
Function SW0F210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.SW0FWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  set SW0FW02 empty; /* M002 display storage*/

  SW0FW02.XWHCD = SW0FM002.XWHCD; /* Warehouse code*/
  SW0FW02.SWAINSNB = SW0FM002.SWAINSNB; /* Style number*/

   /* ------------------------------------------------------------*/
   /* Obtain the table row to be displayed.*/
   /* ------------------------------------------------------------*/

  SW0F211(); /* Select row from dstloc.vinsp001*/


  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

  else

    SLWREC.XXXLOCID = "210"; /* Module identification*/
    converseLib.validationFailed(245); /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Obtain detail info from dstloc.vintsk01 and dcorp.vxta0001*/
   /* ------------------------------------------------------------*/

  SW0F212(); /* Open cursor for dstloc.vintsk01*/

   /* ------------------------------------------------------------*/
   /* initialize switches and flags*/
   /* ------------------------------------------------------------*/

  SW0FW00.SW0FWIXA = 1; /* Initialize array index*/
  SW0FW00.SW0FW1ST = "Y"; /* first time thru switch*/
  SW0FW00.SW0FWCS2 = "N"; /* Initialize cursor switch*/
  SW0FW00.SW0FWPPF = "N"; /* Initialize 2 page switch*/
  SW0FW00.SW0FWMNT = 0; /* Initialize total estimated min*/

   /* ------------------------------------------------------------*/
   /* fetch detail from dstloc.vintsk01 and dcorp.vxta0001 until*/
   /* no more rows or 20 occurrances in the array max*/
   /* ------------------------------------------------------------*/

  while (SW0FW00.SW0FWCS2 == "N" /* Until end of cursor or 20 rows max*/
   && SW0FW00.SW0FWIXA < 21)

    SW0F213(); /* Fetch row from dstloc.vintsk01*/

    SW0F214(); /* Select from dcorp.vxta0001*/


    if (SW0FW00.SW0FWCS2 == "N") /* not end of cursor*/
      SW0F215(); /* save data in array*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If array index not greater than 1 send msg.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.SW0FWIXA < 1)

    SLWREC.XXXLOCID = "210"; /* Module identification*/
    converseLib.validationFailed(244); /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If array index greater than 10 set switch to 'y'*/
   /* ------------------------------------------------------------*/
  if (SW0FW00.SW0FWIXA > 10) /* 10 lines per page*/

    SW0FWPPF = "Y"; /* two page switch*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor for dstloc.vintsk01.*/
   /* ------------------------------------------------------------*/

  SW0F216(); /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0FW00.SW0FWSWR = "N"; /* Request for data switch*/



end // end SW0F210

// Select the requested table row
Function SW0F211()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set SWAREC empty; /* Row storage area*/

  SWAREC.XWHCD = SW0FW02.XWHCD; /* warehouse code*/
  SWAREC.SWAINSNB = SW0FW02.SWAINSNB; /* inspection number*/

  try
    call "IO5310" ("S ", SQLCA, SWAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      SW0FS21(); /* format header data*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* No rows found*/

        return; /* Return to previous process*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0FW00.SW0FWSWD = "1"; /* Map to be displayed switch*/
  SW0FW00.SW0FWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "221"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSP001"; /* Table view name*/
  TA1REC.TA1TBLKE = SWAREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F211

// Open cursor  dstloc.vintsk0
Function SW0F212()
   /* ------------------------------------------------------------*/
   /* Select set and open cursor for dstloc.vintsk01.*/
   /* ------------------------------------------------------------*/

  set SWBREC empty; /* Set record empty*/

  SWBREC.XWHCD = SWAREC.XWHCD; /* Warehouse code*/
  SWBREC.SWAINSNB = SWAREC.SWAINSNB; /* INspection number*/
  SWBREC.XGPCD = "*"; /* GPC*/
  SWBREC.SL-TASK-CD = -1; /* Task code*/

  try
    call "IO5320" ("S1", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "212"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSTK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F212

// Fetch next row in the cursor
Function SW0F213()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5320" ("N1", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0FW00.SW0FWCS2 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "213"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSTK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F213

// Select row from dcorp.vxta0001
Function SW0F214()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set SWYREC empty; /* Row storage area*/

  SWYREC.XGPCD = SWBREC.XGPCD; /* gp code*/
  SWYREC.SWYTACD = SWBREC.SL-TASK-CD; /* task code*/

  try
    call "IO5550" ("S ", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* or row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SW0FW00.SW0FWSWD = "1"; /* Map to be displayed switch*/
  SW0FW00.SW0FWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "214"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F214

// Add data to array
Function SW0F215()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0FW00.SW0FWMNT = SW0FW00.SW0FWMNT + SWYREC.SWYTAMM; /* add task min tot*/

  SW0FW02.SW0FMEMM = SW0FW00.SW0FWMNT; /* estimated minutes*/

  SW0FW02.XGPCD[SW0FWIXA] = SWYREC.XGPCD; /* gpc code*/
  SW0FW02.SWYTACD[SW0FWIXA] = SWYREC.SWYTACD; /* task*/
  SW0FW02.SWYTADSC[SW0FWIXA] = SWYREC.SWYTADSC; /* task description*/
  SW0FW02.SWZTECD[SW0FWIXA] = SWBREC.SL-TASK-ERR-CD; /* task err code*/
  SW0FW02.SWYTAMM[SW0FWIXA] = SWYREC.SWYTAMM; /* task adj minutes*/
  SW0FW02.XXXSTAT[SW0FWIXA] = SWYREC.XXXSTAT; /* task status*/
  SWBREC.SWAPCTIN = SWBREC.SWAPCTIN * 100; /* get rid of decimal point*/
  SW0FW02.SWAPCTIN[SW0FWIXA] = SWBREC.SWAPCTIN; /* percent inspected*/

  SW0FW00.SW0FWIXA = SW0FW00.SW0FWIXA + 1; /* Increment line index*/


end // end SW0F215

// Close selected set cursor
Function SW0F216()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5320" ("C1", SQLCA, SWBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "216"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINTSK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0F216

// Format and converse the map
Function SW0F220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.SW0FWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0FW00.SW0FWSWF == "Y") /* Map must be formatted*/
      SW0F221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0FM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0FM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0FM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0FM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0FM002.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0FM002 alarm; /* Indicate sound alarm*/

  end

  converse SW0FM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0FM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0FM002.CAITEM; /* Application data*/



end // end SW0F220

// Format the display data
Function SW0F221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0FM002 initial; /* M002 input/output area*/

  SW0FW00.SW0FWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the two page switch = 'y' move 2 display page*/
   /* ------------------------------------------------------------*/

  if (SW0FW00.SW0FWPPF == "N") /* one page to display*/

    SW0FW00.TA5TSQIX = 1; /* number of pages*/

  else

    if (SW0FW00.SW0FWPPF == "Y") /* tw0 pages to display*/

      SW0FW00.TA5TSQIX = 2; /* number of pages*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Display the page information on the screen.*/
   /* ------------------------------------------------------------*/

  set SW0FM002.XXXLITPG skip; /* "PAGE" literal*/
  SW0FM002.XXXTSPAG = SW0FW00.XXXTSPAG; /* Current page*/
  set SW0FM002.XXXLITOF skip; /* "OF" literal*/
  SW0FM002.TA5TSQIX = SW0FW00.TA5TSQIX; /* Highest page*/

   /* ------------------------------------------------------------*/
   /* check add and change to see if fields should be dark.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAADDFL == "Y") /* add authority*/

    set SW0FM002.SW0FMISL initialAttributes; /* display attribute*/

  else

    set SW0FM002.SW0FMISL protect, invisible; /* dark attribute*/

  end

  if (COMMAREA.CACHGFL == "Y") /* add authority*/

    set SW0FM002.SW0FMIML initialAttributes; /* display attribute*/

  else

    set SW0FM002.SW0FMIML protect, invisible; /* dark attribute*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SW0FM002.SW0FMEMM = SW0FW02.SW0FMEMM; /* estimated minutes*/

  SW0FM002.XWHCD = SW0FW02.XWHCD; /* Warehouse code*/
  SW0FM002.SWAINSNB = SW0FW02.SWAINSNB; /* Inspection number*/
  SW0FM002.SWAINSTP = SW0FW02.SWAINSTP; /* Inspection type*/
  SW0FM002.SW0FMAMM = SW0FW02.SW0FMAMM; /* adjusted minutes*/
  SW0FM002.SW0FMIST = SW0FW02.SW0FMIST; /* Inspection status*/
  SW0FM002.SW0FMPIN = SW0FW02.SW0FMPIN; /* Percent inspected*/
  SW0FM002.SW0FMDSC = SW0FW02.SW0FMDSC; /* Inspection description*/
  SW0FM002.SW0FMSMM = SW0FW02.SW0FMSMM; /* set up month*/
  SW0FM002.SW0FMSDD = SW0FW02.SW0FMSDD; /* set up day*/
  SW0FM002.SW0FMSYY = SW0FW02.SW0FMSYY; /* set up year*/
  SW0FM002.SW0FMCMM = SW0FW02.SW0FMCMM; /* change month*/
  SW0FM002.SW0FMCDD = SW0FW02.SW0FMCDD; /* change day*/
  SW0FM002.SW0FMCYY = SW0FW02.SW0FMCYY; /* change year*/
  SW0FM002.SW0FMCTM = SW0FW02.SW0FMCTM; /* change time*/
  SW0FM002.XXXUSRID = SW0FW02.XXXUSRID; /* userid*/


   /* ------------------------------------------------------*/
   /* initialize screen and array indexes*/
   /* ------------------------------------------------------*/

  if (SW0FW00.SW0FW1ST == "Y") /* first time thru*/

    SW0FW00.SW0FWIXA = 1; /* initialize array index*/
    SW0FW00.SW0FW1ST = "N"; /* first time thru switch*/

  end

  SW0FW00.SW0FWIXS = 1; /* Initialize screen index*/

   /* --------------------------------------------------------*/
   /* format data from display storage 10 tasks to a screen*/
   /* --------------------------------------------------------*/

  while (SW0FW00.SW0FWIXS <= 10 /* Until screen is full*/
   && SW0FW02.SWYTACD[SW0FWIXA] > 0) /* or end of data*/

    SW0FM002.XGPCD[SW0FWIXS] = SW0FW02.XGPCD[SW0FWIXA];
    SW0FM002.SWYTACD[SW0FWIXS] = SW0FW02.SWYTACD[SW0FWIXA];
    SW0FM002.SWYTADSC[SW0FWIXS] = SW0FW02.SWYTADSC[SW0FWIXA];
    SW0FM002.SWZTECD[SW0FWIXS] = SW0FW02.SWZTECD[SW0FWIXA];
    SW0FM002.SWYTAMM[SW0FWIXS] = SW0FW02.SWYTAMM[SW0FWIXA];
    SW0FM002.XXXSTAT[SW0FWIXS] = SW0FW02.XXXSTAT[SW0FWIXA];
    SW0FM002.SWAPCTIN[SW0FWIXS] = SW0FW02.SWAPCTIN[SW0FWIXA];

    SW0FW00.SW0FWIXS = SW0FW00.SW0FWIXS + 1; /* Increment screen index*/

    SW0FW00.SW0FWIXA = SW0FW00.SW0FWIXA + 1; /* Increment screen index*/

  end



end // end SW0F221

// Check attention identifier
Function SW0F230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0FW00.SW0FWSWR == "Y") /* Request for data*/
      set SW0FW02 empty; /* M001 display storage*/
    end

    SW0FW00.SW0FWSWF = "N"; /* Format the map switch*/
    SW0FW00.SW0FWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0FM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSL001(); /* Exit to another application*/

      set SW0FM002.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(166); /* cant get to requested appl*/

    else

      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf9) /* or PF9 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0FM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      SW0FW00.SW0FWSWD = 1; /* set map 1 to be displayed*/
      SW0FW00.SW0FWSWF = "N"; /* format map request switch*/
      exit stack;
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf9) /* PF9 was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* TO application*/
    end

    XSSL001(); /* Exit to another application*/
    converseLib.validationFailed(166); /* cant get to requested appl*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    SLWREC.XXXLOCID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

   /* --------------------------------------------------------*/
     /* check for add or change authority*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* pf14 pressed*/
   || converseVar.eventKey is pf15) /* pf15 pressed*/

    if (converseVar.eventKey is pf14) /* pf14 pressed*/

      if (COMMAREA.CAADDFL == "Y") /* Add authority*/

        COMMAREA.CATOAP = "SW0P"; /* TO application*/

        XSSL001(); /* Exit to another application*/
        converseLib.validationFailed(166); /* cant get to requested appl*/

      else

        SLWREC.XXXLOCID = "230"; /* Module identification*/
        converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

      end

    end

    if (converseVar.eventKey is pf15) /* pf14 pressed*/

      if (COMMAREA.CACHGFL == "Y") /* change authority*/

        COMMAREA.CATOAP = "SW0Q"; /* TO application*/

        XSSL001(); /* Exit to another application*/
        converseLib.validationFailed(166); /* cant get to requested appl*/

      else

        SLWREC.XXXLOCID = "230"; /* Module identification*/
        converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

      end

    end

    exit stack; /* Exit to display map*/

  end



end // end SW0F230

// Reset highlighted fields
Function SW0F240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set SW0FM002.CATOAP initialAttributes; /* TO application*/
  set SW0FM002.CAITEM initialAttributes; /* Application data*/



end // end SW0F240

// Verify data that was entered
Function SW0F250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0FM002.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "250"; /* Module identification*/
    set SW0FM002.CATOAP cursor, bold; /* highlight*/
    set SW0FM002.CAITEM bold; /* Highlight*/
    converseLib.validationFailed(02); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SW0F251(); /* Verify scroll request*/

  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0F250

// Verify scroll request
Function SW0F251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0FW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (SW0FW00.SW0FWPPF == "Y" /* 2 page flag*/
     && SW0FW00.XXXTSPAG == 2)  /* and no more pages*/

      SLWREC.XXXLOCID = "251"; /* Module identification*/
      converseLib.validationFailed(8); /* No more pages to display*/

    else

      if (SW0FW00.SW0FWPPF == "N" /* 2 page flag*/
       && SW0FW00.XXXTSPAG == 1)  /* and no more pages*/

        SLWREC.XXXLOCID = "251"; /* Module identification*/
        converseLib.validationFailed(8); /* No more pages to display*/

      end
    end
  end



end // end SW0F251

// Process valid input request
Function SW0F260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SW0FW00.SW0FWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (SW0FM002.XWHCD != SW0FW02.XWHCD /* Warehouse code changed*/
   || SW0FM002.SWAINSNB != SW0FW02.SWAINSNB) /* or inspection num changed*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (SW0FM002.XWHCD > " " /* Whcd  was entered*/
     || SW0FM002.SWAINSNB > 0) /* Inspection was entered*/

      SW0FW00.SW0FWSWR = "Y"; /* Request for data switch*/

    else

      SW0FW00.SW0FWSWR = "N"; /* Request for data switch*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (SW0FM002.XWHCD != SW0FW02.XWHCD /* Warehouse code changed*/
   || SW0FM002.SWAINSNB != SW0FW02.SWAINSNB) /* or inspection num changed*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (SW0FM002.XWHCD > " " /* Whcd  was entered*/
     || SW0FM002.SWAINSNB > 0) /* Inspection was entered*/

      SW0FW00.SW0FWSWR = "Y"; /* Request for data switch*/

    else

      SW0FW00.SW0FWSWR = "N"; /* Request for data switch*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    if (SW0FW00.SW0FWPPF == "Y") /* two page switch*/

      SW0FW00.XXXTSPAG = SW0FW00.XXXTSPAG - 1; /* decrement page no*/

    end

    SW0FW00.SW0FWIXA = 1; /* set index to display first page*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    if (SW0FW00.SW0FWPPF == "Y") /* two page switch*/

      SW0FW00.XXXTSPAG = SW0FW00.XXXTSPAG + 1; /* increment page no*/

      SW0FW00.SW0FWIXA = 11; /* set index to display next page*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no changes, determine if any other selections were made.*/
   /* ------------------------------------------------------------*/

  SW0F261(); /* Search for next selection*/



end // end SW0F260

// Search for next selection
Function SW0F261()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/

  if ("S" in SW0FW01.SW0FMSEL) /* Line was selected*/

    SW0FW00.SW0FWIXM = sysVar.arrayIndex; /* Map line index*/

    SW0FM002.XWHCD = SW0FW01.XWHCD; /* warehouse code*/
    SW0FM002.SWAINSNB = SW0FW01.SWAINSNB[SW0FWIXM]; /* Insp #*/
    SW0FM001.SW0FMSEL[SW0FWIXM] = "V"; /* set to viewed*/
    SW0FW01.SW0FMSEL[SW0FWIXM] = "V"; /* set to viewed*/

    SW0FW00.SW0FWSWR = "Y"; /* Request for data switch*/


  else

    SW0FW00.SW0FWSWD = "1"; /* Map to be displayed switch*/
    SW0FW00.SW0FWSWF = "Y"; /* format map*/
    exit stack;

  end


end // end SW0F261

// Update temporary storage page
Function SW0FS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0FS01

// Read temporary storage page
Function SW0FS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0FW01.XXXTSLEN = SW0FW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SW0FW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0FS02

// Format header data (map2)
Function SW0FS21()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/


  SW0FW02.XWHCD = SWAREC.XWHCD; /* Warehouse code*/
  SW0FW02.SWAINSNB = SWAREC.SWAINSNB; /* Inspection number*/
  SW0FW02.SWAINSTP = SWAREC.SWAINSTP; /* Inspection type*/
  SW0FW02.SW0FMAMM = SWAREC.SWAADMM; /* adjusted minutes*/
  SW0FW02.SW0FMIST = SWAREC.XXXSTAT; /* Inspection status*/
  SWAREC.SWAPCTIN = SWAREC.SWAPCTIN * 100; /* get rid of decimal*/
  SW0FW02.SW0FMPIN = SWAREC.SWAPCTIN; /* Percent inspected*/
  SW0FW02.SW0FMDSC = SWAREC.SWAINDSC; /* Inspection description*/
  SW0FW00.SW0FWSDT = SWAREC.ZZZSDT; /* convert date*/
  SW0FW02.SW0FMSMM = SW0FWSMM; /* set up month*/
  SW0FW02.SW0FMSDD = SW0FWSDD; /* set up day*/
  SW0FW02.SW0FMSYY = SW0FWSYY; /* set up year*/
  SW0FW00.SW0FWCDT = SWAREC.ZZZCHGDT; /* convert date*/
  SW0FW02.SW0FMCMM = SW0FWSMM; /* change month*/
  SW0FW02.SW0FMCDD = SW0FWSDD; /* change day*/
  SW0FW02.SW0FMCYY = SW0FWSYY; /* change year*/
  SW0FW02.SW0FMCTM = SWAREC.ZZZCHGTM; /* change time*/
  SW0FW02.XXXUSRID = SWAREC.XXXUSRID; /* userid*/


end // end SW0FS21

//*** RECORD=SW0FW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0FW00 type basicRecord
  10 SW0FWIXM SW0FWIXM ; 
  10 SW0FWIXA SW0FWIXA ; 
  10 SW0FWIXS SW0FWIXS ; 
  10 SW0FWMNT SW0FWMNT ; 
  10 SW0FWPPF SW0FWPPF ; 
  10 SW0FW1ST SW0FW1ST ; 
  10 SW0FWSWC SW0FWSWC ; 
  10 SW0FWCS2 SW0FWCS2 ; 
  10 SW0FWSWD SW0FWSWD ; 
  10 SW0FWSWF SW0FWSWF ; 
  10 SW0FWSWR SW0FWSWR ; 
  10 SW0FWSWU SW0FWSWU ; 
  10 SW0FWSDT SW0FWSDT ; 
    15 SW0FWSXX SW0FWSXX ; 
    15 SW0FWSYY SW0FWSYY ; 
    15 SW0FWSMM SW0FWSMM ; 
    15 SW0FWSDD SW0FWSDD ; 
  10 SW0FWCDT SW0FWCDT ; 
    15 SW0FWCXX SW0FWCXX ; 
    15 SW0FWCYY SW0FWCYY ; 
    15 SW0FWCMM SW0FWCMM ; 
    15 SW0FWCDD SW0FWCDD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end SW0FW00

//*** RECORD=SW0FW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SW0FW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(933) ; 
    10 XWHCD XWHCD ; 
    10 SW0FMINS SW0FMINS ; 
    10 SW0FMITP SW0FMITP ; 
    10 SW0FMIST SW0FMIST ; 
    10 SW0FMSEL SW0FMSEL [14] ; 
    10 SWAINSNB SWAINSNB [14] ; 
    10 SWAINSTP SWAINSTP [14] ; 
    10 SWAINDSC SWAINDSC [14] ; 
    10 XXXSTAT XXXSTAT [14] ; 
end // end SW0FW01

//*** RECORD=SW0FW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record SW0FW02 type basicRecord
  5 * char(1561) ; 
    10 CACHGFL CACHGFL ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 SWAINSNB SWAINSNB ; 
    10 SWAINSTP SWAINSTP ; 
    10 SW0FMEMM SW0FMEMM ; 
    10 SW0FMAMM SW0FMAMM ; 
    10 SW0FMIST SW0FMIST ; 
    10 SW0FMPIN SW0FMPIN ; 
    10 SW0FMDSC SW0FMDSC ; 
    10 SW0FMSMM SW0FMSMM ; 
    10 SW0FMSDD SW0FMSDD ; 
    10 SW0FMSYY SW0FMSYY ; 
    10 SW0FMSTM SW0FMSTM ; 
    10 SW0FMCMM SW0FMCMM ; 
    10 SW0FMCDD SW0FMCDD ; 
    10 SW0FMCYY SW0FMCYY ; 
    10 SW0FMCTM SW0FMCTM ; 
    10 XXXUSRID XXXUSRID ; 
    10 XGPCD XGPCD [20] ; 
    10 SWYTACD SWYTACD [20] ; 
    10 SWYTADSC SWYTADSC [20] ; 
    10 SWZTECD SWZTECD [20] ; 
    10 SWYTAMM SWYTAMM [20] ; 
    10 XXXSTAT XXXSTAT [20] ; 
    10 SWAPCTIN SWAPCTIN [20] ; 
end // end SW0FW02

// adjusted minutes
DataItem SW0FMAMM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// chg date dd
DataItem SW0FMCDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chg date mm
DataItem SW0FMCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chg time
DataItem SW0FMCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// chg date yy
DataItem SW0FMCYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// description
DataItem SW0FMDSC char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// estimate minutes
DataItem SW0FMEMM int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sl_insp_nbr
DataItem SW0FMINS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// xxxstat
DataItem SW0FMIST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl_insp_typ_cd
DataItem SW0FMITP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl_pct_of_unt_insp
DataItem SW0FMPIN num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set up date dd
DataItem SW0FMSDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0FMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set up date mm
DataItem SW0FMSMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set up time
DataItem SW0FMSTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set up date yy
DataItem SW0FMSYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru switch
DataItem SW0FW1ST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chg date dd
DataItem SW0FWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// convert setup date
DataItem SW0FWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// chg date mm
DataItem SW0FWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0FWCS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler year century
DataItem SW0FWCXX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// chg date yy
DataItem SW0FWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map array
DataItem SW0FWIXA smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SW0FWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map 2 fields
DataItem SW0FWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// minute total
DataItem SW0FWMNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page switch flag
DataItem SW0FWPPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set up date dd
DataItem SW0FWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// convert setup date
DataItem SW0FWSDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set up date mm
DataItem SW0FWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0FWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SW0FWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0FWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0FWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SW0FWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler year century
DataItem SW0FWSXX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set up date yy
DataItem SW0FWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

