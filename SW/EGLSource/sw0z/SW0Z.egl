package sw0z;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0Z ****
// This application allows a user to display receiving log data
// for a specific whse, container, and package carton sequence
// sequence number.  The user may modifiy, or transfer carton
// modify an existing work order, or transfer carton
// data
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/03/90  sjohns  new program
//          02/14/91  ryonke  program changes for table changes
// fix      02/21/91  cengel  fixed vrlitm01 deletion problem,
//                            and added the capability to chng
//                            the set aside field.  SW0ZS39,
//                            SW0Z100, SW0Z530, SW0Z616,
//                            SW0Z617, SW0Z651, SW0Z661 &
//                            SW0Z671 were changed.
//          04/22/91  jmoore  Changed SW0ZS31 to read 'SB',
//                            instead of 'S '.
//                            In SW0ZS57, added sw0zwidx when
//                            checking new product data gt ' '
//                            to move into sllrec.
//          05/07/91  jmoore  Changed SW0ZS58 to delete 'd2'
//                            instead of 'd '.
//                            In SW0Z630, update all products
//                            on a pallet.
// SL#0     10/10/91  SPOPA   Change "Allow Implicits" to NO.
// SL#0     11/08/91  ryonke  added code to allow maintenance
//                            to setaside as a stand alone
//                            process only.
// MAINT    01/31/92  GRAY    INITIALIZE RECORDS AND MAPS.
// SL#0     06/02/92  JFIAT   Keep ts-crtn-unt on rlitm when
//                            slc is the only field altered.
// SL#0     06/09/92  Ryonke  Set cursor to current po number
//                            after transaction completed.
// WILRCV   03/09/93  BGILDE  Changed to use po nbr when
//                            whse = '51'.
//                            Changed to use po id when
//                            whse ^= '51'.
// SL#0     05/20/93  GRAY    COMMENT OUT CODE IN SW0ZS39 WHERE
//                            SL2RCVD WAS ADDING TO ITSELF.
//                            THIS WAS CAUSING QTY TO DOUBLE
//                            WHEN SAS WAS CHANGED.
// tbl chg  03/04/94  Ryonke  Code changes for table changes.
// ASW001   12/29/95  hkempe  Recompiled due to VPLCPO01 table
//                            change.
// Y2KFIX   02/03/98  MBURLE  Regenerated to pick latest
//                            version of date routine, XX0XS01.
// *********************
Program SW0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  INAREC INAREC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PCYREC PCYREC; // record
  SL1REC SL1REC; // record
  SL2REC SL2REC; // record
  SL3REC SL3REC; // record
  SL5REC SL5REC; // record
  SLLREC SLLREC; // record
  SLMREC SLMREC; // record
  SLOREC SLOREC; // record
  SLSREC SLSREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0ZW00 SW0ZW00; // record
  SW0ZW01 SW0ZW01; // record
  SW0ZW02 SW0ZW02; // record
  SW0ZW05 SW0ZW05; // record
  SWFREC SWFREC; // record
  SWGREC SWGREC; // record
  SWHREC SWHREC; // record
  SWIREC SWIREC; // record
  SWJREC SWJREC; // record
  SWMREC SWMREC; // record
  SWNREC SWNREC; // record
  SWVREC SWVREC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XOWREC XOWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SW0ZT01; // table
  use XDMTBL; // table
  use XEGTBL; // table
  use XGPTBL; // table
  use XLCTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XROTBL; // table
  use XSLTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use SW0ZM.SW0ZM001,  // forms
      SW0ZM.TA0PM001, 
      SW0ZM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0ZM001 initial; /* M001 input/output*/
    set TA0PM001 initial;
    set XX0XM001 initial; /* pop-up window put*/
    set SW0ZW00 empty; /* Working storage*/
    set SW0ZW01 empty; /* M001 display storage*/
    set SW0ZW02 empty; /* M001 temporary storage*/
    set SW0ZW05 empty; /* M001 temporary storage*/
    set INAREC empty;
    set PCYREC empty;
    set PC2REC empty;
    set PC3REC empty;
    set SLLREC empty;
    set SLMREC empty;
    set SLOREC empty;
    set SLSREC empty;
    set SLVREC empty;
    set SL1REC empty;
    set SL2REC empty;
    set SL3REC empty;
    set SL5REC empty;
    set SQLCA empty; /* SQL communication area*/
    set SWFREC empty;
    set SWGREC empty;
    set SWHREC empty;
    set SWIREC empty;
    set SWJREC empty;
    set SWMREC empty;
    set SWNREC empty;
    set SWVREC empty;
    set SYCREC empty;
    set SYPREC empty;
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* submit jcl*/
    set XOWREC empty;
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty;
    set ERRSQLCA empty;

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    SW0ZW00.XXXTSLEN = 600;

    if (SLWREC.XWHCD > " "
     && SLWREC.TSHCNTNR > " "
     && SLWREC.PC3PONBR > 0
     && SLWREC.XGPCD > " "
     && SLWREC.XDMCD > " "
     && SLWREC.XQACD > " "
     && SLWREC.SY1STNBR > " "
     && SLWREC.SY2CLRID > " ")

      SW0ZW00.SW0ZWSWR = "Y"; /* Request for data switch*/
    else
      SW0ZW00.SW0ZWSWR = "N"; /* Request for data switch*/
    end

    SW0ZW00.SW0ZWSWF = "Y"; /* format screen data switch*/
    SLWREC.XXXAPPID = COMMAREA.CACURRAP;

    SW0ZW01.XWHCD = SLWREC.XWHCD;
    if (SW0ZW01.XWHCD in XWHTBL.XWHCD)
      SW0ZW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    SW0ZW01.TSHCNTNR = SLWREC.TSHCNTNR;
    SW0ZW01.SY1STNBR = SLWREC.SY1STNBR;
    SW0ZW01.SY2CLRID = SLWREC.SY2CLRID;
    SW0ZW01.PC3PONBR = SLWREC.PC3PONBR;
    SW0ZW01.SW0ZWPON = SLWREC.PC3PONBR;

    if (SLWREC.XGPCD > " ")
      SW0ZW01.XGPCD = SLWREC.XGPCD;
    else
      if (SLWREC.XWHCD == "51")
        SW0ZW01.XGPCD = "03";
      else
        SW0ZW01.XGPCD = "02";
      end
    end

    if (SLWREC.XDMCD > " ")
      SW0ZW01.XDMCD = SLWREC.XDMCD;
    else
      SW0ZW01.XDMCD = "00";
    end

    if (SLWREC.XQACD > " ")
      SW0ZW01.XQACD = SLWREC.XQACD;
    else
      SW0ZW01.XQACD = "01";
    end

     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/

    goto SW0Z001;

    SW0Z001: SW0Z001();
    goto SW0Z001;
  end // end main
end // end SW0Z

// Inquire/maintainance m001
Function SW0Z001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0Z100(); /* Obtain the data to display*/

  SW0Z200(); /* Format and display the map*/

  SW0Z300(); /* Check attention identifier*/

  SW0Z400(); /* Reset fields to normal intensity*/

  SW0Z500(); /* Verify the entered data*/

  SW0Z600(); /* Process valid input request*/

end // end SW0Z001

// Obtain the data to display
Function SW0Z100()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* purge temporary storage*/
   /* ------------------------------------------------------------*/

  SW0ZS01(); /* purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* if valid key data has been entered obtain product info.*/
   /* ------------------------------------------------------------*/

  SW0ZS02(); /* Select 's ' dstloc.vrlhdr01 row*/

  if (SQLCA.VAGen_SQLCODE == 100)
    SW0Z110(); /* clear header and detail*/
    converseLib.validationFailed(44); /* no data for display*/
    SLWREC.XXXLOCID = "100";
    SW0ZW01.CACHGFL = "N";
    return;
  end

   /* ------------------------------------------------------------*/
   /* only containers with receiving status code of '01' or '02'*/
   /* may be displayed.*/
   /* ------------------------------------------------------------*/

  if (SL1REC.YRSCD == "01"
   || SL1REC.YRSCD == "02")
     /* next sentence*/
  else
    SW0Z110(); /* clear header and detail*/
    converseLib.validationFailed(317); /* no data for display*/
    SLWREC.XXXLOCID = "110 ";
    SW0ZW01.CACHGFL = "N";
    return;
  end

  SW0ZW01.SWEPLLNB = SL1REC.SWEPLLNB; /* load dstloc.vrlhdr01 data*/
  SW0ZW01.XARCD = SL1REC.XARCD;
  SW0ZW01.SL4ZONE = SL1REC.SL4ZONE;

   /* ------------------------------------------------------------*/
   /* if no errors exist,  obtain product information for the*/
   /* specific whse/container/gpc/style/color/dim/xqacd/po nbr*/
   /* ------------------------------------------------------------*/

  SW0ZS03(); /* select 's9' dstloc.vrlitm01*/

  SW0ZS04(); /* fetch 'n9' dstloc.vrlitm01*/

  if (SQLCA.VAGen_SQLCODE == 100)
    SW0Z110(); /* clear header and detail*/
    converseLib.validationFailed(44); /* no products exist for req container*/
    SLWREC.XXXLOCID = "100";
    SW0ZW01.CACHGFL = "N";
    return;
  end

   /* ------------------------------------------------------*/
   /* load "current" data into w/s*/
   /* ------------------------------------------------------*/

  SW0ZW01.PC4ORTYP = SL2REC.PC4ORTYP;

   /* ------------------------------------------------------*/
   /* load "new" data into w/s*/
   /* ------------------------------------------------------*/

  SW0ZW01.SW0ZWGPC = SL2REC.XGPCD;
  SW0ZW01.SW0ZWSTY = SL2REC.SY1STNBR;
  SW0ZW01.SW0ZWCLR = SL2REC.SY2CLRID;
  SW0ZW01.SW0ZWDIM = SL2REC.XDMCD;
  SW0ZW01.SW0ZWXQA = SL2REC.XQACD;
  SW0ZW01.SW0ZWPON = SL2REC.PC3PONBR;
  SW0ZW01.SW0ZWOTP = SL2REC.PC4ORTYP;

  SW0ZW00.SW0ZWIDX = 1;
  while (SQLCA.VAGen_SQLCODE == 0)

    /* ------------------------------------------------------*/
     /* load "current" data into t/s*/
    /* ------------------------------------------------------*/

    SW0ZW02.PKDNCSQN[SW0ZWIDX] = SL2REC.PKDNCSQN;
    SW0ZW02.SL2CASE[SW0ZWIDX] = SL2REC.SL2CASE;
    SW0ZW02.SL2PALET[SW0ZWIDX] = SL2REC.SL2PALET;
    SW0ZW02.SL5LOCTN[SW0ZWIDX] = SL2REC.SL5LOCTN;
    SW0ZW02.SL2RCVD[SW0ZWIDX] = SL2REC.SL2RCVD;
    SW0ZW02.TSOSHPQT[SW0ZWIDX] = SL2REC.TSOSHPQT;
    SW0ZW02.INASAID[SW0ZWIDX] = SL2REC.INASAID;
    SW0ZW02.SW0ZWSAS[SW0ZWIDX] = SL2REC.INASAID;
    SW0ZW02.PC2INSEG[SW0ZWIDX] = SL2REC.PC2INSEG;
    SW0ZW02.XEGCD[SW0ZWIDX] = SL2REC.XEGCD;
    SW0ZW02.XSLCD[SW0ZWIDX] = SL2REC.XSLCD;
    SW0ZW02.XPGCD[SW0ZWIDX] = SL2REC.XPGCD;
    SW0ZW02.XUMCD[SW0ZWIDX] = SL2REC.XUMCD;
    SW0ZW02.XOWCD[SW0ZWIDX] = SL2REC.XOWCD;

    SW0ZW02.SW0ZWTPR[SW0ZWIDX] = 0;

    /* ------------------------------------------------------*/
     /* bypass multiple sizes per product*/
    /* ------------------------------------------------------*/

    while (SL2REC.PKDNCSQN == SW0ZW02.PKDNCSQN[SW0ZWIDX]
     && SL2REC.SL2CASE == SW0ZW02.SL2CASE[SW0ZWIDX]
     && SL2REC.SL2PALET == SW0ZW02.SL2PALET[SW0ZWIDX]
     && SL2REC.SL5LOCTN == SW0ZW02.SL5LOCTN[SW0ZWIDX]
     && SL2REC.INASAID == SW0ZW02.INASAID[SW0ZWIDX]
     && SL2REC.PC2INSEG == SW0ZW02.PC2INSEG[SW0ZWIDX]
     && SL2REC.XEGCD == SW0ZW02.XEGCD[SW0ZWIDX]
     && SL2REC.XSLCD == SW0ZW02.XSLCD[SW0ZWIDX]
     && SL2REC.XPGCD == SW0ZW02.XPGCD[SW0ZWIDX]
     && SL2REC.XUMCD == SW0ZW02.XUMCD[SW0ZWIDX]
     && SL2REC.XOWCD == SW0ZW02.XOWCD[SW0ZWIDX]
     && SQLCA.VAGen_SQLCODE == 0)

      SW0ZW02.SW0ZWTPR[SW0ZWIDX] = SW0ZW02.SW0ZWTPR[SW0ZWIDX] + SL2REC.SL2RCVD;

      SW0ZS04(); /* fetch 'n9' dstloc.vrlitm01*/

    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SW0ZW00.SW0ZWIDX > 7) /* Page is full*/
      SW0ZW02.SW0ZWNLD = SW0ZW00.SW0ZWIDX; /* nbr of lines loaded*/
      SW0ZS06(); /* Add page to temp storage*/
    else
      SW0ZW00.SW0ZWIDX = SW0ZW00.SW0ZWIDX + 1;
    end
  end

  SW0ZS05(); /* ; close 's9' dstloc.vrlitm01*/

   /* ------------------------------------------------------------*/
   /* Add any partially filled page to the storage queue.*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWIDX > 1) /* Page is full*/
    SW0ZW02.SW0ZWNLD = SW0ZW00.SW0ZWIDX - 1;
    SW0ZS06(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* obtain the style/color descriptions/determine life cycle*/
   /* ------------------------------------------------------------*/

  set SYCREC empty; /* init dprod.vcolor02 record*/
  SYCREC.XGPCD = SW0ZW01.XGPCD;
  SYCREC.SY1STNBR = SW0ZW01.SY1STNBR;
  SYCREC.SY2CLRID = SW0ZW01.SY2CLRID;
  SYCREC.XDMCD = SW0ZW01.XDMCD;

  SW0ZS07(); /* select 's ' dprod.vcolor02 row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    XX0XS01();

    if (SYCREC.SY2CEDT1 <= XX0XW01.XX0XWDAT)
      SW0ZW01.XLCCD = XLCCD1;
    else
      if (SYCREC.SY2CEDT2 <= XX0XW01.XX0XWDAT)
        SW0ZW01.XLCCD = XLCCD2;
      else
        if (SYCREC.SY2CEDT3 <= XX0XW01.XX0XWDAT)
          SW0ZW01.XLCCD = XLCCD3;
        else
          if (SYCREC.SY2CEDT4 <= XX0XW01.XX0XWDAT)
            SW0ZW01.XLCCD = XLCCD4;
          else
            SW0ZW01.XLCCD = XLCCD1;
          end
        end
      end
    end

    if (SW0ZW01.XLCCD in XLCTBL.XLCCD)
      SW0ZW01.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
    end

    SW0ZW01.SW0ZWXLC = SW0ZW01.XLCCD;
    SW0ZW01.SW0ZWXLD = SW0ZW01.XLCABRV;

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SL2PALET = "99999";
  SW0ZW00.XXXTSPAG = 1;
  SW0ZW00.SW0ZWSWR = "N"; /* Request for data switch*/
  SW0ZW01.CACHGFL = "Y"; /* data is available for change*/
  SW0ZW00.SW0ZWHUS = "N"; /* header update switch*/
  SW0ZW00.SW0ZWDUS = "N"; /* detail update switch*/
  SW0ZW00.SW0ZWUPS = "N"; /* t/s update switch*/
  SW0ZW00.SW0ZWCHA = "N"; /* change all switch*/
  SW0ZW00.SW0ZWREF = "N"; /* reformatted data switch*/
  SW0ZW00.SW0ZWDBU = "N"; /* databases updated switch*/

end // end SW0Z100

// clear the data fields in ws
Function SW0Z110()

  SW0ZW01.SW0ZWGPC = " ";
  SW0ZW01.SW0ZWSTY = " ";
  SW0ZW01.SW0ZWCLR = " ";
  SW0ZW01.SW0ZWDIM = " ";
  SW0ZW01.SW0ZWXQA = " ";
  SW0ZW01.SW0ZWPON = 0;
  SW0ZW01.SW0ZWOTP = " ";
  SW0ZW01.SW0ZWPOI = " ";

  set SW0ZW02 empty;

end // end SW0Z110

// Format and converse the map
Function SW0Z200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0ZW00.SW0ZWSWF == "Y") /* Map must be formatted*/
      SW0Z210(); /* Format the data on the map*/
    end

  end

  SW0ZM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SW0ZM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0ZM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0) /* Message to display*/
    if (SLWREC.SLWMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SLWREC.SLWMSGNO);
    end /* error message number*/
    SW0ZM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/
    set SW0ZM001 alarm; /* Indicate sound alarm*/
  end

  converse SW0ZM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;

  COMMAREA.CATOAP = SW0ZM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0ZM001.CAITEM; /* Application data*/


end // end SW0Z200

// Format display data
Function SW0Z210()

   /* ------------------------------------------------------------*/
   /* init map sw0zm001*/
   /* ------------------------------------------------------------*/

  set SW0ZM001 initial; /* m001 input/ouput area*/

  SW0ZW00.SW0ZWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format sw0zm001 using key data*/
   /* ------------------------------------------------------------*/

  SW0ZM001.XWHCD = SW0ZW01.XWHCD; /* warehouse code*/
  SW0ZM001.XWHABRV = SW0ZW01.XWHABRV; /* warehous abrv desc*/
  SW0ZM001.TSHCNTNR = SW0ZW01.TSHCNTNR; /* container nbr*/
  SW0ZM001.XROPDEST = SW0ZW01.XROPDEST; /* printer*/
  SW0ZM001.SWEPLLNB = SW0ZW01.SWEPLLNB; /* plan nbr*/
  SW0ZM001.XARCD = SW0ZW01.XARCD; /* area*/
  SW0ZM001.SL4ZONE = SW0ZW01.SL4ZONE; /* zone*/

   /* ------------------------------------------------------------*/
   /* load "current" data from sw0zw01 work record*/
   /* ------------------------------------------------------------*/

  SW0ZM001.XGPCD = SW0ZW01.XGPCD; /* gpc code*/
  SW0ZM001.SY1STNBR = SW0ZW01.SY1STNBR; /* style nbr*/
  SW0ZM001.SY2CLRID = SW0ZW01.SY2CLRID; /* color id*/
  SW0ZM001.XDMCD = SW0ZW01.XDMCD; /* dimension code*/
  SW0ZM001.XQACD = SW0ZW01.XQACD; /* quality code*/
  SW0ZM001.XLCCD = SW0ZW01.XLCCD; /* life cycle*/
  SW0ZM001.XLCABRV = SW0ZW01.XLCABRV; /* life cycle desc*/
  SW0ZM001.PC3PONBR = SW0ZW01.PC3PONBR; /* PO NBR*/
  SW0ZM001.SW0ZMPID = SW0ZW01.SW0ZWPID; /* PO ID*/
  SW0ZM001.PC4ORTYP = SW0ZW01.PC4ORTYP; /* PO ORDER TYPE*/

  if (SW0ZM001.XWHCD == "51") /* if aprl whse*/
    set SW0ZM001.SW0ZMPID invisible, protect;
    set SW0ZM001.PC4ORTYP invisible, protect;
    set SW0ZM001.SW0ZMPOI invisible, protect;
    set SW0ZM001.SW0ZMOTP invisible, protect;
  else /* if ftwr whse*/
    set SW0ZM001.PC3PONBR invisible, protect;
    set SW0ZM001.SW0ZMPON invisible, protect;
  end

   /* ------------------------------------------------------------*/
   /* get po id display format*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XWHCD == "07") /* if ftwr whse*/
    set SWVREC empty;
    SWVREC.SWVWFNC = "ID";
    SWVREC.PC3PONBR = SW0ZW01.PC3PONBR;
    SWVREC.XGPCD = SW0ZW01.XGPCD;
    XSSLS10(); /* obtain po id*/
    if (SWVREC.SWVWRTN == 0)
      SW0ZM001.SW0ZMPID = SWVREC.SWVWPOID;
      SW0ZW01.SW0ZWPID = SWVREC.SWVWPOID;
      SW0ZM001.PC4ORTYP = SWVREC.PC4ORTYP;
    end
    set SWVREC empty;
    SWVREC.SWVWFNC = "ID";
    SWVREC.PC3PONBR = SW0ZW01.SW0ZWPON;
    SWVREC.XGPCD = SW0ZW01.XGPCD;
    XSSLS10(); /* obtain po id*/
    if (SWVREC.SWVWRTN == 0)
      SW0ZM001.SW0ZMPOI = SWVREC.SWVWPOID;
      SW0ZW01.SW0ZWPOI = SWVREC.SWVWPOID;
      SW0ZM001.PC4ORTYP = SWVREC.PC4ORTYP;
    end
  end

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (SW0ZW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* load "new" data from sw0zw01 work record*/
   /* ------------------------------------------------------------*/

  SW0ZM001.SW0ZMGPC = SW0ZW01.SW0ZWGPC; /* gpc code*/
  SW0ZM001.SW0ZMSTY = SW0ZW01.SW0ZWSTY; /* style nbr*/
  SW0ZM001.SW0ZMCLR = SW0ZW01.SW0ZWCLR; /* color id*/
  SW0ZM001.SW0ZMDIM = SW0ZW01.SW0ZWDIM; /* dimension code*/
  SW0ZM001.SW0ZMXQA = SW0ZW01.SW0ZWXQA; /* quality code*/
  SW0ZM001.SW0ZMXLC = SW0ZW01.SW0ZWXLC; /* life cycle*/
  SW0ZM001.SW0ZMXLD = SW0ZW01.SW0ZWXLD; /* life cycle desc*/
  SW0ZM001.SW0ZMPON = SW0ZW01.SW0ZWPON; /* po n br*/
  SW0ZM001.SW0ZMPOI = SW0ZW01.SW0ZWPOI; /* PO ID*/
  SW0ZM001.SW0ZMOTP = SW0ZW01.SW0ZWOTP; /* PO ORDER TYPE*/

   /* ------------------------------------------------------------*/
   /* load "current" and "new" product information from t/s*/
   /* ------------------------------------------------------------*/

  SW0ZS08(); /* read temporary storage*/

  if (converseVar.eventKey is pf8)
     /* next sentence*/
  else
    SW0ZW00.SL2PALET = "99999";
  end

  SW0ZW00.SW0ZWIDX = 1;
  while (SW0ZW00.SW0ZWIDX <= SW0ZW02.SW0ZWNLD) /* process t/s*/

     /* "current"*/

    SW0ZM001.SW0ZMSEL[SW0ZWIDX] = SW0ZW02.SW0ZWSEL[SW0ZWIDX];
    SW0ZM001.PKDNCSQN[SW0ZWIDX] = SW0ZW02.PKDNCSQN[SW0ZWIDX];
    SW0ZW00.SW0ZWCAS = SW0ZW02.SL2CASE[SW0ZWIDX];
    SW0ZM001.SL2CASE[SW0ZWIDX] = SW0ZW00.SW0ZWCS4;
    SW0ZM001.SL2PALET[SW0ZWIDX] = SW0ZW02.SL2PALET[SW0ZWIDX];
    SW0ZM001.SL5LOCTN[SW0ZWIDX] = SW0ZW02.SL5LOCTN[SW0ZWIDX];
    SW0ZM001.INASAID[SW0ZWIDX] = SW0ZW02.INASAID[SW0ZWIDX];
    SW0ZM001.PC2INSEG[SW0ZWIDX] = SW0ZW02.PC2INSEG[SW0ZWIDX];
    SW0ZM001.XEGCD[SW0ZWIDX] = SW0ZW02.XEGCD[SW0ZWIDX];
    SW0ZM001.XSLCD[SW0ZWIDX] = SW0ZW02.XSLCD[SW0ZWIDX];
    SW0ZM001.XPGCD[SW0ZWIDX] = SW0ZW02.XPGCD[SW0ZWIDX];
    SW0ZM001.XUMCD[SW0ZWIDX] = SW0ZW02.XUMCD[SW0ZWIDX];
    SW0ZM001.XOWCD[SW0ZWIDX] = SW0ZW02.XOWCD[SW0ZWIDX];

     /* "new"*/

    SW0ZM001.SW0ZMSAS[SW0ZWIDX] = SW0ZW02.SW0ZWSAS[SW0ZWIDX];
    SW0ZM001.SW0ZMSEG[SW0ZWIDX] = SW0ZW02.SW0ZWSEG[SW0ZWIDX];
    SW0ZM001.SW0ZMEDF[SW0ZWIDX] = SW0ZW02.SW0ZWEDF[SW0ZWIDX];
    SW0ZM001.SW0ZMSLC[SW0ZWIDX] = SW0ZW02.SW0ZWSLC[SW0ZWIDX];
    SW0ZM001.SW0ZMPKG[SW0ZWIDX] = SW0ZW02.SW0ZWPKG[SW0ZWIDX];
    SW0ZM001.SW0ZMUOM[SW0ZWIDX] = SW0ZW02.SW0ZWUOM[SW0ZWIDX];
    SW0ZM001.SW0ZMOWN[SW0ZWIDX] = SW0ZW02.SW0ZWOWN[SW0ZWIDX];

    if (SW0ZW00.SW0ZWCHA == "Y") /* change all*/
      if (SW0ZW02.SW0ZWSEL[SW0ZWIDX] == "A")
        set SW0ZM001.SW0ZMSEL[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMSAS[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMSEG[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMEDF[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMSLC[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMPKG[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMUOM[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMOWN[SW0ZWIDX] normal;
      else
        set SW0ZM001.SW0ZMSEL[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMSAS[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMSEG[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMEDF[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMSLC[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMPKG[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMUOM[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMOWN[SW0ZWIDX] skip;
      end
    else
      if (SW0ZW02.SL2PALET[SW0ZWIDX] == SW0ZW00.SL2PALET
       && SW0ZW02.SL2PALET[SW0ZWIDX] != " ")
        set SW0ZM001.SW0ZMSEL[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMSAS[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMSEG[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMEDF[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMSLC[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMPKG[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMUOM[SW0ZWIDX] skip;
        set SW0ZM001.SW0ZMOWN[SW0ZWIDX] skip;
      else
        set SW0ZM001.SW0ZMSEL[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMSAS[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMSEG[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMEDF[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMSLC[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMPKG[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMUOM[SW0ZWIDX] normal;
        set SW0ZM001.SW0ZMOWN[SW0ZWIDX] normal;
      end
    end

    SW0ZW00.SL2PALET = SW0ZW02.SL2PALET[SW0ZWIDX];

    SW0ZW00.SW0ZWIDX = SW0ZW00.SW0ZWIDX + 1;

  end

  if (SW0ZW00.SW0ZWSPF == "Y") /* init format po field switch*/
    if (SW0ZM001.XWHCD == "51") /* if aprl whse*/
      set SW0ZM001.PC3PONBR cursor, normal;
      set SW0ZM001.PC4ORTYP invisible, protect;
      set SW0ZM001.SW0ZMPID invisible, protect;
      set SW0ZM001.SW0ZMPOI invisible, protect;
      set SW0ZM001.SW0ZMOTP invisible, protect;
    else /* if ftwr whse*/
      set SW0ZM001.SW0ZMPID cursor, normal;
      set SW0ZM001.SW0ZMOTP normal;
      set SW0ZM001.PC3PONBR invisible, protect;
      set SW0ZM001.SW0ZMPON invisible, protect;
    end
  else
    if (SW0ZM001.XWHCD == "51") /* if aprl whse*/
      set SW0ZM001.SW0ZMPON cursor, normal;
      set SW0ZM001.SW0ZMPID invisible, protect;
      set SW0ZM001.PC4ORTYP invisible, protect;
      set SW0ZM001.SW0ZMPOI invisible, protect;
      set SW0ZM001.SW0ZMOTP invisible, protect;
    else /* if ftwr whse*/
      set SW0ZM001.SW0ZMPOI cursor, normal;
      set SW0ZM001.SW0ZMOTP normal;
      set SW0ZM001.PC3PONBR invisible, protect;
      set SW0ZM001.SW0ZMPON invisible, protect;
    end
  end

  SW0ZW00.SW0ZWSPF = "N"; /* init format po field switch*/
end // end SW0Z210

// Check attention ident
Function SW0Z300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/
    set SW0ZW01 empty; /* header data*/
    set SW0ZW02 empty; /* detail data*/

    SW0ZW01.XWHCD = SLWREC.XWHCD;
    if (SLWREC.XWHCD == "51")
      SW0ZW01.XGPCD = "03";
    else
      SW0ZW01.XGPCD = "02";
    end
    SW0ZW01.XDMCD = "00";
    SW0ZW01.XQACD = "01";

    SW0ZW00.SW0ZWSWR = "N"; /* request for data*/
    SW0ZW00.SW0ZWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0ZS01(); /* purge temp storage*/

      XSSL001(); /* Exit to another application*/

      SW0ZW00.SW0ZWSWR = "N"; /* request for data*/
      SW0ZW00.SW0ZWSWF = "Y"; /* format screen m001*/

      set SW0ZM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0ZM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SL0C"; /* Application find code*/
    end

    XSSL001(); /* Exit to another application*/

    SW0ZW00.SW0ZWSWR = "N"; /* request for data*/
    SW0ZW00.SW0ZWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* pf6  was not pressed*/
   && converseVar.eventKey not pf7   /* pf7  was not pressed*/
   && converseVar.eventKey not pf8   /* pf8  was not pressed*/
   && converseVar.eventKey not pf9   /* pf9 was not pressed*/
   && converseVar.eventKey not pf13  /* pf13 was not pressed*/
   && converseVar.eventKey not pf14) /* pf14 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0Z300

// Reset highlighted fields
Function SW0Z400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0ZM001.XWHCD initialAttributes; /* warehouse code*/
  set SW0ZM001.TSHCNTNR initialAttributes; /* container  number*/
  set SW0ZM001.XROPDEST initialAttributes; /* printer destination*/

   /* ------------------------------------------------------------*/
   /* reset "current" data*/
   /* ------------------------------------------------------------*/

  set SW0ZM001.XGPCD initialAttributes; /* gpc code*/
  set SW0ZM001.SY1STNBR initialAttributes; /* style nbr*/
  set SW0ZM001.SY2CLRID initialAttributes; /* color id*/
  set SW0ZM001.XDMCD initialAttributes; /* dimension code*/
  set SW0ZM001.XQACD initialAttributes; /* quality code*/
  if (SW0ZM001.XWHCD == "51") /* warehouse code*/
    set SW0ZM001.PC3PONBR initialAttributes; /* po number*/
    set SW0ZM001.SW0ZMPID invisible, protect; /* po id*/
    set SW0ZM001.PC4ORTYP invisible, protect; /* po order type*/
  else
    set SW0ZM001.SW0ZMPID initialAttributes; /* po id*/
    set SW0ZM001.PC4ORTYP initialAttributes; /* po order type*/
    set SW0ZM001.PC3PONBR invisible, protect; /* po number*/
  end

   /* ------------------------------------------------------------*/
   /* load "new" data from sw0zw01 work record*/
   /* ------------------------------------------------------------*/

  set SW0ZM001.SW0ZMSTY initialAttributes; /* style nbr*/
  set SW0ZM001.SW0ZMCLR initialAttributes; /* color id*/
  set SW0ZM001.SW0ZMDIM initialAttributes; /* dimension code*/
  set SW0ZM001.SW0ZMXQA initialAttributes; /* quality code*/

   /* ------------------------------------------------------------*/
   /* reset "current" and "new" product information from t/s*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SW0ZWIDX = 1;

  if (SW0ZW00.XXXTSPAG == 1)
    SW0ZW00.SL2PALET = "99999";
  end

  while (SW0ZW00.SW0ZWIDX <= SW0ZW02.SW0ZWNLD) /* process temp storage*/

    if (SW0ZW02.SL2PALET[SW0ZWIDX] != SW0ZW00.SL2PALET)

      set SW0ZM001.SW0ZMSEL[SW0ZWIDX] normal;
      set SW0ZM001.SW0ZMSAS[SW0ZWIDX] normal;
      set SW0ZM001.SW0ZMSEG[SW0ZWIDX] normal;
      set SW0ZM001.SW0ZMEDF[SW0ZWIDX] normal;
      set SW0ZM001.SW0ZMSLC[SW0ZWIDX] normal;
      set SW0ZM001.SW0ZMPKG[SW0ZWIDX] normal;
      set SW0ZM001.SW0ZMUOM[SW0ZWIDX] normal;
      set SW0ZM001.SW0ZMOWN[SW0ZWIDX] normal;
    end
    SW0ZW00.SL2PALET = SW0ZW02.SL2PALET[SW0ZWIDX];
    SW0ZW00.SW0ZWIDX = SW0ZW00.SW0ZWIDX + 1; /* increment load index*/
  end

  set SW0ZM001.CATOAP initialAttributes;
  set SW0ZM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XWHCD == "?"    /* product type group list req*/
   || SW0ZM001.XGPCD == "?"    /* or gpc code list req*/
   || SW0ZM001.XDMCD == "?"    /* or  dimension list req*/
   || SW0ZM001.SW0ZMDIM == "?" /* or dimension list req*/
   || SW0ZM001.XQACD == "?"    /* or quality cd list req*/
   || SW0ZM001.XROPDEST == "?") /* print dest*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XWHCD == "?") /* warehouse requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0ZM001.XWHCD = SW0ZW01.XWHCD; /* Restore prior code*/
    else
      SW0ZM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0ZM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];
      SW0ZW01.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0ZW01.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];

    end

    set SW0ZM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of remote printers*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XROPDEST == "?") /* remote printer*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "REMOTE PRINTERS"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXRO01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0ZM001.XROPDEST = SW0ZW01.XROPDEST; /* Restore prior code*/
    else
      SW0ZM001.XROPDEST = XROTBL.XROPDEST[XX0XWPIX]; /* Selected code*/
      SW0ZW01.XROPDEST = XROTBL.XROPDEST[XX0XWPIX]; /* Selected code*/

    end

    set SW0ZM001.XROPDEST cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of gpc codes*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XGPCD == "?") /* warehouse requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  GPC CODES    "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0ZM001.XGPCD = SW0ZW01.XGPCD; /* Restore prior code*/
    else
      SW0ZM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
      SW0ZW01.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0ZM001.XGPCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XDMCD == "?" /* dimension list requested*/
   || SW0ZM001.SW0ZMDIM == "?")

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIMENSION CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the dimension list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      if (SW0ZM001.XDMCD == "?") /* dimension list requested*/
        SW0ZM001.XDMCD = SW0ZW01.SW0ZWDIM; /* Restore prior code*/
      end

      if (SW0ZM001.SW0ZMDIM == "?")
        SW0ZM001.SW0ZMDIM = SW0ZW01.SW0ZWDIM; /* Restore prior code*/
      end

    else

      if (SW0ZM001.XDMCD == "?") /* dimension list requested*/
        SW0ZW01.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
        SW0ZM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      end

      if (SW0ZM001.SW0ZMDIM == "?") /* dimension list requested*/
        SW0ZM001.SW0ZMDIM = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      end

    end

    if (SW0ZM001.XDMCD == "?") /* dimension list requested*/
      set SW0ZM001.XDMCD cursor; /* Establish cursor position*/
    end

    if (SW0ZM001.SW0ZMDIM == "?") /* dimension list requested*/
      set SW0ZM001.SW0ZMDIM cursor; /* Establish cursor position*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of quality codes.*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XQACD == "?") /* Quality list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "QUALITY CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the quality list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0ZM001.XQACD = SW0ZW01.XQACD; /* Restore prior code*/
    else
      SW0ZW01.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
      SW0ZM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/

    end

    set SW0ZM001.XQACD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/
  converseLib.validationFailed(294); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0Z400

// Verify the entered data
Function SW0Z500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0ZM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* verify request to page forward(pf7) or backwards(pf8), and*/
   /* check all modifiable fields except fcst target*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    SW0Z510(); /* verify scroll request*/

    SW0Z520(); /* check modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* verify request to update by checking all modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9)

    SW0Z520(); /* check modifiable fields*/

    if (converseVar.validationMsgNum != 0)
      exit stack; /* display error message*/
    end

    if (SW0ZW00.SW0ZWUPS != "Y") /* data was not previously updated*/
      converseLib.validationFailed(319); /* at least one line must be selected*/
      SLWREC.XXXLOCID = "500";
    end

  end

   /* ------------------------------------------------------------*/
   /* request to display: receiving w/o carton maint.(pf13)*/
                       /* receiving r/l carton maint.(pf14)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* request to display wo maint(pf13)*/
   || converseVar.eventKey is pf14) /* request to display rl maint(pf14)*/

    SW0Z520(); /* verify if data has been mod*/

    if (SW0ZW00.SW0ZWMOD == "Y") /* data cannot be modified*/
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "500";
    end
  end

   /* ------------------------------------------------------------*/
   /* print option*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWDBU == "Y") /* databases were previously updated*/
    if (converseVar.eventKey is enter)

      SW0Z520(); /* check modifiable fields*/
    else
      converseLib.validationFailed(264);
      SLWREC.XXXLOCID = "500";
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    SW0Z530(); /* validate entry fields*/

    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    if (SW0ZM001.XWHCD != SW0ZW01.XWHCD       /* warehouse changed*/
     || SW0ZM001.XWHCD == " "                 
     || SW0ZM001.TSHCNTNR != SW0ZW01.TSHCNTNR /* container*/
     || SW0ZM001.TSHCNTNR == " "              
     || SW0ZM001.XGPCD != SW0ZW01.XGPCD       /* gpc code*/
     || SW0ZM001.XGPCD == " "                 
     || SW0ZM001.SY1STNBR != SW0ZW01.SY1STNBR /* style nbr*/
     || SW0ZM001.SY1STNBR == " "              
     || SW0ZM001.SY2CLRID != SW0ZW01.SY2CLRID /* color id*/
     || SW0ZM001.SY2CLRID == " "              
     || SW0ZM001.XDMCD != SW0ZW01.XDMCD       /* dimension*/
     || SW0ZM001.XDMCD == " "                 
     || SW0ZM001.XQACD != SW0ZW01.XQACD       /* quality code*/
     || SW0ZM001.XQACD == " ")               
      SW0Z520(); /* ck modifiable fields*/

      if (converseVar.validationMsgNum == 0)
        SW0ZW00.SW0ZWSWR = "Y"; /* request data request*/
      end
    end

    if (SW0ZM001.XWHCD == "51")
      if (SW0ZM001.PC3PONBR != SW0ZW01.PC3PONBR /* po number*/
       || SW0ZM001.PC3PONBR == 0)              
        SW0Z520(); /* ck modifiable fields*/

        if (converseVar.validationMsgNum == 0)
          SW0ZW00.SW0ZWSWR = "Y"; /* request data request*/
        end

      end
    else
      if (SW0ZM001.SW0ZMPID != SW0ZW01.SW0ZWPID /* po number*/
       || SW0ZM001.SW0ZMPID == " "              
       || SW0ZM001.PC4ORTYP != SW0ZW01.PC4ORTYP /* po number*/
       || SW0ZM001.PC4ORTYP == " ")            
        SW0Z520(); /* ck modifiable fields*/

        if (converseVar.validationMsgNum == 0)
          SW0ZW00.SW0ZWSWR = "Y"; /* request data request*/
        end

      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end SW0Z500

// verify scroll request
Function SW0Z510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0ZW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0ZW00.XXXTSPAG >= SW0ZW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end


end // end SW0Z510

// check modifiable fields
Function SW0Z520()

   /* -----------------------------------------------------*/
   /* verify all detail modifiable fields*/
   /* -----------------------------------------------------*/

  SW0ZW00.SW0ZWIDX = SW0ZW02.SW0ZWNLD; /* nbr of lines loaded*/

  while (SW0ZW00.SW0ZWIDX > 0) /* process temp storage*/

    if (SW0ZW02.SW0ZWOWN[SW0ZWIDX] != SW0ZM001.SW0ZMOWN[SW0ZWIDX])
      set SW0ZM001.SW0ZMOWN[SW0ZWIDX] cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW02.SW0ZWUOM[SW0ZWIDX] != SW0ZM001.SW0ZMUOM[SW0ZWIDX])
      set SW0ZM001.SW0ZMUOM[SW0ZWIDX] cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW02.SW0ZWPKG[SW0ZWIDX] != SW0ZM001.SW0ZMPKG[SW0ZWIDX])
      set SW0ZM001.SW0ZMPKG[SW0ZWIDX] cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW02.SW0ZWSLC[SW0ZWIDX] != SW0ZM001.SW0ZMSLC[SW0ZWIDX])
                                   /* class code*/
      set SW0ZM001.SW0ZMSLC[SW0ZWIDX] cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW02.SW0ZWEDF[SW0ZWIDX] != SW0ZM001.SW0ZMEDF[SW0ZWIDX])
                                   /* edif code*/
      set SW0ZM001.SW0ZMEDF[SW0ZWIDX] cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW02.SW0ZWSEG[SW0ZWIDX] != SW0ZM001.SW0ZMSEG[SW0ZWIDX])
                                   /* iseg code*/
      set SW0ZM001.SW0ZMSEG[SW0ZWIDX] cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW02.SW0ZWSAS[SW0ZWIDX] != SW0ZM001.SW0ZMSAS[SW0ZWIDX])
                                   /* iseg code*/
      set SW0ZM001.SW0ZMSAS[SW0ZWIDX] cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW02.SW0ZWSEL[SW0ZWIDX] != SW0ZM001.SW0ZMSEL[SW0ZWIDX])
                                   /* selection*/
      set SW0ZM001.SW0ZMSEL[SW0ZWIDX] cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    SW0ZW00.SW0ZWIDX = SW0ZW00.SW0ZWIDX - 1; /* decrement table index*/

  end

   /* -----------------------------------------------------*/
   /* verify "new" modifiable key fields*/
   /* -----------------------------------------------------*/

  if (SW0ZM001.XWHCD == "51")
    if (SW0ZW01.SW0ZWPON != SW0ZM001.SW0ZMPON) /* po nbr*/
      set SW0ZM001.SW0ZMPON cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end
  else
    if (SW0ZW01.SW0ZWPOI != SW0ZM001.SW0ZMPOI
     || SW0ZW01.SW0ZWOTP != SW0ZM001.SW0ZMOTP)
      set SW0ZM001.SW0ZMPOI cursor, bold;
      set SW0ZM001.SW0ZMOTP bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end
  end

  if (SW0ZW01.SW0ZWXQA != SW0ZM001.SW0ZMXQA) /* quality code*/
    set SW0ZM001.SW0ZMXQA cursor, bold;
    converseLib.validationFailed(219);
    SLWREC.XXXLOCID = "520";
  end

  if (SW0ZW01.SW0ZWDIM != SW0ZM001.SW0ZMDIM) /* dimension*/
    set SW0ZM001.XDMCD cursor, bold;
    converseLib.validationFailed(219);
    SLWREC.XXXLOCID = "520";
  end

  if (SW0ZW01.SW0ZWCLR != SW0ZM001.SW0ZMCLR) /* color id*/
    set SW0ZM001.SW0ZMCLR cursor, bold;
    converseLib.validationFailed(219);
    SLWREC.XXXLOCID = "520";
  end

  if (SW0ZW01.SW0ZWSTY != SW0ZM001.SW0ZMSTY) /* style number*/
    set SW0ZM001.SW0ZMSTY cursor, bold;
    converseLib.validationFailed(219);
    SLWREC.XXXLOCID = "520";
  end

   /* -----------------------------------------------------*/
   /* verify "current" modifiable key fields*/
   /* -----------------------------------------------------*/
  if (converseVar.eventKey not enter)

    if (SW0ZM001.XWHCD == "51")
      if (SW0ZW01.PC3PONBR != SW0ZM001.PC3PONBR) /* po nbr*/
        set SW0ZM001.PC3PONBR cursor, bold;
        set SW0ZM001.SW0ZMPID invisible, protect;
        set SW0ZM001.PC4ORTYP invisible, protect;
        set SW0ZM001.SW0ZMPOI invisible, protect;
        set SW0ZM001.SW0ZMOTP invisible, protect;
        converseLib.validationFailed(219);
        SLWREC.XXXLOCID = "520";
      end
    else
      if (SW0ZW01.SW0ZWPID != SW0ZM001.SW0ZMPID
       || SW0ZW01.PC4ORTYP != SW0ZM001.PC4ORTYP)
        set SW0ZM001.SW0ZMPID cursor, bold;
        set SW0ZM001.PC4ORTYP bold;
        set SW0ZM001.PC3PONBR invisible, protect;
        converseLib.validationFailed(219);
        SLWREC.XXXLOCID = "520";
      end
    end

    if (SW0ZW01.XQACD != SW0ZM001.XQACD) /* dimension*/
      set SW0ZM001.XQACD cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW01.XDMCD != SW0ZM001.XDMCD) /* dimension*/
      set SW0ZM001.XDMCD cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW01.SY2CLRID != SW0ZM001.SY2CLRID) /* color*/
      set SW0ZM001.SY2CLRID cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW01.SY1STNBR != SW0ZM001.SY1STNBR) /* style*/
      set SW0ZM001.SY1STNBR cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW01.XGPCD != SW0ZM001.XGPCD) /* gpc number*/
      set SW0ZM001.XGPCD cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW01.TSHCNTNR != SW0ZM001.TSHCNTNR) /* container  number*/
      set SW0ZM001.TSHCNTNR cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end

    if (SW0ZW01.XWHCD != SW0ZM001.XWHCD) /* warehouse code*/
      set SW0ZM001.XWHCD cursor, bold;
      converseLib.validationFailed(219);
      SLWREC.XXXLOCID = "520";
    end
  end


end // end SW0Z520

// Verify the entered data
Function SW0Z530()
   /* ------------------------------------------------------------*/
   /* Edit the required fields starting at the bottom of the*/
   /* map.*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SW0ZWSUS = "N"; /* setaside updated switch*/
  SW0ZW00.SW0ZWSES = "N"; /* selected field edit switch*/
  SW0ZW00.SW0ZWIDX = SW0ZW02.SW0ZWNLD;
  while (SW0ZW00.SW0ZWIDX > 0)

    /* ------------------------------------------------------------*/
     /* Edit the owner group code*/
    /* ------------------------------------------------------------*/

    if (SW0ZM001.SW0ZMOWN[SW0ZWIDX] != SW0ZW02.SW0ZWOWN[SW0ZWIDX])
      if (SW0ZM001.SW0ZMOWN[SW0ZWIDX] == "  ")
        SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
      else
        if (SW0ZM001.SW0ZMOWN[SW0ZWIDX] in XOWTBL.XOWCD)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
          else
            set SW0ZM001.SW0ZMOWN[SW0ZWIDX] cursor, bold;
            converseLib.validationFailed(10); /* status is inactive*/
            SW0ZM001.XXXLOCID = "530";
          end
        else
          set SW0ZM001.SW0ZMOWN[SW0ZWIDX] cursor, bold;
          converseLib.validationFailed(11); /* invalid code*/
          SW0ZM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit unit of measure*/
    /* ------------------------------------------------------------*/

    if (SW0ZM001.SW0ZMUOM[SW0ZWIDX] != SW0ZW02.SW0ZWUOM[SW0ZWIDX])
      if (SW0ZM001.SW0ZMUOM[SW0ZWIDX] == " ")
        SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
      else
        if (SW0ZM001.SW0ZMUOM[SW0ZWIDX] in XUMTBL.XUMCD)
          if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
          else
            set SW0ZM001.SW0ZMUOM[SW0ZWIDX] cursor, bold;
            converseLib.validationFailed(10); /* status is inactive*/
            SW0ZM001.XXXLOCID = "530";
          end
        else
          set SW0ZM001.SW0ZMUOM[SW0ZWIDX] cursor, bold;
          converseLib.validationFailed(11); /* invalid code*/
          SW0ZM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the package type*/
    /* ------------------------------------------------------------*/

    if (SW0ZM001.SW0ZMPKG[SW0ZWIDX] != SW0ZW02.SW0ZWPKG[SW0ZWIDX])
      if (SW0ZM001.SW0ZMPKG[SW0ZWIDX] == " ")
        SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
      else
        if (SW0ZM001.SW0ZMPKG[SW0ZWIDX] in XPGTBL.XPGCD)
          if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
          else
            set SW0ZM001.SW0ZMPKG[SW0ZWIDX] cursor, bold;
            converseLib.validationFailed(10); /* status is inactive*/
            SW0ZM001.XXXLOCID = "530";
          end
        else
          set SW0ZM001.SW0ZMPKG[SW0ZWIDX] cursor, bold;
          converseLib.validationFailed(11); /* invalid code*/
          SW0ZM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* sl class code*/
    /* ------------------------------------------------------------*/

    if (SW0ZM001.SW0ZMSLC[SW0ZWIDX] != SW0ZW02.SW0ZWSLC[SW0ZWIDX])
      if (SW0ZM001.SW0ZMSLC[SW0ZWIDX] == " ")
        SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
      else
        if (SW0ZM001.SW0ZMSLC[SW0ZWIDX] in XSLTBL.XSLCD)
          if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
          else
            set SW0ZM001.SW0ZMSLC[SW0ZWIDX] cursor, bold;
            converseLib.validationFailed(10); /* status is inactive*/
            SW0ZM001.XXXLOCID = "530";
          end
        else
          set SW0ZM001.SW0ZMSLC[SW0ZWIDX] cursor, bold;
          converseLib.validationFailed(11); /* invalid code*/
          SW0ZM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the edf*/
    /* ------------------------------------------------------------*/

    if (SW0ZM001.SW0ZMEDF[SW0ZWIDX] != SW0ZW02.SW0ZWEDF[SW0ZWIDX])
      if (SW0ZM001.SW0ZMEDF[SW0ZWIDX] == " ")
        SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
      else
        if (SW0ZM001.SW0ZMEDF[SW0ZWIDX] in XEGTBL.XEGCD)
          if (XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
          else
            set SW0ZM001.SW0ZMEDF[SW0ZWIDX] cursor, bold;
            converseLib.validationFailed(10); /* status is inactive*/
            SW0ZM001.XXXLOCID = "530";
          end
        else
          set SW0ZM001.SW0ZMEDF[SW0ZWIDX] cursor, bold;
          converseLib.validationFailed(11); /* invalid code*/
          SW0ZM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* validate iseg code*/
    /* ------------------------------------------------------------*/

    if (SW0ZM001.SW0ZMSEG[SW0ZWIDX] != SW0ZW02.SW0ZWSEG[SW0ZWIDX])
                                   /* seg code*/
      if (SW0ZM001.SW0ZMSEG[SW0ZWIDX] == " ")
        SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
      else
        set PC2REC empty; /* Clear row storage area*/
        PC2REC.XGPCD = SW0ZM001.SW0ZMGPC;
        PC2REC.PC2INSEG = SW0ZM001.SW0ZMSEG;

        SW0ZS10(); /* select 's ' dprodc.vprdcu01*/

        if (SQLCA.VAGen_SQLCODE == 100)
          set SW0ZM001.SW0ZMSEG[SW0ZWIDX] cursor, bold;
          converseLib.validationFailed(11); /* invalid value*/
          SW0ZM001.XXXLOCID = "530";
        else
          SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the set aside*/
    /* ------------------------------------------------------------*/

    if (SW0ZM001.SW0ZMSAS[SW0ZWIDX] != SW0ZW02.SW0ZWSAS[SW0ZWIDX])
      if (SW0ZM001.SW0ZMSAS[SW0ZWIDX] == 0)
        SW0ZW00.SW0ZWSUS = "Y"; /* setaside updated switch*/
      else
        /* ------------------------------------------------------------*/
         /* Cannot change SAS to production for warehouse 51 per ryonke*/
        /* ------------------------------------------------------------*/
        INAREC.INASAID = SW0ZM001.SW0ZMSAS[SW0ZWIDX];
        SW0ZS12(); /* 's' dinvnt.vashdr01*/
        if (SQLCA.VAGen_SQLCODE != 0)
          converseLib.validationFailed(11); /* invalid code*/
          SW0ZM001.XXXLOCID = "530";
          set SW0ZM001.SW0ZMSAS[SW0ZWIDX] cursor, bold;
        else
          /* ------------------------------------------------------------*/
           /* Cannot change SAS to production for warehouse 51 per ryonke*/
          /* ------------------------------------------------------------*/
          if (SW0ZM001.XWHCD == "51")
            if (SW0ZM001.SW0ZMSAS[SW0ZWIDX] == 68
             || SW0ZM001.SW0ZMSAS[SW0ZWIDX] == 69)
              set SW0ZM001.SW0ZMSAS[SW0ZWIDX] cursor, bold;
              converseLib.validationFailed(11); /* invalid code*/
              SW0ZM001.XXXLOCID = "530";
              set SW0ZM001.SW0ZMSAS[SW0ZWIDX] cursor, bold;
            else
              SW0ZW00.SW0ZWSUS = "Y"; /* setaside updated switch*/
            end
          else
            SW0ZW00.SW0ZWSUS = "Y"; /* setaside updated switch*/
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Edit the sel field*/
    /* ------------------------------------------------------------*/

    if (SW0ZM001.SW0ZMSEL[SW0ZWIDX] != SW0ZW02.SW0ZWSEL[SW0ZWIDX])
      if (SW0ZM001.SW0ZMSEL[SW0ZWIDX] == "S"
       || SW0ZM001.SW0ZMSEL[SW0ZWIDX] == " ")
        SW0ZW00.SW0ZWSES = "Y"; /* detail updated switch*/
        if (SW0ZW00.XXXTSPAG == 1 /* first page*/
         && SW0ZW00.SW0ZWIDX == 1) /* first line*/
          SW0ZW00.SW0ZWCHA = "N"; /* change all switch*/
          SW0ZW00.SW0ZWREF = "N"; /* reformatted data switch*/
        end
      else
        if (SW0ZM001.SW0ZMSEL[SW0ZWIDX] == "A"
         && SW0ZW00.XXXTSPAG == 1 /* first page*/
         && SW0ZW00.SW0ZWIDX == 1) /* first line*/
          SW0ZW00.SW0ZWSES = "Y"; /* detail updated switch*/
          SW0ZW00.SW0ZWCHA = "Y"; /* change all switch*/
        else
          set SW0ZM001.SW0ZMSEL[SW0ZWIDX] cursor, bold;
          converseLib.validationFailed(17); /* invalid value in selection field*/
          SW0ZM001.XXXLOCID = "530";
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* check all fields for entry and sel field blank*/
    /* ------------------------------------------------------------*/

    if (SW0ZM001.SW0ZMSEL[SW0ZWIDX] == " ")
      if (SW0ZM001.SW0ZMSAS[SW0ZWIDX] != SW0ZW02.SW0ZWSAS[SW0ZWIDX]
       || SW0ZM001.SW0ZMSEG[SW0ZWIDX] > " "
       || SW0ZM001.SW0ZMEDF[SW0ZWIDX] > " "
       || SW0ZM001.SW0ZMSLC[SW0ZWIDX] > " "
       || SW0ZM001.SW0ZMPKG[SW0ZWIDX] > " "
       || SW0ZM001.SW0ZMUOM[SW0ZWIDX] > " "
       || SW0ZM001.SW0ZMOWN[SW0ZWIDX] > " ")
        set SW0ZM001.SW0ZMSEL[SW0ZWIDX] cursor, bold;
        converseLib.validationFailed(320); /* invalid value in selection field*/
        SW0ZM001.XXXLOCID = "530";
      end
    end

    /* ------------------------------------------------------------*/
     /* check that detail changes do not occur with setaside change*/
    /* ------------------------------------------------------------*/

    if (SW0ZW00.SW0ZWDUS == "Y"
     && SW0ZW00.SW0ZWSUS == "Y")
      converseLib.validationFailed(416); /* invalid code*/
      SW0ZM001.XXXLOCID = "530";
      set SW0ZM001.SW0ZMSAS[SW0ZWIDX] cursor, bold;
      return;
    end


    SW0ZW00.SW0ZWIDX = SW0ZW00.SW0ZWIDX - 1;

  end
   /* ------------------------------------------------------------*/
   /* Edit the quality code*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.SW0ZMXQA != SW0ZW01.SW0ZWXQA) /* quality code*/
    if (SW0ZM001.SW0ZMXQA == "  ")
      set SW0ZM001.SW0ZMXQA cursor, bold;
      converseLib.validationFailed(9); /* required field*/
      SW0ZM001.XXXLOCID = "530";
    else
      if (SW0ZM001.SW0ZMXQA in XQATBL.XQACD)
        if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
          SW0ZW00.SW0ZWHUS = "Y"; /* header updated switch*/
        else
          set SW0ZM001.SW0ZMXQA cursor, bold;
          converseLib.validationFailed(10); /* status is inactive*/
          SW0ZM001.XXXLOCID = "530";
        end
      else
        set SW0ZM001.SW0ZMXQA cursor, bold;
        converseLib.validationFailed(11); /* invalid code*/
        SW0ZM001.XXXLOCID = "530";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the dimension code*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.SW0ZMDIM != SW0ZW01.SW0ZWDIM) /* Unit of measure entered*/
    if (SW0ZM001.SW0ZMDIM == "  ")
      set SW0ZM001.SW0ZMDIM cursor, bold;
      converseLib.validationFailed(9); /* required field*/
      SW0ZM001.XXXLOCID = "530";
    else
      if (SW0ZM001.SW0ZMDIM in XDMTBL.XDMCD)
        if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          SW0ZW00.SW0ZWHUS = "Y"; /* header updated switch*/
        else
          set SW0ZM001.SW0ZMDIM cursor, bold;
          converseLib.validationFailed(10); /* status is inactive*/
          SW0ZM001.XXXLOCID = "530";
        end
      else
        set SW0ZM001.SW0ZMDIM cursor, bold;
        converseLib.validationFailed(11); /* invalid code*/
        SW0ZM001.XXXLOCID = "530";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the product style color and dimension.*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.SW0ZMSTY != SW0ZW01.SW0ZWSTY
   || SW0ZM001.SW0ZMCLR != SW0ZW01.SW0ZWCLR
   || SW0ZM001.SW0ZMDIM != SW0ZW01.SW0ZWDIM)
    if (SW0ZM001.SW0ZMCLR == " ") /* color not entered*/

      converseLib.validationFailed(9); /* required field*/
      SW0ZM001.XXXLOCID = "530";
      set SW0ZM001.SW0ZMCLR cursor, bold;
    end
    if (SW0ZM001.SW0ZMSTY == " ") /* Style not entered*/

      converseLib.validationFailed(9); /* required field*/
      SW0ZM001.XXXLOCID = "530";
      set SW0ZM001.SW0ZMSTY cursor, bold;
    end

    if (SW0ZM001.SW0ZMSTY != " "
     && SW0ZM001.SW0ZMCLR != " "
     && SW0ZM001.SW0ZMGPC != " "
     && SW0ZM001.SW0ZMDIM != " ")

      set SYCREC empty;

      SYCREC.XGPCD = SW0ZM001.SW0ZMGPC;
      SYCREC.SY1STNBR = SW0ZM001.SW0ZMSTY;
      SYCREC.SY2CLRID = SW0ZM001.SW0ZMCLR;
      SYCREC.XDMCD = SW0ZM001.SW0ZMDIM;

      SW0ZS07(); /* ; validate using dprod.vcolor02*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(56); /* Style/color is missing or invalid*/
        SW0ZM001.XXXLOCID = "530";
        set SW0ZM001.SW0ZMSTY cursor, bold;
        set SW0ZM001.SW0ZMCLR bold;
        set SW0ZM001.SW0ZMDIM bold;
      else
        SW0ZW00.SW0ZWHUS = "Y"; /* header updated switch*/

        XX0XS01();

        if (SYCREC.SY2CEDT1 <= XX0XW01.XX0XWDAT)
          SW0ZM001.SW0ZMXLC = XLCCD1;
        else
          if (SYCREC.SY2CEDT2 <= XX0XW01.XX0XWDAT)
            SW0ZM001.SW0ZMXLC = XLCCD2;
          else
            if (SYCREC.SY2CEDT3 <= XX0XW01.XX0XWDAT)
              SW0ZM001.SW0ZMXLC = XLCCD3;
            else
              if (SYCREC.SY2CEDT4 <= XX0XW01.XX0XWDAT)
                SW0ZM001.SW0ZMXLC = XLCCD4;
              else
                SW0ZM001.SW0ZMXLC = XLCCD1;
              end
            end
          end
        end

        if (SW0ZM001.SW0ZMXLC in XLCTBL.XLCCD)
          SW0ZM001.SW0ZMXLD = XLCTBL.XLCABRV[sysVar.arrayIndex];
        end

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the po nbr*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XWHCD == "51") /* if aprl whse*/
    if (SW0ZM001.SW0ZMPON != SW0ZW01.SW0ZWPON)
      if (SW0ZM001.SW0ZMPON == 0) /* po number not entered*/
        converseLib.validationFailed(9); /* required field*/
        SW0ZM001.XXXLOCID = "530";
        set SW0ZM001.SW0ZMPON cursor, bold;
        set SW0ZM001.SW0ZMPID invisible, protect;
        set SW0ZM001.PC4ORTYP invisible, protect;
        set SW0ZM001.SW0ZMPOI invisible, protect;
        set SW0ZM001.SW0ZMOTP invisible, protect;

      else

        set PC3REC empty;

        PC3REC.XGPCD = SW0ZM001.SW0ZMGPC;
        PC3REC.PC3PONBR = SW0ZM001.SW0ZMPON;

        SW0ZS11(); /* ; validate using dprodc.vpohdr01*/

        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          converseLib.validationFailed(185); /* invalid po number*/
          SW0ZM001.XXXLOCID = "530";
          set SW0ZM001.SW0ZMPON cursor, bold;
        else
          SW0ZW00.SW0ZWHUS = "Y"; /* header updated switch*/
        end
      end
    end
  else
    if (SW0ZM001.SW0ZMPOI != SW0ZW01.SW0ZWPOI)
      if (SW0ZM001.SW0ZMPOI == " " /* po id not entered*/
       || SW0ZM001.PC4ORTYP == " ") /* order tyoe not entered*/
        converseLib.validationFailed(9); /* required field*/
        SW0ZM001.XXXLOCID = "530";
        set SW0ZM001.SW0ZMPOI cursor, bold;
        set SW0ZM001.PC4ORTYP bold;
        set SW0ZM001.PC3PONBR invisible, protect;
        set SW0ZM001.SW0ZMPON invisible, protect;
      else
        set SWVREC empty;
        SWVREC.SWVWFNC = "NO";
        SWVREC.SWVWPOID = SW0ZM001.SW0ZMPOI;
        SWVREC.PC4ORTYP = SW0ZM001.PC4ORTYP;
        SWVREC.XGPCD = SW0ZM001.XGPCD;
        XSSLS10();
        if (SWVREC.SWVWRTN == 0)
          SW0ZW01.SW0ZWPON = SWVREC.PC3PONBR;
          SW0ZM001.SW0ZMPON = SWVREC.PC3PONBR;
          SW0ZM001.SW0ZMPOI = SWVREC.SWVWPOID;
          SW0ZM001.PC4ORTYP = SWVREC.PC4ORTYP;
        end

        set PC3REC empty;
        PC3REC.XGPCD = SW0ZM001.XGPCD;
        PC3REC.PC3PONBR = SW0ZW01.SW0ZWPON;
        SW0ZS11(); /* ; validate using dprodc.vpohdr01*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          converseLib.validationFailed(185); /* invalid po number*/
          SW0ZM001.XXXLOCID = "530";
          set SW0ZM001.SW0ZMPOI cursor, bold;
        else
          SW0ZW00.SW0ZWHUS = "Y"; /* header updated switch*/
        end
      end
    end
  end

    /* ------------------------------------------------------------*/
     /* check that header or detail changes do not occur with sas change*/
    /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWHUS == "Y"
   && SW0ZW00.SW0ZWSUS == "Y")
    converseLib.validationFailed(416); /* invalid code*/
    SW0ZM001.XXXLOCID = "530";
    set SW0ZM001.SW0ZMPON cursor, bold;
    set SW0ZM001.SW0ZMGPC bold;
    set SW0ZM001.SW0ZMSTY bold;
    set SW0ZM001.SW0ZMCLR bold;
    set SW0ZM001.SW0ZMDIM bold;
    set SW0ZM001.SW0ZMXQA bold;
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate key data*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate quality code*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XQACD == "  ")
    set SW0ZM001.XQACD cursor, bold;
    converseLib.validationFailed(9); /* required*/
    SW0ZM001.XXXLOCID = "530";
  else
    if (SW0ZM001.XQACD in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      else
        set SW0ZM001.XQACD cursor, bold;
        converseLib.validationFailed(10); /* status is inactive*/
        SW0ZM001.XXXLOCID = "530";
      end
    else
      set SW0ZM001.XQACD cursor, bold;
      converseLib.validationFailed(11); /* invalid value*/
      SW0ZM001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the dimension code*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XDMCD == "  ")
    set SW0ZM001.XDMCD cursor, bold;
    converseLib.validationFailed(9); /* required*/
    SW0ZM001.XXXLOCID = "530";
  else
    if (SW0ZM001.XDMCD in XDMTBL.XDMCD)
      if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* next sentence*/
      else
        set SW0ZM001.XDMCD cursor, bold;
        converseLib.validationFailed(10); /* status is inactive*/
        SW0ZM001.XXXLOCID = "530";
      end
    else
      set SW0ZM001.XDMCD cursor, bold;
      converseLib.validationFailed(11); /* invalid code*/
      SW0ZM001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the product style color and dimension.*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.SY2CLRID == " ") /* color not entered*/

    converseLib.validationFailed(9); /* required*/
    SW0ZM001.XXXLOCID = "530";
    set SW0ZM001.SY2CLRID cursor, bold;
  end
  if (SW0ZM001.SY1STNBR == " ") /* Style not entered*/

    converseLib.validationFailed(9); /* required*/
    SW0ZM001.XXXLOCID = "530";
    set SW0ZM001.SY1STNBR cursor, bold;
  end

  if (SW0ZM001.SY1STNBR != " "
   && SW0ZM001.SY2CLRID != " "
   && SW0ZM001.XGPCD != " "
   && SW0ZM001.XDMCD != " ")
    set SYCREC empty;

    SYCREC.XGPCD = SW0ZM001.XGPCD;
    SYCREC.SY1STNBR = SW0ZM001.SY1STNBR;
    SYCREC.SY2CLRID = SW0ZM001.SY2CLRID;
    SYCREC.XDMCD = SW0ZM001.XDMCD;

    SW0ZS07(); /* ; validate using dprod.vcolor02*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(56); /* Style/color is missing or invalid*/
      SW0ZM001.XXXLOCID = "530";
      set SW0ZM001.SY1STNBR cursor, bold;
      set SW0ZM001.SY2CLRID bold;
      set SW0ZM001.XDMCD bold;
    else

      XX0XS01();

      if (SYCREC.SY2CEDT1 <= XX0XW01.XX0XWDAT)
        SW0ZM001.XLCCD = XLCCD1;
      else
        if (SYCREC.SY2CEDT2 <= XX0XW01.XX0XWDAT)
          SW0ZM001.XLCCD = XLCCD2;
        else
          if (SYCREC.SY2CEDT3 <= XX0XW01.XX0XWDAT)
            SW0ZM001.XLCCD = XLCCD3;
          else
            if (SYCREC.SY2CEDT4 <= XX0XW01.XX0XWDAT)
              SW0ZM001.XLCCD = XLCCD4;
            else
              SW0ZM001.XLCCD = XLCCD1;
            end
          end
        end
      end

      if (SW0ZM001.XLCCD in XLCTBL.XLCCD)
        SW0ZM001.XLCABRV = XLCTBL.XLCABRV[sysVar.arrayIndex];
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* validate gpc code*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XGPCD == "  ")
    converseLib.validationFailed(9); /* required*/
    set SW0ZM001.XGPCD cursor, bold;
    SW0ZM001.XXXLOCID = "530";
  else
    if (SW0ZM001.XGPCD in XGPTBL.XGPCD)
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW0ZM001.XGPCD cursor, bold;
        converseLib.validationFailed(10); /* status is inactive*/
        SW0ZM001.XXXLOCID = "530";
      end
    else
      set SW0ZM001.XGPCD cursor, bold;
      converseLib.validationFailed(11); /* invalid code*/
      SW0ZM001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the po nbr*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XWHCD == "51") /* if aprl whse*/
    if (SW0ZM001.PC3PONBR == 0) /* po number not entered*/
      converseLib.validationFailed(9); /* required*/
      SW0ZM001.XXXLOCID = "530";
      set SW0ZM001.PC3PONBR cursor, bold;
      set SW0ZM001.SW0ZMPID invisible, protect;
      set SW0ZM001.PC4ORTYP invisible, protect;
      set SW0ZM001.SW0ZMPOI invisible, protect;
      set SW0ZM001.SW0ZMOTP invisible, protect;

    else

      set PC3REC empty;
      PC3REC.XGPCD = SW0ZM001.XGPCD;
      PC3REC.PC3PONBR = SW0ZM001.PC3PONBR;
      SW0ZS11(); /* ; validate using dprodc.vpohdr01*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(185); /* invalid po number*/
        SW0ZM001.XXXLOCID = "530";
        set SW0ZM001.PC3PONBR cursor, bold;
      end
    end
  else
    if (SW0ZM001.SW0ZMPID == " " /* po id not entered*/
     || SW0ZM001.PC4ORTYP == " ") /* order type*/
      converseLib.validationFailed(9); /* required field*/
      SW0ZM001.XXXLOCID = "530";
      set SW0ZM001.SW0ZMPID cursor, bold;
      set SW0ZM001.PC4ORTYP bold;
      set SW0ZM001.PC3PONBR invisible, protect;
      set SW0ZM001.SW0ZMPON invisible, protect;
    else

      set SWVREC empty;
      SWVREC.SWVWFNC = "NO";
      SWVREC.SWVWPOID = SW0ZM001.SW0ZMPID;
      SWVREC.PC4ORTYP = SW0ZM001.PC4ORTYP;
      SWVREC.XGPCD = SW0ZM001.XGPCD;
      XSSLS10();
      if (SWVREC.SWVWRTN == 0)
        SW0ZW01.PC3PONBR = SWVREC.PC3PONBR;
        SW0ZM001.PC3PONBR = SWVREC.PC3PONBR;
        SW0ZM001.SW0ZMPID = SWVREC.SWVWPOID;
        SW0ZM001.PC4ORTYP = SWVREC.PC4ORTYP;
      end

      set PC3REC empty;
      PC3REC.XGPCD = SW0ZW01.XGPCD;
      PC3REC.PC3PONBR = SW0ZW01.PC3PONBR;
      SW0ZS11(); /* ; validate using dprodc.vpohdr01*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(185); /* invalid po number*/
        SW0ZM001.XXXLOCID = "530";
        set SW0ZM001.SW0ZMPID cursor, bold;
      else
        SW0ZW00.SW0ZWHUS = "Y"; /* header updated switch*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Edit remote printer id*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XROPDEST == "  ")
    set SW0ZM001.XROPDEST cursor, bold;
    converseLib.validationFailed(9); /* required*/
    SW0ZM001.XXXLOCID = "530";
  else
    if (SW0ZM001.XROPDEST in XROTBL.XROPDEST)
      if (XROTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        set SW0ZM001.XROPDEST cursor, bold;
        converseLib.validationFailed(10); /* status is inactive*/
        SW0ZM001.XXXLOCID = "530";
      end
    else
      set SW0ZM001.XROPDEST cursor, bold;
      converseLib.validationFailed(11); /* invalid code*/
      SW0ZM001.XXXLOCID = "530";
    end
  end

   /* ------------------------------------------------------------*/
   /* validate container number*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.TSHCNTNR == " ")
    converseLib.validationFailed(9); /* required*/
    set SW0ZM001.TSHCNTNR cursor, bold;
    SLWREC.XXXLOCID = "530";
  end

   /* ------------------------------------------------------------*/
   /* Edit whse code*/
   /* ------------------------------------------------------------*/

  if (SW0ZM001.XWHCD == "  ")
    set SW0ZM001.XWHCD cursor, bold;
    converseLib.validationFailed(9); /* required*/
    SW0ZM001.XXXLOCID = "530";
  else
    if (SW0ZM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SW0ZM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      else
        SW0ZM001.XWHABRV = " ";
        set SW0ZM001.XWHCD cursor, bold;
        converseLib.validationFailed(10); /* status is inactive*/
        SW0ZM001.XXXLOCID = "530";
      end
    else
      SW0ZM001.XWHABRV = " ";
      set SW0ZM001.XWHCD cursor, bold;
      converseLib.validationFailed(11); /* invalid code*/
      SW0ZM001.XXXLOCID = "530";
    end
  end


    /* ------------------------------------------------------------*/
     /* trigger detail updated switch if only setaside to update*/
    /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWSUS == "Y" /* setaside updated switch*/
   || SW0ZW00.SW0ZWSES == "Y") /* selected field edit switch*/
    SW0ZW00.SW0ZWDUS = "Y"; /* detail updated switch*/
  end

end // end SW0Z530

// Process valid input request
Function SW0Z600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SW0ZWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update key data*/
   /* ------------------------------------------------------------*/

  SW0ZW01.XWHCD = SW0ZM001.XWHCD; /* warehouse*/
  if (SW0ZW01.XWHCD in XWHTBL.XWHCD)
    SW0ZW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  SW0ZW01.TSHCNTNR = SW0ZM001.TSHCNTNR;
  SW0ZW01.XGPCD = SW0ZM001.XGPCD;
  SW0ZW01.SY1STNBR = SW0ZM001.SY1STNBR;
  SW0ZW01.SY2CLRID = SW0ZM001.SY2CLRID;
  SW0ZW01.XDMCD = SW0ZM001.XDMCD;
  SW0ZW01.XQACD = SW0ZM001.XQACD;
  SW0ZW01.PC3PONBR = SW0ZM001.PC3PONBR;
  SW0ZW01.SW0ZWPON = SW0ZM001.SW0ZMPON;
  SW0ZW01.SW0ZWPID = SW0ZM001.SW0ZMPID;
  SW0ZW01.PC4ORTYP = SW0ZM001.PC4ORTYP;
  SW0ZW01.XROPDEST = SW0ZM001.XROPDEST;

  if (converseVar.eventKey is enter
   && SW0ZW00.SW0ZWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* --------------------------------------------------------*/
   /* request to scroll backwards*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    SW0ZW00.XXXTSPAG = SW0ZW00.XXXTSPAG - 1;
    return;
  end

   /* --------------------------------------------------------*/
   /* request to scroll forward*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf8)
    SW0ZW00.XXXTSPAG = SW0ZW00.XXXTSPAG + 1;
    return;
  end

   /* --------------------------------------------------------*/
   /* request to transfer to receiving w/o carton application*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* transfer to receiving w/o appl.*/

    COMMAREA.XWHCD = SW0ZM001.XWHCD;
    COMMAREA.CATOAP = "SW0X"; /* transfer to applicaiton*/

    XSSL001(); /* Exit to another application*/

    SW0ZW00.SW0ZWSWR = "N"; /* request for data*/
    SW0ZW00.SW0ZWSWF = "Y"; /* format screen m001*/

    set SW0ZM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* --------------------------------------------------------*/
   /* request to transfer to receiving r/l carton  maint. appl*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* display m001 pf14*/

    COMMAREA.XWHCD = SW0ZM001.XWHCD;
    SLWREC.TSHCNTNR = SW0ZM001.TSHCNTNR;
    SLWREC.PC3PONBR = SW0ZM001.PC3PONBR;
    SLWREC.XGPCD = SW0ZM001.XGPCD;
    SLWREC.SY1STNBR = SW0ZM001.SY1STNBR;
    SLWREC.SY2CLRID = SW0ZM001.SY2CLRID;
    SLWREC.XDMCD = SW0ZM001.XDMCD;
    SLWREC.XQACD = SW0ZM001.XQACD;
    COMMAREA.CATOAP = "SW0Y"; /* transfer to applicaiton*/

    XSSL001(); /* Exit to another application*/

    SW0ZW00.SW0ZWSWR = "N"; /* request for data*/
    SW0ZW00.SW0ZWSWF = "Y"; /* format screen m001*/

    set SW0ZM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* if databases were updated previously, process labels*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter
   && SW0ZW00.SW0ZWDBU == "Y") /* databases were updated*/
    if (SW0ZM001.SW0ZMPRT == "Y") /* print labels was chosen*/

      SW0Z690(); /* submit labels for print*/

      SW0ZW00.SW0ZWDBU = "N";

    end

    /* ---------------------------------------------------------*/
     /* move the new values so that the new product will display*/
    /* ---------------------------------------------------------*/

    SW0ZW01.SY1STNBR = SW0ZW01.SW0ZWSTY;
    SW0ZW01.SY2CLRID = SW0ZW01.SW0ZWCLR;
    SW0ZW01.XDMCD = SW0ZW01.SW0ZWDIM;
    SW0ZW01.PC3PONBR = SW0ZW01.SW0ZWPON;
    SW0ZW01.XQACD = SW0ZW01.SW0ZWXQA;

    if (SLWREC.SLWMSGNO == 0)
      SLWREC.SLWMSGNO = 20;
      SLWREC.XXXLOCID = "600";
    end

    SW0ZW00.SW0ZWSPF = "Y"; /* format po field switch*/
    SW0ZW00.SW0ZWSWR = "Y"; /* requested data switch*/

  end

   /* ------------------------------------------------------------*/
   /* if data was previously changed and not being currently*/
   /* changed, it is time to do the nasty updates.*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWDUS == "N" /* detail data not changed*/
   && SW0ZW00.SW0ZWHUS == "N" /* header data not changed*/
   && SW0ZW00.SW0ZWUPS == "Y") /* data was previously updated*/

    if (converseVar.eventKey is pf9) /* update*/

      SW0Z610(); /* update all databases*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();

      SW0ZW00.SW0ZWDBU = "Y"; /* databases updated*/
      SW0ZW00.SW0ZWUPS = "N"; /* data updated switch*/

      converseLib.validationFailed(294);
      SLWREC.XXXLOCID = "600";

      SW0ZM001.SW0ZMPRT = "Y";
      set SW0ZM001.SW0ZMPRT cursor, normal;
      set SW0ZM001.SW0ZMPRD protect;

    end
  end

   /* ------------------------------------------------------------*/
   /* if header data has been changed and enter pressed, update*/
   /* w01.*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWHUS == "Y") /* header data changed*/
    if (converseVar.eventKey is enter) /* update request*/

      SW0ZW01.SW0ZWSTY = SW0ZM001.SW0ZMSTY;
      SW0ZW01.SW0ZWCLR = SW0ZM001.SW0ZMCLR;
      SW0ZW01.SW0ZWDIM = SW0ZM001.SW0ZMDIM;
      SW0ZW01.SW0ZWPON = SW0ZM001.SW0ZMPON;
      SW0ZW01.SW0ZWXQA = SW0ZM001.SW0ZMXQA;

      SW0ZW00.SW0ZWUPS = "Y"; /* data updated switch*/

    else

      converseLib.validationFailed(241); /* press enter*/
      SLWREC.XXXLOCID = "600";
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* if detail data has been changed and enter pressed, update*/
   /* current page in temp storage.*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWDUS == "Y") /* detail data changed*/
    if (converseVar.eventKey is enter) /* update request*/

      SW0Z613(); /* update temp storage*/

      SW0ZW00.SW0ZWUPS = "Y"; /* data updated switch*/

    else

      converseLib.validationFailed(241); /* press enter*/
      SLWREC.XXXLOCID = "600";
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* if data has been changed and enter pressed, do special edit*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWHUS == "Y" /* header data changed*/
   || SW0ZW00.SW0ZWDUS == "Y") /* detail data changed*/
    if (converseVar.eventKey is enter) /* update request*/

      SW0Z615(); /* special edits*/
    end
  end

  if (SW0ZW00.SW0ZWDUS == "Y") /* detail data changed*/
    if (converseVar.eventKey is enter) /* update request*/

      SW0Z614(); /* reformat temp storage*/

    end
  end

  SW0ZW00.SW0ZWHUS = "N"; /* header data switch*/
  SW0ZW00.SW0ZWDUS = "N"; /* detail data switch*/

end // end SW0Z600

// update all databases
Function SW0Z610()
   /* ------------------------------------------------------------*/
   /* update all databases*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SW0ZWRSS = "N"; /* row selected switch*/

  SW0ZW00.SL2PALET = "99999";
  SW0ZW00.SW0ZWPAG = SW0ZW00.XXXTSPAG;
  SW0ZW00.XXXTSPAG = 0;

  while (SW0ZW00.XXXTSPAG < SW0ZW00.TA5TSQIX) /* more pages*/

    SW0ZW00.XXXTSPAG = SW0ZW00.XXXTSPAG + 1;

    if (SW0ZW00.SW0ZWPAG != 1 /* first page is noready in w01*/
     || SW0ZW00.XXXTSPAG != 1)

      SW0ZS08(); /* read temporary storage*/

    end

    SW0ZW00.SW0ZWIDX = 1;
    while (SW0ZW00.SW0ZWIDX <= SW0ZW02.SW0ZWNLD) /* more lines*/

      if (SW0ZW02.SW0ZWSEL[SW0ZWIDX] == "S" /* row was selected*/
       || SW0ZW02.SW0ZWSEL[SW0ZWIDX] == "A") /* change all*/
        SW0ZW00.SW0ZWRSS = "Y";
        if (SW0ZW00.SW0ZWSUS == "Y") /* setaside updated switch*/
          SW0Z625(); /* update rlog setaside*/
        else
          SW0Z620(); /* update plan databases*/
          if (SW0ZW00.SL8WONBR == SW0ZW00.SW0ZWNWO
           && SW0ZW00.SL8WONBR > 0)
            SW0Z630(); /* update work order database*/
          end
        end
      end

      SW0ZW00.SL2PALET = SW0ZW02.SL2PALET[SW0ZWIDX];
      SW0ZW00.SW0ZWIDX = SW0ZW00.SW0ZWIDX + 1;
    end
  end

  if (SW0ZW00.SW0ZWPAG != SW0ZW00.XXXTSPAG) /* page needs to be reset*/

    SW0ZW00.XXXTSPAG = SW0ZW00.SW0ZWPAG;
    SW0ZS08(); /* read temporary storage*/

  end

  if (SW0ZW00.SW0ZWRSS != "Y") /* row was not selected*/
    converseLib.validationFailed(319); /* at least one row must be selected*/
    SLWREC.XXXLOCID = "610";
    exit stack;
  end

end // end SW0Z610

// update temp storage
Function SW0Z613()
   /* ------------------------------------------------------------*/
   /* update the current page in temp storage*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SW0ZWPAG = SW0ZW00.XXXTSPAG; /* save current page*/

  SW0ZW00.SW0ZWIDX = 1;
  while (SW0ZW00.SW0ZWIDX <= SW0ZW02.SW0ZWNLD) /* more lines*/

    SW0ZW02.SW0ZWSEL[SW0ZWIDX] = SW0ZM001.SW0ZMSEL[SW0ZWIDX];
    SW0ZW02.SW0ZWSAS[SW0ZWIDX] = SW0ZM001.SW0ZMSAS[SW0ZWIDX];
    SW0ZW02.SW0ZWSEG[SW0ZWIDX] = SW0ZM001.SW0ZMSEG[SW0ZWIDX];
    SW0ZW02.SW0ZWEDF[SW0ZWIDX] = SW0ZM001.SW0ZMEDF[SW0ZWIDX];
    SW0ZW02.SW0ZWSLC[SW0ZWIDX] = SW0ZM001.SW0ZMSLC[SW0ZWIDX];
    SW0ZW02.SW0ZWPKG[SW0ZWIDX] = SW0ZM001.SW0ZMPKG[SW0ZWIDX];
    SW0ZW02.SW0ZWUOM[SW0ZWIDX] = SW0ZM001.SW0ZMUOM[SW0ZWIDX];
    SW0ZW02.SW0ZWOWN[SW0ZWIDX] = SW0ZM001.SW0ZMOWN[SW0ZWIDX];

    SW0ZW00.SW0ZWIDX = SW0ZW00.SW0ZWIDX + 1;
  end

  SW0ZS09(); /* update temp storage*/

  if (SW0ZW00.XXXTSPAG != SW0ZW00.SW0ZWPAG) /* not on current page*/
    SW0ZW00.XXXTSPAG = SW0ZW00.SW0ZWPAG; /* reset current page*/

    SW0ZS08(); /* read temp storage*/
  end

end // end SW0Z613

// reformat temp storage
Function SW0Z614()
   /* ------------------------------------------------------------*/
   /* reformat temp storage*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SW0ZWPAG = SW0ZW00.XXXTSPAG; /* save current page*/
  SW0ZW00.SW0ZWPSW = "N"; /* pallet switch*/
  SW0ZW00.SL2PALET = "99999"; /* pallet switch*/
  SW0ZW00.XXXTSPAG = 0;

  while (SW0ZW00.XXXTSPAG < SW0ZW00.TA5TSQIX /* more pages*/
   && converseVar.validationMsgNum == 0)

    SW0ZW00.XXXTSPAG = SW0ZW00.XXXTSPAG + 1;

    if (SW0ZW00.SW0ZWPAG != 1 /* first page is not in t/s*/
     || SW0ZW00.XXXTSPAG != 1) /* first page is not needed*/

      SW0ZS08(); /* read temporary storage*/
    end

    SW0ZW00.SW0ZWIDX = 1;
    while (SW0ZW00.SW0ZWIDX <= SW0ZW02.SW0ZWNLD) /* more lines*/

      if (SW0ZW00.SW0ZWCHA == "Y") /* change all flag*/
        if (SW0ZW02.SW0ZWSEL[SW0ZWIDX] == "A")
          SW0ZW00.SW0ZWSAS = SW0ZW02.SW0ZWSAS[SW0ZWIDX];
          SW0ZW00.SW0ZWSEG = SW0ZW02.SW0ZWSEG[SW0ZWIDX];
          SW0ZW00.SW0ZWEDF = SW0ZW02.SW0ZWEDF[SW0ZWIDX];
          SW0ZW00.SW0ZWSLC = SW0ZW02.SW0ZWSLC[SW0ZWIDX];
          SW0ZW00.SW0ZWPKG = SW0ZW02.SW0ZWPKG[SW0ZWIDX];
          SW0ZW00.SW0ZWUOM = SW0ZW02.SW0ZWUOM[SW0ZWIDX];
          SW0ZW00.SW0ZWOWN = SW0ZW02.SW0ZWOWN[SW0ZWIDX];
        else
          SW0ZW02.SW0ZWSEL[SW0ZWIDX] = "S";
          SW0ZW02.SW0ZWSAS[SW0ZWIDX] = SW0ZW00.SW0ZWSAS;
          SW0ZW02.SW0ZWSEG[SW0ZWIDX] = SW0ZW00.SW0ZWSEG;
          SW0ZW02.SW0ZWEDF[SW0ZWIDX] = SW0ZW00.SW0ZWEDF;
          SW0ZW02.SW0ZWSLC[SW0ZWIDX] = SW0ZW00.SW0ZWSLC;
          SW0ZW02.SW0ZWPKG[SW0ZWIDX] = SW0ZW00.SW0ZWPKG;
          SW0ZW02.SW0ZWUOM[SW0ZWIDX] = SW0ZW00.SW0ZWUOM;
          SW0ZW02.SW0ZWOWN[SW0ZWIDX] = SW0ZW00.SW0ZWOWN;
          SW0ZW00.SW0ZWREF = "Y"; /* reformatted data switch*/
        end
      else
        if (SW0ZW02.SW0ZWSEL[SW0ZWIDX] == "S" /* line was selected*/
         || SW0ZW02.SW0ZWSEL[SW0ZWIDX] == " ") /* line was un-selected*/
          if (SW0ZW02.SL2PALET[SW0ZWIDX] > " " /* part of a pallet*/
           && SW0ZW02.SL2PALET[SW0ZWIDX] != SW0ZW00.SL2PALET)

            SW0ZW00.SW0ZWSEL = SW0ZW02.SW0ZWSEL[SW0ZWIDX];
            SW0ZW00.SW0ZWSAS = SW0ZW02.SW0ZWSAS[SW0ZWIDX];
            SW0ZW00.SW0ZWSEG = SW0ZW02.SW0ZWSEG[SW0ZWIDX];
            SW0ZW00.SW0ZWEDF = SW0ZW02.SW0ZWEDF[SW0ZWIDX];
            SW0ZW00.SW0ZWSLC = SW0ZW02.SW0ZWSLC[SW0ZWIDX];
            SW0ZW00.SW0ZWPKG = SW0ZW02.SW0ZWPKG[SW0ZWIDX];
            SW0ZW00.SW0ZWUOM = SW0ZW02.SW0ZWUOM[SW0ZWIDX];
            SW0ZW00.SW0ZWOWN = SW0ZW02.SW0ZWOWN[SW0ZWIDX];

            SW0ZW00.SW0ZWPSW = "Y"; /* pallet switch*/

          else
            if (SW0ZW02.SL2PALET[SW0ZWIDX] == SW0ZW00.SL2PALET
             /* = previous*/
             && SW0ZW00.SW0ZWPSW == "Y") /* pallet switch*/

              SW0ZW02.SW0ZWSEL[SW0ZWIDX] = SW0ZW00.SW0ZWSEL;
              SW0ZW02.SW0ZWSAS[SW0ZWIDX] = SW0ZW00.SW0ZWSAS;
              SW0ZW02.SW0ZWSEG[SW0ZWIDX] = SW0ZW00.SW0ZWSEG;
              SW0ZW02.SW0ZWEDF[SW0ZWIDX] = SW0ZW00.SW0ZWEDF;
              SW0ZW02.SW0ZWSLC[SW0ZWIDX] = SW0ZW00.SW0ZWSLC;
              SW0ZW02.SW0ZWPKG[SW0ZWIDX] = SW0ZW00.SW0ZWPKG;
              SW0ZW02.SW0ZWUOM[SW0ZWIDX] = SW0ZW00.SW0ZWUOM;
              SW0ZW02.SW0ZWOWN[SW0ZWIDX] = SW0ZW00.SW0ZWOWN;
            else
              SW0ZW00.SW0ZWPSW = "N"; /* pallet switch*/
            end
          end
        end
      end

      SW0ZW00.SL2PALET = SW0ZW02.SL2PALET[SW0ZWIDX];
      SW0ZW00.SW0ZWIDX = SW0ZW00.SW0ZWIDX + 1;
    end

    SW0ZS09(); /* update temp storage*/

  end

  if (SW0ZW00.XXXTSPAG != SW0ZW00.SW0ZWPAG) /* not on current page*/
    SW0ZW00.XXXTSPAG = SW0ZW00.SW0ZWPAG; /* reset current page*/

    SW0ZS08(); /* read temp storage*/
  end

end // end SW0Z614

// special edits
Function SW0Z615()
   /* ------------------------------------------------------------*/
   /* special edits*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SW0ZWPAG = SW0ZW00.XXXTSPAG; /* save current page*/

  SW0ZW00.XXXTSPAG = 0;

  while (SW0ZW00.XXXTSPAG < SW0ZW00.TA5TSQIX /* more pages*/
   && converseVar.validationMsgNum == 0)

    SW0ZW00.XXXTSPAG = SW0ZW00.XXXTSPAG + 1;

    if (SW0ZW00.SW0ZWPAG != 1 /* first page is not in t/s*/
     || SW0ZW00.XXXTSPAG != 1) /* first page is not needed*/

      SW0ZS08(); /* read temporary storage*/
    end

    SW0ZW00.SW0ZWIDX = 1;

    while (SW0ZW00.SW0ZWIDX <= SW0ZW02.SW0ZWNLD /* more lines*/
     && converseVar.validationMsgNum == 0)

      if (SW0ZW02.SW0ZWSEL[SW0ZWIDX] == "S"
       || SW0ZW02.SW0ZWSEL[SW0ZWIDX] == "A")

        SW0Z616(); /* check for modified data*/
      else
        if (SW0ZW00.SW0ZWCHA == "Y") /* change all*/

          SW0Z617(); /* check for modified data - change all*/
        end
      end

      if (SW0ZW00.SW0ZWCHA == "Y" /* change all*/
       && SW0ZW00.SW0ZWREF != "Y" /* data already reformatted*/
       && converseVar.validationMsgNum == 0)

        SW0Z618(); /* change all edit*/
      end

      SW0ZW00.SW0ZWIDX = SW0ZW00.SW0ZWIDX + 1;

    end
  end

  if (SW0ZW00.XXXTSPAG != SW0ZW00.SW0ZWPAG) /* not on current page*/
    SW0ZW00.XXXTSPAG = SW0ZW00.SW0ZWPAG; /* reset current page*/

    SW0ZS08(); /* read temp storage*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end SW0Z615

// check for changed key
Function SW0Z616()
   /* ------------------------------------------------------------*/
   /* if a row has been selected, user must change something in*/
   /* either the header or the detail.*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SW0ZWSAS = SW0ZW02.SW0ZWSAS[SW0ZWIDX];
  SW0ZW00.SW0ZWSEG = SW0ZW02.SW0ZWSEG[SW0ZWIDX];
  SW0ZW00.SW0ZWEDF = SW0ZW02.SW0ZWEDF[SW0ZWIDX];
  SW0ZW00.SW0ZWSLC = SW0ZW02.SW0ZWSLC[SW0ZWIDX];
  SW0ZW00.SW0ZWPKG = SW0ZW02.SW0ZWPKG[SW0ZWIDX];
  SW0ZW00.SW0ZWUOM = SW0ZW02.SW0ZWUOM[SW0ZWIDX];
  SW0ZW00.SW0ZWOWN = SW0ZW02.SW0ZWOWN[SW0ZWIDX];

  if (SW0ZW01.SY1STNBR != SW0ZW01.SW0ZWSTY /* style nbr*/
   || SW0ZW01.SY2CLRID != SW0ZW01.SW0ZWCLR /* color id*/
   || SW0ZW01.XDMCD != SW0ZW01.SW0ZWDIM    /* dimension*/
   || SW0ZW01.XQACD != SW0ZW01.SW0ZWXQA    /* quality code*/
   || SW0ZW01.PC3PONBR != SW0ZW01.SW0ZWPON) /* po number*/
    return;
  end

  if (SW0ZW02.INASAID[SW0ZWIDX] != SW0ZW02.SW0ZWSAS[SW0ZWIDX])
    return;
  end

  if (SW0ZW02.PC2INSEG[SW0ZWIDX] != SW0ZW02.SW0ZWSEG[SW0ZWIDX]
   && SW0ZW02.SW0ZWSEG[SW0ZWIDX] != " ")
    return;
  end

  if (SW0ZW02.XEGCD[SW0ZWIDX] != SW0ZW02.SW0ZWEDF[SW0ZWIDX]
   && SW0ZW02.SW0ZWEDF[SW0ZWIDX] != " ")
    return;
  end

  if (SW0ZW02.XSLCD[SW0ZWIDX] != SW0ZW02.SW0ZWSLC[SW0ZWIDX]
   && SW0ZW02.SW0ZWSLC[SW0ZWIDX] != " ")
    return;
  end

  if (SW0ZW02.XPGCD[SW0ZWIDX] != SW0ZW02.SW0ZWPKG[SW0ZWIDX]
   && SW0ZW02.SW0ZWPKG[SW0ZWIDX] != " ")
    return;
  end

  if (SW0ZW02.XUMCD[SW0ZWIDX] != SW0ZW02.SW0ZWUOM[SW0ZWIDX]
   && SW0ZW02.SW0ZWUOM[SW0ZWIDX] != " ")
    return;
  end

  if (SW0ZW02.XOWCD[SW0ZWIDX] != SW0ZW02.SW0ZWOWN[SW0ZWIDX]
   && SW0ZW02.SW0ZWOWN[SW0ZWIDX] != " ")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if you get to here, nothing has been changed and this is*/
   /* an error.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "618";
  converseLib.validationFailed(339);
  if (SW0ZW00.XXXTSPAG == SW0ZW00.SW0ZWPAG) /* on diplayed page*/
    set SW0ZM001.SW0ZMSEL[SW0ZWIDX] cursor, bold;
  end


end // end SW0Z616

// check for changed key - ch all
Function SW0Z617()
   /* ------------------------------------------------------------*/
   /* if change all has been selected, user must change*/
   /* either the header or the detail(on the first line).*/
   /* ------------------------------------------------------------*/

  if (SW0ZW01.SY1STNBR != SW0ZW01.SW0ZWSTY /* style nbr*/
   || SW0ZW01.SY2CLRID != SW0ZW01.SW0ZWCLR /* color id*/
   || SW0ZW01.XDMCD != SW0ZW01.SW0ZWDIM    /* dimension*/
   || SW0ZW01.XQACD != SW0ZW01.SW0ZWXQA    /* quality code*/
   || SW0ZW01.PC3PONBR != SW0ZW01.SW0ZWPON) /* po number*/
    return;
  end

  if (SW0ZW02.INASAID[SW0ZWIDX] != SW0ZW00.SW0ZWSAS)
    return;
  end

  if (SW0ZW02.PC2INSEG[SW0ZWIDX] != SW0ZW00.SW0ZWSEG
   && SW0ZW00.SW0ZWSEG != " ")
    return;
  end

  if (SW0ZW02.XEGCD[SW0ZWIDX] != SW0ZW00.SW0ZWEDF
   && SW0ZW00.SW0ZWEDF != " ")
    return;
  end

  if (SW0ZW02.XSLCD[SW0ZWIDX] != SW0ZW00.SW0ZWSLC
   && SW0ZW00.SW0ZWSLC != " ")
    return;
  end

  if (SW0ZW02.XPGCD[SW0ZWIDX] != SW0ZW00.SW0ZWPKG
   && SW0ZW00.SW0ZWPKG != " ")
    return;
  end

  if (SW0ZW02.XUMCD[SW0ZWIDX] != SW0ZW00.SW0ZWUOM
   && SW0ZW00.SW0ZWUOM != " ")
    return;
  end

  if (SW0ZW02.XOWCD[SW0ZWIDX] != SW0ZW00.SW0ZWOWN
   && SW0ZW00.SW0ZWOWN != " ")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if you get to here, nothing has been changed and this is*/
   /* an error.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "618";
  converseLib.validationFailed(339);

  if (SW0ZW00.XXXTSPAG == SW0ZW00.SW0ZWPAG) /* on diplayed page*/
    set SW0ZM001.SW0ZMSEL[SW0ZWIDX] cursor, bold;
  end


end // end SW0Z617

// change all edit
Function SW0Z618()
   /* ------------------------------------------------------------*/
   /* change all edit*/

    /* - only the first row may be selected*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SW0ZWIDX == 1 /* first line*/
   && SW0ZW00.XXXTSPAG == 1) /* first page*/
     /* next sentence*/
  else
    if (SW0ZW02.SW0ZWSEL[SW0ZWIDX] != " ")
      converseLib.validationFailed(251); /* only first row may be selected*/
      SLWREC.XXXLOCID = "615";

      if (SW0ZW00.XXXTSPAG == SW0ZW00.SW0ZWPAG) /* on diplayed page*/
        set SW0ZM001.SW0ZMSEL[SW0ZWIDX] cursor, bold;
      end
    end
  end


end // end SW0Z618

// update plan databases
Function SW0Z620()
   /* ------------------------------------------------------------*/
   /* update plan databases*/
   /* ------------------------------------------------------------*/

  SW0ZW00.SW0ZWDPP = "N"; /* delete plan/product switch*/
  SW0ZW00.SW0ZWDLC = "N"; /* delete lane carton switch*/

  SW0ZW00.SL8WONBR = 0;
  SW0ZW00.SW0ZWNWO = 0;

   /* ----------------------------------------------------*/
   /* select dstloc.vplnsy01 using "current" product key*/
   /* ----------------------------------------------------*/

  SW0ZS20(); /* 'sa' dstloc.vplnsy01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SW0Z640(); /* process 'current' product*/

  else /* current product not found*/
    SLWREC.XXXLOCID = "620"; /* Module identification*/
    TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/
    SW0ZS99(); /* abend routine*/

  end

   /* ----------------------------------------------------*/
   /* select dstloc.vplnsy01 using "new" product key*/
   /* ----------------------------------------------------*/

  SW0ZS25(); /* select 's' dstloc.vplnsy01 new*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SW0Z650(); /* update 'new' product information*/

  else

    if (SW0ZW00.SW0ZWDPP == "Y") /* we can reuse the old prod seq nbr*/

      SW0Z660();
                                   /* add new product with old prod seq nbr*/

    else

      SW0Z670(); /* add new product information*/

    end
  end

  if (SW0ZW00.SW0ZWDPP == "Y" /* delete plan/product*/
   || SW0ZW00.SW0ZWDLC == "Y") /* delete lane carton*/

    SW0Z680(); /* delete 'current' product information*/

  end

end // end SW0Z620

// process rlitms
Function SW0Z625()
  /* ---------------------------------------------------------*/
    /* process rlitm's for setaside only*/
   /* ---------------------------------------------------------*/

  SW0ZS50(); /* 's9' dstloc.vrlitm01*/

  SW0ZS51(); /* 'n9' dstloc.vrlitm01*/

  while (SQLCA.VAGen_SQLCODE == 0) /* more vrlitm01's*/

    SW0ZS65(); /* 'u' dstloc.vrlitm01 new*/

    SW0ZS51(); /* n9 dstloc.vrlitm01*/

  end

  SW0ZS52(); /* c9 dstloc.vrlitm01*/

end // end SW0Z625

// update w.o. databases
Function SW0Z630()
   /* ------------------------------------------------------------*/
   /* update work order databases*/
   /* ------------------------------------------------------------*/

  if (SW0ZW00.SL8WONBR == 0)

    SW0ZS22(); /* 's' dstloc.vplnlc01 cur*/

  end

   /* ----------------------------------------------------*/
   /* select dstloc.vwophd01 using whse and wo nbr*/
   /* ----------------------------------------------------*/

  SW0ZS53(); /* s6 dstloc.vwophd02*/

  SW0ZS54(); /* n6 dstloc.vwophd02*/

  if (SQLCA.VAGen_SQLCODE == 0)

    /* ----------------------------------------------------*/
     /* compare wo product to current product*/
    /* ----------------------------------------------------*/

    if (SLOREC.SWEPLLNB != SW0ZW01.SWEPLLNB
     || SLOREC.TSHCNTNR != SW0ZW01.TSHCNTNR
     || SLOREC.PC3PONBR != SW0ZW01.PC3PONBR
     || SLOREC.XGPCD != SW0ZW01.XGPCD
     || SLOREC.SY1STNBR != SW0ZW01.SY1STNBR
     || SLOREC.SY2CLRID != SW0ZW01.SY2CLRID
     || SLOREC.XDMCD != SW0ZW01.XDMCD
     || SLOREC.XQACD != SW0ZW01.XQACD
    
     || SLOREC.PKDNCSQN != SW0ZW02.PKDNCSQN[SW0ZWIDX]
     || SLOREC.SL2PALET != SW0ZW02.SL2PALET[SW0ZWIDX]
     || SLOREC.PC2INSEG != SW0ZW02.PC2INSEG[SW0ZWIDX]
     || SLOREC.XEGCD != SW0ZW02.XEGCD[SW0ZWIDX]
     || SLOREC.XPGCD != SW0ZW02.XPGCD[SW0ZWIDX]
     || SLOREC.XUMCD != SW0ZW02.XUMCD[SW0ZWIDX]
     || SLOREC.XOWCD != SW0ZW02.XOWCD[SW0ZWIDX]
     || SLOREC.XSLCD != SW0ZW02.XSLCD[SW0ZWIDX])

      if (SW0ZW02.SL2PALET[SW0ZWIDX] != " "
       && SW0ZW02.SL2PALET[SW0ZWIDX] != SW0ZW00.SL2PALET)
        /* ------------------------------------------------------------*/
         /* all cartons on pallet must maintain same product*/
        /* ------------------------------------------------------------*/
        SLWREC.XXXLOCID = "630"; /* Module identification*/
        TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
        SW0ZS99(); /* abend routine*/
      end

    else

      SW0ZS57(); /* u dstloc.vwophd01 w/new product*/

    end
  end

  SW0ZS55(); /* c6 dstloc.vwophd02*/

end // end SW0Z630

// update 'current' product info.
Function SW0Z640()
   /* ----------------------------------------------------*/
   /* update 'current' product info*/
   /* ----------------------------------------------------*/

  SWGREC.SWGPRDCS = SWGREC.SWGPRDCS - 1;

  if (SW0ZW02.SL2PALET[SW0ZWIDX] > " "
   && SW0ZW02.SL2PALET[SW0ZWIDX] != SW0ZW00.SL2PALET)
    SWGREC.SWGPRDPL = SWGREC.SWGPRDPL - 1;
  end

  SWGREC.SWGPRDUN = SWGREC.SWGPRDUN - SW0ZW02.SW0ZWTPR[SW0ZWIDX];

  SW0ZW00.SWGPSEQN = SWGREC.SWGPSEQN; /* save current prod seq nbr*/
  SW0ZW00.SW0ZWNPS = SWGREC.SWGPSEQN;

  if (SWGREC.SWGPRDCS == 0
   && SWGREC.SWGPRDPL == 0
   && SWGREC.SWGPRDUN == 0)
    SW0ZW00.SW0ZWDPP = "Y"; /* delete plan product*/

    SW0ZS22(); /* select 's' dstloc.vplnlc01*/

  else

    /* ----------------------------------------------------*/
     /* update dstloc.vplnsy01 using "current" product*/
    /* ----------------------------------------------------*/

    SW0ZS21(); /* update dstloc.vplnsy01*/

    /* ----------------------------------------------------*/
     /* select dstloc.vplnlc01 using "current" product*/
    /* ----------------------------------------------------*/

    SW0ZS22(); /* select 's' dstloc.vplnlc01*/

    if (SQLCA.VAGen_SQLCODE == 0)

      SWHREC.SWHCRTUN = SWHREC.SWHCRTUN - SW0ZW02.SW0ZWTPR[SW0ZWIDX];

      if (SWHREC.SWHCRTUN == 0)

        SW0ZW00.SW0ZWDLC = "Y"; /* delete plncl flag*/

      else

        SW0ZS17(); /* 'u' dstloc.vplnlc01*/

        SW0Z641(); /* update current sizes*/

      end
    else /* plnlc01 not found*/

      SLWREC.XXXLOCID = "640"; /* Module identification*/
      TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/
      SW0ZS99(); /* abend routine*/
    end
  end

end // end SW0Z640

// update 'current' sizes
Function SW0Z641()

  SW0ZS50(); /* 's9' dstloc.vrlitm01*/

  SW0ZS51(); /* 'n9' dstloc.vrlitm01*/

  while (SQLCA.VAGen_SQLCODE == 0) /* more vrlitm01's*/

    SW0ZS13(); /* 's' dstloc.vplnsz01 cur*/

    if (SQLCA.VAGen_SQLCODE == 0)

      SWNREC.SWNSZUN = SWNREC.SWNSZUN - SL2REC.SL2RCVD;

      if (SWNREC.SWNSZUN == 0)

        SW0ZS14(); /* 'd' dstloc.vplnsz01 cur*/

      else

        SW0ZS24(); /* 'u' dstloc.vplnsz01 cur*/

      end

    else /* cur vplnsz01 not found*/
      SW0ZS52(); /* c9 dstloc.vrlitm01*/
      SLWREC.XXXLOCID = "680"; /* Module identification*/
      TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/
      SW0ZS99(); /* abend routine*/
    end

    SW0ZS51(); /* n9 dstloc.vrlitm01*/

  end

  SW0ZS52(); /* c9 dstloc.vrlitm01*/

end // end SW0Z641

// update "new" product info.
Function SW0Z650()
   /* ----------------------------------------------------*/
   /* update "new" product info*/
   /* ----------------------------------------------------*/

  SW0ZW00.SW0ZWNPS = SWGREC.SWGPSEQN; /* new product seq nbr*/

  SWGREC.SWGPRDCS = SWGREC.SWGPRDCS + 1;

  if (SW0ZW02.SL2PALET[SW0ZWIDX] > " "
   && SW0ZW02.SL2PALET[SW0ZWIDX] != SW0ZW00.SL2PALET)
    SWGREC.SWGPRDPL = SWGREC.SWGPRDPL + 1;
  end

  SWGREC.SWGPRDUN = SWGREC.SWGPRDUN + SW0ZW02.SW0ZWTPR[SW0ZWIDX];

   /* ----------------------------------------------------*/
   /* update dstloc.vplnsy01 using "new" product key*/
   /* ----------------------------------------------------*/

  SW0ZS26(); /* update 'u' dstloc.vplnsy01*/

   /* ----------------------------------------------------*/
   /* select dstloc.vplnlc01 using "new" product/wo*/
   /* ----------------------------------------------------*/

  SW0ZS28(); /* select 'sa' dstloc.vplnlc01 new*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SWHREC.SWHCRTUN = SWHREC.SWHCRTUN + SW0ZW02.SW0ZWTPR[SW0ZWIDX];

    SW0ZS17(); /* 'u' dstloc.vplnlc01 new*/

  else

    SW0ZS22(); /* 's' dstloc.vplnlc01 cur*/

    SW0ZS34(); /* 'a' dstloc.vplnlc01 new*/

  end

  SW0ZW00.SW0ZWNWO = SWHREC.SL8WONBR;

  SW0Z651(); /* upd/add all sizes*/
end // end SW0Z650

// upd/add 'new' sizes
Function SW0Z651()
   /* ---------------------------------------------------------*/
    /* upd/add new sizes*/
   /* ---------------------------------------------------------*/

  SW0ZS50(); /* 's9' dstloc.vrlitm01*/

  SW0ZS51(); /* 'n9' dstloc.vrlitm01*/

  while (SQLCA.VAGen_SQLCODE == 0) /* more vrlitm01's*/

    SW0ZS16(); /* 's' dstloc.vplnsz01 new*/

    if (SQLCA.VAGen_SQLCODE == 0)

      SW0ZS29(); /* 'u' dstloc.vplnsz01 new*/

    else

      SW0ZS30(); /* 'a' dstloc.vplnsz01 new*/

    end

    if (SW0ZW00.SL8WONBR != SW0ZW00.SW0ZWNWO
     && SW0ZW00.SL8WONBR != 0)

      SW0ZS62(); /* 's' dstloc.vwopit01 new*/

      if (SQLCA.VAGen_SQLCODE == 0)

        SW0ZS63(); /* 'u' dstloc.vwopit01 new*/

      else

        SW0ZS64(); /* 'a' dstloc.vwopit01 new*/

      end

    end

    SW0ZS31(); /* 's' dstloc.vrlitm01 new*/

    if (SQLCA.VAGen_SQLCODE == 0)

      SW0ZS39(); /* 'u' dstloc.vrlitm01 new*/

    else

      SW0ZS58(); /* 'd' dstloc.vrlitm01 cur*/
      SW0ZS59(); /* 'a' dstloc.vrlitm01 new*/

    end

    SW0ZS51(); /* n9 dstloc.vrlitm01*/

  end

  SW0ZS52(); /* c9 dstloc.vrlitm01*/

end // end SW0Z651

// reuse old prod seq nbr
Function SW0Z660()

   /* ----------------------------------------------------*/
   /* reuse the old prod seq nbr*/
   /* ----------------------------------------------------*/

  SW0ZW00.SW0ZWDPP = "N"; /* set the delete flag off*/
  SW0ZW00.SW0ZWDLC = "N"; /* set the delete flag off*/


  SW0ZS20(); /* sel 's' dstloc.vplnsy01 cur*/

  SW0ZS32(); /* add 'a' dstloc.vihsy001*/

  SW0ZS40(); /* add 'd' dstloc.vplnsy01 cur*/

   /* ----------------------------------------------------*/
   /* add dstloc.vplnsy01 using "new" data*/
   /* ----------------------------------------------------*/

  SW0ZS33(); /* add 'a' dstloc.vplnsy01*/

   /* ----------------------------------------------------*/
   /* if plan/container/po row does not exist, add it*/
   /* ----------------------------------------------------*/

  if (SW0ZW01.PC3PONBR != SW0ZW01.SW0ZWPON) /* po has changed*/

    SW0ZS61(); /* 's' dstloc.vplcpo01 new*/

    if (SQLCA.VAGen_SQLCODE != 0)

      SW0ZS15(); /* 's' dstloc.vplcpo01 cur*/

      if (SQLCA.VAGen_SQLCODE == 0)

        SW0ZS60(); /* 'a' dstloc.vplcpo01 new/cur*/
      else
         /* this is hopefully not a valid condition*/

      end
    end

  end

   /* ----------------------------------------------------*/
   /* if the po nbr changes, delete and add vplnlc01*/
   /* ----------------------------------------------------*/

  if (SW0ZW01.SW0ZWPON != SW0ZW01.PC3PONBR)

    SW0ZS22(); /* 's' dstloc.vplnlc01 cur*/

    SW0ZS41(); /* 'd' dstloc.vplnlc01 cur*/

    SW0ZS34(); /* 'a' dstloc.vplnlc01 new*/

  end

  SW0ZW00.SW0ZWNWO = SWHREC.SL8WONBR;

   /* ----------------------------------------------------*/
   /* dont do anything to dstloc.vplnsz01*/
   /* because prod seq number does not change*/
   /* ----------------------------------------------------*/

   /* ----------------------------------------------------*/
   /* process sizes only for rlitms*/
   /* ----------------------------------------------------*/

  SW0Z661(); /* process rlitms*/

end // end SW0Z660

// process rlitms
Function SW0Z661()
   /* ---------------------------------------------------------*/
    /* process rlitm's*/
   /* ---------------------------------------------------------*/

  SW0ZS50(); /* 's9' dstloc.vrlitm01*/

  SW0ZS51(); /* 'n9' dstloc.vrlitm01*/

  while (SQLCA.VAGen_SQLCODE == 0) /* more vrlitm01's*/

    SW0ZS31(); /* 's' dstloc.vrlitm01 new*/

    if (SQLCA.VAGen_SQLCODE == 0)

      SW0ZS39(); /* 'u' dstloc.vrlitm01 new*/

    else

      SW0ZS58(); /* 'd' dstloc.vrlitm01 cur*/
      SW0ZS59(); /* 'a' dstloc.vrlitm01 new*/

    end

    SW0ZS51(); /* n9 dstloc.vrlitm01*/

  end

  SW0ZS52(); /* c9 dstloc.vrlitm01*/

end // end SW0Z661

// add 'new' product information
Function SW0Z670()

   /* ----------------------------------------------------*/
   /* add 'new' product info*/
   /* ----------------------------------------------------*/

  SW0ZS20(); /* sel 's' dstloc.vplnsy01 cur*/

  SW0ZS19(); /* sel 'g7' dstloc.vslctl01*/
  SW0ZW00.SW0ZWNPS = SL3REC.SL3NXPSN;

   /* ----------------------------------------------------*/
   /* add dstloc.vplnsy01 using "new" data*/
   /* ----------------------------------------------------*/

  SW0ZS33(); /* add 'a' dstloc.vplnsy01*/

   /* ----------------------------------------------------*/
   /* if plan/container/po row does not exist, add it*/
   /* ----------------------------------------------------*/

  if (SW0ZW01.PC3PONBR != SW0ZW01.SW0ZWPON) /* po has changed*/

    SW0ZS61(); /* 's' dstloc.vplcpo01 new*/

    if (SQLCA.VAGen_SQLCODE != 0)

      SW0ZS15(); /* 's' dstloc.vplcpo01 cur*/

      if (SQLCA.VAGen_SQLCODE == 0)

        SW0ZS60(); /* 'a' dstloc.vplcpo01 new/cur*/
      else
         /* this is hopefully not a valid condition*/

      end
    end

  end

   /* ----------------------------------------------------*/
   /* add dstloc.vplnlc01 using "new" data*/
   /* ----------------------------------------------------*/

  SW0ZS22(); /* 's' dstloc.vplnlc01 curr*/

  SW0ZS34(); /* add 'a' dstloc.vplnlc01 new*/

  SW0ZW00.SW0ZWNWO = SWHREC.SL8WONBR;

   /* ----------------------------------------------------*/
   /* add all sizes using "new" data*/
   /* ----------------------------------------------------*/

  SW0Z671(); /* add all sizes*/

   /* ----------------------------------------------------*/
   /* if the dstloc.vplnsy01 "current" data has been*/
   /* flaged for deletion,*/
   /* move all existing tasks from the "current"*/
   /* product to the "new" product.*/
   /* ----------------------------------------------------*/

  if (SW0ZW00.SW0ZWDPP == "Y")

    SW0ZS35(); /* sel 's1' dstloc.vplnta01*/

    SW0ZS36(); /* fetch 'n1' dstloc.vplnta01*/

    while (SQLCA.VAGen_SQLCODE == 0)

      SW0ZS38(); /* add 'a' dstloc.vplnta01*/

      SW0ZS36(); /* fetch 'n1' dstloc.plnta01*/

    end

    SW0ZS37(); /* close 'c1' dstloc.plnta01*/

  end


end // end SW0Z670

// add all new sizes
Function SW0Z671()

  SW0ZS50(); /* s9 dstloc.vrlitm01*/

  SW0ZS51(); /* n9 dstloc.vrlitm01*/

  while (SQLCA.VAGen_SQLCODE == 0) /* more vrlitm01's*/

    SW0ZS30(); /* 'a' dstloc.vplnsz01 new*/

    SW0ZS31(); /* 's' dstloc.vrlitm01 new*/

    if (SQLCA.VAGen_SQLCODE == 0)

      SW0ZS39(); /* 'u' dstloc.vrlitm01 new*/

    else

      SW0ZS58(); /* 'd' dstloc.vrlitm01 cur*/
      SW0ZS59(); /* 'a' dstloc.vrlitm01 new*/

    end

    SW0ZS51(); /* n9 dstloc.vrlitm01*/

  end

  SW0ZS52(); /* c9 dstloc.vrlitm01*/

end // end SW0Z671

// delete 'current' product info.
Function SW0Z680()

  if (SW0ZW00.SW0ZWDPP == "Y" /* delete product info*/
   && SW0ZW00.SW0ZWNPS != SW0ZW00.SWGPSEQN) /* already deleted it*/

    SW0ZS40(); /* del 'd' dstloc.vplnsy01*/

  end

   /* ----------------------------------------------------------*/
   /* only delete the vplnlc01 if the po number or the prod seq*/
   /* nbr has changed*/
   /* ----------------------------------------------------------*/

  if (SW0ZW01.PC3PONBR != SW0ZW01.SW0ZWPON
   || SW0ZW00.SWGPSEQN != SW0ZW00.SW0ZWNPS)
    SW0ZS41(); /* del 'd' dstloc.vplnlc01*/
  end

  SW0ZS42(); /* del all dstloc.vplnsz01 rows*/

  SW0ZS43(); /* del 'd' dstloc.vplnta01*/

  if (SW0ZW00.SW0ZWDPP == "Y") /* delete product info*/

    SW0ZS44(); /* sel 's1' dstloc.vplnsy01*/

    SW0ZS45(); /* fetch 'n1' dstloc.vplnsy01*/

    if (SQLCA.VAGen_SQLCODE != 0)
      SW0ZS47(); /* delete 'd' dstloc.vplcpo01*/
    end

    SW0ZS46(); /* close 'c1' dstloc.vplnsy01*/

  end

end // end SW0Z680

// Format/submit print request
Function SW0Z690()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/
  set SW0ZW05 empty; /* parm work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0ZT01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      SW0ZW05.XWHCD = SW0ZW01.XWHCD;
         /* MOVE sw0zW00.PKDNCSQN TO sw0zW05.sw0zWCSN;*/
         /* MOVE sw0zW01.sw0zMPGN TO sw0zW05.sw0zMPGN;*/

      TA6REC.TARJCL[TA6INDEX] = SW0ZW05.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0ZT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0ZT01.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0ZT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Report is currently not available.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "690";
  SLWREC.SLWMSGNO = 20;
  return;

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.XURDEST = SW0ZW01.XROPDEST;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Print Request Subroutine*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "690"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SW0Z690

// purge temporary storage
Function SW0ZS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0ZW02 empty; /* m001 temporary storage detail*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0ZW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0ZW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS01

// select 's' dstloc.vrlhdr01 row
Function SW0ZS02()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlhdr01 table row*/
   /* ------------------------------------------------------------*/

  set SLVREC empty; /* Clear row storage area*/
  SLVREC.SLVFNC = "S "; /* function*/

  set SL1REC empty; /* Clear row storage area*/
  SL1REC.XWHCD = SW0ZW01.XWHCD;
  SL1REC.TS3CNTNR = SW0ZW01.TSHCNTNR;

  try
    call "IO1570" (SLVREC, SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL1REC.SL1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS02

// select 's9' dstloc.vrlitm01
Function SW0ZS03()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "S9"; /* function*/

  set SL2REC empty; /* Clear row storage area*/

  SL2REC.XWHCD = SW0ZW01.XWHCD;
  SL2REC.TS3CNTNR = SW0ZW01.TSHCNTNR;
  SL2REC.PC3PONBR = SW0ZW01.PC3PONBR;
  SL2REC.PKDNCSQN = -1;
  SL2REC.XGPCD = SW0ZW01.XGPCD;
  SL2REC.SY1STNBR = SW0ZW01.SY1STNBR;
  SL2REC.SY2CLRID = SW0ZW01.SY2CLRID;
  SL2REC.XDMCD = SW0ZW01.XDMCD;
  SL2REC.XQACD = SW0ZW01.XQACD;
  SL2REC.XOWCD = "*";
  SL2REC.XUMCD = "*";
  SL2REC.PC2INSEG = "*";
  SL2REC.XEGCD = "*";
  SL2REC.XPGCD = "*";
  SL2REC.XSLCD = "*";
  SL2REC.SL2PALET = "*";
  SL2REC.SL2CASE = "*";

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S5 SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS03

// fetch 'n9' dstloc.vrlitm01
Function SW0ZS04()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "N9"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS04

// close 'c9' dstloc.vrlitm01
Function SW0ZS05()
   /* ------------------------------------------------------------*/
   /* close dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "C9"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  SLWREC.XXXLOCID = "S05";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C5 VRLITM01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS05

// add temporary storage
Function SW0ZS06()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0ZW02.XXXTSLEN = SW0ZW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0ZW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0ZW02 empty; /* m001 display storage*/

    SW0ZW00.SW0ZWIDX = 1; /* Display line index*/

    SW0ZW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S06"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS06

// select 's ' dprod.vcolor02 row
Function SW0ZS07()
   /* ------------------------------------------------------------*/
   /* Select dprod.vcolor02 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS07

// read temporary storage
Function SW0ZS08()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SW0ZW02.XXXTSLEN = SW0ZW00.XXXTSLEN;
  TA5REC.TA5TSQIX = SW0ZW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0ZW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S08"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS08

// update temporary storage
Function SW0ZS09()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SW0ZW02.XXXTSLEN = SW0ZW00.XXXTSLEN;
  TA5REC.TA5TSQIX = SW0ZW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0ZW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S09"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPD PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS09

// sel 's ' dprodc.vprdcu01 row
Function SW0ZS10()
   /* ------------------------------------------------------------*/
   /* Select dprodc.vprdcu01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS10

// select 's' dprodc.vpohdr01 row
Function SW0ZS11()
   /* ------------------------------------------------------------*/
   /* Select dprodc.vpohdr01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS11

// select 's' dinvnt.vashdr01 row
Function SW0ZS12()
   /* ------------------------------------------------------------*/
   /* Select dinvnt.vashdr01 table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO0940" ("S ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS12

// select 's' dstloc.vplnsz01 cur
Function SW0ZS13()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vplnsz01 using current product key*/
   /* ------------------------------------------------------------*/

  set SWNREC empty;

  SWNREC.XWHCD = SW0ZW01.XWHCD;
  SWNREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWNREC.SWGPSEQN = SWHREC.SWGPSEQN; /* from vplnlc01*/
  SWNREC.SWCLNENB = SWHREC.SWCLNENB; /* from vplnlc01*/
  SWNREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];
  SWNREC.SY5SZID = SL2REC.SY5SZID; /* from vrlitm01*/

  try
    call "IO5380" ("S ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS13

// del 'd' dstloc.vplnsz01 cur
Function SW0ZS14()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnsz01 table row using current key*/
   /* ------------------------------------------------------------*/

  try
    call "IO5380" ("D ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS14

// select 's' dstloc.vplcpo01 cur
Function SW0ZS15()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vplcpo01 table row using current product*/
   /* ------------------------------------------------------------*/

  set SWFREC empty;

  SWFREC.XWHCD = SW0ZW01.XWHCD;
  SWFREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWFREC.TSHCNTNR = SW0ZW01.TSHCNTNR;
  SWFREC.XGPCD = SW0ZW01.XGPCD;
  SWFREC.PC3PONBR = SW0ZW01.PC3PONBR;

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS15

// select 's' dstloc.vplnsz01 new
Function SW0ZS16()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vplnsz01 using new product key*/
   /* ------------------------------------------------------------*/

  set SWNREC empty;

  SWNREC.XWHCD = SW0ZW01.XWHCD;
  SWNREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWNREC.SWGPSEQN = SWHREC.SWGPSEQN; /* from vplnlc01*/
  SWNREC.SWCLNENB = SWHREC.SWCLNENB; /* from vplnlc01*/
  SWNREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];
  SWNREC.SY5SZID = SL2REC.SY5SZID; /* from vrlitm01*/

  try
    call "IO5380" ("S ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS16

// upd 'u' dstloc.vplnlc01 cur
Function SW0ZS17()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vplnlc01 table row using 'new' product key*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* total was previously calculated and only changed field*/
   /* ------------------------------------------------------------*/

  SWHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5360" ("U ", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0ZW00.SW0ZWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S17"; /* Module identification*/
      SLWREC.SLWMSGNO = 32; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VPLNLC01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS17

// get next prd seq nbr
Function SW0ZS19()
   /* ------------------------------------------------------------*/
   /* obtain next prod seq nbr dstloc.vslctl01*/
   /* ------------------------------------------------------------*/

  set SL3REC empty; /* Clear row storage area*/

  SL3REC.XWHCD = SW0ZW01.XWHCD;
  SL3REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL3REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO1500" ("G7", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VSLCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSLCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0ZS19

// select 'sa' vplnsy01 cur
Function SW0ZS20()

   /* ------------------------------------------------------------*/
   /* Select 's' dstloc.vplnsy01 using current key.*/
   /* ------------------------------------------------------------*/
  set SWGREC empty;

  SWGREC.XWHCD = SW0ZW01.XWHCD;
  SWGREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWGREC.TSHCNTNR = SW0ZW01.TSHCNTNR;
  SWGREC.XGPCD = SW0ZW01.XGPCD;
  SWGREC.PC3PONBR = SW0ZW01.PC3PONBR;
  SWGREC.SY1STNBR = SW0ZW01.SY1STNBR;
  SWGREC.SY2CLRID = SW0ZW01.SY2CLRID;
  SWGREC.XDMCD = SW0ZW01.XDMCD;
  SWGREC.XQACD = SW0ZW01.XQACD;
  SWGREC.XOWCD = SW0ZW02.XOWCD[SW0ZWIDX];
  SWGREC.PC2INSEG = SW0ZW02.PC2INSEG[SW0ZWIDX];
  SWGREC.XEGCD = SW0ZW02.XEGCD[SW0ZWIDX];
  SWGREC.XPGCD = SW0ZW02.XPGCD[SW0ZWIDX];
  SWGREC.XUMCD = SW0ZW02.XUMCD[SW0ZWIDX];
  SWGREC.XSLCD = SW0ZW02.XSLCD[SW0ZWIDX];

  try
    call "IO5370" ("SA", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select r*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return;

    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    SW0ZM001.XXXLOCID = "S20";
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    SW0ZM001.XXXLOCID = "S20";
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  SW0ZM001.XXXLOCID = "S20";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0ZS20"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0ZS20

// upd 'u' dstloc.vplnsy01 cur
Function SW0ZS21()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vplnsy01 table rowusing 'current' product key*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* totals are calcusated in sw0z640*/
   /* ------------------------------------------------------------*/

  SWGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5370" ("U ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0ZW00.SW0ZWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S21"; /* Module identification*/
      SLWREC.SLWMSGNO = 32; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VPLNSY01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS21

// select 's' vplnlc01 cur
Function SW0ZS22()

   /* ------------------------------------------------------------*/
   /* Select 's' dstloc.vplncl01 using current key.*/
   /* ------------------------------------------------------------*/
  set SWHREC empty;

  SWHREC.XWHCD = SW0ZW01.XWHCD;
  SWHREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWHREC.TSHCNTNR = SW0ZW01.TSHCNTNR;
  SWHREC.XGPCD = SW0ZW01.XGPCD;
  SWHREC.PC3PONBR = SW0ZW01.PC3PONBR;
  SWHREC.SWGPSEQN = SW0ZW00.SWGPSEQN;
  SW0ZW00.SW0ZWLOC = SW0ZW02.SL5LOCTN[SW0ZWIDX];
  SWHREC.SWCLNENB = SW0ZW00.SW0ZWLNN;
  SWHREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];

  try
    call "IO5360" ("S ", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  SW0ZW00.SL8WONBR = SWHREC.SL8WONBR;

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return;

    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    SW0ZM001.XXXLOCID = "S22";
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    SW0ZM001.XXXLOCID = "S22";
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  SW0ZM001.XXXLOCID = "S22";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0ZS22"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0ZS22

// upd 'u' dstloc.vplnsz01 cur
Function SW0ZS24()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vplnsz01 table usiing 'current' key*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* total was already calculated*/
   /* ------------------------------------------------------------*/

  SWNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5380" ("U ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0ZW00.SW0ZWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S24"; /* Module identification*/
      SLWREC.SLWMSGNO = 32; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VPLNSZ01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS24

// select 's' dstloc.vplnsy01 new
Function SW0ZS25()
   /* ------------------------------------------------------------*/
   /* Sel 'SA' dstloc.vplnsy01 using "new" product key*/
   /* ------------------------------------------------------------*/

  set SWGREC empty;

  SWGREC.XWHCD = SW0ZW01.XWHCD;
  SWGREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWGREC.TSHCNTNR = SW0ZW01.TSHCNTNR;
  SWGREC.XGPCD = SW0ZW01.XGPCD;
  SWGREC.PC3PONBR = SW0ZW01.SW0ZWPON;
  SWGREC.SY1STNBR = SW0ZW01.SW0ZWSTY;
  SWGREC.SY2CLRID = SW0ZW01.SW0ZWCLR;
  SWGREC.XDMCD = SW0ZW01.SW0ZWDIM;
  SWGREC.XQACD = SW0ZW01.SW0ZWXQA;

  if (SW0ZW02.SW0ZWOWN[SW0ZWIDX] > " ")
    SWGREC.XOWCD = SW0ZW02.SW0ZWOWN[SW0ZWIDX];
  else
    SWGREC.XOWCD = SW0ZW02.XOWCD[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSEG[SW0ZWIDX] > " ")
    SWGREC.PC2INSEG = SW0ZW02.SW0ZWSEG[SW0ZWIDX];
  else
    SWGREC.PC2INSEG = SW0ZW02.PC2INSEG[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWEDF[SW0ZWIDX] > " ")
    SWGREC.XEGCD = SW0ZW02.SW0ZWEDF[SW0ZWIDX];
  else
    SWGREC.XEGCD = SW0ZW02.XEGCD[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWPKG[SW0ZWIDX] > " ")
    SWGREC.XPGCD = SW0ZW02.SW0ZWPKG[SW0ZWIDX];
  else
    SWGREC.XPGCD = SW0ZW02.XPGCD[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWUOM[SW0ZWIDX] > " ")
    SWGREC.XUMCD = SW0ZW02.SW0ZWUOM[SW0ZWIDX];
  else
    SWGREC.XUMCD = SW0ZW02.XUMCD[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSLC[SW0ZWIDX] > " ")
    SWGREC.XSLCD = SW0ZW02.SW0ZWSLC[SW0ZWIDX];
  else
    SWGREC.XSLCD = SW0ZW02.XSLCD[SW0ZWIDX];
  end

  try
    call "IO5370" ("SA", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS25

// upd 'u' dstloc.vplnsy01 new
Function SW0ZS26()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vplnsy01 table using new totals*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* totals should have been previously calculated*/
   /* ------------------------------------------------------------*/

  SWGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5370" ("U ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0ZW00.SW0ZWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S26"; /* Module identification*/
      SLWREC.SLWMSGNO = 32; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VPLNSY01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS26

// select 'sa' vplnlc01 new
Function SW0ZS28()

   /* ------------------------------------------------------------*/
   /* Select 'sa' dstloc.vplncl01 using new key.*/
   /* ------------------------------------------------------------*/
  set SWHREC empty;

  SWHREC.XWHCD = SW0ZW01.XWHCD;
  SWHREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWHREC.TSHCNTNR = SW0ZW01.TSHCNTNR;
  SWHREC.XGPCD = SW0ZW01.XGPCD;
  SWHREC.PC3PONBR = SW0ZW01.SW0ZWPON;
  SWHREC.SWGPSEQN = SW0ZW00.SW0ZWNPS; /* from vplnsy01*/
  SWHREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];

  try
    call "IO5360" ("SA", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return;

    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(31); /* Indicate not available*/
    SW0ZM001.XXXLOCID = "S28";
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Indicate system error*/
    SW0ZM001.XXXLOCID = "S28";
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  SW0ZM001.XXXLOCID = "S28";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "SW0ZS28"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


end // end SW0ZS28

// upd 'u' dstloc.vplnsz01 new
Function SW0ZS29()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vplnsz01 table using new product*/
   /* ------------------------------------------------------------*/

  SWNREC.SWNSZUN = SWNREC.SWNSZUN + SL2REC.SL2RCVD;

  SWNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5380" ("U ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end


  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S29"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VPLNSZ01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS29

// add 'a' dstloc.vplnsz01 new
Function SW0ZS30()
   /* ------------------------------------------------------------*/
   /* add dstloc.vplnsz01 table using new product*/
   /* ------------------------------------------------------------*/

  set SWNREC empty;

  SWNREC.XWHCD = SW0ZW01.XWHCD;
  SWNREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWNREC.SWGPSEQN = SWHREC.SWGPSEQN;
  SWNREC.SWCLNENB = SWHREC.SWCLNENB;
  SWNREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];
  SWNREC.TSOCRTNB = SWHREC.TSOCRTNB;
  SWNREC.SY5SZID = SL2REC.SY5SZID;
  SWNREC.SWNSZUN = SL2REC.SL2RCVD;

  SWNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  SWNREC.ZZZCHGCT = 0;

  try
    call "IO5380" ("A ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VPLNSZ01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS30

// 's' dstloc.vrlitm01 new
Function SW0ZS31()
   /* ------------------------------------------------------------*/
   /* 'S' dstloc.vrlitm01 using new key*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* current dstloc.vrlitm01 is in io area*/
   /* so only have to move new key fields in.*/
   /* ------------------------------------------------------------*/

  SL2REC.PC3PONBR = SW0ZW01.SW0ZWPON;
  SL2REC.SY1STNBR = SW0ZW01.SW0ZWSTY;
  SL2REC.SY2CLRID = SW0ZW01.SW0ZWCLR;
  SL2REC.XDMCD = SW0ZW01.SW0ZWDIM;
  SL2REC.XQACD = SW0ZW01.SW0ZWXQA;

  if (SW0ZW02.SW0ZWOWN[SW0ZWIDX] > " ")
    SL2REC.XOWCD = SW0ZW02.SW0ZWOWN[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSEG[SW0ZWIDX] > " ")
    SL2REC.PC2INSEG = SW0ZW02.SW0ZWSEG[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWEDF[SW0ZWIDX] > " ")
    SL2REC.XEGCD = SW0ZW02.SW0ZWEDF[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWPKG[SW0ZWIDX] > " ")
    SL2REC.XPGCD = SW0ZW02.SW0ZWPKG[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWUOM[SW0ZWIDX] > " ")
    SL2REC.XUMCD = SW0ZW02.SW0ZWUOM[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSLC[SW0ZWIDX] > " ")
    SL2REC.XSLCD = SW0ZW02.SW0ZWSLC[SW0ZWIDX];
  end

  SLSREC.SLSFNC = "SB"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S            ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS31

// add 'a' dstloc.vihsy001 new
Function SW0ZS32()
   /* ------------------------------------------------------------*/
   /* add dstloc.vihsy001 table row using 'current' data*/
   /* ------------------------------------------------------------*/

  set SWJREC empty;

  SWJREC.XWHCD = SWGREC.XWHCD;
  SWJREC.XGPCD = SWGREC.XGPCD;
  SWJREC.TSHCNTNR = SWGREC.TSHCNTNR;
  SWJREC.PC3PONBR = SWGREC.PC3PONBR;
  SWJREC.PC3POIDT = SL2REC.PC3POIDT;
  SWJREC.PCFSECD = SL2REC.PCFSECD;
  SWJREC.FY1FCTYC = SL2REC.FY1FCTYC;
  SWJREC.PC4ORTYP = SL2REC.PC4ORTYP;
  SWJREC.SY1STNBR = SWGREC.SY1STNBR;
  SWJREC.SY2CLRID = SWGREC.SY2CLRID;
  SWJREC.XDMCD = SWGREC.XDMCD;
  SWJREC.XQACD = SWGREC.XQACD;
  SWJREC.XOWCD = SWGREC.XOWCD;
  SWJREC.PC2INSEG = SWGREC.PC2INSEG;
  SWJREC.XEGCD = SWGREC.XEGCD;
  SWJREC.XPGCD = SWGREC.XPGCD;
  SWJREC.XUMCD = SWGREC.XUMCD;
  SWJREC.XSLCD = SWGREC.XSLCD;
  SWJREC.SWGPSEQN = SWGREC.SWGPSEQN;
  SWJREC.SWGPRDCS = SWGREC.SWGPRDCS;
  SWJREC.SWGPRDUN = SWGREC.SWGPRDUN;
  SWJREC.SWGINCS1 = SWGREC.SWGINCS1;
  SWJREC.SWGINMM1 = SWGREC.SWGINMM1;
  SWJREC.SWGINCS2 = SWGREC.SWGINCS2;
  SWJREC.SWGINMM2 = SWGREC.SWGINMM2;

  SWJREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SWJREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

  try
    call "IO5280" ("A ", SQLCA, SWJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S32"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIHSY001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS32

// add 'a' dstloc.vplnsy01 new
Function SW0ZS33()
   /* ------------------------------------------------------------*/
   /* add dstloc.vplnsy01 table row using 'new' key*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* current current row is in the io area*/
   /* so only have to move in changed values.*/
   /* ------------------------------------------------------------*/

  SWGREC.SWGPSEQN = SW0ZW00.SW0ZWNPS;

  SWGREC.PC3PONBR = SW0ZW01.SW0ZWPON;
  SWGREC.SY1STNBR = SW0ZW01.SW0ZWSTY;
  SWGREC.SY2CLRID = SW0ZW01.SW0ZWCLR;
  SWGREC.XDMCD = SW0ZW01.SW0ZWDIM;
  SWGREC.XQACD = SW0ZW01.SW0ZWXQA;

  if (SW0ZW02.SW0ZWOWN[SW0ZWIDX] > " ")
    SWGREC.XOWCD = SW0ZW02.SW0ZWOWN[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSEG[SW0ZWIDX] > " ")
    SWGREC.PC2INSEG = SW0ZW02.SW0ZWSEG[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWEDF[SW0ZWIDX] > " ")
    SWGREC.XEGCD = SW0ZW02.SW0ZWEDF[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWPKG[SW0ZWIDX] > " ")
    SWGREC.XPGCD = SW0ZW02.SW0ZWPKG[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWUOM[SW0ZWIDX] > " ")
    SWGREC.XUMCD = SW0ZW02.SW0ZWUOM[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSLC[SW0ZWIDX] > " ")
    SWGREC.XSLCD = SW0ZW02.SW0ZWSLC[SW0ZWIDX];
  end

  SWGREC.SWGPRDUN = SW0ZW02.SW0ZWTPR[SW0ZWIDX];
  SWGREC.SWGPRDCS = 1;

  if (SW0ZW02.SL2PALET[SW0ZWIDX] > " ")
    SWGREC.SWGPRDPL = 1;
  else
    SWGREC.SWGPRDPL = 0;
  end

  try
    call "IO5370" ("A ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S33"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS33

// add 'a' dstloc.vplnlc01 new
Function SW0ZS34()
   /* ------------------------------------------------------------*/
   /* add dstloc.vplnlc01 table row using 'new' key*/
   /* ------------------------------------------------------------*/

  SWHREC.PC3PONBR = SW0ZW01.SW0ZWPON;
  SWHREC.SWGPSEQN = SW0ZW00.SW0ZWNPS;
  SWHREC.SWHCRTUN = SW0ZW02.SW0ZWTPR[SW0ZWIDX];

  SWHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SWHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  SWHREC.ZZZCHGCT = 0; /* change count*/

  try
    call "IO5360" ("A ", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS34

// select 's1' dstloc.vplnta01
Function SW0ZS35()
   /* ------------------------------------------------------------*/
   /* select set dstloc.vplnta01*/
   /* ------------------------------------------------------------*/

  set SWIREC empty;

  SWIREC.XWHCD = SW0ZW01.XWHCD;
  SWIREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWIREC.SWGPSEQN = SW0ZW00.SWGPSEQN;
  SWIREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];
  SWIREC.SWCLNENB = SW0ZW00.SW0ZWLNN;
  SWIREC.SWYTACD = -1;

  try
    call "IO5390" ("S1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S35"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 TABLE DSTLOC.VPLNTA01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS35

// select 'n1' dstloc.vplnta01
Function SW0ZS36()

   /* ------------------------------------------------------------*/
   /* fetch set dstloc.vplnta01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("N1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S36"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT N1 TABLE DSTLOC.VPLNTA01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS36

// close 'c1' dstloc.vplnta01
Function SW0ZS37()
   /* ------------------------------------------------------------*/
   /* close dstloc.vplnta01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5390" ("C1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  SLWREC.XXXLOCID = "S37";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DSTLOC.VPLNTA01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS37

// add 'a' dstloc.vplnta01 new
Function SW0ZS38()
   /* ------------------------------------------------------------*/
   /* add dstloc.vplnta01 table row using 'new' key*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* current row is in io area*/
   /* ------------------------------------------------------------*/

  SWIREC.SWGPSEQN = SW0ZW00.SW0ZWNPS;

  try
    call "IO5390" ("A ", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S38"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS38

// upd 'u' dstloc.vrlitm01 new
Function SW0ZS39()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vrlitm01 table row using 'new' product key*/
   /* ------------------------------------------------------------*/

   /* REC.SL2RCVD = SL2REC.SL2RCVD + SW0ZW02.SL2RCVD(SW0ZWIDX);*/

  if (SW0ZW02.SW0ZWSAS[SW0ZWIDX] != SW0ZW02.INASAID[SW0ZWIDX])
    SL2REC.INASAID = SW0ZW02.SW0ZWSAS[SW0ZWIDX];
  end

  SL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO1580" ("U ", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0ZW00.SW0ZWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S39"; /* Module identification*/
      SLWREC.SLWMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S39"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VRLITM01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS39

// del 'd' dstloc.vplnsy01 cur
Function SW0ZS40()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnsy01 table row using current*/
   /* ------------------------------------------------------------*/

  SWGREC.XWHCD = SW0ZW01.XWHCD;
  SWGREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWGREC.SWGPSEQN = SW0ZW00.SWGPSEQN;

  try
    call "IO5370" ("D ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS40

// del 'd' dstloc.vplnlc01 cur
Function SW0ZS41()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplnlc01 table row using current*/
   /* ------------------------------------------------------------*/

  SWHREC.XWHCD = SW0ZW01.XWHCD;
  SWHREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWHREC.TSHCNTNR = SW0ZW01.TSHCNTNR;
  SWHREC.XGPCD = SW0ZW01.XGPCD;
  SWHREC.PC3PONBR = SW0ZW01.PC3PONBR;
  SWHREC.SWGPSEQN = SW0ZW00.SWGPSEQN;
  SW0ZW00.SW0ZWLOC = SW0ZW02.SL5LOCTN[SW0ZWIDX];
  SWHREC.SWCLNENB = SW0ZW00.SW0ZWLNN;
  SWHREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];

  try
    call "IO5360" ("D ", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS41

// del 'd' dstloc.vplnsz01 cur
Function SW0ZS42()
   /* ------------------------------------------------------------*/
   /* delete all dstloc.vplnsz01 rows using current key*/
   /* ------------------------------------------------------------*/

  set SWNREC empty;

  SWNREC.XWHCD = SW0ZW01.XWHCD;
  SWNREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWNREC.SWGPSEQN = SW0ZW00.SWGPSEQN;
  SWNREC.SWCLNENB = SWHREC.SWCLNENB;
  SWNREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];


   /* ------------------------------------------------------------*/
   /* a current row will be in io area*/
   /* ------------------------------------------------------------*/

  try
    call "IO5380" ("D1", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS42

// del 'd' dstloc.vplnta01 cur
Function SW0ZS43()
   /* ------------------------------------------------------------*/
   /* del all dstloc.vplnta01 table rows using current key*/
   /* ------------------------------------------------------------*/

  SWIREC.XWHCD = SW0ZW01.XWHCD;
  SWIREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWIREC.SWGPSEQN = SWHREC.SWGPSEQN;
  SWIREC.SWCLNENB = SWHREC.SWCLNENB;
  SWIREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];

  try
    call "IO5390" ("D1", SQLCA, SWIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* this is ok here*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNTA01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS43

// 's1' dstloc.vplnsy01 cur
Function SW0ZS44()

   /* ------------------------------------------------------------*/
   /* select set dstloc.vplnsy01*/
   /* ------------------------------------------------------------*/

  SWGREC.XWHCD = SW0ZW01.XWHCD;
  SWGREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWGREC.TSHCNTNR = SW0ZW01.TSHCNTNR;
  SWGREC.XGPCD = SW0ZW01.XGPCD;
  SWGREC.PC3PONBR = SW0ZW01.PC3PONBR;


  try
    call "IO5370" ("S1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S44"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 TABLE DSTLOC.VPLNSY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS44

// fetch 'n1' dstloc.vplnsy01
Function SW0ZS45()

   /* ------------------------------------------------------------*/
   /* fetch set dstloc.vplnsy01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("N1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S45"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT N1 TABLE DSTLOC.VPLNSY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS45

// close 'c1' dstloc.vplnsy01
Function SW0ZS46()
   /* ------------------------------------------------------------*/
   /* close dstloc.vplnsy01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5370" ("C1", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  converseLib.validationFailed(1);

  SLWREC.XXXLOCID = "S46";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DSTLOC.VPLNSY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS46

// del 'd' dstloc.vplcpo01 cur
Function SW0ZS47()
   /* ------------------------------------------------------------*/
   /* del dstloc.vplcpo01 table row using current key*/
   /* ------------------------------------------------------------*/

  set SWFREC empty;

  SWFREC.XWHCD = SW0ZW01.XWHCD;
  SWFREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWFREC.TSHCNTNR = SW0ZW01.TSHCNTNR;
  SWFREC.XGPCD = SW0ZW01.XGPCD;
  SWFREC.PC3PONBR = SW0ZW01.PC3PONBR;

  try
    call "IO5340" ("D ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S47"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS47

// 's9' dstloc.vrlitm01 current
Function SW0ZS50()
   /* ------------------------------------------------------------*/
   /* 'S9' dstloc.vrlitm01 using current key*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "S9"; /* function*/

  set SL2REC empty; /* Clear row storage area*/

  SL2REC.XWHCD = SW0ZW01.XWHCD;
  SL2REC.TS3CNTNR = SW0ZW01.TSHCNTNR;
  SL2REC.PC3PONBR = SW0ZW01.PC3PONBR;
  SL2REC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];
  SL2REC.XGPCD = SW0ZW01.XGPCD;
  SL2REC.SY1STNBR = SW0ZW01.SY1STNBR;
  SL2REC.SY2CLRID = SW0ZW01.SY2CLRID;
  SL2REC.XDMCD = SW0ZW01.XDMCD;
  SL2REC.XQACD = SW0ZW01.XQACD;
  SL2REC.XOWCD = SW0ZW02.XOWCD[SW0ZWIDX];
  SL2REC.XUMCD = SW0ZW02.XUMCD[SW0ZWIDX];
  SL2REC.PC2INSEG = SW0ZW02.PC2INSEG[SW0ZWIDX];
  SL2REC.XEGCD = SW0ZW02.XEGCD[SW0ZWIDX];
  SL2REC.XPGCD = SW0ZW02.XPGCD[SW0ZWIDX];
  SL2REC.XSLCD = SW0ZW02.XSLCD[SW0ZWIDX];
  SL2REC.SL2PALET = SW0ZW02.SL2PALET[SW0ZWIDX];
  SL2REC.SL2CASE = SW0ZW02.SL2CASE[SW0ZWIDX];

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S50"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S5 SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS50

// fetch 'n5' dstloc.vrlitm01
Function SW0ZS51()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "N9"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S51"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS51

// close 'c5' dstloc.vrlitm01
Function SW0ZS52()
   /* ------------------------------------------------------------*/
   /* close dstloc.vrlitm01 table row*/
   /* ------------------------------------------------------------*/

  set SLSREC empty; /* Clear row storage area*/
  SLSREC.SLSFNC = "C9"; /* function*/

  try
    call "IO1580" (SLSREC, SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  converseLib.validationFailed(1);

  SLWREC.XXXLOCID = "S52";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C5 VRLITM01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS52

// select 's6' dstloc.vwophd02
Function SW0ZS53()
   /* ------------------------------------------------------------*/
   /* 's6' dstloc.vwophd02 using current*/
   /* ------------------------------------------------------------*/
  set SLSREC empty;
  SLSREC.SLSFNC = "S6";

  set SLOREC empty;

  SLOREC.XWHCD = SW0ZW01.XWHCD;
  SLOREC.SL8WONBR = SW0ZW00.SL8WONBR;
  SLOREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S53"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S6 ON DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS53

// fetch 'n6' dstloc.vwophd02
Function SW0ZS54()
   /* ------------------------------------------------------------*/
   /* fetch next row vwophd02*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "N6";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S54"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DSTLOC.VWOPHD02 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0ZS54

// c6 dstloc.vwophd02
Function SW0ZS55()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwophd02 cursor.*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "C6";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  SLWREC.XXXLOCID = "S55"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C6 DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS55

// upd 'u' dstloc.wophdr01 cur
Function SW0ZS57()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vwophd01 table row*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* move the old fields from slorec to the wop hdr*/
   /* and move new fields in where applicable*/
   /* ------------------------------------------------------------*/

  set SLLREC empty;

  SLLREC.XWHCD = SLOREC.XWHCD;
  SLLREC.SL8WOGRP = SLOREC.SL8WOGRP;
  SLLREC.SL8WONBR = SLOREC.SL8WONBR;
  SLLREC.SWEPLLNB = SLOREC.SWEPLLNB;
  SLLREC.TSHCNTNR = SLOREC.TSHCNTNR;

  if (SW0ZW01.PC3PONBR != SW0ZW01.SW0ZWPON) /* po number has changed*/
    SLLREC.PC3PONBR = SW0ZW01.SW0ZWPON;
    SLLREC.PC3POIDT = SW0ZW01.PC3POIDT;
    SLLREC.PCFSECD = SW0ZW01.PCFSECD;
    SLLREC.FY1FCTYC = SW0ZW01.FY1FCTYC;
    SLLREC.PC4ORTYP = SW0ZW01.SW0ZWOTP;
  else
    SLLREC.PC3PONBR = SLOREC.PC3PONBR;
    SLLREC.PC3POIDT = SLOREC.PC3POIDT;
    SLLREC.PCFSECD = SLOREC.PCFSECD;
    SLLREC.FY1FCTYC = SLOREC.FY1FCTYC;
    SLLREC.PC4ORTYP = SLOREC.PC4ORTYP;
  end

  SLLREC.XGPCD = SLOREC.XGPCD;

  SLLREC.SY1STNBR = SW0ZW01.SW0ZWSTY;
  SLLREC.SY2CLRID = SW0ZW01.SW0ZWCLR;
  SLLREC.XDMCD = SW0ZW01.SW0ZWDIM;
  SLLREC.XQACD = SW0ZW01.SW0ZWXQA;

  if (SW0ZW02.SW0ZWOWN[SW0ZWIDX] > " ")
    SLLREC.XOWCD = SW0ZW02.SW0ZWOWN[SW0ZWIDX];
  else
    SLLREC.XOWCD = SW0ZW02.XOWCD[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSEG[SW0ZWIDX] > " ")
    SLLREC.PC2INSEG = SW0ZW02.SW0ZWSEG[SW0ZWIDX];
  else
    SLLREC.PC2INSEG = SW0ZW02.PC2INSEG[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWEDF[SW0ZWIDX] > " ")
    SLLREC.XEGCD = SW0ZW02.SW0ZWEDF[SW0ZWIDX];
  else
    SLLREC.XEGCD = SW0ZW02.XEGCD[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWPKG[SW0ZWIDX] > " ")
    SLLREC.XPGCD = SW0ZW02.SW0ZWPKG[SW0ZWIDX];
  else
    SLLREC.XPGCD = SW0ZW02.XPGCD[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWUOM[SW0ZWIDX] > " ")
    SLLREC.XUMCD = SW0ZW02.SW0ZWUOM[SW0ZWIDX];
  else
    SLLREC.XUMCD = SW0ZW02.XUMCD[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSLC[SW0ZWIDX] > " ")
    SLLREC.XSLCD = SW0ZW02.SW0ZWSLC[SW0ZWIDX];
  else
    SLLREC.XSLCD = SW0ZW02.XSLCD[SW0ZWIDX];
  end

  SLLREC.SL8WOPY = SLOREC.SL8WOPY;
  SLLREC.SL8WOPFL = SLOREC.SL8WOPFL;
  SLLREC.YWTCD = SLOREC.YWTCD;
  SLLREC.YWSCD = SLOREC.YWSCD;
  SLLREC.SL2PALET = SLOREC.SL2PALET;
  SLLREC.SY1UNPCS = SLOREC.SY1UNPCS;
  SLLREC.SL8FRAR = SLOREC.SL8FRAR;
  SLLREC.SL8FRZN = SLOREC.SL8FRZN;
  SLLREC.SL8FRLC = SLOREC.SL8FRLC;
  SLLREC.SL8TOAR = SLOREC.SL8TOAR;
  SLLREC.SL8TOZN = SLOREC.SL8TOZN;
  SLLREC.SL8TOLC = SLOREC.SL8TOLC;
  SLLREC.SL8INSTR = SLOREC.SL8INSTR;
  SLLREC.SL8CRTBY = SLOREC.SL8CRTBY;
  SLLREC.SL8UPDBY = SLOREC.SL8UPDBY;

  SLLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SLLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5400" ("U ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0ZW00.SW0ZWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S57"; /* Module identification*/
      SLWREC.SLWMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S57"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VWOPHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS57

// del 'd2' dstloc.vrlitm01 cur
Function SW0ZS58()
   /* ------------------------------------------------------------*/
   /* del dstloc.vrlitm01 table row using current key*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* new dstloc.vrlitm01 row is in the io area so only*/
   /* move fields that could have changed.*/
   /* ------------------------------------------------------------*/

  SL2REC.PC3PONBR = SW0ZW01.PC3PONBR;
  SL2REC.SY1STNBR = SW0ZW01.SY1STNBR;
  SL2REC.SY2CLRID = SW0ZW01.SY2CLRID;
  SL2REC.XDMCD = SW0ZW01.XDMCD;
  SL2REC.XQACD = SW0ZW01.XQACD;
  SL2REC.XOWCD = SW0ZW02.XOWCD[SW0ZWIDX];
  SL2REC.PC2INSEG = SW0ZW02.PC2INSEG[SW0ZWIDX];
  SL2REC.XEGCD = SW0ZW02.XEGCD[SW0ZWIDX];
  SL2REC.XPGCD = SW0ZW02.XPGCD[SW0ZWIDX];
  SL2REC.XUMCD = SW0ZW02.XUMCD[SW0ZWIDX];
  SL2REC.XSLCD = SW0ZW02.XSLCD[SW0ZWIDX];

  try
    call "IO1580" ("D2", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S58"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS58

// add 'a' dstloc.vrlitm01 new
Function SW0ZS59()
   /* ------------------------------------------------------------*/
   /* add dstloc.vrlitm01 table row using 'new' key*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* the current rlitm01 is in the io area*/
   /* ------------------------------------------------------------*/

  if (SW0ZW01.PC3PONBR != SW0ZW01.SW0ZWPON) /* po number has changed*/
    SL2REC.PC3PONBR = SW0ZW01.SW0ZWPON;
    SL2REC.PC3POIDT = SW0ZW01.PC3POIDT;
    SL2REC.PCFSECD = SW0ZW01.PCFSECD;
    SL2REC.FY1FCTYC = SW0ZW01.FY1FCTYC;
    SL2REC.PC4ORTYP = SW0ZW01.SW0ZWOTP;
  end

  SL2REC.SY1STNBR = SW0ZW01.SW0ZWSTY;
  SL2REC.SY2CLRID = SW0ZW01.SW0ZWCLR;
  SL2REC.XDMCD = SW0ZW01.SW0ZWDIM;
  SL2REC.XQACD = SW0ZW01.SW0ZWXQA;

  if (SW0ZW02.SW0ZWOWN[SW0ZWIDX] > " ")
    SL2REC.XOWCD = SW0ZW02.SW0ZWOWN[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSEG[SW0ZWIDX] > " ")
    SL2REC.PC2INSEG = SW0ZW02.SW0ZWSEG[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWEDF[SW0ZWIDX] > " ")
    SL2REC.XEGCD = SW0ZW02.SW0ZWEDF[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWPKG[SW0ZWIDX] > " ")
    SL2REC.XPGCD = SW0ZW02.SW0ZWPKG[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWUOM[SW0ZWIDX] > " ")
    SL2REC.XUMCD = SW0ZW02.SW0ZWUOM[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSLC[SW0ZWIDX] > " ")
    SL2REC.XSLCD = SW0ZW02.SW0ZWSLC[SW0ZWIDX];
  end

  if (SW0ZW02.SW0ZWSAS[SW0ZWIDX] > 0)
    SL2REC.INASAID = SW0ZW02.SW0ZWSAS[SW0ZWIDX];
  end

   /* *****************************************************/
   /* CHECK FIELDS FOR CHANGE.  iF ONLY THE XSL CODE   **/
   /* CHANGES, DO NOT XERO OUT THE SHIPPED QUANTITY    **/
   /* *****************************************************/

  if (SW0ZW01.PC3PONBR == SW0ZW01.SW0ZWPON
   && SW0ZW01.XGPCD == SW0ZW01.SW0ZWGPC
   && SW0ZW01.SY1STNBR == SW0ZW01.SW0ZWSTY
   && SW0ZW01.SY2CLRID == SW0ZW01.SW0ZWCLR
   && SW0ZW01.XDMCD == SW0ZW01.SW0ZWDIM
   && SW0ZW01.XQACD == SW0ZW01.SW0ZWXQA
   && SW0ZW02.SW0ZWOWN[SW0ZWIDX] == " "
   && SW0ZW02.SW0ZWSEG[SW0ZWIDX] == " "
   && SW0ZW02.SW0ZWEDF[SW0ZWIDX] == " "
   && SW0ZW02.SW0ZWPKG[SW0ZWIDX] == " "
   && SW0ZW02.SW0ZWUOM[SW0ZWIDX] == " ")
    SL2REC.TSOSHPQT = SW0ZW02.TSOSHPQT[SW0ZWIDX];
  else
    SL2REC.TSOSHPQT = 0;
  end

  SL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  SL2REC.ZZZCHGCT = 0;

  try
    call "IO1580" ("A ", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S59"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS59

// add 'a' dstloc.vplcpo01 new
Function SW0ZS60()
   /* ------------------------------------------------------------*/
   /* add dstloc.vplcpo01 table row using 'new' key*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* current dstloc.vplcpo01 table row is in io area*/
   /* ------------------------------------------------------------*/

  if (SW0ZW01.PC3PONBR != SW0ZW01.SW0ZWPON) /* po number has changed*/
    SWFREC.PC3PONBR = SW0ZW01.SW0ZWPON;
    SWFREC.PC3POIDT = SW0ZW01.PC3POIDT;
    SWFREC.PCFSECD = SW0ZW01.PCFSECD;
    SWFREC.FY1FCTYC = SW0ZW01.FY1FCTYC;
    SWFREC.PC4ORTYP = SW0ZW01.SW0ZWOTP;
  end

  SWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  SWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  SWFREC.ZZZCHGCT = 0;

  try
    call "IO5340" ("A ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S60"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS60

// select 's' dstloc.vplcpo01 new
Function SW0ZS61()
   /* ------------------------------------------------------------*/
   /* Select dstloc.vplcpo01 table row*/
   /* ------------------------------------------------------------*/

  set SWFREC empty;

  SWFREC.XWHCD = SW0ZW01.XWHCD;
  SWFREC.SWEPLLNB = SW0ZW01.SWEPLLNB;
  SWFREC.TSHCNTNR = SW0ZW01.TSHCNTNR;
  SWFREC.XGPCD = SW0ZW01.XGPCD;
  SWFREC.PC3PONBR = SW0ZW01.SW0ZWPON;

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S61"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS61

// select 's' dstloc.vwopit01 new
Function SW0ZS62()
   /* ------------------------------------------------------------*/
   /* Select dstloc.wopit01 using current new key*/
   /* ------------------------------------------------------------*/

  set SLMREC empty;

  SLMREC.XWHCD = SW0ZW01.XWHCD;
  SLMREC.SL8WONBR = SW0ZW00.SW0ZWNWO;
  SLMREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];
  SLMREC.SY5SZID = SL2REC.SY5SZID; /* from vrlitm01*/

  try
    call "IO5410" ("S ", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S62"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "WOPIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS62

// upd 'u' dstloc.vwopit01 new
Function SW0ZS63()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vwopit01 table usiing 'current' key*/
   /* ------------------------------------------------------------*/

  SLMREC.SL9WOQTY = SLMREC.SL9WOQTY + SL2REC.SL2RCVD;

  SLMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SLMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5410" ("U ", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0ZW00.SW0ZWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S63"; /* Module identification*/
      SLWREC.SLWMSGNO = 32; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S63"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VWOPIT01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS63

// add 'a' dstloc.vwopit01 new
Function SW0ZS64()
   /* ------------------------------------------------------------*/
   /* add dstloc.vwopit01 table using new product*/
   /* ------------------------------------------------------------*/

  set SLMREC empty;

  SLMREC.XWHCD = SW0ZW01.XWHCD;
  SLMREC.SL8WONBR = SW0ZW00.SW0ZWNWO;
  SLMREC.SY5SZID = SL2REC.SY5SZID;
  SLMREC.PKDNCSQN = SW0ZW02.PKDNCSQN[SW0ZWIDX];
  SLMREC.TSOCRTNB = SWHREC.TSOCRTNB;
  SLMREC.SL9WOQTY = SL2REC.SL2RCVD;
  SLMREC.SLMWCPFL = "Y";
  SLMREC.SLMPUNBR = 0;
  SLMREC.SLDLBLDT = 0;

  SLMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SLMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  SLMREC.ZZZCHGCT = 0;

  try
    call "IO5410" ("A ", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S64"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DSTLOC.VWOPIT01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS64

// upd 'u' dstloc.vrlitm01 new
Function SW0ZS65()
   /* ------------------------------------------------------------*/
   /* upd dstloc.vrlitm01 table row using 'old' product key for sas*/
   /* ------------------------------------------------------------*/

  if (SW0ZW02.SW0ZWSAS[SW0ZWIDX] != SW0ZW02.INASAID[SW0ZWIDX])
    SL2REC.INASAID = SW0ZW02.SW0ZWSAS[SW0ZWIDX];
  end

  SL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO1580" ("U ", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SW0ZW00.SW0ZWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S65"; /* Module identification*/
      SLWREC.SLWMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S65"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DSTLOC.VRLITM01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0ZS65

// abend the application
Function SW0ZS99()
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  converseLib.validationFailed(1); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PLAN/PROD TABLES OUT OF SYNC";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0ZS99

// Converse XROTBL pop-up window
Function XPXRO01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XROTBL.XROCD[XX0XWCT1] != "9999") /* Or end of data*/
        if (XROTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XROTBL.XROCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XROTBL.XRODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XROTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XROTBL.XROCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XROTBL.XRODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XROTBL.XROCD[XX0XWCT1] == "9999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXRO01

//*** RECORD=SW0ZW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record SW0ZW00 type basicRecord
  10 SW0ZWSWR SW0ZWSWR ; 
  10 SW0ZWSWF SW0ZWSWF ; 
  10 SW0ZWDCF SW0ZWDCF ; 
  10 SW0ZWHUS SW0ZWHUS ; 
  10 SW0ZWRSS SW0ZWRSS ; 
  10 SW0ZWDUS SW0ZWDUS ; 
  10 SW0ZWSUS SW0ZWSUS ; 
  10 SW0ZWSES SW0ZWSES ; 
  10 SW0ZWUPS SW0ZWUPS ; 
  10 SW0ZWCHA SW0ZWCHA ; 
  10 SW0ZWREF SW0ZWREF ; 
  10 SW0ZWPSW SW0ZWPSW ; 
  10 SW0ZWDBU SW0ZWDBU ; 
  10 SW0ZWTFL SW0ZWTFL ; 
  10 SW0ZWPDE SW0ZWPDE ; 
  10 SW0ZWSZF SW0ZWSZF ; 
  10 SW0ZWSWD SW0ZWSWD ; 
  10 SW0ZWMOD SW0ZWMOD ; 
  10 SW0ZWDIS SW0ZWDIS ; 
  10 SW0ZWDPP SW0ZWDPP ; 
  10 SW0ZWDLC SW0ZWDLC ; 
  10 SW0ZWPLF SW0ZWPLF ; 
  10 SL2PALET SL2PALET ; 
  10 SW0ZWPAG SW0ZWPAG ; 
  10 SW0ZWIDX SW0ZWIDX ; 
  10 SW0ZWLIX SW0ZWLIX ; 
  10 SW0ZWSIX SW0ZWSIX ; 
  10 SW0ZWIXT SW0ZWIXT ; 
  10 SW0ZWNM1 SW0ZWNM1 ; 
  10 SW0ZWNM2 SW0ZWNM2 ; 
  10 SWGPRDUN SWGPRDUN ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 SW0ZWSTP SW0ZWSTP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SWGPSEQN SWGPSEQN ; 
  10 SW0ZWNPS SW0ZWNPS ; 
  10 SW0ZWSAS SW0ZWSAS ; 
  10 SW0ZWSEG SW0ZWSEG ; 
  10 SW0ZWEDF SW0ZWEDF ; 
  10 SW0ZWSLC SW0ZWSLC ; 
  10 SW0ZWPKG SW0ZWPKG ; 
  10 SW0ZWUOM SW0ZWUOM ; 
  10 SW0ZWOWN SW0ZWOWN ; 
  10 SW0ZWSEL SW0ZWSEL ; 
  10 SW0ZWLOC SW0ZWLOC ; 
    15 * char(2) ; 
    15 SW0ZWLNN SW0ZWLNN ; 
  10 SW0ZWCAS SW0ZWCAS ; 
    15 * char(4) ; 
    15 SW0ZWCS4 SW0ZWCS4 ; 
  10 SL8WONBR SL8WONBR ; 
  10 SW0ZWNWO SW0ZWNWO ; 
  10 SW0ZWSPF SW0ZWSPF ; 
end // end SW0ZW00

//*** RECORD=SW0ZW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record SW0ZW01 type basicRecord
  5 SW0ZWGP3 SW0ZWGP3 ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 XROPDEST XROPDEST ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XLCCD XLCCD ; 
    10 XLCABRV XLCABRV ; 
    10 PC3PONBR PC3PONBR ; 
    10 SW0ZWPOI SW0ZWPOI ; 
    10 SW0ZWPID SW0ZWPID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 SW0ZWGPC SW0ZWGPC ; 
    10 SW0ZWSTY SW0ZWSTY ; 
    10 SW0ZWCLR SW0ZWCLR ; 
    10 SW0ZWDIM SW0ZWDIM ; 
    10 SW0ZWXQA SW0ZWXQA ; 
    10 SW0ZWXLC SW0ZWXLC ; 
    10 SW0ZWXLD SW0ZWXLD ; 
    10 SW0ZWPON SW0ZWPON ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SW0ZWOTP SW0ZWOTP ; 
    10 CACHGFL CACHGFL ; 
end // end SW0ZW01

//*** RECORD=SW0ZW02 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record SW0ZW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(596) ; 
    10 SW0ZWNLD SW0ZWNLD ; 
    10 SW0ZWSEL SW0ZWSEL [8] ; 
    10 PKDNCSQN PKDNCSQN [8] ; 
    10 SL2CASE SL2CASE [8] ; 
    10 SL2PALET SL2PALET [8] ; 
    10 SL5LOCTN SL5LOCTN [8] ; 
    10 SL2RCVD SL2RCVD [8] ; 
    10 TSOSHPQT TSOSHPQT [8] ; 
    10 INASAID INASAID [8] ; 
    10 PC2INSEG PC2INSEG [8] ; 
    10 XEGCD XEGCD [8] ; 
    10 XSLCD XSLCD [8] ; 
    10 XPGCD XPGCD [8] ; 
    10 XUMCD XUMCD [8] ; 
    10 XOWCD XOWCD [8] ; 
    10 SW0ZWSAS SW0ZWSAS [8] ; 
    10 SW0ZWSEG SW0ZWSEG [8] ; 
    10 SW0ZWEDF SW0ZWEDF [8] ; 
    10 SW0ZWSLC SW0ZWSLC [8] ; 
    10 SW0ZWPKG SW0ZWPKG [8] ; 
    10 SW0ZWUOM SW0ZWUOM [8] ; 
    10 SW0ZWOWN SW0ZWOWN [8] ; 
    10 SW0ZWTPR SW0ZWTPR [8] ; 
end // end SW0ZW02

//*** RECORD=SW0ZW05 ****
// --------------------------------
// Parameters to be sent to FF6300.
// --------------------------------
// ***********************
Record SW0ZW05 type basicRecord
  5 TARJCL TARJCL ; 
    10 XWHCD XWHCD ; 
    10 * char(78) ; 
end // end SW0ZW05

// sl_rlog_case
DataItem SW0ZWCAS char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change all switch
DataItem SW0ZWCHA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new color id
DataItem SW0ZWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last four - case number
DataItem SW0ZWCS4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// databases updated switch
DataItem SW0ZWDBU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data change flag
DataItem SW0ZWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new dimension code
DataItem SW0ZWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data displayed switch
DataItem SW0ZWDIS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete lane carton switch
DataItem SW0ZWDLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete product switch
DataItem SW0ZWDPP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail data change switch
DataItem SW0ZWDUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new xeg-engr-diff-cd
DataItem SW0ZWEDF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sw0zw03 group level
DataItem SW0ZWGP3 char(131)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new gpc code
DataItem SW0ZWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header data change switch
DataItem SW0ZWHUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SW0ZWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// jcl index
DataItem SW0ZWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// load index
DataItem SW0ZWLIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// last four - lane number
DataItem SW0ZWLNN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl5loctn
DataItem SW0ZWLOC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified switch
DataItem SW0ZWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of lines per page
DataItem SW0ZWNLD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field
DataItem SW0ZWNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// numeric work field
DataItem SW0ZWNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// new prod seq nbr
DataItem SW0ZWNPS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order number
DataItem SW0ZWNWO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_OT_CD
DataItem SW0ZWOTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new own group
DataItem SW0ZWOWN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved page number
DataItem SW0ZWPAG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// product data entered
DataItem SW0ZWPDE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted po id
DataItem SW0ZWPID char(9)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// new package code
DataItem SW0ZWPKG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pallet found switch
DataItem SW0ZWPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted po grp
DataItem SW0ZWPOI char(9)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem SW0ZWPON int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pallet switch
DataItem SW0ZWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformatted data switch
DataItem SW0ZWREF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row selected switch
DataItem SW0ZWRSS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// header set aside id
DataItem SW0ZWSAS int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// new iseg code
DataItem SW0ZWSEG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection field
DataItem SW0ZWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected field edit switch
DataItem SW0ZWSES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size index
DataItem SW0ZWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new class code
DataItem SW0ZWSLC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format po field switch
DataItem SW0ZWSPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save current temp storage page
DataItem SW0ZWSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// new style number
DataItem SW0ZWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// setaside data change switch
DataItem SW0ZWSUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map request switch
DataItem SW0ZWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0ZWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0ZWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size flag
DataItem SW0ZWSZF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// translate size desc flag
DataItem SW0ZWTFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total units per product
DataItem SW0ZWTPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new unit of measure
DataItem SW0ZWUOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// t/s update flag
DataItem SW0ZWUPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new life cycle code
DataItem SW0ZWXLC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new life cycle desc
DataItem SW0ZWXLD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new quality code
DataItem SW0ZWXQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

