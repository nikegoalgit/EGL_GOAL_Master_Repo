package sw0k;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0K ****
// This application allows the user to display/update lane
// assignments for a specific warehouse and plan number.  The
// plan data is displayed in container, GPC code, po number,
// and lane category sequence.  The lanes required and lanes
// assigned are accumulated in the sequence listed above.  The
// user may update the from lane and to lane entries.  If the
// lanes required entry is greater than zero, the lanes
// assigned must be greater than zero for the update to occur.
// 
// Once the data has been approved/updated, the user may submit
// the plan by pressing the pf15 key.
// 
// The user may scroll forward and backwards using the
// appropriate pf keys. The user may exit to any allowed
// application, via fast path or pf key, from this screen.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PK#159   11/12/90  SBEAUC  New application.
// FIX      01/04/91  MPLUTH  Fixed various problems.
// FIX      01/16/91  SPOPA   Don't allow SUBMIT if plan is in
//                            submit status.  Correct message
//                            displayed on invalid lane edit.
// MAINT    01/30/92  GRAY    INITIALIZE RECORDS AND MAPS.
// WV RCV   02/25/93  tglenn  Ensure po id/type displays for
//                            whse 07.
//                            Add edit check to ensure that for
//                            lane category 'pl' the from/to
//                            lane range is equal to the lanes
//                            required value.
//                            Add edit check for split cartons
//                            code 'sp' so that only one lane
//                            whatever was assigned is valid.
// WV RCV   05/08/93  MPLUTH  Added edits to validate the
//                            starting lane number.
// WV RCV   05/17/93  MPLUTH  Added logic to calculate 'TO'
//                            lane number if it was not entered
// WV RCV   06/02/93  MPLUTH  Added logic to see if there are
//                            enough empty locations to store
//                            all pallets and cases for the
//                            plan.  Call subroutine SL4380.
// WV RCV   06/28/93  hchapm  Added logic transfer control to
//                            SW0L once PF15 (plan submit)
//                            has been pressed. (SW0K600)
// ASW001   12/29/95  hkempe  Recompiled due to VPLCPO01 table
//                            change.
//          04/04/97  dgerlt  Added cs, wp and qa defaults to
//                            go with the ux default.
// RETROFT  02/09/98  SJOHN6  add sp default lane
// *********************
Program SW0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0KW00 SW0KW00; // record
  SW0KW01 SW0KW01; // record
  SW0KW02 SW0KW02; // record
  SW0KW03 SW0KW03; // record
  SW0KW04 SW0KW04; // record
  SW0KW05 SW0KW05; // record
  SW0KW06 SW0KW06; // record
  SW0KW07 SW0KW07; // record
  SWCREC SWCREC; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SWGREC SWGREC; // record
  SWQREC SWQREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SW0KT {deleteAfterUse = yes}; // table
  use XLNTBL; // table
  use XRPTBL; // table
  use XWHTBL; // table
  use SW0KM.SW0KM001,  // forms
      SW0KM.TA0PM001, 
      SW0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0KM001 initial;
    set TA0PM001 initial;
    set XX0XM001 initial;
    set SW0KW00 empty; /* Working storage*/
    set SW0KW01 empty; /* M001 display storage heading stuff*/
    set SW0KW02 empty; /* temporary storage*/
    set SW0KW03 empty; /* parameters for jcl submit*/
    set SW0KW04 empty; /* parameters for io module*/
    set SW0KW05 empty; /* M001 display storage*/
    set SW0KW06 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage*/
    set TA6REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Date/time subroutine parameters*/
    set SWCREC empty; /* Plan Header table rec*/
    set SWEREC empty; /* Plan Header table rec*/
    set SWFREC empty; /* Plan Header table rec*/
    set SWGREC empty; /* Plan Header table rec*/
    set SWQREC empty; /* Plan Header table rec*/

    SW0KW00.SW0KWSWF = "Y"; /* Format the map switch*/
    SW0KW00.SW0KWFFL = "Y"; /* First time flag*/
    SW0KW00.SW0KWFSW = "Y"; /* First time switch*/

    SW0KW01.XWHCD = SLWREC.XWHCD; /* Warehouse code*/
    if (SLWREC.XWHCD in XWHTBL.XWHCD)
      SW0KW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end

     /* ------------------------------------------------------------*/
     /* If data was passed in work record, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (SLWREC.XWHCD == " " /* No warehouse code*/
     || SLWREC.SWEPLLNB == 0) /* or no plan number*/

      SW0KW00.SW0KWSWR = "N"; /* Request for data switch*/

    else

      SW0KW00.SW0KWSWR = "Y"; /* Request for data switch*/

      SW0KM001.XWHCD = SLWREC.XWHCD; /* Warehouse code*/
      SW0KM001.SWEPLLNB = SLWREC.SWEPLLNB; /* Plan number*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0K001; /* Converse the main process*/


    SW0K001: SW0K001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0K001; /* Converse the main process*/


  end // end main
end // end SW0K

// Inquire/maintain a table row
Function SW0K001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0K100(); /* Obtain the data to display*/

  SW0K200(); /* Format and display the map*/

  SW0K300(); /* Check attention identifier*/

  SW0K400(); /* Reset fields to normal intensity*/

  SW0K500(); /* Verify the entered data*/

  SW0K600(); /* Process valid input request*/

end // end SW0K001

// Obtain the data to display
Function SW0K100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.SW0KWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields*/
   /* ------------------------------------------------------------*/

  set SW0KW01 empty; /* clear storage*/

  SW0KW01.XWHCD = SW0KM001.XWHCD; /* save key fields*/
  SW0KW01.SWEPLLNB = SW0KM001.SWEPLLNB;

  SW0KW00.SW0KWCTS = 0; /* clear current t/s w02 page #*/

  SW0KW00.SW0KWSWK = " "; /* clear key error switch*/
  SW0KW00.SW0KWDER = " "; /* clear default lane error switch*/
  SW0KW00.SW0KWSER = "             "; /* clear data lines error sw*/

   /* ------------------------------------------------------------*/
   /* Establish t/s page length*/
   /* ------------------------------------------------------------*/

  SW0KW00.XXXTSLEN = 652; /* establish t/s page length*/

   /* ------------------------------------------------------------*/
    /* purge temporary storage*/
   /* ------------------------------------------------------------*/

  SW0KS13(); /* initialize work area & purge temp*/
                                   /* storage*/

   /* ------------------------------------------------------------*/
   /* retrieve whse desc from table*/
   /* ------------------------------------------------------------*/

  if (SW0KW01.XWHCD in XWHTBL.XWHCD)
    SW0KW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end /* retrieve whse abrv*/

   /* ------------------------------------------------------------*/
   /* retrieve receiving plan code description from xrptbl*/
   /* ------------------------------------------------------------*/

  set SWEREC empty; /* Row storage area*/

  SWEREC.XWHCD = SW0KW01.XWHCD; /* Warehouse code*/
  SWEREC.SWEPLLNB = SW0KW01.SWEPLLNB; /* Plan number*/

  SW0KS50(); /* sel unique vplnhd01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SW0KW01.XRPCD = SWEREC.XRPCD; /* show the status*/
    if (SWEREC.XRPCD in XRPTBL.XRPCD)
      SW0KW01.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex];
    end /* show desc*/

    if (SWEREC.XRPCD == "WK")

      SLWREC.XXXLOCID = "100";
      converseLib.validationFailed(218); /* invalid status for plan*/

      SW0KW00.SW0KWSWK = "Y"; /* set error switch*/

      exit stack; /* exit to display map*/

    end

    if (SWEREC.XRPCD in XRPTBL.XRPCD /* status in table*/
     && XRPTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* inactive*/

      SLWREC.XXXLOCID = "100";
      converseLib.validationFailed(9); /* status is inactive*/

      SW0KW00.SW0KWSWK = "Y"; /* set error switch*/

      exit stack; /* exit to display map*/

    else

      if (SWEREC.XRPCD in XRPTBL.XRPCD)

         /* NEXT SENTENCE*/

      else

        SLWREC.XXXLOCID = "100";
        converseLib.validationFailed(242); /* status not on table*/

        SW0KW00.SW0KWSWK = "Y"; /* set error switch*/

        exit stack; /* exit to display map*/

      end

    end

  else

    SLWREC.XXXLOCID = "100";
    converseLib.validationFailed(214); /* no data found*/

    SW0KW00.SW0KWSWK = "Y"; /* set error switch*/

    exit stack; /* exit to display map*/

  end

   /* ----------------------------------------------------------------*/
    /* call sl4380 to verfiy that there are enough available locations*/
    /* for all of the handstack cartons and bulk pallets.*/
   /* ----------------------------------------------------------------*/

  if (SW0KW01.XWHCD == "07") /* wilsonville*/

    if (SW0KW00.SW0KWFSW == "Y") /* first time through*/
      SW0KW00.SW0KWFSW = "N";
      SW0KS24(); /* call date subroutine*/
    end

    SW0KS25(); /* call available locations subroutine*/
                                   /* (sl4380)*/

    if (SW0KW07.SW0KW-HANDSTACK-CARTONS > 
    SW0KW07.SW0KW-HANDSTACK-LOCATIONS)
      SLWREC.XXXLOCID = "100"; /* Module identification*/
      SLWREC.SLWMSGNO = 446; /* Indicate handstack error*/
      return; /* Exit to continue*/
    else
      if (SW0KW07.SW0KW-SHORT-PALLETS > 
      SW0KW07.SW0KW-SHORT-LOCATIONS)
        SLWREC.XXXLOCID = "100"; /* Module identification*/
        SLWREC.SLWMSGNO = 447; /* Indicate short bulk error*/
        return; /* Exit to continue*/
      else
        if (SW0KW07.SW0KW-3-4-PALLETS > 
        SW0KW07.SW0KW-3-4-LOCATIONS)
          SLWREC.XXXLOCID = "100"; /* Module identification*/
          SLWREC.SLWMSGNO = 448; /* Indicate 3/4 bulk error*/
          return; /* Exit to continue*/
        else
          if (SW0KW07.SW0KW-NORMAL-PALLETS > 
          SW0KW07.SW0KW-NORMAL-LOCATIONS)
            SLWREC.XXXLOCID = "100"; /* Module identification*/
            SLWREC.SLWMSGNO = 449; /* Indicate normal bulk error*/
            return; /* Exit to continue*/
          else
            if (SW0KW07.SW0KW-TALL-PALLETS > 
            SW0KW07.SW0KW-TALL-LOCATIONS)
              SLWREC.XXXLOCID = "100"; /* Module identification*/
              SLWREC.SLWMSGNO = 450; /* Indicate tall bulk error*/
              return; /* Exit to continue*/
            else
              if (SW0KW07.SW0KW-PROD-ASSIGN-OK-SW == "N")
                SLWREC.XXXLOCID = "100"; /* Module identification*/
                SLWREC.SLWMSGNO = 451; /* Indicate prod assignment err*/
                return; /* Exit to continue*/
              end
            end
          end
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* call sl4270 to do the join io and load it into temp storage*/
   /* ------------------------------------------------------------*/

  SW0KS22(); /* call io mod*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "100"; /* Module identification*/
    SLWREC.SLWMSGNO = 214; /* Indicate no data to dsply*/

    return; /* Exit to continue*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0KW00.XXXTSPAG = 1; /* Desired page number*/
  SW0KW00.SW0KWSWR = "N"; /* Request for data switch*/

  SW0KW01.SW0KWDFL = 0; /* set default ux from lane to 0*/
  SW0KW01.SW0KWDTL = 0; /* set default ux to lane to 0*/
  SW0KW01.SW0KWDFLCS = 0; /* set default cs from lane to 0*/
  SW0KW01.SW0KWDTLCS = 0; /* set default cs to lane to 0*/
  SW0KW01.SW0KWDFLWP = 0; /* set default wp from lane to 0*/
  SW0KW01.SW0KWDTLWP = 0; /* set default wp to lane to 0*/
  SW0KW01.SW0KWDFLQC = 0; /* set default qa from lane to 0*/
  SW0KW01.SW0KWDTLQC = 0; /* set default qa to lane to 0*/
  SW0KW01.SW0KWDFLSP = 0; /* set default sp from lane to 0*/
  SW0KW01.SW0KWDFLDC = 0; /* set default sp to lane to 0*/
  SW0KW00.SW0KWSWU = "N"; /* no db updates yet*/
  SW0KW00.SW0KWCUR = "N"; /* no current pass updates yet*/
  SW0KW00.SW0KWUPD = "N"; /* no updates yet*/


end // end SW0K100

// Format and converse the map
Function SW0K200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.SW0KWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0KW00.SW0KWSWF == "Y") /* Map must be formatted*/

      SW0K210(); /* Format the data on the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If line errors exist, show list request lits/input field.*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.SW0KWSER == "             " /* there are no line errors*/
   && SW0KW00.SW0KWDER == " ")            /* no errors in default lanes*/

    set SW0KM001.SW0KMANS skip, invisible; /* don't allow input*/
    set SW0KM001.SW0KMLT1 skip, invisible; /* don't show literal*/
    set SW0KM001.SW0KMLT2 skip, invisible; /* don't show literal*/

  end

   /* ------------------------------------------------------------*/
   /* If line errors exist, determine where to put cursor.*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.SW0KWSER != "             " /* if data errors*/
   && SW0KW00.SW0KWSWK != "Y"             /* no key error*/
   && SW0KW00.SW0KWDER != "Y")            /* no default lane errors*/

    SW0KW00.SW0KWLIX = 1; /* init line index*/

    while (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN) /* non-blank lines*/

      if (SW0KW00.SW0KWSWE[SW0KWLIX] == "Y") /* first line w/ error*/

        set SW0KM001.SW0KMFLN[SW0KWLIX] cursor; /* set cursor*/
        SW0KW00.SW0KWLIX = 13; /* force end of loop*/

      end

      SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0KM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0KM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0KM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0KM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0KM001.CAITEM; /* Application data*/


end // end SW0K200

// Format the display data
Function SW0K210()
   /* ------------------------------------------------------------*/
   /* init map sw0km001*/
   /* ------------------------------------------------------------*/

  set SW0KM001 initial; /* M001 input/ouput area*/

  SW0KW00.SW0KWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format heading fields on map*/
   /* ------------------------------------------------------------*/

  SW0KM001.XWHCD = SW0KW01.XWHCD;
  SW0KM001.XWHABRV = SW0KW01.XWHABRV;
  SW0KM001.SWEPLLNB = SW0KW01.SWEPLLNB;
  SW0KM001.XRPCD = SW0KW01.XRPCD;
  SW0KM001.XRPDESC = SW0KW01.XRPDESC;
  SW0KM001.SW0KMDFL = SW0KW01.SW0KWDFL;
  SW0KM001.SW0KMDTL = SW0KW01.SW0KWDTL;
  SW0KM001.SW0KMDFLCS = SW0KW01.SW0KWDFLCS;
  SW0KM001.SW0KMDTLCS = SW0KW01.SW0KWDTLCS;
  SW0KM001.SW0KMDFLWP = SW0KW01.SW0KWDFLWP;
  SW0KM001.SW0KMDTLWP = SW0KW01.SW0KWDTLWP;
  SW0KM001.SW0KMDFLQC = SW0KW01.SW0KWDFLQC;
  SW0KM001.SW0KMDTLQC = SW0KW01.SW0KWDTLQC;
  SW0KM001.SW0KMDFLSP = SW0KW01.SW0KWDFLSP;
  SW0KM001.SW0KMDFLDC = SW0KW01.SW0KWDFLDC;

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0KW00.XXXTSPAG != SW0KW00.SW0KWCTS /* Desired page not current*/
     || converseVar.eventKey is pa2)         /* restore screen from t/s*/

      /* ---------------------------------------------------------*/
       /* if the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ---------------------------------------------------------*/

      if (SW0KW00.SW0KWCUR == "Y") /* current page has been changed*/

        SW0KS08(); /* update t/s page*/

      end

      TA5REC.TA5TSQIX = SW0KW00.XXXTSPAG; /* set new page to get*/
      SW0KS10(); /* obtain new t/s page*/
      SW0KS16(); /* save t/s data to display w01*/
      SW0KW00.SW0KWSER = "             "; /* clear data errors*/

    end

    /* ------------------------------------------------------------*/
     /* Display the new page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SW0KM001.XXXLITPG skip; /* "PAGE" literal*/
    SW0KM001.XXXTSPAG = SW0KW00.XXXTSPAG; /* Current page*/
    set SW0KM001.XXXLITOF skip; /* "OF" literal*/
    SW0KM001.TA5TSQIX = SW0KW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SW0KW00.SW0KWLIX = 1; /* initialize line index*/

  while (SW0KW00.SW0KWLIX < 13) /* Until all lines filled*/

    if (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN) /* not a blank line*/
      if (SW0KW01.SW0KWDFLQC != 0
       && SW0KW01.SWHLNCAT[SW0KWLIX] == "QC"
       || SW0KW01.SW0KWDFLWP != 0
       && SW0KW01.SWHLNCAT[SW0KWLIX] == "WP"
       || SW0KW01.SW0KWDFLCS != 0
       && SW0KW01.SWHLNCAT[SW0KWLIX] == "CS"
       || SW0KW01.SW0KWDFLSP != 0
       && SW0KW01.SWHLNCAT[SW0KWLIX] == "SP"
       || SW0KW01.SW0KWDFLDC != 0
       && SW0KW01.SWHLNCAT[SW0KWLIX] == "DC"
       || SW0KW01.SW0KWDFL != 0
       && SW0KW01.SWHLNCAT[SW0KWLIX] == "UX")

      else

        SW0KM001.SWHLNCAT[SW0KWLIX] = SW0KW01.SWHLNCAT[SW0KWLIX];
        SW0KM001.SW0KMLRQ[SW0KWLIX] = SW0KW01.SW0KWLRQ[SW0KWLIX];
        SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KW01.SW0KWFLN[SW0KWLIX];
        SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KW01.SW0KWTLN[SW0KWLIX];
        if (SW0KW01.SW0KWFLN[SW0KWLIX] == 0
         && SW0KW01.SW0KWTLN[SW0KWLIX] == 0)
          if (SW0KW01.SWHLNCAT[SW0KWLIX] == "UX")
            SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KW01.SW0KWDFL;
            SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KW01.SW0KWDTL;
          else
            if (SW0KW01.SWHLNCAT[SW0KWLIX] == "CS")
              SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KW01.SW0KWDFLCS;
              SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KW01.SW0KWDTLCS;
            else
              if (SW0KW01.SWHLNCAT[SW0KWLIX] == "WP")
                SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KW01.SW0KWDFLWP;
                SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KW01.SW0KWDTLWP;
              else
                if (SW0KW01.SWHLNCAT[SW0KWLIX] == "QC")
                  SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KW01.SW0KWDFLQC;
                  SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KW01.SW0KWDTLQC;
                else
                  if (SW0KW01.SWHLNCAT[SW0KWLIX] == "SP")
                    SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KW01.SW0KWDFLSP;
                    SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KW01.SW0KWDFLSP;
                  else
                    if (SW0KW01.SWHLNCAT[SW0KWLIX] == "DC")
                      SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KW01.SW0KWDFLDC;
                      SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KW01.SW0KWDFLDC;
                    end
                  end
                end
              end
            end
          end
        end
        SW0KM001.SW0KMLAS[SW0KWLIX] = SW0KW01.SW0KWLAS[SW0KWLIX];
      end

       /* dont move container number if one above is the same*/

      if (SW0KW00.SW0KWLIX > 1) /* all but first line*/

        SW0KW00.SW0KWCIX = SW0KW00.SW0KWLIX - 1; /* set up index for back 1*/

        if (SW0KW01.TSHCNTNR[SW0KWLIX] == SW0KW01.TSHCNTNR[SW0KWCIX])
           /* next sentence*/
        else
          SW0KM001.TSHCNTNR[SW0KWLIX] = SW0KW01.TSHCNTNR[SW0KWLIX];
        end

        if (SW0KW01.XGPCD[SW0KWLIX] == SW0KW01.XGPCD[SW0KWCIX]
         && SW0KW01.PC3PONBR[SW0KWLIX] == SW0KW01.PC3PONBR[SW0KWCIX]
         && SW0KW01.SW0KWPID[SW0KWLIX] == SW0KW01.SW0KWPID[SW0KWCIX])
           /* next sentence*/
        else
          SW0KM001.XGPCD[SW0KWLIX] = SW0KW01.XGPCD[SW0KWLIX];
          SW0KM001.PC3PONBR[SW0KWLIX] = SW0KW01.PC3PONBR[SW0KWLIX];
          SW0KM001.SW0KMPID[SW0KWLIX] = SW0KW01.SW0KWPID[SW0KWLIX];

        end

      else
         /* always move first line's container number*/
        SW0KM001.TSHCNTNR[SW0KWLIX] = SW0KW01.TSHCNTNR[SW0KWLIX];
        SW0KM001.XGPCD[SW0KWLIX] = SW0KW01.XGPCD[SW0KWLIX];
        SW0KM001.PC3PONBR[SW0KWLIX] = SW0KW01.PC3PONBR[SW0KWLIX];
        SW0KM001.SW0KMPID[SW0KWLIX] = SW0KW01.SW0KWPID[SW0KWLIX];

      end

      if (COMMAREA.CACHGFL == "Y") /* if authorized to make changes*/

        if (SW0KW01.SW0KWDFLQC != 0
         && SW0KW01.SWHLNCAT[SW0KWLIX] == "QC"
         || SW0KW01.SW0KWDFLWP != 0
         && SW0KW01.SWHLNCAT[SW0KWLIX] == "WP"
         || SW0KW01.SW0KWDFLDC != 0
         && SW0KW01.SWHLNCAT[SW0KWLIX] == "DC"
         || SW0KW01.SW0KWDFLSP != 0
         && SW0KW01.SWHLNCAT[SW0KWLIX] == "SP"
         || SW0KW01.SW0KWDFLCS != 0
         && SW0KW01.SWHLNCAT[SW0KWLIX] == "CS"
         || SW0KW01.SW0KWDFL != 0
         && SW0KW01.SWHLNCAT[SW0KWLIX] == "UX")

        else

          set SW0KM001.SW0KMFLN[SW0KWLIX] normal; /* unprotect*/
          set SW0KM001.SW0KMTLN[SW0KWLIX] normal; /* unprotect*/

        end

      end

    end

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment line number*/

  end


end // end SW0K210

// Check attention identifier
Function SW0K300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0KW00.SW0KWEXT == "Y") /* exit pending*/

      SW0KS13(); /* purge t/s*/
      SLWREC.SLWMSGNO = 29; /* updates cancelled*/
      SW0KW00.SW0KWEXT = "N"; /* clear exit switch*/
      SW0KW00.SW0KWUPD = "N"; /* clear update switch*/
      SW0KW00.SW0KWSWR = "N"; /* clear request for data*/
      set SW0KW01 empty; /* clear work area*/
      SW0KW00.SW0KWSWF = "Y"; /* format clean screen*/
      exit stack; /* exit to display screen*/

    end

    if (SW0KW00.SW0KWSWR == "Y") /* Request for data pending*/

      set SW0KW01 empty; /* clear work area*/

    end

    SW0KW00.SW0KWSWR = "N"; /* request for data*/
    SW0KW00.SW0KWSWF = "Y"; /* format screen m001*/
    SW0KW00.SW0KWCUR = "N"; /* clear change flag for curr screen*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (SW0KW00.SW0KWUPD == "Y") /* changes made but not updated*/

        converseLib.validationFailed(289); /* warning*/
        SW0KW00.SW0KWEXT = "Y"; /* set exit switch*/
        SW0KW00.SW0KWSWR = "N"; /* clear data request*/
        SW0KW00.SW0KWSWF = "N"; /* clear format flag*/
        exit stack; /* exit to display screen*/

      end

      SW0KS13(); /* purge temp storage*/

      XSSL001(); /* Exit to another application*/

      converseLib.validationFailed(166); /* unable to xfer msg*/
      set SW0KM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(217); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (SW0KW00.SW0KWUPD == "Y") /* changes made but not updated*/

      converseLib.validationFailed(289); /* warning*/
      SW0KW00.SW0KWEXT = "Y"; /* set exit switch*/
      SW0KW00.SW0KWSWR = "N"; /* clear data request*/
      SW0KW00.SW0KWSWF = "N"; /* clear format flag*/
      exit stack; /* exit to display screen*/

    end

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0KM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* Application find code*/
    end

    SW0KS13(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    converseLib.validationFailed(166); /* unable to xfer msg*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF7 or 8 have been pressed, don't allow scrolling if*/
   /* data errors exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* if pf7 pressed*/
   || converseVar.eventKey is pf8) /* or pf8*/

    if (SW0KW00.SW0KWERS != "            ") /* if errors exist*/

      converseLib.validationFailed(288); /* fix errors or cancel before pf7/8*/
      exit stack; /* exit to display screen*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf16) /* pf16 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0K300

// Reset highlighted fields
Function SW0K400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0KM001.XWHCD initialAttributes; /* WHSE CODE*/
  set SW0KM001.SWEPLLNB initialAttributes; /* PLAN NUMBER*/
  set SW0KM001.SW0KMDFL initialAttributes; /* default unexpected 'from' lane*/
  set SW0KM001.SW0KMDTL initialAttributes; /* default unexpected 'to' lane*/
  set SW0KM001.SW0KMDFLCS initialAttributes; /* default cs 'from' lane*/
  set SW0KM001.SW0KMDTLCS initialAttributes; /* default cs 'to' lane*/
  set SW0KM001.SW0KMDFLWP initialAttributes; /* default wp 'from' lane*/
  set SW0KM001.SW0KMDTLWP initialAttributes; /* default wp 'to' lane*/
  set SW0KM001.SW0KMDFLQC initialAttributes; /* default qa 'from' lane*/
  set SW0KM001.SW0KMDTLQC initialAttributes; /* default qa 'to' lane*/
  set SW0KM001.SW0KMDFLSP initialAttributes; /* default sp 'FR' lane*/
  set SW0KM001.SW0KMDFLDC initialAttributes; /* default DC 'FR' lane*/
  set SW0KM001.SW0KMLT1 initialAttributes; /* list request literal 1*/
  set SW0KM001.SW0KMLT2 initialAttributes; /* list request literal 2*/
  set SW0KM001.SW0KMANS initialAttributes; /* list request answer field*/

  SW0KW00.SW0KWLIX = 12; /* hit all 12 lines*/

  while (SW0KW00.SW0KWLIX > 0) /* reset all lines*/

    set SW0KM001.SW0KMFLN[SW0KWLIX] initialAttributes; /* 'from' lane number*/
    set SW0KM001.SW0KMTLN[SW0KWLIX] initialAttributes; /* 'to' lane number*/
    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX - 1; /* decrement counter*/

  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.XWHCD == "?") /* WAREHOUSE CODE*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(18);
                                   /* Indicate PF key not valid press enter*/
      exit stack; /* Exit to display map*/

    end

    /* ------------------------------------------------------------*/
     /* If requested, display the list of whse codes*/
    /* ------------------------------------------------------------*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "             WAREHOUSE CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0KM001.XWHCD = SW0KW01.XWHCD; /* restore prior code*/
      SW0KM001.XWHABRV = SW0KW01.XWHABRV; /* restore prior abrv*/
      SW0KW00.SW0KWSWF = "Y"; /* reformat screen*/

    else

      SW0KM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Save code*/
      SW0KM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* save abrv*/
      SLWREC.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* store code*/
      SW0KW00.SW0KWSWF = "Y"; /* request for screen format*/
      SW0KW00.SW0KWSWR = "Y"; /* request for new data*/

    end

    set SW0KM001.XWHCD cursor; /* Establish cursor position*/
    converseLib.clearScreen();
     /* Clear screen before displa*/
    SLWREC.XXXLOCID = "400"; /* Module identification*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* See if 'y' was entered in lane number list display field.*/
   /* ------------------------------------------------------------*/


  if (SW0KM001.SW0KMANS == "Y") /* list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(18);
                                   /* Indicate PF key not valid press enter*/
      exit stack; /* Exit to display map*/

    end
    /* -------------------------------------------------------*/
     /* Provide pop-up window to show valid lane numbers*/
    /* -------------------------------------------------------*/

    SW0K410(); /* window initialization*/
    XX0XW02.XX0XWHDR = "   VALID LANE NUMBERS"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      SW0K420(); /* Display the list*/
    end
    SW0KM001.SW0KMANS = "N"; /* clear list display request*/
    SW0KW00.SW0KWSWF = "N"; /* format screen request*/
    /* EZEFLO;*/
    converseLib.clearScreen();

  end


end // end SW0K400

// Initialization - pop up window
Function SW0K410()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  XPXX001();
                                   /* standard pop-up window initialization*/
  set SWCREC empty; /* dstloc.vlane001 record*/
  set SW0KW05 empty; /* lane pop-up window work record*/
  SW0KW05.SW0KWSWT = "N"; /* End of vlane001 table*/
  SW0KW05.SWCLNENB[1] = 0; /* beginning key*/


end // end SW0K410

// converse lane # pop up window
Function SW0K420()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If pf7, PF8 or first time through,*/
         /* scroll forward the table. Selection not allowed.*/
      /* 2) Converse the map.*/
      /* 3) Check for PFkey and scroll errors.*/
      /* 4) If ENTER pressed, return.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  set XX0XM001.XX0XMHDR cursor; /* dont show cursor in select fields*/
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "             ENTER TO EXIT            ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")   
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      if (XX0XW02.XX0XWCT1 > 50) /* if exceeds fifty pages*/
        XX0XW02.XX0XWFFL = "Y"; /* force end of table*/
      else
        SW0KW05.SWCLNENB[XX0XWCT1] = SWCREC.SWCLNENB; /* save last*/
        SW0KS83(); /* select dstloc.vlane001*/
        XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
        while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
         && SQLCA.VAGen_SQLCODE != 100) /* Or end of data*/
          SW0KS84(); /* ; fetch next dstloc.vlane001*/
          SW0KW05.SW0KWNUM = SWCREC.SWCLNENB; /* move bin to num*/
          XX0XM001.XX0XMCD[XX0XWCT2] = SW0KW05.SW0KWNUM; /* num to char*/
          if (SWCREC.XLNCD in XLNTBL.XLNCD)
            XX0XM001.XX0XMDES[XX0XWCT2] = XLNTBL.XLNDESC[sysVar.arrayIndex];
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] protect, invisible; /* no sel allowed*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        if (SQLCA.VAGen_SQLCODE == 100)
          SW0KW05.SW0KWSWT = "Y";
        end

        XX0XW02.XX0XWFFL = "N";
        SW0KS85(); /* close dstloc.vlane001*/
      end
    end

     /* *********************************************************/
     /* ***      If PF7 was pressed then scroll backward     ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      SW0KW05.SW0KWSWT = "N"; /* init end of price table flag*/
      if (XX0XW02.XX0XWCT1 > 1)
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1;
      end
      SWCREC.SWCLNENB = SW0KW05.SWCLNENB[XX0XWCT1];
      SW0KS83(); /* select dstloc.vlane001*/
      SW0KS84(); /* fetch dstloc.vlane001*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && SQLCA.VAGen_SQLCODE != 100) /* Or end of data*/
        SW0KW05.SW0KWNUM = SWCREC.SWCLNENB; /* bin to num*/
        XX0XM001.XX0XMCD[XX0XWCT2] = SW0KW05.SW0KWNUM; /* num to char*/
        if (SWCREC.XLNCD in XLNTBL.XLNCD)
          XX0XM001.XX0XMDES[XX0XWCT2] = XLNTBL.XLNDESC[sysVar.arrayIndex];
        end
        set XX0XM001.XX0XMSEL[XX0XWCT2] protect, invisible; /* no sel allowed*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
        SW0KS84();
      end
      SW0KS85(); /* close dstloc.vlane001*/
    end

  else
    XX0XW02.XX0XWCT2 = 1; /* set up screen index*/
    while (XX0XW02.XX0XWCT2 <= 10) /* until end of screen lines*/

      set XX0XM001.XX0XMSEL[XX0XWCT2] protect, invisible; /* no sel allowed*/
      XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* increment screen index*/

    end

  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && SW0KW05.SW0KWSWT == "Y")    /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWCT1 == 1)      /* And beginning of table*/
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
      else
        if (converseVar.eventKey not pf7
         && converseVar.eventKey not pf8
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end SW0K420

// Verify the entered data
Function SW0K500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(02); /* Item data only with option*/

  end

   /* ------------------------------------------------------------*/
   /* Verify fields if changes/entries occurred.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    if (SW0KM001.XWHCD != SW0KW01.XWHCD /* changed warehouse*/
     || SW0KM001.SWEPLLNB != SW0KW01.SWEPLLNB) /* changed plan number*/

      SW0K510(); /* validate key fields*/

    else

      SW0K520(); /* validate data entries*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Check for PF keys.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    SW0K530(); /* validate scroll request*/

  end

  if (converseVar.eventKey is pf14)

    SW0K550(); /* validate pf14 request*/

  end

  if (converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)

    SW0K540(); /* validate pf15 or pf16 request*/

  end

  if (converseVar.validationMsgNum != 0)

    exit stack; /* display error message*/

  end


end // end SW0K500

// Validate new key fields
Function SW0K510()
  SLWREC.XXXLOCID = "510";
  SW0KW00.SW0KWSWK = "N"; /* initialize error switch*/

   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

  set SWEREC empty;

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.XWHCD in XWHTBL.XWHCD)

    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")

      SW0KM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* save abrv*/

    else

      set SW0KM001.XWHCD cursor, bold;
      converseLib.validationFailed(10); /* status is inactive*/

    end

  else

    set SW0KM001.XWHCD cursor, bold;
    converseLib.validationFailed(11); /* invalid value*/

  end

  if (converseVar.validationMsgNum != 0)

    SW0KW00.SW0KWSWK = "Y"; /* set error flag*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SWEPLLNB > 0) /* plan number was entered*/

    SWEREC.SWEPLLNB = SW0KM001.SWEPLLNB; /* ready for retrieval*/

  else

    set SW0KM001.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
    SW0KW00.SW0KWSWK = "Y"; /* set error switch*/
    exit stack; /* exit to display map*/

  end

  SLWREC.XWHCD = SW0KM001.XWHCD;
  SLWREC.SWEPLLNB = SW0KM001.SWEPLLNB;

  SW0KW00.SW0KWSWR = "Y"; /* request for data - new keys*/


end // end SW0K510

// Validate keyed data fields
Function SW0K520()
   /* ------------------------------------------------------------*/
    /* Validate default lanes if entered*/
   /* ------------------------------------------------------------*/

  SW0KW00.SW0KWDER = " "; /* default error switch*/
  if (SW0KM001.SW0KMDFLQC != SW0KW01.SW0KWDFLQC /* if default*/
   /* qa from lane chgd*/
   || SW0KM001.SW0KMDTLQC != SW0KW01.SW0KWDTLQC) /* if default*/
                                   /* qa to lane chgd*/

    SW0K526(); /* edit default 'qc' lanes*/

    if (converseVar.validationMsgNum != 0) /* if error found*/

      SW0KW00.SW0KWDER = "Y"; /* set error switch for default lns*/

    else

      SW0KW00.SW0KWCUR = "Y"; /* set 'changes made' switch*/
    end

  end

  if (SW0KM001.SW0KMDFLWP != SW0KW01.SW0KWDFLWP /* if default*/
   /* wp from lane chgd*/
   || SW0KM001.SW0KMDTLWP != SW0KW01.SW0KWDTLWP) /* if default*/
                                   /* wp to lane chgd*/

    SW0K525(); /* edit default 'wp' lanes*/

    if (converseVar.validationMsgNum != 0) /* if error found*/

      SW0KW00.SW0KWDER = "Y"; /* set error switch for default lns*/

    else

      SW0KW00.SW0KWCUR = "Y"; /* set 'changes made' switch*/
    end

  end

  if (SW0KM001.SW0KMDFLSP != SW0KW01.SW0KWDFLSP /* if default*/
   /* wp from lane chgd*/
  )                                            
    SW0K528(); /* edit default 'sp' lanes*/

    if (converseVar.validationMsgNum != 0) /* if error found*/

      SW0KW00.SW0KWDER = "Y"; /* set error switch for default lns*/

    else

      SW0KW00.SW0KWCUR = "Y"; /* set 'changes made' switch*/
    end

  end

  if (SW0KM001.SW0KMDFLDC != SW0KW01.SW0KWDFLDC /* if default*/
   /* wp from lane chgd*/
  )                                            
    SW0K529(); /* edit default 'DC' lanes*/

    if (converseVar.validationMsgNum != 0) /* if error found*/

      SW0KW00.SW0KWDER = "Y"; /* set error switch for default lns*/

    else

      SW0KW00.SW0KWCUR = "Y"; /* set 'changes made' switch*/
    end

  end

  if (SW0KM001.SW0KMDFLCS != SW0KW01.SW0KWDFLCS /* if default*/
   /* cs from lane chgd*/
   || SW0KM001.SW0KMDTLCS != SW0KW01.SW0KWDTLCS) /* if default*/
                                   /* cs to lane chgd*/

    SW0K524(); /* edit default 'cs' lanes*/

    if (converseVar.validationMsgNum != 0) /* if error found*/

      SW0KW00.SW0KWDER = "Y"; /* set error switch for default lns*/

    else

      SW0KW00.SW0KWCUR = "Y"; /* set 'changes made' switch*/
    end

  end

  if (SW0KM001.SW0KMDFL != SW0KW01.SW0KWDFL /* if default ux from lane chgd*/
   || SW0KM001.SW0KMDTL != SW0KW01.SW0KWDTL) /* if default ux to lane chgd*/

    SW0K521(); /* edit default 'ux' lanes*/

    if (converseVar.validationMsgNum != 0) /* if error found*/

      SW0KW00.SW0KWDER = "Y"; /* set error switch for default lns*/

    else

      SW0KW00.SW0KWCUR = "Y"; /* set 'changes made' switch*/
    end

  end

  if (SW0KW00.SW0KWDER != "Y")
    if (SW0KM001.SW0KMDFLQC != SW0KW01.SW0KWDFLQC /* if default*/
     /* qa from lane chgd*/
     || SW0KM001.SW0KMDTLQC != SW0KW01.SW0KWDTLQC /* if default*/
     /* DC to lane chgd*/
     || SW0KM001.SW0KMDFLDC != SW0KW01.SW0KWDFLDC /* if default*/
     /* sp from lane chgd*/
     || SW0KM001.SW0KMDFLSP != SW0KW01.SW0KWDFLSP /* if default*/
     /* sp from lane chgd*/
     || SW0KM001.SW0KMDFLWP != SW0KW01.SW0KWDFLWP /* if default*/
     /* wp from lane chgd*/
     || SW0KM001.SW0KMDTLWP != SW0KW01.SW0KWDTLWP /* if default*/
     /* wp to lane chgd*/
     || SW0KM001.SW0KMDFLCS != SW0KW01.SW0KWDFLCS /* if default*/
     /* cs from lane chgd*/
     || SW0KM001.SW0KMDTLCS != SW0KW01.SW0KWDTLCS /* if default*/
     /* cs to lane chgd*/
     || SW0KM001.SW0KMDFL != SW0KW01.SW0KWDFL     /* if default*/
     /* ux from lane chgd*/
     || SW0KM001.SW0KMDTL != SW0KW01.SW0KWDTL)    /* if default*/
                                   /* ux to lane chgd*/

      SW0K527(); /* update temp storage*/

    end
  end

   /* ------------------------------------------------------------*/
    /* Validate keyed data.*/
   /* ------------------------------------------------------------*/

  SW0KW00.SW0KWSER = "            "; /* clear data error flags*/

  SW0K522(); /* validate multiple lines on screen*/

  if (SW0KW00.SW0KWCUR == "Y") /* changes made to current screen*/

    if (SW0KW00.SW0KWSER != "YYYYYYYYYYYY") /* if every line not in error*/

      SW0K523(); /* edit screen against t/s*/

    end

  end

   /* ------------------------------------------------------------*/
    /* If data errors exist, determine where to place cursor*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.SW0KWSER != "            " /* if there are data errors*/
   && SW0KW00.SW0KWSWK != "Y"            /* but no key errors*/
   && SW0KW00.SW0KWDER != "Y")           /* and no default ux lane errors*/

    SW0KW00.SW0KWLIX = 1; /* init counter*/

    while (SW0KW00.SW0KWLIX < 13) /* hit all switches*/

      if (SW0KW00.SW0KWSWE[SW0KWLIX] == "Y") /* if first line with error*/

        set SW0KM001.SW0KMFLN[SW0KWLIX] cursor; /* set cursor*/
        SW0KW00.SW0KWLIX = 14; /* force end of routine*/

      end

      SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment counter*/

    end

  end


end // end SW0K520

// Validate default 'ux' lanes
Function SW0K521()
   /* ------------------------------------------------------------*/
    /* Validate default unexpected lanes*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SW0KMDFL > 0 /* from default lane entered*/
   && SW0KM001.SW0KMDTL == 0) /* 'to' default lane not entered*/

    SW0KM001.SW0KMDTL = SW0KM001.SW0KMDFL; /* set to same value*/

  end

  if (SW0KM001.SW0KMDFL > SW0KM001.SW0KMDTL) /* if from lane > to lane*/

    converseLib.validationFailed(222); /* 'from' cant be more than 'to'*/
    set SW0KM001.SW0KMDFL cursor, bold; /* highlight*/
    set SW0KM001.SW0KMDTL bold; /* highlight*/
    return;

  end

  if (SW0KM001.SW0KMDFL == 0 /* zero default from lane entered*/
   && SW0KM001.SW0KMDTL == 0) /* zero default to lane entered*/

    return; /* okay if both are zero*/

  end

  SWQREC.SWQFRLAN = SW0KM001.SW0KMDFL; /* set up record for validate*/
  SWQREC.SWQTOLAN = SW0KM001.SW0KMDTL;
  SWCREC.XLNCD = "UX"; /* set lane type code*/
  SWQREC.SWQFUNCD = "SC"; /* select between function*/
  SWQREC.SWQFRINB = 0; /* zero from inspection number*/
  SWQREC.SWQTOINB = 0; /* zero to inspection number*/
  SW0KS40();
  if (SWQREC.SWQCOUNT == 0) /* bad data*/

    converseLib.validationFailed(296); /* invalid lane range*/
    set SW0KM001.SW0KMDFL cursor, bold; /* highlight*/
    set SW0KM001.SW0KMDTL bold; /* highlight*/

  end


end // end SW0K521

// Validate multi lane pairs
Function SW0K522()
   /* ------------------------------------------------------------*/
    /* Validate keyed data.*/
   /* ------------------------------------------------------------*/

  SW0KW00.SW0KWLIX = 1; /* set line counter*/

  while (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN) /* until all lines w/data*/

    if (SW0KW01.SW0KWDFLQC != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "QC"
     || SW0KW01.SW0KWDFLWP != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "WP"
     || SW0KW01.SW0KWDFLCS != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "CS"
     || SW0KW01.SW0KWDFL != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "UX")

    else
      set SW0KM001.SW0KMFLN[SW0KWLIX] normal; /* open field*/
      set SW0KM001.SW0KMTLN[SW0KWLIX] normal; /* open field*/
      if (SW0KM001.SW0KMFLN[SW0KWLIX] != SW0KW01.SW0KWFLN[SW0KWLIX]
       || SW0KM001.SW0KMTLN[SW0KWLIX] != SW0KW01.SW0KWTLN[SW0KWLIX])

        SW0KW00.SW0KWCUR = "Y"; /* changes have been made this pass*/
        SW0KSE2(); /* edit this line*/

      else
        if (SW0KM001.SWHLNCAT[SW0KWLIX] != "UX" /* not an unexpected lane*/
         && SW0KM001.SWHLNCAT[SW0KWLIX] != "CS" /* not an cs lane*/
         && SW0KM001.SWHLNCAT[SW0KWLIX] != "WP" /* not an wp lane*/
         && SW0KM001.SWHLNCAT[SW0KWLIX] != "QC") /* not an qc lane*/

          if (SW0KW00.SW0KWCUR == "Y" /* if changes to current screen*/
           || SW0KW00.SW0KWUPD == "Y") /* if any changes made at all*/

            if (SW0KM001.SW0KMFLN[SW0KWLIX] == 0 /* cant be zero*/
             && SW0KM001.SW0KMLRQ[SW0KWLIX] != 0) /* if req'd > 0*/

              SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag*/
              converseLib.validationFailed(9); /* entry required*/
              set SW0KM001.SW0KMFLN[SW0KWLIX] bold;
              set SW0KM001.SW0KMTLN[SW0KWLIX] bold;

            end

          end

        end

      end

    end

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* decrement counter*/

  end


end // end SW0K522

// Validate lanes vs temp storage
Function SW0K523()
   /* ------------------------------------------------------------*/
    /* Validate lines on screen against t/s*/
   /* ------------------------------------------------------------*/

  SW0KW00.SW0KWTSP = 1; /* initialize temp storage work page no*/

  while (SW0KW00.SW0KWTSP <= SW0KW00.TA5TSQIX /* work t/s page le total pgs*/
   && SW0KW00.SW0KWSER != "YYYYYYYYYYYY") /* and all lines not in error*/

    if (SW0KW00.SW0KWTSP != SW0KW00.XXXTSPAG) /* dont compare the same page*/

      TA5REC.TA5TSQIX = SW0KW00.SW0KWTSP; /* set page to retrieve*/
      SW0KS12(); /* read temp storage page into alt w06*/
      SW0KSE3(); /* edit current screen data against t/s page*/

    end

    SW0KW00.SW0KWTSP = SW0KW00.SW0KWTSP + 1; /* increment t/s page #*/

  end


end // end SW0K523

// Validate default 'ux' lanes
Function SW0K524()
   /* ------------------------------------------------------------*/
    /* Validate default cs lanes*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SW0KMDFLCS > 0 /* from default lane entered*/
   && SW0KM001.SW0KMDTLCS == 0) /* 'to' default lane not entered*/

    SW0KM001.SW0KMDTLCS = SW0KM001.SW0KMDFLCS; /* set to same value*/

  end

  if (SW0KM001.SW0KMDFLCS > SW0KM001.SW0KMDTLCS) /* if from lane > to lane*/

    converseLib.validationFailed(222); /* 'from' cant be more than 'to'*/
    set SW0KM001.SW0KMDFLCS cursor, bold; /* highlight*/
    set SW0KM001.SW0KMDTLCS bold; /* highlight*/
    return;

  end

  if (SW0KM001.SW0KMDFLCS == 0 /* zero default from lane entered*/
   && SW0KM001.SW0KMDTLCS == 0) /* zero default to lane entered*/

    return; /* okay if both are zero*/

  end

  SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLCS; /* set up record for*/
  SWQREC.SWQTOLAN = SW0KM001.SW0KMDTLCS; /* validate*/
  SWCREC.XLNCD = "CS"; /* set lane type code*/
  SWQREC.SWQFUNCD = "SC"; /* select between function*/
  SWQREC.SWQFRINB = 0; /* zero from inspection number*/
  SWQREC.SWQTOINB = 0; /* zero to inspection number*/
  SW0KS40();
  if (SWQREC.SWQCOUNT == 0) /* bad data*/

    converseLib.validationFailed(296); /* invalid lane range*/
    set SW0KM001.SW0KMDFLCS cursor, bold; /* highlight*/
    set SW0KM001.SW0KMDTLCS bold; /* highlight*/

  end


end // end SW0K524

// Validate default 'ux' lanes
Function SW0K525()
   /* ------------------------------------------------------------*/
    /* Validate default wp lanes*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SW0KMDFLWP > 0 /* from default lane entered*/
   && SW0KM001.SW0KMDTLWP == 0) /* 'to' default lane not entered*/

    SW0KM001.SW0KMDTLWP = SW0KM001.SW0KMDFLWP; /* set to same value*/

  end

  if (SW0KM001.SW0KMDFLWP > SW0KM001.SW0KMDTLWP) /* if from lane > to lane*/

    converseLib.validationFailed(222); /* 'from' cant be more than 'to'*/
    set SW0KM001.SW0KMDFLWP cursor, bold; /* highlight*/
    set SW0KM001.SW0KMDTLWP bold; /* highlight*/
    return;

  end

  if (SW0KM001.SW0KMDFLWP == 0 /* zero default from lane entered*/
   && SW0KM001.SW0KMDTLWP == 0) /* zero default to lane entered*/

    return; /* okay if both are zero*/

  end

  SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLWP; /* set up record for*/
  SWQREC.SWQTOLAN = SW0KM001.SW0KMDTLWP; /* validate*/
  SWCREC.XLNCD = "WP"; /* set lane type code*/
  SWQREC.SWQFUNCD = "SC"; /* select between function*/
  SWQREC.SWQFRINB = 0; /* zero from inspection number*/
  SWQREC.SWQTOINB = 0; /* zero to inspection number*/
  SW0KS40();
  if (SWQREC.SWQCOUNT == 0) /* bad data*/

    converseLib.validationFailed(296); /* invalid lane range*/
    set SW0KM001.SW0KMDFLWP cursor, bold; /* highlight*/
    set SW0KM001.SW0KMDTLWP bold; /* highlight*/

  end


end // end SW0K525

// Validate default 'ux' lanes
Function SW0K526()
   /* ------------------------------------------------------------*/
    /* Validate default qa lanes*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SW0KMDFLQC > 0 /* from default lane entered*/
   && SW0KM001.SW0KMDTLQC == 0) /* 'to' default lane not entered*/

    SW0KM001.SW0KMDTLQC = SW0KM001.SW0KMDFLQC; /* set to same value*/

  end

  if (SW0KM001.SW0KMDFLQC > SW0KM001.SW0KMDTLQC) /* if from lane > to lane*/

    converseLib.validationFailed(222); /* 'from' cant be more than 'to'*/
    set SW0KM001.SW0KMDFLQC cursor, bold; /* highlight*/
    set SW0KM001.SW0KMDTLQC bold; /* highlight*/
    return;

  end

  if (SW0KM001.SW0KMDFLQC == 0 /* zero default from lane entered*/
   && SW0KM001.SW0KMDTLQC == 0) /* zero default to lane entered*/

    return; /* okay if both are zero*/

  end

  SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLQC; /* set up record for*/
  SWQREC.SWQTOLAN = SW0KM001.SW0KMDTLQC; /* validate*/
  SWCREC.XLNCD = "QC"; /* set lane type code*/
  SWQREC.SWQFUNCD = "SC"; /* select between function*/
  SWQREC.SWQFRINB = 0; /* zero from inspection number*/
  SWQREC.SWQTOINB = 0; /* zero to inspection number*/
  SW0KS40();
  if (SWQREC.SWQCOUNT == 0) /* bad data*/

    converseLib.validationFailed(296); /* invalid lane range*/
    set SW0KM001.SW0KMDFLQC cursor, bold; /* highlight*/
    set SW0KM001.SW0KMDTLQC bold; /* highlight*/

  end


end // end SW0K526

// Validate lanes vs temp storage
Function SW0K527()
   /* ------------------------------------------------------------*/
    /* Validate lines on screen against t/s*/
   /* ------------------------------------------------------------*/

  SW0KW00.SW0KWTSP = 1; /* initialize temp storage work page no*/

  while (SW0KW00.SW0KWTSP <= SW0KW00.TA5TSQIX) /* work t/s page le total pgs*/

    TA5REC.TA5TSQIX = SW0KW00.SW0KWTSP; /* set page to retrieve*/
    SW0KS12(); /* read temp storage page into alt w06*/
    SW0KSE7(); /* update current page with defaults*/
    SW0KS15(); /* update t/s with the new page*/

    SW0KW00.SW0KWTSP = SW0KW00.SW0KWTSP + 1; /* increment t/s page #*/

  end

  SW0KW00.SW0KWSWF = "Y";

end // end SW0K527

// Validate default 'sp' lanes
Function SW0K528()
   /* ------------------------------------------------------------*/
    /* Validate default sp lanes*/
   /* ------------------------------------------------------------*/



  if (SW0KM001.SW0KMDFLSP == 0 /* zero default from lane entered*/
  )                           
    return; /* okay if both are zero*/

  end

  SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLSP; /* set up record for*/
  SWQREC.SWQTOLAN = SW0KM001.SW0KMDFLSP; /* set up record for*/
  SWCREC.XLNCD = "SP"; /* set lane type code*/
  SWQREC.SWQFUNCD = "SC"; /* select between function*/
  SWQREC.SWQFRINB = 0; /* zero from inspection number*/
  SWQREC.SWQTOINB = 0; /* zero to inspection number*/
  SW0KS40();
  if (SWQREC.SWQCOUNT == 0) /* bad data*/

    converseLib.validationFailed(296); /* invalid lane range*/
    set SW0KM001.SW0KMDFLSP cursor, bold; /* highlight*/

  end


end // end SW0K528

// Validate default 'DC' lanes
Function SW0K529()
   /* ------------------------------------------------------------*/
    /* Validate default DC lanes*/
   /* ------------------------------------------------------------*/



  if (SW0KM001.SW0KMDFLDC == 0 /* zero default from lane entered*/
  )                           
    return; /* okay if both are zero*/

  end

  SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLDC; /* set up record for*/
  SWQREC.SWQTOLAN = SW0KM001.SW0KMDFLDC; /* set up record for*/
  SWCREC.XLNCD = "DC"; /* set lane type code*/
  SWQREC.SWQFUNCD = "SC"; /* select between function*/
  SWQREC.SWQFRINB = 0; /* zero from inDCection number*/
  SWQREC.SWQTOINB = 0; /* zero to inDCection number*/
  SW0KS40();
  if (SWQREC.SWQCOUNT == 0) /* bad data*/

    converseLib.validationFailed(296); /* invalid lane range*/
    set SW0KM001.SW0KMDFLDC cursor, bold; /* highlight*/

  end


end // end SW0K529

// validate scroll request
Function SW0K530()
   /* ------------------------------------------------------------*/
   /* If key has changed, error*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.XWHCD != SW0KW01.XWHCD
   /* if warehouse (key) has changed*/
   || SW0KM001.SWEPLLNB != SW0KW01.SWEPLLNB) /* or plan# (key) has changed*/

    SLWREC.XXXLOCID = "530"; /* Module identification*/
    converseLib.validationFailed(60); /* change the key on enter*/
    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors exist, error*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.SW0KWSWK == "Y"             /* key field errors exist*/
   || SW0KW00.SW0KWSER != "             " /* data errors exist*/
   || SW0KW00.SW0KWDER == "Y")            /* default lanes in error*/

    converseLib.validationFailed(288); /* fix errors before paging*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If data was modified this pass, send error msg.*/
   /* ------------------------------------------------------------*/

  SW0KSE1(); /* check if any data on screen was modified this pass*/

  if (SW0KW00.SW0KWSER != "             ") /* there were changes*/

    converseLib.validationFailed(6); /* cant change data while scrolling*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0KW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "530"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0KW00.XXXTSPAG >= SW0KW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "530"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

end // end SW0K530

// validate job submit request
Function SW0K540()
   /* ---------------------------------------------------------*/
   /* can't submit or xfer if errors still exist*/
   /* ---------------------------------------------------------*/

  if (SW0KW00.SW0KWSWK == "Y" /* key errors exist*/
   || SW0KW00.SW0KWDER == "Y" /* default lanes have errors*/
   || SW0KW00.SW0KWSER != "             ") /* data lines in error*/

    converseLib.validationFailed(303);
                                   /* fix errors before requesting function*/
    SW0KW00.SW0KWSWR = "N"; /* clear request flag*/
    SW0KW00.SW0KWSWF = "N"; /* clear format flag*/
    SW0KS90(); /* re-open fields for correction*/
    exit stack;

  end

   /* ---------------------------------------------------------*/
   /* can't submit when changes haven't been updated*/
   /* ---------------------------------------------------------*/

  if (SW0KW00.SW0KWSWU != "Y") /* database hasn't been updated*/

    if (SW0KW00.SW0KWUPD == "Y") /* updates have taken place in t/s*/

      if (converseVar.eventKey is pf16) /* xfer request*/

        converseLib.validationFailed(289); /* warning changes made*/
        SW0KS90(); /* open fields on screen*/
        exit stack;

      else

        converseLib.validationFailed(304); /* must update before submitting plan*/
        SW0KS90(); /* open fields on screen*/
        exit stack;

      end

    end

  end

   /* ---------------------------------------------------------*/
   /* check if data has been changed on screen this pass*/
   /* ---------------------------------------------------------*/

  SW0KSE1(); /* loop through lines to see if changes have taken place*/

   /* ---------------------------------------------------------*/
   /* if pf15 requested, make sure that if lanes requested > 0*/
   /* lanes assgnd is > 0.*/
   /* ---------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* job submit requested*/

    SW0KSE5(); /* verify lanes assgnd vs. lanes requested*/

  end


end // end SW0K540

// Validate pf14 request
Function SW0K550()
  SLWREC.XXXLOCID = "550";

   /* ------------------------------------------------------------*/
            /* ----- verify the pf14 request -----*/
   /* ------------------------------------------------------------*/
   /* Check if changes were made on current screen*/
   /* Can't change keys, data changes okay*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.XWHCD != SW0KW01.XWHCD) /* warehouse changed*/

    converseLib.validationFailed(60); /* cant change keys with req function*/
    set SW0KM001.XWHCD cursor, bold; /* highlight*/

  end

  if (SW0KM001.SWEPLLNB != SW0KW01.SWEPLLNB) /* plan number changed*/

    converseLib.validationFailed(60); /* cant change keys with req function*/
    set SW0KM001.SWEPLLNB cursor, bold; /* highlight*/

  end

  SW0K520(); /* validate changes made this pass*/

  if (SW0KW00.SW0KWSWK == "Y" /* if there are key field errors*/
   || SW0KW00.SW0KWDER == "Y" /* or there are default lane errors*/
   || SW0KW00.SW0KWSER != "             ") /* or there are data errors*/

    converseLib.validationFailed(303); /* fix errors first msg*/
    SW0KW00.SW0KWSWR = "N"; /* clear request flag*/
    SW0KW00.SW0KWSWF = "N"; /* clear format flag*/
    SW0KS90(); /* open fields*/
    exit stack; /* exit to display screen*/

  end

   /* ------------------------------------------------------------*/
   /* if we are still here, and current scrn switch = 'y'*/
   /* move screen fields to w01 fields in order to update t/s*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.SW0KWCUR == "Y") /* changes were made to screen*/

    SW0KW00.SW0KWUPD = "Y"; /* set update switch*/

    SW0KSE8(); /* move changed lines to w01 fields*/

  end

   /* ------------------------------------------------------------*/
    /* update the current screen to t/s*/
   /* ------------------------------------------------------------*/

  SW0KS11(); /* update current screen info to t/s*/

   /* ------------------------------------------------------------*/
   /* check through t/s for any empty from and to (non-ux) lanes*/
   /* ------------------------------------------------------------*/

   /* SW0KSE9;*/
  SW0KSE5();

   /* IF SW0KW00.SW0KWSUB NE 'Y'      ; if data not complete*/
    /* ;*/
    /* MOVE 223 TO EZEMNO            ; must enter all lanes befor*/
    /* EZERTN;*/
    /* ;*/
   /* END ;*/

  if (SW0KW00.SW0KWUPD != "Y") /* no changes made*/

    converseLib.validationFailed(70); /* no need to update*/
    SW0KW00.SW0KWSWR = "N"; /* clear data request*/
    SW0KW00.SW0KWSWF = "N"; /* clear format request*/
    exit stack;

  end


end // end SW0K550

// Process valid input request
Function SW0K600()

  SW0KW00.SW0KWSWF = "Y"; /* format map*/

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* scroll backward request*/
    SW0KW00.XXXTSPAG = SW0KW00.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* scroll forward request*/
    SW0KW00.XXXTSPAG = SW0KW00.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* if PF14 was pressed, update data base*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* PF14 pressed*/

    SW0K610(); /* update all data to db*/

  end

   /* ------------------------------------------------------------*/
   /* if PF15 was pressed, submit batch job*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* PF15 pressed*/

    SW0K620(); /* submit JCL for batch job*/

    if (SW0KW01.XWHCD == "07") /* WILSONVILLE*/
      COMMAREA.CATOAP = "SW0L"; /* set transfer application*/
      SW0KS13(); /* purge temporary storage*/
      SLWREC.SLWMSGNO = 311; /* job submitted msg*/
      SLWREC.SWEPLLNB = SW0KM001.SWEPLLNB; /* move plan nbr*/
      COMMAREA.XWHCD = SW0KM001.XWHCD; /* move whse nbr*/
      XSSL001(); /* standard stock locate exit*/

      converseLib.validationFailed(166); /* didnt xfer - msg*/
      SW0KW00.SW0KWSWR = "Y"; /* request for data*/
      exit stack;
    end


  end

   /* ------------------------------------------------------------*/
   /* PF16 was pressed, transfer control to SW0L*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16)

    COMMAREA.CATOAP = "SW0L"; /* set transfer application*/
    SW0KS13(); /* purge temporary storage*/
    SLWREC.TSHCNTNR = SW0KM001.TSHCNTNR[1]; /* move container nbr*/
    SLWREC.SWEPLLNB = SW0KM001.SWEPLLNB; /* move plan nbr*/
    COMMAREA.XWHCD = SW0KM001.XWHCD; /* move whse nbr*/
    XSSL001(); /* standard stock locate exit*/

    converseLib.validationFailed(166); /* didnt xfer - msg*/
    SW0KW00.SW0KWSWR = "Y"; /* request for data*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If we are here, then ENTER was pressed.*/
   /* No action is keys changed, else move fields to W01 storage*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.XWHCD != SW0KW01.XWHCD /* whse changed*/
   || SW0KM001.SWEPLLNB != SW0KW01.SWEPLLNB) /* plan # changed*/

    return; /* we're done*/

  end

  SW0K630(); /* move chgd line data*/

  if (SW0KM001.SW0KMDFL != SW0KW01.SW0KWDFL) /* default from ln ch*/

    SW0KW01.SW0KWDFL = SW0KM001.SW0KMDFL; /* save new value*/

  end

  if (SW0KM001.SW0KMDTL != SW0KW01.SW0KWDTL) /* default 'to' lane*/

    SW0KW01.SW0KWDTL = SW0KM001.SW0KMDTL; /* save new value*/

  end

  if (SW0KM001.SW0KMDFLCS != SW0KW01.SW0KWDFLCS) /* default from ln ch*/

    SW0KW01.SW0KWDFLCS = SW0KM001.SW0KMDFLCS; /* save new value*/

  end

  if (SW0KM001.SW0KMDTLCS != SW0KW01.SW0KWDTLCS) /* default 'to' lane*/

    SW0KW01.SW0KWDTLCS = SW0KM001.SW0KMDTLCS; /* save new value*/

  end

  if (SW0KM001.SW0KMDFLWP != SW0KW01.SW0KWDFLWP) /* default from ln ch*/

    SW0KW01.SW0KWDFLWP = SW0KM001.SW0KMDFLWP; /* save new value*/

  end

  if (SW0KM001.SW0KMDTLWP != SW0KW01.SW0KWDTLWP) /* default 'to' lane*/

    SW0KW01.SW0KWDTLWP = SW0KM001.SW0KMDTLWP; /* save new value*/

  end

  if (SW0KM001.SW0KMDFLQC != SW0KW01.SW0KWDFLQC) /* default from ln ch*/

    SW0KW01.SW0KWDFLQC = SW0KM001.SW0KMDFLQC; /* save new value*/

  end

  if (SW0KM001.SW0KMDTLQC != SW0KW01.SW0KWDTLQC) /* default 'to' lane*/

    SW0KW01.SW0KWDTLQC = SW0KM001.SW0KMDTLQC; /* save new value*/

  end

  if (SW0KM001.SW0KMDFLSP != SW0KW01.SW0KWDFLSP) /* default from ln ch*/

    SW0KW01.SW0KWDFLSP = SW0KM001.SW0KMDFLSP; /* save new value*/

  end

  if (SW0KM001.SW0KMDFLDC != SW0KW01.SW0KWDFLDC) /* default from ln ch*/

    SW0KW01.SW0KWDFLDC = SW0KM001.SW0KMDFLDC; /* save new value*/

  end

  exit stack;

end // end SW0K600

// Update database
Function SW0K610()
   /* ------------------------------------------------------------*/
    /* ------------  Update data base record  ------------*/


   /* Process narrative:*/

     /* 1) For each new whse/plan#/container/gpc/po combo, a*/
        /* select unique read against the dstloc.vplcpo01 db*/
     /* 2) 'zzz' fields should match - if not, data has been*/
        /* updated - send message and start user over again.*/
     /* 3) Lane info will be placed in appropriate lane pairs in*/
        /* SWFREC. This is done by reading t/s lines until a*/
        /* break in key fields (whse/plan#/contnr/gpc/po).*/
     /* 4) If 'UX' type lanes are 0, but default 'UX' lanes > 0,*/
        /* the default values will be stored in 'UX' pair.*/
     /* 5) Dstloc.vplcpo01 record will be updated*/
   /* ------------------------------------------------------------*/

  SW0KW00.XXXTSPAG = 1; /* initialize temp storage work page no*/
   /* ET SWFREC EMPTY;                 /* clear swfrec for read/updates*/

  while (SW0KW00.XXXTSPAG <= SW0KW00.TA5TSQIX) /* work t/s page le total pgs*/

    SW0KW00.SW0KWLIX = 1; /* initialize index*/
    TA5REC.TA5TSQIX = SW0KW00.XXXTSPAG; /* set page to retrieve*/
    SW0KS10(); /* get t/s page*/

    while (SW0KW00.SW0KWLIX <= SW0KW02.SW0KWLND) /* dont hit blank lines*/
       /* if keys are the same*/
      if (SW0KW00.XWHCD == SW0KW01.XWHCD
       && SW0KW00.SWEPLLNB == SW0KW01.SWEPLLNB
       && SW0KW00.TSHCNTNR == SW0KW02.TSHCNTNR[SW0KWLIX]
       && SW0KW00.XGPCD == SW0KW02.XGPCD[SW0KWLIX]
       && SW0KW00.PC3PONBR == SW0KW02.PC3PONBR[SW0KWLIX])

       /* MOVE SW0KW01.XWHCD TO SWFREC.XWHCD;*/
       /* MOVE SW0KW01.SWEPLLNB TO SWFREC.SWEPLLNB;*/
       /* MOVE SW0KW02.TSHCNTNR(SW0KWLIX) TO SWFREC.TSHCNTNR;*/
       /* MOVE SW0KW02.XGPCD(SW0KWLIX) TO SWFREC.XGPCD;*/
       /* MOVE SW0KW02.PC3PONBR(SW0KWLIX) TO SWFREC.PC3PONBR;*/
       /* MOVE SW0KW02.ZZZCHGCT(SW0KWLIX) TO SWFREC.ZZZCHGCT;*/

        SW0KSE6();
                                   /* move lane pairs to appropriate fields*/

      else

        if (SWFREC.XWHCD != "  ") /* not first time*/

          SW0KS31(); /* update dstloc.vplcpo01*/

        end

        set SWFREC empty; /* clear swfrec for read/updates*/
        SW0KS30(); /* select unique dstloc.vplcpo01*/
        SW0KSE6(); /* move lane pairs to appropriate fields*/

      end

      SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment line index*/

    end

    SW0KW00.XXXTSPAG = SW0KW00.XXXTSPAG + 1; /* increment t/s page #*/

  end
  SW0KS31(); /* update last record*/

   /* ------------------------------------------------------------*/
   /* if we made it here, we had a successful completion*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* commit changes*/
  SLWREC.SLWMSGNO = 20; /* update successful msg*/
  SW0KW00.SW0KWSWR = "Y"; /* reload data to get zzz's*/
  SW0KW00.SW0KWSWU = "Y"; /* set 'data base updated' switch*/
   /* MOVE 'Y' TO SW0KW00.SW0KWSUB    ; plan may now be submitted*/
  SW0KW00.SW0KWUPD = "N"; /* no more pending updates*/


end // end SW0K610

// Set up JCL for batch submit
Function SW0K620()
   /* -----------------------------------------------------*/
       /* SET UP TA6REC FOR BATCH JOB SUBMISSION*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0KT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      SW0KW03.XWHCD = SW0KM001.XWHCD; /* warehouse code*/
      SW0KW03.SW0KWPLN = SW0KM001.SWEPLLNB; /* plan number*/

      TA6REC.TARJCL[TA6INDEX] = SW0KW03.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0KT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0KT.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SW0KT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/

    else

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "310"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SW0K620

// Move changed lanes to w01
Function SW0K630()
   /* ------------------------------------------------------------*/
    /* If any updates have taken place, set 'upd' switch*/
   /* ------------------------------------------------------------*/

  if (SW0KW00.SW0KWCUR == "Y") /* updates this pass*/

    SW0KW00.SW0KWUPD = "Y"; /* set update switch*/

  end

   /* ------------------------------------------------------------*/
    /* If line data has changed, moved lane info to w01*/
   /* ------------------------------------------------------------*/

  SW0KSE8(); /* move m001 to w01*/


end // end SW0K630

// update temporary storage
Function SW0KS08()
   /* ------------------------------------------------------------*/
   /* move all current screen data to record W02 for t/s update*/
   /* ------------------------------------------------------------*/

  set SW0KW02 empty; /* clear t/s record*/
  SW0KW00.SW0KWLIX = 1;
  SW0KW02.SW0KWLND = SW0KW01.SW0KWDLN; /* total lines*/

  while (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN) /* til all lines moved*/

    SW0KW02.TSHCNTNR[SW0KWLIX] = SW0KW01.TSHCNTNR[SW0KWLIX];
    SW0KW02.XGPCD[SW0KWLIX] = SW0KW01.XGPCD[SW0KWLIX];
    SW0KW02.PC3PONBR[SW0KWLIX] = SW0KW01.PC3PONBR[SW0KWLIX];
    SW0KW02.SW0KMPID[SW0KWLIX] = SW0KW01.SW0KWPID[SW0KWLIX];
    SW0KW02.SWHLNCAT[SW0KWLIX] = SW0KW01.SWHLNCAT[SW0KWLIX];
    SW0KW02.SW0KMLRQ[SW0KWLIX] = SW0KW01.SW0KWLRQ[SW0KWLIX];
    SW0KW02.SW0KMFLN[SW0KWLIX] = SW0KW01.SW0KWFLN[SW0KWLIX];
    SW0KW02.SW0KMTLN[SW0KWLIX] = SW0KW01.SW0KWTLN[SW0KWLIX];
    SW0KW02.SW0KMLAS[SW0KWLIX] = SW0KW01.SW0KWLAS[SW0KWLIX];
    SW0KW02.ZZZCHGDT[SW0KWLIX] = SW0KW01.ZZZCHGDT[SW0KWLIX];
    SW0KW02.ZZZCHGTM[SW0KWLIX] = SW0KW01.ZZZCHGTM[SW0KWLIX];
    SW0KW02.ZZZCHGCT[SW0KWLIX] = SW0KW01.ZZZCHGCT[SW0KWLIX];

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment counter*/

  end

   /* ------------------------------------------------------------*/
   /* Update the page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = SW0KW00.SW0KWCTS; /* page to update*/
  SW0KW02.XXXTSLEN = SW0KW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SW0KW00.SW0KWCUR = "N"; /* clear current screen changes switch*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";

  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS08

// read temporary storage
Function SW0KS10()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  set SW0KW02 empty; /* clear w02 record*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SW0KW02.XXXTSLEN = SW0KW00.XXXTSLEN;
  TA5REC.TA5TSQIX = SW0KW00.XXXTSPAG;
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SW0KW00.SW0KWCTS = TA5REC.TA5TSQIX; /* set current w02 t/s page*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1TYPE = "APPL"; /* t/s error*/
  SLWREC.XXXLOCID = "S10"; /* Module identification*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";

  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS10

// update temporary storage
Function SW0KS11()
   /* ------------------------------------------------------------*/
   /* move all current screen data to record W02 for t/s update*/
   /* ------------------------------------------------------------*/

  set SW0KW02 empty; /* clear t/s record*/
  SW0KW00.SW0KWLIX = 1;
  SW0KW02.SW0KWLND = SW0KW01.SW0KWDLN; /* total lines*/

  while (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN) /* til all lines moved*/

    SW0KW02.TSHCNTNR[SW0KWLIX] = SW0KW01.TSHCNTNR[SW0KWLIX];
    SW0KW02.XGPCD[SW0KWLIX] = SW0KW01.XGPCD[SW0KWLIX];
    SW0KW02.PC3PONBR[SW0KWLIX] = SW0KW01.PC3PONBR[SW0KWLIX];
    SW0KW02.SW0KMPID[SW0KWLIX] = SW0KW01.SW0KWPID[SW0KWLIX];
    SW0KW02.SWHLNCAT[SW0KWLIX] = SW0KW01.SWHLNCAT[SW0KWLIX];
    SW0KW02.SW0KMLRQ[SW0KWLIX] = SW0KW01.SW0KWLRQ[SW0KWLIX];
    SW0KW02.SW0KMFLN[SW0KWLIX] = SW0KW01.SW0KWFLN[SW0KWLIX];
    SW0KW02.SW0KMTLN[SW0KWLIX] = SW0KW01.SW0KWTLN[SW0KWLIX];
    SW0KW02.SW0KMLAS[SW0KWLIX] = SW0KW01.SW0KWLAS[SW0KWLIX];
    SW0KW02.ZZZCHGDT[SW0KWLIX] = SW0KW01.ZZZCHGDT[SW0KWLIX];
    SW0KW02.ZZZCHGTM[SW0KWLIX] = SW0KW01.ZZZCHGTM[SW0KWLIX];
    SW0KW02.ZZZCHGCT[SW0KWLIX] = SW0KW01.ZZZCHGCT[SW0KWLIX];

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment counter*/

  end

   /* ------------------------------------------------------------*/
   /* Update the page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = SW0KW00.XXXTSPAG; /* page to update*/
  SW0KW02.XXXTSLEN = SW0KW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SW0KW00.SW0KWCUR = "N"; /* clear current screen changes switch*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";

  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS11

// read temporary storage
Function SW0KS12()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  set SW0KW06 empty; /* clear w02 record*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SW0KW06.XXXTSLEN = SW0KW00.XXXTSLEN;
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0KW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1TYPE = "APPL"; /* t/s error*/
  SLWREC.XXXLOCID = "S12"; /* Module identification*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";

  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS12

// purge temporary storage
Function SW0KS13()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0KW02 empty; /* M001 temporary storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0KW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1TYPE = "APPL"; /* t/s error*/
  SLWREC.XXXLOCID = "S13"; /* Module identification*/
  TA1REC.TA1LOC = "PURGE TEMPORARY STORAGE";
  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS13

// update temporary storage
Function SW0KS15()
   /* ------------------------------------------------------------*/
   /* move all current screen data to record W02 for t/s update*/
   /* ------------------------------------------------------------*/

  set SW0KW02 empty; /* clear t/s record*/
  SW0KW00.SW0KWLIX = 1;
  SW0KW02.SW0KWLND = SW0KW06.SW0KWLND; /* total lines*/

  while (SW0KW00.SW0KWLIX <= SW0KW06.SW0KWLND) /* til all lines moved*/

    SW0KW02.TSHCNTNR[SW0KWLIX] = SW0KW06.TSHCNTNR[SW0KWLIX];
    SW0KW02.XGPCD[SW0KWLIX] = SW0KW06.XGPCD[SW0KWLIX];
    SW0KW02.PC3PONBR[SW0KWLIX] = SW0KW06.PC3PONBR[SW0KWLIX];
    SW0KW02.SW0KMPID[SW0KWLIX] = SW0KW06.SW0KMPID[SW0KWLIX];
    SW0KW02.SWHLNCAT[SW0KWLIX] = SW0KW06.SWHLNCAT[SW0KWLIX];
    SW0KW02.SW0KMLRQ[SW0KWLIX] = SW0KW06.SW0KMLRQ[SW0KWLIX];
    SW0KW02.SW0KMFLN[SW0KWLIX] = SW0KW06.SW0KMFLN[SW0KWLIX];
    SW0KW02.SW0KMTLN[SW0KWLIX] = SW0KW06.SW0KMTLN[SW0KWLIX];
    SW0KW02.SW0KMLAS[SW0KWLIX] = SW0KW06.SW0KMLAS[SW0KWLIX];
    SW0KW02.ZZZCHGDT[SW0KWLIX] = SW0KW06.ZZZCHGDT[SW0KWLIX];
    SW0KW02.ZZZCHGTM[SW0KWLIX] = SW0KW06.ZZZCHGTM[SW0KWLIX];
    SW0KW02.ZZZCHGCT[SW0KWLIX] = SW0KW06.ZZZCHGCT[SW0KWLIX];

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment counter*/

  end

   /* ------------------------------------------------------------*/
   /* Update the page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = SW0KW00.SW0KWTSP; /* page to update*/
  SW0KW02.XXXTSLEN = SW0KW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SW0KW00.SW0KWCUR = "N"; /* clear current screen changes switch*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";

  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS15

// store t/s data to display w01
Function SW0KS16()
   /* ------------------------------------------------------------*/
   /* Store data lines in t/s to display storage record w01*/
    /* Called from SW0K210*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "S16"; /* Module identification*/
  SW0KW00.SW0KWLIX = 1; /* Initialize current screen index*/
  set SW0KW01 empty; /* clear display storage*/
  SW0KW01.XWHCD = SW0KM001.XWHCD;
  SW0KW01.XWHABRV = SW0KM001.XWHABRV;
  SW0KW01.SWEPLLNB = SW0KM001.SWEPLLNB;
  SW0KW01.XRPCD = SW0KM001.XRPCD;
  SW0KW01.XRPDESC = SW0KM001.XRPDESC;
  SW0KW01.SW0KWDFL = SW0KM001.SW0KMDFL;
  SW0KW01.SW0KWDTL = SW0KM001.SW0KMDTL;
  SW0KW01.SW0KWDFLCS = SW0KM001.SW0KMDFLCS;
  SW0KW01.SW0KWDTLCS = SW0KM001.SW0KMDTLCS;
  SW0KW01.SW0KWDFLWP = SW0KM001.SW0KMDFLWP;
  SW0KW01.SW0KWDTLWP = SW0KM001.SW0KMDTLWP;
  SW0KW01.SW0KWDFLQC = SW0KM001.SW0KMDFLQC;
  SW0KW01.SW0KWDTLQC = SW0KM001.SW0KMDTLQC;
  SW0KW01.SW0KWDFLSP = SW0KM001.SW0KMDFLSP;
  SW0KW01.SW0KWDFLDC = SW0KM001.SW0KMDFLDC;
  SW0KW01.SW0KWDLN = SW0KW02.SW0KWLND; /* save # lines on rec*/

  while (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN) /* til all lines moved*/

    SW0KW01.TSHCNTNR[SW0KWLIX] = SW0KW02.TSHCNTNR[SW0KWLIX];
    SW0KW01.XGPCD[SW0KWLIX] = SW0KW02.XGPCD[SW0KWLIX];
    SW0KW01.PC3PONBR[SW0KWLIX] = SW0KW02.PC3PONBR[SW0KWLIX];
    SW0KW01.SW0KWPID[SW0KWLIX] = SW0KW02.SW0KMPID[SW0KWLIX];
    SW0KW01.SWHLNCAT[SW0KWLIX] = SW0KW02.SWHLNCAT[SW0KWLIX];
    SW0KW01.SW0KWLRQ[SW0KWLIX] = SW0KW02.SW0KMLRQ[SW0KWLIX];
    SW0KW01.SW0KWFLN[SW0KWLIX] = SW0KW02.SW0KMFLN[SW0KWLIX];
    SW0KW01.SW0KWTLN[SW0KWLIX] = SW0KW02.SW0KMTLN[SW0KWLIX];
    SW0KW01.SW0KWLAS[SW0KWLIX] = SW0KW02.SW0KMLAS[SW0KWLIX];
    SW0KW01.ZZZCHGCT[SW0KWLIX] = SW0KW02.ZZZCHGCT[SW0KWLIX];
    SW0KW01.ZZZCHGDT[SW0KWLIX] = SW0KW02.ZZZCHGDT[SW0KWLIX];
    SW0KW01.ZZZCHGTM[SW0KWLIX] = SW0KW02.ZZZCHGTM[SW0KWLIX];

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment counter*/

  end


end // end SW0KS16

// call sl4270 obtain data
Function SW0KS22()
   /* ------------------------------------------------------------*/
   /* set up sl4270 area.*/
   /* ------------------------------------------------------------*/

  set SW0KW04 empty; /* parameters passed sl4270*/
  SW0KW04.SW0KWTSK = "J1"; /* task*/
  SW0KW04.XWHCD = SW0KW01.XWHCD; /* warehouse code*/
  SW0KW04.SWEPLLNB = SW0KW01.SWEPLLNB; /* plan nbr*/
  SW0KW04.XXXTSLEN = SW0KW00.XXXTSLEN; /* move temp storage len*/
  SW0KW04.SW0KWDLN = 12; /* nbr of lines per page*/
  SW0KW04.CACURRAP = COMMAREA.CACURRAP; /* sw0k*/

   /* ------------------------------------------------------------*/
   /* call sl4270 to get all data for map.*/
   /* ------------------------------------------------------------*/

  try
    call "SL4270" (SW0KW04, SQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* io mod*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SW0KW04.SW0KWRCD == 0) /* and normal return code*/

      set SW0KW02 empty; /* M001 display storage*/

      SW0KW00.SW0KWLIX = 1; /* Display line index*/

      SW0KW00.TA5TSQIX = SW0KW04.SW0KWCNT; /* Highest page number*/
      /* ------------------------------------------------------------*/
       /* If successful return to the previous process.*/
      /* ------------------------------------------------------------*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

        return;

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PLAN TABLE JOIN - SL4270";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "PLAN TBL"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0KS22

// obtain current date (ccyymmss)
Function SW0KS24()

   /* ************************************************************/
   /* *** use ta0040 to obtain the current date including CC  ****/
   /* ************************************************************/

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE ";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DYAOD = -2;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    return;
  end

   /* ************************************************************/
   /* *** since ta0020 will not check 'getdate ' return code  ****/
   /* *** and we must prevent further processing,             ****/
   /* *** call ta0020 to display error and return to main menu****/
   /* ************************************************************/

  set TA1REC empty;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1PGMNM = "TA0040  ";
  TA1REC.TA1LOC = "TA0040 - GET CURRENT DATE";
  SQLCA.SQLCAREC = TA2REC.TA2RTNCD;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/

end // end SW0KS24

// call sl4380 obtain data
Function SW0KS25()
   /* ------------------------------------------------------------*/
   /* set up sl4380 area.*/
   /* ------------------------------------------------------------*/

  set SW0KW07 empty; /* parameters passed to sl4380*/
  SW0KW07.SW0KWTSK = "SS"; /* task*/
  SW0KW07.XWHCD = SW0KW01.XWHCD; /* warehouse code*/
  SW0KW07.SWEPLLNB = SW0KW01.SWEPLLNB; /* plan nbr*/
  SW0KW07.TA2GRGGN = TA2REC.TA2GRGGN; /* current date minus 5 days*/

   /* ------------------------------------------------------------*/
   /* call sl4380*/
   /* ------------------------------------------------------------*/

  try
    call "SL4380" (SW0KW07, SQLCA, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end /**/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /**/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "AVAILABLE LOCATIONS - SL4380";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0KS25

// select unique dstloc.vplcpo01
Function SW0KS30()
   /* ------------------------------------------------------------*/
   /* key fields are loaded*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* clear old data*/

  SWFREC.XWHCD = SW0KW01.XWHCD;
  SWFREC.SWEPLLNB = SW0KW01.SWEPLLNB;
  SWFREC.TSHCNTNR = SW0KW02.TSHCNTNR[SW0KWLIX];
  SWFREC.XGPCD = SW0KW02.XGPCD[SW0KWLIX];
  SWFREC.PC3PONBR = SW0KW02.PC3PONBR[SW0KWLIX];

   /* ------------------------------------------------------------*/
   /* select unique dstloc.vplcpo01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

     /* if any of the control fields are different, update is*/
     /* canceled*/

    if (SWFREC.ZZZCHGCT != SW0KW02.ZZZCHGCT[SW0KWLIX] /* count*/
     || SWFREC.ZZZCHGDT != SW0KW02.ZZZCHGDT[SW0KWLIX] /* date*/
     || SWFREC.ZZZCHGTM != SW0KW02.ZZZCHGTM[SW0KWLIX]) /* time*/

      SLWREC.SLWMSGNO = 32; /* data was changed by someone else*/
      SW0KW00.SW0KWSWR = "Y";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback changes*/
      exit stack; /* exit to reload data*/

    else
       /* save new 'current' key fields*/
      SW0KW00.XWHCD = SWFREC.XWHCD;
      SW0KW00.SWEPLLNB = SWFREC.SWEPLLNB;
      SW0KW00.TSHCNTNR = SWFREC.TSHCNTNR;
      SW0KW00.XGPCD = SWFREC.XGPCD;
      SW0KW00.PC3PONBR = SWFREC.PC3PONBR;

    end

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "S30"; /* module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S ON DSTLOC.VPLCPO01";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/

  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS30

// update 'u ' dstloc.vplcpo01
Function SW0KS31()
   /* ------------------------------------------------------------*/
   /* update change date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* date routine*/

  SWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ------------------------------------------------------------*/
   /* update dstloc.vplcpo01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("U ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end

  if (SQLCA.VAGen_SQLCODE == 100) /* data updated by someone else*/

    SLWREC.SLWMSGNO = 32; /* send msg*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes*/
    SW0KW00.SW0KWSWR = "Y"; /* reload data for another round*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "S31"; /* module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE U ON DSTLOC.VPLCPO01";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS31

// select 's ' dstloc.vlane001
Function SW0KS40()
   /* ------------------------------------------------------------*/
   /* lane type is loaded in the calling process*/
   /* ------------------------------------------------------------*/

  SWCREC.XWHCD = SW0KM001.XWHCD; /* warehouse code*/
  SWCREC.SWCLNENB = 0; /* lane number in swcrec*/
  SWQREC.SWQFRINB = 0; /* zero 'from' inspection #*/
  SWQREC.SWQTOINB = 9999; /* high val's for 'to' insp #*/

   /* ------------------------------------------------------------*/
   /* select dstloc.vlane001*/
   /* ------------------------------------------------------------*/

  try
    call "IO5330" (SWQREC, SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "S40"; /* module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S ON DSTLOC.VLANE001";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/

  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS40

// select 's3' dstloc.vlane001
Function SW0KS41()
   /* ------------------------------------------------------------*/
   /* Select set on dstloc.vlane001 table.*/
   /* ------------------------------------------------------------*/

  SWCREC.XWHCD = SW0KW01.XWHCD;

  try
    call "IO5330" ("S ", SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return;
    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S ON DSTLOC.VLANE001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0KS41

// select 's ' dstloc.vplnhd01
Function SW0KS50()
   /* ------------------------------------------------------------*/
   /* select dstloc.vplnhd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE != -911)   /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "S50"; /* module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S ON DSTLOC.VPLNHD01";
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  SW0KS99(); /* Error diagnosis routine*/


end // end SW0KS50

// select 's3' dstloc.vlane001
Function SW0KS83()
   /* ------------------------------------------------------------*/
   /* Select set on dstloc.vlane001 table.*/
   /* ------------------------------------------------------------*/

  SWCREC.XWHCD = SW0KW01.XWHCD;

  try
    call "IO5330" ("S3", SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S83"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S3 ON DSTLOC.VLANE001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0KS83

// fetch 'n3' dstloc.vlane001
Function SW0KS84()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vlane001 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5330" ("N3", SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S84"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N3 DSTLOC.VLANE001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0KS84

// close 'c3' dstloc.vlane001
Function SW0KS85()
   /* ------------------------------------------------------------*/
   /* close dstloc.vlane001 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5330" ("C3", SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  SLWREC.XXXLOCID = "S85"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C3 DSTLOC.VLANE001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0KS85

// Open fields on screen
Function SW0KS90()
   /* -------------------------------------------------------*/
    /* Open fields (highlighting if needed)*/
   /* -------------------------------------------------------*/

  SW0KW00.SW0KWLIX = 1;

  while (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN) /* while non-blank lines*/

    if (SW0KW00.SW0KWSWE[SW0KWLIX] != "Y") /* not in error*/

      set SW0KM001.SW0KMFLN[SW0KWLIX] normal;
      set SW0KM001.SW0KMTLN[SW0KWLIX] normal;

    else

      set SW0KM001.SW0KMFLN[SW0KWLIX] bold;
      set SW0KM001.SW0KMTLN[SW0KWLIX] bold;

    end

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment counter*/

  end


end // end SW0KS90

// error routine (ta0020)
Function SW0KS99()
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0KS99

// Highlight keyed data
Function SW0KSE1()
   /* ------------------------------------------------------------*/
   /* This routine is used to check if data was chgd when a PF14,*/
   /* 15 or 16 was pressed - data cannot be changed under that*/
   /* condition.*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.XWHCD != SW0KW01.XWHCD) /* warehouse changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.XWHCD bold; /* highlight*/

  end

  if (SW0KM001.SWEPLLNB != SW0KW01.SWEPLLNB) /* plan number changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SWEPLLNB bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDFL != SW0KW01.SW0KWDFL) /* default from lane changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDFL bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDTL != SW0KW01.SW0KWDTL) /* default from lane changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDTL bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDFLCS != SW0KW01.SW0KWDFLCS) /* default from lane*/
                                   /* changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDFLCS bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDTLCS != SW0KW01.SW0KWDTLCS) /* default to lane*/
                                   /* changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDTLCS bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDFLWP != SW0KW01.SW0KWDFLWP) /* default from lane*/
                                   /* changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDFLWP bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDTLWP != SW0KW01.SW0KWDTLWP) /* default to lane*/
                                   /* changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDTLWP bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDFLQC != SW0KW01.SW0KWDFLQC) /* default from lane*/
                                   /* changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDFLQC bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDTLQC != SW0KW01.SW0KWDTLQC) /* default to lane*/
                                   /* changed*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDTLQC bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDFLSP != SW0KW01.SW0KWDFLSP) /* default from lane*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDFLSP bold; /* highlight*/

  end

  if (SW0KM001.SW0KMDFLDC != SW0KW01.SW0KWDFLDC) /* default from lane*/

    converseLib.validationFailed(219); /* cant change with req function*/
    set SW0KM001.SW0KMDFLDC bold; /* highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Loop through display lines, checking for entered data.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "SE1"; /* Module identification*/
  SW0KW00.SW0KWLIX = 1; /* set line counter*/

  while (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN) /* non blank lines*/

    if (SW0KM001.SW0KMDFLSP != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "SP"
     || SW0KM001.SW0KMDFLDC != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "DC"
     || SW0KM001.SW0KMDFLQC != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "QC"
     || SW0KM001.SW0KMDFLWP != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "WP"
     || SW0KM001.SW0KMDFLCS != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "CS"
     || SW0KM001.SW0KMDFL != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "UX")

    else
      set SW0KM001.SW0KMFLN[SW0KWLIX] normal;
      set SW0KM001.SW0KMTLN[SW0KWLIX] normal;
      if (SW0KM001.SW0KMTLN[SW0KWLIX] != SW0KW01.SW0KWTLN[SW0KWLIX])

        set SW0KM001.SW0KMTLN[SW0KWLIX] cursor, bold; /* highlight*/
        SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error switch*/

      end

      if (SW0KM001.SW0KMFLN[SW0KWLIX] != SW0KW01.SW0KWFLN[SW0KWLIX])

        set SW0KM001.SW0KMFLN[SW0KWLIX] cursor, bold; /* highlight*/
        SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error switch*/

      end

    end

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* decrement counter*/

  end

  if (SW0KW00.SW0KWSER != "             ") /* data line changes*/

    converseLib.validationFailed(219); /* cant change data*/

  end

  if (converseVar.validationMsgNum != 0) /* heading data changes*/

    exit stack;

  end


end // end SW0KSE1

// Validate 'from' and 'to' lane
Function SW0KSE2()
   /* ------------------------------------------------------------*/
   /* Validate a particular set of 'from' and 'to' lanes*/
   /* (Called from SW0K522)*/
   /* ------------------------------------------------------------*/


  SLWREC.XXXLOCID = "SE2"; /* Module identification*/
  SW0KW00.SW0KWSWE[SW0KWLIX] = " "; /* clear error flag for line*/

   /* ------------------------------------------------------------*/
   /* if lanes required is zero, from and to lanes may be 0*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SW0KMFLN[SW0KWLIX] == 0 /* from lane is zero*/
   && SW0KM001.SW0KMTLN[SW0KWLIX] == 0 /* to lane is zero*/
   && SW0KM001.SW0KMLRQ[SW0KWLIX] == 0) /* and lanes req'd is zero*/

    SW0KM001.SW0KMLAS[SW0KWLIX] = 0; /* set lanes assigned to zero*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* if type is 'ux', 'cs', 'wp' or 'qc', from and to lanes may be 0*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SW0KMFLN[SW0KWLIX] == 0 /* from lane is zero*/
   && SW0KM001.SW0KMTLN[SW0KWLIX] == 0) /* to lane is zero*/
    if (SW0KM001.SWHLNCAT[SW0KWLIX] == "UX" /* and lane type is 'ux'*/
     || SW0KM001.SWHLNCAT[SW0KWLIX] == "CS" /* and lane type is 'cs'*/
     || SW0KM001.SWHLNCAT[SW0KWLIX] == "WP" /* and lane type is 'wp'*/
     || SW0KM001.SWHLNCAT[SW0KWLIX] == "QC" /* and lane type is 'qc'*/
     || SW0KM001.SWHLNCAT[SW0KWLIX] == "SP" /* and lane type is 'sp'*/
     || SW0KM001.SWHLNCAT[SW0KWLIX] == "DC" /* and lane type is 'DC'*/
    )                                      
      SW0KM001.SW0KMLAS[SW0KWLIX] = 0; /* set lanes assigned to zero*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* if 'from' lane not zero, but 'to' lane is zero, set them to*/
    /* the same values.*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SW0KMFLN[SW0KWLIX] > 0 /* from lane not zero*/
   && SW0KM001.SW0KMTLN[SW0KWLIX] == 0) /* from lane zero*/

    if (SW0KW01.XWHCD == "07" /* edits for footwear only*/
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "PL") /* equal to 'pallet'*/
      /* continue*/
    else
      SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMFLN[SW0KWLIX];
    end
  end

   /* ------------------------------------------------------------*/
    /* for pallets, calculate 'TO' lane if it is equal to zero.*/
   /* ------------------------------------------------------------*/

  if (SW0KW01.SWHLNCAT[SW0KWLIX] == "PL" /* edits for 'pl'*/
   && SW0KW01.XWHCD == "07"              /* edits for footwear only*/
   && SW0KM001.SW0KMFLN[SW0KWLIX] > 0    /* from lane not zero*/
   && SW0KM001.SW0KMTLN[SW0KWLIX] == 0)  /* if 'TO' lane equal to zero*/
    SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMFLN[SW0KWLIX] +     SW0KM001.SW0KMLRQ[SW0KWLIX] * 2 - 2;
  end

   /* ------------------------------------------------------------*/
   /* 'from' lane and 'to' lane can't be zero when NOT 'ux', 'cs', 'wp'*/
    /* and 'qc' and lanes required > 0*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SW0KMFLN[SW0KWLIX] == 0) /* from lane zero*/

    converseLib.validationFailed(11); /* bad value*/
    set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
    SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag for line*/
    return; /* dont bother checking this line any*/
                                   /* further*/

  end

  if (SW0KM001.SW0KMTLN[SW0KWLIX] == 0) /* to lane zero*/

    converseLib.validationFailed(11); /* bad value*/
    set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/
    SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag for line*/
    return; /* dont bother checking this line any*/
                                   /* further*/

  end

   /* ------------------------------------------------------------*/
   /* 'from' lane must not be higher than 'to' lane.*/
   /* ------------------------------------------------------------*/

  if (SW0KM001.SW0KMFLN[SW0KWLIX] > SW0KM001.SW0KMTLN[SW0KWLIX])

    converseLib.validationFailed(222);
                                   /* from lane cant be higher than to lane*/
    set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
    set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/
    SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag for line*/
    return; /* dont bother checking this line any*/
                                   /* further*/

  end


   /* ------------------------------------------------------------*/
   /* For 'wp', the 'from' lane and the 'to' lane must be equal.*/
   /* ------------------------------------------------------------*/

  if (SW0KW01.SWHLNCAT[SW0KWLIX] == "WP" /* edits for 'wp'*/
   && SW0KM001.SW0KMFLN[SW0KWLIX] != SW0KM001.SW0KMTLN[SW0KWLIX])
    SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag*/
    converseLib.validationFailed(346); /* invalid lane range*/
    set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
    set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* For 'sp', the 'from' lane and the 'to' lane must be equal.*/
   /* Split cartons are unique to footwear and at this point and*/
   /* are only valid at Wilsonville(Whse 07).*/
   /* ------------------------------------------------------------*/

  if (SW0KW01.XWHCD == "07")

    if (SW0KW01.SWHLNCAT[SW0KWLIX] == "SP" /* edits for 'sp'*/
     && SW0KM001.SW0KMFLN[SW0KWLIX] != SW0KM001.SW0KMTLN[SW0KWLIX])
      SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag*/
      converseLib.validationFailed(437); /* invalid lane range*/
      set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
      set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/
      return;
    end

  end


   /* ------------------------------------------------------------*/
   /* For 'ux', the 'from' lane and the 'to' lane must be equal.*/
   /* This is unique to footwear warehouses only.*/
   /* At this point in time the only valid footwear warehouse is*/
   /* 07 - Wilsonville.*/
   /* ------------------------------------------------------------*/

  if (SW0KW01.XWHCD == "07")

    if (SW0KW01.SWHLNCAT[SW0KWLIX] == "UX" /* edits for 'ux'*/
     && SW0KM001.SW0KMFLN[SW0KWLIX] != SW0KM001.SW0KMTLN[SW0KWLIX])
      SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag*/
      converseLib.validationFailed(439); /* invalid lane range*/
      set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
      set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* okay so far, now call io routine to validate lane range*/
   /* ------------------------------------------------------------*/

  SWQREC.SWQFRLAN = SW0KM001.SW0KMFLN[SW0KWLIX];
  SWQREC.SWQTOLAN = SW0KM001.SW0KMTLN[SW0KWLIX];
  SWCREC.XLNCD = SW0KM001.SWHLNCAT[SW0KWLIX];
  SWQREC.SWQFUNCD = "SC"; /* select between function*/
  SWQREC.SWQFRINB = 0; /* zero from inspection number*/
  SWQREC.SWQTOINB = 0; /* zero to inspection number*/
  SW0KS40();
  if (SWQREC.SWQCOUNT == 0) /* bad data*/

    converseLib.validationFailed(296); /* invalid lane range*/
    set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
    set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/
    SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag for line*/
    return; /* error, dont edit line any further*/

  else

    SW0KM001.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
                                   /* updt lanes asgnd*/

  end

   /* ------------------------------------------------------------*/
   /* For 'pl' the lanes required and lanes assigned must be*/
   /* equal for warehouse 07 - footwear.*/
   /* ------------------------------------------------------------*/

  if (SW0KW01.SWHLNCAT[SW0KWLIX] == "PL") /* edits for 'pl'*/

    if (SW0KW01.XWHCD == "07") /* edits for footwear only*/

   /* ------------------------------------------------------------*/
    /* okay so far, now call io routine to validate starting lane nbr*/
   /* ------------------------------------------------------------*/

      SWCREC.SWCLNENB = SW0KM001.SW0KMFLN[SW0KWLIX]; /* lane nbr*/
      SWCREC.PKURUNMD = " "; /* space to run mode*/
      SW0KS41(); /* call iomod io5330*/
      if (SQLCA.VAGen_SQLCODE == 0) /* lane exits on dstloc.vlane001 table*/
      /* continue*/
      else

        converseLib.validationFailed(296); /* invalid lane range*/
        set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
        set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/
        SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag for line*/
        return; /* error, dont edit line any further*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* For 'pl' the lanes required and lanes assigned must be*/
   /* equal for warehouse 07 - footwear.*/
   /* ------------------------------------------------------------*/

  if (SW0KW01.SWHLNCAT[SW0KWLIX] == "PL") /* edits for 'pl'*/

    if (SW0KW01.XWHCD == "07") /* edits for footwear only*/

      /* MOVE 0 TO SW0KW00.SW0KW-FROMTO-RANGE;*/

      /* SW0KW00.SW0KW-FROMTO-RANGE = SW0KM001.SW0KMTLN(SW0KWLIX) -*/
                            /* SW0KM001.SW0KMFLN(SW0KWLIX) + 1;*/

      if (SW0KM001.SW0KMLAS[SW0KWLIX] != SW0KM001.SW0KMLRQ[SW0KWLIX])

        SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag*/
        set SW0KM001.SW0KMFLN[SW0KWLIX] cursor, bold; /* highlight*/
        set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/
        converseLib.validationFailed(438);
        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* last check for line - validate against the rest of lines*/
   /* on current screen.*/
   /* Don't bother to compare if:*/
     /* (1) Line indices are the same*/
     /* (2) Container and PO number are the same*/
     /* (3) Either lane type is 'ux'*/
   /* ------------------------------------------------------------*/

  SW0KW00.SW0KWCIX = 1; /* initialize compare index*/

  while (SW0KW00.SW0KWCIX <= SW0KW01.SW0KWDLN /* while non-blank lines*/
   && SW0KW00.SW0KWSWE[SW0KWLIX] != "Y") /* or found to be in error*/

    if (SW0KW00.SW0KWCIX != SW0KW00.SW0KWLIX) /* if not comparing same line*/

      if (SW0KW01.TSHCNTNR[SW0KWLIX] == SW0KW01.TSHCNTNR[SW0KWCIX]
       && SW0KW01.PC3PONBR[SW0KWLIX] == SW0KW01.PC3PONBR[SW0KWCIX])

         /* next sentence*/

      else

        if (SW0KM001.SW0KMFLN[SW0KWLIX] <= SW0KM001.SW0KMTLN[SW0KWCIX]
         && SW0KM001.SW0KMTLN[SW0KWLIX] >= SW0KM001.SW0KMFLN[SW0KWCIX])
          if (SW0KM001.SWHLNCAT[SW0KWCIX] == "UX"
           && SW0KM001.SWHLNCAT[SW0KWLIX] == "UX")
             /* next sentence*/
          else
            if (SW0KM001.SWHLNCAT[SW0KWCIX] == "WP"
             && SW0KM001.SWHLNCAT[SW0KWLIX] == "WP")
               /* next sentence*/
            else
              if (SW0KM001.SWHLNCAT[SW0KWCIX] == "SP"
               && SW0KM001.SWHLNCAT[SW0KWLIX] == "SP")
                   /* next sentence*/
              else
                if (SW0KM001.SWHLNCAT[SW0KWCIX] == "DC"
                 && SW0KM001.SWHLNCAT[SW0KWLIX] == "DC")
                   /* next sentence*/
                else
                  if (SW0KM001.XWHCD == "07")
                    if (SW0KM001.SWHLNCAT[SW0KWCIX] == "CS"
                     && SW0KM001.SWHLNCAT[SW0KWLIX] == "CS")
                      /* next sentence*/
                    else
                      SW0KW00.SW0KWSWE[SW0KWLIX] = "Y";
                      converseLib.validationFailed(296); /* invalid lane range*/
                      set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
                      set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/
                    end
                  end

                end
              end
            end
          end
        end
      end
    end

    SW0KW00.SW0KWCIX = SW0KW00.SW0KWCIX + 1; /* increment counter*/

  end


end // end SW0KSE2

// edit curr screen lanes vs t/s
Function SW0KSE3()
   /* ------------------------------------------------------------*/
   /* Validate current screen lanes vs t/s lanes*/
   /* (Called from SW0K523)*/
   /* ------------------------------------------------------------*/


  SLWREC.XXXLOCID = "SE3"; /* Module identification*/
  SW0KW00.SW0KWLIX = 1; /* Initialize current screen index*/
  SW0KW00.SW0KWCIX = 1; /* Initialize compare index*/

   /* ------------------------------------------------------------*/
   /* validate each line on current screen vs. all lines in t/s*/
   /* only if:*/
      /* (1) both current screen lanes and t/s lanes not 'ux'*/
      /* (2) current screen lanes not already in error*/
      /* (3) Container and PO number are same for current & t/s*/
      /* (4) Either line has (valid) zero from and to lanes*/
   /* ------------------------------------------------------------*/

  while (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN /* til all lines on screen*/
   && SW0KW00.SW0KWSER != "YYYYYYYYYYYY") /* or all found to be in error*/

    if (SW0KM001.XWHCD == "51") /* apparel warehouse*/

      if (SW0KM001.SWHLNCAT[SW0KWLIX] == "UX" /* not a 'ux' on screen*/
       || SW0KM001.SWHLNCAT[SW0KWLIX] == "WP") /* not a 'wp' on screen*/
         /* next sentence*/
      else
        if (SW0KW00.SW0KWSWE[SW0KWLIX] != "Y" /* not already in error*/
         && SW0KM001.SW0KMFLN[SW0KWLIX] != 0) /* not zero lanes*/

          SW0KW00.SW0KWCIX = 1; /* init t/s index*/

          SW0KSE4(); /* edit current line vs t/s*/

        end
      end
    end

    if (SW0KM001.XWHCD == "07") /* footwear warehouse*/

      if (SW0KM001.SWHLNCAT[SW0KWLIX] == "UX" /* not a 'ux' on screen*/
       || SW0KM001.SWHLNCAT[SW0KWLIX] == "WP" /* not a 'wp' on screen*/
       || SW0KM001.SWHLNCAT[SW0KWLIX] == "SP") /* not a 'sp' on screen*/
         /* next sentence*/
      else
        if (SW0KW00.SW0KWSWE[SW0KWLIX] != "Y" /* not already in error*/
         && SW0KM001.SW0KMFLN[SW0KWLIX] != 0) /* not zero lanes*/

          SW0KW00.SW0KWCIX = 1; /* init t/s index*/

          SW0KSE4(); /* edit current line vs t/s*/

        end
      end
    end

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment counter*/

  end


end // end SW0KSE3

// edit curr screen line vs t/s
Function SW0KSE4()
   /* ------------------------------------------------------------*/
   /* Validate one current screen line vs all t/s lanes in*/
   /* current t/s page (Called from SW0KSE3)*/
   /* ------------------------------------------------------------*/


  SLWREC.XXXLOCID = "SE4"; /* Module identification*/

  while (SW0KW00.SW0KWCIX < 14                /* til all lines checked*/
   && SW0KW00.SW0KWCIX <= SW0KW06.SW0KWLND /* no more t/s lines*/
   && SW0KW00.SW0KWSWE[SW0KWLIX] != "Y") /* and screen line not in err*/

    if (SW0KW00.XWHCD == "51") /* apparel warehouse*/

      if (SW0KW06.SWHLNCAT[SW0KWCIX] == "UX" /* a 'ux' in t/s*/
       || SW0KW06.SWHLNCAT[SW0KWCIX] == "WP") /* a 'wp' in t/s*/
         /* next sentence*/
      else
        if (SW0KW06.SW0KMFLN[SW0KWCIX] != 0) /* t/s from lane not 0*/

          if (SW0KM001.TSHCNTNR[SW0KWLIX] == SW0KM001.TSHCNTNR[SW0KWCIX]
           && SW0KM001.PC3PONBR[SW0KWLIX] == SW0KM001.PC3PONBR[SW0KWCIX])
           /* next sentence*/
          else

            if (SW0KM001.SW0KMFLN[SW0KWLIX] <= SW0KW06.SW0KMTLN[SW0KWCIX]
             && SW0KM001.SW0KMTLN[SW0KWLIX] >= SW0KW06.SW0KMFLN[SW0KWCIX])

              SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag*/
              converseLib.validationFailed(296); /* invalid lane range*/
              set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
              set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/

            end

          end

        end

      end

    end

    if (SW0KW00.XWHCD == "07") /* footwear warehouse*/

      if (SW0KW06.SWHLNCAT[SW0KWCIX] == "UX" /* a 'ux' in t/s*/
       || SW0KW06.SWHLNCAT[SW0KWCIX] == "WP" /* a 'wp' in t/s*/
       || SW0KW06.SWHLNCAT[SW0KWCIX] == "SP") /* a 'sp' in t/s*/
         /* next sentence*/
      else
        if (SW0KW06.SW0KMFLN[SW0KWCIX] != 0) /* t/s from lane not 0*/

          if (SW0KM001.TSHCNTNR[SW0KWLIX] == SW0KM001.TSHCNTNR[SW0KWCIX]
           && SW0KM001.PC3PONBR[SW0KWLIX] == SW0KM001.PC3PONBR[SW0KWCIX])
           /* next sentence*/
          else

            if (SW0KM001.SW0KMFLN[SW0KWLIX] <= SW0KW06.SW0KMTLN[SW0KWCIX]
             && SW0KM001.SW0KMTLN[SW0KWLIX] >= SW0KW06.SW0KMFLN[SW0KWCIX])

              SW0KW00.SW0KWSWE[SW0KWLIX] = "Y"; /* set error flag*/
              converseLib.validationFailed(296); /* invalid lane range*/
              set SW0KM001.SW0KMFLN[SW0KWLIX] bold; /* highlight*/
              set SW0KM001.SW0KMTLN[SW0KWLIX] bold; /* highlight*/

            end

          end

        end

      end

    end

    SW0KW00.SW0KWCIX = SW0KW00.SW0KWCIX + 1; /* increment counter*/

  end


end // end SW0KSE4

// edit lanes req'd vs assigned
Function SW0KSE5()
   /* ------------------------------------------------------------*/
   /* Verify that SUBMIT is allowed for the plan status.*/
   /* ------------------------------------------------------------*/

  if (SW0KW01.XRPCD == "CA" /* Calculated*/
   || SW0KW01.XRPCD == "SB" /* or submitted*/
   || SW0KW01.XRPCD == "SI") /* or submit incomplete*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "SE5"; /* Module identification*/
    converseLib.validationFailed(218); /* Status invalid for request*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that if lanes requested > 0, that lanes assgnd > 0*/
    /* Called from SW0K540*/
   /* ------------------------------------------------------------*/

  SW0KW00.SW0KWTSP = 1; /* set starting t/s page*/

  while (SW0KW00.SW0KWTSP <= SW0KW00.TA5TSQIX) /* til end of t/s*/

    TA5REC.TA5TSQIX = SW0KW00.SW0KWTSP; /* set t/s to retrieve*/
    SW0KS12(); /* read t/s*/
    SW0KW00.SW0KWLIX = 1; /* initialize index*/
    while (SW0KW00.SW0KWLIX <= SW0KW06.SW0KWLND) /* no blank lines*/

      if (SW0KW06.SWHLNCAT[SW0KWLIX] != "UX") /* skip ux lanes*/

        if (SW0KW06.SW0KMLRQ[SW0KWLIX] > 0 /* if lanes required > 0*/
         && SW0KW06.SW0KMLAS[SW0KWLIX] <= 0) /* and no lanes assgnd*/

          SLWREC.XXXLOCID = "SE5"; /* Module identification*/
          converseLib.validationFailed(224); /* lanes assigned must be > 0 msg*/
          exit stack;

        end

      end
      SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment index*/

    end

    SW0KW00.SW0KWTSP = SW0KW00.SW0KWTSP + 1; /* increment t/s page number*/

  end


end // end SW0KSE5

// Move lanes
Function SW0KSE6()
  if (SW0KW02.SWHLNCAT[SW0KWLIX] == "PL") /* pallet uses long lanes*/


    SWFREC.SWFLLNFR = SW0KW02.SW0KMFLN[SW0KWLIX];
    SWFREC.SWFLLNTH = SW0KW02.SW0KMTLN[SW0KWLIX];

  else

    if (SW0KW02.SWHLNCAT[SW0KWLIX] == "CS") /* case uses short lanes*/

      SWFREC.SWFSLNFR = SW0KW02.SW0KMFLN[SW0KWLIX];
      SWFREC.SWFSLNTH = SW0KW02.SW0KMTLN[SW0KWLIX];

    else

      if (SW0KW02.SWHLNCAT[SW0KWLIX] == "WP") /* weight pack factor*/

        SWFREC.SWFWLNFR = SW0KW02.SW0KMFLN[SW0KWLIX];
        SWFREC.SWFWLNTH = SW0KW02.SW0KMTLN[SW0KWLIX];

      else

        if (SW0KW00.XWHCD == "07" /* footwear warehouse*/
         && SW0KW02.SWHLNCAT[SW0KWLIX] == "SP") /* split carton*/

          SWFREC.SL-SPLT-LANE-FROM = SW0KW02.SW0KMFLN[SW0KWLIX];
          SWFREC.SL-SPLT-LANE-THRU = SW0KW02.SW0KMTLN[SW0KWLIX];

        else

          if (SW0KW00.XWHCD == "51" /* mema*/
           && SW0KW02.SWHLNCAT[SW0KWLIX] == "SP") /* split carton*/

            SWFREC.SL-SPLT-LANE-FROM = SW0KW02.SW0KMFLN[SW0KWLIX];

          else
            if (SW0KW02.SWHLNCAT[SW0KWLIX] == "DC") /* split carton*/

              SWFREC.SL-SPLT-LANE-THRU = SW0KW02.SW0KMFLN[SW0KWLIX];

            else

              if (SW0KW02.SWHLNCAT[SW0KWLIX] == "UX") /* unexpected*/

                if (SW0KW02.SW0KMFLN[SW0KWLIX] != 0)

                  SWFREC.SWFULNFR = SW0KW02.SW0KMFLN[SW0KWLIX];
                  SWFREC.SWFULNTH = SW0KW02.SW0KMTLN[SW0KWLIX];

                else

                  if (SW0KW01.SW0KWDFL != 0)

                    SWFREC.SWFULNFR = SW0KW01.SW0KWDFL;
                    SWFREC.SWFULNTH = SW0KW01.SW0KWDTL;

                  end

                end

              else

                converseLib.validationFailed(305); /* invalid lane category*/
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* rollback changes*/
                exit stack;

              end

            end

          end

        end

      end

    end

  end


end // end SW0KSE6

// edit curr screen lanes vs t/s
Function SW0KSE7()
   /* ------------------------------------------------------------*/
   /* Update t/s lanes with the default lanes*/
   /* (Called from SW0K527)*/
   /* ------------------------------------------------------------*/


  SLWREC.XXXLOCID = "SE7"; /* Module identification*/
  SW0KW00.SW0KWLIX = 1; /* Initialize current screen index*/

  while (SW0KW00.SW0KWLIX <= SW0KW06.SW0KWLND) /* til all lines on screen*/

    if (SW0KW06.SWHLNCAT[SW0KWLIX] != "UX" /* not a 'ux' on screen*/
     && SW0KW06.SWHLNCAT[SW0KWLIX] != "WP" /* not a 'wp' on screen*/
     && SW0KW06.SWHLNCAT[SW0KWLIX] != "CS" /* not a 'cs' on screen*/
     && SW0KW06.SWHLNCAT[SW0KWLIX] != "QC" /* not a 'qc' on screen*/
     && SW0KW06.SWHLNCAT[SW0KWLIX] != "SP" /* not a 'sp' on screen*/
     && SW0KW06.SWHLNCAT[SW0KWLIX] != "DC") /* not a 'sp' on screen*/
         /* next sentence*/
    else
      if (SW0KW06.SWHLNCAT[SW0KWLIX] == "QC" /* 'qc' on screen*/
       && SW0KM001.SW0KMDFLQC != 0)          /* default qc from lane*/
        SW0KW06.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLQC;
        SW0KW06.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDTLQC;
        SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLQC;
        SWQREC.SWQTOLAN = SW0KM001.SW0KMDTLQC;
        SWCREC.XLNCD = SW0KW06.SWHLNCAT[SW0KWLIX];
        SWQREC.SWQFUNCD = "SC"; /* select between function*/
        SWQREC.SWQFRINB = 0; /* zero from inspection number*/
        SWQREC.SWQTOINB = 0; /* zero to inspection number*/
        SW0KS40();
        SW0KW06.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        SW0KW00.SW0KWUPD = "Y";
        if (SW0KW00.SW0KWCTS == SW0KW00.SW0KWTSP)
          SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLQC;
          SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDTLQC;
          SW0KM001.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        end
      end
      if (SW0KW06.SWHLNCAT[SW0KWLIX] == "WP" /* 'wp' on screen*/
       && SW0KM001.SW0KMDFLWP != 0)          /* default wp from lane*/
        SW0KW06.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLWP;
        SW0KW06.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDTLWP;
        SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLWP;
        SWQREC.SWQTOLAN = SW0KM001.SW0KMDTLWP;
        SWCREC.XLNCD = SW0KW06.SWHLNCAT[SW0KWLIX];
        SWQREC.SWQFUNCD = "SC"; /* select between function*/
        SWQREC.SWQFRINB = 0; /* zero from inspection number*/
        SWQREC.SWQTOINB = 0; /* zero to inspection number*/
        SW0KS40();
        SW0KW06.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        SW0KW00.SW0KWUPD = "Y";
        if (SW0KW00.SW0KWCTS == SW0KW00.SW0KWTSP)
          SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLWP;
          SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDTLWP;
          SW0KM001.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        end
      end
      if (SW0KW06.SWHLNCAT[SW0KWLIX] == "CS" /* 'cs' on screen*/
       && SW0KM001.SW0KMDFLCS != 0)          /* default cs from lane*/
        SW0KW06.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLCS;
        SW0KW06.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDTLCS;
        SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLCS;
        SWQREC.SWQTOLAN = SW0KM001.SW0KMDTLCS;
        SWCREC.XLNCD = SW0KW06.SWHLNCAT[SW0KWLIX];
        SWQREC.SWQFUNCD = "SC"; /* select between function*/
        SWQREC.SWQFRINB = 0; /* zero from inspection number*/
        SWQREC.SWQTOINB = 0; /* zero to inspection number*/
        SW0KS40();
        SW0KW06.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        SW0KW00.SW0KWUPD = "Y";
        if (SW0KW00.SW0KWCTS == SW0KW00.SW0KWTSP)
          SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLCS;
          SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDTLCS;
          SW0KM001.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        end
      end
      if (SW0KW06.SWHLNCAT[SW0KWLIX] == "UX" /* 'ux' on screen*/
       && SW0KM001.SW0KMDFL != 0)            /* default ux from lane*/
        SW0KW06.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFL;
        SW0KW06.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDTL;
        SWQREC.SWQFRLAN = SW0KM001.SW0KMDFL;
        SWQREC.SWQTOLAN = SW0KM001.SW0KMDTL;
        SWCREC.XLNCD = SW0KW06.SWHLNCAT[SW0KWLIX];
        SWQREC.SWQFUNCD = "SC"; /* select between function*/
        SWQREC.SWQFRINB = 0; /* zero from inspection number*/
        SWQREC.SWQTOINB = 0; /* zero to inspection number*/
        SW0KS40();
        SW0KW06.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        SW0KW00.SW0KWUPD = "Y";
        if (SW0KW00.SW0KWCTS == SW0KW00.SW0KWTSP)
          SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFL;
          SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDTL;
          SW0KM001.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        end
      end
      if (SW0KW06.SWHLNCAT[SW0KWLIX] == "SP" /* 'sp' on screen*/
       && SW0KM001.SW0KMDFLSP != 0)          /* default sp from lane*/
        SW0KW06.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLSP;
        SW0KW06.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDFLSP;
        SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLSP;
        SWQREC.SWQTOLAN = SW0KM001.SW0KMDFLSP;
        SWCREC.XLNCD = SW0KW06.SWHLNCAT[SW0KWLIX];
        SWQREC.SWQFUNCD = "SC"; /* select between function*/
        SWQREC.SWQFRINB = 0; /* zero from inspection number*/
        SWQREC.SWQTOINB = 0; /* zero to inspection number*/
        SW0KS40();
        SW0KW06.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        SW0KW00.SW0KWUPD = "Y";
        if (SW0KW00.SW0KWCTS == SW0KW00.SW0KWTSP)
          SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLSP;
          SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDFLSP;
          SW0KM001.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        end
      end
      if (SW0KW06.SWHLNCAT[SW0KWLIX] == "DC" /* 'DC' on screen*/
       && SW0KM001.SW0KMDFLSP != 0)          /* default DC from lane*/
        SW0KW06.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLDC;
        SW0KW06.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDFLDC;
        SWQREC.SWQFRLAN = SW0KM001.SW0KMDFLDC;
        SWQREC.SWQTOLAN = SW0KM001.SW0KMDFLDC;
        SWCREC.XLNCD = SW0KW06.SWHLNCAT[SW0KWLIX];
        SWQREC.SWQFUNCD = "SC"; /* select between function*/
        SWQREC.SWQFRINB = 0; /* zero from inspection number*/
        SWQREC.SWQTOINB = 0; /* zero to inspection number*/
        SW0KS40();
        SW0KW06.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        SW0KW00.SW0KWUPD = "Y";
        if (SW0KW00.SW0KWCTS == SW0KW00.SW0KWTSP)
          SW0KM001.SW0KMFLN[SW0KWLIX] = SW0KM001.SW0KMDFLDC;
          SW0KM001.SW0KMTLN[SW0KWLIX] = SW0KM001.SW0KMDFLDC;
          SW0KM001.SW0KMLAS[SW0KWLIX] = SWQREC.SWQCOUNT;
        end
      end

    end

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment counter*/

  end


end // end SW0KSE7

// Move lanes from screen to w01
Function SW0KSE8()
   /* ------------------------------------------------------------*/
    /* If line data has changed, moved lane info to w01*/
   /* ------------------------------------------------------------*/

  SW0KW00.SW0KWLIX = 1; /* set line counter*/

  while (SW0KW00.SW0KWLIX <= SW0KW01.SW0KWDLN) /* until all lines checked*/

    if (SW0KW01.SW0KWDFLQC != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "QC"
     || SW0KW01.SW0KWDFLWP != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "WP"
     || SW0KW01.SW0KWDFLCS != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "CS"
     || SW0KW01.SW0KWDFL != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "UX"
     || SW0KW01.SW0KWDFLSP != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "SP"
     || SW0KW01.SW0KWDFLDC != 0
     && SW0KW01.SWHLNCAT[SW0KWLIX] == "DC")

    else
      if (SW0KM001.SW0KMFLN[SW0KWLIX] != SW0KW01.SW0KWFLN[SW0KWLIX])

        SW0KW01.SW0KWFLN[SW0KWLIX] = SW0KM001.SW0KMFLN[SW0KWLIX];

      end

      if (SW0KM001.SW0KMTLN[SW0KWLIX] != SW0KW01.SW0KWTLN[SW0KWLIX])

        SW0KW01.SW0KWTLN[SW0KWLIX] = SW0KM001.SW0KMTLN[SW0KWLIX];

      end

      if (SW0KM001.SW0KMLAS[SW0KWLIX] != SW0KW01.SW0KWLAS[SW0KWLIX])

        SW0KW01.SW0KWLAS[SW0KWLIX] = SW0KM001.SW0KMLAS[SW0KWLIX];

      end

    end

    SW0KW00.SW0KWLIX = SW0KW00.SW0KWLIX + 1; /* increment counter*/

  end


end // end SW0KSE8

//*** RECORD=SW0KW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// CONTROL   DATE     NAME         DESCRIPTION
// ------- --------  ------       -------------
// WV RCV  02-25-93  tglenn    add fromto-range field to
//                             compute value between to and
//                             from lanes.
// ***********************
Record SW0KW00 type basicRecord
  10 SW0KWSWK SW0KWSWK ; 
  10 SW0KWSWR SW0KWSWR ; 
  10 SW0KWSWF SW0KWSWF ; 
  10 SW0KWSWU SW0KWSWU ; 
  10 SW0KWSUB SW0KWSUB ; 
  10 SW0KWUPD SW0KWUPD ; 
  10 SW0KWFFL SW0KWFFL ; 
  10 SW0KWFSW SW0KWFSW ; 
  10 SW0KWPAS SW0KWPAS ; 
  10 SW0KWCUR SW0KWCUR ; 
  10 SW0KWLIX SW0KWLIX ; 
  10 SW0KWCIX SW0KWCIX ; 
  10 SW0KWEXT SW0KWEXT ; 
  10 SW0KWDPF SW0KWDPF ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 SW0KWTSP SW0KWTSP ; 
  10 SW0KWCTS SW0KWCTS ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SW0KWERS SW0KWERS ; 
    15 SW0KWSER SW0KWSER ; 
      20 SW0KWSWE SW0KWSWE [12] ; 
    15 SW0KWDER SW0KWDER ; 
  10 SW0KWKEY SW0KWKEY ; 
    15 XWHCD XWHCD ; 
    15 SWEPLLNB SWEPLLNB ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 XGPCD XGPCD ; 
    15 PC3PONBR PC3PONBR ; 
  10 SW0KW-FROMTO-RANGE SW0KW-FROMTO-RANGE ; 
end // end SW0KW00

//*** RECORD=SW0KW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// ***********************
Record SW0KW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 XRPCD XRPCD ; 
  10 XRPDESC XRPDESC ; 
  10 SW0KWDFL SW0KWDFL ; 
  10 SW0KWDTL SW0KWDTL ; 
  10 SW0KWDFLCS SW0KWDFLCS ; 
  10 SW0KWDTLCS SW0KWDTLCS ; 
  10 SW0KWDFLWP SW0KWDFLWP ; 
  10 SW0KWDTLWP SW0KWDTLWP ; 
  10 SW0KWDFLQC SW0KWDFLQC ; 
  10 SW0KWDTLQC SW0KWDTLQC ; 
  10 SW0KWDFLSP SW0KWDFLSP ; 
  10 SW0KWDFLDC SW0KWDFLDC ; 
  10 SW0KWDLN SW0KWDLN ; 
  10 SW0KWGRP SW0KWGRP [12] ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 XGPCD XGPCD ; 
    15 PC3PONBR PC3PONBR ; 
    15 SW0KWPID SW0KWPID ; 
    15 SWHLNCAT SWHLNCAT ; 
    15 SW0KWLRQ SW0KWLRQ ; 
    15 SW0KWFLN SW0KWFLN ; 
    15 SW0KWTLN SW0KWTLN ; 
    15 SW0KWLAS SW0KWLAS ; 
    15 ZZZCHGCT ZZZCHGCT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
  10 * char(50) ; 
end // end SW0KW01

//*** RECORD=SW0KW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record SW0KW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(652) ; 
    10 SW0KWLND SW0KWLND ; 
    10 * char(50) [12] ; 
      15 TSHCNTNR TSHCNTNR ; 
      15 XGPCD XGPCD ; 
      15 PC3PONBR PC3PONBR ; 
      15 SW0KMPID SW0KMPID ; 
      15 SWHLNCAT SWHLNCAT ; 
      15 SW0KMLRQ SW0KMLRQ ; 
      15 SW0KMFLN SW0KMFLN ; 
      15 SW0KMTLN SW0KMTLN ; 
      15 SW0KMLAS SW0KMLAS ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
      15 ZZZCHGCT ZZZCHGCT ; 
    10 * char(50) ; 
end // end SW0KW02

//*** RECORD=SW0KW03 ****
// Parameters for SL403D - Plan Calculation online submit
// ***********************
Record SW0KW03 type basicRecord
  5 TARJCL TARJCL ; 
    10 XWHCD XWHCD ; 
    10 SW0KWPLN SW0KWPLN ; 
    10 * char(69) ; 
end // end SW0KW03

//*** RECORD=SW0KW04 ****
// -------------------------
// Parameters for SW0KIO
// -------------------------
// ***********************
Record SW0KW04 type basicRecord
  5 SW0KWIOP SW0KWIOP ; 
    10 SW0KWTSK SW0KWTSK ; 
    10 XWHCD XWHCD ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 SW0KWDLN SW0KWDLN ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 CACURRAP CACURRAP ; 
    10 SW0KWCNT SW0KWCNT ; 
    10 SW0KWRCD SW0KWRCD ; 
end // end SW0KW04

//*** RECORD=SW0KW05 ****
// ---------------------------------------------
//   Lane pop-up window working storage
// ---------------------------------------------
// ***********************
Record SW0KW05 type basicRecord
  10 XWHCD XWHCD ; 
  10 SW0KWNUM SW0KWNUM ; 
  10 SW0KWSWT SW0KWSWT ; 
  10 * char(100) ; 
    15 SWCLNENB SWCLNENB [50] ; 
end // end SW0KW05

//*** RECORD=SW0KW06 ****
// -------------------------------------------------------
// temporary storage for validation purposes, so as not to
// disturb the current data page t/s
// -------------------------------------------------------
// ***********************
Record SW0KW06 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(652) ; 
    10 SW0KWLND SW0KWLND ; 
    10 * char(50) [12] ; 
      15 TSHCNTNR TSHCNTNR ; 
      15 XGPCD XGPCD ; 
      15 PC3PONBR PC3PONBR ; 
      15 SW0KMPID SW0KMPID ; 
      15 SWHLNCAT SWHLNCAT ; 
      15 SW0KMLRQ SW0KMLRQ ; 
      15 SW0KMFLN SW0KMFLN ; 
      15 SW0KMTLN SW0KMTLN ; 
      15 SW0KMLAS SW0KMLAS ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
      15 ZZZCHGCT ZZZCHGCT ; 
    10 * char(50) ; 
end // end SW0KW06

//*** RECORD=SW0KW07 ****
// -------------------------------------------------------
// temporary storage for validation purposes, so as not to
// disturb the current data page t/s
// -------------------------------------------------------
// ***********************
Record SW0KW07 type basicRecord
  10 * char(57) ; // XWH_WHSE_CD
    15 SW0KWTSK SW0KWTSK ; 
    15 XWHCD XWHCD ; 
    15 SWEPLLNB SWEPLLNB ; 
    15 TA2GRGGN TA2GRGGN ; 
    15 SW0KW-HANDSTACK-CARTONS SW0KW-HANDSTACK-CARTONS ; 
    15 SW0KW-HANDSTACK-LOCATIONS SW0KW-HANDSTACK-LOCATIONS ; 
    15 SW0KW-SHORT-PALLETS SW0KW-SHORT-PALLETS ; 
    15 SW0KW-SHORT-LOCATIONS SW0KW-SHORT-LOCATIONS ; 
    15 SW0KW-3-4-PALLETS SW0KW-3-4-PALLETS ; 
    15 SW0KW-3-4-LOCATIONS SW0KW-3-4-LOCATIONS ; 
    15 SW0KW-NORMAL-PALLETS SW0KW-NORMAL-PALLETS ; 
    15 SW0KW-NORMAL-LOCATIONS SW0KW-NORMAL-LOCATIONS ; 
    15 SW0KW-TALL-PALLETS SW0KW-TALL-PALLETS ; 
    15 SW0KW-TALL-LOCATIONS SW0KW-TALL-LOCATIONS ; 
    15 SW0KW-PROD-ASSIGN-OK-SW SW0KW-PROD-ASSIGN-OK-SW ; 
end // end SW0KW07

// 'from' lane number
DataItem SW0KMFLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lanes assigned
DataItem SW0KMLAS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lanes required
DataItem SW0KMLRQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id and type
DataItem SW0KMPID char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'to' lane number
DataItem SW0KMTLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of empty 3/4 locs
DataItem SW0KW-3-4-LOCATIONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of 3/4 pallets
DataItem SW0KW-3-4-PALLETS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lane range for from/to lanes
DataItem SW0KW-FROMTO-RANGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of handstack cartons
DataItem SW0KW-HANDSTACK-CARTONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of handstack locations
DataItem SW0KW-HANDSTACK-LOCATIONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of empty normal locs
DataItem SW0KW-NORMAL-LOCATIONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of normal pallets
DataItem SW0KW-NORMAL-PALLETS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product assignment sw
DataItem SW0KW-PROD-ASSIGN-OK-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of empty short locs
DataItem SW0KW-SHORT-LOCATIONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of short pallets
DataItem SW0KW-SHORT-PALLETS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of empty tall locs
DataItem SW0KW-TALL-LOCATIONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of tall pallets
DataItem SW0KW-TALL-PALLETS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Compare index
DataItem SW0KWCIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// csp count
DataItem SW0KWCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current t/s page in w02 recd
DataItem SW0KWCTS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Current screen update switch
DataItem SW0KWCUR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error sw for default lanes
DataItem SW0KWDER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default unexpected 'from' lane
DataItem SW0KWDFL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default unexpected 'from' lane
DataItem SW0KWDFLCS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default unexpected 'to' lane
DataItem SW0KWDFLDC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default unexpected 'from' lane
DataItem SW0KWDFLQC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default unexpected 'from' lane
DataItem SW0KWDFLSP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default unexpected 'from' lane
DataItem SW0KWDFLWP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines
DataItem SW0KWDLN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data passed flag
DataItem SW0KWDPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default unexpected 'to' lane
DataItem SW0KWDTL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default unexpected 'to' lane
DataItem SW0KWDTLCS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default unexpected 'to' lane
DataItem SW0KWDTLQC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default unexpected 'to' lane
DataItem SW0KWDTLWP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Group level for data errors
DataItem SW0KWERS char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit switch
DataItem SW0KWEXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time flag
DataItem SW0KWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'from' lane
DataItem SW0KWFLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First time switch
DataItem SW0KWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0KWGRP char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SW0KIO parms
DataItem SW0KWIOP char(25)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Key to dstloc.vplcpo01
DataItem SW0KWKEY char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lanes assigned
DataItem SW0KWLAS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line index for display
DataItem SW0KWLIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines
DataItem SW0KWLND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lanes required
DataItem SW0KWLRQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric field to convert lane
DataItem SW0KWNUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current pass update switch
DataItem SW0KWPAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id/type combo
DataItem SW0KWPID char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_RCV_PLAN_NBR
DataItem SW0KWPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return code
DataItem SW0KWRCD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error sw for lines
DataItem SW0KWSER char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// allow plan to be submitted
DataItem SW0KWSUB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error sw for each line
DataItem SW0KWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0KWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key fields error flag
DataItem SW0KWSWK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0KWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of table switch
DataItem SW0KWSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data base updated switch
DataItem SW0KWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'to' lane
DataItem SW0KWTLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io task
DataItem SW0KWTSK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work temporary storage page
DataItem SW0KWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Changes made - db not upd'd
DataItem SW0KWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

