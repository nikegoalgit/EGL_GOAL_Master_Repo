package sw0l;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0L ****
// This application allows a user to display plan data for
// a specific warehouse, plan and container.  The data is
// displayed in lane category, lane number, gpc code and P.O.
// number sequence.  All detail totals are accumulated in the
// sequence above.  The container totals are an accumulation
// of the column totals.
// 
// Once the data is viewed and approved, the user may submit
// the create label batch job by pressing PF16.  When the job
// completes, a message will be displayed to the user.
// 
// The user may scroll forward and backward using the
// appropriate PF keys.  The user may exit to any allowed
// application, via fast path or PF key from this screen.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PK#159   10/31/90  SJOHNS  New application.
// FIX      01/18/91  SPOPA   Send EOJ online message to user.
// FIX      01/28/91  SPOPA   Change "Obtain data to display"
//                            to use standard IO module process
//                            and format temporary storage.
// FIX      03/13/91  CENGEL  Added pgm cntl recd logic for
//                            VSLPGM01 table
// MAINT    01/31/92  GRAY    INITIALIZE RECORDS AND MAPS.
// WILRCV   03/30/93  BGILDE  ADDED NEW JCL SUBMIT TABLE.
// ssr#395  06/18/93  gray    chg cntl rec pgm id to SL475D
// ASW001   12/29/95  hkempe  Recompiled due to VPLCPO01 table
//                            change.
// ASW001   01/05/96  hkempe  Revised SW0LT to point to ONETIME
//          04/03/97  DGERLT  Added a bulk zone field to allow
//                            entry of the default receiving
//                            bulk zone.
// ASW001   06/30/97  kheina  Revised SW0LT. Add output stmt
//                            for Bundle report.
// *********************
Program SW0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SL4REC SL4REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0LW00 SW0LW00; // record
  SW0LW01 SW0LW01; // record
  SW0LW02 SW0LW02; // record
  SW0LW03 SW0LW03; // record
  SW0LW04 SW0LW04; // record
  SW0LW05 SW0LW05; // record
  SW2REC SW2REC; // record
  SWCREC SWCREC; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SWHREC SWHREC; // record
  SWVREC SWVREC; // record
  SWXREC SWXREC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XRPTBL; // table
  use SW0LT; // table
  use SW0LT2 {deleteAfterUse = yes}; // table
  use SW0LM.SW0LM001,  // forms
      SW0LM.TA0PM001, 
      SW0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0LM001 initial; /* M001 input/output*/
    set TA0PM001 initial; /* M001 input/output*/
    set XX0XM001 initial; /* M001 input/output*/
    set SW0LW00 empty; /* Working storage*/
    set SW0LW01 empty; /* M001 display storage*/
    set SW0LW02 empty; /* Batch job parameters*/
    set SW0LW03 empty; /* Batch job parameters*/
    set SW0LW04 empty; /* Batch job parameters*/
    set SQLCA empty; /* SQL communication area*/
    set SWCREC empty;
    set SWEREC empty;
    set SW2REC empty;
    set SWFREC empty;
    set SWHREC empty;
    set SWVREC empty;
    set SWXREC empty;
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* jcl submit work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty;

    SW0LW00.SW0LWSWR = "N"; /* Request for data switch*/
    SW0LW00.SW0LWSWF = "N"; /* format screen data switch*/
    SLWREC.XXXAPPID = COMMAREA.CACURRAP;

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    if (SLWREC.XWHCD != " ")

      SW0LM001.XWHCD = SLWREC.XWHCD;
      if (SLWREC.SWEPLLNB != 0)

        SW0LM001.SWEPLLNB = SLWREC.SWEPLLNB;
        SLWREC.TSHCNTNR = " ";
        if (SLWREC.TSHCNTNR != " ")

          SW0LM001.TSHCNTNR = SLWREC.TSHCNTNR;
          SW0LW00.SW0LWSWR = "Y"; /* set data request flag*/
          SW0LW00.SW0LWSWF = "Y"; /* set map format flag*/

        else

          set SW0LM001.TSHCNTNR cursor;

        end

      else

        set SW0LM001.SWEPLLNB cursor;

      end
    else

      set SW0LM001.XWHCD cursor;

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0L001; /* Converse the main process*/


    SW0L001: SW0L001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0L001; /* Converse the main process*/


  end // end main
end // end SW0L

// Inquire/maintain a table row
Function SW0L001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0L100(); /* Obtain the data to display*/

  SW0L200(); /* Format and display the map*/

  SW0L300(); /* Check attention identifier*/

  SW0L400(); /* Reset fields to normal intensity*/

  SW0L500(); /* Verify the entered data*/

  SW0L600(); /* Process valid input request*/


end // end SW0L001

// Obtain the data to display
Function SW0L100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0LW00.SW0LWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SW0LW00.XXXTSLEN = 602; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SW0LW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  SW0L110(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain the pallet, carton, and unit totals for the plan.*/
   /* ------------------------------------------------------------*/

  SW0L120(); /* Obtain the totals for the plan*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  SW0L130(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SW0LW00.SW0LWIXM = 1; /* Display line index*/
  SW0LW00.SW0LWSWC = "N"; /* End of cursor switch*/
  SW0LW00.TSHCNTNR = " "; /* Current container*/

  while (SW0LW00.SW0LWSWC == "N") /* Until end of cursor*/

    SW0L140(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SW0LW00.SW0LWSWC == "N") /* Not end of cursor*/

      if (SWFREC.TSHCNTNR != SW0LW00.TSHCNTNR /* Container changed*/
       && SW0LW00.SW0LWIXM > 1)               /* and line was formatted*/

        SW0L150(); /* Add page to temporary storage*/

        SW0LW00.SW0LWIXM = 1; /* Display line index*/

      end

      SW0L160(); /* Obtain lane / container totals*/

      SW0L170(); /* Save data in display storage*/

    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SW0LW00.SW0LWIXM > 11) /* Page is full*/

      SW0L150(); /* Add page to temporary storage*/

      SW0LW00.SW0LWIXM = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SW0LW00.SW0LWIXM > 1) /* Page was formatted*/
    SW0L150(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  SW0L180(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0LW00.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "100"; /* Module identification*/
    SLWREC.SLWMSGNO = 267; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0LW00.SW0LWSWR = "N"; /* Request for data switch*/


end // end SW0L100

// Purge any temporary storage
Function SW0L110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0LW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0LW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0L110

// Obtain the totals for the plan
Function SW0L120()
   /* ------------------------------------------------------------*/
   /* Obtain the container totals from the table.*/
   /* ------------------------------------------------------------*/

  set SWHREC empty; /* Table row storage*/
  set SWXREC empty; /* Subroutine parameters*/

  SWHREC.XWHCD = SLWREC.XWHCD; /* Warehouse code*/
  SWHREC.SWEPLLNB = SLWREC.SWEPLLNB; /* Plan number*/
  SWHREC.TSHCNTNR = "*"; /* Container number*/
  SWHREC.XGPCD = "*"; /* GPC code*/
  SWHREC.PC3PONBR = -1; /* PO number*/
  SWHREC.SWCLNENB = -1; /* Lane number*/

   /* ------------------------------------------------------------*/
   /* Obtain the pallet total from the table.*/
   /* ------------------------------------------------------------*/

  SWHREC.SWHLNCAT = "PL"; /* Lane category code*/
  SWXREC.SWXFUNCD = "SP"; /* Function code*/

  SW0L121(); /* Summarize VPLNLC01 table rows*/

  SW0LW00.SW0LWPPT = SWXREC.SWXRPNBR; /* Total pallets*/

   /* ------------------------------------------------------------*/
   /* Obtain the carton, unit, and minute totals from the table.*/
   /* ------------------------------------------------------------*/

  SWHREC.SWHLNCAT = "*"; /* Lane category code*/
  SWHREC.SWAINSTP = " "; /* Inspection type code*/
  SWXREC.SWXFUNCD = "SM"; /* Function code*/

  SW0L121(); /* Summarize VPLNLC01 table rows*/

  SW0LW00.SW0LWPCT = SWXREC.SWXCSNBR; /* Total cartons*/
  SW0LW00.SW0LWPUN = SWXREC.SWXCRTUN; /* Total units*/
  SW0LW00.SW0LWPEM = SWXREC.SWXEINMM; /* Estimated minutes*/

   /* ------------------------------------------------------------*/
   /* Obtain inspection unit total from the table.*/
   /* ------------------------------------------------------------*/

  SWHREC.SWHLNCAT = "*"; /* Lane category code*/
  SWHREC.SWAINSTP = "*"; /* Inspection type code*/
  SWXREC.SWXFUNCD = "SM"; /* Function code*/

  SW0L121(); /* Summarize VPLNLC01 table rows*/

  SW0LW00.SW0LWPIU = SWXREC.SWXCRTUN; /* Inspection units*/


end // end SW0L120

// Summarize VPLNLC01 table rows
Function SW0L121()
   /* ------------------------------------------------------------*/
   /* Obtain the container totals from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == -305) /* Row not found*/

      SQLCA.VAGen_SQLCODE = 0; /* SQL return code*/

      SWXREC.SWXCRTUN = 0; /* Carton total units*/
      SWXREC.SWXEINMM = 0; /* Inspection minutes*/
      SWXREC.SWXRPNBR = 0; /* Number of pallets*/
      SWXREC.SWXCSNBR = 0; /* Number of cartons*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUMMARIZE VPLNLC01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWHREC.SWHGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0L121

// Select set and open cursor
Function SW0L130()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SWEREC empty; /* Table row storage*/
  set SWFREC empty; /* Table row storage*/
  set SWHREC empty; /* Table row storage*/

  SWFREC.XWHCD = SLWREC.XWHCD; /* Warehouse code*/
  SWFREC.SWEPLLNB = SLWREC.SWEPLLNB; /* Plan number*/

  if (SLWREC.TSHCNTNR == " ") /* Container not entered*/
    SWFREC.TSHCNTNR = "*"; /* Wildcard container*/
  else
    SWFREC.TSHCNTNR = SLWREC.TSHCNTNR; /* Container number*/
  end

  try
    call "SL4280" ("S1", SQLCA, SWEREC, SWFREC, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0L130

// Fetch next row in the cursor
Function SW0L140()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "SL4280" ("N1", SQLCA, SWEREC, SWFREC, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0LW00.SW0LWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0L140

// Add page to temporary storage
Function SW0L150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0LW01.XXXTSLEN = SW0LW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0LW01 empty; /* M001 display storage*/

    SW0LW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "150"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0L150

// Obtain lane / container totals
Function SW0L160()
   /* ------------------------------------------------------------*/
   /* Obtain the maximum cases per lane from the table.*/
   /* ------------------------------------------------------------*/

  SW0L161(); /* Select VLANE001 table row*/

   /* ------------------------------------------------------------*/
   /* Save the lane information that was selected from the table.*/
   /* ------------------------------------------------------------*/

  SW0LW00.SWCLNENB = SWHREC.SWCLNENB; /* Lane number*/
  SW0LW00.SWHLNCAT = SWHREC.SWHLNCAT; /* Lane category code*/
  SW0LW00.SW0LMCRT = SWHREC.PKDNCSQN; /* Number of cartons*/
  SW0LW00.SW0LMEMM = SWHREC.SWHEINMM; /* Estimated minutes*/
  SW0LW00.SW0LMUNT = SWHREC.SWHCRTUN; /* Total units*/

   /* ------------------------------------------------------------*/
   /* Format the container and lane selection fields.*/
   /* ------------------------------------------------------------*/

  set SWXREC empty; /* Subroutine parameters*/

  SWHREC.XWHCD = SWFREC.XWHCD; /* Warehouse code*/
  SWHREC.SWEPLLNB = SWFREC.SWEPLLNB; /* Plan number*/
  SWHREC.TSHCNTNR = SWFREC.TSHCNTNR; /* Container number*/
  SWHREC.XGPCD = SWFREC.XGPCD; /* GPC code*/
  SWHREC.PC3PONBR = SWFREC.PC3PONBR; /* PO number*/

   /* ------------------------------------------------------------*/
   /* Obtain the lane pallet total from the table.*/
   /* ------------------------------------------------------------*/

  if (SWHREC.SWHLNCAT == "PL") /* Pallet lane category code*/

    SWXREC.SWXFUNCD = "SP"; /* Function code*/

    SW0L121(); /* Summarize VPLNLC01 table rows*/

    SW0LW00.SW0LMPLT = SWXREC.SWXRPNBR; /* Number of pallets*/

  else

    SW0LW00.SW0LMPLT = 0; /* Number of pallets*/

  end

   /* ------------------------------------------------------------*/
   /* Obtain inspection carton and unit totals from the table.*/
   /* ------------------------------------------------------------*/

  SWHREC.SWAINSTP = "*"; /* Inspection type code*/
  SWXREC.SWXFUNCD = "SM"; /* Function code*/

  SW0L121(); /* Summarize VPLNLC01 table rows*/

  SW0LW00.SW0LMICS = SWXREC.SWXCSNBR; /* Inspection cartons*/
  SW0LW00.SW0LMIUN = SWXREC.SWXCRTUN; /* Inspection units*/

   /* ------------------------------------------------------------*/
   /* If the same container, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SWFREC.TSHCNTNR == SW0LW00.TSHCNTNR) /* Same container*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Obtain the container totals for the container number.*/
   /* ------------------------------------------------------------*/

  SWHREC.SWCLNENB = -1; /* Lane number*/
  SWHREC.PC3PONBR = -1; /* PO number*/

   /* ------------------------------------------------------------*/
   /* Obtain the container pallet total from the table.*/
   /* ------------------------------------------------------------*/

  SWHREC.SWHLNCAT = "PL"; /* Lane category code*/
  SWXREC.SWXFUNCD = "SP"; /* Function code*/

  SW0L121(); /* Summarize VPLNLC01 table rows*/

  SW0LW00.SW0LWTPT = SWXREC.SWXRPNBR; /* Total pallets*/

   /* ------------------------------------------------------------*/
   /* Obtain the container carton, unit and minute totals.*/
   /* ------------------------------------------------------------*/

  SWHREC.SWHLNCAT = "*"; /* Lane category code*/
  SWHREC.SWAINSTP = " "; /* Inspection type code*/
  SWXREC.SWXFUNCD = "SM"; /* Function code*/

  SW0L121(); /* Summarize VPLNLC01 table rows*/

  SW0LW00.SW0LWTCT = SWXREC.SWXCSNBR; /* Total cartons*/
  SW0LW00.SW0LWTUN = SWXREC.SWXCRTUN; /* Total units*/
  SW0LW00.SW0LWTEM = SWXREC.SWXEINMM; /* Estimated minutes*/

   /* ------------------------------------------------------------*/
   /* Obtain the container inspection unit total from the table.*/
   /* ------------------------------------------------------------*/

  SWHREC.SWHLNCAT = "*"; /* Lane category code*/
  SWHREC.SWAINSTP = "*"; /* Inspection type code*/
  SWXREC.SWXFUNCD = "SM"; /* Function code*/

  SW0L121(); /* Summarize VPLNLC01 table rows*/

  SW0LW00.SW0LWTIU = SWXREC.SWXCRTUN; /* Inspection units*/

   /* ------------------------------------------------------------*/
   /* Save the current container number in working storage.*/
   /* ------------------------------------------------------------*/

  SW0LW00.TSHCNTNR = SWFREC.TSHCNTNR; /* Current container*/


end // end SW0L160

// Select VLANE001 table row
Function SW0L161()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set SWCREC empty; /* Clear row storage area*/

  SWCREC.XWHCD = SWFREC.XWHCD; /* Warehouse code*/
  SWCREC.SWCLNENB = SWHREC.SWCLNENB; /* Lane number*/

  try
    call "IO5330" ("S ", SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      SWCREC.SWCMAXCS = 0; /* Maximum cases per lane*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VLANE001 TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* Table view name*/
  TA1REC.TA1TBLKE = SWCREC.SWCGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0L161

// Save data in display storage
Function SW0L170()
   /* ------------------------------------------------------------*/
   /* If the first line on the page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SW0LW00.SW0LWIXM == 1) /* First line on page*/

    SW0LW01.XWHCD = SWFREC.XWHCD; /* Warehouse code*/
    SW0LW01.SWEPLLNB = SWFREC.SWEPLLNB; /* Plan number*/
    SW0LW01.XRPCD = SWEREC.XRPCD; /* Plan status code*/
    if (SWEREC.XRPCD in XRPTBL.XRPCD)
      SW0LW01.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex]; /* Description*/
    else
      SW0LW01.XRPDESC = "* NOT FOUND * "; /* Default description*/
    end
    SW0LW01.TSHCNTNR = SWFREC.TSHCNTNR; /* Container number*/
    SW0LW01.SW0LWTPT = SW0LW00.SW0LWTPT; /* Container pallets*/
    SW0LW01.SW0LWTCT = SW0LW00.SW0LWTCT; /* Container cartons*/
    SW0LW01.SW0LWTUN = SW0LW00.SW0LWTUN; /* Container units*/
    SW0LW01.SW0LWTIU = SW0LW00.SW0LWTIU; /* Container insp units*/
    SW0LW01.SW0LWTEM = SW0LW00.SW0LWTEM; /* Container est minutes*/
    SW0LW01.SW0LWPPT = SW0LW00.SW0LWPPT; /* Total pallets*/
    SW0LW01.SW0LWPCT = SW0LW00.SW0LWPCT; /* Total cartons*/
    SW0LW01.SW0LWPUN = SW0LW00.SW0LWPUN; /* Total units*/
    SW0LW01.SW0LWPIU = SW0LW00.SW0LWPIU; /* Total insp units*/
    SW0LW01.SW0LWPEM = SW0LW00.SW0LWPEM; /* Total est minutes*/

  end

   /* ------------------------------------------------------------*/
   /* Format the purchase order identification and type.*/
   /* ------------------------------------------------------------*/

  set SWVREC empty; /* clear po rtn record*/

  SWVREC.XGPCD = SWFREC.XGPCD; /* gpc code*/
  SWVREC.PC3POIDT = SWFREC.PC3POIDT; /* PO id mo rng*/
  SWVREC.PCFSECD = SWFREC.PCFSECD; /* PO id sesn cd*/
  SWVREC.FY1FCTYC = SWFREC.FY1FCTYC; /* Fcty cd*/

  SWVREC.SWVWFNC = "T2"; /* PO ID/Type will be returned*/

  XSSLS10(); /* PO ID/Type conversion routine*/

  if (SWVREC.SWVWRTN != 0) /* Not normal return*/

    SLWREC.XXXLOCID = "170"; /* Module identification*/
    converseLib.validationFailed(295); /* PO conversion failed*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0LW01.SWHLNCAT[SW0LWIXM] = SW0LW00.SWHLNCAT; /* Lane category*/
  SW0LW01.SWCLNENB[SW0LWIXM] = SW0LW00.SWCLNENB; /* Lane number*/
  SW0LW01.XGPCD[SW0LWIXM] = SWFREC.XGPCD; /* GPC code*/
  SW0LW01.PC3PONBR[SW0LWIXM] = SWFREC.PC3PONBR; /* PO number*/
  SW0LW01.SWVWPOID[SW0LWIXM] = SWVREC.SWVWPOID; /* PO identification*/
  SW0LW01.PC4ORTYP[SW0LWIXM] = SWFREC.PC4ORTYP; /* Order type code*/
  SW0LW01.SWCMAXCS[SW0LWIXM] = SWCREC.SWCMAXCS; /* Maximum cartons*/
  SW0LW01.SW0LMCRT[SW0LWIXM] = SW0LW00.SW0LMCRT; /* Number of cartons*/
  SW0LW01.SW0LMPLT[SW0LWIXM] = SW0LW00.SW0LMPLT; /* Number of pallets*/
  SW0LW01.SW0LMICS[SW0LWIXM] = SW0LW00.SW0LMICS;
                                   /* Inspection cartons*/
  SW0LW01.SW0LMUNT[SW0LWIXM] = SW0LW00.SW0LMUNT; /* Total units*/
  SW0LW01.SW0LMIUN[SW0LWIXM] = SW0LW00.SW0LMIUN; /* Inspection units*/
  SW0LW01.SW0LMEMM[SW0LWIXM] = SW0LW00.SW0LMEMM; /* Estimated minutes*/

  SW0LW00.SW0LWIXM = SW0LW00.SW0LWIXM + 1; /* Increment line index*/


end // end SW0L170

// Close selected set cursor
Function SW0L180()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "SL4280" ("C1", SQLCA, SWEREC, SWFREC, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "180"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0L180

// Format and converse the map
Function SW0L200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0LW00.SW0LWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0LW00.SW0LWSWF == "Y") /* Map must be formatted*/
      SW0L210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0LM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0LM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0LM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0LM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0LM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0LM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0LM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0LM001.CAITEM; /* Application data*/


end // end SW0L200

// Format the display data
Function SW0L210()
   /* ------------------------------------------------------------*/
   /* init map sw0lm001*/
   /* ------------------------------------------------------------*/

  set SW0LM001 initial; /* m001 input/ouput area*/

  SW0LW00.SW0LWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format sw0lm001 using passed data*/
   /* ------------------------------------------------------------*/

  SW0LM001.XWHCD = SLWREC.XWHCD;
  SW0LM001.SWEPLLNB = SLWREC.SWEPLLNB;
  SW0LM001.TSHCNTNR = SLWREC.TSHCNTNR;
  SW0LM001.SW0LBLKZN = SW0LW00.SW0LBLKZN;

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (SW0LW00.SW0LWSWR == "Y" /* Request for data pending*/
   || SW0LW00.TA5TSQIX == 0)  /* or no pages formatted*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* load map using sw0lw01 work record*/
   /* ------------------------------------------------------------*/

  SW0L211(); /* read temporary storage*/

  set SW0LM001.XXXLITPG skip; /* "PAGE" literal*/
  SW0LM001.XXXTSPAG = SW0LW00.XXXTSPAG; /* Current page*/
  set SW0LM001.XXXLITOF skip; /* "OF" literal*/
  SW0LM001.TA5TSQIX = SW0LW00.TA5TSQIX; /* Highest page*/

  SW0LM001.XRPCD = SW0LW01.XRPCD;
  SW0LM001.XRPDESC = SW0LW01.XRPDESC;
  SW0LM001.TSHCNTNR = SW0LW01.TSHCNTNR;

  SW0LW00.SW0LWIXM = 1;

  while (SW0LW00.SW0LWIXM <= 11 /* Until end of lines*/
   && SW0LW01.SWHLNCAT[SW0LWIXM] != " ") /* or end of data*/

    SW0LM001.SWHLNCAT[SW0LWIXM] = SW0LW01.SWHLNCAT[SW0LWIXM];
    SW0LM001.SWCLNENB[SW0LWIXM] = SW0LW01.SWCLNENB[SW0LWIXM];
    SW0LM001.SW0LMGPC[SW0LWIXM] = SW0LW01.XGPCD[SW0LWIXM];
    SW0LM001.PC3PONBR[SW0LWIXM] = SW0LW01.PC3PONBR[SW0LWIXM];
    SW0LM001.SW0LMPID[SW0LWIXM] = SW0LW01.SW0LMPID[SW0LWIXM];
    SW0LM001.SWCMAXCS[SW0LWIXM] = SW0LW01.SWCMAXCS[SW0LWIXM];
    SW0LM001.SW0LMCRT[SW0LWIXM] = SW0LW01.SW0LMCRT[SW0LWIXM];
    SW0LM001.SW0LMPLT[SW0LWIXM] = SW0LW01.SW0LMPLT[SW0LWIXM];
    SW0LM001.SW0LMICS[SW0LWIXM] = SW0LW01.SW0LMICS[SW0LWIXM];
    SW0LM001.SW0LMUNT[SW0LWIXM] = SW0LW01.SW0LMUNT[SW0LWIXM];
    SW0LM001.SW0LMIUN[SW0LWIXM] = SW0LW01.SW0LMIUN[SW0LWIXM];
    SW0LM001.SW0LMEMM[SW0LWIXM] = SW0LW01.SW0LMEMM[SW0LWIXM];

    SW0LW00.SW0LWIXM = SW0LW00.SW0LWIXM + 1; /* increment load*/

  end

  SW0LM001.SW0LMTPT = SW0LW01.SW0LWTPT;
  SW0LM001.SW0LMTCT = SW0LW01.SW0LWTCT;
  SW0LM001.SW0LMTUN = SW0LW01.SW0LWTUN;
  SW0LM001.SW0LMTIU = SW0LW01.SW0LWTIU;
  SW0LM001.SW0LMTEM = SW0LW01.SW0LWTEM;
  SW0LM001.SW0LWPPT = SW0LW01.SW0LWPPT;
  SW0LM001.SW0LWPCT = SW0LW01.SW0LWPCT;
  SW0LM001.SW0LWPUN = SW0LW01.SW0LWPUN;
  SW0LM001.SW0LWPIU = SW0LW01.SW0LWPIU;
  SW0LM001.SW0LWPEM = SW0LW01.SW0LWPEM;


end // end SW0L210

// Read temporary storage page
Function SW0L211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SW0LW01.XXXTSLEN = SW0LW00.XXXTSLEN;
  TA5REC.TA5TSQIX = SW0LW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0LW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "211"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0L211

// Check attention identifier
Function SW0L300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/
    set SW0LW01 empty;
    set SW0LW02 empty;
    set SW0LW03 empty;
    set SW0LW04 empty;

    SLWREC.XWHCD = " ";
    SLWREC.SWEPLLNB = 0;
    SLWREC.TSHCNTNR = " ";

    SW0LW00.SW0LWSWR = "N"; /* request for data*/
    SW0LW00.SW0LWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0LM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0L110(); /* purge temp storage*/

      XSSL001(); /* Exit to another application*/

      SW0LW00.SW0LWSWR = "N"; /* request for data*/
      SW0LW00.SW0LWSWF = "Y"; /* format screen m001*/

      set SW0LM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(166); /* cant get to requested appl*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(258); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf16) /* or PF16 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0LM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "SW0K"; /* TO application*/
    end

    SW0L110(); /* purge temp storage*/

    XSSL001(); /* Exit to another application*/

    SW0LW00.SW0LWSWR = "N"; /* request for data*/
    SW0LW00.SW0LWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf15) /* pf16 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0L300

// Reset highlighted fields
Function SW0L400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0LM001.XWHCD initialAttributes; /* WHSE CODE*/
  set SW0LM001.SWEPLLNB initialAttributes; /* PLAN NUMBER*/
  set SW0LM001.TSHCNTNR initialAttributes; /* container number*/
  set SW0LM001.SW0LBLKZN initialAttributes; /* bulk zone number*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0LM001.XWHCD == "?") /* WAREHOUSE CODE*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(49);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SW0LM001.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SW0LM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected*/
      SLWREC.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected co*/

    end

    set SW0LM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before displa*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/
  converseLib.validationFailed(241); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SW0L400

// Verify the entered data
Function SW0L500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0LM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/

  end

   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (sw0lw00) ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SW0LM001.XWHCD == SW0LW01.XWHCD       /* warehouse code*/
   && SW0LM001.SWEPLLNB == SW0LW01.SWEPLLNB /* plan number*/
   && SW0LM001.TSHCNTNR == SW0LW01.TSHCNTNR) /* container nbr*/

    SLWREC.SLWSKYSW = "Y";
  else
    SLWREC.SLWSKYSW = "N";

  end

   /* ------------------------------------------------------------*/
   /* check pfkey*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    SW0L510(); /* validate scroll request*/

  else

    if (converseVar.eventKey is enter)

      SW0L520(); /* validate key fields*/

    else

      if (converseVar.eventKey is pf15)

        SW0L530(); /* verify print request*/

      end

    end

  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end SW0L500

// validate key fields
Function SW0L510()
   /* ------------------------------------------------------------*/
   /* If key has changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW != "Y") /* key has not changed*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(5); /* change the key on enter*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0LW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0LW00.XXXTSPAG >= SW0LW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end


end // end SW0L510

// Verify the Entered Data
Function SW0L520()

   /* ------------------------------------------------------------*/
   /* check bulk zone*/
   /* ------------------------------------------------------------*/

  if (SW0LM001.SW0LBLKZN == "  ")
    SW0LW00.SW0LBLKZN = SW0LM001.SW0LBLKZN;
  else
    SL4REC.XWHCD = SW0LM001.XWHCD; /* warehouse number*/
    SL4REC.XARCD = "01";
    SL4REC.SL4ZONE = SW0LM001.SW0LBLKZN;

    SW0LS11(); /* verify bulk zone*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (SL4REC.YZTCD == "01")
        SW0LW00.SW0LBLKZN = SW0LM001.SW0LBLKZN;
      else
        SLWREC.XXXLOCID = "520";
        set SW0LM001.SW0LBLKZN cursor, bold;
        converseLib.validationFailed(467); /* invalid key entered*/
      end
    else
      SLWREC.XXXLOCID = "520";
      set SW0LM001.SW0LBLKZN cursor, bold;
      converseLib.validationFailed(468); /* invalid key entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* check plan*/
   /* ------------------------------------------------------------*/

  if (SW0LM001.SWEPLLNB > 0)
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "520";
    set SW0LM001.SWEPLLNB cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SW0LM001.XWHCD > " ")
    if (SW0LM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.XXXLOCID = "520";
        set SW0LM001.XWHCD cursor, bold;
        converseLib.validationFailed(010); /* status is inactive*/
      end
    else
      SLWREC.XXXLOCID = "520";
      set SW0LM001.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SLWREC.XXXLOCID = "520";
    set SW0LM001.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

  if (SLWREC.XXXLOCID == "520")
    return;
  end

   /* ------------------------------------------------------------*/
   /* check receiving plan status*/
   /* ------------------------------------------------------------*/

  set SWEREC empty;

  SWEREC.XWHCD = SW0LM001.XWHCD; /* warehouse number*/
  SWEREC.SWEPLLNB = SW0LM001.SWEPLLNB; /* plan number*/

  SW0LS10(); /* sel unique vplnhd01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SWEREC.XRPCD != "WK"
     && SWEREC.XRPCD != "SV"
     && SWEREC.XRPCD != "CA"
     && SWEREC.XRPCD != "SC"
     && SWEREC.XRPCD != "RC"
     && SWEREC.XRPCD != "IP")
      if (SWEREC.XRPCD in XRPTBL.XRPCD) /* receiving plan status*/
        SW0LM001.XRPCD = XRPTBL.XRPCD[sysVar.arrayIndex];
        SW0LM001.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex];
        if (XRPTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* status inactive*/
          SLWREC.XXXLOCID = "520";
          set SW0LM001.SWEPLLNB cursor, bold;
          converseLib.validationFailed(9); /* status is inactive*/
        end
      else
        SLWREC.XXXLOCID = "520";
        set SW0LM001.SWEPLLNB cursor, bold;
        converseLib.validationFailed(218); /* invalid code*/
      end
    else
      SLWREC.XXXLOCID = "520";
      set SW0LM001.SWEPLLNB cursor, bold;
      converseLib.validationFailed(218); /* invalid code*/
    end
  end

  if (SQLCA.VAGen_SQLCODE != 0
   || SLWREC.XXXLOCID == "520")
    return;
  end

   /* ------------------------------------------------------------*/
   /* validate plan and container against plan/container po*/
   /* ------------------------------------------------------------*/

  if (SW0LM001.TSHCNTNR == " " /* Container not entered*/
   || SW0LM001.TSHCNTNR == "*") /* or wildcard entered*/

    return; /* Return to previous process*/

  end

  set SWFREC empty;

  SWFREC.XWHCD = SW0LM001.XWHCD; /* warehouse number*/
  SWFREC.SWEPLLNB = SW0LM001.SWEPLLNB; /* plan number*/
  SWFREC.TSHCNTNR = SW0LM001.TSHCNTNR; /* container nbr*/
  SWFREC.XGPCD = "*"; /* group code*/
  SWFREC.PC3PONBR = -1; /* po number*/

  SW0LS07(); /* sel set dstloc.vplcpo01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SW0LS08(); /* fetch first vplcpo01 row*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      SLWREC.XXXLOCID = "520";
      set SW0LM001.TSHCNTNR cursor, bold;
      converseLib.validationFailed(267); /* invalid key entered*/
    end
  end

  SW0LS09(); /* close cursor dstloc.vplcpo01*/

end // end SW0L520

// verify print request
Function SW0L530()
   /* ------------------------------------------------------------*/
   /* If key has changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW != "Y") /* key has changed*/

    SLWREC.XXXLOCID = "530"; /* Module identification*/
    converseLib.validationFailed(219); /* cannot change key*/

    if (SW0LM001.TSHCNTNR != SW0LW01.TSHCNTNR)
      set SW0LM001.TSHCNTNR cursor, bold;
    end

    if (SW0LM001.SWEPLLNB != SW0LW01.SWEPLLNB)
      set SW0LM001.SWEPLLNB cursor, bold;
    end

    if (SW0LM001.XWHCD != SW0LW01.XWHCD)
      set SW0LM001.XWHCD cursor, bold;
    end
  else

    /* ------------------------------------------------------------*/
     /* if no data was displayed last time*/
    /* ------------------------------------------------------------*/

    if (SW0LW00.SW0LWSWR == "Y" /* Request for data pending*/
     || SW0LW00.TA5TSQIX == 0)  /* or no pages formatted*/

      SLWREC.XXXLOCID = "530"; /* Module identification*/
      converseLib.validationFailed(287); /* No more pages to display*/

    end

  end


end // end SW0L530

// Process valid input request
Function SW0L600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map is to be formatted.*/
   /* ------------------------------------------------------------*/

  SW0LW00.SW0LWSWF = "Y"; /* format map 001*/

   /* ------------------------------------------------------------*/
   /* If ENTER and key was changed, indicate request for data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && SLWREC.SLWSKYSW == "N")       /* and key changed*/

    SLWREC.XWHCD = SW0LM001.XWHCD; /* Warehouse code*/
    SLWREC.SWEPLLNB = SW0LM001.SWEPLLNB; /* Plan number*/

    if (SW0LM001.TSHCNTNR == " " /* Container not entered*/
     || SW0LM001.TSHCNTNR == "*") /* or wildcard entered*/
      SLWREC.TSHCNTNR = " "; /* Container number*/
    else
      SLWREC.TSHCNTNR = SW0LM001.TSHCNTNR; /* Container number*/
    end

    SW0LW00.SW0LWSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    SW0LW00.XXXTSPAG = SW0LW00.XXXTSPAG - 1;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    SW0LW00.XXXTSPAG = SW0LW00.XXXTSPAG + 1;
  end

   /* ------------------------------------------------------------*/
   /* pf15(print opt) has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* print option*/
    SW0L605(); /* check if pgm cntl recd in VSLPGM01*/
    if (converseVar.validationMsgNum == 0) /* if everything is fine*/
      SW0L607(); /* add pgm cntl recd to VSLPGM01*/
      if (converseVar.validationMsgNum == 0) /* if everything is fine*/
        SW0L610(); /* format/submit batch job*/
      end
    end
  end


end // end SW0L600

// Look for Existing Pgm Cntl Rec
Function SW0L605()
   /* ------------------------------------------------------------*/
   /* Initialize the soubroutine work record.*/
   /* ------------------------------------------------------------*/

  set SW2REC empty; /* clear Subroutine work record*/

  SW2REC.XWHCD = SLWREC.XWHCD; /* warehouse*/
  SW2REC.SWEPLLNB = SLWREC.SWEPLLNB; /* plan*/
  if (SLWREC.XWHCD == "51")
    SW2REC.XXXPGMNB = "SL416D"; /* program name*/
  else
    SW2REC.XXXPGMNB = "SL475D"; /* program name*/
  end

   /* ------------------------------------------------------------*/
   /* Perform 'select' function to see if a pgm control record*/
   /* with the same key already exists in VSLPGM01.  We don't*/
   /* want SW0L to proceed with submitting JCL if there's an*/
   /* identical job request already in progress.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5700" ("S ", SQLCA, SW2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, examine sqlcode and return to previous*/
   /* process.  In this case, an sqlcode of 0 means there's*/
   /* trouble and an sqlcode of 100 is good.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/
      converseLib.validationFailed(395); /* Duplicate job already in progress*/
      return; /* return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        return; /* return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user;*/
   /* otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "605"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Resources unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Error - notify programming*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VSLPGM01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Module identification*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Database name*/
  TA1REC.TA1TBLVU = "VSLPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW2REC.SW2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0L605

// Create New Pgm Cntl Rec
Function SW0L607()
   /* ------------------------------------------------------------*/
   /* Perform 'insert' function to add new program control record*/
   /* to VSLPGM01.  The subroutine work record (SW2REC) has*/
   /* already been initialized by SW0L605.  The batch program*/
   /* SL416D will delete the program control record from VSLPGM01*/
   /* as part of its program termination logic, in order to*/
   /* enable subsequent submittals of print requests with the*/
   /* same key field values.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5700" ("A ", SQLCA, SW2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Insertion successful*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == -803) /* Duplicate record key*/
        converseLib.validationFailed(395); /* Duplicate job already in progress*/
        SLWREC.XXXLOCID = "607"; /* Module identification*/
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user;*/
   /* otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "607"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Resources unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Error - notify programming*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT VSLPGM01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Module identification*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Database name*/
  TA1REC.TA1TBLVU = "VSLPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW2REC.SW2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0L607

// Format/submit print request
Function SW0L610()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/
  set SW0LW02 empty; /* parm work area*/
  set SW0LW03 empty; /* parm work area*/
  set SW0LW04 empty; /* parm work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Obtain the current system date and time of day.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date/time*/

   /* ------------------------------------------------------------*/
   /* Obtain userid and terminal information.*/
   /* ------------------------------------------------------------*/

  SW0L612(); /* Obtain user and terminal*/


   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SLWREC.XWHCD == "51"
    )
      if (SW0LT.TARTYPE[TA6INDEX] == "1") /* Parameters statement*/

        SW0LW03.XWHCD = SLWREC.XWHCD;
        SW0LW03.SW0LWPLN = SLWREC.SWEPLLNB;
        SW0LW03.SW0LBLKZN = SW0LM001.SW0LBLKZN;

        TA6REC.TARJCL[TA6INDEX] = SW0LW03.TARJCL; /* Parameters*/

      else

        if (SW0LT.TARTYPE[TA6INDEX] == "2") /* Parameters statement*/

          SW0LW02.XWHCD = SLWREC.XWHCD;
          SW0LW02.SW0LWPLN = SLWREC.SWEPLLNB;
          SW0LW02.SW0LWPUF = "P";

          TA6REC.TARJCL[TA6INDEX] = SW0LW02.TARJCL; /* Parameters*/

        else
          if (SW0LT.TARTYPE[TA6INDEX] == "E") /* Parameters statement*/
            SW0LW05.TARJCL = SW0LT.TARJCL[TA6INDEX];
            SW0LW05.TA3MSGID = TA3REC.TA3MSGID;
                                   /* Region identification*/
            SW0LW05.TA3EIBRM = TA3REC.TA3EIBRM;
                                   /* Terminal identification*/
            SW0LW05.SW0LPLNBR = SLWREC.SWEPLLNB; /* Plan number*/
            TA6REC.TARJCL[TA6INDEX] = SW0LW05.TARJCL;
          else


            /* -----------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/
            /* -----------------------------------------------------------*/
            TA6REC.TARJCL[TA6INDEX] = SW0LT.TARJCL[TA6INDEX]; /**/
            TA6REC.TARTYPE[TA6INDEX] = SW0LT.TARTYPE[TA6INDEX]; /**/

          end

        end

      end

    else

      if (SW0LT2.TARTYPE[TA6INDEX] == "1") /* Parameters statement*/

        SW0LW03.XWHCD = SLWREC.XWHCD;
        SW0LW03.SW0LWPLN = SLWREC.SWEPLLNB;

        TA6REC.TARJCL[TA6INDEX] = SW0LW03.TARJCL; /* Parameters*/

      else

        if (SW0LT2.TARTYPE[TA6INDEX] == "2") /* Parameters statement*/

          SW0LW02.XWHCD = SLWREC.XWHCD;
          SW0LW02.SW0LWPLN = SLWREC.SWEPLLNB;
          SW0LW02.SW0LWPUF = "P";

          TA6REC.TARJCL[TA6INDEX] = SW0LW02.TARJCL; /* Parameters*/

        else

          if (SW0LT2.TARTYPE[TA6INDEX] == "W") /* Parameters statement*/

            SW0LW04.JCLLIT = "//             WHSE=";
            SW0LW04.XWHCD = SLWREC.XWHCD;

            TA6REC.TARJCL[TA6INDEX] = SW0LW04.TARJCL; /* Parameters*/

          else

            /* ----------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/
            /* ----------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = SW0LT2.TARJCL[TA6INDEX]; /**/
            TA6REC.TARTYPE[TA6INDEX] = SW0LT2.TARTYPE[TA6INDEX]; /**/

          end

        end

      end

    end

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SLWREC.XWHCD == "51")
      if (SW0LT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

      end
    else
      if (SW0LT2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  if (SLWREC.XWHCD == "51")
    TA6REC.TA6MSGSW = "N"; /* EOJ online message*/
  else
    TA6REC.TA6MSGSW = "Y"; /* EOJ online message*/
  end

  XPTA0P(); /* Print Request Subroutine*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SW0L610

// Obtain the region and terminal
Function SW0L612()
   /* ------------------------------------------------------------*/
   /* Obtain the CICS region and terminal identification.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty; /* Initialize subroutine parameters*/

  TA3REC.TA3OPTN = "ALLFLDS"; /* Indicate subroutine option*/

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user information*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0)          /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Post the error information to the Error Diagnosis Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Error information*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN THE REGION AND TERMINAL";
  TA1REC.TA1PGMNM = "SW0L612"; /* Process name*/
  TA1REC.TA1MAP = "SW0LM001"; /* Map name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Indicate the error and return to the calling application.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = "7"; /* Region/terminal error*/

  exit stack; /* Return to calling application*/


end // end SW0L612

// select 's1' dstloc.vplcpo01
Function SW0LS07()
   /* ------------------------------------------------------------*/
   /* key fields are loaded in the calling process*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* select set dstloc.vplcpo01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("S1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S07"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DSTLOC.VPLCPO01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0LS07

// fetch 'n1' dstloc.vplcpo01
Function SW0LS08()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vplcpo01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("N1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DSTLOC.VPLCPO01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0LS08

// close 's1' dstloc.vplcpo01 set
Function SW0LS09()
   /* ------------------------------------------------------------*/
   /* close dstloc.vplcpo01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("C1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  SLWREC.XXXLOCID = "S09"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0LS09

// select 's' dstloc.vplnhd01
Function SW0LS10()

   /* ------------------------------------------------------------*/
   /* obtain plan header from dstloc.vplnhd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == +100)   /* plan header not found*/

      converseLib.validationFailed(214); /* Indicate not available*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before displa*/

    else

      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before displa*/

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VPLNHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
   /* MOVE SWEREC.SWEKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0LS10

// select 's' dstloc.vplnhd01
Function SW0LS11()

   /* ------------------------------------------------------------*/
   /* obtain plan header from dstloc.vplnhd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1480" ("S ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == +100)   /* zone not found*/

      converseLib.validationFailed(214); /* Indicate not available*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before displa*/

    else

      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before displa*/

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VAZONE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZONE01"; /* Table view name*/
   /* MOVE Sl4REC.SWEKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SW0LS11

//*** RECORD=SW0LW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0LW00 type basicRecord
  10 SW0LWSWC SW0LWSWC ; 
  10 SW0LWSWF SW0LWSWF ; 
  10 SW0LWSWR SW0LWSWR ; 
  10 SW0LWIXM SW0LWIXM ; 
  10 SWCLNENB SWCLNENB ; 
  10 SWHLNCAT SWHLNCAT ; 
  10 SW0LMCRT SW0LMCRT ; 
  10 SW0LMPLT SW0LMPLT ; 
  10 SW0LMICS SW0LMICS ; 
  10 SW0LMUNT SW0LMUNT ; 
  10 SW0LMIUN SW0LMIUN ; 
  10 SW0LMEMM SW0LMEMM ; 
  10 SW0LWTPT SW0LWTPT ; 
  10 SW0LWTCT SW0LWTCT ; 
  10 SW0LWTUN SW0LWTUN ; 
  10 SW0LWTIU SW0LWTIU ; 
  10 SW0LWTEM SW0LWTEM ; 
  10 SW0LWPPT SW0LWPPT ; 
  10 SW0LWPCT SW0LWPCT ; 
  10 SW0LWPUN SW0LWPUN ; 
  10 SW0LWPIU SW0LWPIU ; 
  10 SW0LWPEM SW0LWPEM ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SW0LBLKZN SW0LBLKZN ; 
end // end SW0LW00

//*** RECORD=SW0LW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SW0LW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(602) ; 
    10 XWHCD XWHCD ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 XRPCD XRPCD ; 
    10 XRPDESC XRPDESC ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 * char(48) [11] ; 
      15 SWHLNCAT SWHLNCAT ; 
      15 SWCLNENB SWCLNENB ; 
      15 XGPCD XGPCD ; 
      15 PC3PONBR PC3PONBR ; 
      15 SW0LMPID SW0LMPID ; 
        20 SWVWPOID SWVWPOID ; 
        20 * char(1) ; 
        20 PC4ORTYP PC4ORTYP ; 
      15 SWCMAXCS SWCMAXCS ; 
      15 SW0LMCRT SW0LMCRT ; 
      15 SW0LMPLT SW0LMPLT ; 
      15 SW0LMICS SW0LMICS ; 
      15 SW0LMUNT SW0LMUNT ; 
      15 SW0LMIUN SW0LMIUN ; 
      15 SW0LMEMM SW0LMEMM ; 
    10 SW0LWTPT SW0LWTPT ; 
    10 SW0LWTCT SW0LWTCT ; 
    10 SW0LWTUN SW0LWTUN ; 
    10 SW0LWTIU SW0LWTIU ; 
    10 SW0LWTEM SW0LWTEM ; 
    10 SW0LWPPT SW0LWPPT ; 
    10 SW0LWPCT SW0LWPCT ; 
    10 SW0LWPUN SW0LWPUN ; 
    10 SW0LWPIU SW0LWPIU ; 
    10 SW0LWPEM SW0LWPEM ; 
end // end SW0LW01

//*** RECORD=SW0LW02 ****
// -------------------------
// parameters for sl413d
// -------------------------
// ***********************
Record SW0LW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 XWHCD XWHCD ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 SW0LWWTF SW0LWWTF ; 
    10 SW0LWPKS SW0LWPKS ; 
    10 SL2PALET SL2PALET ; 
    10 SL8FRLC SL8FRLC ; 
    10 SW0LWPLN SW0LWPLN ; 
    10 SW0LWWOG SW0LWWOG ; 
    10 SW0LWWON SW0LWWON ; 
    10 SL8UPDBY SL8UPDBY ; 
    10 SW0LWPUF SW0LWPUF ; 
    10 * char(7) ; 
end // end SW0LW02

//*** RECORD=SW0LW03 ****
// --------------------------------
// Parameters to be sent to FF6300.
// --------------------------------
// ***********************
Record SW0LW03 type basicRecord
  5 TARJCL TARJCL ; 
    10 XWHCD XWHCD ; 
    10 SW0LWPLN SW0LWPLN ; 
    10 SW0LBLKZN SW0LBLKZN ; 
    10 * char(67) ; 
end // end SW0LW03

//*** RECORD=SW0LW04 ****
// --------------------------------
// Parameters to be sent to FF6300.
// --------------------------------
// ***********************
Record SW0LW04 type basicRecord
  5 TARJCL TARJCL ; 
    10 JCLLIT char(20) ; 
    10 XWHCD XWHCD ; 
    10 * char(58) ; 
end // end SW0LW04

//*** RECORD=SW0LW05 ****
// ------------------------------------------------------------
// This record is a redefinition of the TARJCL statement.
// It is used to define the columns to be used to insert the
// EOJ online message information for JCL procedure TA9911.
// ------------------------------------------------------------
// ***********************
Record SW0LW05 type basicRecord
  5 TARJCL TARJCL ; 
    10 TA3MSGID TA3MSGID ; 
    10 TA3EIBRM TA3EIBRM ; 
    10 * char(5) ; 
    10 * char(6) ; // NIKE job identification
    10 * char(6) ; 
    10 SW0LPLNBR SW0LPLNBR ; 
    10 * char(4) ; 
    10 * num(2) ; // work record mm
    10 * char(1) ; 
    10 * num(2) ; // work record dd
    10 * char(1) ; 
    10 * num(2) ; // work record yy
    10 * char(4) ; 
    10 * num(2) ; // work record hours
    10 * char(1) ; 
    10 * num(2) ; // work record minutes
    10 * char(24) ; 
end // end SW0LW05

// SL_ZONE_CD
DataItem SW0LBLKZN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr crtns
DataItem SW0LMCRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// est min
DataItem SW0LMEMM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ins crtn
DataItem SW0LMICS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ins units
DataItem SW0LMIUN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id and type
DataItem SW0LMPID char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr plts
DataItem SW0LMPLT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total units
DataItem SW0LMUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL_RCV_PLAN_NBR
DataItem SW0LPLNBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem SW0LWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Plan carton count
DataItem SW0LWPCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Plan est mm
DataItem SW0LWPEM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Plan insp units
DataItem SW0LWPIU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// package carton seq nbr
DataItem SW0LWPKS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL_RCV_PLAN_NBR
DataItem SW0LWPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Plan pallet count
DataItem SW0LWPPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// planned/unplanned flag
DataItem SW0LWPUF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Plan units
DataItem SW0LWPUN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0LWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0LWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0LWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total carton count
DataItem SW0LWTCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total est mm
DataItem SW0LWTEM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total insp units
DataItem SW0LWTIU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total pallet count
DataItem SW0LWTPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total units
DataItem SW0LWTUN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order group
DataItem SW0LWWOG num(9)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// work order number
DataItem SW0LWWON num(9)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// work order type flag
DataItem SW0LWWTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

