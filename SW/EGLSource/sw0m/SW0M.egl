package sw0m;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0M ****
//     This application provides the user to inquire upon DB2
// and CSP tables.
// There is one screen displayed, it provides the user with a
// a method to inquire upon receiving work status. This allows
// the user to view the satus of various plans in various
// stages of implementation. The user will specify the
// warehouse and the plan status.  All plans with an assigned
// status matching the user-specified status will be displayed
// for inquiry only. The user will also have the option of
// viewing all plans in the warehouse, regardless of the plan
// status, by entering 'AL' (ALL) as the user-specified status.
// A maximum of twelve rows will be formatted and displayed
// simultaneously. The rows will be in ascending plan id,
// status, container, purchase order, id-type, and lane
// category order. The users will be given scrolling
// capability via PF7 and PF8. The user may exit to any
// allowed application via PF key or FAST PATH any time.
//    Warehouse Code and Plan Status are both required fields.
// both of these fields will be validated via their CSP tables.
// 'pop-up' help will be made available for both fields.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      10/17/90  BGOFF   New Application
//           1/05/91  mwalto  fix fetch on plnhd for status'
//           1/09/91  mwalto  add 'wk' to status options,
//                            correct duplicates displaying,
//                            don't display catg for po# if
//                            lane range, crtns & minutes 0,
//                            correct temp storage length
//                            error.
//           1/19/91  jcampb  default plan status to be AL
// FIX      02/06/91  SPOPA   Add LANE_NBR as a wildcard to the
//                            IO5360 'SM' call.
// FIX      02/08/91  SPOPA   Change IO5360 'SM' call to pass
//                            unit and minutes sum in SWXREC.
// MAINT    01/31/92  GRAY    INITIALIZE RECORDS AND MAPS.
// ASW001   12/29/95  hkempe  Recompiled due to VPLCPO01 table
//                            change.
// *********************
Program SW0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0MW00 SW0MW00; // record
  SW0MW01 SW0MW01; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SWHREC SWHREC; // record
  SWVREC SWVREC; // record
  SWXREC SWXREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XRPTBL; // table
  use SW0MM.SW0MM001,  // forms
      SW0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* -------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* -------------------------------------------------------*/
    set SW0MM001 initial; /* m001 input/output*/
    set XX0XM001 initial;
    set SWEREC empty;
    set SWHREC empty;
    set SWFREC empty;
    set SWVREC empty;
    set SQLCA empty; /* sql communitcation area*/
    set ERRSQLCA empty;
    set SW0MW00 empty; /* working storage*/
    set SW0MW01 empty; /* display storage*/
    set TAEREC empty; /* error diagnosis information*/
    set TA1REC empty; /* error diagnosis parameters*/
    set TA5REC empty; /* temporary storage parameters*/
    set XX0XW01 empty; /* date/time subroutine parameters*/
    set XX0XW02 empty;
    set SWXREC empty;

    SW0MW00.SW0MWSWF = "Y"; /* Format the map switch*/
    SW0MW00.SW0MWSWR = "N"; /* request for data switch*/

     /* ---------------------------------------------------------*/
     /* If data was passed in the commarea, use as the initial key*/
     /* ---------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/

      SW0MM001.XWHCD = COMMAREA.XWHCD; /* Warehouse code*/
      SW0MM001.SW0MMRPD = COMMAREA.CAITEM; /* Plan status*/

      COMMAREA.CAITEM = " "; /* Clear passed data*/

      SW0MW00.SW0MWSWR = "Y"; /* Request for data switch*/

    else

      SW0MW01.XWHCD = COMMAREA.XWHCD; /* Warehouse code*/

    end

     /* ---------------------------------------------------*/
     /* fLOW to converse the main process.*/
     /* ---------------------------------------------------*/

    goto SW0M001; /* converse main process*/


    SW0M001: SW0M001();
    goto SW0M001; /* Converse the main process*/
  end // end main
end // end SW0M

// main process to display a map
Function SW0M001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0M100(); /* Obtain the data to display*/

  SW0M200(); /* Format and display the map*/

  SW0M300(); /* Check attention identifier*/

  SW0M400(); /* Reset fields to normal intensity*/

  SW0M500(); /* Verify the data that was entered*/

  SW0M600(); /* Process valid input request*/


end // end SW0M001

// Obtain the data to display
Function SW0M100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0MW00.SW0MWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SW0MW00.XXXTSLEN = 674; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SW0MW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  SW0M110(); /* Purge any temporary storage*/

  SW0MW01.XWHCD = SW0MM001.XWHCD; /* Warehouse code*/
  SW0MW01.SW0MWRPD = SW0MM001.SW0MMRPD; /* Plan status*/
  SW0MW00.SW0MWRPD = SW0MM001.SW0MMRPD; /* Plan status*/
  SW0MW01.XWHABRV = SW0MM001.XWHABRV; /* Warehouse name*/

   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  if (SW0MW01.XWHCD in XWHTBL.XWHCD) /* Code in table*/

    if (SW0MW01.XWHCD in XWHTBL.XWHCD)
      SW0MW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end /* Get xwhabrv*/
    SW0MM001.XWHCD = SW0MW01.XWHCD; /* Warehouse code*/
    SW0MM001.XWHABRV = SW0MW01.XWHABRV; /* Warehouse name*/

  else

    set SW0MM001.XWHCD cursor, modified, bold; /* Highlight field*/
    SLWREC.SLWMSGNO = 11; /* Invalid value entered*/
    SLWREC.XXXLOCID = "100"; /* Module id*/
    return;

  end

  if (SW0MM001.SW0MMRPD == "AL") /* If user wants all rows displayed*/

    SW0M120(); /* Select set and open cursor for 'all'*/

  else

    SW0MW01.XWHCD = SW0MM001.XWHCD; /* Warehouse code*/
    SW0MW01.SW0MWRPD = SW0MM001.SW0MMRPD; /* Plan status*/
    SW0M125(); /* Select set and open cursor*/

  end

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* (there are 4 fetches here to build detail lines)*/
   /* ------------------------------------------------------------*/

  SW0MW00.SW0MWIXM = 1; /* Display line index*/

  SW0MW00.SW0MWSC1 = "N"; /* End of cursor switch*/
  SW0MW00.SW0MWSC2 = "N"; /* Until end of po/cntnr*/
  SW0MW00.SW0MWSC3 = "N"; /* Until end of plan/lane cart*/

  while (SW0MW00.SW0MWSC1 == "N") /* Until end of plan/header cursor*/

    SW0M130(); /* Fetch next row in plan/header*/
    SW0M132(); /* Select set and open cursor(po/cont)*/

    SW0MW00.SW0MWSC2 = "N"; /* End of cursor switch*/

    while (SW0MW00.SW0MWSC2 == "N" /* Until end of po/container cursor*/
     && SW0MW00.SW0MWSC1 == "N") /* Until end of plan/header cursor*/

      SW0M134(); /* Fetch next row in po/container*/
      SW0M136(); /* select set and open cursor*/

      SW0MW00.SW0MWSC3 = "N"; /* End of cursor switch*/

      while (SW0MW00.SW0MWSC3 == "N" /* Until end of plan/lane carton*/
       && SW0MW00.SW0MWSC2 == "N" /* Until end of po/container cursor*/
       && SW0MW00.SW0MWSC1 == "N") /* Until end of plan/hdr cursor*/

        SW0M138(); /* Fetch next row in plan/lane/carton*/
        SW0M140();
                                   /* Get from & to lanes, crtn cnt & mints*/

        /* ------------------------------------------------------------*/
         /* If not end of cursor 3,*/
           /* This routine will return the correct po id/type*/
        /* ------------------------------------------------------------*/

        if (SW0MW00.SW0MWSC3 == "N") /* Not end of cursor*/

          set SWVREC empty; /* clear po rtn record*/
          SWVREC.XGPCD = SWFREC.XGPCD; /* gpc code*/
          SWVREC.PC3PONBR = SWFREC.PC3PONBR; /* PO number*/
          SWVREC.SWVWFNC = "ID"; /* PO ID/Type will be returned*/

          XSSLS10(); /* PO ID/Type conversion routine*/

          if (SWVREC.SWVWRTN == 0) /* good return code*/
             /* next sentence*/
          else
            SLWREC.XXXLOCID = "100"; /* module id*/
            converseLib.validationFailed(295); /* po conversion failed*/
            return; /* return to previous process*/
          end

          /* ------------------------------------------------------------*/
           /* If not end of cursor, save the data in display storage.*/
          /* ------------------------------------------------------------*/

          SW0M150(); /* Save data in display storage*/

        end

        /* ------------------------------------------------------------*/
         /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/

        if (SW0MW00.SW0MWIXM > 12) /* Page is full*/

          SW0M160(); /* Add page to temporary storage*/

          SW0MW00.SW0MWIXM = 1; /* Display line index*/

        end

      end

      SW0M190(); /* Close dstloc.vplnlc01 cursor*/

    end

    SW0M180(); /* Close dstloc.vplcpo01 cursor*/

  end

  SW0M170(); /* Close dstloc.vplnhd01 cursor*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SW0MW00.SW0MWIXM > 1) /* Page was formatted*/
    SW0M160(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0MW00.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "100"; /* Module identification*/
    SLWREC.SLWMSGNO = 214; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0MW00.SW0MWSWR = "N"; /* Request for data switch*/



end // end SW0M100

// Purge any temporary storage
Function SW0M110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0MW01 empty; /* M001 display storage*/

  SW0MW00.SW0MWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0MW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M110

// Select set and open cursor
Function SW0M120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SWEREC empty; /* Clear row storage area*/

  SWEREC.XWHCD = SW0MW01.XWHCD; /* Warehouse code*/
  SWEREC.XRPCD = "*"; /* Plan status code*/
  SWEREC.SWEHSTFL = "*"; /* Inspection history file*/
  SWEREC.SWEPLLNB = -1; /* Plan number*/
  SWEREC.SL8WOGRP = -1; /* WO group number*/

  try
    call "IO5350" ("S3", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(9); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M120

// Select set and open cursor
Function SW0M125()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SWEREC empty; /* Clear row storage area*/

  SWEREC.XWHCD = SW0MW01.XWHCD; /* Warehouse code*/
  SWEREC.SWEPLLNB = -1; /* Plan number*/
  SWEREC.XRPCD = SW0MW01.SW0MWRPD; /* Plan status*/
  SWEREC.SL8WOGRP = -1; /* WO group*/
  SWEREC.SWEHSTFL = "*"; /* Inspection history fl*/

  try
    call "IO5350" ("S1", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "125"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M125

// Fetch next row in the cursor
Function SW0M130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  if (SW0MM001.SW0MMRPD == "AL") /* all status'*/
    try
      call "IO5350" ("N3", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
    end /* Fetch next row*/
  else
    try
      call "IO5350" ("N1", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
    end /* Fetch next row*/
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0MW00.SW0MWSC1 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M130

// Select set and open cursor
Function SW0M132()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* Clear row storage area*/

  SWFREC.XWHCD = SWEREC.XWHCD;
  SWFREC.SWEPLLNB = SWEREC.SWEPLLNB;
  SWFREC.TSHCNTNR = "*";
  SWFREC.XGPCD = "*";
  SWFREC.PC3PONBR = -1;

  try
    call "IO5340" ("S1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "132"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M132

// Fetch next row in the cursor
Function SW0M134()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("N1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0MW00.SW0MWSC2 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "134"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M134

// Select set and open cursor
Function SW0M136()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SWHREC empty; /* Clear row storage area*/

  SWHREC.XWHCD = SWFREC.XWHCD; /* Warehouse code*/
  SWHREC.SWEPLLNB = SWFREC.SWEPLLNB; /* Plan number*/

  set SWXREC empty; /* Clear row storage area*/
  SWXREC.SWXFUNCD = "S4"; /* function code*/

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "136"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M136

// Fetch next row in the cursor
Function SW0M138()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "N4"; /* function code*/
  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0MW00.SW0MWSC3 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "138"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M138

// Select set and open cursor
Function SW0M140()
   /* ------------------------------------------------------------*/
   /* Select the from & to lane range, nbr of cartons & est minut*/
   /* ------------------------------------------------------------*/

  SW0MW00.XWHCD = SWHREC.XWHCD;
  SW0MW00.SWEPLLNB = SWHREC.SWEPLLNB;
  SW0MW00.SWHLNCAT = SWHREC.SWHLNCAT;

  set SWHREC empty; /* Clear row storage area*/
  set SWXREC empty; /* Clear row storage area*/

  SWHREC.XWHCD = SW0MW00.XWHCD;
  SWHREC.SWEPLLNB = SW0MW00.SWEPLLNB;
  SWHREC.SWHLNCAT = SW0MW00.SWHLNCAT;
  SWHREC.TSHCNTNR = SWFREC.TSHCNTNR;
  SWHREC.XGPCD = SWFREC.XGPCD;
  SWHREC.PC3PONBR = SWFREC.PC3PONBR;
  SWHREC.SWCLNENB = -1; /* Lane number*/

  SWXREC.SWXFUNCD = "SM"; /* function code*/

  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == -305) /* nulls found from sum*/

      SWXREC.SWXFRLAN = 0; /* from lane*/
      SWXREC.SWXTOLAN = 0; /* from lane*/
      SWXREC.SWXCSNBR = 0; /* Total cartons*/
      SWXREC.SWXEINMM = 0; /* Inspection minutes*/

      return; /* Return to previous process*/

    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CNT, SUM, MIN & MAX";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M140

// Save data in display storage
Function SW0M150()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SW0MW00.TA5TSQIX > 0 /* Not the first page*/
   && SW0MW00.SW0MWIXM == 1) /* and first line on page*/

    SW0MW01.XWHABRV = SW0MM001.XWHABRV; /* warehouse description*/
    SW0MW01.XWHCD = SWHREC.XWHCD; /* Warehouse code*/
    SW0MW01.SW0MWRPD = SWEREC.XRPCD; /* Plan status*/

  end

   /* ------------------------------------------------------------*/
   /* Check that there is lane/crtn/min data for the po/container*/
   /* ------------------------------------------------------------*/

  if (SWXREC.SWXFRLAN == 0 /* 'from' lane*/
   && SWXREC.SWXTOLAN == 0 /* 'to' lane*/
   && SWXREC.SWXCSNBR == 0 /* Number of cartons*/
   && SWXREC.SWXEINMM == 0) /* Number of minutes*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0MW01.SWEPLLNB[SW0MWIXM] = SWHREC.SWEPLLNB; /* Plan number*/
  SW0MW01.XRPCD[SW0MWIXM] = SWEREC.XRPCD; /* Plan status*/
  SW0MW01.TSHCNTNR[SW0MWIXM] = SWFREC.TSHCNTNR; /* Container*/
  SW0MW01.PC3PONBR[SW0MWIXM] = SWFREC.PC3PONBR; /* Po number*/
  SW0MW01.SW0MWPOI[SW0MWIXM] = SWVREC.SWVWPOID; /* Po number id*/
  SW0MW01.SW0MWTYP[SW0MWIXM] = SWVREC.PC4ORTYP; /* po type*/
  SW0MW01.SWHLNCAT[SW0MWIXM] = SW0MW00.SWHLNCAT; /* Lane catagory*/
  SW0MW01.SW0MWLMN[SW0MWIXM] = SWXREC.SWXFRLAN; /* 'from' lane*/
  SW0MW01.SW0MWLMX[SW0MWIXM] = SWXREC.SWXTOLAN; /* 'to' lane*/
  SW0MW01.SW0MWCNB[SW0MWIXM] = SWXREC.SWXCSNBR; /* Number of cartons*/
  SW0MW01.SW0MWMIN[SW0MWIXM] = SWXREC.SWXEINMM; /* Number of minutes*/

  SW0MW00.SW0MWCCT = 0; /* Carton count*/
  SW0MW00.SWHEINMM = 0; /* total minutes*/

  SW0MW00.SW0MWIXM = SW0MW00.SW0MWIXM + 1; /* Increment line index*/


end // end SW0M150

// Add page to temporary storage
Function SW0M160()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0MW01.XXXTSLEN = SW0MW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0MW01 empty; /* M001 display storage*/

    SW0MW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "160"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0M160

// Close selected set cursor
Function SW0M170()
   /* ------------------------------------------------------------*/
   /* If Plan header cursor at end close cursor.*/
   /* ------------------------------------------------------------*/


  if (SW0MM001.SW0MMRPD == "AL") /* all status'*/
    try
      call "IO5350" ("C3", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
    end /* Close table set*/
  else
    try
      call "IO5350" ("C1", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
    end /* Close table set*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "170"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0M170

// Close selected set cursor
Function SW0M180()
   /* ------------------------------------------------------------*/
   /* If Po container cursor at end close the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO5340" ("C1", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "180"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0M180

// Close selected set cursor
Function SW0M190()
   /* ------------------------------------------------------------*/
   /* If plan lane carton cursor at end close the cursor.*/
   /* ------------------------------------------------------------*/

  set SWXREC empty;
  SWXREC.SWXFUNCD = "C4"; /* function code*/
  try
    call "IO5360" (SWXREC, SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "190"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SW0M190

// Format and converse the map
Function SW0M200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0MW00.SW0MWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0MW00.SW0MWSWF == "Y") /* Map must be formatted*/
      SW0M210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0MM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0MM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  if (SW0MM001.SW0MMRPD == " ")
    SW0MM001.SW0MMRPD = "AL";
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
      /* MOVE COMMAREA.CAMSG TO SW0MM001.ezemsg; Message text*/
    else
      SW0MM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0MM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0MM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0MM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0MM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = SW0MM001.CAITEM; /* Application data*/

end // end SW0M200

// Format the display data
Function SW0M210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0MM001 initial; /* M001 input/output area*/

  SW0MW00.SW0MWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0MW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0MW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SW0MW00.SW0MWSWU == "Y") /* Current page was changed*/

        SW0MS21(); /* Update temporary storage page*/

        SW0MW00.SW0MWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SW0MW00.XXXTSPAG > SW0MW00.TA5TSQIX) /* Desired greater highest*/
        SW0MW00.XXXTSPAG = SW0MW00.TA5TSQIX; /* Default to highest*/
      end

      SW0MS22(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SW0MM001.XXXTSPAG skip; /* "PAGE" literal*/
    SW0MM001.XXXTSPAG = SW0MW00.XXXTSPAG; /* Current page*/
    set SW0MM001.TA5TSQIX skip; /* "OF" literal*/
    SW0MM001.TA5TSQIX = SW0MW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* Suppress repeating fields in the map.*/
   /* ------------------------------------------------------------*/

  if (SW0MW01.XWHCD <= " ") /* Warehouse code not present*/
    set SW0MM001.XWHCD cursor; /* Position cursor*/
  end

  SW0MM001.XWHCD = SW0MW01.XWHCD; /* Warehouse code*/
  SW0MM001.SW0MMRPD = SW0MW00.SW0MWRPD; /* Plan status*/
  SW0MM001.XWHABRV = SW0MW01.XWHABRV; /* Warehouse name*/

  SW0MW00.SW0MWIXM = 1; /* Initialize line index*/

  while (SW0MW00.SW0MWIXM <= 12 /* Until screen is full*/
   && SW0MW01.SWEPLLNB[SW0MWIXM] > 0) /* or end of data*/

    if (SW0MW01.SWEPLLNB[SW0MWIXM] == SW0MW00.SWEPLLNB /* Plan number*/
     && SW0MW00.SW0MWIXM != 1)                        
      set SW0MM001.SWEPLLNB[SW0MWIXM] skip, invisible;

      if (SW0MW01.XRPCD[SW0MWIXM] == SW0MW00.XRPCD /* Plan status*/
       && SW0MW00.SW0MWIXM != 1)                  
        set SW0MM001.SWEPLLNB[SW0MWIXM] skip, invisible;

        if (SW0MW01.TSHCNTNR[SW0MWIXM] == SW0MW00.TSHCNTNR /* Container*/
         && SW0MW00.SW0MWIXM != 1)                        
          set SW0MM001.TSHCNTNR[SW0MWIXM] skip, invisible;

          if (SW0MW01.PC3PONBR[SW0MWIXM] == SW0MW00.PC3PONBR /* Po number*/
           && SW0MW00.SW0MWIXM != 1)                        
            set SW0MM001.PC3PONBR[SW0MWIXM] skip, invisible;

            if (SW0MW01.SW0MWPOI[SW0MWIXM] == SW0MW00.SW0MWPOI /* Po id*/
             && SW0MW01.SW0MWTYP[SW0MWIXM] == SW0MW00.SW0MWTYP 
             /* Po type*/
             && SW0MW00.SW0MWIXM != 1)                        
              set SW0MM001.SW0MMPOI[SW0MWIXM] skip, invisible;
              set SW0MM001.SW0MMTYP[SW0MWIXM] skip, invisible;
            else /* new po id/type number is found*/
              SW0MW00.SW0MWPOI = SW0MW01.SW0MWPOI[SW0MWIXM]; /* po id*/
              SW0MM001.SW0MMPOI[SW0MWIXM] = SW0MW01.SW0MWPOI[SW0MWIXM];
              SW0MW00.SW0MWTYP = SW0MW01.SW0MWTYP[SW0MWIXM]; /* po type*/
              SW0MM001.SW0MMTYP[SW0MWIXM] = SW0MW01.SW0MWTYP[SW0MWIXM];
            end

          else /* new po number is found*/
            SW0MW00.PC3PONBR = SW0MW01.PC3PONBR[SW0MWIXM]; /* po nbr*/
            SW0MM001.PC3PONBR[SW0MWIXM] = SW0MW01.PC3PONBR[SW0MWIXM];
            SW0MW00.SW0MWPOI = SW0MW01.SW0MWPOI[SW0MWIXM]; /* po id*/
            SW0MM001.SW0MMPOI[SW0MWIXM] = SW0MW01.SW0MWPOI[SW0MWIXM];
            SW0MW00.SW0MWTYP = SW0MW01.SW0MWTYP[SW0MWIXM]; /* po type*/
            SW0MM001.SW0MMTYP[SW0MWIXM] = SW0MW01.SW0MWTYP[SW0MWIXM];
          end

        else /* new container number is found*/

          SW0MW00.TSHCNTNR = SW0MW01.TSHCNTNR[SW0MWIXM]; /* container*/
          SW0MM001.TSHCNTNR[SW0MWIXM] = SW0MW01.TSHCNTNR[SW0MWIXM];
          SW0MW00.PC3PONBR = SW0MW01.PC3PONBR[SW0MWIXM]; /* po nbr*/
          SW0MM001.PC3PONBR[SW0MWIXM] = SW0MW01.PC3PONBR[SW0MWIXM];
          SW0MW00.SW0MWPOI = SW0MW01.SW0MWPOI[SW0MWIXM]; /* po id*/
          SW0MM001.SW0MMPOI[SW0MWIXM] = SW0MW01.SW0MWPOI[SW0MWIXM];
          SW0MW00.SW0MWTYP = SW0MW01.SW0MWTYP[SW0MWIXM]; /* po type*/
          SW0MM001.SW0MMTYP[SW0MWIXM] = SW0MW01.SW0MWTYP[SW0MWIXM];
        end

      else /* new plan status is found (for option*/
                                   /* "all" only)*/

        SW0MW00.XRPCD = SW0MW01.XRPCD[SW0MWIXM]; /* status*/
        SW0MM001.XRPCD[SW0MWIXM] = SW0MW01.XRPCD[SW0MWIXM];
        SW0MW00.TSHCNTNR = SW0MW01.TSHCNTNR[SW0MWIXM]; /* container*/
        SW0MM001.TSHCNTNR[SW0MWIXM] = SW0MW01.TSHCNTNR[SW0MWIXM];
        SW0MW00.PC3PONBR = SW0MW01.PC3PONBR[SW0MWIXM]; /* po nbr*/
        SW0MM001.PC3PONBR[SW0MWIXM] = SW0MW01.PC3PONBR[SW0MWIXM];
        SW0MW00.SW0MWPOI = SW0MW01.SW0MWPOI[SW0MWIXM]; /* po id*/
        SW0MM001.SW0MMPOI[SW0MWIXM] = SW0MW01.SW0MWPOI[SW0MWIXM];
        SW0MW00.SW0MWTYP = SW0MW01.SW0MWTYP[SW0MWIXM]; /* po type*/
        SW0MM001.SW0MMTYP[SW0MWIXM] = SW0MW01.SW0MWTYP[SW0MWIXM];
      end

    else /* new plan number is found*/
      SW0MW00.SWEPLLNB = SW0MW01.SWEPLLNB[SW0MWIXM]; /* plan nbr*/
      SW0MM001.SWEPLLNB[SW0MWIXM] = SW0MW01.SWEPLLNB[SW0MWIXM];
      SW0MW00.XRPCD = SW0MW01.XRPCD[SW0MWIXM]; /* status*/
      SW0MM001.XRPCD[SW0MWIXM] = SW0MW01.XRPCD[SW0MWIXM];
      SW0MW00.TSHCNTNR = SW0MW01.TSHCNTNR[SW0MWIXM]; /* container*/
      SW0MM001.TSHCNTNR[SW0MWIXM] = SW0MW01.TSHCNTNR[SW0MWIXM];
      SW0MW00.PC3PONBR = SW0MW01.PC3PONBR[SW0MWIXM]; /* po nbr*/
      SW0MM001.PC3PONBR[SW0MWIXM] = SW0MW01.PC3PONBR[SW0MWIXM];
      SW0MW00.SW0MWPOI = SW0MW01.SW0MWPOI[SW0MWIXM]; /* po id*/
      SW0MM001.SW0MMPOI[SW0MWIXM] = SW0MW01.SW0MWPOI[SW0MWIXM];
      SW0MW00.SW0MWTYP = SW0MW01.SW0MWTYP[SW0MWIXM]; /* po type*/
      SW0MM001.SW0MMTYP[SW0MWIXM] = SW0MW01.SW0MWTYP[SW0MWIXM];
    end

    /* ------------------------------------------------------------*/
     /* move the category, lane range, nbr of cartons & minutes*/
    /* ------------------------------------------------------------*/

    SW0MM001.SWHLNCAT[SW0MWIXM] = SW0MW01.SWHLNCAT[SW0MWIXM];
    SW0MM001.SW0MMLMN[SW0MWIXM] = SW0MW01.SW0MWLMN[SW0MWIXM];
    SW0MM001.SW0MMLMX[SW0MWIXM] = SW0MW01.SW0MWLMX[SW0MWIXM];
    SW0MM001.SW0MMCNB[SW0MWIXM] = SW0MW01.SW0MWCNB[SW0MWIXM];
    SW0MM001.SW0MMMIN[SW0MWIXM] = SW0MW01.SW0MWMIN[SW0MWIXM];

    SW0MW00.SW0MWIXM = SW0MW00.SW0MWIXM + 1; /* Increment line index*/

  end



end // end SW0M210

// Check attention identifier
Function SW0M300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SW0MW00.SW0MWSWF = "Y"; /* Format the map switch*/
    SW0MW00.SW0MWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0MM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0M110(); /* Delete temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SW0MM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf6  /* or PF6 was pressed*/
   || converseVar.eventKey is pf9  /* or PF9 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14) /* or PF14 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0MM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    if (converseVar.eventKey is pf9) /* PF9  was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "SW0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "SL0U"; /* TO Application*/
    end

    SW0M110(); /* Delete temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and pf7 not pressed*/
   && converseVar.eventKey not pf8)  /* and pf8 not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0M300

// Verify scroll request
Function SW0M310()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0MW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "310"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0MW00.XXXTSPAG >= SW0MW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "310"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

end // end SW0M310

// Reset highlighted fields
Function SW0M400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0MM001.XWHCD initialAttributes; /* Warehouse code*/
  set SW0MM001.SW0MMRPD initialAttributes; /* Plan status code*/


  set SW0MM001.CATOAP initialAttributes; /* TO application*/
  set SW0MM001.CAITEM initialAttributes; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If no lists were requested. return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0MM001.XWHCD == "?" /* Warehouse list requested*/
   || SW0MM001.SW0MMRPD == "?") /* plan status list requested*/

    if (converseVar.eventKey not enter) /* Enter was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(4); /* PF key may not be used*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* ; Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes.*/
   /* ------------------------------------------------------------*/

  if (SW0MM001.XWHCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  WAREHOUSE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0MM001.XWHCD = SW0MW01.XWHCD; /* Restore prior code*/
    else
      SW0MM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0MM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of plan status codes.*/
   /* ------------------------------------------------------------*/

  if (SW0MM001.SW0MMRPD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "PLAN STATUS"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXRP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0MM001.SW0MMRPD = SW0MW01.SW0MWRPD; /* Restore prior code*/
    else
      SW0MM001.SW0MMRPD = XRPTBL.XRPCD[XX0XWPIX]; /* Selected code*/

    end

    set SW0MM001.SW0MMRPD cursor; /* Establish cursor position*/

  end

  converseLib.clearScreen();
   /* clear screen*/



end // end SW0M400

// Verify data that was entered
Function SW0M500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0MM001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0MM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SW0M310(); /* Verify scroll request*/

  else

    /* ----------------------------------------------------------*/
     /* Verify warehouse code in table*/
    /* --------------------------------------------------------*/
    if (SW0MM001.XWHCD in XWHTBL.XWHCD) /* Code in table*/

    else

      set SW0MM001.XWHCD cursor, modified, bold;
      SLWREC.XXXLOCID = "500"; /* Module identification*/
      converseLib.validationFailed(11); /* Invalid value entered*/

    end

    /* ----------------------------------------------------------*/
     /* Verify plan status code*/
    /* ----------------------------------------------------------*/

    if (SW0MM001.SW0MMRPD == " ") /* If plan status code not entered*/
      set SW0MM001.SW0MMRPD cursor, bold; /* Highlight plan status*/
      SLWREC.XXXLOCID = "500"; /* Module identification*/
      converseLib.validationFailed(9); /* Invalid value in selection field*/

    else

      if (SW0MM001.SW0MMRPD == "AL" /* Plan status eq 'al'l*/
       || SW0MM001.SW0MMRPD == "?") /* or '?'*/
         /* next sentence*/
      else

        if (SW0MM001.SW0MMRPD == "SB" /* submitted*/
         || SW0MM001.SW0MMRPD == "SI" /* submitted incomplete*/
         || SW0MM001.SW0MMRPD == "SC" /* submitted complete*/
         || SW0MM001.SW0MMRPD == "IP" /* in process or 'ip'*/
         || SW0MM001.SW0MMRPD == "WK" /* working*/
         || SW0MM001.SW0MMRPD == "CA") /* calculated*/

        else

          if (SW0MM001.SW0MMRPD in XRPTBL.XRPCD /* Plan status in xrptbl*/
           && XRPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and status good*/

            set SW0MM001.SW0MMRPD cursor, bold; /* Highlight plan status*/
            SLWREC.XXXLOCID = "500"; /* Module identification*/
            converseLib.validationFailed(218); /* Plan status invalid for this screen*/

          else
            set SW0MM001.SW0MMRPD cursor, bold; /* Highlight plan status*/
            SLWREC.XXXLOCID = "500"; /* Module identification*/
            converseLib.validationFailed(17); /* Invalid value in selection field*/

          end
        end /* else it eq*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0M500

// Process valid input request
Function SW0M600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SW0MW00.SW0MWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (SW0MM001.SW0MMRPD != SW0MW01.SW0MWRPD /* or status changed*/
   && SW0MW00.SW0MWRPD != SW0MM001.SW0MMRPD) /* map field chgd*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (SW0MM001.XWHCD > " ") /* Warehouse was entered*/
      SW0MW00.SW0MWSWR = "Y"; /* Request for data switch*/
    else
      SW0MW00.SW0MWSWR = "N"; /* Request for data switch*/
      SW0M110(); /* Purge any temporary storage*/
    end
    return; /* Return to previous process*/

  else

    if (SW0MM001.XWHCD != SW0MW01.XWHCD) /* Warehouse code changed*/

      /* ------------------------------------------------------------*/
       /* If a search key was entered, request the data to display.*/
       /* Otherwise, purge any existing pages from temporary storage.*/
      /* ------------------------------------------------------------*/

      if (SW0MM001.XWHCD > " ") /* Warehouse was entered*/
        SW0MW00.SW0MWSWR = "Y"; /* Request for data switch*/
      else
        SW0MW00.SW0MWSWR = "N"; /* Request for data switch*/
        SW0M110(); /* Purge any temporary storage*/
      end
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SW0MW00.XXXTSPAG = SW0MW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SW0MW00.XXXTSPAG = SW0MW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end


end // end SW0M600

// Update temporary storage page
Function SW0MS21()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S21"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0MS21

// Read temporary storage page
Function SW0MS22()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0MW01.XXXTSLEN = SW0MW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SW0MW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S22"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0MS22

// converse pop-up window
Function XPXRP01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XRPTBL.XRPCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XRPTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XRPTBL.XRPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XRPTBL.XRPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XRPTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XRPTBL.XRPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XRPTBL.XRPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end

  converse XX0XM001 ;


  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XRPTBL.XRPCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXRP01

//*** RECORD=SW0MW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0MW00 type basicRecord
  10 SW0MWIXM SW0MWIXM ; 
  10 SW0MWSC1 SW0MWSC1 ; 
  10 SW0MWSC2 SW0MWSC2 ; 
  10 SW0MWSC3 SW0MWSC3 ; 
  10 SW0MWSC4 SW0MWSC4 ; 
  10 SW0MWSWD SW0MWSWD ; 
  10 SW0MWSWF SW0MWSWF ; 
  10 SW0MWSWR SW0MWSWR ; 
  10 SW0MWSWU SW0MWSWU ; 
  10 XWHCD XWHCD ; 
  10 SW0MWRPD SW0MWRPD ; 
  10 SWHLNCAT SWHLNCAT ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 XRPCD XRPCD ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 PC3PONBR PC3PONBR ; 
  10 SW0MWPOI SW0MWPOI ; 
  10 SW0MWTYP SW0MWTYP ; 
  10 SWHEINMM SWHEINMM ; 
  10 SW0MWCCT SW0MWCCT ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end SW0MW00

//*** RECORD=SW0MW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SW0MW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(674) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 SW0MWRPD SW0MWRPD [12] ; 
    10 SWEPLLNB SWEPLLNB [12] ; 
    10 XRPCD XRPCD [12] ; 
    10 TSHCNTNR TSHCNTNR [12] ; 
    10 PC3PONBR PC3PONBR [12] ; 
    10 SW0MWPOI SW0MWPOI [12] ; 
    10 SW0MWTYP SW0MWTYP [12] ; 
    10 SWHLNCAT SWHLNCAT [12] ; 
    10 SW0MWLMN SW0MWLMN [12] ; 
    10 SW0MWLMX SW0MWLMX [12] ; 
    10 SW0MWCNB SW0MWCNB [12] ; 
    10 SW0MWMIN SW0MWMIN [12] ; 
end // end SW0MW01

// carton count
DataItem SW0MWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of cartons
DataItem SW0MWCNB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem SW0MWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lane range "from"
DataItem SW0MWLMN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lane range "to"
DataItem SW0MWLMX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// estimated minutes
DataItem SW0MWMIN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id
DataItem SW0MWPOI char(9)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Plan Status Header
DataItem SW0MWRPD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Plan header cursor
DataItem SW0MWSC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Plan container po cursor
DataItem SW0MWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Plan lane carton cursor
DataItem SW0MWSC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Plan lane carton cursor
DataItem SW0MWSC4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0MWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0MWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0MWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SW0MWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po type
DataItem SW0MWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

