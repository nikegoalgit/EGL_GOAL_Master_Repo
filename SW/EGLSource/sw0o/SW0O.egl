package sw0o;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0O ****
// This application allows users to inquire on Inspection
// History.
// 
// There are three different screens that may be displayed.
// 
// The first screen displayed to the user provides parameter
// selections. This map is used to narrow down the amount of
// information to inquire on. There are three different
// combinations for entering data; 1) warehouse and container
// 2) warehouse and PO number 3) warehouse and maximum of one
// month date range plus 1 other field.
// 
// The second map takes the information from the previous map
// to select the summary data. The information comes from the
// Inspection History Style table, and will be sorted by plan,
// container, po, gpc, style, color, and inspection date. From
// this map the user can select one row, or multiple rows and
// view the detail. If multiple rows are selected, all selected
// rows must be from the same page.
// 
// The third map takes the row data from the previous screen,
// and displays detailed information. The detail data comes
// from the Inspection History Task Table. The detail array
// is sorted by task, reading left to right. If more than one
// row was selected from the previous screen, the user will be
// able to view the next rows(s) detailed by hitting <enter>.
// When all selected details have been viewed, the enter key
// will return the user to the second map.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// ;001      02/13/91 ryonke   program changes for table change
// ;
// MAINT     01/31/92 GRAY     INITIALIZE RECORDS AND MAPS.
// MAINT     08/23/93 jcampb   fix dup item in sw0ow21 pc4ortyp
// Y2KFIX    02/05/98 MBURLE   Removed zero suppression from
//                             these map fields:
//                              - SW00M001.SW0OMSYY
//                              - SW00M001.SW0OMEYY
//                              - SW00M002.SW0OMINY
//                              - SW00M003.SW0OMINY
//                             Modified SW0O152 to treat a zero
//                             year as a valid value.
//                             Modified SW0O153 to correct date
//                             windowing logic.
// *********************
Program SW0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0OW00 SW0OW00; // record
  SW0OW01 SW0OW01; // record
  SW0OW02 SW0OW02; // record
  SW0OW03 SW0OW03; // record
  SW0OW21 SW0OW21; // record
  SW0OW22 SW0OW22; // record
  SW0OW25 SW0OW25; // record
  SW0OW31 SW0OW31; // record
  SW0OW32 SW0OW32; // record
  SWJREC SWJREC; // record
  SWKREC SWKREC; // record
  SWVREC SWVREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XGPTBL; // table
  use SW0OM.SW0OM001,  // forms
      SW0OM.SW0OM002, 
      SW0OM.SW0OM003, 
      SW0OM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0OM001 initial; /* M001 input/output*/
    set SW0OM002 initial; /* M002 input/output*/
    set SW0OM003 initial; /* M003 input/output*/
    set XX0XM001 initial;
    set SW0OW00 empty; /* Working storage*/
    set SW0OW01 empty; /* M001 display storage*/
    set SW0OW02 empty; /* M001 work storage*/
    set SW0OW03 empty; /* M001 parm storage*/
    set SW0OW21 empty; /* Moo2 display storage*/
    set SW0OW22 empty; /* M002 work storage*/
    set SW0OW25 empty; /* TA5REC hold record*/
    set SW0OW31 empty; /* M003 display storage*/
    set SW0OW32 empty; /* M003 work storage*/
    set SQLCA empty; /* SQL communication area*/
    set SWJREC empty; /* IO5280 work record*/
    set SWKREC empty; /* IO5290 work record*/
    set SWVREC empty; /* PO nbr/id conversion record*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date routine work area*/
    set TA5REC empty; /* Temporary storage area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty;


    SW0OW00.SW0OWSWD = "1"; /* Map to be displayed switch*/
    SW0OW00.SW0OWSWF = "Y"; /* Request for task data switch*/
    SW0OW00.SW0OWSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0O001; /* Converse the main process*/


    SW0O001: SW0O001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0O001; /* Converse the main process*/

  end // end main
end // end SW0O

// Select selection parameters
Function SW0O001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SW0OW00.SW0OWSWD == "1") /* Map 1 was requested*/

    SW0O100(); /* Display map 1*/

  else

    if (SW0OW00.SW0OWSWD == "2") /* Map 2 was requested*/

      SW0O200(); /* Display map 2*/

    else

      if (SW0OW00.SW0OWSWD == "3") /* Map 3 was requested*/

        SW0O300(); /* Display map 3*/

      else
        /* ------------------------------------------------------------*/
         /* Write the error to the Error Diagnosis Reporting Facility.*/
        /* -----------------------------------------------------------*/

        SLWREC.XXXLOCID = "001"; /* Module identification*/
        SLWREC.SLWMSGNO = 1; /* Indicate system error*/

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
        TA1REC.TA1MAPNO = SW0OW00.SW0OWSWD; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

        /* ------------------------------------------------------------*/
         /* Exit to display the application system menu.*/
        /* ------------------------------------------------------------*/

        COMMAREA.CATOAP = "SL0M"; /* TO application*/

        XSSL001(); /* Exit to another application*/

        /* ------------------------------------------------------------*/
         /* Abnormally terminate the transaction if the exit failed.*/
        /* ------------------------------------------------------------*/

        TA1REC.TA1FUNC = "ABND"; /* Termination function*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

    end

  end


end // end SW0O001

// Select the inquiry parameters
Function SW0O100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0O110(); /* Obtain the data to display*/

  SW0O120(); /* Format and display the map*/

  SW0O130(); /* Check attention identifier*/

  SW0O140(); /* Reset fields to normal intensity*/

  SW0O150(); /* Verify the entered data*/

  SW0O160(); /* Process valid input request*/


end // end SW0O100

// Obtain the data to display
Function SW0O110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0OW00.SW0OWSWR != "Y" /* Product data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing data from map display storage*/
   /* ------------------------------------------------------------*/

  SW0OS01(); /* Purge temp storage current m001*/

  SW0OW00.SW0OWSWR = "N"; /* Request for data switch*/


end // end SW0O110

// Format and converse the map
Function SW0O120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0OW00.SW0OWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0OW00.SW0OWSWF == "Y") /* Map must be formatted*/
      SW0O121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0OM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0OM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0) /* Message to display*/
    if (SLWREC.SLWMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SLWREC.SLWMSGNO);
    end /* error message number*/
    SW0OM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/
    set SW0OM001 alarm; /* Indicate sound alarm*/
  end

  converse SW0OM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;

  COMMAREA.CATOAP = SW0OM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0OM001.CAITEM; /* Application data*/

  COMMAREA.CACURAPP = "SW0O"; /* Initialize current appid*/
  COMMAREA.CAMSG = " "; /* ; Initialize error message*/
  COMMAREA.CASECRC = 0; /* Initialize error number*/


end // end SW0O120

// Format the display data
Function SW0O121()

   /* ------------------------------------------------------------*/
   /* Init map SW0OM001*/
   /* ------------------------------------------------------------*/

  set SW0OM001 initial; /* M001 input/ouput area*/

  SW0OW00.SW0OWSWF = "N"; /* Init map switch*/

   /* ------------------------------------------------------------*/
   /* Format SW0OM001 using passed data*/
   /* ------------------------------------------------------------*/

  SW0OM001.XWHCD = COMMAREA.XWHCD; /* Warehouse code to map*/
  SW0OM001.XGPCD = COMMAREA.XGPCD; /* GPC code to map*/


end // end SW0O121

// Check attention identifier
Function SW0O130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0OW00.SW0OWSWR == "Y")

      set SW0OW01 empty;

    end

    SW0OW00.SW0OWSWR = "N"; /* request for data*/
    SW0OW00.SW0OWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0OM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0OS01(); /* purge temp storage*/

      XSSL001(); /* Exit to another application*/

      set SW0OM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Invalid value*/
      SLWREC.XXXLOCID = "130"; /* Module identification*/

    else

      SLWREC.XXXLOCID = "130"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/
      set SW0OM001.CATOAP cursor, bold; /* Highlight*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6 /* or PF6 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf6 /* or PF6 was pressed*/
     || converseVar.eventKey is pf13) /* or PF13 was pressed*/

      SW0OS90(); /* Assign common TO applications*/

    else /* Key selected was PF1, PF3, PF4*/

      if (converseVar.eventKey is pf1) /* PF1 was pressed*/
        COMMAREA.CAITEM = "SW0OM001"; /* Application find code*/
      end

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "SW0A"; /* TO application - Insp Menu*/
      end

    end

    SW0OS01(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    SW0OW00.SW0OWSWR = "N"; /* request for data*/
    SW0OW00.SW0OWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0O130

// Reset highlighted fields
Function SW0O140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0OM001.XWHCD initialAttributes; /* Warehouse code*/
  set SW0OM001.TSHCNTNR initialAttributes; /* Container*/
  set SW0OM001.PC3PONBR initialAttributes; /* Product order number*/
  set SW0OM001.SW0OWPID initialAttributes; /* Product order id*/
  set SW0OM001.PC4ORTYP initialAttributes; /* Product type (season)*/
  set SW0OM001.FY1FCTYC initialAttributes; /* Factory*/
  set SW0OM001.XGPCD initialAttributes; /* General product code*/
  set SW0OM001.SY1STNBR initialAttributes; /* Genl prod code style*/
  set SW0OM001.SY2CLRID initialAttributes; /* Genl prod code color*/
  set SW0OM001.SW0OMSMM initialAttributes; /* Range start month*/
  set SW0OM001.SW0OMSDD initialAttributes; /* Range start day*/
  set SW0OM001.SW0OMSYY initialAttributes; /* Range start year*/
  set SW0OM001.SW0OMEMM initialAttributes; /* Range end month*/
  set SW0OM001.SW0OMEDD initialAttributes; /* Range end day*/
  set SW0OM001.SW0OMEYY initialAttributes; /* Range end year*/
  set SW0OM001.SW0OMGPC initialAttributes; /* 2nd general product code*/
  set SW0OM001.CATOAP initialAttributes; /* TO application*/
  set SW0OM001.CAITEM initialAttributes; /* TO app data*/
  set SW0OM001.XWHCD cursor; /* Reposition cursor*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0OM001.XWHCD == "?" /* Warehouse code list request*/
   || SW0OM001.XGPCD == "?" /* or gen'l product code req*/
   || SW0OM001.SW0OMGPC == "?") /* or 2nd gen'l prod code req*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "140"; /* Module identification*/
      converseLib.validationFailed(18); /* Indicate selection only*/
                                 /* ; valid with enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes*/
   /* ------------------------------------------------------------*/

  if (SW0OM001.XWHCD == "?") /* warehouse list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " WAREHOUSE CODES  "; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0OM001.XWHCD = SW0OW01.XWHCD; /* Restore prior code*/
    else
      SW0OM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0OW01.XWHCD = XWHTBL.XWHCD[XX0XWPIX];
      SW0OW00.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Whse name*/

    end

    set SW0OM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product group codes (#1)*/
   /* ------------------------------------------------------------*/

  if (SW0OM001.XGPCD == "?") /* GPC list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0OM001.XGPCD = SW0OW01.XGPCD; /* Restore prior code*/
    else
      SW0OM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
      SW0OW01.XGPCD = XGPTBL.XGPCD[XX0XWPIX];

    end

    set SW0OM001.XGPCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product group codes (#2)*/
   /* ------------------------------------------------------------*/

  if (SW0OM001.SW0OMGPC == "?") /* GPC list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0OM001.SW0OMGPC = SW0OW01.SW0OWGP2; /* Restore prev cd*/
    else
      SW0OM001.SW0OMGPC = XGPTBL.XGPCD[XX0XWPIX];
      SW0OW01.SW0OWGP2 = XGPTBL.XGPCD[XX0XWPIX];
                                   /* Selected code*/
    end

    set SW0OM001.SW0OMGPC cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/

  exit stack; /* Exit to display map*/


end // end SW0O140

// Verify the entered data
Function SW0O150()
   /* ----------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ----------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data entered*/

    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SW0OM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Used with FAST PATH*/

  end

   /* ----------------------------------------------------------*/
   /* Begin the edits checks for the fields. Edits begin at the*/
   /* bottom and go right to left. This allows the next*/
   /* presented screen to have all errors highlighted.*/

   /* All editing flags are reset except for sw0owgpo. This is*/
   /* used for gpc/po nbr and po id/type edits. To avoid*/
   /* repetitive db calls, it is reset only when necessary.*/
   /* ----------------------------------------------------------*/

  SW0OW02.SW0OWEFL = "NNNNNNN"; /* Initialize edit flags*/

   /* ----------------------------------------------------------*/
   /* Check if dates have been changed.*/
   /* ----------------------------------------------------------*/

  if (SW0OM001.SW0OMSMM != SW0OW01.SW0OWSMM /* Start mth change*/
   || SW0OM001.SW0OMSDD != SW0OW01.SW0OWSDD /* Start day change*/
   || SW0OM001.SW0OMSYY != SW0OW01.SW0OWSYY /* Start yr  change*/
   || SW0OM001.SW0OMEMM != SW0OW01.SW0OWEMM /* End month change*/
   || SW0OM001.SW0OMEDD != SW0OW01.SW0OWEDD /* End day change*/
   || SW0OM001.SW0OMEYY != SW0OW01.SW0OWEYY) /* End year change*/

    SW0O151(); /* Date checks*/

  end

   /* ----------------------------------------------------------*/
   /* If date exits in the sw0ow01 record, it has passed edits.*/
   /* ----------------------------------------------------------*/

  if (SW0OW01.SW0OWSYD > 0 /* Start date exists*/
   && SW0OW01.SW0OWEYD > 0) /* End date exists*/

    SW0OW02.SW0OWDAF = "Y"; /* Date acceptable*/

  end

   /* ----------------------------------------------------------*/
   /* Check for color.*/
   /* ----------------------------------------------------------*/

  if (SW0OM001.SY2CLRID != " " /* There is color and*/
   && SW0OW02.SW0OWDAF == "Y") /* There is date*/

    SW0OW02.SW0OWDTO = "Y"; /* Date +1 is yes*/
  end

   /* ----------------------------------------------------------*/
   /* Check for style.*/
   /* ----------------------------------------------------------*/

  if (SW0OM001.SY1STNBR != " " /* There is style*/
   && SW0OW02.SW0OWDAF == "Y") /* and a date*/

    SW0OW02.SW0OWDTO = "Y"; /* Date +1 is yes*/
  end

   /* ----------------------------------------------------------*/
   /* Check for general product code. This is the 2nd gpc code*/
   /* in the screen. The other works in conjunction with po nbr*/
   /* ----------------------------------------------------------*/

  if (SW0OM001.SW0OMGPC == SW0OW01.SW0OWGP2 /* GPC already exists*/
   && SW0OM001.SW0OMGPC != " ")            

    if (SW0OW02.SW0OWDAF == "Y") /* There is a date*/
      SW0OW02.SW0OWDTO = "Y"; /* Date +1 is yes*/
    end
  end

  if (SW0OM001.SW0OMGPC != SW0OW01.SW0OWGP2) /* GPC changed*/

    if (SW0OM001.SW0OMGPC == " ") /* GPC now blank*/
      SW0OW01.SW0OWGP2 = " "; /* move blank to work rcd*/

    else

      if (SW0OM001.SW0OMGPC in XGPTBL.XGPCD /* GPC in table &*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* an active*/

        SW0OW01.SW0OWGP2 = SW0OM001.SW0OMGPC; /* Store gpc*/
        if (SW0OW02.SW0OWDAF == "Y")
          SW0OW02.SW0OWDTO = "Y"; /* Date +1 is yes*/
        end
      else
        SLWREC.XXXLOCID = "150"; /* Module ident*/
        converseLib.validationFailed(11); /* Invalid value*/
        set SW0OM001.SW0OMGPC cursor, bold; /* Highlight*/
        SW0OW01.SW0OWGP2 = " "; /* Init work gpc*/
      end
    end
  end


   /* ----------------------------------------------------------*/
   /* Check for factory.*/
   /* ----------------------------------------------------------*/

  if (SW0OM001.FY1FCTYC != " " /* There is*/
   && SW0OW02.SW0OWDAF == "Y") /* factory & date*/

    SW0OW02.SW0OWDTO = "Y"; /* Date +1 is yes*/

  end

   /* ----------------------------------------------------------*/
   /* Check both the purchase order id/type and the general*/
   /* product code/po number. These two lines work together.*/

   /* If either line is completed, the gpc code(#1) is required*/
   /* input from the user.*/

   /* The id/type line and gpc code is used to obtain the po*/
   /* number. Ther user can also opt to complete the gpc/po nbr*/
   /* directly and leave the id/type blank. Regardless of which*/
   /* option is used, the xssls10 statements are used to call*/
   /* the SV0C application. SV0C is used to confirm or supply*/
   /* the po nbr.*/

   /* Also, if the id/type is used, there may be multiples of*/
   /* gpc/po nbr. The user must then enter the po nbr.*/

   /* In addition to the checks related to the two lines, only*/
   /* one gpc code can be inputted on this screen.*/
   /* ----------------------------------------------------------*/

  if (SW0OM001.XGPCD != " " /* Both gpc's*/
   && SW0OM001.SW0OMGPC != " ") /* have data*/

    SLWREC.XXXLOCID = "150"; /* Module ident*/
    converseLib.validationFailed(30); /* Mutually exclusive*/
    set SW0OM001.XGPCD cursor, bold; /* Highlight*/
    set SW0OM001.SW0OMGPC bold; /* Highlight*/

  end

  if (SW0OM001.SW0OWPID == " " /* PO id is empty*/
   && SW0OM001.PC4ORTYP == " " /* PO type is empty*/
   && SW0OM001.XGPCD == " "    /* GPC is empty*/
   && SW0OM001.PC3PONBR == 0)  /* PO nbr is empty*/

    SW0OW01.SW0OWPID = SW0OM001.SW0OWPID; /* Store zeroes*/
    SW0OW01.PC4ORTYP = SW0OM001.PC4ORTYP; /* Store spaces*/
    SW0OW01.XGPCD = SW0OM001.XGPCD; /* Store spaces*/
    SW0OW01.PC3PONBR = SW0OM001.PC3PONBR; /* Store zeroes*/
    SW0OW02.SW0OWGPO = "N"; /* Reset the po qualifier flag*/

  end

  if (SW0OM001.SW0OWPID == SW0OW01.SW0OWPID /* PO id not changed*/
   && SW0OM001.PC4ORTYP == SW0OW01.PC4ORTYP /* PO type not changed*/
   && SW0OM001.XGPCD == SW0OW01.XGPCD       /* GPC not changed*/
   && SW0OM001.PC3PONBR == SW0OW01.PC3PONBR) /* PO nbr not changed*/

  else

    SW0OW02.SW0OWGPO = "N"; /* Reset the qualifier flag*/

    if (SW0OM001.XGPCD == " ") /* There is no gpc*/

      SLWREC.XXXLOCID = "150"; /* Module ident*/
      SW0OW02.SW0OWGPP = "Y"; /* GPC/PO err flag*/
      converseLib.validationFailed(11); /* Invalid value*/
      set SW0OM001.XGPCD cursor, bold; /* Highlight*/

    else

      SW0OS04(); /* Validate gpc*/

    end

    if (SW0OW02.SW0OWGPP == "N") /* No errors yet*/

      if (SW0OM001.SW0OWPID != " " /* There is a id/type*/
       || SW0OM001.PC4ORTYP != " ")

        if (SW0OM001.PC3PONBR != 0) /* There is a po nbr*/

          SLWREC.XXXLOCID = "150"; /* Module ident*/
          SW0OW02.SW0OWGPP = "Y"; /* GPC/PO err flag*/
          converseLib.validationFailed(192); /* Mutually excl*/
                                    /* ; po id-type/nbr*/
          set SW0OM001.XGPCD cursor, bold; /* Highlight*/
          set SW0OM001.PC3PONBR bold; /* Highlight*/
          set SW0OM001.SW0OWPID bold; /* Highlight*/
          set SW0OM001.PC4ORTYP bold; /* Highlight*/

        end
      end
    end

    if (SW0OW02.SW0OWGPP == "N") /* There is no nbr/id problem yet*/

      if (SW0OM001.SW0OWPID != " " /* Only the id/type line is used*/
       || SW0OM001.PC4ORTYP != " ")

        SW0OS05(); /* Edit the po id/type*/

      else

        SW0OS06(); /* Do po nbr edits*/

      end

    end
  end

   /* ----------------------------------------------------------*/
   /* Initialize the sw0ow01 fields if there is an error*/
   /* ----------------------------------------------------------*/

  if (SW0OW02.SW0OWGPP == "Y") /* There is an error*/

    SW0OW01.XGPCD = " "; /* Set gpc to spaces*/
    SW0OW01.PC3PONBR = 0; /* Set po nbr to zeroes*/
    SW0OW01.SW0OWPID = " "; /* Set po id to zeroes*/
    SW0OW01.PC4ORTYP = " "; /* Set po type to spaces*/

  end

   /* ----------------------------------------------------------*/
   /* Check for container.*/
   /* ----------------------------------------------------------*/

  if (SW0OM001.TSHCNTNR != " ") /* There is a container*/
    SW0OW02.SW0OWCTF = "Y"; /* Set cntr flag is yes*/
  end

   /* -----------------------------------------------------------*/
   /* Check for warehouse code. It is required.*/
   /* -----------------------------------------------------------*/

  if (SW0OM001.XWHCD == " ") /* There is no warehouse*/

    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SW0OM001.XWHCD cursor, bold; /* Display field as err*/
    converseLib.validationFailed(9); /* Required field msg*/

  else

    if (SW0OM001.XWHCD != SW0OW01.XWHCD) /* Warehouse changed*/

      if (SW0OM001.XWHCD in XWHTBL.XWHCD /* Verify whse*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")

        SW0OW00.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
        SW0OW01.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];

      else

        converseLib.validationFailed(11); /* Invalid value*/
        SLWREC.XXXLOCID = "150"; /* Module ident*/
        set SW0OM001.XWHCD cursor, bold; /* Highlight*/

      end
    end
  end

   /* ----------------------------------------------------------*/
   /* Set the select flag if there are no errors.*/
   /* ----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors in data*/
    SW0O158(); /* Assign Selection format*/
  end

   /* ----------------------------------------------------------*/
   /* If any errors were found, exit to the display map.*/
   /* ----------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0O150

// Verify the entered dates
Function SW0O151()
   /* ----------------------------------------------------------*/
   /* New date information has been entered. Begin edits for*/
   /* valid dates.*/
   /* ----------------------------------------------------------*/

  SW0OW01.SW0OWSMM = SW0OM001.SW0OMSMM; /* Move dates to*/
  SW0OW01.SW0OWSDD = SW0OM001.SW0OMSDD; /* work storage*/
  SW0OW01.SW0OWSYY = SW0OM001.SW0OMSYY; /* for comparison*/
  SW0OW01.SW0OWEMM = SW0OM001.SW0OMEMM;
  SW0OW01.SW0OWEDD = SW0OM001.SW0OMEDD;
  SW0OW01.SW0OWEYY = SW0OM001.SW0OMEYY;

  if (SW0OW01.SW0OWSYD == 0 /* There is no start date*/
   && SW0OW01.SW0OWEYD == 0) /* There is no end date*/

     /* ** next sentence*/

  else

    SW0O152(); /* Identify bad 0 date*/

    if (SW0OW02.SW0OWGTF == "N") /* No errors yet*/

      SW0O153(); /* Set up century*/

      SW0O154(); /* Compare start/end dates*/

    end

    if (SW0OW02.SW0OWGTF == "N") /* Start/end edits passed*/

      SW0O155(); /* Call Ta0040 for range*/

    end
  end

  if (SW0OW02.SW0OWGTF == "Y") /* There is a date error*/

    SW0OW01.SW0OWSDT = 00000000; /* Initialize start date*/
    SW0OW01.SW0OWEDT = 00000000; /* Initialize end date*/

  end


end // end SW0O151

// Identify bad 0 date
Function SW0O152()
   /* ----------------------------------------------------------*/
   /* Only one date contains zeros. Both dates must be zero or*/
   /* both dates must contain non zero values.*/
   /* ----------------------------------------------------------*/

  if (SW0OW01.SW0OWEYD == 000000) /* End date is zero*/

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    converseLib.validationFailed(150); /* Inv value, must be > 0*/
    SW0OW02.SW0OWGTF = "Y"; /* Set date error flag*/
    set SW0OM001.SW0OMEMM cursor, bold; /* Highlight*/
    set SW0OM001.SW0OMEDD bold; /* Highlight*/
    set SW0OM001.SW0OMEYY bold; /* Highlight*/

  else

    if (SW0OM001.SW0OMEMM == 0 /* End month is empty*/
     || SW0OM001.SW0OMEDD == 0) /* End day is empty*/
   /* ---------- Y2K OUT ----------*/
     /* OR SW0OM001.SW0OMEYY EQ 0;    /* End year is empty*/
   /* ---------- Y2K OUT ----------*/

      SLWREC.XXXLOCID = "152"; /* Module identification*/
      converseLib.validationFailed(11); /* Invalid value*/
      SW0OW02.SW0OWGTF = "Y"; /* Set date error flag*/
      set SW0OM001.SW0OMEMM cursor, bold; /* Highlight*/
      set SW0OM001.SW0OMEDD bold; /* Highlight*/
      set SW0OM001.SW0OMEYY bold; /* Highlight*/

    end
  end

  if (SW0OW01.SW0OWSYD == 000000) /* Start date is zero*/

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    converseLib.validationFailed(150); /* Inv value, must be > 0*/
    SW0OW02.SW0OWGTF = "Y"; /* Set date error flag*/
    set SW0OM001.SW0OMSMM cursor, bold; /* Highlight*/
    set SW0OM001.SW0OMSDD bold; /* Highlight*/
    set SW0OM001.SW0OMSYY bold; /* Highlight*/

  else

    if (SW0OM001.SW0OMSMM == 0 /* Start month is empty*/
     || SW0OM001.SW0OMSDD == 0) /* Start day is empty*/
   /* ---------- Y2K OUT ----------*/
     /* OR SW0OM001.SW0OMSYY EQ 0;    /* Start year is empty*/
   /* ---------- Y2K OUT ----------*/

      SLWREC.XXXLOCID = "152"; /* Module identification*/
      converseLib.validationFailed(11); /* Invalid value        0*/
      SW0OW02.SW0OWGTF = "Y"; /* Set date error flag*/
      set SW0OM001.SW0OMSMM cursor, bold; /* Highlight*/
      set SW0OM001.SW0OMSDD bold; /* Highlight*/
      set SW0OM001.SW0OMSYY bold; /* Highlight*/

    end

  end


end // end SW0O152

// Set up century
Function SW0O153()
   /* ----------------------------------------------------------*/
   /* Set up the century information.*/
   /* ----------------------------------------------------------*/

  SW0OW02.SW0OWYMD = VGVar.currentShortGregorianDate; /* Examine the current date*/

  if (SW0OW02.SW0OWWYY > 50) /* Year is 51 through 99*/
   /* --------- Y2K OUT ---------*/
   /* AND SW0OW02.SW0OWWYY LE 99;*/
   /* --------- Y2K OUT ---------*/

    SW0OW02.SW0OWWCC = 19; /* Year is < 2000*/
  else
    SW0OW02.SW0OWWCC = 20; /* Year is > 1999*/

  end

   /* ----------------------------------------------------------*/
   /* Put century on the dates that were inputted. Since the*/
   /* requested dates should not be in the future, we can*/
   /* assume the century is 19 until the year 2000.*/
   /* ----------------------------------------------------------*/

   /* --------- Y2K OUT ---------*/
   /* IF SW0OW02.SW0OWWCC EQ 19;        /* Current century is 19*/

   /* MOVE 19 TO SW0OW01.SW0OWSCC;    /* Move 19 to start cent*/
   /* MOVE 19 TO SW0OW01.SW0OWECC;    /* Move 19 to end cent*/

   /* ELSE;*/
   /* --------- Y2K OUT ---------*/

  if (SW0OW01.SW0OWSYY > 50) /* Start date less than 2000*/
   /* --------- Y2K OUT ---------*/
   /* AND SW0OW01.SW0OWSYY LT 99;*/
   /* --------- Y2K OUT ---------*/

    SW0OW01.SW0OWSCC = 19;
  else
    SW0OW01.SW0OWSCC = 20; /* Start date > 1999*/

  end

  if (SW0OW01.SW0OWEYY > 50) /* End date less than 2000*/
   /* --------- Y2K OUT ---------*/
   /* AND SW0OW01.SW0OWEYY LT 100;*/

   /* MOVE 19 TO SW0OW01.SW0OWEYY;*/
   /* --------- Y2K OUT ---------*/

   /* --------- Y2K IN ----------*/
    SW0OW01.SW0OWECC = 19;
   /* --------- Y2K IN ----------*/
  else
   /* --------- Y2K OUT ---------*/
   /* MOVE 20 TO SW0OW01.SW0OWEYY;  /* End date > 1999*/
   /* --------- Y2K OUT ---------*/

   /* --------- Y2K IN ----------*/
    SW0OW01.SW0OWECC = 20; /* End date > 1999*/
   /* --------- Y2K IN ----------*/

  end
   /* --------- Y2K OUT ---------*/
   /* END;*/
   /* --------- Y2K OUT ---------*/


end // end SW0O153

// Compare start/end dates
Function SW0O154()
   /* ----------------------------------------------------------*/
   /* Check that the start date is less than the end date and*/
   /* that the start date is not greater than today's date.*/
   /* ----------------------------------------------------------*/

  if (SW0OW01.SW0OWSDT > SW0OW02.SW0OWWDT /* Start dt > today*/
   || SW0OW01.SW0OWEDT > SW0OW02.SW0OWWDT) /* End dt > today*/

    if (SW0OW01.SW0OWEDT > SW0OW02.SW0OWWDT) /* End dt >*/
      SLWREC.XXXLOCID = "154"; /* Module identification*/
      converseLib.validationFailed(243); /* Future date not allowed*/
      set SW0OM001.SW0OMEMM cursor, bold; /* Highlight*/
      set SW0OM001.SW0OMEDD bold; /* Highlight*/
      set SW0OM001.SW0OMEYY bold; /* Highlight*/
      SW0OW02.SW0OWGTF = "Y"; /* Set date error flag*/
    end

    if (SW0OW01.SW0OWSDT > SW0OW02.SW0OWWDT) /* Start dt > today*/
      SLWREC.XXXLOCID = "154"; /* Module identification*/
      converseLib.validationFailed(243); /* Future date not allowed*/
      set SW0OM001.SW0OMSMM cursor, bold; /* Highlight*/
      set SW0OM001.SW0OMSDD bold; /* Highlight*/
      set SW0OM001.SW0OMSYY bold; /* Highlight*/
      SW0OW02.SW0OWGTF = "Y"; /* Set date error flag*/
    end

  else

    if (SW0OW01.SW0OWSDT > SW0OW01.SW0OWEDT) /* Start > end dt*/

      SLWREC.XXXLOCID = "153"; /* Module identification*/
      converseLib.validationFailed(22); /* Start dt > end dt*/
      set SW0OM001.SW0OMSMM cursor, bold; /* Highlight*/
      set SW0OM001.SW0OMSDD bold; /* Highlight*/
      set SW0OM001.SW0OMSYY bold; /* Highlight*/
      SW0OW02.SW0OWGTF = "Y"; /* Set date error flag*/

    end
  end


end // end SW0O154

// Call TA0040 for date range
Function SW0O155()
   /* ----------------------------------------------------------*/
   /* Call TA0040 to calculate the date difference.*/
   /* ----------------------------------------------------------*/

  set TA2REC empty;
  TA2REC.TA2DBDFN = SW0OW01.SW0OWSDT;
  TA2REC.TA2DBDTN = SW0OW01.SW0OWEDT;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0) /* No errors*/

    if (TA2REC.TA2DBDDN > 31) /* Date range > 1 month*/

      SLWREC.XXXLOCID = "155"; /* Module identification*/
      converseLib.validationFailed(23); /* Number of days exceeded*/
      set SW0OM001.SW0OMSMM cursor, bold; /* Highlight*/
      set SW0OM001.SW0OMSDD bold; /* Highlight*/
      set SW0OM001.SW0OMSYY bold; /* Highlight*/
      set SW0OM001.SW0OMEMM bold; /* Highlight*/
      set SW0OM001.SW0OMEDD bold; /* Highlight*/
      set SW0OM001.SW0OMEYY bold; /* Highlight*/
      SW0OW02.SW0OWGTF = "Y"; /* Set date error flag*/

    end

  else

    SLWREC.XXXLOCID = "155"; /* Module identification*/
    converseLib.validationFailed(1); /* Err - notify programming*/
    set SW0OM001.SW0OMSMM cursor, bold; /* Highlight*/
    set SW0OM001.SW0OMSDD bold; /* Highlight*/
    set SW0OM001.SW0OMSYY bold; /* Highlight*/
    set SW0OM001.SW0OMEMM bold; /* Highlight*/
    set SW0OM001.SW0OMEDD bold; /* Highlight*/
    set SW0OM001.SW0OMEYY bold; /* Highlight*/
    SW0OW02.SW0OWGTF = "Y"; /* Set date error flag*/

  end


end // end SW0O155

// Assign selection  format
Function SW0O158()
   /* ------------------------------------------------------------*/
   /* Assign the selection format to be used for map m002*/
   /* ------------------------------------------------------------*/

  if (SW0OW02.SW0OWCTF == "Y") /* There is a container*/
    SW0OW03.SW0OWSSN = "1"; /* Set select flag = container*/

  else

    if (SW0OW02.SW0OWGPO == "Y") /* There is a po nbr*/
      SW0OW03.SW0OWSSN = "2"; /* Set select flag = po nbr*/

    else

      if (SW0OW02.SW0OWDTO == "Y") /* There is date +1*/
        SW0OW03.SW0OWSSN = "3"; /* Set sel flg = date*/

      else

        SLWREC.XXXLOCID = "158"; /* Module ident*/
        converseLib.validationFailed(221); /* Req cntr,po nbr, or date*/
        set SW0OM001.XWHCD cursor, bold; /* Highlight*/

      end
    end
  end


end // end SW0O158

// Process valid input request
Function SW0O160()
   /* ------------------------------------------------------------*/
   /* Indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  SW0OW00.SW0OWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the commarea*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = SW0OM001.XWHCD;
  COMMAREA.XGPCD = SW0OM001.XGPCD;

   /* ---------------------------------------------------------*/
   /* Move the selected data into the swjrec record. The*/
   /* next map will use the information for database extracts*/
   /* ---------------------------------------------------------*/

  SWJREC.XWHCD = SW0OM001.XWHCD; /* Warehouse code*/


  if (SW0OM001.TSHCNTNR == " ") /* No container*/
    SWJREC.TSHCNTNR = "*"; /* Initialize container*/
  else
    SWJREC.TSHCNTNR = SW0OM001.TSHCNTNR; /* container*/
  end


  if (SW0OM001.XGPCD == " ") /* No GPC (#1)*/
    SWJREC.XGPCD = "*"; /* Init GPC*/
  else
    SWJREC.XGPCD = SW0OM001.XGPCD; /* gpc of po nbr*/
  end


  SWJREC.PCFSECD = "*"; /* Season code*/

  if (SW0OM001.PC3PONBR == 0) /* There is no po nbr*/

    SWJREC.PC3PONBR = -1; /* PO nbr*/
    SWJREC.PC3POIDT = -1; /* Init po id*/
    SWJREC.PC4ORTYP = "*"; /* Init po type*/

  else

    SWJREC.PC3PONBR = SW0OM001.PC3PONBR; /* Move po nbr*/

    if (SW0OM001.SW0OWPID != " ") /* There is a po id*/
      SWJREC.PC3POIDT = SW0OW00.PC3POIDT; /* Move po id*/
      SWJREC.FY1FCTYC = SW0OW00.FY1FCTYC; /* Move fact*/
      SWJREC.PC4ORTYP = SW0OM001.PC4ORTYP; /* Move type*/
    else
      SWJREC.PC3POIDT = -1; /* Init id*/
      SWJREC.PC4ORTYP = "*"; /* Init po type*/
    end

  end

  if (SWJREC.FY1FCTYC == " ")

    if (SW0OM001.FY1FCTYC == " ") /* There is no factory*/
      SWJREC.FY1FCTYC = "*"; /* Initialize factory*/
    else
      SWJREC.FY1FCTYC = SW0OM001.FY1FCTYC; /* factory*/
    end

  end


  if (SW0OM001.SW0OMGPC == " ") /* There is no gpc (#2)*/
     /* ** next sentence*/
  else
    SWJREC.XGPCD = SW0OM001.SW0OMGPC; /* gpc #2*/
  end


  if (SW0OM001.SY1STNBR == " ") /* There is no style*/
    SWJREC.SY1STNBR = "*"; /* Initialize style*/
  else
    SWJREC.SY1STNBR = SW0OM001.SY1STNBR; /* style*/
  end


  if (SW0OM001.SY2CLRID == " ") /* There is no color*/
    SWJREC.SY2CLRID = "*"; /* Initialize color*/
  else
    SWJREC.SY2CLRID = SW0OM001.SY2CLRID; /* color*/
  end

   /* -----------------------------------------------------------*/
   /* Set the sw0ow03 record up for use by map 2. The swjrec*/
   /* did not contain the date parameters so it's inputted here*/
   /* -----------------------------------------------------------*/

  if (SW0OW01.SW0OWSDT == 0) /* There is no start date*/
    SW0OW03.SW0OWLWD = -999999999;
  else
    SW0OW03.SW0OWLWD = SW0OW01.SW0OWSDT; /* Move date to record*/
  end


  if (SW0OW01.SW0OWEDT == 0) /* There is no end date*/
    SW0OW03.SW0OWHGD = +999999999;
  else
    SW0OW03.SW0OWHGD = SW0OW01.SW0OWEDT; /* Move date to record*/
  end

  SW0OW03.SW0OWACT = "S"; /* Set for scan*/

   /* ------------------------------------------------------------*/
   /* Initialize flags*/
   /* ------------------------------------------------------------*/

  SW0OW00.SW0OWSWD = "2"; /* Map to be displayed switch*/
  SW0OW00.SW0OWSWR = "Y"; /* Request for data switch*/


end // end SW0O160

// Inquire/maintain a table row
Function SW0O200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) obtain data*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0O210(); /* Obtain data*/

  SW0O220(); /* Format and display the map*/

  SW0O230(); /* Check attention identifier*/

  SW0O240(); /* Reset fields to normal intensity*/

  SW0O250(); /* Verify the entered data*/

  SW0O260(); /* Process valid input request*/


end // end SW0O200

// Obtain the data to display
Function SW0O210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0OW00.SW0OWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SW0OW00.XXXTSLEN = 1372; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SW0OW22.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  SW0OS21(); /* Purge any temporary storage*/

  SW0OW21.XWHCD = SWJREC.XWHCD; /* Warehouse code*/
  SW0OW21.XWHABRV = SW0OW00.XWHABRV; /* Warehouse desc*/

   /* -----------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted*/
   /* -----------------------------------------------------------*/

  SW0O211(); /* Select set and open cursor*/

   /* -----------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor*/
   /* -----------------------------------------------------------*/

  SW0OW00.SW0OWIXM = 1; /* Display line index*/
  SW0OW00.SW0OWSWC = "N"; /* End of cursor switch*/
  SW0OW03.SW0OWACT = "N"; /* Set the action to 'next'*/

  while (SW0OW00.SW0OWSWC == "N") /* Until end of cursor*/

    SW0O212(); /* Fetch next row in the cursor*/

    /* ---------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage*/
    /* ---------------------------------------------------------*/

    if (SW0OW00.SW0OWSWC == "N") /* Not end of cursor*/

      SW0O213(); /* Save data in display storage*/
    end

    /* ---------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue*/
    /* ---------------------------------------------------------*/

    if (SW0OW00.SW0OWIXM > 14) /* Page is full*/

      SW0O214(); /* Add page to temporary storage*/
      SW0OW00.SW0OWIXM = 1; /* Display line index*/

    end
  end

   /* -----------------------------------------------------------*/
   /* Add any partially formatted last page to the queue*/
   /* -----------------------------------------------------------*/

  if (SW0OW00.SW0OWIXM > 1) /* Page was formatted*/
    SW0O214(); /* Add page to temporary storage*/
  end

   /* -----------------------------------------------------------*/
   /* Close the cursor for the selected set*/
   /* -----------------------------------------------------------*/

  SW0O215(); /* Close the selected set cursor*/

   /* -----------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display*/
   /* -----------------------------------------------------------*/

  if (SW0OW22.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "210"; /* Module identification*/
    SLWREC.SLWMSGNO = 214; /* No data to display*/

    return;

  end

   /* ----------------------------------------------------------*/
   /* Indicate that the request for data is complete*/
   /* ----------------------------------------------------------*/

  SW0OW00.SW0OWSWR = "N"; /* Request for data switch*/


end // end SW0O210

// Select set and open cursor
Function SW0O211()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5280" (SW0OW03, SQLCA, SWJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Sel tbl set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "211"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIHSY001"; /* Table view name*/
  TA1REC.TA1TBLKE = SWJREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0O211

// Fetch next row in the cursor
Function SW0O212()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5280" (SW0OW03, SQLCA, SWJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Get next*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0OW00.SW0OWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "212"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(229); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIHSY001"; /* Table view name*/
  TA1REC.TA1TBLKE = SWJREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0O212

// Save data in display storage
Function SW0O213()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SW0OW22.TA5TSQIX > 0 /* Not the first page*/
   && SW0OW00.SW0OWIXM == 1) /* and first line on page*/

    SW0OW21.XWHCD = SWJREC.XWHCD; /* Warehouse code*/
    SW0OW21.XWHABRV = SW0OW00.XWHABRV; /* Warehouse name*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0OW21.TSHCNTNR[SW0OWIXM] = SWJREC.TSHCNTNR; /* Container*/
  SW0OW21.PC3PONBR[SW0OWIXM] = SWJREC.PC3PONBR; /* PO number*/
  SW0OW00.SW0OWPOI = SWJREC.PC3POIDT; /* Conver po id*/
  SW0OW21.SW0OWPID[SW0OWIXM] = SW0OW00.SW0OWPOI; /* Converted id*/
  SW0OW21.PC4ORTYP[SW0OWIXM] = SWJREC.PC4ORTYP; /* PO type*/
  SW0OW21.XGPCD[SW0OWIXM] = SWJREC.XGPCD; /* GPC*/
  SW0OW21.SY1STNBR[SW0OWIXM] = SWJREC.SY1STNBR; /* Style*/
  SW0OW21.SY2CLRID[SW0OWIXM] = SWJREC.SY2CLRID; /* Color*/
  SW0OW21.FY1FCTYC[SW0OWIXM] = SWJREC.FY1FCTYC; /* Factory*/
  SW0OW21.SW0OWIDT[SW0OWIXM] = SWJREC.SWJINSDT; /* Inspection date*/
  SW0OW21.XDMCD[SW0OWIXM] = SWJREC.XDMCD; /* Dimension*/
  SW0OW21.XQACD[SW0OWIXM] = SWJREC.XQACD; /* Quality*/
  SW0OW21.PC2INSEG[SW0OWIXM] = SWJREC.PC2INSEG; /* Insp segment*/
  SW0OW21.XEGCD[SW0OWIXM] = SWJREC.XEGCD; /* Eng diff*/
  SW0OW21.XPGCD[SW0OWIXM] = SWJREC.XPGCD; /* Packaging type*/
  SW0OW21.XUMCD[SW0OWIXM] = SWJREC.XUMCD; /* Unit of measure*/
  SW0OW21.XOWCD[SW0OWIXM] = SWJREC.XOWCD; /* Owner group*/
  SW0OW21.XSLCD[SW0OWIXM] = SWJREC.XSLCD; /* SLC*/
  SW0OW21.SWGPSEQN[SW0OWIXM] = SWJREC.SWGPSEQN; /* Seq #*/
  SW0OW21.SWGPRDUN[SW0OWIXM] = SWJREC.SWGPRDUN; /* TEMP TOTL PROD*/

  SW0OW21.SWGPRDCS[SW0OWIXM] = SWJREC.SWGPRDCS; /* Tot cart*/
  SW0OW21.SW0OWMIN[SW0OWIXM] = SWJREC.SWGINMM1 + SWJREC.SWGINMM2; /* Min*/
  SW0OW21.SW0OWINC[SW0OWIXM] = SWJREC.SWGINCS1 + SWJREC.SWGINCS2;
                                   /* Insp cart*/
  SW0OW21.SW0OWUNT[SW0OWIXM] = SWJREC.SWGINUN1 + SWJREC.SWGINUN2;
                                   /* Insp unt*/

  SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXM + 1; /* Increment line index*/



end // end SW0O213

// Add page to temporary storage
Function SW0O214()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0OW21.XXXTSLEN = SW0OW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0OW21, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0OW21 empty; /* M002 display storage*/

    SW0OW22.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "214"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0O214

// Close selected set cursor
Function SW0O215()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  SW0OW03.SW0OWACT = "C"; /* Set the close action*/

  try
    call "IO5280" (SW0OW03, SQLCA, SWJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "215"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIHSY001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0O215

// Format and converse the map
Function SW0O220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0OW00.SW0OWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0OW00.SW0OWSWF == "Y") /* Map must be formatted*/
      SW0O221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (SW0OW22.XXXTSPAG > 0)
    SW0OM002.XXXTSPAG = SW0OW22.XXXTSPAG; /* Current page*/
    SW0OM002.TA5TSQIX = SW0OW22.TA5TSQIX; /* max pages*/
  end

  SW0OM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0OM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0OM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* Or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0OM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0OM002.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0OM002 alarm; /* Indicate sound alarm*/

  end

  converse SW0OM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;

  COMMAREA.CATOAP = SW0OM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0OM002.CAITEM; /* Application data*/

  COMMAREA.CACURAPP = "SW0O"; /* Initialize current appid*/
  COMMAREA.CAMSG = " "; /* Initialize message field*/
  COMMAREA.CASECRC = 0; /* Initalize error message*/


end // end SW0O220

// Format the display data
Function SW0O221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0OM002 initial; /* M002 input/output area*/

  SW0OW00.SW0OWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0OW22.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0OW22.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SW0OW00.SW0OWSWU == "Y") /* Current page was changed*/

        SW0OS22(); /* Update temporary storage page*/

        SW0OW00.SW0OWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SW0OW22.XXXTSPAG > SW0OW22.TA5TSQIX) /* Desired greater highest*/
        SW0OW22.XXXTSPAG = SW0OW22.TA5TSQIX; /* Default to highest*/
      end

      SW0OS23(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    SW0OM002.XXXTSPAG = SW0OW22.XXXTSPAG; /* Current page*/
    SW0OM002.TA5TSQIX = SW0OW22.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SW0OM002.XWHCD = SWJREC.XWHCD; /* Warehouse code*/
  SW0OM002.XWHABRV = SW0OW00.XWHABRV; /* Warehouse name*/

  SW0OW00.SW0OWIXM = 1; /* Initialize line index*/

  while (SW0OW00.SW0OWIXM <= 14 /* Until screen is full*/
   && SW0OW21.XGPCD[SW0OWIXM] > " ") /* or end of data*/

    if (SW0OW00.SW0OWIXM == 1) /* First select field*/

      set SW0OM002.SW0OMSEL[SW0OWIXM] cursor, normal; /* Position cursor*/
    else
      set SW0OM002.SW0OMSEL[SW0OWIXM] normal; /* Unprotect*/

    end

    SW0OM002.SW0OMSEL[SW0OWIXM] = SW0OW21.SW0OMSEL[SW0OWIXM];
    SW0OM002.TSHCNTNR[SW0OWIXM] = SW0OW21.TSHCNTNR[SW0OWIXM];
    SW0OM002.PC3PONBR[SW0OWIXM] = SW0OW21.PC3PONBR[SW0OWIXM];
    SW0OM002.SW0OWPID[SW0OWIXM] = SW0OW21.SW0OWPID[SW0OWIXM];
    SW0OM002.PC4ORTYP[SW0OWIXM] = SW0OW21.PC4ORTYP[SW0OWIXM];
    SW0OM002.XGPCD[SW0OWIXM] = SW0OW21.XGPCD[SW0OWIXM];
    SW0OM002.SY1STNBR[SW0OWIXM] = SW0OW21.SY1STNBR[SW0OWIXM];
    SW0OM002.SY2CLRID[SW0OWIXM] = SW0OW21.SY2CLRID[SW0OWIXM];
    SW0OM002.SW0OMINY[SW0OWIXM] = SW0OW21.SW0OWINY[SW0OWIXM];
    SW0OM002.SW0OMINM[SW0OWIXM] = SW0OW21.SW0OWINM[SW0OWIXM];
    SW0OM002.SW0OMIND[SW0OWIXM] = SW0OW21.SW0OWIND[SW0OWIXM];

    SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXM + 1; /* Increment line index*/

  end

  while (SW0OW00.SW0OWIXM <= 14 /* Darken lines with no data*/
   && SW0OW21.XGPCD[SW0OWIXM] == " ")

    set SW0OM002.SW0OMSEL[SW0OWIXM] skip, invisible;

    SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXM + 1;

  end


end // end SW0O221

// Check attention identifier
Function SW0O230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0OW00.SW0OWSWR == "Y") /* Request for data*/
      set SW0OW21 empty; /* M002 display storage*/
    end

    SW0OW00.SW0OWSWR = "N"; /* request for data*/
    SW0OW00.SW0OWSWF = "Y"; /* format screen m002*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0OM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0OS21(); /* Purge temp storage*/

      XSSL001(); /* Exit to another application*/

      set SW0OM002.CATOAP cursor, bold; /* Highlight*/
      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(11); /* Invalid value*/

    else

      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/
      set SW0OM002.CATOAP cursor, bold; /* Highlight*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6 /* or PF6 was pressed*/
   || converseVar.eventKey is pf9 /* or PF9 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf6 /* or PF6 was pressed*/
     || converseVar.eventKey is pf13) /* or PF13 was pressed*/

      SW0OS90(); /* Assign common TO applications*/

    else /* Key selected was PF1, PF3, PF4*/
                                 /* ; or PF9*/
      if (converseVar.eventKey is pf1) /* PF1 was pressed*/
        COMMAREA.CAITEM = "SW0OM002"; /* Application find code*/
      end

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        SW0OW00.SW0OWSWD = "1"; /* Request map number 1*/
        SW0OW00.SW0OWSWR = "Y"; /* 'Y'es to request for data*/
        set SWJREC empty;

        exit stack;

      end

      if (converseVar.eventKey is pf9) /* PF9 was pressed*/
        COMMAREA.CATOAP = "SW0A"; /* TO application - Insp Menu*/
      end

    end

    SW0OS21(); /* Purge temporary storage*/

    SW0OS24(); /* Purge swjrec*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0O230

// Reset highlighted fields
Function SW0O240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SW0OW00.SW0OWIXM = 1; /* Initialize line index*/

  while (SW0OW00.SW0OWIXM <= 14 /* Until end of lines*/
   && SW0OW21.TSHCNTNR[SW0OWIXM] > " ") /* or end of display*/

    set SW0OM002.SW0OMSEL[SW0OWIXM] normal; /* Reset select flag*/

    SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXM + 1; /* Increment line index*/

  end

  set SW0OM002.CATOAP initialAttributes; /* TO application*/
  set SW0OM002.CAITEM initialAttributes; /* Application data*/


end // end SW0O240

// Verify the entered data
Function SW0O250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "250"; /* Module identification*/
    set SW0OM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Request to page forward(pf7) or backwards(pf8) verify*/
   /* modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    SW0O251(); /* Verify scroll request*/

  else

    /* ----------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line*/
    /* ----------------------------------------------------------*/

    if (SW0OW22.TA5TSQIX > 0) /* Page was formatted*/

      SW0OW00.SW0OWIXM = 14; /* Initialize line index*/

      while (SW0OW00.SW0OWIXM > 0) /* Until end of lines*/

        SW0O252(); /* Verify data in line*/

        SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXM - 1; /* Decrement line number*/

      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end SW0O250

// Verify scroll request
Function SW0O251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0OW22.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0OW22.XXXTSPAG >= SW0OW22.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

   /* -----------------------------------------------------------*/
   /* Indicate an error for any data that was modified*/
   /* -----------------------------------------------------------*/

  SW0OW00.SW0OWIXM = 14; /* Initialize line index*/

  while (SW0OW00.SW0OWIXM > 0) /* Until end of lines*/

    if (SW0OM002.SW0OMSEL[SW0OWIXM] != SW0OW21.SW0OMSEL[SW0OWIXM])

      SLWREC.XXXLOCID = "251"; /* Module identification*/
      set SW0OM002.SW0OMSEL[SW0OWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(6); /* No changes during scrolling*/

    end

    SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXM - 1; /* Decrement line number*/

  end


end // end SW0O251

// validate modifiable fields
Function SW0O252()
   /* ------------------------------------------------------------*/
   /* Verify data in the line*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a 'S', indicate that*/
   /* only 'S' may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (SW0OM002.SW0OMSEL[SW0OWIXM] != SW0OW21.SW0OMSEL[SW0OWIXM]
   && SW0OM002.SW0OMSEL[SW0OWIXM] != "S") /* and is not a 's'*/

    SLWREC.XXXLOCID = "252"; /* Module identification*/
    set SW0OM002.SW0OMSEL[SW0OWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(11);

  end


end // end SW0O252

// Process valid input request
Function SW0O260()
   /* -----------------------------------------------------------*/
   /* Indicate that the map must be formatted before display*/
   /* -----------------------------------------------------------*/

  SW0OW00.SW0OWSWF = "Y"; /* format map 002*/


   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, increment the page*/
   /* number and return to the previous process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    SW0OW22.XXXTSPAG = SW0OW22.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    SW0OW22.XXXTSPAG = SW0OW22.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* -----------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area*/
   /* -----------------------------------------------------------*/

  SW0OW00.SW0OWIXM = 1; /* Initialize the line index*/

  while (SW0OW00.SW0OWIXM <= 14) /* Until end of lines*/

    if (SW0OM002.SW0OMSEL[SW0OWIXM] != SW0OW21.SW0OMSEL[SW0OWIXM]
     && SW0OM002.TSHCNTNR[SW0OWIXM] > " ")

      SW0OW21.SW0OMSEL[SW0OWIXM] = SW0OM002.SW0OMSEL[SW0OWIXM];
      SW0OW00.SW0OWSWU = "N"; /* Storage update switch*/

    end

    SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXM + 1; /* Increment line index*/

  end

   /* -----------------------------------------------------------*/
   /* If a line was selected, save the key fields and indicate*/
   /* that map 003 is to be displayed*/
   /* -----------------------------------------------------------*/

  if ("S" in SW0OW21.SW0OMSEL) /* Line was selected*/

    SW0OW00.SW0OWIXM = sysVar.arrayIndex; /* Map line index*/
    SW0OW00.SW0OWIXV = SW0OW00.SW0OWIXM; /* Save index nbr*/

    SW0OW21.SW0OMSEL[SW0OWIXM] = "V"; /* Data viewed tag*/

    SWKREC.XWHCD = SW0OW21.XWHCD; /* Warehouse code*/
    SWKREC.SWGPSEQN = SW0OW21.SWGPSEQN[SW0OWIXM]; /* Seq #*/
    SWKREC.XGPCD = SW0OW21.XGPCD[SW0OWIXM]; /* GPC*/

    SWKREC.SWAINSTP = "*"; /* Inspection type*/
    SWKREC.SWYTACD = -1; /* Task code*/

    SW0OW00.SW0OWSWD = "3"; /* Map to be displayed switch*/
    SW0OW00.SW0OWSWR = "Y"; /* Request for data switch*/
    SW0OW00.SW0OWSWF = "Y"; /* Format the map*/
    move TA5REC to SW0OW25 withV60Compat; /* Save the ta5recmax pages*/

  end


end // end SW0O260

// Inquire/maintain a table row
Function SW0O300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain data*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0O310(); /* Obtain data*/

  SW0O320(); /* Format and display the map*/

  SW0O330(); /* Check attention identifier*/

  SW0O350(); /* Verify the entered data*/

  SW0O360(); /* Process valid input request*/


end // end SW0O300

// Obtain the data to display
Function SW0O310()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0OW00.SW0OWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SW0OW00.XXXTSLEN = 387; /* Temporary storage page length*/
  set TA5REC empty; /* Initialize the record*/
  set SW0OW32 empty; /* Empty the page counters*/
  TA5REC.TA5APPID = "SW1O"; /* Qualify que*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SW0OW32.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  SW0OS31(); /* Purge any temporary storage*/

  SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXV; /* Set warehouse*/

  SW0OS70();

   /* -----------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted*/
   /* -----------------------------------------------------------*/

  SW0O311(); /* Select set and open cursor*/

   /* -----------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor*/
   /* -----------------------------------------------------------*/

  SW0OW00.SW0OWIXM = 1; /* Display line index*/
  SW0OW00.SW0OWSWC = "N"; /* End of cursor switch*/

  while (SW0OW00.SW0OWSWC == "N") /* Until end of cursor*/

    SW0O312(); /* Fetch next row in the cursor*/

    /* ---------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage*/
    /* ---------------------------------------------------------*/

    if (SW0OW00.SW0OWSWC == "N") /* Not end of cursor*/

      SW0O313(); /* Save data in display storage*/
    end

    /* ---------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue*/
    /* ---------------------------------------------------------*/

    if (SW0OW00.SW0OWIXM > 20) /* Page is full*/

      SW0O314(); /* Add page to temporary storage*/
      SW0OW00.SW0OWIXM = 1; /* Display line index*/

    end
  end

   /* -----------------------------------------------------------*/
   /* Add any partially formatted last page to the queue*/
   /* -----------------------------------------------------------*/

  if (SW0OW00.SW0OWIXM > 1) /* Page was formatted*/
    SW0O314(); /* Add page to temporary storage*/
  end

   /* -----------------------------------------------------------*/
   /* Close the cursor for the selected set*/
   /* -----------------------------------------------------------*/

  SW0O315(); /* Close the selected set cursor*/

   /* -----------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display*/
   /* -----------------------------------------------------------*/

  if (SW0OW32.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "310"; /* Module identification*/
    SLWREC.SLWMSGNO = 214; /* No data to display*/

    return;

  end

   /* ----------------------------------------------------------*/
   /* Indicate that the request for data is complete*/
   /* ----------------------------------------------------------*/

  SW0OW00.SW0OWSWR = "N"; /* Request for data switch*/


end // end SW0O310

// Select set and open cursor
Function SW0O311()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5290" ("S2", SQLCA, SWKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Sel tbl set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "311"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(229); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIHTSK01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWJREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0O311

// Fetch next row in the cursor
Function SW0O312()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5290" ("N2", SQLCA, SWKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Get next*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0OW00.SW0OWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "312"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(229); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIHTSK01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWJREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0O312

// Save data in display storage
Function SW0O313()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SW0OW32.TA5TSQIX > 0 /* Not the first page*/
   && SW0OW00.SW0OWIXM == 1) /* and first line on page*/

    SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXV; /* Set indx to 21 map*/

    SW0OS70();

    SW0OW00.SW0OWIXM = 1; /* Reset the index*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0OW31.SWYTACD[SW0OWIXM] = SWKREC.SWYTACD; /* Task code*/
  SW0OW31.SWKINQTY[SW0OWIXM] = SWKREC.SWKINQTY; /* Insp qty*/
  SW0OW31.SWIERQTY[SW0OWIXM] = SWKREC.SWIERQTY; /* Insp qty*/
  SW0OW31.SWZTECD[SW0OWIXM] = SWKREC.SWZTECD; /* Error code*/

                       /* ; % units inspected*/
  SW0OW31.SW0OWPUI[SW0OWIXM] = SWKREC.SWKINQTY / SW0OW31.SWGPRDUN;

                       /* ; % error units*/
  SW0OW31.SW0OWPEU[SW0OWIXM] = SWKREC.SWIERQTY / SW0OW31.SWGPRDUN;

  SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXM + 1; /* Increment line index*/


end // end SW0O313

// Add page to temporary storage
Function SW0O314()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0OW31.XXXTSLEN = SW0OW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = "SW1O"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0OW31, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0OW31 empty; /* M003 display storage*/

    SW0OW32.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "314"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0O314

// Close selected set cursor
Function SW0O315()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5290" ("C2", SQLCA, SWJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "315"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIHTSK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0O315

// Format and converse the map
Function SW0O320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0OW00.SW0OWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0OW00.SW0OWSWF == "Y") /* Map must be formatted*/
      SW0O321(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (SW0OW32.XXXTSPAG > 0)
    SW0OM003.XXXTSPAG = SW0OW32.XXXTSPAG; /* Current page*/
    SW0OM003.TA5TSQIX = SW0OW32.TA5TSQIX; /* max pages*/
  end

  SW0OM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0OM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0OM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* Or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0OM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0OM003.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0OM003 alarm; /* Indicate sound alarm*/

  end

  converse SW0OM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0;

  COMMAREA.CATOAP = SW0OM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0OM003.CAITEM; /* Application data*/

  COMMAREA.CACURAPP = "SW0O"; /* Initialize current appid*/
  COMMAREA.CAMSG = " "; /* Initialize message field*/
  COMMAREA.CASECRC = 0; /* Initalize error number*/


end // end SW0O320

// Format the display data
Function SW0O321()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0OM003 initial; /* M003 input/output area*/

  SW0OW00.SW0OWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0OW32.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0OW32.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SW0OW00.SW0OWSWU == "Y") /* Current page was changed*/

        SW0OS32(); /* Update temporary storage page*/

        SW0OW00.SW0OWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SW0OW32.XXXTSPAG > SW0OW32.TA5TSQIX) /* Desired greater highest*/
        SW0OW32.XXXTSPAG = SW0OW32.TA5TSQIX; /* Default to highest*/
      end

      SW0OS33(); /* Obtain temporary storage page*/

    end

    /* ----------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ----------------------------------------------------------*/

    SW0OM003.XXXTSPAG = SW0OW32.XXXTSPAG; /* Current page*/
    SW0OM003.TA5TSQIX = SW0OW32.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXV; /* Reset ndx to sw0ow21*/

  SW0OM003.XWHCD = SW0OW21.XWHCD; /* Warehouse code*/
  SW0OM003.XWHABRV = SW0OW21.XWHABRV; /* Warehouse name*/
  SW0OM003.TSHCNTNR = SW0OW21.TSHCNTNR[SW0OWIXM]; /* Container*/
  SW0OM003.PC3PONBR = SW0OW21.PC3PONBR[SW0OWIXM]; /* PO num*/
  SW0OM003.SW0OWPID = SW0OW21.SW0OWPID[SW0OWIXM]; /* PO id*/
  SW0OM003.PC4ORTYP = SW0OW21.PC4ORTYP[SW0OWIXM]; /* PO type*/
  SW0OM003.FY1FCTYC = SW0OW21.FY1FCTYC[SW0OWIXM]; /* Factory*/
  SW0OM003.SW0OMINM = SW0OW21.SW0OWINM[SW0OWIXM]; /* Insp mth*/
  SW0OM003.SW0OMIND = SW0OW21.SW0OWIND[SW0OWIXM]; /* Insp day*/
  SW0OM003.SW0OMINY = SW0OW21.SW0OWINY[SW0OWIXM]; /* Insp yr*/
  SW0OM003.SW0OMMIN = SW0OW21.SW0OWMIN[SW0OWIXM]; /* Minute*/
  SW0OM003.SWGPRDCS = SW0OW21.SWGPRDCS[SW0OWIXM]; /* Total cart*/
  SW0OM003.SW0OMINC = SW0OW21.SW0OWINC[SW0OWIXM]; /* Insp cart*/
  SW0OM003.SW0OMUNT = SW0OW21.SW0OWUNT[SW0OWIXM]; /* Insp unit*/
  SW0OM003.XGPCD = SW0OW21.XGPCD[SW0OWIXM]; /* GPC*/
  SW0OM003.SY1STNBR = SW0OW21.SY1STNBR[SW0OWIXM]; /* Style*/
  SW0OM003.SY2CLRID = SW0OW21.SY2CLRID[SW0OWIXM]; /* Color*/
  SW0OM003.XDMCD = SW0OW21.XDMCD[SW0OWIXM]; /* Dimension*/
  SW0OM003.XQACD = SW0OW21.XQACD[SW0OWIXM]; /* Quality*/
  SW0OM003.PC2INSEG = SW0OW21.PC2INSEG[SW0OWIXM]; /* Insp seq*/
  SW0OM003.XEGCD = SW0OW21.XEGCD[SW0OWIXM]; /* Eng diff*/
  SW0OM003.XPGCD = SW0OW21.XPGCD[SW0OWIXM]; /* Package type*/
  SW0OM003.XUMCD = SW0OW21.XUMCD[SW0OWIXM]; /* Unit of meas*/
  SW0OM003.XOWCD = SW0OW21.XOWCD[SW0OWIXM]; /* Own-group*/
  SW0OM003.XSLCD = SW0OW21.XSLCD[SW0OWIXM]; /* SLC*/

  SW0OW00.SW0OWIXM = 1; /* Initialize line index*/

  while (SW0OW00.SW0OWIXM <= 20        /* Until screen is full*/
   && SW0OW31.SWYTACD[SW0OWIXM] > 0 /* or end of data*/
   && SW0OW31.SWZTECD[SW0OWIXM] > 0)

    SW0OM003.SWYTACD[SW0OWIXM] = SW0OW31.SWYTACD[SW0OWIXM];
    SW0OM003.SWKINQTY[SW0OWIXM] = SW0OW31.SWKINQTY[SW0OWIXM];
    SW0OM003.SWIERQTY[SW0OWIXM] = SW0OW31.SWIERQTY[SW0OWIXM];
    SW0OM003.SWZTECD[SW0OWIXM] = SW0OW31.SWZTECD[SW0OWIXM];
    SW0OM003.SW0OWPUI[SW0OWIXM] = SW0OW31.SW0OWPUI[SW0OWIXM];
    SW0OM003.SW0OWPEU[SW0OWIXM] = SW0OW31.SW0OWPEU[SW0OWIXM];

    SW0OW00.SW0OWIXM = SW0OW00.SW0OWIXM + 1; /* Increment line in*/

  end


end // end SW0O321

// Check attention identifier
Function SW0O330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0OW00.SW0OWSWR == "Y") /* Request for data*/
      set SW0OW31 empty; /* M003 display storage*/
    end

    SW0OW00.SW0OWSWR = "N"; /* request for data*/
    SW0OW00.SW0OWSWF = "Y"; /* format screen m003*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0OM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0OS31(); /* Purge temp storage*/

      XSSL001(); /* Exit to another application*/

      set SW0OM003.CATOAP cursor, bold; /* Highlight*/
      SLWREC.XXXLOCID = "330"; /* Module identification*/
      converseLib.validationFailed(11); /* Invalid value*/

    else

      SLWREC.XXXLOCID = "330"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/
      set SW0OM003.CATOAP cursor, bold; /* Highlight*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6 /* or PF6 was pressed*/
   || converseVar.eventKey is pf9 /* or PF9 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/

    if (converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf6 /* or PF6 was pressed*/
     || converseVar.eventKey is pf13) /* or PF13 was pressed*/

      SW0OS90(); /* Assign common TO applications*/

    else /* Key selected was PF1, PF3, PF4*/
                                 /* ; or PF9*/
      if (converseVar.eventKey is pf1) /* PF1 was pressed*/
        COMMAREA.CAITEM = "SW0OM003"; /* Application find code*/
      end

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        SW0OW00.SW0OWSWD = "2"; /* Request map number 2*/
        SW0OW00.SW0OWSWR = "N"; /* 'N'o to request for data*/
        SW0OW00.SW0OWSWF = "Y"; /* Format the map*/
        SW0OW00.XXXTSLEN = 1372; /* Set temporary storage*/
        move SW0OW25 to TA5REC withV60Compat; /* Reset to map 1 que*/


        exit stack;

      end

      if (converseVar.eventKey is pf9) /* PF9 was pressed*/
        COMMAREA.CATOAP = "SW0A"; /* TO application - Insp Menu*/
      end

    end

    SW0OS31(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0O330

// Verify the entered data
Function SW0O350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "350"; /* Module identification*/
    set SW0OM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Request to page forward(pf7) or backwards(pf8) verify*/
   /* modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    SW0O351(); /* Verify scroll request*/

  end


  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end SW0O350

// Verify scroll request
Function SW0O351()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0OW32.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "351"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0OW32.XXXTSPAG >= SW0OW32.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "351"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end


end // end SW0O351

// Process valid input request
Function SW0O360()
   /* -----------------------------------------------------------*/
   /* Indicate that the map must be formatted before display*/
   /* -----------------------------------------------------------*/

  SW0OW00.SW0OWSWF = "Y"; /* format map 003*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, increment the page*/
   /* number and return to the previous process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    SW0OW32.XXXTSPAG = SW0OW32.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    SW0OW32.XXXTSPAG = SW0OW32.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* -----------------------------------------------------------*/
   /* Determine if another line was selected for viewing*/
   /* -----------------------------------------------------------*/

  if ("S" in SW0OW21.SW0OMSEL) /* Line was selected*/

    SW0OW00.SW0OWIXM = sysVar.arrayIndex; /* Map line index*/

    SW0OW00.SW0OWSWD = "3"; /* Map to be displayed switch*/
    SW0OW00.SW0OWIXV = SW0OW00.SW0OWIXM; /* Save the index*/
    SW0OW21.SW0OMSEL[SW0OWIXM] = "V"; /* Tag as viewed*/
    SW0OW00.SW0OWSWR = "Y"; /* Data is requested*/

    SWKREC.SWAINSTP = "*"; /* Inspection type*/
    SWKREC.SWYTACD = -1; /* Task code*/
    SWKREC.XWHCD = SW0OW21.XWHCD; /* Warehouse code*/
    SWKREC.SWGPSEQN = SW0OW21.SWGPSEQN[SW0OWIXM]; /* Seq #*/
    SWKREC.XGPCD = SW0OW21.XGPCD[SW0OWIXM]; /* GPC*/

  else

    SW0OW00.SW0OWSWD = "2"; /* Map to be displayed switch*/
    SW0OW00.SW0OWSWR = "N"; /* 'N'o to request for data*/
    SW0OW00.SW0OWSWF = "Y"; /* Format the map*/
    SW0OW00.XXXTSLEN = 1372; /* Set temp storage*/
    move SW0OW25 to TA5REC withV60Compat; /* Reset to map 2*/

    exit stack;

  end


end // end SW0O360

// purge temporary storage m001
Function SW0OS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0OW01 empty; /* M001 display storage*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0OS01

// Edit gpc and po nbr
Function SW0OS04()
   /* ------------------------------------------------------------*/
   /* Edit the general product code*/
   /* ------------------------------------------------------------*/

  if (SW0OW01.XGPCD != SW0OM001.XGPCD)

    if (SW0OM001.XGPCD in XGPTBL.XGPCD /* If GPC is valid*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.XXXLOCID = "S04"; /* Module ident*/
      converseLib.validationFailed(11); /* Invalid value*/
      set SW0OM001.XGPCD cursor, bold; /* Highlight*/
      SW0OW01.XGPCD = " "; /* Reinitialize work gpc*/
      SW0OW02.SW0OWGPP = "Y"; /* Set GPC/PO err flag*/
    end

  end


end // end SW0OS04

// Edit po id/type
Function SW0OS05()
   /* ------------------------------------------------------------*/
   /* Edit the  product order id and product order type*/
   /* ------------------------------------------------------------*/

  if (SW0OM001.SW0OWPID == " " /* One of the*/
   || SW0OM001.PC4ORTYP == " ") /* fields is completed*/

    if (SW0OM001.SW0OWPID == " ") /* No po id*/

      SLWREC.XXXLOCID = "S05"; /* Module ident*/
      set SW0OM001.SW0OWPID cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Invalid value*/
      SW0OW02.SW0OWGPP = "Y"; /* Set the error flag to yes*/
      SW0OW01.SW0OWPID = " "; /* Reinitialize po id*/

    end

    if (SW0OM001.PC4ORTYP == " ") /* No type*/
      SLWREC.XXXLOCID = "S05"; /* Module ident*/
      set SW0OM001.PC4ORTYP cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Invalid value*/
      SW0OW02.SW0OWGPP = "Y"; /* Set the error flag to yes*/
      SW0OW01.PC4ORTYP = " "; /* Reinitialize the po type*/
    end

  end

  if (SW0OM001.XGPCD == "03") /* Apparel gpc*/
    SLWREC.XXXLOCID = "S05"; /* Module ident*/
    set SW0OM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(229); /* Apparel requires po nbr*/
    SW0OW02.SW0OWGPP = "Y"; /* Set error flag to yes*/
  end

  if (SW0OW02.SW0OWGPP == "N") /* There are no errors for this line*/
    TA1REC.TA1PGMNM = "SW0O"; /* Original calling module*/
    SWVREC.XGPCD = SW0OM001.XGPCD; /* Load gpc*/
    SWVREC.SWVWPOID = SW0OM001.SW0OWPID; /* Load po id*/
    SWVREC.PC4ORTYP = SW0OM001.PC4ORTYP; /* Load po type*/

    SWVREC.SWVWFNC = "NO"; /* Call using gpc/po nbr*/

    XSSLS10();

    if (SWVREC.SWVWRTN == 0)

      SW0OW01.PC3PONBR = SWVREC.PC3PONBR; /* Store po nbr*/
      SW0OM001.PC3PONBR = SWVREC.PC3PONBR; /* Move to map*/
      SW0OW01.XGPCD = SW0OM001.XGPCD; /* Move gpc to store*/
      SW0OW01.SW0OWPID = SW0OM001.SW0OWPID; /* Move po id to store*/
      SW0OW01.PC4ORTYP = SW0OM001.PC4ORTYP; /* Move po id to store*/
      SW0OW00.FY1FCTYC = SWVREC.FY1FCTYC; /* Store the created fact*/
      SW0OW00.PC3POIDT = SWVREC.PC3POIDT; /* Store the created po id*/

      SW0OW02.SW0OWGPO = "Y"; /* PO info qualifies*/

    else

      if (SWVREC.SWVWRTN == 12) /* Multiple PO's*/

        SLWREC.XXXLOCID = "S05"; /* Module ident*/
        converseLib.validationFailed(213); /* Invalid value*/
        set SW0OM001.SW0OWPID cursor, bold; /* Highlight*/
        set SW0OM001.PC4ORTYP bold; /* Highlight*/
        SW0OW01.SW0OWPID = 0; /* Reinitialize work field*/
        SW0OW01.PC4ORTYP = " "; /* Reinitialize work field*/
        SW0OW02.SW0OWGPP = "Y"; /* Set error flag*/

      else

        SLWREC.XXXLOCID = "S05"; /* Module ident*/
        converseLib.validationFailed(11); /* Invalid value*/
        set SW0OM001.SW0OWPID cursor, bold; /* Highlight*/
        set SW0OM001.PC4ORTYP bold; /* Highlight*/
        SW0OW01.SW0OWPID = 0; /* Reinitialize work field*/
        SW0OW01.PC4ORTYP = " "; /* Reinitialize work field*/
        SW0OW02.SW0OWGPP = "Y"; /* Set error flag*/

      end
    end
  end


end // end SW0OS05

// Edit po nbr
Function SW0OS06()
   /* ------------------------------------------------------------*/
   /* Edit the product order number*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNM = "SW0O"; /* Original calling module*/
  SWVREC.XGPCD = SW0OM001.XGPCD; /* Load gpc*/
  SWVREC.PC3PONBR = SW0OM001.PC3PONBR; /* Load po nbr*/

  SWVREC.SWVWFNC = "ID"; /* Call using gpc/po nbr*/

  XSSLS10();

  if (SWVREC.SWVWRTN == 0)

    SW0OM001.PC3PONBR = SWVREC.PC3PONBR; /* Right justify nbr*/
    SW0OW01.PC3PONBR = SW0OM001.PC3PONBR; /* Store po nbr*/
    SW0OW02.SW0OWGPO = "Y"; /* Set po nbr flag to yes*/

  else

    SLWREC.XXXLOCID = "S06"; /* Module ident*/
    converseLib.validationFailed(11); /* Invalid value*/
    set SW0OM001.PC3PONBR cursor, bold; /* Highlight*/
    SW0OW01.PC3PONBR = 0; /* Reinitialize work field*/
    SW0OW02.SW0OWGPP = "Y"; /* Set error flag*/

  end


end // end SW0OS06

// purge temporary storage m002
Function SW0OS21()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0OW21 empty; /* M002 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0OW22.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0OW21, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S21"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0OS21

// Update temporary storage page
Function SW0OS22()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0OW21, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S22"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0OS22

// Obtain temporary storage page
Function SW0OS23()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0OW21.XXXTSLEN = SW0OW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SW0OW22.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0OW21, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S23"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0OS23

// purge work record swjrec
Function SW0OS24()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SWJREC empty; /* M002 call db record*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SWJREC, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S24"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0OS24

// purge temporary storage m003
Function SW0OS31()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0OW31 empty; /* M003 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0OW32.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "SW1O"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0OW31, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S31"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0OS31

// Update temporary storage page
Function SW0OS32()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0OW31.XXXTSLEN = SW0OW00.XXXTSLEN; /* Move length*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SW0OW31, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S32"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0OS32

// Obtain temporary storage page
Function SW0OS33()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0OW31.XXXTSLEN = SW0OW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = "SW1O"; /* Application identification*/
  TA5REC.TA5TSQIX = SW0OW32.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0OW31, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S33"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0OS33

// Move data to map 3 work record
Function SW0OS70()
   /* ----------------------------------------------------------*/
   /* Move map 2 data to map 3 record*/
   /* ----------------------------------------------------------*/

  SW0OW31.XWHCD = SW0OW21.XWHCD; /* Warehouse code*/
  SW0OW31.XWHABRV = SW0OW21.XWHABRV; /* Warehouse name*/
  SW0OW31.TSHCNTNR = SW0OW21.TSHCNTNR[SW0OWIXM]; /* Container*/
  SW0OW31.PC3PONBR = SW0OW21.PC3PONBR[SW0OWIXM]; /* PO number*/
  SW0OW31.SW0OWPID = SW0OW21.SW0OWPID[SW0OWIXM]; /* PO id*/
  SW0OW31.PC4ORTYP = SW0OW21.PC4ORTYP[SW0OWIXM]; /* PO type*/
  SW0OW31.FY1FCTYC = SW0OW21.FY1FCTYC[SW0OWIXM]; /* Factory*/
  SW0OW31.SW0OWINM = SW0OW21.SW0OWINM[SW0OWIXM]; /* Insp month*/
  SW0OW31.SW0OWIND = SW0OW21.SW0OWIND[SW0OWIXM]; /* Insp day*/
  SW0OW31.SW0OWINY = SW0OW21.SW0OWINY[SW0OWIXM]; /* Insp year*/
  SW0OW31.SW0OWMIN = SW0OW21.SW0OWMIN[SW0OWIXM]; /* Minutes*/
  SW0OW31.SWGPRDCS = SW0OW21.SWGPRDCS[SW0OWIXM]; /* Total carton*/
  SW0OW31.SW0OWINC = SW0OW21.SW0OWINC[SW0OWIXM]; /* Insp carton*/
  SW0OW31.SW0OWUNT = SW0OW21.SW0OWUNT[SW0OWIXM]; /* Insp unit %*/
  SW0OW31.XGPCD = SW0OW21.XGPCD[SW0OWIXM]; /* GPC*/
  SW0OW31.SY1STNBR = SW0OW21.SY1STNBR[SW0OWIXM]; /* Style*/
  SW0OW31.SY2CLRID = SW0OW21.SY2CLRID[SW0OWIXM]; /* Color*/
  SW0OW31.XDMCD = SW0OW21.XDMCD[SW0OWIXM]; /* Dimension*/
  SW0OW31.XQACD = SW0OW21.XQACD[SW0OWIXM]; /* Quality*/
  SW0OW31.PC2INSEG = SW0OW21.PC2INSEG[SW0OWIXM]; /* Insp sequence*/
  SW0OW31.XEGCD = SW0OW21.XEGCD[SW0OWIXM]; /* Eng diff*/
  SW0OW31.XPGCD = SW0OW21.XPGCD[SW0OWIXM]; /* Package type*/
  SW0OW31.XUMCD = SW0OW21.XUMCD[SW0OWIXM]; /* Unit of measure*/
  SW0OW31.XOWCD = SW0OW21.XOWCD[SW0OWIXM]; /* Own-group*/
  SW0OW31.SWGPRDUN = SW0OW21.SWGPRDUN[SW0OWIXM]; /* Tot prod unit*/


end // end SW0OS70

// Assign common To applications
Function SW0OS90()
   /* ------------------------------------------------------------*/
   /* Set up the TO applications used by the three maps.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* Pf5 pressed*/
    COMMAREA.CATOAP = "SL0M"; /* TO application*/
                                  /* ; Stock Locate Menu*/
  end

  if (converseVar.eventKey is pf6) /* Pf6 pressed*/
    COMMAREA.CATOAP = "SW0C"; /* TO APPLICATION*/
                                 /* ; Receipts Planning*/
                                 /* ; Functions Menu*/
  end

  if (converseVar.eventKey is pf13) /* PF13 pressed*/
    COMMAREA.CATOAP = "SW0B"; /* TO application*/
                                 /* ; Receipts Planning*/
                                 /* ; Reports Menu*/
  end


end // end SW0OS90

//*** RECORD=SW0OW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0OW00 type basicRecord
  5 CAUSERA CAUSERA ; 
    10 XXXLOCID XXXLOCID ; 
    10 SLWMSGNO SLWMSGNO ; 
    10 * char(1694) ; 
  5 SW0OWPOI SW0OWPOI ; 
  5 SW0OWIXM SW0OWIXM ; 
  5 SW0OWIXV SW0OWIXV ; 
  5 SW0OWSWC SW0OWSWC ; 
  5 SW0OWSWD SW0OWSWD ; 
  5 SW0OWSWF SW0OWSWF ; 
  5 SW0OWSWR SW0OWSWR ; 
  5 SW0OWSWU SW0OWSWU ; 
  5 SW0OWTA5 SW0OWTA5 ; 
  5 XXXTSLEN XXXTSLEN ; 
  5 SW0OWSUM SW0OWSUM ; 
  5 XWHABRV XWHABRV ; 
  5 FY1FCTYC FY1FCTYC ; 
  5 PC3POIDT PC3POIDT ; 
end // end SW0OW00

//*** RECORD=SW0OW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record SW0OW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XGPCD XGPCD ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 PC3PONBR PC3PONBR ; 
  10 SW0OWPID SW0OWPID ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 SW0OWGP2 SW0OWGP2 ; 
  10 SW0OWSDT SW0OWSDT ; 
    15 SW0OWSCC SW0OWSCC ; 
    15 SW0OWSYD SW0OWSYD ; 
      20 SW0OWSYY SW0OWSYY ; 
      20 SW0OWSMM SW0OWSMM ; 
      20 SW0OWSDD SW0OWSDD ; 
  10 SW0OWEDT SW0OWEDT ; 
    15 SW0OWECC SW0OWECC ; 
    15 SW0OWEYD SW0OWEYD ; 
      20 SW0OWEYY SW0OWEYY ; 
      20 SW0OWEMM SW0OWEMM ; 
      20 SW0OWEDD SW0OWEDD ; 
end // end SW0OW01

Record SW0OW02 type basicRecord
  10 SW0OWEFL SW0OWEFL ; 
    15 SW0OWCAL SW0OWCAL ; 
    15 SW0OWGTF SW0OWGTF ; 
    15 SW0OWDAF SW0OWDAF ; 
    15 SW0OWDIT SW0OWDIT ; 
    15 SW0OWGPP SW0OWGPP ; 
    15 SW0OWDTO SW0OWDTO ; 
    15 SW0OWCTF SW0OWCTF ; 
  10 SW0OWGPO SW0OWGPO ; 
  10 SW0OWWDT SW0OWWDT ; 
    15 SW0OWWCC SW0OWWCC ; 
    15 SW0OWYMD SW0OWYMD ; 
      20 SW0OWWYY SW0OWWYY ; 
      20 SW0OWWMM SW0OWWMM ; 
      20 SW0OWWDD SW0OWWDD ; 
end // end SW0OW02

Record SW0OW03 type basicRecord
  10 SW0OWACT SW0OWACT ; 
  10 SW0OWSSN SW0OWSSN ; 
  10 SW0OWLWD SW0OWLWD ; 
  10 SW0OWHGD SW0OWHGD ; 
end // end SW0OW03

Record SW0OW21 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1372) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 SW0OMSEL SW0OMSEL [14] ; 
    10 TSHCNTNR TSHCNTNR [14] ; 
    10 PC3PONBR PC3PONBR [14] ; 
    10 SW0OWPID SW0OWPID [14] ; 
    10 PC4ORTYP PC4ORTYP [14] ; 
    10 XGPCD XGPCD [14] ; 
    10 SY1STNBR SY1STNBR [14] ; 
    10 SY2CLRID SY2CLRID [14] ; 
    10 FY1FCTYC FY1FCTYC [14] ; 
    10 PC4ORTYP2 PC4ORTYP2 [14] ; 
    10 SW0OWIDT SW0OWIDT [14] ; 
      15 * num(3) ; 
      15 SW0OWINY SW0OWINY ; 
      15 SW0OWINM SW0OWINM ; 
      15 SW0OWIND SW0OWIND ; 
    10 SW0OWMIN SW0OWMIN [14] ; 
    10 SWGPRDCS SWGPRDCS [14] ; 
    10 SW0OWINC SW0OWINC [14] ; 
    10 SW0OWUNT SW0OWUNT [14] ; 
    10 XDMCD XDMCD [14] ; 
    10 XQACD XQACD [14] ; 
    10 PC2INSEG PC2INSEG [14] ; 
    10 XEGCD XEGCD [14] ; 
    10 XPGCD XPGCD [14] ; 
    10 XUMCD XUMCD [14] ; 
    10 XOWCD XOWCD [14] ; 
    10 XSLCD XSLCD [14] ; 
    10 SWGPSEQN SWGPSEQN [14] ; 
    10 SWGPRDUN SWGPRDUN [14] ; 
end // end SW0OW21

//*** RECORD=SW0OW22 ****
// ----------------------------
// Appl working storage - map2.
// ----------------------------
// ***********************
Record SW0OW22 type basicRecord
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end SW0OW22

//*** RECORD=SW0OW25 ****
// ************************************************************
// 
//           TA0050  PARAMTER #2:
//           ===================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used each time
//           TA0050 is called in order to pass the:
//             TA5APPID = application ID
//             TA5TSQIX = tsq record no./index
//             TA5FNCCD = function code
//             TA5RTNCD = return code
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 06-05-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SW0OW25 type basicRecord
  5 SW0OWH25 SW0OWH25 ; 
    10 SW0OWP25 SW0OWP25 ; 
    10 SW0OWQ25 SW0OWQ25 ; 
    10 SW0OWF25 SW0OWF25 ; 
    10 SW0OWT25 SW0OWT25 ; 
end // end SW0OW25

Record SW0OW31 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(467) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 PC3PONBR PC3PONBR ; 
    10 SW0OWPID SW0OWPID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SWAINSTP SWAINSTP ; 
    10 SW0OWINM SW0OWINM ; 
    10 SW0OWIND SW0OWIND ; 
    10 SW0OWINY SW0OWINY ; 
    10 SW0OWMIN SW0OWMIN ; 
    10 SWGPRDCS SWGPRDCS ; 
    10 SWGPRDUN SWGPRDUN ; 
    10 SW0OWINC SW0OWINC ; 
    10 SW0OWUNT SW0OWUNT ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 XSLCD XSLCD ; 
    10 SWGPSEQN SWGPSEQN ; 
    10 SWYTACD SWYTACD [20] ; 
    10 SWKINQTY SWKINQTY [20] ; 
    10 SW0OWPUI SW0OWPUI [20] ; 
    10 SWIERQTY SWIERQTY [20] ; 
    10 SW0OWPEU SW0OWPEU [20] ; 
    10 SWZTECD SWZTECD [20] ; 
end // end SW0OW31

//*** RECORD=SW0OW32 ****
// ----------------------------
// Appl working storage - map2.
// ----------------------------
// ***********************
Record SW0OW32 type basicRecord
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end SW0OW32

//*** RECORD=SWKREC ****
// **************  INSPECTION HISTORY TASK  *******************
// 
// DB2 TABLE:           dstloc.vihtsk01
// 
// COPYLIB MEMBER:      dcl00877
// 
// KEY TO DB2 TABLE:    xwhcd
//                      swgpseqn
//                      swainstp
//                      xtacd
// 
// DATE CREATED:        OCTOBER 3, 1990
// 
// MAINTENANCE LOG:
// 
// DATE     INIT    COMMENTS
// -------- ------  -------------------------------------------
// 10-03-90 esmith  Created new CSP record.
// 02-08-91 ryonke  added new fields for table changes.
// ************************************************************
// **********************
Record SWKREC type basicRecord
  5 SWKGROUP SWKGROUP ; 
    10 XWHCD XWHCD ; 
    10 SWGPSEQN SWGPSEQN ; 
    10 SWAINSTP SWAINSTP ; 
    10 XGPCD XGPCD ; 
    10 SWYTACD SWYTACD ; 
    10 SWZTECD SWZTECD ; 
    10 SWKINQTY SWKINQTY ; 
    10 SWIERQTY SWIERQTY ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end SWKREC

// PC_PO_OT_CD
DataItem PC4ORTYP2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select field
DataItem SW0OMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Database action
DataItem SW0OWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SW0V call type
DataItem SW0OWCAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Container set flag
DataItem SW0OWCTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date accepted flag
DataItem SW0OWDAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Do id/type flag
DataItem SW0OWDIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date +1 set flag
DataItem SW0OWDTO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     work end century
DataItem SW0OWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     work end day
DataItem SW0OWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work end dt-ccyymmdd
DataItem SW0OWEDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Edit flag switches
DataItem SW0OWEFL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     work end month
DataItem SW0OWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work end - yymmdd
DataItem SW0OWEYD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     work end year
DataItem SW0OWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function code
DataItem SW0OWF25 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// GPC #2
DataItem SW0OWGP2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC/PO nbr set flag
DataItem SW0OWGPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC/PO nbr error flag
DataItem SW0OWGPP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Init date > flag
DataItem SW0OWGTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// entire ta0050 parm #2
DataItem SW0OWH25 char(10)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// High date
DataItem SW0OWHGD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL_INSP_DT
DataItem SW0OWIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inspected cartons
DataItem SW0OWINC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inspection day
DataItem SW0OWIND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// inspection month
DataItem SW0OWINM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// inspection year
DataItem SW0OWINY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SW0OWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save value for map 002
DataItem SW0OWIXV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Low date
DataItem SW0OWLWD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minutes
DataItem SW0OWMIN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// application ID
DataItem SW0OWP25 char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// % error units
DataItem SW0OWPEU num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO id
DataItem SW0OWPID char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO id - numeric
DataItem SW0OWPOI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// % units inspected
DataItem SW0OWPUI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ rel rec no./index
DataItem SW0OWQ25 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//     work start century
DataItem SW0OWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     work start day
DataItem SW0OWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work start dt-ccyymmdd
DataItem SW0OWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     work start month
DataItem SW0OWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Selection set number
DataItem SW0OWSSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary summation
DataItem SW0OWSUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0OWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SW0OWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0OWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0OWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SW0OWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   work start - yymmdd
DataItem SW0OWSYD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     work start year
DataItem SW0OWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return code
DataItem SW0OWT25 num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Store m002 max pages
DataItem SW0OWTA5 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// % insp units
DataItem SW0OWUNT num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem SW0OWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     work day
DataItem SW0OWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date- ccyymmdd
DataItem SW0OWWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     work month
DataItem SW0OWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     work year
DataItem SW0OWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work year/mo/day
DataItem SW0OWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SWKGROUP char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_TASK_INSP_QTY
DataItem SWKINQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

