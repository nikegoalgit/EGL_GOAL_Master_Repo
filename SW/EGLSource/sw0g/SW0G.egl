package sw0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0G ****
// This application allows user to inquire upon the corporate
// task table.  The user will specify selection criteria to
// view certain tasks.  G.P.C. and Warehouse Code are required
// selection criteria, while Task Code and Task Status are
// optional parameters for the user.
// 
// A maximum of 13 rows will be displayed simultaneously;
// however, the user will be given scrolling capabilities via
// the standard PF keys.  Each row will contain the following
// information: Task Code, Task Description, Task Error Code,
// Number of Minutes per 100 Units, and Task Status.
// 
// This program is inquiry only!  There are no ADD, CHANGE,
// or DELETE functions within this program.  The program will
// require that the user have inquiry authority.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PK#159   12/17/90  CENGEL  New application.
// FIX      01/16/91  CENGEL  Modified SW0G500 to allow users
//                            to inquire by all Task Types and
//                            all Task Categories.
//          02/13/91  ryonke  Program changes for table changes
// MAINT    01/30/92  GRAY   INITIALIZE ALL RECORDS AND MAPS.
// *********************
Program SW0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0GW00 SW0GW00; // record
  SW0GW01 SW0GW01; // record
  SW0GW02 SW0GW02; // record
  SWYREC SWYREC; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XTCTBL; // table
  use XTYTBL; // table
  use XGPTBL; // table
  use XPCTBL; // table
  use SW0GM // VAGen Info - unused formGroup    
  {
      pfKeyEquate = no
  };
  

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0GM001 initial; /* M001 input/output*/
    set XX0XM001 initial;
    set SW0GW00 empty; /* Working storage*/
    set SW0GW01 empty; /* M001 display storage*/
    set SW0GW02 empty; /* M001 display storage*/
    set SQLCA empty; /* Working storage*/
    set SY1REC empty; /* Error diagnosis information*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XPCREC empty; /* Temporary storage parameters*/
    set SWYREC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Pop-up Window work area*/

    SW0GW00.SW0GWSWF = "Y"; /* Format the map switch*/
    SW0GW00.SW0GWSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/
      COMMAREA.CAITEM = " "; /* Clear passed data*/
      SW0GW00.SW0GWSWR = "Y"; /* Request for data switch*/
    end /* End-If*/

    SW0GW01.XGPCD = COMMAREA.XGPCD; /* GPC code*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0G001;
                                     /* Branch to Main Process to display map*/


    SW0G001: SW0G001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0G001; /* Converse the main process*/


  end // end main
end // end SW0G

// Main process to display a map
Function SW0G001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Perform SW0G100   Obtain The Data To Display*/
   /* 2) Perform SW0G200   Format And Converse The Map*/
   /* 3) Perform SW0G300   Check The Attention Identifier*/
   /* 4) Perform SW0G400   Reset Highlighted Fields*/
   /* 5) Perform SW0G500   Verify The Data That Was Entered*/
   /* 6) Perform SW0G600   Process Valid Input Request*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0G100(); /* obtain the data to display*/
  SW0G200(); /* format and converse the map*/
  SW0G300(); /* check the attention identifier*/
  SW0G400(); /* reset highlighted fields*/
  SW0G500(); /* verify the data that was entered*/
  SW0G600(); /* process valid input request*/


end // end SW0G001
// Obtain the Data to Display
Function SW0G100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0GW00.SW0GWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SW0GW00.XXXTSLEN = 948; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SW0GW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* Temporary storage is used in this application as a holding*/
   /* area for screen display data, facilitating the scrolling*/
   /* feature of the SW0GM001 map.*/
   /* ------------------------------------------------------------*/

  SW0G110(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* save the key fields.*/
   /* ------------------------------------------------------------*/
  SW0GW01.XGPCD = SW0GM001.XGPCD; /* GPC*/
  SW0GW01.SW0GMCAT = SW0GM001.SW0GMCAT; /* Task Category*/
  SW0GW01.SW0GMTYP = SW0GM001.SW0GMTYP; /* Task Type*/
  SW0GW01.SW0GMTCD = SW0GM001.SW0GMTCD; /* Task Code*/
  SW0GW01.SW0GMTST = SW0GM001.SW0GMTST; /* Task Status*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  SW0G120(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SW0GW00.SW0GWIXM = 1; /* Display line index*/
  SW0GW00.SW0GWSWC = "N"; /* End of cursor switch*/

  while (SW0GW00.SW0GWSWC == "N") /* Until end of cursor*/

    SW0G130(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SW0GW00.SW0GWSWC == "N") /* Not end of cursor*/
      SW0G140(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SW0GW00.SW0GWIXM > 13) /* Page is full*/

      SW0G150(); /* Add page to temporary storage*/

      SW0GW00.SW0GWIXM = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SW0GW00.SW0GWIXM > 1) /* Page was formatted*/
    SW0G150(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  SW0G160(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0GW00.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "100"; /* Module identification*/
    SLWREC.SLWMSGNO = 115; /* "record(s) not found" error*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0GW00.SW0GWSWR = "N"; /* Request for data switch*/


end // end SW0G100

// Purge any Temporary Storage
Function SW0G110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SW0GW01 empty; /* M001 display storage*/

  SW0GW00.SW0GWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SW0GW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SW0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/
  converseLib.validationFailed(1); /* "ERROR - PLEASE NOTIFY PROGRAMMING" message*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0G110

// Select Set and Open Cursor
Function SW0G120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SWYREC empty; /* clear linkage record for DC0070*/

  SWYREC.XGPCD = SW0GW01.XGPCD; /* GPC*/
  SWYREC.XTYCD = SW0GW01.SW0GMTYP; /* Task Type*/
  SWYREC.XTCCD = SW0GW01.SW0GMCAT; /* Task Category*/
  SWYREC.SWYTACD = SW0GW01.SW0GMTCD; /* Task Code*/
  SWYREC.XXXSTAT = SW0GW01.SW0GMTST; /* Task Status*/

  try
    call "IO5550" ("S1", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0GW01.XGPCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0G120

// Fetch Next Row In The Cursor
Function SW0G130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5550" ("N1", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SW0GW00.SW0GWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKS01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW0GW01.XGPCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0G130

// Save Data in Display Storage
Function SW0G140()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

   /* update: condition commented out for testing*/

  if (SW0GW00.TA5TSQIX > 0 /* Not the first page*/
   && SW0GW00.SW0GWIXM == 1) /* and first line on page*/

    SW0GW01.XGPCD = SWYREC.XGPCD; /* GPC*/
    SW0GW01.SW0GMTCD = SWYREC.SWYTACD; /* Task Code*/
    SW0GW01.SW0GMTYP = SWYREC.XTYCD; /* Task Type*/
    SW0GW01.SW0GMCAT = SWYREC.XTCCD; /* Task Category*/
    SW0GW01.SW0GMTST = SWYREC.XXXSTAT; /* Task Status*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SW0GW01.SWYTACD[SW0GWIXM] = SWYREC.SWYTACD;
  SW0GW01.XTYCD[SW0GWIXM] = SWYREC.XTYCD;
  SW0GW01.XTCCD[SW0GWIXM] = SWYREC.XTCCD;
  SW0GW01.SWYTADSC[SW0GWIXM] = SWYREC.SWYTADSC;
  SW0GW01.SWZTECD[SW0GWIXM] = SWYREC.SWZTECD;
  SW0GW01.SWYTAMM[SW0GWIXM] = SWYREC.SWYTAMM;
  SW0GW01.XXXSTAT[SW0GWIXM] = SWYREC.XXXSTAT;

  SW0GW00.SW0GWIXM = SW0GW00.SW0GWIXM + 1; /* Increment line index*/


end // end SW0G140

// Add Page to Temporary Storage
Function SW0G150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SW0GW01.XXXTSLEN = SW0GW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SW0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SW0GW01 empty; /* M001 display storage*/

    SW0GW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "150"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0G150

// Close Selected Set Cursor
Function SW0G160()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5550" ("C1", SQLCA, SWYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "160"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTASKS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0G160


// Format and Converse The Map
Function SW0G200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0GW00.SW0GWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0GW00.SW0GWSWF == "Y") /* Map must be formatted*/
      SW0G210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0GM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0GM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0GM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SW0GM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0GM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0GM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0GM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0GM001.CAITEM; /* Application data*/


end // end SW0G200
// Format the Display Data
Function SW0G210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SW0GM001 initial; /* M001 input/output area*/

  SW0GW00.SW0GWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SW0GW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SW0GW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SW0GW00.XXXTSPAG > SW0GW00.TA5TSQIX) /* Desired greater highest*/
        SW0GW00.XXXTSPAG = SW0GW00.TA5TSQIX; /* Default to highest*/
      end

      SW0GS01(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SW0GM001.XXXLITPG skip; /* "PAGE" literal*/
    SW0GM001.XXXTSPAG = SW0GW00.XXXTSPAG; /* Current page*/
    set SW0GM001.XXXLITOF skip; /* "OF" literal*/
    SW0GM001.TA5TSQIX = SW0GW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SW0GM001.XGPCD = SW0GW01.XGPCD; /* GPC code*/
  COMMAREA.XGPCD = SW0GW01.XGPCD; /* save value*/
  SW0GM001.SW0GMTYP = SW0GW01.SW0GMTYP;
  SW0GM001.SW0GMCAT = SW0GW01.SW0GMCAT;
  SW0GM001.SW0GMTCD = SW0GW01.SW0GMTCD;
  SW0GM001.SW0GMTST = SW0GW01.SW0GMTST;

  SW0GW00.SW0GWIXM = 1; /* Initialize line index*/

  while (SW0GW00.SW0GWIXM <= 13 /* Until screen is full*/
   && SW0GW01.XTYCD[SW0GWIXM] > " ") /* or end of data*/

    SW0GM001.SWYTACD[SW0GWIXM] = SW0GW01.SWYTACD[SW0GWIXM];
    SW0GM001.XTYCD[SW0GWIXM] = SW0GW01.XTYCD[SW0GWIXM];
    SW0GM001.XTCCD[SW0GWIXM] = SW0GW01.XTCCD[SW0GWIXM];
    SW0GM001.SWYTADSC[SW0GWIXM] = SW0GW01.SWYTADSC[SW0GWIXM];
    SW0GM001.SWZTECD[SW0GWIXM] = SW0GW01.SWZTECD[SW0GWIXM];
    SW0GM001.SWYTAMM[SW0GWIXM] = SW0GW01.SWYTAMM[SW0GWIXM];
    SW0GM001.XXXSTAT[SW0GWIXM] = SW0GW01.XXXSTAT[SW0GWIXM];

    SW0GW00.SW0GWIXM = SW0GW00.SW0GWIXM + 1; /* Increment line index*/

  end


end // end SW0G210

// Check Attention Identifier
Function SW0G300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0GW00.SW0GWSWR == "Y") /* Request for data*/
      set SW0GW01 empty; /* M001 display storage*/
    end

    SW0GW00.SW0GWSWF = "Y"; /* Format the map switch*/
    SW0GW00.SW0GWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SW0GM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SW0G110(); /* Purge temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SW0GM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF4 was pressed*/
   || converseVar.eventKey is pf6 /* or PF4 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0GM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0A"; /* TO RC-INS-MN*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0C"; /* TO Master Menu*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO Stock Locate Menu*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO Planning Fuction Menu*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "SW0P"; /* TO Inspection Setup*/
    end

    SW0G110(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SW0G300

// Reset Highlighted Fields
Function SW0G400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0GM001.XGPCD initialAttributes; /* GPC code*/
  set SW0GM001.SW0GMTYP initialAttributes; /* Task Type*/
  set SW0GM001.SW0GMCAT initialAttributes; /* Task Category*/
  set SW0GM001.SW0GMTCD initialAttributes; /* Task Code*/
  set SW0GM001.SW0GMTST initialAttributes; /* Task Status*/
  set SW0GM001.CATOAP initialAttributes; /* TO application*/
  set SW0GM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists (pop-up windows) were requested, return to the*/
     /* previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0GM001.XGPCD == "?"    /* GPC list requested*/
   || SW0GM001.SW0GMCAT == "?" /* Task Category list requested*/
   || SW0GM001.SW0GMTYP == "?") /* Task Type list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* module identification*/
      converseLib.validationFailed(264); /* only ENTER is valid at this time*/

      exit stack; /* exit to display map*/

    end

  else

    return; /* return to previous process because*/
                                   /* no lists were requested*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Task Category codes*/
   /* ------------------------------------------------------------*/
  if (SW0GM001.SW0GMCAT == "?") /* Task Category list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TASK CATEGORY"; /* window heading*/

    while (XX0XW02.XX0XWEND == "N") /* until end of request*/
      XPXTC01(); /* display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      SW0GM001.SW0GMCAT = SW0GW01.SW0GMCAT; /* restore prior code*/
    else
      SW0GM001.SW0GMCAT = XTCTBL.XTCCD[XX0XWPIX]; /* selected code*/
    end

    set SW0GM001.SW0GMCAT cursor; /* establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Task Type codes*/
   /* ------------------------------------------------------------*/
  if (SW0GM001.SW0GMTYP == "?") /* Task Type list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TASK TYPE"; /* window heading*/

    while (XX0XW02.XX0XWEND == "N") /* until end of request*/
      XPXTY01(); /* display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      SW0GM001.SW0GMTYP = SW0GW01.SW0GMTYP; /* restore prior code*/
    else
      SW0GM001.SW0GMTYP = XTYTBL.XTYCD[XX0XWPIX]; /* selected code*/
    end

    set SW0GM001.SW0GMTYP cursor; /* establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of GPC codes.*/
   /* ------------------------------------------------------------*/
  if (SW0GM001.XGPCD == "?") /* GPC list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  GPC"; /* window heading*/

    while (XX0XW02.XX0XWEND == "N") /* until end of request*/
      XPXGP01(); /* display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      SW0GM001.XGPCD = SW0GW01.XGPCD; /* restore prior code*/
    else
      SW0GM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* selected code*/
    end

    set SW0GM001.XGPCD cursor; /* establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* The requested lists have displayed and now ENTER must be*/
   /* pressed to process.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* module identification*/
  converseLib.validationFailed(294); /* press ENTER to process*/

  exit stack; /* exit to display map*/


end // end SW0G400

// Verify Data That Was Entered
Function SW0G500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SW0GM001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0GM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* Scroll forward request*/

    SW0G510(); /* Verify Scroll Request*/

  end

   /* ------------------------------------------------------------*/
   /* edit Task Status field.*/
   /* ------------------------------------------------------------*/
  if (SW0GM001.SW0GMTST == " ") /* if blank*/
    SW0GM001.SW0GMTST = "*"; /* replace with wildcard*/
  else
    SW0GW01.SW0GMTST = SW0GM001.SW0GMTST;
  end

   /* ------------------------------------------------------------*/
   /* edit Task Code field.*/
   /* ------------------------------------------------------------*/
  if (SW0GM001.SW0GMTCD == 0) /* if blank*/
    SW0GM001.SW0GMTCD = -1; /* replace with wildcard*/
  else
    SW0GW01.SW0GMTCD = SW0GM001.SW0GMTCD;
  end

   /* ------------------------------------------------------------*/
   /* edit Task Category feld.*/
   /* ------------------------------------------------------------*/
  if (SW0GM001.SW0GMCAT == " ") /* if blank*/
    SW0GM001.SW0GMCAT = "*"; /* replace with wildcard value*/
  else
    if (SW0GM001.SW0GMCAT != "*") /* if non-wildcard value supplied*/
      if (SW0GM001.SW0GMCAT in XTCTBL.XTCCD) /* if value found in xtctbl*/
         /* next sentence*/
      else
        SLWREC.XXXLOCID = "500"; /* identify module*/
        converseLib.validationFailed(11); /* invalid value error*/
        set SW0GM001.SW0GMCAT cursor, bold; /* highlight & position csr*/
      end
    else
       /* next sentence*/
    end
  end

   /* ------------------------------------------------------------*/
   /* edit Task Type field.*/
   /* ------------------------------------------------------------*/
  if (SW0GM001.SW0GMTYP == " ") /* if blank*/
    SW0GM001.SW0GMTYP = "*"; /* replace with wildcard value*/
  else
    if (SW0GM001.SW0GMTYP != "*") /* if non-wildcard value entered*/
      if (SW0GM001.SW0GMTYP in XTYTBL.XTYCD) /* if value found in xtytbl*/
         /* next sentence*/
      else
        SLWREC.XXXLOCID = "500"; /* identify module*/
        converseLib.validationFailed(11); /* invalid value error*/
        set SW0GM001.SW0GMTYP cursor, bold; /* highlight & position csr*/
      end
    else
       /* next sentence*/
    end
  end

   /* ------------------------------------------------------------*/
   /* edit GPC field.*/
   /* ------------------------------------------------------------*/
  if (SW0GM001.XGPCD == " ") /* if blank*/
    SLWREC.XXXLOCID = "500"; /* identify module*/
    converseLib.validationFailed(9); /* enter req'd field*/
    set SW0GM001.XGPCD cursor, bold; /* highlight & position csr*/
  else
    if (SW0GM001.XGPCD in XGPTBL.XGPCD) /* if value found in xgptbl*/
       /* next sentence*/
    else
      SLWREC.XXXLOCID = "500"; /* identify module*/
      converseLib.validationFailed(11); /* invalid value error*/
      set SW0GM001.XGPCD cursor, bold; /* highlight & position csr*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SW0G500

// Verify Scroll Request
Function SW0G510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SW0GW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SW0GW00.XXXTSPAG >= SW0GW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end


end // end SW0G510

// Process Valid Input Request
Function SW0G600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SW0GW00.SW0GWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XGPCD = SW0GM001.XGPCD; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (SW0GM001.XGPCD != SW0GW01.XGPCD       /* GPC changed*/
   || SW0GM001.SW0GMTYP != SW0GW01.SW0GMTYP /* Task Type changed*/
   || SW0GM001.SW0GMCAT != SW0GW01.SW0GMCAT /* Task Category changed*/
   || SW0GM001.SW0GMTCD != SW0GW01.SW0GMTCD /* Task Code changed*/
   || SW0GM001.SW0GMTST != SW0GW01.SW0GMTST) /* Task Status changed*/

    SW0GW00.SW0GWSWR = "Y"; /* Request for data switch*/

    SW0G110(); /* Purge any temporary storage*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SW0GW00.XXXTSPAG = SW0GW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SW0GW00.XXXTSPAG = SW0GW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end


end // end SW0G600

// Read Temporary Storage Page
Function SW0GS01()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SW0GW01.XXXTSLEN = SW0GW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SW0GW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SW0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0GS01

//*** RECORD=SW0GW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SW0GW00 type basicRecord
  10 SW0GWIXM SW0GWIXM ; 
  10 SW0GWSWC SW0GWSWC ; 
  10 SW0GWSWD SW0GWSWD ; 
  10 SW0GWSWF SW0GWSWF ; 
  10 SW0GWSWR SW0GWSWR ; 
  10 SW0GWSWU SW0GWSWU ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end SW0GW00

//*** RECORD=SW0GW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SW0GW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(948) ; 
    10 XGPCD XGPCD ; 
    10 SW0GMTCD SW0GMTCD ; 
    10 SW0GMTST SW0GMTST ; 
    10 SW0GMTYP SW0GMTYP ; 
    10 SW0GMCAT SW0GMCAT ; 
    10 SWYTACD SWYTACD [13] ; 
    10 XTYCD XTYCD [13] ; 
    10 XTCCD XTCCD [13] ; 
    10 SWYTADSC SWYTADSC [13] ; 
    10 SWZTECD SWZTECD [13] ; 
    10 SWYTAMM SWYTAMM [13] ; 
    10 XXXSTAT XXXSTAT [13] ; 
end // end SW0GW01

//*** RECORD=SW0GW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record SW0GW02 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY2CLRDS SY2CLRDS ; 
  10 XPCCD XPCCD ; 
  10 XPCSDESC XPCSDESC ; 
end // end SW0GW02

// Task Category
DataItem SW0GMCAT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// Task Code
DataItem SW0GMTCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Task Status
DataItem SW0GMTST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Task Type
DataItem SW0GMTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SW0GWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SW0GWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SW0GWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0GWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0GWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SW0GWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

