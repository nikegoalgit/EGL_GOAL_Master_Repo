package sw0i;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SW0I ****
//   This application allows users to set maximum cartons per
// lane type on the Plan Header table.  The user must specify
// the whse code and plan # either through passed parameters
// from another program (SLWREC) or through data entry within
// the SWOI application.  The user then has the opportunity
// to change existing lane assignment, then the existing row
// is updated; otherwise, the plan header row is checked for
// existing information.  If lane assignment data exists,
// it is displayed as a default value available for user
// modification. If the data does not exist, the user is
// required to enter new data or cancel.
// 
//   No new rows are added to the Plan Header table. Existing
// rows are updated ONLY. No deletions.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/07/90  SBEAUC  New application.
// FIX      01/04/91  MSMIT3  Make Pallet, Case, WPF fields req
// FIX      01/04/91  MSMIT3  Retrieve Whse Desc From XWHTBL
// FIX      01/04/91  MSMIT3  Retrieve Plan # From SLWREC
// FIX      01/04/91  MSMIT3  Default WPF Max Crtns to 9999
// MAINT    01/30/92  GRAY    INITIALIZE ALL RECORDS AND MAPS
// WV RCV   02/01/93  TGLENN  Add new fields SL_LOC_SZ_IND and
//                            SL_HANDSTK_CS_QTY for Wilsonville
//                            Receiving. Also move Plan Calc
//                            routine from SW0J to this
//                            application.
// asw001   03/11/96  RIBANE  Added a remote printer dest in
//                            SL4041 jcl in SW0iT01
// RRREC    11/12/96  DGERLT  Added the pallets per aisle for
//                            round robin receiving bulk.
// *********************
Program SW0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW0IW00 SW0IW00; // record
  SW0IW01 SW0IW01; // record
  SWEREC SWEREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XRPTBL; // table
  use XLNTBL; // table
  use SW0IT01 {deleteAfterUse = yes}; // table
  use SW0IM.SW0IM001,  // forms
      SW0IM.TA0PM001, 
      SW0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SW0IM001 initial; /* M001 input/output*/
    set XX0XM001 initial;
    set SWEREC empty; /* Working storage*/
    set SW0IW00 empty; /* Working storage*/
    set SW0IW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Date/time subroutine parameters*/

    SW0IW00.SW0IWSWF = "Y"; /* Format the map switch*/
    SW0IW00.SW0IWSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    SW0IM001.XWHCD = SLWREC.XWHCD; /* display passed warehouse*/
    SW0IM001.SWEPLLNB = SLWREC.SWEPLLNB; /* display passed Plan #*/

    if (SLWREC.XWHCD != "  ") /* is there a warehouse passed?*/

      if (SW0IM001.XWHCD in XWHTBL.XWHCD /* if warehouse valid*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/

        SW0IW00.SW0IWSWR = "Y"; /* there is a data request*/
        SW0IM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* disp whse abrv*/

      else

        SW0IW00.SW0IWSWE = "Y"; /* invalid whse code*/
        converseLib.validationFailed(11); /* invalid msg*/

      end

    else

      SW0IW00.SW0IWSWE = "Y"; /* missing whse code*/
      converseLib.validationFailed(09); /* field required msg*/

    end

    if (SLWREC.XWHCD == "07") /* fields not for apparel*/
      SW0IM001.SL-LOC-SZ-IND = "N"; /* pallet id default*/
      SW0IM001.SL-HANDSTK-CS-QTY = 07; /* handstack cases default*/
      set SW0IM001.SWEMPLCS skip;
      set SW0IM001.SWEMCLCS skip;
      set SW0IM001.SWEMWLCS skip;
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0I002; /* Get pallets per aisle for whse 51*/
    goto SW0I001; /* Converse the main process*/


    SW0I002: SW0I002();
    SW0I001: SW0I001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SW0I001; /* Converse the main process*/


  end // end main
end // end SW0I

// Inquire/maintain a table row
Function SW0I001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SW0I100(); /* Obtain the data to display*/

  SW0I200(); /* Format and display the map*/

  if (converseVar.eventKey is pf6
   && SLWREC.XWHCD == "51")
    set SW0IM001.SW0IM-SL-PAL-PER-AISLE cursor, initialAttributes;
                                   /* Pallets per aisle*/
    set SW0IM001.SW0IM-PF6-SHOW invisible;
    if (SW0IW00.SW0IWSWF == "Y")
      SW0IW00.SW0IWSWF = "N";
      SW0I200();
      SW0IW00.SW0IWSWF = "Y";
    else
      SW0I200();
    end
    set SW0IM001.SW0IM-PF6-SHOW initialAttributes;
    set SW0IM001.SW0IM-SL-PAL-PER-AISLE protect, noHighLight;
    SW0I230();
  end

  SW0I300(); /* Check attention identifier*/

  SW0I400(); /* Reset fields to normal intensity*/

  SW0I500(); /* Verify the entered data*/

  SW0I600(); /* Process valid input request*/


end // end SW0I001

Function SW0I002()
  /* If whse 51 get pallets per aisle*/
  if (SLWREC.XWHCD == "51")
    set X3CREC empty;
    set X2CREC empty;
    SW0IS02();
    XSX2CDT();
    XSX3CTM();
  end
  SW0IW01.SW0IW-SL-PAL-PER-AISLE = XZZREC.XZZINT1;
  SW0IM001.SW0IM-SL-PAL-PER-AISLE = SW0IW01.SW0IW-SL-PAL-PER-AISLE;
  set SW0IM001.SW0IM-SL-PAL-PER-AISLE protect, noHighLight;
  if (SLWREC.XWHCD != "51") /* fields not for apparel*/
    set SW0IM001.SW0IM-SL-PAL-DESC invisible, protect;
    set SW0IM001.SW0IM-SL-PAL-PER-AISLE invisible, protect;
    set SW0IM001.SW0IM-PF6-SHOW invisible, protect;
  end

end // end SW0I002

// Obtain the data to display
Function SW0I100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0IW00.SW0IWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  set SW0IW01 empty; /* M001 display storage*/
  SW0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* date to map*/

  SW0IW00.SW0IWSWS = "N"; /* reset select switch*/
  SW0IW01.SW0IW-SL-PAL-PER-AISLE = SW0IM001.SW0IM-SL-PAL-PER-AISLE;
  if (SLWREC.SLWMSGNO == 20) /* if completed update*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Retrieve warehouse name from Warehouse Table*/
   /* ------------------------------------------------------------*/

  SW0IW01.XWHCD = SW0IM001.XWHCD; /* save warehouse code*/

  if (SW0IW01.XWHCD == "  ") /* no whse entered*/

    converseLib.validationFailed(09); /* invalid value entered*/
    SW0IW01.XWHABRV = " "; /* blank warehouse abrev*/
    return;

  end

  if (SW0IM001.XWHCD in XWHTBL.XWHCD /* if warehouse on table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/

    SW0IW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* save abrv*/
    SW0IM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* display abrv*/

  else

    converseLib.validationFailed(11); /* invalid value entered*/
    SW0IW01.XWHABRV = " "; /* blank warehouse abrev*/
    return;

  end


  SW0IW01.SWEPLLNB = SW0IM001.SWEPLLNB; /* plan number*/

  if (SW0IW01.SWEPLLNB < 1) /* if no plan was entered*/

    converseLib.validationFailed(09); /* please enter required field*/
    return; /* we are done*/

  end

   /* ------------------------------------------------------------*/
   /* Obtain the table row to be displayed.*/
   /* ------------------------------------------------------------*/

  SW0IS01(); /* Obtain the table row*/


end // end SW0I100

// Format and display the map
Function SW0I200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SW0IW00.SW0IWSWR == "N" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SW0IW00.SW0IWSWF == "Y") /* Map must be formatted*/
      SW0I210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  SW0I220(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SW0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SW0IM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SW0IM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SW0IM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    if (SLWREC.XWHCD == "51")
      set SW0IM001.SL-LOC-SZ-IND skip;
      set SW0IM001.SL-HANDSTK-CS-QTY skip;
    else
      set SW0IM001.SWEMPLCS skip;
      set SW0IM001.SWEMCLCS skip;
      set SW0IM001.SWEMWLCS skip;
    end

    SW0IM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SW0IM001 alarm; /* Indicate sound alarm*/

  end

  converse SW0IM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SW0IM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SW0IM001.CAITEM; /* Application data*/


end // end SW0I200

// Format the display
Function SW0I210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/


  set SW0IM001 initial; /* M001 input/output area*/

  SW0IW00.SW0IWSWF = "N"; /* Format the map switch*/

  set SW0IM001.SW0IM-SL-PAL-PER-AISLE protect, noHighLight;
  if (SLWREC.XWHCD != "51")
    set SW0IM001.SW0IM-SL-PAL-DESC invisible, protect;
    set SW0IM001.SW0IM-SL-PAL-PER-AISLE invisible, protect;
    set SW0IM001.SW0IM-PF6-SHOW invisible, protect;
  else
    SW0IM001.SW0IM-SL-PAL-PER-AISLE = SW0IW01.SW0IW-SL-PAL-PER-AISLE;
  end

   /* ------------------------------------------------------------*/
   /* Format the map key fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  SW0IM001.SWEPLLNB = SW0IW01.SWEPLLNB; /* display plan number*/
  if (SW0IW01.SWEPLLNB == 0          /* if no plan number*/
   || SW0IW01.XRPDESC == "NOT FOUND" /* or plan desc not found*/
   || converseVar.validationMsgNum == 214) /* or plan not found*/

    set SW0IM001.SWEPLLNB cursor, bold; /* position cursor*/
    converseLib.validationFailed(9); /* enter required field msg*/

  end

  SW0IM001.XRPCD = SW0IW01.XRPCD; /* plan code status*/
  SW0IM001.XRPDESC = SW0IW01.XRPDESC; /* show plan description*/


  SW0IM001.XWHCD = SW0IW01.XWHCD; /* display warehouse code*/
  SW0IM001.XWHABRV = SW0IW01.XWHABRV; /* display warehouse abrv*/

  if (COMMAREA.CACHGFL != "Y") /* No authority for modification*/

    set SW0IM001.SWEMPLCS protect; /* no mod's*/
    set SW0IM001.SWEMCLCS protect; /* no mod's*/
    set SW0IM001.SWEMWLCS protect; /* no mod's*/
    set SW0IM001.SL-LOC-SZ-IND protect; /* no mod's*/
    set SW0IM001.SL-HANDSTK-CS-QTY protect; /* no mod's*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Display fields on map*/
   /* ------------------------------------------------------------*/

  if (SW0IW01.XWHCD == "51")
  /* SET SW0IM001.SWEMPLCS CURSOR;            /* Fields for apparel*/
    SW0IM001.SWEMPLCS = SW0IW01.SWEMPLCS; /* Pallet*/
    SW0IM001.SWEMCLCS = SW0IW01.SWEMCLCS; /* Case*/
    SW0IM001.SWEMWLCS = SW0IW01.SWEMWLCS; /* Weight/Pack factor*/
    set SW0IM001.SL-LOC-SZ-IND skip; /* Skip for whse 51*/
    set SW0IM001.SL-HANDSTK-CS-QTY skip; /* Skip for whse 51*/
  else
  /* SET SW0IM001.SL-LOC-SZ-IND CURSOR;       /* Set cursor on pallet id*/
    SW0IM001.SL-LOC-SZ-IND = SW0IW01.SL-LOC-SZ-IND;
    SW0IM001.SL-HANDSTK-CS-QTY = SW0IW01.SL-HANDSTK-CS-QTY;
    set SW0IM001.SWEMPLCS skip;
    set SW0IM001.SWEMCLCS skip;
    set SW0IM001.SWEMWLCS skip;
  end



end // end SW0I210

// Check change authorization
Function SW0I220()
   /* ------------------------------------------------------------*/
   /* If the user is authorized to change data and there is data*/
   /* to display, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y") /* User authorized to change*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, set the modifiable fields to autoskip.*/
   /* ------------------------------------------------------------*/

  set SW0IM001.SWEMPLCS skip; /* Pallet*/
  set SW0IM001.SWEMCLCS skip; /* Case*/
  set SW0IM001.SWEMWLCS skip; /* Weight/pack factor*/
  set SW0IM001.SL-LOC-SZ-IND skip; /* Pallet Id*/
  set SW0IM001.SL-HANDSTK-CS-QTY skip; /* Handstack cases*/


end // end SW0I220

// Update vparm101
Function SW0I230()
  SW0IS02();
  if (XZZREC.XZZINT1 != SW0IM001.SW0IM-SL-PAL-PER-AISLE)
    if (SW0IM001.SW0IM-SL-PAL-PER-AISLE < 1 /* ENTER was not pressed*/
     || SW0IM001.SW0IM-SL-PAL-PER-AISLE > 14)

      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(11); /* PA/PF key pressed is not valid*/
      set SW0IM001.SW0IM-SL-PAL-PER-AISLE bold;

      exit stack; /* Exit to display map*/

    end
    SW0IS03();
    SW0IS04();
  end
end // end SW0I230

// Check attention identifier
Function SW0I300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SW0IW00.SW0IWSWR == "Y") /* Request for data pending*/
      set SW0IW01 empty; /* M001 display storage*/
    end

    SW0IW00.SW0IWSWF = "Y"; /* Format the map switch*/
    SW0IW00.SW0IWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "300"; /* Module identification*/
  if (SW0IM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSL001(); /* Exit to another application*/
      converseLib.validationFailed(166); /* If here, couldnt go to appl*/

      set SW0IM001.CATOAP cursor, bold; /* Highlight*/

    else

      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SW0IM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf15  /* PF15 not pressed*/
  )                                 
    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    set SW0IM001.SWEPLLNB cursor;

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end SW0I300

// Reset highlighted fields
Function SW0I400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SW0IM001.XWHCD initialAttributes; /* warehouse code*/
  set SW0IM001.XWHABRV initialAttributes; /* warehouse name*/
  set SW0IM001.SWEPLLNB initialAttributes; /* plan number*/
  set SW0IM001.XRPCD initialAttributes; /* plan status code*/
  set SW0IM001.XRPDESC initialAttributes; /* plan description*/
  set SW0IM001.SWEMPLCS initialAttributes; /* pallet*/
  set SW0IM001.SWEMCLCS initialAttributes; /* case*/
  set SW0IM001.SWEMWLCS initialAttributes; /* weight/pack factor*/
  set SW0IM001.CATOAP initialAttributes; /* Commarea TO application*/
  set SW0IM001.CAITEM initialAttributes; /* Commarea application data*/
  set SW0IM001.SL-LOC-SZ-IND initialAttributes; /* pallet id*/
  set SW0IM001.SL-HANDSTK-CS-QTY initialAttributes; /* handstack cases*/

   /* ------------------------------------------------------------*/
   /* If no list was requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SW0IM001.XWHCD == "?") /* warehouse list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes.*/
   /* ------------------------------------------------------------*/

  if (SW0IM001.XWHCD == "?") /* warehouse list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "            WAREHOUSE CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SW0IM001.XWHCD = SW0IW01.XWHCD; /* Restore prior code*/
      SW0IM001.XWHABRV = SW0IW01.XWHABRV; /* Warehouse name*/
      SW0IW00.SW0IWSWR = "Y"; /* request for data*/
    else
      SW0IM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SW0IM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* whse name*/
      SW0IW00.SW0IWSWR = "Y"; /* request for data*/

    end

    set SW0IM001.SWEPLLNB cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/

  exit stack; /* Exit to display map*/


end // end SW0I400

// Verify data that was entered
Function SW0I500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/


  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SW0IM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Enter only with FAST PATH*/
    exit stack;

  end

  SW0IW00.SW0IWSWE = "N"; /* Start with clean slate*/

   /* ------------------------------------------------------------*/
   /* If key fields changed, ignore any data changes.*/
   /* ------------------------------------------------------------*/

  if (SW0IM001.XWHCD != SW0IW01.XWHCD /* warehouse changed*/
   || SW0IM001.SWEPLLNB != SW0IW01.SWEPLLNB) /* or plan number changed*/

    /* ------------------------------------------------------------*/
     /* Determine if all the required key fields were entered,*/
     /* and validate them.*/
    /* ------------------------------------------------------------*/

    SW0I520(); /* Check for required key fields*/

  end

   /* ------------------------------------------------------------*/
   /* If other fields changed, validate them.*/
   /* ------------------------------------------------------------*/

  if (SW0IW01.XWHCD == "51")

    if (SW0IM001.SWEMPLCS != SW0IW01.SWEMPLCS /* Pallet changed*/
     || SW0IM001.SWEMCLCS != SW0IW01.SWEMCLCS /* Case changed*/
     || SW0IM001.SWEMWLCS != SW0IW01.SWEMWLCS /* Weight changed*/
     || SW0IM001.SWEMPLCS < 1                 /* Pallet not entered*/
     || SW0IM001.SWEMCLCS < 1                 /* Case not entered*/
     || SW0IM001.SWEMWLCS < 1)                /* Weight not entered*/

      SW0I530(); /* Validate new values*/

    end

  else

    if (SW0IM001.SL-LOC-SZ-IND != SW0IW01.SL-LOC-SZ-IND /* pallet id*/
     || SW0IM001.SL-HANDSTK-CS-QTY < 1)                 /* hs cases not entered*/

      SW0I530(); /* Validate new values*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SW0IW00.SW0IWSWE = "Y"; /* Set error switch*/
    exit stack; /* Exit to display map*/
  end


end // end SW0I500

// Check for required key fields
Function SW0I520()
   /* ------------------------------------------------------------*/
   /* Validate the warehouse number...*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "520"; /* Module identification*/

  if (SW0IM001.XWHCD != SW0IW01.XWHCD) /* If warehouse code changed*/

    if (SW0IM001.XWHCD in XWHTBL.XWHCD /* if warehouse code in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/

       /* next sentence*/

    else

      if (SW0IM001.XWHCD == "  ") /* no whse code*/

        set SW0IM001.XWHCD cursor, bold; /* highlight*/
        converseLib.validationFailed(09); /* field required*/
        SW0IW00.SW0IWSWR = "N"; /* clear request flag*/
        exit stack;

      else

        set SW0IM001.XWHCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(11); /* Field invalid*/
        SW0IW00.SW0IWSWR = "N"; /* no data requested*/
        exit stack;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the Plan Number...*/
   /* ------------------------------------------------------------*/

  if (SW0IM001.SWEPLLNB != SW0IW01.SWEPLLNB) /* if plan number changed*/

    if (SW0IM001.SWEPLLNB < 1) /* if Plan number 0*/

      converseLib.validationFailed(9); /* field required*/
      set SW0IM001.SWEPLLNB cursor, bold; /* highlight*/
      SW0IW00.SW0IWSWR = "N"; /* no data requested*/
      exit stack;

    end

  end
  SW0IS01();


end // end SW0I520

// Verify modified non-key data
Function SW0I530()
   /* ------------------------------------------------------------*/
   /* Verify any changed data....*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Verify pallet if changed...*/
   /* ------------------------------------------------------------*/

  SW0IW00.SW0IWSWR = "N"; /* no data requested*/

  if (SW0IW01.XWHCD == "51") /* apparel only field*/

    if (SW0IM001.SWEMPLCS is modified /* if pallet changed*/
     || SW0IM001.SWEMPLCS < 1)        /* or if pallet not entered*/

      if (SW0IM001.SWEMPLCS < 1) /* pallet less than 1*/

        set SW0IM001.SWEMPLCS cursor, bold; /* highlight*/
        converseLib.validationFailed(9); /* invalid value*/

      else

        if ("PL" in XLNTBL.XLNCD)

          if (XLNTBL.XLNMINCS[sysVar.arrayIndex] > SW0IM001.SWEMPLCS) /* < min*/

            converseLib.validationFailed(233); /* quantity less than minimum msg*/
            set SW0IM001.SWEMPLCS cursor, bold; /* highlight*/

          end

        end

      end

    else

      SW0IM001.SWEMPLCS = SW0IW01.SWEMPLCS; /* move rec val to scrn*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify case if changed...*/
   /* ------------------------------------------------------------*/

  if (SW0IW01.XWHCD == "51") /* apparel only field*/

    if (SW0IM001.SWEMCLCS is modified /* if case changed*/
     || SW0IM001.SWEMCLCS < 1)        /* or if case not entered*/

      if (SW0IM001.SWEMCLCS < 1) /* case less than 1*/

        set SW0IM001.SWEMCLCS cursor, bold; /* highlight*/
        converseLib.validationFailed(9); /* invalid value*/

      else

        if ("CS" in XLNTBL.XLNCD)

          if (XLNTBL.XLNMINCS[sysVar.arrayIndex] > SW0IM001.SWEMCLCS) /* < min*/

            converseLib.validationFailed(233); /* quantity less than minimum msg*/
            set SW0IM001.SWEMCLCS cursor, bold; /* highlight*/

          end

        end

      end

    else

      SW0IM001.SWEMCLCS = SW0IW01.SWEMCLCS; /* move to scrn*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify weight if changed...*/
   /* ------------------------------------------------------------*/

  if (SW0IW01.XWHCD == "51") /* apparel only field*/

    if (SW0IM001.SWEMWLCS is modified /* if weight changed*/
     || SW0IM001.SWEMWLCS < 1)        /* or if weight not entered*/

      if (SW0IM001.SWEMWLCS < 1) /* weight less than 1*/

        set SW0IM001.SWEMWLCS cursor, bold; /* highlight*/
        converseLib.validationFailed(9); /* invalid value*/

      else

        if ("WP" in XLNTBL.XLNCD)

          if (XLNTBL.XLNMINCS[sysVar.arrayIndex] > SW0IM001.SWEMWLCS) /* < min*/

            converseLib.validationFailed(233); /* quantity less than minimum msg*/
            set SW0IM001.SWEMWLCS cursor, bold; /* highlight*/

          end

        end

      end

    else

      SW0IM001.SWEMWLCS = SW0IW01.SWEMWLCS;

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify pallet id if changed...*/
   /* ------------------------------------------------------------*/

  if (SW0IW01.XWHCD != "51") /* new fields not for apparel*/

    if (SW0IM001.SL-LOC-SZ-IND is modified /* if pallet id changed*/
     || SW0IM001.SL-LOC-SZ-IND == " "      /* pallet id not entered*/
    )                                     
      if (SW0IM001.SL-LOC-SZ-IND == " " /* pallet id not entered*/
      )                                
        set SW0IM001.SL-LOC-SZ-IND cursor, bold; /* highlight field*/
        converseLib.validationFailed(9); /* invalid value msg*/

      else

        if (SW0IM001.SL-LOC-SZ-IND != "N"
         && SW0IM001.SL-LOC-SZ-IND != "Q"
         && SW0IM001.SL-LOC-SZ-IND != "S"
         && SW0IM001.SL-LOC-SZ-IND != "T")

          set SW0IM001.SL-LOC-SZ-IND cursor, bold; /* highlight field*/
          converseLib.validationFailed(9); /* invalid value msg*/

        end

      end

    else

      SW0IM001.SL-LOC-SZ-IND = SW0IW01.SL-LOC-SZ-IND;

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify handstack cases changed...*/
   /* ------------------------------------------------------------*/

  if (SW0IW01.XWHCD != "51")

    if (SW0IM001.SL-HANDSTK-CS-QTY is modified /* if hs cases changed*/
     || SW0IM001.SL-HANDSTK-CS-QTY < 1)        /* hs cases not entered*/

      if (SW0IM001.SL-HANDSTK-CS-QTY < 1) /* hs cases not entered*/

        set SW0IM001.SL-HANDSTK-CS-QTY cursor, bold; /* highlight field*/
        converseLib.validationFailed(9); /* invalid value msg*/

      end

    else

      SW0IM001.SL-HANDSTK-CS-QTY = SW0IW01.SL-HANDSTK-CS-QTY;

    end

  end


end // end SW0I530

// Process valid input request
Function SW0I600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/


  SW0IW00.SW0IWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/

  if (SW0IM001.SWEMPLCS != SW0IW01.SWEMPLCS           /* pallet changed*/
   || SW0IM001.SWEMCLCS != SW0IW01.SWEMCLCS           /* case changed*/
   || SW0IM001.SWEMWLCS != SW0IW01.SWEMWLCS           /* weight changed*/
   || SW0IM001.SL-LOC-SZ-IND != SW0IW01.SL-LOC-SZ-IND /* pallet id*/
   || SW0IM001.SL-HANDSTK-CS-QTY != SW0IW01.SL-HANDSTK-CS-QTY) /* hs cases*/

    if (SW0IW00.SW0IWSWR == "Y") /* record to update is different*/

      SW0IS01(); /* select unique for new record*/

    end
    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
    /* ------------------------------------------------------------*/

    SW0I610(); /* Update the changed table row*/

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "600"; /* Module identification*/
    SLWREC.SLWMSGNO = 20; /* Update was completed*/

    SW0IW00.SW0IWSWR = "N"; /* Request for data switch*/
    converseLib.clearScreen();
     /* reset map*/

    /* ------------------------------------------------------------*/
     /* Commit all changes to protected resources.*/
    /* ------------------------------------------------------------*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

  end

   /* ------------------------------------------------------------*/
   /* Create batch JCL for submission of SL4041 which will*/
   /* execute PGM SL404d - Blank Work Sheet Report (by carton)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15)

    SW0I605(); /* Submit SL4041 batch jcl stream*/

    COMMAREA.CATOAP = "SW0J"; /* set transfer application*/
    XSSL001(); /* standard stock locate exit*/

    converseLib.validationFailed(166); /* did not xfer msg*/
    SW0IW00.SW0IWSWR = "Y"; /* request for data*/
    exit stack;

  end


end // end SW0I600

// Submit batch job SL4041
Function SW0I605()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexex to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Initialize JCL array rows*/

  SW0IW00.SW0IWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output table index*/

   /* ------------------------------------------------------------*/
   /* Initialize the warehouse and plan number parameters.*/
   /* ------------------------------------------------------------*/

  SW0IW01.SW0IWHSE = SW0IW01.XWHCD; /* whse code parameter*/
  SW0IW01.SW0IWPLN = SW0IW01.SWEPLLNB; /* plan number parameter*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SW0IT01.TARTYPE[SW0IWIXT] == "P") /* Parameter identifier*/
      TA6REC.TARJCL[TA6INDEX] = SW0IW01.SW0IWPRM; /* Passed parameter*/
    else
      /* --------------------------------------------------------*/
       /* Format the JCL statement from the table.*/
      /* --------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SW0IT01.TARJCL[SW0IWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SW0IT01.TARTYPE[SW0IWIXT]; /* Type*/

    end /* End of 'p' if check*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* --------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* --------------------------------------------------------*/

    if (SW0IT01.TARJCL[SW0IWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      SW0IW00.SW0IWIXT = SW0IW00.SW0IWIXT + 1; /* Input table index*/
    end

  end /* End of while control loop*/

   /* --------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* --------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor the JCL and submit*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ on-line message switch*/

  XPTA0P(); /* Submit JCL in background*/

   /* --------------------------------------------------------*/
   /* If submit was successful, return to previous process.*/
   /* --------------------------------------------------------*/

  SLWREC.XXXLOCID = "605"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA6REC.TA6RTNCD == "0"         /* And normal return*/
  )                                 
    SLWREC.SLWMSGNO = 375; /* Print request submitted*/

    return;

  end

   /* -----------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occured.*/
   /* -----------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD == "0")        /* And unexpected return code*/

    converseLib.validationFailed(01); /* Uexpected error msg*/

  end

  exit stack; /* Exit to display map*/


end // end SW0I605

// Update the changed table row
Function SW0I610()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/


   /* F SW0IM001.SWEMPLCS NE SW0IW01.SWEMPLCS; if pallet changed*/

  SWEREC.SWEMPLCS = SW0IM001.SWEMPLCS; /* Pallet*/
  SW0IW01.SWEMPLCS = SW0IM001.SWEMPLCS; /* Pallet*/

   /* ND ;*/

   /* F SW0IM001.SWEMCLCS NE SW0IW01.SWEMCLCS; if case changed*/

  SWEREC.SWEMCLCS = SW0IM001.SWEMCLCS; /* case*/
  SW0IW01.SWEMCLCS = SW0IM001.SWEMCLCS; /* case*/

   /* ND ;*/

   /* F SW0IM001.SWEMWLCS NE SW0IW01.SWEMWLCS; if weight changed*/

  SWEREC.SWEMWLCS = SW0IM001.SWEMWLCS; /* weight*/
  SW0IW01.SWEMWLCS = SW0IM001.SWEMWLCS; /* weight*/

   /* ND ;*/

  SWEREC.SL-LOC-SZ-IND = SW0IM001.SL-LOC-SZ-IND; /* pallet id*/
  SW0IW01.SL-LOC-SZ-IND = SW0IM001.SL-LOC-SZ-IND; /* pallet id*/

  SWEREC.SL-HANDSTK-CS-QTY = SW0IM001.SL-HANDSTK-CS-QTY; /* cases*/
  SW0IW01.SL-HANDSTK-CS-QTY = SW0IM001.SL-HANDSTK-CS-QTY; /* cases*/

  SWEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5350" ("U ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate the data was updated by another.*/
   /* ------------------------------------------------------------*/


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  SW0IW00.SW0IWSWR = "Y"; /* Request for data switch*/

  SLWREC.XXXLOCID = "610"; /* Module identification*/
  TA1REC.TA1FUNC = "POST"; /* Termination function*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (SQLCA.VAGen_SQLCODE == -911) /* if resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/

  end
  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    SLWREC.SLWMSGNO = 12; /* Data was updated by another*/

  end
  if (SQLCA.VAGen_SQLCODE != +100
   && SQLCA.VAGen_SQLCODE != -911)

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SW0I610

// select unique for plan header
Function SW0IS01()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  set SWEREC empty; /* Clear row storage area*/
  SW0IW00.SW0IWSWF = "N";

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and plan number*/
   /* ------------------------------------------------------------*/

  SWEREC.XWHCD = SW0IM001.XWHCD; /* warehouse code*/
  SWEREC.SWEPLLNB = SW0IM001.SWEPLLNB; /* plan number*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      SW0IW01.XWHCD = SW0IM001.XWHCD;
      SW0IW01.XWHABRV = SW0IM001.XWHABRV;
      SW0IW01.SWEPLLNB = SW0IM001.SWEPLLNB;
      SW0IW01.XRPCD = SWEREC.XRPCD; /* save plan status*/
      SW0ISE1(); /* edit plan status*/
      SW0IW01.SWEMPLCS = SWEREC.SWEMPLCS; /* save pallets*/
      SW0IW01.SWEMCLCS = SWEREC.SWEMCLCS; /* save cases*/
      if (SWEREC.SWEMWLCS < 1) /* if no max entered,*/
        SW0IW01.SWEMWLCS = 9999; /* set default to 9999*/
      else
        SW0IW01.SWEMWLCS = SWEREC.SWEMWLCS; /* save w/p's*/
      end
      SW0IW01.SL-LOC-SZ-IND = SWEREC.SL-LOC-SZ-IND; /* pallet id*/
      SW0IW01.SL-HANDSTK-CS-QTY = SWEREC.SL-HANDSTK-CS-QTY; /* cases*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

        SLWREC.XXXLOCID = "S01"; /* module id*/
        converseLib.validationFailed(214); /* no data found*/
        set SW0IM001.SWEPLLNB cursor, bold; /* highlight*/
        exit stack;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SW0IM001.XWHCD cursor, bold; /* highlight*/
  set SW0IM001.SWEPLLNB bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SW0IS01

// select unique for vparm101
Function SW0IS02()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  set XZZREC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and program (SL421D)*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = "SL421D"; /* query id*/
  XZZREC.XZZQRYRN = 51; /* request number*/
  XZZREC.XZZQRYLN = 0; /* line number*/

  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      SW0IW01.SW0IW-SL-PAL-PER-AISLE = XZZREC.XZZINT1;

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

        SW0IW01.SW0IW-SL-PAL-PER-AISLE = 6;

        return; /* Return to previous process*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SW0IM001.SW0IM-SL-PAL-PER-AISLE cursor, bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SW0IS02

// delete for vparm101
Function SW0IS03()
   /* ------------------------------------------------------------*/
   /* delete the old row from the table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and program (SL421D)*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = "SL421D"; /* query id*/
  XZZREC.XZZQRYRN = 51; /* request number*/
  XZZREC.XZZQRYLN = 0; /* line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SW0IM001.SW0IM-SL-PAL-PER-AISLE cursor, bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SW0IS03

// add for vparm101
Function SW0IS04()
   /* ------------------------------------------------------------*/
   /* Add the row to the table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and program (SL421D)*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = "SL421D"; /* query id*/
  XZZREC.XZZQRYRN = 51; /* request number*/
  XZZREC.XZZQRYLN = 0; /* line number*/
  XZZREC.XZZINT1 = SW0IM001.SW0IM-SL-PAL-PER-AISLE;
  SW0IW01.SW0IW-SL-PAL-PER-AISLE = SW0IM001.SW0IM-SL-PAL-PER-AISLE;
  XZZREC.ZZZSDT = X2CREC.X2CCURDT;
  XZZREC.ZZZSTM = X3CREC.X3CCURST;

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SW0IM001.SW0IM-SL-PAL-PER-AISLE cursor, bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SW0IS04

// edit plan status
Function SW0ISE1()
   /* ------------------------------------------------------------*/
   /* Retrieve plan header description from table*/
   /* ------------------------------------------------------------*/

  if (SWEREC.XRPCD in XRPTBL.XRPCD) /* if plan on table*/

    SW0IW01.XRPCD = SWEREC.XRPCD; /* save status*/
    SW0IM001.XRPCD = SWEREC.XRPCD;
    SW0IW01.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex]; /* save desc*/
    SW0IM001.XRPDESC = XRPTBL.XRPDESC[sysVar.arrayIndex]; /* save desc*/

  else

    SW0IW01.XRPDESC = "NOT FOUND"; /* plan desc not found*/
    SW0IM001.XRPDESC = "NOT FOUND"; /* plan desc not found*/

  end

   /* ------------------------------------------------------------*/
   /* Validate plan status*/
   /* ------------------------------------------------------------*/

  if (SW0IW01.XRPCD != "WK" /* valid status code*/
   && SW0IW01.XRPCD != "SV" /* also valid code*/
   && SW0IW01.XRPCD != "CA") /* also valid code*/

    converseLib.validationFailed(218); /* invalid status code msg*/
    set SW0IM001.SWEPLLNB cursor, bold; /* highlight*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SW0IW00.SW0IWSWS = "Y"; /* There was a good retrieval*/
  SW0IW00.SW0IWSWR = "N"; /* Request for data switch*/
  SW0IW00.SW0IWSWF = "Y"; /* Format Map W/ New Data*/


end // end SW0ISE1

//*** RECORD=SW0IW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// add for wc rcv
// ***********************
Record SW0IW00 type basicRecord
  10 SW0IWSWF SW0IWSWF ; 
  10 SW0IWSWR SW0IWSWR ; 
  10 SW0IWSWS SW0IWSWS ; 
  10 SW0IWSWE SW0IWSWE ; 
  10 SW0IWCHG SW0IWCHG ; 
  10 SW0IWIXT SW0IWIXT ; 
end // end SW0IW00

//*** RECORD=SW0IW01 ****
// Add pallet indicator and number of handstack cases for
// Wilsonville Receiving. 02/03/93
// ***********************
Record SW0IW01 type basicRecord
  10 SW0IWREC SW0IWREC ; 
    15 SWEPLLNB SWEPLLNB ; 
    15 XRPCD XRPCD ; 
    15 XRPDESC XRPDESC ; 
    15 XWHCD XWHCD ; 
    15 XWHABRV XWHABRV ; 
    15 SWEMPLCS SWEMPLCS ; 
    15 SWEMCLCS SWEMCLCS ; 
    15 SWEMWLCS SWEMWLCS ; 
    15 SL-LOC-SZ-IND SL-LOC-SZ-IND ; 
    15 SL-HANDSTK-CS-QTY SL-HANDSTK-CS-QTY ; 
    15 SW0IWPRM SW0IWPRM ; 
      20 SW0IWHSE SW0IWHSE ; 
      20 SW0IWPLN SW0IWPLN ; 
      20 SW0IWEND SW0IWEND ; 
    15 SW0IW-SL-PAL-PER-AISLE SW0IW-SL-PAL-PER-AISLE ; 
end // end SW0IW01

DataItem SW0IW-SL-PAL-PER-AISLE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Modification switch
DataItem SW0IWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem SW0IWEND char(69)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SW0IWHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL index
DataItem SW0IWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// receiving plan number
DataItem SW0IWPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SW0IWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display group
DataItem SW0IWREC char(123)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error switch
DataItem SW0IWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SW0IWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SW0IWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Successful retrieval switch
DataItem SW0IWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

