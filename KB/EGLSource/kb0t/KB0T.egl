package kb0t;

import corpcom2.XP0AW01;
import corpcom3.XP0A001;
import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB018;
import corpcom3.XPKB020;
import corpcom3.XPKB021;
import corpcom3.XPKB030;
import corpcom3.XPKB031;
import corpcom3.XPKB099;
import corpcom3.XPKB900;
import corpcom3.XPKB990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.UT2REC;
import corpcom7.XXXFSTNM;
import corpcom7.XXXLSTNM;
import corpx1.XP0AT01;
import corpy2.YMLTBL;
import corpy2.YSBCD;
import corpy2.YSBDESC;
import corpy2.YSBTBL;
import kb.common.*;
import kl.common.KIZTBL;
import ku.common.KUCREC;
import ku.common.KUEREC;
import ku.common.KUGREC;
import ku.common.KUJREC;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ku.common.KUZREC;
import sm.common.SM1AGYID;
import sm.common.SM4REC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0T ****
// This application allows the user to attach customer accounts
// to a buyer using several methods:
// All accounts for an entered company ID
// All accounts for the entered company and store ID
// All accounts for the entered company and department ID
// A specific company, store, and department
// 
// For the first four methods:
// The customer numbers are edited for presence and status.
// 
// If a rep id is entered it is checked against the VCUREP01
// table to verify if the rep/customer are active.
// If more than one ysb exists for the rep/customer combination
// then the program will display a screen which will allow the
// user to select one of the valid reps.
// 
// If no rep is entered then pressing pf9 will display the
// screen which will list all the unique and active
// rep/ysb for the customer combination that was chosen.
// Only one rep is processed at a time, even if there
// are many ysbs assigned to a single rep/customer combination.
// 
// A tally is kept for each cross-reference added
// and is displayed at the end of this routine.
// 
// 
// 10/08/91  jjohn2  Made department 4 char.  Updated along
//                   with database changes.
// 
// 02/01/93  jricha/ This application has been modified as
//           tmorri  part of the Buyer System Enhancement
//                   project.  The main objective of this
//                   project is to give Nike Sales Reps and
//                   Sales Admin a way to associate buyers to
//                   sales reps via the sales responsibility
//                   code.  (See specs for details relating
//                   to this specific application).
// 
// 02/26/93  tmorri  Select ALL active reps when using PF9.
//                   (KB0T132)
// 
// 03/01/93  tmorri  Add new error message if nothing entered
//                   on map and fix bug when selecting a list
//                   with '?. (KB0T050, KB0T056, KB0T057,
//                   KB0T060, KB0T090, KB0T091)
// 
// 08/09/93  tmorri  Database Changes.  Removed KBXREC.XXXRKNBR
//                   (KB0T017)
// 
// 09/30/93  tmorri  Added 'View Attachments' option.
//                   (KB0T001, KB0T005, KB0T050, KB0T056,
//                    KB0T090, KB0T091)
// 
// 11/10/93  tmorri  Database Changes.  (KB0T090).
// *********************
Program KB0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0TW01 KB0TW01; // record
  KB0TW02 KB0TW02; // record
  KB3REC KB3REC; // record
  KBAREC KBAREC; // record
  KBBREC KBBREC; // record
  KBIREC KBIREC; // record
  KBLREC KBLREC; // record
  KBWREC KBWREC; // record
  KBXREC KBXREC; // record
  KUCREC KUCREC; // record
  KUEREC KUEREC; // record
  KUGREC KUGREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUZREC KUZREC; // record
  SM4REC SM4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XP0AW01 XP0AW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL; // table
  use YMLTBL; // table
  use YSBTBL; // table
  use XP0AT01 {deleteAfterUse = yes}; // table
  use KB0TM.KB0TM001,  // forms
      KB0TM.KB0TM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0T001: KB0T001();
    ;
    ;
    goto KB0T005;
    ;
    ;
    KB0T005: KB0T005();
    goto KB0T005;
  end // end main
end // end KB0T

// ATTACH INITIALIZE AND UPDATE
Function KB0T001()
  ;
  ;
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/
  ;
  XPKB031(); /* ; get current date*/
  KB0T230(); /* ; purge temp storage*/
  set KB0TM001 initial; /* ; init maps*/
  set KB0TM002 initial;
  ;
  if (COMMAREA.CAFROMAP == "KB0A" /* ; from Buyer Add*/
   || COMMAREA.CAFROMAP == "KB0C" /* ; Buyer Update*/
   || COMMAREA.CAFROMAP == "KB0D" /* ; Detach Accounts*/
   || COMMAREA.CAFROMAP == "KB0L" /* ; Inquire Accounts*/
   || COMMAREA.CAFROMAP == "KB0R" /* ; Re-Assign Accounts*/
   || COMMAREA.CAFROMAP == "KB0N" /* ; Notes Update*/
   || COMMAREA.CAFROMAP == "KB0U") /* ; misc. corp. table*/
    XPKB002(); /* ; Initialize KBWREC*/
    XPKB010(); /* ; Read KBAREC*/
    KB0T090(); /* ; move W/S to screen*/
  else
    set KBWREC empty; /* ; intialize kbwrec*/
    ;
    COMMAREA.CATOAP = "KB0M"; /* ; xfer to menu*/
    COMMAREA.CAUSERA = KBWREC.KBWGROUP; /* ; initialize commarea*/
    ;
    XSEXIT();
    exit program;
  end
  ;
  ;
end // end KB0T001

// ATTACH MAINLINE
Function KB0T005()
  ;
  ;
  if (COMMAREA.CAFROMAP != "KB0U" /* list corp tables*/
   && COMMAREA.CAFROMAP != "KB0L") /* attach inquire*/
    KB0T080(); /* ; converse KB0TM001*/
  else
    COMMAREA.CAFROMAP = "KB0T"; /* ; reset from application*/
  end
  ;
  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* prev pfkey = curr pfkey*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset curr pf key*/
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  set KB0TW01 empty; /* ; init work record*/
  ;
  KB0T006(); /* edit pfkeys*/
  ;
  if (KBWREC.KBWBFND == "Y") /* valid buyer id*/
    if (KBWREC.KBWERRFL == "N")
      KB0T050(); /* edit kb0tm001*/
      if (KBWREC.KBWERRFL == "N") /* edit successful*/
        if (converseVar.eventKey is pf9)
          KB0T110(); /* list active reps*/
          KB0T190(); /* get rep name & ysb description*/
        else
          KB0T040(); /* check ysb*/
          if (KBWREC.KBWERRFL == "N") /* no errors*/
            KB0T010(); /* attach company accounts*/
            KB0T195(); /* get rep name & ysb description*/
          end
        end
        ;
        if (KBWREC.KBWERRFL == "N") /* no errors*/
          KB0TW01.KB0TW-ACCT-MSGA = " ACCOUNTS ATTACHED";
          KB0TM001.VAGen_EZEMSG = KB0TW01.KB0TW-ACCT-MSG;
        end
        ;
      end
    end
  else
    KB0T090(); /* move w/s to screen*/
  end
  ;
  ;
  ;
  ;
end // end KB0T005

// EDIT PFKEYS
Function KB0T006()
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KB0T230(); /* ; purge temp storage*/
    if (KBWREC.KBWADDFL == "A") /* ; user in 'add' mode*/
      COMMAREA.CATOAP = "KB0A"; /* ; xfer to 'add buyer'*/
    else
      COMMAREA.CATOAP = "KB0C"; /* ; xfer to 'change buyer'*/
    end
    KB0T007(); /* MOVE KBWREC TO COMMAREA AND TRANSFERR*/
    ;
  else
    if (converseVar.eventKey is pf4) /* ; menu requested*/
      KB0T045(); /* ; count bxrefs*/
      KBWREC.KBWPFKEY[1] = "PF4"; /* ; curr pfkey = 'pf4'*/
      ;
      if (KBWREC.KBWADDFL == "A"      /* ; user in 'add' mode*/
       && KBWREC.KBWPFKEY[2] != "PF4" /* ; PF4 unconfirmed*/
       && KBWREC.KBW-BXREF-CNT == 0)  /* no attachments made*/
        KBWREC.KBWERRFL = "Y"; /* ; set error on*/
        converseLib.validationFailed(144); /* ; confirm pf4*/
      else
        if (KBWREC.KBWADDFL == "A" /* ; user in 'add' mode*/
         && KBWREC.KBW-BXREF-CNT == 0) /* no attachments made*/
          XPKB030(); /* ; purge session's work*/
        end
        ;
        COMMAREA.CATOAP = "KB0M";
        KB0T007(); /* MOVE KBWREC TO COMMAREA AND TRANSFER*/
        ;
      end
      ;
    else
      if (converseVar.eventKey is pf16) /* ; Comments requested*/
        KB0T230(); /* ; purge temp storage*/
        COMMAREA.CATOAP = "KB0N";
        KB0T007(); /* MOVE KBWREC TO COMMAREA AND TRANSFER*/
      else
        if (converseVar.eventKey is pf18) /* ; detach   requested*/
          if (KBWREC.KBWADDFL == "A") /* ; in 'add' mode*/
            converseLib.validationFailed(7); /* invalid pfkey*/
            KBWREC.KBWERRFL = "Y"; /* set error flag on*/
          else
            KB0T230(); /* ; purge temp storage*/
            COMMAREA.CATOAP = "KB0D";
            KB0T007(); /* MOVE KBWREC TO COMMAREA AND TRANSFER*/
          end
          ;
        else
          if (converseVar.eventKey is pf19) /* ; reassign requested*/
            KB0T230(); /* ; purge temp storage*/
            COMMAREA.CATOAP = "KB0R";
            KB0T007(); /* MOVE KBWREC TO COMMAREA AND TRANSFER*/
          else
            if (converseVar.eventKey is enter
             || converseVar.eventKey is pf9) /* list active reps*/
                /* next sentence*/
            else
              converseLib.validationFailed(7); /* invalid pfkey*/
              KBWREC.KBWERRFL = "Y"; /* set error flag on*/
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end KB0T006

// MOVE KBWREC TO COMMAREA AND GO
Function KB0T007()
  ;
  COMMAREA.CAUSERA = KBWREC.KBWGROUP;
  ;
  XSEXIT();
  ;
  KB0TM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " ";
  COMMAREA.CAUSERA = " ";
  KBWREC.KBWERRFL = "Y";
  ;
end // end KB0T007

// ATTACH COMPANY ACCOUNTS
Function KB0T010()
  ;
  KB0T014(); /* ; select accounts from curep*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful select*/
    ;
    XPKB031(); /* ; get current date/time*/
    KB0T015(); /* ; fetch first account from curep*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* ; row not found*/
      if (KB0TM001.YSBCD == " " /* ; all ysb's*/
       || KB0TM001.YSBCD == "*")
        converseLib.validationFailed(131); /* ; not an active rep/customer*/
      else
        converseLib.validationFailed(133); /* ; not an active rep/ysb/customer*/
      end
      KBWREC.KBWERRFL = "Y"; /* ;*/
      set KB0TM001.SM4REPID cursor;
    else
      while (SQLCA.VAGen_SQLCODE == 0) /* ; until end of file*/
        KB0T017(); /* ; add kbxrec*/
        KB0T018(); /* ; add audit for kbxrec*/
        KB0T015(); /* ; fetch next account from curep*/
      end
    end
    ;
    KBLREC.KBLTRAN = "C5"; /* ; close cursor*/
    XPKB055(); /* ; call kb1040*/
    ;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* ; commit changes*/
    ;
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KBWREC.KBWSUB1 = 1;
    while (KBWREC.KBWSUB1 <= 4) /* reset option for completed request*/
      if (KB0TM001.KB0TMOPT[KBWSUB1] == "S")
        KB0TM001.KB0TMOPT[KBWSUB1] = "*";
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
    end
  end
  ;
end // end KB0T010

// SELECT ACCOUNTS FROM CUREP
Function KB0T014()
  ;
  ;
  set KBLREC empty; /* i/o record*/
  set KUGREC empty; /* curep record*/
  ;
  KBLREC.KBLTRAN = "S5"; /* select set from curep*/
  KBLREC.KBABUYID = KBWREC.KBABUYID; /* buyer id*/
  KBLREC.KUCCOID = KBWREC.KUCCOID; /* company*/
  KBLREC.KUMSTRID = KBWREC.KUMSTRID; /* store id*/
  KBLREC.XNXCD = KBWREC.XNXCD; /* dept id*/
  KBLREC.SM4REPID = KB0TM001.SM4REPID; /* rep id*/
  KBLREC.KBLDATE = TA2REC.TA2GRGGN; /* current date*/
  ;
  if (KB0TM001.YSBCD == "*" /* select all ysb's*/
   || KB0TM001.YSBCD == " ") /* only one active ysb on the table*/
    KBLREC.YSBCD = "**";
  else
    KBLREC.YSBCD = KB0TM001.YSBCD; /* ysbcd*/
  end
  ;
  ;
  XPKB055(); /* call kb1040*/
  ;
  ;
end // end KB0T014

// FETCH ACTIVE CUREP RECORD
Function KB0T015()
  ;
  ;
  set KBLREC empty; /* init pass record*/
  set KUGREC empty; /* init curep record*/
  ;
  KBLREC.KBLTRAN = "N5"; /* select next account from curep*/
  ;
  XPKB055(); /* call kb1040*/
  ;
  ;
  ;
end // end KB0T015

// ADD KBXREC
Function KB0T017()
  ;
  ;
  set SQLCA empty;
  set KBXREC empty;
  ;
  KBXREC.KBABUYID = KBWREC.KBABUYID; /* ; set buyer id*/
  KBXREC.KUCCOID = KUGREC.KUCCOID; /* ; set cmpny id*/
  KBXREC.KUMSTRID = KUGREC.KUMSTRID; /* ; set store id*/
  KBXREC.XNXCD = KUGREC.XNXCD; /* ; set dept id*/
  KBXREC.YSBCD = KUGREC.YSBCD; /* set ysb code*/
  KBXREC.YMLCD = KBWREC.YMLCD; /* set mail level code*/
  KBXREC.KBXXEDT = TA2REC.TA2GRGGN; /* ; set effective date*/
  KBXREC.KBXXXDT = 999999999; /* ; set termination date*/
  KBXREC.ZZZSDT = TA2REC.TA2GRGGN;
  KBXREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  KBXREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  call "IO4330" ("A ", SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful add*/
    KB0TW01.KB0TW-ACCTS-ATTACHED = KB0TW01.KB0TW-ACCTS-ATTACHED + 1;
                                   /* ; increment attach counter*/
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0T017";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "A ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900();
  end
  ;
  ;
end // end KB0T017

// ADD KBXREC AUDIT (KUZREC)
Function KB0T018()
  ;
  ;
  set KB3REC empty;
  set KUZREC empty;
  ;
  if (KBWREC.KBWADDFL == "A") /* ; user in 'add' mode*/
    KB3REC.KB3TRAN = "A"; /* ; transaction = add*/
  else
    KB3REC.KB3TRAN = "T"; /* ; transaction = attach*/
  end
  ;
  KB3REC.KB3DATA = KBXREC.KBXGRP; /* ; data = kbxrec*/
  ;
  KUZREC.KUZTYPE = "A"; /* ; type = add*/
  KUZREC.XXXTBLNM = "VBXREF01";
  KUZREC.KUCCOID = KBWREC.KBABUYID;
  ;
  XPKB099();
  ;
end // end KB0T018

// Select Rep (SM4REC)
Function KB0T020()
  ;
  ;
  set SQLCA empty;
  ;
  call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* ; successful read*/
   || SQLCA.VAGen_SQLCODE == 100) /* ; rep not found*/
    /* next sentence*/
  else
    set TA1REC empty;
    ;
    KBWREC.KBWXIDST = SM4REC.SM4REPID; /* use store field to unpack*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0T020";
    TA1REC.TA1LOCAT[2] = "IO0020";
    TA1REC.TA1LOCAT[3] = "S ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VREPS001";
    TA1REC.TA1TBLKE = KBWREC.KBWSTRKE;
    ;
    XPKB900();
  end
  ;
  ;
  ;
  ;
end // end KB0T020

// CHECK YSB
Function KB0T040()
  ;
  if (KB0TM001.YSBCD == " ") /* ysb NOT entered*/
    ;
    set KBLREC empty; /* ; record for kb1040*/
    set KUGREC empty; /* ; init curep rec*/
    ;
    KBLREC.KBLTRAN = "C "; /* count active ysb's*/
    KBLREC.SM4REPID = KB0TM001.SM4REPID; /* rep id*/
    KBLREC.KUCCOID = KBWREC.KUCCOID; /* company id*/
    KBLREC.KUMSTRID = KBWREC.KUMSTRID; /* store id*/
    KBLREC.XNXCD = KBWREC.XNXCD; /* dept id*/
    KBLREC.KBLDATE = TA2REC.TA2GRGGN; /* current date*/
    ;
    XPKB055(); /* call kb1040*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* successful count*/
      if (KBLREC.KBL-YSB-CNT > 1) /* more than 1 ysb for selection*/
        KBWREC.KBWERRFL = "Y"; /* set error on*/
        converseLib.validationFailed(153); /* more than 1 active ysb, choose one*/
        set KB0TM001.YSBCD cursor, bold;
      end
    end
    ;
  end
  ;
end // end KB0T040

// COUNT BXREF's
Function KB0T045()
  ;
  set KBIREC empty; /* ; initialize KBIREC*/
  set KBXREC empty; /* ; initialize KBXREC*/
  ;
  KBIREC.KBIOTASK = "C "; /* ; set io-pass task*/
  KBIREC.KBIOSTAT = "A"; /* ; set io-pass stat*/
  KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* ; set io-pass date*/
  ;
  KBXREC.KBABUYID = KBWREC.KBABUYID; /* ; set buyer id*/
  KBXREC.KUCCOID = -1; /* ; all companies*/
  KBXREC.KUMSTRID = -1; /* ; all stores*/
  KBXREC.XNXCD = -1; /* ; all depts*/
  KBXREC.YSBCD = "**"; /* ; all ysb's*/
  ;
  XPKB018(); /* ; call IO4330*/
  ;
  KBWREC.KBW-BXREF-CNT = KBIREC.KBIOCNT; /* save count*/
  ;
  ;
end // end KB0T045

// EDIT KB0TM001
Function KB0T050()
  ;
  ;
  KB0T055(); /* ; set effective date to current date*/
  ;
  if (KB0TM001.SM4REPID == 0 /* ; nothing entered on screen*/
   && KB0TM001.YSBCD == " "  
   && KB0TM001.YMLCD == " "  
   && KB0TM001.KB0TMOPT[1] == " "
   && KB0TM001.KB0TMOPT[2] == " "
   && KB0TM001.KB0TMOPT[3] == " "
   && KB0TM001.KB0TMOPT[4] == " "
   && KB0TM001.KB0TMOPT[5] == " "
   && KB0TM001.KB0TMCID == 0 
   && KB0TM001.KB0TMSID == " "
   && KB0TM001.KB0TMDID == " ")
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(187); /* ; enter attach information or exit*/
  end
  ;
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    if (KB0TM001.KB0TMOPT[5] != "S") /* ; view attachments*/
      KB0T057(); /* ; edit mail level code*/
    end
    if (KBWREC.KBWERRFL == "N") /* ; no errors*/
      KB0T056(); /* ; edit selection and company*/
    end
  end
  ;
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    if (converseVar.eventKey is pf9) /* ; list active reps*/
   /* next sentence*/
    else
      KB0T052(); /* ; edit rep id / ysb code*/
    end
  end
  ;
end // end KB0T050

// Edit Rep Id / YSB Code
Function KB0T052()
  ;
  if (KB0TM001.SM4REPID == 0) /* no rep entered*/
    set KB0TM001.SM4REPID cursor, bold;
    converseLib.validationFailed(132); /* rep id required or use pf9*/
    KBWREC.KBWERRFL = "Y";
  else
    set SM4REC empty; /* init rep record*/
    SM4REC.SM4REPID = KB0TM001.SM4REPID;
    KB0T020(); /* select rep*/
    if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
      KB0TM001.KB0TM-REP-XXXFSTNM = SM4REC.XXXFSTNM; /* first name*/
      KB0TM001.KB0TM-REP-XXXMDINT = SM4REC.XXXMDINT; /* middle initial*/
      KB0TM001.KB0TM-REP-XXXLSTNM = SM4REC.XXXLSTNM; /* last name*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* rep not found*/
        set KB0TM001.SM4REPID cursor, bold;
        converseLib.validationFailed(150); /* invalid rep id*/
        KBWREC.KBWERRFL = "Y";
        KB0TM001.KB0TM-REP-XXXFSTNM = " "; /* first name*/
        KB0TM001.KB0TM-REP-XXXMDINT = " "; /* middle initial*/
        KB0TM001.KB0TM-REP-XXXLSTNM = " "; /* last name*/
      end
    end
  end
  ;
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0TM001.YSBCD == " ")
      KB0TM001.YSBDESC = " ";
    else
      if (KB0TM001.YSBCD == "*") /* all ysb's*/
        KB0TM001.YSBDESC = "ALL YSBS";
      else
        if (KB0TM001.YSBCD in YSBTBL.YSBCD)
          KB0TM001.YSBDESC = YSBTBL.YSBDESC[sysVar.arrayIndex];
        else
          set KB0TM001.YSBCD cursor, bold;
          converseLib.validationFailed(151); /* invalid ysb code*/
          KBWREC.KBWERRFL = "Y";
          KB0TM001.YSBDESC = " ";
        end
      end
    end
  end
  ;
  ;
  ;
end // end KB0T052

// EDIT EFFECTIVE DATE
Function KB0T055()
  ;
  ;
  XPKB031(); /* GET TODAYS DATE IN CCYYMMDD FORMAT*/
  ;
  ;
  if (TA2REC.TA2RTNCD == 0) /* ; valid date*/
    KBWREC.KBXXEDT = TA2REC.TA2GRGGN; /* ; set eff date*/
  end
  ;
  ;
end // end KB0T055

// Edit Selection
Function KB0T056()
  ;
  ;
  KBWREC.KUMSTRID = 0; /* ; reset w/s store id*/
  KBWREC.XNXCD = 0; /* ; reset w/s dept id*/
  ;
  KBWREC.KBWSUB1 = 5; /* ; set array subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of array*/
    if (KB0TM001.KB0TMOPT[KBWSUB1] == "*")
      KB0TM001.KB0TMOPT[KBWSUB1] = " "; /* reset options*/
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscrpt*/
  end
  ;
  KBWREC.KBWSUB1 = 5; /* ; set array subscript*/
  KBWREC.KBWCNT = 0; /* ; reset counter*/
  ;
  while (KBWREC.KBWSUB1 > 0) /* ; until top of array*/
    if (KB0TM001.KB0TMOPT[KBWSUB1] != " ") /* ; option was selected*/
      KBWREC.KBWCNT = KBWREC.KBWCNT + 1; /* ; increment counter*/
      set KB0TM001.KB0TMOPT[KBWSUB1] bold, cursor;
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1; /* ; save array position*/
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscrpt*/
  end
  ;
  if (KBWREC.KBWCNT == 0) /* ; no selection*/
    set KB0TM001.KB0TMOPT[1] cursor, bold;
    KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
    converseLib.validationFailed(139); /* ; one option required*/
  else
    if (KBWREC.KBWCNT > 1) /* ; duplicate selection*/
      KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
      converseLib.validationFailed(60); /* ; one option only*/
    else
      if (KB0TM001.KB0TMOPT[KBWSUB2] != "S")
        KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
        converseLib.validationFailed(105); /* ; must use 's' to select*/
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors yet*/
    KBWREC.KBWSUB1 = 5; /* ; set array subscript*/
    while (KBWREC.KBWSUB1 > 0) /* ; until top of array*/
      set KB0TM001.KB0TMOPT[KBWSUB1] initialAttributes; /* reset attributes*/
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscrpt*/
    end
    ;
    if (KB0TM001.KB0TMOPT[5] == "S")
      COMMAREA.CATOAP = "KB0L"; /* ; transfer to view attachments*/
      KB0T091(); /* ; save current map*/
      KB0T007(); /* ; do the transfer thing...*/
      KB0TM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      KBWREC.KBWERRFL = "Y";
    else
      KB0T060(); /* ; edit cmpny option*/
    end
    ;
  end
  ;
  ;
end // end KB0T056

// edit mail level code.
Function KB0T057()
  ;
  ;
  KB0TM001.YMLDESC = " ";
  ;
  if (KB0TM001.YMLCD == " ")
    set KB0TM001.YMLCD cursor, bold;
    converseLib.validationFailed(100); /* mail level code required*/
    KBWREC.KBWERRFL = "Y";
    KBWREC.YMLCD = " "; /* reset ymlcd*/
  else
    if (KB0TM001.YMLCD in YMLTBL.YMLCD
     && KB0TM001.YMLCD != "99")
      KB0TM001.YMLDESC = YMLTBL.YMLDESC[sysVar.arrayIndex];
      KBWREC.YMLCD = KB0TM001.YMLCD;
    else
      KBWREC.KBWSPLIT = KB0TM001.YMLCD;
      ;
      if (KBWREC.KBWSPLT1 != "?"
       && KBWREC.KBWSPLT2 != "?")
        set KB0TM001.YMLCD cursor, bold;
        converseLib.validationFailed(101); /* invalid mail code*/
        KBWREC.KBWERRFL = "Y";
      else
        ;
        KBWREC.KBWTBLID = "ML"; /* ; set table name*/
        COMMAREA.CATOAP = "KB0U";
        ;
        KB0T091(); /* save current map*/
        KB0T007(); /* do the transfer thing...*/
        ;
        set KB0TM001.YMLCD cursor, bold;
        KB0TM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
        COMMAREA.CAUSERA = " ";
        KBWREC.KBWERRFL = "Y";
        KBWREC.KBWTBLID = " ";
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
  ;
  ;
end // end KB0T057

// EDIT COMPANY OPTIONS
Function KB0T060()
  ;
  ;
  ;
  if (KBWREC.KBWSUB2 == 1) /* ; all stores/depts*/
    KB0T061();
  else
    if (KBWREC.KBWSUB2 == 2) /* ; all depts for store*/
      KB0T062();
    else
      if (KBWREC.KBWSUB2 == 3) /* ; all stores for dept*/
        KB0T063();
      else
        KB0T064(); /* ; specific store/dept*/
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KB0T065(); /* ; edit dept for numerics*/
    KB0T066(); /* ; edit store for numerics*/
    ;
    if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
      if (KBWREC.XNXCD != -1) /* ; department was entered*/
        KB0T069(); /* ; validate dept id*/
      end
      ;
      if (KBWREC.KUMSTRID != -1) /* store id entered*/
        KB0T067(); /* ; validate company/store id*/
      else
        KB0T068(); /* ; validate cmpny id*/
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KBWREC.KUCCOID = KB0TM001.KB0TMCID; /* save company in kbwrec*/
  end
  ;
end // end KB0T060

// ALL STORES/DEPTS FOR COMPANY
Function KB0T061()
  ;
  ;
  if (KB0TM001.KB0TMDID != " ") /* ; cmpny dept id entered*/
    set KB0TM001.KB0TMDID cursor, bold;
    set KB0TM001.KB0TMOPT[1] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* selection and data don't match*/
  end
  ;
  if (KB0TM001.KB0TMSID != " ") /* ; store id entered*/
    set KB0TM001.KB0TMSID cursor, bold;
    set KB0TM001.KB0TMOPT[1] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* selection and data don't match*/
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0TM001.KB0TMCID == 0) /* ; no cmpny id*/
      set KB0TM001.KB0TMCID cursor, bold;
      set KB0TM001.KB0TMOPT[1] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30); /* company id is required*/
    end
  end
  ;
  ;
end // end KB0T061

// ALL DEPTS FOR COMPANY/STORE
Function KB0T062()
  ;
  ;
  if (KB0TM001.KB0TMDID != " ") /* ; cmpny dept id entered*/
    set KB0TM001.KB0TMDID cursor, bold;
    set KB0TM001.KB0TMOPT[2] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* selection and data don't match*/
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0TM001.KB0TMSID == " ") /* ; no cmpny store id*/
      set KB0TM001.KB0TMSID cursor, bold;
      set KB0TM001.KB0TMOPT[2] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(32); /* store id is required*/
    end
    ;
    if (KB0TM001.KB0TMCID == 0) /* ; no cmpny id*/
      set KB0TM001.KB0TMCID cursor, bold;
      set KB0TM001.KB0TMOPT[2] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30); /* company id is required*/
    end
  end
  ;
  ;
end // end KB0T062

// ALL STORES FOR COMPANY/DEPT
Function KB0T063()
  ;
  ;
  if (KB0TM001.KB0TMSID != " ") /* ; cmpny store id entered*/
    set KB0TM001.KB0TMSID cursor, bold;
    set KB0TM001.KB0TMOPT[3] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* selection and data don't match*/
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0TM001.KB0TMDID == " ") /* ; no cmpny dept id*/
      set KB0TM001.KB0TMDID cursor, bold;
      set KB0TM001.KB0TMOPT[3] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(63); /* department id is required*/
    end
    ;
    if (KB0TM001.KB0TMCID == 0) /* ; no cmpny id*/
      set KB0TM001.KB0TMCID cursor, bold;
      set KB0TM001.KB0TMOPT[3] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30); /* company id is required*/
    end
  end
  ;
  ;
end // end KB0T063

// SPECIFIC COMPANY/STORE/DEPT
Function KB0T064()
  ;
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0TM001.KB0TMDID == " ") /* ; no cmpny dept id*/
      set KB0TM001.KB0TMDID cursor, bold;
      set KB0TM001.KB0TMOPT[4] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(63); /* department id is required*/
    end
    ;
    if (KB0TM001.KB0TMSID == " ") /* ; no cmpny store id*/
      set KB0TM001.KB0TMSID cursor, bold;
      set KB0TM001.KB0TMOPT[4] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(32); /* store id is required*/
    end
    ;
    if (KB0TM001.KB0TMCID == 0) /* ; no cmpny id*/
      set KB0TM001.KB0TMCID cursor, bold;
      set KB0TM001.KB0TMOPT[4] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30); /* company id is required*/
    end
  end
  ;
  ;
end // end KB0T064

// EDIT CMPNY DEPT FOR NUMERICS
Function KB0T065()
  ;
  ;
  if (KB0TM001.KB0TMDID == " ") /* ; no dept id entered*/
    KBWREC.XNXCD = -1; /* set for all depts*/
  else
    XP0AW01.XP0AWFLD = KB0TM001.KB0TMDID;
    ;
    XP0A001(); /* ; edit for non-numerics*/
    ;
    if (XP0AW01.XP0AWEFL == "Y") /* ; non-numeric characters*/
      set KB0TM001.KB0TMDID cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(64);
    else
      KBWREC.KBWDPTCH = KB0TM001.KB0TMDID;
      KBWREC.XNXCD = KBWREC.KBWDPTID;
    end
  end
  ;
  ;
end // end KB0T065

// EDIT CMPNY STORE FOR NUMERICS
Function KB0T066()
  ;
  ;
  if (KB0TM001.KB0TMSID == " ") /* ; no store id entered*/
    KBWREC.KUMSTRID = -1; /* ; set for all stores*/
  else
    XP0AW01.XP0AWFLD = KB0TM001.KB0TMSID;
    ;
    XP0A001(); /* ; edit for non-numerics*/
    ;
    if (XP0AW01.XP0AWEFL == "Y") /* ; non-numeric characters*/
      set KB0TM001.KB0TMSID cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(33);
    else
      KBWREC.KBWSTRCH = KB0TM001.KB0TMSID;
      KBWREC.KUMSTRID = KBWREC.KBWSTRID;
    end
  end
  ;
  ;
end // end KB0T066

// EDIT CMPNY/STORE ID
Function KB0T067()
  ;
  ;
  set KUMREC empty;
  ;
  KUMREC.KUCCOID = KB0TM001.KB0TMCID;
  KUMREC.KUMSTRID = KBWREC.KBWSTRID;
  ;
  XPKB020(); /* ; call io0340 - 's '*/
  ;
  if (KBWREC.KBWSFND == "N") /* ; store rec not found*/
    set KB0TM001.KB0TMSID cursor, bold; /* ; hightlight store id*/
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(34);
    ;
    KB0T068(); /* ; edit cmpny id*/
  end
  ;
  ;
end // end KB0T067

// EDIT CMPNY ID
Function KB0T068()
  ;
  ;
  set KUCREC empty;
  ;
  KUCREC.KUCCOID = KB0TM001.KB0TMCID;
  ;
  XPKB021(); /* ; call io0240 - 's '*/
  ;
  if (KBWREC.KBWCFND == "N") /* ; cust rec not found*/
    set KB0TM001.KB0TMCID cursor, bold; /* ; hightlight cmpny id*/
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(31);
  end
  ;
  ;
end // end KB0T068

// EDIT CMPNY/dept ID
Function KB0T069()
  ;
  ;
  set KUJREC empty;
  ;
  KUJREC.KUCCOID = KB0TM001.KB0TMCID;
  KUJREC.XNXCD = KBWREC.XNXCD;
  ;
  KBWREC.KBWDFND = "N"; /* ; reset department found flag*/
  set SQLCA empty;
  ;
  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* read department table*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    KBWREC.KBWDFND = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; department record not found*/
      /* NEXT SENTENCE*/
    else
      KBWREC.KBWXIDCO = KUJREC.KUCCOID;
      KBWREC.KBWXIDST = KUJREC.XNXCD;
      ;
      set TA1REC empty;
      ;
      TA1REC.TA1LOCAT[1] = "KB0T069";
      TA1REC.TA1LOCAT[2] = "IO0290";
      TA1REC.TA1LOCAT[3] = "S";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VDEPT001";
      TA1REC.TA1TBLKE = KBWREC.KBWSTRKE;
      ;
      XPKB900();
    end
  end
  ;
  if (KBWREC.KBWDFND == "N") /* ; department id not found*/
    set KB0TM001.KB0TMDID cursor, bold; /* ; hightlight department id*/
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(135); /* ; dept not found*/
    ;
    KB0T068(); /* ; edit cmpny id*/
  end
  ;
  ;
end // end KB0T069

// SEND/RECEIVE KB0TM001
Function KB0T080()
  ;
  ;
  converse KB0TM001 ;
  ;
  KBWREC.XXXMAPNM = "KB0TM001";
  ;
  if (KBWREC.KBWBFND != "N")
    KB0T081(); /* SET SCREEN FIELDS NORMAL*/
  end
  ;
  ;
end // end KB0T080

// SET KB0TM001 FIELDS NORMAL
Function KB0T081()
  ;
  ;
  ;
  set KB0TM001.SM4REPID cursor, normal;
  set KB0TM001.YSBCD normal;
  set KB0TM001.YMLCD normal;
  set KB0TM001.KB0TMOPT[1] normal;
  set KB0TM001.KB0TMOPT[2] normal;
  set KB0TM001.KB0TMOPT[3] normal;
  set KB0TM001.KB0TMOPT[4] normal;
  ;
  set KB0TM001.KB0TMCID normal;
  set KB0TM001.KB0TMSID normal;
  set KB0TM001.KB0TMDID normal;
  ;
  ;
end // end KB0T081

// MOVE W/S TO KB0TM001
Function KB0T090()
  ;
  ;
  set KB0TM001 initial; /* ; initialize screen*/
  ;
  KB0TM001.KB0TMDTE = VGVar.currentShortGregorianDate;
  KB0TM001.KBABUYID = KBWREC.KBABUYID;
  ;
  if (KBWREC.KBWBFND == "N") /* ; invalid buyer id*/
    converseLib.validationFailed(143);
    KBWREC.KBWERRFL = "Y";
  else
    KB0TM001.XXXFSTNM = KBAREC.XXXFSTNM;
    KB0TM001.XXXMDINT = KBAREC.XXXMDINT;
    KB0TM001.XXXLSTNM = KBAREC.XXXLSTNM;
    KB0TM001.XXXGNTNM = KBAREC.XXXGNTNM;
    ;
    if (KBWREC.KBWADDFL != "A") /* ; not in 'add' mode*/
      KB0TM001.KB0TM-PF18 = "18:DETACH "; /* ; set detach pfkey*/
    else
      KB0TM001.KB0TM-PF18 = " ";
    end
    ;
    if (COMMAREA.CAFROMAP == "KB0U" /* view corp tables*/
     || COMMAREA.CAFROMAP == "KB0L") /* view attachments*/
      ;
      if (COMMAREA.CAFROMAP == "KB0L")
        KB0TM001.KB0TMOPT[5] = "*";
        KBWREC.KBWASEL[5] = " ";
      else
        KB0TM001.KB0TMOPT[1] = KBWREC.KBWASEL[1];
        KB0TM001.KB0TMOPT[2] = KBWREC.KBWASEL[2];
        KB0TM001.KB0TMOPT[3] = KBWREC.KBWASEL[3];
        KB0TM001.KB0TMOPT[4] = KBWREC.KBWASEL[4];
      end
      ;
      COMMAREA.CAFROMAP = "KB0T"; /* reset from application*/
      KBWREC.KBWTBLID = " "; /* reset table name*/
      ;
      KB0TM001.KB0TMCID = KBWREC.KBWCOID;
      KB0TM001.KB0TMSID = KBWREC.KBWSTRCH;
      KB0TM001.KB0TMDID = KBWREC.KBWDPTCH;
      ;
      if (KBWREC.SM4REPID > 0)
        KB0TM001.SM4REPID = KBWREC.SM4REPID;
        set SM4REC empty; /* init rep record*/
        SM4REC.SM4REPID = KBWREC.SM4REPID;
        KB0T020(); /* get rep name*/
        if (SQLCA.VAGen_SQLCODE == 0) /* rep found*/
          KB0TM001.KB0TM-REP-XXXFSTNM = SM4REC.XXXFSTNM;
          KB0TM001.KB0TM-REP-XXXMDINT = SM4REC.XXXMDINT;
          KB0TM001.KB0TM-REP-XXXLSTNM = SM4REC.XXXLSTNM;
        end
      end
      ;
      set KB0TM001.YMLCD cursor;
      KB0TM001.YMLCD = KBWREC.YMLCD;
      if (KB0TM001.YMLCD in YMLTBL.YMLCD
       && KB0TM001.YMLCD != "99")
        KB0TM001.YMLDESC = YMLTBL.YMLDESC[sysVar.arrayIndex];
      else
        KB0TM001.YMLDESC = " ";
      end
      ;
      KB0TM001.YSBCD = KBWREC.YSBCD;
      if (KB0TM001.YSBCD in YSBTBL.YSBCD
       && KB0TM001.YSBCD != "99")
        KB0TM001.YSBDESC = YSBTBL.YSBDESC[sysVar.arrayIndex];
      else
        KB0TM001.YSBDESC = " ";
      end
      ;
    end
  end
  ;
  ;
end // end KB0T090

// Move KB0TM001 to KBWREC
Function KB0T091()
  ;
  KBWREC.SM4REPID = KB0TM001.SM4REPID;
  KBWREC.YSBCD = KB0TM001.YSBCD;
  ;
  KBWREC.KBWSPLIT = KB0TM001.YMLCD;
  if (KBWREC.KBWSPLT1 == "?" /* if requesting a list of mail level*/
   || KBWREC.KBWSPLT2 == "?") /* codes, don't overlay old value*/
  /* next sentence                 /* with the '?'.*/
  else
    KBWREC.YMLCD = KB0TM001.YMLCD;
  end
  ;
  KBWREC.KBWASEL[1] = KB0TM001.KB0TMOPT[1];
  KBWREC.KBWASEL[2] = KB0TM001.KB0TMOPT[2];
  KBWREC.KBWASEL[3] = KB0TM001.KB0TMOPT[3];
  KBWREC.KBWASEL[4] = KB0TM001.KB0TMOPT[4];
  KBWREC.KBWASEL[5] = KB0TM001.KB0TMOPT[5];
  ;
  KBWREC.KBWCOID = KB0TM001.KB0TMCID; /* company id*/
  KBWREC.KBWSTRCH = KB0TM001.KB0TMSID; /* store id*/
  KBWREC.KBWDPTCH = KB0TM001.KB0TMDID; /* department id*/
  ;
  ;
end // end KB0T091

// LIST ACTIVE REPS
Function KB0T110()
  ;
  ;
  KB0T120(); /* ; initialize*/
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KBWREC.KBWRETNF = "N"; /* ; set return flag*/
    while (KBWREC.KBWRETNF == "N") /* ; until return flag = y*/
      KB0T150(); /* ; mainline*/
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* completed request with no errors*/
    KBWREC.KBWSUB1 = 1; /* reset options*/
    while (KBWREC.KBWSUB1 <= 4)
      if (KB0TM001.KB0TMOPT[KBWSUB1] == "S")
        KB0TM001.KB0TMOPT[KBWSUB1] = "*";
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
    end
  end
  ;
end // end KB0T110

// INITIALIZE - LIST ACTIVE REPS
Function KB0T120()
  ;
  set KB0TW02 empty;
  ;
  KB0T130(); /* ; load temp storage*/
  ;
  if (KBWREC.KBWERRFL != "Y") /* ; no errors*/
    KB0TW01.KB0TW-CURR-PAGE = 1; /* ; init current page*/
    KB0T145(); /* ; move temp storage to kb0tm002*/
  end
  ;
end // end KB0T120

// LOAD TEMP STORAGE
Function KB0T130()
  ;
  KB0TW-SUB = 0; /* ; line subscript*/
  ;
  KB0T132(); /* ; select active reps*/
  ;
  KB0T133(); /* ; fetch first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* ; no active reps found*/
    converseLib.validationFailed(152);
    KBWREC.KBWERRFL = "Y";
    set KB0TM001.SM4REPID cursor;
  else
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful database call*/
      KB0T140(); /* ; move to temp storage*/
      KB0T133(); /* ; fetch next row*/
    end
    if (KB0TW01.KB0TW-SUB > 0)
      KB0T210(); /* ; write partial page to ts*/
    end
  end
  ;
  /* close cursor*/
  ;
  KBLREC.KBLTRAN = "C4"; /* ; close cursor*/
  XPKB055(); /* ; call kb1040*/
  ;
end // end KB0T130

// SELECT ACTIVE REPS
Function KB0T132()
  ;
  ;
  set KBLREC empty; /* ; record for kb1040*/
  set KUGREC empty; /* ; init curep rec*/
  ;
  KBLREC.KBLTRAN = "S4"; /* select rep/ysb to process*/
  KBLREC.SM4REPID = -1; /* select all reps*/
  KBLREC.KUCCOID = KBWREC.KUCCOID; /* company id*/
  KBLREC.KUMSTRID = KBWREC.KUMSTRID; /* store id*/
  KBLREC.XNXCD = KBWREC.XNXCD; /* dept id*/
  KBLREC.KBLDATE = TA2REC.TA2GRGGN; /* current date*/
  ;
  ;
  XPKB055(); /* call kb1040*/
  ;
  ;
end // end KB0T132

// FETCH ACTIVE REPS
Function KB0T133()
  ;
  ;
  set KUGREC empty; /* ;set curep record empty*/
  set KBLREC empty; /* ;set pass  record empty*/
  ;
  KBLREC.KBLTRAN = "N4"; /* fetch next rep/ysb*/
  ;
  XPKB055(); /* call kb1040*/
  ;
  ;
end // end KB0T133

// MOVE REP TO TEMP STORAGE
Function KB0T140()
  ;
  KB0TW01.KB0TW-SUB = KB0TW01.KB0TW-SUB + 1;
  ;
  KB0TW02.SM4REPID[KB0TW-SUB] = KUGREC.SM4REPID;
  KB0TW02.SM1AGYID[KB0TW-SUB] = KUGREC.SM1AGYID;
  KB0TW02.YSBCD[KB0TW-SUB] = KUGREC.YSBCD;
  ;
  if (KUGREC.YSBCD in YSBTBL.YSBCD)
    KB0TW02.YSBDESC[KB0TW-SUB] = YSBTBL.YSBDESC[sysVar.arrayIndex];
  else
    KB0TW02.YSBDESC[KB0TW-SUB] = "  ";
  end
  ;
  set SM4REC empty; /* init rep rec*/
  SM4REC.SM4REPID = KUGREC.SM4REPID;
  ;
  KB0T020(); /* ; select rep*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    KB0TW02.XXXFSTNM[KB0TW-SUB] = SM4REC.XXXFSTNM; /* first name*/
    KB0TW02.XXXLSTNM[KB0TW-SUB] = SM4REC.XXXLSTNM; /* last name*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* rep not found*/
      KB0TW02.XXXFSTNM[KB0TW-SUB] = " "; /* first name*/
      KB0TW02.XXXLSTNM[KB0TW-SUB] = " "; /* last name*/
    end
  end
  ;
  ;
  if (KB0TW01.KB0TW-SUB == 13) /* ; page is full*/
    KB0T210(); /* ; add page to temp storage*/
  end
  ;
end // end KB0T140

// MOVE TEMP STORAGE TO MAP
Function KB0T145()
  ;
  set KB0TM002 initial; /* ; initialize screen*/
  ;
  KB0TM002.KB0TM-CURRENT-DT = VGVar.currentShortGregorianDate;
  KB0TM002.KUCCOID = KB0TM001.KB0TMCID; /* company id*/
  KB0TM002.KB0TMSID = KB0TM001.KB0TMSID; /* store id*/
  KB0TM002.KB0TMDID = KB0TM001.KB0TMDID; /* department id*/
  ;
  if (KB0TM001.KB0TMOPT[1] == "S")
    KB0TM002.KB0TM-SELECTION-LITERAL = "ALL STORES, DEPTS FOR:";
  else
    if (KB0TM001.KB0TMOPT[2] == "S")
      KB0TM002.KB0TM-SELECTION-LITERAL = "ALL DEPTS W/I STORE FOR:";
    else
      if (KB0TM001.KB0TMOPT[3] == "S")
        KB0TM002.KB0TM-SELECTION-LITERAL = "ALL STORES W/I DEPT FOR:";
      else
        if (KB0TM001.KB0TMOPT[4] == "S")
          KB0TM002.KB0TM-SELECTION-LITERAL = "A SPECIFIC STORE, DEPT FOR:";
        end
      end
    end
  end
  ;
  KB0T200(); /* ; read temp storage page*/
  ;
  KB0TW01.KB0TW-SUB = 1;
  while (KB0TW-SUB <= 13) /* move reps from temp storage to map*/
    if (KB0TW02.SM4REPID[KB0TW-SUB] > 0)
      KB0TM002.KB0TM-SELECT[KB0TW-SUB] = KB0TW02.KB0TW-SELECT[KB0TW-SUB];
      KB0TM002.SM4REPID[KB0TW-SUB] = KB0TW02.SM4REPID[KB0TW-SUB];
      KB0TM002.XXXFSTNM[KB0TW-SUB] = KB0TW02.XXXFSTNM[KB0TW-SUB];
      KB0TM002.XXXLSTNM[KB0TW-SUB] = KB0TW02.XXXLSTNM[KB0TW-SUB];
      KB0TM002.SM1AGYID[KB0TW-SUB] = KB0TW02.SM1AGYID[KB0TW-SUB];
      KB0TM002.YSBCD[KB0TW-SUB] = KB0TW02.YSBCD[KB0TW-SUB];
      KB0TM002.YSBDESC[KB0TW-SUB] = KB0TW02.YSBDESC[KB0TW-SUB];
      ;
      if (KB0TW01.KB0TW-SUB == 1) /* ; first line on map*/
        set KB0TM002.KB0TM-SELECT[KB0TW-SUB] cursor, normal;
      else
        set KB0TM002.KB0TM-SELECT[KB0TW-SUB] normal;
      end
      ;
    end
    ;
    KB0TW01.KB0TW-SUB = KB0TW01.KB0TW-SUB + 1;
  end
  ;
  KB0TM002.KBWPAGE = KB0TW01.KB0TW-CURR-PAGE;
  KB0TM002.KBWTOTPG = KB0TW01.KB0TW-MAX-PAGE;
end // end KB0T145

// MAINLINE - LIST ACTIVE REPS
Function KB0T150()
  ;
  KB0T160(); /* ; converse kb0tM002*/
  ;
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KB0T230(); /* ; purge temp storage*/
    KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
    KBWREC.KBWERRFL = "Y"; /* ; set flag (option was not completed)*/
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is enter)
  /* next sentence*/
    else
      converseLib.validationFailed(7); /* invalid pfkey*/
      KBWREC.KBWERRFL = "Y";
    end
  end
  ;
  ;
  if (KBWREC.KBWERRFL == "N" /* no errors*/
   && KBWREC.KBWRETNF == "N") /* ; don't return yet*/
    ;
    KB0T165(); /* ; edit kb0tM002*/
    ;
    if (KBWREC.KBWERRFL == "N") /* still no errors*/
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || KB0TM002.KBWPAGE != KB0TW01.KB0TW-CURR-PAGE)
        KB0T170(); /* build new page*/
      else
        KB0T180(); /* attach accounts for selected reps*/
        KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
      end
    end
  end
  ;
end // end KB0T150

// CONVERSE MAP (KB0TM002)
Function KB0T160()
  converse KB0TM002 ;
  ;
  ;
  KBWREC.XXXMAPNM = "KB0TM002"; /* save current mapname*/
  ;
  set KB0TM002.KBWPAGE cursor, normal;
  ;
  KBWREC.KBWSUB1 = 13; /* ; set map subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of map*/
    ;
    if (KB0TM002.SM4REPID[KBWSUB1] != 0) /* ; row has rep id*/
      set KB0TM002.KB0TM-SELECT[KBWSUB1] cursor, normal;
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0T160

// EDIT MAP (KB0TM002)
Function KB0T165()
  ;
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  KB0TW01.KB0TW-SUB = 13;
                                  /* edit select byte*/
  while (KB0TW01.KB0TW-SUB != 0)
    if (KB0TM002.KB0TM-SELECT[KB0TW-SUB] != " "
     && KB0TM002.KB0TM-SELECT[KB0TW-SUB] != "S")
      converseLib.validationFailed(105); /* must enter 's' to select*/
      KBWREC.KBWERRFL = "Y";
      set KB0TM002.KB0TM-SELECT[KB0TW-SUB] cursor, bold;
    end
    KB0TW01.KB0TW-SUB = KB0TW01.KB0TW-SUB - 1;
  end
  ;
  if (converseVar.eventKey is pf7)
    if (KB0TM002.KBWPAGE == 1)
      converseLib.validationFailed(8); /* already at top*/
      set KB0TM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0TM002.KBWPAGE != KB0TW01.KB0TW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0TM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end
  ;
  if (converseVar.eventKey is pf8)
    if (KB0TM002.KBWPAGE == KB0TM002.KBWTOTPG)
      converseLib.validationFailed(9); /* already at bottom*/
      set KB0TM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0TM002.KBWPAGE != KB0TW01.KB0TW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0TM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0TM002.KBWPAGE == 0
     || KB0TM002.KBWPAGE > KB0TM002.KBWTOTPG)
      converseLib.validationFailed(48); /* invalid page number*/
      set KB0TM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KB0T175(); /* check selections & update ts*/
  end
  ;
end // end KB0T165

// BUILD NEW PAGE
Function KB0T170()
  ;
  /* determine new page number*/
  ;
  if (converseVar.eventKey is pf7)
    KB0TW01.KB0TW-CURR-PAGE = KB0TW01.KB0TW-CURR-PAGE - 1;
  else
    if (converseVar.eventKey is pf8)
      KB0TW01.KB0TW-CURR-PAGE = KB0TW01.KB0TW-CURR-PAGE + 1;
    else
      KB0TW01.KB0TW-CURR-PAGE = KB0TM002.KBWPAGE;
    end
  end
  ;
  KB0T200(); /* read temporary storage*/
  ;
  KB0T145(); /* move temp storage to map*/
  ;
end // end KB0T170

// CHECK SELECTIONS & UPDATE TS
Function KB0T175()
  ;
  KB0TW01.KB0TW-CHANGE-FL = "N";
  ;
  KB0TW01.KB0TW-SUB = 1; /* ; reset map subscript*/
  while (KB0TW01.KB0TW-SUB <= 13) /* ; until end of map*/
    ;
        /* if select byte changes move it to temp storage record*/
    ;
    if (KB0TM002.KB0TM-SELECT[KB0TW-SUB] != KB0TW02.KB0TW-SELECT[KB0TW-SUB])
      KB0TW02.KB0TW-SELECT[KB0TW-SUB] = KB0TM002.KB0TM-SELECT[KB0TW-SUB];
      KB0TW01.KB0TW-CHANGE-FL = "Y";
    end
    KB0TW01.KB0TW-SUB = KB0TW01.KB0TW-SUB + 1;
  end
  ;
   /* if any changes were made, update the temp storage page*/
  ;
  if (KB0TW01.KB0TW-CHANGE-FL == "Y")
    KB0T220(); /* update temp storage page*/
  end
  ;
end // end KB0T175

// ATTACH ACCTS FOR SELECTED REPS
Function KB0T180()
  ;
  XPKB031(); /* ; get current date/time*/
  ;
  KB0TW01.KB0TW-SELECT-CNT = 0;
  KB0TW01.KB0TW-CURR-PAGE = 1; /* ; set temp storage page*/
  ;
  /* process all temporary storage records*/
  ;
  while (KB0TW01.KB0TW-CURR-PAGE <= KB0TW01.KB0TW-MAX-PAGE)
    ;
    KB0T200(); /* ; read temp storage page*/
    KB0TW01.KB0TW-SUB = 1; /* ; reset account subscript*/
    ;
    while (KB0TW01.KB0TW-SUB <= 13) /* ; until page processed*/
      ;
      if (KB0TW02.KB0TW-SELECT[KB0TW-SUB] == "S") /* rep selected*/
        KB0TW01.KB0TW-SELECT-CNT = KB0TW01.KB0TW-SELECT-CNT + 1;
        if (KB0TW01.KB0TW-SELECT-CNT == 1)
          KB0TW01.KB0TW-SAVE-SM4REPID = KB0TW02.SM4REPID[KB0TW-SUB];
          KB0TW01.KB0TW-SAVE-YSBCD = KB0TW02.YSBCD[KB0TW-SUB];
        end
        ;
        KB0T182(); /* ; select accounts to attach*/
        KB0T183(); /* ; fetch first account*/
        while (SQLCA.VAGen_SQLCODE == 0) /* ; account(s) found*/
          KB0T017(); /* ; add kbxrec*/
          KB0T018(); /* ; write audit for add*/
          KB0T183(); /* ; fetch next account*/
        end
        KBLREC.KBLTRAN = "C5"; /* close cursor*/
        XPKB055(); /* call kb1040*/
      end
      KB0TW01.KB0TW-SUB = KB0TW01.KB0TW-SUB + 1;
    end
    KB0TW01.KB0TW-CURR-PAGE = KB0TW01.KB0TW-CURR-PAGE + 1;
  end
  ;
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* ; commit database changes*/
  ;
  KB0T230(); /* ; purge temporary storage*/
  ;
end // end KB0T180

// SELECT ACCOUNTS TO ATTACH
Function KB0T182()
  ;
  ;
  set KBLREC empty; /* ; record for kb1040*/
  set KUGREC empty; /* ; init curep rec*/
  ;
  KBLREC.KBLTRAN = "S5"; /* select accounts to attach*/
  KBLREC.KBABUYID = KBWREC.KBABUYID; /* buyer id*/
  KBLREC.SM4REPID = KB0TW02.SM4REPID[KB0TW-SUB]; /* rep id*/
  KBLREC.YSBCD = KB0TW02.YSBCD[KB0TW-SUB]; /* ysb code*/
  KBLREC.KUCCOID = KBWREC.KUCCOID; /* company id*/
  KBLREC.KUMSTRID = KBWREC.KUMSTRID; /* store id*/
  KBLREC.XNXCD = KBWREC.XNXCD; /* dept id*/
  KBLREC.KBLDATE = TA2REC.TA2GRGGN; /* current date*/
  ;
  XPKB055(); /* call kb1040*/
  ;
  ;
end // end KB0T182

// FETCH ACCOUNTS
Function KB0T183()
  ;
  ;
  set KUGREC empty; /* ;set curep record empty*/
  set KBLREC empty; /* ;set pass  record empty*/
  ;
  KBLREC.KBLTRAN = "N5"; /* fetch next account*/
  ;
  XPKB055(); /* call kb1040*/
  ;
  ;
end // end KB0T183

// GET REP & YSB DESCRIPTIONS
Function KB0T190()
  ;
  if (KBWREC.KBWERRFL == "Y")
    KB0TM001.KB0TM-REP-XXXFSTNM = " ";
    KB0TM001.KB0TM-REP-XXXLSTNM = " ";
    KB0TM001.KB0TM-REP-XXXMDINT = " ";
    KB0TM001.YSBDESC = " ";
  else
    /* if only one rep was selected,  get rep name and ysb description*/
    /* else use 'multiple' as the description*/
    ;
    if (KB0TW01.KB0TW-SELECT-CNT == 1) /* only one rep selected*/
      set SM4REC empty;
      SM4REC.SM4REPID = KB0TW01.KB0TW-SAVE-SM4REPID;
      KB0TM001.SM4REPID = KB0TW01.KB0TW-SAVE-SM4REPID;
      ;
      call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
        KB0TM001.KB0TM-REP-XXXLSTNM = SM4REC.XXXLSTNM;
        KB0TM001.KB0TM-REP-XXXFSTNM = SM4REC.XXXFSTNM;
        KB0TM001.KB0TM-REP-XXXMDINT = SM4REC.XXXMDINT;
      else
        KB0TM001.KB0TM-REP-XXXLSTNM = " ";
        KB0TM001.KB0TM-REP-XXXFSTNM = " ";
        KB0TM001.KB0TM-REP-XXXMDINT = " ";
      end
    /* get ysb description*/
      ;
      KB0TM001.YSBCD = KB0TW01.KB0TW-SAVE-YSBCD;
      if (KB0TW01.KB0TW-SAVE-YSBCD in YSBTBL.YSBCD)
        KB0TM001.YSBDESC = YSBTBL.YSBDESC[sysVar.arrayIndex];
      else
        KB0TM001.YSBDESC = "UNKNOWN";
      end
      ;
    else
      ;
      KB0TM001.KB0TM-REP-XXXFSTNM = "MULTIPLE REPS";
      KB0TM001.KB0TM-REP-XXXLSTNM = " ";
      KB0TM001.KB0TM-REP-XXXMDINT = " ";
      KB0TM001.YSBDESC = "MULTIPLE YSBS";
    end
  end
  ;
  ;
  ;
end // end KB0T190

// GET REP & YSB DESCRIPTIONS
Function KB0T195()
  ;
  if (KBWREC.KBWERRFL == "Y")
    KB0TM001.KB0TM-REP-XXXLSTNM = " ";
    KB0TM001.KB0TM-REP-XXXFSTNM = " ";
    KB0TM001.KB0TM-REP-XXXMDINT = " ";
    KB0TM001.YSBDESC = " ";
  else
    ;
    /* get rep name*/
    ;
    if (KB0TM001.SM4REPID == 0) /* rep was not entered*/
      KB0TM001.KB0TM-REP-XXXLSTNM = " ";
      KB0TM001.KB0TM-REP-XXXFSTNM = " ";
      KB0TM001.KB0TM-REP-XXXMDINT = " ";
    else
      set SM4REC empty;
      SM4REC.SM4REPID = KB0TM001.SM4REPID;
      ;
      call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
        KB0TM001.KB0TM-REP-XXXLSTNM = SM4REC.XXXLSTNM;
        KB0TM001.KB0TM-REP-XXXFSTNM = SM4REC.XXXFSTNM;
        KB0TM001.KB0TM-REP-XXXMDINT = SM4REC.XXXMDINT;
      else
        KB0TM001.KB0TM-REP-XXXLSTNM = " ";
        KB0TM001.KB0TM-REP-XXXFSTNM = " ";
        KB0TM001.KB0TM-REP-XXXMDINT = " ";
      end
    end
    ;
    /* get ysb description*/
    ;
    if (KB0TM001.YSBCD == " ") /* no ysb was entered*/
      KB0TM001.YSBDESC = " ";
    else
      if (KB0TM001.YSBCD == "*") /* all ysbs*/
        KB0TM001.YSBDESC = "ALL YSBS";
      else
        if (KB0TM001.YSBCD in YSBTBL.YSBCD)
          KB0TM001.YSBDESC = YSBTBL.YSBDESC[sysVar.arrayIndex];
        else
          KB0TM001.YSBDESC = "UNKNOWN";
        end
      end
    end
  end
  ;
  ;
end // end KB0T195

// READ TEMP STORAGE
Function KB0T200()
  ;
  set KB0TW02 empty;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KB0T"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = KB0TW01.KB0TW-CURR-PAGE; /* current page*/
  KB0TW02.KB0TW-TS-LENGTH = 1031; /* length of record*/
  ;
  call "TA0050" (KB0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0T200";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0TW02.KB0TW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE READING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
    ;
  end
end // end KB0T200

// ADD TEMP STORAGE
Function KB0T210()
  ;
  set TA5REC empty;
  TA5REC.TA5APPID = "KB0T"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  KB0TW02.KB0TW-TS-LENGTH = 1031; /* length of record*/
  ;
  call "TA0050" (KB0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    KB0TW01.KB0TW-MAX-PAGE = TA5REC.TA5TSQIX; /* max page number*/
    set KB0TW02 empty; /* reinitialize page*/
    KB0TW01.KB0TW-SUB = 0; /* reinitialize line subscript*/
  else
    TA1REC.TA1LOCAT[1] = "KB0T210";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0TW02.KB0TW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE ADDING TO TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
  end
end // end KB0T210

// UPDATE TEMP STORAGE
Function KB0T220()
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KB0T"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = KB0TW01.KB0TW-CURR-PAGE; /* current page*/
  KB0TW02.KB0TW-TS-LENGTH = 1031; /* length of record*/
  ;
  call "TA0050" (KB0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0T220";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0TW02.KB0TW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE UPDATING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
    ;
  end
end // end KB0T220

// PURGE TEMP STORAGE
Function KB0T230()
  set TA5REC empty;
  TA5REC.TA5APPID = "KB0T"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (KB0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
   /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0T230";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0TW02.KB0TW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE PURGING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
  end
end // end KB0T230

// CALL KB1040 (CUREP)
Function XPKB055()
  ;
  set SQLCA empty;
  ;
  call "KB1040" (KBLREC, SQLCA, KBAREC, KUGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* ; bad return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    KBWREC.KBWXIDBY = KBAREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBLREC.KUCCOID;
    KBWREC.KBWXIDST = KBLREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBLREC.XNXCD;
    KBWREC.KBWXIDDT = 0;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "XPKB055";
    TA1REC.TA1LOCAT[2] = "KB1040";
    TA1REC.TA1LOCAT[3] = KBLREC.KBLGROUP;
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUREP01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
end // end XPKB055

//*** RECORD=KB0TW01 ****
// Working storage record for KB0D.  Detach Buyer Accounts.
// ***********************
Record KB0TW01 type basicRecord
  5 KB0TW-GROUP1 KB0TW-GROUP1 ; 
    10 KB0TW-MAX-PAGE KB0TW-MAX-PAGE ; 
    10 KB0TW-CURR-PAGE KB0TW-CURR-PAGE ; 
    10 KB0TW-CHANGE-FL KB0TW-CHANGE-FL ; 
    10 KB0TW-SUB KB0TW-SUB ; 
    10 KB0TW-SELECT-CNT KB0TW-SELECT-CNT ; 
    10 KB0TW-SAVE-SM4REPID KB0TW-SAVE-SM4REPID ; 
    10 KB0TW-SAVE-YSBCD KB0TW-SAVE-YSBCD ; 
    10 KB0TW-ACCT-MSG KB0TW-ACCT-MSG ; 
      15 KB0TW-ACCTS-ATTACHED KB0TW-ACCTS-ATTACHED ; 
      15 KB0TW-ACCT-MSGA KB0TW-ACCT-MSGA ; 
end // end KB0TW01

//*** RECORD=KB0TW02 ****
// Temporary storage record used to hold the reps for attaching
// 
// ***********************
Record KB0TW02 type basicRecord
  5 KB0TW-GROUP2 KB0TW-GROUP2 ; 
    10 KB0TW-TS-LENGTH KB0TW-TS-LENGTH ; 
    10 KB0TW-TS-ROW KB0TW-TS-ROW [13] ; 
      15 KB0TW-SELECT KB0TW-SELECT ; 
      15 SM4REPID SM4REPID ; 
      15 XXXFSTNM XXXFSTNM ; 
      15 XXXLSTNM XXXLSTNM ; 
      15 SM1AGYID SM1AGYID ; 
      15 YSBCD YSBCD ; 
      15 YSBDESC YSBDESC ; 
end // end KB0TW02

// account message
DataItem KB0TW-ACCT-MSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// account message a
DataItem KB0TW-ACCT-MSGA char(74)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// number of accounts attached
DataItem KB0TW-ACCTS-ATTACHED num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// change flag
DataItem KB0TW-CHANGE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current page number
DataItem KB0TW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// group level for KB0TW01
DataItem KB0TW-GROUP1 char(95)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kb0tw02 group level
DataItem KB0TW-GROUP2 char(1031)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maximum page number
DataItem KB0TW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// save area for rep id
DataItem KB0TW-SAVE-SM4REPID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save area for ysb code
DataItem KB0TW-SAVE-YSBCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select indicator
DataItem KB0TW-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KB0TW-SELECT-CNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript
DataItem KB0TW-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage length
DataItem KB0TW-TS-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage row
DataItem KB0TW-TS-ROW char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

