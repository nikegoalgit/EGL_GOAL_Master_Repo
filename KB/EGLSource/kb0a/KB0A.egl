package kb0a;

import corpcom2.XP0AW01;
import corpcom3.XP0A001;
import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB018;
import corpcom3.XPKB030;
import corpcom3.XPKB031;
import corpcom3.XPKB040;
import corpcom3.XPKB060;
import corpcom3.XPKB099;
import corpcom3.XPKB900;
import corpcom3.XPKB990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXFSTNM;
import corpcom7.XXXGNTNM;
import corpcom7.XXXLSTNM;
import corpcom7.XXXMDINT;
import corpx1.XAD-ADDR-TYP-ABRV;
import corpx1.XAD-ADDR-TYP-CD;
import corpx1.XADTBL;
import corpx1.XCTTBL;
import corpx1.XP0AT01;
import corpx1.XSTTBL;
import corpy2.YBBCD;
import corpy2.YBBTBL;
import corpy2.YBTTBL;
import kb.common.*;
import kl.common.KIZTBL;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUEREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KURREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0A ****
// This transaction is the Add Buyer function
// There are three screens invoved with this function, Buyer
// General Information, Add Buyer Name, and Add Buyer Address.
// 
// The Add Buyer Name screen is presented only when the name
// entered on the Buyer General Information screen is close to
// one or more already in the database.  The comparison is done
// by creating a shortened name and the "LIKE" verb.
// 
// The Add Buyer Address screen is used only when the buyer
// address is other than any of the customer addresses.
// 
// A requirement of adding a buyer to the database is that
// at least one customer account cross reference must be added.
// KB0A automatically transfers to KB0T, Attach Buyer Accounts
// when the data has been validated and required fields have
// been valued.
// 
// When attachments are finished, and the
// user has returned to the general information screen
// the information is placed into the database and a confirm
// add buyer general information screen is presented.  The user
// may confirm the new buyer or reject the entire transaction
// at this time.
// 
// KB0U, the Display and Select application, is available for
// Buyer title, Purchasing Exceptions, State, and Country.
// The edit modules will transfer to KB0U when a '?' is keyed
// into one of these input areas.
// ************************************************************
//              Maintenace History
// -----------------------------------------------------------
//   Date      Who     Reason
// -----------------------------------------------------------
// 02/28/91   dcraig   install mailing level to KB0U selection
// 
// 03/06/91   mgatre   install address view (xfr to KB0W)
// 
// 02/01/93   jricha/  This application has been modified as
//            tmorri   part of the Buyer System Enhancement
//                     project.  The main objective of this
//                     project is to give Nike Sales Reps and
//                     Sales Admin a way to associate buyers to
//                     sales reps via the sales responsibility
//                     code.  (See specs for details relating
//                     to this specific application).
// 
// 02/19/93   tmorri   Changed literal on KB0AM001.
// 
// 03/19/93   tmorri   Fixed bug when requesting a list using ?
//                     (KB0A091, KB0A053)
// 
// 04/07/93   tmorri   Always save selected address before add.
//                     (KB0A083)
//                     Always purge ts for similar names before
//                     reloading.  (KB0A011, KB0A051)
// *********************
Program KB0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0AW01 KB0AW01; // record
  KB0AW02 KB0AW02; // record
  KB0AW03 KB0AW03; // record
  KB3REC KB3REC; // record
  KBAREC KBAREC; // record
  KBBREC KBBREC; // record
  KBIREC KBIREC; // record
  KBWREC KBWREC; // record
  KBXREC KBXREC; // record
  KUCREC KUCREC; // record
  KUEREC KUEREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KURREC KURREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP0AW01 XP0AW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XADTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use YBTTBL {deleteAfterUse = yes}; // table
  use YBBTBL {deleteAfterUse = yes}; // table
  use XP0AT01 {deleteAfterUse = yes}; // table
  use KB0AM.KB0AM001,  // forms
      KB0AM.KB0AM002, 
      KB0AM.KB0AM003
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0A001: KB0A001();


    goto KB0A005;


    KB0A005: KB0A005();


    goto KB0A005;


  end // end main
end // end KB0A

// ADD BUYER INITIALIZE
Function KB0A001()


  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/

  XPKB031(); /* ; get curr date/time*/
  KB0A230(); /* ; purge temp storage*/

  set KB0AM001 initial; /* ; init buyer screen*/
  KB0AM001.KB0AMDTE = VGVar.currentShortGregorianDate;

  if (COMMAREA.CAFROMAP == "KB0U" /* ; coming from list pgm*/
   || COMMAREA.CAFROMAP == "KB0T" /* ; from attach*/
   || COMMAREA.CAFROMAP == "KB0R" /* ; from reassign*/
   || COMMAREA.CAFROMAP == "KB0I" /* ; from inquiry*/
   || COMMAREA.CAFROMAP == "KB0W") /* ; from view address*/
    KB0A002(); /* ; initialize w/s recs*/
  else
    set KBWREC empty; /* ; clear kbwrec*/
  end

  KBWREC.KBWADDFL = "A"; /* ; now in add mode*/

  KB0A090(); /* ; move KBWREC to KB0AM001*/

  if (COMMAREA.CAFROMAP == "KB0I" /* ; coming from inquiry*/
   && KBWREC.KBWTBLID == "NM")    /* ; list = names*/
    KB0A010(); /* ; add buyer name routine*/
    KB0A040(); /* ; edit KB0AM001 SCREEN*/
    if (KBWREC.KBWERRFL == "N")
      KB0A006(); /* in edit mode already if ok tran. to*/
                                   /* kb0t*/
    end
  else
    if (COMMAREA.CAFROMAP == "KB0U") /* ; coming from list prgm*/
      KB0A040(); /* ; edit KB0AM001 SCREEN*/
      if (KBWREC.KBWTBLID == "ST" /* ; list = state*/
       || KBWREC.KBWTBLID == "CT") /* ; list = country*/
        KB0A020(); /* ; add buyer addr routine*/
      end
      if (KBWREC.KBWERRFL == "N")
        KB0A006(); /* in edit mode already if ok tran. to*/
                                   /* kb0t*/
      end
    end
  end


end // end KB0A001

// INITIALIZE W/S RECS
Function KB0A002()


  XPKB002(); /* ; move COMMAREA to KBWREC*/

  if (KBWREC.KBABUYID != 0) /* ; buyer id assigned*/
    XPKB010(); /* ; get buyer*/
    KBWREC.KBAGRP = KBAREC.KBAGRP;
  end

  KB0A004(); /* ; check for attachments*/


end // end KB0A002

// CHECK FOR ATTACHMENTS
Function KB0A004()


  KBWREC.KBWATCHF = "N"; /* ; reset attach flag*/

  if (KBWREC.KBABUYID != 0) /* ; buyer id assigned*/

    set KBIREC empty; /* ; initialize KBIREC*/
    set KBXREC empty; /* ; initialize KBXREC*/

    KBIREC.KBIOTASK = "C "; /* ; set io-pass task*/
    KBIREC.KBIOSTAT = "A "; /* ; set io-pass stat*/
    KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* ; set io-pass date*/

    KBXREC.KBABUYID = KBWREC.KBABUYID; /* ; set buyer id*/
    KBXREC.KUCCOID = -1; /* ; all companies*/
    KBXREC.KUMSTRID = -1; /* ; all stores*/
    KBXREC.XNXCD = -1; /* ; all departments*/
    KBXREC.YSBCD = "**"; /* ; all ysbs*/

    XPKB018(); /* ; call io4330*/

    if (KBIREC.KBIOCNT > 0) /* ; xref recs exist*/
      KBWREC.KBWATCHF = "Y"; /* ; set attach flag*/
    end
  end


end // end KB0A004

// ADD BUYER MAINLINE
Function KB0A005()


  KB0A080(); /* ; converse KB0AM001*/


  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* ; save prev pfkey*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset curr pfkey*/

  if (converseVar.eventKey is pf3 /* ; prev screen*/
   || converseVar.eventKey is pf4 /* ; buyer menu*/
   || KB0AM001.CATOAP != " ")     /* ; fastpath*/
    KB0A008(); /* ; early exit routines*/
  else
    if (converseVar.eventKey is pf24)
      if (KBWREC.KBABUYID != 0) /* ONLY PURGE IF BUYER WAS ADDED.*/
        XPKB030(); /* purge data;*/
      end
      set KBWREC empty;
      KBWREC.KBWADDFL = "A"; /* ; still in add mode*/
      KB0A090(); /* ; move KBWREC to KB0AM001*/
      converseLib.validationFailed(120); /* cancel complete. ready to accept next*/
                                   /* buyer entry*/
    else
      if (converseVar.eventKey is enter)
        KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
        KB0A045(); /* ; see if any data entered on map*/
        if (KBWREC.KBWCHGFL == "N") /* nothing entered*/
          KB0A105(); /* ; xfer to menu*/
        else
          KB0A040(); /* ; EDIT KB0AM001 data*/
          if (KBWREC.KBWERRFL == "N") /* ; no errors*/
            KB0A006(); /* ; add buyer and xfer to kb0t*/
          end
        end
      else
        converseLib.validationFailed(7); /* INVALID KEY TRY AGAIN.*/
      end
    end
  end

end // end KB0A005

// ADD BUYER AND XFER TO KB0T
Function KB0A006()

  if (KBWREC.KBWATCHF != "Y") /* NEED TO MAKE ATTACHMENT.*/
    KB0A091(); /* ; move KB0AM001 to KBWREC*/
    if (KB0AM001.KBABUYID == 0)
      KB0A030(); /* ; add buyer routine*/
    end
    KB0A007(); /* TRANSFER TO KB0T ATTACHEMENTS*/
  else
    set KBWREC empty; /* ; reset KBWREC*/
    KBWREC.KBWADDFL = "A"; /* ; still in add mode*/
    KB0A090(); /* ; move KBWREC to KB0AM001*/
    converseLib.validationFailed(99); /* ; buyer added to database*/
  end


end // end KB0A006

// TRANSFER TO KB0T
Function KB0A007()

  KB0A230(); /* purge temp storage*/

  COMMAREA.CATOAP = "KB0T"; /* TRANSFER TO ATTACHMENT PROCESS.*/
  COMMAREA.CAUSERA = KBWREC.KBWGROUP;

  XSEXIT();

  KB0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " ";
  COMMAREA.CAUSERA = " ";


end // end KB0A007

// edit   pf3,pf4, enter
Function KB0A008()


  if (KB0AM001.CATOAP != " ")
    if (KBWREC.KBABUYID != 0)
      if (KBWREC.KBWATCHF == "N")
        converseLib.validationFailed(122); /* either cancel or attach a company*/
        KBWREC.KBWERRFL = "Y";
        KB0AM001.CATOAP = " ";
        KB0AM001.CAITEM = " ";
      else
        KB0A100(); /* edit fast path and exit*/
      end
    else
      KBWREC.KBWPFKEY[1] = "FP"; /* current pfkey*/
      KB0A045(); /* see if data entered on screen*/
      if (KBWREC.KBWCHGFL == "Y" /* data entered*/
       && KBWREC.KBWPFKEY[2] != "FP") /* unconfirmed*/
        converseLib.validationFailed(148); /* new data will bw lost; confirm*/
        KBWREC.KBWERRFL = "Y";
      else
        KB0A100(); /* edit fast path and exit*/
      end
    end
  else
    if (converseVar.eventKey is pf3)
      if (KBWREC.KBABUYID != 0)
        if (KBWREC.KBWATCHF == "N")
          converseLib.validationFailed(122); /* either cancel or attach a company*/
          KBWREC.KBWERRFL = "Y";
        else
          KB0A105(); /* TRANSFER TO MAIN MENU*/
        end
      else
        KBWREC.KBWPFKEY[1] = "PF3"; /* current pfkey*/
        KB0A045(); /* see if data entered on screen*/
        if (KBWREC.KBWCHGFL == "Y" /* data entered*/
         && KBWREC.KBWPFKEY[2] != "PF3") /* unconfirmed*/
          converseLib.validationFailed(149); /* new data will bw lost; confirm*/
          KBWREC.KBWERRFL = "Y";
        else
          KB0A105(); /* TRANSFER TO MAIN MENU*/
        end
      end
    else
      if (converseVar.eventKey is pf4)
        if (KBWREC.KBABUYID != 0)
          if (KBWREC.KBWATCHF == "N")
            converseLib.validationFailed(122); /* either cancel or attach a company*/
            KBWREC.KBWERRFL = "Y";
          else
            KB0A105(); /* TRANSFER TO MAIN MENU*/
          end
        else
          KBWREC.KBWPFKEY[1] = "PF4"; /* current pfkey*/
          KB0A045(); /* see if data entered on screen*/
          if (KBWREC.KBWCHGFL == "Y" /* data entered*/
           && KBWREC.KBWPFKEY[2] != "PF4") /* unconfirmed*/
            converseLib.validationFailed(144); /* new data will bw lost; confirm*/
            KBWREC.KBWERRFL = "Y";
          else
            KB0A105(); /* TRANSFER TO MAIN MENU*/
          end
        end
      end
    end
  end

end // end KB0A008

// ADD BUYER NAME ROUTINE
Function KB0A010()


  KB0A011(); /* ; initialize*/

  KBWREC.KBWRETNF = "N"; /* ; set return flag*/
  while (KBWREC.KBWRETNF == "N") /* ; until return flag = y*/
    KB0A015(); /* ; mainline*/
  end

  KBWREC.KBWPFKEY[1] = " "; /* ; reset pfkeys*/
  KBWREC.KBWPFKEY[2] = " ";

end // end KB0A010

// ADD BUYER NAME - INITIALIZE
Function KB0A011()


  if (COMMAREA.CAFROMAP == "KB0I" /* ; coming from Inquiry*/
   && KBWREC.KBWTBLID == "NM")    /* ; of similar last name*/
    KBWREC.KBWTBLID = " "; /* ; reset w/s table*/
    KBWREC.KBABUYID = 0; /* ; reset buyer id*/

    XPKB060(); /* ; create short name*/
    KB0A230(); /* ; purge old temp storage*/
    KB0A052(); /* ; build temp storage for similar*/
                                   /* names*/
  end

  KB0AW01.KB0AW-CURR-PAGE = 1; /* SET TO FIRST PAGE*/

  KB0A019(); /* ; move temp storage to KB0AM002*/


end // end KB0A011

// Edit Page Number and Scrolling
Function KB0A012()


  if (converseVar.eventKey is pf7)
    if (KB0AM002.KBWPAGE == 1)
      converseLib.validationFailed(8); /* already at top*/
      set KB0AM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0AM002.KBWPAGE != KB0AW01.KB0AW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0AM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      else
        if (KBWREC.KBWCNT > 0)
          converseLib.validationFailed(121); /* can't select and scroll*/
          KBWREC.KBWERRFL = "Y";
        end
      end
    end
  end

  if (converseVar.eventKey is pf8)
    if (KB0AM002.KBWPAGE == KB0AM002.KBWTOTPG)
      converseLib.validationFailed(9); /* already at bottom*/
      set KB0AM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0AM002.KBWPAGE != KB0AW01.KB0AW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0AM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      else
        if (KBWREC.KBWCNT > 0)
          converseLib.validationFailed(121); /* can't select and scroll*/
          KBWREC.KBWERRFL = "Y";
        end
      end
    end
  end

  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0AM002.KBWPAGE == 0
     || KB0AM002.KBWPAGE > KB0AM002.KBWTOTPG)
      converseLib.validationFailed(48); /* invalid page number*/
      set KB0AM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    end
  end

end // end KB0A012

// edit selection options
Function KB0A013()


  KBWREC.KBWSUB1 = 0;
  KB0AW01.KB0AW-SUB = 10;
                                  /* edit select byte*/
  while (KB0AW01.KB0AW-SUB != 0)
    if (KB0AM002.KB0AM-SEL[KB0AW-SUB] != " "
     && KB0AM002.KB0AM-SEL[KB0AW-SUB] != "S")
      converseLib.validationFailed(105); /* must enter 's' to select*/
      KBWREC.KBWERRFL = "Y";
      set KB0AM002.KB0AM-SEL[KB0AW-SUB] cursor, bold;
    end
    KB0AW01.KB0AW-SUB = KB0AW01.KB0AW-SUB - 1;
  end


  KBWREC.KBWCNT = 0;
  KB0AW01.KB0AW-SUB = 10;
                                  /* count number of buyers selected*/
  while (KB0AW01.KB0AW-SUB != 0)
    if (KB0AM002.KB0AM-SEL[KB0AW-SUB] == "S")
      KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
      KBWREC.KBWSUB1 = KB0AW01.KB0AW-SUB; /* save for xfer to KB0I*/
      set KB0AM002.KB0AM-SEL cursor, bold;
    end
    if (KBWREC.KBWCNT > 1)
      converseLib.validationFailed(6); /* only one buyer can be selected*/
      KBWREC.KBWERRFL = "Y";
      KB0AW01.KB0AW-SUB = 0;
    else
      KB0AW01.KB0AW-SUB = KB0AW01.KB0AW-SUB - 1;
    end
  end

end // end KB0A013

// EDIT KB0AM002
Function KB0A014()


  if (converseVar.eventKey is pf4)
    KBWREC.KBWPFKEY[1] = "PF4"; /* ; save pfkey*/
    if (KBWREC.KBWPFKEY[2] != "PF4") /* ; pf4 unconfirmed*/
      converseLib.validationFailed(144); /* ; new buyer data will be lost*/
      KBWREC.KBWERRFL = "Y";
    else
      KB0A105(); /* ; transfer to main menu*/
    end
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is enter)
  /* next sentence*/
    else
      converseLib.validationFailed(7); /* ; invalid pf/pa key*/
      KBWREC.KBWERRFL = "Y"; /* SET ERROR FLAG*/
      set KB0AM002.KB0AM-SEL[1] cursor;
    end
  end

  if (KBWERRFL == "N")
    KB0A013(); /* edit selection*/
    if (KBWERRFL == "N")
      KB0A012(); /* edit page number/pf7/pf8 keys*/
    end
  end


end // end KB0A014

// ADD BUYER NAME - MAINLINE
Function KB0A015()

  KB0A018(); /* ; converse KB0AM002*/

  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* save prev pfkey*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset current pfkey*/
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/

  KB0A014(); /* ; EDIT KB0AM002*/

  if (KBWREC.KBWERRFL == "N") /* NO ERRORS*/
    if (converseVar.eventKey is pf7 /* ; scroll backward*/
     || converseVar.eventKey is pf8 /* ; scroll forward*/
     || KB0AM002.KBWPAGE != KB0AW01.KB0AW-CURR-PAGE) /* new page number*/
      KB0A016(); /* ; build new page*/
    else
      if (KBWREC.KBWCNT == 1) /* ; buyer selected*/
        KB0A017(); /* ; view buyer*/
      end
      KBWREC.KBWRETNF = "Y"; /* ; return*/
    end
  end



end // end KB0A015

// Build New Page from TS
Function KB0A016()


  /* determine new page number*/

  if (converseVar.eventKey is pf7)
    KB0AW01.KB0AW-CURR-PAGE = KB0AW01.KB0AW-CURR-PAGE - 1;
  else
    if (converseVar.eventKey is pf8)
      KB0AW01.KB0AW-CURR-PAGE = KB0AW01.KB0AW-CURR-PAGE + 1;
    else
      KB0AW01.KB0AW-CURR-PAGE = KB0AM002.KBWPAGE;
    end
  end

  KB0A200(); /* read temporary storage*/

  KB0A019(); /* move temp storage to map*/



end // end KB0A016

// Transfer to KB0I to View Buyer
Function KB0A017()


  KBWREC.KBWTBLID = "NM"; /* similar last name*/
  COMMAREA.CATOAP = "KB0I"; /* transfer to buyer inquire*/
  KBWREC.KBABUYID = KB0AM002.KBABUYID[KBWSUB1]; /* selected buyer*/

  COMMAREA.CAUSERA = KBWREC.KBWGROUP;

  XSEXIT();

  KB0AM002.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " ";
  COMMAREA.CAUSERA = " ";


end // end KB0A017

// CONVERSE KB0AM002
Function KB0A018()
  converse KB0AM002 ;


  KBWREC.XXXMAPNM = "KB0AM002";

end // end KB0A018

// MOVE TEMP STORAGE TO KB0AM002
Function KB0A019()

  set KB0AM002 initial;

  KB0AM002.KB0AMDTE = VGVar.currentShortGregorianDate;
  KB0AM002.KB0AM-XXXFSTNM = KBWREC.XXXFSTNM;
  KB0AM002.KB0AM-XXXMDINT = KBWREC.XXXMDINT;
  KB0AM002.KB0AM-XXXLSTNM = KBWREC.XXXLSTNM;
  KB0AM002.KB0AM-XXXGNTNM = KBWREC.XXXGNTNM;
  KB0AM002.KBWPAGE = KB0AW01.KB0AW-CURR-PAGE;
  KB0AM002.KBWTOTPG = KB0AW01.KB0AW-MAX-PAGE;

  KB0A200(); /* read temp storage page*/

  KB0AW01.KB0AW-SUB = 1;

  while (KB0AW-SUB <= 10) /* move buyer names from temp storage to*/
                                   /* map*/
    if (KB0AW02.KBABUYID[KB0AW-SUB] > 0)
      KB0AM002.KBABUYID[KB0AW-SUB] = KB0AW02.KBABUYID[KB0AW-SUB];
      KB0AM002.XXXFSTNM[KB0AW-SUB] = KB0AW02.XXXFSTNM[KB0AW-SUB];
      KB0AM002.XXXMDINT[KB0AW-SUB] = KB0AW02.XXXMDINT[KB0AW-SUB];
      KB0AM002.XXXLSTNM[KB0AW-SUB] = KB0AW02.XXXLSTNM[KB0AW-SUB];
      KB0AM002.XXXGNTNM[KB0AW-SUB] = KB0AW02.XXXGNTNM[KB0AW-SUB];
      KB0AM002.KUCCOID[KB0AW-SUB] = KB0AW02.KUCCOID[KB0AW-SUB];
      KB0AM002.XAD-ADDR-TYP-ABRV[KB0AW-SUB] = KB0AW02.XAD-ADDR-TYP-ABRV[KB0AW-SUB];
      if (KB0AW02.XAD-ADDR-TYP-CD[KB0AW-SUB] == "03"
       || KB0AW02.XAD-ADDR-TYP-CD[KB0AW-SUB] == "05")
        KBWREC.KBWSTRID = KB0AW02.KUMSTRID[KB0AW-SUB];
        KB0AM002.KBWSTRCH[KB0AW-SUB] = KBWREC.KBWSTRCH;
      end

      if (KB0AW01.KB0AW-SUB == 1) /* first line on map*/
        set KB0AM002.KB0AM-SEL[KB0AW-SUB] cursor, normal;
      else
        set KB0AM002.KB0AM-SEL[KB0AW-SUB] normal;
      end
    end

    KB0AW01.KB0AW-SUB = KB0AW01.KB0AW-SUB + 1; /* ; increment map subscript*/
  end



end // end KB0A019

// ADD BUYER ADDRESS ROUTINE
Function KB0A020()


  KB0A021(); /* ; perform initialize*/

  KBWREC.KBWRETNF = "N"; /* ; reset return flag*/

  while (KBWREC.KBWRETNF == "N") /* ; until return flag = yes*/
    KB0A025(); /* ; perform mainline*/
  end



end // end KB0A020

// ADD BUYER ADDRESS - INITIALIZE
Function KB0A021()


  set KB0AM003 initial;

  KB0AM003.KB0AMDTE = VGVar.currentShortGregorianDate;

  KB0AM003.KBABUYID = KBWREC.KBABUYID;
  KB0AM003.XXXFSTNM = KBWREC.XXXFSTNM;
  KB0AM003.XXXMDINT = KBWREC.XXXMDINT;
  KB0AM003.XXXLSTNM = KBWREC.XXXLSTNM;
  KB0AM003.XXXGNTNM = KBWREC.XXXGNTNM;

  KB0AM003.XXXADDR1 = KBWREC.XXXADDR1;
  KB0AM003.XXXADDR2 = KBWREC.XXXADDR2;
  KB0AM003.XXXADDR3 = KBWREC.XXXADDR3;
  KB0AM003.XXXCITY = KBWREC.XXXCITY;
  KB0AM003.XXXZIP = KBWREC.XXXZIP;
  KB0AM003.XSTCD = KBWREC.XSTCD;

  if (KBWREC.XCTCD == " ")
    KB0AM003.XCTCD = "USA";
  else
    KB0AM003.XCTCD = KBWREC.XCTCD;
  end

  if (KB0AM003.XSTCD in XSTTBL.XSTCD)
    KB0AM003.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
  end
  if (KB0AM003.XCTCD in XCTTBL.XCTCD)
    KB0AM003.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end

  if (COMMAREA.CAFROMAP == "KB0U") /* ; from list program*/
    if (KBWREC.KBWTBLID == "ST") /* ; list = state*/
      set KB0AM003.XSTCD cursor; /* ; position cursor*/
    else
      if (KBWREC.KBWTBLID == "CT") /* ; list = country*/
        set KB0AM003.XCTCD cursor; /* ; position cursor*/
      end
    end
  end

  KBWREC.KBWPFKEY[1] = " "; /* ; reset curr pfkey*/
  KBWREC.KBWPFKEY[2] = " "; /* ; reset prev pfkey*/


end // end KB0A021

// initialize kbwrec address
Function KB0A022()


  KBWREC.XXXADDR1 = " ";
  KBWREC.XXXADDR2 = " ";
  KBWREC.XXXADDR3 = " ";
  KBWREC.XXXCITY = " ";
  KBWREC.XSTCD = " ";
  KBWREC.XXXZIP = " ";
  KBWREC.XCTCD = " ";


end // end KB0A022

// ADD BUYER ADDRESS - MAINLINE
Function KB0A025()


  KB0A028(); /* ; converse KB0AM003*/

  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* prev pfkey = curr pfkey*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset curr pfkey*/
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  KBWREC.KBWTBLID = " "; /* ; reset list table*/


  if (converseVar.eventKey is pf3) /* ; return to prev map*/
    KBWREC.KBWPFKEY[1] = "PF3"; /* current pfkey*/
    KB0A038(); /* check for changes on map*/
    if (KBWREC.KBWCH2FL == "N" /* no changes*/
     || KBWREC.KBWPFKEY[1] == KBWREC.KBWPFKEY[2]) /* pf3 confirmed*/
      KB0A022(); /* set address in kbwrec to spaces and 0*/
      set KB0AM001.KBWASEL[1] cursor, bold;
      KB0AM001.KBWASEL[5] = " ";
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(27); /* one address type is required*/
      KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
    else
      converseLib.validationFailed(3); /* confirm pf3*/
    end
  else
    if (converseVar.eventKey is enter) /* ; accept buyer address*/
      KBWREC.KBWTBLID = " "; /* ; reset list request*/

      KB0A026(); /* ; edit buyer address*/

      if (KBWREC.KBWERRFL == "N") /* ; no errors*/
        if (KBWREC.KBWTBLID != " ") /* ; list requested*/
          KB0A091(); /* ; save main screen*/
          KB0A029(); /* ; save address screen*/
          COMMAREA.CATOAP = "KB0U";
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;

          XSEXIT();

          KB0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          KBWREC.KBWERRFL = "Y";
        else
          KB0AM001.KBWASEL[5] = "*";
          KB0A029(); /* ; move buyer address to kbwrec*/
          KB0A006(); /* ; add buyer and xfer to kb0t*/

        end
      end
    else
      converseLib.validationFailed(7); /* INVALID PF KEY*/
    end
  end


end // end KB0A025

// EDIT KB0AM003
Function KB0A026()

  KBWREC.KBWERRFL = "N";
  if (KB0AM003.XXXADDR1 == " " 
   /* ; at least one address line*/
   && KB0AM003.XXXADDR2 == " " /* ; must be entered*/
   && KB0AM003.XXXADDR3 == " ")
    KBWREC.KBWERRFL = "Y";
    set KB0AM003.XXXADDR1 cursor, bold;
    converseLib.validationFailed(10);
                                   /* ; 'ENTER AT LEAST ONE ADDR'*/
  else
    if (KB0AM003.XXXCITY == " ") /* ; city is not entered*/
      KBWREC.KBWERRFL = "Y";
      set KB0AM003.XXXCITY cursor, bold;
      converseLib.validationFailed(11); /* ; 'CITY IS REQUIRED'*/
    else
      if (KB0AM003.XSTCD == " ") /* ; state not entered*/
        if (KB0AM003.XCTCD == "USA ") /* ; state required with USA*/
          KBWREC.KBWERRFL = "Y";
          KB0AM003.XSTDESC = " "; /* ; clear description*/
          set KB0AM003.XSTCD cursor, bold;
          converseLib.validationFailed(13); /* ; 'STATE IS REQUIRED'*/
        end
      else
        KBWREC.KBWSPLIT = KB0AM003.XSTCD;
        if (KBWREC.KBWSPLT1 == "?" /* ; want list of states*/
         || KBWREC.KBWSPLT2 == "?")
          KBWREC.KBWTBLID = "ST"; /* ; state table indicator*/
        else
          if (KB0AM003.XSTCD in XSTTBL.XSTCD) /* ;find state in table*/
            KB0AM003.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
          else
            KBWREC.KBWERRFL = "Y"; /* ; state not found*/
            KB0AM003.XSTDESC = " "; /* ; clear description*/
            set KB0AM003.XSTCD cursor, bold;
            converseLib.validationFailed(12); /* ; 'INVALID STATE CODE'*/
          end
        end
      end
    end
  end


  if (KBWREC.KBWERRFL == "N" /* ; no errors this far*/
   && KBWREC.KBWTBLID == " ") /* ; list not requested*/
    if (KB0AM003.XCTCD == "USA ") /* ; US addrs require zip*/
      if (KB0AM003.XXXZIP == " ") /* ; zip is blank*/
        KBWREC.KBWERRFL = "Y";
        set KB0AM003.XXXZIP cursor, bold;
        converseLib.validationFailed(15); /* ; 'ZIP IS REQUIRED'*/
      end
    else
      if (KB0AM003.XCTCD == " ") /* ; country is blank*/
        KBWREC.KBWERRFL = "Y";
        KB0AM003.XCTDESC = " "; /* ; clear cntry desc*/
        set KB0AM003.XCTCD cursor, bold;
        converseLib.validationFailed(87); /* ; 'COUNTRY IS REQUIRED'*/
      else
        KBWREC.KBWSPLIT = KB0AM003.XCTCD;
        if (KBWREC.KBWSPLT1 == "?" /* ; check for list request*/
         || KBWREC.KBWSPLT2 == "?" 
         || KBWREC.KBWSPLT3 == "?" 
         || KBWREC.KBWSPLT4 == "?")
          KBWREC.KBWTBLID = "CT"; /* ; country table indicator*/
        else
          if (KB0AM003.XCTCD in XCTTBL.XCTCD) /* ; find country in table*/
            KB0AM003.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
          else
            KBWREC.KBWERRFL = "Y"; /* ; cntry desc not found*/
            KB0AM003.XCTDESC = " "; /* ; clear description*/
            set KB0AM003.XCTCD cursor, bold;
            converseLib.validationFailed(16); /* ; 'INVALID COUNTRY CODE'*/
          end
        end
      end
    end
  end

end // end KB0A026

// CONVERSE KB0AM003
Function KB0A028()


  converse KB0AM003 ;


  KBWREC.XXXMAPNM = "KB0AM003"; /* save current map*/

  set KB0AM003.XXXADDR1 cursor, normal;
  set KB0AM003.XXXADDR2 normal;
  set KB0AM003.XXXADDR3 normal;
  set KB0AM003.XXXCITY normal;
  set KB0AM003.XSTCD normal;
  set KB0AM003.XXXZIP normal;
  set KB0AM003.XCTCD normal;


end // end KB0A028

// MOVE BUYER ADDR TO KBWREC
Function KB0A029()


  KBWREC.XXXADDR1 = KB0AM003.XXXADDR1;
  KBWREC.XXXADDR2 = KB0AM003.XXXADDR2;
  KBWREC.XXXADDR3 = KB0AM003.XXXADDR3;
  KBWREC.XXXCITY = KB0AM003.XXXCITY;
  KBWREC.XSTCD = KB0AM003.XSTCD;
  KBWREC.XXXZIP = KB0AM003.XXXZIP;
  KBWREC.XCTCD = KB0AM003.XCTCD;

  KBWREC.XAD-ADDR-TYP-CD = "02"; /* set address type to 'buyer'*/
  KBWREC.KUCCOID = 0; /* set company id to zero*/
  KBWREC.KBW-KUMSTRID = 0; /* set store id to zero*/
  KBWREC.KULAAID = 0; /* set customer address id to zero*/

end // end KB0A029

// DATABASE ROUTINE
Function KB0A030()


  XPKB031(); /* ; get current date/time*/
  KB0A031(); /* ; get next buyer id*/

  KB0A033(); /* ; add KBAREC*/

  if (KBWREC.XAD-ADDR-TYP-CD == "02") /* ; buyer address*/
    KB0A035(); /* ; add KBBREC*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* ; commit database changes*/


end // end KB0A030

// GET NEXT BUYER ID
Function KB0A031()


  set SQLCA empty;
  set KURREC empty;

  call "IO0390" ("S ", SQLCA, KURREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KB0A032(); /* ; update KURREC*/
  else

    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "KB0A031";
    TA1REC.TA1LOCAT[2] = "IO0390";
    TA1REC.TA1LOCAT[3] = "S";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VNXTID01";

    XPKB900();
  end


end // end KB0A031

// UPDATE KURREC
Function KB0A032()


  KBWREC.KBABUYID = KURREC.KURBNEXT; /* ; save buyer id*/

  KURREC.KURBNEXT = KURREC.KURBNEXT + 1; /* ; increment buyer id*/
  KURREC.ZZZCHGDT = TA2REC.TA2GRGGN; /* ; set change date*/
  KURREC.ZZZCHGTM = TA2REC.TA2TIMHM; /* ; set change time*/

  call "IO0390" ("U ", SQLCA, KURREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* ; unsuccessful update*/
    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "KB0A032";
    TA1REC.TA1LOCAT[2] = "IO0390";
    TA1REC.TA1LOCAT[3] = "U";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VNXTID01";

    XPKB900();
  end


end // end KB0A032

// ADD KBAREC
Function KB0A033()

  set SQLCA empty;
  set KBAREC empty;

  KBAREC.KBABUYID = KBWREC.KBABUYID;
  KBAREC.XXXLSTNM = KBWREC.XXXLSTNM;
  KBAREC.XXXLSTSN = KBWREC.XXXLSTSN;
  KBAREC.XXXFSTNM = KBWREC.XXXFSTNM;
  KBAREC.XXXMDINT = KBWREC.XXXMDINT;
  KBAREC.XXXGNTNM = KBWREC.XXXGNTNM;
  KBAREC.XXXPHN = KBWREC.XXXPHN;
  KBAREC.XXXAPHN = KBWREC.XXXAPHN;
  KBAREC.YBTCD = KBWREC.YBTCD;
  KBAREC.KBABUYFL = KBWREC.KBABUYFL;
  KBAREC.KUCCOID = KBWREC.KUCCOID;
  KBAREC.KUMSTRID = KBWREC.KBW-KUMSTRID;
  KBAREC.XAD-ADDR-TYP-CD = KBWREC.XAD-ADDR-TYP-CD;
  KBAREC.KULAAID = KBWREC.KULAAID;
  KBAREC.XXXUSID1 = COMMAREA.CAUSERID;

  KBWREC.KBWSUB1 = 1;
  while (KBWREC.KBWSUB1 <= 10)
    KBAREC.YBBCD[KBWSUB1] = KBWREC.YBBCD[KBWSUB1];
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end

  XPKB031();
  KBAREC.XXXSTAT = "A";
  KBAREC.ZZZSDT = TA2REC.TA2GRGGN;
  KBAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  KBAREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  call "IO4310" ("A ", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KB0A034(); /* ; add KUZREC (for KBAREC)*/
  else
    KBWREC.KBWBIDKE = KBAREC.KBABUYID;

    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "KB0A033";
    TA1REC.TA1LOCAT[2] = "IO4310";
    TA1REC.TA1LOCAT[3] = "A";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBUYER01";
    TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;

    XPKB900();
  end


end // end KB0A033

// ADD KBAREC AUDIT (KUZREC)
Function KB0A034()


  set KB3REC empty;
  set KUZREC empty;

  KB3REC.KB3TRAN = "A"; /* ; transaction = add*/
  KUZREC.KUCCOID = KBAREC.KBABUYID;
  KB3REC.KB3DATA = KBAREC.KBAGRP; /* ; data = KBAREC*/
  KUZREC.KUZTYPE = "A"; /* ; type = 'add'*/
  KUZREC.XXXTBLNM = "VBUYER01";
  KUZREC.KUZDATA = KB3REC.KB3GRP;

  XPKB099();

end // end KB0A034

// ADD KBBREC
Function KB0A035()


  set SQLCA empty;
  set KBBREC empty;

  KBBREC.KBABUYID = KBWREC.KBABUYID;
  KBBREC.XXXADDR1 = KBWREC.XXXADDR1;
  KBBREC.XXXADDR2 = KBWREC.XXXADDR2;
  KBBREC.XXXADDR3 = KBWREC.XXXADDR3;
  KBBREC.XXXCITY = KBWREC.XXXCITY;
  KBBREC.XSTCD = KBWREC.XSTCD;
  KBBREC.XXXZIP = KBWREC.XXXZIP;
  KBBREC.XCTCD = KBWREC.XCTCD;
  KBBREC.ZZZSDT = TA2REC.TA2GRGGN;
  KBBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  KBBREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  call "IO4320" ("A ", SQLCA, KBBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KB0A036(); /* ; add KUZREC (for KBBREC)*/
  else
    KBWREC.KBWBIDKE = KBBREC.KBABUYID;

    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "KB0A035";
    TA1REC.TA1LOCAT[2] = "IO4320";
    TA1REC.TA1LOCAT[3] = "A";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBADDR01";
    TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;

    XPKB900();
  end


end // end KB0A035

// ADD KBBREC AUDIT (KUZREC)
Function KB0A036()


  set KB3REC empty;
  set KUZREC empty;

  KB3REC.KB3TRAN = "A"; /* ; transaction = add*/
  KB3REC.KB3DATA = KBBREC.KBBGRP; /* ; data = KBBREC*/
  KUZREC.KUZTYPE = "A"; /* ; type = 'add'*/
  KUZREC.XXXTBLNM = "VBADDR01";
  KUZREC.KUCCOID = KBWREC.KBABUYID;

  XPKB099();

end // end KB0A036

// CHECK ADDR SCREEN FOR CHANGES
Function KB0A038()


  KBWREC.KBWCH2FL = "N"; /* set change flag off*/

  if (KB0AM003.XXXADDR1 != " ") /* address line 1 changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KB0AM003.XXXADDR2 != " ") /* address line 2 changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KB0AM003.XXXADDR3 != " ") /* address line 3 changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KB0AM003.XXXCITY != " ") /* city changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KB0AM003.XSTCD != " ") /* state changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KB0AM003.XXXZIP != " ") /* zip code changed*/
    KBWREC.KBWCH2FL = "Y";
  end

end // end KB0A038

// EDIT KB0AM001
Function KB0A040()



  KB0A050(); /* ; edit name/gnrl info*/

  if (KBWREC.XXXLSTNM == KB0AM001.XXXLSTNM /* ; same buyer last name*/
   && KBWREC.KBWERRFL == "N")              /* ; no errors*/
    KB0A060(); /* ; edit responsibility*/

    if (KBWREC.KBWERRFL == "N") /* ; no errors*/
      KB0A069(); /* ; edit address*/
    end
  end


end // end KB0A040

// CHECK FOR DATA ENTERED ON MAP
Function KB0A045()

  KBWREC.KBWCHGFL = "N"; /* ; set change flag off*/

  if (KB0AM001.XXXFSTNM != " ") /* first name entered*/
    KBWREC.KBWCHGFL = "Y";
  end
  if (KB0AM001.XXXLSTNM != " ") /* ; last name entered*/
    KBWREC.KBWCHGFL = "Y";
  end
  if (KB0AM001.XXXMDINT != " ") /* ; middle initial entered*/
    KBWREC.KBWCHGFL = "Y";
  end
  if (KB0AM001.XXXGNTNM != " ") /* ;generation entered*/
    KBWREC.KBWCHGFL = "Y";
  end
  if (KB0AM001.YBTCD != " ") /* ; buyer title entered*/
    KBWREC.KBWCHGFL = "Y";
  end
  if (KB0AM001.KBABUYFL != " ")
    KBWREC.KBWCHGFL = "Y"; /* ; buyer flag entered*/
  end


  if (KB0AM001.KBWAREA1 != " "
   || KB0AM001.KBWPRFX1 != " "
   || KB0AM001.KBWLINE1 != " ")
    KBWREC.KBWCHGFL = "Y"; /* phone number entered*/
  end

  if (KB0AM001.KBWAREA2 != " "
   || KB0AM001.KBWPRFX2 != " "
   || KB0AM001.KBWLINE2 != " ")
    KBWREC.KBWCHGFL = "Y"; /* alt phone number entered*/
  end


  KBWREC.KBWSUB1 = 1; /* check the purch resp codes*/
  while (KBWREC.KBWSUB1 <= 10)
    if (KB0AM001.YBBCD[KBWSUB1] != " ") /* purch resp code entered*/
      KBWREC.KBWCHGFL = "Y";
      KBWREC.KBWSUB1 = 11; /* ; early exit if changes*/
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end


  if (KB0AM001.KBWACNBR[1] != 0 /* company entered*/
   || KB0AM001.KBWACNBR[2] != 0 
   || KB0AM001.KBWACNBR[3] != 0 
   || KB0AM001.KBWACNBR[4] != 0)
    KBWREC.KBWCHGFL = "Y";
  end

  if (KB0AM001.KBWASCHR[1] != " " /* store entered*/
   || KB0AM001.KBWASCHR[2] != " ")
    KBWREC.KBWCHGFL = "Y";
  end

end // end KB0A045

// EDIT GENERAL INFORMATION
Function KB0A050()


  KB0A051(); /* ; edit buyer last name*/

  if (KB0AM001.XXXLSTNM == KBWREC.XXXLSTNM /* ; same last name*/
   && KBWREC.KBWERRFL == "N")              /* ; no errors*/
    KB0A053(); /* ; edit buyer title*/

    if (KBWREC.KBWERRFL == "N") /* ; no errors*/
      KB0A054(); /* ; edit buyer flag*/

      if (KBWREC.KBWERRFL == "N") /* ; no errors*/
        KB0A055(); /* ; edit phone 1*/

        if (KBWREC.KBWERRFL == "N") /* ; no errors*/
          KB0A056(); /* ; edit phone 2*/

        end
      end
    end
  end

end // end KB0A050

// EDIT BUYER NAME
Function KB0A051()


  if (KB0AM001.XXXFSTNM == " ") /* ; no last name*/
    set KB0AM001.XXXFSTNM cursor, bold;
    converseLib.validationFailed(123); /* first name is required*/
    KBWREC.KBWERRFL = "Y";
  else
    if (KB0AM001.XXXLSTNM == " ") /* ; no last name*/
      set KB0AM001.XXXLSTNM cursor, bold;
      converseLib.validationFailed(17); /* last name is required*/
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0AM001.XXXLSTNM != KBWREC.XXXLSTNM /* ; new last name*/
       || KB0AM001.XXXFSTNM != KBWREC.XXXFSTNM) /* new first name*/
        KBWREC.KBWATCHF = "N"; /* ; set attach flag*/

        KBWREC.XXXFSTNM = KB0AM001.XXXFSTNM;
        KBWREC.XXXMDINT = KB0AM001.XXXMDINT;
        KBWREC.XXXLSTNM = KB0AM001.XXXLSTNM;
        KBWREC.XXXGNTNM = KB0AM001.XXXGNTNM;

        XPKB060(); /* ; create short last name*/
        KB0A230(); /* ; purge old temp storage*/
        KB0A052(); /* ; build temp storage for similar*/
                                   /* names*/

        if (KB0AW01.KB0AW-MAX-PAGE == 0) /* ; no names in temp storage*/
          KBWREC.XXXFSTNM = KB0AM001.XXXFSTNM;
          KBWREC.XXXMDINT = KB0AM001.XXXMDINT;
          KBWREC.XXXLSTNM = KB0AM001.XXXLSTNM;
          KBWREC.XXXGNTNM = KB0AM001.XXXGNTNM;
        else
          KB0A091(); /* save kb0am001 in w/s (may xfer to KB0I)*/
          KB0A010(); /* ADD BUYER NAME ROUTINE*/
        end
      end
    end
  end


end // end KB0A051

// BUILD TS FOR SIMILAR NAMES
Function KB0A052()

  set KB0AW01 empty; /* init working storage records*/
  set KB0AW02 empty;
  KBWREC.KBWEOF = "N"; /* init end of file flag*/

  KB0A110(); /* SELECT SET FOR SIMILAR LAST NAME.*/

  while (KBWREC.KBWEOF == "N")
    KB0A120(); /* load temp storage*/
  end

  if (KB0AW01.KB0AW-SUB > 0)
    KB0A210(); /* write partial page to temp stor*/
  end

  KB0A125(); /* close cursor*/


end // end KB0A052

// EDIT BUYER TITLE
Function KB0A053()


  KB0AM001.YBTDESC = " ";

  if (KB0AM001.YBTCD == " ")
    KBWREC.YBTCD = " "; /* reset title*/
    set KB0AM001.YBTCD cursor, bold;
    converseLib.validationFailed(18);
    KBWREC.KBWERRFL = "Y";
  else
    if (KB0AM001.YBTCD in YBTTBL.YBTCD
     && KB0AM001.YBTCD != "999")
      KB0AM001.YBTDESC = YBTTBL.YBTDESC[sysVar.arrayIndex];
    else
      KBWREC.KBWSPLIT = KB0AM001.YBTCD;

      if (KBWREC.KBWSPLT1 != "?"
       && KBWREC.KBWSPLT2 != "?"
       && KBWREC.KBWSPLT3 != "?")
        set KB0AM001.YBTCD cursor, bold;
        converseLib.validationFailed(19);
        KBWREC.KBWERRFL = "Y";
      else
        /* IF EZEAID IS ENTER;                    /* ; user pressed enter*/
        KB0A091(); /* ; move KB0AM001 to KBWREC*/

        KBWREC.KBWTBLID = "BT"; /* ; set table name*/
        COMMAREA.CATOAP = "KB0U";
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;

        XSEXIT();

        set KB0AM001.YBTCD cursor, bold;
        KB0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
        COMMAREA.CAUSERA = " ";
        KBWREC.KBWERRFL = "Y";
        KBWREC.KBWTBLID = " ";
        /* END;*/
      end
    end
  end


end // end KB0A053

// EDIT BUYER FLAG
Function KB0A054()


  if (KB0AM001.KBABUYFL == " ")
    set KB0AM001.KBABUYFL cursor, bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(20);
  else
    if (KB0AM001.KBABUYFL != "Y"
     && KB0AM001.KBABUYFL != "N")
      set KB0AM001.KBABUYFL cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(21);
    end
  end


end // end KB0A054

// EDIT PHONE 1
Function KB0A055()


  if (KB0AM001.KBWAREA1 != " "
   || KB0AM001.KBWPRFX1 != " "
   || KB0AM001.KBWLINE1 != " ")

    if (KB0AM001.KBWAREA1 == " "
     || KB0AM001.KBWPRFX1 == " "
     || KB0AM001.KBWLINE1 == " ")
      set KB0AM001.KBWAREA1 cursor, bold;
      set KB0AM001.KBWPRFX1 bold;
      set KB0AM001.KBWLINE1 bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(22);
    end
  end


end // end KB0A055

// EDIT PHONE 2
Function KB0A056()


  if (KB0AM001.KBWAREA2 != " "
   || KB0AM001.KBWPRFX2 != " "
   || KB0AM001.KBWLINE2 != " ")

    if (KB0AM001.KBWAREA2 == " "
     || KB0AM001.KBWPRFX2 == " "
     || KB0AM001.KBWLINE2 == " ")
      set KB0AM001.KBWAREA2 cursor, bold;
      set KB0AM001.KBWPRFX2 bold;
      set KB0AM001.KBWLINE2 bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(23);
    end
  end


end // end KB0A056

// EDIT PURCH RESPONSIBILITIES
Function KB0A060()
  KBWREC.KBWSUB1 = 10;
  while (KBWREC.KBWSUB1 > 0)
    KBWREC.KBWSPLIT = KB0AM001.YBBCD[KBWSUB1];

    if (KBWREC.KBWSPLT1 == "?" /* ; list selected*/
     || KBWREC.KBWSPLT2 == "?" /**/
     || KBWREC.KBWSPLT3 == "?" /**/
     || KBWREC.KBWSPLT4 == "?") /**/
      KB0A091(); /* ; move KB0AM001 to KBWREC*/

      KBWREC.KBWTBLID = "BB"; /* ; set table name*/
      COMMAREA.CATOAP = "KB0U";
      COMMAREA.CAUSERA = KBWREC.KBWGROUP;

      XSEXIT();

      set KB0AM001.YBBCD[KBWSUB1] cursor, bold;
      KB0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      COMMAREA.CAUSERA = " ";
      KBWREC.KBWERRFL = "Y";
      KBWREC.KBWTBLID = " ";
      KBWREC.KBWSUB1 = 10;
    end

    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KBWREC.KBWSUB1 = 10; /* ; reset subscript*/

    while (KBWREC.KBWSUB1 > 0)
      if (KB0AM001.YBBCD[KBWSUB1] != " ") /* ; code entered*/
        KB0A062(); /* ; validate codes*/
      else
        KB0AM001.YBBDESC[KBWSUB1] = " ";
      end

      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
    end

    if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
      KB0A061(); /* ; check for duplicates*/
      if (KBWREC.KBWERRFL == "Y")
        converseLib.validationFailed(25); /* ; no duplicates allowed*/
      end
    end

  end

end // end KB0A060

// CHECK FOR DUPLICATES
Function KB0A061()

   /* ------------------------------------------------------------*/
   /* The first part of this process that checks for duplicates*/
   /* works like a clock.  The first sub looks at the first code,*/
   /* like an hour hand, and the second points at the others*/
   /* incrementing until greater than 10, like a second hand,*/
   /* comparing to the first value.  When the second sub is*/
   /* greater than 10, the first is incremented by one and the*/
   /* second set to one greater than the first and life goes on.*/
   /* ------------------------------------------------------------*/

  KBWREC.KBWSUB1 = 1;
  KBWREC.KBWSUB2 = 2;
  while (KBWREC.KBWSUB1 <= 10)
    while (KBWREC.KBWSUB2 <= 10)
      if (KB0AM001.YBBCD[KBWSUB1] > " ")
        if (KB0AM001.YBBCD[KBWSUB1] == KB0AM001.YBBCD[KBWSUB2])
          if (KBWREC.KBWERRFL == "N")
            set KB0AM001.YBBCD[KBWSUB2] cursor, bold;
            KBWREC.KBWERRFL = "Y";
          else
            set KB0AM001.YBBCD[KBWSUB2] bold;
          end
        end
      end
      KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1;
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
    KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + 1;
  end

   /* ------------------------------------------------------------*/
   /* This portion moves the codes up so if any codes*/
   /* were removed there will not be blank spaces between*/
   /* entries.*/
   /* ------------------------------------------------------------*/

  if (KBWREC.KBWERRFL == "N")
    KB0AW03.KB0AW-GROUP4 = " ";
    KBWREC.KBWSUB = 1;
    KBWREC.KBWSUB1 = 1;
    while (KBWREC.KBWSUB <= 10)
      if (KB0AM001.YBBCD[KBWSUB] > "  ")
        KB0AW03.YBBCD[KBWSUB1] = KB0AM001.YBBCD[KBWSUB];
        KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
      end
      KBWREC.KBWSUB = KBWREC.KBWSUB + 1;
    end
    KBWREC.KBWSUB = 1;
    while (KBWREC.KBWSUB <= 10)
      KB0AM001.YBBCD[KBWSUB] = " ";
      KB0AM001.YBBDESC[KBWSUB] = " ";
      KBWREC.KBWSUB = KBWREC.KBWSUB + 1;
    end
    KBWREC.KBWSUB = 1;
    while (KBWREC.KBWSUB <= 10)
      KB0AM001.YBBCD[KBWSUB] = KB0AW03.YBBCD[KBWSUB];
      if (KB0AM001.YBBCD[KBWSUB] in YBBTBL.YBBCD)
        KB0AM001.YBBDESC[KBWSUB] = YBBTBL.YBBDESC[sysVar.arrayIndex];
      end
      KBWREC.KBWSUB = KBWREC.KBWSUB + 1;
    end
  end


end // end KB0A061

// VALIDATE YBBCD
Function KB0A062()


  XP0AW01.XP0AWFLD = KB0AM001.YBBCD[KBWSUB1];
  XP0A001();
  if (XP0AW01.XP0AWEFL == "Y")
    set KB0AM001.YBBCD[KBWSUB1] cursor, bold;
    KB0AM001.YBBDESC[KBWSUB1] = " ";
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(26); /* invalid purchasing resp code*/
  else
    KBWREC.KBWYBBCH = KB0AM001.YBBCD[KBWSUB1]; /* ;convert to numeric*/
    KBWREC.KBWYBBNM = KBWREC.KBWYBBNM * 1;
    KB0AM001.YBBCD[KBWSUB1] = KBWREC.KBWYBBCH;
    if (KBWREC.KBWYBBCH in YBBTBL.YBBCD /* ; valid ybbcd*/
     && KB0AM001.YBBCD[KBWSUB1] != "9999")
      KB0AM001.YBBDESC[KBWSUB1] = YBBTBL.YBBDESC[sysVar.arrayIndex];
    else
      set KB0AM001.YBBCD[KBWSUB1] cursor, bold;
      KB0AM001.YBBDESC[KBWSUB1] = " ";
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(26); /* invalid purchasing resp code*/
    end
  end


end // end KB0A062

// EDIT ADDRESS
Function KB0A069()

  KB0A070(); /* ; edit addr selections*/

  if (KBWREC.KBWERRFL == "N")
    if (KB0AM001.KBWASEL[1] == "S")
      KB0A071(); /* ; edit for billing address*/
    else
      if (KB0AM001.KBWASEL[2] == "S")
        KB0A072(); /* ; edit for company address*/
      else
        if (KB0AM001.KBWASEL[3] == "S")
          KB0A073();
                                   /* ; edit for shipping address*/
        else
          if (KB0AM001.KBWASEL[4] == "S")
            KB0A074(); /* ; edit for store address*/
          else
            if (KB0AM001.KBWASEL[5] == "S") /* ; buyer addr selected*/
              KB0A076();
            else
              if (KB0AM001.KBWASEL[6] == "S") /* ; want to view addresses*/
                KB0A077();
              end
            end
          end
        end
      end
    end
  end


end // end KB0A069

// EDIT ADDRESS SELECTION
Function KB0A070()

  if (KB0AM001.KBWACNBR[1] == 0 /* no address indicated at all*/
   && KB0AM001.KBWACNBR[2] == 0 
   && KB0AM001.KBWACNBR[3] == 0 
   && KB0AM001.KBWACNBR[4] == 0 
   && KB0AM001.KBWASEL[1] == " "
   && KB0AM001.KBWASEL[2] == " "
   && KB0AM001.KBWASEL[3] == " "
   && KB0AM001.KBWASEL[4] == " "
   && KB0AM001.KBWASEL[5] == " "
   && KB0AM001.KBWASEL[6] == " ")
    KBWREC.KBWERRFL = "Y";
    set KB0AM001.KBWASEL[1] cursor, bold;
    converseLib.validationFailed(27); /* ; 'ADDRESS SELECTION REQ'*/
  end

  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    KBWREC.KBWCNT = 0;
    KBWREC.KBWSUB1 = 4;
    while (KBWREC.KBWSUB1 != 0) /* count number of addresses*/
      if (KBWREC.KBWSUB1 > 2)
        KBWREC.KBWSUB = KBWREC.KBWSUB1 - 2;
        if (KB0AM001.KBWACNBR[KBWSUB1] != 0
         || KB0AM001.KBWASCHR[KBWSUB] != " ")
          KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
          set KB0AM001.KBWASCHR[KBWSUB] cursor, bold;
          set KB0AM001.KBWACNBR[KBWSUB1] cursor, bold;
        end
      else
        if (KB0AM001.KBWACNBR[KBWSUB1] != 0)
          KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
          set KB0AM001.KBWACNBR[KBWSUB1] cursor, bold;
        end
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
    end
    if (KBWREC.KBWCNT > 1)
      KBWREC.KBWERRFL = "Y"; /* error flag on*/
      converseLib.validationFailed(124); /* only 1 addr can be entered*/
    else
      set KB0AM001.KBWACNBR[1] initialAttributes;
      set KB0AM001.KBWACNBR[2] initialAttributes;
      set KB0AM001.KBWACNBR[3] initialAttributes;
      set KB0AM001.KBWACNBR[4] initialAttributes;
      set KB0AM001.KBWASCHR[1] initialAttributes;
      set KB0AM001.KBWASCHR[2] initialAttributes;
    end
  end

  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    KBWREC.KBWCNT = 0; /* ; clear count*/
    KBWREC.KBWSUB1 = 6;
    while (KBWREC.KBWSUB1 != 0)
      if (KB0AM001.KBWASEL[KBWSUB1] > " ") /* ; count selections*/
        KBWREC.KBWSUB = KBWREC.KBWSUB1; /* save location of entry*/
        KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
        set KB0AM001.KBWASEL[KBWSUB1] bold;
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
    end
    if (KBWREC.KBWCNT == 1) /* ; only one selection made*/
      if ("S" in KB0AM001.KBWASEL) /* ; selected with an 'S'*/
        set KB0AM001.KBWASEL[sysVar.arrayIndex] initialAttributes; /* ; okay*/
      else /* ; or*/
        if (KB0AM001.KBWASEL[5] == "*") /* buyer address already exists*/
          set KB0AM001.KBWASEL[5] initialAttributes; /* ; okay*/
        else
          KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
          set KB0AM001.KBWASEL[KBWSUB] cursor, bold;
          converseLib.validationFailed(36); /* ; 'MUST USE 'S' TO SELECT'*/
        end
      end
    end
    if (KBWREC.KBWCNT > 1) /* ; more than one selection*/
      KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
      set KB0AM001.KBWASEL[KBWSUB] cursor, bold;
      converseLib.validationFailed(28); /* ; 'ONE SELECTION ONLY'*/
    end
  end

  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    KBWREC.KBWCNT = 0;
    KBWREC.KBWSUB1 = 4;
    if (KB0AM001.KBWASEL[5] > " " /* buyer address selected*/
     || KB0AM001.KBWASEL[6] > " ") /* view address selected*/
      KBWREC.KBWCNT = KBWREC.KBWCNT + 1; /* count addresses*/
      while (KBWREC.KBWSUB1 != 0)
        if (KBWREC.KBWSUB1 > 2)
          KBWREC.KBWSUB = KBWREC.KBWSUB1 - 2;
          if (KB0AM001.KBWACNBR[KBWSUB1] != 0
           || KB0AM001.KBWASCHR[KBWSUB] != " ")
            KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
            set KB0AM001.KBWASCHR[KBWSUB] bold;
            set KB0AM001.KBWACNBR[KBWSUB1] bold;
          end
        else
          if (KB0AM001.KBWACNBR[KBWSUB1] != 0)
            KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
            set KB0AM001.KBWACNBR[KBWSUB1] bold;
          end
        end
        KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
      end
      if (KBWREC.KBWCNT > 1)
        if (KB0AM001.KBWASEL[6] > " ")
          set KB0AM001.KBWASEL[6] cursor, bold;
        end
        if (KB0AM001.KBWASEL[5] > " ")
          set KB0AM001.KBWASEL[5] cursor, bold;
        end
        KBWREC.KBWERRFL = "Y"; /* error flag on*/
        converseLib.validationFailed(124); /* only 1 addr can be entered*/
      else
        set KB0AM001.KBWACNBR[1] initialAttributes;
        set KB0AM001.KBWACNBR[2] initialAttributes;
        set KB0AM001.KBWACNBR[3] initialAttributes;
        set KB0AM001.KBWACNBR[4] initialAttributes;
        set KB0AM001.KBWASCHR[1] initialAttributes;
        set KB0AM001.KBWASCHR[2] initialAttributes;
      end
    end
  end

end // end KB0A070

// EDIT FOR BILLING ADDRESS
Function KB0A071()

  if (KB0AM001.KBWACNBR[1] == 0) /* ; no company entered*/
    KBWREC.KBWERRFL = "Y";
    set KB0AM001.KBWACNBR[1] cursor, bold;
    converseLib.validationFailed(89); /* ; 'COMPANY REQUIRED';*/
  else
    if (KB0AM001.KBWACNBR[2] > 0) /* ; wrong company*/
      KBWREC.KBWERRFL = "Y";
      set KB0AM001.KBWACNBR[2] cursor, bold;
      converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
    else
      if (KB0AM001.KBWACNBR[3] > 0) /* ; wrong company*/
        KBWREC.KBWERRFL = "Y";
        set KB0AM001.KBWACNBR[3] cursor, bold;
        converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
      else
        if (KB0AM001.KBWACNBR[4] > 0) /* ; wrong company*/
          KBWREC.KBWERRFL = "Y";
          set KB0AM001.KBWACNBR[4] cursor, bold;
          converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
        else
          if (KB0AM001.KBWASCHR[1] > " ") /* ; no store allowed*/
            KBWREC.KBWERRFL = "Y";
            set KB0AM001.KBWASCHR[1] cursor, bold;
            converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
          else
            if (KB0AM001.KBWASCHR[2] > " ") /* ; no store allowed*/
              KBWREC.KBWERRFL = "Y";
              set KB0AM001.KBWASCHR[2] cursor, bold;
              converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
            else
              KB0A081(); /* ; get billing addr info*/
            end
          end
        end
      end
    end
  end

end // end KB0A071

// EDIT FOR COMPANY ADDRESS
Function KB0A072()

  if (KB0AM001.KBWACNBR[2] == 0) /* ; company not entered*/
    KBWREC.KBWERRFL = "Y";
    set KB0AM001.KBWACNBR[2] cursor, bold;
    converseLib.validationFailed(91); /* ; 'COMPANY REQUIRED'*/
  else
    if (KB0AM001.KBWACNBR[1] > 0) /* ; wrong company*/
      KBWREC.KBWERRFL = "Y";
      set KB0AM001.KBWACNBR[1] cursor, bold;
      converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
    else
      if (KB0AM001.KBWACNBR[3] > 0) /* ; wrong company*/
        KBWREC.KBWERRFL = "Y";
        set KB0AM001.KBWACNBR[3] cursor, bold;
        converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
      else
        if (KB0AM001.KBWACNBR[4] > 0) /* ; wrong company*/
          KBWREC.KBWERRFL = "Y";
          set KB0AM001.KBWACNBR[4] cursor, bold;
          converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
        else
          if (KB0AM001.KBWASCHR[1] > " ") /* ; no stores allowed*/
            KBWREC.KBWERRFL = "Y";
            set KB0AM001.KBWASCHR[1] cursor, bold;
            converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
          else
            if (KB0AM001.KBWASCHR[2] > " ") /* no stores allowed*/
              KBWREC.KBWERRFL = "Y";
              set KB0AM001.KBWASCHR[2] cursor, bold;
              converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
            else
              KB0A082(); /* ; process company address*/
            end
          end
        end
      end
    end
  end

end // end KB0A072

// EDIT FOR SHIPPING ADDRESS
Function KB0A073()

  XP0AW01.XP0AWFLD = KB0AM001.KBWASCHR[1]; /* store id*/
  XP0A001(); /* ; edit for non-numeric*/
  if (XP0AW01.XP0AWEFL == "Y") /* ; found invalid chars*/
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0AM001.KBWASCHR[1] cursor, bold;
    converseLib.validationFailed(34); /* ; 'INVALID STORE ID'*/
  else
    if (KB0AM001.KBWACNBR[1] > 0) /* ; wrong company*/
      KBWREC.KBWERRFL = "Y";
      set KB0AM001.KBWACNBR[1] cursor, bold;
      converseLib.validationFailed(29);
                                   /* ; 'DATA AND SEL DON'T MATCH'*/
    else
      if (KB0AM001.KBWACNBR[2] > 0) /* ; wrong company*/
        KBWREC.KBWERRFL = "Y";
        set KB0AM001.KBWACNBR[2] cursor, bold;
        converseLib.validationFailed(29);
                                   /* ; 'DATA AND SEL DON'T MATCH'*/
      else
        if (KB0AM001.KBWACNBR[4] > 0) /* ; wrong company*/
          KBWREC.KBWERRFL = "Y";
          set KB0AM001.KBWACNBR[4] cursor, bold;
          converseLib.validationFailed(29);
                                   /* ; 'DATA AND SEL DON'T MATCH'*/
        else
          if (KB0AM001.KBWASCHR[2] > " ") /* ; wrong store*/
            KBWREC.KBWERRFL = "Y";
            set KB0AM001.KBWASCHR[2] cursor, bold;
            converseLib.validationFailed(29);
                                   /* ; 'DATA AND SEL DON'T MATCH'*/
          else
            if (KB0AM001.KBWACNBR[3] == 0)
              KBWREC.KBWERRFL = "Y";
              set KB0AM001.KBWACNBR[3] cursor, bold;
              converseLib.validationFailed(91); /* ; 'COMPANY REQUIRED'*/
            else
              if (KB0AM001.KBWASCHR[1] == " ")
                KBWREC.KBWERRFL = "Y";
                set KB0AM001.KBWASCHR[1] cursor, bold;
                converseLib.validationFailed(32); /* ; 'STORE REQUIRED'*/
              else
                KB0A083(); /* ; process store/ship addr*/
              end
            end
          end
        end
      end
    end
  end

end // end KB0A073

// EDIT FOR STORE ADDRESS
Function KB0A074()

  XP0AW01.XP0AWFLD = KB0AM001.KBWASCHR[2]; /* move store id*/
  XP0A001(); /* ; edit for non-numeric*/
  if (XP0AW01.XP0AWEFL == "Y") /* ; invalid characters*/
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0AM001.KBWASCHR[2] cursor, bold;
    converseLib.validationFailed(34); /* ; 'STORE ID INVALID'*/
  else
    if (KB0AM001.KBWACNBR[1] > 0) /* ; wrong company*/
      KBWREC.KBWERRFL = "Y";
      set KB0AM001.KBWACNBR[1] cursor, bold;
      converseLib.validationFailed(29); /* ; 'DATA & SEL DON'T MATCH'*/
    else
      if (KB0AM001.KBWACNBR[2] > 0) /* ; wrong company*/
        KBWREC.KBWERRFL = "Y";
        set KB0AM001.KBWACNBR[2] cursor, bold;
        converseLib.validationFailed(29); /* ; 'DATA & SEL DON'T MATCH'*/
      else
        if (KB0AM001.KBWACNBR[3] > 0) /* ; wrong company*/
          KBWREC.KBWERRFL = "Y";
          set KB0AM001.KBWACNBR[3] cursor, bold;
          converseLib.validationFailed(29); /* ; 'DATA & SEL DON'T MATCH'*/
        else
          if (KB0AM001.KBWACNBR[4] == 0)
            KBWREC.KBWERRFL = "Y";
            converseLib.validationFailed(91); /* ; 'COMPANY REQUIRED'*/
            set KB0AM001.KBWACNBR[4] cursor, bold;
          else
            if (KB0AM001.KBWASCHR[1] != " ") /* ; wrong store*/
              KBWREC.KBWERRFL = "Y";
              set KB0AM001.KBWASCHR[1] cursor, bold;
              converseLib.validationFailed(29); /* ; 'DATA & SEL DON'T MATCH'*/
            else
              if (KB0AM001.KBWASCHR[2] == " ") /* ; this store required*/
                KBWREC.KBWERRFL = "Y";
                set KB0AM001.KBWASCHR[2] cursor, bold;
                converseLib.validationFailed(32); /* ; 'STORE REQUIRED'*/
              else
                KB0A083(); /* ; proc store/ship addr*/
              end
            end
          end
        end
      end
    end
  end


end // end KB0A074

// EDIT FOR BUYER ADDRESS
Function KB0A076()

  KBWREC.KBWSUB1 = 1;
  while (KBWREC.KBWSUB1 <= 4)
    if (KB0AM001.KBWACNBR[KBWSUB1] > 0) /* no company nbr allowed*/
      KBWREC.KBWERRFL = "Y";
      set KB0AM001.KBWACNBR[KBWSUB1] bold;
    end
    if (KBWREC.KBWSUB1 > 2)
      KBWREC.KBWSUB = KBWREC.KBWSUB1 - 2;
      if (KB0AM001.KBWASCHR[KBWSUB] > " ") /* no store nbr allowed*/
        KBWREC.KBWERRFL = "Y";
        set KB0AM001.KBWASCHR[KBWSUB] bold;
      end
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end
  if (KBWREC.KBWERRFL == "Y")
    set KB0AM001.KBWASEL[5] cursor, bold;
    converseLib.validationFailed(29); /* ; 'CONFLICTING DATA'*/
  else
    KB0A020(); /* ; buyer address routine*/
  end
end // end KB0A076

// TRANS TO KB0W VIEW BUYER ADDRE
Function KB0A077()

  KBWREC.KBWSUB1 = 1;
  while (KBWREC.KBWSUB1 <= 4)
    if (KB0AM001.KBWACNBR[KBWSUB1] > 0) /* no company nbr allowed*/
      KBWREC.KBWERRFL = "Y";
      set KB0AM001.KBWACNBR[KBWSUB1] bold;
    end
    if (KBWREC.KBWSUB1 > 2)
      KBWREC.KBWSUB = KBWREC.KBWSUB1 - 2;
      if (KB0AM001.KBWASCHR[KBWSUB] > " ") /* no store nbr allowed*/
        KBWREC.KBWERRFL = "Y";
        set KB0AM001.KBWASCHR[KBWSUB] bold;
      end
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end

  if (KBWREC.KBWERRFL == "Y")
    set KB0AM001.KBWASEL[6] cursor, bold;
    converseLib.validationFailed(29); /* ; 'CONFLICTING DATA'*/
  else
    KB0AM001.KBWASEL[6] = " ";
    KB0A091(); /* save main screen*/
    KBWREC.KBWTBLID = " ";
    COMMAREA.CATOAP = "KB0W";
    COMMAREA.CAUSERA = KBWREC.KBWGROUP;
    XSEXIT();
    KB0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    COMMAREA.CAUSERA = " ";
  end

end // end KB0A077

// CONVERSE MAIN ADD SCREEN
Function KB0A080()


  converse KB0AM001 ;


  KBWREC.XXXMAPNM = "KB0AM001"; /* ; save current map*/

  if (KB0AM001.KBABUYID > 0) /* ; buyer id is assinged*/
    set KB0AM001.CATOAP cursor, normal;
  else
    set KB0AM001.XXXFSTNM cursor, normal;
    set KB0AM001.XXXMDINT normal;
    set KB0AM001.XXXLSTNM normal;
    set KB0AM001.XXXGNTNM normal;
    set KB0AM001.YBTCD normal;
    set KB0AM001.KBABUYFL normal;
    set KB0AM001.KBWAREA1 normal;
    set KB0AM001.KBWPRFX1 normal;
    set KB0AM001.KBWLINE1 normal;
    set KB0AM001.KBWAREA2 normal;
    set KB0AM001.KBWPRFX2 normal;
    set KB0AM001.KBWLINE2 normal;

    KBWREC.KBWSUB1 = 1;
    while (KBWREC.KBWSUB1 <= 10)
      set KB0AM001.YBBCD[KBWSUB1] normal;
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
    end

    set KB0AM001.KBWASEL[1] normal;
    set KB0AM001.KBWACNBR[1] normal;

    set KB0AM001.KBWASEL[2] normal;
    set KB0AM001.KBWACNBR[2] normal;

    set KB0AM001.KBWASEL[3] normal;
    set KB0AM001.KBWACNBR[3] normal;
    set KB0AM001.KBWASCHR[1] normal;

    set KB0AM001.KBWASEL[4] normal;
    set KB0AM001.KBWACNBR[4] normal;
    set KB0AM001.KBWASCHR[2] normal;

    set KB0AM001.KBWASEL[5] normal;

    set KB0AM001.CATOAP normal;
  end


end // end KB0A080

// GET BILL GROUP ADDRESS INFO
Function KB0A081()

  set SQLCA empty;
  set KUCREC empty; /* ; init company rec*/
  KUCREC.KUCCOID = KB0AM001.KBWACNBR[1]; /* ; use specified company*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ; company found*/
    if (KUCREC.XXXSTAT == "A")
      KBWREC.KUCCOID = KUCREC.KUCCOID; /* ; company id*/
      KBWREC.KULAAID = KUCREC.KUCBLAID; /* billing addr id*/
      KBWREC.XAD-ADDR-TYP-CD = "01"; /* bill to address*/
      KB0AM001.KULAAID[1] = KBWREC.KULAAID; /* addr id to map*/
      KB0AM001.KBWASEL[1] = " "; /* clear select byte*/
      KB0AM001.KULAAID[2] = 0; /* clear existing addr id's*/
      KB0AM001.KULAAID[3] = 0;
      KB0AM001.KULAAID[4] = 0;
    else
      KBWREC.KBWERRFL = "Y"; /* ; inactive company*/
      converseLib.validationFailed(107);
      set KB0AM001.KBWACNBR[1] cursor, bold;
    end
  else /* ; company not found*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(31); /* ; 'COMPANY NOT FOUND'*/
    else /* ; DB2 error*/
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01"; /* ; table view*/
      TA1REC.TA1LOCAT[1] = "KB0A081 ";
      TA1REC.TA1LOCAT[2] = "IO0240 "; /* ; i/o mod*/
      TA1REC.TA1LOCAT[3] = "S"; /* ; function*/
      KBWREC.KBWXIDCO = KUCREC.KUCCOID; /* ; table key*/
      TA1REC.TA1TBLKE = KBWREC.KBWXIDCO;
      XPKB900(); /* ; common abend routine*/
    end
  end
end // end KB0A081

// GET COMPANY ADDRESS INFO
Function KB0A082()

  set SQLCA empty;
  set KUCREC empty;
  KUCREC.KUCCOID = KB0AM001.KBWACNBR[2]; /* ; get company row*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ; company found*/
    if (KUCREC.XXXSTAT == "A") /* ; active company*/
      KBWREC.KUCCOID = KUCREC.KUCCOID; /* company id*/
      KBWREC.KULAAID = KUCREC.KUCCOAID; /* company addr id*/
      KBWREC.XAD-ADDR-TYP-CD = "04"; /* company address*/
      KB0AM001.KULAAID[2] = KBWREC.KULAAID; /* addr id to map*/
      KB0AM001.KBWASEL[2] = " "; /* ; clear selection*/
      KB0AM001.KULAAID[1] = 0; /* clear prev addr id's*/
      KB0AM001.KULAAID[3] = 0;
      KB0AM001.KULAAID[4] = 0;
    else
      KBWREC.KBWERRFL = "Y"; /* ; inactive company*/
      converseLib.validationFailed(107);
      set KB0AM001.KBWACNBR[2] cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; didn't find spec company*/
      KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
      converseLib.validationFailed(31); /* ; 'COMPANY NOT FOUND'*/
    else
      TA1REC.TA1MAP = "KB0AM001"; /* ; current map*/
      TA1REC.TA1DBASE = "DCUST"; /* ; data base name*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* ; table view*/
      TA1REC.TA1LOCAT[1] = "KB0A082 "; /* ; module name*/
      TA1REC.TA1LOCAT[2] = "IO0240 "; /* ; iomod*/
      TA1REC.TA1LOCAT[3] = "S"; /* ; function*/
      KBWREC.KBWXIDCO = KB0AM001.KBWACNBR[2];
                                   /* company number entered*/
      TA1REC.TA1TBLKE = KBWREC.KBWXIDCO; /* ; key to table*/
      XPKB900(); /* ; common abend routine*/
    end
  end
end // end KB0A082

// GET STORE ADDRESS INFO
Function KB0A083()

  set KUMREC empty; /* ; init store record*/
  if (KB0AM001.KBWASEL[3] == "S") /* ; chose shipping addr*/
    KUMREC.KUCCOID = KB0AM001.KBWACNBR[3]; /* ; move entered company*/
    KBWREC.KBWSTRCH = KB0AM001.KBWASCHR[1]; /* move entered store*/
    KBWREC.KBWSTRID = KBWREC.KBWSTRID * 1; /* multiply to zero fill*/
    KBWREC.KUMSTRID = KBWREC.KBWSTRID; /* move to bin*/
    KUMREC.KUMSTRID = KBWREC.KUMSTRID; /* ; move to kumrec*/
    KB0AM001.KBWASCHR[1] = KBWREC.KBWSTRCH; /* move to screen*/
  else /* ; chose store address*/
    KUMREC.KUCCOID = KB0AM001.KBWACNBR[4]; /* company number*/
    KBWREC.KBWSTRCH = KB0AM001.KBWASCHR[2]; /* move entered store*/
    KBWREC.KBWSTRID = KBWREC.KBWSTRID * 1; /* multiply to zero fill*/
    KBWREC.KUMSTRID = KBWREC.KBWSTRID; /* move to bin*/
    KUMREC.KUMSTRID = KBWREC.KUMSTRID; /* ; move to kumrec*/
    KB0AM001.KBWASCHR[2] = KBWREC.KBWSTRCH; /* move to screen*/
  end

  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ; found store*/
    if (KUMREC.XXXSTAT == "A") /* ; store is active*/
      KBWREC.KUCCOID = KUMREC.KUCCOID; /* company id*/
      KBWREC.KBW-KUMSTRID = KUMREC.KUMSTRID; /* store id*/
      if (KB0AM001.KBWASEL[3] == "S") /**/
        KBWREC.KULAAID = KUMREC.KUMSHAID; /* shipping addr id*/
        KB0AM001.KULAAID[3] = KBWREC.KULAAID;
        KBWREC.XAD-ADDR-TYP-CD = "03"; /* ship to address*/
        KB0AM001.KULAAID[1] = 0; /* clear prev addr id's*/
        KB0AM001.KULAAID[2] = 0;
        KB0AM001.KULAAID[4] = 0;
        KB0AM001.KBWASCHR[2] = " ";
      else
        KBWREC.KULAAID = KUMREC.KUMSTAID; /* store addr id*/
        KB0AM001.KULAAID[4] = KBWREC.KULAAID;
        KBWREC.XAD-ADDR-TYP-CD = "05"; /* store address*/
        KB0AM001.KULAAID[1] = 0; /* clear prev addr id's*/
        KB0AM001.KULAAID[2] = 0;
        KB0AM001.KULAAID[3] = 0;
        KB0AM001.KBWASCHR[1] = " ";
      end
      KB0AM001.KBWASEL[3] = " "; /* ; clear selections*/
      KB0AM001.KBWASEL[4] = " ";
    else
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(108); /* inactive store*/
      if (KB0AM001.KBWASEL[3] == "S")
        set KB0AM001.KBWASCHR[1] cursor, bold;
      else
        set KB0AM001.KBWASCHR[2] cursor, bold;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; store id not found*/
      KUCREC.KUCCOID = KUMREC.KUCCOID; /* ; try to find company*/
      set SQLCA empty;
      call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == +100) /* ; company not found either*/
        KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
        converseLib.validationFailed(35); /* ; 'INVALID COMPANY/STORE'*/
      else
        if (SQLCA.VAGen_SQLCODE == 0) /* ; found company*/
          KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
          converseLib.validationFailed(34); /* ; 'INVALID STORE ID'*/
        else /* ; DB error on cmpny*/
          TA1REC.TA1LOCAT[1] = "KB0A083 "; /* ; module name*/
          TA1REC.TA1LOCAT[2] = "IO0240 "; /* ; IOMOD*/
          TA1REC.TA1LOCAT[3] = "S"; /* ; function*/
          TA1REC.TA1MAP = "KB0AM001"; /* ; map name*/
          TA1REC.TA1DBASE = "DCUST"; /* ; database*/
          TA1REC.TA1TBLVU = "VCMPNY01"; /* ; view*/
          KBWREC.KBWXIDCO = KUCREC.KUCCOID; /* company number*/
          TA1REC.TA1TBLKE = KBWREC.KBWXIDCO; /* table key*/
          XPKB900(); /* ; common abend routine*/
        end
      end
    else /* ; DB2 error on store*/
      TA1REC.TA1LOCAT[1] = "KB0A083 "; /* ; module name*/
      TA1REC.TA1LOCAT[2] = "IO0340 "; /* ; IOMOD*/
      TA1REC.TA1LOCAT[3] = "S"; /* ; function*/
      TA1REC.TA1MAP = "KB0AM001"; /* ; current map*/
      TA1REC.TA1DBASE = "DCUST"; /* ; data base name*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* ; table view*/
      KBWREC.KBWXIDCO = KUMREC.KUCCOID; /* ; company number*/
      KBWREC.KBWXIDST = KUMREC.KUMSTRID; /* ; store number*/
      TA1REC.TA1TBLKE = KBWREC.KBWSTRKE; /* ; key to table*/
      XPKB900(); /* ; common abend routine*/
    end
  end

end // end KB0A083

// MOVE W/S TO KB0AM001
Function KB0A090()


  set KB0AM001 initial;

  KB0AM001.KB0AMDTE = VGVar.currentShortGregorianDate;
  KB0AM001.KBABUYID = KBWREC.KBABUYID;
  KB0AM001.XXXFSTNM = KBWREC.XXXFSTNM;
  KB0AM001.XXXMDINT = KBWREC.XXXMDINT;
  KB0AM001.XXXLSTNM = KBWREC.XXXLSTNM;
  KB0AM001.XXXGNTNM = KBWREC.XXXGNTNM;

  KB0AM001.YBTCD = KBWREC.YBTCD;
  if (KBWREC.YBTCD in YBTTBL.YBTCD)
    KB0AM001.YBTDESC = YBTTBL.YBTDESC[sysVar.arrayIndex];
  end

  KB0AM001.KBABUYFL = KBWREC.KBABUYFL;
  KB0AM001.KBWAREA1 = KBWREC.KBWAREA1;
  KB0AM001.KBWPRFX1 = KBWREC.KBWPRFX1;
  KB0AM001.KBWLINE1 = KBWREC.KBWLINE1;
  KB0AM001.KBWAREA2 = KBWREC.KBWAREA2;
  KB0AM001.KBWLINE2 = KBWREC.KBWLINE2;
  KB0AM001.KBWPRFX2 = KBWREC.KBWPRFX2;

  KBWREC.KBWSUB1 = 1;
  while (KBWREC.KBWSUB1 <= 10)
    KB0AM001.YBBCD[KBWSUB1] = KBWREC.YBBCD[KBWSUB1];
    if (KBWREC.YBBCD[KBWSUB1] in YBBTBL.YBBCD)
      KB0AM001.YBBDESC[KBWSUB1] = YBBTBL.YBBDESC[sysVar.arrayIndex];
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end

  KB0AM001.KBWASEL[1] = KBWREC.KBWASEL[1];
  KB0AM001.KBWACNBR[1] = KBWREC.KBWACNBR[1];
  KB0AM001.KULAAID[1] = KBWREC.KBWAAID[1];

  KB0AM001.KBWASEL[2] = KBWREC.KBWASEL[2];
  KB0AM001.KBWACNBR[2] = KBWREC.KBWACNBR[2];
  KB0AM001.KULAAID[2] = KBWREC.KBWAAID[2];

  KB0AM001.KBWASEL[3] = KBWREC.KBWASEL[3];
  KB0AM001.KBWACNBR[3] = KBWREC.KBWACNBR[3];
  KB0AM001.KULAAID[3] = KBWREC.KBWAAID[3];
  KB0AM001.KBWASCHR[1] = KBWREC.KBWASCHR[1];

  KB0AM001.KBWASEL[4] = KBWREC.KBWASEL[4];
  KB0AM001.KBWACNBR[4] = KBWREC.KBWACNBR[4];
  KB0AM001.KULAAID[4] = KBWREC.KBWAAID[4];
  KB0AM001.KBWASCHR[2] = KBWREC.KBWASCHR[2];

  KB0AM001.KBWASEL[5] = KBWREC.KBWASEL[5];
  KB0AM001.KBWASEL[6] = KBWREC.KBWASEL[6];

  if (KBWREC.XAD-ADDR-TYP-CD == "01") /* bill to address*/
    KB0AM001.KULAAID[1] = KBWREC.KULAAID;
  else
    if (KBWREC.XAD-ADDR-TYP-CD == "03") /* ship to address*/
      KB0AM001.KULAAID[3] = KBWREC.KULAAID;
    else
      if (KBWREC.XAD-ADDR-TYP-CD == "04") /* company address*/
        KB0AM001.KULAAID[2] = KBWREC.KULAAID;
      else
        if (KBWREC.XAD-ADDR-TYP-CD == "05") /* store address*/
          KB0AM001.KULAAID[4] = KBWREC.KULAAID;
        end
      end
    end
  end

  if (KBWREC.KBABUYID == 0) /* ; buyer id not assigned*/
    if (COMMAREA.CAFROMAP == "KB0U") /* ; from list program*/
      if (KBWREC.KBWTBLID == "BT") /* ; list = title*/
        set KB0AM001.YBTCD cursor; /* ; position cursor*/
      else
        if (KBWREC.KBWTBLID == "BB") /* ; list = responsibilites*/
          set KB0AM001.YBBCD cursor; /* ; position cursor*/
        end
      end
    end

  else
    set KB0AM001.XXXFSTNM skip; /* ; protect entered fields*/
    set KB0AM001.XXXMDINT skip;
    set KB0AM001.XXXLSTNM skip;
    set KB0AM001.XXXGNTNM skip;
    set KB0AM001.YBTCD skip;
    set KB0AM001.KBABUYFL skip;
    set KB0AM001.KBWAREA1 skip;
    set KB0AM001.KBWPRFX1 skip;
    set KB0AM001.KBWLINE1 skip;
    set KB0AM001.KBWAREA2 skip;
    set KB0AM001.KBWLINE2 skip;
    set KB0AM001.KBWPRFX2 skip;

    set KB0AM001.YBBCD[1] skip;
    set KB0AM001.YBBCD[2] skip;
    set KB0AM001.YBBCD[3] skip;
    set KB0AM001.YBBCD[4] skip;
    set KB0AM001.YBBCD[5] skip;
    set KB0AM001.YBBCD[6] skip;
    set KB0AM001.YBBCD[7] skip;
    set KB0AM001.YBBCD[8] skip;
    set KB0AM001.YBBCD[9] skip;
    set KB0AM001.YBBCD[10] skip;

    set KB0AM001.KBWASEL[1] skip;
    set KB0AM001.KBWASEL[2] skip;
    set KB0AM001.KBWASEL[3] skip;
    set KB0AM001.KBWASEL[4] skip;
    set KB0AM001.KBWASEL[5] skip;
    set KB0AM001.KBWASEL[6] skip;

    set KB0AM001.KBWACNBR[1] skip;
    set KB0AM001.KBWACNBR[2] skip;
    set KB0AM001.KBWACNBR[3] skip;
    set KB0AM001.KBWACNBR[4] skip;

    set KB0AM001.KBWASCHR[1] skip;
    set KB0AM001.KBWASCHR[2] skip;

    set KB0AM001.CATOAP cursor, normal;

    if (KBWREC.KBWATCHF == "Y") /* ; attachments made*/
      converseLib.validationFailed(38);
    else
      converseLib.validationFailed(39);
    end
  end

  KBWREC.KBWMSGFL = " "; /* ; reset warning flag*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset curr pfkey*/
  KBWREC.KBWPFKEY[2] = " "; /* ; reset curr pfkey*/


end // end KB0A090

// MOVE KB0AM001 TO W/S
Function KB0A091()


  KBWREC.KBABUYID = KB0AM001.KBABUYID;
  KBWREC.XXXFSTNM = KB0AM001.XXXFSTNM;
  KBWREC.XXXMDINT = KB0AM001.XXXMDINT;
  KBWREC.XXXLSTNM = KB0AM001.XXXLSTNM;
  KBWREC.XXXGNTNM = KB0AM001.XXXGNTNM;
  KBWREC.KBABUYFL = KB0AM001.KBABUYFL;
  KBWREC.KBWAREA1 = KB0AM001.KBWAREA1;
  KBWREC.KBWPRFX1 = KB0AM001.KBWPRFX1;
  KBWREC.KBWLINE1 = KB0AM001.KBWLINE1;
  KBWREC.KBWAREA2 = KB0AM001.KBWAREA2;
  KBWREC.KBWLINE2 = KB0AM001.KBWLINE2;
  KBWREC.KBWPRFX2 = KB0AM001.KBWPRFX2;

  KBWREC.KBWSPLIT = KB0AM001.YBTCD;
  if (KBWREC.KBWSPLT1 == "?" /* if requesting a list of titles*/
   || KBWREC.KBWSPLT2 == "?" /* don't overlay existing title*/
   || KBWREC.KBWSPLT3 == "?") /* with a '?'.*/
  /* next sentence*/
  else
    KBWREC.YBTCD = KB0AM001.YBTCD;
  end

  KBWREC.KBWSUB1 = 1;
  while (KBWREC.KBWSUB1 <= 10)
    KBWREC.KBWSPLIT = KB0AM001.YBBCD[KBWSUB1];
    if (KBWREC.KBWSPLT1 == "?" /* if requesting a list of purch resp*/
     || KBWREC.KBWSPLT2 == "?" /* don't overlay existing code with*/
     || KBWREC.KBWSPLT3 == "?" /* a '?'.*/
     || KBWREC.KBWSPLT4 == "?")
  /* next sentence*/
    else
      KBWREC.YBBCD[KBWSUB1] = KB0AM001.YBBCD[KBWSUB1];
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end

  KBWREC.KBWASEL[1] = KB0AM001.KBWASEL[1];
  KBWREC.KBWACNBR[1] = KB0AM001.KBWACNBR[1];
  KBWREC.KBWAAID[1] = KB0AM001.KULAAID[1];

  KBWREC.KBWASEL[2] = KB0AM001.KBWASEL[2];
  KBWREC.KBWACNBR[2] = KB0AM001.KBWACNBR[2];
  KBWREC.KBWAAID[2] = KB0AM001.KULAAID[2];

  KBWREC.KBWASEL[3] = KB0AM001.KBWASEL[3];
  KBWREC.KBWACNBR[3] = KB0AM001.KBWACNBR[3];
  KBWREC.KBWAAID[3] = KB0AM001.KULAAID[3];
  KBWREC.KBWASCHR[1] = KB0AM001.KBWASCHR[1];

  KBWREC.KBWASEL[4] = KB0AM001.KBWASEL[4];
  KBWREC.KBWACNBR[4] = KB0AM001.KBWACNBR[4];
  KBWREC.KBWAAID[4] = KB0AM001.KULAAID[4];
  KBWREC.KBWASCHR[2] = KB0AM001.KBWASCHR[2];

  KBWREC.KBWASEL[5] = KB0AM001.KBWASEL[5];
  KBWREC.KBWASEL[6] = KB0AM001.KBWASEL[6];


end // end KB0A091

// CHECK FOR FASTPATH
Function KB0A100()

  KB0A230(); /* ; purge temp storage*/

  COMMAREA.CATOAP = KB0AM001.CATOAP;
  COMMAREA.CAITEM = KB0AM001.CAITEM;
  KBWREC.KBWADDFL = " ";

  XPKB040(); /* ; edit fast path usage*/

  KBWREC.KBWADDFL = "A";
  set KB0AM001.CATOAP cursor, bold;
  KB0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " ";


end // end KB0A100

// PROCESS PF3,PF4 KEYS
Function KB0A105()

  KB0A230(); /* purge temp storage*/

  COMMAREA.CATOAP = "KB0M"; /* TRANSFER TO MAIN MENU*/

  set KBWREC empty; /* init kbwrec*/
  COMMAREA.CAUSERA = KBWREC.KBWGROUP;

  XSEXIT();

  KB0AM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " ";

end // end KB0A105

// S1 FRO SIMILAR LAST NAME MATCH
Function KB0A110()


  KB0AW-SUB = 0; /* init subscript for similar names*/

  set SQLCA empty;
  set KBAREC empty;

  KBAREC.XXXLSTSN = KBWREC.XXXLSTSN;

  call "IO4310" ("S1", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KB0A115(); /* fetch first row*/
  else
    KBWREC.KBWBIDKE = KBAREC.KBABUYID;
    set TA1REC empty;
    TA1REC.TA1LOCAT[1] = "KB0A110";
    TA1REC.TA1LOCAT[2] = "IO4310";
    TA1REC.TA1LOCAT[3] = "S1";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBUYER01";
    TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;

    XPKB900();
  end


end // end KB0A110

// FETCH BUYER RECORD
Function KB0A115()


  set SQLCA empty;
  set KBAREC empty;

  call "IO4310" ("N1", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
        /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KBWREC.KBWEOF = "Y";
    else
      KBWREC.KBWBIDKE = KBAREC.KBABUYID;

      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "KB0A115";
      TA1REC.TA1LOCAT[2] = "IO4310";
      TA1REC.TA1LOCAT[3] = "N1";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBUYER01";
      TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;

      XPKB900();
    end
  end



end // end KB0A115

// LOAD SIMILAR NAME TEMP STORAGE
Function KB0A120()

  KB0AW01.KB0AW-SUB = KB0AW01.KB0AW-SUB + 1;

  KB0AW02.KBABUYID[KB0AW-SUB] = KBAREC.KBABUYID; /* buyer id*/
  KB0AW02.XXXFSTNM[KB0AW-SUB] = KBAREC.XXXFSTNM; /* first name*/
  KB0AW02.XXXMDINT[KB0AW-SUB] = KBAREC.XXXMDINT; /* middle initial*/
  KB0AW02.XXXLSTNM[KB0AW-SUB] = KBAREC.XXXLSTNM; /* last name*/
  KB0AW02.XXXGNTNM[KB0AW-SUB] = KBAREC.XXXGNTNM; /* generation*/

  KB0AW02.KUCCOID[KB0AW-SUB] = KBAREC.KUCCOID; /* company id*/
  KB0AW02.KUMSTRID[KB0AW-SUB] = KBAREC.KUMSTRID; /* store id*/

  KB0AW02.XAD-ADDR-TYP-CD[KB0AW-SUB] = KBAREC.XAD-ADDR-TYP-CD;
  if (KBAREC.XAD-ADDR-TYP-CD in XADTBL.XAD-ADDR-TYP-CD) /* address type desc*/
    KB0AW02.XAD-ADDR-TYP-ABRV[KB0AW-SUB] = XADTBL.XAD-ADDR-TYP-ABRV[sysVar.arrayIndex];
  else
    KB0AW02.XAD-ADDR-TYP-ABRV[KB0AW-SUB] = " ";
  end


  if (KB0AW01.KB0AW-SUB == 10) /* page is full*/
    KB0A210(); /* write temp storage page*/
  end

  KB0A115(); /* SELECT NEXT BUYER RECORD*/


end // end KB0A120

// CLOSE BUYER CURSOR
Function KB0A125()

  set SQLCA empty;
  set KBAREC empty;

  call "IO4310" ("C1", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    KBWREC.KBWBIDKE = KBAREC.KBABUYID;

    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "KB0A125";
    TA1REC.TA1LOCAT[2] = "IO4310";
    TA1REC.TA1LOCAT[3] = "C1";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBUYER01";
    TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;

    XPKB900();
  end


end // end KB0A125

// Read Temporary Storage
Function KB0A200()

  set KB0AW02 empty;
  set TA5REC empty;

  TA5REC.TA5APPID = "KB0A"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = KB0AW01.KB0AW-CURR-PAGE; /* current page*/
  KB0AW02.KB0AW-TS-LENGTH = 634; /* length of record*/

  call "TA0050" (KB0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0A200";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0AW02.KB0AW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE READING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/

  end
end // end KB0A200

// Add Temporary Storage
Function KB0A210()

  set TA5REC empty;
  TA5REC.TA5APPID = "KB0A"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  KB0AW02.KB0AW-TS-LENGTH = 634; /* length of record*/

  call "TA0050" (KB0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    KB0AW01.KB0AW-MAX-PAGE = TA5REC.TA5TSQIX; /* max page number*/
    set KB0AW02 empty; /* reinitialize page*/
    KB0AW01.KB0AW-SUB = 0; /* reinitialize line subscript*/
  else
    TA1REC.TA1LOCAT[1] = "KB0A210";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0AW02.KB0AW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE ADDING TO TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/
  end
end // end KB0A210

// Purge Temporary Storage
Function KB0A230()

  set TA5REC empty;
  TA5REC.TA5APPID = "KB0A"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (KB0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0A230";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0AW02.KB0AW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE PURGING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/
  end
end // end KB0A230

//*** RECORD=KB0AW01 ****
// Working area for KB0A, Add buyer application
// ***********************
Record KB0AW01 type basicRecord
  5 KB0AW-GROUP1 KB0AW-GROUP1 ; 
    10 KB0AW-MAX-PAGE KB0AW-MAX-PAGE ; 
    10 KB0AW-CURR-PAGE KB0AW-CURR-PAGE ; 
    10 KB0AW-SUB KB0AW-SUB ; 
    10 KB0AW-ACCT-MSG KB0AW-ACCT-MSG ; 
      15 KB0AW-ACCTS-ATTACHED KB0AW-ACCTS-ATTACHED ; 
      15 KB0AW-ACCT-MSGA KB0AW-ACCT-MSGA ; 
end // end KB0AW01

//*** RECORD=KB0AW02 ****
// Temporary Storage Record used for similiar names screen.
// ***********************
Record KB0AW02 type basicRecord
  5 KB0AW-GROUP2 KB0AW-GROUP2 ; 
    10 KB0AW-TS-LENGTH KB0AW-TS-LENGTH ; 
    10 KB0AW-TS-ROW KB0AW-TS-ROW [10] ; 
      15 KB0AW-SEL KB0AW-SEL ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XAD-ADDR-TYP-CD XAD-ADDR-TYP-CD ; 
      15 XAD-ADDR-TYP-ABRV XAD-ADDR-TYP-ABRV ; 
      15 KBABUYID KBABUYID ; 
      15 XXXFSTNM XXXFSTNM ; 
      15 XXXMDINT XXXMDINT ; 
      15 XXXLSTNM XXXLSTNM ; 
      15 XXXGNTNM XXXGNTNM ; 
end // end KB0AW02

//*** RECORD=KB0AW03 ****
// Work area for maintaining Purchasing Responsibility Codes
// ***********************
Record KB0AW03 type basicRecord
  10 KB0AW-GROUP4 KB0AW-GROUP4 ; 
    15 YBBCD YBBCD [10] ; 
end // end KB0AW03

// account message
DataItem KB0AW-ACCT-MSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// account message literal
DataItem KB0AW-ACCT-MSGA char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of accounts attached
DataItem KB0AW-ACCTS-ATTACHED num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current page number
DataItem KB0AW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// group level for kb0aw01
DataItem KB0AW-GROUP1 char(87)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kb0aw02 group level
DataItem KB0AW-GROUP2 char(634)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem KB0AW-GROUP4 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maximum page number
DataItem KB0AW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select indicator
DataItem KB0AW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript
DataItem KB0AW-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp storage record length
DataItem KB0AW-TS-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage row
DataItem KB0AW-TS-ROW char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

