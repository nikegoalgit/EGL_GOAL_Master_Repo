package kb0v;

import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB014;
import corpcom3.XPKB015;
import corpcom3.XPKB022;
import corpcom3.XPKB025;
import corpcom3.XPKB026;
import corpcom3.XPKB028;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import kb.common.KBAREC;
import kb.common.KBCREC;
import kb.common.KBIREC;
import kb.common.KBWREC;
import ku.common.KUEREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0V ****
// This is the Buyer Notepad Inquiry application
// ;
// Date created: April, 1990
// Maintenance:
// ;
// Init     Date     Reason
// ----    ------    ------------------------------------------
// tmorri  02/01/93  This application has been modified as
//                   part of the Buyer System Enhancement
//                   project.  The main objective of this
//                   project is to give Nike Sales Reps and
//                   Sales Admin a way to associate buyers to
//                   sales reps via the sales responsibility
//                   code.  (See specs for details relating
//                   to this specific application).
// ;
// *********************
Program KB0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0VW01 KB0VW01; // record
  KBAREC KBAREC; // record
  KBCREC KBCREC; // record
  KBIREC KBIREC; // record
  KBWREC KBWREC; // record
  KUEREC KUEREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KB0VM.KB0VM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0V001: KB0V001();
    ;
    ;
    goto KB0V005;
    ;
    ;
    KB0V005: KB0V005();
    ;
    ;
    goto KB0V005;
    ;
    ;
  end // end main
end // end KB0V

// INITIALIZE NOTES INQUIRY
Function KB0V001()
  ;
  ;
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/
  ;
  XPKB028(); /* ; purge temp storage*/
  ;
  if (COMMAREA.CAFROMAP == "KB0I" /* ; came from Buyer Inquiry*/
   || COMMAREA.CAFROMAP == "KB0L") /* ; or Buyer Attachments*/
    XPKB002(); /* ; Initialize KBWREC*/
    XPKB010(); /* ; Read KBAREC*/
    if (KBWREC.KBWBFND == "Y") /* ; valid buyer*/
      KBWREC.KBWERRFL = "N"; /* ; init error flag*/
      KB0V100(); /* ; load temp storage*/
      if (KBWREC.KBWERRFL == "N") /* ; accounts loaded*/
        KB0VW01.KB0VW-CURR-PAGE = 1; /* ; init current page*/
      end
    end
    KB0V090(); /* ; move ts to KB0VM001*/
  else
    set KBWREC empty; /* ; initialize kbwrec*/
    ;
    COMMAREA.CATOAP = "KB0M"; /* ; xfer to buyer menu*/
    COMMAREA.CAUSERA = KBWREC.KBWGROUP; /* ; initialize commarea*/
    ;
    XSEXIT();
    ;
    exit program;
  end
  ;
  ;
end // end KB0V001

// MAINLINE NOTES INQUIRY
Function KB0V005()
  ;
  KB0V080(); /* ; converse screen*/
  ;
  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* save prev pfkey*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset current pfkey*/
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  if (converseVar.eventKey is pf3) /* ; user requested prev*/
    XPKB028(); /* ; purge temp storage*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* ; xfer to prev screen*/
    COMMAREA.CAUSERA = KBWREC.KBWGROUP; /* ; save KBWREC*/
    ;
    XSEXIT();
    ;
    KB0VM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    COMMAREA.CAUSERA = " ";
  else
    if (converseVar.eventKey is pf4) /* ; user requested menu*/
      KBWREC.KBWPFKEY[1] = "PF4"; /* save current pfkey*/
      if (KBWREC.KBWADDFL == "A" /* ; in add mode*/
       && KBWREC.KBWPFKEY[2] != "PF4") /* pf4 unconfirmed*/
        converseLib.validationFailed(144);
        KBWREC.KBWERRFL = "Y";
      else
        XPKB028(); /* ; purge temp storage*/
        set KBWREC empty;
        COMMAREA.CATOAP = "KB0M";
        ;
        XSEXIT();
        ;
        KB0VM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
      end
    else
      if (converseVar.eventKey is pf7 /* ; scroll back requested*/
       || converseVar.eventKey is pf8 /* ; edit forward requested*/
       || converseVar.eventKey is enter)
  /* next sentence*/
      else
        converseLib.validationFailed(7); /* ; invalid pf/pa key*/
        KBWREC.KBWERRFL = "Y";
      end
    end
  end
  ;
  ;
  if (KBWREC.KBWBFND == "Y" /* ; valid buyer*/
   && KBWREC.KBWERRFL == "N") /* ; no errors*/
    KB0V048(); /* ; edit map*/
    if (KBWREC.KBWERRFL == "N") /* ; still no errors*/
      if (converseVar.eventKey is pf7 /* ; scroll back*/
       || converseVar.eventKey is pf8 /* ; scroll frwd*/
       || KB0VM001.KBWPAGE != KB0VW01.KB0VW-CURR-PAGE)
        KB0V047(); /* ; build new page*/
      else
        XPKB028(); /* ; purge temp storage*/
        COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* ; xfer to prev screen*/
        COMMAREA.CAUSERA = KBWREC.KBWGROUP; /* ; save KBWREC*/
        ;
        XSEXIT();
        ;
        KB0VM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
        COMMAREA.CAUSERA = " ";
      end
    end
  end
  ;
  ;
end // end KB0V005

// BUILD NEW PAGE FROM TEMP STOR
Function KB0V047()
  ;
  ;
  /* determine new page number*/
  ;
  if (converseVar.eventKey is pf7)
    KB0VW01.KB0VW-CURR-PAGE = KB0VW01.KB0VW-CURR-PAGE - 1;
  else
    if (converseVar.eventKey is pf8)
      KB0VW01.KB0VW-CURR-PAGE = KB0VW01.KB0VW-CURR-PAGE + 1;
    else
      KB0VW01.KB0VW-CURR-PAGE = KB0VM001.KBWPAGE;
    end
  end
  ;
  KBWREC.KBWPAGE = KB0VW01.KB0VW-CURR-PAGE; /* set ts page*/
  XPKB025(); /* read temporary storage*/
  ;
  KB0V090(); /* move temp storage to map*/
  ;
  ;
  ;
  ;
end // end KB0V047

// EDIT MAP
Function KB0V048()
  ;
  ;
  if (converseVar.eventKey is pf7)
    if (KB0VW01.KB0VW-MAX-PAGE == 0)
      converseLib.validationFailed(171); /* no comments displayed - can't scroll*/
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0VM001.KBWPAGE == 1)
        converseLib.validationFailed(8); /* already at top*/
        set KB0VM001.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      else
        if (KB0VM001.KBWPAGE != KB0VW01.KB0VW-CURR-PAGE)
          converseLib.validationFailed(113); /* can't change page and scroll*/
          set KB0VM001.KBWPAGE cursor, bold;
          KBWREC.KBWERRFL = "Y";
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is pf8)
    if (KB0VW01.KB0VW-MAX-PAGE == 0)
      converseLib.validationFailed(171); /* no comments displayed - can't scroll*/
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0VM001.KBWPAGE == KB0VM001.KBWTOTPG)
        converseLib.validationFailed(9); /* already at bottom*/
        set KB0VM001.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      else
        if (KB0VM001.KBWPAGE != KB0VW01.KB0VW-CURR-PAGE)
          converseLib.validationFailed(113); /* can't change page and scroll*/
          set KB0VM001.KBWPAGE cursor, bold;
          KBWREC.KBWERRFL = "Y";
        end
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0VM001.KBWPAGE == 0
     && KB0VW01.KB0VW-MAX-PAGE != 0)
      converseLib.validationFailed(48); /* invalid page number*/
      set KB0VM001.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0VM001.KBWPAGE > KB0VM001.KBWTOTPG)
        converseLib.validationFailed(48); /* invalid page number*/
        set KB0VM001.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end
  ;
  ;
  ;
  ;
end // end KB0V048

// SEND/RECEIVE NOTES INQ SCRN
Function KB0V080()
  ;
  ;
  converse KB0VM001 ;
  ;
  converseLib.validationFailed(0); /* reset error message*/
  set KB0VM001.KBWPAGE normal, cursor;
  ;
end // end KB0V080

// MOVE W/S TO KB0VM001
Function KB0V090()
  ;
  ;
  set KB0VM001 initial;
  ;
  KB0VM001.KB0VMDAT = VGVar.currentShortGregorianDate;
  KB0VM001.KBABUYID = KBWREC.KBABUYID;
  ;
  if (KBWREC.KBWBFND == "N") /* buyer not found*/
    converseLib.validationFailed(143); /* return to previous screen*/
  else
    KB0VM001.XXXFSTNM = KBAREC.XXXFSTNM; /* move buyer data*/
    KB0VM001.XXXMDINT = KBAREC.XXXMDINT;
    KB0VM001.XXXLSTNM = KBAREC.XXXLSTNM;
    KB0VM001.XXXGNTNM = KBAREC.XXXGNTNM;
  end
  ;
  if (KBWREC.KBWBFND == "Y" /* ; buyer found*/
   && KBWREC.KBWERRFL == "N") /* ; no errors*/
    ;
    KBWREC.KBWPAGE = KB0VW01.KB0VW-CURR-PAGE; /* set curr page*/
    ;
    XPKB025(); /* ; read temp storage page*/
    ;
    KB0VW01.KB0VW-SUB = 1;
    while (KB0VW-SUB <= 15) /* move comments from ts to map*/
      KB0VM001.KUECOMNT[KB0VW-SUB] = KBCREC.KUECOMNT[KB0VW-SUB];
      KB0VM001.ZZZCHGDT[KB0VW-SUB] = KBCREC.ZZZCHGDT[KB0VW-SUB];
      ;
      KB0VW01.KB0VW-SUB = KB0VW01.KB0VW-SUB + 1;
    end
    ;
    KB0VM001.KBWPAGE = KB0VW01.KB0VW-CURR-PAGE;
    KB0VM001.KBWTOTPG = KB0VW01.KB0VW-MAX-PAGE;
  end
  ;
  ;
end // end KB0V090

// LOAD TEMPORARY STORAGE
Function KB0V100()
  ;
  ;
  set KBCREC empty; /* ; init ts record*/
  set KB0VW01 empty; /* ; init working storage record*/
  KB0VW01.KB0VW-SUB = 0; /* ; init comment subscript*/
  KBWREC.KBWEOF = "N"; /* ; init eof flag*/
  ;
  XPKB014(); /* ; select comment records*/
  ;
  XPKB015(); /* ; fetch first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* ; no comments found*/
    converseLib.validationFailed(72); /* ; no comments for buyer*/
    KBWREC.KBWERRFL = "Y";
  else
    ;
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful database call*/
      KB0V110(); /* ; move to temp storage*/
      XPKB015(); /* ; fetch next row*/
    end
    if (KB0VW01.KB0VW-SUB > 0)
      XPKB026(); /* ; write partial page to ts*/
      set KBCREC empty; /* ; clear ts record*/
      KB0VW01.KB0VW-SUB = 0; /* ; init subscript*/
      KB0VW01.KB0VW-MAX-PAGE = TA5REC.TA5TSQIX; /* save last page*/
    end
  end
  ;
  XPKB022(); /* ; close cursor*/
  ;
  ;
end // end KB0V100

// MOVE TEMP STORAGE TO KB0VM001
Function KB0V110()
  ;
  ;
  KB0VW01.KB0VW-SUB = KB0VW01.KB0VW-SUB + 1;
  ;
  KBCREC.KUECOMNT[KB0VW-SUB] = KUEREC.KUECOMNT;
  KBCREC.ZZZCHGDT[KB0VW-SUB] = KUEREC.ZZZCHGDT;
  ;
  if (KB0VW01.KB0VW-SUB == 15) /* ; page is full*/
    XPKB026(); /* ; add page to temp storage*/
    set KBCREC empty; /* ; reset ts record*/
    KB0VW01.KB0VW-SUB = 0; /* ; init subscript*/
    KB0VW01.KB0VW-MAX-PAGE = TA5REC.TA5TSQIX;
  end
  ;
end // end KB0V110

Record KB0VW01 type basicRecord
  5 KB0VW-GROUP KB0VW-GROUP ; 
    10 KB0VW-MAX-PAGE KB0VW-MAX-PAGE ; 
    10 KB0VW-CURR-PAGE KB0VW-CURR-PAGE ; 
    10 KB0VW-SUB KB0VW-SUB ; 
end // end KB0VW01

// current page number
DataItem KB0VW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for kb0vw01
DataItem KB0VW-GROUP char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maximum page number
DataItem KB0VW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comment subscript
DataItem KB0VW-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

