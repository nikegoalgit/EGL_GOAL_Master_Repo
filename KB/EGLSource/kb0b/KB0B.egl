package kb0b;

import corpcom2.XP0AW01;
import corpcom3.XP0A001;
import corpcom3.XPKB002;
import corpcom3.XPKB020;
import corpcom3.XPKB021;
import corpcom3.XPKB031;
import corpcom3.XPKB040;
import corpcom3.XPKB060;
import corpcom3.XPKB230;
import corpcom3.XPKB900;
import corpcom3.XPKB990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XP0AT01;
import corpx1.XSTTBL;
import corpy2.YBTTBL;
import kb.common.*;
import ku.common.KUCREC;
import ku.common.KUJREC;
import ku.common.KUMREC;
import sm.common.SM4REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0B ****
// This application is the browse function for the buyer system
// This application consists of two screens; browse entry
// screen and buyer selection screen.
// The browse entry screen gives the client several ways to
// select a list of buyers.  (Company id search, store name
// search, buyer name search, rep id search, or company name
// search).  Once an option is chosen, the buyer selection
// screen is displayed with a list of buyers that was generated
// using  the selection criteria.  From this screen, the client
// may choose one or more buyers and inquire his/her general
// information and attachments.
// ************************************************************
//                MAINTENANCE HISTORY
// ------------------------------------------------------------
//   Date      Who     Reason
// ------------------------------------------------------------
// 02/01/93   tmorri   This application has been modified as
//                     part of the Buyer System Enhancement
//                     project.  The main objective of this
//                     project is to give Nike Sales Reps and
//                     Sales Admin a way to associate buyers to
//                     sales reps via the sales responsibility
//                     code.  (See specs for details relating
//                     to this specific application).
// 
// 02/18/93   tmorri   Changed PF13 to PF12, changed color on
//                     maps from blue to turquoise, and moved
//                     buyer title to screen.  (KB0B005,
//                     KB0B190, KB0BM001, KB0BM002)
// 
// 02/26/93   tmorri   Move cursor to entered field when no
//                     records found for selection. (KB0B120)
// 
// 04/29/93   tmorri   Added browse criteria to Buyer Selection
//                     Screen.  Fixed search for company number
//                     Store zero and dept zero were not
//                     working correctly.
//                     (KB0B020, KB0B040, KB0B045, KB0B050,
//                      KB0B051, KB0B053, KB0B055, KB0B060,
//                      KB0B070, KB0B080, KB0B090, KB0B110,
//                      KB0B165, KB0B300, KB0B310, KB0B312,
//                      KB0B314, KB0B316, KB0B320, KB0B170,
//                      KB0BM001, KB0BM002, KB0BW01)
// 
// 05/16/93   tmorri   Added current date to pass info when
//                     selecting buyers by rep id. (KB0B192)
// 
// *********************
Program KB0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0BW01 KB0BW01; // record
  KBAREC KBAREC; // record
  KBLREC KBLREC; // record
  KBWREC KBWREC; // record
  KBXREC KBXREC; // record
  KBYREC KBYREC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  SM4REC SM4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP0AW01 XP0AW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XP0AT01; // table
  use XSTTBL; // table
  use YBTTBL; // table
  use KB0BM.KB0BM001,  // forms
      KB0BM.KB0BM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0B001: KB0B001();


    goto KB0B005;


    KB0B005: KB0B005();


    goto KB0B005;


  end // end main
end // end KB0B

// BUYER BROWSE INITIALIZE
Function KB0B001()


  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/

  KB0B002(); /* ; initialize data files*/
  KB0B090(); /* ; move KBWREC to KB0BM001*/

  if (COMMAREA.CAFROMAP == "KB0I" /* ; came from buyer inquiry*/
   || COMMAREA.CAFROMAP == "KB0L") /* ; came from account list*/

    if (KBWREC.KBWBRSFL == "B") /* ; user in 'browse' mode*/
      KB0B100(); /* ; list buyers*/
    else
      XPKB230(); /* ; purge temp storage*/
    end
  else
    XPKB230(); /* ; purge temp storage*/
    KBWREC.KBWBRSFL = " "; /* ; reset browse flag*/
  end


end // end KB0B001

// INITIALIZE DATA FILES
Function KB0B002()


  XPKB002(); /* ; initialize KBWREC*/
  XPKB031(); /* ; get curr date/time*/

  if (KBWREC.KBWBRSFL != "B") /* ; not in 'browse' mode*/

    KB0B045(); /* ; reset browse criteria*/

  end



end // end KB0B002

// BUYER BROWSE MAINLINE
Function KB0B005()


  KB0B080(); /* ; send/receive KB0BM001*/

  KBWREC.XXXMAPNM = "KB0BM001";

  if (KB0BM001.CATOAP != " ") /* ; fast path requested*/
    XPKB230(); /* ; purge temp storage*/
    set KBWREC empty; /* ; reset kbwrec*/
    COMMAREA.CATOAP = KB0BM001.CATOAP;
    COMMAREA.CAITEM = KB0BM001.CAITEM;

    XPKB040(); /* ; validate fast path*/

    set KB0BM001.CATOAP cursor, bold;
    KB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
  else
    if (converseVar.eventKey is pf3 /* ; prev screen requested*/
     || converseVar.eventKey is pf4) /* ; menu requested*/
      COMMAREA.CATOAP = "KB0M"; /* ; xfer to buyer menu*/

      XSEXIT();

      KB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
    else
      if (converseVar.eventKey is pf5) /* ; transfer to update screen*/
        COMMAREA.CATOAP = "KB0C";
        set KBWREC empty;
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;

        XSEXIT();

        KB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
      else
        if (converseVar.eventKey is pf12) /* ; transfer to inquire screen*/
          COMMAREA.CATOAP = "KB0I";
          set KBWREC empty;
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;

          XSEXIT();

          KB0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CAMSG = " ";
        else
          if (converseVar.eventKey is enter)
            KBWREC.KBWERRFL = "N"; /* ; reset error flag*/

            KB0B040(); /* ; edit KB0BM001*/

            if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
              KB0B100(); /* ; process buyer select*/
            end
          else
            converseLib.validationFailed(7); /* ; invalid pfkey*/
            KBWREC.KBWERRFL = "Y"; /* ; set error flag on*/
          end
        end
      end
    end
  end


end // end KB0B005

// EDIT REP ID SEARCH CRITERIA
Function KB0B020()


  if (KB0BM001.KUCCONM != " ")
    set KB0BM001.KUCCONM cursor, bold;
    set KB0BM001.SM4REPID bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(53); /* ; only one selection can be made*/
  end


  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KBWREC.SM4REPID = KB0BM001.SM4REPID;
  end


end // end KB0B020

// EDIT COMPANY NAME SEARCH
Function KB0B030()


  KBWREC.KUCCONM = KB0BM001.KUCCONM; /* set company name*/

  KBWREC.KBWDEF1 = KBWREC.KUCCONM;
  KB0B065(); /* ; get short name*/
  KBWREC.CU-CO-SHORT-NM = KBWREC.KBWDEF2; /* save short name*/


end // end KB0B030

// EDIT KB0BM001
Function KB0B040()


  KB0B045(); /* ; reset KBWREC*/
  KB0B049(); /* ; edit buyer status*/

  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    if (KB0BM001.KUCCOID == 0                  /* ; no cmpny id*/
     && KB0BM001.KB0BM-CU-STOR-ID-CHAR == " "  /* no store id*/
     && KB0BM001.KB0BM-XNX-DEPT-ID-CHAR == " " /* no dept id*/
     && KB0BM001.KUMSTRNM == " "               /* ; no store name*/
     && KB0BM001.XXXCITY == " "                /* ; no city*/
     && KB0BM001.XSTCD == " "                  /* ; no state*/
     && KB0BM001.XXXFSTNM == " "               /* ; no first name*/
     && KB0BM001.XXXLSTNM == " "               /* ; no last name*/
     && KB0BM001.SM4REPID == 0                 /* ; no rep id*/
     && KB0BM001.KUCCONM == " ")               /* ; no company name*/
      set KB0BM001.KUCCOID cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(50); /* ; enter selection set*/
    else
      if (KB0BM001.KUCCOID != 0                 /* ; cmpny id entered*/
       || KB0BM001.KB0BM-CU-STOR-ID-CHAR != " " /* store id entered*/
       || KB0BM001.KB0BM-XNX-DEPT-ID-CHAR != " ") /* dept id entered*/
        KB0B050(); /* ; edit cmpny selection*/
      else
        if (KB0BM001.KUMSTRNM != " " /* ; store name entered*/
         || KB0BM001.XXXCITY != " "  /* ; city entered*/
         || KB0BM001.XSTCD != " ")   /* ; state entered*/
          KB0B060(); /* ; edit store selection*/
        else
          if (KB0BM001.XXXLSTNM != " " /* ; last name entered*/
           || KB0BM001.XXXFSTNM != " ") /* ; first name entered*/
            KB0B070(); /* ; edit buyer selection*/
          else
            if (KB0BM001.SM4REPID != 0) /* ; rep id entered*/
              KB0B020(); /* ; edit rep selection*/
            else
              KB0B030(); /* ; edit company name selection*/
            end
          end
        end
      end
    end
  end


end // end KB0B040

// RESET KBWREC
Function KB0B045()

  KBWREC.KBWBRSFL = " "; /* reset browse flag*/
  KBWREC.KBWRETNF = " "; /* reset return flag*/

  KBWREC.KBASTAT = "A";

  KBWREC.KUCCOID = 0;
  KBWREC.KUMSTRID = 0;
  KBWREC.XNXCD = 0;
  KBWREC.KBWSTRCH = " ";
  KBWREC.KBW-XNX-DEPT-ID-CHAR = " ";

  KBWREC.KUMSTRNM = " ";
  KBWREC.KUMSTSNM = " ";
  KBWREC.XXXCITY = " ";
  KBWREC.XSTCD = " ";

  KBWREC.XXXFSTNM = " ";
  KBWREC.XXXLSTNM = " ";
  KBWREC.XXXLSTSN = " ";

  KBWREC.SM4REPID = 0;

  KBWREC.KUCCONM = " ";
  KBWREC.CU-CO-SHORT-NM = " ";

  KBWREC.KBW-CURR-PAGE = 0;
  KBWREC.KBW-MAX-PAGE = 0;

end // end KB0B045

// EDIT BUYER STATUS
Function KB0B049()


  if (KB0BM001.KBASTAT != "A" /* ; status not 'active'*/
   && KB0BM001.KBASTAT != "I" /* ; status not 'inactive'*/
   && KB0BM001.KBASTAT != "B") /* ; status not 'both'*/
    set KB0BM001.KBASTAT cursor, bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(164);
  else
    KBWREC.KBASTAT = KB0BM001.KBASTAT; /* ; set w/s acct status*/
  end


end // end KB0B049

// EDIT CMPNY SEARCH CRITERIA
Function KB0B050()


  if (KB0BM001.KUCCOID == 0) /* ; cmpny id = 0*/
    set KB0BM001.KUCCOID cursor, bold;
    set KB0BM001.KB0BM-CU-STOR-ID-CHAR bold;
    set KB0BM001.KB0BM-XNX-DEPT-ID-CHAR bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(52); /* ; company id required*/
  else
    if (KB0BM001.KUCCONM != " ")
      set KB0BM001.KUCCOID bold;
      set KB0BM001.KUCCONM cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(53); /* only one selection can be entered*/
    end

    if (KB0BM001.SM4REPID != 0)
      set KB0BM001.KUCCOID bold;
      set KB0BM001.SM4REPID cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(53); /* only one selection can be entered*/
    end

    if (KB0BM001.XXXFSTNM != " " /* ; buyer name entered*/
     || KB0BM001.XXXLSTNM != " ")
      set KB0BM001.KUCCOID cursor, bold;
      set KB0BM001.XXXFSTNM bold;
      set KB0BM001.XXXLSTNM bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(53); /* only one selection can be entered*/
    end

    if (KB0BM001.KUMSTRNM != " " /* ; store name entered*/
     || KB0BM001.XXXCITY != " "  
     || KB0BM001.XSTCD != " ")  
      set KB0BM001.KUCCOID cursor, bold;
      set KB0BM001.KUMSTRNM bold;
      set KB0BM001.XXXCITY bold;
      set KB0BM001.XSTCD bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(53); /* only one selection can be entered*/
    end

  end

  /* edit dept and store for numerics and load to kbwrec*/

  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KB0B053(); /* ; edit dept for numerics*/
    KB0B055(); /* ; edit store for numerics*/
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KBWREC.KUCCOID = KB0BM001.KUCCOID; /* ; set cust id*/
  end


end // end KB0B050

// EDIT DEPT FOR NUMERICS
Function KB0B053()


  if (KB0BM001.KB0BM-XNX-DEPT-ID-CHAR == " ") /* ; no dept id entered*/
    KBWREC.XNXCD = -1; /* ; set for all depts*/
  else
    XP0AW01.XP0AWFLD = KB0BM001.KB0BM-XNX-DEPT-ID-CHAR;

    XP0A001(); /* ; edit for non-numerics*/

    if (XP0AW01.XP0AWEFL == "Y") /* ; non-numeric characters*/
      set KB0BM001.KB0BM-XNX-DEPT-ID-CHAR cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(64);
    else
      KBWREC.KBW-XNX-DEPT-ID-CHAR = KB0BM001.KB0BM-XNX-DEPT-ID-CHAR;
      KBWREC.XNXCD = KBWREC.KBW-XNX-DEPT-ID-NUM;
    end
  end


end // end KB0B053

// EDIT STORE FOR NUMERICS
Function KB0B055()


  if (KB0BM001.KB0BM-CU-STOR-ID-CHAR == " ") /* ; no store id entered*/
    KBWREC.KUMSTRID = -1; /* ; set for all stores*/
  else
    XP0AW01.XP0AWFLD = KB0BM001.KB0BM-CU-STOR-ID-CHAR;

    XP0A001(); /* ; edit for non-numerics*/

    if (XP0AW01.XP0AWEFL == "Y") /* ; non-numeric characters*/
      set KB0BM001.KB0BM-CU-STOR-ID-CHAR cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(33);
    else
      KBWREC.KBWSTRCH = KB0BM001.KB0BM-CU-STOR-ID-CHAR;
      KBWREC.KUMSTRID = KBWREC.KBWSTRID;
    end
  end


end // end KB0B055

// EDIT STORE SEARCH CRITERIA
Function KB0B060()


  if (KB0BM001.KUMSTRNM == " ") /* ; no store name*/
    set KB0BM001.KUMSTRNM cursor, bold;
    set KB0BM001.XXXCITY bold;
    set KB0BM001.XSTCD bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(54); /* ; store name required*/
  else
    if (KB0BM001.KUCCONM != " ")
      set KB0BM001.KUCCONM cursor, bold;
      set KB0BM001.KUMSTRNM bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(53); /* only one selection can be made*/
    end

    if (KB0BM001.SM4REPID != 0)
      set KB0BM001.SM4REPID cursor, bold;
      set KB0BM001.KUMSTRNM bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(53); /* only one selection can be made*/
    end

    if (KB0BM001.XXXFSTNM != " " /* ; buyer name entered*/
     || KB0BM001.XXXLSTNM != " ")
      set KB0BM001.XXXFSTNM bold;
      set KB0BM001.XXXLSTNM bold, cursor;
      set KB0BM001.KUMSTRNM bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(53); /* only one selection can be made*/
    end
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KB0B061(); /* ; validate xstcd*/

    if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
      KB0B063(); /* ; load kbwrec*/
    end
  end


end // end KB0B060

// VALIDATE STATE CODE
Function KB0B061()


  KBWREC.XSTCD = " "; /* ; reset state code*/

  if (KB0BM001.XSTCD == " " /* ; state code = ' '*/
   && KB0BM001.XXXCITY != " ") /* ; city was entered*/
    set KB0BM001.XSTCD cursor, bold; /* ; highlight state*/
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(55);
  else
    if (KB0BM001.XSTCD != " ") /* ; state code entered*/
      if (KB0BM001.XSTCD in XSTTBL.XSTCD) /* ; valid state code*/
        KBWREC.XSTCD = KB0BM001.XSTCD; /* ; save state code*/
      else
        set KB0BM001.XSTCD cursor, bold; /* ; highlight state code*/
        KBWREC.KBWERRFL = "Y";
        converseLib.validationFailed(12);
      end
    end
  end


end // end KB0B061

// LOAD KBWREC
Function KB0B063()


  KBWREC.KUMSTRNM = KB0BM001.KUMSTRNM; /* ; set store name*/
  KBWREC.XXXCITY = KB0BM001.XXXCITY; /* ; set city name*/
  KBWREC.XSTCD = KB0BM001.XSTCD; /* ; set state code*/

  KBWREC.KBWDEF1 = KBWREC.KUMSTRNM; /* ; set parm*/
  KB0B065(); /* ; get short store name*/
  KBWREC.KUMSTSNM = KBWREC.KBWDEF2; /* ; save short store name*/

  KBWREC.KBWDEF1 = KBWREC.XXXCITY; /* ; set parm*/
  KB0B065(); /* ; get short city name*/
  KBWREC.KUMCITYS = KBWREC.KBWDEF2; /* ; save short store name*/

  KBWREC.KUMXSTCD = KBWREC.XSTCD; /* ; set store state code*/


end // end KB0B063

// GET SHORT NAME
Function KB0B065()



  KBWREC.KBWDEF2 = " "; /* ; set short store*/
  KBWREC.KBWSUB1 = 1; /* ; set subscript 1*/
  KBWREC.KBWSUB2 = 1; /* ; set subscript 2*/

  while (KBWREC.KBWSUB1 <= 30 /* ; until end of array 1*/
   && KBWREC.KBWSUB2 <= 10) /* ; or end of array 2*/
    if (KBWREC.KBWCHR1[KBWSUB1] != " " /* ; store char not ' '*/
     && KBWREC.KBWCHR1[KBWSUB1] >= "A" /* ; store char >= 'a'*/
     && KBWREC.KBWCHR1[KBWSUB1] <= "Z") /* ; store char <= 'z'*/
      KBWREC.KBWCHR2[KBWSUB2] = KBWREC.KBWCHR1[KBWSUB1];
      KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1;
    else
      if (KBWREC.KBWCHR1[KBWSUB1] != " " /* ; store char not ' '*/
       && KBWREC.KBWCHR1[KBWSUB1] >= "0" /* ; store char >= '0'*/
       && KBWREC.KBWCHR1[KBWSUB1] <= "9") /* ; store char <= '9'*/
        KBWREC.KBWCHR2[KBWSUB2] = KBWREC.KBWCHR1[KBWSUB1];
        KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1;
      end
    end

    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end


end // end KB0B065

// EDIT BUYER SEARCH CRITERIA
Function KB0B070()


  if (KB0BM001.XXXLSTNM == " ") /* ; no last name*/
    set KB0BM001.XXXLSTNM cursor, bold;
    set KB0BM001.XXXFSTNM bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(56); /* ; last name is required*/
  else
    if (KB0BM001.KUCCONM != " ")
      set KB0BM001.KUCCONM cursor, bold;
      set KB0BM001.XXXLSTNM bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(53); /* ; only one selection can be made*/
    end

    if (KB0BM001.SM4REPID != 0)
      set KB0BM001.SM4REPID cursor, bold;
      set KB0BM001.XXXLSTNM bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(53); /* ; only one selection can be made*/
    end
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KB0B071(); /* ; load kbwrec*/
  end


end // end KB0B070

// LOAD KBWREC
Function KB0B071()


  KBWREC.XXXLSTNM = KB0BM001.XXXLSTNM; /* ; set last name*/
  KBWREC.XXXFSTNM = KB0BM001.XXXFSTNM; /* ; set first name*/

  XPKB060(); /* ; get short last name*/


end // end KB0B071

// SEND/RECEIVE KB0BM001
Function KB0B080()


  converse KB0BM001 ;


  set KB0BM001.KBASTAT cursor, normal;
  set KB0BM001.KUCCOID normal;
  set KB0BM001.KB0BM-CU-STOR-ID-CHAR normal;
  set KB0BM001.KB0BM-XNX-DEPT-ID-CHAR normal;
  set KB0BM001.KUMSTRNM normal;
  set KB0BM001.XXXCITY normal;
  set KB0BM001.XSTCD normal;
  set KB0BM001.XXXFSTNM normal;
  set KB0BM001.XXXLSTNM normal;
  set KB0BM001.SM4REPID normal;
  set KB0BM001.KUCCONM normal;
  set KB0BM001.CATOAP normal;


end // end KB0B080

// MOVE KBWREC TO KB0BM001
Function KB0B090()


  set KB0BM001 initial;

  KB0BM001.KB0BMDTE = VGVar.currentShortGregorianDate;
  KB0BM001.KBASTAT = KBWREC.KBASTAT;

  KB0BM001.KUCCOID = KBWREC.KUCCOID;
  KB0BM001.KB0BM-CU-STOR-ID-CHAR = KBWREC.KBWSTRCH;
  KB0BM001.KB0BM-XNX-DEPT-ID-CHAR = KBWREC.KBW-XNX-DEPT-ID-CHAR;

  KB0BM001.KUMSTRNM = KBWREC.KUMSTRNM;
  KB0BM001.XXXCITY = KBWREC.XXXCITY;
  KB0BM001.XSTCD = KBWREC.XSTCD;

  KB0BM001.XXXFSTNM = KBWREC.XXXFSTNM;
  KB0BM001.XXXLSTNM = KBWREC.XXXLSTNM;

  KB0BM001.SM4REPID = KBWREC.SM4REPID;
  KB0BM001.KUCCONM = KBWREC.KUCCONM;

end // end KB0B090

// LIST BUYERS TO SELECT
Function KB0B100()


  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  set KB0BW01 empty; /* ; init work record*/

  KB0B110(); /* ; buyer select init*/

  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KBWREC.KBWRETNF = "N"; /* ; reset return flag*/
    while (KBWREC.KBWRETNF == "N") /* ; until return flag = y*/
      KB0B140(); /* ; buyer select main*/
    end
  end

  if (KBWREC.KBWERRFL == "N") /* ; function completed*/
    KB0B045(); /* ; reset kbwrec*/
    KB0B090(); /* ; init kb0bm001*/
  end

end // end KB0B100

// BUYER SELECT INITIALIZE
Function KB0B110()

  if (KBWREC.KBWBRSFL == "B") /* ; in browse mode*/
    KB0B170(); /* ; process selected buyers*/
  else
    KB0B120(); /* ; load temp storage*/
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KBWREC.KBWBRSFL = "B"; /* ; set browse mode*/
    KBWREC.KBW-CURR-PAGE = 1; /* ; set current page to 1*/
    KB0B190(); /* ; move temp stor to KB0BM002*/
    KB0B300(); /* ; move selection to kb0bm002*/
  end


end // end KB0B110

// LOAD TEMPORARY STORAGE
Function KB0B120()


  set KBYREC empty; /* ; init ts record*/
  KB0BW01.KB0BW-SUB = 0; /* ; init buyer subscript*/
  KBWREC.KBWEOF = "N"; /* ; init eof flag*/

  KB0B192(); /* ; select buyer recs*/

  KB0B194(); /* ; fetch first row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* ; no buyers found*/
    converseLib.validationFailed(162);
    KBWREC.KBWERRFL = "Y";
    if (KBWREC.KUCCOID != 0) /* ; selecting by customer*/
      set KB0BM001.KUCCOID cursor;
    else
      if (KBWREC.KUMSTRNM != " ") /* ; selecting by store name*/
        set KB0BM001.KUMSTRNM cursor;
      else
        if (KBWREC.XXXLSTSN != " ") /* ; selecting by buyer name*/
          set KB0BM001.XXXLSTNM cursor;
        else
          if (KBWREC.SM4REPID != 0) /* ; selecting by rep id*/
            set KB0BM001.SM4REPID cursor;
          else /* ; selecting by company name*/
            set KB0BM001.KUCCONM cursor;
          end
        end
      end
    end
  else

    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful database call*/
      KB0B196(); /* ; move to temp storage*/
      KB0B194(); /* ; fetch next row*/
    end
    if (KB0BW01.KB0BW-SUB > 0)
      XPKB210(); /* ; write partial page to ts*/
      set KBYREC empty; /* ; clear ts record*/
      KB0BW01.KB0BW-SUB = 0; /* ; init subscript*/
    end
  end

  KB0B198(); /* ; close cursor*/


end // end KB0B120

// BUYER SELECT MAINLINE
Function KB0B140()

  KB0B180(); /* ; converse kb0bm002*/

  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/

  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    XPKB230(); /* ; purge temp storage*/
    KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
  else
    if (converseVar.eventKey is pf4) /* ; menu requested*/
      XPKB230(); /* ; purge temp storage*/
      COMMAREA.CATOAP = "KB0M"; /* ; xfer to buyer menu*/

      XSEXIT();

      KB0BM002.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";

    else
      if (converseVar.eventKey is pf7 /* ; scroll back*/
       || converseVar.eventKey is pf8 /* ; scroll forward*/
       || converseVar.eventKey is enter)
      /* next sentence*/
      else
        converseLib.validationFailed(7); /* ; invalid pfkey*/
        KBWREC.KBWERRFL = "Y"; /* ; set error on*/
      end
    end
  end


  if (KBWREC.KBWERRFL == "N" /* ; no errors*/
   && KBWREC.KBWRETNF == "N") /* ; don't return yet*/

    KB0B150(); /* ; edit kb0bm002*/

    if (KBWREC.KBWERRFL == "N") /* ; still no errors*/
      if (converseVar.eventKey is pf7 /* ; scroll back*/
       || converseVar.eventKey is pf8 /* ; scroll forward*/
       || KB0BM002.KBWPAGE != KBWREC.KBW-CURR-PAGE) /* ; page changed*/
        KB0B165(); /* ; build new page*/
      else
        KBWREC.KBW-CURR-PAGE = 1; /* init page number*/
        KB0B170(); /* process selected buyers*/
  /* if no buyers are selected to view, return to browse screen*/
        XPKB230(); /* ; purge temp storage*/
        KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
      end
    end

  end


end // end KB0B140

// EDIT KB0BM002
Function KB0B150()

  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/

  KB0BW01.KB0BW-SUB = 14;
                                  /* edit select byte*/
  while (KB0BW01.KB0BW-SUB != 0)
    if (KB0BM002.KB0BMSEL[KB0BW-SUB] != " "
     && KB0BM002.KB0BMSEL[KB0BW-SUB] != "S"
     && KB0BM002.KB0BMSEL[KB0BW-SUB] != "V")
      converseLib.validationFailed(105); /* must enter 's' to select*/
      KBWREC.KBWERRFL = "Y";
      set KB0BM002.KB0BMSEL[KB0BW-SUB] cursor, bold;
    end
    KB0BW01.KB0BW-SUB = KB0BW01.KB0BW-SUB - 1;
  end

  if (converseVar.eventKey is pf7)
    if (KB0BM002.KBWPAGE == 1)
      converseLib.validationFailed(8); /* already at top*/
      set KB0BM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0BM002.KBWPAGE != KBWREC.KBW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0BM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end

  if (converseVar.eventKey is pf8)
    if (KB0BM002.KBWPAGE == KB0BM002.KBWTOTPG)
      converseLib.validationFailed(9); /* already at bottom*/
      set KB0BM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0BM002.KBWPAGE != KBWREC.KBW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0BM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end

  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0BM002.KBWPAGE == 0
     || KB0BM002.KBWPAGE > KB0BM002.KBWTOTPG)
      converseLib.validationFailed(48); /* invalid page number*/
      set KB0BM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    end
  end

  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KB0B160(); /* check selections & update ts*/
  end
end // end KB0B150

// UPDATE TEMP STOR SELECTIONS
Function KB0B160()


  KB0BW01.KB0BW-CHANGE-FL = "N";

  KB0BW01.KB0BW-SUB = 1; /* ; reset map subscript*/
  while (KB0BW01.KB0BW-SUB <= 14) /* ; until end of map*/

        /* if select byte changes move it to temp storage record*/

    if (KB0BM002.KB0BMSEL[KB0BW-SUB] != KBYREC.KBY-SELECT[KB0BW-SUB])
      KBYREC.KBY-SELECT[KB0BW-SUB] = KB0BM002.KB0BMSEL[KB0BW-SUB];
      KB0BW01.KB0BW-CHANGE-FL = "Y";
    end
    KB0BW01.KB0BW-SUB = KB0BW01.KB0BW-SUB + 1;
  end

   /* if any changes were made, update the temp storage page*/

  if (KB0BW01.KB0BW-CHANGE-FL == "Y")
    XPKB220(); /* update temp storage page*/
  end

end // end KB0B160

// BUILD NEW PAGE FROM TS
Function KB0B165()

  /* determine new page number*/

  if (converseVar.eventKey is pf7)
    KBWREC.KBW-CURR-PAGE = KBWREC.KBW-CURR-PAGE - 1;
  else
    if (converseVar.eventKey is pf8)
      KBWREC.KBW-CURR-PAGE = KBWREC.KBW-CURR-PAGE + 1;
    else
      KBWREC.KBW-CURR-PAGE = KB0BM002.KBWPAGE;
    end
  end

  XPKB200(); /* read temporary storage*/

  KB0B190(); /* move temp storage to map*/
  KB0B300(); /* move selection to map*/

end // end KB0B165

// PROCESS SELECTED BUYERS
Function KB0B170()

  if (KBWREC.KBWRETNF == "Y") /* retrun to buyer select screen*/
    /* next sentence*/
  else

    while (KBWREC.KBW-CURR-PAGE <= KBWREC.KBW-MAX-PAGE)

      XPKB200(); /* ; read temp storage page*/

      KB0BW01.KB0BW-SUB = 1;
      while (KB0BW01.KB0BW-SUB <= 14) /* ; view selected buyers*/
        if (KBYREC.KBY-SELECT[KB0BW-SUB] == "S")
          KBYREC.KBY-SELECT[KB0BW-SUB] = "V";
          XPKB220(); /* ; update temp storage*/

          KBWREC.KBABUYID = KBYREC.KBABUYID[KB0BW-SUB];
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          COMMAREA.CATOAP = "KB0I";

          XSEXIT();

          KB0BM002.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CAMSG = " ";
          COMMAREA.CAUSERA = " ";
        end

        KB0BW01.KB0BW-SUB = KB0BW01.KB0BW-SUB + 1;
      end

      KBWREC.KBW-CURR-PAGE = KBWREC.KBW-CURR-PAGE + 1;

    end
  end

end // end KB0B170

// SEND/RECEIVE KB0BM002
Function KB0B180()



  converse KB0BM002 ;

  KBWREC.XXXMAPNM = "KB0BM002"; /* ; save current map name*/

  set KB0BM002.KBWPAGE cursor, normal;

  KBWREC.KBWSUB1 = 14; /* ; reset map subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of map*/

    if (KB0BM002.KBABUYID[KBWSUB1] != 0)
      set KB0BM002.KB0BMSEL[KBWSUB1] cursor, normal;
    end

    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
  end


end // end KB0B180

// MOVE TEMP STORAGE TO KB0BM002
Function KB0B190()


  set KB0BM002 initial; /* ; initialize screen*/

  KB0BM002.KB0BMDTE = VGVar.currentShortGregorianDate;

  XPKB200(); /* ; read temp storage page*/

  KB0BW01.KB0BW-SUB = 1;
  while (KB0BW-SUB <= 14) /* move buyers from t/s to map*/
    if (KBYREC.KBABUYID[KB0BW-SUB] > 0)
      KB0BM002.KB0BMSEL[KB0BW-SUB] = KBYREC.KBY-SELECT[KB0BW-SUB];
      KB0BM002.KBABUYID[KB0BW-SUB] = KBYREC.KBABUYID[KB0BW-SUB];
      KB0BM002.XXXFSTNM[KB0BW-SUB] = KBYREC.XXXFSTNM[KB0BW-SUB];
      KB0BM002.XXXMDINT[KB0BW-SUB] = KBYREC.XXXMDINT[KB0BW-SUB];
      KB0BM002.XXXLSTNM[KB0BW-SUB] = KBYREC.XXXLSTNM[KB0BW-SUB];
      KB0BM002.XXXGNTNM[KB0BW-SUB] = KBYREC.XXXGNTNM[KB0BW-SUB];
      KB0BM002.KBABUYFL[KB0BW-SUB] = KBYREC.KBABUYFL[KB0BW-SUB];
      KB0BM002.XXXSTAT[KB0BW-SUB] = KBYREC.XXXSTAT[KB0BW-SUB];

      if (KBYREC.YBTCD[KB0BW-SUB] in YBTTBL.YBTCD)
        KB0BM002.YBTABRV[KB0BW-SUB] = YBTTBL.YBTABRV[sysVar.arrayIndex];
      else
        KB0BM002.YBTABRV[KB0BW-SUB] = " ";
      end

      if (KB0BW01.KB0BW-SUB == 1) /* ; first line on map*/
        set KB0BM002.KB0BMSEL[KB0BW-SUB] cursor, normal;
      else
        set KB0BM002.KB0BMSEL[KB0BW-SUB] normal;
      end
    end

    KB0BW01.KB0BW-SUB = KB0BW01.KB0BW-SUB + 1;
  end

  KB0BM002.KBWPAGE = KBWREC.KBW-CURR-PAGE;
  KB0BM002.KBWTOTPG = KBWREC.KBW-MAX-PAGE;

end // end KB0B190

// SELECT BUYER RECS
Function KB0B192()


  set SQLCA empty; /* ; initialize SQLCA*/
  set KBAREC empty; /* ; initialize KBAREC*/
  set KBLREC empty; /* ; initialize kblrec*/

  KBLREC.KBLTASK = "S"; /* ; set IO Task*/
  KBLREC.KBLDATE = TA2REC.TA2GRGGN; /* ; move current date to IO Date*/

  if (KBWREC.KUCCOID != 0) /* ; selecting by cust*/
    KBLREC.KBLTYPE = "1"; /* ; set IO Type*/
    KBLREC.KBLSTAT = KBWREC.KBASTAT; /* ; set IO Stat*/
    KBLREC.KUCCOID = KBWREC.KUCCOID; /* ; set IO Cust Id*/
    KBLREC.KUMSTRID = KBWREC.KUMSTRID; /* ; set IO Store Id*/
    KBLREC.XNXCD = KBWREC.XNXCD; /* ; set IO Dept id*/
  else
    if (KBWREC.KUMSTRNM != " ") /* ; selecting by store*/
      KBLREC.KBLTYPE = "2"; /* ; set IO Type*/
      KBLREC.KBLSTAT = KBWREC.KBASTAT; /* ; set IO Stat*/
      KBLREC.KUMSTSNM = KBWREC.KUMSTSNM; /* ; set IO store name*/
      KBLREC.KUMCITYS = KBWREC.KUMCITYS; /* ; set IO city*/
      KBLREC.KUMXSTCD = KBWREC.XSTCD; /* ; set IO state code*/
    else
      if (KBWREC.XXXLSTSN != " ") /* ; selecting by buyer name*/
        KBLREC.KBLTYPE = "3"; /* ; set IO Type*/
        KBLREC.KBLSTAT = KBWREC.KBASTAT; /* ; set IO Stat*/
        KBAREC.XXXLSTSN = KBWREC.XXXLSTSN; /* ; set IO Buyer last nm*/
        KBAREC.XXXFSTNM = KBWREC.KBWFNCHR; /* ; set IO Buyer frst nm*/
      else
        if (KBWREC.SM4REPID != 0) /* ; selecting by rep id*/
          KBLREC.KBLTYPE = "6"; /* ; set IO Type*/
          KBLREC.KBLSTAT = KBWREC.KBASTAT; /* ; set IO Stat*/
          KBLREC.SM4REPID = KBWREC.SM4REPID; /* ; set IO rep id*/
        else
          KBLREC.KBLTYPE = "7"; /* ; set IO Type*/
          KBLREC.KBLSTAT = KBWREC.KBASTAT; /* ; set IO Stat*/
          KBLREC.CU-CO-SHORT-NM = KBWREC.CU-CO-SHORT-NM;
                                   /* ; set IO company name*/
        end
      end
    end
  end

  call "KB1040" (KBLREC, SQLCA, KBAREC) {isExternal = yes}; /* ; select set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* ; unsucessful select*/
    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "KB0B192";
    TA1REC.TA1LOCAT[2] = "KB1040";
    TA1REC.TA1LOCAT[3] = KBLREC.KBLTRAN;
    TA1REC.TA1LOCAT[4] = KBLREC.KBLSTAT;
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBUYER01";

    if (KBLREC.KBLTYPE == "1")
      KBWREC.KBWXIDCO = KBLREC.KUCCOID; /* ; build cust key*/
      KBWREC.KBWXIDST = KBLREC.KUCCOID;
      KBWREC.KBWXIDDP = KBLREC.XNXCD;

      TA1REC.TA1TBLKE = KBWREC.KBWCSTKE; /* ; set table key*/
    else
      if (KBLREC.KBLTYPE == "2")
        KBWREC.KUMSTSNM = KBLREC.KUMSTSNM; /* build store key*/
        KBWREC.KUMXSTCD = KBLREC.KUMXSTCD;
        KBWREC.KUMCITYS = KBLREC.KUMCITYS;

        TA1REC.TA1TBLKE = KBWREC.KBWSNMKE; /* set table key*/
      else
        if (KBLREC.KBLTYPE == "3")
          KBWREC.KBWBNKLN = KBAREC.XXXLSTSN; /* build buyer nm key*/
          KBWREC.KBWBNKFN = KBAREC.XXXFSTNM;

          TA1REC.TA1TBLKE = KBWREC.KBWBNMKE; /* set table key*/
        else
          if (KBLREC.KBLTYPE == "6")
            KBWREC.KBW-SM4REPID-KEY = KBLREC.SM4REPID;
                                   /* build rep key*/

            TA1REC.TA1TBLKE = KBWREC.KBW-SM4REPID-KEY;
                                   /* set table key*/
          else
            TA1REC.TA1TBLKE = KBLREC.CU-CO-SHORT-NM; /* set table key*/
          end
        end
      end
    end

    XPKB900();
  end


end // end KB0B192

// FETCH BUYER RECS
Function KB0B194()


  set SQLCA empty; /* ; initialize SQLCA*/

  if (KBLREC.KBLTASK != "N") /* ; IO task not 'N'*/
    KBLREC.KBLTASK = "N"; /* ; set IO task*/
  end

  call "KB1040" (KBLREC, SQLCA, KBAREC) {isExternal = yes}; /* ; fetch next record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ; sucessful fetch*/
  /* next sentence;*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; at end of recs*/
      KBWREC.KBWEOF = "Y"; /* ; set EOF flag*/
    else
      set TA1REC empty;

      TA1REC.TA1LOCAT[1] = "KB0B194";
      TA1REC.TA1LOCAT[2] = "KB1040";
      TA1REC.TA1LOCAT[3] = KBLREC.KBLTRAN;
      TA1REC.TA1LOCAT[4] = KBLREC.KBLSTAT;
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBUYER01";

      if (KBLREC.KBLTYPE == "1")
        KBWREC.KBWXIDCO = KBLREC.KUCCOID;
        KBWREC.KBWXIDST = KBLREC.KUCCOID;
        KBWREC.KBWXIDDP = KBLREC.XNXCD;

        TA1REC.TA1TBLKE = KBWREC.KBWCSTKE;
      else
        if (KBLREC.KBLTYPE == "2")
          KBWREC.KUMSTSNM = KBLREC.KUMSTSNM;
          KBWREC.KUMXSTCD = KBLREC.KUMXSTCD;
          KBWREC.KUMCITYS = KBLREC.KUMCITYS;

          TA1REC.TA1TBLKE = KBWREC.KBWSNMKE;
        else
          if (KBLREC.KBLTYPE == "3")
            KBWREC.KBWBNKLN = KBAREC.XXXLSTSN;
            KBWREC.KBWBNKFN = KBAREC.XXXFSTNM;

            TA1REC.TA1TBLKE = KBWREC.KBWBNMKE;
          else
            if (KBLREC.KBLTYPE == "6")
              KBWREC.KBW-SM4REPID-KEY = KBLREC.SM4REPID;

              TA1REC.TA1TBLKE = KBWREC.KBW-SM4REPID-KEY;
            else
              TA1REC.TA1TBLKE = KBLREC.CU-CO-SHORT-NM;
            end
          end
        end
      end

      XPKB900();
    end
  end


end // end KB0B194

// MOVE BUYER TO TEMP STORAGE
Function KB0B196()


  KB0BW01.KB0BW-SUB = KB0BW01.KB0BW-SUB + 1;

  KBYREC.KBABUYID[KB0BW-SUB] = KBAREC.KBABUYID;
  KBYREC.XXXFSTNM[KB0BW-SUB] = KBAREC.XXXFSTNM;
  KBYREC.XXXMDINT[KB0BW-SUB] = KBAREC.XXXMDINT;
  KBYREC.XXXLSTNM[KB0BW-SUB] = KBAREC.XXXLSTNM;
  KBYREC.XXXGNTNM[KB0BW-SUB] = KBAREC.XXXGNTNM;
  KBYREC.XXXSTAT[KB0BW-SUB] = KBAREC.XXXSTAT;
  KBYREC.YBTCD[KB0BW-SUB] = KBAREC.YBTCD;
  KBYREC.KBABUYFL[KB0BW-SUB] = KBAREC.KBABUYFL;

  if (KB0BW01.KB0BW-SUB == 14) /* ; page is full*/
    XPKB210(); /* ; add page to temp storage*/
    set KBYREC empty; /* ; reset ts record*/
    KB0BW01.KB0BW-SUB = 0; /* ; init subscript*/
  end

end // end KB0B196

// CLOSE BUYER RECS
Function KB0B198()


  set SQLCA empty; /* ; initialize SQLCA*/

  KBLREC.KBLTASK = "C"; /* ; set IO task*/

  call "KB1040" (KBLREC, SQLCA, KBAREC) {isExternal = yes}; /* ; close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* ; unsucessful close*/
    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "KB0B198";
    TA1REC.TA1LOCAT[2] = "KB1040";
    TA1REC.TA1LOCAT[3] = KBLREC.KBLTRAN;
    TA1REC.TA1LOCAT[4] = KBLREC.KBLSTAT;
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBUYER01";

    if (KBLREC.KBLTYPE == "1")
      KBWREC.KBWXIDCO = KBLREC.KUCCOID;
      KBWREC.KBWXIDST = KBLREC.KUCCOID;
      KBWREC.KBWXIDDP = KBLREC.XNXCD;

      TA1REC.TA1TBLKE = KBWREC.KBWCSTKE;
    else
      if (KBLREC.KBLTYPE == "2")
        KBWREC.KUMSTSNM = KBLREC.KUMSTSNM;
        KBWREC.KUMXSTCD = KBLREC.KUMXSTCD;
        KBWREC.KUMCITYS = KBLREC.KUMCITYS;

        TA1REC.TA1TBLKE = KBWREC.KBWSNMKE;
      else
        if (KBLREC.KBLTYPE == "3")
          KBWREC.KBWBNKLN = KBAREC.XXXLSTSN;
          KBWREC.KBWBNKFN = KBAREC.XXXFSTNM;

          TA1REC.TA1TBLKE = KBWREC.KBWBNMKE;
        else
          if (KBLREC.KBLTYPE == "6")
            KBWREC.KBW-SM4REPID-KEY = KBLREC.SM4REPID;

            TA1REC.TA1TBLKE = KBWREC.KBW-SM4REPID-KEY;
          else
            TA1REC.TA1TBLKE = KBLREC.CU-CO-SHORT-NM;
          end
        end
      end
    end

    XPKB900();
  end


end // end KB0B198

// MOVE BROWSE OPTION TO MAP
Function KB0B300()

  KB0BW01.KB0BW-BROWSE-COMPANY-ID = " ";
  KB0BW01.KB0BW-BROWSE-NAME = " ";
  KB0BW01.KB0BW-BROWSE-STORE-DATA = " ";
  KB0BW01.KB0BW-BROWSE-REP-ID = " ";


  if (KBWREC.KUCCOID > 0) /* company id option selected*/
    KB0BM002.KB0BM-BROWSE-OPTION = "    COMPANY #:";
    KB0B310(); /* get company info*/
  else
    if (KBWREC.KUMSTRNM != " ") /* store name option selected*/
      KB0BM002.KB0BM-BROWSE-OPTION = "   STORE NAME:";
      KB0BM002.KB0BM-BROWSE-CRITERIA-1 = KBWREC.KUMSTRNM;
      KB0BW01.KB0BW-XXXCITY = KBWREC.XXXCITY;
      KB0BW01.KB0BW-XSTCD = KBWREC.XSTCD;
      KB0BM002.KB0BM-BROWSE-CRITERIA-2 = KB0BW01.KB0BW-BROWSE-STORE-DATA;
    else
      if (KBWREC.XXXLSTNM != " ") /* buyer name option selected*/
        KB0BM002.KB0BM-BROWSE-OPTION = "   BUYER NAME:";
        KB0BW01.KB0BW-XXXLSTNM = KBWREC.XXXLSTNM;
        KB0BW01.KB0BW-XXXFSTNM = KBWREC.XXXFSTNM;
        KB0BM002.KB0BM-BROWSE-CRITERIA-1 = KB0BW01.KB0BW-BROWSE-NAME;
        KB0BM002.KB0BM-BROWSE-CRITERIA-2 = " ";
      else
        if (KBWREC.SM4REPID > 0) /* rep id option selected*/
          KB0BM002.KB0BM-BROWSE-OPTION = "      REP ID:";
          KB0BW01.KB0BW-SM4REPID = KBWREC.SM4REPID;
          KB0BM002.KB0BM-BROWSE-CRITERIA-1 = KB0BW01.KB0BW-BROWSE-REP-ID;
          KB0B320(); /* get rep name*/
          KB0BW01.KB0BW-XXXLSTNM = SM4REC.XXXLSTNM;
          KB0BW01.KB0BW-XXXFSTNM = SM4REC.XXXFSTNM;
          KB0BM002.KB0BM-BROWSE-CRITERIA-2 = KB0BW01.KB0BW-BROWSE-NAME;
        else
          if (KBWREC.CU-CO-SHORT-NM != " ") /* company name option selected*/
            KB0BM002.KB0BM-BROWSE-OPTION = " COMPANY NAME:";
            KB0BM002.KB0BM-BROWSE-CRITERIA-1 = KBWREC.KUCCONM;
            KB0BM002.KB0BM-BROWSE-CRITERIA-2 = " ";
          end
        end
      end
    end
  end



end // end KB0B300

// GET COMPANY BROWSE CRITERIA
Function KB0B310()

  if (KBWREC.XNXCD > -1) /* dept id entered*/
    KBWREC.KBW-XNX-DEPT-ID-NUM = KBWREC.XNXCD; /* dept id numeric*/
    KB0BW01.KB0BW-XNX-DEPT-ID-XREF = KBWREC.KBW-XNX-DEPT-ID-CHAR; /* move dept id character*/
    KB0B312(); /* get customer dept name*/
    KB0BM002.KUJSLFID = KUJREC.KUJSLFID; /* move dept name*/
  end

  if (KBWREC.KUMSTRID > -1) /* store id entered*/
    KB0BW01.KB0BW-CU-CO-ID = KBWREC.KUCCOID; /* move company*/
    KBWREC.KBWSTRID = KBWREC.KUMSTRID; /* store numeric*/
    KB0BW01.KB0BW-CU-STOR-ID = KBWREC.KBWSTRCH; /* store char*/
    KB0BM002.KB0BM-BROWSE-CRITERIA-1 = KB0BW01.KB0BW-BROWSE-COMPANY-ID;
    KB0B314(); /* get store name*/
    KB0BM002.KB0BM-BROWSE-CRITERIA-2 = KUMREC.KUMSTRNM; /* store name*/
  else
    KB0BW01.KB0BW-CU-CO-ID = KBWREC.KUCCOID; /* move company*/
    KB0BM002.KB0BM-BROWSE-CRITERIA-1 = KB0BW01.KB0BW-BROWSE-COMPANY-ID;
    KB0B316(); /* get company name*/
    KB0BM002.KB0BM-BROWSE-CRITERIA-2 = KUCREC.KUCCONM; /* company name*/
  end


end // end KB0B310

// GET CUSTOMER DEPT NAME
Function KB0B312()


  set KUJREC empty;
  set SQLCA empty;

  KUJREC.KUCCOID = KBWREC.KUCCOID;
  KUJREC.XNXCD = KBWREC.XNXCD;

  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* read department table*/

  if (SQLCA.VAGen_SQLCODE == 0 /* ; successful read*/
   || SQLCA.VAGen_SQLCODE == 100) /* ; department record not found*/
      /* NEXT SENTENCE*/
  else
    KBWREC.KBWXIDCO = KUJREC.KUCCOID;
    KBWREC.KBWXIDST = KUJREC.XNXCD;

    set TA1REC empty;

    TA1REC.TA1LOCAT[1] = "KB0B312";
    TA1REC.TA1LOCAT[2] = "IO0290";
    TA1REC.TA1LOCAT[3] = "S";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    TA1REC.TA1TBLKE = KBWREC.KBWSTRKE;

    XPKB900();
  end


end // end KB0B312

// GET STORE NAME
Function KB0B314()


  set KUMREC empty;
  set SQLCA empty;

  KUMREC.KUCCOID = KBWREC.KUCCOID;
  KUMREC.KUMSTRID = KBWREC.KUMSTRID;

  XPKB020(); /* ; call io0340 - 's '*/
                                  /* ; dcust.vstore01*/

end // end KB0B314

// GET COMPANY NAME
Function KB0B316()


  set KUCREC empty;
  set SQLCA empty;

  KUCREC.KUCCOID = KBWREC.KUCCOID;

  XPKB021(); /* ; call io0240 - 's '*/
                                  /* ; dcust.vcmpny01*/

end // end KB0B316

// GET REP NAME FROM SM4REC
Function KB0B320()


  set SQLCA empty;
  set SM4REC empty;

  SM4REC.SM4REPID = KBWREC.SM4REPID;

  call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* ; successful read*/
   || SQLCA.VAGen_SQLCODE == 100) /* ; rep not found*/
    /* next sentence*/
  else
    set TA1REC empty;

    KBWREC.KBWXIDST = SM4REC.SM4REPID; /* use store field to unpack*/

    TA1REC.TA1LOCAT[1] = "KB0B320";
    TA1REC.TA1LOCAT[2] = "IO0020";
    TA1REC.TA1LOCAT[3] = "S ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VREPS001";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDST;

    XPKB900();
  end




end // end KB0B320

// READ TEMPORARY STORAGE
Function XPKB200()


  set KBYREC empty;
  set TA5REC empty;

  TA5REC.TA5APPID = "KBY"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = KBWREC.KBW-CURR-PAGE; /* current page*/
  KBYREC.KBY-TS-LENGTH = 760; /* length of record*/

  call "TA0050" (KBYREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "XPKB200";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KBYREC.KBY-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE READING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/

  end
end // end XPKB200

// ADD TEMPORARY STORAGE
Function XPKB210()

  set TA5REC empty;

  TA5REC.TA5APPID = "KBY"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  KBYREC.KBY-TS-LENGTH = 760; /* length of record*/

  call "TA0050" (KBYREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    KBWREC.KBW-MAX-PAGE = TA5REC.TA5TSQIX; /* max page number*/
  else
    TA1REC.TA1LOCAT[1] = "XPKB210";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KBYREC.KBY-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE ADDING TO TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/
  end

end // end XPKB210

// UPDATE TEMPORARY STORAGE
Function XPKB220()

  set TA5REC empty;

  TA5REC.TA5APPID = "KBY"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = KBWREC.KBW-CURR-PAGE; /* current page*/
  KBYREC.KBY-TS-LENGTH = 760; /* length of record*/

  call "TA0050" (KBYREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "XPKB220";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KBYREC.KBY-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE UPDATING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/

  end

end // end XPKB220

//*** RECORD=KB0BW01 ****
//  Working storage record for KB0B.  Browse function.
// ***********************
Record KB0BW01 type basicRecord
  5 KB0BW-GROUP1 KB0BW-GROUP1 ; 
    10 KB0BW-SUB KB0BW-SUB ; 
    10 KB0BW-CHANGE-FL KB0BW-CHANGE-FL ; 
    10 KB0BW-BROWSE-COMPANY-ID KB0BW-BROWSE-COMPANY-ID ; 
      15 KB0BW-CU-CO-ID KB0BW-CU-CO-ID ; 
      15 * char(1) ; 
      15 KB0BW-CU-STOR-ID KB0BW-CU-STOR-ID ; 
      15 * char(1) ; 
      15 KB0BW-XNX-DEPT-ID-XREF KB0BW-XNX-DEPT-ID-XREF ; 
      15 * char(25) ; 
    10 KB0BW-BROWSE-NAME KB0BW-BROWSE-NAME ; 
      15 KB0BW-XXXLSTNM KB0BW-XXXLSTNM ; 
      15 * char(1) ; 
      15 KB0BW-XXXFSTNM KB0BW-XXXFSTNM ; 
    10 KB0BW-BROWSE-STORE-DATA KB0BW-BROWSE-STORE-DATA ; 
      15 KB0BW-XXXCITY KB0BW-XXXCITY ; 
      15 * char(1) ; 
      15 KB0BW-XSTCD KB0BW-XSTCD ; 
      15 * char(12) ; 
    10 KB0BW-BROWSE-REP-ID KB0BW-BROWSE-REP-ID ; 
      15 KB0BW-SM4REPID KB0BW-SM4REPID ; 
      15 * char(36) ; 
end // end KB0BW01

// browse info for company id opt
DataItem KB0BW-BROWSE-COMPANY-ID char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// browse info for buyer name opt
DataItem KB0BW-BROWSE-NAME char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// browse info for rep id option
DataItem KB0BW-BROWSE-REP-ID char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// browse info for store name opt
DataItem KB0BW-BROWSE-STORE-DATA char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change flag
DataItem KB0BW-CHANGE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0BW-CU-CO-ID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KB0BW-CU-STOR-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for KB0BW01
DataItem KB0BW-GROUP1 char(164)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0BW-SM4REPID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line subscript
DataItem KB0BW-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KB0BW-XNX-DEPT-ID-XREF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0BW-XSTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0BW-XXXCITY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0BW-XXXFSTNM char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0BW-XXXLSTNM char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

