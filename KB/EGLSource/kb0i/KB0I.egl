package kb0i;

import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB012;
import corpcom3.XPKB040;
import corpcom3.XPKB090;
import corpcom3.XPKB230;
import corpcom3.XPKB900;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXAPHN;
import corpx1.XADTBL;
import corpx1.XCTTBL;
import corpx1.XSTTBL;
import corpx2.XXXPHN;
import corpy2.YBBTBL;
import corpy2.YBTTBL;
import corpy2.YMLTBL;
import kb.common.KBAREC;
import kb.common.KBBREC;
import kb.common.KBWAREA1;
import kb.common.KBWAREA2;
import kb.common.KBWLINE1;
import kb.common.KBWLINE2;
import kb.common.KBWPRFX1;
import kb.common.KBWPRFX2;
import kb.common.KBWREC;
import kb.common.KBYREC;
import ku.common.KULREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0I ****
// This is the Buyer General Information Inquiry application
// ;
// Date created: October, 1989
// Maintenance:
// ;
// Init     Date     Reason
// ----    ------    ------------------------------------------
// tmorri  02/01/93  This application has been modified as
//                   part of the Buyer System Enhancement
//                   project.  The main objective of this
//                   project is to give Nike Sales Reps and
//                   Sales Admin. a way to associate buyers to
//                   sales reps via the sales responsibility
//                   code.  (See specs for details relating
//                   to this specific application).
// ;
// tmorri  04/30/93  Don't reset browse flag when PF3 is used
//                   to return to the previous screen.
//                   (KB0I010)
// 
// tmorri  11/08/93  Database Changes: renamed and resized
//                   KBLREC.XXXADDR1 to KBLREC.XXX-ADDR1
//                   KBLREC.XXXADDR2 to KBLREC.XXX-ADDR2
//                   KBLREC.XXXADDR3 to KBLREC.XXX-ADDR3
//                   (KB0I093)
// *********************
Program KB0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0IW01 KB0IW01; // record
  KBAREC KBAREC; // record
  KBBREC KBBREC; // record
  KBWREC KBWREC; // record
  KBYREC KBYREC; // record
  KULREC KULREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XSTTBL; // table
  use YBBTBL; // table
  use YMLTBL; // table
  use YBTTBL; // table
  use XADTBL; // table
  use KB0IM.KB0IM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0I001: KB0I001();
    ;
    ;
    goto KB0I005;
    ;
    ;
    KB0I005: KB0I005();
    ;
    ;
    goto KB0I005;
    ;
    ;
  end // end main
end // end KB0I

// INQUIRE BUYER INITIALIZE
Function KB0I001()
  ;
  ;
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/
  ;
  XPKB002(); /* ; Initialize KBWREC*/
  XPKB010(); /* ; Read KBAREC*/
  XPKB011(); /* ; Read Address*/
  ;
  KB0I090(); /* ; move W/S to KB0IM001*/
  ;
  ;
end // end KB0I001

// INQUIRE BUYER MAINLINE
Function KB0I005()
  ;
  KB0I080(); /* ; converse KB0IM001*/
  ;
  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* save prev pfkey*/
  KBWREC.XXXMAPNM = "KB0IM001"; /* ; save current map*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset curr pfkey*/
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  if (KB0IM001.CATOAP != " ") /* ; fast path requested*/
    KBWREC.KBWPFKEY[1] = "FP"; /* ; curr pfkey = fast path*/
    ;
    if (KBWREC.KBWADDFL == "A" /* add mode (similiar names screen)*/
     && KBWREC.KBWPFKEY[2] != "FP") /* fast path unconfirmed*/
      set KB0IM001.CATOAP cursor;
      converseLib.validationFailed(148);
    else
      COMMAREA.CATOAP = KB0IM001.CATOAP;
      COMMAREA.CAITEM = KB0IM001.CAITEM;
      ;
      XPKB040(); /* ; edit fast path usage*/
      ;
      set KB0IM001.CATOAP cursor, bold;
      KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
    end
    ;
  else
    KB0I010(); /* ; edit pfkeys*/
    if (KBWREC.KBWERRFL == "N") /* ; no errors*/
      KB0I040(); /* ; edit KB0IM001*/
      KB0I090(); /* ; move w/s to map*/
    end
  end
  ;
  ;
  ;
end // end KB0I005

// Edit PFKEYS
Function KB0I010()
  if (converseVar.eventKey is pf3) /* ; prev map requested*/
    if (KBWREC.KBWADDFL == "A") /* ; add mode (similiar names screen)*/
      COMMAREA.CATOAP = "KB0A";
      KBWREC.KBABUYID = 0;
      COMMAREA.CAUSERA = KBWREC.KBWGROUP;
      ;
      XSEXIT(); /* ; xfer to 'ADD BUYER'*/
      ;
      KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
      COMMAREA.CAUSERA = " ";
    else
      if (KBWREC.KBWBRSFL == "B") /* ; browse mode (buyer selection scrn)*/
        KBWREC.KBWRETNF = "Y"; /* set return flag*/
        COMMAREA.CATOAP = "KB0B";
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;
        ;
        XSEXIT(); /* ; xfer to 'BUYER BROWSE'*/
        ;
        KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
        COMMAREA.CAUSERA = " ";
      else
        COMMAREA.CATOAP = "KB0M";
        ;
        XSEXIT(); /* ; xfer to 'BUYER MENU'*/
        ;
        KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
      end
    end
    ;
  else
    if (converseVar.eventKey is pf4) /* ; menu requested*/
      KBWREC.KBWPFKEY[1] = "PF4"; /* ; curr pfkey = 'pf4'*/
      if (KBWREC.KBWADDFL == "A" /* add mode (similiar names screen)*/
       && KBWREC.KBWPFKEY[2] != "PF4") /* ; pf4 unconfirmed*/
        converseLib.validationFailed(144);
        KBWREC.KBWERRFL = "Y";
      else
        if (KBWREC.KBWBRSFL == "B")
          XPKB230(); /* ; purge ts for browse*/
        end
        COMMAREA.CATOAP = "KB0M";
        ;
        XSEXIT();
        ;
        KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
      end
    else
      if (converseVar.eventKey is pf5) /* ; update requested*/
        KBWREC.KBWPFKEY[1] = "PF5"; /* ; curr pfkey = 'pf5'*/
        ;
        if (KBWREC.KBWADDFL == "A" /* add mode (similiar names screen)*/
         && KBWREC.KBWPFKEY[2] != "PF5") /* ; pf5 unconfirmed*/
          converseLib.validationFailed(145);
          KBWREC.KBWERRFL = "Y";
        else
          if (KBWREC.KBWBRSFL == "B")
            XPKB230(); /* ; purge ts for browse*/
          end
          set KBWREC empty; /* ; reset KBWREC*/
          ;
          COMMAREA.CATOAP = "KB0C";
          KBWREC.KBABUYID = KB0IM001.KBABUYID;
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          ;
          XSEXIT();
          ;
          KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CAMSG = " ";
          COMMAREA.CAUSERA = " ";
        end
        ;
      else
        if (converseVar.eventKey is pf6) /* ; browse requested*/
          KBWREC.KBWPFKEY[1] = "PF6"; /* ; curr pfkey = 'pf6'*/
          ;
          if (KBWREC.KBWADDFL == "A" /* add mode (similiar names screen)*/
           && KBWREC.KBWPFKEY[2] != "PF6") /* ; pf6 unconfirmed*/
            converseLib.validationFailed(146);
            KBWREC.KBWERRFL = "Y";
          else
            if (KBWREC.KBWBRSFL == "B")
              XPKB230(); /* ; purge ts for browse*/
            end
            set KBWREC empty; /* ; reset KBWREC*/
            ;
            COMMAREA.CATOAP = "KB0B";
            COMMAREA.CAUSERA = KBWREC.KBWGROUP;
            ;
            XSEXIT();
            ;
            KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
            COMMAREA.CAMSG = " ";
            COMMAREA.CAUSERA = " ";
          end
          ;
        else
          if (converseVar.eventKey is pf17) /* ; inquire attachments requested*/
            if (KB0IM001.KBABUYID == 0
             || KBWREC.KBWBFND == "N") /* buyer id not found*/
              KBWREC.KBWERRFL = "Y"; /* set error flag on*/
              converseLib.validationFailed(142); /* enter valid buyer before xfer*/
              set KB0IM001.KBABUYID cursor, bold;
            else
              COMMAREA.CATOAP = "KB0L";
              COMMAREA.CAUSERA = KBWREC.KBWGROUP;
              ;
              XSEXIT();
              ;
              KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
              COMMAREA.CAMSG = " ";
              COMMAREA.CAUSERA = " ";
            end
          else
            if (converseVar.eventKey is pf16) /* ; inquire comments requested*/
              if (KB0IM001.KBABUYID == 0
               || KBWREC.KBWBFND == "N") /* buyer id not found*/
                KBWREC.KBWERRFL = "Y"; /* set error flag on*/
                converseLib.validationFailed(142); /* enter valid buyer before xfer*/
                set KB0IM001.KBABUYID cursor, bold;
              else
                COMMAREA.CATOAP = "KB0V";
                COMMAREA.CAUSERA = KBWREC.KBWGROUP;
                ;
                XSEXIT();
                ;
                KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
                COMMAREA.CAMSG = " ";
                COMMAREA.CAUSERA = " ";
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end KB0I010

// EDIT KB0IM001
Function KB0I040()
  ;
  ;
  if (converseVar.eventKey not enter) /* ; user did not press enter*/
    KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
    converseLib.validationFailed(7); /* ; invalid pf/pa key*/
  else
    if (KB0IM001.KBABUYID == 0)
      if (KBWREC.KBWBRSFL == "B") /* ; in browse mode*/
        XPKB230(); /* ; purge ts for browse*/
        KBWREC.KBWBRSFL = " "; /* ; reset browse flag*/
      end
      if (KBWREC.KBWPFKEY[2] == "ENT"
       && KBWREC.KBABUYID == KB0IM001.KBABUYID)
        COMMAREA.CATOAP = "KB0M";
        XPKB090(); /* ; clear buyer from kbwrec*/
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;
        XSEXIT();
        KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      else
        KBWREC.KBWPFKEY[1] = "ENT";
        KB0I095(); /* ; Clear Screen*/
        set KBAREC empty; /* ; reset buyer record*/
        converseLib.validationFailed(68); /* ; Enter Buyer Id*/
        KBWREC.KBABUYID = 0;
      end
    else
      if (KB0IM001.KBABUYID != KBWREC.KBABUYID) /* ; new buyer id*/
        if (KBWREC.KBWBRSFL == "B") /* ; in browse mode*/
          XPKB230(); /* ; purge ts for browse*/
          KBWREC.KBWBRSFL = " "; /* ; reset browse flag*/
        end
        KBWREC.KBABUYID = KB0IM001.KBABUYID;
        KB0I095(); /* ; Clear Screen*/
        XPKB010(); /* ; read KBAREC*/
        XPKB011(); /* ; read Address*/
        KB0I090(); /* ; move W/S TO KB0IM001*/
      else
        if (KBWREC.KBWBRSFL == "B") /* ; in browse mode*/
          COMMAREA.CATOAP = "KB0L"; /* ; xfer to inquire attachments*/
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          ;
          XSEXIT();
          ;
          KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CAMSG = " ";
        else
          if (KBWREC.KBWADDFL == "A") /* ; in add mode*/
            COMMAREA.CATOAP = "KB0A";
                                   /* xfer back to similar names scrn*/
            KBWREC.KBABUYID = 0;
            COMMAREA.CAUSERA = KBWREC.KBWGROUP;
            ;
            XSEXIT();
            ;
            KB0IM001.VAGen_EZEMSG = COMMAREA.CAMSG;
            COMMAREA.CAMSG = " ";
            COMMAREA.CAUSERA = " ";
          else
            KBWREC.KBWPFKEY[1] = "ENT";
            KB0I095(); /* ; clear screen*/
            converseLib.validationFailed(68); /* ; Enter Buyer ID*/
            KB0IM001.KBABUYID = 0;
            KBWREC.KBABUYID = 0;
          end
        end
      end
    end
  end
  ;
  ;
end // end KB0I040

// SEND/RECEIVE GEN INFO INQ SCRN
Function KB0I080()
  ;
  ;
  converse KB0IM001 ;
  ;
  ;
  set KB0IM001.KBABUYID cursor, normal;
  set KB0IM001.CATOAP normal;
  ;
  ;
end // end KB0I080

// MOVE BUYER INFO TO KB0IM001
Function KB0I090()
  ;
  ;
  set KB0IM001 initial;
  ;
  KB0IM001.KB0IMDAT = VGVar.currentShortGregorianDate;
  KB0IM001.KBABUYID = KBWREC.KBABUYID;
  ;
  if (KBWREC.KBABUYID == 0) /* ; no buyer id*/
    set KB0IM001.KBABUYID cursor; /* ; highlight buyer id*/
    converseLib.validationFailed(68); /* enter buyer id*/
  else
    if (KBWREC.KBWBFND == "N") /* ; invalid buyer id*/
      set KB0IM001.KBABUYID cursor, bold; /* ; highlight buyer id*/
      converseLib.validationFailed(58); /* buyer id not on file*/
    else
      KB0I091(); /* ; move KBAREC to KB0IM001*/
      ;
      if (KBAREC.KUCCOID == 0 /* ; cust id = 0*/
       && KBAREC.KULAAID == 0) /* ; addr id = 0*/
        KB0I092(); /* ; move KBBREC to KB0IM001*/
      else
        KB0I093(); /* ; move KULREC to KB0IM001*/
      end
    end
  end
  ;
  ;
end // end KB0I090

// MOVE KBAREC TO KB0IM001
Function KB0I091()
  ;
  ;
  if (KBAREC.XXXSTAT == "A") /* ; status is active*/
    KB0IM001.KBWSTDSC = "ACTIVE";
  else
    KB0IM001.KBWSTDSC = "INACTIVE";
  end
  ;
  KB0IM001.XXXFSTNM = KBAREC.XXXFSTNM;
  KB0IM001.XXXMDINT = KBAREC.XXXMDINT;
  KB0IM001.XXXLSTNM = KBAREC.XXXLSTNM;
  KB0IM001.XXXGNTNM = KBAREC.XXXGNTNM;
  ;
  KB0IM001.YBTCD = KBAREC.YBTCD;
  if (KBAREC.YBTCD in YBTTBL.YBTCD)
    KB0IM001.YBTDESC = YBTTBL.YBTDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.KBABUYFL = KBAREC.KBABUYFL;
  ;
  KB0IW01.XXXPHN = KBAREC.XXXPHN;
  KB0IM001.KBWAREA1 = KB0IW01.KBWAREA1;
  KB0IM001.KBWPRFX1 = KB0IW01.KBWPRFX1;
  KB0IM001.KBWLINE1 = KB0IW01.KBWLINE1;
  ;
  KB0IW01.XXXAPHN = KBAREC.XXXAPHN;
  KB0IM001.KBWAREA2 = KB0IW01.KBWAREA2;
  KB0IM001.KBWPRFX2 = KB0IW01.KBWPRFX2;
  KB0IM001.KBWLINE2 = KB0IW01.KBWLINE2;
  ;
  KB0IM001.ZZZSDT = KBAREC.ZZZSDT;
  KB0IM001.XXXUSID1 = KBAREC.XXXUSID1;
  ;
  KB0IM001.ZZZCHGDT = KBAREC.ZZZCHGDT;
  KB0IM001.XXXUSID2 = KBAREC.XXXUSID2;
  ;
  KB0IM001.YBBCD[1] = KBAREC.YBBCD[1];
  if (KBAREC.YBBCD[1] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[1] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.YBBCD[2] = KBAREC.YBBCD[2];
  if (KBAREC.YBBCD[2] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[2] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.YBBCD[3] = KBAREC.YBBCD[3];
  if (KBAREC.YBBCD[3] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[3] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.YBBCD[4] = KBAREC.YBBCD[4];
  if (KBAREC.YBBCD[4] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[4] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.YBBCD[5] = KBAREC.YBBCD[5];
  if (KBAREC.YBBCD[5] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[5] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.YBBCD[6] = KBAREC.YBBCD[6];
  if (KBAREC.YBBCD[6] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[6] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.YBBCD[7] = KBAREC.YBBCD[7];
  if (KBAREC.YBBCD[7] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[7] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.YBBCD[8] = KBAREC.YBBCD[8];
  if (KBAREC.YBBCD[8] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[8] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.YBBCD[9] = KBAREC.YBBCD[9];
  if (KBAREC.YBBCD[9] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[9] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.YBBCD[10] = KBAREC.YBBCD[10];
  if (KBAREC.YBBCD[10] in YBBTBL.YBBCD)
    KB0IM001.YBBDESC[10] = YBBTBL.YBBDESC[sysVar.arrayIndex];
  end
  ;
  KB0IM001.KUCCOID = KBAREC.KUCCOID;
  KB0IM001.KULAAID = KBAREC.KULAAID;
  ;
  if (KBAREC.XAD-ADDR-TYP-CD == "02") /* buyer address*/
  /* next sentence*/
  else
    if (KBAREC.XAD-ADDR-TYP-CD == "01" /* bill to address*/
     || KBAREC.XAD-ADDR-TYP-CD == "04") /* company address*/
      KB0IM001.KUCCOID = KBAREC.KUCCOID;
      KB0IM001.KB0IMSID = " ";
      KB0IM001.KULAAID = KBAREC.KULAAID;
    else
      KB0IM001.KUCCOID = KBAREC.KUCCOID;
      KBWREC.KBWSTRID = KBAREC.KUMSTRID; /* move bin to numeric*/
      KB0IM001.KB0IMSID = KBWREC.KBWSTRCH; /* move char to map*/
      KB0IM001.KULAAID = KBAREC.KULAAID;
    end
  end
  ;
  if (KBAREC.XAD-ADDR-TYP-CD in XADTBL.XAD-ADDR-TYP-CD)
    KB0IM001.XAD-ADDR-TYP-DESC = XADTBL.XAD-ADDR-TYP-DESC[sysVar.arrayIndex];
  else
    KB0IM001.XAD-ADDR-TYP-DESC = " ";
  end
end // end KB0I091

// MOVE KBBREC TO KB0IM001
Function KB0I092()
  ;
  ;
  KB0IM001.XXXADDR1 = KBBREC.XXXADDR1;
  KB0IM001.XXXADDR2 = KBBREC.XXXADDR2;
  KB0IM001.XXXADDR3 = KBBREC.XXXADDR3;
  KB0IM001.XXXCITY = KBBREC.XXXCITY;
  KB0IM001.XSTCD = KBBREC.XSTCD;
  KB0IM001.XXXZIP = KBBREC.XXXZIP;
  KB0IM001.XCTCD = KBBREC.XCTCD;
  ;
  if (KBBREC.XSTCD in XSTTBL.XSTCD)
    KB0IM001.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
  end
  if (KBBREC.XCTCD in XCTTBL.XCTCD)
    KB0IM001.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  ;
  ;
end // end KB0I092

// MOVE KULREC TO KB0IM001
Function KB0I093()
  ;
  ;
  KB0IM001.XXXADDR1 = KULREC.XXX-ADDR1;
  KB0IM001.XXXADDR2 = KULREC.XXX-ADDR2;
  KB0IM001.XXXADDR3 = KULREC.XXX-ADDR3;
  KB0IM001.XXXCITY = KULREC.XXXCITY;
  KB0IM001.XSTCD = KULREC.XSTCD;
  KB0IM001.XXXZIP = KULREC.XXXZIP;
  KB0IM001.XCTCD = KULREC.XCTCD;
  ;
  if (KULREC.XSTCD in XSTTBL.XSTCD)
    KB0IM001.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
  end
  if (KULREC.XCTCD in XCTTBL.XCTCD)
    KB0IM001.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  ;
  ;
end // end KB0I093

// CLEAR SCREEN
Function KB0I095()
  ;
  ;
  converseLib.clearScreen();
  set KB0IM001 empty; /* init main screen*/
  KB0IM001.KB0IMDAT = VGVar.currentShortGregorianDate;
  ;
  set KB0IM001.KBABUYID cursor;
  ;
  ;
end // end KB0I095

// READ ADDRESS RECORD
Function XPKB011()
  ;
  ;
  if (KBWREC.KBWBFND == "Y") /* ; KBAREC found*/
    if (KBAREC.KUCCOID == 0 /* ; cust id = 0*/
     && KBAREC.KULAAID == 0) /* ; addr id = 0*/
      XPKB012(); /* ; Read KBBREC*/
    else
      XPKB013(); /* ; Read KULREC*/
    end
  end
  ;
  ;
end // end XPKB011

// READ KULREC
Function XPKB013()
  ;
  ;
  set SQLCA empty;
  set KULREC empty;
  ;
  KULREC.KUCCOID = KBAREC.KUCCOID;
  KULREC.KULAAID = KBAREC.KULAAID;
  ;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   /* ; bad database return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    KBWREC.KBWADRCO = KULREC.KUCCOID;
    KBWREC.KBWADRID = KULREC.KULAAID;
    ;
    set TA1REC empty;
    ;
    TA1REC.TA1LOCAT[1] = "XPKB013";
    TA1REC.TA1LOCAT[2] = "IO0170";
    TA1REC.TA1LOCAT[3] = "S";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VADDR001";
    TA1REC.TA1TBLKE = KBWREC.KBWADRKE;
    ;
    XPKB900();
  end
  ;
  ;
end // end XPKB013

//*** RECORD=KB0IW01 ****
// Splits the phone number up for displaying on Buyer Inquiry
// screen.
// ***********************
Record KB0IW01 type basicRecord
  10 XXXPHN XXXPHN ; 
    15 KBWAREA1 KBWAREA1 ; 
    15 KBWPRFX1 KBWPRFX1 ; 
    15 KBWLINE1 KBWLINE1 ; 
  10 XXXAPHN XXXAPHN ; 
    15 KBWAREA2 KBWAREA2 ; 
    15 KBWPRFX2 KBWPRFX2 ; 
    15 KBWLINE2 KBWLINE2 ; 
end // end KB0IW01

