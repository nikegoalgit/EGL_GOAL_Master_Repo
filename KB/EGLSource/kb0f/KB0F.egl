package kb0f;

import corpcom2.XP0AW01;
import corpcom3.XP0A001;
import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB018;
import corpcom3.XPKB031;
import corpcom3.XPKB040;
import corpcom3.XPKB050;
import corpcom3.XPKB900;
import corpcom3.XPKB990;
import corpcom3.XPTA0P;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXFSTNM;
import corpcom7.XXXLSTNM;
import corpx1.XP0AT01;
import corpx2.XNXCD;
import corpy2.YMLCD;
import corpy2.YMLTBL;
import corpy2.YSBCD;
import kb.common.KB3REC;
import kb.common.KBABUYID;
import kb.common.KBAREC;
import kb.common.KBIREC;
import kb.common.KBKREC;
import kb.common.KBWREC;
import kb.common.KBXREC;
import kb.common.KBXXEDT;
import kl.common.KIZTBL;
import ku.common.KUCCOID;
import ku.common.KUGREC;
import ku.common.KUMSTRID;
import ku.common.KUZREC;
import sm.common.SM-SAGCY-ID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0F ****
// This application allows the client to maintain the rank and
// mail level codes for the accounts associated with a rep.
// The client may select accounts for a rep by entering the
// rep id and/or the company, store and department.  Once the
// selection is made, the accounts are displayed and only the
// rank and mail level code can be updated.
// The client may also select a specific account that is
// displayed and transfer to the inquire or update screens for
// that buyer.
// The client can enter a '?' in the mail level field and this
// application will transfer to KB0U and display a list of
// valid codes to choose from.
// 
// ****************** LASER PRINTOUTS NOTE ********************
// 
// Laser printouts will not be routed to the correct person
// when the application is run in test.  This because the print
// utility cannot handle it.  They are currently routed to
// Teresa Morrison because the test JCL is name TMORRI.  If
// the printout is to be routed somewhere else the test JCL
// in the table KB0FT01 must be renamed with the users prefix.
// 
// ************************************************************
//                    MAINTENANCE HISTORY
// ------------------------------------------------------------
//   Date      Who     Reason
// ------------------------------------------------------------
// 02/01/93   tmorri   Created this application as part of the
//                     Buyer System Enhancement project.
// 
// 02/18/93   tmorri   Removed edit for rank, changed PF13 to
//                     PF12.  (KB0F-010, KB0F-050, KB0FM001)
// 
// 02/26/93   tmorri   Store id is not required when dept is
//                     entered.  (KB0F-041)
// 
// 03/01/93   tmorri   Fixed bug when requesting a list using ?
//                     (KB0F-054, KB0F-090)
// 
// 04/19/93   tmorri   Added PF21 (Print Report) option and
//                     deleted rank from map.
//                     (KB0F-005, KB0F-010, KB0F-030, KB0F-056,
//                      KB0F-058, KB0F-075, KB0F-080, KB0F-090,
//                      KB0F-130, KB0F-150, KB0F-155, KB0F-160,
//                      KB0F-170, KB0FM001, KB0FT01,  KB0FT02,
//                      KB0FT03,  KB0FT04 , TA0PM001, KB0F-120)
// 
// 04/30/93   tmorri   Added mail level abbreviation to map.
//                     (KB0F090, KB0FM001)
// 
// 05/04/93   tmorri   Fixed JCL error.  (KB0FT03)
// *********************
Program KB0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0FW01 KB0FW01; // record
  KB0FW02 KB0FW02; // record
  KB0FW03 KB0FW03; // record
  KB0FW04 KB0FW04; // record
  KB3REC KB3REC; // record
  KBAREC KBAREC; // record
  KBIREC KBIREC; // record
  KBKREC KBKREC; // record
  KBWREC KBWREC; // record
  KBXREC KBXREC; // record
  KUGREC KUGREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP0AW01 XP0AW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KB0FT01 {deleteAfterUse = yes}; // table
  use KB0FT02 {deleteAfterUse = yes}; // table
  use KB0FT03 {deleteAfterUse = yes}; // table
  use KB0FT04 {deleteAfterUse = yes}; // table
  use KIZTBL; // table
  use YMLTBL; // table
  use XP0AT01; // table
  use KB0FM.KB0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0F-001: KB0F-001();
    goto KB0F-005;
    KB0F-005: KB0F-005();
    goto KB0F-005;
  end // end main
end // end KB0F

// RANK/MAIL CODE INITIALIZE
Function KB0F-001()
  ;
  ;
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/
  ;
  set KB0FM001 initial; /* ; init map*/
  XPKB031(); /* ; get current date*/
  XPKB002(); /* ; initialize KBWREC*/
  set KB0FW01 empty; /* ; init working storage record*/
  ;
  if (COMMAREA.CAFROMAP != "KB0U") /* ; not from list application*/
    set KBWREC empty; /* ; clear working storage record*/
    KB0F-230(); /* ; purge temp storage*/
    KB0FM001.KB0FM-CURRENT-DT = VGVar.currentShortGregorianDate; /* ; initialize screen*/
    KBWREC.KBWCHGFL = "N"; /* ; init change flag*/
    converseLib.validationFailed(176); /* ; enter rep id*/
  else
    KB0FW01.KB0FW-CURR-PAGE = KBWREC.KBW-CURR-PAGE; /* reset ts page*/
    KB0FW01.KB0FW-MAX-PAGE = KBWREC.KBW-MAX-PAGE;
    KB0FW01.KB0FW-TS-LOADED-FL = "Y";
    KB0F-090(); /* ; move data to map*/
  end
  ;
  ;
end // end KB0F-001

// RANK/MAIL CODE MAINLINE
Function KB0F-005()
  ;
  KB0F-080(); /* ; send/receive kb0fM001*/
  ;
  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* save last pfkey used*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset current pfkey*/
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  KB0F-010(); /* ; edit pfkeys*/
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0FM001.SM4REPID == 0           /* ; rep not entered*/
     && KB0FM001.KB0FM-CU-CO-ID == 0     /* ; company not entered*/
     && KB0FM001.KB0FM-CU-STOR-ID == " " /* ; store not entered*/
     && KB0FM001.KB0FM-XNX-DEPT-ID-XREF == " ") /* dept not entered*/
      KB0F-230(); /* purge temp storage*/
      COMMAREA.CATOAP = "KB0M"; /* ; xfer to buyer menu*/
      ;
      XSEXIT();
      ;
      KB0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
    else
      ;
      KB0F-050(); /* ; edit map*/
      ;
      if (KBWREC.KBWERRFL == "N") /* ; still no errors*/
        if (converseVar.eventKey is pf7 /* ; scroll back*/
         || converseVar.eventKey is pf8 /* ; scroll forward*/
         || KB0FM001.KBWPAGE != KB0FW01.KB0FW-CURR-PAGE)
          KB0F-060(); /* ; build new page*/
        else
          if (converseVar.eventKey is pf21) /* ; submit report*/
            KB0F-150();
          else
            if (converseVar.eventKey is enter)
              KB0F-070(); /* ; update routine*/
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end KB0F-005

// EDIT PFKEYS
Function KB0F-010()
  ;
  ;
  if (KB0FM001.CATOAP != " ") /* ; fast path requested*/
    KBWREC.KBWPFKEY[1] = "FP";
    KB0F-030(); /* ; check for screen changes*/
    if (KBWREC.KBWCHGFL == "Y"
     && KBWREC.KBWPFKEY[2] != "FP") /* ; unconfirmed*/
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(1);
    else
      KB0F-230(); /* ; purge temp storage*/
      set KBWREC empty; /* ; reset kbwrec*/
      COMMAREA.CATOAP = KB0FM001.CATOAP;
      COMMAREA.CAITEM = KB0FM001.CAITEM;
      ;
      XPKB040(); /* ; validate fast path*/
      ;
      set KB0FM001.CATOAP cursor, bold;
      KB0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
    end
  else
    if (converseVar.eventKey is pf3) /* ; prev screen requested*/
      KBWREC.KBWPFKEY[1] = "PF3";
      KB0F-030(); /* ; check for screen changes*/
      if (KBWREC.KBWCHGFL == "Y"
       && KBWREC.KBWPFKEY[2] != "PF3") /* ; unconfirmed*/
        KBWREC.KBWERRFL = "Y";
        converseLib.validationFailed(3);
      else
        KB0F-230(); /* ; purge temp storage*/
        COMMAREA.CATOAP = "KB0M"; /* ; xfer to buyer menu*/
        ;
        XSEXIT();
        ;
        KB0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
      end
    else
      if (converseVar.eventKey is pf4) /* ; menu screen requested*/
        KBWREC.KBWPFKEY[1] = "PF4";
        KB0F-030(); /* ; check for screen changes*/
        if (KBWREC.KBWCHGFL == "Y"
         && KBWREC.KBWPFKEY[2] != "PF4") /* ; unconfirmed*/
          KBWREC.KBWERRFL = "Y";
          converseLib.validationFailed(4);
        else
          KB0F-230(); /* ; purge temp storage*/
          COMMAREA.CATOAP = "KB0M"; /* ; xfer to buyer menu*/
          ;
          XSEXIT();
          ;
          KB0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CAMSG = " ";
        end
      else
        if (converseVar.eventKey is pf5) /* ; transfer to update screen*/
          KBWREC.KBWPFKEY[1] = "PF5";
          KB0F-030(); /* ; check for screen changes*/
          if (KBWREC.KBWCHGFL == "Y"
           && KBWREC.KBWPFKEY[2] != "PF5") /* ; unconfirmed*/
            KBWREC.KBWERRFL = "Y";
            converseLib.validationFailed(173);
          else
            KB0F-020(); /* ; determine selection*/
            if (KBWREC.KBWERRFL == "N") /* ; no errors*/
              KB0F-230(); /* ; purge temp storage*/
              COMMAREA.CATOAP = "KB0C";
              COMMAREA.CAUSERA = KBWREC.KBWGROUP;
              ;
              XSEXIT();
              ;
              KB0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
              COMMAREA.CAMSG = " ";
            end
          end
        else
          if (converseVar.eventKey is pf7 /* ; scroll back*/
           || converseVar.eventKey is pf8) /* ; scroll forward*/
            if (KB0FW01.KB0FW-TS-LOADED-FL == "N")
              converseLib.validationFailed(165); /* ; can't scroll - no accounts found*/
              KBWREC.KBWERRFL = "Y";
            end
          else
            if (converseVar.eventKey is pf12) /* ; transfer to inquire screen*/
              KBWREC.KBWPFKEY[1] = "PF12";
              KB0F-030(); /* ; check for screen changes*/
              if (KBWREC.KBWCHGFL == "Y"
               && KBWREC.KBWPFKEY[2] != "PF12") /* ; unconfirmed*/
                KBWREC.KBWERRFL = "Y";
                converseLib.validationFailed(174);
              else
                KB0F-020(); /* ; determine selection*/
                if (KBWREC.KBWERRFL == "N") /* ; no errors*/
                  KB0F-230(); /* ; purge temp storage*/
                  COMMAREA.CATOAP = "KB0I";
                  COMMAREA.CAUSERA = KBWREC.KBWGROUP;
                  ;
                  XSEXIT();
                  ;
                  KB0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
                  COMMAREA.CAMSG = " ";
                end
              end
            else
              if (converseVar.eventKey is pf15) /* ; refresh screen*/
                KB0F-230(); /* ; purge temp storage*/
                KBWREC.KBWCHGFL = "N"; /* reset change flag*/
              else
                if (converseVar.eventKey is pf21) /* ; submit report*/
                  if (KB0FW01.KB0FW-TS-LOADED-FL == "N")
                    converseLib.validationFailed(190); /* no data to report*/
                    KBWREC.KBWERRFL = "Y";
                  end
                else
                  if (converseVar.eventKey is enter)
                           /* next sentence*/
                  else
                    converseLib.validationFailed(7); /* ; invalid pfkey*/
                    KBWREC.KBWERRFL = "Y"; /* ; set error flag on*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KB0F-010

// DETERMINE SELECTION
Function KB0F-020()
  ;
  KBWREC.KBABUYID = 0; /* set buyer id to zero*/
  ;
  if (KB0FW01.KB0FW-TS-LOADED-FL == "N") /* temp storage not loaded*/
    /* next sentence*/
  else
    KB0FW01.KB0FW-SUB = 1; /* ; reset map subscript*/
    ;
    while (KB0FW01.KB0FW-SUB <= 13) /* ; until end of map*/
      ;
      if (KB0FM001.KB0FM-SELECT[KB0FW-SUB] == "S")
        KBWREC.KBABUYID = KB0FM001.KBABUYID[KB0FW-SUB];
        KB0FW-SUB = 13;
      end
      ;
      KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB + 1;
    end
  end
  ;
  ;
end // end KB0F-020

// CHECK FOR SCREEN CHANGES
Function KB0F-030()
  ;
  if (KBWREC.KBWCHGFL == "Y" /* ; change flag for db2 updates*/
   || KB0FW01.KB0FW-TS-LOADED-FL == "N") /* temp storage not loaded*/
  /* next sentence*/
  else
    KB0FW01.KB0FW-SUB = 1; /* ; reset map subscript*/
    ;
    while (KB0FW01.KB0FW-SUB <= 13) /* ; until end of map*/
      ;
      if (KB0FM001.YMLCD[KB0FW-SUB] != KB0FW02.YMLCD[KB0FW-SUB])
        KBWREC.KBWCHGFL = "Y"; /* change flag for db2 updates*/
      end
      ;
      KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB + 1;
    end
  end
  ;
  ;
end // end KB0F-030

// EDIT DEPARTMENT
Function KB0F-041()
  ;
  XP0AW01.XP0AWFLD = KB0FM001.KB0FM-XNX-DEPT-ID-XREF; /* dept id*/
  XP0A001(); /* ; edit for non-numeric*/
  if (XP0AW01.XP0AWEFL == "Y") /* ; found invalid chars*/
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0FM001.KB0FM-XNX-DEPT-ID-XREF cursor, bold;
    converseLib.validationFailed(64); /* ; department must be numeric*/
  end
  ;
  ;
  if (KB0FM001.KB0FM-CU-CO-ID == 0)
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0FM001.KB0FM-CU-CO-ID cursor, bold;
    converseLib.validationFailed(178); /* ; rep and company required*/
  end
  ;
  if (KB0FM001.SM4REPID == 0)
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0FM001.SM4REPID cursor, bold;
    converseLib.validationFailed(178); /* ; rep and company required*/
  end
  ;
end // end KB0F-041

// EDIT STORE
Function KB0F-042()
  ;
  XP0AW01.XP0AWFLD = KB0FM001.KB0FM-CU-STOR-ID; /* dept id*/
  XP0A001(); /* ; edit for non-numeric*/
  if (XP0AW01.XP0AWEFL == "Y") /* ; found invalid chars*/
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0FM001.KB0FM-CU-STOR-ID cursor, bold;
    converseLib.validationFailed(33); /* ; store must be numeric*/
  end
  ;
  if (KB0FM001.KB0FM-CU-CO-ID == 0)
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0FM001.KB0FM-CU-CO-ID cursor, bold;
    converseLib.validationFailed(177); /* ; rep and company required*/
  end
  ;
  if (KB0FM001.SM4REPID == 0)
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0FM001.SM4REPID cursor, bold;
    converseLib.validationFailed(177); /* ; rep and company required*/
  end
  ;
end // end KB0F-042

// EDIT COMPANY
Function KB0F-043()
  ;
  if (KB0FM001.SM4REPID == 0)
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0FM001.SM4REPID cursor, bold;
    converseLib.validationFailed(179); /* ; rep required*/
  end
  ;
end // end KB0F-043

// EDIT MAP
Function KB0F-050()
  ;
  KB0F-051(); /* edit keys*/
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors*/
    if (KB0FW01.KB0FW-TS-LOADED-FL == "N") /* temp storage not loaded*/
      KB0F-100(); /* load rep accounts*/
      KBWREC.KBWERRFL = "Y"; /* this will bypass the update routine*/
                                  /* for the init display of the data*/
    else
      KB0F-054(); /* edit mail level code*/
      if (KBWREC.KBWERRFL == "N") /* no errors*/
        KB0F-052(); /* edit select byte*/
        if (KBWREC.KBWERRFL == "N") /* no errors*/
          KB0F-055(); /* edit scrolling*/
        end
      end
    end
    ;
    if (KBWREC.KBWERRFL == "N") /* no errors*/
      KB0F-058(); /* update ts with map changes*/
    end
  end
  ;
end // end KB0F-050

// EDIT KEYS
Function KB0F-051()
  ;
  ;
  KB0F-030(); /* check for changes*/
  ;
  if (KB0FM001.SM4REPID != KBWREC.SM4REPID /* if key changed*/
   || KB0FM001.KB0FM-CU-CO-ID != KBWREC.KUCCOID
   || KB0FM001.KB0FM-CU-STOR-ID != KBWREC.KBWSTRCH
   || KB0FM001.KB0FM-XNX-DEPT-ID-XREF != KBWREC.KBW-XNX-DEPT-ID-CHAR)
    ;
    if (KBWREC.KBWCHGFL == "Y")
      KB0FM001.SM4REPID = KBWREC.SM4REPID; /* move original key back*/
      KB0FM001.KB0FM-CU-CO-ID = KBWREC.KUCCOID;
      KB0FM001.KB0FM-CU-STOR-ID = KBWREC.KBWSTRCH;
      KB0FM001.KB0FM-XNX-DEPT-ID-XREF = KBWREC.KBW-XNX-DEPT-ID-CHAR;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(172); /* press enter to confirm changes or*/
                                   /* PF16 to refresh the screen*/
    else
      ;
      KBWREC.SM4REPID = KB0FM001.SM4REPID; /* save rep*/
      KBWREC.KUCCOID = KB0FM001.KB0FM-CU-CO-ID; /* save company*/
      KBWREC.KBWSTRCH = KB0FM001.KB0FM-CU-STOR-ID; /* save store*/
      KBWREC.KBW-XNX-DEPT-ID-CHAR = KB0FM001.KB0FM-XNX-DEPT-ID-XREF;
      KB0F-056(); /* clear map detail lines*/
      ;
      if (KB0FW01.KB0FW-TS-LOADED-FL == "Y") /* temp storage loaded*/
        KB0F-230(); /* purge temp storage*/
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors*/
    ;
    if (KB0FM001.KB0FM-XNX-DEPT-ID-XREF != " ")
      KB0F-041(); /* edit department*/
      if (KBWREC.KBWERRFL == "N") /* no errors*/
        KBWREC.KBW-XNX-DEPT-ID-CHAR = KB0FM001.KB0FM-XNX-DEPT-ID-XREF;
        KBWREC.KBW-XNX-DEPT-ID-NUM = KBWREC.KBW-XNX-DEPT-ID-NUM * 1;
        KBWREC.XNXCD = KBWREC.KBW-XNX-DEPT-ID-NUM;
      end
    end
    ;
    if (KB0FM001.KB0FM-CU-STOR-ID != " ")
      KB0F-042(); /* edit store*/
      if (KBWREC.KBWERRFL == "N") /* no errors*/
        KBWREC.KBWSTRCH = KB0FM001.KB0FM-CU-STOR-ID; /* save store*/
        KBWREC.KBWSTRID = KBWREC.KBWSTRID * 1;
        KBWREC.KUMSTRID = KBWREC.KBWSTRID;
      end
    end
    ;
    if (KB0FM001.KB0FM-CU-CO-ID != 0)
      KB0F-043(); /* edit company*/
      if (KBWREC.KBWERRFL == "N") /* no errors*/
        KBWREC.KUCCOID = KB0FM001.KB0FM-CU-CO-ID; /* save company*/
      end
    end
    ;
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KBWREC.SM4REPID = KB0FM001.SM4REPID; /* save rep*/
  end
  ;
end // end KB0F-051

// EDIT SELECT BYTE
Function KB0F-052()
  ;
  ;
  KBWREC.KBWCNT = 0;
  KB0FW01.KB0FW-SUB = 13;
                                  /* count number of buyers selected*/
  while (KB0FW01.KB0FW-SUB != 0)
    if (KB0FM001.KB0FM-SELECT[KB0FW-SUB] == "S")
      KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
    end
    if (KBWREC.KBWCNT > 1)
      converseLib.validationFailed(6); /* only one buyer can be selected*/
      KBWREC.KBWERRFL = "Y";
      KB0FW01.KB0FW-SUB = 0;
    else
      KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB - 1;
    end
  end
  ;
  if (KBWREC.KBWCNT > 1) /* highlight error selections*/
    KB0FW01.KB0FW-SUB = 13;
    while (KB0FW01.KB0FW-SUB != 0)
      if (KB0FM001.KB0FM-SELECT[KB0FW-SUB] == "S")
        set KB0FM001.KB0FM-SELECT[KB0FW-SUB] cursor, bold;
      end
      KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB - 1;
    end
  end
  ;
  ;
  KB0FW01.KB0FW-SUB = 13;
                                  /* edit select byte*/
  while (KB0FW01.KB0FW-SUB != 0)
    if (KB0FM001.KB0FM-SELECT[KB0FW-SUB] != " "
     && KB0FM001.KB0FM-SELECT[KB0FW-SUB] != "S")
      converseLib.validationFailed(105); /* must enter 's' to select*/
      KBWREC.KBWERRFL = "Y";
      set KB0FM001.KB0FM-SELECT[KB0FW-SUB] cursor, bold;
    end
    KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB - 1;
  end
  ;
end // end KB0F-052

// EDIT MAIL LEVEL CODE
Function KB0F-054()
  ;
  KB0FW01.KB0FW-SUB = 13;
  ;
  while (KB0FW01.KB0FW-SUB != 0)
    if (KB0FM001.KUCCOID[KB0FW-SUB] > 0) /* line not blank*/
      if (KB0FM001.YMLCD[KB0FW-SUB] == " ")
        KBWREC.YMLCD = " "; /* reset ymlcd*/
        set KB0FM001.YMLCD[KB0FW-SUB] cursor, bold;
        converseLib.validationFailed(100); /* mail level code required*/
        KBWREC.KBWERRFL = "Y";
      else
        if (KB0FM001.YMLCD[KB0FW-SUB] in YMLTBL.YMLCD
         && KB0FM001.YMLCD[KB0FW-SUB] != "99")
      /* next sentence*/
        else
          KBWREC.KBWSPLIT = KB0FM001.YMLCD[KB0FW-SUB];
          ;
          if (KBWREC.KBWSPLT1 != "?"
           && KBWREC.KBWSPLT2 != "?")
            set KB0FM001.YMLCD[KB0FW-SUB] cursor, bold;
            converseLib.validationFailed(101); /* invalid mail code*/
            KBWREC.KBWERRFL = "Y";
          else
            ;
            KBWREC.KBW-CURR-PAGE = KB0FW01.KB0FW-CURR-PAGE;
                                   /* save ts page*/
            KBWREC.KBW-MAX-PAGE = KB0FW01.KB0FW-MAX-PAGE;
            KBWREC.KBWSUB = KB0FW01.KB0FW-SUB; /* save current line*/
            KBWREC.YMLCD = KB0FW02.YMLCD[KB0FW-SUB];
                                   /* set code for kb0u*/
            KB0F-058(); /* update ts with map changes*/
                                  /* before transferring*/
            KBWREC.KBWTBLID = "ML"; /* ; set table name*/
            COMMAREA.CATOAP = "KB0U";
            COMMAREA.CAUSERA = KBWREC.KBWGROUP;
            ;
            XSEXIT();
            ;
            KB0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
            COMMAREA.CAMSG = " ";
            COMMAREA.CAUSERA = " ";
            KBWREC.KBWERRFL = "Y";
            KBWREC.KBWTBLID = " ";
          end
        end
      end
    end
    KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB - 1;
  end
  ;
  ;
end // end KB0F-054

// EDIT SCROLLING
Function KB0F-055()
  ;
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || KB0FM001.KBWPAGE != KB0FW01.KB0FW-CURR-PAGE)
    ;
    KBWREC.KBWCNT = 0;
    KB0FW01.KB0FW-SUB = 13;
    ;
    while (KB0FW01.KB0FW-SUB != 0)
      if (KB0FM001.KB0FM-SELECT[KB0FW-SUB] == "S")
        set KB0FM001.KB0FM-SELECT[KB0FW-SUB] cursor, bold;
        KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
      end
      KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB - 1;
    end
    ;
    if (KBWREC.KBWCNT > 0) /* selection made on screen*/
      converseLib.validationFailed(61); /* can't scroll with selection*/
      KBWREC.KBWERRFL = "Y";
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (converseVar.eventKey is pf7)
      if (KB0FW01.KB0FW-MAX-PAGE == 0)
        converseLib.validationFailed(165); /* no accounts displayed - can't scroll*/
        KBWREC.KBWERRFL = "Y";
      else
        if (KB0FM001.KBWPAGE == 1)
          converseLib.validationFailed(8); /* already at top*/
          set KB0FM001.KBWPAGE cursor, bold;
          KBWREC.KBWERRFL = "Y";
        else
          if (KB0FM001.KBWPAGE != KB0FW01.KB0FW-CURR-PAGE)
            converseLib.validationFailed(113); /* can't change page and scroll*/
            set KB0FM001.KBWPAGE cursor, bold;
            KBWREC.KBWERRFL = "Y";
          end
        end
      end
    end
    ;
    if (converseVar.eventKey is pf8)
      if (KB0FW01.KB0FW-MAX-PAGE == 0)
        converseLib.validationFailed(165); /* no accounts displayed - can't scroll*/
        KBWREC.KBWERRFL = "Y";
      else
        if (KB0FM001.KBWPAGE == KB0FM001.KBWTOTPG)
          converseLib.validationFailed(9); /* already at bottom*/
          set KB0FM001.KBWPAGE cursor, bold;
          KBWREC.KBWERRFL = "Y";
        else
          if (KB0FM001.KBWPAGE != KB0FW01.KB0FW-CURR-PAGE)
            converseLib.validationFailed(113); /* can't change page and scroll*/
            set KB0FM001.KBWPAGE cursor, bold;
            KBWREC.KBWERRFL = "Y";
          end
        end
      end
    end
    ;
    if (KBWREC.KBWERRFL == "N") /* no errors yet*/
      if (KB0FM001.KBWPAGE == 0
       && KB0FW01.KB0FW-MAX-PAGE != 0)
        converseLib.validationFailed(48); /* invalid page number*/
        set KB0FM001.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      else
        if (KB0FM001.KBWPAGE > KB0FM001.KBWTOTPG)
          converseLib.validationFailed(48); /* invalid page number*/
          set KB0FM001.KBWPAGE cursor, bold;
          KBWREC.KBWERRFL = "Y";
        end
      end
    end
  end
  ;
  ;
  ;
end // end KB0F-055

// Clear map detail lines
Function KB0F-056()
  ;
  set KB0FM001 initial; /* ; initialize screen*/
  ;
  KB0FM001.KB0FM-CURRENT-DT = VGVar.currentShortGregorianDate;
  KB0FM001.SM4REPID = KBWREC.SM4REPID;
  KB0FM001.KB0FM-CU-CO-ID = KBWREC.KUCCOID;
  KB0FM001.KB0FM-CU-STOR-ID = KBWREC.KBWSTRCH;
  KB0FM001.KB0FM-XNX-DEPT-ID-XREF = KBWREC.KBW-XNX-DEPT-ID-CHAR;
  ;
  ;
  KB0FW01.KB0FW-SUB = 13;
  while (KB0FW01.KB0FW-SUB > 0) /* until top of map;*/
    set KB0FM001.KB0FM-SELECT[KB0FW-SUB] initialAttributes;
    set KB0FM001.YMLCD[KB0FW-SUB] initialAttributes;
    KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB - 1;
  end
  ;
  ;
  ;
end // end KB0F-056

// UPDATE TS WITH MAP CHANGES
Function KB0F-058()
  ;
  KBWREC.KBWCH2FL = "N"; /* ; change flag for current page*/
  KB0FW01.KB0FW-SUB = 1; /* ; reset map subscript*/
  ;
  while (KB0FW01.KB0FW-SUB <= 13) /* ; until end of map*/
    ;
    if (KB0FM001.KB0FM-SELECT[KB0FW-SUB] != KB0FW02.KB0FW-SELECT[KB0FW-SUB]
     || KB0FM001.YMLCD[KB0FW-SUB] != KB0FW02.YMLCD[KB0FW-SUB])
      ;
      KBWREC.KBWCH2FL = "Y"; /* change flag for current page*/
      ;
      KB0FW02.KB0FW-SELECT[KB0FW-SUB] = KB0FM001.KB0FM-SELECT[KB0FW-SUB];
      if (KB0FM001.YMLCD[KB0FW-SUB] != KB0FW02.YMLCD[KB0FW-SUB])
        KB0FW02.YMLCD[KB0FW-SUB] = KB0FM001.YMLCD[KB0FW-SUB];
        if (KB0FM001.YMLCD[KB0FW-SUB] in YMLTBL.YMLCD)
          KB0FM001.YMLABRV[KB0FW-SUB] = YMLTBL.YMLABRV[sysVar.arrayIndex];
        else
          KB0FM001.YMLABRV[KB0FW-SUB] = " ";
        end
        KB0FW02.KB0FW-CHANGE-FL[KB0FW-SUB] = "Y";
                                   /* ; account change fl*/
        KBWREC.KBWCHGFL = "Y"; /* change flag for db2 updates*/
      end
    end
    ;
    KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB + 1;
  end
  ;
   /* if any changes were made, update the temp storage page*/
  ;
  if (KBWREC.KBWCH2FL == "Y")
    KB0F-220(); /* update temp storage page*/
  end
  ;
  ;
end // end KB0F-058

// BUILD NEW PAGE
Function KB0F-060()
  ;
  /* determine new page number*/
  ;
  if (converseVar.eventKey is pf7)
    KB0FW01.KB0FW-CURR-PAGE = KB0FW01.KB0FW-CURR-PAGE - 1;
  else
    if (converseVar.eventKey is pf8)
      KB0FW01.KB0FW-CURR-PAGE = KB0FW01.KB0FW-CURR-PAGE + 1;
    else
      KB0FW01.KB0FW-CURR-PAGE = KB0FM001.KBWPAGE;
    end
  end
  ;
  KB0F-200(); /* read temporary storage*/
  ;
  KB0F-090(); /* move data to map*/
  ;
end // end KB0F-060

// UPDATE PROCESS
Function KB0F-070()
  ;
  KB0FW01.KB0FW-UPDATED-FL = "N"; /* reset updated flag*/
  ;
  XPKB031(); /* ; get current date/time*/
  ;
  KBWREC.KBW-CURR-PAGE = KB0FW01.KB0FW-CURR-PAGE; /* save current page*/
  KB0FW01.KB0FW-CURR-PAGE = 1; /* ; start with page one*/
  ;
  while (KB0FW01.KB0FW-CURR-PAGE <= KB0FW01.KB0FW-MAX-PAGE)
    ;
    KB0F-200(); /* ; read temp storage*/
    KB0FW01.KB0FW-SUB = 1; /* ; reset comment subscript*/
    ;
    while (KB0FW01.KB0FW-SUB <= 13) /* ; process the entire page*/
      ;
      if (KB0FW02.KB0FW-CHANGE-FL[KB0FW-SUB] == "Y")
        KB0F-073(); /* ; select account for update*/
        KB0F-074(); /* ; write audit record (before)*/
        KB0F-075(); /* ; update account*/
        KB0F-076(); /* ; write audit record (after)*/
        KB0FW02.KB0FW-CHANGE-FL[KB0FW-SUB] = " "; /* reset flag*/
        KB0FW01.KB0FW-UPDATED-FL = "Y"; /* updates completed*/
      end
      KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB + 1;
    end
    KB0F-220(); /* reset account change flags*/
    KB0FW01.KB0FW-CURR-PAGE = KB0FW01.KB0FW-CURR-PAGE + 1;
  end
  ;
  KB0FW01.KB0FW-CURR-PAGE = KBWREC.KBW-CURR-PAGE; /* reset page*/
  KB0F-200(); /* ; read temp storage*/
  ;
  if (KB0FW01.KB0FW-UPDATED-FL == "Y")
    converseLib.validationFailed(88); /* updates completed*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    KBWREC.KBWCHGFL = "N"; /* reset change flag*/
    KBWREC.KBWPFKEY[1] = " "; /* reset last pfkey*/
  else
    if (KBWREC.KBWPFKEY[2] == "ENT") /* key already pressed & no changes*/
      KB0F-230(); /* purge temp storage*/
      set KB0FM001 initial; /* refresh map*/
      KBWREC.KBWCHGFL = "N"; /* reset change flag*/
      KB0FM001.KB0FM-CURRENT-DT = VGVar.currentShortGregorianDate;
      converseLib.validationFailed(176);
    else
      converseLib.validationFailed(129); /* no changes processed*/
      KBWREC.KBWCHGFL = "N"; /* reset change flag*/
      KBWREC.KBWPFKEY[1] = "ENT"; /* save last pfkey*/
    end
  end
  ;
  ;
end // end KB0F-070

// SELECT BXREF FOR UPDATE
Function KB0F-073()
  ;
  set SQLCA empty;
  set KBXREC empty;
  ;
  KBXREC.KBABUYID = KB0FW02.KBABUYID[KB0FW-SUB];
  KBXREC.KUCCOID = KB0FW02.KUCCOID[KB0FW-SUB];
  KBXREC.KUMSTRID = KB0FW02.KUMSTRID[KB0FW-SUB];
  KBXREC.XNXCD = KB0FW02.XNXCD[KB0FW-SUB];
  KBXREC.YSBCD = KB0FW02.YSBCD[KB0FW-SUB];
  KBXREC.KBXXEDT = KB0FW02.KBXXEDT[KB0FW-SUB];
  ;
  KBIREC.KBIOTASK = "S "; /* set io-pass task*/
  ;
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; record was found*/
  /* ; next sentence*/
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0F-073";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "S ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
end // end KB0F-073

// WRITE AUDIT (BEFORE IMAGE)
Function KB0F-074()
  ;
  ;
  set KB3REC empty;
  set KUZREC empty;
  ;
  XPKB031();
  ;
  KB3REC.KB3TRAN = "X"; /* ; transaction = rank/mail code change*/
  KB3REC.KB3DATA = KBXREC.KBXGRP; /* ; data = kbxrec*/
  ;
  KUZREC.KUZTYPE = "C"; /* ; type = 'change'*/
  KUZREC.KUZBFCD = "B"; /* ; before image*/
  KUZREC.XXXTBLNM = "VBXREF01";
  KUZREC.KUCCOID = KBXREC.KBABUYID;
  KUZREC.ZZZSDT = TA2REC.TA2GRGGN;
  KUZREC.ZZHHMMSS = TA2REC.TA2TIMHM;
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUZDATA = KB3REC.KB3GRP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1LOCAT[1] = "KB0F-074";
    TA1REC.TA1LOCAT[2] = "KUZTBL";
    TA1REC.TA1LOCAT[3] = "NTFND";
    TA1REC.TA1DBASE = "DCUST";
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ;
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    XPKB900();
  end
  ;
  ;
  set SQLCA empty;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* ; not able to add record*/
    TA1REC.TA1LOCAT[1] = "KB0F-074";
    TA1REC.TA1LOCAT[2] = "IO0500 ";
    TA1REC.TA1LOCAT[3] = "A";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1DBASE = "DCUST";
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ;
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    XPKB900(); /* ; abend*/
  end
  ;
  ;
end // end KB0F-074

// UPDATE KBXREC
Function KB0F-075()
  ;
  set SQLCA empty;
  set KBIREC empty;
  ;
  KBXREC.YMLCD = KB0FW02.YMLCD[KB0FW-SUB]; /* set mail code*/
  KBXREC.ZZZCHGDT = TA2REC.TA2GRGGN; /* ; set change date*/
  KBXREC.ZZZCHGTM = TA2REC.TA2TIMHM; /* ; set change time*/
  ;
  KBIREC.KBIOTASK = "U "; /* set io-pass task*/
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful update*/
    /* next sentence*/
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0F-075";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "U ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
end // end KB0F-075

// ADD AUDIT RECORD (KUZREC)
Function KB0F-076()
  ;
  ;
  ;
  set KB3REC empty;
  set KUZREC empty;
  ;
  KB3REC.KB3TRAN = "X"; /* ; transaction = rank/mail code change*/
  KB3REC.KB3DATA = KBXREC.KBXGRP; /* ; data = kbxrec*/
  ;
  KUZREC.KUZTYPE = "C"; /* ; type = 'change'*/
  KUZREC.KUZBFCD = "A"; /* ; before image*/
  KUZREC.XXXTBLNM = "VBXREF01";
  KUZREC.KUCCOID = KBXREC.KBABUYID;
  KUZREC.ZZZSDT = TA2REC.TA2GRGGN;
  KUZREC.ZZHHMMSS = TA2REC.TA2TIMHM;
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUZDATA = KB3REC.KB3GRP;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1LOCAT[1] = "KB0F-076";
    TA1REC.TA1LOCAT[2] = "KUZTBL";
    TA1REC.TA1LOCAT[3] = "NTFND";
    TA1REC.TA1DBASE = "DCUST";
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ;
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    XPKB900();
  end
  ;
  ;
  set SQLCA empty;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* ; not able to add record*/
    TA1REC.TA1LOCAT[1] = "KB0F-076";
    TA1REC.TA1LOCAT[2] = "IO0500 ";
    TA1REC.TA1LOCAT[3] = "A";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1DBASE = "DCUST";
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ;
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    XPKB900(); /* ; abend*/
  end
  ;
  ;
end // end KB0F-076

// SEND/RECEIVE KB0FM001
Function KB0F-080()
  converse KB0FM001 ;
  ;
  KBWREC.XXXMAPNM = "KB0FM001";
  ;
  set KB0FM001.SM4REPID cursor, normal;
  set KB0FM001.KB0FM-CU-CO-ID normal;
  set KB0FM001.KB0FM-CU-STOR-ID normal;
  set KB0FM001.KB0FM-XNX-DEPT-ID-XREF normal;
  ;
  KBWREC.KBWSUB1 = 13;
  while (KBWREC.KBWSUB1 > 0) /* until top of map;*/
    if (KB0FM001.KUCCOID[KBWSUB1] > 0)
      set KB0FM001.KB0FM-SELECT[KBWSUB1] cursor, normal;
      set KB0FM001.YMLCD[KBWSUB1] normal;
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
  end
  ;
end // end KB0F-080

// MOVE DATA TO MAP
Function KB0F-090()
  ;
  set KB0FM001 initial; /* ; initialize screen*/
  ;
  KB0FM001.KB0FM-CURRENT-DT = VGVar.currentShortGregorianDate;
  KB0FM001.SM4REPID = KBWREC.SM4REPID;
  KB0FM001.KB0FM-CU-CO-ID = KBWREC.KUCCOID;
  KB0FM001.KB0FM-CU-STOR-ID = KBWREC.KBWSTRCH;
  KB0FM001.KB0FM-XNX-DEPT-ID-XREF = KBWREC.KBW-XNX-DEPT-ID-CHAR;
  ;
  KB0F-200(); /* ; read temp storage page*/
  ;
  KB0FW01.KB0FW-SUB = 1;
  while (KB0FW-SUB <= 13) /* move accounts from temp storage to*/
                                   /* map*/
    if (KB0FW02.KUCCOID[KB0FW-SUB] > 0)
      KB0FM001.KB0FM-SELECT[KB0FW-SUB] = KB0FW02.KB0FW-SELECT[KB0FW-SUB];
      KB0FM001.KUCCOID[KB0FW-SUB] = KB0FW02.KUCCOID[KB0FW-SUB];
      KB0FM001.KUMSTRID[KB0FW-SUB] = KB0FW02.KUMSTRID[KB0FW-SUB];
      KB0FM001.XNXCD[KB0FW-SUB] = KB0FW02.XNXCD[KB0FW-SUB];
      KB0FM001.YSBCD[KB0FW-SUB] = KB0FW02.YSBCD[KB0FW-SUB];
      KB0FM001.KBABUYID[KB0FW-SUB] = KB0FW02.KBABUYID[KB0FW-SUB];
      KB0FM001.XXXLSTNM[KB0FW-SUB] = KB0FW02.XXXLSTNM[KB0FW-SUB];
      KB0FM001.XXXFSTNM[KB0FW-SUB] = KB0FW02.XXXFSTNM[KB0FW-SUB];
      KB0FM001.YMLCD[KB0FW-SUB] = KB0FW02.YMLCD[KB0FW-SUB];
      ;
      if (KB0FW02.YMLCD[KB0FW-SUB] in YMLTBL.YMLCD)
        KB0FM001.YMLABRV[KB0FW-SUB] = YMLTBL.YMLABRV[sysVar.arrayIndex];
      else
        KB0FM001.YMLABRV[KB0FW-SUB] = " ";
      end
      ;
      if (KB0FW01.KB0FW-SUB == 1) /* ; first line on map*/
        set KB0FM001.KB0FM-SELECT[KB0FW-SUB] cursor, normal;
      else
        set KB0FM001.KB0FM-SELECT[KB0FW-SUB] normal;
      end
      set KB0FM001.YMLCD[KB0FW-SUB] normal;
      ;
    end
    ;
    KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB + 1;
  end
  ;
  if (COMMAREA.CAFROMAP == "KB0U") /* from list applicaton*/
    KB0FM001.YMLCD[KBWSUB] = KBWREC.YMLCD;
    KB0FW02.YMLCD[KBWSUB] = KBWREC.YMLCD;
    set KB0FM001.YMLCD[KBWSUB] cursor;
    if (KB0FM001.YMLCD[KBWSUB] in YMLTBL.YMLCD)
      KB0FM001.YMLABRV[KBWSUB] = YMLTBL.YMLABRV[sysVar.arrayIndex];
    else
      KB0FM001.YMLABRV[KBWSUB] = " ";
    end
    KB0F-220(); /* update temp storage*/
    COMMAREA.CAFROMAP = "KB0M"; /* reset from application*/
  end
  ;
  KB0FM001.KBWPAGE = KB0FW01.KB0FW-CURR-PAGE;
  KB0FM001.KBWTOTPG = KB0FW01.KB0FW-MAX-PAGE;
  ;
end // end KB0F-090

// LIST REP ACCOUNTS
Function KB0F-100()
  ;
  set KB0FW02 empty;
  ;
  KB0F-110(); /* ; load temp storage*/
  ;
  if (KBWREC.KBWERRFL != "Y") /* ; no errors*/
    KB0FW01.KB0FW-CURR-PAGE = 1; /* ; init current page*/
    KB0F-090(); /* ; move data to map*/
  end
  ;
end // end KB0F-100

// LOAD TEMPORARY STORAGE
Function KB0F-110()
  ;
  ;
  KB0FW01.KB0FW-SUB = 0; /* ; init account subscript*/
  ;
  KB0F-120(); /* ; select rep accounts*/
  ;
  KB0F-121(); /* ; fetch first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* ; no accounts found*/
    converseLib.validationFailed(136);
    KBWREC.KBWERRFL = "Y";
  else
    ;
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful database call*/
      KB0F-130(); /* ; move to temp storage*/
      KB0F-121(); /* ; fetch next row*/
    end
    if (KB0FW01.KB0FW-SUB > 0)
      KB0F-210(); /* ; write partial page to ts*/
      set KB0FW02 empty; /* ; clear ts record*/
      KB0FW01.KB0FW-SUB = 0; /* ; init subscript*/
    end
  end
  ;
  KB0F-122(); /* ; close cursor*/
  ;
  ;
end // end KB0F-110

// SELECT REP ACCOUNTS
Function KB0F-120()
  ;
  ;
  set KUGREC empty;
  set KBXREC empty;
  set KBKREC empty;
  ;
   /* set up parameters for pass record*/
  ;
  KBKREC.KBK-TASK = "S3"; /* ; set io-pass task*/
  KBKREC.KBK-DATE = TA2REC.TA2GRGGN; /* ; current date*/
  ;
  KUGREC.SM4REPID = KBWREC.SM4REPID; /* ; set rep id*/
  ;
  if (KBWREC.KUCCOID != 0)
    KUGREC.KUCCOID = KBWREC.KUCCOID;
  else
    KUGREC.KUCCOID = -1; /* select all companies*/
  end
  ;
  if (KBWREC.KBWSTRCH != " ")
    KUGREC.KUMSTRID = KBWREC.KUMSTRID;
  else
    KUGREC.KUMSTRID = -1; /* select all stores*/
  end
  ;
  if (KBWREC.KBW-XNX-DEPT-ID-CHAR != " ")
    KUGREC.XNXCD = KBWREC.XNXCD;
  else
    KUGREC.XNXCD = -1; /* select all departments*/
  end
  ;
  XPKB050(); /* call kb1000*/
  ;
  ;
end // end KB0F-120

// FETCH REP ACCOUNT
Function KB0F-121()
  ;
  ;
  /* fetch next row*/
  ;
  KBKREC.KBK-TASK = "N3"; /* ; set io-pass task*/
  ;
  XPKB050(); /* ; call kb1000*/
  ;
end // end KB0F-121

// CLOSE CURSOR
Function KB0F-122()
  ;
  ;
  /* close cursor*/
  ;
  KBKREC.KBK-TASK = "C3"; /* ; set io-pass task*/
  ;
  XPKB050(); /* ; call kb1000*/
  ;
end // end KB0F-122

// MOVE TO TEMP STORAGE
Function KB0F-130()
  ;
  KB0FW01.KB0FW-SUB = KB0FW01.KB0FW-SUB + 1;
  ;
  KB0FW02.KUCCOID[KB0FW-SUB] = KBXREC.KUCCOID;
  KB0FW02.KUMSTRID[KB0FW-SUB] = KBXREC.KUMSTRID;
  KB0FW02.XNXCD[KB0FW-SUB] = KBXREC.XNXCD;
  KB0FW02.YSBCD[KB0FW-SUB] = KBXREC.YSBCD;
  KB0FW02.KBABUYID[KB0FW-SUB] = KBXREC.KBABUYID;
  KB0FW02.YMLCD[KB0FW-SUB] = KBXREC.YMLCD;
  KB0FW02.KBXXEDT[KB0FW-SUB] = KBXREC.KBXXEDT;
  ;
  KBWREC.KBABUYID = KBXREC.KBABUYID; /* set buyer id*/
  XPKB010(); /* get buyer*/
  if (KBWREC.KBWBFND == "Y") /* buyer found*/
    KB0FW02.XXXLSTNM[KB0FW-SUB] = KBAREC.XXXLSTNM;
    KB0FW02.XXXFSTNM[KB0FW-SUB] = KBAREC.XXXFSTNM;
  end
  ;
  if (KB0FW01.KB0FW-SUB == 13) /* ; page is full*/
    KB0F-210(); /* ; add page to temp storage*/
  end
  ;
end // end KB0F-130

// Submit KB1101 Report
Function KB0F-150()
  ;
           /* Determine if the program is running on the production*/
           /* or development machine.*/
  ;
           /* Set up the parm record and move the JCL (either production*/
           /* or test, whichever applies) to the TA0P parameter table.*/
  ;
           /* Set up the TA0P execution parameters and execute TA0P.*/
  ;
           /* Determine if the job was submitted successfully, and*/
           /* issue an appropriate message.*/
  ;
  ;
  if (KBWREC.KBWERRFL == "N") /* no error*/
    KB0F-155(); /* get cics info*/
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no error*/
    set KB0FW03 empty; /* set up parameters*/
    KB0FW03.KB0FW-SM-SREP-ID = KB0FM001.SM4REPID;
    KB0FW03.KB0FW-CU-CO-ID = KB0FM001.KB0FM-CU-CO-ID;
    KB0FW03.KB0FW-CU-STOR-ID = KB0FM001.KB0FM-CU-STOR-ID;
    KB0FW03.KB0FW-XNX-DEPT-ID-XREF = KB0FM001.KB0FM-XNX-DEPT-ID-XREF;
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no error*/
    set TA6REC empty; /* clear work area*/
    TA6REC.TA6SUBSW = "N"; /* get info for jcl*/
    TA6REC.TA6MSGSW = "N"; /* issue message to terminal*/
    TA6REC.TA6-MAX-COND-CODE = 0; /* max valid return code*/
    ;
    while (TA6REC.TA6RTNCD < "0") /* until complete*/
      XPTA0P(); /* call print request*/
    end
    ;
    if (sysVar.errorCode == "00000000" /* good call*/
     && TA6REC.TA6RTNCD == "0")        /* good return / no cancel*/
      ;
      KB0FW03.KB0FW-XURDEST = TA6REC.XURDEST;
      ;
      if (TA3REC.TA3RGNID == "03") /* prod region*/
        KB0F-160(); /* production jcl*/
      else
        KB0F-170(); /* test jcl*/
      end
      ;
      TA6REC.TA6SUBSW = "S"; /* tailor & submit jcl*/
      TA6REC.TA6RTNCD = " ";
      ;
      while (TA6REC.TA6RTNCD < "0") /* until complete*/
        XPTA0P(); /* call print request*/
      end
      ;
      if (sysVar.errorCode == "00000000") /* good call*/
        if (TA6REC.TA6RTNCD == "0" /* good return*/
         || TA6REC.TA6RTNCD == "1") /* user cancelled*/
          KB0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        else
          KBWREC.KBWERRFL = "Y"; /* set error flag*/
        end
      else
        KBWREC.KBWERRFL = "Y"; /* set error flag*/
      end
    else
      if (sysVar.errorCode != "00000000") /* bad call*/
        KBWREC.KBWERRFL = "Y"; /* set error flag*/
      else
        if (TA6REC.TA6RTNCD == "1") /* user cancelled*/
          KB0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        else
          KBWREC.KBWERRFL = "Y"; /* set error flag*/
        end
      end
    end
    if (KBWREC.KBWERRFL == "Y") /* an error occurred*/
      set TAEREC empty;
      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
      TAEREC.TAEDESC2 = TA6REC.TA6RTNCD; /* subroutine parms*/
      TA1REC.TA1TYPE = "APPL"; /* application error*/
      TA1REC.TA1FUNC = "POST"; /* post, no abend*/
      TA1REC.TA1LOCAT[1] = "SUB RPT "; /* location*/
      TA1REC.TA1LOCAT[2] = "XPTA0P  "; /* subroutine*/
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end /* message formatter*/
      converseLib.validationFailed(189);
    end
  end
  ;
end // end KB0F-150

// Get CICS Region Information
Function KB0F-155()
  ;
  ;
   /* Determine if the program is running on the production*/
   /* or development machine.*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* get CICS info*/
  ;
  if (sysVar.errorCode != "00000000" /* call was not good*/
   || TA3REC.TA3RTNCD != 0)          /* or bad return code*/
    set TA1REC empty;
    set TAEREC empty;
    TA1REC.TA1LOCAT[1] = "KB0F-155";
    TA1REC.TA1LOCAT[2] = "TA0230"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA3REC.TA3RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA3REC.TA3GROUP; /* subroutine parms*/
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
  end
end // end KB0F-155

// Submit Production JCL
Function KB0F-160()
  ;
  ;
       /* move production JCL from kb0fT01 to TA6REC*/
       /* to be submitted by TA0P.*/
  ;
  ;
  KB0FW01.KB0FW-INDEX = 1; /* set indexes*/
  TA6REC.TA6INDEX = 1;
  ;
  ;
  if ("/*EOF" in KB0FT01.TARJCL from KB0FW-INDEX) /* end of table*/
    KB0FW01.KB0FW-END-OF-JCL-TABLE = sysVar.arrayIndex;
    ;
    while (KB0FW01.KB0FW-INDEX <= KB0FW01.KB0FW-END-OF-JCL-TABLE)
      if (KB0FT01.TARTYPE[KB0FW-INDEX] == "P") /* parameter card*/
        TA6REC.TARJCL[TA6INDEX] = KB0FW03.KB0FW-KB1100-PARMS; /* move to jcl*/
      else /* not parm card*/
        TA6REC.TARJCL[TA6INDEX] = KB0FT01.TARJCL[KB0FW-INDEX]; /* move jcl*/
        TA6REC.TARTYPE[TA6INDEX] = KB0FT01.TARTYPE[KB0FW-INDEX]; /* move type*/
      end
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment index*/
      KB0FW01.KB0FW-INDEX = KB0FW01.KB0FW-INDEX + 1;
      ;
    end
  else /* bad jcl table*/
    converseLib.validationFailed(189);
    KBWREC.KBWERRFL = "Y";
  end
  ;
end // end KB0F-160

// Submit Test JCL
Function KB0F-170()
  ;
  ;
       /* move production JCL from kb0fT02 to TA6REC*/
       /* to be submitted by TA0P.*/
  ;
  KB0FW01.KB0FW-INDEX = 1; /* set indexes*/
  TA6REC.TA6INDEX = 1;
  ;
  if (TA6REC.XURDEST == "LOCAL ") /* local printer*/
    ;
    if ("/*EOF" in KB0FT04.TARJCL from KB0FW-INDEX) /* end of table*/
      KB0FW01.KB0FW-END-OF-JCL-TABLE = sysVar.arrayIndex;
      ;
      while (KB0FW01.KB0FW-INDEX <= KB0FW01.KB0FW-END-OF-JCL-TABLE)
        if (KB0FT04.TARTYPE[KB0FW-INDEX] == "P") /* parameter card*/
          TA6REC.TARJCL[TA6INDEX] = KB0FW03.KB0FW-KB1100-PARMS; /* move to jcl*/
        else /* not parm card*/
          if (KB0FT04.TARTYPE[KB0FW-INDEX] == "C") /* number of copies*/
            KB0FW04.KB0FW-PRINT-PARMS = KB0FT04.TARJCL[KB0FW-INDEX];
            KB0FW-NBR-COPIES = TA6REC.XURCOPY;
            TA6REC.TARJCL[TA6INDEX] = KB0FW04.KB0FW-PRINT-PARMS;
          else
            TA6REC.TARJCL[TA6INDEX] = KB0FT04.TARJCL[KB0FW-INDEX]; /* move jcl*/
            TA6REC.TARTYPE[TA6INDEX] = KB0FT04.TARTYPE[KB0FW-INDEX]; /* move type*/
          end
        end
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment index*/
        KB0FW01.KB0FW-INDEX = KB0FW01.KB0FW-INDEX + 1;
        ;
      end
      ;
    else /* bad jcl table*/
      converseLib.validationFailed(189);
      KBWREC.KBWERRFL = "Y";
    end
    ;
  else /* remote printer*/
    ;
    if ("/*EOF" in KB0FT02.TARJCL from KB0FW-INDEX) /* end of table*/
      KB0FW01.KB0FW-END-OF-JCL-TABLE = sysVar.arrayIndex;
      ;
      while (KB0FW01.KB0FW-INDEX <= KB0FW01.KB0FW-END-OF-JCL-TABLE)
        if (KB0FT02.TARTYPE[KB0FW-INDEX] == "P") /* parameter card*/
          TA6REC.TARJCL[TA6INDEX] = KB0FW03.KB0FW-KB1100-PARMS; /* move to jcl*/
        else /* not parm card*/
          TA6REC.TARJCL[TA6INDEX] = KB0FT02.TARJCL[KB0FW-INDEX]; /* move jcl*/
          TA6REC.TARTYPE[TA6INDEX] = KB0FT02.TARTYPE[KB0FW-INDEX]; /* move type*/
        end
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment index*/
        KB0FW01.KB0FW-INDEX = KB0FW01.KB0FW-INDEX + 1;
        ;
      end
      ;
    else /* bad jcl table*/
      converseLib.validationFailed(189);
      KBWREC.KBWERRFL = "Y";
    end
    ;
  end
end // end KB0F-170

// READ TEMP STORAGE
Function KB0F-200()
  ;
  set KB0FW02 empty;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KB0F"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = KB0FW01.KB0FW-CURR-PAGE; /* current page*/
  KB0FW02.KB0FW-TS-LENGTH = 836; /* length of record*/
  ;
  call "TA0050" (KB0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0F-200";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0FW02.KB0FW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE READING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
    ;
  end
end // end KB0F-200

// ADD TEMPORARY STORAGE
Function KB0F-210()
  ;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KB0F"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  KB0FW02.KB0FW-TS-LENGTH = 836; /* length of record*/
  ;
  call "TA0050" (KB0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    KB0FW01.KB0FW-MAX-PAGE = TA5REC.TA5TSQIX; /* max page number*/
    set KB0FW02 empty; /* reinitialize page*/
    KB0FW01.KB0FW-SUB = 0; /* reinitialize line subscript*/
    KB0FW01.KB0FW-TS-LOADED-FL = "Y";
  else
    TA1REC.TA1LOCAT[1] = "KB0F-210";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0FW02.KB0FW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE ADDING TO TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
  end
end // end KB0F-210

// UPDATE TEMPORARY STORAGE
Function KB0F-220()
  ;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KB0F"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = KB0FW01.KB0FW-CURR-PAGE; /* current page*/
  KB0FW02.KB0FW-TS-LENGTH = 836; /* length of record*/
  ;
  call "TA0050" (KB0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0F-220";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0FW02.KB0FW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE UPDATING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
    ;
  end
end // end KB0F-220

// PURGE TEMPORARY STORAGE
Function KB0F-230()
  ;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KB0F"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (KB0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    KB0FW01.KB0FW-TS-LOADED-FL = "N";
    set KB0FW02 empty;
  else
    TA1REC.TA1LOCAT[1] = "KB0F-230";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0FW02.KB0FW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE PURGING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
  end
end // end KB0F-230

Record KB0FW01 type basicRecord
  5 KB0FW-GROUP1 KB0FW-GROUP1 ; 
    10 KB0FW-SUB KB0FW-SUB ; 
    10 KB0FW-CURR-PAGE KB0FW-CURR-PAGE ; 
    10 KB0FW-MAX-PAGE KB0FW-MAX-PAGE ; 
    10 KB0FW-TS-LOADED-FL KB0FW-TS-LOADED-FL ; 
    10 KB0FW-UPDATED-FL KB0FW-UPDATED-FL ; 
    10 KB0FW-INDEX KB0FW-INDEX ; 
    10 KB0FW-END-OF-JCL-TABLE KB0FW-END-OF-JCL-TABLE ; 
end // end KB0FW01

Record KB0FW02 type basicRecord
  5 KB0FW-GROUP2 KB0FW-GROUP2 ; 
    10 KB0FW-TS-LENGTH KB0FW-TS-LENGTH ; 
    10 KB0FW-TS-ROW KB0FW-TS-ROW [13] ; 
      15 KB0FW-SELECT KB0FW-SELECT ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 YSBCD YSBCD ; 
      15 * smallint ; // XXX_RANK_NBR
      15 KBABUYID KBABUYID ; 
      15 XXXLSTNM XXXLSTNM ; 
      15 XXXFSTNM XXXFSTNM ; 
      15 YMLCD YMLCD ; 
      15 KBXXEDT KBXXEDT ; 
      15 KB0FW-CHANGE-FL KB0FW-CHANGE-FL ; 
end // end KB0FW02

//*** RECORD=KB0FW03 ****
// This record contains the parameters that will be passed to
// KB1100 (Buyer by Sales Rep Extract).
// 
// ************************************************************
// *             Maintenance History                          *
// ************************************************************
// 
//   Date     Name     Description
// --------   ------ ----------------------------------------
// 04/20/93   TMORRI   Created Record.
// 
// ***********************
Record KB0FW03 type basicRecord
  5 KB0FW-KB1100-PARMS KB0FW-KB1100-PARMS ; 
    10 SM-SAGCY-ID SM-SAGCY-ID ; 
    10 * char(1) ; 
    10 KB0FW-SM-SREP-ID KB0FW-SM-SREP-ID ; 
    10 * char(1) ; 
    10 KB0FW-CU-CO-ID KB0FW-CU-CO-ID ; 
    10 * char(1) ; 
    10 KB0FW-CU-STOR-ID KB0FW-CU-STOR-ID ; 
    10 * char(1) ; 
    10 KB0FW-XNX-DEPT-ID-XREF KB0FW-XNX-DEPT-ID-XREF ; 
    10 * char(1) ; 
    10 KB0FW-XURDEST KB0FW-XURDEST ; 
    10 * char(44) ; // Filler
end // end KB0FW03

Record KB0FW04 type basicRecord
  5 KB0FW-PRINT-PARMS KB0FW-PRINT-PARMS ; 
    10 * char(21) ; 
    10 KB0FW-NBR-COPIES KB0FW-NBR-COPIES ; 
    10 * char(58) ; 
end // end KB0FW04

// change flag
DataItem KB0FW-CHANGE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer company id
DataItem KB0FW-CU-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// customer store id
DataItem KB0FW-CU-STOR-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current page
DataItem KB0FW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of jcl table
DataItem KB0FW-END-OF-JCL-TABLE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// kb0fw01 group level
DataItem KB0FW-GROUP1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kb0fw02 group level
DataItem KB0FW-GROUP2 char(836)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index to jcl
DataItem KB0FW-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pass Record for KB1100
DataItem KB0FW-KB1100-PARMS char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maximum page
DataItem KB0FW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of Copies Requested
DataItem KB0FW-NBR-COPIES num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parms for Batch Print Output
DataItem KB0FW-PRINT-PARMS char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select indicator
DataItem KB0FW-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rep id
DataItem KB0FW-SM-SREP-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// account line subscript
DataItem KB0FW-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage length
DataItem KB0FW-TS-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage loaded flag
DataItem KB0FW-TS-LOADED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage row
DataItem KB0FW-TS-ROW char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// updated flag
DataItem KB0FW-UPDATED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer department id
DataItem KB0FW-XNX-DEPT-ID-XREF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// remote printer destination
DataItem KB0FW-XURDEST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

