package kb0w;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XAD-ADDR-TYP-CD;
import corpx1.XADTBL;
import kb.common.KBWREC;
import ku.common.KUCREC;
import ku.common.KULAAID;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ta.common.TA1REC;
//*** PROGRAM=KB0W ****
// ------------  kb0w - address association inquiry  ----------
// 
// overview:  This application displays a list of addresses.
//            One may be selected for inclusion in the buyer
//            add application, KB0A.
// 
// date written: 03/91
// author:       mgatre
// 
// ************************************************************
//                 maintenance history log
// ------------------------------------------------------------
//  date    who     description
// ------------------------------------------------------------
// 022291   mgatre  creation (cloned from KM0I)
// 02/01/93 tmorri  This application has been modified as
//                  part of the Buyer System Enhancement
//                  project.  Incorporated the new corporate
//                  address type table (XADTBL).
// 
// 04/21/93 tmorri  Changed literal on map. (KB0WM005)
// 
// 11/10/93 tmorri  Database Changes.  Renamed and Resized:
//                  KULREC.XXXADDR1  to  KULREC.XXX-ADDR1
//                  KULREC.XXXADDR2  to  KULREC.XXX-ADDR2
//                  KULREC.XXXADDR3  to  KULREC.XXX-ADDR3
//                  (KB0WS07)
// *********************
Program KB0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KB0WW01 KB0WW01; // record
  KB0WW02 KB0WW02; // record
  KB0WW03 KB0WW03; // record
  KBWREC KBWREC; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XADTBL; // table
  use KB0WM.KB0WM005 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0W000: KB0W000();
    ;
    exit program;
    ;
    KB0W005: KB0W005();
  end // end main
end // end KB0W

// main process
Function KB0W000()
  ;
  ;
  XSENTRY();
  XSSEGTR();
  ;
  set KB0WW01 empty;
  set KB0WW02 empty;
  set KB0WW03 empty;
  set KUCREC empty;
  set KUMREC empty;
  set SQLCA empty;
  set TA1REC empty;
  ;
  set KBWREC empty; /* ; initialize kbwrec*/
  KBWREC.KBWGROUP = COMMAREA.CAUSERA; /* ; move commarea to kbwrec*/
  ;
  KB0WM005.KB0WMDT = VGVar.currentShortGregorianDate;
  converseVar.commitOnConverse = 1;
  VGVar.handleHardIOErrors = 1;
  KB0WW01.KB0WWIDX = 1;
  KB0WW01.KB0WWFST = "Y"; /* first time switch*/
  KB0WW01.KB0WWEAF = "Y"; /* end of application flag*/
  ;
  while (KB0WW01.KB0WWEAF == "Y")
    KB0W005();
  end
  ;
  COMMAREA.CATOAP = COMMAREA.CAFROMAP;
  COMMAREA.CAUSERA = KBWREC.KBWGROUP;
  XSEXIT();
  ;
end // end KB0W000

// address association screen
Function KB0W005()
  ;
  if (KB0WW01.KB0WWFST == "Y") /* first time switch*/
    KB0WW01.KB0WWFST = "N";
  else
    if (converseVar.validationMsgNum == 0)
      KB0WS01(); /* read temp work file*/
    end
  end
  ;
  KB0WW01.KB0WWIDX = 1;
  while (KB0WW01.KB0WWIDX < 21)
    if (KB0WM005.XAD-ADDR-TYP-ABRV[KB0WWIDX] == " ")
      set KB0WM005.KB0WMSEL[KB0WWIDX] skip, invisible;
    end
    KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
  end
  ;
  if (KB0WW01.KB0WWDSP == "Y") /* display switch*/
    KB0WW01.KB0WWTTL = KB0WW01.KB0WWTOT; /* total selected*/
    KB0WW01.KB0WWTNM = " ADDRESSES SELECTED";
    KB0WW01.KB0WWMSG = KB0WW01.KB0WWTTE;
    KB0WM005.VAGen_EZEMSG = KB0WW01.KB0WWMSG;
    KB0WW01.KB0WWMSG = " ";
    if (KB0WW01.KB0WWTOT == 0) /* nothing selected*/
      KB0WM005.KB0WMADR[1] = " "; /* reset company address*/
      KB0WM005.KB0WMADR[2] = " ";
      KB0WM005.KB0WMADR[3] = " ";
      KB0WM005.KB0WMADR[4] = " ";
      if (converseVar.eventKey is pf20) /* accept address*/
        converseLib.validationFailed(161); /* nothing displayed to select*/
        set KB0WM005.KUCCOID cursor;
      end
    else
      KB0WW01.KB0WWTOT = 0;
      KB0WW01.KB0WWDSP = "N";
    end
  end
  ;
  ;
  converse KB0WM005 ;
  ;
  KB0WW01.KB0WWCID = KB0WM005.KUCCOID;
  ;
  KB0WS02(); /* check fast path and pf keys*/
  ;
  if (converseVar.validationMsgNum != 0 /* if any errors, return*/
   || KB0WW01.KB0WWMSG != " ")         
    return;
  end
  ;
  set KB0WM005.KUCCOID cursor, initialAttributes;
  set KB0WM005.KUCCOAID initialAttributes;
  ;
   /* edit options*/
  ;
  KB0WW01.KB0WWIDX = 4;
  while (KB0WW01.KB0WWIDX > 0)
    if (KB0WM005.KB0WMOPT[KB0WWIDX] == " "
     || KB0WM005.KB0WMOPT[KB0WWIDX] == "S")
      if (KB0WM005.KB0WMOPT[KB0WWIDX] is modified)
        KB0WW01.KB0WWMOD = "Y";
      end
      set KB0WM005.KB0WMOPT[KB0WWIDX] initialAttributes;
    else
      converseLib.validationFailed(105); /* must enter 's' to select*/
      set KB0WM005.KB0WMOPT[KB0WWIDX] cursor, modified, bold;
    end
    KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX - 1;
  end
  ;
   /* edit address id*/
  ;
  if (KB0WM005.KUCCOAID is modified
   || KB0WM005.KUCCOID is modified)
    KB0WW01.KB0WWMOD = "Y";
    if (KB0WM005.KUCCOAID > 0)
      KULREC.KUCCOID = KB0WM005.KUCCOID;
      KULREC.KULAAID = KB0WM005.KUCCOAID;
      KB0WS06(); /* ; edit address id*/
    else
      KB0WM005.KB0WMADR[1] = " "; /* reset company address*/
      KB0WM005.KB0WMADR[2] = " ";
      KB0WM005.KB0WMADR[3] = " ";
      KB0WM005.KB0WMADR[4] = " ";
    end
    KB0WW01.KB0WWADR = KB0WM005.KUCCOAID;
  end
  ;
   /* edit company id*/
  ;
  if (KB0WM005.KUCCOID == 0)
    KB0WW01.KB0WWMOD = "Y";
    converseLib.validationFailed(31); /* invalid compnay id*/
    set KB0WM005.KUCCOID cursor, modified, bold;
  else
    if (KB0WM005.KUCCOID is modified) /* if company id modified*/
      KB0WW01.KB0WWMOD = "Y";
      KUCREC.KUCCOID = KB0WM005.KUCCOID;
      KB0WS08(); /* edit company*/
    end
  end
  ;
  if (KB0WW01.KB0WWMOD == "Y")
    KB0WW01.KB0WWIDX = 1;
    while (KB0WW01.KB0WWIDX < 21) /* reset address selections*/
      KB0WM005.KB0WMSEL[KB0WWIDX] = " ";
      KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0) /* if any errors, return*/
    return;
  end
  ;
   /* edit select bytes*/
  ;
  KB0WW01.KB0WWIDX = 20;
  while (KB0WW01.KB0WWIDX > 0)
    if (KB0WM005.KB0WMSEL[KB0WWIDX] == "V")
      if (converseVar.eventKey is pf20 /* accept address*/
       && KB0WM005.KULAAID[KB0WWIDX] == KB0WM005.KUCCOAID) /* addr viewed*/
  /* NEXT SENTENCE;*/
      else
        KB0WM005.KB0WMSEL[KB0WWIDX] = " ";
      end
    end
    if (KB0WM005.KB0WMSEL[KB0WWIDX] == " "
     || KB0WM005.KB0WMSEL[KB0WWIDX] == "S"
     || KB0WM005.KB0WMSEL[KB0WWIDX] == "V")
      set KB0WM005.KB0WMSEL[KB0WWIDX] initialAttributes;
    else
      converseLib.validationFailed(105); /* must enter 's' to select*/
      set KB0WM005.KB0WMSEL[KB0WWIDX] cursor, modified, bold;
      return;
    end
    KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX - 1;
  end
  ;
   /* rebuild temp storage if selection has changed*/
  ;
  if (KB0WM005.KUCCOID is modified
   || KB0WM005.KUCCOAID is modified
   || KB0WM005.KB0WMOPT[1] is modified
   || KB0WM005.KB0WMOPT[2] is modified
   || KB0WM005.KB0WMOPT[3] is modified
   || KB0WM005.KB0WMOPT[4] is modified)
    set KB0WW03 empty;
    KB0WS05(); /* purge temp work file*/
    KB0WW01.KB0WWOPT[1] = KB0WM005.KB0WMOPT[1];
    KB0WW01.KB0WWOPT[2] = KB0WM005.KB0WMOPT[2];
    KB0WW01.KB0WWOPT[3] = KB0WM005.KB0WMOPT[3];
    KB0WW01.KB0WWOPT[4] = KB0WM005.KB0WMOPT[4];
    KB0WW01.KB0WWCNT = 0;
    KB0WW01.KB0WWIDX = 0;
    if (KB0WM005.KB0WMOPT[1] == "S" /* comp addr selected*/
     || KB0WM005.KB0WMOPT[2] == "S") /* bill to addr selected*/
      if (KB0WM005.KB0WMOPT[3] == " " /* store addr NOT selected*/
       && KB0WM005.KB0WMOPT[4] == " ") /* ship to addr NOT selected*/
        KB0WS10(); /* company address id's*/
        KB0WS20(); /* build temp storage*/
        if (converseVar.validationMsgNum != 0)
          set KB0WM005.KUCCOID modified;
          return;
        end
      end
    end
    if (KB0WM005.KB0WMOPT[1] == " " /* if none selected*/
     && KB0WM005.KB0WMOPT[2] == " " 
     && KB0WM005.KB0WMOPT[3] == " " 
     && KB0WM005.KB0WMOPT[4] == " ")
      KB0WW01.KB0WWOPT[1] = "S"; /* list all options*/
      KB0WW01.KB0WWOPT[2] = "S";
      KB0WW01.KB0WWOPT[3] = "S";
      KB0WW01.KB0WWOPT[4] = "S";
      KB0WS10(); /* company address id's*/
      KB0WS25(); /* select all stores*/
      if (converseVar.validationMsgNum != 0)
        set KB0WM005.KUCCOID modified;
        return;
      end
    end
    if (KB0WM005.KB0WMOPT[1] == "S" /* comp addr selected*/
     || KB0WM005.KB0WMOPT[2] == "S") /* bill to addr selected*/
      if (KB0WM005.KB0WMOPT[3] == "S" /* store addr selected*/
       || KB0WM005.KB0WMOPT[4] == "S") /* ship to addr selected*/
        KB0WS10(); /* company address id's*/
        KB0WS25(); /* select all stores*/
        if (converseVar.validationMsgNum != 0)
          set KB0WM005.KUCCOID modified;
          return;
        end
      end
    end
    if (KB0WM005.KB0WMOPT[1] == " " /* comp addr NOT selected*/
     && KB0WM005.KB0WMOPT[2] == " ") /* bill to addr NOT selected*/
      if (KB0WM005.KB0WMOPT[3] == "S" /* store addr selected*/
       || KB0WM005.KB0WMOPT[4] == "S") /* ship to addr selected*/
        KB0WS25(); /* select all stores*/
        if (converseVar.validationMsgNum != 0)
          set KB0WM005.KUCCOID modified;
          return;
        end
      end
    end
    KB0WW01.KB0WWHC = KB0WW01.KB0WWCNT;
    KB0WW01.KB0WWCNT = 1;
  end
  ;
  if (KB0WW01.KB0WWMOD == "Y")
    KB0WW01.KB0WWMOD = "N";
    return;
  end
  ;
   /* Process ENTER key*/
  ;
  if (converseVar.eventKey is enter)
    KB0WW01.KB0WWIDX = 1;
    while (KB0WW01.KB0WWIDX < 21)
      if (KB0WM005.KB0WMSEL[KB0WWIDX] == "S")
        KB0WM005.KB0WMSEL[KB0WWIDX] = "V";
        KB0WM005.KUCCOAID = KB0WM005.KULAAID[KB0WWIDX];
        KULREC.KULAAID = KB0WM005.KULAAID[KB0WWIDX];
        KULREC.KUCCOID = KB0WM005.KUCCOID;
        KB0WS06(); /* ; edit address id*/
        KB0WW01.KB0WWIDX = 21;
      end
      KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
    end
    return;
  end
  ;
   /* Process PF20 key (Accept selected address)*/
  ;
  if (converseVar.eventKey is pf20) /* accept selected address*/
    KBWREC.KBWCNT = 0;
    KB0WW01.KB0WWIDX = 1;
    while (KB0WW01.KB0WWIDX < 21)
      if (KB0WM005.KB0WMSEL[KB0WWIDX] == "V") /* check for viewed addr*/
        KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
        KB0WW01.KB0WWIDX = 20;
      end
      KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
    end
    ;
    if (KBWREC.KBWCNT > 0) /* address viewed and ready to accept*/
      KB0WS21();
      COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      COMMAREA.CAUSERA = KBWREC.KBWGROUP;
      XSEXIT();
    else
      KBWREC.KBWCNT = 0;
      KB0WW01.KB0WWIDX = 20;
      set KB0WM005.KB0WMSEL[1] cursor;
      while (KB0WW01.KB0WWIDX > 0)
        if (KB0WM005.KB0WMSEL[KB0WWIDX] == "S") /* check for selected addr*/
          set KB0WM005.KB0WMSEL[KB0WWIDX] cursor, bold;
          KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
        end
        KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX - 1;
      end
      if (KBWREC.KBWCNT > 0) /* address selected to view*/
        converseLib.validationFailed(160); /* Must be in 'V' status to accept*/
        return;
      else
        converseLib.validationFailed(159); /* Use 's' to select for viewing*/
        return;
      end
    end
    return;
  end
  ;
   /* Process all others*/
  ;
  KB0WW01.KB0WWIDX = 1;
  while (KB0WW01.KB0WWIDX < 21)
    KB0WM005.KB0WMSEL[KB0WWIDX] = " ";
    KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
  end
  ;
  if (converseVar.eventKey is pf7)
    if (KB0WW01.KB0WWCNT > 1)
      KB0WW01.KB0WWCNT = KB0WW01.KB0WWCNT - 1;
    else
      converseLib.validationFailed(8); /* can't scroll back; already at top*/
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf8)
    KB0WW01.KB0WWCNT = KB0WW01.KB0WWCNT + 1;
    return;
  end
  ;
end // end KB0W005

// read temp work file
Function KB0WS01()
  ;
  KB0WW02.KB0WW2RC = 0;
  KB0WW03.KB0WW3LG = 164;
  KB0WW02.KB0WW2CT = KB0WW01.KB0WWCNT;
  KB0WW02.KB0WW2FC = "R";
  KB0WW02.KB0WW2AP = "KB0W";
  ;
  if (KB0WW01.KB0WWCNT > KB0WW01.KB0WWHC)
    converseLib.validationFailed(9); /* end of data*/
    KB0WW01.KB0WWCNT = KB0WW01.KB0WWHC;
    return;
  end
  ;
  call "TA0050" (KB0WW03, KB0WW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KB0WW02.KB0WW2RC == 0)
    /* next sentence*/
  else
    if (KB0WW02.KB0WW2RC == 7)
      converseLib.validationFailed(9); /* end of data*/
      KB0WW01.KB0WWCNT = KB0WW01.KB0WWHC;
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      set KB0WM005.KUCCOID modified;
      converseLib.validationFailed(103);
      return;
    end
  end
  ;
  KB0WW01.KB0WWIDX = 1;
  while (KB0WW01.KB0WWIDX < 21)
    if (KB0WW03.XAD-ADDR-TYP-CD[KB0WWIDX] == " ")
      KB0WM005.KULAAID[KB0WWIDX] = 0;
      KB0WM005.XAD-ADDR-TYP-ABRV[KB0WWIDX] = " ";
      KB0WM005.KB0WMKEY[KB0WWIDX] = " ";
      KB0WM005.KB0WMSEL[KB0WWIDX] = " ";
    else
      KB0WM005.KULAAID[KB0WWIDX] = KB0WW03.KULAAID[KB0WWIDX];
      KB0WW01.KB0WWCST = " ";
      KB0WW01.KB0WWCMY = KUCREC.KUCCOID;
      if (KB0WW03.XAD-ADDR-TYP-CD[KB0WWIDX] in XADTBL.XAD-ADDR-TYP-CD)
        KB0WM005.XAD-ADDR-TYP-ABRV[KB0WWIDX] = XADTBL.XAD-ADDR-TYP-ABRV[sysVar.arrayIndex];
      else
        KB0WM005.XAD-ADDR-TYP-ABRV[KB0WWIDX] = " ";
      end
      if (KB0WM005.XAD-ADDR-TYP-ABRV[KB0WWIDX] == "STORE" /* store address*/
       || KB0WM005.XAD-ADDR-TYP-ABRV[KB0WWIDX] == "SHIP") /* ship to addr*/
        KB0WW01.KB0WWSTR = KB0WW03.KUMSTRID[KB0WWIDX]; /* store id*/
        KB0WW01.KB0WWPER = ".";
      end
      KB0WM005.KB0WMKEY[KB0WWIDX] = KB0WW01.KB0WWCST;
    end
    KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
  end
  ;
end // end KB0WS01

// check fastpath and pf keys
Function KB0WS02()
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf20)
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf3) /* prev screen*/
    set KBWREC empty; /* ; initialize kbwrec*/
    KBWREC.KBWGROUP = COMMAREA.CAUSERA; /* ; move commarea to kbwrec*/
    KB0WS05(); /* purge temp work file*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
    KB0WW01.KB0WWMSG = COMMAREA.CAMSG;
    return;
  end
  ;
  ;
  converseLib.validationFailed(7); /* invalid pf key*/
  ;
end // end KB0WS02

// purge temp work file
Function KB0WS05()
  ;
  KB0WW02.KB0WW2CT = 0;
  KB0WW02.KB0WW2AP = "KB0W";
  KB0WW02.KB0WW2RC = 0;
  KB0WW02.KB0WW2FC = "P"; /* purge temp work file*/
  ;
  set KB0WW03 empty;
  KB0WW03.KB0WW3LG = 164;
  ;
  call "TA0050" (KB0WW03, KB0WW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KB0WW02.KB0WW2RC != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.validationFailed(103);
  end
  ;
end // end KB0WS05

// edit address id
Function KB0WS06()
  ;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KB0WM005.KUCCOAID cursor, modified, bold;
      converseLib.validationFailed(102);
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KB0WS06";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VADDR001";
      KB0WW01.KB0WWCID = KULREC.KUCCOID;
      TA1REC.TA1TBLKE = KB0WW01.KB0WWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
  ;
  KB0WS07(); /* SET UP ADDRESS*/
  ;
end // end KB0WS06

// set up address
Function KB0WS07()
  ;
  KB0WW01.KB0WWIND = 1;
  KB0WW01.KB0WWCT = 0;
  KB0WW01.KB0WWADD = KULREC.XXXCITY;
  ;
  while (KB0WW01.KB0WWIND < 28)
    if (KB0WW01.KB0WWACL[KB0WWIND] == " ")
      KB0WW01.KB0WWCT = KB0WW01.KB0WWCT + 1;
      if (KB0WW01.KB0WWCT > 2)
        KB0WW01.KB0WWIND = KB0WW01.KB0WWIND - 2;
        KB0WW01.KB0WWACL[KB0WWIND] = ",";
        if (KULREC.XSTCD != " ")
          KB0WW01.KB0WWST = KULREC.XSTCD;
          KB0WW01.KB0WWIND = KB0WW01.KB0WWIND + 2;
          KB0WW01.KB0WWACL[KB0WWIND] = KB0WW01.KB0WWSCL[1];
          KB0WW01.KB0WWIND = KB0WW01.KB0WWIND + 1;
          KB0WW01.KB0WWACL[KB0WWIND] = KB0WW01.KB0WWSCL[2];
          if (KB0WW01.KB0WWIND < 25)
            KB0WW01.KB0WWIND = KB0WW01.KB0WWIND + 2;
            KB0WW01.KB0WWZIP = KULREC.XXXZIP;
            KB0WW01.KB0WWIZX = 1;
            while (KB0WW01.KB0WWIZX < 6)
              KB0WW01.KB0WWACL[KB0WWIND] = KB0WW01.KB0WWZCL[KB0WWIZX];
              KB0WW01.KB0WWIZX = KB0WW01.KB0WWIZX + 1;
              KB0WW01.KB0WWIND = KB0WW01.KB0WWIND + 1;
            end
          end
        else
          if (KB0WW01.KB0WWIND < 26)
            KB0WW01.KB0WWIND = KB0WW01.KB0WWIND + 2;
          else
            KB0WW01.KB0WWIND = KB0WW01.KB0WWIND + 1;
          end
          KB0WW01.KB0WWCTY = KULREC.XCTCD;
          KB0WW01.KB0WWICX = 1;
          while (KB0WW01.KB0WWICX < 5)
            KB0WW01.KB0WWACL[KB0WWIND] = KB0WW01.KB0WWCCL[KB0WWICX];
            KB0WW01.KB0WWICX = KB0WW01.KB0WWICX + 1;
            KB0WW01.KB0WWIND = KB0WW01.KB0WWIND + 1;
          end
        end
        KB0WW01.KB0WWIND = 30;
      end
    else
      KB0WW01.KB0WWCT = 0;
    end
    KB0WW01.KB0WWIND = KB0WW01.KB0WWIND + 1;
  end
  ;
  if (KULREC.XXX-ADDR1 != " ")
    KB0WM005.KB0WMADR[1] = KULREC.XXX-ADDR1;
    KB0WM005.KB0WMADR[2] = KULREC.XXX-ADDR2;
    KB0WM005.KB0WMADR[3] = KULREC.XXX-ADDR3;
    KB0WM005.KB0WMADR[4] = KB0WW01.KB0WWADD;
  else
    if (KULREC.XXX-ADDR2 != " ")
      KB0WM005.KB0WMADR[1] = KULREC.XXX-ADDR2;
      KB0WM005.KB0WMADR[2] = KULREC.XXX-ADDR3;
      KB0WM005.KB0WMADR[3] = KB0WW01.KB0WWADD;
      KB0WM005.KB0WMADR[4] = " ";
    else
      KB0WM005.KB0WMADR[1] = KULREC.XXX-ADDR3;
      KB0WM005.KB0WMADR[2] = KB0WW01.KB0WWADD;
      KB0WM005.KB0WMADR[3] = " ";
      KB0WM005.KB0WMADR[4] = " ";
    end
  end
  ;
end // end KB0WS07

// check if company exists
Function KB0WS08()
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KB0WM005.KUCCONM = KUCREC.KUCCONM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(31);
      set KB0WM005.KUCCOID cursor, modified, bold;
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KB0WS08";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      KB0WW01.KB0WWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KB0WW01.KB0WWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
  ;
end // end KB0WS08

// company address id's
Function KB0WS10()
  ;
  if (KB0WW01.KB0WWOPT[1] == "S" /* company address selected*/
   && KUCREC.XXXSTAT == "A")    
    if (KB0WW01.KB0WWADR == 0
     || KB0WW01.KB0WWADR == KUCREC.KUCCOAID)
      KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
      KB0WW01.KB0WWTOT = KB0WW01.KB0WWTOT + 1;
      KB0WW03.KULAAID[KB0WWIDX] = KUCREC.KUCCOAID;
      KB0WW03.XAD-ADDR-TYP-CD[KB0WWIDX] = "04"; /* company addr*/
    end
  end
  ;
  ;
  if (KB0WW01.KB0WWOPT[2] == "S" /* bill to address selected*/
   && KUCREC.XXXSTAT == "A")    
    if (KB0WW01.KB0WWADR == 0
     || KB0WW01.KB0WWADR == KUCREC.KUCBLAID)
      KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
      KB0WW01.KB0WWTOT = KB0WW01.KB0WWTOT + 1;
      KB0WW03.KULAAID[KB0WWIDX] = KUCREC.KUCBLAID;
      KB0WW03.XAD-ADDR-TYP-CD[KB0WWIDX] = "01"; /* bill to addr*/
    end
  end
  ;
end // end KB0WS10

// load temp work file
Function KB0WS20()
  ;
  set KB0WW02 empty;
  ;
  KB0WW02.KB0WW2RC = 0;
  KB0WW02.KB0WW2FC = "A";
  KB0WW02.KB0WW2AP = "KB0W";
  KB0WW01.KB0WWCNT = KB0WW01.KB0WWCNT + 1;
  KB0WW02.KB0WW2CT = KB0WW01.KB0WWCNT;
  KB0WW03.KB0WW3LG = 164;
  ;
  call "TA0050" (KB0WW03, KB0WW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KB0WW02.KB0WW2RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KB0WW01.KB0WWEND = "Y";
    converseLib.validationFailed(103);
    return;
  end
  ;
  set KB0WW03 empty;
  KB0WW01.KB0WWIDX = 1;
  KB0WW01.KB0WWDSP = "Y";
  ;
end // end KB0WS20

// load kbwrec with selected data
Function KB0WS21()
  ;
  ;
  KB0WW01.KB0WWIDX = 1;
  while (KB0WW01.KB0WWIDX < 21)
    if (KB0WM005.KB0WMSEL[KB0WWIDX] == "V")
      ;
      KBWREC.KBWAAID[1] = 0; /* reset kbwrec address id's*/
      KBWREC.KBWAAID[2] = 0;
      KBWREC.KBWAAID[3] = 0;
      KBWREC.KBWAAID[4] = 0;
      ;
      KB0WW01.KB0WWCST = KB0WM005.KB0WMKEY[KB0WWIDX]; /* move selected*/
      KB0WW01.KB0WWADR = KB0WM005.KULAAID[KB0WWIDX]; /* addr to ws*/
      ;
      if (KB0WM005.XAD-ADDR-TYP-ABRV[KB0WWIDX] == "BILL")
        KBWREC.KBWASEL[1] = "S";
        KBWREC.KBWACNBR[1] = KB0WW01.KB0WWCMY;
        KBWREC.KBWAAID[1] = KB0WW01.KB0WWADR;
      else
        if (KB0WM005.XAD-ADDR-TYP-ABRV[KB0WWIDX] == "COMP")
          KBWREC.KBWASEL[2] = "S";
          KBWREC.KBWACNBR[2] = KB0WW01.KB0WWCMY;
          KBWREC.KBWAAID[2] = KB0WW01.KB0WWADR;
        else
          if (KB0WM005.XAD-ADDR-TYP-ABRV[KB0WWIDX] == "SHIP")
            KBWREC.KBWASEL[3] = "S";
            KBWREC.KBWACNBR[3] = KB0WW01.KB0WWCMY;
            KBWREC.KBWASNBR[1] = KB0WW01.KB0WWSTR;
            KBWREC.KBWAAID[3] = KB0WW01.KB0WWADR;
          else
            KBWREC.KBWASEL[4] = "S";
            KBWREC.KBWACNBR[4] = KB0WW01.KB0WWCMY;
            KBWREC.KBWASNBR[2] = KB0WW01.KB0WWSTR;
            KBWREC.KBWAAID[4] = KB0WW01.KB0WWADR;
          end
        end
      end
      KB0WW01.KB0WWIDX = 20;
    end
    KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
  end
  ;
  ;
end // end KB0WS21

// select all stores
Function KB0WS25()
  ;
  KUMREC.KUCCOID = KUCREC.KUCCOID;
  ;
  call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KB0WS25";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KB0WW01.KB0WWCID = KUMREC.KUCCOID;
    TA1REC.TA1TBLKE = KB0WW01.KB0WWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KB0WW01.KB0WWEND = "N";
  while (KB0WW01.KB0WWEND == "N")
    KB0WS30(); /* select next store*/
  end
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
end // end KB0WS25

// select next store
Function KB0WS30()
  ;
  call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KB0WS20();
      KB0WW01.KB0WWEND = "Y";
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KB0WS30";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
  ;
  if (KB0WW01.KB0WWOPT[3] == "S" /* store address selected*/
   && KUMREC.XXXSTAT == "A")    
    if (KB0WW01.KB0WWADR == 0
     || KB0WW01.KB0WWADR == KUMREC.KUMSTAID)
      KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
      KB0WW01.KB0WWTOT = KB0WW01.KB0WWTOT + 1;
      if (KB0WW01.KB0WWIDX > 20)
        KB0WS20();
        if (converseVar.validationMsgNum != 0)
          return;
        end
      end
      KB0WW03.KUMSTRID[KB0WWIDX] = KUMREC.KUMSTRID;
      KB0WW03.KULAAID[KB0WWIDX] = KUMREC.KUMSTAID;
      KB0WW03.XAD-ADDR-TYP-CD[KB0WWIDX] = "05"; /* store addr*/
    end
  end
  ;
  if (KB0WW01.KB0WWOPT[4] == "S" /* ship to address selected*/
   && KUMREC.XXXSTAT == "A")    
    if (KB0WW01.KB0WWADR == 0
     || KB0WW01.KB0WWADR == KUMREC.KUMSHAID)
      KB0WW01.KB0WWIDX = KB0WW01.KB0WWIDX + 1;
      KB0WW01.KB0WWTOT = KB0WW01.KB0WWTOT + 1;
      if (KB0WW01.KB0WWIDX > 20)
        KB0WS20();
        if (converseVar.validationMsgNum != 0)
          return;
        end
      end
      KB0WW03.KUMSTRID[KB0WWIDX] = KUMREC.KUMSTRID;
      KB0WW03.KULAAID[KB0WWIDX] = KUMREC.KUMSHAID;
      KB0WW03.XAD-ADDR-TYP-CD[KB0WWIDX] = "03"; /* ship to addr*/
    end
  end
  ;
end // end KB0WS30

Record KB0WW01 type basicRecord
  5 KB0WWGRP KB0WWGRP ; 
    10 KB0WWEAF KB0WWEAF ; 
    10 KB0WWMSG KB0WWMSG ; 
    10 KB0WWIDX KB0WWIDX ; 
    10 KB0WWKEY KB0WWKEY ; 
      15 KB0WWCID KB0WWCID ; 
    10 KB0WWCNT KB0WWCNT ; 
    10 KB0WWHC KB0WWHC ; 
    10 KB0WWEND KB0WWEND ; 
    10 KB0WWFST KB0WWFST ; 
    10 KB0WWCST KB0WWCST ; 
      15 KB0WWCMY KB0WWCMY ; 
      15 KB0WWPER KB0WWPER ; 
      15 KB0WWSTR KB0WWSTR ; 
    10 KB0WWOPT KB0WWOPT [4] ; 
    10 KB0WWADR KB0WWADR ; 
    10 KB0WWIND KB0WWIND ; 
    10 KB0WWCT KB0WWCT ; 
    10 KB0WWIZX KB0WWIZX ; 
    10 KB0WWICX KB0WWICX ; 
    10 KB0WWSEL KB0WWSEL ; 
    10 KB0WWMOD KB0WWMOD ; 
    10 KB0WWDSP KB0WWDSP ; 
    10 KB0WWTOT KB0WWTOT ; 
    10 * char(3) ; 
    10 KB0WWTTE KB0WWTTE ; 
      15 KB0WWTTL KB0WWTTL ; 
      15 KB0WWTNM KB0WWTNM ; 
    10 * char(1) ; 
    10 KB0WWADD KB0WWADD ; 
      15 KB0WWACL KB0WWACL [30] ; 
    10 * char(1) ; 
    10 KB0WWST KB0WWST ; 
      15 KB0WWSCL KB0WWSCL [2] ; 
    10 * char(3) ; 
    10 KB0WWZIP KB0WWZIP ; 
      15 KB0WWZCL KB0WWZCL [5] ; 
    10 * char(1) ; 
    10 KB0WWCTY KB0WWCTY ; 
      15 KB0WWCCL KB0WWCCL [4] ; 
end // end KB0WW01

Record KB0WW02 type basicRecord
  5 KB0WW2RL KB0WW2RL ; 
    10 KB0WW2AP KB0WW2AP ; 
    10 KB0WW2CT KB0WW2CT ; 
    10 KB0WW2FC KB0WW2FC ; 
    10 KB0WW2RC KB0WW2RC ; 
end // end KB0WW02

Record KB0WW03 type basicRecord
  5 KB0WW3RL KB0WW3RL ; 
    10 KB0WW3LG KB0WW3LG ; 
    10 KUMSTRID KUMSTRID [20] ; 
    10 KULAAID KULAAID [20] ; 
    10 XAD-ADDR-TYP-CD XAD-ADDR-TYP-CD [20] ; 
end // end KB0WW03

// application
DataItem KB0WW2AP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count
DataItem KB0WW2CT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function
DataItem KB0WW2FC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem KB0WW2RC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KB0WW2RL char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record length
DataItem KB0WW3LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KB0WW3RL char(164)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0WWACL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0WWADD char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address id
DataItem KB0WWADR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem KB0WWCCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem KB0WWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KB0WWCMY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record count
DataItem KB0WWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KB0WWCST char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KB0WWCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KB0WWCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display switch
DataItem KB0WWDSP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of application flag
DataItem KB0WWEAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of while
DataItem KB0WWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch
DataItem KB0WWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0WWGRP char(199)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold count
DataItem KB0WWHC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KB0WWICX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen index
DataItem KB0WWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KB0WWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KB0WWIZX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KB0WWKEY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified switch
DataItem KB0WWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// messages
DataItem KB0WWMSG char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// options
DataItem KB0WWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period
DataItem KB0WWPER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0WWSCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select switch
DataItem KB0WWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0WWST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KB0WWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message
DataItem KB0WWTNM char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total selected
DataItem KB0WWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// address select message
DataItem KB0WWTTE char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total selected
DataItem KB0WWTTL num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KB0WWZCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0WWZIP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

