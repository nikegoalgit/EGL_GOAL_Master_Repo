package kb0r;

import corpcom2.XP0AW01;
import corpcom3.XP0A001;
import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB018;
import corpcom3.XPKB020;
import corpcom3.XPKB030;
import corpcom3.XPKB031;
import corpcom3.XPKB050;
import corpcom3.XPKB099;
import corpcom3.XPKB900;
import corpcom3.XPKB990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.UT2REC;
import corpx1.XP0AT01;
import corpx2.XNXCD;
import corpy2.YSBABRV;
import corpy2.YSBCD;
import corpy2.YSBTBL;
import kb.common.KB3REC;
import kb.common.KBAREC;
import kb.common.KBBREC;
import kb.common.KBIREC;
import kb.common.KBKREC;
import kb.common.KBWREC;
import kb.common.KBXREC;
import kb.common.KBXXEDT;
import kl.common.KIZTBL;
import ku.common.KUCCOID;
import ku.common.KUEREC;
import ku.common.KUGREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KUMSTRNM;
import ku.common.KUNREC;
import ku.common.KUZREC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0R ****
// This application allows the user to reassign existing active
// buyer/customer cross-references from one buyer to another.
// If the "from" application is KB0A, Add Buyer, the FROM BUYER
// must be entered and the TO BUYER is defaulted from the
// commarea.  The opposite is true when coming from any other
// application.
// 
// As with the Attach and Detach applications, accounts may be
// reassigned using several different methods.  The only
// difference being that only accounts currently active for the
// FROM buyer that also meet the entered criteria are transfer-
// red:
// All accounts for an entered company ID
// All accounts for the entered company and store ID
// All accounts for the entered company and department ID
// A specific company, store, and department
// By selecting from a display of accounts currently assigned
//     to the FROM buyer.
// 
// For the first four methods:
// The cross-refernce is found that matches the criteria that
// is entered.  Any cross-references that are active for the
// FROM buyer are updated with a termination date of today.
// The cross-reference table is checked again with the same
// account for the TO buyer.
// If the cross-reference does not already exist, it is created
// If the account being terminated was also attached today,
// it will be deleted rather than terminated.  This attachment
// was assummed to be a mistake.
// 
// If the "See List" option is chosen, all the active accounts
// for the FROM buyer are displayed on the second screen and
// the user may select these accounts for reassigning.  Again,
// the number that are actually created for the TO buyer are
// tallied and the toal displayed after the function is
// complete.
// 
// 10/08/91 jjohn2  Changed department to 4 character.  Change
//                   made along with database changes.
// 
// 02/01/93 tmorri  This application has been modified as
//                  part of the Buyer System Enhancement
//                  project.  The main objective of this
//                  project is to give Nike Sales Reps and
//                  Sales Admin a way to associate buyers to
//                  sales reps via the sales repsonsibility
//                  code.  (See specs for details relating to
//                  this specific application).
// 
// 02/19/93 tmorri  Changed literal on KB0RM001.
// 
// 02/26/93 tmorri  Removed 'accounts deleted' message & added
//                  confirmation message for ALL ACCOUNT OPTION
//                  (KB0RW01, KB0R005,KB0R020, KB0R030, KB0R038
//                   KB0R100)
// 
// 08/09/93 tmorri  Database Changes.  Removed KBXREC.XXXRKNBR.
//                  (KB0R042).
// *********************
Program KB0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0RW01 KB0RW01; // record
  KB0RW02 KB0RW02; // record
  KB3REC KB3REC; // record
  KBAREC KBAREC; // record
  KBBREC KBBREC; // record
  KBIREC KBIREC; // record
  KBKREC KBKREC; // record
  KBWREC KBWREC; // record
  KBXREC KBXREC; // record
  KUEREC KUEREC; // record
  KUGREC KUGREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XP0AW01 XP0AW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XP0AT01; // table
  use KIZTBL; // table
  use YSBTBL; // table
  use KB0RM.KB0RM001,  // forms
      KB0RM.KB0RM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0R001: KB0R001();
    ;
    ;
    goto KB0R005;
    ;
    ;
    KB0R005: KB0R005();
    ;
    ;
    goto KB0R005;
    ;
    ;
  end // end main
end // end KB0R

// REASSIGN INITIALIZE
Function KB0R001()
  ;
  ;
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/
  ;
  XPKB031(); /* ; get current date*/
  KB0R230(); /* ; purge temp storage*/
  set KB0RM001 initial; /* ; init maps*/
  set KB0RM002 initial;
  ;
  if (COMMAREA.CAFROMAP == "KB0A" /* ; from Buyer Add*/
   || COMMAREA.CAFROMAP == "KB0C" /* ; from Buyer Update*/
   || COMMAREA.CAFROMAP == "KB0T" /* ; attach Accounts*/
   || COMMAREA.CAFROMAP == "KB0D" /* ; detach Accounts*/
   || COMMAREA.CAFROMAP == "KB0N") /* ; Notes Update*/
    XPKB002(); /* ; Initialize KBWREC*/
    XPKB010(); /* ; get buyer*/
    KB0R090(); /* ; move W/S to screen*/
  else
    set KBWREC empty; /* ; initialize kbwrec*/
    ;
    COMMAREA.CATOAP = "KB0M"; /* ; xfer to menu*/
    COMMAREA.CAUSERA = KBWREC.KBWGROUP; /* ; initialize commarea*/
    ;
    XSEXIT();
    exit program;
  end
  ;
  ;
end // end KB0R001

// REASSIGN MAINLINE
Function KB0R005()
  ;
  KB0R080(); /* ; send/receive KB0RM001*/
  ;
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  set KB0RW01 empty; /* ; init working storage rec*/
  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* save prev pfkey*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset current pfkey*/
  ;
  KB0R010(); /* ; edit pfkeys*/
  ;
  if (KBWREC.KBWBFND == "Y") /* ; valid buyer id*/
    if (KBWREC.KBWERRFL == "N") /* ; no errors*/
      KB0R050(); /* ; edit KB0RM001*/
      if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
        if (KB0RM001.KB0RMOPT[6] != " ")
          KB0R100(); /* ; list active accts*/
        else
          if (KB0RM001.KB0RMOPT[5] != " ")
            KBWREC.KBWPFKEY[1] = "ENT"; /* save pfkey*/
            if (KBWREC.KBWPFKEY[2] != "ENT") /* process confirmed*/
              KBWREC.KBWERRFL = "Y";
              converseLib.validationFailed(185); /* confirm all accts*/
            else
              KB0R020(); /* ; reassign all accts*/
              KBWREC.KBWPFKEY[1] = " "; /* clear current pfkey*/
              KBWREC.KBWPFKEY[2] = " "; /* clear prev pfkey*/
            end
          else
            if (KB0RM001.KB0RMCID != 0)
              KB0R030(); /* ; reassign cmpny accts*/
            end
          end
        end
      end
    end
  else
    KB0R090(); /* ; move w/s to screen*/
  end
  ;
  ;
end // end KB0R005

// Count Attachments (bxrefs)
Function KB0R008()
  ;
  set KBIREC empty; /* ; initialize KBIREC*/
  set KBXREC empty; /* ; initialize KBXREC*/
  ;
  KBIREC.KBIOTASK = "C "; /* ; set io-pass task*/
  KBIREC.KBIOSTAT = "A"; /* ; set io-pass stat*/
  KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* ; set io-pass date*/
  ;
  KBXREC.KBABUYID = KBWREC.KBABUYID; /* ; set buyer id*/
  KBXREC.KUCCOID = -1; /* ; all companies*/
  KBXREC.KUMSTRID = -1; /* ; all stores*/
  KBXREC.XNXCD = -1; /* ; all depts*/
  KBXREC.YSBCD = "**"; /* ; all ysb's*/
  ;
  XPKB018(); /* ; call IO4330*/
  ;
  KBWREC.KBW-BXREF-CNT = KBIREC.KBIOCNT; /* save count*/
  ;
  ;
end // end KB0R008

// Edit PFKEYS
Function KB0R010()
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KB0R230(); /* ; purge temp storage*/
    if (KBWREC.KBWADDFL == "A") /* ; user in 'add' mode*/
      COMMAREA.CATOAP = "KB0A"; /* ; xfer to 'add buyer'*/
    else
      COMMAREA.CATOAP = "KB0C"; /* ; xfer to 'change buyer'*/
    end
    COMMAREA.CAUSERA = KBWREC.KBWGROUP;
    ;
    XSEXIT();
    ;
    KB0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    COMMAREA.CAUSERA = " ";
  else
    if (converseVar.eventKey is pf4) /* ; menu requested*/
      KB0R008(); /* ; count bxrefs*/
      KBWREC.KBWPFKEY[1] = "PF4"; /* ; curr pfkey = 'pf4'*/
      ;
      if (KBWREC.KBWADDFL == "A"      /* ; user in 'add' mode*/
       && KBWREC.KBWPFKEY[2] != "PF4" /* ; PF4 unconfirmed*/
       && KBWREC.KBW-BXREF-CNT == 0)  /* no attachments made*/
        KBWREC.KBWERRFL = "Y"; /* ; set error on*/
        converseLib.validationFailed(144); /* ; confirm pf4*/
      else
        if (KBWREC.KBWADDFL == "A" /* ; user in 'add' mode*/
         && KBWREC.KBW-BXREF-CNT == 0) /* no attachments made*/
          XPKB030(); /* ; purge session's work*/
        end
        ;
        COMMAREA.CATOAP = "KB0M";
        ;
        XSEXIT();
        ;
        KB0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
      end
      ;
    else
      if (converseVar.eventKey is pf16) /* ; Update Comments*/
        KB0R230(); /* ; purge temp storage*/
        COMMAREA.CATOAP = "KB0N";
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;
        ;
        XSEXIT();
        ;
        KB0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
        COMMAREA.CAUSERA = " ";
      else
        if (converseVar.eventKey is pf17) /* ; attach requested*/
          KB0R230(); /* ; purge temp storage*/
          COMMAREA.CATOAP = "KB0T";
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          ;
          XSEXIT();
          ;
          KB0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CAMSG = " ";
          COMMAREA.CAUSERA = " ";
        else
          if (converseVar.eventKey is pf18) /* ; detach requested*/
            if (KBWREC.KBWADDFL == "A") /* ; in 'add' mode*/
              converseLib.validationFailed(7); /* invalid pfkey*/
              KBWREC.KBWERRFL = "Y"; /* set error flag on*/
            else
              KB0R230(); /* ; purge temp storage*/
              COMMAREA.CATOAP = "KB0D";
              COMMAREA.CAUSERA = KBWREC.KBWGROUP;
              ;
              XSEXIT();
              ;
              KB0RM001.VAGen_EZEMSG = COMMAREA.CAMSG;
              COMMAREA.CAMSG = " ";
              COMMAREA.CAUSERA = " ";
            end
            ;
          else
            if (converseVar.eventKey is enter)
                /* next sentence*/
            else
              converseLib.validationFailed(7); /* invalid pfkey*/
              KBWREC.KBWERRFL = "Y"; /* set error flag on*/
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KB0R010

// PROCESS ALL ACTIVE ACCTS
Function KB0R020()
  ;
    /* add accounts for 'to' buyer if the account doesn't already exist*/
  ;
  set SQLCA empty;
  set KBKREC empty;
  set KBXREC empty;
  ;
  KBKREC.KBABUYID[1] = KB0RM001.KBABUYID[1]; /* from buyer id*/
  KBKREC.KBABUYID[2] = KB0RM001.KBABUYID[2]; /* to buyer id*/
  KBXREC.KUCCOID = -1; /* ; select all companies*/
  KBXREC.KUMSTRID = -1; /* ; select all stores*/
  KBXREC.XNXCD = -1; /* ; select all departments*/
  KBKREC.KBK-DATE = TA2REC.TA2GRGGN; /* ; current date*/
  ;
  KBKREC.KBK-TASK = "S2"; /* ; set io-pass task*/
  XPKB050(); /* call kb1000*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* successful select*/
    KB0R025(); /* ; add new accounts*/
  end
  ;
  ;
    /* detach or delete the 'from' buyer accounts*/
  ;
  set SQLCA empty;
  set KBIREC empty;
  set KBXREC empty;
  ;
  KBXREC.KBABUYID = KB0RM001.KBABUYID[1]; /* ; set from buyer id*/
  KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* ; current date*/
  ;
  KBIREC.KBIOTASK = "S3"; /* ; set io-pass task*/
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful select*/
    KB0R027(); /* ; detach/delete old accounts*/
  end
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* ; commit database changes*/
  ;
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KB0RM001.KB0RMOPT[5] = "*"; /* completed option*/
    KB0RW01.KB0RW-ACCT-MSGA = " ACCOUNTS REASSIGNED TO NEW BUYER";
    KB0RM001.VAGen_EZEMSG = KB0RW01.KB0RW-ACCT-MSG;
  end
  ;
end // end KB0R020

// REASSIGN ACCOUNTS (add)
Function KB0R025()
  ;
  KBKREC.KBK-TASK = "N2"; /* fetch first row*/
  XPKB050(); /* call kb1000*/
  XPKB031(); /* ; get current date/time*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* ; until end of set*/
    KB0R042(); /* add new kbxrec*/
    KB0R043(); /* write audit for add*/
    ;
    KBK-TASK = "N2"; /* fetch next row*/
    XPKB050(); /* call kb1000*/
  end
  ;
  KBKREC.KBK-TASK = "C2"; /* ; close cursor*/
  XPKB050(); /* call kb1000*/
  ;
end // end KB0R025

// REASSIGN ACCTS (detach/delete)
Function KB0R027()
  ;
  XPKB031(); /* ; get current date/time*/
  ;
  KBIREC.KBIOTASK = "N3"; /* fetch first row*/
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* ; no accounts found*/
    converseLib.validationFailed(136);
    KBWREC.KBWERRFL = "Y";
  else
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
      ;
      if (KBXREC.KBXXEDT == TA2REC.TA2GRGGN) /* effective dt = today*/
        KB0R038(); /* ; delete kbxrec*/
      else
        KB0R036(); /* ; detach kbxrec*/
      end
      ;
      KBIREC.KBIOTASK = "N3"; /* fetch next kbxrec*/
      XPKB018(); /* call io4330*/
    end
  end
  ;
  ;
  KBIREC.KBIOTASK = "C3"; /* close cursor*/
  XPKB018(); /* call io4330*/
  ;
end // end KB0R027

// SELECT COMPANY ACCTS
Function KB0R030()
  ;
    /* add accounts for 'to' buyer if the account doesn't already exist*/
  ;
  set SQLCA empty;
  set KBKREC empty;
  set KBXREC empty;
  ;
  KBKREC.KBABUYID[1] = KB0RM001.KBABUYID[1]; /* from buyer id*/
  KBKREC.KBABUYID[2] = KB0RM001.KBABUYID[2]; /* to buyer id*/
  KBXREC.KUCCOID = KB0RM001.KB0RMCID; /* ; set cust id*/
  KBXREC.KUMSTRID = KBWREC.KUMSTRID; /* ; set store id*/
  KBXREC.XNXCD = KBWREC.XNXCD; /* ; set dept id*/
  KBKREC.KBK-DATE = TA2REC.TA2GRGGN; /* ; current date*/
  ;
  KBKREC.KBK-TASK = "S2"; /* ; set io-pass task*/
  XPKB050(); /* call kb1000*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* successful select*/
    KB0R025(); /* ; add new accounts*/
  end
  ;
  ;
    /* detach or delete the 'from' buyer accounts*/
  ;
  set SQLCA empty;
  set KBIREC empty;
  set KBXREC empty;
  ;
  KBXREC.KBABUYID = KB0RM001.KBABUYID[1]; /* ; set from buyer id*/
  KBXREC.KUCCOID = KB0RM001.KB0RMCID; /* ; set cust id*/
  KBXREC.KUMSTRID = KBWREC.KUMSTRID; /* ; set store id*/
  KBXREC.XNXCD = KBWREC.XNXCD; /* ; set dept id*/
  KBXREC.YSBCD = "**"; /* ; select all ysb's*/
  KBIREC.KBIOSTAT = "A "; /* ; select active accts*/
  KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* ; current date*/
  ;
  KBIREC.KBIOTASK = "S5"; /* ; set io-pass task*/
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful select*/
    KB0R035(); /* ; detach/delete old accounts*/
  end
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* ; commit database changes*/
  ;
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KBWREC.KBWSUB1 = 1;
    while (KBWREC.KBWSUB1 <= 4)
      if (KB0RM001.KB0RMOPT[KBWSUB1] == "S")
        KB0RM001.KB0RMOPT[KBWSUB1] = "*"; /* ; completed option*/
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
    end
    KB0RW01.KB0RW-ACCT-MSGA = " ACCOUNTS REASSIGNED TO NEW BUYER";
    KB0RM001.VAGen_EZEMSG = KB0RW01.KB0RW-ACCT-MSG;
  end
  ;
end // end KB0R030

// DETACH OR DELETE COMPANY ACCTS
Function KB0R035()
  ;
  XPKB031(); /* ; get current date/time*/
  ;
  KBIREC.KBIOTASK = "N5"; /* fetch first row*/
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* ; no accounts found*/
    converseLib.validationFailed(136);
    KBWREC.KBWERRFL = "Y";
  else
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
      ;
      if (KBXREC.KBXXEDT == TA2REC.TA2GRGGN) /* effective dt = today*/
        KB0R038(); /* ; delete kbxrec*/
      else
        KB0R036(); /* ; detach kbxrec*/
      end
      ;
      KBIREC.KBIOTASK = "N5"; /* fetch next kbxrec*/
      XPKB018(); /* call io4330*/
    end
  end
  ;
  ;
  KBIREC.KBIOTASK = "C5"; /* close cursor*/
  XPKB018(); /* call io4330*/
  ;
  ;
end // end KB0R035

// UPDATE KBXREC (terminate)
Function KB0R036()
  ;
  ;
  set SQLCA empty;
  set KBIREC empty;
  ;
  KBXREC.KBXXXDT = TA2REC.TA2GRGGN; /* ; set termination date*/
  KBXREC.ZZZCHGDT = TA2REC.TA2GRGGN; /* ; set change date*/
  KBXREC.ZZZCHGTM = TA2REC.TA2TIMHM; /* ; set change time*/
  ;
  KBIREC.KBIOTASK = "U "; /* set io-pass task*/
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful update*/
  /* next sentence*/
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0R036";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "U ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
  ;
  ;
end // end KB0R036

// DELETE KBXREC USING TS RECORD
Function KB0R038()
  ;
  ;
  set SQLCA empty;
  set KBIREC empty;
  ;
  KBIREC.KBIOTASK = "D ";
  KBIREC.KBIODATE = KBXREC.KBXXEDT; /* effective date*/
  ;
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful delete*/
    /* next sentence*/
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0R038";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "D ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
  ;
  ;
end // end KB0R038

// SELECT KBXREC FOR UPDATE
Function KB0R040()
  ;
  set SQLCA empty;
  set KBXREC empty;
  ;
  KBXREC.KBABUYID = KB0RM001.KBABUYID[1]; /* from buyer id*/
  KBXREC.KUCCOID = KB0RW02.KUCCOID[KB0RW-SUB]; /* company id*/
  KBXREC.KUMSTRID = KB0RW02.KUMSTRID[KB0RW-SUB]; /* store id*/
  KBXREC.XNXCD = KB0RW02.XNXCD[KB0RW-SUB]; /* department id*/
  KBXREC.YSBCD = KB0RW02.YSBCD[KB0RW-SUB]; /* responsibility cd*/
  KBXREC.KBXXEDT = KB0RW02.KBXXEDT[KB0RW-SUB]; /* effective date*/
  ;
  KBIREC.KBIOTASK = "S "; /* set io-pass task*/
  ;
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; record was found*/
  /* ; next sentence*/
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0R040";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "S ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
end // end KB0R040

// ADD NEW KBXREC
Function KB0R042()
  ;
  ;
  set SQLCA empty;
  set KBIREC empty;
  ;
  KBXREC.KBABUYID = KB0RM001.KBABUYID[2];
  KBXREC.KBXXEDT = TA2REC.TA2GRGGN; /* effective date*/
  KBXREC.KBXXXDT = 999999999; /* terminate date*/
  KBXREC.ZZZSDT = TA2REC.TA2GRGGN; /* set up date*/
  KBXREC.ZZZCHGTM = TA2REC.TA2GRGGN; /* change date*/
  KBXREC.ZZZCHGTM = TA2REC.TA2TIMHM; /* change time*/
  ;
  KBIREC.KBIOTASK = "A ";
  ;
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful insert*/
    KB0RW01.KB0RW-ACCTS-REASSIGNED = KB0RW01.KB0RW-ACCTS-REASSIGNED + 1;
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0R042";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "A ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
  ;
  ;
end // end KB0R042

// ADD AUDIT REC FOR 'ADD'
Function KB0R043()
  ;
  ;
  set KB3REC empty;
  set KUZREC empty;
  ;
  if (KBWREC.KBWADDFL == "A") /* ; add mode*/
    KB3REC.KB3TRAN = "A";
  else
    KB3REC.KB3TRAN = "R"; /* ; transaction = reassign*/
  end
  ;
  KBXREC.KBABUYID = KB0RM001.KBABUYID[1]; /* from buyer*/
  KB3REC.KB3DATA = KBXREC.KBXGRP; /* ; data = kbxrec*/
  ;
  KUZREC.KUZTYPE = "A"; /* ; type = 'add'*/
  KUZREC.XXXTBLNM = "VBXREF01";
  KUZREC.KUCCOID = KB0RM001.KBABUYID[2]; /* to buyer*/
  ;
  XPKB099();
  ;
  ;
  ;
end // end KB0R043

// COUNT KBXREC (for duplicates)
Function KB0R045()
  ;
  KBWREC.KBWDUPFL = "N";
  ;
  set SQLCA empty;
  set KBIREC empty;
  ;
  KBXREC.KBABUYID = KB0RM001.KBABUYID[2]; /* ; set to buyer id*/
  ;
  KBIREC.KBIOTASK = "C "; /* ; set io-pass task*/
  KBIREC.KBIOSTAT = "A "; /* ; set io-pass stat*/
  KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* ; set io-pass date*/
  ;
  call "IO4330" (KBIREC, SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* ; successful count*/
   && KBIREC.KBIOCNT > 0)      /* ; duplicates exist*/
    KBWREC.KBWDUPFL = "Y"; /* ; set duplicate flag*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* ; unsuccessful count*/
      KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
      KBWREC.KBWXIDCO = KBXREC.KUCCOID;
      KBWREC.KBWXIDST = KBXREC.KUMSTRID;
      KBWREC.KBWXIDDP = KBXREC.XNXCD;
      ;
      set TA1REC empty; /* ; build err diag*/
      ;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1PGMNM = COMMAREA.CACURRAP;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBXREF01";
      TA1REC.TA1LOCAT[1] = "KB0R045";
      TA1REC.TA1LOCAT[2] = "IO4330";
      TA1REC.TA1LOCAT[3] = KBIREC.KBIGROUP;
      ;
      XPKB900();
    end
  end
  ;
  ;
end // end KB0R045

// EDIT KB0RM001
Function KB0R050()
  ;
  ;
  KBWREC.KUMSTRID = 0; /* ; reset w/s store id*/
  KBWREC.XNXCD = 0; /* ; reset w/s dept id*/
  ;
  if (KBWREC.KBWADDFL == "A" /* user in add mode*/
   || KBWREC.KBWATVFL == "Y") /* activating buyer in change mode*/
    KB0R057(); /* ; edit buyer id for add*/
  else
    KB0R058(); /* ; edit buyer id for change*/
  end
  ;
  if (KBWREC.KBWERRFL != "Y") /* ; no errors exist*/
    KBWREC.KBWSUB1 = 6; /* ; set array subscript*/
    while (KBWREC.KBWSUB1 > 0) /* ; until top of array*/
      if (KB0RM001.KB0RMOPT[KBWSUB1] == "*")
        KB0RM001.KB0RMOPT[KBWSUB1] = " "; /* reset options*/
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscrpt*/
    end
    ;
    KBWREC.KBWSUB1 = 6; /* ; set array subscript*/
    KBWREC.KBWCNT = 0; /* ; reset counter*/
    ;
    while (KBWREC.KBWSUB1 > 0) /* ; until top of array*/
      if (KB0RM001.KB0RMOPT[KBWSUB1] != " ") /* ; option was selected*/
        KBWREC.KBWCNT = KBWREC.KBWCNT + 1; /* ; increment counter*/
        set KB0RM001.KB0RMOPT[KBWSUB1] bold, cursor;
        KBWREC.KBWSUB2 = KBWREC.KBWSUB1; /* ; save array position*/
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscrpt*/
    end
    ;
    if (KBWREC.KBWCNT == 0) /* ; no selection*/
      set KB0RM001.KB0RMOPT[1] cursor, bold;
      KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
      converseLib.validationFailed(139); /* ; one option required*/
    else
      if (KBWREC.KBWCNT > 1) /* ; duplicate selection*/
        KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
        converseLib.validationFailed(60); /* ; one option only*/
      else
        if (KB0RM001.KB0RMOPT[KBWSUB2] != "S")
          KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
          converseLib.validationFailed(105); /* ; must use 's' to select*/
        end
      end
    end
    ;
    if (KBWREC.KBWERRFL == "N") /* ; no errors yet*/
      KBWREC.KBWSUB1 = 6; /* ; set array subscript*/
      while (KBWREC.KBWSUB1 > 0) /* ; until top of array*/
        set KB0RM001.KB0RMOPT[KBWSUB1] initialAttributes; /* reset attributes*/
        KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscrpt*/
      end
      ;
      if (KBWREC.KBWSUB2 <= 4) /* ; cmpny option selected*/
        KB0R060(); /* ; edit cmpny option*/
      else
        KB0R075(); /* ; edit misc option*/
      end
    end
  end
  ;
  ;
  ;
end // end KB0R050

// EDIT BUYER ID FOR 'ADD'
Function KB0R057()
  set SQLCA empty;
  set KBAREC empty;
  ;
  KBAREC.KBABUYID = KB0RM001.KBABUYID[2]; /* 'to' buyer id*/
  ;
  call "IO4310" ("S ", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    KB0RM001.XXXFSTNM[2] = KBAREC.XXXFSTNM;
    KB0RM001.XXXMDINT[2] = KBAREC.XXXMDINT;
    KB0RM001.XXXLSTNM[2] = KBAREC.XXXLSTNM;
    KB0RM001.XXXGNTNM[2] = KBAREC.XXXGNTNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; record not found*/
      set KB0RM001.KBABUYID[2] cursor, bold;
      KB0RM001.XXXFSTNM[2] = " ";
      KB0RM001.XXXMDINT[2] = " ";
      KB0RM001.XXXLSTNM[2] = " ";
      KB0RM001.XXXGNTNM[2] = " ";
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(143); /* invalid buyer id, return*/
    else
      KBWREC.KBWBIDKE = KBAREC.KBABUYID;
      ;
      set TA1REC empty;
      ;
      TA1REC.TA1LOCAT[1] = "KB0R057";
      TA1REC.TA1LOCAT[2] = "IO4310";
      TA1REC.TA1LOCAT[3] = "S";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBUYER01";
      TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;
      ;
      XPKB900();
    end
  end
  ;
  ;
  if (KB0RM001.KBABUYID[1] == 0) /* 'from' buyer not entered*/
    set KB0RM001.KBABUYID[1] cursor, bold;
    converseLib.validationFailed(65); /* buyer id required*/
    KBWREC.KBWERRFL = "Y";
  else
    set SQLCA empty;
    set KBAREC empty;
    ;
    KBAREC.KBABUYID = KB0RM001.KBABUYID[1]; /* 'from' buyer id*/
    ;
    call "IO4310" ("S ", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
      KB0RM001.XXXFSTNM[1] = KBAREC.XXXFSTNM;
      KB0RM001.XXXMDINT[1] = KBAREC.XXXMDINT;
      KB0RM001.XXXLSTNM[1] = KBAREC.XXXLSTNM;
      KB0RM001.XXXGNTNM[1] = KBAREC.XXXGNTNM;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* ; record not found*/
        set KB0RM001.KBABUYID[1] cursor, bold;
        KB0RM001.XXXFSTNM[1] = " ";
        KB0RM001.XXXMDINT[1] = " ";
        KB0RM001.XXXLSTNM[1] = " ";
        KB0RM001.XXXGNTNM[1] = " ";
        KBWREC.KBWERRFL = "Y";
        converseLib.validationFailed(58);
      else
        KBWREC.KBWBIDKE = KBAREC.KBABUYID;
        ;
        set TA1REC empty;
        ;
        TA1REC.TA1LOCAT[1] = "KB0R057";
        TA1REC.TA1LOCAT[2] = "IO4310";
        TA1REC.TA1LOCAT[3] = "S";
        TA1REC.TA1MAP = KBWREC.XXXMAPNM;
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VBUYER01";
        TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;
        ;
        XPKB900();
      end
    end
  end
  ;
  ;
end // end KB0R057

// EDIT BUYER ID FOR 'CHANGE'
Function KB0R058()
  ;
  set SQLCA empty;
  set KBAREC empty;
  ;
  KBAREC.KBABUYID = KB0RM001.KBABUYID[1]; /* 'from' buyer id*/
  ;
  call "IO4310" ("S ", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    KB0RM001.XXXFSTNM[1] = KBAREC.XXXFSTNM;
    KB0RM001.XXXMDINT[1] = KBAREC.XXXMDINT;
    KB0RM001.XXXLSTNM[1] = KBAREC.XXXLSTNM;
    KB0RM001.XXXGNTNM[1] = KBAREC.XXXGNTNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; record not found*/
      set KB0RM001.KBABUYID[1] cursor, bold;
      KB0RM001.XXXFSTNM[1] = " ";
      KB0RM001.XXXMDINT[1] = " ";
      KB0RM001.XXXLSTNM[1] = " ";
      KB0RM001.XXXGNTNM[1] = " ";
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(143);
    else
      KBWREC.KBWBIDKE = KBAREC.KBABUYID;
      ;
      set TA1REC empty;
      ;
      TA1REC.TA1LOCAT[1] = "KB0R057";
      TA1REC.TA1LOCAT[2] = "IO4310";
      TA1REC.TA1LOCAT[3] = "S";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBUYER01";
      TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;
      ;
      XPKB900();
    end
  end
  ;
  ;
  if (KB0RM001.KBABUYID[2] == 0) /* 'to' buyer id not entered*/
    set KB0RM001.KBABUYID[2] cursor, bold;
    converseLib.validationFailed(65); /* buyer id required*/
    KBWREC.KBWERRFL = "Y";
  else
    set SQLCA empty;
    set KBAREC empty;
    ;
    KBAREC.KBABUYID = KB0RM001.KBABUYID[2]; /* 'to' buyer id*/
    ;
    call "IO4310" ("S ", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
      KB0RM001.XXXFSTNM[2] = KBAREC.XXXFSTNM;
      KB0RM001.XXXMDINT[2] = KBAREC.XXXMDINT;
      KB0RM001.XXXLSTNM[2] = KBAREC.XXXLSTNM;
      KB0RM001.XXXGNTNM[2] = KBAREC.XXXGNTNM;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* ; record not found*/
        set KB0RM001.KBABUYID[2] cursor, bold;
        KB0RM001.XXXFSTNM[2] = " ";
        KB0RM001.XXXMDINT[2] = " ";
        KB0RM001.XXXLSTNM[2] = " ";
        KB0RM001.XXXGNTNM[2] = " ";
        KBWREC.KBWERRFL = "Y";
        converseLib.validationFailed(58);
      else
        KBWREC.KBWBIDKE = KBAREC.KBABUYID;
        ;
        set TA1REC empty;
        ;
        TA1REC.TA1LOCAT[1] = "KB0R057";
        TA1REC.TA1LOCAT[2] = "IO4310";
        TA1REC.TA1LOCAT[3] = "S";
        TA1REC.TA1MAP = KBWREC.XXXMAPNM;
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VBUYER01";
        TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;
        ;
        XPKB900();
      end
    end
  end
  ;
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors*/
    if (KBAREC.XXXSTAT != "A" /* ; 'to' buyer not active*/
     && KBWREC.KBWATVFL != "Y") /* not activating the buyer*/
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(73); /* can't reassign to an inactive buyer*/
    end
  end
  ;
  ;
end // end KB0R058

// EDIT COMPANY OPTIONS
Function KB0R060()
  ;
  ;
  if (KBWREC.KBWSUB2 == 1) /* ; all stores/depts*/
    KB0R061();
  else
    if (KBWREC.KBWSUB2 == 2) /* ; all depts for store*/
      KB0R062();
    else
      if (KBWREC.KBWSUB2 == 3) /* ; all stores for dept*/
        KB0R063();
      else
        KB0R064(); /* ; specific store/dept*/
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KB0R065(); /* ; edit dept for numerics*/
    KB0R066(); /* ; edit store for numerics*/
  end
  ;
  ;
end // end KB0R060

// ALL STORES/DEPTS FOR CUST
Function KB0R061()
  ;
  ;
  if (KB0RM001.KB0RMDID != " ") /* ; cmpny dept id entered*/
    set KB0RM001.KB0RMDID cursor, bold;
    set KB0RM001.KB0RMOPT[1] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29);
  end
  ;
  if (KB0RM001.KB0RMSID != " ") /* ; store id entered*/
    set KB0RM001.KB0RMSID cursor, bold;
    set KB0RM001.KB0RMOPT[1] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29);
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0RM001.KB0RMCID == 0) /* ; no cmpny id*/
      set KB0RM001.KB0RMCID cursor, bold;
      set KB0RM001.KB0RMOPT[1] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30);
    end
  end
  ;
  ;
end // end KB0R061

// ALL DEPTS FOR COMPANY/STORE
Function KB0R062()
  ;
  ;
  if (KB0RM001.KB0RMDID != " ") /* ; cmpny dept id entered*/
    set KB0RM001.KB0RMDID cursor, bold;
    set KB0RM001.KB0RMOPT[2] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29);
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0RM001.KB0RMSID == " ") /* ; no cmpny store id*/
      set KB0RM001.KB0RMSID cursor, bold;
      set KB0RM001.KB0RMOPT[2] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(32);
    end
    ;
    if (KB0RM001.KB0RMCID == 0) /* ; no cmpny id*/
      set KB0RM001.KB0RMCID cursor, bold;
      set KB0RM001.KB0RMOPT[2] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30);
    end
  end
  ;
  ;
end // end KB0R062

// ALL STORES FOR COMPANY/DEPT
Function KB0R063()
  ;
  ;
  if (KB0RM001.KB0RMSID != " ") /* ; cmpny store id entered*/
    set KB0RM001.KB0RMSID cursor, bold;
    set KB0RM001.KB0RMOPT[3] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29);
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0RM001.KB0RMDID == " ") /* ; no cmpny dept id*/
      set KB0RM001.KB0RMDID cursor, bold;
      set KB0RM001.KB0RMOPT[3] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(63);
    end
    ;
    if (KB0RM001.KB0RMCID == 0) /* ; no cmpny id*/
      set KB0RM001.KB0RMCID cursor, bold;
      set KB0RM001.KB0RMOPT[3] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30);
    end
  end
  ;
  ;
end // end KB0R063

// SPECIFIC COMPANY/STORE/DEPT
Function KB0R064()
  ;
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0RM001.KB0RMDID == " ") /* ; no cmpny dept id*/
      set KB0RM001.KB0RMDID cursor, bold;
      set KB0RM001.KB0RMOPT[4] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(63);
    end
    ;
    if (KB0RM001.KB0RMSID == " ") /* ; no cmpny store id*/
      set KB0RM001.KB0RMSID cursor, bold;
      set KB0RM001.KB0RMOPT[4] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(32);
    end
    ;
    if (KB0RM001.KB0RMCID == 0) /* ; no cmpny id*/
      set KB0RM001.KB0RMCID cursor, bold;
      set KB0RM001.KB0RMOPT[4] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30);
    end
  end
  ;
  ;
end // end KB0R064

// EDIT CMPNY DEPT FOR NUMERICS
Function KB0R065()
  ;
  ;
  if (KB0RM001.KB0RMDID == " ") /* ; no dept id entered*/
    KBWREC.XNXCD = -1; /* ; set for all depts*/
  else
    XP0AW01.XP0AWFLD = KB0RM001.KB0RMDID;
    ;
    XP0A001(); /* ; edit for non-numerics*/
    ;
    if (XP0AW01.XP0AWEFL == "Y") /* ; non-numeric characters*/
      set KB0RM001.KB0RMDID cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(64);
    else
      KBWREC.KBWDPTCH = KB0RM001.KB0RMDID;
      KBWREC.XNXCD = KBWREC.KBWDPTID;
    end
  end
  ;
  ;
end // end KB0R065

// EDIT CMPNY STORE FOR NUMERICS
Function KB0R066()
  ;
  ;
  if (KB0RM001.KB0RMSID == " ") /* ; no store id entered*/
    KBWREC.KUMSTRID = -1; /* ; set for all stores*/
  else
    XP0AW01.XP0AWFLD = KB0RM001.KB0RMSID;
    ;
    XP0A001(); /* ; edit for non-numerics*/
    ;
    if (XP0AW01.XP0AWEFL == "Y") /* ; non-numeric characters*/
      set KB0RM001.KB0RMSID cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(33);
    else
      KBWREC.KBWSTRCH = KB0RM001.KB0RMSID;
      KBWREC.KUMSTRID = KBWREC.KBWSTRID;
    end
  end
  ;
  ;
end // end KB0R066

// EDIT MISC OPTIONS
Function KB0R075()
  ;
  ;
  if (KB0RM001.KB0RMDID != " ") /* ; cmpny dept id entered*/
    set KB0RM001.KB0RMDID cursor, bold;
    set KB0RM001.KB0RMOPT[KBWSUB2] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29);
  end
  ;
  if (KB0RM001.KB0RMSID != " ") /* ; store id entered*/
    set KB0RM001.KB0RMSID cursor, bold;
    set KB0RM001.KB0RMOPT[KBWSUB2] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29);
  end
  ;
  if (KB0RM001.KB0RMCID != 0) /* ; cmpny id entered*/
    set KB0RM001.KB0RMCID cursor, bold;
    set KB0RM001.KB0RMOPT[KBWSUB2] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29);
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KBWREC.XNXCD = -1; /* set for all departments*/
    KBWREC.KUMSTRID = -1; /* set for all stores*/
  end
  ;
end // end KB0R075

// SEND/RECEIVE KB0RM001
Function KB0R080()
  converse KB0RM001 ;
  ;
  ;
  KBWREC.XXXMAPNM = "KB0RM001"; /* ; set map name*/
  ;
  if (KBWREC.KBWADDFL == "A" /* ; in 'add' mode*/
   || KBWREC.KBWATVFL == "Y") /* ; activating buyer in change mode*/
    set KB0RM001.KBABUYID[1] normal;
  else
    set KB0RM001.KBABUYID[2] normal;
  end
  ;
  ;
  set KB0RM001.KB0RMOPT[1] normal;
  set KB0RM001.KB0RMOPT[2] normal;
  set KB0RM001.KB0RMOPT[3] normal;
  set KB0RM001.KB0RMOPT[4] normal;
  set KB0RM001.KB0RMOPT[5] normal;
  set KB0RM001.KB0RMOPT[6] normal;
  ;
  set KB0RM001.KB0RMCID normal;
  set KB0RM001.KB0RMSID normal;
  set KB0RM001.KB0RMDID normal;
  ;
  ;
end // end KB0R080

// MOVE W/S TO KB0RM001
Function KB0R090()
  ;
  set KB0RM001 initial; /* initialize screen*/
  ;
  KB0RM001.KB0RMDTE = VGVar.currentShortGregorianDate;
  ;
  if (KBWREC.KBWADDFL == "A") /* ; in 'add' mode*/
    KB0RM001.KB0RM-PF18 = " "; /* pf18 invalid for add mode*/
    KB0RM001.KBABUYID[2] = KBWREC.KBABUYID;
    KB0R091(); /* ; move fields for 'add' mode*/
  else
    if (KBWREC.KBWATVFL == "Y") /* ; activating buyer in change mode*/
      KB0RM001.KB0RM-PF18 = "18:DETACH"; /* pf18*/
      KB0RM001.KBABUYID[2] = KBWREC.KBABUYID;
      KB0R091(); /* ; move fields for 'add' mode*/
    else
      KB0RM001.KB0RM-PF18 = "18:DETACH"; /* pf18*/
      KB0RM001.KBABUYID[1] = KBWREC.KBABUYID;
      KB0R092(); /* ; move fields for 'change' mode*/
    end
  end
  ;
  ;
end // end KB0R090

// MOVE FIELDS FOR ADD MODE
Function KB0R091()
  ;
  if (KBWREC.KBWBFND == "N") /* ; invalid To Buyer Id*/
    set KB0RM001.KBABUYID[2] bold;
    set KB0RM001.KBABUYID[1] normal, cursor;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(143); /* invalid buyer, return to prev scrn*/
  else
    KB0RM001.XXXFSTNM[2] = KBAREC.XXXFSTNM;
    KB0RM001.XXXMDINT[2] = KBAREC.XXXMDINT;
    KB0RM001.XXXLSTNM[2] = KBAREC.XXXLSTNM;
    KB0RM001.XXXGNTNM[2] = KBAREC.XXXGNTNM;
    set KB0RM001.KBABUYID[2] initialAttributes;
    set KB0RM001.KBABUYID[1] normal, cursor;
    converseLib.validationFailed(68); /* enter buyer id*/
  end
  ;
  ;
end // end KB0R091

// MOVE FIELD FOR CHANGE MODE
Function KB0R092()
  ;
  ;
  if (KBWREC.KBWBFND == "N") /* ; invalid From Buyer Id*/
    set KB0RM001.KBABUYID[1] bold;
    set KB0RM001.KBABUYID[2] normal, cursor;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(143); /* invalid buyer, return to prev scrn*/
  else
    KB0RM001.XXXFSTNM[1] = KBAREC.XXXFSTNM;
    KB0RM001.XXXMDINT[1] = KBAREC.XXXMDINT;
    KB0RM001.XXXLSTNM[1] = KBAREC.XXXLSTNM;
    KB0RM001.XXXGNTNM[1] = KBAREC.XXXGNTNM;
    set KB0RM001.KBABUYID[1] initialAttributes;
    set KB0RM001.KBABUYID[2] normal, cursor;
    converseLib.validationFailed(68); /* enter buyer id*/
  end
  ;
  ;
end // end KB0R092

// LIST ALL ACTIVE ACCTS
Function KB0R100()
  ;
  ;
  KB0R105(); /* ; initialize*/
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KBWREC.KBWRETNF = "N"; /* ; set return flag*/
    while (KBWREC.KBWRETNF == "N") /* ; until return flag = y*/
      KB0R125(); /* ; mainline*/
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KB0RM001.KB0RMOPT[6] = "*"; /* completed see list option*/
    if (KB0RW01.KB0RW-ACCTS-REASSIGNED == 0)
      KB0RM001.VAGen_EZEMSG = " ";
    else
      KB0RW01.KB0RW-ACCT-MSGA = " ACCOUNTS REASSIGNED TO NEW BUYER";
      KB0RM001.VAGen_EZEMSG = KB0RW01.KB0RW-ACCT-MSG;
    end
  end
  ;
end // end KB0R100

// INITIALIZE - LIST ACCTS
Function KB0R105()
  ;
  set KB0RW02 empty; /* init temp storage rec*/
  ;
  KB0R140(); /* load temp storage*/
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KB0RW01.KB0RW-CURR-PAGE = 1; /* init current page*/
    KB0R135(); /* move temp storage to kb0rM002*/
    if (KB0RW01.KB0RW-COUNT > 0)
      converseLib.validationFailed(156); /* error attachments exist*/
    end
  end
  ;
  ;
end // end KB0R105

// EDIT KB0DM002
Function KB0R110()
  ;
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  KB0RW01.KB0RW-SUB = 11;
                                  /* edit select byte*/
  while (KB0RW01.KB0RW-SUB != 0)
    if (KB0RM002.KB0RMSEL[KB0RW-SUB] != " "
     && KB0RM002.KB0RMSEL[KB0RW-SUB] != "S")
      converseLib.validationFailed(105); /* must enter 's' to select*/
      KBWREC.KBWERRFL = "Y";
      set KB0RM002.KB0RMSEL[KB0RW-SUB] cursor, bold;
    end
    KB0RW01.KB0RW-SUB = KB0RW01.KB0RW-SUB - 1;
  end
  ;
  if (converseVar.eventKey is pf7)
    if (KB0RM002.KBWPAGE == 1)
      converseLib.validationFailed(8); /* already at top*/
      set KB0RM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0RM002.KBWPAGE != KB0RW01.KB0RW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0RM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end
  ;
  if (converseVar.eventKey is pf8)
    if (KB0RM002.KBWPAGE == KB0RM002.KBWTOTPG)
      converseLib.validationFailed(9); /* already at bottom*/
      set KB0RM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0RM002.KBWPAGE != KB0RW01.KB0RW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0RM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0RM002.KBWPAGE == 0
     || KB0RM002.KBWPAGE > KB0RM002.KBWTOTPG)
      converseLib.validationFailed(48); /* invalid page number*/
      set KB0RM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KB0R115(); /* check selections & update ts*/
  end
  ;
  ;
end // end KB0R110

// CHECK FOR CHANAGES & UPDATE TS
Function KB0R115()
  ;
  ;
  KB0RW01.KB0RW-CHANGE-FL = "N";
  ;
  KB0RW01.KB0RW-SUB = 1; /* ; reset map subscript*/
  while (KB0RW01.KB0RW-SUB <= 11) /* ; until end of map*/
    ;
        /* if select byte changes move it to temp storage record*/
    ;
    if (KB0RM002.KB0RMSEL[KB0RW-SUB] != KB0RW02.KB0RW-SELECT[KB0RW-SUB])
      KB0RW02.KB0RW-SELECT[KB0RW-SUB] = KB0RM002.KB0RMSEL[KB0RW-SUB];
      KB0RW01.KB0RW-CHANGE-FL = "Y";
    end
    KB0RW01.KB0RW-SUB = KB0RW01.KB0RW-SUB + 1;
  end
  ;
   /* if any changes were made, update the temp storage page*/
  ;
  if (KB0RW01.KB0RW-CHANGE-FL == "Y")
    KB0R220(); /* update temp storage page*/
  end
end // end KB0R115

// BUILD NEW PAGE FROM TS
Function KB0R120()
  ;
  /* determine new page number*/
  ;
  if (converseVar.eventKey is pf7)
    KB0RW01.KB0RW-CURR-PAGE = KB0RW01.KB0RW-CURR-PAGE - 1;
  else
    if (converseVar.eventKey is pf8)
      KB0RW01.KB0RW-CURR-PAGE = KB0RW01.KB0RW-CURR-PAGE + 1;
    else
      KB0RW01.KB0RW-CURR-PAGE = KB0RM002.KBWPAGE;
    end
  end
  ;
  KB0R200(); /* read temporary storage*/
  ;
  KB0R135(); /* move temp storage to map*/
  ;
end // end KB0R120

// MAINLINE - LIST ACCTS
Function KB0R125()
  ;
  KB0R180(); /* ; converse KB0RM002*/
  ;
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KB0R230(); /* ; purge temp storage*/
    KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is enter)
  /* next sentence*/
    else
      converseLib.validationFailed(7); /* invalid pfkey*/
      KBWREC.KBWERRFL = "Y";
    end
  end
  ;
  ;
  if (KBWREC.KBWERRFL == "N" /* no errors*/
   && KBWREC.KBWRETNF == "N") /* ; don't return yet*/
    ;
    KB0R110(); /* ; edit kb0rM002*/
    ;
    if (KBWREC.KBWERRFL == "N") /* still no errors*/
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || KB0RM002.KBWPAGE != KB0RW01.KB0RW-CURR-PAGE)
        KB0R120(); /* build new page*/
      else
        KB0R130(); /* reassign selected accounts*/
        KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
      end
    end
  end
  ;
end // end KB0R125

// REASSIGN SELECTED ACCTS
Function KB0R130()
  ;
  XPKB031(); /* ; get current date/time*/
  ;
  KB0RW01.KB0RW-CURR-PAGE = 1; /* ; set temp storage page*/
  ;
  /* process all temporary storage records*/
  ;
  while (KB0RW01.KB0RW-CURR-PAGE <= KB0RW01.KB0RW-MAX-PAGE)
    ;
    KB0R200(); /* ; read temp storage page*/
    KB0RW01.KB0RW-SUB = 1; /* ; reset account subscript*/
    ;
    while (KB0RW01.KB0RW-SUB <= 11) /* ; until page processed*/
      ;
      if (KB0RW02.KB0RW-SELECT[KB0RW-SUB] == "S") /* selected to reassign*/
        KB0R040(); /* ; select kbxrec*/
        if (KB0RW02.KB0RW-ERROR-ATTACH-FL[KB0RW-SUB] == "Y") /* error acct*/
          KB0R038(); /* delete kbxrec*/
        else
          KB0R036(); /* ; detach kbxrec*/
        end
        KB0R045(); /* ; check to see if rec already exists*/
        if (KBWREC.KBWDUPFL == "N") /**/
          KB0R042(); /* ; add new kbxrec*/
          KB0R043(); /* ; write audit for add*/
        end
      end
      KB0RW01.KB0RW-SUB = KB0RW01.KB0RW-SUB + 1;
    end
    KB0RW01.KB0RW-CURR-PAGE = KB0RW01.KB0RW-CURR-PAGE + 1;
  end
  ;
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* ; commit database changes*/
  ;
  KB0R230(); /* ; purge temporary storage*/
  ;
  ;
  ;
end // end KB0R130

// MOVE TEMP STORAGE TO MAP
Function KB0R135()
  ;
  set KB0RM002 initial; /* ; initialize screen*/
  ;
  KB0RM002.KB0RMDTE = VGVar.currentShortGregorianDate;
  ;
  KB0RM002.KBABUYID[1] = KB0RM001.KBABUYID[1];
  KB0RM002.XXXFSTNM[1] = KB0RM001.XXXFSTNM[1];
  KB0RM002.XXXMDINT[1] = KB0RM001.XXXMDINT[1];
  KB0RM002.XXXLSTNM[1] = KB0RM001.XXXLSTNM[1];
  KB0RM002.XXXGNTNM[1] = KB0RM001.XXXGNTNM[1];
  ;
  KB0RM002.KBABUYID[2] = KB0RM001.KBABUYID[2];
  KB0RM002.XXXFSTNM[2] = KB0RM001.XXXFSTNM[2];
  KB0RM002.XXXMDINT[2] = KB0RM001.XXXMDINT[2];
  KB0RM002.XXXLSTNM[2] = KB0RM001.XXXLSTNM[2];
  KB0RM002.XXXGNTNM[2] = KB0RM001.XXXGNTNM[2];
  ;
  KB0R200(); /* ; read temp storage page*/
  ;
  KB0RW01.KB0RW-SUB = 1;
  while (KB0RW-SUB <= 11) /* move accounts from temp storage to*/
                                   /* map*/
    if (KB0RW02.KUCCOID[KB0RW-SUB] > 0)
      KB0RM002.KB0RMSEL[KB0RW-SUB] = KB0RW02.KB0RW-SELECT[KB0RW-SUB];
      KB0RM002.SM4REPID[KB0RW-SUB] = KB0RW02.SM4REPID[KB0RW-SUB];
      KB0RM002.YSBCD[KB0RW-SUB] = KB0RW02.YSBCD[KB0RW-SUB];
      KB0RM002.YSBABRV[KB0RW-SUB] = KB0RW02.YSBABRV[KB0RW-SUB];
      KB0RM002.KUCCOID[KB0RW-SUB] = KB0RW02.KUCCOID[KB0RW-SUB];
      KB0RM002.KUMSTRID[KB0RW-SUB] = KB0RW02.KUMSTRID[KB0RW-SUB];
      KB0RM002.XNXCD[KB0RW-SUB] = KB0RW02.XNXCD[KB0RW-SUB];
      KB0RM002.KUMSTRNM[KB0RW-SUB] = KB0RW02.KUMSTRNM[KB0RW-SUB];
      KB0RM002.KBXXEDT[KB0RW-SUB] = KB0RW02.KBXXEDT[KB0RW-SUB];
      ;
      if (KB0RW01.KB0RW-SUB == 1) /* ; first line on map*/
        set KB0RM002.KB0RMSEL[KB0RW-SUB] cursor, normal;
      else
        set KB0RM002.KB0RMSEL[KB0RW-SUB] normal;
      end
      ;
        /* if an account is attached and reassigned the same day, the*/
        /* account will be deleted rather than terminated.  These*/
        /* accounts are flagged as error attachments.*/
      ;
      if (KB0RW02.KB0RW-ERROR-ATTACH-FL[KB0RW-SUB] == "Y")
        KB0RM-ERROR-ATTACH-FL[KB0RW-SUB] = "*";
      else
        KB0RM-ERROR-ATTACH-FL[KB0RW-SUB] = " ";
      end
      ;
    end
    ;
    KB0RW01.KB0RW-SUB = KB0RW01.KB0RW-SUB + 1;
  end
  ;
  KB0RM002.KBWPAGE = KB0RW01.KB0RW-CURR-PAGE;
  KB0RM002.KBWTOTPG = KB0RW01.KB0RW-MAX-PAGE;
end // end KB0R135

// load temp stor for selection
Function KB0R140()
  ;
  ;
  KB0RW01.KB0RW-SUB = 0; /* ; init account subscript*/
  KB0RW01.KB0RW-COUNT = 0; /* ; counter used to count*/
                                          /* ; error attachments*/
  set KBXREC empty;
  set KBKREC empty;
  set KUGREC empty;
  ;
   /* set up parameters for pass record*/
  ;
  KBKREC.KBK-TASK = "S1"; /* ; set io-pass task*/
  KBKREC.KBK-STATUS = "A"; /* ; active accounts*/
  KBKREC.KBK-DATE = TA2REC.TA2GRGGN; /* ; current date*/
  ;
  KBXREC.KBABUYID = KB0RM001.KBABUYID[1]; /* ; set buyer id*/
  ;
  KUGREC.SM4REPID = -1; /* select all reps*/
  KBXREC.YSBCD = "**"; /* select all ysb's*/
  KBXREC.KUCCOID = -1; /* select all companies*/
  KBXREC.KUMSTRID = -1; /* select all stores*/
  KBXREC.XNXCD = -1; /* select all departments*/
  ;
  XPKB050(); /* call kb1000*/
  ;
  /* fetch first row*/
  ;
  KBKREC.KBK-TASK = "N1"; /* ; set io-pass task*/
  XPKB050(); /* ; call kb1000*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* ; no accounts found*/
    converseLib.validationFailed(136);
    KBWREC.KBWERRFL = "Y";
    set KB0RM001.KBABUYID[1] cursor;
  else
    ;
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful database call*/
      KB0R150(); /* ; move to temp storage*/
      KBKREC.KBK-TASK = "N1"; /* ; fetch next row*/
      XPKB050(); /* ; call kb1000*/
    end
    if (KB0RW01.KB0RW-SUB > 0)
      KB0R210(); /* ; write partial page to ts*/
    end
  end
  ;
  /* close cursor*/
  ;
  KBKREC.KBK-TASK = "C1"; /* ; close cursor*/
  XPKB050(); /* ; call kb1000*/
  ;
  ;
  ;
end // end KB0R140

// MOVE ACCOUNT TO TEMP STORAGE
Function KB0R150()
  ;
  ;
  KB0RW01.KB0RW-SUB = KB0RW01.KB0RW-SUB + 1;
  KB0RW02.KUCCOID[KB0RW-SUB] = KBXREC.KUCCOID;
  KB0RW02.KUMSTRID[KB0RW-SUB] = KBXREC.KUMSTRID;
  KB0RW02.XNXCD[KB0RW-SUB] = KBXREC.XNXCD;
  KB0RW02.YSBCD[KB0RW-SUB] = KBXREC.YSBCD;
  KB0RW02.KBXXEDT[KB0RW-SUB] = KBXREC.KBXXEDT;
  KB0RW02.SM4REPID[KB0RW-SUB] = KUGREC.SM4REPID;
  ;
  if (KBXREC.YSBCD in YSBTBL.YSBCD)
    KB0RW02.YSBABRV[KB0RW-SUB] = YSBTBL.YSBABRV[sysVar.arrayIndex];
  else
    KB0RW02.YSBABRV[KB0RW-SUB] = "  ";
  end
  ;
  if (KBXREC.KBXXEDT == TA2REC.TA2GRGGN) /* effective date = current date*/
    KB0RW02.KB0RW-ERROR-ATTACH-FL[KB0RW-SUB] = "Y";
    KB0RW01.KB0RW-COUNT = KB0RW01.KB0RW-COUNT + 1;
  else
    KB0RW02.KB0RW-ERROR-ATTACH-FL[KB0RW-SUB] = "N";
  end
  ;
  KB0R160(); /* ; get store name*/
  ;
  if (KB0RW01.KB0RW-SUB == 11) /* ; page is full*/
    KB0R210(); /* ; add page to temp storage*/
  end
  ;
end // end KB0R150

// GET STORE NAME
Function KB0R160()
  ;
  ;
  set KUMREC empty;
  ;
  KUMREC.KUCCOID = KBXREC.KUCCOID; /* ; set cust id*/
  KUMREC.KUMSTRID = KBXREC.KUMSTRID; /* ; set store id*/
  ;
  XPKB020(); /* ; call io0340 - 's '*/
  ;
  if (KBWREC.KBWSFND == "Y") /* ; store rec found*/
    KB0RW02.KUMSTRNM[KB0RW-SUB] = KUMREC.KUMSTRNM;
  end
  ;
  ;
end // end KB0R160

// SEND/RECEIVE LIST ACCTS SCREEN
Function KB0R180()
  ;
  ;
  converse KB0RM002 ;
  ;
  KBWREC.XXXMAPNM = "KB0RM002"; /* save map name*/
  ;
  set KB0RM002.KBWPAGE cursor, normal;
  ;
  KBWREC.KBWSUB1 = 11; /* ; set map subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of map*/
    ;
    if (KB0RM002.KUCCOID[KBWSUB1] != 0  /* ; row has cust id*/
     || KB0RM002.KUMSTRID[KBWSUB1] != 0 /* ; row has store id*/
     || KB0RM002.XNXCD[KBWSUB1] != 0    /* ; row has dept id*/
     || KB0RM002.KBXXEDT[KBWSUB1] != 0) /* ; row has eff dt*/
      set KB0RM002.KB0RMSEL[KBWSUB1] cursor, normal;
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0R180

// READ TEMP STORAGE
Function KB0R200()
  ;
  set KB0RW02 empty;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KB0R"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = KB0RW01.KB0RW-CURR-PAGE; /* current page*/
  KB0RW02.KB0RW-TS-LENGTH = 706; /* length of record*/
  ;
  call "TA0050" (KB0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0R200";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0RW02.KB0RW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE READING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
    ;
  end
end // end KB0R200

// ADD TEMP STORAGE
Function KB0R210()
  ;
  set TA5REC empty;
  TA5REC.TA5APPID = "KB0R"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  KB0RW02.KB0RW-TS-LENGTH = 706; /* length of record*/
  ;
  call "TA0050" (KB0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    KB0RW01.KB0RW-MAX-PAGE = TA5REC.TA5TSQIX; /* max page number*/
    set KB0RW02 empty; /* reinitialize page*/
    KB0RW01.KB0RW-SUB = 0; /* reinitialize line subscript*/
  else
    TA1REC.TA1LOCAT[1] = "KB0R210";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0RW02.KB0RW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE ADDING TO TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
  end
end // end KB0R210

// UPDATE TEMP STORAGE
Function KB0R220()
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KB0R"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = KB0RW01.KB0RW-CURR-PAGE; /* current page*/
  KB0RW02.KB0RW-TS-LENGTH = 706; /* length of record*/
  ;
  call "TA0050" (KB0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0R220";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0RW02.KB0RW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE UPDATING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
    ;
  end
end // end KB0R220

// PURGE TEMP STORAGE
Function KB0R230()
  set TA5REC empty;
  TA5REC.TA5APPID = "KB0R"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (KB0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
   /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0R230";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0RW02.KB0RW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE PURGING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
  end
end // end KB0R230

//*** RECORD=KB0RW01 ****
// Working storage used by KB0R.
// ***********************
Record KB0RW01 type basicRecord
  5 KB0RW-GROUP1 KB0RW-GROUP1 ; 
    10 KB0RW-MAX-PAGE KB0RW-MAX-PAGE ; 
    10 KB0RW-CURR-PAGE KB0RW-CURR-PAGE ; 
    10 KB0RW-SUB KB0RW-SUB ; 
    10 KB0RW-COUNT KB0RW-COUNT ; 
    10 KB0RW-CHANGE-FL KB0RW-CHANGE-FL ; 
    10 KB0RW-ACCT-MSG KB0RW-ACCT-MSG ; 
      15 KB0RW-ACCTS-REASSIGNED KB0RW-ACCTS-REASSIGNED ; 
      15 KB0RW-ACCT-MSGA KB0RW-ACCT-MSGA ; 
end // end KB0RW01

//*** RECORD=KB0RW02 ****
// Temporary storage record used to hold the accounts shown for
// reassigning.
// 
// CSP Record:  KB0RW02
// Read in   :  KB0R200
// Added in  :  KB0R210
// Updated in:  KB0R220
// Purged in :  KB0R230
// ***********************
Record KB0RW02 type basicRecord
  5 KB0RW-GROUP2 KB0RW-GROUP2 ; 
    10 KB0RW-TS-LENGTH KB0RW-TS-LENGTH ; 
    10 KB0RW-TS-ROW KB0RW-TS-ROW [13] ; 
      15 KB0RW-SELECT KB0RW-SELECT ; 
      15 SM4REPID SM4REPID ; 
      15 YSBCD YSBCD ; 
      15 YSBABRV YSBABRV ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 KUMSTRNM KUMSTRNM ; 
      15 KBXXEDT KBXXEDT ; 
      15 KB0RW-ERROR-ATTACH-FL KB0RW-ERROR-ATTACH-FL ; 
end // end KB0RW02

// account message
DataItem KB0RW-ACCT-MSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// account message a
DataItem KB0RW-ACCT-MSGA char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of accounts reassigned
DataItem KB0RW-ACCTS-REASSIGNED num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change flag
DataItem KB0RW-CHANGE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0RW-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page number
DataItem KB0RW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error attachment flag
DataItem KB0RW-ERROR-ATTACH-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for KB0RW01
DataItem KB0RW-GROUP1 char(90)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kb0rw02 group level
DataItem KB0RW-GROUP2 char(706)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maximum page number
DataItem KB0RW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select indicator
DataItem KB0RW-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// account line subscript
DataItem KB0RW-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage length
DataItem KB0RW-TS-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage row
DataItem KB0RW-TS-ROW char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

