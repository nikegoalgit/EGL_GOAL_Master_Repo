package kb0d;

import corpcom2.XP0AW01;
import corpcom3.XP0A001;
import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB018;
import corpcom3.XPKB020;
import corpcom3.XPKB031;
import corpcom3.XPKB050;
import corpcom3.XPKB099;
import corpcom3.XPKB900;
import corpcom3.XPKB990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.UT2REC;
import corpx1.XP0AT01;
import corpx2.XNXCD;
import corpy2.YSBABRV;
import corpy2.YSBCD;
import corpy2.YSBTBL;
import kb.common.*;
import kl.common.KIZTBL;
import ku.common.KUCCOID;
import ku.common.KUEREC;
import ku.common.KUGREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KUMSTRNM;
import ku.common.KUNREC;
import ku.common.KUZREC;
import sm.common.SM4REC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0D ****
// This application allows the user to detach existing active
// buyer/customer cross-references using several methods.
// 
// All accounts for an entered company ID
// All accounts for the entered comnpany and store ID
// All accounts for the entered company and department ID
// A specific company, store, and department
// By selecting currently assigned accounts from display.
// 
// For the first four methods:
// The cross-reference is found that matches the criteria that
// is entered.  Any cross references that are active are
// updated with a termination date of the system date.
// Each account detached is tallied and the total is displayed
// after the function is complete.
// If the account being terminated was also attached today,
// the account will be deleted rather than terminated.  This
// account is considered an error.
// 
// If the "See List" option is chosen, all the active accounts
// are displayed on the second screen and the user may select
// these accounts for detaching.  Again, the number that are
// detached are tallied and the total displayed after the
// function is complete.
// 
// 10/08/91  jjohn2  Change department to 4 character. Change
//                   done at same time as Database changes.
// 
// 02/01/93  tmorri  This application has been modified as
//                   part of the Buyer System Enhancement
//                   project.  The main objective of this
//                   project is to give Nike Sales Reps and
//                   Sales Admin. a way to associate buyers to
//                   sales reps via the sales responsibility
//                   code.  (See specs for details relating to
//                   this specific application).
// 
// 02/19/93  tmorri  Changed literal on KB0DM001.
// 
// 02/26/93  tmorri  Added confirmation message for ALL ACCOUNT
//                   option.  (KB0D005)
// *********************
Program KB0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0DW01 KB0DW01; // record
  KB0DW02 KB0DW02; // record
  KB3REC KB3REC; // record
  KBAREC KBAREC; // record
  KBIREC KBIREC; // record
  KBKREC KBKREC; // record
  KBWREC KBWREC; // record
  KBXREC KBXREC; // record
  KUEREC KUEREC; // record
  KUGREC KUGREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUZREC KUZREC; // record
  SM4REC SM4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XP0AW01 XP0AW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL; // table
  use YSBTBL; // table
  use XP0AT01; // table
  use KB0DM.KB0DM001,  // forms
      KB0DM.KB0DM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0D001: KB0D001();


    goto KB0D005;


    KB0D005: KB0D005();


    goto KB0D005;


  end // end main
end // end KB0D

// DETACH INITIALIZE
Function KB0D001()


  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/

  XPKB031(); /* ; get current date*/
  KB0D230(); /* ; purge temp storage*/
  set KB0DM001 initial; /* ; init maps*/
  set KB0DM002 initial;

  if (COMMAREA.CAFROMAP == "KB0C" /* ; buyer update*/
   || COMMAREA.CAFROMAP == "KB0T" /* ; attach accounts*/
   || COMMAREA.CAFROMAP == "KB0R" /* ; reassign accounts*/
   || COMMAREA.CAFROMAP == "KB0N") /* ; update notes*/
    XPKB002(); /* ; Initialize KBWREC*/
    XPKB010(); /* ; Read KBAREC*/
    KB0D090(); /* ; move W/S to screen*/
  else
    set KBWREC empty; /* ; initialize KBWREC*/

    COMMAREA.CATOAP = "KB0M"; /* ; xfer to menu*/
    COMMAREA.CAUSERA = KBWREC.KBWGROUP; /* ; initialize commarea*/

    XSEXIT();
    exit program;
  end


end // end KB0D001

// DETACH MAINLINE
Function KB0D005()
  KB0D080(); /* ; send/receive KB0DM001*/

  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  set KB0DW01 empty;
  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* save prev pfkey*/
  KBWREC.KBWPFKEY[1] = " "; /* reset current pfkey*/

  KB0D010(); /* ; edit pfkeys*/

  if (KBWREC.KBWBFND == "Y") /* ; valid buyer id*/
    if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
      KB0D050(); /* ; edit KB0DM001*/
      if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
        KB0D055(); /* ; check for multiple ysb's*/
        if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
          if (KB0DM001.KB0DMOPT[6] != " ")
            KB0D100(); /* ; list active accts*/
          else
            if (KB0DM001.KB0DMOPT[5] != " ")
              KBWREC.KBWPFKEY[1] = "ENT"; /* current pfkey*/
              if (KBWREC.KBWPFKEY[2] != "ENT") /* not confirmed*/
                KBWREC.KBWERRFL = "Y";
                converseLib.validationFailed(186); /* confirm detach all*/
              else
                KB0D020(); /* ; detach all accts*/
                KBWREC.KBWPFKEY[1] = " "; /* reset current pfkey*/
                KBWREC.KBWPFKEY[2] = " "; /* reset prev pfkey*/
              end
            else
              if (KB0DM001.KB0DMCID != 0)
                KB0D030(); /* ; detach cmpny accts*/
              end
            end
          end

          KB0D035(); /* get repname and ysbdesc*/

        end
      end
    end
  else
    KB0D090(); /* move w/s to screen*/
  end



end // end KB0D005

// EDIT PFKEYS
Function KB0D010()
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KB0D230(); /* ; purge temp storage*/
    COMMAREA.CATOAP = "KB0C";
    COMMAREA.CAUSERA = KBWREC.KBWGROUP;

    XSEXIT();

    KB0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    COMMAREA.CAUSERA = " ";
  else
    if (converseVar.eventKey is pf4) /* ; menu requested*/
      KB0D230(); /* ; purge temp storage*/
      COMMAREA.CATOAP = "KB0M";

      XSEXIT();

      KB0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CAMSG = " ";
    else
      if (converseVar.eventKey is pf16) /* ; comments requested*/
        KB0D230(); /* ; purge temp storage*/
        COMMAREA.CATOAP = "KB0N";
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;

        XSEXIT();

        KB0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
        COMMAREA.CAUSERA = " ";
      else
        if (converseVar.eventKey is pf17) /* ; attach requested*/
          KB0D230(); /* ; purge temp storage*/
          COMMAREA.CATOAP = "KB0T";
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;

          XSEXIT();

          KB0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CAMSG = " ";
          COMMAREA.CAUSERA = " ";
        else
          if (converseVar.eventKey is pf19) /* ; reassign requested*/
            KB0D230(); /* ; purge temp storage*/
            COMMAREA.CATOAP = "KB0R";
            COMMAREA.CAUSERA = KBWREC.KBWGROUP;

            XSEXIT();

            KB0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
            COMMAREA.CAMSG = " ";
            COMMAREA.CAUSERA = " ";
          else
            if (converseVar.eventKey is enter)
                /* next sentence*/

            else
              KBWREC.KBWERRFL = "Y"; /* set error flag*/
              converseLib.validationFailed(7); /* invalid pf key*/
            end
          end
        end
      end
    end
  end



end // end KB0D010

// PROCESS ALL ACTIVE ACCTS
Function KB0D020()

  set KBKREC empty;
  set KBXREC empty;
  set KUGREC empty;

    /* set up parameters for pass record*/

  KBKREC.KBK-TASK = "S1"; /* ; set io-pass task*/
  KBKREC.KBK-STATUS = "A"; /* ; set io-pass stat*/
  KBKREC.KBK-DATE = TA2REC.TA2GRGGN; /* ; current date*/

  KBXREC.KBABUYID = KB0DM001.KBABUYID; /* ; set buyer id*/

  if (KB0DM001.SM4REPID == 0)
    KUGREC.SM4REPID = -1; /* select all reps*/
  else
    KUGREC.SM4REPID = KB0DM001.SM4REPID; /* set rep id*/
  end

  if (KB0DM001.YSBCD == "*"
   || KB0DM001.YSBCD == " ")
    KBXREC.YSBCD = "**"; /* ; select all ysbs*/
  else
    KBXREC.YSBCD = KB0DM001.YSBCD; /* ; set ysb*/
  end

  KBXREC.KUCCOID = -1; /* ; set cust id*/
  KBXREC.KUMSTRID = -1; /* ; set store id*/
  KBXREC.XNXCD = -1; /* ; set dept id*/

  XPKB050(); /* ; call kb1000*/
  KB0D025(); /* ; detach or delete accounts*/

   /* close cursor*/

  KBKREC.KBK-TASK = "C1"; /* ; set io-pass task*/
  XPKB050(); /* ; call kb1000*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* ; commit database changes*/

  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KB0DM001.KB0DMOPT[5] = "*"; /* completed option*/
    KB0DW01.KB0DW-ACCT-MSGA = " ACCOUNTS DETACHED";
    KB0DW01.KB0DW-ACCT-MSGB = " ACCOUNTS DELETED";
    KB0DM001.VAGen_EZEMSG = KB0DW01.KB0DW-ACCT-MSG;
  end


end // end KB0D020

// DETACH OR DELETE ACCOUNTS
Function KB0D025()

  XPKB031(); /* ; get current date/time*/

   /* fetch first kbxrec*/

  KBKREC.KBK-TASK = "N1"; /* ; set io-pass task*/
  XPKB050(); /* ; call kb1000*/

  if (SQLCA.VAGen_SQLCODE == 100) /* ; no accounts found*/
    converseLib.validationFailed(136);
    KBWREC.KBWERRFL = "Y";
    set KB0DM001.SM4REPID cursor;
  else
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/

      if (KBXREC.KBXXEDT == TA2REC.TA2GRGGN) /* effective dt = today*/
        KB0D034(); /* ; delete kbxrec*/
        KB0D039(); /* ; write audit for delete*/
      else
        KB0D036(); /* ; detach kbxrec*/
        KB0D037(); /* ; write audit for update*/
      end

      KBKREC.KBK-TASK = "N1"; /* fetch next kbxrec*/
      XPKB050(); /* call kb1000*/
    end
  end


end // end KB0D025

// SELECT COMPANY ACCTS
Function KB0D030()

  set KBKREC empty;
  set KBXREC empty;
  set KUGREC empty;

  KBKREC.KBK-TASK = "S1"; /* ; set io-pass task*/
  KBKREC.KBK-STATUS = "A"; /* ; set io-pass stat*/
  KBKREC.KBK-DATE = TA2REC.TA2GRGGN; /* ; current date*/

  KBXREC.KBABUYID = KB0DM001.KBABUYID; /* ; set buyer id*/
  KBXREC.KUCCOID = KB0DM001.KB0DMCID; /* ; set cust id*/
  KBXREC.KUMSTRID = KBWREC.KUMSTRID; /* ; set store id*/
  KBXREC.XNXCD = KBWREC.XNXCD; /* ; set dept id*/

  if (KB0DM001.SM4REPID == 0)
    KUGREC.SM4REPID = -1; /* select all reps*/
  else
    KUGREC.SM4REPID = KB0DM001.SM4REPID; /* set rep id*/
  end

  if (KB0DM001.YSBCD == "*"
   || KB0DM001.YSBCD == " ")
    KBXREC.YSBCD = "**"; /* select all ysb's*/
  else
    KBXREC.YSBCD = KB0DM001.YSBCD; /* set ysb code*/
  end

  XPKB050(); /* call kb1000*/
  KB0D025(); /* ; detach or delete accounts*/

  /* close cursor*/

  KBKREC.KBK-TASK = "C1"; /* ; set io-pass task*/
  XPKB050(); /* ; call kb1000*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* ; commit database changes*/


  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KBWREC.KBWSUB1 = 1;
    while (KBWREC.KBWSUB1 <= 4)
      if (KB0DM001.KB0DMOPT[KBWSUB1] == "S")
        KB0DM001.KB0DMOPT[KBWSUB1] = "*"; /* completed option*/
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
    end
    KB0DW01.KB0DW-ACCT-MSGA = " ACCOUNTS DETACHED";
    KB0DW01.KB0DW-ACCT-MSGB = " ACCOUNTS DELETED";
    KB0DM001.VAGen_EZEMSG = KB0DW01.KB0DW-ACCT-MSG;
  end


end // end KB0D030

// DELETE KBXREC
Function KB0D034()

   /* This process deletes the row that was previously read into KBXREC*/

  set SQLCA empty;
  set KBIREC empty;

  KBIREC.KBIOTASK = "D ";
  KBIREC.KBIODATE = KBXREC.KBXXEDT; /* effective date*/

  XPKB018(); /* call io4330*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful delete*/
    KB0DW01.KB0DW-ACCTS-DELETED = KB0DW01.KB0DW-ACCTS-DELETED + 1;
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;

    set TA1REC empty; /* ; build err diag*/

    TA1REC.TA1LOCAT[1] = "KB0D034";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "D ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;

    XPKB900(); /* ; database abend*/
  end


end // end KB0D034

// MOVE REPNAME & YSB DESCRIPTION
Function KB0D035()

   /* get rep name*/

  if (KB0DM001.SM4REPID == 0) /* rep was not entered*/
    KB0DM001.KB0DM-REP-LAST-NAME = " ";
    KB0DM001.KB0DM-REP-FIRST-NAME = " ";
    KB0DM001.KB0DM-REP-MID-INIT = " ";
  else
    set SM4REC empty;
    SM4REC.SM4REPID = KB0DM001.SM4REPID;

    call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
      KB0DM001.KB0DM-REP-LAST-NAME = SM4REC.XXXLSTNM;
      KB0DM001.KB0DM-REP-FIRST-NAME = SM4REC.XXXFSTNM;
      KB0DM001.KB0DM-REP-MID-INIT = SM4REC.XXXMDINT;
    else
      KB0DM001.KB0DM-REP-LAST-NAME = " ";
      KB0DM001.KB0DM-REP-FIRST-NAME = " ";
      KB0DM001.KB0DM-REP-MID-INIT = " ";
    end
  end

   /* get ysb description*/

  if (KB0DM001.YSBCD == " ") /* no ysb was entered*/
    KB0DM001.YSBDESC = " ";
  else
    if (KB0DM001.YSBCD == "*") /* all ysbs*/
      KB0DM001.YSBDESC = "ALL YSBS";
    else
      if (KB0DM001.YSBCD in YSBTBL.YSBCD)
        KB0DM001.YSBDESC = YSBTBL.YSBDESC[sysVar.arrayIndex];
      else
        KB0DM001.YSBDESC = "UNKNOWN";
      end
    end
  end


end // end KB0D035

// UPDATE KBXREC (terminate)
Function KB0D036()

  set SQLCA empty;
  set KBIREC empty;

  KBXREC.KBXXXDT = TA2REC.TA2GRGGN; /* ; set termination date*/
  KBXREC.ZZZCHGDT = TA2REC.TA2GRGGN; /* ; set change date*/
  KBXREC.ZZZCHGTM = TA2REC.TA2TIMHM; /* ; set change time*/

  KBIREC.KBIOTASK = "U "; /* set io-pass task*/
  XPKB018(); /* call io4330*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful update*/
    KB0DW01.KB0DW-ACCTS-DETACHED = KB0DW01.KB0DW-ACCTS-DETACHED + 1;
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;

    set TA1REC empty; /* ; build err diag*/

    TA1REC.TA1LOCAT[1] = "KB0D036";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "U ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;

    XPKB900(); /* ; database abend*/
  end


end // end KB0D036

// ADD AUDIT REC FOR UPDATE
Function KB0D037()


  set KB3REC empty;
  set KUZREC empty;

  KB3REC.KB3TRAN = "D"; /* ; transaction = detach*/
  KB3REC.KB3DATA = KBXREC.KBXGRP; /* ; data = kbxrec*/

  KUZREC.KUZTYPE = "C"; /* ; type = 'change'*/
  KUZREC.XXXTBLNM = "VBXREF01";
  KUZREC.KUCCOID = KBXREC.KBABUYID;

  XPKB099();

end // end KB0D037

// DELETE KBXREC USING TS RECORD
Function KB0D038()

  set SQLCA empty;
  set KBIREC empty;

  KBIREC.KBIOTASK = "D ";
  KBIREC.KBIODATE = KBXREC.KBXXEDT; /* effective date*/

  XPKB018(); /* call io4330*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful delete*/
    KB0DW01.KB0DW-ACCTS-DELETED = KB0DW01.KB0DW-ACCTS-DELETED + 1;
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;

    set TA1REC empty; /* ; build err diag*/

    TA1REC.TA1LOCAT[1] = "KB0D038";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "D ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;

    XPKB900(); /* ; database abend*/
  end


end // end KB0D038

// ADD AUDIT REC FOR DELETE
Function KB0D039()

  set KB3REC empty;
  set KUZREC empty;

  KB3REC.KB3TRAN = "D"; /* ; transaction = detach*/
  KB3REC.KB3DATA = KBXREC.KBXGRP; /* ; data = kbxrec*/

  KUZREC.KUZTYPE = "D"; /* ; type = 'delete'*/
  KUZREC.XXXTBLNM = "VBXREF01";
  KUZREC.KUCCOID = KBXREC.KBABUYID;

  XPKB099();

end // end KB0D039

// SELECT KBXREF FOR UPDATE
Function KB0D040()
  set SQLCA empty;
  set KBXREC empty;

  KBXREC.KBABUYID = KBWREC.KBABUYID;
  KBXREC.KUCCOID = KB0DW02.KUCCOID[KB0DW-SUB];
  KBXREC.KUMSTRID = KB0DW02.KUMSTRID[KB0DW-SUB];
  KBXREC.XNXCD = KB0DW02.XNXCD[KB0DW-SUB];
  KBXREC.YSBCD = KB0DW02.YSBCD[KB0DW-SUB];
  KBXREC.KBXXEDT = KB0DW02.KBXXEDT[KB0DW-SUB];

  KBIREC.KBIOTASK = "S "; /* set io-pass task*/

  XPKB018(); /* call io4330*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ; record was found*/
  /* ; next sentence*/
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;

    set TA1REC empty; /* ; build err diag*/

    TA1REC.TA1LOCAT[1] = "KB0D040";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "S ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;

    XPKB900(); /* ; database abend*/
  end


end // end KB0D040

// EDIT KB0DM001
Function KB0D050()

  KBWREC.KUMSTRID = 0; /* ; reset w/s store id*/
  KBWREC.XNXCD = 0; /* ; reset w/s dept id*/

  KBWREC.KBWSUB1 = 6; /* ; set array subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of array*/
    if (KB0DM001.KB0DMOPT[KBWSUB1] == "*")
      KB0DM001.KB0DMOPT[KBWSUB1] = " "; /* reset options*/
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscrpt*/
  end

  KBWREC.KBWSUB1 = 6; /* ; set array subscript*/
  KBWREC.KBWCNT = 0; /* ; reset counter*/

  while (KBWREC.KBWSUB1 > 0) /* ; until top of array*/
    if (KB0DM001.KB0DMOPT[KBWSUB1] != " ") /* ; option was selected*/
      KBWREC.KBWCNT = KBWREC.KBWCNT + 1; /* ; increment counter*/
      set KB0DM001.KB0DMOPT[KBWSUB1] bold, cursor;
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1; /* ; save array position*/
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscrpt*/
  end

  if (KBWREC.KBWCNT == 0) /* ; no selection*/
    set KB0DM001.KB0DMOPT[1] cursor, bold;
    KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
    converseLib.validationFailed(139); /* ; one option required*/
  else
    if (KBWREC.KBWCNT > 1) /* ; duplicate selection*/
      KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
      converseLib.validationFailed(60); /* ; one option only*/
    else
      if (KB0DM001.KB0DMOPT[KBWSUB2] != "S")
        KBWREC.KBWERRFL = "Y"; /* ; set error flag*/
        converseLib.validationFailed(105); /* ; must use 's' to select*/
      end
    end
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors yet*/
    KBWREC.KBWSUB1 = 6; /* ; set array subscript*/
    while (KBWREC.KBWSUB1 > 0) /* ; until top of array*/
      set KB0DM001.KB0DMOPT[KBWSUB1] initialAttributes; /* reset attributes*/
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscrpt*/
    end

    if (KBWREC.KBWSUB2 <= 4) /* ; cmpny option selected*/
      KB0D060(); /* ; edit cmpny option*/
    else
      KB0D075(); /* ; edit misc option*/
    end
  end


end // end KB0D050

// CHECK FOR MULTIPLE YSB'S
Function KB0D055()

  if (KB0DM001.KBABUYID != 0 /* buyer id entered*/
   && KB0DM001.SM4REPID != 0 /* rep id entered*/
   && KB0DM001.YSBCD == " "  /* ysb NOT entered*/
   && KB0DM001.KB0DMOPT[6] == " ") /* edit not necessary for 'see list'*/

    set KBKREC empty;
    set KBXREC empty;
    set KUGREC empty;

    KBKREC.KBK-TASK = "C "; /* ; count ysb occurrences*/
    KBKREC.KBK-STATUS = "A"; /* ; active accounts*/
    KBKREC.KBK-DATE = TA2REC.TA2GRGGN; /* ; current date*/
    KBXREC.KBABUYID = KB0DM001.KBABUYID; /* set buyer id*/
    KUGREC.SM4REPID = KB0DM001.SM4REPID; /* set rep id*/

    if (KB0DM001.KB0DMCID == 0)
      KBXREC.KUCCOID = -1; /* set for all companies*/
    else
      KBXREC.KUCCOID = KB0DM001.KB0DMCID; /* ; set cust id*/
    end
    /* store and department have already been set by edit routine*/
    KBXREC.KUMSTRID = KBWREC.KUMSTRID; /* ; set store id*/
    KBXREC.XNXCD = KBWREC.XNXCD; /* ; set dept id*/

    XPKB050(); /* call kb1000*/

    if (SQLCA.VAGen_SQLCODE == 0) /* successful count*/
      if (KBKREC.KBK-YSB-COUNT > 1) /* more than 1 ysb for selection*/
        KBWREC.KBWERRFL = "Y"; /* set error on*/
        converseLib.validationFailed(140); /* more than 1 active ysb, choose one*/
        set KB0DM001.YSBCD cursor, bold;
      end
    end

  end

end // end KB0D055

// EDIT COMPANY OPTIONS
Function KB0D060()


  if (KBWREC.KBWSUB2 == 1) /* ; all stores/depts*/
    KB0D061();
  else
    if (KBWREC.KBWSUB2 == 2) /* ; all depts for store*/
      KB0D062();
    else
      if (KBWREC.KBWSUB2 == 3) /* ; all stores for dept*/
        KB0D063();
      else
        KB0D064(); /* ; specific store/dept*/
      end
    end
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    KB0D065(); /* ; edit dept for numerics*/
    KB0D066(); /* ; edit store for numerics*/
  end


end // end KB0D060

// ALL STORES/DEPTS FOR CUST
Function KB0D061()


  if (KB0DM001.KB0DMDID != " ") /* ; cmpny dept id entered*/
    set KB0DM001.KB0DMDID cursor, bold;
    set KB0DM001.KB0DMOPT[1] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* ; selection and data don't match*/
  end

  if (KB0DM001.KB0DMSID != " ") /* ; store id entered*/
    set KB0DM001.KB0DMSID cursor, bold;
    set KB0DM001.KB0DMOPT[1] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* ; selection and data don't match*/
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0DM001.KB0DMCID == 0) /* ; no cmpny id*/
      set KB0DM001.KB0DMCID cursor, bold;
      set KB0DM001.KB0DMOPT[1] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30); /* ; company id is required*/
    end
  end


end // end KB0D061

// ALL DEPTS FOR COMPANY/STORE
Function KB0D062()


  if (KB0DM001.KB0DMDID != " ") /* ; cmpny dept id entered*/
    set KB0DM001.KB0DMDID cursor, bold;
    set KB0DM001.KB0DMOPT[2] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* ; selection and data don't match*/
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0DM001.KB0DMSID == " ") /* ; no cmpny store id*/
      set KB0DM001.KB0DMSID cursor, bold;
      set KB0DM001.KB0DMOPT[2] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(32); /* ; store id is required*/
    end

    if (KB0DM001.KB0DMCID == 0) /* ; no cmpny id*/
      set KB0DM001.KB0DMCID cursor, bold;
      set KB0DM001.KB0DMOPT[2] bold;
      converseLib.validationFailed(30); /* company id is required*/
      KBWREC.KBWERRFL = "Y";
    end
  end


end // end KB0D062

// ALL STORES FOR COMPANY/DEPT
Function KB0D063()


  if (KB0DM001.KB0DMSID != " ") /* ; cmpny store id entered*/
    set KB0DM001.KB0DMSID cursor, bold;
    set KB0DM001.KB0DMOPT[3] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* ; selection and data don't match*/
  end

  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0DM001.KB0DMDID == " ") /* ; no cmpny dept id*/
      set KB0DM001.KB0DMDID cursor, bold;
      set KB0DM001.KB0DMOPT[3] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(63); /* ; department id is required*/
    end

    if (KB0DM001.KB0DMCID == 0) /* ; no cmpny id*/
      set KB0DM001.KB0DMCID cursor, bold;
      set KB0DM001.KB0DMOPT[3] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30); /* ; company id is required*/
    end
  end


end // end KB0D063

// SPECIFIC COMPANY/STORE/DEPT
Function KB0D064()


  if (KBWREC.KBWERRFL == "N") /* ; no errors exist*/
    if (KB0DM001.KB0DMDID == " ") /* ; no cmpny dept id*/
      set KB0DM001.KB0DMDID cursor, bold;
      set KB0DM001.KB0DMOPT[4] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(63); /* ; department id is required*/
    end

    if (KB0DM001.KB0DMSID == " ") /* ; no cmpny store id*/
      set KB0DM001.KB0DMSID cursor, bold;
      set KB0DM001.KB0DMOPT[4] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(32); /* ; store id is required*/
    end

    if (KB0DM001.KB0DMCID == 0) /* ; no cmpny id*/
      set KB0DM001.KB0DMCID cursor, bold;
      set KB0DM001.KB0DMOPT[4] bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(30); /* ; company id is required*/
    end
  end


end // end KB0D064

// EDIT CMPNY DEPT FOR NUMERICS
Function KB0D065()


  if (KB0DM001.KB0DMDID == " ") /* ; no dept id entered*/
    KBWREC.XNXCD = -1; /* ; set for all depts*/
  else
    XP0AW01.XP0AWFLD = KB0DM001.KB0DMDID;

    XP0A001(); /* ; edit for non-numerics*/

    if (XP0AW01.XP0AWEFL == "Y") /* ; non-numeric characters*/
      set KB0DM001.KB0DMDID cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(64);
    else
      KBWREC.KBWDPTCH = KB0DM001.KB0DMDID;
      KBWREC.XNXCD = KBWREC.KBWDPTID;
    end
  end


end // end KB0D065

// EDIT CMPNY STORE FOR NUMERICS
Function KB0D066()


  if (KB0DM001.KB0DMSID == " ") /* ; no store id entered*/
    KBWREC.KUMSTRID = -1; /* ; set for all stores*/
  else
    XP0AW01.XP0AWFLD = KB0DM001.KB0DMSID;

    XP0A001(); /* ; edit for non-numerics*/

    if (XP0AW01.XP0AWEFL == "Y") /* ; non-numeric characters*/
      set KB0DM001.KB0DMSID cursor, bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(33);
    else
      KBWREC.KBWSTRCH = KB0DM001.KB0DMSID;
      KBWREC.KUMSTRID = KBWREC.KBWSTRID;
    end
  end


end // end KB0D066

// EDIT MISC OPTIONS
Function KB0D075()

  if (KB0DM001.KB0DMDID != " ") /* ; cmpny dept id entered*/
    set KB0DM001.KB0DMDID cursor, bold;
    set KB0DM001.KB0DMOPT[KBWSUB2] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* selection and data don't match*/
  end

  if (KB0DM001.KB0DMSID != " ") /* ; store id entered*/
    set KB0DM001.KB0DMSID cursor, bold;
    set KB0DM001.KB0DMOPT[KBWSUB2] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* selection and data don't match*/
  end

  if (KB0DM001.KB0DMCID != 0) /* ; cmpny id entered*/
    set KB0DM001.KB0DMCID cursor, bold;
    set KB0DM001.KB0DMOPT[KBWSUB2] bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(29); /* selection and data don't match*/
  end

  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KBWREC.XNXCD = -1; /* set for all departments*/
    KBWREC.KUMSTRID = -1; /* set for all stores*/
  end

end // end KB0D075

// SEND/RECEIVE DETACH SCREEN
Function KB0D080()
  converse KB0DM001 ;


  KBWREC.XXXMAPNM = "KB0DM001"; /* set map name*/

  set KB0DM001.SM4REPID cursor, normal;
  set KB0DM001.YSBCD normal;
  set KB0DM001.KB0DMOPT[1] normal;
  set KB0DM001.KB0DMOPT[2] normal;
  set KB0DM001.KB0DMOPT[3] normal;
  set KB0DM001.KB0DMOPT[4] normal;
  set KB0DM001.KB0DMOPT[5] normal;
  set KB0DM001.KB0DMOPT[6] normal;

  set KB0DM001.KB0DMCID normal;
  set KB0DM001.KB0DMSID normal;
  set KB0DM001.KB0DMDID normal;


end // end KB0D080

// MOVE VALUES FROM W/S TO SCREEN
Function KB0D090()
  set KB0DM001 initial; /* ; initialize screen*/

  KB0DM001.KB0DMDTE = VGVar.currentShortGregorianDate;
  KB0DM001.KBABUYID = KBWREC.KBABUYID;

  if (KBWREC.KBWBFND == "N") /* ; invalid buyer id*/
    converseLib.validationFailed(143);
  else
    KB0DM001.XXXFSTNM = KBAREC.XXXFSTNM;
    KB0DM001.XXXMDINT = KBAREC.XXXMDINT;
    KB0DM001.XXXLSTNM = KBAREC.XXXLSTNM;
    KB0DM001.XXXGNTNM = KBAREC.XXXGNTNM;
  end

end // end KB0D090

// LIST ALL ACTIVE ACCTS
Function KB0D100()


  KB0D105(); /* ; initialize*/

  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KBWREC.KBWRETNF = "N"; /* ; set return flag*/
    while (KBWREC.KBWRETNF == "N") /* ; until return flag = y*/
      KB0D125(); /* ; mainline*/
    end
  end

  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KB0DM001.KB0DMOPT[6] = "*"; /* completed see list option*/
    if (KB0DW01.KB0DW-ACCTS-DETACHED == 0
     && KB0DW01.KB0DW-ACCTS-DELETED == 0)
      KB0DM001.VAGen_EZEMSG = " ";
    else
      KB0DW01.KB0DW-ACCT-MSGA = " ACCOUNTS DETACHED";
      KB0DW01.KB0DW-ACCT-MSGB = " ACCOUNTS DELETED";
      KB0DM001.VAGen_EZEMSG = KB0DW01.KB0DW-ACCT-MSG;
    end
  end

end // end KB0D100

// INITIALIZE - LIST ACCTS
Function KB0D105()

  set KB0DW02 empty;

  KB0D140(); /* ; load temp storage*/

  if (KBWREC.KBWERRFL != "Y") /* ; no errors*/
    KB0DW01.KB0DW-CURR-PAGE = 1; /* ; init current page*/
    KB0D135(); /* ; move temp storage to kb0dm002*/
    if (KB0DW-COUNT > 0)
      converseLib.validationFailed(155); /* ; error attachments exist*/
    end
  end

end // end KB0D105

// EDIT KB0DM002
Function KB0D110()
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/

  KB0DW01.KB0DW-SUB = 13;
                                  /* edit select byte*/
  while (KB0DW01.KB0DW-SUB != 0)
    if (KB0DM002.KB0DMSEL[KB0DW-SUB] != " "
     && KB0DM002.KB0DMSEL[KB0DW-SUB] != "S")
      converseLib.validationFailed(105); /* must enter 's' to select*/
      KBWREC.KBWERRFL = "Y";
      set KB0DM002.KB0DMSEL[KB0DW-SUB] cursor, bold;
    end
    KB0DW01.KB0DW-SUB = KB0DW01.KB0DW-SUB - 1;
  end

  if (converseVar.eventKey is pf7)
    if (KB0DM002.KBWPAGE == 1)
      converseLib.validationFailed(8); /* already at top*/
      set KB0DM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0DM002.KBWPAGE != KB0DW01.KB0DW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0DM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end

  if (converseVar.eventKey is pf8)
    if (KB0DM002.KBWPAGE == KB0DM002.KBWTOTPG)
      converseLib.validationFailed(9); /* already at bottom*/
      set KB0DM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0DM002.KBWPAGE != KB0DW01.KB0DW-CURR-PAGE)
        converseLib.validationFailed(113); /* can't change page and scroll*/
        set KB0DM002.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end

  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0DM002.KBWPAGE == 0
     || KB0DM002.KBWPAGE > KB0DM002.KBWTOTPG)
      converseLib.validationFailed(48); /* invalid page number*/
      set KB0DM002.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    end
  end

  if (KBWREC.KBWERRFL == "N") /* no errors*/
    KB0D115(); /* check selections & update ts*/
  end
end // end KB0D110

// CHECK FOR CHANGES & UPDATE TS
Function KB0D115()

  KB0DW01.KB0DW-CHANGE-FL = "N";

  KB0DW01.KB0DW-SUB = 1; /* ; reset map subscript*/
  while (KB0DW01.KB0DW-SUB <= 13) /* ; until end of map*/

        /* if select byte changes move it to temp storage record*/

    if (KB0DM002.KB0DMSEL[KB0DW-SUB] != KB0DW02.KB0DW-SELECT[KB0DW-SUB])
      KB0DW02.KB0DW-SELECT[KB0DW-SUB] = KB0DM002.KB0DMSEL[KB0DW-SUB];
      KB0DW01.KB0DW-CHANGE-FL = "Y";
    end
    KB0DW01.KB0DW-SUB = KB0DW01.KB0DW-SUB + 1;
  end

   /* if any changes were made, update the temp storage page*/

  if (KB0DW01.KB0DW-CHANGE-FL == "Y")
    KB0D220(); /* update temp storage page*/
  end
end // end KB0D115

// BUILD NEW PAGE FROM TS
Function KB0D120()

  /* determine new page number*/

  if (converseVar.eventKey is pf7)
    KB0DW01.KB0DW-CURR-PAGE = KB0DW01.KB0DW-CURR-PAGE - 1;
  else
    if (converseVar.eventKey is pf8)
      KB0DW01.KB0DW-CURR-PAGE = KB0DW01.KB0DW-CURR-PAGE + 1;
    else
      KB0DW01.KB0DW-CURR-PAGE = KB0DM002.KBWPAGE;
    end
  end

  KB0D200(); /* read temporary storage*/

  KB0D135(); /* move temp storage to map*/

end // end KB0D120

// MAINLINE - LIST ACCTS
Function KB0D125()

  KB0D180(); /* ; converse KB0DM002*/

  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/

  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KB0D230(); /* ; purge temp storage*/
    KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is enter)
  /* next sentence*/
    else
      converseLib.validationFailed(7); /* invalid pfkey*/
      KBWREC.KBWERRFL = "Y";
    end
  end


  if (KBWREC.KBWERRFL == "N" /* no errors*/
   && KBWREC.KBWRETNF == "N") /* ; don't return yet*/

    KB0D110(); /* ; edit KB0DM002*/

    if (KBWREC.KBWERRFL == "N") /* still no errors*/
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || KB0DM002.KBWPAGE != KB0DW01.KB0DW-CURR-PAGE)
        KB0D120(); /* build new page*/
      else
        KB0D130(); /* detach selected accounts*/
        KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
      end
    end
  end
end // end KB0D125

// DETACH SELECTED ACCTS
Function KB0D130()

  XPKB031(); /* ; get current date/time*/

  KB0DW01.KB0DW-CURR-PAGE = 1; /* ; set temp storage page*/

  /* process all temporary storage records*/

  while (KB0DW01.KB0DW-CURR-PAGE <= KB0DW01.KB0DW-MAX-PAGE)

    KB0D200(); /* ; read temp storage page*/
    KB0DW01.KB0DW-SUB = 1; /* ; reset account subscript*/

    while (KB0DW01.KB0DW-SUB <= 13) /* ; until page processed*/

      if (KB0DW02.KB0DW-SELECT[KB0DW-SUB] == "S") /* selected to detach*/
        KB0D040(); /* ; select kbxrec for update*/
        if (KB0DW02.KB0DW-ERROR-ATTACH-FL[KB0DW-SUB] == "Y") /* error acct*/
          KB0D038(); /* delete kbxrec*/
          KB0D039(); /* write audit for delete*/
        else
          KB0D036(); /* ; detach kbxrec*/
          KB0D037(); /* ; write audit for update*/
        end
      end
      KB0DW01.KB0DW-SUB = KB0DW01.KB0DW-SUB + 1;
    end
    KB0DW01.KB0DW-CURR-PAGE = KB0DW01.KB0DW-CURR-PAGE + 1;
  end


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* ; commit database changes*/

  KB0D230(); /* ; purge temporary storage*/

end // end KB0D130

// MOVE TEMP STORAGE TO MAP
Function KB0D135()

  set KB0DM002 initial; /* ; initialize screen*/

  KB0DM002.KB0DMDTE = VGVar.currentShortGregorianDate;
  KB0DM002.KBABUYID = KBWREC.KBABUYID;
  KB0DM002.XXXFSTNM = KBAREC.XXXFSTNM;
  KB0DM002.XXXMDINT = KBAREC.XXXMDINT;
  KB0DM002.XXXLSTNM = KBAREC.XXXLSTNM;
  KB0DM002.XXXGNTNM = KBAREC.XXXGNTNM;

  KB0D200(); /* ; read temp storage page*/

  KB0DW01.KB0DW-SUB = 1;
  while (KB0DW-SUB <= 13) /* move accounts from temp storage to*/
                                   /* map*/
    if (KB0DW02.KUCCOID[KB0DW-SUB] > 0)
      KB0DM002.KB0DMSEL[KB0DW-SUB] = KB0DW02.KB0DW-SELECT[KB0DW-SUB];
      KB0DM002.SM4REPID[KB0DW-SUB] = KB0DW02.SM4REPID[KB0DW-SUB];
      KB0DM002.YSBCD[KB0DW-SUB] = KB0DW02.YSBCD[KB0DW-SUB];
      KB0DM002.YSBABRV[KB0DW-SUB] = KB0DW02.YSBABRV[KB0DW-SUB];
      KB0DM002.KUCCOID[KB0DW-SUB] = KB0DW02.KUCCOID[KB0DW-SUB];
      KB0DM002.KUMSTRID[KB0DW-SUB] = KB0DW02.KUMSTRID[KB0DW-SUB];
      KB0DM002.XNXCD[KB0DW-SUB] = KB0DW02.XNXCD[KB0DW-SUB];
      KB0DM002.KUMSTRNM[KB0DW-SUB] = KB0DW02.KUMSTRNM[KB0DW-SUB];
      KB0DM002.KBXXEDT[KB0DW-SUB] = KB0DW02.KBXXEDT[KB0DW-SUB];

      if (KB0DW01.KB0DW-SUB == 1) /* ; first line on map*/
        set KB0DM002.KB0DMSEL[KB0DW-SUB] cursor, normal;
      else
        set KB0DM002.KB0DMSEL[KB0DW-SUB] normal;
      end

        /* if an account is attached and detached the same day, the*/
        /* account will be deleted rather than terminated.  These*/
        /* accounts are flagged as error attachments.*/

      if (KB0DW02.KB0DW-ERROR-ATTACH-FL[KB0DW-SUB] == "Y")
        KB0DM-ERROR-ATTACH-FL[KB0DW-SUB] = "*";
      else
        KB0DM-ERROR-ATTACH-FL[KB0DW-SUB] = " ";
      end

    end

    KB0DW01.KB0DW-SUB = KB0DW01.KB0DW-SUB + 1;
  end

  KB0DM002.KBWPAGE = KB0DW01.KB0DW-CURR-PAGE;
  KB0DM002.KBWTOTPG = KB0DW01.KB0DW-MAX-PAGE;
end // end KB0D135

// LOAD TEMP STOR FOR SELECTION
Function KB0D140()

  KB0DW-SUB = 0; /* ; init account subscript*/
  KB0DW-COUNT = 0; /* ; used to count error attachments*/

  set KBXREC empty;
  set KBKREC empty;
  set KUGREC empty;

   /* set up parameters for pass record*/

  KBKREC.KBK-TASK = "S1"; /* ; set io-pass task*/
  KBKREC.KBK-STATUS = "A"; /* ; active accounts*/
  KBKREC.KBK-DATE = TA2REC.TA2GRGGN; /* ; current date*/

  KBXREC.KBABUYID = KB0DM001.KBABUYID; /* ; set buyer id*/

  if (KB0DM001.SM4REPID == 0)
    KUGREC.SM4REPID = -1; /* select all reps*/
  else
    KUGREC.SM4REPID = KB0DM001.SM4REPID; /* set rep id*/
  end

  if (KB0DM001.YSBCD == "*"
   || KB0DM001.YSBCD == " ")
    KBXREC.YSBCD = "**"; /* select all ysb's*/
  else
    KBXREC.YSBCD = KB0DM001.YSBCD; /* set ysb*/
  end

  KBXREC.KUCCOID = -1; /* select all companies*/
  KBXREC.KUMSTRID = -1; /* select all stores*/
  KBXREC.XNXCD = -1; /* select all departments*/

  XPKB050(); /* call kb1000*/

  /* fetch first row*/

  KBKREC.KBK-TASK = "N1"; /* ; set io-pass task*/
  XPKB050(); /* ; call kb1000*/

  if (SQLCA.VAGen_SQLCODE == 100) /* ; no accounts found*/
    converseLib.validationFailed(136);
    KBWREC.KBWERRFL = "Y";
    set KB0DM001.SM4REPID cursor;
  else

    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful database call*/
      KB0D150(); /* ; move to temp storage*/
      KBKREC.KBK-TASK = "N1"; /* ; fetch next row*/
      XPKB050(); /* ; call kb1000*/
    end
    if (KB0DW01.KB0DW-SUB > 0)
      KB0D210(); /* ; write partial page to ts*/
    end
  end

  /* close cursor*/

  KBKREC.KBK-TASK = "C1"; /* ; close cursor*/
  XPKB050(); /* ; call kb1000*/

end // end KB0D140

// MOVE ACCOUNT TO TEMP STORAGE
Function KB0D150()

  KB0DW01.KB0DW-SUB = KB0DW01.KB0DW-SUB + 1;
  KB0DW02.KUCCOID[KB0DW-SUB] = KBXREC.KUCCOID;
  KB0DW02.KUMSTRID[KB0DW-SUB] = KBXREC.KUMSTRID;
  KB0DW02.XNXCD[KB0DW-SUB] = KBXREC.XNXCD;
  KB0DW02.YSBCD[KB0DW-SUB] = KBXREC.YSBCD;
  KB0DW02.KBXXEDT[KB0DW-SUB] = KBXREC.KBXXEDT;
  KB0DW02.SM4REPID[KB0DW-SUB] = KUGREC.SM4REPID;

  if (KBXREC.YSBCD in YSBTBL.YSBCD)
    KB0DW02.YSBABRV[KB0DW-SUB] = YSBTBL.YSBABRV[sysVar.arrayIndex];
  else
    KB0DW02.YSBABRV[KB0DW-SUB] = "  ";
  end

  if (KBXREC.KBXXEDT == TA2REC.TA2GRGGN) /* effective date = current date*/
    KB0DW02.KB0DW-ERROR-ATTACH-FL[KB0DW-SUB] = "Y";
    KB0DW01.KB0DW-COUNT = KB0DW01.KB0DW-COUNT + 1;
  else
    KB0DW02.KB0DW-ERROR-ATTACH-FL[KB0DW-SUB] = "N";
  end

  KB0D160(); /* ; get store name*/

  if (KB0DW01.KB0DW-SUB == 13) /* ; page is full*/
    KB0D210(); /* ; add page to temp storage*/
  end

end // end KB0D150

// GET STORE NAME
Function KB0D160()


  set KUMREC empty;

  KUMREC.KUCCOID = KBXREC.KUCCOID; /* ; set cust id*/
  KUMREC.KUMSTRID = KBXREC.KUMSTRID; /* ; set store id*/

  XPKB020(); /* ; call io0340 - 's '*/

  if (KBWREC.KBWSFND == "Y") /* ; store rec found*/
    KB0DW02.KUMSTRNM[KB0DW-SUB] = KUMREC.KUMSTRNM;
  end


end // end KB0D160

// SEND/RECEIVE LIST ACCTS SCREEN
Function KB0D180()


  converse KB0DM002 ;


  KBWREC.XXXMAPNM = "KB0DM002"; /* save current mapname*/

  set KB0DM002.KBWPAGE cursor, normal;

  KBWREC.KBWSUB1 = 13; /* ; set map subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of map*/

    if (KB0DM002.KUCCOID[KBWSUB1] != 0  /* ; row has cust id*/
     || KB0DM002.KUMSTRID[KBWSUB1] != 0 /* ; row has store id*/
     || KB0DM002.XNXCD[KBWSUB1] != 0    /* ; row has dept id*/
     || KB0DM002.KBXXEDT[KBWSUB1] != 0) /* ; row has eff dt*/
      set KB0DM002.KB0DMSEL[KBWSUB1] cursor, normal;
    end

    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end


end // end KB0D180

// READ TEMP STORAGE
Function KB0D200()

  set KB0DW02 empty;
  set TA5REC empty;

  TA5REC.TA5APPID = "KB0D"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = KB0DW01.KB0DW-CURR-PAGE; /* current page*/
  KB0DW02.KB0DW-TS-LENGTH = 706; /* length of record*/

  call "TA0050" (KB0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0D200";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0DW02.KB0DW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE READING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/

  end
end // end KB0D200

// ADD TEMP STORAGE
Function KB0D210()

  set TA5REC empty;
  TA5REC.TA5APPID = "KB0D"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  KB0DW02.KB0DW-TS-LENGTH = 706; /* length of record*/

  call "TA0050" (KB0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    KB0DW01.KB0DW-MAX-PAGE = TA5REC.TA5TSQIX; /* max page number*/
    set KB0DW02 empty; /* reinitialize page*/
    KB0DW01.KB0DW-SUB = 0; /* reinitialize line subscript*/
  else
    TA1REC.TA1LOCAT[1] = "KB0D210";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0DW02.KB0DW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE ADDING TO TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/
  end
end // end KB0D210

// UPDATE TEMP STORAGE
Function KB0D220()
  set TA5REC empty;

  TA5REC.TA5APPID = "KB0D"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = KB0DW01.KB0DW-CURR-PAGE; /* current page*/
  KB0DW02.KB0DW-TS-LENGTH = 706; /* length of record*/

  call "TA0050" (KB0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0D220";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0DW02.KB0DW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE UPDATING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/

  end
end // end KB0D220

// PURGE TEMP STORAGE
Function KB0D230()
  set TA5REC empty;
  TA5REC.TA5APPID = "KB0D"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (KB0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
   /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0D230";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0DW02.KB0DW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE PURGING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;

    XPKB990(); /* application abend routine*/
  end
end // end KB0D230

//*** RECORD=KB0DW01 ****
// Working storage record for KB0D.  Detach Buyer Accounts.
// ***********************
Record KB0DW01 type basicRecord
  5 KB0DW-GROUP1 KB0DW-GROUP1 ; 
    10 KB0DW-MAX-PAGE KB0DW-MAX-PAGE ; 
    10 KB0DW-CURR-PAGE KB0DW-CURR-PAGE ; 
    10 KB0DW-SUB KB0DW-SUB ; 
    10 KB0DW-COUNT KB0DW-COUNT ; 
    10 KB0DW-CHANGE-FL KB0DW-CHANGE-FL ; 
    10 KB0DW-ACCT-MSG KB0DW-ACCT-MSG ; 
      15 KB0DW-ACCTS-DETACHED KB0DW-ACCTS-DETACHED ; 
      15 KB0DW-ACCT-MSGA KB0DW-ACCT-MSGA ; 
      15 KB0DW-ACCTS-DELETED KB0DW-ACCTS-DELETED ; 
      15 KB0DW-ACCT-MSGB KB0DW-ACCT-MSGB ; 
end // end KB0DW01

//*** RECORD=KB0DW02 ****
// Temporary storage record used to hold the accounts shown for
// detaching.
// 
// CSP Record:  KB0DW02
// Read in   :  KB0D200
// Added in  :  KB0D210
// Updated in:  KB0D220
// Purged in :  KB0D230
// ***********************
Record KB0DW02 type basicRecord
  5 KB0DW-GROUP2 KB0DW-GROUP2 ; 
    10 KB0DW-TS-LENGTH KB0DW-TS-LENGTH ; 
    10 KB0DW-TS-ROW KB0DW-TS-ROW [13] ; 
      15 KB0DW-SELECT KB0DW-SELECT ; 
      15 SM4REPID SM4REPID ; 
      15 YSBCD YSBCD ; 
      15 YSBABRV YSBABRV ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 KUMSTRNM KUMSTRNM ; 
      15 KBXXEDT KBXXEDT ; 
      15 KB0DW-ERROR-ATTACH-FL KB0DW-ERROR-ATTACH-FL ; 
end // end KB0DW02

// account message
DataItem KB0DW-ACCT-MSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// account message a
DataItem KB0DW-ACCT-MSGA char(38)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// account message b
DataItem KB0DW-ACCT-MSGB char(32)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// number of accounts deleted
DataItem KB0DW-ACCTS-DELETED num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of accounts detached
DataItem KB0DW-ACCTS-DETACHED num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// change flag
DataItem KB0DW-CHANGE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KB0DW-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page number
DataItem KB0DW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// error attachment flag
DataItem KB0DW-ERROR-ATTACH-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for KB0DW01
DataItem KB0DW-GROUP1 char(90)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kb0dw02 group level
DataItem KB0DW-GROUP2 char(706)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maximum page number
DataItem KB0DW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// select indicator
DataItem KB0DW-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// account line subscript
DataItem KB0DW-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage length
DataItem KB0DW-TS-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage row
DataItem KB0DW-TS-ROW char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

