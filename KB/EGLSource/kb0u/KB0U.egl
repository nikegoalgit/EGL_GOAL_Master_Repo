package kb0u;

import corpcom3.XPKB002;
import corpcom4.XSEXIT;
import corpcom5.COMMAREA;
import corpx1.XCTTBL;
import corpx1.XSTTBL;
import corpy2.YBBTBL;
import corpy2.YBTTBL;
import corpy2.YMLTBL;
import kb.common.KBWREC;
//*** PROGRAM=KB0U ****
// This application is the utility program that will list
// corporate table values to choose from.
// These tables include:  buyer title codes
//                        country codes
//                        state codes
//                        purchasing responsibility codes
//                        mail level codes
// ************************************************************
//                 MAINTENANCE HISTORY
// ------------------------------------------------------------
//   Date     Who     Reason
// ------------------------------------------------------------
// 02/01/93  tmorri   This application has been modified as
//                    part of the Buyer System Enhancement
//                    project.  Added mail level code option.
// 
// 02/18/93  tmorri   Changed blue on maps to turquoise.
//                    (KB0UM001, KB0UM002, KB0UM003, KB0UM004
//                    KB0UM005)
// 
// 03/01/93  tmorri   Fixed error for mailing level list.
//                    (KB0U550)
// 
// 05/26/93  tmorri   Only list active codes.  Program was
//                    listing all codes.  (KB0U120, KB0U220,
//                    KB0U320, KB0U420, KB0U520)
// *********************
Program KB0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KB0UW01 KB0UW01; // record
  KBWREC KBWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XSTTBL; // table
  use YBBTBL; // table
  use YBTTBL; // table
  use YMLTBL; // table
  use KB0UM.KB0UM001,  // forms
      KB0UM.KB0UM002, 
      KB0UM.KB0UM003, 
      KB0UM.KB0UM004, 
      KB0UM.KB0UM005
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0U001: KB0U001();
    ;
    ;
    goto KB0U005;
    ;
    ;
    KB0U005: KB0U005();
    ;
    ;
    goto KB0U005;
    ;
    ;
  end // end main
end // end KB0U

// LIST UTILITY INITIALIZE
Function KB0U001()
  ;
  ;
  if (COMMAREA.CAFROMAP == "KB0A" /* ; from 'Add Buyer'*/
   || COMMAREA.CAFROMAP == "KB0C" /* ; from 'Update Buyer'*/
   || COMMAREA.CAFROMAP == "KB0T" /* ; from 'Attach'*/
   || COMMAREA.CAFROMAP == "KB0F") /* ; from 'Update Mail Code'*/
    XPKB002(); /* ; initialize kbwrec*/
  else
    set KBWREC empty; /* ; initialize kbwrec*/
    ;
    COMMAREA.CATOAP = "KB0M"; /* ; xfer to 'Buyer Menu'*/
    COMMAREA.CAUSERA = KBWREC.KBWGROUP; /* ; initialize commarea*/
    ;
    XSEXIT();
    ;
    exit program;
  end
  ;
  ;
end // end KB0U001

// LIST UTILITY MAINLINE
Function KB0U005()
  ;
  ;
  if (KBWREC.KBWTBLID == "BB") /* ; list responsibilities*/
    KB0U100();
  else
    if (KBWREC.KBWTBLID == "BT") /* ; list buyer titles*/
      KB0U200();
    else
      if (KBWREC.KBWTBLID == "CT") /* ; list countries*/
        KB0U300();
      else
        if (KBWREC.KBWTBLID == "ST") /* ; list states*/
          KB0U400();
        else
          if (KBWREC.KBWTBLID == "ML") /* ; list mail level codes*/
            KB0U500();
          end
        end
      end
    end
  end
            /* ;*/
  COMMAREA.CATOAP = COMMAREA.CAFROMAP;
  COMMAREA.CAUSERA = KBWREC.KBWGROUP;
  ;
  XSEXIT();
  ;
  exit program;
  ;
  ;
end // end KB0U005

// LIST PURCH RESPONSIBILITIES
Function KB0U100()
  ;
  ;
  KB0U110(); /* ; purch resp initialize*/
  ;
  KBWREC.KBWRETNF = "N"; /* ; reset return flag*/
  while (KBWREC.KBWRETNF == "N") /* ; until return flag = yes*/
    KB0U150(); /* ; purch resp mainline*/
  end
  ;
  ;
end // end KB0U100

// RESPONSIBILITIES INIT
Function KB0U110()
  ;
  ;
  KB0U120(); /* ; move YBBTBL to KB0UW01*/
  KB0U190();
                                   /* ; move KB0UW01 to KB0UM001*/
  ;
  KB0U180(); /* ; send/receive KB0UM001*/
  ;
  ;
end // end KB0U110

// MOVE YBBTBL TO KB0UW01
Function KB0U120()
  ;
  ;
  set KB0UW01 empty; /* ; init KB0UW01*/
  ;
  KBWREC.KBWSUB1 = 1; /* ; reset subscript 1*/
  KBWREC.KBWSUB2 = 1; /* ; reset subscript 2*/
  ;
  while (YBBTBL.YBBCD[KBWSUB1] != "9999" /* ; until end of YBBTBL*/
   && KBWREC.KBWSUB2 <= 200) /* ; or KB0UWTBL is full*/
    ;
    if (YBBTBL.XXXSTAT[KBWSUB1] == "A") /* ; active code*/
      KB0UW01.KB0UWTOT = KB0UWTOT + 1; /* ; increment rec total*/
      ;
      KB0UW01.KB0UW4CD[KBWSUB2] = YBBTBL.YBBCD[KBWSUB1];
      KB0UW01.KB0UW4NM[KBWSUB2] = KB0UW01.KB0UW4NM[KBWSUB2] * 1;
      KB0UW01.KB0UWDSC[KBWSUB2] = YBBTBL.YBBDESC[KBWSUB1];
      ;
      if (YBBTBL.YBBCD[KBWSUB1] in KBWREC.YBBCD) /* ;*/
        KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1; /* ; increment select cnt*/
        ;
        KB0UW01.KB0UWSEL[KBWSUB2] = "*";
      end
      ;
      KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1; /* ; increment subscript 2*/
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript 1*/
  end
  ;
  KBWREC.KBWPAGE = 1; /* ; reset curr page*/
  KBWREC.KBWTOTPG = 1; /* ; reset ttl pages*/
  ;
  if (KB0UW01.KB0UWTOT > 0) /* ; total recs > 0*/
    KBWREC.KBWTOTPG = KB0UW01.KB0UWTOT / 28; /* ; calc nbr of full pages*/
    KBWREC.KBWRMNDR = KB0UW01.KB0UWTOT % 28; /* ; calc remaining lines*/
    ;
    if (KBWREC.KBWRMNDR > 1) /* ; remaining lines > 0*/
      KBWREC.KBWTOTPG = KBWREC.KBWTOTPG + 1; /* ; increment total pages*/
    end
  end
  ;
  ;
end // end KB0U120

// RESPONSIBILITIES MAIN
Function KB0U150()
  ;
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
  else
    KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
    ;
    KB0U160(); /* ; edit KB0UM001*/
    ;
    if (converseVar.eventKey is enter /* ; user pressed enter*/
     && KBWREC.KBWERRFL == "N")       /* ; no errors*/
      KB0U170(); /* ; move kB0UW01 to KBWREC*/
      ;
      KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
    else
      if (KBWREC.KBWERRFL == "N") /* ; no errors*/
        if (converseVar.eventKey is pf7) /* ; scroll back requested*/
          if (KBWREC.KBWPAGE > 1)
            KBWREC.KBWPAGE = KBWREC.KBWPAGE - 1;
            ;
            KB0U190(); /* ; move W/S to KB0UM001*/
          else
            KBWREC.KBWERRFL = "Y";
            converseLib.validationFailed(8);
          end
          ;
        else
          if (converseVar.eventKey is pf8) /* ; scroll frwd requested*/
            if (KBWREC.KBWPAGE < KBWREC.KBWTOTPG)
              KBWREC.KBWPAGE = KBWREC.KBWPAGE + 1;
              ;
              KB0U190(); /* ; move W/S to KB0UM001*/
            else
              KBWREC.KBWERRFL = "Y";
              converseLib.validationFailed(9);
            end
            ;
          end
        end
      end
      ;
      KB0U180(); /* ; send/receive KB0UM001*/
      ;
    end
  end
  ;
  ;
end // end KB0U150

// EDIT KB0UM001
Function KB0U160()
  ;
  ;
  if (converseVar.eventKey not enter /* ; enter key not pressed*/
   && converseVar.eventKey not pf7   /* ; pf7 not pressed*/
   && converseVar.eventKey not pf8)  /* ; pf8 not pressed*/
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(7);
  else
    KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set array start pos*/
    ;
    KBWREC.KBWSUB1 = 1; /* ; set subscript*/
    while (KBWREC.KBWSUB1 <= 28) /* ; until end of map*/
      ;
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + KBWREC.KBWORK1;
      ;
      if (KBWREC.KBWSUB2 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
        if (KB0UM001.KB0UMSEL[KBWSUB1] == " " /* ; map item not selected*/
         && KB0UW01.KB0UWSEL[KBWSUB2] != " ") /* item selected before*/
          KB0UW01.KB0UWSEL[KBWSUB2] = " "; /* deselect item*/
          KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT - 1;
        end
      end
      ;
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
    end
    ;
    KBWREC.KBWSUB1 = 1; /* ; set subscript*/
    while (KBWREC.KBWSUB1 <= 28) /* ; until end of map*/
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + KBWREC.KBWORK1;
      ;
      if (KBWREC.KBWSUB2 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
        if (KB0UM001.KB0UMSEL[KBWSUB1] != " " /* ; map item selected*/
         && KB0UW01.KB0UWSEL[KBWSUB2] == " ") /* ; not selected before*/
          if (KB0UW01.KB0UWCNT < 10) /* ; less than 10 items*/
            KB0UW01.KB0UWSEL[KBWSUB2] = "*";
            KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1;
          else
            if (KBWREC.KBWERRFL == "N") /* ; error flag = no*/
              set KB0UM001.KB0UMSEL[KBWSUB1] cursor, bold;
              KBWREC.KBWERRFL = "Y";
              converseLib.validationFailed(57);
            else
              set KB0UM001.KB0UMSEL[KBWSUB1] bold;
            end
          end
        end
      end
      ;
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
    end
  end
  ;
  ;
end // end KB0U160

// MOVE KB0UW01 TO KBWREC
Function KB0U170()
  ;
  ;
  KBWREC.KBWSUB1 = 1;
  KBWREC.KBWSUB2 = 1;
  ;
  while (KBWREC.KBWSUB1 <= KB0UW01.KB0UWTOT
   && KBWREC.KBWSUB2 <= 10)
    if ("*" in KB0UW01.KB0UWSEL from KBWSUB1)
      KBWREC.YBBCD[KBWSUB2] = KB0UW01.KB0UW4CD[sysVar.arrayIndex];
      KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1;
      KBWREC.KBWSUB1 = sysVar.arrayIndex + 1;
    else
      while (KBWREC.KBWSUB2 <= 10)
        KBWREC.YBBCD[KBWSUB2] = " ";
        KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1;
      end
    end
  end
  ;
  ;
end // end KB0U170

// SEND/RECEIVE KB0UM001
Function KB0U180()
  ;
  ;
  converse KB0UM001 ;
  ;
  ;
  KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set starting pos*/
  ;
  KBWREC.KBWSUB1 = 28; /* ; reset subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    KBWREC.KBWORK2 = KBWREC.KBWORK1 + KBWREC.KBWSUB1;
    if (KBWREC.KBWORK2 <= KB0UW01.KB0UWTOT)
      set KB0UM001.KB0UMSEL[KBWSUB1] cursor, normal;
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U180

// MOVE KB0UW01 TO KB0UM001
Function KB0U190()
  ;
  ;
  set KB0UM001 initial; /* ; initialize KB0UM001*/
  ;
  KB0UM001.KB0UMDTE = VGVar.currentShortGregorianDate;
  ;
  KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set starting pos*/
  ;
  KBWREC.KBWSUB1 = 28; /* ; reset subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    KBWREC.KBWORK2 = KBWREC.KBWORK1 + KBWREC.KBWSUB1;
    ;
    if (KBWREC.KBWORK2 <= KB0UW01.KB0UWTOT)
      set KB0UM001.KB0UMSEL[KBWSUB1] cursor, normal;
      KB0UM001.KB0UMSEL[KBWSUB1] = KB0UW01.KB0UWSEL[KBWORK2];
      KB0UM001.YBBCD[KBWSUB1] = KB0UW01.KB0UW4CD[KBWORK2];
      KB0UM001.YBBDESC[KBWSUB1] = KB0UW01.KB0UWDSC[KBWORK2];
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U190

// LIST BUYER TITLES
Function KB0U200()
  ;
  ;
  KB0U210(); /* ; buyer title initialize*/
  ;
  KBWREC.KBWRETNF = "N"; /* ; reset return flag*/
  while (KBWREC.KBWRETNF == "N") /* ; until return flag = yes*/
    KB0U250(); /* ; buyer title mainline*/
  end
  ;
  ;
end // end KB0U200

// BUYER TITLE INIT
Function KB0U210()
  ;
  ;
  KB0U220(); /* ; move YBTTBL to KB0UW01*/
  KB0U290(); /* ; move W/S to KB0UM002*/
  ;
  KB0U280(); /* ; send/receive KB0UM002*/
  ;
  ;
end // end KB0U210

// MOVE YBTTBL TO KB0UW01
Function KB0U220()
  ;
  ;
  set KB0UW01 empty; /* ; init KB0UW01*/
  ;
  KBWREC.KBWSUB1 = 1; /* ; reset subscript 1*/
  KBWREC.KBWSUB2 = 1; /* ; reset subscript 2*/
  ;
  while (YBTTBL.YBTCD[KBWSUB1] != "999" /* ; until end of YBTTBL*/
   && KBWREC.KBWSUB2 <= 200) /* ; or KB0UWTBL is full*/
    if (YBTTBL.XXXSTAT[KBWSUB1] == "A") /* ; active code*/
      KB0UW01.KB0UWTOT = KB0UWTOT + 1; /* ; increment rec total*/
      ;
      KB0UW01.KB0UW3CD[KBWSUB2] = YBTTBL.YBTCD[KBWSUB1];
      KB0UW01.KB0UWDSC[KBWSUB2] = YBTTBL.YBTDESC[KBWSUB1];
      ;
      if (YBTTBL.YBTCD[KBWSUB1] == KBWREC.YBTCD) /* ;*/
        KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1; /* ; increment select cnt*/
        ;
        KB0UW01.KB0UWSEL[KBWSUB2] = "*";
      end
      KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1; /* ; increment subscript 2*/
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript 1*/
  end
  ;
  KBWREC.KBWPAGE = 1; /* ; reset curr page*/
  KBWREC.KBWTOTPG = 1; /* ; reset ttl pages*/
  ;
  if (KB0UW01.KB0UWTOT > 0) /* ; total recs > 0*/
    KBWREC.KBWTOTPG = KB0UW01.KB0UWTOT / 28; /* ; calc nbr of full pages*/
    KBWREC.KBWRMNDR = KB0UW01.KB0UWTOT % 28; /* ; calc remaining lines*/
    ;
    if (KBWREC.KBWRMNDR > 1) /* ; remaining lines > 0*/
      KBWREC.KBWTOTPG = KBWREC.KBWTOTPG + 1; /* ; increment ttl pages*/
    end
  end
  ;
  ;
end // end KB0U220

// BUYER TITLE MAIN
Function KB0U250()
  ;
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
  else
    KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
    ;
    KB0U260(); /* ; edit KB0UM002*/
    ;
    if (converseVar.eventKey is enter /* ; user pressed enter*/
     && KBWREC.KBWERRFL == "N")       /* ; no errors*/
      KB0U270(); /* ; move W/S to KBWREC*/
      ;
      KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
    else
      if (KBWREC.KBWERRFL == "N") /* ; no errors*/
        if (converseVar.eventKey is pf7) /* ; scroll back requested*/
          if (KBWREC.KBWPAGE > 1)
            KBWREC.KBWPAGE = KBWREC.KBWPAGE - 1;
            ;
            KB0U290(); /* ; move W/S to KB0UM002*/
          else
            KBWREC.KBWERRFL = "Y";
            converseLib.validationFailed(8);
          end
          ;
        else
          if (converseVar.eventKey is pf8) /* ; scroll frwd requested*/
            if (KBWREC.KBWPAGE < KBWREC.KBWTOTPG)
              KBWREC.KBWPAGE = KBWREC.KBWPAGE + 1;
              ;
              KB0U290(); /* ; move W/S to KB0UM002*/
            else
              KBWREC.KBWERRFL = "Y";
              converseLib.validationFailed(9);
            end
            ;
          end
        end
      end
      ;
      KB0U280(); /* ; send/receive KB0UM002*/
      ;
    end
  end
  ;
  ;
end // end KB0U250

// EDIT KB0UM002
Function KB0U260()
  ;
  ;
  if (converseVar.eventKey not enter /* ; enter key not pressed*/
   && converseVar.eventKey not pf7   /* ; pf7 not pressed*/
   && converseVar.eventKey not pf8)  /* ; pf8 not pressed*/
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(7);
  else
    KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set array start pos*/
    ;
    KBWREC.KBWSUB1 = 1; /* ; set subscript*/
    while (KBWREC.KBWSUB1 <= 28) /* ; until end of map*/
      ;
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + KBWREC.KBWORK1;
      ;
      if (KBWREC.KBWSUB2 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
        if (KB0UM002.KB0UMSEL[KBWSUB1] == " " /* ; map item not selected*/
         && KB0UW01.KB0UWSEL[KBWSUB2] != " ") /* ; item selected before*/
          KB0UW01.KB0UWSEL[KBWSUB2] = " "; /* deselect item*/
          KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT - 1;
        end
      end
      ;
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
    end
    ;
    KBWREC.KBWSUB1 = 1; /* ; set subscript*/
    while (KBWREC.KBWSUB1 <= 28) /* ; until end of map*/
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + KBWREC.KBWORK1;
      ;
      if (KBWREC.KBWSUB2 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
        if (KB0UM002.KB0UMSEL[KBWSUB1] != " " /* ; map item selected*/
         && KB0UW01.KB0UWSEL[KBWSUB2] == " ") /* ; not selected before*/
          if (KB0UW01.KB0UWCNT < 1) /* ; less than 1 item*/
            KB0UW01.KB0UWSEL[KBWSUB2] = "*";
            KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1;
          else
            if (KBWREC.KBWERRFL == "N") /* ; error flag = no*/
              set KB0UM002.KB0UMSEL[KBWSUB1] cursor, bold;
              KBWREC.KBWERRFL = "Y";
              converseLib.validationFailed(49);
            else
              set KB0UM002.KB0UMSEL[KBWSUB1] bold;
            end
          end
        end
      end
      ;
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
    end
  end
  ;
  ;
end // end KB0U260

// MOVE KB0UW01 TO KBWREC
Function KB0U270()
  ;
  ;
  if ("*" in KB0UW01.KB0UWSEL)
    KBWREC.YBTCD = KB0UW01.KB0UW3CD[sysVar.arrayIndex];
  else
    KBWREC.YBTCD = " ";
  end
  ;
  ;
end // end KB0U270

// SEND/RECEIVE KB0UM002
Function KB0U280()
  ;
  ;
  converse KB0UM002 ;
  ;
  ;
  KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set starting pos*/
  ;
  KBWREC.KBWSUB1 = 28; /* ; reset subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    KBWREC.KBWORK2 = KBWREC.KBWORK1 + KBWREC.KBWSUB1;
    if (KBWREC.KBWORK2 <= KB0UW01.KB0UWTOT)
      set KB0UM002.KB0UMSEL[KBWSUB1] cursor, normal;
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U280

// MOVE KB0UW01 TO KB0UM002
Function KB0U290()
  ;
  ;
  set KB0UM002 initial; /* ; initialize KB0UM002*/
  ;
  KB0UM002.KB0UMDTE = VGVar.currentShortGregorianDate;
  ;
  KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set starting pos*/
  ;
  KBWREC.KBWSUB1 = 28; /* ; reset subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    KBWREC.KBWORK2 = KBWREC.KBWORK1 + KBWREC.KBWSUB1;
    ;
    if (KBWREC.KBWORK2 <= KB0UW01.KB0UWTOT)
      set KB0UM002.KB0UMSEL[KBWSUB1] cursor, normal;
      KB0UM002.KB0UMSEL[KBWSUB1] = KB0UW01.KB0UWSEL[KBWORK2];
      KB0UM002.YBTCD[KBWSUB1] = KB0UW01.KB0UW3CD[KBWORK2];
      KB0UM002.YBTDESC[KBWSUB1] = KB0UW01.KB0UWDSC[KBWORK2];
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U290

// LIST COUNTRY CODES
Function KB0U300()
  ;
  ;
  KB0U310(); /* ; country code initialize*/
  ;
  KBWREC.KBWRETNF = "N"; /* ; reset return flag*/
  while (KBWREC.KBWRETNF == "N") /* ; until return flag = yes*/
    KB0U350(); /* ; country code mainline*/
  end
  ;
  ;
end // end KB0U300

// COUNTRY CODE INIT
Function KB0U310()
  ;
  ;
  KB0U320(); /* ; move XCTTBL to KB0UW01*/
  KB0U390(); /* ; move W/S to KB0UM003*/
  ;
  KB0U380(); /* ; send/receive KB0UM003*/
  ;
  ;
end // end KB0U310

// MOVE XCTTBL TO KB0UW01
Function KB0U320()
  ;
  ;
  set KB0UW01 empty; /* ; init KB0UW01*/
  ;
  KBWREC.KBWSUB1 = 1; /* ; reset subscript 1*/
  KBWREC.KBWSUB2 = 1; /* ; reset subscript 2*/
  ;
  while (XCTTBL.XCTCD[KBWSUB1] != "9999" /* ; until end of XCTTBL*/
   && KBWREC.KBWSUB2 <= 200) /* ; or KB0UWTBL is full*/
    if (XCTTBL.XXXSTAT == "A") /* ; active code*/
      KB0UW01.KB0UWTOT = KB0UWTOT + 1; /* ; increment rec total*/
      ;
      KB0UW01.KB0UW4CD[KBWSUB2] = XCTTBL.XCTCD[KBWSUB1];
      KB0UW01.KB0UWDSC[KBWSUB2] = XCTTBL.XCTDESC[KBWSUB1];
      ;
      if (XCTTBL.XCTCD[KBWSUB1] == KBWREC.XCTCD) /* ;*/
        KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1; /* ; increment select cnt*/
        ;
        KB0UW01.KB0UWSEL[KBWSUB2] = "*";
      end
      KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1; /* ; increment subscript 2*/
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript 1*/
  end
  ;
  KBWREC.KBWPAGE = 1; /* ; reset curr page*/
  KBWREC.KBWTOTPG = 1; /* ; reset ttl pages*/
  ;
  if (KB0UW01.KB0UWTOT > 0) /* ; total recs > 0*/
    KBWREC.KBWTOTPG = KB0UW01.KB0UWTOT / 28; /* ; calc nbr of full pages*/
    KBWREC.KBWRMNDR = KB0UW01.KB0UWTOT % 28; /* ; calc remaining lines*/
    ;
    if (KBWREC.KBWRMNDR > 1) /* ; remaining lines > 0*/
      KBWREC.KBWTOTPG = KBWREC.KBWTOTPG + 1; /* ; increment ttl pages*/
    end
  end
  ;
  ;
end // end KB0U320

// COUNTRY CODE MAIN
Function KB0U350()
  ;
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
  else
    KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
    ;
    KB0U360(); /* ; edit KB0UM003*/
    ;
    if (converseVar.eventKey is enter /* ; user pressed enter*/
     && KBWREC.KBWERRFL == "N")       /* ; no errors*/
      KB0U370(); /* ; move W/S to KBWREC*/
      ;
      KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
    else
      if (KBWREC.KBWERRFL == "N") /* ; no errors*/
        if (converseVar.eventKey is pf7) /* ; scroll back requested*/
          if (KBWREC.KBWPAGE > 1)
            KBWREC.KBWPAGE = KBWREC.KBWPAGE - 1;
            ;
            KB0U390(); /* ; move W/S to KB0UM003*/
          else
            KBWREC.KBWERRFL = "Y";
            converseLib.validationFailed(8);
          end
          ;
        else
          if (converseVar.eventKey is pf8) /* ; scroll frwd requested*/
            if (KBWREC.KBWPAGE < KBWREC.KBWTOTPG)
              KBWREC.KBWPAGE = KBWREC.KBWPAGE + 1;
              ;
              KB0U390(); /* ; move W/S to KB0UM003*/
            else
              KBWREC.KBWERRFL = "Y";
              converseLib.validationFailed(9);
            end
            ;
          end
        end
      end
      ;
      KB0U380(); /* ; send/receive KB0UM003*/
      ;
    end
  end
  ;
  ;
end // end KB0U350

// EDIT KB0UM003
Function KB0U360()
  ;
  ;
  if (converseVar.eventKey not enter /* ; enter key not pressed*/
   && converseVar.eventKey not pf7   /* ; pf7 not pressed*/
   && converseVar.eventKey not pf8)  /* ; pf8 not pressed*/
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(7);
  else
    KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set array start pos*/
    ;
    KBWREC.KBWSUB1 = 1; /* ; set subscript*/
    while (KBWREC.KBWSUB1 <= 28) /* ; until end of map*/
      ;
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + KBWREC.KBWORK1;
      ;
      if (KBWREC.KBWSUB2 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
        if (KB0UM003.KB0UMSEL[KBWSUB1] == " " /* ; map item not selected*/
         && KB0UW01.KB0UWSEL[KBWSUB2] != " ") /* ; item selected before*/
          KB0UW01.KB0UWSEL[KBWSUB2] = " "; /* deselect item*/
          KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT - 1;
        end
      end
      ;
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
    end
    ;
    KBWREC.KBWSUB1 = 1; /* ; set subscript*/
    while (KBWREC.KBWSUB1 <= 28) /* ; until end of map*/
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + KBWREC.KBWORK1;
      ;
      if (KBWREC.KBWSUB2 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
        if (KB0UM003.KB0UMSEL[KBWSUB1] != " " /* ; map item selected*/
         && KB0UW01.KB0UWSEL[KBWSUB2] == " ") /* ; not selected before*/
          if (KB0UW01.KB0UWCNT < 1) /* ; less than 1 item*/
            KB0UW01.KB0UWSEL[KBWSUB2] = "*";
            KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1;
          else
            if (KBWREC.KBWERRFL == "N") /* ; error flag = no*/
              set KB0UM003.KB0UMSEL[KBWSUB1] cursor, bold;
              KBWREC.KBWERRFL = "Y";
              converseLib.validationFailed(49);
            else
              set KB0UM003.KB0UMSEL[KBWSUB1] bold;
            end
          end
        end
      end
      ;
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
    end
  end
  ;
  ;
end // end KB0U360

// MOVE KB0UW01 TO KBWREC
Function KB0U370()
  ;
  ;
  if ("*" in KB0UW01.KB0UWSEL)
    KBWREC.XCTCD = KB0UW01.KB0UW4CD[sysVar.arrayIndex];
  else
    KBWREC.XCTCD = " ";
  end
  ;
  ;
end // end KB0U370

// SEND/RECEIVE KB0UM003
Function KB0U380()
  ;
  ;
  converse KB0UM003 ;
  ;
  ;
  KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set starting pos*/
  ;
  KBWREC.KBWSUB1 = 28; /* ; reset subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    KBWREC.KBWORK2 = KBWREC.KBWORK1 + KBWREC.KBWSUB1;
    if (KBWREC.KBWORK2 <= KB0UW01.KB0UWTOT)
      set KB0UM002.KB0UMSEL[KBWSUB1] cursor, normal;
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U380

// MOVE KB0UW01 TO KB0UM003
Function KB0U390()
  ;
  ;
  set KB0UM003 initial; /* ; initialize KB0UM003*/
  ;
  KB0UM003.KB0UMDTE = VGVar.currentShortGregorianDate;
  ;
  KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set starting pos*/
  ;
  KBWREC.KBWSUB1 = 28; /* ; reset subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    KBWREC.KBWORK2 = KBWREC.KBWORK1 + KBWREC.KBWSUB1;
    ;
    if (KBWREC.KBWORK2 <= KB0UW01.KB0UWTOT)
      set KB0UM003.KB0UMSEL[KBWSUB1] cursor, normal;
      KB0UM003.KB0UMSEL[KBWSUB1] = KB0UW01.KB0UWSEL[KBWORK2];
      KB0UM003.XCTCD[KBWSUB1] = KB0UW01.KB0UW4CD[KBWORK2];
      KB0UM003.XCTDESC[KBWSUB1] = KB0UW01.KB0UWDSC[KBWORK2];
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U390

// LIST STATE CODES
Function KB0U400()
  ;
  ;
  KB0U410(); /* ; state code initialize*/
  ;
  KBWREC.KBWRETNF = "N"; /* ; reset return flag*/
  while (KBWREC.KBWRETNF == "N") /* ; until return flag = yes*/
    KB0U450(); /* ; state code mainline*/
  end
  ;
  ;
end // end KB0U400

// STATE CODE INIT
Function KB0U410()
  ;
  ;
  KB0U420(); /* ; move XSTTBL to KB0UW01*/
  KB0U490(); /* ; move W/S to KB0UM004*/
  ;
  KB0U480(); /* ; send/receive KB0UM004*/
  ;
  ;
end // end KB0U410

// MOVE xstTBL TO KB0UW01
Function KB0U420()
  ;
  ;
  set KB0UW01 empty; /* ; init KB0UW01*/
  ;
  KBWREC.KBWSUB1 = 1; /* ; reset subscript 1*/
  KBWREC.KBWSUB2 = 1; /* ; reset subscript 2*/
  ;
  while (XSTTBL.XSTCD[KBWSUB1] != "99" /* ; until end of xsttbl*/
   && KBWREC.KBWSUB2 <= 200) /* ; or KB0UWTBL is full*/
    if (XSTTBL.XXXSTAT == "A") /* ; active code*/
      KB0UW01.KB0UWTOT = KB0UWTOT + 1; /* ; increment rec total*/
      ;
      KB0UW01.KB0UW2CD[KBWSUB2] = XSTTBL.XSTCD[KBWSUB1];
      KB0UW01.KB0UWDSC[KBWSUB2] = XSTTBL.XSTDESC[KBWSUB1];
      ;
      if (XSTTBL.XSTCD[KBWSUB1] == KBWREC.XSTCD) /* ;*/
        KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1; /* ; increment select cnt*/
        ;
        KB0UW01.KB0UWSEL[KBWSUB2] = "*";
      end
      KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1; /* ; increment subscript 2*/
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript 1*/
  end
  ;
  KBWREC.KBWPAGE = 1; /* ; reset curr page*/
  KBWREC.KBWTOTPG = 1; /* ; reset ttl pages*/
  ;
  if (KB0UW01.KB0UWTOT > 0) /* ; total recs > 0*/
    KBWREC.KBWTOTPG = KB0UW01.KB0UWTOT / 28; /* ; calc nbr of full pages*/
    KBWREC.KBWRMNDR = KB0UW01.KB0UWTOT % 28; /* ; calc remaining lines*/
    ;
    if (KBWREC.KBWRMNDR > 1) /* ; remaining lines > 0*/
      KBWREC.KBWTOTPG = KBWREC.KBWTOTPG + 1; /* ; increment ttl pages*/
    end
  end
  ;
  ;
end // end KB0U420

// state code MAIN
Function KB0U450()
  ;
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
  else
    KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
    ;
    KB0U460(); /* ; edit KB0UM004*/
    ;
    if (converseVar.eventKey is enter /* ; user pressed enter*/
     && KBWREC.KBWERRFL == "N")       /* ; no errors*/
      KB0U470(); /* ; move W/S to KBWREC*/
      ;
      KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
    else
      if (KBWREC.KBWERRFL == "N") /* ; no errors*/
        if (converseVar.eventKey is pf7) /* ; scroll back requested*/
          if (KBWREC.KBWPAGE > 1)
            KBWREC.KBWPAGE = KBWREC.KBWPAGE - 1;
            ;
            KB0U490(); /* ; move W/S to KB0UM004*/
          else
            KBWREC.KBWERRFL = "Y";
            converseLib.validationFailed(8);
          end
          ;
        else
          if (converseVar.eventKey is pf8) /* ; scroll frwd requested*/
            if (KBWREC.KBWPAGE < KBWREC.KBWTOTPG)
              KBWREC.KBWPAGE = KBWREC.KBWPAGE + 1;
              ;
              KB0U490(); /* ; move W/S to KB0UM004*/
            else
              KBWREC.KBWERRFL = "Y";
              converseLib.validationFailed(9);
            end
            ;
          end
        end
      end
      ;
      KB0U480(); /* ; send/receive KB0UM004*/
      ;
    end
  end
  ;
  ;
end // end KB0U450

// EDIT KB0UM004
Function KB0U460()
  ;
  ;
  if (converseVar.eventKey not enter /* ; enter key not pressed*/
   && converseVar.eventKey not pf7   /* ; pf7 not pressed*/
   && converseVar.eventKey not pf8)  /* ; pf8 not pressed*/
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(7);
  else
    KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set array start pos*/
    ;
    KBWREC.KBWSUB1 = 1; /* ; set subscript*/
    while (KBWREC.KBWSUB1 <= 28) /* ; until end of map*/
      ;
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + KBWREC.KBWORK1;
      ;
      if (KBWREC.KBWSUB2 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
        if (KB0UM004.KB0UMSEL[KBWSUB1] == " " /* ; map item not selected*/
         && KB0UW01.KB0UWSEL[KBWSUB2] != " ") /* ; item selected before*/
          KB0UW01.KB0UWSEL[KBWSUB2] = " "; /* deselect item*/
          KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT - 1;
        end
      end
      ;
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
    end
    ;
    KBWREC.KBWSUB1 = 1; /* ; set subscript*/
    while (KBWREC.KBWSUB1 <= 28) /* ; until end of map*/
      KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + KBWREC.KBWORK1;
      ;
      if (KBWREC.KBWSUB2 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
        if (KB0UM004.KB0UMSEL[KBWSUB1] != " " /* ; map item selected*/
         && KB0UW01.KB0UWSEL[KBWSUB2] == " ") /* ; not selected before*/
          if (KB0UW01.KB0UWCNT < 1) /* ; less than 1 item*/
            KB0UW01.KB0UWSEL[KBWSUB2] = "*";
            KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1;
          else
            if (KBWREC.KBWERRFL == "N") /* ; error flag = no*/
              set KB0UM004.KB0UMSEL[KBWSUB1] cursor, bold;
              KBWREC.KBWERRFL = "Y";
              converseLib.validationFailed(49);
            else
              set KB0UM004.KB0UMSEL[KBWSUB1] bold;
            end
          end
        end
      end
      ;
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
    end
  end
  ;
  ;
end // end KB0U460

// MOVE KB0UW01 TO KBWREC
Function KB0U470()
  ;
  ;
  if ("*" in KB0UW01.KB0UWSEL)
    KBWREC.XSTCD = KB0UW01.KB0UW2CD[sysVar.arrayIndex];
  else
    KBWREC.XSTCD = " ";
  end
  ;
  ;
end // end KB0U470

// SEND/RECEIVE KB0UM004
Function KB0U480()
  ;
  ;
  converse KB0UM004 ;
  ;
  ;
  KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set starting pos*/
  ;
  KBWREC.KBWSUB1 = 28; /* ; reset subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    KBWREC.KBWORK2 = KBWREC.KBWORK1 + KBWREC.KBWSUB1;
    if (KBWREC.KBWORK2 <= KB0UW01.KB0UWTOT)
      set KB0UM004.KB0UMSEL[KBWSUB1] cursor, normal;
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U480

// MOVE KB0UW01 TO KB0UM004
Function KB0U490()
  ;
  ;
  set KB0UM004 initial; /* ; initialize kb0um004*/
  ;
  KB0UM004.KB0UMDTE = VGVar.currentShortGregorianDate;
  ;
  KBWREC.KBWORK1 = KBWREC.KBWPAGE * 28 - 28; /* ; set starting pos*/
  ;
  KBWREC.KBWSUB1 = 28; /* ; reset subscript*/
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    KBWREC.KBWORK2 = KBWREC.KBWORK1 + KBWREC.KBWSUB1;
    ;
    if (KBWREC.KBWORK2 <= KB0UW01.KB0UWTOT)
      set KB0UM004.KB0UMSEL[KBWSUB1] cursor, normal;
      KB0UM004.KB0UMSEL[KBWSUB1] = KB0UW01.KB0UWSEL[KBWORK2];
      KB0UM004.XSTCD[KBWSUB1] = KB0UW01.KB0UW2CD[KBWORK2];
      KB0UM004.XSTDESC[KBWSUB1] = KB0UW01.KB0UWDSC[KBWORK2];
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U490

// LIST MAIL LEVEL CODES
Function KB0U500()
  ;
  ;
  KB0U510(); /* ; mailing level initialize*/
  ;
  KBWREC.KBWRETNF = "N"; /* ; reset return flag*/
  ;
  while (KBWREC.KBWRETNF == "N") /* ; until return flag = yes*/
    KB0U550(); /* ; mailing level mainline*/
  end
  ;
  ;
end // end KB0U500

// MAILING LEVEL INIT
Function KB0U510()
  ;
  ;
  KB0U520(); /* ; move YmlTBL to KB0UW01*/
  ;
  KB0U590(); /* ; move W/S to KB0UM005*/
  ;
  ;
  ;
end // end KB0U510

// MOVE YMLTBL TO KB0UW01
Function KB0U520()
  ;
  ;
  set KB0UW01 empty; /* ; init KB0UW01*/
  ;
  KBWREC.KBWSUB1 = 1; /* ; reset subscript 1*/
  KBWREC.KBWSUB2 = 1; /* ; reset subscript 2*/
  ;
  while (YMLTBL.YMLCD[KBWSUB1] != "99") /* ; until end of YmlTBL*/
    if (YMLTBL.XXXSTAT[KBWSUB1] == "A") /* ; active code*/
      KB0UW01.KB0UWTOT = KB0UWTOT + 1; /* ; increment rec total*/
      ;
      KB0UW01.KB0UW2CD[KBWSUB2] = YMLTBL.YMLCD[KBWSUB1];
      KB0UW01.KB0UWDSC[KBWSUB2] = YMLTBL.YMLDESC[KBWSUB1];
      ;
      if (YMLTBL.YMLCD[KBWSUB1] == KBWREC.YMLCD) /* ;*/
        KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1; /* ; increment select cnt*/
        KB0UW01.KB0UWSEL[KBWSUB2] = "*";
      end
      ;
      KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1; /* ; increment subscript 2*/
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript 1*/
  end
  ;
  ;
end // end KB0U520

// MAILING LEVEL MAIN
Function KB0U550()
  ;
  KB0U580(); /* ; send/receive kb0um005*/
  ;
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
  else
    if (converseVar.eventKey is enter) /* ; user pressed enter*/
      KB0U560(); /* ; edit KB0UM005*/
      ;
      if (KBWREC.KBWERRFL == "N") /* ; no errors*/
        KB0U570(); /* ; move W/S to KBWREC*/
        KBWREC.KBWRETNF = "Y"; /* ; set return flag*/
      end
    else
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(7);
    end
  end
  ;
end // end KB0U550

// EDIT KB0UM005
Function KB0U560()
  ;
  ;
  KBWREC.KBWSUB1 = 1; /* ; set subscript*/
  ;
  while (KBWREC.KBWSUB1 <= 10) /* ; until end of map*/
    ;
    if (KBWREC.KBWSUB1 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
      if (KB0UM005.KB0UMSEL[KBWSUB1] == " " /* ; map item not selected*/
       && KB0UW01.KB0UWSEL[KBWSUB1] != " ") /* ; item selected before*/
        KB0UW01.KB0UWSEL[KBWSUB1] = " "; /* deselect item*/
        KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT - 1; /* update select count*/
      end
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
  end
  ;
  KBWREC.KBWSUB1 = 1; /* ; set subscript*/
  ;
  while (KBWREC.KBWSUB1 <= 10) /* ; until end of map*/
    ;
    if (KBWREC.KBWSUB1 <= KB0UW01.KB0UWTOT) /* ; not at end of array*/
      if (KB0UM005.KB0UMSEL[KBWSUB1] != " " /* ; map item selected*/
       && KB0UW01.KB0UWSEL[KBWSUB1] == " ") /* ; not selected before*/
        if (KB0UW01.KB0UWCNT < 1) /* ; less than 1 item*/
          KB0UW01.KB0UWSEL[KBWSUB1] = "*";
          KB0UW01.KB0UWCNT = KB0UW01.KB0UWCNT + 1;
        else
          if (KBWREC.KBWERRFL == "N") /* ; error flag = no*/
            set KB0UM005.KB0UMSEL[KBWSUB1] cursor, bold;
            KBWREC.KBWERRFL = "Y";
            converseLib.validationFailed(49); /* only one item can be selected*/
          else
            set KB0UM005.KB0UMSEL[KBWSUB1] bold;
          end
        end
      end
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1; /* ; increment subscript*/
  end
  ;
  ;
end // end KB0U560

// MOVE KB0UW01 TO KBWREC
Function KB0U570()
  ;
  ;
  if ("*" in KB0UW01.KB0UWSEL)
    KBWREC.YMLCD = KB0UW01.KB0UW2CD[sysVar.arrayIndex];
  else
    KBWREC.YMLCD = " ";
  end
  ;
  ;
end // end KB0U570

// SEND/RECEIVE KB0UM005
Function KB0U580()
  ;
  ;
  converse KB0UM005 ;
  ;
  ;
  KBWREC.KBWSUB1 = 10; /* ; reset subscript*/
  ;
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    if (KBWREC.KBWSUB1 <= KB0UW01.KB0UWTOT) /* ; total number of recs*/
      set KB0UM005.KB0UMSEL[KBWSUB1] cursor, normal;
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U580

// MOVE KB0UW01 TO KB0UM005
Function KB0U590()
  ;
  ;
  set KB0UM005 initial; /* ; initialize KB0UM005*/
  ;
  KB0UM005.KB0UMDTE = VGVar.currentShortGregorianDate;
  ;
  ;
  KBWREC.KBWSUB1 = 10; /* ; reset subscript*/
  ;
  while (KBWREC.KBWSUB1 > 0) /* ; until top of screen*/
    ;
    if (KBWREC.KBWSUB1 <= KB0UW01.KB0UWTOT)
      set KB0UM005.KB0UMSEL[KBWSUB1] cursor, normal;
      KB0UM005.KB0UMSEL[KBWSUB1] = KB0UW01.KB0UWSEL[KBWSUB1];
      KB0UM005.YMLCD[KBWSUB1] = KB0UW01.KB0UW2CD[KBWSUB1];
      KB0UM005.YMLDESC[KBWSUB1] = KB0UW01.KB0UWDSC[KBWSUB1];
    end
    ;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1; /* ; decrement subscript*/
  end
  ;
  ;
end // end KB0U590

//*** RECORD=KB0UW01 ****
// Working area for KB0U, Corporate table display/select appl.
// ***********************
Record KB0UW01 type basicRecord
  10 KB0UWTOT KB0UWTOT ; 
  10 KB0UWCNT KB0UWCNT ; 
  10 KB0UWTBL KB0UWTBL [200] ; 
    15 KB0UWSEL KB0UWSEL ; 
    15 KB0UW4CD KB0UW4CD ; 
      20 KB0UW4NM KB0UW4NM ; 
    15 KB0UW3CD KB0UW3CD ; 
    15 KB0UW2CD KB0UW2CD ; 
    15 KB0UWDSC KB0UWDSC ; 
end // end KB0UW01

// 2 digit code
DataItem KB0UW2CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3 character code
DataItem KB0UW3CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4 digit code
DataItem KB0UW4CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4 digit code
DataItem KB0UW4NM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of recs selected
DataItem KB0UWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// desc
DataItem KB0UWDSC char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection code
DataItem KB0UWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w/s table
DataItem KB0UWTBL char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total nbr of recs
DataItem KB0UWTOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

