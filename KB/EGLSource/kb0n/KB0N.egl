package kb0n;

import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB014;
import corpcom3.XPKB015;
import corpcom3.XPKB022;
import corpcom3.XPKB025;
import corpcom3.XPKB026;
import corpcom3.XPKB028;
import corpcom3.XPKB030;
import corpcom3.XPKB031;
import corpcom3.XPKB900;
import corpcom3.XPKB990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XSTTBL;
import corpy2.YBTTBL;
import kb.common.*;
import kl.common.KIZTBL;
import ku.common.KUEREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0N ****
// This is the Buyer Notepad Update application
// ;
// Date created: April, 1990
// Maintenance:
// ;
// Init      Date    Reason
// ----     ------   ------------------------------------------
// tmorri  02/01/93  This application has been modified as
//                   part of the Buyer System Enhancement
//                   project.  The main objective of this
//                   project is to give Nike Sales Reps and
//                   Sales Admin. a way to associate buyers to
//                   sales reps via the sales responsibility
//                   code.  (See specs for details relating to
//                   this specific applicaition).
// ;
// tmorri  03/15/93  Set cursor on map to first blank line.
//                   (KB0N090)
// *********************
Program KB0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0NW01 KB0NW01; // record
  KB3REC KB3REC; // record
  KBAREC KBAREC; // record
  KBBREC KBBREC; // record
  KBCREC KBCREC; // record
  KBIREC KBIREC; // record
  KBWREC KBWREC; // record
  KBXREC KBXREC; // record
  KUEREC KUEREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL; // table
  use XSTTBL; // table
  use YBTTBL; // table
  use KB0NM.KB0NM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0N001: KB0N001();
    ;
    ;
    goto KB0N005;
    ;
    ;
    KB0N005: KB0N005();
    ;
    ;
    goto KB0N005;
    ;
    ;
  end // end main
end // end KB0N

// UPDATE NOTES INITIALIZE
Function KB0N001()
  ;
  ;
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/
  ;
  XPKB028(); /* ; purge temp storage*/
  set KB0NM001 initial; /* ; init map*/
  ;
  if (COMMAREA.CAFROMAP == "KB0A" /* ; from buyer add*/
   || COMMAREA.CAFROMAP == "KB0C" /* ; Buyer change*/
   || COMMAREA.CAFROMAP == "KB0T" /* ; Attach Accounts*/
   || COMMAREA.CAFROMAP == "KB0D" /* ; Detach Accounts*/
   || COMMAREA.CAFROMAP == "KB0R") /* ; Re-Assign Accounts*/
    XPKB002(); /* ; Initialize KBWREC*/
    XPKB010(); /* ; Read KBAREC*/
    if (KBWREC.KBWBFND == "Y") /* ; valid buyer id*/
      KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
      KB0N100(); /* ; load comments to temp storage*/
      if (KBWREC.KBWERRFL == "N") /* ; no errors*/
        KB0NW01.KB0NW-CURR-PAGE = 1; /* set page to 1*/
      end
    end
    KB0N090(); /* ; move ts to screen*/
  else
    set KBWREC empty; /* ; initialize kbwrec*/
    ;
    COMMAREA.CATOAP = "KB0M"; /* ; xfer to buyer menu*/
    COMMAREA.CAUSERA = KBWREC.KBWGROUP; /* init commarea*/
    ;
    XSEXIT();
    exit program;
  end
  ;
  ;
end // end KB0N001

// UPDATE NOTES MAINLINE
Function KB0N005()
  ;
  KB0N080(); /* ; converse screen*/
  ;
  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* ; save last pfkey*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset current pfkey*/
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    XPKB028(); /* ; purge temp storage*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* ; xfer to prev appl*/
    COMMAREA.CAUSERA = KBWREC.KBWGROUP;
    ;
    XSEXIT();
    ;
    KB0NM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    COMMAREA.CAUSERA = " ";
  else
    if (converseVar.eventKey is pf4) /* ; Menu requested*/
      KBWREC.KBWPFKEY[1] = "PF4"; /* ; curr pfkey = pf4*/
      ;
      if (KBWREC.KBWADDFL == "A" /* ; user in 'add' mode*/
       && KBWREC.KBWPFKEY[2] != "PF4") /* ; pf4 unconfirmed*/
        converseLib.validationFailed(144);
      else
        if (KBWREC.KBWADDFL == "A") /* ; user in 'add' mode*/
          XPKB030(); /* ; purge sessions work*/
        end
        ;
        XPKB028(); /* ; purge temp storage*/
        COMMAREA.CATOAP = "KB0M"; /* ; xfer to 'KB0M'*/
        ;
        XSEXIT();
        ;
        KB0NM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
      end
      ;
    else
      if (converseVar.eventKey is pf7 /* ; back requested*/
       || converseVar.eventKey is pf8 /* ; frwd requested*/
       || converseVar.eventKey is enter)
  /* next sentence*/
      else
        converseLib.validationFailed(7); /* ; invalid pfkey*/
        KBWREC.KBWERRFL = "Y";
      end
    end
  end
  ;
  ;
  if (KBWREC.KBWBFND == "Y") /* ; valid buyer id*/
    if (KBWREC.KBWERRFL == "N") /* ; no errors*/
      ;
      KB0N050(); /* ; edit KB0NM001*/
      ;
      if (KBWREC.KBWERRFL == "N") /* ; still no errors*/
        if (converseVar.eventKey is pf7 /* ; scroll back*/
         || converseVar.eventKey is pf8 /* ; scroll forward*/
         || KB0NM001.KBWPAGE != KB0NW01.KB0NW-CURR-PAGE)
          KB0N048(); /* ; build new page*/
        else
          if (KBWREC.KBWERRFL == "N") /* ; no errors*/
            KB0N030(); /* ; update database*/
            if (KB0NW01.KB0NW-UPDATED-FL == "Y") /* updates made*/
              XPKB028(); /* ; purge ts*/
              KB0N100(); /* ; reload ts with changes*/
              if (KBWREC.KBWERRFL == "N") /* ; no errors*/
                KB0NW01.KB0NW-CURR-PAGE = 1; /* ; display page one*/
              end
              KB0N090(); /* ; move t/s to screen*/
            else /* ; no changes made*/
              XPKB028(); /* ; purge temp storage*/
              COMMAREA.CATOAP = COMMAREA.CAFROMAP;
                                   /* ; xfer to prev appl*/
              COMMAREA.CAUSERA = KBWREC.KBWGROUP;
              ;
              XSEXIT();
              ;
              KB0NM001.VAGen_EZEMSG = COMMAREA.CAMSG;
              COMMAREA.CAMSG = " ";
              COMMAREA.CAUSERA = " ";
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KB0N005

// DATABASE ROUTINE
Function KB0N030()
  ;
  KB0NW01.KB0NW-UPDATED-FL = "N"; /* reset updated flag*/
  ;
  XPKB031(); /* ; get current date/time*/
  KB0N032(); /* ; build KUZREC*/
  ;
  if (KB0NM001.KB0NMDCF == "Y") /* ; delete all comments*/
    KB0N033(); /* ; group delete comments*/
    KB0NW01.KB0NW-UPDATED-FL = "Y"; /* updates completed*/
  else
    if (KB0NW01.KB0NW-MAX-PAGE > 0) /* comments exist*/
      KB0NW01.KB0NW-CURR-PAGE = 1; /* ; start with page one*/
      ;
      while (KB0NW01.KB0NW-CURR-PAGE <= KB0NW01.KB0NW-MAX-PAGE)
        ;
        KBWREC.KBWPAGE = KB0NW01.KB0NW-CURR-PAGE;
        XPKB025(); /* ; read temp storage*/
        KB0NW01.KB0NW-SUB = 1; /* ; reset comment subscript*/
        ;
        while (KB0NW01.KB0NW-SUB <= 15) /* ; process the entire page*/
          ;
          KB0N034(); /* ; set transaction code*/
          ;
          if (KBCREC.KBCTRAN[KB0NW-SUB] == "D") /* ; transaction = delete*/
            KB0N035(); /* ; delete comment line*/
            KB0NW01.KB0NW-UPDATED-FL = "Y"; /* updates completed*/
          else
            if (KBCREC.KBCTRAN[KB0NW-SUB] == "A") /* ; transaction = add*/
              KB0N036(); /* ; add comment line*/
              KB0NW01.KB0NW-UPDATED-FL = "Y"; /* updates completed*/
            else
              if (KBCREC.KBCTRAN[KB0NW-SUB] == "U") /* ; transaction = update*/
                KB0N037(); /* ; update comment line*/
                KB0NW01.KB0NW-UPDATED-FL = "Y"; /* updates completed*/
              end
            end
          end
          KB0NW01.KB0NW-SUB = KB0NW01.KB0NW-SUB + 1;
        end
        KB0NW01.KB0NW-CURR-PAGE = KB0NW01.KB0NW-CURR-PAGE + 1;
      end
    end
  end
  ;
  if (KB0NW01.KB0NW-UPDATED-FL == "Y")
    converseLib.validationFailed(88); /* updates completed*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
  end
  ;
  ;
end // end KB0N030

// BUILD KUEREC AUDIT (KUZREC)
Function KB0N032()
  ;
  ;
  set KUZREC empty;
  ;
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KBWREC.KBABUYID;
  KUZREC.ZZZSDT = TA2REC.TA2GRGGN;
  KUZREC.ZZHHMMSS = TA2REC.TA2TIMHM;
  KUZREC.XXXTBLNM = "VCOMNTB1"; /* ; table = comments*/
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1LOCAT[1] = "KB0N032";
    TA1REC.TA1LOCAT[2] = "KUZTBL";
    TA1REC.TA1LOCAT[3] = "NTFND";
    TA1REC.TA1DBASE = "DCUST";
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ;
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    XPKB900();
  end
  ;
  ;
end // end KB0N032

// GROUP DELETE KUEREC
Function KB0N033()
  ;
  ;
  set SQLCA empty;
  set KUEREC empty;
  ;
  KUEREC.KUECMTID = KBWREC.KBABUYID; /* ; set comment id*/
  KUEREC.KUECTYP = "B"; /* ; set comment type*/
  KUEREC.XNDCD = " "; /* ; set dept id*/
  KUEREC.KUECSEQ = -1; /* ; set sequence nbr*/
  ;
  call "IO0250" ("D ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful delete*/
    set KB3REC empty; /* ; initialize KB3REC*/
    ;
    KB3REC.KB3TRAN = "C"; /* ; transaction = delete*/
    KB3REC.KB3DATA = KUEREC.KUEGRP; /* ; data = KUEREC*/
    KUZREC.KUZTYPE = "D"; /* ; type = 'change'*/
    KUZREC.KUZBFCD = " "; /* ; reset before/after code*/
    ;
    KB0N039(); /* ; write KUEREC audit rec*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; bad db2 return code*/
      KBWREC.KBWCMTID = KUEREC.KUECMTID; /* build comment key*/
      KBWREC.KBWCMTTP = KUEREC.KUECTYP;
      KBWREC.KBWCMTSQ = KUEREC.KUECSEQ;
      ;
      set TA1REC empty; /* ; build err diag*/
      ;
      TA1REC.TA1LOCAT[1] = "KB0N033";
      TA1REC.TA1LOCAT[2] = "IO0250";
      TA1REC.TA1LOCAT[3] = "D ";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      TA1REC.TA1TBLKE = KBWREC.KBWCMTKE;
      ;
      XPKB900(); /* ; database abend*/
    end
  end
  ;
  ;
end // end KB0N033

// SET TRANSACTION CODE
Function KB0N034()
  ;
  ;
  if (KBCREC.KBC-CHANGE-FL[KB0NW-SUB] != "Y") /* no changes made*/
    KBCREC.KBCTRAN[KB0NW-SUB] = " "; /* ; no transaction code*/
  else
    if (KBCREC.KUECSEQ[KB0NW-SUB] == 0 /* ; no comment seq nbr*/
     && KB0NM001.KUECOMNT[KB0NW-SUB] != " ") /* map line has text*/
      KBCREC.KBCTRAN[KB0NW-SUB] = "A"; /* ; transaction = 'add'*/
      KB0NW01.KB0NW-LAST-SEQ = KB0NW01.KB0NW-LAST-SEQ + 1;
      KBCREC.KUECSEQ[KB0NW-SUB] = KB0NW01.KB0NW-LAST-SEQ;
    else
      if (KBCREC.KUECSEQ[KB0NW-SUB] > 0 /* ; comment seq nbr*/
       && KB0NM001.KUECOMNT[KB0NW-SUB] != " ") /* ; map line has text*/
        KBCREC.KBCTRAN[KB0NW-SUB] = "U"; /* ; transaction = 'update'*/
      else
        if (KBCREC.KUECSEQ[KB0NW-SUB] > 0 /* ; comment seq nbr*/
         && KB0NM001.KUECOMNT[KB0NW-SUB] == " ") /* ; map line erased*/
          KBCREC.KBCTRAN[KB0NW-SUB] = "D"; /* ; transaction = 'delete'*/
        end
      end
    end
  end
  ;
  ;
end // end KB0N034

// DELETE KUEREC
Function KB0N035()
  ;
  ;
  set SQLCA empty;
  set KUEREC empty;
  ;
  KUEREC.KUECMTID = KBWREC.KBABUYID;
  KUEREC.KUECTYP = "B";
  KUEREC.KUECSEQ = KBCREC.KUECSEQ[KB0NW-SUB];
  KUEREC.KUECOMNT = KBCREC.KUECOMNT[KB0NW-SUB];
  ;
  call "IO0250" ("D ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful delete*/
    set KB3REC empty; /* ; initialize KB3REC*/
    ;
    KB3REC.KB3TRAN = "C"; /* ; transaction = change*/
    KB3REC.KB3DATA = KUEREC.KUEGRP; /* ; data = KUEREC*/
    KUZREC.KUZTYPE = "C"; /* ; type = 'change'*/
    KUZREC.KUZBFCD = " "; /* ; set before/after code*/
    ;
    KB0N039(); /* ; write KUEREC audit*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; unsuccessful delete*/
      KBWREC.KBWCMTID = KUEREC.KUECMTID; /* ; build comment key*/
      KBWREC.KBWCMTTP = KUEREC.KUECTYP;
      KBWREC.KBWCMTSQ = KUEREC.KUECSEQ;
      ;
      set TA1REC empty; /* ; build err diag*/
      ;
      TA1REC.TA1LOCAT[1] = "KB0N035";
      TA1REC.TA1LOCAT[2] = "IO0250";
      TA1REC.TA1LOCAT[3] = "D ";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      TA1REC.TA1TBLKE = KBWREC.KBWCMTKE;
      ;
      XPKB900(); /* ; database abend*/
    end
  end
  ;
  ;
end // end KB0N035

// ADD KUEREC
Function KB0N036()
  ;
  ;
  set SQLCA empty;
  set KUEREC empty;
  ;
  KUEREC.KUECMTID = KBWREC.KBABUYID; /* ; set comment id*/
  KUEREC.KUECTYP = "B"; /* ; set comment type*/
  ;
  KUEREC.KUECSEQ = KBCREC.KUECSEQ[KB0NW-SUB];
  KUEREC.KUECOMNT = KBCREC.KUECOMNT[KB0NW-SUB];
  KUEREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  KUEREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  call "IO0250" ("A ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful add*/
    set KB3REC empty; /* ; initialize KB3REC*/
    ;
    KB3REC.KB3DATA = KUEREC.KUEGRP; /* ; data = KUEREC*/
    if (KBWREC.KBWADDFL == "A") /* ; new buyer*/
      KB3REC.KB3TRAN = "A"; /* ; transaction = add*/
      KUZREC.KUZTYPE = "A"; /* ; transaction = 'add'*/
      KUZREC.KUZBFCD = " "; /* ; reset before/after code*/
    else
                                   /* ; new comments - old buyer*/
      KB3REC.KB3TRAN = "C"; /* ; transaction = change*/
      KUZREC.KUZTYPE = "C"; /* ; transaction = 'change'*/
      KUZREC.KUZBFCD = " "; /* ; reset before/after code*/
    end
    ;
    KB0N039(); /* ; write KUEREC audit*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; unsuccessful add*/
      KBWREC.KBWCMTID = KUEREC.KUECMTID; /* ; build comment key*/
      KBWREC.KBWCMTTP = KUEREC.KUECTYP;
      KBWREC.KBWCMTSQ = KUEREC.KUECSEQ;
      ;
      set TA1REC empty; /* ; build err diag*/
      ;
      TA1REC.TA1LOCAT[1] = "KB0N036";
      TA1REC.TA1LOCAT[2] = "IO0250";
      TA1REC.TA1LOCAT[3] = "A ";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      TA1REC.TA1TBLKE = KBWREC.KBWCMTKE;
      ;
      XPKB900(); /* ; database abend*/
    end
  end
  ;
  ;
end // end KB0N036

// UPDATE KUEREC
Function KB0N037()
  ;
  ;
  set SQLCA empty;
  set KUEREC empty;
  ;
  KUEREC.KUECMTID = KBWREC.KBABUYID; /* ; set comment id*/
  KUEREC.KUECTYP = "B"; /* ; set comment type*/
  KUEREC.KUECSEQ = KBCREC.KUECSEQ[KB0NW-SUB]; /* set sequence nbr*/
  ;
  call "IO0250" ("S ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    set KB3REC empty; /* ; initialize KB3REC*/
    ;
    KB3REC.KB3TRAN = "C"; /* ; transaction = change*/
    KB3REC.KB3DATA = KUEREC.KUEGRP; /* ; data = KUEREC*/
    KUZREC.KUZTYPE = "C"; /* ; type = 'change'*/
    KUZREC.KUZBFCD = "B"; /* ; set before/after code*/
    ;
    KUEREC.KUECOMNT = KBCREC.KUECOMNT[KB0NW-SUB];
    KUEREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    KUEREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    ;
    call "IO0250" ("U ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* ; successful update*/
      KB0N039(); /* ; write KUEREC audit*/
      ;
      set KB3REC empty; /* ; initialize KB3REC*/
      ;
      KB3REC.KB3TRAN = "C"; /* ; transaction = change*/
      KB3REC.KB3DATA = KUEREC.KUEGRP; /* ; data = KUEREC*/
      KUZREC.KUZTYPE = "C"; /* ; type = 'change'*/
      KUZREC.KUZBFCD = "A"; /* ; reset before/after code*/
      ;
      KB0N039(); /* ; write KUEREC audit*/
    else
      if (SQLCA.VAGen_SQLCODE != 100) /* ; unsuccessful update*/
        KBWREC.KBWCMTID = KUEREC.KUECMTID; /* build comment key*/
        KBWREC.KBWCMTTP = KUEREC.KUECTYP;
        KBWREC.KBWCMTSQ = KUEREC.KUECSEQ;
        ;
        set TA1REC empty; /* ; build err diag*/
        ;
        TA1REC.TA1LOCAT[1] = "KB0N037";
        TA1REC.TA1LOCAT[2] = "IO0250";
        TA1REC.TA1LOCAT[3] = "U ";
        TA1REC.TA1MAP = KBWREC.XXXMAPNM;
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCOMNT01";
        TA1REC.TA1TBLKE = KBWREC.KBWCMTKE;
        ;
        XPKB900(); /* ; database abend*/
      end
    end
    ;
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* ; unsuccessful read*/
      KBWREC.KBWCMTID = KUEREC.KUECMTID; /* ; build comment key*/
      KBWREC.KBWCMTTP = KUEREC.KUECTYP;
      KBWREC.KBWCMTSQ = KUEREC.KUECSEQ;
      ;
      set TA1REC empty; /* ; build err diag*/
      ;
      TA1REC.TA1LOCAT[1] = "KB0N037";
      TA1REC.TA1LOCAT[2] = "IO0250";
      TA1REC.TA1LOCAT[3] = "S ";
      TA1REC.TA1MAP = KBWREC.XXXMAPNM;
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      TA1REC.TA1TBLKE = KBWREC.KBWCMTKE;
      ;
      XPKB900(); /* ; database abend*/
    end
  end
  ;
  ;
end // end KB0N037

// ADD KUEREC AUDIT REC
Function KB0N039()
  ;
  ;
  KUZREC.KUZDATA = KB3REC.KB3GRP; /* ; set audit data*/
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* ; unsuccessful add*/
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ; /* ; build audit key*/
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    KBWREC.KBWAUID = KUZREC.KUCCOID;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0N039";
    TA1REC.TA1LOCAT[2] = "IO0500";
    TA1REC.TA1LOCAT[3] = "A ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
end // end KB0N039

// CHECK FOR SCREEN CHANGES
Function KB0N040()
  ;
  KB0NW01.KB0NW-CHANGE-FL = "N"; /* reset change flag*/
  KB0NW01.KB0NW-SUB = 1; /* ; reset map subscript*/
  ;
  while (KB0NW01.KB0NW-SUB <= 15) /* ; until end of map*/
    ;
    if (KBCREC.KUECOMNT[KB0NW-SUB] != KB0NM001.KUECOMNT[KB0NW-SUB])
      KBCREC.KUECOMNT[KB0NW-SUB] = KB0NM001.KUECOMNT[KB0NW-SUB];
      KBCREC.KBC-CHANGE-FL[KB0NW-SUB] = "Y"; /* ; set change flag*/
      KB0NW01.KB0NW-CHANGE-FL = "Y";
    end
    ;
    KB0NW01.KB0NW-SUB = KB0NW01.KB0NW-SUB + 1;
  end
  ;
   /* if any changes were made, update the temp storage page*/
  ;
  if (KB0NW01.KB0NW-CHANGE-FL == "Y")
    KBWREC.KBWPAGE = KB0NW01.KB0NW-CURR-PAGE;
    XPKB027(); /* update temp storage page*/
  end
  ;
  ;
end // end KB0N040

// BUILD NEW PAGE FROM TEMP STOR
Function KB0N048()
  ;
  ;
  /* determine new page number*/
  ;
  if (converseVar.eventKey is pf7)
    KB0NW01.KB0NW-CURR-PAGE = KB0NW01.KB0NW-CURR-PAGE - 1;
    KB0N090(); /* move temp storage to map*/
  else
    ;
    if (converseVar.eventKey is pf8)
      if (KB0NM001.KUECOMNT[15] != " " /* page is full*/
       && KB0NM001.KBWPAGE == KB0NM001.KBWTOTPG) /* no more pages*/
        KB0NW01.KB0NW-NEW-PAGE-FL = "Y";
        KB0NM001.KBWPAGE = KB0NM001.KBWPAGE + 1;
        KB0NM001.KBWTOTPG = KB0NM001.KBWTOTPG + 1;
        KB0N060(); /* reset comments*/
      else
        KB0NW01.KB0NW-CURR-PAGE = KB0NW01.KB0NW-CURR-PAGE + 1;
        KB0N090(); /* move temp storage to map*/
      end
    else
      ;
      if (KB0NM001.KBWPAGE != KB0NW01.KB0NW-CURR-PAGE)
        KB0NW01.KB0NW-CURR-PAGE = KB0NM001.KBWPAGE;
        KB0N090(); /* move temp storage to map*/
      end
    end
  end
  ;
  ;
  ;
end // end KB0N048

// EDIT KB0NM001
Function KB0N050()
  ;
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  ;
  KB0N053(); /* ; edit delete notes flag*/
  ;
  KB0N051(); /* ; edit scrolling*/
  ;
  if (KBWREC.KBWERRFL == "N" /* no errors*/
   && KB0NM001.KB0NMDCF == "N") /* delete all comments flag*/
    if (KB0NW01.KB0NW-NEW-PAGE-FL == "Y") /* new comments flag*/
      KB0N120(); /* move new page to temp storage*/
      KB0NW01.KB0NW-NEW-PAGE-FL = "N"; /* reset new page*/
    else
      KB0N040(); /* check for changes & update ts*/
    end
  end
  ;
  ;
end // end KB0N050

// EDIT SCROLLING
Function KB0N051()
  ;
  ;
  if (converseVar.eventKey is pf7)
    if (KB0NM001.KB0NMDCF == "Y") /* delete all comments*/
      converseLib.validationFailed(168); /* can't scroll when flag is 'y'*/
      set KB0NM001.KB0NMDCF cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0NM001.KBWPAGE == 1)
        converseLib.validationFailed(8); /* already at top*/
        set KB0NM001.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      else
        if (KB0NM001.KBWPAGE != KB0NW01.KB0NW-CURR-PAGE
         && KB0NW01.KB0NW-NEW-PAGE-FL != "Y") /* not a new page*/
          converseLib.validationFailed(113); /* can't change page and scroll*/
          set KB0NM001.KBWPAGE cursor, bold;
          KBWREC.KBWERRFL = "Y";
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is pf8)
    if (KB0NM001.KB0NMDCF == "Y") /* delete all comments*/
      converseLib.validationFailed(168); /* can't scroll when flag is 'y'*/
      set KB0NM001.KB0NMDCF cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0NM001.KUECOMNT[15] != " ")
  /* next sentence*/
      else
        if (KB0NM001.KBWPAGE == KB0NM001.KBWTOTPG)
          converseLib.validationFailed(9); /* already at bottom*/
          set KB0NM001.KBWPAGE cursor, bold;
          KBWREC.KBWERRFL = "Y";
        else
          if (KB0NM001.KBWPAGE != KB0NW01.KB0NW-CURR-PAGE)
            converseLib.validationFailed(113); /* can't change page and scroll*/
            set KB0NM001.KBWPAGE cursor, bold;
            KBWREC.KBWERRFL = "Y";
          end
        end
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0NM001.KBWPAGE != KB0NW01.KB0NW-CURR-PAGE /* page nbr changed*/
     && KB0NM001.KB0NMDCF == "Y")                   /* delete all comments*/
      converseLib.validationFailed(169); /* can't change page when flag is 'y'*/
      set KB0NM001.KB0NMDCF cursor, bold;
      set KB0NM001.KBWPAGE bold;
      KBWREC.KBWERRFL = "Y";
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0NM001.KBWPAGE == 0
     || KB0NM001.KBWPAGE > KB0NM001.KBWTOTPG)
      converseLib.validationFailed(48); /* invalid page number*/
      set KB0NM001.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    end
  end
  ;
  ;
end // end KB0N051

// EDIT DELETE NOTES FLAG
Function KB0N053()
  ;
  ;
  if (KB0NM001.KB0NMDCF != "Y" /* ; delete comments flag*/
   && KB0NM001.KB0NMDCF != "N") /* ; not = 'Y' or 'N'*/
    set KB0NM001.KB0NMDCF cursor, bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(70);
  end
  ;
  ;
end // end KB0N053

// RESET COMMENTS
Function KB0N060()
  ;
  ;
  KB0NW01.KB0NW-SUB = 15; /* ; reset comment subscript*/
  ;
  while (KB0NW01.KB0NW-SUB >= 1) /* ; until top of array*/
    KB0NM001.KUECOMNT[KB0NW-SUB] = " ";
    KB0NM001.ZZZCHGDT[KB0NW-SUB] = 0;
    set KB0NM001.KUECOMNT[KB0NW-SUB] cursor, normal;
    ;
    KB0NW01.KB0NW-SUB = KB0NW01.KB0NW-SUB - 1; /* ; decrement subscript*/
  end
  ;
  converseLib.validationFailed(170);
  ;
end // end KB0N060

// SEND/RECEIVE UPDATE NOTES SCRN
Function KB0N080()
  ;
  ;
  converse KB0NM001 ;
  ;
  KBWREC.XXXMAPNM = "KB0NM001"; /* ; set map name*/
  converseLib.validationFailed(0); /* ; reset error message*/
  ;
  if (KBWREC.KBWBFND == "Y") /* ; valid buyer id*/
    set KB0NM001.KB0NMDCF normal;
    set KB0NM001.KBWPAGE normal;
    ;
    KB0NW01.KB0NW-SUB = 15; /* ; reset subscript array*/
    while (KB0NW01.KB0NW-SUB >= 1) /* ; until top of array*/
      set KB0NM001.KUECOMNT[KB0NW-SUB] cursor, normal;
      ;
      KB0NW01.KB0NW-SUB = KB0NW01.KB0NW-SUB - 1; /* ; decrement subscript*/
    end
  end
  ;
  ;
end // end KB0N080

// MOVE TEMP STORAGE TO KB0NM001
Function KB0N090()
  ;
  ;
  set KB0NM001 initial; /* ; initialize screen*/
  ;
  KB0NM001.KB0NMDTE = VGVar.currentShortGregorianDate;
  KB0NM001.KBABUYID = KBWREC.KBABUYID;
  ;
  if (KBWREC.KBWBFND == "N") /* buyer not found*/
    converseLib.validationFailed(143); /* return to previous screen*/
  else
    KB0NM001.XXXFSTNM = KBAREC.XXXFSTNM; /* move buyer data*/
    KB0NM001.XXXMDINT = KBAREC.XXXMDINT;
    KB0NM001.XXXLSTNM = KBAREC.XXXLSTNM;
    KB0NM001.XXXGNTNM = KBAREC.XXXGNTNM;
  end
  KB0NM001.KB0NMDCF = "N"; /* init delete all comments*/
  ;
  if (KBWREC.KBWBFND == "Y" /* ; buyer found*/
   && KBWREC.KBWERRFL == "N") /* ; no errors*/
    ;
    KBWREC.KBWPAGE = KB0NW01.KB0NW-CURR-PAGE; /* set curr page*/
    ;
    XPKB025(); /* ; read temp storage page*/
    ;
    KB0NW01.KB0NW-SUB = 15;
    while (KB0NW-SUB > 0) /* move comments from ts to map*/
      KB0NM001.KUECOMNT[KB0NW-SUB] = KBCREC.KUECOMNT[KB0NW-SUB];
      KB0NM001.ZZZCHGDT[KB0NW-SUB] = KBCREC.ZZZCHGDT[KB0NW-SUB];
      ;
      if (KBCREC.KUECOMNT[KB0NW-SUB] == " ")
        set KB0NM001.KUECOMNT[KB0NW-SUB] cursor;
      end
      ;
      KB0NW01.KB0NW-SUB = KB0NW01.KB0NW-SUB - 1;
    end
    ;
    KB0NM001.KBWPAGE = KB0NW01.KB0NW-CURR-PAGE;
    KB0NM001.KBWTOTPG = KB0NW01.KB0NW-MAX-PAGE;
  end
  ;
  if (KB0NW01.KB0NW-MAX-PAGE == 0)
    KB0NM001.KBWPAGE = 1;
    KB0NM001.KBWTOTPG = 1;
  end
  ;
end // end KB0N090

// Load Temporary Storage
Function KB0N100()
  ;
  ;
  set KBCREC empty; /* ; init ts record*/
  set KB0NW01 empty; /* ; init working storage record*/
  KB0NW01.KB0NW-SUB = 0; /* ; init comment subscript*/
  KBWREC.KBWEOF = "N"; /* ; init eof flag*/
  ;
  XPKB014(); /* ; select comment records*/
  ;
  XPKB015(); /* ; fetch first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* ; no comments found*/
    converseLib.validationFailed(166); /* ; enter comments*/
    KBWREC.KBWERRFL = "Y";
    KB0NW01.KB0NW-NEW-PAGE-FL = "Y"; /* new comments page*/
    set KB0NM001.KUECOMNT[1] cursor;
  else
    ;
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful database call*/
      KB0N110(); /* ; move to temp storage*/
      XPKB015(); /* ; fetch next row*/
    end
    if (KB0NW01.KB0NW-SUB > 0)
      XPKB026(); /* ; write partial page to ts*/
      set KBCREC empty; /* ; clear ts record*/
      KB0NW01.KB0NW-SUB = 0; /* ; init subscript*/
      KB0NW01.KB0NW-MAX-PAGE = TA5REC.TA5TSQIX; /* save last page*/
    end
  end
  ;
  XPKB022(); /* ; close cursor*/
  ;
  ;
end // end KB0N100

// MOVE COMMENT TO TEMP STORAGE
Function KB0N110()
  ;
  ;
  KB0NW01.KB0NW-SUB = KB0NW01.KB0NW-SUB + 1;
  ;
  KBCREC.KUECSEQ[KB0NW-SUB] = KUEREC.KUECSEQ;
  KBCREC.KUECOMNT[KB0NW-SUB] = KUEREC.KUECOMNT;
  KBCREC.ZZZCHGDT[KB0NW-SUB] = KUEREC.ZZZCHGDT;
  ;
  KB0NW01.KB0NW-LAST-SEQ = KUEREC.KUECSEQ; /* save last comnt nbr*/
  ;
  if (KB0NW01.KB0NW-SUB == 15) /* ; page is full*/
    XPKB026(); /* ; add page to temp storage*/
    set KBCREC empty; /* ; reset ts record*/
    KB0NW01.KB0NW-SUB = 0; /* ; init subscript*/
    KB0NW01.KB0NW-MAX-PAGE = TA5REC.TA5TSQIX;
  end
  ;
end // end KB0N110

// MOVE NEW PAGE TO TEMP STORAGE
Function KB0N120()
  ;
  set KBCREC empty; /* init temp storage*/
  KB0NW01.KB0NW-CHANGE-FL = "N"; /* reset change flag*/
  KB0NW01.KB0NW-SUB = 1; /* init comments subscript*/
  ;
  while (KB0NW01.KB0NW-SUB <= 15)
    if (KB0NM001.KUECOMNT[KB0NW-SUB] != " ")
      KBCREC.KUECOMNT[KB0NW-SUB] = KB0NM001.KUECOMNT[KB0NW-SUB];
      KBCREC.KBC-CHANGE-FL[KB0NW-SUB] = "Y"; /* set change flag*/
      KB0NW01.KB0NW-CHANGE-FL = "Y";
    end
    KB0NW01.KB0NW-SUB = KB0NW01.KB0NW-SUB + 1;
  end
  ;
  if (KB0NW01.KB0NW-CHANGE-FL == "Y")
    XPKB026(); /* ; add page to temp storage*/
    KB0NW01.KB0NW-MAX-PAGE = TA5REC.TA5TSQIX;
  end
  ;
  KB0NW01.KB0NW-CURR-PAGE = KB0NM001.KBWPAGE;
  ;
end // end KB0N120

// Update Temp Storage - KBC
Function XPKB027()
  ;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KBC"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = KBWREC.KBWPAGE; /* current page*/
  KBCREC.KBC-TS-LENGTH = 874; /* length of record*/
  ;
  call "TA0050" (KBCREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "XPKB027";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KBCREC.KBC-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE UPDATING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
    ;
  end
  ;
end // end XPKB027

Record KB0NW01 type basicRecord
  5 KB0NW-GROUP1 KB0NW-GROUP1 ; 
    10 KB0NW-MAX-PAGE KB0NW-MAX-PAGE ; 
    10 KB0NW-CURR-PAGE KB0NW-CURR-PAGE ; 
    10 KB0NW-SUB KB0NW-SUB ; 
    10 KB0NW-CHANGE-FL KB0NW-CHANGE-FL ; 
    10 KB0NW-LAST-SEQ KB0NW-LAST-SEQ ; 
    10 KB0NW-UPDATED-FL KB0NW-UPDATED-FL ; 
    10 KB0NW-NEW-PAGE-FL KB0NW-NEW-PAGE-FL ; 
end // end KB0NW01

// change flag
DataItem KB0NW-CHANGE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current page number
DataItem KB0NW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for KB0NW01
DataItem KB0NW-GROUP1 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment last sequence number
DataItem KB0NW-LAST-SEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum page number
DataItem KB0NW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new page flag
DataItem KB0NW-NEW-PAGE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment subscript
DataItem KB0NW-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updates completed flag
DataItem KB0NW-UPDATED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

