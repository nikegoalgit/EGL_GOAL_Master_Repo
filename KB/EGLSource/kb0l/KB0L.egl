package kb0l;

import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB018;
import corpcom3.XPKB020;
import corpcom3.XPKB031;
import corpcom3.XPKB230;
import corpcom3.XPKB990;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx2.XNXCD;
import corpy2.YMLABRV;
import corpy2.YMLCD;
import corpy2.YMLTBL;
import corpy2.YSBABRV;
import corpy2.YSBCD;
import corpy2.YSBTBL;
import kb.common.KBAREC;
import kb.common.KBIREC;
import kb.common.KBWREC;
import kb.common.KBXREC;
import kb.common.KBYREC;
import ku.common.KUCCOID;
import ku.common.KUGREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KUMSTRNM;
import ku.common.KUNREC;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=KB0L ****
// This application is the Buyer Attachment Inquiry.
// This applicaition has only one screen; buyer attachments.
// All of the accounts for a specific buyer will be listed
// according to the selection made.  The options are to list
// active accounts, inactive accounts, or all accounts.
// ************************************************************
//                 MAINTENANCE HISTORY
// ------------------------------------------------------------
//   Date     Who    Reason
// ------------------------------------------------------------
// 02/01/93  tmorri  This application has been modified as
//                   part of the Buyer System Enhancement
//                   project.  The main objective of this
//                   project is to give Nike Sales Reps and
//                   Sales Admin. a way to associate buyers to
//                   sales reps via the sales responsibility
//                   code.  (See specs for details relating to
//                   this specific application).
// 
// 02/18/93  tmorri  Added mail level code and description to
//                   map.  (KB0L091, KB0L094, KB0L200, KB0L210,
//                   KB0LM001, KB0LW02)
// 
// 04/29/93  tmorri  When PF3 always return to KB0I, even if
//                   in browse mode.  (KB0L005)
// 
// 06/23/93  tmorri  IOMOD IO5110 changed.  Use current date
//                   to retrieve rep id. (KB0L091, KB0L092)
// *********************
Program KB0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0LW01 KB0LW01; // record
  KB0LW02 KB0LW02; // record
  KBAREC KBAREC; // record
  KBIREC KBIREC; // record
  KBWREC KBWREC; // record
  KBXREC KBXREC; // record
  KBYREC KBYREC; // record
  KUGREC KUGREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YSBTBL; // table
  use YMLTBL; // table
  use KB0LM.KB0LM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0L001: KB0L001();
    ;
    ;
    goto KB0L005;
    ;
    ;
    KB0L005: KB0L005();
    ;
    ;
    goto KB0L005;
    ;
    ;
  end // end main
end // end KB0L

// ATTACH INQUIRY INITIALIZE
Function KB0L001()
  ;
  ;
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; get seg tranid*/
  ;
  set KB0LM001 initial; /* ; init map*/
  ;
  KB0L230(); /* ; purge temp storage*/
  ;
  if (COMMAREA.CAFROMAP == "KB0I" /* ; Buyer Inquiry*/
   || COMMAREA.CAFROMAP == "KB0V" /* ; Comments Inquiry*/
   || COMMAREA.CAFROMAP == "KB0T") /* ; Attach Accounts*/
    KB0L002(); /* ; load working storage recs*/
    if (KBWREC.KBWBFND == "Y") /* ; valid buyer id*/
      KB0L090(); /* ; load accts to temp stor*/
      if (KBWREC.KBWERRFL == "N") /* ; accounts loaded*/
        KB0LW01.KB0LW-CURR-PAGE = 1; /* ; set page to 1*/
      end
    end
    KB0L094(); /* ; move w/s to screen*/
  else
    set KBWREC empty; /* ; initialize kbwrec*/
    ;
    COMMAREA.CATOAP = "KB0M"; /* ; xfer to menu*/
    COMMAREA.CAUSERA = KBWREC.KBWGROUP; /* ; initialize commarea*/
    ;
    XSEXIT();
    exit program;
  end
  ;
  ;
end // end KB0L001

// LOAD W/S RECS
Function KB0L002()
  ;
  ;
  XPKB002(); /* ; initialize KBWREC*/
  XPKB010(); /* ; read KBAREC (unique)*/
  XPKB031(); /* ; retrieve curr date*/
  ;
  KBWREC.KBWERRFL = "N"; /* ; init error flag*/
  ;
  KBWREC.KBASTAT = "A"; /* ; set acct stat*/
  ;
  ;
end // end KB0L002

// ATTACH INQUIRY MAINLINE
Function KB0L005()
  ;
  KB0L080(); /* ; converse KB0LM001*/
  ;
  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* save prev pfkey*/
  KBWREC.KBWPFKEY[1] = " "; /* ; reset current pfkey*/
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  KBWREC.KBWRLDFL = "N"; /* ; reset reload flag*/
  ;
  if (converseVar.eventKey is pf3) /* ; prev screen requested*/
    KB0L230(); /* ; purge temp storage*/
    if (COMMAREA.CAFROMAP == "KB0T")
      COMMAREA.CATOAP = "KB0T"; /* ; xfer to attach*/
    else
      COMMAREA.CATOAP = "KB0I"; /* ; xfer to inquire*/
    end
    COMMAREA.CAUSERA = KBWREC.KBWGROUP;
    ;
    XSEXIT();
    ;
    KB0LM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    COMMAREA.CAUSERA = " ";
  else
    if (converseVar.eventKey is pf4) /* ; menu requested*/
      KBWREC.KBWPFKEY[1] = "PF4"; /* save current pfkey*/
      if (KBWREC.KBWADDFL == "A" /* ; in add mode*/
       && KBWREC.KBWPFKEY[2] != "PF4") /* pf4 unconfirmed*/
        converseLib.validationFailed(144);
        KBWREC.KBWERRFL = "Y";
      else
        if (KBWREC.KBWBRSFL == "B") /* ; in browse mode*/
          XPKB230(); /* ; purge temp storage for browse*/
        end
        KB0L230(); /* ; purge temp storagefor kb0l*/
        COMMAREA.CATOAP = "KB0M";
        ;
        XSEXIT();
        ;
        KB0LM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAMSG = " ";
      end
    else
      ;
      if (converseVar.eventKey is pf7 /* ; scroll back requested*/
       || converseVar.eventKey is pf8 /* ; scroll forwared requested*/
       || converseVar.eventKey is enter)
            /* next sentence*/
      else
        converseLib.validationFailed(7); /* invalid pfkey*/
        KBWREC.KBWERRFL = "Y";
      end
    end
  end
  ;
  ;
  if (KBWREC.KBWBFND == "Y") /* valid buyer id*/
    if (KBWREC.KBWERRFL == "N") /* no errors*/
      ;
      KB0L050(); /* ; edit KB0LM001*/
      ;
      if (KBWREC.KBWERRFL == "N" /* ; still no errors*/
       && KBWREC.KBWRLDFL == "N") /* ; temp storage was not reloaded*/
        if (converseVar.eventKey is pf7 /* ; scroll back*/
         || converseVar.eventKey is pf8 /* ; scroll forward*/
         || KB0LM001.KBWPAGE != KB0LW01.KB0LW-CURR-PAGE)
          KB0L095(); /* build new page*/
        else
          if (KBWREC.KBWCHGFL == "N") /* ; no changes to map*/
            KB0L230(); /* ; purge temp storage*/
            if (KBWREC.KBWBRSFL == "B") /* ; in browse mode*/
              COMMAREA.CATOAP = "KB0B"; /* ; xfer to browse*/
            else
              COMMAREA.CATOAP = "KB0I"; /* ; xfer to inquire*/
            end
            COMMAREA.CAUSERA = KBWREC.KBWGROUP;
            ;
            XSEXIT();
            ;
            KB0LM001.VAGen_EZEMSG = COMMAREA.CAMSG;
            COMMAREA.CAMSG = " ";
            COMMAREA.CAUSERA = " ";
          end
        end
      end
    end
  else
    KB0L094(); /* move w/s to screen*/
  end
  ;
end // end KB0L005

// EDIT KB0LM001
Function KB0L050()
  ;
  KBWREC.KBWCHGFL = "N"; /* ; reset change flag*/
  ;
  KB0L060(); /* ; edit acct link stat*/
  ;
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KB0L070(); /* ; edit page nbr and scrolling*/
  end
  ;
  ;
end // end KB0L050

// EDIT ACCT LINK STATUS
Function KB0L060()
  ;
  ;
  if (KB0LM001.KBASTAT != "A" /* ; invalid acct link stat*/
   && KB0LM001.KBASTAT != "I" 
   && KB0LM001.KBASTAT != "B")
    set KB0LM001.KBASTAT cursor, bold; /* ; highlight acct stat*/
    converseLib.validationFailed(78); /* ; valid accts are....*/
    KBWREC.KBWERRFL = "Y";
  else
    if (KB0LM001.KBASTAT != KBWREC.KBASTAT) /* ; status changed*/
      KBWREC.KBWCHGFL = "Y"; /* ; set change flag*/
      KBWREC.KBASTAT = KB0LM001.KBASTAT; /* ; set acct link stat*/
      KBWREC.KBWRLDFL = "Y"; /* ; reload temp storage*/
      KB0L230(); /* ; purge temp storage*/
      KB0L090(); /* ; load temp storage*/
      if (KBWREC.KBWERRFL == "N") /* ; accounts loaded*/
        KB0LW01.KB0LW-CURR-PAGE = 1; /* set page number to 1*/
      end
      KB0L094(); /* ; move accts to screen*/
    end
  end
  ;
  ;
end // end KB0L060

// EDIT PAGE NUMBER
Function KB0L070()
  ;
  ;
  if (converseVar.eventKey is pf7)
    if (KB0LW01.KB0LW-MAX-PAGE == 0)
      converseLib.validationFailed(165); /* no accounts displayed - can't scroll*/
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0LM001.KBWPAGE == 1)
        converseLib.validationFailed(8); /* already at top*/
        set KB0LM001.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      else
        if (KB0LM001.KBWPAGE != KB0LW01.KB0LW-CURR-PAGE)
          converseLib.validationFailed(113); /* can't change page and scroll*/
          set KB0LM001.KBWPAGE cursor, bold;
          KBWREC.KBWERRFL = "Y";
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is pf8)
    if (KB0LW01.KB0LW-MAX-PAGE == 0)
      converseLib.validationFailed(165); /* no accounts displayed - can't scroll*/
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0LM001.KBWPAGE == KB0LM001.KBWTOTPG)
        converseLib.validationFailed(9); /* already at bottom*/
        set KB0LM001.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      else
        if (KB0LM001.KBWPAGE != KB0LW01.KB0LW-CURR-PAGE)
          converseLib.validationFailed(113); /* can't change page and scroll*/
          set KB0LM001.KBWPAGE cursor, bold;
          KBWREC.KBWERRFL = "Y";
        end
      end
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    if (KB0LM001.KBWPAGE == 0
     && KB0LW01.KB0LW-MAX-PAGE != 0)
      converseLib.validationFailed(48); /* invalid page number*/
      set KB0LM001.KBWPAGE cursor, bold;
      KBWREC.KBWERRFL = "Y";
    else
      if (KB0LM001.KBWPAGE > KB0LM001.KBWTOTPG)
        converseLib.validationFailed(48); /* invalid page number*/
        set KB0LM001.KBWPAGE cursor, bold;
        KBWREC.KBWERRFL = "Y";
      end
    end
  end
  ;
  ;
  ;
end // end KB0L070

// SEND/RECEIVE KB0LM001
Function KB0L080()
  ;
  ;
  converse KB0LM001 ;
  ;
  ;
  KBWREC.XXXMAPNM = "KB0LM001"; /* save current map*/
  ;
  set KB0LM001.KBWPAGE normal;
  set KB0LM001.KBASTAT normal, cursor;
  ;
  ;
end // end KB0L080

// LOAD TEMPORARY STORAGE
Function KB0L090()
  ;
  ;
  set KB0LW01 empty; /* ; init working storage record*/
  set KB0LW02 empty; /* ; init temp storage record*/
  ;
  KB0LW-SUB = 0; /* ; init account subscript*/
  ;
  set KBXREC empty;
  set KBIREC empty;
  ;
   /* set up parameters for pass record*/
  ;
  KBIREC.KBIOTASK = "S5"; /* ; set io-pass task*/
  KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* ; current date*/
  KBIREC.KBIOSTAT = KBWREC.KBASTAT; /* ; account status*/
  ;
  KBXREC.KBABUYID = KBWREC.KBABUYID; /* ; set buyer id*/
  KBXREC.KUCCOID = -1; /* ; select all companies*/
  KBXREC.KUMSTRID = -1; /* ; select all stores*/
  KBXREC.XNXCD = -1; /* ; select all departments*/
  KBXREC.YSBCD = "**"; /* ; select all ysb's*/
  ;
  XPKB018(); /* call IO4330*/
  ;
  /* fetch first row*/
  ;
  KBIREC.KBIOTASK = "N5"; /* ; set io-pass task*/
  XPKB018(); /* ; call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(154); /* ; no accounts found*/
    KBWREC.KBWERRFL = "Y";
    set KB0LM001.KBASTAT cursor;
  else
    ;
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful database call*/
      KB0L091(); /* ; move to temp storage*/
      KBIREC.KBIOTASK = "N5"; /* ; fetch next row*/
      XPKB018(); /* ; call io4330*/
    end
    if (KB0LW01.KB0LW-SUB > 0)
      KB0L210(); /* ; write partial page to ts*/
    end
  end
  ;
  /* close cursor*/
  ;
  KBIREC.KBIOTASK = "C5"; /* ; close cursor*/
  XPKB018(); /* ; call io4330*/
  ;
end // end KB0L090

// MOVE ACCT INFO TO TEMP STORAGE
Function KB0L091()
  ;
  ;
  KB0LW01.KB0LW-SUB = KB0LW01.KB0LW-SUB + 1;
  KB0LW02.KUCCOID[KB0LW-SUB] = KBXREC.KUCCOID;
  KB0LW02.KUMSTRID[KB0LW-SUB] = KBXREC.KUMSTRID;
  KB0LW02.XNXCD[KB0LW-SUB] = KBXREC.XNXCD;
  KB0LW02.YSBCD[KB0LW-SUB] = KBXREC.YSBCD;
  KB0LW02.YMLCD[KB0LW-SUB] = KBXREC.YMLCD;
  ;
  if (KBXREC.YSBCD in YSBTBL.YSBCD)
    KB0LW02.YSBABRV[KB0LW-SUB] = YSBTBL.YSBABRV[sysVar.arrayIndex];
  else
    KB0LW02.YSBABRV[KB0LW-SUB] = "  ";
  end
  ;
  if (KBXREC.YMLCD in YMLTBL.YMLCD)
    KB0LW02.YMLABRV[KB0LW-SUB] = YMLTBL.YMLABRV[sysVar.arrayIndex];
  else
    KB0LW02.YMLABRV[KB0LW-SUB] = "  ";
  end
  ;
  if (KBXREC.KBXXXDT > TA2REC.TA2GRGGN) /* attachment is active*/
    KB0LW02.KB0LW-TERM-EFF-DT[KB0LW-SUB] = KBXREC.KBXXEDT; /* eff dt*/
    KB0LW02.KB0LW-STATUS[KB0LW-SUB] = "A"; /* active*/
    KB0L092(); /* ; get rep id*/
  else
    KB0LW02.KB0LW-TERM-EFF-DT[KB0LW-SUB] = KBXREC.KBXXXDT; /* term dt*/
    KB0LW02.KB0LW-STATUS[KB0LW-SUB] = "I"; /* inactive*/
    KB0LW02.SM4REPID[KB0LW-SUB] = 0;
  end
  ;
  KB0L093(); /* ; get store name*/
  ;
  if (KB0LW01.KB0LW-SUB == 12) /* ; page is full*/
    KB0L210(); /* ; add page to temp storage*/
  end
  ;
end // end KB0L091

// GET REP ID
Function KB0L092()
  ;
  ;
  set KUGREC empty;
  set SQLCA empty;
  ;
  KUGREC.KUCCOID = KBXREC.KUCCOID; /* ; set cust id*/
  KUGREC.KUMSTRID = KBXREC.KUMSTRID; /* ; set store id*/
  KUGREC.XNXCD = KBXREC.XNXCD; /* ; set dept id*/
  KUGREC.YSBCD = KBXREC.YSBCD; /* ; set responsibility cd*/
  KUGREC.KUGRPTDT = TA2REC.TA2GRGGN; /* ; current date*/
  ;
  call "IO5110" ("SA", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes}; /* get rep id*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful read*/
    KB0LW02.SM4REPID[KB0LW-SUB] = KUGREC.SM4REPID;
  end
  ;
  ;
end // end KB0L092

// GET STORE NAME
Function KB0L093()
  ;
  ;
  set KUMREC empty;
  ;
  KUMREC.KUCCOID = KBXREC.KUCCOID; /* ; set cust id*/
  KUMREC.KUMSTRID = KBXREC.KUMSTRID; /* ; set store id*/
  ;
  XPKB020(); /* ; call io0340 - 's '*/
  ;
  if (KBWREC.KBWSFND == "Y") /* ; store rec found*/
    KB0LW02.KUMSTRNM[KB0LW-SUB] = KUMREC.KUMSTRNM;
  end
  ;
  ;
end // end KB0L093

// MOVE TEMP STORAGE TO MAP
Function KB0L094()
  ;
  ;
  set KB0LM001 initial; /* ; initialize screen*/
  ;
  KB0LM001.KB0LMDTE = VGVar.currentShortGregorianDate;
  KB0LM001.KBABUYID = KBWREC.KBABUYID;
  ;
  if (KBWREC.KBWBFND == "N") /* ; invalid buyer id*/
    converseLib.validationFailed(143);
  else
    KB0LM001.XXXFSTNM = KBAREC.XXXFSTNM;
    KB0LM001.XXXMDINT = KBAREC.XXXMDINT;
    KB0LM001.XXXLSTNM = KBAREC.XXXLSTNM;
    KB0LM001.XXXGNTNM = KBAREC.XXXGNTNM;
    KB0LM001.KBASTAT = KBWREC.KBASTAT;
  end
  ;
  ;
  if (KBWREC.KBWBFND == "Y" /* valid buyer id*/
   && KBWREC.KBWERRFL == "N") /* no errors*/
    KB0L200(); /* ; read temp storage page*/
    ;
    KB0LW01.KB0LW-SUB = 1;
    while (KB0LW-SUB <= 12) /* move accounts from temp storage to*/
                                   /* map*/
      if (KB0LW02.KUCCOID[KB0LW-SUB] > 0)
        KB0LM001.SM4REPID[KB0LW-SUB] = KB0LW02.SM4REPID[KB0LW-SUB];
        KB0LM001.YSBCD[KB0LW-SUB] = KB0LW02.YSBCD[KB0LW-SUB];
        KB0LM001.YSBABRV[KB0LW-SUB] = KB0LW02.YSBABRV[KB0LW-SUB];
        KB0LM001.YMLCD[KB0LW-SUB] = KB0LW02.YMLCD[KB0LW-SUB];
        KB0LM001.YMLABRV[KB0LW-SUB] = KB0LW02.YMLABRV[KB0LW-SUB];
        KB0LM001.KUCCOID[KB0LW-SUB] = KB0LW02.KUCCOID[KB0LW-SUB];
        KB0LM001.KUMSTRID[KB0LW-SUB] = KB0LW02.KUMSTRID[KB0LW-SUB];
        KB0LM001.XNXCD[KB0LW-SUB] = KB0LW02.XNXCD[KB0LW-SUB];
        KB0LM001.KUMSTRNM[KB0LW-SUB] = KB0LW02.KUMSTRNM[KB0LW-SUB];
        KB0LM001.KB0LM-STATUS[KB0LW-SUB] = KB0LW02.KB0LW-STATUS[KB0LW-SUB];
        KB0LM001.KB0LM-TERM-EFF-DT[KB0LW-SUB] = KB0LW02.KB0LW-TERM-EFF-DT[KB0LW-SUB];
        ;
      end
      ;
      KB0LW01.KB0LW-SUB = KB0LW01.KB0LW-SUB + 1;
    end
    ;
    KB0LM001.KBWPAGE = KB0LW01.KB0LW-CURR-PAGE;
    KB0LM001.KBWTOTPG = KB0LW01.KB0LW-MAX-PAGE;
    ;
  end
  ;
end // end KB0L094

// BUILD NEW PAGE FROM TEMP STOR
Function KB0L095()
  ;
  ;
  /* determine new page number*/
  ;
  if (converseVar.eventKey is pf7)
    KB0LW01.KB0LW-CURR-PAGE = KB0LW01.KB0LW-CURR-PAGE - 1;
  else
    if (converseVar.eventKey is pf8)
      KB0LW01.KB0LW-CURR-PAGE = KB0LW01.KB0LW-CURR-PAGE + 1;
    else
      KB0LW01.KB0LW-CURR-PAGE = KB0LM001.KBWPAGE;
    end
  end
  ;
  KB0L200(); /* read temporary storage*/
  ;
  KB0L094(); /* move temp storage to map*/
  ;
  ;
  ;
end // end KB0L095

// READ TEMP STORAGE
Function KB0L200()
  ;
  set KB0LW02 empty;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "KB0L"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = KB0LW01.KB0LW-CURR-PAGE; /* current page*/
  KB0LW02.KB0LW-TS-LENGTH = 736; /* length of record*/
  ;
  call "TA0050" (KB0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0L200";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0LW02.KB0LW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE READING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
    ;
  end
end // end KB0L200

// ADD TEMP STORAGE
Function KB0L210()
  ;
  set TA5REC empty;
  TA5REC.TA5APPID = "KB0L"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  KB0LW02.KB0LW-TS-LENGTH = 736; /* length of record*/
  ;
  call "TA0050" (KB0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    KB0LW01.KB0LW-MAX-PAGE = TA5REC.TA5TSQIX; /* max page number*/
    set KB0LW02 empty; /* reinitialize page*/
    KB0LW01.KB0LW-SUB = 0; /* reinitialize line subscript*/
  else
    TA1REC.TA1LOCAT[1] = "KB0L210";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0LW02.KB0LW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE ADDING TO TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
  end
end // end KB0L210

// PURGE TEMP STORAGE
Function KB0L230()
  set TA5REC empty;
  TA5REC.TA5APPID = "KB0L"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (KB0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
   /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "KB0L230";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = KB0LW02.KB0LW-TS-ROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "ERROR OCCURRED WHILE PURGING TEMP STORAGE";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    ;
    XPKB990(); /* application abend routine*/
  end
end // end KB0L230

//*** RECORD=KB0LW01 ****
// Working storage record for KB0l.  Buyer Attachment Inquire.
// ***********************
Record KB0LW01 type basicRecord
  5 KB0LW-GROUP1 KB0LW-GROUP1 ; 
    10 KB0LW-MAX-PAGE KB0LW-MAX-PAGE ; 
    10 KB0LW-CURR-PAGE KB0LW-CURR-PAGE ; 
    10 KB0LW-SUB KB0LW-SUB ; 
end // end KB0LW01

//*** RECORD=KB0LW02 ****
// Temporary storage record used to hold the accounts shown for
// buyer attachment inquiry.
// 
// CSP Record:  KB0LW02
// Read in   :  KB0L240
// Added in  :  KB0l210
// Purged in :  KB0l230
// ***********************
Record KB0LW02 type basicRecord
  5 KB0LW-GROUP2 KB0LW-GROUP2 ; 
    10 KB0LW-TS-LENGTH KB0LW-TS-LENGTH ; 
    10 KB0LW-TS-ROW KB0LW-TS-ROW [12] ; 
      15 SM4REPID SM4REPID ; 
      15 YSBCD YSBCD ; 
      15 YSBABRV YSBABRV ; 
      15 YMLCD YMLCD ; 
      15 YMLABRV YMLABRV ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 KUMSTRNM KUMSTRNM ; 
      15 KB0LW-STATUS KB0LW-STATUS ; 
      15 KB0LW-TERM-EFF-DT KB0LW-TERM-EFF-DT ; 
end // end KB0LW02

// current page number
DataItem KB0LW-CURR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// group level for KB0lW01
DataItem KB0LW-GROUP1 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kb0lw02 group level
DataItem KB0LW-GROUP2 char(736)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maximum page number
DataItem KB0LW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// account status
DataItem KB0LW-STATUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// account line subscript
DataItem KB0LW-SUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// terminate or effective date
DataItem KB0LW-TERM-EFF-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// temp storage length
DataItem KB0LW-TS-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage row
DataItem KB0LW-TS-ROW char(61)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

