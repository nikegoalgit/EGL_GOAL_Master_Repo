package kb0c;

import corpcom2.XCTREC;
import corpcom2.XP0AW01;
import corpcom2.XSTREC;
import corpcom3.XP0A001;
import corpcom3.XPKB002;
import corpcom3.XPKB010;
import corpcom3.XPKB012;
import corpcom3.XPKB018;
import corpcom3.XPKB031;
import corpcom3.XPKB040;
import corpcom3.XPKB060;
import corpcom3.XPKB090;
import corpcom3.XPKB099;
import corpcom3.XPKB900;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XP0AT01;
import corpx1.XSTTBL;
import corpx2.XNXCD;
import corpy2.YBBCD;
import corpy2.YBBTBL;
import corpy2.YBTTBL;
import corpy2.YMLTBL;
import kb.common.KB3REC;
import kb.common.KBABUYID;
import kb.common.KBAREC;
import kb.common.KBBREC;
import kb.common.KBIREC;
import kb.common.KBWBUYID;
import kb.common.KBWREC;
import kb.common.KBXREC;
import kb.common.KBXXEDT;
import kl.common.KIZTBL;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUGREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KUZREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KB0C ****
// ;
//   nike buyer system -  update screen
// 
// overview: this buyer screen displays current buyer general
// information for updating.  there is also a screen for buyer
// address which can be access by selecting the buyer address
// select field and pressing enter.
// 
// 
// maintenance history:
// 
//    date   by whom  overview of changes made
// --------  -------  ------------------------------------
// 04-02-90  mbarna   initial code
// 
// 03-37-91  mgatre   provided access to KB0W, view addrs.
//                    changed: kb0c005, kb0c093
// 
// 02-01-93  tmorri   This application has been modified as
//                    part of the Buyer System Enhancement
//                    project.  The main objective of this
//                    project is to give Nike Sales Reps and
//                    Sales Admin a way to associate buyers to
//                    sales reps via the sales responsibility
//                    code.  (See specs for details relating
//                    to this specific application).
// 
// 02-18-93  tmorri   Changed blue to turquoise on maps,
//                    changed PF13 to PF12.  (KB0C005, KB0C035,
//                    KB0CM001, KB0CM002)
// 
// 03-01-93  tmorri   Fixed bug when selecting a list with '?'.
//                    (KB0C045, KB0C092, KB0C093)
// 
// 03-16-93  tmorri   Confirm when inactivating a buyer.
//                    Fix edit for store and ship to address.
//                    (KB0C005, KB0C006, KB0C007, KB0C009,
//                     KB0C030, KB0C031, KB0C032, KB0C033,
//                     KB0C034, KB0C035, KB0C036, KB0C067,
//                     KB0C072, KB0C073, KB0C074)
// 
// 08-09-93  tmorri   Removed KBWREC.KUCGRPID (XPKB090).
// *********************
Program KB0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "KB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KB0CW01 KB0CW01; // record
  KB0CW02 KB0CW02; // record
  KB0CW03 KB0CW03; // record
  KB0CW04 KB0CW04; // record
  KB3REC KB3REC; // record
  KBAREC KBAREC; // record
  KBBREC KBBREC; // record
  KBIREC KBIREC; // record
  KBWREC KBWREC; // record
  KBXREC KBXREC; // record
  KUCREC KUCREC; // record
  KUGREC KUGREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XCTREC XCTREC; // record
  XP0AW01 XP0AW01; // record
  XSTREC XSTREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YBTTBL {deleteAfterUse = yes}; // table
  use YMLTBL; // table
  use YBBTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use KIZTBL; // table
  use XP0AT01 {deleteAfterUse = yes}; // table
  use KB0CM.KB0CM001,  // forms
      KB0CM.KB0CM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KB0C001: KB0C001();
    goto KB0C005;
    KB0C005: KB0C005();
    goto KB0C005;
  end // end main
end // end KB0C

// update buyer initialization
Function KB0C001()
  XSENTRY(); /* ; check security*/
  XSSEGTR(); /* ; set start tranid*/
  ;
  converseLib.clearScreen();
  set KB0CM001 empty; /* ; init main screen*/
  converseLib.clearScreen();
  set KB0CM002 empty; /* ; address screen*/
  KB0CM001.KB0CMDAT = VGVar.currentShortGregorianDate;
  KB0CM002.KB0CMDAT = VGVar.currentShortGregorianDate;
  ;
  XPKB031(); /* ; get curr date*/
  ;
  XPKB002(); /* ; initialize kbwrec*/
  ;
  KB0CM001.KBABUYID = KBWREC.KBABUYID; /* ; Move buyer id to screen*/
  if (KBWREC.KBABUYID == 0) /* ; no buyer ID received*/
    converseLib.validationFailed(68); /* ; 'ENTER BUYER ID'*/
  else
    if (COMMAREA.CAFROMAP == "KB0U") /* ; from list application*/
      KB0C093(); /* ; load scrn from w/s*/
    else
      if (KBWREC.KBWATVFL == "Y" /* activating buyer*/
       || COMMAREA.CAFROMAP == "KB0W") /* from view address*/
        KB0C008(); /* ; count bxrefs*/
        KB0C093(); /* ; load scrn from w/s*/
        KB0C040(); /* ; edit screen*/
        if (KBWREC.KBWERRFL == "N") /* no errors*/
          KB0C007(); /* ; update process*/
        end
      else
        KB0C090(); /* get buyer info*/
        if (KBWREC.KBWBFND == "N") /* ; buyer not in database*/
          converseLib.validationFailed(58); /* ; 'BUYER NOT ON FILE'*/
        else /* ; buyer found*/
          KB0C093(); /* ; load scrn from KBWREC*/
          KB0C008(); /* ; count bxrefs*/
        end
      end
    end
  end
end // end KB0C001

// main loop (buyer update)
Function KB0C005()
  ;
    /* if returning from the list application, converse the screen that*/
    /* the list was requested for (address or general information).*/
    /* Otherwise, converse the general information screen.*/
  ;
  if (COMMAREA.CAFROMAP == "KB0U") /* from list application*/
    if (KBWREC.KBWTBLID == "ST" /* list was for states*/
     || KBWREC.KBWTBLID == "CT") /* or countries*/
      KB0C010(); /* do the address routine*/
    else
      KB0C080(); /* ; converse genrl info screen*/
    end
    COMMAREA.CAFROMAP = "KB0C"; /* reset commarea*/
  else
    KB0C080(); /* ; converse genrl info screen*/
  end
  ;
  KBWREC.KBWPFKEY[2] = KBWREC.KBWPFKEY[1]; /* save prev pfkey*/
  KBWREC.KBWPFKEY[1] = " ";
  KBWREC.KBWERRFL = "N"; /* reset error flag*/
  ;
  if (KBWREC.XXXMAPNM == "KB0CM001") /* genrl info screen*/
    KB0C009(); /* ; edit pfkeys*/
  end
  ;
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf20)
    KB0C034(); /* process enter key*/
  end
  ;
  ;
  ;
end // end KB0C005

// Check for early exit PF keys
Function KB0C006()
  if (KB0CM001.CATOAP != " ") /* ; if fastpathing*/
    COMMAREA.CATOAP = KB0CM001.CATOAP; /* ; store fastpath info*/
    COMMAREA.CAITEM = KB0CM001.CAITEM;
    XPKB040(); /* ; do fastpath module*/
    KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* ; didn't go message*/
    set KB0CM001.CATOAP cursor, bold;
  end
  if (converseVar.eventKey is pf3) /* ; go back to buyer menu*/
    if (KBWREC.KBWPFKEY[2] == "PF3") /* ; PF3 confirmed*/
      COMMAREA.CATOAP = "KB0M"; /* ; set up for menu appl*/
      XPKB090(); /* ; clear buyer from KBWREC*/
      COMMAREA.CAUSERA = KBWREC.KBWGROUP;
      XSEXIT(); /* ; transfer*/
      KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    else /* ; otherwise,*/
      KB0C079(); /* ; check for changes*/
      if (KBWREC.KBWCHGFL == "Y") /* ; changes made*/
        KBWREC.KBWPFKEY[1] = "PF3"; /* ; save PF3*/
        converseLib.validationFailed(3); /* ; ask for confirmation*/
      else /* ; no changes made*/
        COMMAREA.CATOAP = "KB0M"; /* ; set up for menu*/
        XPKB090(); /* ; clear buyer from KBWREC*/
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;
        XSEXIT(); /* ; transfer*/
        KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
    end
  else
    if (converseVar.eventKey is pf4) /* ; same as PF3*/
      if (KBWREC.KBWPFKEY[2] == "PF4") /* ; PF4 confirmed*/
        COMMAREA.CATOAP = "KB0M"; /* ; set up for menu*/
        XPKB090(); /* ; clear buyer from KBWREC*/
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;
        XSEXIT(); /* ; transfer*/
        KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      else /* ; otherwise,*/
        KB0C079(); /* ; check for changes*/
        if (KBWREC.KBWCHGFL == "Y") /* ; changes made*/
          KBWREC.KBWPFKEY[1] = "PF4"; /* ; save PF4*/
          converseLib.validationFailed(4); /* ; 'CONFIRM PF4'*/
        else /* ; no changes made*/
          COMMAREA.CATOAP = "KB0M"; /* ; set up for menu*/
          XPKB090(); /* ; clear buyer from KBWREC*/
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          XSEXIT(); /* ; transfer*/
          KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        end
      end
    end
  end
end // end KB0C006

// Update process
Function KB0C007()
  ;
  KB0C079(); /* check for changes to general*/
                                  /* information*/
  if (KBWREC.KBWCHGFL == "Y") /* changes to genrl info*/
    if (KB0CM001.XXXSTAT == "I" /* inactivating the buyer*/
     && KBAREC.XXXSTAT != "I") 
      if (converseVar.eventKey is pf20
       && KBWREC.KBWPFKEY[2] == "PF20") /* inactivate confirmed*/
        if (KBWREC.KBW-BXREF-CNT > 0) /* accounts still active*/
          KB0C100(); /* detach active accounts*/
          KBWREC.KBW-BXREF-CNT = 0;
        end
      else
        KBWREC.KBWPFKEY[1] = "PF20";
        KBWREC.KBWERRFL = "Y";
        converseLib.validationFailed(188); /* confirm inactivate*/
        set KB0CM001.XXXSTAT cursor, bold;
      end
    end
    ;
    if (KBWREC.KBWERRFL == "N") /* no errors*/
      KB0C098(); /* update buyer database*/
      set KB0CM001.KBABUYID cursor;
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors*/
    if (KBWREC.KBWCHGFL == "Y" /* changes to genrl*/
     || KBWREC.KBWCH2FL == "Y") /* changes to addr*/
      if (KBWREC.KBWCHGFL == "Y"
       && KBWREC.KBWCH2FL == "Y")
                                   /* changes to both maps*/
        converseLib.validationFailed(126); /* both maps updated*/
        set KB0CM001.KBABUYID cursor;
        KBWREC.KBWCHGFL = "N"; /* reset flags*/
        KBWREC.KBWCH2FL = "N";
      else
        if (KBWREC.KBWCHGFL == "Y")
                                   /* changes to genrl info*/
          converseLib.validationFailed(125);
          set KB0CM001.KBABUYID cursor;
          KBWREC.KBWCHGFL = "N"; /* reset flag*/
        else
          converseLib.validationFailed(127); /* changes to address*/
          set KB0CM001.KBABUYID cursor;
          KBWREC.KBWCH2FL = "N"; /* reset flag*/
        end
      end
    else
      if (KBWREC.KBWPFKEY[2] == "ENT") /* enter already hit*/
        KBWREC.KBWPFKEY[1] = "ENT"; /* save ENTER*/
        XPKB090(); /* clear buyer from kbwrec*/
        KB0C091(); /* clear screen*/
        set KBAREC empty; /* clear kbarec*/
        converseLib.validationFailed(68); /* ; 'ENTER BUYER ID'*/
      else
        KBWREC.KBWPFKEY[1] = "ENT"; /* save ENTER*/
        set KB0CM001.KBABUYID cursor;
        converseLib.validationFailed(129); /* no updates made*/
      end
    end
  end
  ;
end // end KB0C007

// Count bxrefs
Function KB0C008()
  set KBIREC empty; /* ; initialize KBIREC*/
  set KBXREC empty; /* ; initialize KBXREC*/
  ;
  KBIREC.KBIOTASK = "C "; /* ; set io-pass task*/
  KBIREC.KBIOSTAT = "A"; /* ; set io-pass stat*/
  KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* ; set io-pass date*/
  ;
  KBXREC.KBABUYID = KBWREC.KBABUYID; /* ; set buyer id*/
  KBXREC.KUCCOID = -1; /* ; all companies*/
  KBXREC.KUMSTRID = -1; /* ; all stores*/
  KBXREC.XNXCD = -1; /* ; all depts*/
  KBXREC.YSBCD = "**"; /* ; all ysb's*/
  ;
  XPKB018(); /* ; call IO4330*/
  ;
  KBWREC.KBW-BXREF-CNT = KBIREC.KBIOCNT; /* save count*/
end // end KB0C008

// Edit PFKeys
Function KB0C009()
  ;
  if (converseVar.eventKey is pf4 /* ; buyer menu*/
   || KB0CM001.CATOAP != " ")     /* ; fastpath value*/
    KB0C006(); /* ; early exit routines*/
  else
    if (converseVar.eventKey is pf3) /* ; prev screen*/
      KB0C006(); /* ; early exit routines*/
    else
      if (converseVar.eventKey is pf6) /* browse entry screen*/
        KB0C036(); /* process PF6*/
      else
        if (converseVar.eventKey is pf12) /* inquire buyer screen*/
          KB0C035(); /* process PF12*/
        else
          if (converseVar.eventKey is pf16) /* comments screen*/
            KB0C030(); /* process PF16*/
          else
            if (converseVar.eventKey is pf17) /* attach scrn*/
              KB0C031(); /* process PF17*/
            else
              if (converseVar.eventKey is pf18) /* detach screen*/
                KB0C032(); /* process PF18*/
              else
                if (converseVar.eventKey is pf19) /* reassign screen*/
                  KB0C033(); /* process PF19*/
                else
                  if (converseVar.eventKey is enter
                   || converseVar.eventKey is pf20) /* confirm status change (inactive)*/
                      /* next sentence*/
                  else
                    converseLib.validationFailed(7); /* ; 'INVALID KEY PRESSED'*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end // end KB0C009

// buyer address control process
Function KB0C010()
  if (COMMAREA.CAFROMAP != "KB0U") /* not from list application*/
    XPKB012(); /* get buyer address*/
    if (KBWREC.KBWAFND == "Y") /* address found*/
      KBWREC.XXXADDR1 = KBBREC.XXXADDR1;
      KBWREC.XXXADDR2 = KBBREC.XXXADDR2;
      KBWREC.XXXADDR3 = KBBREC.XXXADDR3;
      KBWREC.XXXCITY = KBBREC.XXXCITY;
      KBWREC.XSTCD = KBBREC.XSTCD;
      KBWREC.XXXZIP = KBBREC.XXXZIP;
      KBWREC.XCTCD = KBBREC.XCTCD;
    else
      KBWREC.XXXADDR1 = " ";
      KBWREC.XXXADDR2 = " ";
      KBWREC.XXXADDR3 = " ";
      KBWREC.XXXCITY = " ";
      KBWREC.XSTCD = " ";
      KBWREC.XXXZIP = " ";
      KBWREC.XCTCD = " ";
    end
  end
  ;
  KB0C011(); /* ; initial set up*/
  ;
  KBWREC.KBWRETNF = "N"; /* ; return = no*/
  while (KBWREC.KBWRETNF == "N") /* ; while return = no*/
    KB0C012(); /* ; do buyer address*/
  end
  ;
end // end KB0C010

// buyer set-up & first converse
Function KB0C011()
  KB0CM002.KB0CMDAT = VGVar.currentShortGregorianDate; /* ; move buyer gen info*/
  KB0CM002.KBABUYID = KBWREC.KBABUYID;
  KB0CM002.XXXFSTNM = KBWREC.XXXFSTNM;
  KB0CM002.XXXLSTNM = KBWREC.XXXLSTNM;
  KB0CM002.XXXMDINT = KBWREC.XXXMDINT;
  KB0CM002.XXXGNTNM = KBWREC.XXXGNTNM;
  KB0CM002.XXXADDR1 = KBWREC.XXXADDR1; /* ; load buyer address values*/
  KB0CM002.XXXADDR2 = KBWREC.XXXADDR2;
  KB0CM002.XXXADDR3 = KBWREC.XXXADDR3;
  KB0CM002.XXXCITY = KBWREC.XXXCITY;
  KB0CM002.XSTCD = KBWREC.XSTCD;
  if (KBWREC.XSTCD in XSTTBL.XSTCD) /* get state description*/
    KB0CM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
  else
    KB0CM002.XSTDESC = " ";
  end
  KB0CM002.XXXZIP = KBWREC.XXXZIP;
  KB0CM002.XCTCD = KBWREC.XCTCD;
  if (KBWREC.XCTCD in XCTTBL.XCTCD) /* get country description*/
    KB0CM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
  else
    KB0CM002.XCTDESC = " ";
  end
  if (KB0CM002.XCTCD == " ")
    KB0CM002.XCTCD = "USA "; /* ; default USA*/
    KB0CM002.XCTDESC = "U.S.A.";
  end
  set KB0CM002.XXXADDR1 cursor; /* ; position the cursor*/
end // end KB0C011

// buyer address mainline
Function KB0C012()
  KB0C018(); /* ; converse screen*/
  KBWREC.KBWPFKEY[1] = " "; /* reset last key from scrn 1*/
  if (converseVar.eventKey is pf3 /* ; return to main screen*/
   && KBWREC.XXXMAPNM == "KB0CM002") /* address screen*/
    KB0C019(); /* ; check address for changes*/
    if (KBWREC.KBWCH2FL == "Y") /* changes exist*/
      if (KBWREC.KBWPFKEY[2] != "PF3") /* ; first time pressed*/
        KBWREC.KBWPFKEY[2] = "PF3"; /* ; save PF3*/
        converseLib.validationFailed(128); /* ; 'PRESS PF3 AGAIN'*/
      else
        KBWREC.KBWRETNF = "Y"; /* ; return to prev screen*/
        KBWREC.KBWCH2FL = "N"; /* changes were not saved*/
        KBWREC.KBWERRFL = "N"; /* reset error flag*/
        KBWREC.KBWPFKEY[2] = " "; /* reset*/
        KB0C038(); /* restore map address fields*/
      end
    else
      KBWREC.KBWRETNF = "Y"; /* ; return to prev screen*/
      KBWREC.KBWCH2FL = "N"; /* changes were not saved*/
      KBWREC.KBWERRFL = "N"; /* reset error flag*/
      KBWREC.KBWPFKEY[2] = " "; /* reset*/
      KB0C038(); /* restore map address fields*/
    end
    ;
    ;
  else
    if (converseVar.eventKey is enter)
      KBWREC.KBWTBLID = " "; /* ; reset list request*/
      KB0C013(); /* ; edit screen values*/
      if (KBWREC.KBWERRFL == "N") /* ; no errors encountered*/
        if (KBWREC.KBWTBLID != " ") /* ; list requested*/
          COMMAREA.CATOAP = "KB0U";
          KB0C092(); /* ; save main scrn to KBWREC*/
          KB0C017(); /* ; save this scrn to KBWREC*/
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          XSEXIT();
          KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        else
          KB0C014(); /* ; update process*/
          KBWREC.KBWRETNF = "Y"; /* ; okay to return now*/
        end
      end
    else
      converseLib.validationFailed(7); /* ; 'INVALID KEY PRESSED'*/
    end
  end
end // end KB0C012

// buyer address edit
Function KB0C013()
  KBWREC.KBWERRFL = "N";
  if (KB0CM002.XXXADDR1 == " " 
   /* ; at least one address line*/
   && KB0CM002.XXXADDR2 == " " /* ; must be entered*/
   && KB0CM002.XXXADDR3 == " ")
    KBWREC.KBWERRFL = "Y";
    set KB0CM002.XXXADDR1 cursor, bold;
    converseLib.validationFailed(10);
                                   /* ; 'ENTER AT LEAST ONE ADDR'*/
  else
    if (KB0CM002.XXXCITY == " ") /* ; city is not entered*/
      KBWREC.KBWERRFL = "Y";
      set KB0CM002.XXXCITY cursor, bold;
      converseLib.validationFailed(11); /* ; 'CITY IS REQUIRED'*/
    else
      if (KB0CM002.XSTCD == " ") /* ; state not entered*/
        if (KB0CM002.XCTCD == "USA ") /* ; state required with USA*/
          KBWREC.KBWERRFL = "Y";
          KB0CM002.XSTDESC = " "; /* ; clear description*/
          set KB0CM002.XSTCD cursor, bold;
          converseLib.validationFailed(13); /* ; 'STATE IS REQUIRED'*/
        end
      else
        KBWREC.KBWSPLIT = KB0CM002.XSTCD;
        if (KBWREC.KBWSPLT1 == "?" /* ; want list of states*/
         || KBWREC.KBWSPLT2 == "?")
          KBWREC.KBWTBLID = "ST"; /* ; state table indicator*/
        else
          if (KB0CM002.XSTCD in XSTTBL.XSTCD) /* ;find state in table*/
            KB0CM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
          else
            KBWREC.KBWERRFL = "Y"; /* ; state not found*/
            KB0CM002.XSTDESC = " "; /* ; clear description*/
            set KB0CM002.XSTCD cursor, bold;
            converseLib.validationFailed(12); /* ; 'INVALID STATE CODE'*/
          end
        end
      end
    end
  end
  ;
  ;
  if (KBWREC.KBWERRFL == "N" /* ; no errors this far*/
   && KBWREC.KBWTBLID == " ") /* ; list not requested*/
    if (KB0CM002.XCTCD == "USA ") /* ; US addrs require zip*/
      if (KB0CM002.XXXZIP == " ") /* ; zip is blank*/
        KBWREC.KBWERRFL = "Y";
        set KB0CM002.XXXZIP cursor, bold;
        converseLib.validationFailed(15); /* ; 'ZIP IS REQUIRED'*/
      end
    else
      if (KB0CM002.XCTCD == " ") /* ; country is blank*/
        KBWREC.KBWERRFL = "Y";
        KB0CM002.XCTDESC = " "; /* ; clear cntry desc*/
        set KB0CM002.XCTCD cursor, bold;
        converseLib.validationFailed(87); /* ; 'COUNTRY IS REQUIRED'*/
      else
        KBWREC.KBWSPLIT = KB0CM002.XCTCD;
        if (KBWREC.KBWSPLT1 == "?" /* ; check for list request*/
         || KBWREC.KBWSPLT2 == "?" 
         || KBWREC.KBWSPLT3 == "?" 
         || KBWREC.KBWSPLT4 == "?")
          KBWREC.KBWTBLID = "CT"; /* ; country table indicator*/
        else
          if (KB0CM002.XCTCD in XCTTBL.XCTCD) /* ; find country in table*/
            KB0CM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
          else
            KBWREC.KBWERRFL = "Y"; /* ; cntry desc not found*/
            KB0CM002.XCTDESC = " "; /* ; clear description*/
            set KB0CM002.XCTCD cursor, bold;
            converseLib.validationFailed(16); /* ; 'INVALID COUNTRY CODE'*/
          end
        end
      end
    end
  end
  ;
end // end KB0C013

// update buyer address info
Function KB0C014()
  KB0C019(); /* ; check for changes*/
  ;
  if (KBWREC.KBWCH2FL == "Y") /* ; changes exist*/
    if (KBWREC.KBWAFND == "Y") /* ; address already existed*/
      KB0C015(); /* ; update and write audit*/
    else
      KB0C016(); /* ; add and write audit*/
    end
  else
    KB0C038(); /* ; restore address fields*/
  end
end // end KB0C014

// update buyer address info
Function KB0C015()
  ;
  set KUZREC empty; /* ; initialize audit rec*/
  XPKB031(); /* ; get current date/time*/
  KUZREC.KUZTYPE = "C"; /* ; change transaction*/
  KUZREC.KUZBFCD = "B"; /* ; before image indicatory*/
  KUZREC.KUCCOID = KBWREC.KBABUYID;
  KUZREC.XXXTBLNM = "VBADDR01"; /* ; stuff for buyer addr*/
  KB3REC.KB3DATA = KBBREC.KBBGRP; /* ; addr to data rec*/
  KB0C099(); /* ; write audit record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; audit written okay*/
    KBBREC.XXXADDR1 = KB0CM002.XXXADDR1; /* ; move values to KBBREC*/
    KBBREC.XXXADDR2 = KB0CM002.XXXADDR2;
    KBBREC.XXXADDR3 = KB0CM002.XXXADDR3;
    KBBREC.XXXCITY = KB0CM002.XXXCITY;
    KBBREC.XSTCD = KB0CM002.XSTCD;
    KBBREC.XCTCD = KB0CM002.XCTCD;
    KBBREC.XXXZIP = KB0CM002.XXXZIP;
    KBBREC.ZZZSDT = TA2REC.TA2GRGGN;
    KBBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    ;
    set SQLCA empty; /* ; update buyer addr row*/
    call "IO4320" ("U ", SQLCA, KBBREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* ; set up after image*/
      KUZREC.KUZBFCD = "A";
      KB3REC.KB3DATA = KBBREC.KBBGRP;
      KB0C099();
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* ; commit updates*/
        KB0CM001.KBWASEL[5] = "*"; /* show addr done on scrn 1*/
        KB0CM001.KULAAID[1] = 0; /* reset addr id's on scrn 1*/
        KB0CM001.KULAAID[2] = 0;
        KB0CM001.KULAAID[3] = 0;
        KB0CM001.KULAAID[4] = 0;
        KBWREC.XAD-ADDR-TYP-CD = "02"; /* buyer address*/
        KB0C017(); /* ; new values to kbwrec*/
      end
      ;
    else /* ; update failed*/
      TA1REC.TA1LOCAT[1] = "KB0C015 ";
      TA1REC.TA1LOCAT[2] = "IO4320 ";
      TA1REC.TA1LOCAT[3] = "U";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VBADDR01";
      KBWREC.KBWBIDKE = KBWREC.KBABUYID; /* ; set up key*/
      TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;
      XPKB900(); /* ; abend application*/
    end
  end
end // end KB0C015

// Add buyer address info
Function KB0C016()
  set KBBREC empty; /* ; initialize addr rec*/
  KBBREC.KBABUYID = KBWREC.KBABUYID; /* ; move values to kbbrec*/
  KBBREC.XXXADDR1 = KB0CM002.XXXADDR1;
  KBBREC.XXXADDR2 = KB0CM002.XXXADDR2;
  KBBREC.XXXADDR3 = KB0CM002.XXXADDR3;
  KBBREC.XXXCITY = KB0CM002.XXXCITY;
  KBBREC.XSTCD = KB0CM002.XSTCD;
  KBBREC.XCTCD = KB0CM002.XCTCD;
  KBBREC.XXXZIP = KB0CM002.XXXZIP;
  KBBREC.ZZZSDT = TA2REC.TA2GRGGN;
  KBBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  set SQLCA empty;
  call "IO4320" ("A ", SQLCA, KBBREC) {isNoRefresh = yes, isExternal = yes}; /* ;add buyer address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; address added okay*/
    set KUZREC empty; /* ; initialize audit record*/
    KUZREC.KUCCOID = KBWREC.KBABUYID;
    KUZREC.XXXTBLNM = "VBADDR01"; /* ; buyer addr view*/
    KUZREC.KUZTYPE = "A"; /* ; function type*/
    KUZREC.KUZBFCD = " "; /* ; bef/aft ind to space*/
    KB3REC.KB3DATA = KBBREC.KBBGRP; /* ; addr to data rec*/
    KB0C099(); /* ; write audit record*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* ; audit record written*/
      if (KBWREC.KULAAID > 0) /* ; was using cust addr*/
        KB0C076(); /* ; remove from cust addr*/
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* ; commit changes*/
        KB0CM001.KBWASEL[5] = "*"; /* show address done on scrn 1*/
        KB0CM001.KULAAID[1] = 0; /* clear addr id's on scrn 1*/
        KB0CM001.KULAAID[2] = 0; /* clear addr id's on scrn 1*/
        KB0CM001.KULAAID[3] = 0; /* clear addr id's on scrn 1*/
        KB0CM001.KULAAID[4] = 0; /* clear addr id's on scrn 1*/
        KBWREC.KUCCOID = 0; /* ; clear company*/
        KBWREC.KBW-KUMSTRID = 0; /* ; clear store*/
        KBWREC.KULAAID = 0; /* ; clear addr id*/
        KBWREC.XAD-ADDR-TYP-CD = "02"; /* ; buyer address*/
        KB0C017(); /* ; move addr to kbwrec*/
      end
    end
    ;
  else /* ; add byr addr failed*/
    TA1REC.TA1TBLVU = "VBADDR01"; /* ; buyer addr table*/
    TA1REC.TA1LOCAT[1] = "KB0C016"; /* ; module name*/
    TA1REC.TA1LOCAT[2] = "IO4320"; /* ; iomod name*/
    TA1REC.TA1LOCAT[3] = "A"; /* ; transaction type*/
    KBWREC.KBWBIDKE = KBAREC.KBABUYID; /* ; key to row*/
    TA1REC.TA1TBLKE = KBWREC.KBWBIDKE;
    XPKB900(); /* ; common abend routine*/
  end
end // end KB0C016

// move values from screen to w/s
Function KB0C017()
  KBWREC.XXXADDR1 = KB0CM002.XXXADDR1;
  KBWREC.XXXADDR2 = KB0CM002.XXXADDR2;
  KBWREC.XXXADDR3 = KB0CM002.XXXADDR3;
  KBWREC.XXXCITY = KB0CM002.XXXCITY;
  KBWREC.KBWSPLIT = KB0CM002.XSTCD;
  if (KBWREC.KBWSPLT1 != "?") /* ; don't move if list req*/
    KBWREC.XSTCD = KB0CM002.XSTCD;
  end
  KBWREC.XXXZIP = KB0CM002.XXXZIP;
  KBWREC.KBWSPLIT = KB0CM002.XCTCD;
  if (KBWREC.KBWSPLT1 != "?") /* ; don't move if list req*/
    KBWREC.XCTCD = KB0CM002.XCTCD;
  end
end // end KB0C017

// buyer address converse
Function KB0C018()
  converse KB0CM002 ;
  set KB0CM002.XXXADDR1 normal;
  set KB0CM002.XXXADDR2 normal;
  set KB0CM002.XXXADDR3 normal;
  set KB0CM002.XXXCITY normal;
  set KB0CM002.XSTCD normal;
  set KB0CM002.XXXZIP normal;
  set KB0CM002.XCTCD normal;
  KBWREC.XXXMAPNM = "KB0CM002";
end // end KB0C018

// Check addr screen for changes
Function KB0C019()
  ;
  XPKB012(); /* get buyer address*/
  ;
  KBWREC.KBWCH2FL = "N"; /* set change flag off*/
  ;
  if (KBBREC.XXXADDR1 != KB0CM002.XXXADDR1) /* address line 1 changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KBBREC.XXXADDR2 != KB0CM002.XXXADDR2) /* address line 2 changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KBBREC.XXXADDR3 != KB0CM002.XXXADDR3) /* address line 3 changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KBBREC.XXXCITY != KB0CM002.XXXCITY) /* city changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KBBREC.XSTCD != KB0CM002.XSTCD) /* state changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KBBREC.XXXZIP != KB0CM002.XXXZIP) /* zip code changed*/
    KBWREC.KBWCH2FL = "Y";
  end
  if (KBBREC.XCTCD == " " /* country didn't previously exist*/
   && KB0CM002.XCTCD == "USA ") /* default was used on map*/
    /* next sentence --- don't check for a change*/
  else
    if (KBBREC.XCTCD != KB0CM002.XCTCD) /* country changed*/
      KBWREC.KBWCH2FL = "Y";
    end
  end
end // end KB0C019

// edit status field
Function KB0C020()
  if (KB0CM001.XXXSTAT == "A") /* ; reactivating a buyer*/
    if (KBWREC.KBW-BXREF-CNT == 0) /* no active bxrefs*/
      KBWREC.KBWATVFL = "Y"; /* ; set activate flag on*/
      KBWREC.KBWERRFL = "Y"; /* ; set error flag on*/
      converseLib.validationFailed(81); /* accounts must be attached*/
    end
  else
    if (KB0CM001.XXXSTAT == "I") /* ; inactivating a buyer*/
      /* next sentence      /* ; accounts will be detached automatically*/
    else
      KBWREC.KBWERRFL = "Y"; /* ; set error flag on*/
      converseLib.validationFailed(82); /* ; 'INVALID STATUS'*/
    end
  end
end // end KB0C020

// Process PF16 (xfer to Comments
Function KB0C030()
  if (KB0CM001.KBABUYID == 0
   || KBWREC.KBWBFND == "N") /* buyer not found*/
    KBWREC.KBWERRFL = "Y"; /* set error flag on*/
    set KB0CM001.KBABUYID bold, cursor;
    converseLib.validationFailed(142); /* enter buyer before xfer*/
  else
    if (KBWREC.KBABUYID == KB0CM001.KBABUYID) /* buyer not changed*/
      KB0C079(); /* ; check for changes*/
      if (KBWREC.KBWCHGFL == "Y" /* ; if changes were made*/
       && KBWREC.KBWATVFL != "Y") /* not activating buyer*/
        if (KBWREC.KBWPFKEY[2] == "PF16") /* ; pressed PF16 before*/
          COMMAREA.CATOAP = "KB0N"; /* ; XFER to notes*/
          COMMAREA.CAFROMAP = "KB0C";
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          XSEXIT();
          KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        else
          KBWREC.KBWPFKEY[1] = "PF16"; /* save PF16*/
          converseLib.validationFailed(83); /* ; 'PRESS PF16 AGAIN'*/
        end
      else
        if (KBWREC.KBWATVFL == "Y") /* activating buyer*/
          KB0C092(); /* save current screen values*/
        end
        COMMAREA.CATOAP = "KB0N"; /* ; go to comment screen*/
        COMMAREA.CAFROMAP = "KB0C";
        COMMAREA.CAUSERA = KBWREC.KBWGROUP;
        XSEXIT();
        KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
    else
      if (KBWREC.KBABUYID != KB0CM001.KBABUYID) /* buyer changed*/
        KBWREC.KBWERRFL = "Y"; /* set error flag on*/
        set KB0CM001.KBABUYID bold, cursor;
        converseLib.validationFailed(137); /* can't change buyer & xfer*/
      end
    end
  end
end // end KB0C030

// Process PF17 (xfer to attach)
Function KB0C031()
  if (KB0CM001.KBABUYID == 0
   || KBWREC.KBWBFND == "N") /* buyer not found*/
    KBWREC.KBWERRFL = "Y"; /* set error on*/
    set KB0CM001.KBABUYID cursor, bold;
    converseLib.validationFailed(142); /* enter valid buyer before xfer*/
  else
    ;
    if (KBWREC.KBABUYID == KB0CM001.KBABUYID /* buyer not changed*/
     && KB0CM001.XXXSTAT == "I")             /* inactive buyer*/
      KBWREC.KBWERRFL = "Y"; /* set error on*/
      converseLib.validationFailed(182); /* can't attach accts to inactive buyer*/
    else
      ;
      if (KBWREC.KBABUYID == KB0CM001.KBABUYID) /* buyer not changed*/
        ;
        KB0C079(); /* ; check for changes*/
        ;
        if (KBWREC.KBWCHGFL == "Y" /* ; changes made*/
         && KBWREC.KBWATVFL != "Y") /* not activating buyer*/
          if (KBWREC.KBWPFKEY[2] == "PF17") /* ; pressed PF17 before*/
            COMMAREA.CAFROMAP = "KB0C";
            COMMAREA.CATOAP = "KB0T"; /* ; XFER to attach*/
            COMMAREA.CAUSERA = KBWREC.KBWGROUP;
            XSEXIT();
            KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          else
            KBWREC.KBWPFKEY[1] = "PF17"; /* save PF17*/
            converseLib.validationFailed(84); /* ; 'PRESS PF17 AGAIN'*/
          end
        else /* ; no changes made*/
          if (KBWREC.KBWATVFL == "Y") /* activating buyer*/
            KB0C092(); /* save current screen values*/
          end
          COMMAREA.CAFROMAP = "KB0C";
          COMMAREA.CATOAP = "KB0T"; /* ; go to attach*/
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          XSEXIT();
          KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        end
      else
        ;
        if (KBWREC.KBABUYID != KB0CM001.KBABUYID) /* buyer changed*/
          ;
          KBWREC.KBWERRFL = "Y"; /* set error on*/
          set KB0CM001.KBABUYID cursor, bold;
          converseLib.validationFailed(137); /* can't change buyer and xfer*/
        end
      end
    end
  end
end // end KB0C031

// Process PF18 (xfer to detach)
Function KB0C032()
  if (KB0CM001.KBABUYID == 0
   || KBWREC.KBWBFND == "N") /* buyer not found*/
    KBWREC.KBWERRFL = "Y"; /* set error on*/
    set KB0CM001.KBABUYID bold, cursor;
    converseLib.validationFailed(142); /* enter valid buyer before xfer*/
  else
    ;
    if (KBWREC.KBABUYID == KB0CM001.KBABUYID /* buyer not changed*/
     && KB0CM001.XXXSTAT == "I")             /* inactive buyer*/
      KBWREC.KBWERRFL = "Y"; /* set error on*/
      converseLib.validationFailed(184); /* inactive buyer, can't detach*/
    else
      ;
      if (KBWREC.KBABUYID == KB0CM001.KBABUYID) /* buyer not changed*/
        KB0C079(); /* ; check for changes*/
        if (KBWREC.KBWCHGFL == "Y" /* ; changes exist*/
         && KBWREC.KBWATVFL != "Y") /* not activating buyer*/
          if (KBWREC.KBWPFKEY[2] == "PF18") /* pressed PF18 before*/
            COMMAREA.CAFROMAP = "KB0C";
            COMMAREA.CATOAP = "KB0D"; /* go to detach*/
            COMMAREA.CAUSERA = KBWREC.KBWGROUP;
            XSEXIT();
            KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          else
            KBWREC.KBWPFKEY[1] = "PF18"; /* save PF18*/
            converseLib.validationFailed(85); /* ; 'PRESS PF18 AGAIN'*/
          end
        else
          if (KBWREC.KBWATVFL == "Y") /* activating buyer*/
            KB0C092(); /* save current screen values*/
          end
          COMMAREA.CAFROMAP = "KB0C";
          COMMAREA.CATOAP = "KB0D"; /* ; go to detach*/
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          XSEXIT();
          KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        end
      else
        if (KBWREC.KBABUYID != KB0CM001.KBABUYID) /* buyer changed*/
          KBWREC.KBWERRFL = "Y"; /* set error on*/
          set KB0CM001.KBABUYID bold, cursor;
          converseLib.validationFailed(137); /* can't change buyer and xfer*/
        end
      end
    end
  end
end // end KB0C032

// Process PF19 (xfer to reassign
Function KB0C033()
  if (KB0CM001.KBABUYID == 0
   || KBWREC.KBWBFND == "N") /* buyer not found*/
    KBWREC.KBWERRFL = "Y"; /* set error on*/
    set KB0CM001.KBABUYID cursor, bold;
    converseLib.validationFailed(142); /* enter valid buyer before xfer*/
  else
    ;
    if (KBWREC.KBABUYID == KB0CM001.KBABUYID /* buyer not changed*/
     && KB0CM001.XXXSTAT == "I")             /* inactive buyer*/
      KBWREC.KBWERRFL = "Y"; /* set error on*/
      converseLib.validationFailed(183); /* inactive buyer, can't reassign*/
    else
      ;
      if (KBWREC.KBABUYID == KB0CM001.KBABUYID) /* buyer not changed*/
        KB0C079(); /* ; check for changes*/
        if (KBWREC.KBWCHGFL == "Y" /* ; changes were made*/
         && KBWREC.KBWATVFL != "Y") /* not activating buyer*/
          if (KBWREC.KBWPFKEY[2] == "PF19") /* PF19 pressed before*/
            COMMAREA.CATOAP = "KB0R"; /* go to reassign*/
            COMMAREA.CAFROMAP = "KB0C";
            COMMAREA.CAUSERA = KBWREC.KBWGROUP;
            XSEXIT(); /* ; XFER to reassign*/
            KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          else
            KBWREC.KBWPFKEY[1] = "PF19"; /* save PF19*/
            converseLib.validationFailed(86); /* ; 'PRESS PF19 AGAIN'*/
          end
        else /* ; no changes made*/
          if (KBWREC.KBWATVFL == "Y") /* activating buyer*/
            KB0C092(); /* save current screen values*/
          end
          COMMAREA.CATOAP = "KB0R"; /* XFER to reassign*/
          COMMAREA.CAFROMAP = "KB0C";
          COMMAREA.CAUSERA = KBWREC.KBWGROUP;
          XSEXIT();
          KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        end
      else
        if (KBWREC.KBABUYID != KB0CM001.KBABUYID) /* buyer changed*/
          KBWREC.KBWERRFL = "Y"; /* set error on*/
          set KB0CM001.KBABUYID cursor, bold;
          converseLib.validationFailed(137); /* can't change buyer and xfer*/
        end
      end
    end
  end
end // end KB0C033

// Process ENTER key
Function KB0C034()
  if (KB0CM001.KBABUYID == 0) /* ; no buyer id*/
    if (KBWREC.KBWPFKEY[2] == "ENT" /* enter already hit*/
     && KB0CM001.KBABUYID == KBWREC.KBABUYID)
      COMMAREA.CATOAP = "KB0M"; /* go to menu*/
      XPKB090(); /* clear buyer from kbwrec*/
      COMMAREA.CAUSERA = KBWREC.KBWGROUP;
      XSEXIT(); /* transfer*/
      KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    else
      KBWREC.KBWPFKEY[1] = "ENT"; /* save ENTER*/
      XPKB090(); /* clear buyer from kbwrec*/
      KB0C091(); /* clear screen*/
      set KBAREC empty; /* clear kbarec*/
      KBWREC.KBWERRFL = "Y"; /* set error on*/
      converseLib.validationFailed(68); /* ; 'ENTER BUYER ID'*/
    end
  else /* ; buyer id was changed*/
    if (KB0CM001.KBABUYID != KBWREC.KBABUYID)
      KBWREC.KBWATVFL = "N"; /* reset activate flag*/
      KBWREC.KBABUYID = KB0CM001.KBABUYID;
      KB0C091(); /* ;clear the screen*/
      KB0C090(); /* ; get buyer info*/
      if (KBWREC.KBWBFND == "Y") /* ; buyer found*/
        KB0C093(); /* ; load data to screen*/
        KB0C008(); /* ; count bxrefs*/
      else
        converseLib.validationFailed(58); /* ; 'BUYER NOT FOUND'*/
        KB0C091(); /* ;clear the screen*/
        XPKB090(); /* clear buyer info from kbwrec*/
        KBWREC.KBABUYID = KB0CM001.KBABUYID;
      end
    else
      if (KBWREC.KBWBFND == "Y") /* buyer found*/
        KB0C040(); /* ; edit screen values*/
        if (KBWREC.KBWERRFL == "N") /* no errors*/
          KB0C007(); /* update process*/
        end
      else
        converseLib.validationFailed(58); /* ; 'BUYER NOT FOUND'*/
        KB0C091(); /* ;clear the screen*/
        XPKB090(); /* clear buyer info from kbwrec*/
        KBWREC.KBABUYID = KB0CM001.KBABUYID;
      end
    end
  end
end // end KB0C034

// Process PF12
Function KB0C035()
  KB0C079(); /* ; check for changes*/
  if (KBWREC.KBWCHGFL == "Y") /* ; if changes were made*/
    if (KBWREC.KBWPFKEY[2] == "PF12") /* ; pressed PF12 before*/
      COMMAREA.CATOAP = "KB0I"; /* ; XFER to inquire buyer*/
      COMMAREA.CAFROMAP = "KB0C";
      COMMAREA.CAUSERA = KBWREC.KBWGROUP;
      XSEXIT();
      KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    else
      KBWREC.KBWPFKEY[1] = "PF12"; /* save PF12*/
      converseLib.validationFailed(138); /* ; 'PRESS PF12 AGAIN'*/
    end
  else /* no changes made*/
    COMMAREA.CATOAP = "KB0I"; /* ; go to inquire buyer*/
    COMMAREA.CAFROMAP = "KB0C";
    COMMAREA.CAUSERA = KBWREC.KBWGROUP;
    XSEXIT();
    KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
end // end KB0C035

// Process PF6 (xfer to browse)
Function KB0C036()
  ;
  KB0C079(); /* ; check for changes*/
  if (KBWREC.KBWCHGFL == "Y") /* ; if changes were made*/
    if (KBWREC.KBWPFKEY[2] == "PF6") /* ; pressed PF6 before*/
      COMMAREA.CATOAP = "KB0B"; /* ; XFER to inquire buyer*/
      COMMAREA.CAFROMAP = "KB0C";
      COMMAREA.CAUSERA = KBWREC.KBWGROUP;
      XSEXIT();
      KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    else
      KBWREC.KBWPFKEY[1] = "PF6"; /* save PF6*/
      converseLib.validationFailed(163); /* ; 'PRESS PF6 AGAIN'*/
    end
  else /* no changes made*/
    COMMAREA.CATOAP = "KB0B"; /* ; go to browse entry screen*/
    COMMAREA.CAFROMAP = "KB0C";
    COMMAREA.CAUSERA = KBWREC.KBWGROUP;
    XSEXIT();
    KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  ;
end // end KB0C036

// Restore map address fields
Function KB0C038()
  if (KBWREC.XAD-ADDR-TYP-CD == "01") /* bill to address*/
    KB0CM001.KUCCOID[1] = KBWREC.KUCCOID;
    KB0CM001.KULAAID[1] = KBWREC.KULAAID;
  else
    KB0CM001.KUCCOID[1] = 0;
    KB0CM001.KULAAID[1] = 0;
  end
  ;
  if (KBWREC.XAD-ADDR-TYP-CD == "02") /* buyer address*/
    KB0CM001.KBWASEL[5] = "*";
  else
    KB0CM001.KBWASEL[5] = " ";
  end
  ;
  if (KBWREC.XAD-ADDR-TYP-CD == "03") /* ship to address*/
    KB0CM001.KUCCOID[3] = KBWREC.KUCCOID;
    KB0CM001.KULAAID[3] = KBWREC.KULAAID;
    KBWREC.KBWSTRID = KBWREC.KBW-KUMSTRID;
    KB0CM001.KB0CMSID[1] = KBWREC.KBWSTRCH;
  else
    KB0CM001.KUCCOID[3] = 0;
    KB0CM001.KULAAID[3] = 0;
    KB0CM001.KB0CMSID[1] = " ";
  end
  ;
  if (KBWREC.XAD-ADDR-TYP-CD == "04") /* company address*/
    KB0CM001.KUCCOID[2] = KBWREC.KUCCOID;
    KB0CM001.KULAAID[2] = KBWREC.KULAAID;
  else
    KB0CM001.KUCCOID[2] = 0;
    KB0CM001.KULAAID[2] = 0;
  end
  ;
  if (KBWREC.XAD-ADDR-TYP-CD == "05") /* store address*/
    KB0CM001.KUCCOID[4] = KBWREC.KUCCOID;
    KB0CM001.KULAAID[4] = KBWREC.KULAAID;
    KBWREC.KBWSTRID = KBWREC.KBW-KUMSTRID;
    KB0CM001.KB0CMSID[2] = KBWREC.KBWSTRCH;
  else
    KB0CM001.KUCCOID[4] = 0;
    KB0CM001.KULAAID[4] = 0;
    KB0CM001.KB0CMSID[2] = " ";
  end
  ;
  set KB0CM001.KBABUYID cursor;
end // end KB0C038

// module to perform scrn edits
Function KB0C040()
  KBWREC.KBWERRFL = "N"; /* ; reset error flag*/
  KBWREC.KBWATVFL = "N"; /* ; reset activate flag*/
  ;
  KB0C020(); /* ; edit status*/
  if (KBWREC.KBWERRFL == "N") /* ; no error*/
    KB0C045(); /* ; edit name, flag, & title*/
    if (KBWREC.KBWERRFL == "N") /* ; no error*/
      KB0C046(); /* ; edit phone*/
      if (KBWREC.KBWERRFL == "N") /* ; no error*/
        KB0C047(); /* ; edit alternate phone*/
        if (KBWREC.KBWERRFL == "N") /* ; no error*/
          KB0C055(); /* ; edit purch resp's*/
          if (KBWREC.KBWERRFL == "N") /* ; no error*/
            KB0C060(); /* ; edit address selections*/
          end
        end
      end
    end
  end
end // end KB0C040

// edit for name, flag, & title
Function KB0C045()
  if (KB0CM001.XXXLSTNM == " ") /* ; last name is spaces*/
    set KB0CM001.XXXLSTNM cursor, bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(17); /* ; 'LAST NAME REQUIRED'*/
  end
  if (KB0CM001.YBTCD == " ") /* ; buyer title*/
    KBWREC.YBTCD = " ";
    set KB0CM001.YBTCD cursor, bold;
    KBWREC.KBWERRFL = "Y";
    converseLib.validationFailed(18); /* ; 'BUYER TITLE CODE REQ'*/
  else
    KBWREC.KBWSPLIT = KB0CM001.YBTCD; /* ; check for list request*/
    if (KBWREC.KBWSPLT1 == "?"
     || KBWREC.KBWSPLT2 == "?"
     || KBWREC.KBWSPLT3 == "?")
      COMMAREA.CATOAP = "KB0U"; /* ; list application*/
      KB0C092(); /* ; save screen data in w/s*/
      KBWREC.KBWTBLID = "BT"; /* ; list indicator*/
      COMMAREA.CAUSERA = KBWREC.KBWGROUP;
      XSEXIT(); /* ; transfer to list appl*/
      KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    else /* ; list not requested*/
      if (KB0CM001.YBTCD in YBTTBL.YBTCD /* ; find title desc*/
       && KB0CM001.YBTCD != "999")      
        KB0CM001.YBTDESC = YBTTBL.YBTDESC[sysVar.arrayIndex];
      else /* ; title code not found*/
        KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
        KB0CM001.YBTDESC = " "; /* ; clear description*/
        set KB0CM001.YBTCD cursor, bold;
        converseLib.validationFailed(19); /* ; 'INVALID TITLE CODE'*/
      end
      if (KB0CM001.KBABUYFL == " ") /* ; buyer flag blank*/
        KBWREC.KBWERRFL = "Y";
        set KB0CM001.KBABUYFL cursor, bold;
        converseLib.validationFailed(20); /* ; 'BUYER FLAG REQUIRED'*/
      else
        if (KB0CM001.KBABUYFL != "Y" /* ; must be 'Y' or 'N'*/
         && KB0CM001.KBABUYFL != "N")
          KBWREC.KBWERRFL = "Y";
          set KB0CM001.KBABUYFL cursor, bold;
          converseLib.validationFailed(21); /* ; 'MUST BE 'Y' OR 'N''*/
        end
      end
    end
  end
end // end KB0C045

// EDIT PHONE 1
Function KB0C046()
  ;
  ;
  if (KB0CM001.KBWAREA1 != " "
   || KB0CM001.KBWPRFX1 != " "
   || KB0CM001.KBWLINE1 != " ")
    ;
    if (KB0CM001.KBWAREA1 == " "
     || KB0CM001.KBWPRFX1 == " "
     || KB0CM001.KBWLINE1 == " ")
      set KB0CM001.KBWAREA1 cursor, bold;
      set KB0CM001.KBWPRFX1 bold;
      set KB0CM001.KBWLINE1 bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(22);
    end
  end
  ;
  ;
end // end KB0C046

// EDIT PHONE 2
Function KB0C047()
  ;
  ;
  if (KB0CM001.KBWAREA2 != " "
   || KB0CM001.KBWPRFX2 != " "
   || KB0CM001.KBWLINE2 != " ")
    ;
    if (KB0CM001.KBWAREA2 == " "
     || KB0CM001.KBWPRFX2 == " "
     || KB0CM001.KBWLINE2 == " ")
      set KB0CM001.KBWAREA2 cursor, bold;
      set KB0CM001.KBWPRFX2 bold;
      set KB0CM001.KBWLINE2 bold;
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(23);
    end
  end
  ;
  ;
end // end KB0C047

// edit for purchase resp cds
Function KB0C055()
  KBWREC.KBWSUB1 = 10;
  while (KBWREC.KBWSUB1 > 0)
    KBWREC.KBWSPLIT = KB0CM001.YBBCD[KBWSUB1];
    if (KBWREC.KBWSPLT1 == "?" /* ; check for list request*/
     || KBWREC.KBWSPLT2 == "?" 
     || KBWREC.KBWSPLT3 == "?" 
     || KBWREC.KBWSPLT4 == "?")
      KBWREC.KBWTBLID = "BB"; /* ; table identifier*/
      COMMAREA.CATOAP = "KB0U"; /* ; list application*/
      KB0C092(); /* ; save screen values*/
      COMMAREA.CAUSERA = KBWREC.KBWGROUP;
      XSEXIT(); /* ; trans to list appl*/
      KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
  end
  ;
  ;
  KBWREC.KBWSUB1 = 10;
  while (KBWREC.KBWSUB1 > 0) /* ; find descriptions*/
    if (KB0CM001.YBBCD[KBWSUB1] != " ") /* ; code to check*/
      if (KB0CM001.YBBCD[KBWSUB1] != "9999") /* ; not end of table*/
        XP0AW01.XP0AWFLD = KB0CM001.YBBCD[KBWSUB1]; /* ; check for num*/
        XP0A001();
        if (XP0AW01.XP0AWEFL == "Y") /* ; non-numeric value*/
          set KB0CM001.YBBCD[KBWSUB1] cursor, bold;
          KB0CM001.YBBDESC[KBWSUB1] = "UNKNOWN CODE";
          KBWREC.KBWERRFL = "Y";
          converseLib.validationFailed(26);
        else
          KBWREC.KBWYBBCH = KB0CM001.YBBCD[KBWSUB1]; /* ; zero fill*/
          KBWREC.KBWYBBNM = KBWREC.KBWYBBNM * 1;
          KB0CM001.YBBCD[KBWSUB1] = KBWREC.KBWYBBCH; /* ; but it works*/
          if (KB0CM001.YBBCD[KBWSUB1] in YBBTBL.YBBCD) /* if in table*/
            KB0CM001.YBBDESC[KBWSUB1] = YBBTBL.YBBDESC[sysVar.arrayIndex];
          else /* ; not in table*/
            KBWREC.KBWERRFL = "Y";
            set KB0CM001.YBBCD[KBWSUB1] cursor, bold;
            KB0CM001.YBBDESC[KBWSUB1] = "UNKNOWN CODE";
            set KB0CM001.YBBDESC[KBWSUB1] bold;
            converseLib.validationFailed(26); /* ; 'INVALID RESP CODE'*/
          end
        end
      else
        KBWREC.KBWERRFL = "Y"; /* ; 99 is not valid code*/
        set KB0CM001.YBBCD[KBWSUB1] cursor, bold;
        KB0CM001.YBBDESC[KBWSUB1] = "UNKNOWN CODE";
        set KB0CM001.YBBDESC[KBWSUB1] bold;
        converseLib.validationFailed(26); /* ; 'INVALID RESP CODE'*/
      end
    else
      KB0CM001.YBBDESC[KBWSUB1] = " "; /* clear desc*/
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
  end
  if (KBWREC.KBWERRFL == "N") /* ; no errors*/
    KB0C056(); /* ; check for dup resp codes*/
    if (KBWREC.KBWERRFL == "Y") /* ; duplicates found*/
      converseLib.validationFailed(25); /* ; 'NO DUPS ALLOWED'*/
    end
  end
  ;
  ;
end // end KB0C055

// edit dup resp codes
Function KB0C056()
   /* ------------------------------------------------------------*/
   /* The first part of this process that checks for duplicates*/
   /* works like a clock.  The first sub looks at the first code,*/
   /* like an hour hand, and the second points at the others*/
   /* incrementing until greater than 10, like a second hand,*/
   /* comparing to the first value.  When the second sub is*/
   /* greater than 10, the first is incremented by one and the*/
   /* second set to one greater than the first and life goes on.*/
   /* ------------------------------------------------------------*/
  ;
  KBWREC.KBWSUB1 = 1;
  KBWREC.KBWSUB2 = 2;
  while (KBWREC.KBWSUB1 <= 10)
    while (KBWREC.KBWSUB2 <= 10)
      if (KB0CM001.YBBCD[KBWSUB1] > " ")
        if (KB0CM001.YBBCD[KBWSUB1] == KB0CM001.YBBCD[KBWSUB2])
          if (KBWREC.KBWERRFL == "N")
            set KB0CM001.YBBCD[KBWSUB2] cursor, bold;
            KBWREC.KBWERRFL = "Y";
          else
            set KB0CM001.YBBCD[KBWSUB2] bold;
          end
        end
      end
      KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1;
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
    KBWREC.KBWSUB2 = KBWREC.KBWSUB1 + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* This portion moves the codes up so if any codes*/
   /* were removed there will not be blank spaces between*/
   /* entries.*/
   /* ------------------------------------------------------------*/
  ;
  if (KBWREC.KBWERRFL == "N")
    KB0CW04.KB0CW4GP = " ";
    KBWREC.KBWSUB = 1;
    KBWREC.KBWSUB1 = 1;
    while (KBWREC.KBWSUB <= 10)
      if (KB0CM001.YBBCD[KBWSUB] > "  ")
        KB0CW04.YBBCD[KBWSUB1] = KB0CM001.YBBCD[KBWSUB];
        KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
      end
      KBWREC.KBWSUB = KBWREC.KBWSUB + 1;
    end
    KBWREC.KBWSUB = 1;
    while (KBWREC.KBWSUB <= 10)
      KB0CM001.YBBCD[KBWSUB] = " ";
      KB0CM001.YBBDESC[KBWSUB] = " ";
      KBWREC.KBWSUB = KBWREC.KBWSUB + 1;
    end
    KBWREC.KBWSUB = 1;
    while (KBWREC.KBWSUB <= 10)
      KB0CM001.YBBCD[KBWSUB] = KB0CW04.YBBCD[KBWSUB];
      if (KB0CM001.YBBCD[KBWSUB] in YBBTBL.YBBCD)
        KB0CM001.YBBDESC[KBWSUB] = YBBTBL.YBBDESC[sysVar.arrayIndex];
      end
      KBWREC.KBWSUB = KBWREC.KBWSUB + 1;
    end
  end
end // end KB0C056

// edit the address
Function KB0C060()
  KB0C061(); /* ; edit addr selections*/
  ;
  if (KBWREC.KBWERRFL == "N")
    if (KB0CM001.KBWASEL[1] == "S"
     || KB0CM001.KUCCOID[1] != 0)
      KB0C062(); /* ; edit for billing address*/
    else
      if (KB0CM001.KBWASEL[2] == "S"
       || KB0CM001.KUCCOID[2] != 0)
        KB0C063(); /* ; edit for company address*/
      else
        if (KB0CM001.KBWASEL[3] == "S"
         || KB0CM001.KUCCOID[3] != 0)
          KB0C064();
                                   /* ; edit for shipping address*/
        else
          if (KB0CM001.KBWASEL[4] == "S"
           || KB0CM001.KUCCOID[4] != 0)
            KB0C065(); /* ; edit for store address*/
          else
            if (KB0CM001.KBWASEL[5] == "S") /* ; buyer addr selected*/
              KB0C066();
            else
              if (KB0CM001.KBWASEL[6] == "S") /* ; want to view addresses*/
                KB0C067();
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KB0C060

// edit address selections
Function KB0C061()
  if (KB0CM001.KUCCOID[1] == 0 /* no address indicated at all*/
   && KB0CM001.KUCCOID[2] == 0 
   && KB0CM001.KUCCOID[3] == 0 
   && KB0CM001.KUCCOID[4] == 0 
   && KB0CM001.KBWASEL[1] == " "
   && KB0CM001.KBWASEL[2] == " "
   && KB0CM001.KBWASEL[3] == " "
   && KB0CM001.KBWASEL[4] == " "
   && KB0CM001.KBWASEL[5] == " "
   && KB0CM001.KBWASEL[6] == " ")
    KBWREC.KBWERRFL = "Y";
    set KB0CM001.KBWASEL[1] cursor, bold;
    converseLib.validationFailed(27); /* ; 'ADDRESS SELECTION REQ'*/
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    KBWREC.KBWCNT = 0;
    KBWREC.KBWSUB1 = 4;
    while (KBWREC.KBWSUB1 != 0) /* count number of addresses*/
      if (KBWREC.KBWSUB1 > 2)
        KBWREC.KBWSUB = KBWREC.KBWSUB1 - 2;
        if (KB0CM001.KUCCOID[KBWSUB1] != 0
         || KB0CM001.KB0CMSID[KBWSUB] != " ")
          KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
          set KB0CM001.KB0CMSID[KBWSUB] cursor, bold;
          set KB0CM001.KUCCOID[KBWSUB1] cursor, bold;
        end
      else
        if (KB0CM001.KUCCOID[KBWSUB1] != 0)
          KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
          set KB0CM001.KUCCOID[KBWSUB1] cursor, bold;
        end
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
    end
    if (KBWREC.KBWCNT > 1)
      KBWREC.KBWERRFL = "Y"; /* error flag on*/
      converseLib.validationFailed(124); /* only 1 addr can be entered*/
    else
      set KB0CM001.KUCCOID[1] initialAttributes;
      set KB0CM001.KUCCOID[2] initialAttributes;
      set KB0CM001.KUCCOID[3] initialAttributes;
      set KB0CM001.KUCCOID[4] initialAttributes;
      set KB0CM001.KB0CMSID[1] initialAttributes;
      set KB0CM001.KB0CMSID[2] initialAttributes;
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    KBWREC.KBWCNT = 0; /* ; clear count*/
    KBWREC.KBWSUB1 = 6;
    while (KBWREC.KBWSUB1 != 0)
      if (KB0CM001.KBWASEL[KBWSUB1] > " ") /* ; count selections*/
        KBWREC.KBWSUB = KBWREC.KBWSUB1; /* save location of entry*/
        KBWREC.KBWCNT = KBWREC.KBWCNT + 1;
        set KB0CM001.KBWASEL[KBWSUB1] bold;
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
    end
    if (KBWREC.KBWCNT == 1) /* ; only one selection made*/
      if ("S" in KB0CM001.KBWASEL) /* ; selected with an 'S'*/
        set KB0CM001.KBWASEL[sysVar.arrayIndex] initialAttributes; /* ; okay*/
      else /* ; or*/
        if (KB0CM001.KBWASEL[5] == "*") /* buyer address already exists*/
          set KB0CM001.KBWASEL[5] initialAttributes; /* ; okay*/
        else
          KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
          set KB0CM001.KBWASEL[KBWSUB] cursor, bold;
          converseLib.validationFailed(36); /* ; 'MUST USE 'S' TO SELECT'*/
        end
      end
    end
    if (KBWREC.KBWCNT > 1) /* ; more than one selection*/
      KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
      set KB0CM001.KBWASEL[KBWSUB] cursor, bold;
      converseLib.validationFailed(28); /* ; 'ONE SELECTION ONLY'*/
    end
  end
  ;
  if (KBWREC.KBWERRFL == "N") /* no errors yet*/
    KBWREC.KBWCNT = 0;
    KBWREC.KBWSUB1 = 4;
    if (KB0CM001.KBWASEL[5] > " " /* buyer address selected*/
     || KB0CM001.KBWASEL[6] > " ") /* view address selected*/
      while (KBWREC.KBWSUB1 != 0)
        if (KBWREC.KBWSUB1 > 2)
          KBWREC.KBWSUB = KBWREC.KBWSUB1 - 2;
          KB0CM001.KB0CMSID[KBWSUB] = " ";
          KB0CM001.KUCCOID[KBWSUB1] = 0;
        else
          KB0CM001.KUCCOID[KBWSUB1] = 0;
        end
        KBWREC.KBWSUB1 = KBWREC.KBWSUB1 - 1;
      end
    end
  end
end // end KB0C061

// edit for billing address
Function KB0C062()
  if (KB0CM001.KUCCOID[1] == 0) /* ; no company entered*/
    KBWREC.KBWERRFL = "Y";
    set KB0CM001.KUCCOID[1] cursor, bold;
    converseLib.validationFailed(89); /* ; 'COMPANY REQUIRED';*/
  else
    if (KB0CM001.KUCCOID[2] > 0) /* ; wrong company*/
      KBWREC.KBWERRFL = "Y";
      set KB0CM001.KUCCOID[2] cursor, bold;
      converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
    else
      if (KB0CM001.KUCCOID[3] > 0) /* ; wrong company*/
        KBWREC.KBWERRFL = "Y";
        set KB0CM001.KUCCOID[3] cursor, bold;
        converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
      else
        if (KB0CM001.KUCCOID[4] > 0) /* ; wrong company*/
          KBWREC.KBWERRFL = "Y";
          set KB0CM001.KUCCOID[4] cursor, bold;
          converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
        else
          if (KB0CM001.KB0CMSID[1] > " ") /* ; no store allowed*/
            KBWREC.KBWERRFL = "Y";
            set KB0CM001.KB0CMSID[1] cursor, bold;
            converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
          else
            if (KB0CM001.KB0CMSID[2] > " ") /* ; no store allowed*/
              KBWREC.KBWERRFL = "Y";
              set KB0CM001.KB0CMSID[2] cursor, bold;
              converseLib.validationFailed(29); /* ; 'DATA CONFLICT'*/
            else
              KB0C072(); /* ; get billing addr info*/
            end
          end
        end
      end
    end
  end
end // end KB0C062

// edit for company address
Function KB0C063()
  if (KB0CM001.KUCCOID[2] == 0) /* ; company not entered*/
    KBWREC.KBWERRFL = "Y";
    set KB0CM001.KUCCOID[2] cursor, bold;
    converseLib.validationFailed(91); /* ; 'COMPANY REQUIRED'*/
  else
    if (KB0CM001.KUCCOID[1] > 0) /* ; wrong company*/
      KBWREC.KBWERRFL = "Y";
      set KB0CM001.KUCCOID[1] cursor, bold;
      converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
    else
      if (KB0CM001.KUCCOID[3] > 0) /* ; wrong company*/
        KBWREC.KBWERRFL = "Y";
        set KB0CM001.KUCCOID[3] cursor, bold;
        converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
      else
        if (KB0CM001.KUCCOID[4] > 0) /* ; wrong company*/
          KBWREC.KBWERRFL = "Y";
          set KB0CM001.KUCCOID[4] cursor, bold;
          converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
        else
          if (KB0CM001.KB0CMSID[1] > " ") /* ; no stores allowed*/
            KBWREC.KBWERRFL = "Y";
            set KB0CM001.KB0CMSID[1] cursor, bold;
            converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
          else
            if (KB0CM001.KB0CMSID[2] > " ") /* no stores allowed*/
              KBWREC.KBWERRFL = "Y";
              set KB0CM001.KB0CMSID[2] cursor, bold;
              converseLib.validationFailed(29); /* ; 'INCONSISTANT CRITERIA'*/
            else
              KB0C073(); /* ; process company address*/
            end
          end
        end
      end
    end
  end
end // end KB0C063

// edit for shipping address
Function KB0C064()
  XP0AW01.XP0AWFLD = KB0CM001.KB0CMSID[1]; /* store id*/
  XP0A001(); /* ; edit for non-numeric*/
  if (XP0AW01.XP0AWEFL == "Y") /* ; found invalid chars*/
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0CM001.KB0CMSID[1] cursor, bold;
    converseLib.validationFailed(33); /* ; 'store id not numeric*/
  else
    if (KB0CM001.KUCCOID[1] > 0) /* ; wrong company*/
      KBWREC.KBWERRFL = "Y";
      set KB0CM001.KUCCOID[1] cursor, bold;
      converseLib.validationFailed(29);
                                   /* ; 'DATA AND SEL DON'T MATCH'*/
    else
      if (KB0CM001.KUCCOID[2] > 0) /* ; wrong company*/
        KBWREC.KBWERRFL = "Y";
        set KB0CM001.KUCCOID[2] cursor, bold;
        converseLib.validationFailed(29);
                                   /* ; 'DATA AND SEL DON'T MATCH'*/
      else
        if (KB0CM001.KUCCOID[4] > 0) /* ; wrong company*/
          KBWREC.KBWERRFL = "Y";
          set KB0CM001.KUCCOID[4] cursor, bold;
          converseLib.validationFailed(29);
                                   /* ; 'DATA AND SEL DON'T MATCH'*/
        else
          if (KB0CM001.KB0CMSID[2] > " ") /* ; wrong store*/
            KBWREC.KBWERRFL = "Y";
            set KB0CM001.KB0CMSID[2] cursor, bold;
            converseLib.validationFailed(29);
                                   /* ; 'DATA AND SEL DON'T MATCH'*/
          else
            if (KB0CM001.KUCCOID[3] == 0)
              KBWREC.KBWERRFL = "Y";
              set KB0CM001.KUCCOID[3] cursor, bold;
              converseLib.validationFailed(91); /* ; 'COMPANY REQUIRED'*/
            else
              if (KB0CM001.KB0CMSID[1] == " ")
                KBWREC.KBWERRFL = "Y";
                set KB0CM001.KB0CMSID[1] cursor, bold;
                converseLib.validationFailed(32); /* ; 'STORE REQUIRED'*/
              else
                KB0C074(); /* ; process store/ship addr*/
              end
            end
          end
        end
      end
    end
  end
end // end KB0C064

// edit for store address
Function KB0C065()
  XP0AW01.XP0AWFLD = KB0CM001.KB0CMSID[2]; /* move store id*/
  XP0A001(); /* ; edit for non-numeric*/
  if (XP0AW01.XP0AWEFL == "Y") /* ; invalid characters*/
    KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
    set KB0CM001.KB0CMSID[2] cursor, bold;
    converseLib.validationFailed(34); /* ; 'STORE ID INVALID'*/
  else
    if (KB0CM001.KUCCOID[1] > 0) /* ; wrong company*/
      KBWREC.KBWERRFL = "Y";
      set KB0CM001.KUCCOID[1] cursor, bold;
      converseLib.validationFailed(29); /* ; 'DATA & SEL DON'T MATCH'*/
    else
      if (KB0CM001.KUCCOID[2] > 0) /* ; wrong company*/
        KBWREC.KBWERRFL = "Y";
        set KB0CM001.KUCCOID[2] cursor, bold;
        converseLib.validationFailed(29); /* ; 'DATA & SEL DON'T MATCH'*/
      else
        if (KB0CM001.KUCCOID[3] > 0) /* ; wrong company*/
          KBWREC.KBWERRFL = "Y";
          set KB0CM001.KUCCOID[3] cursor, bold;
          converseLib.validationFailed(29); /* ; 'DATA & SEL DON'T MATCH'*/
        else
          if (KB0CM001.KUCCOID[4] == 0)
            KBWREC.KBWERRFL = "Y";
            converseLib.validationFailed(91); /* ; 'COMPANY REQUIRED'*/
            set KB0CM001.KUCCOID[4] cursor, bold;
          else
            if (KB0CM001.KB0CMSID[1] != " ") /* ; wrong store*/
              KBWREC.KBWERRFL = "Y";
              set KB0CM001.KB0CMSID[1] cursor, bold;
              converseLib.validationFailed(29); /* ; 'DATA & SEL DON'T MATCH'*/
            else
              if (KB0CM001.KB0CMSID[2] == " ") /* ; this store required*/
                KBWREC.KBWERRFL = "Y";
                set KB0CM001.KB0CMSID[2] cursor, bold;
                converseLib.validationFailed(32); /* ; 'STORE REQUIRED'*/
              else
                KB0C074(); /* ; proc store/ship addr*/
              end
            end
          end
        end
      end
    end
  end
end // end KB0C065

// edit buyer address selection
Function KB0C066()
  KBWREC.KBWSUB1 = 1;
  while (KBWREC.KBWSUB1 <= 4)
    if (KB0CM001.KUCCOID[KBWSUB1] > 0) /* no company nbr allowed*/
      KBWREC.KBWERRFL = "Y";
      set KB0CM001.KUCCOID[KBWSUB1] bold;
    end
    if (KBWREC.KBWSUB1 > 2)
      KBWREC.KBWSUB = KBWREC.KBWSUB1 - 2;
      if (KB0CM001.KB0CMSID[KBWSUB] > " ") /* no store nbr allowed*/
        KBWREC.KBWERRFL = "Y";
        set KB0CM001.KB0CMSID[KBWSUB] bold;
      end
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end
  if (KBWREC.KBWERRFL == "Y")
    set KB0CM001.KBWASEL[5] cursor, bold;
    converseLib.validationFailed(29); /* ; 'CONFLICTING DATA'*/
  else
    KB0C010(); /* ; buyer address routine*/
  end
end // end KB0C066

// edit view address selection
Function KB0C067()
  KBWREC.KBWSUB1 = 1;
  while (KBWREC.KBWSUB1 <= 4)
    if (KB0CM001.KUCCOID[KBWSUB1] > 0) /* no company nbr allowed*/
      KBWREC.KBWERRFL = "Y";
      set KB0CM001.KUCCOID[KBWSUB1] bold;
    end
    if (KBWREC.KBWSUB1 > 2)
      KBWREC.KBWSUB = KBWREC.KBWSUB1 - 2;
      if (KB0CM001.KB0CMSID[KBWSUB] > " ") /* no store nbr allowed*/
        KBWREC.KBWERRFL = "Y";
        set KB0CM001.KB0CMSID[KBWSUB] bold;
      end
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end
  if (KBWREC.KBWERRFL == "Y")
    set KB0CM001.KBWASEL[6] cursor, bold;
    converseLib.validationFailed(29); /* ; 'CONFLICTING DATA'*/
  else
    KB0C092();
    KBWREC.KBWTBLID = " ";
    KBWREC.KBWPFKEY[1] = " ";
    KBWREC.KBWPFKEY[2] = " ";
    COMMAREA.CATOAP = "KB0W";
    COMMAREA.CAUSERA = KBWREC.KBWGROUP;
    XSEXIT();
    KB0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
    COMMAREA.CAUSERA = " ";
  end
end // end KB0C067

// read bill group address info
Function KB0C072()
  set SQLCA empty;
  set KUCREC empty; /* ; init company rec*/
  KUCREC.KUCCOID = KB0CM001.KUCCOID[1]; /* ; use specified company*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; company found*/
    if (KUCREC.XXXSTAT == "A")
      if (KBWREC.XAD-ADDR-TYP-CD == "02") /* curr addr is buyer addr*/
        KB0C078(); /* ; delete buyer address*/
      end
      if (KBWREC.KBWERRFL == "N")
        KBWREC.KUCCOID = KUCREC.KUCCOID; /* ; company id*/
        KBWREC.KULAAID = KUCREC.KUCBLAID; /* bill group addr id*/
        KBWREC.XAD-ADDR-TYP-CD = "01"; /* bill to address*/
        KB0CM001.KULAAID[1] = KBWREC.KULAAID; /* addr id to map*/
        KB0CM001.KBWASEL[1] = " "; /* clear select byte*/
        KB0CM001.KULAAID[2] = 0; /* clear existing addr id's*/
        KB0CM001.KULAAID[3] = 0;
        KB0CM001.KULAAID[4] = 0;
      end
    else
      if (KB0CM001.XXXSTAT == "A") /* ; active buyer*/
        KBWREC.KBWERRFL = "Y"; /* ; inactive company*/
        converseLib.validationFailed(107);
        set KB0CM001.KUCCOID[1] cursor, bold;
      end
    end
  else /* ; company not found*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KBWREC.KBWERRFL = "Y";
      converseLib.validationFailed(31); /* ; 'COMPANY NOT FOUND'*/
      set KB0CM001.KUCCOID[1] cursor, bold;
    else /* ; DB2 error*/
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01"; /* ; table view*/
      TA1REC.TA1LOCAT[1] = "KB0C072 ";
      TA1REC.TA1LOCAT[2] = "IO0240 "; /* ; i/o mod*/
      TA1REC.TA1LOCAT[3] = "S"; /* ; function*/
      KBWREC.KBWXIDCO = KUCREC.KUCCOID; /* ; table key*/
      TA1REC.TA1TBLKE = KBWREC.KBWXIDCO;
      XPKB900(); /* ; common abend routine*/
    end
  end
end // end KB0C072

// read company address info
Function KB0C073()
  set SQLCA empty;
  set KUCREC empty;
  KUCREC.KUCCOID = KB0CM001.KUCCOID[2]; /* ; get company row*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; company found*/
    if (KUCREC.XXXSTAT == "A") /* ; active company*/
      if (KBWREC.XAD-ADDR-TYP-CD == "02") /* ; current address is buyer addr*/
        KB0C078(); /* ; delete buyer address*/
      end
      if (KBWREC.KBWERRFL == "N")
        KBWREC.KUCCOID = KUCREC.KUCCOID; /* company id*/
        KBWREC.KULAAID = KUCREC.KUCCOAID; /* company addr id*/
        KBWREC.XAD-ADDR-TYP-CD = "04"; /* company address*/
        KB0CM001.KULAAID[2] = KBWREC.KULAAID; /* addr id to map*/
        KB0CM001.KBWASEL[2] = " "; /* ; clear selection*/
        KB0CM001.KULAAID[1] = 0; /* clear prev addr id's*/
        KB0CM001.KULAAID[3] = 0;
        KB0CM001.KULAAID[4] = 0;
      end
    else
      if (KB0CM001.XXXSTAT == "A") /* ; active buyer*/
        KBWREC.KBWERRFL = "Y"; /* ; inactive company*/
        converseLib.validationFailed(107);
        set KB0CM001.KUCCOID[2] cursor, bold;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; didn't find spec company*/
      KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
      converseLib.validationFailed(31); /* ; 'COMPANY NOT FOUND'*/
      set KB0CM001.KUCCOID[2] cursor, bold;
    else
      TA1REC.TA1MAP = "KB0CM001"; /* ; current map*/
      TA1REC.TA1DBASE = "DCUST"; /* ; data base name*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* ; table view*/
      TA1REC.TA1LOCAT[1] = "KB0C073 "; /* ; module name*/
      TA1REC.TA1LOCAT[2] = "IO0240 "; /* ; iomod*/
      TA1REC.TA1LOCAT[3] = "S"; /* ; function*/
      KBWREC.KBWXIDCO = KB0CM001.KUCCOID[2];
                                   /* company number entered*/
      TA1REC.TA1TBLKE = KBWREC.KBWXIDCO; /* ; key to table*/
      XPKB900(); /* ; common abend routine*/
    end
  end
end // end KB0C073

// read store address information
Function KB0C074()
  set KUMREC empty; /* ; init store record*/
  if (KB0CM001.KUCCOID[3] != 0) /* ; chose shipping addr*/
    KUMREC.KUCCOID = KB0CM001.KUCCOID[3]; /* ; move entered company*/
    KBWREC.KBWSTRCH = KB0CM001.KB0CMSID[1]; /* move entered store*/
    KBWREC.KBWSTRID = KBWREC.KBWSTRID * 1; /* multiply to zero fill*/
    KBWREC.KUMSTRID = KBWREC.KBWSTRID; /* move to bin*/
    KUMREC.KUMSTRID = KBWREC.KUMSTRID; /* ; move to kumrec*/
    KB0CM001.KB0CMSID[1] = KBWREC.KBWSTRCH; /* move to screen*/
  else /* ; chose store address*/
    KUMREC.KUCCOID = KB0CM001.KUCCOID[4]; /* company number*/
    KBWREC.KBWSTRCH = KB0CM001.KB0CMSID[2]; /* move entered store*/
    KBWREC.KBWSTRID = KBWREC.KBWSTRID * 1; /* multiply to zero fill*/
    KBWREC.KUMSTRID = KBWREC.KBWSTRID; /* move to bin*/
    KUMREC.KUMSTRID = KBWREC.KUMSTRID; /* ; move to kumrec*/
    KB0CM001.KB0CMSID[2] = KBWREC.KBWSTRCH; /* move to screen*/
  end
  ;
  if (KB0CM001.KUCCOID[3] != 0)
    KB0CM001.KULAAID[1] = 0; /* clear prev addr id's*/
    KB0CM001.KULAAID[2] = 0;
    KB0CM001.KULAAID[4] = 0;
    KB0CM001.KB0CMSID[2] = " ";
  else
    KB0CM001.KULAAID[1] = 0; /* clear prev addr id's*/
    KB0CM001.KULAAID[2] = 0;
    KB0CM001.KULAAID[3] = 0;
    KB0CM001.KB0CMSID[1] = " ";
  end
  ;
  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; found store*/
    if (KUMREC.XXXSTAT == "A") /* ; store is active*/
      if (KBWREC.XAD-ADDR-TYP-CD == "02") /* ; prior addr was buyer addr*/
        KB0C078(); /* ; delete buyer address*/
      end
      if (KBWREC.KBWERRFL == "N") /* ; delete went ok*/
        KBWREC.KUCCOID = KUMREC.KUCCOID;
        KBWREC.KBW-KUMSTRID = KUMREC.KUMSTRID;
        if (KB0CM001.KUCCOID[3] != 0)
          KBWREC.KULAAID = KUMREC.KUMSHAID; /* shipping addr id*/
          KB0CM001.KULAAID[3] = KBWREC.KULAAID;
          KBWREC.XAD-ADDR-TYP-CD = "03"; /* ship to address*/
        else
          KBWREC.KULAAID = KUMREC.KUMSTAID; /* store addr id*/
          KB0CM001.KULAAID[4] = KBWREC.KULAAID; /* store addr id*/
          KBWREC.XAD-ADDR-TYP-CD = "05"; /* store address*/
        end
        KB0CM001.KBWASEL[3] = " "; /* ; clear selections*/
        KB0CM001.KBWASEL[4] = " ";
      end
    else
      if (KB0CM001.XXXSTAT == "A")
        KBWREC.KBWERRFL = "Y";
        converseLib.validationFailed(108); /* inactive store*/
        if (KB0CM001.KUCCOID[3] != 0)
          set KB0CM001.KB0CMSID[1] cursor, bold;
        else
          set KB0CM001.KB0CMSID[2] cursor, bold;
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; store id not found*/
      KUCREC.KUCCOID = KUMREC.KUCCOID; /* ; try to find company*/
      set SQLCA empty;
      call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == +100) /* ; company not found either*/
        KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
        converseLib.validationFailed(35); /* ; 'INVALID COMPANY/STORE'*/
        if (KB0CM001.KUCCOID[3] != 0)
          set KB0CM001.KUCCOID[3] cursor, bold;
          set KB0CM001.KB0CMSID[1] bold;
        else
          set KB0CM001.KUCCOID[4] cursor, bold;
          set KB0CM001.KB0CMSID[2] bold;
        end
      else
        if (SQLCA.VAGen_SQLCODE == 0) /* ; found company*/
          KBWREC.KBWERRFL = "Y"; /* ; error flag on*/
          converseLib.validationFailed(34); /* ; 'INVALID STORE ID'*/
          if (KB0CM001.KUCCOID[3] != 0)
            set KB0CM001.KB0CMSID[1] bold;
          else
            set KB0CM001.KB0CMSID[2] bold;
          end
        else /* ; DB error on cmpny*/
          TA1REC.TA1LOCAT[1] = "KB0C074 "; /* ; module name*/
          TA1REC.TA1LOCAT[2] = "IO0240 "; /* ; IOMOD*/
          TA1REC.TA1LOCAT[3] = "S"; /* ; function*/
          TA1REC.TA1MAP = "KB0CM001"; /* ; map name*/
          TA1REC.TA1DBASE = "DCUST"; /* ; database*/
          TA1REC.TA1TBLVU = "VCMPNY01"; /* ; view*/
          KBWREC.KBWXIDCO = KUCREC.KUCCOID; /* company number*/
          TA1REC.TA1TBLKE = KBWREC.KBWXIDCO; /* table key*/
          XPKB900(); /* ; common abend routine*/
        end
      end
    else /* ; DB2 error on store*/
      TA1REC.TA1LOCAT[1] = "KB0C074 "; /* ; module name*/
      TA1REC.TA1LOCAT[2] = "IO0340 "; /* ; IOMOD*/
      TA1REC.TA1LOCAT[3] = "S"; /* ; function*/
      TA1REC.TA1MAP = "KB0CM001"; /* ; current map*/
      TA1REC.TA1DBASE = "DCUST"; /* ; data base name*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* ; table view*/
      KBWREC.KBWXIDCO = KUMREC.KUCCOID; /* ; company number*/
      KBWREC.KBWXIDST = KUMREC.KUMSTRID; /* ; store number*/
      TA1REC.TA1TBLKE = KBWREC.KBWSTRKE; /* ; key to table*/
      XPKB900(); /* ; common abend routine*/
    end
  end
end // end KB0C074

// update buyer address info
Function KB0C076()
  ;
  set KULREC empty; /* ; get cust address*/
  KULREC.KUCCOID = KBWREC.KUCCOID; /* ; set up key*/
  KULREC.KULAAID = KBWREC.KULAAID;
  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* ; get current addr row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; if found*/
    XPKB031(); /* ; get current date/time*/
    KUZREC.KUZBFCD = "B"; /* ; indicate before image*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* ; customer number*/
    KUZREC.XXXTBLNM = "VADDR001"; /* ; cust addr table name*/
    KUZREC.KUZTYPE = "C"; /* ; change indicator*/
    KB3REC.KB3DATA = KULREC.KULGRP;
    KB0C099(); /* ; write audit record*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* ; before image written*/
      KULREC.KULUSCNT = KULREC.KULUSCNT - 1; /* ;decrement usage count*/
      KULREC.ZZZCHGDT = TA2REC.TA2GRGGN;
      KULREC.ZZZCHGTM = TA2REC.TA2TIMHM;
      set SQLCA empty;
      call "IO0170" ("U ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* ; update address*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* ; update successful*/
        KUZREC.KUZBFCD = "A"; /* ; indicate after image*/
        KB3REC.KB3DATA = KULREC.KULGRP;
        KB0C099(); /* ; write audit record*/
        ;
      else /* ; cust addr update failed*/
        TA1REC.TA1TBLVU = "VADDR001"; /* ; table view*/
        TA1REC.TA1LOCAT[1] = "KB0C076 ";
        TA1REC.TA1LOCAT[2] = "IO0170 ";
        TA1REC.TA1LOCAT[3] = "U";
        KBWREC.KBWAUID = KULREC.KUCCOID;
        TA1REC.TA1TBLKE = KBWREC.KBWAUID;
        XPKB900(); /* ; abend application*/
      end
    end
  end
end // end KB0C076

// delete buyer address
Function KB0C078()
  set SQLCA empty;
  set KBBREC empty; /* ; init buyer addr rec*/
  KBBREC.KBABUYID = KBWREC.KBABUYID; /* ; key to row*/
  call "IO4320" ("D ", SQLCA, KBBREC) {isNoRefresh = yes, isExternal = yes}; /* delete row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; delete worked okay*/
    set KUZREC empty; /* ; init audit rec*/
    KUZREC.KUZTYPE = "D"; /* ; function code*/
    KUZREC.XXXTBLNM = "VBADDR01"; /* ; table view*/
    KUZREC.KUCCOID = KBWREC.KBABUYID; /* ; customer number*/
    KB3REC.KB3TRAN = "C"; /* ; indicates from KB0C*/
    KB3REC.KB3DATA = KBBREC.KBBGRP; /* ; move data*/
    KB0C099(); /* ; write audit record*/
    KBWREC.XXXADDR1 = " "; /* ; clear address info*/
    KBWREC.XXXADDR2 = " ";
    KBWREC.XXXADDR3 = " ";
    KBWREC.XXXCITY = " ";
    KBWREC.XSTCD = " ";
    KBWREC.XXXZIP = " ";
    KBWREC.XCTCD = " ";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; no address found*/
      /* next sentence*/
    else /* ; database error*/
      TA1REC.TA1LOCAT[1] = "KB0C078 "; /* ; module name*/
      TA1REC.TA1LOCAT[2] = "IO4320 "; /* ; iomod*/
      TA1REC.TA1LOCAT[3] = "D"; /* ; function*/
      TA1REC.TA1DBASE = "DCUST"; /* ; data base name*/
      TA1REC.TA1TBLVU = "VBADDR01"; /* ' table view*/
      KBWREC.KBWBUYID = KBWREC.KBABUYID; /* ; key value*/
      TA1REC.TA1TBLKE = KBWREC.KBWBUYID; /* ; key value*/
      XPKB900(); /* ; common abend routine*/
    end
  end
end // end KB0C078

// Check for changes to KBAREC
Function KB0C079()
  ;
  XPKB010(); /* get buyer gen info*/
  ;
  KBWREC.KBWCHGFL = "N"; /* ; set change flag off*/
  ;
  if (KBWREC.KBWBFND == "Y") /* ; buyer found*/
    ;
    if (KBAREC.XXXSTAT != KB0CM001.XXXSTAT) /* status changed*/
      KBWREC.KBWCHGFL = "Y";
      if (KB0CM001.XXXSTAT == "A" /* activating a buyer*/
       && KBWREC.KBW-BXREF-CNT == 0) /* no attachments*/
        KBWREC.KBWATVFL = "Y";
      end
    end
    ;
    if (KBAREC.XXXFSTNM != KB0CM001.XXXFSTNM) /* ; first name changed*/
      KBWREC.KBWCHGFL = "Y";
    end
    if (KBAREC.XXXLSTNM != KB0CM001.XXXLSTNM) /* ; last name changed*/
      KBWREC.KBWCHGFL = "Y";
    end
    if (KBAREC.XXXMDINT != KB0CM001.XXXMDINT) /* ; middle initial changed*/
      KBWREC.KBWCHGFL = "Y";
    end
    if (KBAREC.XXXGNTNM != KB0CM001.XXXGNTNM) /* ;generation changed*/
      KBWREC.KBWCHGFL = "Y";
    end
    if (KBAREC.YBTCD != KB0CM001.YBTCD) /* ; buyer title changed*/
      KBWREC.KBWCHGFL = "Y";
    end
    if (KBAREC.KBABUYFL != KB0CM001.KBABUYFL)
      KBWREC.KBWCHGFL = "Y"; /* ; buyer flag changed*/
    end
    ;
    /* move phone fields to kbwrec so they can be compared to kbarec*/
    ;
    KBWREC.KBWAREA1 = KB0CM001.KBWAREA1;
    KBWREC.KBWPRFX1 = KB0CM001.KBWPRFX1;
    KBWREC.KBWLINE1 = KB0CM001.KBWLINE1;
    KBWREC.KBWAREA2 = KB0CM001.KBWAREA2;
    KBWREC.KBWPRFX2 = KB0CM001.KBWPRFX2;
    KBWREC.KBWLINE2 = KB0CM001.KBWLINE2;
    ;
    if (KBAREC.XXXPHN != KBWREC.XXXPHN) /* phone changed*/
      KBWREC.KBWCHGFL = "Y";
    end
    if (KBAREC.XXXAPHN != KBWREC.XXXAPHN) /* alt phone changed*/
      KBWREC.KBWCHGFL = "Y";
    end
    ;
    KBWREC.KBWSUB1 = 1; /* check the purch resp codes*/
    while (KBWREC.KBWSUB1 <= 10)
      if (KBAREC.YBBCD[KBWSUB1] /* purch resp code changed*/
       != KB0CM001.YBBCD[KBWSUB1])
        KBWREC.KBWCHGFL = "Y";
        KBWREC.KBWSUB1 = 11; /* ; early exit if changes*/
      end
      KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
    end
    ;
    /* Company and store are compared to kbwrec instead of the map because*/
    /* the selected value has already been moved to kbwrec.*/
    ;
    if (KBAREC.KUCCOID != KBWREC.KUCCOID) /* company changed*/
      KBWREC.KBWCHGFL = "Y";
    else
      if (KBAREC.KUMSTRID != KBWREC.KBW-KUMSTRID) /* store changed*/
        KBWREC.KBWCHGFL = "Y";
      else
        if (KBAREC.XAD-ADDR-TYP-CD != KBWREC.XAD-ADDR-TYP-CD)
                                   /* addr typ changed*/
          KBWREC.KBWCHGFL = "Y";
        end
      end
    end
  end
end // end KB0C079

// converse main update screen
Function KB0C080()
   /* nothing in the beginning*/
  converse KB0CM001 ;
  set KB0CM001.KBABUYID initialAttributes, cursor; /* ; reset attributes*/
  set KB0CM001.XXXSTAT initialAttributes;
  set KB0CM001.XXXLSTNM initialAttributes;
  set KB0CM001.YBTCD initialAttributes;
  set KB0CM001.KBABUYFL initialAttributes;
  set KB0CM001.KBWAREA1 initialAttributes;
  set KB0CM001.KBWPRFX1 initialAttributes;
  set KB0CM001.KBWLINE1 initialAttributes;
  set KB0CM001.KBWAREA2 initialAttributes;
  set KB0CM001.KBWPRFX2 initialAttributes;
  set KB0CM001.KBWLINE2 initialAttributes;
  KBWREC.KBWSUB1 = 1;
  while (KBWREC.KBWSUB1 < 11)
    set KB0CM001.YBBCD[KBWSUB1] initialAttributes;
    set KB0CM001.YBBDESC[KBWSUB1] initialAttributes;
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end
  KBWREC.KBWSUB1 = 1;
  while (KBWREC.KBWSUB1 <= 6)
    set KB0CM001.KBWASEL[KBWSUB1] initialAttributes;
    if (KBWREC.KBWSUB1 <= 2)
      set KB0CM001.KB0CMSID[KBWSUB1] initialAttributes;
    end
    if (KBWREC.KBWSUB1 <= 4)
      set KB0CM001.KUCCOID[KBWSUB1] initialAttributes;
    end
    KBWREC.KBWSUB1 = KBWREC.KBWSUB1 + 1;
  end
  KBWREC.XXXMAPNM = "KB0CM001";
end // end KB0C080

// get info, load to w/s
Function KB0C090()
  XPKB010(); /* get buyer gen info*/
  ;
  if (KBWREC.KBWBFND == "Y") /* ; buyer found*/
    KBWREC.KBAGRP = KBAREC.KBAGRP;
  end
end // end KB0C090

// clear screen values
Function KB0C091()
  converseLib.clearScreen();
  set KB0CM001 empty; /* ; init main screen*/
  ;
  KB0CM001.KB0CMDAT = VGVar.currentShortGregorianDate;
  ;
  KB0CM001.KBABUYID = KBWREC.KBABUYID;
  set KB0CM001.KBABUYID cursor;
  ;
end // end KB0C091

// Move values FROM screen TO w/s
Function KB0C092()
  KBWREC.XXXFSTNM = KB0CM001.XXXFSTNM;
  KBWREC.XXXMDINT = KB0CM001.XXXMDINT;
  KBWREC.XXXLSTNM = KB0CM001.XXXLSTNM;
  KBWREC.XXXGNTNM = KB0CM001.XXXGNTNM;
  XPKB060(); /* ; create short name*/
  KBWREC.XXXSTAT = KB0CM001.XXXSTAT;
  ;
  KBWREC.KBWSPLIT = KB0CM001.YBTCD;
  if (KBWREC.KBWSPLT1 == "?" /* if requesting the list of titles*/
   || KBWREC.KBWSPLT2 == "?" /* don't overlay the old title with*/
   || KBWREC.KBWSPLT3 == "?") /* the '?'.*/
  /* next sentence*/
  else
    KBWREC.YBTCD = KB0CM001.YBTCD;
  end
  ;
  KBWREC.KBABUYFL = KB0CM001.KBABUYFL;
  KBWREC.KBWAREA1 = KB0CM001.KBWAREA1;
  KBWREC.KBWPRFX1 = KB0CM001.KBWPRFX1;
  KBWREC.KBWLINE1 = KB0CM001.KBWLINE1;
  KBWREC.KBWAREA2 = KB0CM001.KBWAREA2;
  KBWREC.KBWLINE2 = KB0CM001.KBWLINE2;
  KBWREC.KBWPRFX2 = KB0CM001.KBWPRFX2;
  ;
  KBWREC.KBWSUB = 1;
  while (KBWREC.KBWSUB <= 10) /* ; move purch resp codes*/
    KBWREC.KBWSPLIT = KB0CM001.YBBCD[KBWSUB];
    if (KBWREC.KBWSPLT1 == "?" /* if requesting the list of purch resp*/
     || KBWREC.KBWSPLT2 == "?" /* don't overlay the old one with the*/
     || KBWREC.KBWSPLT3 == "?" /* '?'.*/
     || KBWREC.KBWSPLT4 == "?")
  /* next sentence*/
    else
      KBWREC.YBBCD[KBWSUB] = KB0CM001.YBBCD[KBWSUB];
    end
    KBWREC.KBWSUB = KBWREC.KBWSUB + 1;
  end
  ;
    /* When transfering to another application, the address values*/
    /* currently on the map will be saved in kbwrec and re-edited*/
    /* when the application returns.*/
  ;
    /* When preparing to update kbarec, the address values are already*/
    /* in kbwrec.  They were moved to kbwrec as they were validated.*/
    /* Therefore, the following code doesn't need to be executed.*/
  ;
  if (COMMAREA.CATOAP == "KB0U" /* ; if going to list appl*/
   || KBWREC.KBWATVFL == "Y")   /* ; activating a buyer*/
    KBWREC.KBWSUB = 1; /* ; save address selections*/
    while (KBWREC.KBWSUB <= 4)
      KBWREC.KBW-SAVE-SELECT[KBWSUB] = KB0CM001.KBWASEL[KBWSUB];
      KBWREC.KBW-SAVE-KUCCOID[KBWSUB] = KB0CM001.KUCCOID[KBWSUB];
      KBWREC.KBW-SAVE-KULAAID[KBWSUB] = KB0CM001.KULAAID[KBWSUB];
      if (KBWREC.KBWSUB > 2) /* if other than company or bill to*/
        KBWREC.KBWSUB1 = KBWREC.KBWSUB - 2;
        KBWREC.KBW-SAVE-KUMSTRID[KBWSUB1] = KB0CM001.KB0CMSID[KBWSUB1];
      end
      KBWREC.KBWSUB = KBWREC.KBWSUB + 1;
    end
    KBWREC.KBW-SAVE-SELECT[5] = KB0CM001.KBWASEL[5]; /* ; buyer addr*/
    KBWREC.KBW-SAVE-SELECT[6] = KB0CM001.KBWASEL[6]; /* ; view addr*/
  end
  ;
end // end KB0C092

// Move values FROM w/s TO screen
Function KB0C093()
  if (KBWATVFL == "Y") /* activating the buyer*/
    KB0CM001.XXXSTAT = "A";
  else
    KB0CM001.XXXSTAT = KBWREC.XXXSTAT;
  end
  ;
  if (KB0CM001.XXXSTAT == "A")
    KB0CM001.KB0CMDSC = "ACTIVE";
  else
    KB0CM001.KB0CMDSC = "INACTIVE";
  end
  ;
  KB0CM001.YBTCD = KBWREC.YBTCD;
  if (KBWREC.YBTCD in YBTTBL.YBTCD)
    KB0CM001.YBTDESC = YBTTBL.YBTDESC[sysVar.arrayIndex];
  else
    KB0CM001.YBTDESC = "UNKNOWN TITLE";
  end
  ;
  KB0CM001.XXXFSTNM = KBWREC.XXXFSTNM;
  KB0CM001.XXXLSTNM = KBWREC.XXXLSTNM;
  KB0CM001.XXXMDINT = KBWREC.XXXMDINT;
  KB0CM001.XXXGNTNM = KBWREC.XXXGNTNM;
  KB0CM001.KBABUYFL = KBWREC.KBABUYFL;
  ;
  KB0CM001.KBWAREA1 = KBWREC.KBWAREA1;
  KB0CM001.KBWPRFX1 = KBWREC.KBWPRFX1;
  KB0CM001.KBWLINE1 = KBWREC.KBWLINE1;
  KB0CM001.KBWAREA2 = KBWREC.KBWAREA2;
  KB0CM001.KBWLINE2 = KBWREC.KBWLINE2;
  KB0CM001.KBWPRFX2 = KBWREC.KBWPRFX2;
  ;
  KBWREC.KBWSUB2 = 1; /* ;  move purch resp codes*/
  while (KBWREC.KBWSUB2 <= 10)
    if (KBWREC.YBBCD[KBWSUB2] > " ") /* ; if greater than space*/
      KB0CM001.YBBCD[KBWSUB2] = KBWREC.YBBCD[KBWSUB2];
      if (KBWREC.YBBCD[KBWSUB2] in YBBTBL.YBBCD) /* ; get description*/
        KB0CM001.YBBDESC[KBWSUB2] = YBBTBL.YBBDESC[sysVar.arrayIndex];
      else
        KB0CM001.YBBDESC[KBWSUB2] = "UNKNOWN";
      end
    end
    KBWREC.KBWSUB2 = KBWREC.KBWSUB2 + 1;
  end
  ;
  if (COMMAREA.CAFROMAP == "KB0U") /* comming from list appl*/
    if (KBWREC.KBWTBLID == "BT") /* list = buyer title*/
      set KB0CM001.YBTCD cursor; /* position cursor*/
    end
    ;
    if (KBWREC.KBWTBLID == "BB") /* list = purch responsibilities*/
      set KB0CM001.YBBCD cursor;
    end
  end
      /* move address information*/
  ;
  if (COMMAREA.CAFROMAP == "KB0U" /* ; coming from list appl*/
   || KBWREC.KBWATVFL == "Y")     /* activating a buyer*/
    KBWREC.KBWSUB = 1;
    while (KBWREC.KBWSUB <= 4)
      KB0CM001.KBWASEL[KBWSUB] = KBWREC.KBW-SAVE-SELECT[KBWSUB];
      KB0CM001.KUCCOID[KBWSUB] = KBWREC.KBW-SAVE-KUCCOID[KBWSUB];
      KB0CM001.KULAAID[KBWSUB] = KBWREC.KBW-SAVE-KULAAID[KBWSUB];
      if (KBWREC.KBWSUB > 2 /* ; restore store number*/
       && KBWREC.KBW-SAVE-KUCCOID[KBWSUB] > 0)
        KBWREC.KBWSUB1 = KBWREC.KBWSUB - 2;
        KB0CM001.KB0CMSID[KBWSUB1] = KBWREC.KBW-SAVE-KUMSTRID[KBWSUB1];
      end
      KBWREC.KBWSUB = KBWREC.KBWSUB + 1;
    end
    KB0CM001.KBWASEL[5] = KBWREC.KBW-SAVE-SELECT[5]; /* buyer addr*/
    KB0CM001.KBWASEL[6] = KBWREC.KBW-SAVE-SELECT[6]; /* view addr*/
  else
    ;
    if (COMMAREA.CAFROMAP == "KB0W") /* ; coming from addr select*/
      if (KBWREC.KBWASEL[1] == "S")
        KB0CM001.KBWASEL[1] = KBWREC.KBWASEL[1];
        KB0CM001.KUCCOID[1] = KBWREC.KBWACNBR[1];
        KB0CM001.KULAAID[1] = KBWREC.KBWAAID[1];
        KBWREC.KBWASEL[1] = " ";
      else
        if (KBWREC.KBWASEL[2] == "S")
          KB0CM001.KBWASEL[2] = KBWREC.KBWASEL[2];
          KB0CM001.KUCCOID[2] = KBWREC.KBWACNBR[2];
          KB0CM001.KULAAID[2] = KBWREC.KBWAAID[2];
          KBWREC.KBWASEL[2] = " ";
        else
          if (KBWREC.KBWASEL[3] == "S")
            KB0CM001.KBWASEL[3] = KBWREC.KBWASEL[3];
            KB0CM001.KUCCOID[3] = KBWREC.KBWACNBR[3];
            KB0CM001.KULAAID[3] = KBWREC.KBWAAID[3];
            KB0CM001.KB0CMSID[1] = KBWREC.KBWASCHR[1];
            KBWREC.KBWASEL[3] = " ";
          else
            if (KBWREC.KBWASEL[4] == "S")
              KB0CM001.KBWASEL[4] = KBWREC.KBWASEL[4];
              KB0CM001.KUCCOID[4] = KBWREC.KBWACNBR[4];
              KB0CM001.KULAAID[4] = KBWREC.KBWAAID[4];
              KB0CM001.KB0CMSID[2] = KBWREC.KBWASCHR[2];
              KBWREC.KBWASEL[4] = " ";
            else
              KB0C038(); /* restore original address*/
            end
          end
        end
      end
    else /* move address from kbwrec.kbagrp area*/
      if (KBWREC.XAD-ADDR-TYP-CD == "01") /* bill-to address*/
        KB0CM001.KUCCOID[1] = KBWREC.KUCCOID;
        KB0CM001.KULAAID[1] = KBWREC.KULAAID;
      end
      if (KBWREC.XAD-ADDR-TYP-CD == "02") /* buyer address*/
        KB0CM001.KBWASEL[5] = "*";
      end
      if (KBWREC.XAD-ADDR-TYP-CD == "03") /* ship-to address*/
        KB0CM001.KUCCOID[3] = KBWREC.KUCCOID;
        KB0CM001.KULAAID[3] = KBWREC.KULAAID;
        KBWREC.KBWSTRID = KBWREC.KBW-KUMSTRID;
        KB0CM001.KB0CMSID[1] = KBWREC.KBWSTRCH;
      end
      if (KBWREC.XAD-ADDR-TYP-CD == "04") /* company address*/
        KB0CM001.KUCCOID[2] = KBWREC.KUCCOID;
        KB0CM001.KULAAID[2] = KBWREC.KULAAID;
      end
      if (KBWREC.XAD-ADDR-TYP-CD == "05") /* store address*/
        KB0CM001.KUCCOID[4] = KBWREC.KUCCOID;
        KB0CM001.KULAAID[4] = KBWREC.KULAAID;
        KBWREC.KBWSTRID = KBWREC.KBW-KUMSTRID;
        KB0CM001.KB0CMSID[2] = KBWREC.KBWSTRCH;
      end
    end
  end
  ;
end // end KB0C093

// update buyers database
Function KB0C098()
  if (KBWREC.KBWBFND == "Y") /* ; if buyer found*/
    XPKB031(); /* ; get current date*/
    set KUZREC empty; /* ; init audit record*/
    KUZREC.KUZTYPE = "C"; /* ; type = change*/
    KUZREC.KUZBFCD = "B"; /* ; before image ind*/
    KUZREC.XXXTBLNM = "VBUYER01"; /* ; table name*/
    KUZREC.KUCCOID = KBWREC.KBABUYID; /* ; table key*/
    KB3REC.KB3DATA = KBAREC.KBAGRP;
    KB0C099(); /* ; write before image*/
    ;
    KB0C092(); /* ; move screen to KBWREC*/
    KBAREC.KBAGRP = KBWREC.KBAGRP; /* ; move updated values*/
    KBAREC.ZZZCHGDT = TA2REC.TA2GRGGN; /* ; change date and time*/
    KBAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    KBAREC.XXXUSID2 = COMMAREA.CAUSERID; /* ; user id for change*/
    ;
    set SQLCA empty;
    call "IO4310" ("U ", SQLCA, KBAREC) {isNoRefresh = yes, isExternal = yes}; /* ; update buyer gen info*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* ; if update went okay*/
      KUZREC.KUZBFCD = "A"; /* ; set up after image*/
      KB3REC.KB3DATA = KBAREC.KBAGRP;
      KB0C099(); /* ; write after image*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit changes*/
      ;
      KBWREC.KBAGRP = KBAREC.KBAGRP; /* ; reset w/s with db values*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
                                   /* ; buyer not found to update*/
        KBWREC.KBWERRFL = "Y";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(58); /* ; 'BUYER NOT FOUND'*/
      else /* ; database error*/
        TA1REC.TA1LOCAT[1] = "KB0C098 "; /* ; module name*/
        TA1REC.TA1LOCAT[2] = "IO4310 "; /* ; iomod name*/
        TA1REC.TA1LOCAT[3] = "U"; /* ; function*/
        TA1REC.TA1TBLVU = "VBUYER01"; /* ; table*/
        KBWREC.KBWBUYID = KBWREC.KBABUYID; /* ; key to row*/
        TA1REC.TA1TBLKE = KBWREC.KBWBUYID;
        XPKB900(); /* ; abend the application*/
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ; buyer doesn't exist*/
      KBWREC.KBWERRFL = "Y"; /* ; error = yes*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* ; reset place in database*/
      converseLib.validationFailed(58); /* ; 'BUYER NOT FOUND'*/
    else
      TA1REC.TA1LOCAT[1] = "KB0C098 "; /* ; module name*/
      TA1REC.TA1LOCAT[2] = "IO4310 "; /* ; iomod name*/
      TA1REC.TA1LOCAT[3] = "S"; /* ; function*/
      TA1REC.TA1TBLVU = "VBUYER01"; /* ; table*/
      KBWREC.KBWBUYID = KBWREC.KBABUYID; /* ; key to table*/
      TA1REC.TA1TBLKE = KBWREC.KBWBUYID;
      XPKB900(); /* ; abend the application*/
    end
  end
  ;
  ;
end // end KB0C098

// set-up audit record (address)
Function KB0C099()
  KUZREC.ZZZSDT = TA2REC.TA2GRGGN;
  KUZREC.ZZHHMMSS = TA2REC.TA2TIMEN;
  KB3REC.KB3TRAN = "C"; /* ; indicates KB0Cappl*/
  KUZREC.KUZDATA = KB3REC.KB3GRP; /* ; move row*/
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* ; user id*/
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
                                   /* ; get seq and length of row*/
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1LOCAT[1] = "KB0C099 "; /* ; abend, can't write audit*/
    TA1REC.TA1LOCAT[2] = "KIZTBL ";
    TA1REC.TA1LOCAT[3] = "NTFND";
    TA1REC.TA1TBLVU = KUZREC.XXXTBLNM;
    TA1REC.TA1DBASE = "DCUST";
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ;
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    XPKB900();
  end
  ;
  set SQLCA empty;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* ; not able to add record*/
    TA1REC.TA1LOCAT[1] = "KB0C099 ";
    TA1REC.TA1LOCAT[2] = "IO0500 ";
    TA1REC.TA1LOCAT[3] = "A";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1DBASE = "DCUST";
    KBWREC.KBWAUSEQ = KUZREC.KUZSSEQ;
    KBWREC.KBWAUTYP = KUZREC.KUZTYPE;
    KBWREC.KBWAUCD = KUZREC.KUZBFCD;
    KBWREC.KBWAUTBL = KUZREC.XXXTBLNM;
    KBWREC.KBWAUSER = KUZREC.XXXUSER;
    TA1REC.TA1TBLKE = KBWREC.KBWAUKEY;
    XPKB900(); /* ; abend*/
  end
end // end KB0C099

// DETACH ALL ACTIVE ACCOUNTS
Function KB0C100()
  ;
  set SQLCA empty;
  set KBIREC empty;
  set KBXREC empty;
  ;
  KBXREC.KBABUYID = KB0CM001.KBABUYID; /* ; set from buyer id*/
  KBIREC.KBIODATE = TA2REC.TA2GRGGN; /* ; current date*/
  ;
  KBIREC.KBIOTASK = "S3"; /* ; set io-pass task*/
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful select*/
    KB0C110(); /* ; detach or delete accounts*/
  end
  ;
  ;
   /* close cursor*/
  ;
  KBIREC.KBIOTASK = "C3"; /* ; set io-pass task*/
  XPKB018(); /* ; call io4330*/
  ;
  ;
end // end KB0C100

// DETACH OR DELETE ACCOUNTS
Function KB0C110()
  ;
  XPKB031(); /* ; get current date/time*/
  ;
  KBIREC.KBIOTASK = "N3"; /* fetch first row*/
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* ; no accounts found*/
  /* next sentence*/
  else
    while (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
      ;
      if (KBXREC.KBXXEDT == TA2REC.TA2GRGGN) /* effective dt = today*/
        KB0C120(); /* ; delete kbxrec*/
        KB0C125(); /* ; audit rec for delete*/
      else
        KB0C130(); /* ; detach kbxrec*/
        KB0C135(); /* ; audit for detach*/
      end
      ;
      KBIREC.KBIOTASK = "N3"; /* fetch next kbxrec*/
      XPKB018(); /* call io4330*/
    end
  end
  ;
  ;
  ;
end // end KB0C110

// DELETE KBXREC
Function KB0C120()
  ;
   /* This process deletes the row that was previously read into KBXREC*/
  ;
  set SQLCA empty;
  set KBIREC empty;
  ;
  KBIREC.KBIOTASK = "D ";
  KBIREC.KBIODATE = KBXREC.KBXXEDT; /* effective date*/
  ;
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful delete*/
    /* next sentence*/
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0C120";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "D ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
end // end KB0C120

// ADD AUDIT FOR KBXREC DELETE
Function KB0C125()
  ;
  set KB3REC empty;
  set KUZREC empty;
  ;
  KB3REC.KB3TRAN = "D"; /* ; transaction = detach*/
  KB3REC.KB3DATA = KBXREC.KBXGRP; /* ; data = kbxrec*/
  ;
  KUZREC.KUZTYPE = "D"; /* ; type = 'delete'*/
  KUZREC.XXXTBLNM = "VBXREF01";
  KUZREC.KUCCOID = KBXREC.KBABUYID;
  ;
  XPKB099();
  ;
end // end KB0C125

// DETACH KBXREC
Function KB0C130()
  ;
  set SQLCA empty;
  set KBIREC empty;
  ;
  KBXREC.KBXXXDT = TA2REC.TA2GRGGN; /* ; set termination date*/
  KBXREC.ZZZCHGDT = TA2REC.TA2GRGGN; /* ; set change date*/
  KBXREC.ZZZCHGTM = TA2REC.TA2TIMHM; /* ; set change time*/
  ;
  KBIREC.KBIOTASK = "U "; /* set io-pass task*/
  XPKB018(); /* call io4330*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful update*/
   /* next sentence*/
  else
    KBWREC.KBWXIDBY = KBXREC.KBABUYID; /* ; build xref key*/
    KBWREC.KBWXIDCO = KBXREC.KUCCOID;
    KBWREC.KBWXIDST = KBXREC.KUMSTRID;
    KBWREC.KBWXIDDP = KBXREC.XNXCD;
    KBWREC.KBWXIDDT = KBXREC.KBXXEDT;
    ;
    set TA1REC empty; /* ; build err diag*/
    ;
    TA1REC.TA1LOCAT[1] = "KB0C130";
    TA1REC.TA1LOCAT[2] = "IO4330";
    TA1REC.TA1LOCAT[3] = "U ";
    TA1REC.TA1MAP = KBWREC.XXXMAPNM;
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VBXREF01";
    TA1REC.TA1TBLKE = KBWREC.KBWXIDKE;
    ;
    XPKB900(); /* ; database abend*/
  end
  ;
  ;
end // end KB0C130

// ADD AUDIT FOR DETACH
Function KB0C135()
  ;
  ;
  set KB3REC empty;
  set KUZREC empty;
  ;
  KB3REC.KB3TRAN = "D"; /* ; transaction = detach*/
  KB3REC.KB3DATA = KBXREC.KBXGRP; /* ; data = kbxrec*/
  ;
  KUZREC.KUZTYPE = "C"; /* ; type = 'change'*/
  KUZREC.XXXTBLNM = "VBXREF01";
  KUZREC.KUCCOID = KBXREC.KBABUYID;
  ;
  XPKB099();
  ;
end // end KB0C135

//*** RECORD=KB0CW01 ****
// Currently assigned accounts used by KB0C when inactivating
// a buyer.
// ***********************
Record KB0CW01 type basicRecord
  10 KB0CWCNT KB0CWCNT ; 
  10 KB0CWSUB KB0CWSUB ; 
  10 KB0CWGRP KB0CWGRP [100] ; 
    15 KB0CWKEY KB0CWKEY ; 
      20 KBABUYID KBABUYID ; 
      20 KUCCOID KUCCOID ; 
      20 KUMSTRID KUMSTRID ; 
      20 XNXCD XNXCD ; 
    15 KBXXEDT KBXXEDT ; 
    15 KBWBUYID KBWBUYID ; 
end // end KB0CW01

//*** RECORD=KB0CW02 ****
// Another record used when inactivating a buyer, KB0C.
// ***********************
Record KB0CW02 type basicRecord
  15 KB0CWKEY KB0CWKEY ; 
    20 KBABUYID KBABUYID ; 
    20 KUCCOID KUCCOID ; 
    20 KUMSTRID KUMSTRID ; 
    20 XNXCD XNXCD ; 
  15 KBXXEDT KBXXEDT ; 
end // end KB0CW02

//*** RECORD=KB0CW03 ****
// Stores the x-ref effective date for inactivating buyer
// accounts, KB0C.
// ***********************
Record KB0CW03 type basicRecord
  10 KBXXEDT KBXXEDT [13] ; 
end // end KB0CW03

//*** RECORD=KB0CW04 ****
// Working area for maintaining Purchasing Exceptions.
// ***********************
Record KB0CW04 type basicRecord
  10 KB0CW4GP KB0CW4GP ; 
    15 YBBCD YBBCD [10] ; 
end // end KB0CW04

// group level
DataItem KB0CW4GP char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of items
DataItem KB0CWCNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem KB0CWGRP char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key level
DataItem KB0CWKEY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table subscript
DataItem KB0CWSUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

