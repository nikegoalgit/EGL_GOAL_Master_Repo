package pf0a;

import corpcom3.XPPF002;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import pf.common.PFWREC;
//*** PROGRAM=PF0A ****
// 01-16-89  JWOOD  ADD XSSEGTR LOGIC
// 01-16-89  JWOOD  CHECK FOR USE OF NONCSP CALL OPTION
// *********************
Program PF0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PFWREC PFWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PF0AM.PF0AM001 // form
   {
    pfKeyEquate = yes
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PF0A000: PF0A000();
    ;
    exit program;
    ;
    ;
    ;
    PF0A001: PF0A001();
    PF0A100: PF0A100();
    PF0A110: PF0A110();
    XPPF002: XPPF002();
  end // end main
end // end PF0A

// application pf0a main logic
Function PF0A000()
   /* ***********************************************************/
   /* *  this is the 'mainline' of the application pf0a        **/
   /* *  general order of events is:                           **/
   /* *            pf0a001  -  initialization                  **/
   /* *            pf0a100  -  converse screen while not       **/
   /* *                        end-of-application              **/
   /* *            xppf002  -  exit application                **/
   /* ***********************************************************/
  ;
  PF0A001(); /* initialize application fields*/
  ;
  while (PFWREC.PFWEOAF == "N") /* while application is active,*/
    PF0A100(); /* converse screen menu*/
  end
  ;
  ;
  ;
end // end PF0A000

// init main menu,handle fastpath
Function PF0A001()
  ;
    /* *************************************************/
    /* * PF0A001 -- initialization  process           **/
    /* *************************************************/
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/
  ;
  set PF0AM001 initial;
  set PFWREC empty;
  ;
      /* handle fast path entry here via perform XPPF011*/
  ;
  PFWREC.PFWMSG = " ";
  PFWREC.PFWEOAF = "N"; /* set end of appl flag to 'no'*/
  PFWREC.PFWERRF = "N"; /* set error flag  to 'no'*/
  ;
  PF0AM001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
    /* *************************************************/
    /* * end of process PF0A001                       **/
    /* *************************************************/
end // end PF0A001

// converse profit main menu
Function PF0A100()
   /* ****************************************************/
   /* *             process screen PF0AM001             **/
   /* ****************************************************/
  ;
  ;
  PF0AM001.XXXPRCNM = "PF0A100";
  PF0AM001.XXXMAPNM = "PF0AM010";
  set PF0AM001.PF0AMSEL cursor;
  ;
  if (COMMAREA.CAMSG != " ")
    PFWREC.PFWMSG = COMMAREA.CAMSG;
  end
  ;
  if (PFWREC.PFWMSG != " ")
    PF0AM001.VAGen_EZEMSG = PFWREC.PFWMSG;
  end
  ;
  converse PF0AM001 ;
  ;
  PF0AM001.VAGen_EZEMSG = " "; /* clear msg lines*/
  PFWREC.PFWMSG = " ";
  PFWREC.PFWERRF = "N"; /* reset error flag*/
  ;
  PF0A110(); /* check pf keys*/
  ;
  if (PFWREC.PFWERRF == "Y" /* if error returned from check*/
   || PFWREC.PFWEOAF == "Y") /* or end of application*/
    return; /* exit this routine*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 01
   || PF0AM001.PF0AMSEL == 02
   || PF0AM001.PF0AMSEL == 03
   || PF0AM001.PF0AMSEL == 10
   || PF0AM001.PF0AMSEL == 11
   || PF0AM001.PF0AMSEL == 12
   || PF0AM001.PF0AMSEL == 13
   || PF0AM001.PF0AMSEL == 14
   || PF0AM001.PF0AMSEL == 20
   || PF0AM001.PF0AMSEL == 21
   || PF0AM001.PF0AMSEL == 22)
     /* next sentence*/
  else
    set PF0AM001.PF0AMSEL cursor, bold;
    PFWREC.PFWMSG = "INVALID SELECTION - RETRY";
    return; /* exit*/
  end
  ;
   /* ************************************************************/
   /* * move appropriate profitablity application into commarea **/
   /* * for exit routine                                        **/
   /* ************************************************************/
  ;
  ;
  PFWREC.PFWEOAF = "Y"; /* assume last converse if reached here*/
  ;
  ;
  if (PF0AM001.PF0AMSEL == 1) /* option 1 = PF0B*/
    COMMAREA.CATOAP = "PF0B";
    XPPF002(); /* transfer to application*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 2) /* option 2 = PF0c*/
    COMMAREA.CATOAP = "PF0C";
    XPPF002(); /* transfer to application*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 3) /* option 3 = PF0P*/
    COMMAREA.CATOAP = "PF0P";
    XPPF002(); /* transfer to application*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 10)
                                   /* option 10= format summary maintenance*/
    COMMAREA.CATOAP = "PF0E";
    XPPF002(); /* transfer to application*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 11) /* option 11= i/s class group*/
                                   /* maintenance*/
    COMMAREA.CATOAP = "PF0D";
    XPPF002(); /* transfer to application*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 12) /* option 12= reporting attribute maint*/
    COMMAREA.CATOAP = "PF0F";
    XPPF002(); /* transfer to application*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 13) /* option 13= parameter maintenance*/
    COMMAREA.CATOAP = "PF0I";
    XPPF002(); /* transfer to application*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 14) /* option 13= GL code maintenance*/
    COMMAREA.CATOAP = "PF0R";
    XPPF002(); /* transfer to application*/
  end
  if (PF0AM001.PF0AMSEL == 20) /* option 20= summary parameters*/
     /* IF COMMAREA.CAADDFL EQ 'Y';*/
    COMMAREA.CATOAP = "PF0G";
    XPPF002(); /* transfer to application*/
     /* ELSE ;*/
       /* MOVE 72 TO EZEMNO;*/
       /* MOVE 'N' TO PFWREC.PFWEOAF;*/
     /* END ;*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 21) /* option 21= print parameters*/
     /* IF COMMAREA.CAADDFL EQ 'Y';*/
    COMMAREA.CATOAP = "PF0H";
    XPPF002(); /* transfer to application*/
     /* ELSE ;*/
       /* MOVE 72 TO EZEMNO;*/
       /* MOVE 'N' TO PFWREC.PFWEOAF;*/
     /* END ;*/
  end
  ;
  if (PF0AM001.PF0AMSEL == 22) /* option 22= run request*/
    COMMAREA.CATOAP = "PF0J";
    XPPF002(); /* transfer to application*/
  end
  ;
  ;
    /* fall through error*/
  ;
  PFWREC.PFWMSG = "SELECTION NOT ACTIVE ";
  PFWREC.PFWEOAF = "N"; /* set flag to reconverse error message*/
end // end PF0A100

// validate pf keys
Function PF0A110()
  ;
   /* **************************************************/
   /* *            validate pf keys                   **/
   /* **************************************************/
  ;
  PFWREC.PFWCPROC = "PF0A110"; /* set current process name*/
  ;
  if (converseVar.eventKey is enter) /* if enter*/
    if (PF0AM001.CATOAP != " ") /* and fast path*/
         /* JAMIT;*/
      COMMAREA.CATOAP = PF0AM001.CATOAP;
      COMMAREA.CAITEM = PF0AM001.CAITEM;
      XSEXIT();
      PFWREC.PFWMSG = COMMAREA.CAMSG; /* RESULT OF BAD PASS*/
      PFWREC.PFWERRF = "Y"; /* set error flag*/
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf1) /* help*/
     /* JAMIT;*/
    XSPF1();
    PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
    PFWREC.PFWERRF = "Y"; /* set error flag*/
    return;
  end
  ;
  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf4)
     /* JAMIT;*/
    XSPF4();
    PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
    PFWREC.PFWERRF = "Y"; /* set error flag*/
    return;
  end
end // end PF0A110

