package pf0e;
import corpcom3.XPPF002;
import corpcom3.XPPF010;
import corpcom3.XPPF030;
import corpcom3.XPPF200;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpy2.YFTTBL;
import corpy2.YPDTBL;
import corpy2.YTPTBL;
import pf.common.*;
import pf.common.PF1REC;
import pf.common.PFCREC;
import pf.common.PFEREC;
import pf.common.PFWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;

//*** PROGRAM=PF0E ****
// PF0E: Format Maintenance application for the Profitability
//       Reporting System.
// 
// Overview:
//       This application maintains the formats used in
//       summaries.  There are 5 format types available and
//       each has a seperate maintenance screen.
// 
// Maintenance History:
//   Date      By             Description of Change
// --------  ------  ------------------------------------------
//  1-03-89  DCassi  Original transfer to production.
//  1-10-89  DCassi  Make col 1 a valid 'AS % OF' col in fmt 2.
//                   Make col 0 (none) a valid 'AS % OF' col
//                   in fmt 2, 3, & 4.  Add 'NA' data type to
//                   YPDTBL.  Allow it only with 'CTL' time
//                   period.  Allow 'CTL' time period only with
//                   'NA' data type.  Allow 'NACTL' only in fmt
//                   3, 4, & 5, and only allow once in a fmt.
//  2-28-89  DCassi  Add set map page for PA2 in PF0E810 and
//                   change color of column 9 in PF0EM004.
//  3-10-89  DCassi  Hardcode 5 and 11 for fmt type 1 percent
//                   change columns 1 and 2, in PF0E140.
//  3-27-89  DCassi  On fmt 1 screen change both 'OTHER' column
//                   descriptions to 'DEF RTS'.
//  4-19-89  DCassi  Change screen column descriptions: FMT 1 -
//                   DEF RTS to DEF RTN, NET SALES to NET SHIP;
//                   FMT 2 - OTHER to DEF RTN, NET SALES to
//                   NET SHIP.
// 11-30-89  TGriff  Modify transfer of control when PF3 is
//                   used to return to the Selection List
//                   program if this application originated
//                   there.
// *********************
Program PF0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PF0EW01 PF0EW01; // record
  PF1REC PF1REC; // record
  PFBREC PFBREC; // record
  PFCREC PFCREC; // record
  PFDREC PFDREC; // record
  PFEREC PFEREC; // record
  PFWREC PFWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YTPTBL {deleteAfterUse = yes}; // table
  use YPDTBL {deleteAfterUse = yes}; // table
  use YFTTBL {deleteAfterUse = yes}; // table
  use PF0EM.PF0EM000,  // forms
      PF0EM.PF0EM001, 
      PF0EM.PF0EM002, 
      PF0EM.PF0EM003, 
      PF0EM.PF0EM004, 
      PF0EM.PF0EM005
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PF0E000: PF0E000();
  end // end main
end // end PF0E

// application pf0e mainline
Function PF0E000()
   /* -----------------------------------------------------------;*/
      /* This is the 'mainline' of the application PF0E         ;*/
      /* general order of events is:                            ;*/
               /* PF0E001  -  initialization                    ;*/
               /* PF0E010  -  converse screens while not        ;*/
                           /* end-of-application                ;*/
               /* XPPF002  -  exit application                  ;*/
   /* -----------------------------------------------------------;*/

  PF0E001(); /* initialize application fields*/


  while (PFWREC.PFWEOAF == "N") /* while application is active,*/

    PF0E010(); /* converse menu or 1 of 5 screens*/

  end


  XPPF002(); /* exit application*/

  COMMAREA.CATOAP = "PF0A"; /* if standard exit not successful,*/
  XSEXIT(); /* go to profit menu*/

  exit program;
end // end PF0E000

// init screen, handle fast path
Function PF0E001()
  XSENTRY(); /* security checking*/

  XSSEGTR(); /* set cics start tran id*/

  set PF0EM000 initial; /* clear format type 0 screen*/
  set PF0EM001 initial; /* clear format type 1 screen*/
  set PF0EM002 initial; /* clear format type 2 screen*/
  set PF0EM003 initial; /* clear format type 3 screen*/
  set PF0EM004 initial; /* clear format type 4 screen*/
  set PF0EM005 initial; /* clear format type 5 screen*/
  set PFWREC empty; /* clear general pf working storage*/
  set PF0EW01 empty; /* clear specific pf0e working storage*/

  set PF0EM000.PF0EMFMT cursor; /* set cursor at first field*/
  set PF0EM001.PF0EMFMT cursor; /* set cursor at first field*/
  set PF0EM002.PF0EMFMT cursor; /* set cursor at first field*/
  set PF0EM003.PF0EMFMT cursor; /* set cursor at first field*/
  set PF0EM004.PF0EMFMT cursor; /* set cursor at first field*/
  set PF0EM005.PF0EMFMT cursor; /* set cursor at first field*/

  PF1REC.PF1PASS = COMMAREA.CAUSERA; /* save passed information*/
  if (PF1REC.PF1ORIG == "PF0P")
    /* dont clear causera*/
  else
    COMMAREA.CAUSERA = " "; /* clear user area*/
  end

  if (PF1REC.PF1XFERF == "Y") /* if xfer via PF key*/

    PF0E005(); /* handle entry via PF key 14*/

  else /* else*/

    PF0E006(); /* check for entry via fastpath*/

  end


  PFWREC.PFWEOAF = "N"; /* set end of appl flag to 'no'*/
  PFWREC.PFWERRF = "N"; /* set error flag  to 'no'*/

  PF0EM000.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0EM001.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0EM002.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0EM003.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0EM004.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0EM005.XXXCURDT = VGVar.currentShortGregorianDate;
end // end PF0E001

// check for entry via PF key 14
Function PF0E005()
   /* -----------------------------------------------------------;*/
      /* Accept entry via PF 14 from other Profitability appl.  ;*/
   /* -----------------------------------------------------------;*/

  PF0EW01.PF0EWFMT = PF1REC.PF1FMT; /* move table key to working storage*/

  PF0E910(); /* table select unique*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if db select successful*/
    PF0EW01.PF0EWFMT = PFCREC.PFCREF; /* move table key*/
    PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR;
    PF0EW01.PF0EWTRN = PFCREC.YFTCD;
    PFWREC.PFWIDX = 1;
    while (PFWREC.PFWIDX <= 13) /* move all time periods and data types*/
      PF0EW01.PF0EWTIM[PFWIDX] = PFCREC.YTPCD[PFWIDX];
      PF0EW01.PF0EWDAT[PFWIDX] = PFCREC.YPDCD[PFWIDX];
      PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
    end
    PF0EW01.PF0EWCU[1] = PFCREC.PFCPCTC[1];
    PF0EW01.PF0EWCL[1] = PFCREC.PFCPCTC[2];
    PF0EW01.PF0EWCU[2] = PFCREC.PFCPCTC[3];
    PF0EW01.PF0EWCL[2] = PFCREC.PFCPCTC[4];
    PF0EW01.PF0EWCU[3] = PFCREC.PFCPCTC[5];
    PF0EW01.PF0EWCL[3] = PFCREC.PFCPCTC[6];
    PF0EW01.PF0EWCU[4] = PFCREC.PFCPCTC[7];
    PF0EW01.PF0EWCL[4] = PFCREC.PFCPCTC[8];
    PF0EW01.PF0EWDCF = "N"; /* set delete confirm msg issued flag*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      PF0EW01.PF0EWTYP = 0; /* assume '0' fmt TYPE*/
      PF0EM000.PF0EMFMT = PF1REC.PF1FMT;
      set PF0EM000.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(9); /* format ref # not on file*/
      PFWREC.PFWERRF = "Y";
    end
  end


  if (PF1REC.PF1ORIG == "PF0C") /* add PF key menu prompt*/
    PF0EM000.PF0EMP14 = "14:SUM MAINT";
    PF0EM001.PF0EMP14 = "14:SUM MAINT";
    PF0EM002.PF0EMP14 = "14:SUM MAINT";
    PF0EM003.PF0EMP14 = "14:SUM MAINT";
    PF0EM004.PF0EMP14 = "14:SUM MAINT";
    PF0EM005.PF0EMP14 = "14:SUM MAINT";
  else
    if (PF1REC.PF1ORIG == "PF0G")
      PF0EM000.PF0EMP14 = "14:SUM REQ  ";
      PF0EM001.PF0EMP14 = "14:SUM REQ  ";
      PF0EM002.PF0EMP14 = "14:SUM REQ  ";
      PF0EM003.PF0EMP14 = "14:SUM REQ  ";
      PF0EM004.PF0EMP14 = "14:SUM REQ  ";
      PF0EM005.PF0EMP14 = "14:SUM REQ  ";
    else
      if (PF1REC.PF1ORIG == "PF0H")
        PF0EM000.PF0EMP14 = "14:SUM PRT  ";
        PF0EM001.PF0EMP14 = "14:SUM PRT  ";
        PF0EM002.PF0EMP14 = "14:SUM PRT  ";
        PF0EM003.PF0EMP14 = "14:SUM PRT  ";
        PF0EM004.PF0EMP14 = "14:SUM PRT  ";
        PF0EM005.PF0EMP14 = "14:SUM PRT  ";
      else
        if (PF1REC.PF1ORIG == "PF0P")
          PF0EM000.PF0EMP14 = "14:PRNT DIR ";
          PF0EM001.PF0EMP14 = "14:PRNT DIR ";
          PF0EM002.PF0EMP14 = "14:PRNT DIR ";
          PF0EM003.PF0EMP14 = "14:PRNT DIR ";
          PF0EM004.PF0EMP14 = "14:PRNT DIR ";
          PF0EM005.PF0EMP14 = "14:PRNT DIR ";
        end
      end
    end
  end
end // end PF0E005

// check fast path entry
Function PF0E006()
   /* ----------------------------------------------------------;*/
     /* This routine checks for fastpath entry.  The user can  ;*/
     /* enter with just 'PF0E' in the option field, or with    ;*/
     /* PF0E in option, and a valid summary format reference   ;*/
     /* number in the item field.  This sum format ref nbr is  ;*/
     /* valid if it appears in the table vrptfm01.             ;*/
   /* ----------------------------------------------------------;*/
  PFWREC.PFWCPROC = "PF0E006"; /* current proc name*/

  if (COMMAREA.CACURRAP == " ") /* if not fastpath*/
    PF0EW01.PF0EWTYP = 0; /* assume zero format sum ref*/
  else /* otherwise (fastpath)*/
    if (COMMAREA.CAITEM == " ") /* if no item specified*/
      PF0EW01.PF0EWTYP = 0; /* assume zero fmt type*/
    else /* otherwise*/
      /* ----------------------------------------------------------;*/
         /* Read table vrptfm01 for match with COMMAREA.CAITEM.    ;*/
         /* COMMAREA.CAITEM is a 20 byte character data item but   ;*/
         /* the table select data item PF0EW01.PF0EWFMT is a 3     ;*/
         /* byte numeric.  If CAITEM is not numeric the compare    ;*/
         /* below will reject it.                                  ;*/
          /* If row is found, save in working storage.             ;*/
      /* ----------------------------------------------------------;*/
      if (COMMAREA.CAITMLTR[1] >= "0" 
       /* check if byte 1 of CAITEM is*/
       && COMMAREA.CAITMLTR[1] <= "9" /* numeric*/
       && COMMAREA.CAITMLTR[2] >= "0" 
       /* check if byte 2 of CAITEM is*/
       && COMMAREA.CAITMLTR[2] <= "9" /* numeric*/
       && COMMAREA.CAITMLTR[3] >= "0" 
       /* check if byte 3 of CAITEM is*/
       && COMMAREA.CAITMLTR[3] <= "9") /* numeric*/
        PF0EW01.PF0EWFMC = COMMAREA.CAITEM;
                                   /* 20 char to 3 char, trunc*/
        PF0EW01.PF0EWFMT = PF0EW01.PF0EWFMC; /* 3 char to 3 num*/

        PF0E910(); /* table select unique*/

        if (SQLCA.VAGen_SQLCODE == +0) /* if db select successful*/
          PF0EW01.PF0EWFMT = PFCREC.PFCREF;
                                   /* move table to work stor*/
          PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR;
          PF0EW01.PF0EWTRN = PFCREC.YFTCD;
          PFWREC.PFWIDX = 1;
          while (PFWREC.PFWIDX <= 13)
                                   /* move all time periods and data types*/
            PF0EW01.PF0EWTIM[PFWIDX] = PFCREC.YTPCD[PFWIDX];
            PF0EW01.PF0EWDAT[PFWIDX] = PFCREC.YPDCD[PFWIDX];
            PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
          end
          PF0EW01.PF0EWCU[1] = PFCREC.PFCPCTC[1];
          PF0EW01.PF0EWCL[1] = PFCREC.PFCPCTC[2];
          PF0EW01.PF0EWCU[2] = PFCREC.PFCPCTC[3];
          PF0EW01.PF0EWCL[2] = PFCREC.PFCPCTC[4];
          PF0EW01.PF0EWCU[3] = PFCREC.PFCPCTC[5];
          PF0EW01.PF0EWCL[3] = PFCREC.PFCPCTC[6];
          PF0EW01.PF0EWCU[4] = PFCREC.PFCPCTC[7];
          PF0EW01.PF0EWCL[4] = PFCREC.PFCPCTC[8];
          PF0EW01.PF0EWDCF = "N"; /* dlt confirm msg issued flag*/
          PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag*/
        else
          if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
            PF0EW01.PF0EWTYP = 0; /* assume '0' fmt TYPE*/
            set PF0EM000.PF0EMFMT cursor, bold;
            converseLib.validationFailed(3); /* invalid FMT ref # entered*/
            PFWREC.PFWERRF = "Y";
          end
        end
      else /* else bytes 1-3 of caitem are not numeric*/
        PF0EW01.PF0EWFMT = 0;
                                   /* cannot show non-numeric format*/
        PF0EW01.PF0EWTYP = 0; /* assume '0' fmt TYPE*/
        converseLib.validationFailed(3); /* invalid FMT ref # entered*/
        PFWREC.PFWERRF = "Y";
      end
    end
  end
end // end PF0E006

// converse menu or 1 of 5 screen
Function PF0E010()
  PF0EM000.XXXPRCNM = "PF0E010";

  if (PF0EW01.PF0EWTYP > 5 /* if fmt type  outside 0-5 range*/
   || PF0EW01.PF0EWTYP < 0) /* signal error*/
    PF0EW01.PF0EWTYP = 0; /* set to 0 type*/
    converseLib.validationFailed(4); /* format type must be 1, 2, 3, 4, or 5*/
    PFWREC.PFWERRF = "Y";
  end


   /* ----------------------------------------------------------;*/
         /* The following statements converse one of 6         ;*/
     /* screens, depending on the reference number entered.    ;*/
         /* On a normal first converse, the user will see a    ;*/
     /* screen that contains only the fmt/act/typ.             ;*/
   /* ----------------------------------------------------------;*/


  if (PF0EW01.PF0EWTYP == 0) /* if fmt type 0 chosen,*/
    PF0EWEOZ = "N"; /* signal fmt TYPE 0 active*/
    set PF0EM000.PF0EMFMT cursor, initialAttributes; /* position cursor at FMT ref #*/
    set PF0EM000.PF0EMACT initialAttributes;
    set PF0EM000.PF0EMTYP initialAttributes;
     /* do not reset PF0EMFMT in case of a fastpath entry error*/
    PF0EM000.PF0EMACT = " ";
    PF0EM000.PF0EMTYP = 0;
    PF0EM000.CATOAP = " ";
    PF0EM000.CAITEM = " ";
    while (PF0EWEOZ == "N") /* while fmt type 0 active*/

      PF0E050(); /* fmt 0 converse screen*/

    end
    return; /* return when finished*/
  end


  if (PF0EW01.PF0EWTYP == 1) /* if fmt type 1 chosen,*/
    set PF0EM001.PF0EMFMT cursor, initialAttributes; /* position cursor at FMT ref #*/
    set PF0EM001.PF0EMACT initialAttributes;
    set PF0EM001.PF0EMTYP initialAttributes;
    PF0EWEO1 = "N"; /* signal type 1 active*/
    while (PF0EWEO1 == "N") /* while type 1 active*/

      PF0E100(); /* fmt 1 converse screen*/

    end
    return; /* return when finished*/
  end


  if (PF0EW01.PF0EWTYP == 2) /* if fmt type 2 chosen,*/
    set PF0EM002.PF0EMFMT cursor, initialAttributes; /* position cursor at FMT ref #*/
    set PF0EM002.PF0EMACT initialAttributes;
    set PF0EM002.PF0EMTYP initialAttributes;
    PF0EWEO2 = "N"; /* signal type 2 active*/
    while (PF0EWEO2 == "N") /* while type 2 active*/

      PF0E200(); /* fmt 2 converse screen*/

    end
    return; /* return when finished*/
  end


  if (PF0EW01.PF0EWTYP == 3) /* if fmt type 3 chosen,*/
    set PF0EM003.PF0EMFMT cursor, initialAttributes; /* position cursor at FMT ref #*/
    set PF0EM003.PF0EMACT initialAttributes;
    set PF0EM003.PF0EMTYP initialAttributes;
    PF0EWEO3 = "N"; /* signal type 3 active*/
    while (PF0EWEO3 == "N") /* while type 3 active*/

      PF0E300(); /* fmt 3 converse screen*/

    end
    return; /* return when finished*/
  end


  if (PF0EW01.PF0EWTYP == 4) /* if fmt type 4 chosen,*/
    set PF0EM004.PF0EMFMT cursor, initialAttributes; /* position cursor at FMT ref #*/
    set PF0EM004.PF0EMACT initialAttributes;
    set PF0EM004.PF0EMTYP initialAttributes;
    PF0EWEO4 = "N"; /* signal type 4 active*/
    while (PF0EWEO4 == "N") /* while type 4 active*/

      PF0E400(); /* fmt 4 converse screen*/

    end
    return; /* return when finished*/
  end


  if (PF0EW01.PF0EWTYP == 5) /* if fmt type 5 chosen,*/
    set PF0EM005.PF0EMFMT cursor, initialAttributes; /* position cursor at FMT ref #*/
    set PF0EM005.PF0EMACT initialAttributes;
    set PF0EM005.PF0EMTYP initialAttributes;
    PF0EWEO5 = "N"; /* signal type 5 active*/
    while (PF0EWEO5 == "N") /* while type 5 active*/

      PF0E500(); /* fmt 5 converse screen*/

    end
    return; /* return when finished*/
  end


    /* fall through error*/

  PF0EW01.PF0EWTYP = 0; /* default to fmt TYPE 0*/
  converseLib.validationFailed(4); /* format type must be 1, 2, 3, 4, or 5*/
  PFWREC.PFWEOAF = "N"; /* set flag to reconverse error message*/
end // end PF0E010

// fmt 0 converse screen
Function PF0E050()
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
                                                            /* ;*/
      /* Format 0 Converse Screen                              ;*/
                                                            /* ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  PF0EM000.XXXPRCNM = "PF0E050";

  PF0EM000.PF0EMFMT = PF0EW01.PF0EWFMT; /* move fields to screen*/
  PF0EM000.PF0EMACT = PF0EW01.PF0EWACT;
  PF0EM000.PF0EMTYP = PF0EW01.PF0EWTYP;

  if (PF1REC.PF1XFERF == "Y") /* if we are bridging via PF keys*/
    set PF0EM000.PF0EMACT skip;
  end

  if (PFWREC.PFWMSG != " ") /* display message if any*/
    PF0EM000.VAGen_EZEMSG = PFWREC.PFWMSG;
  end

  converse PF0EM000 ;

  PF0EW01.PF0EWFMT = PF0EM000.PF0EMFMT; /* save FMT ref #*/
  PF0EW01.PF0EWACT = PF0EM000.PF0EMACT; /* save ACTion*/
  PF0EW01.PF0EWTYP = PF0EM000.PF0EMTYP; /* save TYPe*/

  PFWREC.PFWMSG = " "; /* clear msg line*/
  PF0EM000.VAGen_EZEMSG = " "; /* clear msg line*/
  PFWREC.PFWERRF = "N"; /* reset error flag*/

   /* ----------------------------------------------------------;*/
   /* Initialize the edit fmt/act/typ flag to 'y'.  If there   ;*/
   /* are any errors in the fmt/act/typ fields this process    ;*/
   /* is exited with an ezertn and then repeated until all     ;*/
   /* errors are corrected.  When no errors are found the      ;*/
   /* statement at the end of this process is reached which    ;*/
   /* sets the edit fmt/act/typ flag to 'n'.                   ;*/
   /* ----------------------------------------------------------;*/
  PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to 'yes'*/


  PF0E051(); /* fmt 0 fastpath, pf & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E052(); /* fmt 0 edit fmt/act/typ*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E053(); /* fmt 0 db read & security check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* ----------------------------------------------------------;*/
    /* If this point is reached, there must be no errors       ;*/
    /* signal end of format 0 processing                       ;*/
   /* ----------------------------------------------------------;*/
  PF0EW01.PF0EWEOZ = "Y";
  PF0EW01.PF0EWDCF = "N"; /* set delete confirm msg issued flag*/

   /* ----------------------------------------------------------;*/
   /* Set the edit fmt/act/typ flag to 'n', indicating these   ;*/
   /* fields will not need to be re-edited in the process for  ;*/
   /* the new format.                                          ;*/
   /* ----------------------------------------------------------;*/
  PFWREC.PFWEDTF = "N"; /* set edit fmt/act/typ flag*/
end // end PF0E050

// fmt 0 fastpath, pf & pa keys
Function PF0E051()
  set PF0EM000.PF0EMFMT cursor, initialAttributes; /* reset color and cursor*/
  set PF0EM000.PF0EMACT initialAttributes; /* reset color*/
  set PF0EM000.PF0EMTYP initialAttributes; /* reset color*/
  set PF0EM000.CATOAP initialAttributes; /* reset color*/
  set PF0EM000.CAITEM initialAttributes; /* reset color*/

   /* ----------------------------------------------------------;*/
     /* check for fastpath exit request.  fastpath out is only ;*/
     /* allowed if no data has been entered on the top part of ;*/
     /* the screen.  if other data has been entered, put cursor;*/
     /* on the bad field and send an error message.            ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EM000.CATOAP != " " /* if fastpath*/
   || PF0EM000.CAITEM != " ")
    if (PF0EM000.CATOAP == "PF0E") /* if fastpath into same appl*/
      set PF0EM000.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM000.PF0EMTYP is modified)
      set PF0EM000.PF0EMTYP cursor, bold;
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM000.PF0EMACT is modified)
      set PF0EM000.PF0EMACT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM000.PF0EMFMT is modified)
      set PF0EM000.PF0EMFMT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0EM000.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0EM000.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PF0EW01.PF0EWEOZ = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

   /* -----------------------------------------------------------;*/
      /* Check for PF and PA key entries                        ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is enter)
      /* no action*/
  else

    PF0E810(); /* check pfkeys*/

    if (PFWREC.PFWERRF == "Y" /* if error returned from check*/
     || PFWREC.PFWEOAF == "Y") /* or end of application*/
      PF0EM001.VAGen_EZEMSG = PFWREC.PFWMSG;
      PFWREC.PFWERRF = "Y";
      return; /* exit this routine*/
    end
  end
end // end PF0E051

// fmt 0 edit fmt/act/typ
Function PF0E052()
   /* -----------------------------------------------------------;*/
    /* Edit TYP and ACT fields.  Format TYP is allowed only     ;*/
    /* when action is 'A'.  Type must be 0,1,2,3,4 or 5.        ;*/
   /* -----------------------------------------------------------;*/

  if (PF0EM000.PF0EMTYP != 0) /* if type entered*/
    if (PF0EM000.PF0EMACT == "A") /* if action = 'a'*/
      if (PF0EM000.PF0EMTYP == 1 /* if valid type*/
       || PF0EM000.PF0EMTYP == 2 
       || PF0EM000.PF0EMTYP == 3 
       || PF0EM000.PF0EMTYP == 4 
       || PF0EM000.PF0EMTYP == 5)
         /* this is okay*/
      else /* else  (invalid type)*/
        set PF0EM000.PF0EMTYP cursor, bold;
        converseLib.validationFailed(4); /* format type must be 1, 2, 3, 4, or 5*/
        PFWREC.PFWERRF = "Y";
      end
    else /* else (action not = 'a')*/
      set PF0EM000.PF0EMTYP cursor, bold;
      converseLib.validationFailed(8); /* fmt typ allowed only with action A*/
      PFWREC.PFWERRF = "Y";
    end
  else /* else (type not entered)*/
    if (PF0EM000.PF0EMACT == "A") /* if action = 'a'*/
      set PF0EM000.PF0EMTYP cursor, bold;
      converseLib.validationFailed(6); /* must enter fmt typ with action 'A'*/
      PFWREC.PFWERRF = "Y";
    end
  end

   /* ----------------------------------------------------------;*/
     /* Edit action field.    Allow only a,i,c,d or blank      ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM000.PF0EMACT == "I" /* allow action = i,a,c,d or ' '*/
   || PF0EM000.PF0EMACT == "A" 
   || PF0EM000.PF0EMACT == "C" 
   || PF0EM000.PF0EMACT == "D" 
   || PF0EM000.PF0EMACT == " ")
     /* this is okay*/
  else /* otherwise*/
    set PF0EM000.PF0EMACT cursor, bold;
    converseLib.validationFailed(5); /* action must be i, a, c, or d*/
    PFWREC.PFWERRF = "Y";
  end

   /* ----------------------------------------------------------;*/
     /* Check action against security flags in commarea.       ;*/
   /* ----------------------------------------------------------;*/

  PFWREC.PFWEXT = "N"; /* initialize security error flag*/

  PF0E820(); /* action security checking*/

  if (PFWREC.PFWEXT == "Y") /* if security error flag is 'y'*/
    set PF0EM000.PF0EMACT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end


  if (PF0EM000.PF0EMFMT == 0) /* if fmt not entered*/
    set PF0EM000.PF0EMFMT cursor, bold;
    converseLib.validationFailed(7); /* FMT ref # required*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0E052

// fmt 0 db read & security check
Function PF0E053()
   /* ----------------------------------------------------------;*/
     /* read database for format number                        ;*/
     /* if format found                                        ;*/
       /* move format to working storage                       ;*/
                                                            /* ;*/
     /* if action is add                                       ;*/
       /* format number should not exist                       ;*/
     /* if action is delete                                    ;*/
       /* format number should exist                           ;*/
     /* if action is inquiry or change                         ;*/
       /* format number should exist                           ;*/
   /* ----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19) /* if read next (inquiry and change*/
                                   /* only)*/

    PF0E920(); /* table select next*/

  else /* else enter key pushed (all actions)*/

    PF0E910(); /* table select unique*/

  end

  if (SQLCA.VAGen_SQLCODE == +0) /* if db select successful*/
    PF0EW01.PF0EWFMT = PFCREC.PFCREF; /* move table key*/
    PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR;
    PF0EW01.PF0EWTRN = PFCREC.YFTCD;
    PFWREC.PFWIDX = 1;
    while (PFWREC.PFWIDX <= 13) /* move all time periods and data types*/
      PF0EW01.PF0EWTIM[PFWIDX] = PFCREC.YTPCD[PFWIDX];
      PF0EW01.PF0EWDAT[PFWIDX] = PFCREC.YPDCD[PFWIDX];
      PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
    end
    PF0EW01.PF0EWCU[1] = PFCREC.PFCPCTC[1]; /* column upper*/
    PF0EW01.PF0EWCL[1] = PFCREC.PFCPCTC[2]; /* column lower*/
    PF0EW01.PF0EWCU[2] = PFCREC.PFCPCTC[3]; /* column upper*/
    PF0EW01.PF0EWCL[2] = PFCREC.PFCPCTC[4]; /* column lower*/
    PF0EW01.PF0EWCU[3] = PFCREC.PFCPCTC[5]; /* column upper*/
    PF0EW01.PF0EWCL[3] = PFCREC.PFCPCTC[6]; /* column lower*/
    PF0EW01.PF0EWCU[4] = PFCREC.PFCPCTC[7]; /* column upper*/
    PF0EW01.PF0EWCL[4] = PFCREC.PFCPCTC[8]; /* column lower*/
  end

  if (PF0EW01.PF0EWTYP != 0) /* if typ has changed*/
    PF0EW01.PF0EWEOZ = "Y"; /* signal end of type 0 process*/
    PF0EW01.PF0EWDCF = "N"; /* set delete confirm msg issued flag*/
  end

  if (PF0EM000.PF0EMACT == "A") /* if action is 'add'*/
    if (SQLCA.VAGen_SQLCODE == +0) /* if fmt ref # already in table*/
      PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR; /* display existing type*/
      set PF0EM000.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(12); /* format design already exists*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM000.PF0EMACT == "D") /* if action is 'delete'*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if fmt ref # not in table*/
      set PF0EM000.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM000.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM000.PF0EMACT == "I" /* or action is 'inquiry'*/
   || PF0EM000.PF0EMACT == " ") /* of action is default (inquiry)*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      if (converseVar.eventKey is enter) /* if enter key pushed*/
        set PF0EM000.PF0EMFMT cursor, bold; /* signal error*/
        converseLib.validationFailed(9); /* invalid FMT ref #*/
      end
      PFWREC.PFWERRF = "Y";
      return; /* sqlcode eq 100, and ezeaid is enter or pf19*/
    end
  end

   /* ----------------------------------------------------------;*/
    /* For deletes, check if format is in a predefined summary.;*/
    /* For changes and deletes, check if format is in a summary;*/
    /* on the database.                                        ;*/
   /* ----------------------------------------------------------;*/

   /* IF PF0EM000.PF0EMACT EQ 'D'     ;   if action is 'delete'*/
    /* AND PF0EM000.PF0EMFMT IN PF0GT.PFCREF; and predefined*/
    /* SET PF0EM000.PF0EMFMT CURSOR,BRIGHT;*/
    /* MOVE 137 TO EZEMNO  ; cannot delete, ref# is part of a pre*/
    /* MOVE 'Y' TO PFWREC.PFWERRF;*/
    /* EZERTN;*/
   /* END ;*/

  if (PF0EM000.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM000.PF0EMACT == "D") /* or action is 'delete'*/

    PF0E990(); /* summary select existance*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if no summaries found*/
       /* this is okay*/
    else
                                   /* else - exists in summary or page busy*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if exists in one summary*/
       || SQLCA.VAGen_SQLCODE == -811) /* or exists in multiple summaries*/
        set PF0EM000.PF0EMFMT cursor, bold; /* indicate the error*/
      end
      PFWREC.PFWERRF = "Y";
      return; /* exists in a summary, or -911 - page busy*/
    end
  end

   /* ----------------------------------------------------------;*/
    /* check if user has security to change or delete this     ;*/
    /* particular format.                                      ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "C")
    if (COMMAREA.CACHGFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CACLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM000.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
  if (PF0EW01.PF0EWACT == "D")
    if (COMMAREA.CADELFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CADLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM000.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
end // end PF0E053

// fmt 1 converse screen
Function PF0E100()
   /* -----------------------------------------------------------;*/
   /* -----------------------------------------------------------;*/
   /* -----------------------------------------------------------;*/
                                                             /* ;*/
      /* Format 1 Converse Screen                               ;*/
                                                             /* ;*/
   /* -----------------------------------------------------------;*/
   /* -----------------------------------------------------------;*/
   /* -----------------------------------------------------------;*/

  PF0EM001.XXXPRCNM = "PF0E100";


  PF0E110(); /* fmt 1 fill screen*/


   /* -----------------------------------------------------------;*/
    /* For deletes, after the user enters 'd' the screen is     ;*/
    /* first re-displayed with a confirm delete message and     ;*/
    /* the 'd' action code is blanked out.  The user must       ;*/
    /* re-enter 'd' to proceed with the delete.  If this is     ;*/
    /* is done, a deletion completed message is given on the    ;*/
    /* second re-display of the screen.  The flag               ;*/
    /* PF0EW01.PF0EWDCF indicates if the delete confirmation    ;*/
    /* message has been issued.  It is yes on the second        ;*/
    /* re-display of the screen.                                ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "D")
    if (converseVar.validationMsgNum != 0) /* if an error has occured*/
       /* eg: 23, 26, 71, 119, 123, 125, 126*/
       /* keep this message*/
    else
      PF0EW01.PF0EWDCF = "Y";
                                   /* delete confirm msg issued flag*/
      PF0EM001.PF0EMACT = " "; /* user must reenter 'd' action code*/
      set PF0EM001.PF0EMACT cursor, bold;
      converseLib.validationFailed(122); /* delete requested. re-enter 'd' to confirm.*/
    end
  end

  if (PF1REC.PF1XFERF == "Y") /* if bridging via PF keys*/
    set PF0EM001.PF0EMACT skip; /* protect action field*/
  end

  if (PFWREC.PFWMSG != " ") /* display any message passed*/
    PF0EM001.VAGen_EZEMSG = PFWREC.PFWMSG; /* from another application*/
  end


  converse PF0EM001 ;

  PFWREC.PFWMSG = " "; /* clear msg line*/
  PF0EM001.VAGen_EZEMSG = " "; /* clear msg line*/
  PFWREC.PFWERRF = "N"; /* reset error flag*/

  PF0EW01.PF0EWFMT = PF0EM001.PF0EMFMT; /* save FMT value*/
  PF0EW01.PF0EWACT = PF0EM001.PF0EMACT; /* save ACT value*/
  PF0EW01.PF0EWTYP = PF0EM001.PF0EMTYP; /* save TYP value*/


  PF0E120(); /* fmt 1 fastpath, pf & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* ----------------------------------------------------------;*/
    /* Do not allow changes to the DATA/TIME fields if FMT,    ;*/
    /* ACT or TYP is modified                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EM001.PF0EMFMT is modified
   || PF0EM001.PF0EMACT is modified
   || PF0EM001.PF0EMTYP is modified)
    if (PF0EM001.PF0EMDT[2] is modified)
      set PF0EM001.PF0EMDT[2] cursor, bold;
      converseLib.validationFailed(11); /* do not enter data when changing FMT/ACT/TYP*/
      if (PF0EM001.PF0EMDT[1] is modified)
        set PF0EM001.PF0EMDT[1] cursor, bold;
      end
      return;
    else
      if (PF0EM001.PF0EMDT[1] is modified)
        set PF0EM001.PF0EMDT[1] cursor, bold;
        converseLib.validationFailed(11);
        return;
      end
    end
  end

   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
     /* Processing can now go in one of two ways: (1) If       ;*/
     /* changes were made to the body of the screen (DT1, DT2) ;*/
     /* the new information is put in the table and we exit    ;*/
     /* this process for good (flag PF0EWEO1 = 'y').           ;*/
     /* (2) If a flag indicates there was an error from the    ;*/
     /* last converse in the fields at the top of the screen   ;*/
     /* (REF/ACT/TYP), we re-edit these fields.  Or,           ;*/
     /* if changes were made at the top of the screen (to      ;*/
     /* REF/ACT/TYP), these changes are saved and checked for  ;*/
     /* validity.  If the format is still '1', we loop back    ;*/
     /* to reconverse screen PF0EM001 for the new request.     ;*/
     /* If the format is not '1', we exit this process for     ;*/
     /* good (flag PF0EWEO1 = 'y'), and return to PF0E100      ;*/
     /* where another process will be picked up.               ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM001.PF0EMACT == "D" /* if action is delete*/
   && PF0EW01.PF0EWDCF == "Y"  /* delete confirm msg issued flag is y*/
   && PF0EM001.PF0EMFMT not modified
   && PFWREC.PFWEDTF == "N")   /* edit fmt/act/typ flag is 'no'*/

    PF0E950(); /* table delete*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM001.PF0EMFMT cursor, bold;
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete.*/
      PFWREC.PFWERRF = "Y";
    end
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag*/
    return;
  end
  PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/


  if (PFWREC.PFWEDTF == "Y"         /* if edit fmt/act/typ flag is 'yes'*/
   || PF0EM001.PF0EMFMT is modified /* or FMT/ACT/TYP entered*/
   || PF0EM001.PF0EMACT is modified 
   || PF0EM001.PF0EMTYP is modified 
   || converseVar.eventKey is pf19) /* or read next key pushed*/
     /* fall through*/
  else /* else REF/ACT/TYP not entered*/
    if (PF0EM001.PF0EMACT == "C") /* if action 'c'*/

      PF0E130(); /* fmt 1 change routine*/

    else
      if (PF0EM001.PF0EMACT == "A") /* if action 'a'*/

        PF0E140(); /* fmt 1 add routine*/

        if (PFWREC.PFWERRF == "N" /* if add was successful*/
         && converseVar.eventKey not pf12) /* and not just an edit check*/
          PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag*/
        end
      end
    end
    return;
                                   /* go back*/
  end


   /* ----------------------------------------------------------;*/
   /* Initialize the edit fmt/act/typ flag to 'n'.  If there   ;*/
   /* is an error in the fmt/act/typ fields the flag is set    ;*/
   /* to 'y' to force re-editing of these fields after the     ;*/
   /* message is displayed on the next converse.               ;*/
   /* ----------------------------------------------------------;*/
  PFWREC.PFWEDTF = "N"; /* set edit fmt/act/typ flag*/



   /* ----------------------------------------------------------;*/
   /* Clear residual data from DATA/TIME flds in scrn & pf0ew01;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM001.PF0EMACT == "A" /* if action is add*/
   && PF0EM001.PF0EMTYP not modified) /* and type has not changed*/
     /* do nothing - cloning an existing format*/
  else

    PF0E150(); /* fmt 1 clear data fields*/

  end


  PF0E160(); /* fmt 1 edit fmt/act/typ*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E170(); /* fmt 1 db read & security check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (PF0EW01.PF0EWTYP != 1) /* if we have a different fmt type now*/
    PF0EW01.PF0EWEO1 = "Y"; /* signal end of type 1 process*/
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
  end
end // end PF0E100

// fmt 1 fill screen
Function PF0E110()
   /* -----------------------------------------------------------;*/
   /* Move FMT ref #,  ACTION and format TYPE   to screen.      ;*/
   /* -----------------------------------------------------------;*/
  PF0EM001.PF0EMFMT = PF0EW01.PF0EWFMT;
  PF0EM001.PF0EMACT = PF0EW01.PF0EWACT;
  PF0EM001.PF0EMTYP = PF0EW01.PF0EWTYP;

   /* -----------------------------------------------------------;*/
   /* Set up screen fields related to the 2 DATA/TIME fields    ;*/
   /* -----------------------------------------------------------;*/
      /* Search table YTPTBL for TIME PERIOD (MTD, JAN, etc.)   ;*/
      /* Search table YPDTBL for DATA TYPE (CA,OB,PA,OF, etc.)  ;*/
      /* Save short & long length descriptions for screen       ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 2) /* repeat this process twice*/
    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD)
      PF0EW01.PF0EWTLH[PFWIDX] = YTPTBL.YTPSDESC[sysVar.arrayIndex];
                                   /* long time*/
      PF0EW01.PF0EWTSH[PFWIDX] = PF0EW01.PF0EWTIM[PFWIDX]; /* shrt tm*/
    else
      PF0EW01.PF0EWTLH[PFWIDX] = " "; /* long time*/
      PF0EW01.PF0EWTSH[PFWIDX] = " "; /* short time*/
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD)
      PF0EW01.PF0EWDLH[PFWIDX] = YPDTBL.YPDSDESC[sysVar.arrayIndex];
                                   /* long data*/
      PF0EW01.PF0EWDSH[PFWIDX] = PF0EW01.PF0EWDAT[PFWIDX];
                                   /* shrt dat*/
    else
      PF0EW01.PF0EWDLH[PFWIDX] = " "; /* long data*/
      PF0EW01.PF0EWDSH[PFWIDX] = " "; /* short data*/
       /* space out times too so they won't appear incorrectly in*/
       /* the left half of the fields (due to left justification)*/
      PF0EW01.PF0EWTLH[PFWIDX] = " "; /* long time*/
      PF0EW01.PF0EWTSH[PFWIDX] = " "; /* short time*/
    end
    PF0EM001.PF0EMDT[PFWIDX] = PF0EW01.PF0EWDT[PFWIDX]; /* 5 bytes*/
    PF0EM001.PF0EMLH[PFWIDX] = PF0EW01.PF0EWLH[PFWIDX]; /* 20 bytes*/
    if (PFWIDX == 1)
      PF0EM001.PF0EMDU = PF0EW01.PF0EWSH[PFWIDX];
                                   /* upper (numerator)*/
    else
      PF0EM001.PF0EMDL = PF0EW01.PF0EWSH[PFWIDX]; /* lower (denom.)*/
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

   /* -----------------------------------------------------------;*/
    /* Protect DATA/TIME fields if action 'I' or 'D'.           ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "I"
   || PF0EW01.PF0EWACT == "D"
   || PF0EW01.PF0EWACT == " ")
    set PF0EM001.PF0EMDT[1] protect;
    set PF0EM001.PF0EMDT[2] protect;
  end
end // end PF0E110

// fmt 1 fastpath, pf & pa keys
Function PF0E120()
  set PF0EM001.PF0EMFMT cursor, initialAttributes; /* reset color and cursor*/
  set PF0EM001.PF0EMACT initialAttributes; /* reset color*/
  set PF0EM001.PF0EMTYP initialAttributes; /* reset color*/
  set PF0EM001.PF0EMDT[1] initialAttributes; /* reset color*/
  set PF0EM001.PF0EMDT[2] initialAttributes; /* reset color*/
  set PF0EM001.CATOAP initialAttributes; /* reset color*/
  set PF0EM001.CAITEM initialAttributes; /* reset color*/

   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on the;*/
     /* screen.  If other data has been entered, put cursor     ;*/
     /* on the bad field and send an error message.             ;*/
     /* Do not allow fastpath back into same application.       ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EM001.CATOAP != " " /* if fastpath*/
   || PF0EM001.CAITEM != " ")
    if (PF0EM001.CATOAP == "PF0E") /* if fastpath into same appl*/
      set PF0EM001.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM001.PF0EMDT[2] is modified)
      set PF0EM001.PF0EMDT[2] cursor, bold;
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM001.PF0EMDT[1] is modified)
      set PF0EM001.PF0EMDT[1] cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM001.PF0EMTYP is modified)
      set PF0EM001.PF0EMTYP cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM001.PF0EMACT is modified)
      set PF0EM001.PF0EMACT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM001.PF0EMFMT is modified)
      set PF0EM001.PF0EMFMT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0EM001.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0EM001.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PF0EW01.PF0EWEO1 = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

   /* -----------------------------------------------------------;*/
      /* Check for PF and PA key entries                        ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is enter)
      /* no action*/
  else

    PF0E810(); /* check pfkeys*/

    if (PFWREC.PFWERRF == "Y" /* if error returned from check*/
     || PFWREC.PFWEOAF == "Y" /* or end of application*/
     || PF0EW01.PF0EWTYP == 0) /* or fmt TYPE is now 0*/
      PF0EW01.PF0EWEO1 = "Y"; /* signal end of fmt type 1*/
      return; /* exit this routine*/
    end
  end


   /* ----------------------------------------------------------;*/
    /* Warn user if read next pfkey is pushed and changes were ;*/
    /* made to the lower part of the screen.                   ;*/
   /* ----------------------------------------------------------;*/
  if (converseVar.eventKey is pf19   
   && PF0EM001.PF0EMACT == "C"       
   && PF0EM001 is modified           /* part of screen is modified*/
   && PF0EM001.PF0EMFMT not modified /* but not fmt/act/typ*/
   && PF0EM001.PF0EMACT not modified 
   && PF0EM001.PF0EMTYP not modified)
    PF0EW01.PF0EWDT[1] = PF0EM001.PF0EMDT[1];
                                   /* save data/time values*/
    PF0EW01.PF0EWDT[2] = PF0EM001.PF0EMDT[2];
    converseLib.validationFailed(135); /* press enter to update, prior to pushing pf19*/
    PFWREC.PFWERRF = "Y";
    return;
  end
end // end PF0E120

// fmt 1 change routine
Function PF0E130()
   /* -----------------------------------------------------------;*/
      /* Change routine for fmt 1                               ;*/
   /* -----------------------------------------------------------;*/

  PF0EW01.PF0EWDT[1] = PF0EM001.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM001.PF0EMDT[2];

  PF0E182(); /* fmt 1 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end

  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (apply changes)*/

    PF0E940(); /* table update*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM001.PF0EMFMT cursor, bold;
      converseLib.validationFailed(33); /* format # not on file, cannot change*/
      PFWREC.PFWERRF = "Y";
    end
  end
end // end PF0E130

// fmt 1 add routine
Function PF0E140()
   /* -----------------------------------------------------------;*/
      /* Add routine for fmt 1                                  ;*/
   /* -----------------------------------------------------------;*/

  if (PF0EM001.PF0EMFMT == 0)
    converseLib.validationFailed(45); /* format ref not valid*/
    PFWREC.PFWERRF = "Y";
    return;
  else
    if (PF0EM001.PF0EMTYP == 1)
       /* this is okay*/
    else
      if (PF0EM001.PF0EMTYP == 2)
        converseLib.validationFailed(81); /* cannot add type 2 from this screen*/
      else
        if (PF0EM001.PF0EMTYP == 3)
          converseLib.validationFailed(82); /* cannot add type 3 from this screen*/
        else
          if (PF0EM001.PF0EMTYP == 4)
            converseLib.validationFailed(83); /* cannot add type 4 from this screen*/
          else
            if (PF0EM001.PF0EMTYP == 5)
              converseLib.validationFailed(84); /* cannot add type 5 from this screen*/
            end
          end
        end
      end
      set PF0EM001.PF0EMTYP cursor, bold;
      PFWREC.PFWERRF = "Y";
      return;
    end
  end


  PF0EW01.PF0EWDT[1] = PF0EM001.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM001.PF0EMDT[2];
  PF0EW01.PF0EWCU[1] = 5;
  PF0EW01.PF0EWCL[1] = 11;

  if (PF0EM001.PF0EMDT[2] not modified /* if DATA/TIME 2 not entered*/
   && PF0EM001.PF0EMDT[2] == " ")      /* and is blank*/
    set PF0EM001.PF0EMDT[2] cursor, bold;
    converseLib.validationFailed(25); /* must enter data/time type*/
    PFWREC.PFWERRF = "Y"; /* signal error*/
  end
  if (PF0EM001.PF0EMDT[1] not modified /* if DATA/TIME 1 not entered*/
   && PF0EM001.PF0EMDT[1] == " ")      /* and is blank*/
    set PF0EM001.PF0EMDT[1] cursor, bold;
    converseLib.validationFailed(25); /* must enter data/time type*/
    PFWREC.PFWERRF = "Y"; /* signal error*/
  end
  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E182(); /* fmt 1 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (the real thing)*/

    set PFCREC empty; /* clear record*/
    PF0E930(); /* table add*/

    if (SQLCA.VAGen_SQLCODE == +100)
      set PF0EM001.PF0EMFMT cursor, bold;
      converseLib.validationFailed(12); /* format reference # already exists*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    end
  end
end // end PF0E140

// fmt 1 clear data fields
Function PF0E150()
   /* -----------------------------------------------------------;*/
      /* Clear residual data from screen and wkg storage fields ;*/
   /* -----------------------------------------------------------;*/

  PF0EW01.PF0EWTRN = " ";
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
    PF0EW01.PF0EWDT[PFWIDX] = " ";
    PF0EW01.PF0EWSH[PFWIDX] = " ";
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end
  PF0EW01.PF0EWLH[1] = " ";
  PF0EW01.PF0EWLH[2] = " ";
  PF0EW01.PF0EWLH[3] = " ";
  PF0EW01.PF0EWCU[1] = 0;
  PF0EW01.PF0EWCL[1] = 0;
  PF0EW01.PF0EWCU[2] = 0;
  PF0EW01.PF0EWCL[2] = 0;
  PF0EW01.PF0EWCU[3] = 0;
  PF0EW01.PF0EWCL[3] = 0;
  PF0EW01.PF0EWCU[4] = 0;
  PF0EW01.PF0EWCL[4] = 0;

   /* screen fields*/

  PF0EM001.PF0EMDT[1] = " ";
  PF0EM001.PF0EMDT[2] = " ";
  PF0EM001.PF0EMLH[1] = " ";
  PF0EM001.PF0EMLH[2] = " ";
  PF0EM001.PF0EMDU = " ";
  PF0EM001.PF0EMDL = " ";
end // end PF0E150

// fmt 1 edit fmt/act/typ
Function PF0E160()
   /* ----------------------------------------------------------;*/
     /* Edit action and type fields                            ;*/
       /* TYPE values must be 0 - 5.  Can be entered only with ;*/
       /* ACTION 'A'.  TYPE values are in CSP table.           ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM001.PF0EMACT == "A") /* if action 'a'*/
    if (PF0EM001.PF0EMTYP == 0) /* if no type entered*/
      set PF0EM001.PF0EMTYP cursor, bold; /* require type*/
      converseLib.validationFailed(6); /* must enter fmt typ w/ action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    else /* else type entered*/
      if (PF0EM001.PF0EMTYP == 1 /* IF VALID TYPE*/
       || PF0EM001.PF0EMTYP == 2 
       || PF0EM001.PF0EMTYP == 3 
       || PF0EM001.PF0EMTYP == 4 
       || PF0EM001.PF0EMTYP == 5)
         /* this is okay*/
      else /* else invalid fmt type*/
        set PF0EM001.PF0EMTYP cursor, bold;
        converseLib.validationFailed(4); /* format type must be 1, 2, 3, 4, or 5*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
      end
    end
  else /* else action not 'a'*/
    if (PF0EM001.PF0EMTYP == 0 /* if no type entered*/
     || PF0EM001.PF0EMTYP not modified)
       /* this is okay                             okay*/
    else /* else type entered*/
      set PF0EM001.PF0EMTYP cursor, bold; /* reject type entry*/
      converseLib.validationFailed(8); /* format type allowed only with action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    end
  end

   /* ----------------------------------------------------------;*/
     /* Allow action add, inq, chg, or del                     ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM001.PF0EMACT == "I" /* if action = i,a,c,d or ' '*/
   || PF0EM001.PF0EMACT == "A" 
   || PF0EM001.PF0EMACT == "C" 
   || PF0EM001.PF0EMACT == "D" 
   || PF0EM001.PF0EMACT == " ")
      /* this is okay*/
  else /* otherwise signal error*/
    set PF0EM001.PF0EMACT cursor, bold;
    converseLib.validationFailed(5); /* action must be i, a, c, or d*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end

   /* ----------------------------------------------------------;*/
     /* Check action against security flags in commarea.       ;*/
   /* ----------------------------------------------------------;*/

  PFWREC.PFWEXT = "N"; /* initialize security error flag*/

  PF0E820(); /* action security checking*/

  if (PFWREC.PFWEXT == "Y") /* if security error flag is 'y'*/
    set PF0EM001.PF0EMACT cursor, bold;
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0EM001.PF0EMFMT == 0) /* if fmt not entered*/
    set PF0EM001.PF0EMFMT cursor, bold;
    converseLib.validationFailed(7); /* FMT ref # required*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0E160

// fmt 1 db read & security check
Function PF0E170()
   /* ----------------------------------------------------------;*/
     /* read database for format number                        ;*/
     /* if format found                                        ;*/
       /* move format to working storage                       ;*/
                                                            /* ;*/
     /* if action is add                                       ;*/
       /* format number should not exist                       ;*/
     /* if action is delete                                    ;*/
       /* format number should exist                           ;*/
     /* if action is inquiry or change                         ;*/
       /* format number should exist                           ;*/
   /* ----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19) /* if read next (inquiry and change*/
                                   /* only)*/

    PF0E920(); /* table select next*/

  else /* else enter key pushed (all actions)*/

    PF0E910(); /* table select unique*/

  end

  if (SQLCA.VAGen_SQLCODE == +0) /* if db select successful*/
    PF0EW01.PF0EWFMT = PFCREC.PFCREF; /* move table key*/
    PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR;
    PF0EW01.PF0EWTRN = PFCREC.YFTCD;
    PFWREC.PFWIDX = 1;
    while (PFWREC.PFWIDX <= 13) /* move all time periods and data types*/
      PF0EW01.PF0EWTIM[PFWIDX] = PFCREC.YTPCD[PFWIDX];
      PF0EW01.PF0EWDAT[PFWIDX] = PFCREC.YPDCD[PFWIDX];
      PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
    end
    PF0EW01.PF0EWCU[1] = PFCREC.PFCPCTC[1];
    PF0EW01.PF0EWCL[1] = PFCREC.PFCPCTC[2];
    PF0EW01.PF0EWCU[2] = PFCREC.PFCPCTC[3];
    PF0EW01.PF0EWCL[2] = PFCREC.PFCPCTC[4];
    PF0EW01.PF0EWCU[3] = PFCREC.PFCPCTC[5];
    PF0EW01.PF0EWCL[3] = PFCREC.PFCPCTC[6];
    PF0EW01.PF0EWCU[4] = PFCREC.PFCPCTC[7];
    PF0EW01.PF0EWCL[4] = PFCREC.PFCPCTC[8];
  end

  if (PF0EW01.PF0EWTYP != 1) /* if the existing format is not type 1*/
    PF0EW01.PF0EWEO1 = "Y"; /* signal end of type 1 process*/
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
  end

  if (PF0EM001.PF0EMACT == "A") /* if action is 'add'*/
    if (SQLCA.VAGen_SQLCODE == +0) /* if fmt ref # already in table*/
      PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR; /* display existing type*/
      set PF0EM001.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(12); /* format design already exists*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM001.PF0EMACT == "D") /* if action is 'delete'*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if fmt ref # not in table*/
      set PF0EM001.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM001.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM001.PF0EMACT == "I" /* or action is 'inquiry'*/
   || PF0EM001.PF0EMACT == " ") /* of action is default (inquiry)*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      if (converseVar.eventKey is enter) /* if enter key pushed*/
        set PF0EM001.PF0EMFMT cursor, bold; /* signal error*/
        converseLib.validationFailed(9); /* invalid FMT ref #*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* sqlcode eq 100, and ezeaid is enter or pf19*/
    end
  end


   /* ----------------------------------------------------------;*/
    /* For deletes, check if format is in a predefined summary.;*/
    /* For changes and deletes, check if format is in a summary;*/
    /* on the database.                                        ;*/
   /* ----------------------------------------------------------;*/

   /* IF PF0EM001.PF0EMACT EQ 'D'     ;   if action is 'delete'*/
    /* AND PF0EM001.PF0EMFMT IN PF0GT.PFCREF; and predefined*/
    /* SET PF0EM001.PF0EMFMT CURSOR,BRIGHT;*/
    /* MOVE 137 TO EZEMNO  ; cannot delete, ref# is part of a pre*/
    /* MOVE 'Y' TO PFWREC.PFWEDTF    ; set edit fmt/act/typ flag*/
    /* MOVE 'Y' TO PFWREC.PFWERRF;*/
    /* EZERTN;*/
   /* END ;*/

  if (PF0EM001.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM001.PF0EMACT == "D") /* or action is 'delete'*/

    PF0E990(); /* summary select existance*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if no summaries found*/
       /* this is okay*/
    else
                                   /* else - exists in summary or page busy*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if exists in one summary*/
       || SQLCA.VAGen_SQLCODE == -811) /* or exists in multiple summaries*/
        set PF0EM001.PF0EMFMT cursor, bold; /* indicate the error*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* exists in a summary, or -911 - page busy*/
    end
  end

   /* ----------------------------------------------------------;*/
    /* Check if user has security to change or delete this     ;*/
    /* particular format record.  The pfcrec.xxxusrid is       ;*/
    /* only updated when a format record is added.  This       ;*/
    /* establishes ownership.                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "C")
    if (COMMAREA.CACHGFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CACLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM001.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
  if (PF0EW01.PF0EWACT == "D")
    if (COMMAREA.CADELFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CADLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM001.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
end // end PF0E170

// fmt 1 validity check
Function PF0E182()
   /* -----------------------------------------------------------;*/
      /* Format 1 validity check for DATA/TIME fields,          ;*/
      /* used for 'add' and 'change' functions                  ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
   /* Repeat this once for each DATA/TIME field on screen.      ;*/
      /* Search table YTPTBL for TIME PERIOD (MTD, JAN, etc.)   ;*/
      /* Search table YPDTBL for DATA TYPE (CA,OB,PA,OF, etc.)  ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 2;
  while (PFWREC.PFWIDX >= 1) /* repeat this twice (descending)*/
    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD) /* if found in table*/
      if (PF0EW01.PF0EWTIM[PFWIDX] != "CTL")
         /* this is okay*/
      else
        set PF0EM001.PF0EMDT[PFWIDX] cursor, bold;
        converseLib.validationFailed(245); /* 'ctl' not valid time period for this fmt type*/
        PFWREC.PFWERRF = "Y";
      end
    else
      set PF0EM001.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(17); /* invalid time period*/
      PFWREC.PFWERRF = "Y";
    end

    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD) /* if found in table*/
      if (PF0EW01.PF0EWDAT[PFWIDX] != "NA")
         /* this is okay*/
      else
        set PF0EM001.PF0EMDT[PFWIDX] cursor, bold;
        converseLib.validationFailed(246); /* 'na' not valid data type for this fmt type*/
        PFWREC.PFWERRF = "Y";
      end
    else
      set PF0EM001.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(16); /* invalid data type*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end
end // end PF0E182

// fmt 2 converse screen
Function PF0E200()
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
                                                            /* ;*/
      /* Format 2 Converse Screen                              ;*/
                                                            /* ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  PF0EM002.XXXPRCNM = "PF0E200";


  PF0E210(); /* fmt 2 fill screen*/


   /* -----------------------------------------------------------;*/
    /* For deletes, after the user enters 'd' the screen is     ;*/
    /* first re-displayed with a confirm delete message and     ;*/
    /* the 'd' action code is blanked out.  The user must       ;*/
    /* re-enter 'd' to proceed with the delete.  If this is     ;*/
    /* is done, a deletion completed message is given on the    ;*/
    /* second re-display of the screen.  The flag               ;*/
    /* PF0EW01.PF0EWDCF indicates if the delete confirmation    ;*/
    /* message has been issued.  It is yes on the second        ;*/
    /* re-display of the screen.                                ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "D") /* special messages for action delete*/
    if (converseVar.validationMsgNum != 0) /* if an error occured*/
       /* keep this message*/
    else
      PF0EW01.PF0EWDCF = "Y"; /* set delete confirm msg issued flag*/
      PF0EM002.PF0EMACT = " "; /* user must re-enter 'd' action code*/
      set PF0EM002.PF0EMACT cursor, bold;
      converseLib.validationFailed(122); /* delete requested. re-enter 'd' to confirm.*/
    end
  end

  if (PF1REC.PF1XFERF == "Y") /* if bridging via PF keys*/
    set PF0EM002.PF0EMACT skip; /* protect action field*/
  end

  if (PFWREC.PFWMSG != " ") /* display any msg passed from*/
    PF0EM002.VAGen_EZEMSG = PFWREC.PFWMSG; /* other application*/
  end

  converse PF0EM002 ;

  PFWREC.PFWMSG = " "; /* clear msg line*/
  PF0EM002.VAGen_EZEMSG = " "; /* clear msg line*/
  PFWREC.PFWERRF = "N"; /* reset error flag*/

  PF0EW01.PF0EWFMT = PF0EM002.PF0EMFMT; /* save FMT value*/
  PF0EW01.PF0EWACT = PF0EM002.PF0EMACT; /* save ACT value*/
  PF0EW01.PF0EWTYP = PF0EM002.PF0EMTYP; /* save TYP value*/


  PF0E220(); /* fmt 2 fastpath, pf & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* ----------------------------------------------------------;*/
    /* Do not allow changes to the DATA/TIME fields if FMT,    ;*/
    /* ACT or TYP is modified                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EM002.PF0EMFMT is modified
   || PF0EM002.PF0EMACT is modified
   || PF0EM002.PF0EMTYP is modified)

    PF0E281(); /* fmt 2 data entry check*/

    if (PFWREC.PFWERRF == "Y")
      converseLib.validationFailed(11); /* do not enter data when changing ref/act/typ*/
      return;
    end
  end


   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
     /* Processing can now go in one of two ways: (1) If       ;*/
     /* changes were made to the body of the screen            ;*/
     /* the new information is put in the table and we exit    ;*/
     /* this process for good (flag PFWEOT2F = 'y').           ;*/
     /* (2) If a flag indicates there was an error from the    ;*/
     /* last converse in the fields at the top of the screen   ;*/
     /* (REF/ACT/TYP), we re-edit these fields.  Or,           ;*/
     /* if changes were made at the top of the screen (to      ;*/
     /* REF/ACT/TYP), these changes are saved and checked for  ;*/
     /* validity.  If the format is still '2', we loop back    ;*/
     /* to reconverse screen PF0EM002 for the new request.     ;*/
     /* If the format is not '2', we exit this process for     ;*/
     /* good (flag PFWEOT1F = 'y'), and return to PF0E100      ;*/
     /* where another process will be picked up.               ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM002.PF0EMACT == "D" /* if action is delete*/
   && PF0EW01.PF0EWDCF == "Y"  /* delete confirm msg isssued flag*/
   && PF0EM002.PF0EMFMT not modified
   && PFWREC.PFWEDTF == "N")   /* and edit fmt/act/typ flag is 'no'*/

    PF0E950(); /* table delete*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM002.PF0EMFMT cursor, bold;
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete.*/
      PFWREC.PFWERRF = "Y";
    end

    PF0EW01.PF0EWDCF = "N"; /* set dlt confirm msg issued flag*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag*/
    return;
  end
  PF0EW01.PF0EWDCF = "N"; /* set delete confirm msg issued flag*/


  if (PFWREC.PFWEDTF == "Y"         /* if edit fmt/act/typ flag is 'yes'*/
   || PF0EM002.PF0EMFMT is modified /* or FMT/ACT/TYP fields entered*/
   || PF0EM002.PF0EMACT is modified 
   || PF0EM002.PF0EMTYP is modified 
   || converseVar.eventKey is pf19)
                                   /* or read next pfkey pushed*/
     /* fall through*/
  else /* else fmt/act/typ ok*/
    if (PF0EM002.PF0EMACT == "C")

      PF0E230(); /* fmt 2 change routine*/

    else
      if (PF0EM002.PF0EMACT == "A")

        PF0E240(); /* fmt 2 add routine*/

        if (PFWREC.PFWERRF == "N" /* if add was successful*/
         && converseVar.eventKey not pf12) /* and not just an edit check*/
          PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag*/
        end
      end
    end
    return;
  end


   /* ----------------------------------------------------------;*/
   /* Initialize the edit fmt/act/typ flag to 'n'.  If there   ;*/
   /* is an error in the fmt/act/typ fields the flag is set    ;*/
   /* to 'y' to force re-editing of these fields after the     ;*/
   /* message is displayed on the next converse.               ;*/
   /* ----------------------------------------------------------;*/
  PFWREC.PFWEDTF = "N"; /* re-set edit fmt/act/typ flag*/


   /* ----------------------------------------------------------;*/
   /* Clear residual data from data/time flds in scrn & pf0ew01;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM002.PF0EMACT == "A" /* if action is add*/
   && PF0EM002.PF0EMTYP not modified) /* and type has not changed*/
     /* do nothing - cloning an existing format*/
  else

    PF0E250(); /* fmt 2 clear data fields*/

  end


  PF0E260(); /* fmt 2 edit fmt/act/typ*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E270(); /* fmt 2 db read & security check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (PF0EW01.PF0EWTYP != "2") /* if we have a different format now*/
    PF0EW01.PF0EWEO2 = "Y"; /* signal end of type 2 processing*/
    PF0EW01.PF0EWDCF = "N"; /* set dlt confirm msg issued flag*/
  end
end // end PF0E200

// fmt 2 fill screen
Function PF0E210()
   /* -----------------------------------------------------------;*/
   /* Move FMT ref #,  ACTION and fmt TYP to screen.            ;*/
   /* -----------------------------------------------------------;*/
  PF0EM002.PF0EMFMT = PF0EW01.PF0EWFMT;
  PF0EM002.PF0EMACT = PF0EW01.PF0EWACT;
  PF0EM002.PF0EMTYP = PF0EW01.PF0EWTYP;


   /* -----------------------------------------------------------;*/
   /* Set up screen fields related to the 3 DATA/TIME fields    ;*/
   /* -----------------------------------------------------------;*/
      /* Search table ytptbl for time period (mtd, jan, etc.)   ;*/
      /* Search table ypdtbl for data type (ca,ob,pa,of, etc.)  ;*/
      /* Save short & long length descriptions for screen.      ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 3) /* repeat this 3 times*/
    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD) /* time period*/
      PF0EW01.PF0EWTLH[PFWIDX] = YTPTBL.YTPSDESC[sysVar.arrayIndex];
                                   /* long time*/
      PF0EW01.PF0EWTSH[PFWIDX] = PF0EW01.PF0EWTIM[PFWIDX]; /* short*/
    else
      PF0EW01.PF0EWTLH[PFWIDX] = " "; /* long time*/
      PF0EW01.PF0EWTSH[PFWIDX] = " "; /* short time*/
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD) /* data type*/
      PF0EW01.PF0EWDLH[PFWIDX] = YPDTBL.YPDSDESC[sysVar.arrayIndex];
                                   /* long data*/
      PF0EW01.PF0EWDSH[PFWIDX] = PF0EW01.PF0EWDAT[PFWIDX]; /* short*/
    else
      PF0EW01.PF0EWDLH[PFWIDX] = " "; /* long data*/
      PF0EW01.PF0EWDSH[PFWIDX] = " "; /* short data*/
       /* space out times too so the won't appear incorrectly in*/
       /* the left half of the fields (due to left justification)*/
      PF0EW01.PF0EWTLH[PFWIDX] = " "; /* long time*/
      PF0EW01.PF0EWTSH[PFWIDX] = " "; /* short time*/
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end


  PF0EM002.PF0EMDT[1] = PF0EW01.PF0EWDT[1]; /* 5 bytes*/
  PF0EM002.PF0EMDT[2] = PF0EW01.PF0EWDT[2]; /* 5 bytes*/
  PF0EM002.PF0EMDT[3] = PF0EW01.PF0EWDT[3]; /* 5 bytes*/

  PF0EM002.PF0EMLH = PF0EW01.PF0EWLH[1]; /* 20 bytes*/
  PF0EM002.PF0EMSH[1] = PF0EW01.PF0EWSH[2]; /* 6 bytes - note subscripts*/
  PF0EM002.PF0EMSH[2] = PF0EW01.PF0EWSH[3]; /* 6 bytes - note subscripts*/

  PF0EM002.PF0EMCU[1] = PF0EW01.PF0EWCU[1]; /* upper col #*/
  PF0EM002.PF0EMCL[1] = PF0EW01.PF0EWCL[1]; /* lower col #*/
  PF0EM002.PF0EMCU[2] = PF0EW01.PF0EWCU[2]; /* upper col #*/
  PF0EM002.PF0EMCL[2] = PF0EW01.PF0EWCL[2]; /* lower col #*/

   /* -----------------------------------------------------------;*/
      /* Move in short headings for "as % of" columns at right  ;*/
      /* of screen.                                             ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 1;

  while (PFWREC.PFWIDX <= 2)
    if (PF0EM002.PF0EMCU[PFWIDX] == 0) /* upper (numerator)*/
      PF0EM002.PF0EMDU[PFWIDX] = " ";
    else
      if (PF0EM002.PF0EMCU[PFWIDX] == 1)
        PF0EM002.PF0EMDU[PFWIDX] = PF0EW01.PF0EWSH[1];
      else
        if (PF0EM002.PF0EMCU[PFWIDX] == 5)
          PF0EM002.PF0EMDU[PFWIDX] = PF0EW01.PF0EWSH[1];
        else
          if (PF0EM002.PF0EMCU[PFWIDX] == 7)
            PF0EM002.PF0EMDU[PFWIDX] = PF0EW01.PF0EWSH[2];
          else
            if (PF0EM002.PF0EMCU[PFWIDX] == 9)
              PF0EM002.PF0EMDU[PFWIDX] = PF0EW01.PF0EWSH[3];
            else
              PF0EM002.PF0EMDU[PFWIDX] = " ";
            end
          end
        end
      end
    end

    if (PF0EM002.PF0EMCL[PFWIDX] == 0) /* lower (denominator)*/
      PF0EM002.PF0EMDL[PFWIDX] = " ";
    else
      if (PF0EM002.PF0EMCL[PFWIDX] == 1)
        PF0EM002.PF0EMDL[PFWIDX] = PF0EW01.PF0EWSH[1];
      else
        if (PF0EM002.PF0EMCL[PFWIDX] == 5)
          PF0EM002.PF0EMDL[PFWIDX] = PF0EW01.PF0EWSH[1];
        else
          if (PF0EM002.PF0EMCL[PFWIDX] == 7)
            PF0EM002.PF0EMDL[PFWIDX] = PF0EW01.PF0EWSH[2];
          else
            if (PF0EM002.PF0EMCL[PFWIDX] == 9)
              PF0EM002.PF0EMDL[PFWIDX] = PF0EW01.PF0EWSH[3];
            else
              PF0EM002.PF0EMDL[PFWIDX] = " ";
            end
          end
        end
      end
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

   /* -----------------------------------------------------------;*/
    /* Protect DATA/TIME  and COL fields if action 'I' or 'D'.  ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "I"
   || PF0EW01.PF0EWACT == " "
   || PF0EW01.PF0EWACT == "D")
    set PF0EM002.PF0EMDT[1] protect;
    set PF0EM002.PF0EMDT[2] protect;
    set PF0EM002.PF0EMDT[3] protect;
    set PF0EM002.PF0EMCU[1] protect;
    set PF0EM002.PF0EMCL[1] protect;
    set PF0EM002.PF0EMCU[2] protect;
    set PF0EM002.PF0EMCL[2] protect;
  end
end // end PF0E210

// fmt 2 fastpath, pf & pa keys
Function PF0E220()
  set PF0EM002.PF0EMFMT cursor, initialAttributes; /* reset color and cursor*/
  set PF0EM002.PF0EMACT initialAttributes; /* reset color*/
  set PF0EM002.PF0EMTYP initialAttributes; /* reset color*/
  set PF0EM002.PF0EMDT[1] initialAttributes; /* reset color*/
  set PF0EM002.PF0EMDT[2] initialAttributes; /* reset color*/
  set PF0EM002.PF0EMDT[3] initialAttributes; /* reset color*/
  set PF0EM002.PF0EMCU[1] initialAttributes; /* reset color*/
  set PF0EM002.PF0EMCU[2] initialAttributes; /* reset color*/
  set PF0EM002.PF0EMCL[1] initialAttributes; /* reset color*/
  set PF0EM002.PF0EMCL[2] initialAttributes; /* reset color*/
  set PF0EM002.CATOAP initialAttributes; /* reset color*/
  set PF0EM002.CAITEM initialAttributes; /* reset color*/

   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on the;*/
     /* screen.  If other data has been entered, put cursor     ;*/
     /* on the bad field and send an error message.             ;*/
     /* Do not allow fastpath back into same application.       ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EM002.CATOAP != " " /* if fastpath*/
   || PF0EM002.CAITEM != " ")
    if (PF0EM002.CATOAP == "PF0E") /* if fastpath into same appl*/
      set PF0EM002.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
       /* wait to set PFWERRF until after the following process*/
    end

    PF0E281(); /* fmt 2 data entry check*/

    if (PFWREC.PFWERRF == "Y") /* if an error occured*/
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
    end
    if (PF0EM002.CATOAP == "PF0E") /* if fastpath into same appl*/
      PFWREC.PFWERRF = "Y"; /* set error flag for message 10 above*/
    end

    if (PF0EM002.PF0EMTYP is modified)
      set PF0EM002.PF0EMTYP cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM002.PF0EMACT is modified)
      set PF0EM002.PF0EMACT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM002.PF0EMFMT is modified)
      set PF0EM002.PF0EMFMT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0EM002.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0EM002.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PF0EW01.PF0EWEO2 = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

   /* -----------------------------------------------------------;*/
      /* Check for PA and PF key entries                        ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is enter)
      /* no action*/
  else

    PF0E810(); /* check pfkeys*/

    if (PFWREC.PFWERRF == "Y" /* if error returned from check*/
     || PFWREC.PFWEOAF == "Y" /* or end of application*/
     || PF0EW01.PF0EWTYP == 0) /* or fmt TYPE is now 0*/
      PF0EW01.PF0EWEO2 = "Y"; /* signal end of format*/
      PFWREC.PFWERRF = "Y";
      return; /* exit this routine*/
    end
  end

   /* ----------------------------------------------------------;*/
    /* Warn user if read next pfkey is pushed and changes were ;*/
    /* made to the lower part of the screen.                   ;*/
   /* ----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19   
   && PF0EM002.PF0EMACT == "C"       
   && PF0EM002 is modified           /* part of screen is modified*/
   && PF0EM002.PF0EMFMT not modified /* but not fmt/act/typ*/
   && PF0EM002.PF0EMACT not modified 
   && PF0EM002.PF0EMTYP not modified)
    PF0EW01.PF0EWDT[1] = PF0EM002.PF0EMDT[1];
                                   /* save data/time values*/
    PF0EW01.PF0EWDT[2] = PF0EM002.PF0EMDT[2];
    PF0EW01.PF0EWDT[3] = PF0EM002.PF0EMDT[3];
    PF0EW01.PF0EWCU[1] = PF0EM002.PF0EMCU[1];
    PF0EW01.PF0EWCL[1] = PF0EM002.PF0EMCL[1];
    PF0EW01.PF0EWCU[2] = PF0EM002.PF0EMCU[2];
    PF0EW01.PF0EWCL[2] = PF0EM002.PF0EMCL[2];
    converseLib.validationFailed(135); /* press enter to update, prior to pushing pf19*/
    PFWREC.PFWERRF = "Y";
    return;
  end
end // end PF0E220

// fmt 2 change routine
Function PF0E230()
   /* -----------------------------------------------------------;*/
      /* Change routine for format 2                            ;*/
   /* -----------------------------------------------------------;*/

  PF0EW01.PF0EWDT[1] = PF0EM002.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM002.PF0EMDT[2];
  PF0EW01.PF0EWDT[3] = PF0EM002.PF0EMDT[3];
  PF0EW01.PF0EWCU[1] = PF0EM002.PF0EMCU[1];
  PF0EW01.PF0EWCL[1] = PF0EM002.PF0EMCL[1];
  PF0EW01.PF0EWCU[2] = PF0EM002.PF0EMCU[2];
  PF0EW01.PF0EWCL[2] = PF0EM002.PF0EMCL[2];

  PF0E282(); /* fmt 2 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end

  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (apply changes)*/

    PF0E940(); /* table update*/

    set PF0EM002.PF0EMFMT cursor;
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM002.PF0EMFMT cursor, bold;
      converseLib.validationFailed(33); /* format # not on file, cannot change*/
      PFWREC.PFWERRF = "Y";
    end
  end
end // end PF0E230

// fmt 2 add routine
Function PF0E240()
   /* -----------------------------------------------------------;*/
      /* Add routine for format 2                               ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
   /* Trap possible errors: adding fmt ref 0 or blank;          ;*/
        /* adding fmt 1,3,4 or 5 from type 2 screen.            ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EM002.PF0EMFMT == 0)
    converseLib.validationFailed(45); /* format ref # not valid; try again*/
    PFWREC.PFWERRF = "Y";
    return;
  else
    if (PF0EM002.PF0EMTYP == 2)
       /* this is okay*/
    else
      if (PF0EM002.PF0EMTYP == 1)
        converseLib.validationFailed(80); /* cannot add type 1 from this screen*/
      else
        if (PF0EM002.PF0EMTYP == 3)
          converseLib.validationFailed(82); /* cannot add type 3 from this screen*/
        else
          if (PF0EM002.PF0EMTYP == 4)
            converseLib.validationFailed(83); /* cannot add type 4 from this screen*/
          else
            if (PF0EM002.PF0EMTYP == 5)
              converseLib.validationFailed(84); /* cannot add type 5 from this screen*/
            end
          end
        end
      end
      set PF0EM002.PF0EMTYP cursor, bold;
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  PF0EW01.PF0EWDT[1] = PF0EM002.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM002.PF0EMDT[2];
  PF0EW01.PF0EWDT[3] = PF0EM002.PF0EMDT[3];
  PF0EW01.PF0EWCU[1] = PF0EM002.PF0EMCU[1];
  PF0EW01.PF0EWCL[1] = PF0EM002.PF0EMCL[1];
  PF0EW01.PF0EWCU[2] = PF0EM002.PF0EMCU[2];
  PF0EW01.PF0EWCL[2] = PF0EM002.PF0EMCL[2];


  PFWREC.PFWIDX = 3;
  while (PFWREC.PFWIDX >= 1) /* repeat 3 times, descending*/
    if (PF0EM002.PF0EMDT[PFWIDX] not modified /* if data/time not entered*/
     && PF0EM002.PF0EMDT[PFWIDX] == " ")     
      set PF0EM002.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(25); /* enter data type/time period for action 'a'*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E282(); /* fmt 2 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (the real thing)*/

    set PFCREC empty; /* clear record*/
    PF0E930(); /* table add*/

    if (SQLCA.VAGen_SQLCODE == +100)
      set PF0EM002.PF0EMFMT cursor, bold;
      converseLib.validationFailed(12); /* format reference # already exists*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    end
  end
end // end PF0E240

// fmt 2 clear data fields
Function PF0E250()
   /* ----------------------------------------------------------;*/
      /* Clear residual data from working fields & scrn        ;*/
   /* ----------------------------------------------------------;*/

  PF0EW01.PF0EWTRN = " ";

  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
    PF0EW01.PF0EWDT[PFWIDX] = " ";
    PF0EW01.PF0EWSH[PFWIDX] = " ";
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

  PF0EW01.PF0EWLH[1] = " ";
  PF0EW01.PF0EWLH[2] = " ";
  PF0EW01.PF0EWLH[3] = " ";

  PF0EW01.PF0EWCU[1] = 0;
  PF0EW01.PF0EWCL[1] = 0;
  PF0EW01.PF0EWCU[2] = 0;
  PF0EW01.PF0EWCL[2] = 0;
  PF0EW01.PF0EWCU[3] = 0;
  PF0EW01.PF0EWCL[3] = 0;
  PF0EW01.PF0EWCU[4] = 0;
  PF0EW01.PF0EWCL[4] = 0;

   /* screen fields*/

  PF0EM002.PF0EMDT[1] = " ";
  PF0EM002.PF0EMDT[2] = " ";
  PF0EM002.PF0EMDT[3] = " ";
  PF0EM002.PF0EMLH = " ";
  PF0EM002.PF0EMSH[1] = " ";
  PF0EM002.PF0EMSH[2] = " ";

  PF0EM002.PF0EMCU[1] = 0;
  PF0EM002.PF0EMCL[1] = 0;
  PF0EM002.PF0EMCU[2] = 0;
  PF0EM002.PF0EMCL[2] = 0;
  PF0EM002.PF0EMDU[1] = " ";
  PF0EM002.PF0EMDL[1] = " ";
  PF0EM002.PF0EMDU[2] = " ";
  PF0EM002.PF0EMDL[2] = " ";
end // end PF0E250

// fmt 2 edit fmt/act/typ
Function PF0E260()
   /* ----------------------------------------------------------;*/
     /* Edit ACTION and TYPE fields:                           ;*/
       /* TYPE must be in range 0 - 5.                         ;*/
       /* TYPE allowed only with ACTION 'A'.                   ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM002.PF0EMACT == "A") /* if action 'a'*/
    if (PF0EM002.PF0EMTYP == 0) /* if no type entered*/
      set PF0EM002.PF0EMTYP cursor, bold; /* require type*/
      converseLib.validationFailed(6); /* must enter fmt typ w/ action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    else /* else type entered*/
      if (PF0EM002.PF0EMTYP == 1 /* if in table*/
       || PF0EM002.PF0EMTYP == 2 
       || PF0EM002.PF0EMTYP == 3 
       || PF0EM002.PF0EMTYP == 4 
       || PF0EM002.PF0EMTYP == 5)
         /* okay                                      okay*/
      else /* else not valid*/
        set PF0EM002.PF0EMTYP cursor, bold;
        converseLib.validationFailed(4); /* format type must ve 1, 2, 3, 4, or 5*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
      end
    end
  else /* else action not 'a'*/
    if (PF0EM002.PF0EMTYP == 0 /* if no type entered*/
     || PF0EM002.PF0EMTYP not modified)
       /* okay                                     okay*/
    else /* else type entered*/
      set PF0EM002.PF0EMTYP cursor, bold; /* reject type entry*/
      converseLib.validationFailed(8); /* format type allowed only with action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    end
  end

   /* ----------------------------------------------------------;*/
     /* Allow action add, inq, chg, or del                     ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM002.PF0EMACT == "I" /* if action = i,' ',a,c,or d*/
   || PF0EM002.PF0EMACT == " " 
   || PF0EM002.PF0EMACT == "A" 
   || PF0EM002.PF0EMACT == "C" 
   || PF0EM002.PF0EMACT == "D")
      /* this is okay*/
  else /* otherwise signal error*/
    set PF0EM002.PF0EMACT cursor, bold;
    converseLib.validationFailed(5); /* action must be i, a, c, or d*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end

   /* ----------------------------------------------------------;*/
     /* Check action against security flags in commarea.       ;*/
   /* ----------------------------------------------------------;*/

  PFWREC.PFWEXT = "N"; /* initialize security error flag*/

  PF0E820(); /* action security checking*/

  if (PFWREC.PFWEXT == "Y") /* if security error flag is 'y'*/
    set PF0EM002.PF0EMACT cursor, bold;
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0EM002.PF0EMFMT == 0) /* if fmt not entered*/
    set PF0EM002.PF0EMFMT cursor, bold;
    converseLib.validationFailed(7); /* FMT ref # required*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0E260

// fmt 2 db read & security check
Function PF0E270()
   /* ----------------------------------------------------------;*/
     /* read database for format number                        ;*/
     /* if format found                                        ;*/
       /* move format to working storage                       ;*/
                                                            /* ;*/
     /* if action is add                                       ;*/
       /* format number should not exist                       ;*/
     /* if action is delete                                    ;*/
       /* format number should exist                           ;*/
     /* if action is inquiry or change                         ;*/
       /* format number should exist                           ;*/
   /* ----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19) /* if read next (inquiry and change*/
                                   /* only)*/

    PF0E920(); /* table select next*/

  else /* else enter key pushed (all actions)*/

    PF0E910(); /* table select unique*/

  end

  if (SQLCA.VAGen_SQLCODE == +0) /* if db select successful*/
    PF0EW01.PF0EWFMT = PFCREC.PFCREF; /* move table key*/
    PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR;
    PF0EW01.PF0EWTRN = PFCREC.YFTCD;
    PFWREC.PFWIDX = 1;
    while (PFWREC.PFWIDX <= 13) /* move all time periods and data types*/
      PF0EW01.PF0EWTIM[PFWIDX] = PFCREC.YTPCD[PFWIDX];
      PF0EW01.PF0EWDAT[PFWIDX] = PFCREC.YPDCD[PFWIDX];
      PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
    end
    PF0EW01.PF0EWCU[1] = PFCREC.PFCPCTC[1];
    PF0EW01.PF0EWCL[1] = PFCREC.PFCPCTC[2];
    PF0EW01.PF0EWCU[2] = PFCREC.PFCPCTC[3];
    PF0EW01.PF0EWCL[2] = PFCREC.PFCPCTC[4];
    PF0EW01.PF0EWCU[3] = PFCREC.PFCPCTC[5];
    PF0EW01.PF0EWCL[3] = PFCREC.PFCPCTC[6];
    PF0EW01.PF0EWCU[4] = PFCREC.PFCPCTC[7];
    PF0EW01.PF0EWCL[4] = PFCREC.PFCPCTC[8];
  end

  if (PF0EW01.PF0EWTYP != 2) /* if the existing format is not type 2*/
    PF0EW01.PF0EWEO2 = "Y"; /* signal end of type 2 process*/
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
  end

  if (PF0EM002.PF0EMACT == "A") /* if action is 'add'*/
    if (SQLCA.VAGen_SQLCODE == +0) /* if fmt ref # already in table*/
      PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR; /* display existing type*/
      set PF0EM002.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(12); /* format design already exists*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM002.PF0EMACT == "D") /* if action is 'delete'*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if fmt ref # not in table*/
      set PF0EM002.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM002.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM002.PF0EMACT == "I" /* or action is 'inquiry'*/
   || PF0EM002.PF0EMACT == " ") /* of action is default (inquiry)*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      if (converseVar.eventKey is enter) /* if enter key pushed*/
        set PF0EM002.PF0EMFMT cursor, bold; /* signal error*/
        converseLib.validationFailed(9); /* invalid FMT ref #*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* sqlcode eq 100, and ezeaid is enter or pf19*/
    end
  end


   /* ----------------------------------------------------------;*/
    /* For deletes, check if format is in a predefined summary.;*/
    /* For changes and deletes, check if format is in a summary;*/
    /* on the database.                                        ;*/
   /* ----------------------------------------------------------;*/

   /* IF PF0EM002.PF0EMACT EQ 'D'     ;   if action is 'delete'*/
    /* AND PF0EM002.PF0EMFMT IN PF0GT.PFCREF; and predefined*/
    /* SET PF0EM002.PF0EMFMT CURSOR,BRIGHT;*/
    /* MOVE 137 TO EZEMNO  ; cannot delete, ref# is part of a pre*/
    /* MOVE 'Y' TO PFWREC.PFWEDTF    ; set edit fmt/act/typ flag*/
    /* MOVE 'Y' TO PFWREC.PFWERRF;*/
    /* EZERTN;*/
   /* END ;*/

  if (PF0EM002.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM002.PF0EMACT == "D") /* or action is 'delete'*/
    PF0E990(); /* summary select existance*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if no summaries found*/
       /* this is okay*/
    else
                                   /* else - exists in summary or page busy*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if exists in one summary*/
       || SQLCA.VAGen_SQLCODE == -811) /* or exists in multiple summaries*/
        set PF0EM002.PF0EMFMT cursor, bold; /* indicate the error*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* exists in a summary, or -911 - page busy*/
    end
  end

   /* ----------------------------------------------------------;*/
    /* Check if user has security to change or delete this     ;*/
    /* particular format record.  The pfcrec.xxxusrid is       ;*/
    /* only updated when a format record is added.  This       ;*/
    /* establishes ownership.                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "C")
    if (COMMAREA.CACHGFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CACLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM002.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
  if (PF0EW01.PF0EWACT == "D")
    if (COMMAREA.CADELFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CADLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM002.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
end // end PF0E270

// fmt 2 data entry check
Function PF0E281()
   /* -----------------------------------------------------------;*/
      /* Check all fields in the body of the screen for entries ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 2;
  while (PFWREC.PFWIDX >= 1) /* execute 2 times, descending*/
    if (PF0EM002.PF0EMCL[PFWIDX] is modified) /* if any columns entered*/
      set PF0EM002.PF0EMCL[PFWIDX] cursor, bold; /* signal error*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM002.PF0EMCU[PFWIDX] is modified)
      set PF0EM002.PF0EMCU[PFWIDX] cursor, bold;
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end

  PFWREC.PFWIDX = 3;
  while (PFWREC.PFWIDX >= 1) /* execute 3 times, descending*/
    if (PF0EM002.PF0EMDT[PFWIDX] is modified) /* if any d/t entered*/
      set PF0EM002.PF0EMDT[PFWIDX] cursor, bold; /* signal error*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end
end // end PF0E281

// fmt 2 validity check
Function PF0E282()
   /* -----------------------------------------------------------;*/
    /* Check validity of COL numbers entered.                   ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 2;
  while (PFWREC.PFWIDX >= 1) /* repeat this 2 times, descending*/
    if (PF0EW01.PF0EWCU[PFWIDX] == 0
     && PF0EW01.PF0EWCL[PFWIDX] == 0)
       /* this is okay*/
    else /* reject upper column = lower column*/
      if (PF0EW01.PF0EWCU[PFWIDX] == PF0EW01.PF0EWCL[PFWIDX])
        set PF0EM002.PF0EMCU[PFWIDX] cursor, bold;
        set PF0EM002.PF0EMCL[PFWIDX] cursor, bold;
        converseLib.validationFailed(30); /* cannot divide by the same column #,*/
        PFWREC.PFWERRF = "Y"; /* unless both column #'s are zero*/
      end
    end
    if (PF0EW01.PF0EWCU[PFWIDX] == 0
     && PF0EW01.PF0EWCL[PFWIDX] != 0)
      set PF0EM002.PF0EMCU[PFWIDX] cursor, bold;
      set PF0EM002.PF0EMCL[PFWIDX] cursor, bold;
      converseLib.validationFailed(258); /* when upper col# is 0, lower col# must*/
                                   /* also be 0*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWCL[PFWIDX] == 0
     && PF0EW01.PF0EWCU[PFWIDX] != 0)
      set PF0EM002.PF0EMCL[PFWIDX] cursor, bold;
      set PF0EM002.PF0EMCU[PFWIDX] cursor, bold;
      converseLib.validationFailed(259); /* when lower col# is 0, upper col# must*/
                                   /* also be 0*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWCL[PFWIDX] == 0 /* verify lower column*/
     || PF0EW01.PF0EWCL[PFWIDX] == 1 
     || PF0EW01.PF0EWCL[PFWIDX] == 5 
     || PF0EW01.PF0EWCL[PFWIDX] == 7 
     || PF0EW01.PF0EWCL[PFWIDX] == 9)
       /* this is okay*/
    else
      set PF0EM002.PF0EMCL[PFWIDX] cursor, bold;
      converseLib.validationFailed(28); /* col # must be 0, 1, 5, 7, or 9 for fmt type 2*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWCU[PFWIDX] == 0 /* verfiy upper column*/
     || PF0EW01.PF0EWCU[PFWIDX] == 1 
     || PF0EW01.PF0EWCU[PFWIDX] == 5 
     || PF0EW01.PF0EWCU[PFWIDX] == 7 
     || PF0EW01.PF0EWCU[PFWIDX] == 9)
       /* this is okay*/
    else
      set PF0EM002.PF0EMCU[PFWIDX] cursor, bold;
      converseLib.validationFailed(28); /* col # must be 0, 1, 5, 7, or 9 for fmt type 2*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end


   /* -----------------------------------------------------------;*/
   /* Repeat this once for each DATA/TIME field on screen.      ;*/
      /* Search table YTPTBL for TIME PERIOD (MTD, JAN, etc.)   ;*/
      /* Search table YPDTBL for DATA TYPE (CA,OB,PA,OF, etc.)  ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 3;
  while (PFWREC.PFWIDX >= 1) /* repeat this 3 times, descending*/
    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD) /* if found in table*/
      if (PF0EW01.PF0EWTIM[PFWIDX] != "CTL")
         /* this is okay*/
      else
        set PF0EM002.PF0EMDT[PFWIDX] cursor, bold;
        converseLib.validationFailed(245); /* 'ctl' not valid time period for this fmt type*/
        PFWREC.PFWERRF = "Y";
      end
    else
      set PF0EM002.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(17); /* invalid time period*/
      PFWREC.PFWERRF = "Y";
    end

    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD) /* if found in table*/
      if (PF0EW01.PF0EWDAT[PFWIDX] != "NA")
         /* this is okay*/
      else
        set PF0EM002.PF0EMDT[PFWIDX] cursor, bold;
        converseLib.validationFailed(246); /* 'na' not valid data type for this fmt type*/
        PFWREC.PFWERRF = "Y";
      end
    else
      set PF0EM002.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(16); /* invalid data type*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end
end // end PF0E282

// fmt 3 converse screen
Function PF0E300()
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
                                                            /* ;*/
      /* Format 3 Converse Screen                              ;*/
                                                            /* ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  PF0EM003.XXXPRCNM = "PF0E300";


  PF0E310(); /* fmt 3 fill screen*/


   /* -----------------------------------------------------------;*/
    /* For deletes, after the user enters 'd' the screen is     ;*/
    /* first re-displayed with a confirm delete message and     ;*/
    /* the 'd' action code is blanked out.  The user must       ;*/
    /* re-enter 'd' to proceed with the delete.  If this is     ;*/
    /* is done, a deletion completed message is given on the    ;*/
    /* second re-display of the screen.  The flag               ;*/
    /* PF0EW01.PF0EWDCF indicates if the delete confirmation    ;*/
    /* message has been issued.  It is yes on the second        ;*/
    /* re-display of the screen.                                ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "D") /* special messages for action delete*/
    if (converseVar.validationMsgNum != 0) /* if an error occured*/
       /* keep this message*/
    else
      PF0EW01.PF0EWDCF = "Y"; /* set delete confirm msg issued flag*/
      PF0EM003.PF0EMACT = " "; /* user must reenter 'd' action code*/
      set PF0EM003.PF0EMACT cursor, bold;
      converseLib.validationFailed(122); /* delete requested. re-enter 'd' to confirm.*/
    end
  end

  if (PF1REC.PF1XFERF == "Y") /* if bridging via PF keys*/
    set PF0EM003.PF0EMACT skip; /* protect action field*/
  end

  if (PFWREC.PFWMSG != " ")
    PF0EM003.VAGen_EZEMSG = PFWREC.PFWMSG;
  end

  converse PF0EM003 ;

  PFWREC.PFWMSG = " "; /* clear msg line*/
  PF0EM003.VAGen_EZEMSG = " "; /* clear msg line*/
  PFWREC.PFWERRF = "N"; /* reset error flag*/

  PF0EW01.PF0EWFMT = PF0EM003.PF0EMFMT; /* save FMT value*/
  PF0EW01.PF0EWACT = PF0EM003.PF0EMACT; /* save ACT value*/
  PF0EW01.PF0EWTYP = PF0EM003.PF0EMTYP; /* save TYP value*/


  PF0E320(); /* fmt 3 fastpath, pf & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* ----------------------------------------------------------;*/
    /* Do not allow changes to the DATA/TIME fields if FMT,    ;*/
    /* ACT or TYP is modified                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EM003.PF0EMFMT is modified
   || PF0EM003.PF0EMACT is modified
   || PF0EM003.PF0EMTYP is modified)

    PF0E381(); /* fmt 3 data entry check*/

    if (PFWREC.PFWERRF == "Y")
      converseLib.validationFailed(11); /* do not enter data when changing ref/act/typ*/
      return;
    end
  end

   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
     /* Processing can now go in one of two ways: (1) If       ;*/
     /* changes were made to the body of the screen            ;*/
     /* the new information is put in the table and we exit    ;*/
     /* this process for good (flag PF0EWEO3 = 'y').           ;*/
     /* (2) If a flag indicates there was an error from the    ;*/
     /* last converse in the fields at the top of the screen   ;*/
     /* (REF/ACT/TYP), we re-edit these fields.  Or,           ;*/
     /* if changes were made at the top of the screen (to      ;*/
     /* REF/ACT/TYP), these changes are saved and checked for  ;*/
     /* validity.  If the format is still '3', we loop back    ;*/
     /* to reconverse screen PF0EM003 for the new request.     ;*/
     /* If the format is not '3', we exit this process for     ;*/
     /* good (flag PF0EWEO3 = 'y'), and return to PF0E100      ;*/
     /* where another process will be picked up.               ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM003.PF0EMACT == "D" /* if action is delete*/
   && PF0EW01.PF0EWDCF == "Y"  /* delete confirm msg issued flag is y*/
   && PF0EM003.PF0EMFMT not modified
   && PFWREC.PFWEDTF == "N")   /* edit fmt/act/typ flag is 'no'*/

    PF0E950(); /* table delete*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM003.PF0EMFMT cursor, bold;
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete.*/
      PFWREC.PFWERRF = "Y";
    end

    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
    PFWREC.PFWEDTF = "Y"; /* reset edit fmt/act/typ flag*/
    return;
  end
  PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/


  if (PFWREC.PFWEDTF == "Y"         /* if edit fmt/act/typ flag is 'no'*/
   || PF0EM003.PF0EMFMT is modified /* or FMT/ACT/TYP fields entered*/
   || PF0EM003.PF0EMACT is modified 
   || PF0EM003.PF0EMTYP is modified 
   || converseVar.eventKey is pf19) /* or read next pfkey pushed*/
     /* fall through*/
  else /* else chgs to body or no chg*/
    if (PF0EM003.PF0EMACT == "C")

      PF0E330(); /* fmt 3 change routine*/

    else
      if (PF0EM003.PF0EMACT == "A")

        PF0E340(); /* fmt 3 add routine*/

        if (PFWREC.PFWERRF == "N" /* if add was successful*/
         && converseVar.eventKey not pf12)
                                   /* and not just an edit check*/
          PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag*/
        end
      end
    end
    return;
  end


   /* ----------------------------------------------------------;*/
   /* Initialize the edit fmt/act/typ flag to 'n'.  If there   ;*/
   /* is an error in the fmt/act/typ fields the flag is set    ;*/
   /* to 'y' to force re-editing of these fields after the     ;*/
   /* message is displayed on the next converse.               ;*/
   /* ----------------------------------------------------------;*/
  PFWREC.PFWEDTF = "N"; /* re-set edit fmt/act/typ flag*/


   /* ----------------------------------------------------------;*/
   /* Clear residual data from data/time flds in scrn & pf0ew01;*/
   /* ----------------------------------------------------------;*/
  if (PF0EM003.PF0EMACT == "A" /* if action is add*/
   && PF0EM003.PF0EMTYP not modified) /* and type has not changed*/
     /* do nothing - cloning an existing format*/
  else

    PF0E350(); /* fmt 3 clear data fields*/

  end


  PF0E360(); /* fmt 3 edit fmt/act/typ*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E370(); /* fmt 3 db read & security check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (PF0EW01.PF0EWTYP != "3") /* if type has changed*/
    PF0EW01.PF0EWEO3 = "Y"; /* signal end of type 3 processing*/
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
  end
end // end PF0E300

// fmt 3 fill screen
Function PF0E310()
   /* -----------------------------------------------------------;*/
   /* Move FMT number, ACTION and TYPE   number to screen.      ;*/
   /* -----------------------------------------------------------;*/
  PF0EM003.PF0EMFMT = PF0EW01.PF0EWFMT;
  PF0EM003.PF0EMACT = PF0EW01.PF0EWACT;
  PF0EM003.PF0EMTYP = PF0EW01.PF0EWTYP;


   /* -----------------------------------------------------------;*/
   /* Move in tran type description from table YFTTBL           ;*/
   /* -----------------------------------------------------------;*/
  PF0EM003.PF0EMTT = PF0EW01.PF0EWTRN;
  if (PF0EW01.PF0EWTRN in YFTTBL.YFTCD) /* if tran type in table*/
    PF0EM003.PF0EMTTH = YFTTBL.YFTDESC[sysVar.arrayIndex];
                                   /* use 30 char heading*/
  else
    PF0EM003.PF0EMTTH = " ";
  end

   /* -----------------------------------------------------------;*/
   /* Set up screen fields related to the 5 DATA/TIME fields    ;*/
   /* -----------------------------------------------------------;*/
      /* Search table ytptbl for time period (mtd, jan, etc.)   ;*/
      /* Search table ypdtbl for data type (ca,ob,pa,of, etc.)  ;*/
      /* Save short length descriptions for screen.             ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 5) /* repeat this 5 times*/
    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD) /* time period*/
      PF0EW01.PF0EWTSH[PFWIDX] = PF0EW01.PF0EWTIM[PFWIDX]; /* short*/
    else
      PF0EW01.PF0EWTSH[PFWIDX] = " "; /* short time*/
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD) /* data type*/
      PF0EW01.PF0EWDSH[PFWIDX] = PF0EW01.PF0EWDAT[PFWIDX]; /* short*/
    else
      PF0EW01.PF0EWDSH[PFWIDX] = " "; /* short data*/
       /* space out times too so the won't appear incorrectly in*/
       /* the left half of the fields (due to left justification)*/
      PF0EW01.PF0EWTSH[PFWIDX] = " "; /* short time*/
    end
    PF0EM003.PF0EMDT[PFWIDX] = PF0EW01.PF0EWDT[PFWIDX]; /* 5 bytes*/
    PF0EM003.PF0EMSH[PFWIDX] = PF0EW01.PF0EWSH[PFWIDX]; /* 6 bytes*/
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end


  PF0EM003.PF0EMCU[1] = PF0EW01.PF0EWCU[1]; /* upper col #*/
  PF0EM003.PF0EMCL[1] = PF0EW01.PF0EWCL[1]; /* lower col #*/
  PF0EM003.PF0EMCU[2] = PF0EW01.PF0EWCU[2]; /* upper col #*/
  PF0EM003.PF0EMCL[2] = PF0EW01.PF0EWCL[2]; /* lower col #*/

   /* -----------------------------------------------------------;*/
      /* Move in short headings for "as % of" columns at right  ;*/
      /* of screen.                                             ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 2)
    if (PF0EM003.PF0EMCU[PFWIDX] == 0) /* upper (numerator)*/
      PF0EM003.PF0EMDU[PFWIDX] = " ";
    else
      if (PF0EM003.PF0EMCU[PFWIDX] == 1)
        PF0EM003.PF0EMDU[PFWIDX] = PF0EW01.PF0EWSH[1];
      else
        if (PF0EM003.PF0EMCU[PFWIDX] == 3)
          PF0EM003.PF0EMDU[PFWIDX] = PF0EW01.PF0EWSH[2];
        else
          if (PF0EM003.PF0EMCU[PFWIDX] == 5)
            PF0EM003.PF0EMDU[PFWIDX] = PF0EW01.PF0EWSH[3];
          else
            if (PF0EM003.PF0EMCU[PFWIDX] == 7)
              PF0EM003.PF0EMDU[PFWIDX] = PF0EW01.PF0EWSH[4];
            else
              if (PF0EM003.PF0EMCU[PFWIDX] == 9)
                PF0EM003.PF0EMDU[PFWIDX] = PF0EW01.PF0EWSH[5];
              else
                PF0EM003.PF0EMDU[PFWIDX] = " ";
              end
            end
          end
        end
      end
    end

    if (PF0EM003.PF0EMCL[PFWIDX] == 0) /* lower (denominator)*/
      PF0EM003.PF0EMDL[PFWIDX] = " ";
    else
      if (PF0EM003.PF0EMCL[PFWIDX] == 1)
        PF0EM003.PF0EMDL[PFWIDX] = PF0EW01.PF0EWSH[1];
      else
        if (PF0EM003.PF0EMCL[PFWIDX] == 3)
          PF0EM003.PF0EMDL[PFWIDX] = PF0EW01.PF0EWSH[2];
        else
          if (PF0EM003.PF0EMCL[PFWIDX] == 5)
            PF0EM003.PF0EMDL[PFWIDX] = PF0EW01.PF0EWSH[3];
          else
            if (PF0EM003.PF0EMCL[PFWIDX] == 7)
              PF0EM003.PF0EMDL[PFWIDX] = PF0EW01.PF0EWSH[4];
            else
              if (PF0EM003.PF0EMCL[PFWIDX] == 9)
                PF0EM003.PF0EMDL[PFWIDX] = PF0EW01.PF0EWSH[5];
              else
                PF0EM003.PF0EMDL[PFWIDX] = " ";
              end
            end
          end
        end
      end
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

   /* -----------------------------------------------------------;*/
    /* Protect DATA/TIME  and COL fields if action 'I' or 'D'.  ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "I"
   || PF0EW01.PF0EWACT == " "
   || PF0EW01.PF0EWACT == "D")
    set PF0EM003.PF0EMTT protect;
    set PF0EM003.PF0EMDT[1] protect;
    set PF0EM003.PF0EMDT[2] protect;
    set PF0EM003.PF0EMDT[3] protect;
    set PF0EM003.PF0EMDT[4] protect;
    set PF0EM003.PF0EMDT[5] protect;
    set PF0EM003.PF0EMCU[1] protect;
    set PF0EM003.PF0EMCL[1] protect;
    set PF0EM003.PF0EMCU[2] protect;
    set PF0EM003.PF0EMCL[2] protect;
  end
end // end PF0E310

// fmt 3 fastpath, pf & pa keys
Function PF0E320()
  set PF0EM003.PF0EMFMT cursor, initialAttributes; /* reset color and cursor*/
  set PF0EM003.PF0EMACT initialAttributes; /* reset color*/
  set PF0EM003.PF0EMTYP initialAttributes; /* reset color*/
  set PF0EM003.PF0EMTT initialAttributes; /* reset color*/
  set PF0EM003.PF0EMDT[1] initialAttributes; /* reset color*/
  set PF0EM003.PF0EMDT[2] initialAttributes; /* reset color*/
  set PF0EM003.PF0EMDT[3] initialAttributes; /* reset color*/
  set PF0EM003.PF0EMDT[4] initialAttributes; /* reset color*/
  set PF0EM003.PF0EMDT[5] initialAttributes; /* reset color*/
  set PF0EM003.PF0EMCU[1] initialAttributes; /* reset color*/
  set PF0EM003.PF0EMCU[2] initialAttributes; /* reset color*/
  set PF0EM003.PF0EMCL[1] initialAttributes; /* reset color*/
  set PF0EM003.PF0EMCL[2] initialAttributes; /* reset color*/
  set PF0EM003.CATOAP initialAttributes; /* reset color*/
  set PF0EM003.CAITEM initialAttributes; /* reset color*/

   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on the;*/
     /* screen.  If other data has been entered, put cursor     ;*/
     /* on the bad field and send an error message.             ;*/
     /* Do not allow fastpath back into same application.       ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EM003.CATOAP != " " /* if fastpath*/
   || PF0EM003.CAITEM != " ")
    if (PF0EM003.CATOAP == "PF0E") /* if fastpath into same appl*/
      set PF0EM003.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
       /* wait to set PFWERRF until after the following process*/
    end

    PF0E381(); /* fmt 3 data entry check*/

    if (PFWREC.PFWERRF == "Y")
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
    end
    if (PF0EM003.CATOAP == "PF0E") /* if fastpath into same appl*/
      PFWREC.PFWERRF = "Y"; /* set error flag for message 10 above*/
    end

    if (PF0EM003.PF0EMTYP is modified)
      set PF0EM003.PF0EMTYP cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM003.PF0EMACT is modified)
      set PF0EM003.PF0EMACT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM003.PF0EMFMT is modified)
      set PF0EM003.PF0EMFMT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0EM003.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0EM003.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PF0EW01.PF0EWEO3 = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

   /* -----------------------------------------------------------;*/
      /* Check for PF and PA key entries.                       ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is enter)
      /* no action*/
  else

    PF0E810(); /* check pfkeys*/

    if (PFWREC.PFWERRF == "Y" /* if error returned from check*/
     || PFWREC.PFWEOAF == "Y" /* or end of application*/
     || PF0EW01.PF0EWTYP == 0) /* or fmt type is now 0*/
      PF0EW01.PF0EWEO3 = "Y"; /* signal end of type 3 process*/
      PFWREC.PFWERRF = "Y";
      return; /* exit this routine*/
    end
  end

   /* -----------------------------------------------------------;*/
    /* Warn user if read next pfkey is pressed and changes      ;*/
    /* were made to the lower part of the screeen.              ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is pf19   
   && PF0EM003.PF0EMACT == "C"       
   && PF0EM003 is modified           /* part of screen is modified*/
   && PF0EM003.PF0EMFMT not modified /* but not fmt/act/typ*/
   && PF0EM003.PF0EMACT not modified 
   && PF0EM003.PF0EMTYP not modified)
    PF0EW01.PF0EWDT[1] = PF0EM003.PF0EMDT[1];
                                   /* save data/time values*/
    PF0EW01.PF0EWDT[2] = PF0EM003.PF0EMDT[2];
    PF0EW01.PF0EWDT[3] = PF0EM003.PF0EMDT[3];
    PF0EW01.PF0EWDT[4] = PF0EM003.PF0EMDT[4];
    PF0EW01.PF0EWDT[5] = PF0EM003.PF0EMDT[5];
    PF0EW01.PF0EWCU[1] = PF0EM003.PF0EMCU[1];
    PF0EW01.PF0EWCL[1] = PF0EM003.PF0EMCL[1];
    PF0EW01.PF0EWCU[2] = PF0EM003.PF0EMCU[2];
    PF0EW01.PF0EWCL[2] = PF0EM003.PF0EMCL[2];
    PF0EW01.PF0EWTRN = PF0EM003.PF0EMTT;
    converseLib.validationFailed(135); /* press enter to update, prior to pushing pf19*/
    PFWREC.PFWERRF = "Y";
    return;
  end
end // end PF0E320

// fmt 3 change routine
Function PF0E330()
   /* -----------------------------------------------------------;*/
      /* Change routine for format 3                            ;*/
   /* -----------------------------------------------------------;*/

  PF0EW01.PF0EWDT[1] = PF0EM003.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM003.PF0EMDT[2];
  PF0EW01.PF0EWDT[3] = PF0EM003.PF0EMDT[3];
  PF0EW01.PF0EWDT[4] = PF0EM003.PF0EMDT[4];
  PF0EW01.PF0EWDT[5] = PF0EM003.PF0EMDT[5];
  PF0EW01.PF0EWCU[1] = PF0EM003.PF0EMCU[1];
  PF0EW01.PF0EWCL[1] = PF0EM003.PF0EMCL[1];
  PF0EW01.PF0EWCU[2] = PF0EM003.PF0EMCU[2];
  PF0EW01.PF0EWCL[2] = PF0EM003.PF0EMCL[2];

  PF0EW01.PF0EWTRN = PF0EM003.PF0EMTT; /* save tran type*/

  PF0E382(); /* fmt 3 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (apply changes)*/

    PF0E940(); /* table update*/

    set PF0EM003.PF0EMFMT cursor;
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM003.PF0EMFMT cursor, bold;
      converseLib.validationFailed(33); /* format # not on file, cannot change*/
      PFWREC.PFWERRF = "Y";
    end
  end
end // end PF0E330

// fmt 3 add routine
Function PF0E340()
   /* -----------------------------------------------------------;*/
      /* Add routine for format 3                               ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
   /* Trap possible errors: adding fmt ref 0 or blank;          ;*/
        /* adding fmt 1,2,4 or 5 from type 3 screen.            ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EM003.PF0EMFMT == 0)
    converseLib.validationFailed(45); /* format ref # not valid; try again*/
    PFWREC.PFWERRF = "Y";
    return;
  else
    if (PF0EM003.PF0EMTYP == 3)
       /* this is okay*/
    else
      if (PF0EM003.PF0EMTYP == 1)
        converseLib.validationFailed(80); /* cannot add type 1 from this screen*/
      else
        if (PF0EM003.PF0EMTYP == 2)
          converseLib.validationFailed(81); /* cannot add type 2 from this screen*/
        else
          if (PF0EM003.PF0EMTYP == 4)
            converseLib.validationFailed(83); /* cannot add type 4 from this screen*/
          else
            if (PF0EM003.PF0EMTYP == 5)
              converseLib.validationFailed(84); /* cannot add type 5 from this screen*/
            end
          end
        end
      end
      set PF0EM003.PF0EMTYP cursor, bold;
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  PF0EW01.PF0EWDT[1] = PF0EM003.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM003.PF0EMDT[2];
  PF0EW01.PF0EWDT[3] = PF0EM003.PF0EMDT[3];
  PF0EW01.PF0EWDT[4] = PF0EM003.PF0EMDT[4];
  PF0EW01.PF0EWDT[5] = PF0EM003.PF0EMDT[5];

  PF0EW01.PF0EWCU[1] = PF0EM003.PF0EMCU[1];
  PF0EW01.PF0EWCL[1] = PF0EM003.PF0EMCL[1];
  PF0EW01.PF0EWCU[2] = PF0EM003.PF0EMCU[2];
  PF0EW01.PF0EWCL[2] = PF0EM003.PF0EMCL[2];

  PF0EW01.PF0EWTRN = PF0EM003.PF0EMTT; /* save tran type*/


  PFWREC.PFWIDX = 5;
  while (PFWREC.PFWIDX >= 1)
                                   /* repeat 5 times, descending*/
    if (PF0EM003.PF0EMDT[PFWIDX] not modified /* if data/time not entered*/
     && PF0EM003.PF0EMDT[PFWIDX] == " ")     
      set PF0EM003.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(25); /* enter data type/time period for action 'a'*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end


  if (PF0EM003.PF0EMTT not modified /* if tran type not entered*/
   && PF0EM003.PF0EMTT == 0)       
    set PF0EM003.PF0EMTT cursor, bold;
    converseLib.validationFailed(127); /* transaction type not entered*/
    PFWREC.PFWERRF = "Y"; /* signal error*/
  end

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E382(); /* fmt 3 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (the real thing)*/

    set PFCREC empty; /* clear record*/
    PF0E930(); /* table add*/

    if (SQLCA.VAGen_SQLCODE == +100)
      set PF0EM003.PF0EMFMT cursor, bold;
      converseLib.validationFailed(12); /* format reference # already exists*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    end
  end
end // end PF0E340

// fmt 3 clear data fields
Function PF0E350()
   /* ----------------------------------------------------------;*/
   /* Clear residual data from screen and wkg storage fields   ;*/
   /* ----------------------------------------------------------;*/

  PF0EW01.PF0EWTRN = " ";

  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
    PF0EW01.PF0EWDT[PFWIDX] = " ";
    PF0EW01.PF0EWSH[PFWIDX] = " ";
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

  PF0EW01.PF0EWLH[1] = " ";
  PF0EW01.PF0EWLH[2] = " ";
  PF0EW01.PF0EWLH[3] = " ";

  PF0EW01.PF0EWCU[1] = 0;
  PF0EW01.PF0EWCL[1] = 0;
  PF0EW01.PF0EWCU[2] = 0;
  PF0EW01.PF0EWCL[2] = 0;
  PF0EW01.PF0EWCU[3] = 0;
  PF0EW01.PF0EWCL[3] = 0;
  PF0EW01.PF0EWCU[4] = 0;
  PF0EW01.PF0EWCL[4] = 0;

   /* screen fields*/

  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 5) /* repeat this 5 times*/
    PF0EM003.PF0EMDT[PFWIDX] = " ";
    PF0EM003.PF0EMSH[PFWIDX] = " ";
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

  PF0EM003.PF0EMCU[1] = 0;
  PF0EM003.PF0EMCL[1] = 0;
  PF0EM003.PF0EMCU[2] = 0;
  PF0EM003.PF0EMCL[2] = 0;
  PF0EM003.PF0EMDU[1] = " ";
  PF0EM003.PF0EMDL[1] = " ";
  PF0EM003.PF0EMDU[2] = " ";
  PF0EM003.PF0EMDL[2] = " ";

  PF0EM003.PF0EMTT = " ";
  PF0EM003.PF0EMTTH = " ";
end // end PF0E350


// fmt 3 db read & security check
Function PF0E370()
   /* ----------------------------------------------------------;*/
     /* read database for format number                        ;*/
     /* if format found                                        ;*/
       /* move format to working storage                       ;*/
                                                            /* ;*/
     /* if action is add                                       ;*/
       /* format number should not exist                       ;*/
     /* if action is delete                                    ;*/
       /* format number should exist                           ;*/
     /* if action is inquiry or change                         ;*/
       /* format number should exist                           ;*/
   /* ----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19) /* if read next (inquiry and change*/
                                   /* only)*/

    PF0E920(); /* table select next*/

  else /* else enter key pushed (all actions)*/

    PF0E910(); /* table select unique*/

  end

  if (SQLCA.VAGen_SQLCODE == +0) /* if db select successful*/
    PF0EW01.PF0EWFMT = PFCREC.PFCREF; /* move table key*/
    PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR;
    PF0EW01.PF0EWTRN = PFCREC.YFTCD;
    PFWREC.PFWIDX = 1;
    while (PFWREC.PFWIDX <= 13) /* move all time periods and data types*/
      PF0EW01.PF0EWTIM[PFWIDX] = PFCREC.YTPCD[PFWIDX];
      PF0EW01.PF0EWDAT[PFWIDX] = PFCREC.YPDCD[PFWIDX];
      PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
    end
    PF0EW01.PF0EWCU[1] = PFCREC.PFCPCTC[1];
    PF0EW01.PF0EWCL[1] = PFCREC.PFCPCTC[2];
    PF0EW01.PF0EWCU[2] = PFCREC.PFCPCTC[3];
    PF0EW01.PF0EWCL[2] = PFCREC.PFCPCTC[4];
    PF0EW01.PF0EWCU[3] = PFCREC.PFCPCTC[5];
    PF0EW01.PF0EWCL[3] = PFCREC.PFCPCTC[6];
    PF0EW01.PF0EWCU[4] = PFCREC.PFCPCTC[7];
    PF0EW01.PF0EWCL[4] = PFCREC.PFCPCTC[8];
  end

  if (PF0EW01.PF0EWTYP != 3) /* if the existing format is not type 3*/
    PF0EW01.PF0EWEO3 = "Y"; /* signal end of type 3 process*/
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
  end

  if (PF0EM003.PF0EMACT == "A") /* if action is 'add'*/
    if (SQLCA.VAGen_SQLCODE == +0) /* if fmt ref # already in table*/
      PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR; /* display existing type*/
      set PF0EM003.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(12); /* format design already exists*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM003.PF0EMACT == "D") /* if action is 'delete'*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if fmt ref # not in table*/
      set PF0EM003.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM003.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM003.PF0EMACT == "I" /* or action is 'inquiry'*/
   || PF0EM003.PF0EMACT == " ") /* of action is default (inquiry)*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      if (converseVar.eventKey is enter) /* if enter key pushed*/
        set PF0EM003.PF0EMFMT cursor, bold; /* signal error*/
        converseLib.validationFailed(9); /* invalid FMT ref #*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* sqlcode eq 100, and ezeaid is enter or pf19*/
    end
  end


   /* ----------------------------------------------------------;*/
    /* For deletes, check if format is in a predefined summary.;*/
    /* For changes and deletes, check if format is in a summary;*/
    /* on the database.                                        ;*/
   /* ----------------------------------------------------------;*/

   /* IF PF0EM003.PF0EMACT EQ 'D'     ;   if action is 'delete'*/
    /* AND PF0EM003.PF0EMFMT IN PF0GT.PFCREF; and predefined*/
    /* SET PF0EM003.PF0EMFMT CURSOR,BRIGHT;*/
    /* MOVE 137 TO EZEMNO  ; cannot delete, ref# is part of a pre*/
    /* MOVE 'Y' TO PFWREC.PFWEDTF    ; set edit fmt/act/typ flag*/
    /* MOVE 'Y' TO PFWREC.PFWERRF;*/
    /* EZERTN;*/
   /* END ;*/

  if (PF0EM003.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM003.PF0EMACT == "D") /* or action is 'delete'*/

    PF0E990(); /* summary select existance*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if no summaries found*/
       /* this is okay*/
    else
                                   /* else - exists in summary or page busy*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if exists in one summary*/
       || SQLCA.VAGen_SQLCODE == -811) /* or exists in multiple summaries*/
        set PF0EM003.PF0EMFMT cursor, bold; /* indicate the error*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* exists in a summary, or -911 - page busy*/
    end
  end


   /* ----------------------------------------------------------;*/
    /* Check if user has security to change or delete this     ;*/
    /* particular format record.  The pfcrec.xxxusrid is       ;*/
    /* only updated when a format record is added.  This       ;*/
    /* establishes ownership.                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "C")
    if (COMMAREA.CACHGFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CACLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM003.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
  if (PF0EW01.PF0EWACT == "D")
    if (COMMAREA.CADELFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CADLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM003.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
end // end PF0E370

// fmt 3 edit fmt/act/typ
Function PF0E360()
   /* ----------------------------------------------------------;*/
     /* Edit TYP and ACT fields.                               ;*/
       /* Type must be in range 0 - 5.                         ;*/
       /* Type allowed only with action 'A'.                   ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM003.PF0EMACT == "A") /* if action 'a'*/
    if (PF0EM003.PF0EMTYP == 0) /* if no type entered*/
      set PF0EM003.PF0EMTYP cursor, bold; /* require type*/
      converseLib.validationFailed(6); /* must enter fmt typ w/ action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    else /* else type entered*/
      if (PF0EM003.PF0EMTYP == 1 /* if in table*/
       || PF0EM003.PF0EMTYP == 2 
       || PF0EM003.PF0EMTYP == 3 
       || PF0EM003.PF0EMTYP == 4 
       || PF0EM003.PF0EMTYP == 5)
         /* okay                                      okay*/
      else /* else not valid*/
        set PF0EM003.PF0EMTYP cursor, bold;
        converseLib.validationFailed(4); /* format type must be 1, 2, 3, 4, or 5*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
      end
    end
  else /* else action not 'a'*/
    if (PF0EM003.PF0EMTYP == 0 /* if no type entered*/
     || PF0EM003.PF0EMTYP not modified)
       /* okay                                     okay*/
    else /* else type entered*/
      set PF0EM003.PF0EMTYP cursor, bold; /* reject type entry*/
      converseLib.validationFailed(8); /* format type allowed only with action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    end
  end

   /* ----------------------------------------------------------;*/
     /* Allow action add, inq, chg, or del                     ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM003.PF0EMACT == "I" /* if action = i,' ',a,c,or d*/
   || PF0EM003.PF0EMACT == " " 
   || PF0EM003.PF0EMACT == "A" 
   || PF0EM003.PF0EMACT == "C" 
   || PF0EM003.PF0EMACT == "D")
      /* this is okay*/
  else /* otherwise signal error*/
    set PF0EM003.PF0EMACT cursor, bold;
    converseLib.validationFailed(5); /* action must be i, a, c, or d*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end


   /* ----------------------------------------------------------;*/
     /* Check action against security flags in commarea.       ;*/
   /* ----------------------------------------------------------;*/

  PFWREC.PFWEXT = "N"; /* initialize security error flag*/

  PF0E820(); /* action security checking*/

  if (PFWREC.PFWEXT == "Y") /* if security error flag is 'y'*/
    set PF0EM003.PF0EMACT cursor, bold;
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0EM003.PF0EMFMT == 0) /* if fmt not entered*/
    set PF0EM003.PF0EMFMT cursor, bold;
    converseLib.validationFailed(7); /* FMT ref # required*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0E360

// fmt 3 data entry check
Function PF0E381()
   /* -----------------------------------------------------------;*/
      /* check all fields in the body of the screen for entries ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 2;
  while (PFWREC.PFWIDX >= 1) /* execute 2 times, descending*/
    if (PF0EM003.PF0EMCL[PFWIDX] is modified) /* if any columns entered*/
      set PF0EM003.PF0EMCL[PFWIDX] cursor, bold; /* signal error*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM003.PF0EMCU[PFWIDX] is modified)
      set PF0EM003.PF0EMCU[PFWIDX] cursor, bold;
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end

  PFWREC.PFWIDX = 5;
  while (PFWREC.PFWIDX >= 1) /* execute 5 times, descending*/
    if (PF0EM003.PF0EMDT[PFWIDX] is modified) /* if any d/t entered*/
      set PF0EM003.PF0EMDT[PFWIDX] cursor, bold; /* signal error*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end

  if (PF0EM003.PF0EMTT is modified) /* if tran type entered*/
    set PF0EM003.PF0EMTT cursor, bold; /* signal error*/
    PFWREC.PFWERRF = "Y";
    return;
  end

end // end PF0E381

// Fmt 3 validity check
Function PF0E382()
   /* -----------------------------------------------------------;*/
    /* Check validity of COL numbers entered.                   ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 2;
  while (PFWREC.PFWIDX >= 1) /* repeat this 2 times, descending*/
    if (PF0EW01.PF0EWCU[PFWIDX] == 0
     && PF0EW01.PF0EWCL[PFWIDX] == 0)
       /* this is okay*/
    else /* reject upper column = lower column*/
      if (PF0EW01.PF0EWCU[PFWIDX] == PF0EW01.PF0EWCL[PFWIDX])
        set PF0EM003.PF0EMCU[PFWIDX] cursor, bold;
        set PF0EM003.PF0EMCL[PFWIDX] cursor, bold;
        converseLib.validationFailed(30); /* cannot divide by the same column #,*/
        PFWREC.PFWERRF = "Y"; /* unless both column #'s are zero*/
      end
    end
    if (PF0EW01.PF0EWCU[PFWIDX] == 0
     && PF0EW01.PF0EWCL[PFWIDX] != 0)
      set PF0EM003.PF0EMCU[PFWIDX] cursor, bold;
      set PF0EM003.PF0EMCL[PFWIDX] cursor, bold;
      converseLib.validationFailed(258); /* when upper col# is 0, lower col# must*/
                                   /* also be 0*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWCL[PFWIDX] == 0
     && PF0EW01.PF0EWCU[PFWIDX] != 0)
      set PF0EM003.PF0EMCL[PFWIDX] cursor, bold;
      set PF0EM003.PF0EMCU[PFWIDX] cursor, bold;
      converseLib.validationFailed(259); /* when lower col# is 0, upper col# must*/
                                   /* also be 0*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWCL[PFWIDX] == 0 /* verify lower column*/
     || PF0EW01.PF0EWCL[PFWIDX] == 1 
     || PF0EW01.PF0EWCL[PFWIDX] == 3 
     || PF0EW01.PF0EWCL[PFWIDX] == 5 
     || PF0EW01.PF0EWCL[PFWIDX] == 7 
     || PF0EW01.PF0EWCL[PFWIDX] == 9)
       /* this is okay*/
    else
      set PF0EM003.PF0EMCL[PFWIDX] cursor, bold;
      converseLib.validationFailed(130); /* column # must be 0, 1, 3, 5, 7, or 9*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWCU[PFWIDX] == 0 /* verify upper column*/
     || PF0EW01.PF0EWCU[PFWIDX] == 1 
     || PF0EW01.PF0EWCU[PFWIDX] == 3 
     || PF0EW01.PF0EWCU[PFWIDX] == 5 
     || PF0EW01.PF0EWCU[PFWIDX] == 7 
     || PF0EW01.PF0EWCU[PFWIDX] == 9)
       /* this is okay*/
    else
      set PF0EM003.PF0EMCU[PFWIDX] cursor, bold;
      converseLib.validationFailed(130); /* column # must be 0, 1, 3, 5, 7, or 9*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end


   /* -----------------------------------------------------------;*/
      /* Count the number of times 'na' has been entered as     ;*/
      /* the data type and 'ctl' has been entered as the time   ;*/
      /* period.                                                ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWCOUNT = 0; /* initialize 'nactl' entry counter*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 5) /* repeat this 5 times*/
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA" /* 'not applicable'*/
     && PF0EW01.PF0EWTIM[PFWIDX] == "CTL") /* 'control total'*/
      PFWREC.PFWCOUNT = PFWREC.PFWCOUNT + 1; /* increment 'nactl' counter*/
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end


   /* -----------------------------------------------------------;*/
      /* Do not allow more than one 'nactl' entry.              ;*/
      /* Require 'ctl' time period be used with 'na' data type. ;*/
      /* Require 'na' data type be used with 'ctl' time period. ;*/
      /* Do not allow 'nactl' in the first two entries.         ;*/
      /* Search table YTPTBL for TIME PERIOD (MTD, JAN, etc.).  ;*/
      /* Search table YPDTBL for DATA TYPE (CA,OB,PA,OF, etc.). ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 5;
  while (PFWREC.PFWIDX >= 1) /* repeat this 5 times, descending*/
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA"
     && PF0EW01.PF0EWTIM[PFWIDX] == "CTL"
     && PFWREC.PFWCOUNT > 1) /* if 'nactl' entry counter gt 1*/
      set PF0EM003.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(248); /* 'na' data type and 'ctl' time period may be*/
      PFWREC.PFWERRF = "Y"; /* used only once in a format*/
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA"
     && PF0EW01.PF0EWTIM[PFWIDX] != "CTL")
      set PF0EM003.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(250); /* must use 'ctl' time per with 'na' data type*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWTIM[PFWIDX] == "CTL"
     && PF0EW01.PF0EWDAT[PFWIDX] != "NA")
      set PF0EM003.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(249); /* must use 'na' data type with 'ctl' time per*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA"
     || PF0EW01.PF0EWTIM[PFWIDX] == "CTL")
      if (PFWREC.PFWIDX == 1 /* if first dt/tp entry field*/
       || PFWREC.PFWIDX == 2) /* or second dt/tp entry field*/
        set PF0EM003.PF0EMDT[PFWIDX] cursor, bold;
        converseLib.validationFailed(247); /* 'na' and 'ctl' not valid for first or second*/
        PFWREC.PFWERRF = "Y"; /* data type / time periods*/
      end
    end

    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD) /* if found in table*/
       /* this is okay*/
    else
      set PF0EM003.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(17); /* invalid time period*/
      PFWREC.PFWERRF = "Y";
    end

    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD) /* if found in table*/
       /* this is okay*/
    else
      set PF0EM003.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(16); /* invalid data type*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end


  if (PF0EW01.PF0EWTRN in YFTTBL.YFTCD) /* verify transaction type*/
     /* this is okay*/
  else
    set PF0EM003.PF0EMTT cursor, bold;
    converseLib.validationFailed(128); /* transaction type invalid*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0E382

// fmt 4 converse screen
Function PF0E400()
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
                                                            /* ;*/
      /* Format 4 Converse Screen                              ;*/
                                                            /* ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  PF0EM004.XXXPRCNM = "PF0E400";


  PF0E410(); /* fmt 4 fill screen*/


   /* -----------------------------------------------------------;*/
    /* For deletes, after the user enters 'd' the screen is     ;*/
    /* first re-displayed with a confirm delete message and     ;*/
    /* the 'd' action code is blanked out.  The user must       ;*/
    /* re-enter 'd' to proceed with the delete.  If this is     ;*/
    /* is done, a deletion completed message is given on the    ;*/
    /* second re-display of the screen.  The flag               ;*/
    /* PF0EW01.PF0EWDCF indicates if the delete confirmation    ;*/
    /* message has been issued.  It is yes on the second        ;*/
    /* re-display of the screen.                                ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "D") /* special messages for action delete*/
    if (converseVar.validationMsgNum != 0) /* if an error occured*/
       /* keep this message*/
    else
      PF0EW01.PF0EWDCF = "Y"; /* set delete confirm msg issued flag*/
      PF0EM004.PF0EMACT = " "; /* user must reenter 'd' action code*/
      set PF0EM004.PF0EMACT cursor, bold;
      converseLib.validationFailed(122); /* delete requested. re-enter 'd' to confirm.*/
    end
  end

  if (PF1REC.PF1XFERF == "Y") /* if bridging via PF keys*/
    set PF0EM004.PF0EMACT skip; /* protect action field*/
  end

  if (PFWREC.PFWMSG != " ")
    PF0EM004.VAGen_EZEMSG = PFWREC.PFWMSG;
  end

  converse PF0EM004 ;

  PFWREC.PFWMSG = " "; /* clear msg line*/
  PF0EM004.VAGen_EZEMSG = " "; /* clear msg line*/
  PFWREC.PFWERRF = "N"; /* reset error flag*/

  PF0EW01.PF0EWFMT = PF0EM004.PF0EMFMT; /* save FMT value*/
  PF0EW01.PF0EWACT = PF0EM004.PF0EMACT; /* save ACT value*/
  PF0EW01.PF0EWTYP = PF0EM004.PF0EMTYP; /* save TYP value*/

  PF0E420(); /* fmt 4 fastpath, pf & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* ----------------------------------------------------------;*/
    /* Do not allow changes to the DATA/TIME fields if FMT,    ;*/
    /* ACT or TYP is modified                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EM004.PF0EMFMT is modified
   || PF0EM004.PF0EMACT is modified
   || PF0EM004.PF0EMTYP is modified)

    PF0E481(); /* fmt 4 data entry check*/

    if (PFWREC.PFWERRF == "Y")
      converseLib.validationFailed(11); /* do not enter data when changing ref/act/typ*/
      return;
    end
  end

   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
     /* Processing can now go in one of two ways: (1) If       ;*/
     /* changes were made to the body of the screen            ;*/
     /* the new information is put in the table and we exit    ;*/
     /* this process for good (flag PF0EWEO4 = 'y').           ;*/
     /* (2) If a flag indicates there was an error from the    ;*/
     /* last converse in the fields at the top of the screen   ;*/
     /* (REF/ACT/TYP), we re-edit these fields.  Or,           ;*/
     /* if changes were made at the top of the screen (to      ;*/
     /* REF/ACT/TYP), these changes are saved and checked for  ;*/
     /* validity.  If the format is still '4', we loop back    ;*/
     /* to reconverse screen PF0EM004 for the new request.     ;*/
     /* If the format is not '4', we exit this process for     ;*/
     /* good (flag PF0EWEO4 = 'y'), and return to PF0E100      ;*/
     /* where another process will be picked up.               ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM004.PF0EMACT == "D" /* if action is delete*/
   && PF0EW01.PF0EWDCF == "Y"  /* delete confirm msg issued flag is y*/
   && PF0EM004.PF0EMFMT not modified
   && PFWREC.PFWEDTF == "N")   /* edit fmt/act/typ flag is 'no'*/

    PF0E950(); /* table delete*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM004.PF0EMFMT cursor, bold;
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete.*/
      PFWREC.PFWERRF = "Y";
    end
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
    PFWREC.PFWEDTF = "Y"; /* reset edit fmt/act/typ flag*/
    return;
  end
  PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/


  if (PFWREC.PFWEDTF == "Y"         /* if edit fmt/act/typ flag is 'yes'*/
   || PF0EM004.PF0EMFMT is modified /* or FMT/ACT/TYP fields entered*/
   || PF0EM004.PF0EMACT is modified 
   || PF0EM004.PF0EMTYP is modified 
   || converseVar.eventKey is pf19)
                                   /* or read next pfkey pushed*/
     /* fall through*/
  else /* else chgs to body or no chg*/
    if (PF0EM004.PF0EMACT == "C")

      PF0E430(); /* fmt 4 change routine*/

    else
      if (PF0EM004.PF0EMACT == "A")

        PF0E440(); /* fmt 4 add routine*/

        if (PFWREC.PFWERRF == "N" /* if add was successful*/
         && converseVar.eventKey not pf12) /* and not just an edit check*/
          PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag*/
        end
      end
    end
    return;
  end


   /* ----------------------------------------------------------;*/
   /* Initialize the edit fmt/act/typ flag to 'n'.  If there   ;*/
   /* is an error in the fmt/act/typ fields the flag is set    ;*/
   /* to 'y' to force re-editing of these fields after the     ;*/
   /* message is displayed on the next converse.               ;*/
   /* ----------------------------------------------------------;*/
  PFWREC.PFWEDTF = "N"; /* re-set edit fmt/act/typ flag*/


   /* ----------------------------------------------------------;*/
   /* Clear residual data from data/time flds in scrn & PF0EW01;*/
   /* ----------------------------------------------------------;*/
  if (PF0EM004.PF0EMACT == "A" /* if action is add*/
   && PF0EM004.PF0EMTYP not modified) /* and type has not changed*/
     /* do nothing - cloning an existing format*/
  else

    PF0E450(); /* fmt 4 clear data fields*/

  end


  PF0E460(); /* fmt 4 edit fmt/act/typ*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E470(); /* fmt 4 db read & security check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (PF0EW01.PF0EWTYP != "4") /* if we have a different fmt type now*/
    PF0EW01.PF0EWEO4 = "Y"; /* signal end of fmt type 4 processing*/
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
  end
end // end PF0E400

// fmt 4 fill screen
Function PF0E410()
   /* -----------------------------------------------------------;*/
   /* Move FMT number, ACTION and format TYPE to screen.        ;*/
   /* -----------------------------------------------------------;*/
  PF0EM004.PF0EMFMT = PF0EW01.PF0EWFMT;
  PF0EM004.PF0EMACT = PF0EW01.PF0EWACT;
  PF0EM004.PF0EMTYP = PF0EW01.PF0EWTYP;


   /* -----------------------------------------------------------;*/
   /* Move in tran type description from table YFTTBL           ;*/
   /* -----------------------------------------------------------;*/
  PF0EM004.PF0EMTT = PF0EW01.PF0EWTRN;
  if (PF0EW01.PF0EWTRN in YFTTBL.YFTCD) /* if tran type in table*/
    PF0EM004.PF0EMTTH = YFTTBL.YFTDESC[sysVar.arrayIndex];
                                   /* use 30 char heading*/
  else
    PF0EM004.PF0EMTTH = " ";
  end

   /* -----------------------------------------------------------;*/
   /* Set up screen fields related to the 8 DATA/TIME fields    ;*/
   /* -----------------------------------------------------------;*/
      /* Search table ytptbl for time period (mtd, jan, etc.)   ;*/
      /* Search table ypdtbl for data type (ca,ob,pa,of, etc.)  ;*/
      /* Save short length descriptions for screen.             ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 8) /* repeat this 8 times*/
    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD) /* time period*/
      PF0EW01.PF0EWTSH[PFWIDX] = PF0EW01.PF0EWTIM[PFWIDX]; /* short*/
    else
      PF0EW01.PF0EWTSH[PFWIDX] = " "; /* short time*/
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD) /* data type*/
      PF0EW01.PF0EWDSH[PFWIDX] = PF0EW01.PF0EWDAT[PFWIDX]; /* short*/
    else
      PF0EW01.PF0EWDSH[PFWIDX] = " "; /* short data*/
    end
    PF0EM004.PF0EMDT[PFWIDX] = PF0EW01.PF0EWDT[PFWIDX]; /* 5 bytes*/
    PF0EM004.PF0EMD[PFWIDX] = PF0EW01.PF0EWDSH[PFWIDX]; /* 2 bytes*/
    PF0EM004.PF0EMT[PFWIDX] = PF0EW01.PF0EWTSH[PFWIDX]; /* 3 bytes*/
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end


  PF0EM004.PF0EMCU[1] = PF0EW01.PF0EWCU[1]; /* upper col #*/
  PF0EM004.PF0EMCL[1] = PF0EW01.PF0EWCL[1]; /* lower col #*/
  PF0EM004.PF0EMCU[2] = PF0EW01.PF0EWCU[2]; /* upper col #*/
  PF0EM004.PF0EMCL[2] = PF0EW01.PF0EWCL[2]; /* lower col #*/
  PF0EM004.PF0EMCU[3] = PF0EW01.PF0EWCU[3]; /* upper col #*/
  PF0EM004.PF0EMCL[3] = PF0EW01.PF0EWCL[3]; /* lower col #*/
  PF0EM004.PF0EMCU[4] = PF0EW01.PF0EWCU[4]; /* upper col #*/
  PF0EM004.PF0EMCL[4] = PF0EW01.PF0EWCL[4]; /* lower col #*/

   /* -----------------------------------------------------------;*/
      /* Move in short headings for "as % of" columns at right  ;*/
      /* of screen.                                             ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 1;
                              /* repeat this 4 times*/
  while (PFWIDX <= 4)
    if (PF0EM004.PF0EMCU[PFWIDX] >= 1
     && PF0EM004.PF0EMCU[PFWIDX] <= 8)
        /* use col number as index to display 6 byte heading*/
      PFWREC.PFWTBLX = PF0EM004.PF0EMCU[PFWIDX];
      PF0EM004.PF0EMDU[PFWIDX] = PF0EW01.PF0EWDT[PFWTBLX];
    else
      PF0EM004.PF0EMDU[PFWIDX] = " ";
    end
    if (PF0EM004.PF0EMCL[PFWIDX] >= 1
     && PF0EM004.PF0EMCL[PFWIDX] <= 8)
        /* use col number as index to display 6 byte heading*/
      PFWREC.PFWTBLX = PF0EM004.PF0EMCL[PFWIDX];
      PF0EM004.PF0EMDL[PFWIDX] = PF0EW01.PF0EWDT[PFWTBLX];
    else
      PF0EM004.PF0EMDL[PFWIDX] = " ";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end


   /* -----------------------------------------------------------;*/
    /* Protect DATA/TIME  and COL fields if action 'I' or 'D'.  ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "I"
   || PF0EW01.PF0EWACT == " "
   || PF0EW01.PF0EWACT == "D")
    set PF0EM004.PF0EMTT protect;
    set PF0EM004.PF0EMDT[1] protect;
    set PF0EM004.PF0EMDT[2] protect;
    set PF0EM004.PF0EMDT[3] protect;
    set PF0EM004.PF0EMDT[4] protect;
    set PF0EM004.PF0EMDT[5] protect;
    set PF0EM004.PF0EMDT[6] protect;
    set PF0EM004.PF0EMDT[7] protect;
    set PF0EM004.PF0EMDT[8] protect;
    set PF0EM004.PF0EMCU[1] protect;
    set PF0EM004.PF0EMCL[1] protect;
    set PF0EM004.PF0EMCU[2] protect;
    set PF0EM004.PF0EMCL[2] protect;
    set PF0EM004.PF0EMCU[3] protect;
    set PF0EM004.PF0EMCL[3] protect;
    set PF0EM004.PF0EMCU[4] protect;
    set PF0EM004.PF0EMCL[4] protect;
  end
end // end PF0E410

// fmt 4 fastpath, pf & pa keys
Function PF0E420()
  set PF0EM004.PF0EMFMT cursor, initialAttributes; /* reset cursor and color*/
  set PF0EM004.PF0EMACT initialAttributes; /* reset color*/
  set PF0EM004.PF0EMTYP initialAttributes; /* reset color*/
  set PF0EM004.PF0EMTT initialAttributes; /* reset color*/

  set PF0EM004.PF0EMDT[1] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMDT[2] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMDT[3] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMDT[4] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMDT[5] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMDT[6] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMDT[7] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMDT[8] initialAttributes; /* reset color*/

  set PF0EM004.PF0EMCU[1] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMCL[1] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMCU[2] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMCL[2] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMCU[3] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMCL[3] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMCU[4] initialAttributes; /* reset color*/
  set PF0EM004.PF0EMCL[4] initialAttributes; /* reset color*/
  set PF0EM004.CATOAP initialAttributes; /* reset color*/
  set PF0EM004.CAITEM initialAttributes; /* reset color*/

   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on the;*/
     /* screen.  If other data has been entered, put cursor     ;*/
     /* on the bad field and send an error message.             ;*/
     /* Do not allow fastpath back into same application.       ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EM004.CATOAP != " " /* if fastpath*/
   || PF0EM004.CAITEM != " ")
    if (PF0EM004.CATOAP == "PF0E") /* if fastpath into same appl*/
      set PF0EM004.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
       /* wait to set PFWERRF until after the following process*/
    end

    PF0E481(); /* fmt 4 data entry check*/

    if (PFWREC.PFWERRF == "Y") /* if an error occured*/
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
    end
    if (PF0EM004.CATOAP == "PF0E") /* if fastpath into same appl*/
      PFWREC.PFWERRF = "Y"; /* set error flag for message 10 above*/
    end

    if (PF0EM004.PF0EMTYP is modified)
      set PF0EM004.PF0EMTYP cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM004.PF0EMACT is modified)
      set PF0EM004.PF0EMACT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM004.PF0EMFMT is modified)
      set PF0EM004.PF0EMFMT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if an error occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0EM004.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0EM004.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PF0EW01.PF0EWEO4 = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

   /* -----------------------------------------------------------;*/
      /* Check for PF and PA key entries.                       ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is enter)
      /* no action*/
  else
    PF0E810(); /* check pfkeys*/
    if (PFWREC.PFWERRF == "Y" /* if error returned from check*/
     || PFWREC.PFWEOAF == "Y" /* or end of application*/
     || PF0EW01.PF0EWTYP == 0) /* or fmt TYPE is now 0*/
      PF0EW01.PF0EWEO4 = "Y"; /* signal end of fmt TYPE 4*/
      PFWREC.PFWERRF = "Y";
      return; /* exit this routine*/
    end
  end

   /* -----------------------------------------------------------;*/
   /* Warn user if read next pfkey is pressed and changes were  ;*/
   /* made to the lower part of the screen.                     ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is pf19   
   && PF0EM004.PF0EMACT == "C"       
   && PF0EM004 is modified           /* part of screen is modified*/
   && PF0EM004.PF0EMFMT not modified /* but not fmt/act/typ*/
   && PF0EM004.PF0EMACT not modified 
   && PF0EM004.PF0EMTYP not modified)
    PF0EW01.PF0EWDT[1] = PF0EM004.PF0EMDT[1];
                                   /* save data/time values*/
    PF0EW01.PF0EWDT[2] = PF0EM004.PF0EMDT[2];
    PF0EW01.PF0EWDT[3] = PF0EM004.PF0EMDT[3];
    PF0EW01.PF0EWDT[4] = PF0EM004.PF0EMDT[4];
    PF0EW01.PF0EWDT[5] = PF0EM004.PF0EMDT[5];
    PF0EW01.PF0EWDT[6] = PF0EM004.PF0EMDT[6];
    PF0EW01.PF0EWDT[7] = PF0EM004.PF0EMDT[7];
    PF0EW01.PF0EWDT[8] = PF0EM004.PF0EMDT[8];
    PF0EW01.PF0EWCU[1] = PF0EM004.PF0EMCU[1];
    PF0EW01.PF0EWCL[1] = PF0EM004.PF0EMCL[1];
    PF0EW01.PF0EWCU[2] = PF0EM004.PF0EMCU[2];
    PF0EW01.PF0EWCL[2] = PF0EM004.PF0EMCL[2];
    PF0EW01.PF0EWCU[3] = PF0EM004.PF0EMCU[3];
    PF0EW01.PF0EWCL[3] = PF0EM004.PF0EMCL[3];
    PF0EW01.PF0EWCU[4] = PF0EM004.PF0EMCU[4];
    PF0EW01.PF0EWCL[4] = PF0EM004.PF0EMCL[4];
    PF0EW01.PF0EWTRN = PF0EM004.PF0EMTT;
    converseLib.validationFailed(135); /* press enter to update, prior to pushing pf19*/
    PFWREC.PFWERRF = "Y";
    return;
  end
end // end PF0E420

// fmt 4 change routine
Function PF0E430()
   /* -----------------------------------------------------------;*/
      /* Change routine for format 4                            ;*/
   /* -----------------------------------------------------------;*/

  PF0EW01.PF0EWTRN = PF0EM004.PF0EMTT; /* save tran type*/

  PF0EW01.PF0EWDT[1] = PF0EM004.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM004.PF0EMDT[2];
  PF0EW01.PF0EWDT[3] = PF0EM004.PF0EMDT[3];
  PF0EW01.PF0EWDT[4] = PF0EM004.PF0EMDT[4];
  PF0EW01.PF0EWDT[5] = PF0EM004.PF0EMDT[5];
  PF0EW01.PF0EWDT[6] = PF0EM004.PF0EMDT[6];
  PF0EW01.PF0EWDT[7] = PF0EM004.PF0EMDT[7];
  PF0EW01.PF0EWDT[8] = PF0EM004.PF0EMDT[8];

  PF0EW01.PF0EWCU[1] = PF0EM004.PF0EMCU[1];
  PF0EW01.PF0EWCL[1] = PF0EM004.PF0EMCL[1];
  PF0EW01.PF0EWCU[2] = PF0EM004.PF0EMCU[2];
  PF0EW01.PF0EWCL[2] = PF0EM004.PF0EMCL[2];
  PF0EW01.PF0EWCU[3] = PF0EM004.PF0EMCU[3];
  PF0EW01.PF0EWCL[3] = PF0EM004.PF0EMCL[3];
  PF0EW01.PF0EWCU[4] = PF0EM004.PF0EMCU[4];
  PF0EW01.PF0EWCL[4] = PF0EM004.PF0EMCL[4];

  PF0E482(); /* fmt 4 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (apply changes)*/

    PF0E940(); /* table update*/

    set PF0EM004.PF0EMFMT cursor;
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM004.PF0EMFMT cursor, bold;
      converseLib.validationFailed(33); /* format # not on file, cannot change*/
      PFWREC.PFWERRF = "Y";
    end
  end
end // end PF0E430

// fmt 4 add routine
Function PF0E440()
   /* -----------------------------------------------------------;*/
      /* Add routine for format 4                               ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
   /* Trap possible errors: adding fmt ref 0 or blank;          ;*/
        /* adding fmt 1,2,3 or 5 from type 4 screen.            ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EM004.PF0EMFMT == 0)
    converseLib.validationFailed(45); /* format ref not valid*/
    PFWREC.PFWERRF = "Y";
    return;
  else
    if (PF0EM004.PF0EMTYP == 4)
       /* this is okay*/
    else
      if (PF0EM004.PF0EMTYP == 1)
        converseLib.validationFailed(80); /* cannot add type 1 from this screen*/
      else
        if (PF0EM004.PF0EMTYP == 2)
          converseLib.validationFailed(81); /* cannot add type 2 from this screen*/
        else
          if (PF0EM004.PF0EMTYP == 3)
            converseLib.validationFailed(82); /* cannot add type 3 from this screen*/
          else
            if (PF0EM004.PF0EMTYP == 5)
              converseLib.validationFailed(84); /* cannot add type 5 from this screen*/
            end
          end
        end
      end
      set PF0EM004.PF0EMTYP cursor, bold;
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  PF0EW01.PF0EWTRN = PF0EM004.PF0EMTT; /* save tran type*/

  PF0EW01.PF0EWDT[1] = PF0EM004.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM004.PF0EMDT[2];
  PF0EW01.PF0EWDT[3] = PF0EM004.PF0EMDT[3];
  PF0EW01.PF0EWDT[4] = PF0EM004.PF0EMDT[4];
  PF0EW01.PF0EWDT[5] = PF0EM004.PF0EMDT[5];
  PF0EW01.PF0EWDT[6] = PF0EM004.PF0EMDT[6];
  PF0EW01.PF0EWDT[7] = PF0EM004.PF0EMDT[7];
  PF0EW01.PF0EWDT[8] = PF0EM004.PF0EMDT[8];

  PF0EW01.PF0EWCU[1] = PF0EM004.PF0EMCU[1];
  PF0EW01.PF0EWCL[1] = PF0EM004.PF0EMCL[1];
  PF0EW01.PF0EWCU[2] = PF0EM004.PF0EMCU[2];
  PF0EW01.PF0EWCL[2] = PF0EM004.PF0EMCL[2];
  PF0EW01.PF0EWCU[3] = PF0EM004.PF0EMCU[3];
  PF0EW01.PF0EWCL[3] = PF0EM004.PF0EMCL[3];
  PF0EW01.PF0EWCU[4] = PF0EM004.PF0EMCU[4];
  PF0EW01.PF0EWCL[4] = PF0EM004.PF0EMCL[4];


  PFWREC.PFWIDX = 8;
  while (PFWREC.PFWIDX >= 1)
                                   /* repeat 8 times, descending*/
    if (PF0EM004.PF0EMDT[PFWIDX] not modified /* if data/time not entered*/
     && PF0EM004.PF0EMDT[PFWIDX] == " ")     
      set PF0EM004.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(25); /* enter data type/time period for action 'a'*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end


  if (PF0EM004.PF0EMTT not modified /* if tran type not entered*/
   && PF0EM004.PF0EMTT == 0)       
    set PF0EM004.PF0EMTT cursor, bold;
    converseLib.validationFailed(127); /* transaction type not entered*/
    PFWREC.PFWERRF = "Y"; /* signal error*/
  end

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E482(); /* fmt 4 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (the real thing)*/

    set PFCREC empty; /* clear record*/
    PF0E930(); /* table add*/

    if (SQLCA.VAGen_SQLCODE == +100)
      set PF0EM004.PF0EMFMT cursor, bold;
      converseLib.validationFailed(12); /* format reference # already exists*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    end
  end
end // end PF0E440

// fmt 4 clear data fields
Function PF0E450()
   /* ----------------------------------------------------------;*/
   /* Clear residual data from screen and wkg storage fields   ;*/
   /* ----------------------------------------------------------;*/

  PF0EW01.PF0EWTRN = " ";

  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
    PF0EW01.PF0EWDT[PFWIDX] = " ";
    PF0EW01.PF0EWSH[PFWIDX] = " ";
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

  PF0EW01.PF0EWLH[1] = " ";
  PF0EW01.PF0EWLH[2] = " ";
  PF0EW01.PF0EWLH[3] = " ";

  PF0EW01.PF0EWCU[1] = 0;
  PF0EW01.PF0EWCL[1] = 0;
  PF0EW01.PF0EWCU[2] = 0;
  PF0EW01.PF0EWCL[2] = 0;
  PF0EW01.PF0EWCU[3] = 0;
  PF0EW01.PF0EWCL[3] = 0;
  PF0EW01.PF0EWCU[4] = 0;
  PF0EW01.PF0EWCL[4] = 0;


   /* screen fields*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 8) /* repeat this 8 times*/
    PF0EM004.PF0EMDT[PFWIDX] = " ";
    PF0EM004.PF0EMD[PFWIDX] = " ";
    PF0EM004.PF0EMT[PFWIDX] = " ";
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

  PF0EM004.PF0EMCU[1] = 0;
  PF0EM004.PF0EMCL[1] = 0;
  PF0EM004.PF0EMCU[2] = 0;
  PF0EM004.PF0EMCL[2] = 0;
  PF0EM004.PF0EMCU[3] = 0;
  PF0EM004.PF0EMCL[3] = 0;
  PF0EM004.PF0EMCU[4] = 0;
  PF0EM004.PF0EMCL[4] = 0;
  PF0EM004.PF0EMDU[1] = " ";
  PF0EM004.PF0EMDL[1] = " ";
  PF0EM004.PF0EMDU[2] = " ";
  PF0EM004.PF0EMDL[2] = " ";
  PF0EM004.PF0EMDU[3] = " ";
  PF0EM004.PF0EMDL[3] = " ";
  PF0EM004.PF0EMDU[4] = " ";
  PF0EM004.PF0EMDL[4] = " ";

  PF0EM004.PF0EMTT = " ";
  PF0EM004.PF0EMTTH = " ";
end // end PF0E450

// fmt 4 edit fmt/act/typ
Function PF0E460()
   /* ----------------------------------------------------------;*/
     /* Edit TYP and ACT fields.                               ;*/
       /* Type must be in range 0 - 5.                         ;*/
       /* Type allowed only with action 'A'.                   ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM004.PF0EMACT == "A") /* if action 'a'*/
    if (PF0EM004.PF0EMTYP == 0) /* if no type entered*/
      set PF0EM004.PF0EMTYP cursor, bold; /* require type*/
      converseLib.validationFailed(6); /* must enter fmt typ w/ action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    else /* else type entered*/
      if (PF0EM004.PF0EMTYP == 1 /* if in table*/
       || PF0EM004.PF0EMTYP == 2 
       || PF0EM004.PF0EMTYP == 3 
       || PF0EM004.PF0EMTYP == 4 
       || PF0EM004.PF0EMTYP == 5)
         /* okay                                      okay*/
      else /* else not valid*/
        set PF0EM004.PF0EMTYP cursor, bold;
        converseLib.validationFailed(4); /* format type must be 1, 2, 3, 4, or 5*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
      end
    end
  else /* else action not 'a'*/
    if (PF0EM004.PF0EMTYP == 0 /* if no type entered*/
     || PF0EM004.PF0EMTYP not modified)
       /* okay                                     okay*/
    else /* else type entered*/
      set PF0EM004.PF0EMTYP cursor, bold; /* reject type entry*/
      converseLib.validationFailed(8); /* format type allowed only with action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    end
  end

   /* ----------------------------------------------------------;*/
     /* Allow action add, inq, chg, or del                     ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM004.PF0EMACT == "I" /* if action = i,' ',a,c,or d*/
   || PF0EM004.PF0EMACT == " " 
   || PF0EM004.PF0EMACT == "A" 
   || PF0EM004.PF0EMACT == "C" 
   || PF0EM004.PF0EMACT == "D")
      /* this is okay*/
  else /* otherwise signal error*/
    set PF0EM004.PF0EMACT cursor, bold;
    converseLib.validationFailed(5); /* action must be i, a, c, or d*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end

   /* ----------------------------------------------------------;*/
     /* Check action against security flags in commarea.       ;*/
   /* ----------------------------------------------------------;*/

  PFWREC.PFWEXT = "N"; /* initialize security error flag*/

  PF0E820(); /* action security checking*/

  if (PFWREC.PFWEXT == "Y") /* if security error flag is 'y'*/
    set PF0EM004.PF0EMACT cursor, bold;
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0EM004.PF0EMFMT == 0) /* if fmt not entered*/
    set PF0EM004.PF0EMFMT cursor, bold;
    converseLib.validationFailed(7); /* FMT ref # required*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0E460

// fmt 4 db read & security check
Function PF0E470()
   /* ----------------------------------------------------------;*/
     /* read database for format number                        ;*/
     /* if format found                                        ;*/
       /* move format to working storage                       ;*/
                                                            /* ;*/
     /* if action is add                                       ;*/
       /* format number should not exist                       ;*/
     /* if action is delete                                    ;*/
       /* format number should exist                           ;*/
     /* if action is inquiry or change                         ;*/
       /* format number should exist                           ;*/
   /* ----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19) /* if read next (inquiry and change*/
                                   /* only)*/

    PF0E920(); /* table select next*/

  else /* else enter key pushed (all actions)*/

    PF0E910(); /* table select unique*/

  end

  if (SQLCA.VAGen_SQLCODE == +0) /* if db select successful*/
    PF0EW01.PF0EWFMT = PFCREC.PFCREF; /* move table key*/
    PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR;
    PF0EW01.PF0EWTRN = PFCREC.YFTCD;
    PFWREC.PFWIDX = 1;
    while (PFWREC.PFWIDX <= 13) /* move all time periods and data types*/
      PF0EW01.PF0EWTIM[PFWIDX] = PFCREC.YTPCD[PFWIDX];
      PF0EW01.PF0EWDAT[PFWIDX] = PFCREC.YPDCD[PFWIDX];
      PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
    end
    PF0EW01.PF0EWCU[1] = PFCREC.PFCPCTC[1];
    PF0EW01.PF0EWCL[1] = PFCREC.PFCPCTC[2];
    PF0EW01.PF0EWCU[2] = PFCREC.PFCPCTC[3];
    PF0EW01.PF0EWCL[2] = PFCREC.PFCPCTC[4];
    PF0EW01.PF0EWCU[3] = PFCREC.PFCPCTC[5];
    PF0EW01.PF0EWCL[3] = PFCREC.PFCPCTC[6];
    PF0EW01.PF0EWCU[4] = PFCREC.PFCPCTC[7];
    PF0EW01.PF0EWCL[4] = PFCREC.PFCPCTC[8];
  end

  if (PF0EW01.PF0EWTYP != 4) /* if the existing format is not type 4*/
    PF0EW01.PF0EWEO4 = "Y"; /* signal end of type 4 process*/
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
  end

  if (PF0EM004.PF0EMACT == "A") /* if action is 'add'*/
    if (SQLCA.VAGen_SQLCODE == +0) /* if fmt ref # already in table*/
      PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR; /* display existing type*/
      set PF0EM004.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(12); /* format design already exists*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM004.PF0EMACT == "D") /* if action is 'delete'*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if fmt ref # not in table*/
      set PF0EM004.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM004.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM004.PF0EMACT == "I" /* or action is 'inquiry'*/
   || PF0EM004.PF0EMACT == " ") /* of action is default (inquiry)*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      if (converseVar.eventKey is enter) /* if enter key pushed*/
        set PF0EM004.PF0EMFMT cursor, bold; /* signal error*/
        converseLib.validationFailed(9); /* invalid FMT ref #*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* sqlcode eq 100, and ezeaid is enter or pf19*/
    end
  end


   /* ----------------------------------------------------------;*/
    /* For deletes, check if format is in a predefined summary.;*/
    /* For changes and deletes, check if format is in a summary;*/
    /* on the database.                                        ;*/
   /* ----------------------------------------------------------;*/

   /* IF PF0EM004.PF0EMACT EQ 'D'     ;   if action is 'delete'*/
    /* AND PF0EM004.PF0EMFMT IN PF0GT.PFCREF; and predefined*/
    /* SET PF0EM004.PF0EMFMT CURSOR,BRIGHT;*/
    /* MOVE 137 TO EZEMNO  ; cannot delete, ref# is part of a pre*/
    /* MOVE 'Y' TO PFWREC.PFWEDTF    ; set edit fmt/act/typ flag*/
    /* MOVE 'Y' TO PFWREC.PFWERRF;*/
    /* EZERTN;*/
   /* END ;*/

  if (PF0EM004.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM004.PF0EMACT == "D") /* or action is 'delete'*/
    PF0E990(); /* summary select existance*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if no summaries found*/
       /* this is okay*/
    else
                                   /* else - exists in summary or page busy*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if exists in one summary*/
       || SQLCA.VAGen_SQLCODE == -811) /* or exists in multiple summaries*/
        set PF0EM004.PF0EMFMT cursor, bold; /* indicate the error*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* exists in a summary, or -911 - page busy*/
    end
  end


   /* ----------------------------------------------------------;*/
    /* Check if user has security to change or delete this     ;*/
    /* particular format record.  The pfcrec.xxxusrid is       ;*/
    /* only updated when a format record is added.  This       ;*/
    /* establishes ownership.                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "C")
    if (COMMAREA.CACHGFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CACLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM004.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
  if (PF0EW01.PF0EWACT == "D")
    if (COMMAREA.CADELFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CADLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM004.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
end // end PF0E470

// fmt 4 data entry check
Function PF0E481()
   /* -----------------------------------------------------------;*/
      /* Check all fields in the body of the screen for entries ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 4;
  while (PFWREC.PFWIDX >= 1) /* execute 4 times, descending*/
    if (PF0EM004.PF0EMCL[PFWIDX] is modified) /* if any columns entered*/
      set PF0EM004.PF0EMCL[PFWIDX] cursor, bold; /* signal error*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM004.PF0EMCU[PFWIDX] is modified)
      set PF0EM004.PF0EMCU[PFWIDX] cursor, bold;
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end

  PFWREC.PFWIDX = 8;
  while (PFWREC.PFWIDX >= 1) /* execute 8 times, descending*/
    if (PF0EM004.PF0EMDT[PFWIDX] is modified) /* if any d/t entered*/
      set PF0EM004.PF0EMDT[PFWIDX] cursor, bold; /* signal error*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end

  if (PF0EM004.PF0EMTT is modified) /* if tran type entered*/
    set PF0EM004.PF0EMTT cursor, bold; /* signal error*/
    PFWREC.PFWERRF = "Y";
    return;
  end

end // end PF0E481

// Fmt 4 validity check
Function PF0E482()
   /* -----------------------------------------------------------;*/
    /* Check validity of COL numbers entered.                   ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 4;
  while (PFWREC.PFWIDX >= 1) /* repeat this 4 times, descending*/
    if (PF0EW01.PF0EWCU[PFWIDX] == 0
     && PF0EW01.PF0EWCL[PFWIDX] == 0)
       /* this is okay*/
    else /* reject upper column = lower column*/
      if (PF0EW01.PF0EWCU[PFWIDX] == PF0EW01.PF0EWCL[PFWIDX])
        set PF0EM004.PF0EMCU[PFWIDX] cursor, bold;
        set PF0EM004.PF0EMCL[PFWIDX] cursor, bold;
        converseLib.validationFailed(30); /* cannot divide by the same column #,*/
        PFWREC.PFWERRF = "Y"; /* unless both column #'s are zero*/
      end
    end
    if (PF0EW01.PF0EWCU[PFWIDX] == 0
     && PF0EW01.PF0EWCL[PFWIDX] != 0)
      set PF0EM004.PF0EMCU[PFWIDX] cursor, bold;
      set PF0EM004.PF0EMCL[PFWIDX] cursor, bold;
      converseLib.validationFailed(258); /* when upper col# is 0, lower col# must*/
                                   /* also be 0*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWCL[PFWIDX] == 0
     && PF0EW01.PF0EWCU[PFWIDX] != 0)
      set PF0EM004.PF0EMCL[PFWIDX] cursor, bold;
      set PF0EM004.PF0EMCU[PFWIDX] cursor, bold;
      converseLib.validationFailed(259); /* when lower col# is 0, upper col# must*/
                                   /* also be 0*/
      PFWREC.PFWERRF = "Y";
    end

    if (PF0EW01.PF0EWCL[PFWIDX] >= 0 /* verify lower column*/
     && PF0EW01.PF0EWCL[PFWIDX] <= 8)
       /* this is okay*/
    else
      set PF0EM004.PF0EMCL[PFWIDX] cursor, bold;
      converseLib.validationFailed(132); /* column # must be 0 through 8 for format type 4*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWCU[PFWIDX] >= 0 /* verify upper column*/
     && PF0EW01.PF0EWCU[PFWIDX] <= 8)
       /* this is okay*/
    else
      set PF0EM004.PF0EMCU[PFWIDX] cursor, bold;
      converseLib.validationFailed(132); /* column # must be 0 through 8 for format type 4*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end


   /* -----------------------------------------------------------;*/
      /* Count the number of times 'na' has been entered as     ;*/
      /* the data type and 'ctl' has been entered as the time   ;*/
      /* period.                                                ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWCOUNT = 0; /* initialize 'nactl' entry counter*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 8) /* repeat this 8 times*/
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA" /* 'not applicable'*/
     && PF0EW01.PF0EWTIM[PFWIDX] == "CTL") /* 'control total'*/
      PFWREC.PFWCOUNT = PFWREC.PFWCOUNT + 1; /* increment 'nactl' counter*/
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end


   /* -----------------------------------------------------------;*/
      /* Do not allow more than one 'nactl' entry.              ;*/
      /* Require 'ctl' time period be used with 'na' data type. ;*/
      /* Require 'na' data type be used with 'ctl' time period. ;*/
      /* Do not allow 'nactl' in the first two entries.         ;*/
      /* Search table YTPTBL for TIME PERIOD (MTD, JAN, etc.).  ;*/
      /* Search table YPDTBL for DATA TYPE (CA,OB,PA,OF, etc.). ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 8;
  while (PFWREC.PFWIDX >= 1) /* repeat this 8 times, descending*/
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA"
     && PF0EW01.PF0EWTIM[PFWIDX] == "CTL"
     && PFWREC.PFWCOUNT > 1) /* if 'nactl' entry counter gt 1*/
      set PF0EM004.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(248); /* 'na' data type and 'ctl' time period may be*/
      PFWREC.PFWERRF = "Y"; /* used only once in a format*/
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA"
     && PF0EW01.PF0EWTIM[PFWIDX] != "CTL")
      set PF0EM004.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(250); /* must use 'ctl' time per with 'na' data type*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWTIM[PFWIDX] == "CTL"
     && PF0EW01.PF0EWDAT[PFWIDX] != "NA")
      set PF0EM004.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(249); /* must use 'na' data type with 'ctl' time per*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA"
     || PF0EW01.PF0EWTIM[PFWIDX] == "CTL")
      if (PFWREC.PFWIDX == 1 /* if first dt/tp entry field*/
       || PFWREC.PFWIDX == 2) /* or second dt/tp entry field*/
        set PF0EM004.PF0EMDT[PFWIDX] cursor, bold;
        converseLib.validationFailed(247); /* 'na' and 'ctl' not valid for first or second*/
        PFWREC.PFWERRF = "Y"; /* data type / time periods*/
      end
    end

    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD) /* if found in table*/
       /* this is okay*/
    else
      set PF0EM004.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(17); /* invalid time period*/
      PFWREC.PFWERRF = "Y";
    end

    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD) /* if found in table*/
       /* this is okay*/
    else
      set PF0EM004.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(16); /* invalid data type*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end


  if (PF0EW01.PF0EWTRN in YFTTBL.YFTCD) /* verify transaction type*/
     /* this is okay*/
  else
    set PF0EM004.PF0EMTT cursor, bold;
    converseLib.validationFailed(128); /* transaction type invalid*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0E482

// fmt 5 converse screen
Function PF0E500()
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
                                                            /* ;*/
      /* Format 5 Converse Screen                              ;*/
                                                            /* ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  PF0EM005.XXXPRCNM = "PF0E500";


  PF0E510(); /* fmt 5 fill screen*/


   /* -----------------------------------------------------------;*/
    /* For deletes, after the user enters 'd' the screen is     ;*/
    /* first re-displayed with a confirm delete message and     ;*/
    /* the 'd' action code is blanked out.  The user must       ;*/
    /* re-enter 'd' to proceed with the delete.  If this is     ;*/
    /* is done, a deletion completed message is given on the    ;*/
    /* second re-display of the screen.  The flag               ;*/
    /* PF0EW01.PF0EWDCF indicates if the delete confirmation    ;*/
    /* message has been issued.  It is yes on the second        ;*/
    /* re-display of the screen.                                ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "D") /* special messages for action delete*/
    if (converseVar.validationMsgNum != 0) /* if an error occured*/
       /* keep this message*/
    else
      PF0EW01.PF0EWDCF = "Y"; /* set delete confirm msg issued flag*/
      PF0EM005.PF0EMACT = " "; /* user must reenter 'd' action code*/
      set PF0EM005.PF0EMACT cursor, bold;
      converseLib.validationFailed(122); /* delete requested. re-enter 'd' to confirm.*/
    end
  end

  if (PF1REC.PF1XFERF == "Y") /* if bridging via PF keys*/
    set PF0EM005.PF0EMACT skip; /* protect action field*/
  end

  if (PFWREC.PFWMSG != " ") /* display msg if any passed from other*/
                                   /* appl*/
    PF0EM005.VAGen_EZEMSG = PFWREC.PFWMSG;
  end

  converse PF0EM005 ;

  PFWREC.PFWMSG = " "; /* clear msg line*/
  PF0EM005.VAGen_EZEMSG = " "; /* clear msg line*/
  PFWREC.PFWERRF = "N"; /* reset error flag*/

  PF0EW01.PF0EWFMT = PF0EM005.PF0EMFMT; /* save FMT value*/
  PF0EW01.PF0EWACT = PF0EM005.PF0EMACT; /* save ACT value*/
  PF0EW01.PF0EWTYP = PF0EM005.PF0EMTYP; /* save TYP value*/


  PF0E520(); /* fmt 5 fastpath, pf, & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* ----------------------------------------------------------;*/
    /* Do not allow changes to the DATA/TIME fields if FMT,    ;*/
    /* ACT or FMT is modified                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EM005.PF0EMFMT is modified
   || PF0EM005.PF0EMACT is modified
   || PF0EM005.PF0EMTYP is modified)

    PF0E581(); /* fmt 5 data entry check*/

    if (PFWREC.PFWERRF == "Y")
      converseLib.validationFailed(11); /* do not enter data when changing ref/act/typ*/
      return;
    end
  end

   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/
     /* Processing can now go in one of two ways: (1) If       ;*/
     /* changes were made to the body of the screen            ;*/
     /* the new information is put in the table and we exit    ;*/
     /* this process for good (flag PF0EWEO5 = 'y').           ;*/
     /* (2) If a flag indicates there was an error from the    ;*/
     /* last converse in the fields at the top of the screen   ;*/
     /* (REF/ACT/TYP), we re-edit these fields.  Or,           ;*/
     /* if changes were made at the top of the screen (to      ;*/
     /* REF/ACT/TYP), these changes are saved and checked for  ;*/
     /* validity.  If the format is still '5', we loop back    ;*/
     /* to reconverse screen PF0EM005 for the new request.     ;*/
     /* If the format is not '5', we exit this process for     ;*/
     /* good (flag PF0EWEO5 = 'y'), and return to PF0E100      ;*/
     /* where another process will be picked up.               ;*/
   /* ----------------------------------------------------------;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM005.PF0EMACT == "D" /* if action is delete*/
   && PF0EW01.PF0EWDCF == "Y"  /* delete confirm msg issued flag is y*/
   && PF0EM005.PF0EMFMT not modified
   && PFWREC.PFWEDTF == "N")   /* edit fmt/act/typ flag is 'no'*/

    PF0E950(); /* table delete*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM005.PF0EMFMT cursor, bold;
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete.*/
      PFWREC.PFWERRF = "Y";
    end
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
    PFWREC.PFWEDTF = "Y"; /* reset edit fmt/act/typ flag*/
    return;
  end
  PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/


  if (PFWREC.PFWEDTF == "Y"         /* if edit fmt/act/typ flag is 'yes'*/
   || PF0EM005.PF0EMFMT is modified /* or FMT/ACT/TYP fields entered*/
   || PF0EM005.PF0EMACT is modified 
   || PF0EM005.PF0EMTYP is modified 
   || converseVar.eventKey is pf19)
                                   /* or read next pfkey pushed*/
     /* fall through*/
  else /* else chgs to body or no chg*/
    if (PF0EM005.PF0EMACT == "C")

      PF0E530(); /* fmt 5 change routine*/

    else
      if (PF0EM005.PF0EMACT == "A")

        PF0E540(); /* fmt 5 add routine*/

        if (PFWREC.PFWERRF == "N" /* if add was successful*/
         && converseVar.eventKey not pf12) /* and not just an edit check*/
          PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag*/
        end
      end
    end
    return;
  end


   /* ----------------------------------------------------------;*/
   /* Initialize the edit fmt/act/typ flag to 'n'.  If there   ;*/
   /* is an error in the fmt/act/typ fields the flag is set    ;*/
   /* to 'y' to force re-editing of these fields after the     ;*/
   /* message is displayed on the next converse.               ;*/
   /* ----------------------------------------------------------;*/
  PFWREC.PFWEDTF = "N"; /* re-set edit fmt/act/typ flag*/


   /* ----------------------------------------------------------;*/
   /* Clear residual data from data/time flds in scrn & PF0EW01;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM005.PF0EMACT == "A" /* if action is add*/
   && PF0EM005.PF0EMTYP not modified) /* and type has not changed*/
     /* do nothing - cloning an existing format*/
  else

    PF0E550(); /* fmt 5 clear data fields*/

  end


  PF0E560(); /* fmt 5 edit fmt/act/typ*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E570(); /* fmt 5 db read & security check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (PF0EW01.PF0EWTYP != "5") /* if we have a different fmt type now*/
    PF0EW01.PF0EWEO5 = "Y"; /* signal end of fmt type 5 processing*/
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
  end
end // end PF0E500

// fmt 5 fill screen
Function PF0E510()
   /* -----------------------------------------------------------;*/
   /* Move FMT number, ACTION and format TYPE to screen         ;*/
   /* -----------------------------------------------------------;*/
  PF0EM005.PF0EMFMT = PF0EW01.PF0EWFMT;
  PF0EM005.PF0EMACT = PF0EW01.PF0EWACT;
  PF0EM005.PF0EMTYP = PF0EW01.PF0EWTYP;


   /* -----------------------------------------------------------;*/
   /* Move in tran type description from table YFTTBL           ;*/
   /* -----------------------------------------------------------;*/
  PF0EM005.PF0EMTT = PF0EW01.PF0EWTRN;
  if (PF0EW01.PF0EWTRN in YFTTBL.YFTCD) /* if tran type in table*/
    PF0EM005.PF0EMTTH = YFTTBL.YFTDESC[sysVar.arrayIndex];
                                   /* use 30 char heading*/
  else
    PF0EM005.PF0EMTTH = " ";
  end

   /* -----------------------------------------------------------;*/
   /* Set up screen fields related to the 13 DATA/TIME fields   ;*/
   /* -----------------------------------------------------------;*/
      /* Search table ytptbl for time period (mtd, jan, etc.)   ;*/
      /* Search table ypdtbl for data type (ca,ob,pa,of, etc.)  ;*/
      /* Save short length descriptions for screen.             ;*/
   /* -----------------------------------------------------------;*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD) /* time period*/
      PF0EW01.PF0EWTSH[PFWIDX] = PF0EW01.PF0EWTIM[PFWIDX]; /* short*/
    else
      PF0EW01.PF0EWTSH[PFWIDX] = " "; /* short time*/
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD) /* data type*/
      PF0EW01.PF0EWDSH[PFWIDX] = PF0EW01.PF0EWDAT[PFWIDX]; /* short*/
    else
      PF0EW01.PF0EWDSH[PFWIDX] = " "; /* short data*/
    end
    PF0EM005.PF0EMDT[PFWIDX] = PF0EW01.PF0EWDT[PFWIDX]; /* 5 bytes*/
    PF0EM005.PF0EMD[PFWIDX] = PF0EW01.PF0EWDSH[PFWIDX]; /* 2 bytes*/
    PF0EM005.PF0EMT[PFWIDX] = PF0EW01.PF0EWTSH[PFWIDX]; /* 3 bytes*/
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end


   /* -----------------------------------------------------------;*/
    /* Protect DATA/TIME  and COL fields if action 'I' or 'D'.  ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "I"
   || PF0EW01.PF0EWACT == " "
   || PF0EW01.PF0EWACT == "D")
    set PF0EM005.PF0EMTT protect;
    set PF0EM005.PF0EMDT[1] protect;
    set PF0EM005.PF0EMDT[2] protect;
    set PF0EM005.PF0EMDT[3] protect;
    set PF0EM005.PF0EMDT[4] protect;
    set PF0EM005.PF0EMDT[5] protect;
    set PF0EM005.PF0EMDT[6] protect;
    set PF0EM005.PF0EMDT[7] protect;
    set PF0EM005.PF0EMDT[8] protect;
    set PF0EM005.PF0EMDT[9] protect;
    set PF0EM005.PF0EMDT[10] protect;
    set PF0EM005.PF0EMDT[11] protect;
    set PF0EM005.PF0EMDT[12] protect;
    set PF0EM005.PF0EMDT[13] protect;
  end
end // end PF0E510

// fmt 5 fastpath, pf, & pa keys
Function PF0E520()
  set PF0EM005.PF0EMFMT cursor, initialAttributes; /* reset color and cursor*/
  set PF0EM005.PF0EMACT initialAttributes; /* reset color*/
  set PF0EM005.PF0EMTYP initialAttributes; /* reset color*/

  set PF0EM005.PF0EMTT initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[1] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[2] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[3] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[4] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[5] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[6] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[7] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[8] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[9] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[10] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[11] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[12] initialAttributes; /* reset color*/
  set PF0EM005.PF0EMDT[13] initialAttributes; /* reset color*/
  set PF0EM005.CATOAP initialAttributes; /* reset color*/
  set PF0EM005.CAITEM initialAttributes; /* reset color*/

   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on the;*/
     /* screen.  If other data has been entered, put cursor     ;*/
     /* on the bad field and send an error message.             ;*/
     /* Do not allow fastpath back into same application.       ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EM005.CATOAP != " " /* if fastpath*/
   || PF0EM005.CAITEM != " ")
    if (PF0EM005.CATOAP == "PF0E") /* if fastpath into same appl*/
      set PF0EM005.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
       /* wait to set PFWERRF until after the following process*/
    end

    PF0E581(); /* fmt 5 data entry check*/

    if (PFWREC.PFWERRF == "Y")
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
    end
    if (PF0EM005.CATOAP == "PF0E") /* if fastpath into same appl*/
      PFWREC.PFWERRF = "Y"; /* set error flag for message 10 above*/
    end

    if (PF0EM005.PF0EMTYP is modified)
      set PF0EM005.PF0EMTYP cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM005.PF0EMACT is modified)
      set PF0EM005.PF0EMACT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EM005.PF0EMFMT is modified)
      set PF0EM005.PF0EMFMT cursor, bold;
      converseLib.validationFailed(2);
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0EM005.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0EM005.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PF0EW01.PF0EWEO5 = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

   /* -----------------------------------------------------------;*/
      /* Check for PF and PA key entries.                       ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is enter)
      /* no action*/
  else

    PF0E810(); /* check pfkeys*/

    if (PFWREC.PFWERRF == "Y" /* if error returned from check*/
     || PFWREC.PFWEOAF == "Y" /* or end of application*/
     || PF0EW01.PF0EWTYP == 0) /* or fmt TYPE is now 0*/
      PF0EW01.PF0EWEO5 = "Y"; /* signal end of fmt TYPE 5 process*/
      PFWREC.PFWERRF = "Y";
      return; /* exit this routine*/
    end
  end

   /* -----------------------------------------------------------;*/
   /* Warn user if read next pfkey was pushed and changes were  ;*/
   /* made to the lower part of the screen.                     ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is pf19   
   && PF0EM005.PF0EMACT == "C"       
   && PF0EM005 is modified           /* part of screen was modified*/
   && PF0EM005.PF0EMFMT not modified /* but not fmt/act/typ*/
   && PF0EM005.PF0EMACT not modified 
   && PF0EM005.PF0EMTYP not modified)
    PF0EW01.PF0EWDT[1] = PF0EM005.PF0EMDT[1];
                                   /* save data/time values*/
    PF0EW01.PF0EWDT[2] = PF0EM005.PF0EMDT[2];
    PF0EW01.PF0EWDT[3] = PF0EM005.PF0EMDT[3];
    PF0EW01.PF0EWDT[4] = PF0EM005.PF0EMDT[4];
    PF0EW01.PF0EWDT[5] = PF0EM005.PF0EMDT[5];
    PF0EW01.PF0EWDT[6] = PF0EM005.PF0EMDT[6];
    PF0EW01.PF0EWDT[7] = PF0EM005.PF0EMDT[7];
    PF0EW01.PF0EWDT[8] = PF0EM005.PF0EMDT[8];
    PF0EW01.PF0EWDT[9] = PF0EM005.PF0EMDT[9];
    PF0EW01.PF0EWDT[10] = PF0EM005.PF0EMDT[10];
    PF0EW01.PF0EWDT[11] = PF0EM005.PF0EMDT[11];
    PF0EW01.PF0EWDT[12] = PF0EM005.PF0EMDT[12];
    PF0EW01.PF0EWDT[13] = PF0EM005.PF0EMDT[13];
    PF0EW01.PF0EWTRN = PF0EM005.PF0EMTT;
    converseLib.validationFailed(135); /* press enter to update, prior to pushing pf19*/
    PFWREC.PFWERRF = "Y";
    return;
  end
end // end PF0E520

// fmt 5 change routine
Function PF0E530()
   /* -----------------------------------------------------------;*/
      /* Change routine for fmt 5                               ;*/
   /* -----------------------------------------------------------;*/

  PF0EW01.PF0EWDT[1] = PF0EM005.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM005.PF0EMDT[2];
  PF0EW01.PF0EWDT[3] = PF0EM005.PF0EMDT[3];
  PF0EW01.PF0EWDT[4] = PF0EM005.PF0EMDT[4];
  PF0EW01.PF0EWDT[5] = PF0EM005.PF0EMDT[5];
  PF0EW01.PF0EWDT[6] = PF0EM005.PF0EMDT[6];
  PF0EW01.PF0EWDT[7] = PF0EM005.PF0EMDT[7];
  PF0EW01.PF0EWDT[8] = PF0EM005.PF0EMDT[8];
  PF0EW01.PF0EWDT[9] = PF0EM005.PF0EMDT[9];
  PF0EW01.PF0EWDT[10] = PF0EM005.PF0EMDT[10];
  PF0EW01.PF0EWDT[11] = PF0EM005.PF0EMDT[11];
  PF0EW01.PF0EWDT[12] = PF0EM005.PF0EMDT[12];
  PF0EW01.PF0EWDT[13] = PF0EM005.PF0EMDT[13];

  PF0EW01.PF0EWTRN = PF0EM005.PF0EMTT; /* save tran type*/

  PF0E582(); /* fmt 5 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (apply changes)*/

    PF0E940(); /* table update*/

    set PF0EM005.PF0EMFMT cursor;
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0EM005.PF0EMFMT cursor, bold;
      converseLib.validationFailed(33); /* format # not on file, cannot change*/
      PFWREC.PFWERRF = "Y";
    end
  end
end // end PF0E530

// fmt 5 add routine
Function PF0E540()
   /* -----------------------------------------------------------;*/
      /* Add routine for fmt 5                                  ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
   /* Trap possible errors: adding fmt ref 0 or blank;          ;*/
        /* adding fmt 1,2,3 or 4 from type 5 screen.            ;*/
   /* -----------------------------------------------------------;*/
  if (PF0EM005.PF0EMFMT == 0)
    converseLib.validationFailed(45); /* format ref not valid*/
    PFWREC.PFWERRF = "Y";
    return;
  else
    if (PF0EM005.PF0EMTYP == 5)
       /* this is okay*/
    else
      if (PF0EM005.PF0EMTYP == 1)
        converseLib.validationFailed(80); /* cannot add type 1 from this screen*/
      else
        if (PF0EM005.PF0EMTYP == 2)
          converseLib.validationFailed(81); /* cannot add type 2 from this screen*/
        else
          if (PF0EM005.PF0EMTYP == 3)
            converseLib.validationFailed(82); /* cannot add type 3 from this screen*/
          else
            if (PF0EM005.PF0EMTYP == 4)
              converseLib.validationFailed(83); /* cannot add type 4 from this screen*/
            end
          end
        end
      end
      set PF0EM005.PF0EMTYP cursor, bold;
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  PF0EW01.PF0EWDT[1] = PF0EM005.PF0EMDT[1]; /* save data/time values*/
  PF0EW01.PF0EWDT[2] = PF0EM005.PF0EMDT[2];
  PF0EW01.PF0EWDT[3] = PF0EM005.PF0EMDT[3];
  PF0EW01.PF0EWDT[4] = PF0EM005.PF0EMDT[4];
  PF0EW01.PF0EWDT[5] = PF0EM005.PF0EMDT[5];
  PF0EW01.PF0EWDT[6] = PF0EM005.PF0EMDT[6];
  PF0EW01.PF0EWDT[7] = PF0EM005.PF0EMDT[7];
  PF0EW01.PF0EWDT[8] = PF0EM005.PF0EMDT[8];
  PF0EW01.PF0EWDT[9] = PF0EM005.PF0EMDT[9];
  PF0EW01.PF0EWDT[10] = PF0EM005.PF0EMDT[10];
  PF0EW01.PF0EWDT[11] = PF0EM005.PF0EMDT[11];
  PF0EW01.PF0EWDT[12] = PF0EM005.PF0EMDT[12];
  PF0EW01.PF0EWDT[13] = PF0EM005.PF0EMDT[13];

  PF0EW01.PF0EWTRN = PF0EM005.PF0EMTT; /* save tran type*/


  PFWREC.PFWIDX = 13;
  while (PFWREC.PFWIDX >= 1) /* repeat 13 times, descending*/
    if (PF0EM005.PF0EMDT[PFWIDX] not modified /* if data/time not entered*/
     && PF0EM005.PF0EMDT[PFWIDX] == " ")     
      set PF0EM005.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(25); /* enter data type/time period for action 'a'*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end


  if (PF0EM005.PF0EMTT not modified /* if tran type not entered*/
   && PF0EM005.PF0EMTT == 0)       
    set PF0EM005.PF0EMTT cursor, bold;
    converseLib.validationFailed(127); /* transaction type not entered*/
    PFWREC.PFWERRF = "Y"; /* signal error*/
  end

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0E582(); /* fmt 5 validity check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  if (converseVar.eventKey is pf12) /* if edit only*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
  else /* else (the real thing)*/

    set PFCREC empty; /* clear record*/
    PF0E930(); /* table add*/

    if (SQLCA.VAGen_SQLCODE == +100)
      set PF0EM005.PF0EMFMT cursor, bold;
      converseLib.validationFailed(12); /* format reference # already exists*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    end
  end
end // end PF0E540

// fmt 5 clear data fields
Function PF0E550()
   /* ----------------------------------------------------------;*/
     /* Clear residual data from screen and wkg storage fields ;*/
   /* ----------------------------------------------------------;*/

  PF0EW01.PF0EWTRN = " ";

  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
    PF0EW01.PF0EWDT[PFWIDX] = " ";
    PF0EW01.PF0EWSH[PFWIDX] = " ";
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

  PF0EW01.PF0EWLH[1] = " ";
  PF0EW01.PF0EWLH[2] = " ";
  PF0EW01.PF0EWLH[3] = " ";

  PF0EW01.PF0EWCU[1] = 0;
  PF0EW01.PF0EWCL[1] = 0;
  PF0EW01.PF0EWCU[2] = 0;
  PF0EW01.PF0EWCL[2] = 0;
  PF0EW01.PF0EWCU[3] = 0;
  PF0EW01.PF0EWCL[3] = 0;
  PF0EW01.PF0EWCU[4] = 0;
  PF0EW01.PF0EWCL[4] = 0;


   /* screen fields*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
    PF0EM005.PF0EMDT[PFWIDX] = " ";
    PF0EM005.PF0EMD[PFWIDX] = " ";
    PF0EM005.PF0EMT[PFWIDX] = " ";
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end

  PF0EM005.PF0EMTT = " ";
  PF0EM005.PF0EMTTH = " ";
end // end PF0E550

// fmt 5 edit fmt/act/typ
Function PF0E560()
   /* ----------------------------------------------------------;*/
     /* Edit TYP and ACT fields.                               ;*/
       /* Type must be in range 0 - 5.                         ;*/
       /* Type allowed only with action 'A'.                   ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM005.PF0EMACT == "A") /* if action 'a'*/
    if (PF0EM005.PF0EMTYP == 0) /* if no type entered*/
      set PF0EM005.PF0EMTYP cursor, bold; /* require type*/
      converseLib.validationFailed(6); /* must enter fmt typ w/ action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    else /* else type entered*/
      if (PF0EM005.PF0EMTYP == 1 /* if in table*/
       || PF0EM005.PF0EMTYP == 2 
       || PF0EM005.PF0EMTYP == 3 
       || PF0EM005.PF0EMTYP == 4 
       || PF0EM005.PF0EMTYP == 5)
         /* okay                                      okay*/
      else /* else not valid*/
        set PF0EM005.PF0EMTYP cursor, bold;
        converseLib.validationFailed(4); /* format type must be 1, 2, 3, 4, or 5*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
      end
    end
  else /* else action not 'a'*/
    if (PF0EM005.PF0EMTYP == 0 /* if no type entered*/
     || PF0EM005.PF0EMTYP not modified)
       /* okay                                     okay*/
    else /* else type entered*/
      set PF0EM005.PF0EMTYP cursor, bold; /* reject type entry*/
      converseLib.validationFailed(8); /* format type allowed only with action 'a'*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
    end
  end

   /* ----------------------------------------------------------;*/
     /* Allow action add, inq, chg, or del                     ;*/
   /* ----------------------------------------------------------;*/

  if (PF0EM005.PF0EMACT == "I" /* if action = i,' ',a,c,or d*/
   || PF0EM005.PF0EMACT == " " 
   || PF0EM005.PF0EMACT == "A" 
   || PF0EM005.PF0EMACT == "C" 
   || PF0EM005.PF0EMACT == "D")
      /* this is okay*/
  else /* otherwise signal error*/
    set PF0EM005.PF0EMACT cursor, bold;
    converseLib.validationFailed(5); /* action must be i, a, c, or d*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end


   /* ----------------------------------------------------------;*/
     /* Check action against security flags in commarea.       ;*/
   /* ----------------------------------------------------------;*/

  PFWREC.PFWEXT = "N"; /* initialize security error flag*/

  PF0E820(); /* action security checking*/

  if (PFWREC.PFWEXT == "Y") /* if security error flag is 'y'*/
    set PF0EM005.PF0EMACT cursor, bold;
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0EM005.PF0EMFMT == 0) /* if fmt not entered*/
    set PF0EM005.PF0EMFMT cursor, bold;
    converseLib.validationFailed(7); /* FMT ref # required*/
    PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0E560

// fmt 5 read db & check security
Function PF0E570()
   /* ----------------------------------------------------------;*/
     /* read database for format number                        ;*/
     /* if format found                                        ;*/
       /* move format to working storage                       ;*/
                                                            /* ;*/
     /* if action is add                                       ;*/
       /* format number should not exist                       ;*/
     /* if action is delete                                    ;*/
       /* format number should exist                           ;*/
     /* if action is inquiry or change                         ;*/
       /* format number should exist                           ;*/
   /* ----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19) /* if read next (inquiry and change*/
                                   /* only)*/

    PF0E920(); /* table select next*/

  else /* else enter key pushed (all actions)*/

    PF0E910(); /* table select unique*/

  end

  if (SQLCA.VAGen_SQLCODE == +0) /* if db select successful*/
    PF0EW01.PF0EWFMT = PFCREC.PFCREF; /* move table key*/
    PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR;
    PF0EW01.PF0EWTRN = PFCREC.YFTCD;
    PFWREC.PFWIDX = 1;
    while (PFWREC.PFWIDX <= 13) /* move all time periods and data types*/
      PF0EW01.PF0EWTIM[PFWIDX] = PFCREC.YTPCD[PFWIDX];
      PF0EW01.PF0EWDAT[PFWIDX] = PFCREC.YPDCD[PFWIDX];
      PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
    end
    PF0EW01.PF0EWCU[1] = PFCREC.PFCPCTC[1];
    PF0EW01.PF0EWCL[1] = PFCREC.PFCPCTC[2];
    PF0EW01.PF0EWCU[2] = PFCREC.PFCPCTC[3];
    PF0EW01.PF0EWCL[2] = PFCREC.PFCPCTC[4];
    PF0EW01.PF0EWCU[3] = PFCREC.PFCPCTC[5];
    PF0EW01.PF0EWCL[3] = PFCREC.PFCPCTC[6];
    PF0EW01.PF0EWCU[4] = PFCREC.PFCPCTC[7];
    PF0EW01.PF0EWCL[4] = PFCREC.PFCPCTC[8];
  end

  if (PF0EW01.PF0EWTYP != 5) /* if the existing format is not type 5*/
    PF0EW01.PF0EWEO5 = "Y"; /* signal end of type 5 process*/
    PF0EW01.PF0EWDCF = "N"; /* reset delete confirm msg issued flag*/
  end

  if (PF0EM005.PF0EMACT == "A") /* if action is 'add'*/
    if (SQLCA.VAGen_SQLCODE == +0) /* if fmt ref # already in table*/
      PF0EW01.PF0EWTYP = PFCREC.PFCFMNBR; /* display existing type*/
      set PF0EM005.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(12); /* format design already exists*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM005.PF0EMACT == "D") /* if action is 'delete'*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if fmt ref # not in table*/
      set PF0EM005.PF0EMFMT cursor, bold; /* signal error*/
      converseLib.validationFailed(23); /* format ref # not on file, cannot delete*/
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

  if (PF0EM005.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM005.PF0EMACT == "I" /* or action is 'inquiry'*/
   || PF0EM005.PF0EMACT == " ") /* of action is default (inquiry)*/
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      if (converseVar.eventKey is enter) /* if enter key pushed*/
        set PF0EM005.PF0EMFMT cursor, bold; /* signal error*/
        converseLib.validationFailed(9); /* invalid FMT ref #*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* sqlcode eq 100, and ezeaid is enter or pf19*/
    end
  end


   /* ----------------------------------------------------------;*/
    /* For deletes, check if format is in a predefined summary.;*/
    /* For changes and deletes, check if format is in a summary;*/
    /* on the database.                                        ;*/
   /* ----------------------------------------------------------;*/

   /* IF PF0EM005.PF0EMACT EQ 'D'     ;   if action is 'delete'*/
    /* AND PF0EM005.PF0EMFMT IN PF0GT.PFCREF; and predefined*/
    /* SET PF0EM005.PF0EMFMT CURSOR,BRIGHT;*/
    /* MOVE 137 TO EZEMNO  ; cannot delete, ref# is part of a pre*/
    /* MOVE 'Y' TO PFWREC.PFWEDTF    ; set edit fmt/act/typ flag*/
    /* MOVE 'Y' TO PFWREC.PFWERRF;*/
    /* EZERTN;*/
   /* END ;*/

  if (PF0EM005.PF0EMACT == "C" /* if action is 'change'*/
   || PF0EM005.PF0EMACT == "D") /* or action is 'delete'*/

    PF0E990(); /* summary select existance*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if no summaries found*/
       /* this is okay*/
    else
                                   /* else - exists in summary or page busy*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if exists in one summary*/
       || SQLCA.VAGen_SQLCODE == -811) /* or exists in multiple summaries*/
        set PF0EM005.PF0EMFMT cursor, bold; /* indicate the error*/
      end
      PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
      PFWREC.PFWERRF = "Y";
      return; /* exists in a summary, or -911 - page busy*/
    end
  end


   /* ----------------------------------------------------------;*/
    /* Check if user has security to change or delete this     ;*/
    /* particular format record.  The pfcrec.xxxusrid is       ;*/
    /* only updated when a format record is added.  This       ;*/
    /* establishes ownership.                                  ;*/
   /* ----------------------------------------------------------;*/
  if (PF0EW01.PF0EWACT == "C")
    if (COMMAREA.CACHGFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CACLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM005.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
  if (PF0EW01.PF0EWACT == "D")
    if (COMMAREA.CADELFL == "Y") /* this should always be true at this point*/
      if (COMMAREA.CAUSERID == PFCREC.XXXUSRID /* if this user 'owns' rec*/
       || COMMAREA.CADLVL[1] == "Y")           /* or this is a super user*/
         /* this is okay*/
      else
        set PF0EM005.PF0EMFMT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this rec*/
        PFWREC.PFWEDTF = "Y"; /* set edit fmt/act/typ flag to re-edit*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end
end // end PF0E570

// fmt 5 data entry check
Function PF0E581()
   /* -----------------------------------------------------------;*/
      /* Check all fields in the body of the screen for entries ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 13;
  while (PFWREC.PFWIDX >= 1) /* execute 13 times, descending*/
    if (PF0EM005.PF0EMDT[PFWIDX] is modified) /* if any d/t entered*/
      set PF0EM005.PF0EMDT[PFWIDX] cursor, bold; /* signal error*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end

  if (PF0EM005.PF0EMTT is modified) /* if tran type entered*/
    set PF0EM005.PF0EMTT cursor, bold; /* signal error*/
    PFWREC.PFWERRF = "Y";
    return;
  end
end // end PF0E581

// Format 5 validity check
Function PF0E582()
   /* -----------------------------------------------------------;*/
      /* Count the number of times 'na' has been entered as     ;*/
      /* the data type and 'ctl' has been entered as the time   ;*/
      /* period.                                                ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWCOUNT = 0; /* initialize 'nactl' entry counter*/
  PFWREC.PFWIDX = 1;
  while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA" /* 'not applicable'*/
     && PF0EW01.PF0EWTIM[PFWIDX] == "CTL") /* 'control total'*/
      PFWREC.PFWCOUNT = PFWREC.PFWCOUNT + 1; /* increment 'nactl' counter*/
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
  end


   /* -----------------------------------------------------------;*/
      /* Do not allow more than one 'nactl' entry.              ;*/
      /* Require 'ctl' time period be used with 'na' data type. ;*/
      /* Require 'na' data type be used with 'ctl' time period. ;*/
      /* Do not allow 'nactl' in the first two entries.         ;*/
      /* Search table YTPTBL for TIME PERIOD (MTD, JAN, etc.).  ;*/
      /* Search table YPDTBL for DATA TYPE (CA,OB,PA,OF, etc.). ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWIDX = 13;
  while (PFWREC.PFWIDX >= 1) /* repeat this 13 times, descending*/
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA"
     && PF0EW01.PF0EWTIM[PFWIDX] == "CTL"
     && PFWREC.PFWCOUNT > 1) /* if 'nactl' entry counter gt 1*/
      set PF0EM005.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(248); /* 'na' data type and 'ctl' time period may be*/
      PFWREC.PFWERRF = "Y"; /* used only once in a format*/
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA"
     && PF0EW01.PF0EWTIM[PFWIDX] != "CTL")
      set PF0EM005.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(250); /* must use 'ctl' time per with 'na' data type*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWTIM[PFWIDX] == "CTL"
     && PF0EW01.PF0EWDAT[PFWIDX] != "NA")
      set PF0EM005.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(249); /* must use 'na' data type with 'ctl' time per*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0EW01.PF0EWDAT[PFWIDX] == "NA"
     || PF0EW01.PF0EWTIM[PFWIDX] == "CTL")
      if (PFWREC.PFWIDX == 1 /* if first dt/tp entry field*/
       || PFWREC.PFWIDX == 2) /* or second dt/tp entry field*/
        set PF0EM005.PF0EMDT[PFWIDX] cursor, bold;
        converseLib.validationFailed(247); /* 'na' and 'ctl' not valid for first or second*/
        PFWREC.PFWERRF = "Y"; /* data type / time periods*/
      end
    end

    if (PF0EW01.PF0EWTIM[PFWIDX] in YTPTBL.YTPCD) /* if found in table*/
       /* this is okay*/
    else
      set PF0EM005.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(17); /* invalid time period*/
      PFWREC.PFWERRF = "Y";
    end

    if (PF0EW01.PF0EWDAT[PFWIDX] in YPDTBL.YPDCD) /* if found in table*/
       /* this is okay*/
    else
      set PF0EM005.PF0EMDT[PFWIDX] cursor, bold;
      converseLib.validationFailed(16); /* invalid data type*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWIDX = PFWREC.PFWIDX - 1;
  end

  if (PF0EW01.PF0EWTRN in YFTTBL.YFTCD) /* verify transaction type*/
     /* this is okay*/
  else
    set PF0EM005.PF0EMTT cursor, bold;
    converseLib.validationFailed(128); /* transaction type invalid*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0E582

// validate pf keys
Function PF0E810()
   /* -----------------------------------------------------------;*/
    /* validate PF keys - performed after all converses         ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWCPROC = "PF0E810"; /* set current process name*/

  if (converseVar.eventKey is pf1) /* help*/
    XSPF1();
    PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
    PFWREC.PFWERRF = "Y"; /* set error flag*/
    return;
  end

  if (converseVar.eventKey is pf3)
    if (PF0EW01.PF0EWEOZ == "N") /* if pa2 & fmt TYPE 0 active*/
      COMMAREA.CAFROMAP = "PF0E";
      if (PF1REC.PF1ORIG == "PF0C")
        COMMAREA.CATOAP = "PF0C";
      else
        if (PF1REC.PF1ORIG == "PF0P")
          COMMAREA.CATOAP = "PF0P";
        else
          COMMAREA.CATOAP = "PF0A"; /* return to main profit menu*/
        end
      end
      XSEXIT();
      PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
      PFWREC.PFWERRF = "Y"; /* set error flag*/
      return;
    else /* else (format  TYPE 1,2,3,4,5)*/
       /* clear working storage*/
      PF0EW01.PF0EWFMT = 0; /* set FMT ref to 0*/
      PF0EW01.PF0EWACT = " "; /* set ACTion to blank*/
      PF0EW01.PF0EWTYP = 0; /* set fmt TYPE to 0*/
      PF0EW01.PF0EWTRN = " ";
      PFWREC.PFWIDX = 1;
      while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
        PF0EW01.PF0EWDT[PFWIDX] = " ";
        PF0EW01.PF0EWSH[PFWIDX] = " ";
        PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
      end
      PF0EW01.PF0EWCU[1] = 0;
      PF0EW01.PF0EWCL[1] = 0;
      PF0EW01.PF0EWCU[2] = 0;
      PF0EW01.PF0EWCL[2] = 0;
      PF0EW01.PF0EWCU[3] = 0;
      PF0EW01.PF0EWCL[3] = 0;
      PF0EW01.PF0EWCU[4] = 0;
      PF0EW01.PF0EWCL[4] = 0;
    end
    PFWREC.PFWERRF = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* return to main system menu*/
    XSPF4();
    PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
    PFWREC.PFWERRF = "Y"; /* set error flag*/
    return;
  end

  if (converseVar.eventKey is pf12) /* PF12 is edit only*/
    if (PF0EW01.PF0EWTYP == 0) /* and not used with fmt type 0*/
      converseLib.validationFailed(1);
    end
    return;
  end

  if (converseVar.eventKey is pf14) /* if xfer back to orig appl*/
    if (PF1REC.PF1ORIG == "PF0C" /* ensure orig appl is valid*/
     || PF1REC.PF1ORIG == "PF0G" 
     || PF1REC.PF1ORIG == "PF0H" 
     || PF1REC.PF1ORIG == "PF0P")
      PF1REC.PF1CURR = "PF0E"; /* remember current appl*/

      XPPF200(); /* bridge routine*/

      if (PFWREC.PFWERRF == "Y") /* if xfer no good*/
        return; /* go back*/
      end
    else /* else (orig appl is not valid)*/
      converseLib.validationFailed(1); /* invalid PF key*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
      return;
    end
  end

  if (converseVar.eventKey is pf19) /* if view next row*/
    if (PF0EW01.PF0EWACT == "A")
      set PF0EM000.PF0EMACT cursor, bold;
      converseLib.validationFailed(126); /* pf19 not allowed with 'a' activity code*/
      PFWREC.PFWERRF = "Y"; /* signal error*/
    else
      if (PF0EW01.PF0EWACT == "D")
        set PF0EM000.PF0EMACT cursor, bold;
        converseLib.validationFailed(125); /* pf19 not allowed with 'd' activity code*/
        PFWREC.PFWERRF = "Y"; /* signal error*/
      end
    end
    return; /* ezertn for  ALL  actions*/
  end

  if (converseVar.eventKey is pa2)
    converseLib.clearScreen();
     /* prevents screen flash on all screens*/
    if (PF0EW01.PF0EWEOZ == "N") /* if pa2 & fmt TYPE 0 active*/
      PF0EW01.PF0EWFMT = 0; /* set FMT ref to 0*/
    else /* else (format  TYPE 1,2,3,4,5)*/
       /* clear working storage*/
      PF0EW01.PF0EWFMT = 0; /* set FMT ref to 0*/
      PF0EW01.PF0EWACT = " "; /* set ACTion to blank*/
       /* leave PF0EW01.PF0EWTYP intact*/
      PF0EW01.PF0EWTRN = " ";
      PFWREC.PFWIDX = 1;
      while (PFWREC.PFWIDX <= 13) /* repeat this 13 times*/
        PF0EW01.PF0EWDT[PFWIDX] = " ";
        PF0EW01.PF0EWSH[PFWIDX] = " ";
        PFWREC.PFWIDX = PFWREC.PFWIDX + 1;
      end
      PF0EW01.PF0EWCU[1] = 0;
      PF0EW01.PF0EWCL[1] = 0;
      PF0EW01.PF0EWCU[2] = 0;
      PF0EW01.PF0EWCL[2] = 0;
      PF0EW01.PF0EWCU[3] = 0;
      PF0EW01.PF0EWCL[3] = 0;
      PF0EW01.PF0EWCU[4] = 0;
      PF0EW01.PF0EWCL[4] = 0;
    end
    PFWREC.PFWERRF = "Y";
    converseLib.validationFailed(189); /* pa2 pressed; screen changes aborted*/
    return;
  end

  converseLib.validationFailed(1); /* fall through error - invalid pfkey*/
  PFWREC.PFWERRF = "Y"; /* signal error*/
end // end PF0E810

// action security checking
Function PF0E820()
   /* -----------------------------------------------------------;*/
   /* Check action against security flag in commarea.  Reject   ;*/
   /* if user is not authorized to do the chosen action.        ;*/
     /* Note that record level security checking for changes    ;*/
   /* and deletes (using xxxusrid from the individual records)  ;*/
   /* is done later in the application because at this point    ;*/
   /* the record has not been selected from the database.       ;*/
   /* -----------------------------------------------------------;*/

  if (PF0EW01.PF0EWACT == "A")
    if (COMMAREA.CAADDFL == "Y")
       /* this is okay*/
    else
      converseLib.validationFailed(71); /* user not authorized for this action*/
      PFWREC.PFWEXT = "Y"; /* set security error flag to 'y'*/
      return;
    end
  end

  if (PF0EW01.PF0EWACT == "I"
   || PF0EW01.PF0EWACT == " ")
    if (COMMAREA.CAINQFL == "Y")
       /* this is okay*/
    else
      converseLib.validationFailed(71); /* user not authorized for this action*/
      PFWREC.PFWEXT = "Y"; /* set security error flag to 'y'*/
      return;
    end
  end

  if (PF0EW01.PF0EWACT == " ")
    if (COMMAREA.CAINQFL == "Y")
       /* this is okay*/
    else
      converseLib.validationFailed(71); /* user not authorized for this action*/
      PFWREC.PFWEXT = "Y"; /* set security error flag to 'y'*/
      return;
    end
  end

  if (PF0EW01.PF0EWACT == "C")
    if (COMMAREA.CACHGFL == "Y")
       /* this is okay*/
    else
      converseLib.validationFailed(71); /* user not authorized for this action*/
      PFWREC.PFWEXT = "Y"; /* set security error flag to 'y'*/
      return;
    end
  end

  if (PF0EW01.PF0EWACT == "D")
    if (COMMAREA.CADELFL == "Y")
       /* this is okay*/
    else
      converseLib.validationFailed(71); /* user not authorized for this action*/
      PFWREC.PFWEXT = "Y"; /* set security error flag to 'y'*/
      return;
    end
  end
end // end PF0E820

// vrptfm01 table select unique
Function PF0E910()
  PFCREC.PFCREF = PF0EW01.PF0EWFMT; /* move table key*/

  call "IO2730" ("S ", SQLCA, PFCREC) {isNoRefresh = yes, isExternal = yes}; /* table select unique*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table i/o successful*/
     /* next sentence - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* next sentence - handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PF0EW01.PF0EWFMT;
        PFWREC.PFWCPROC = "PF0E910"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2730"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VRPTFM01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end PF0E910

// vrptfm01 select scan/next
Function PF0E920()
  if (PF0EW01.PF0EWFMT == PFCREC.PFCREF)
    PF0EW01.PF0EWFMT = PF0EW01.PF0EWFMT + 1;
  end
  PFCREC.PFCREF = PF0EW01.PF0EWFMT;


  call "IO2730" ("SS", SQLCA, PFCREC) {isNoRefresh = yes, isExternal = yes}; /* table select scan*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table action successful*/
     /* this is okay*/
  else /* fatal db2 error, transfer to ta*/
    TA1REC.TA1LOCAT[2] = " ";
    PFWREC.PFWHKEY = PF0EW01.PF0EWFMT;
    PFWREC.PFWCPROC = "PF0E920A"; /* pass calling process*/
    TA1REC.TA1LOCAT[4] = "IO2730"; /* pass i/o module name*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VRPTFM01";
    XPPF010(); /* abend routine*/
  end


  call "IO2730" ("SN", SQLCA, PFCREC) {isNoRefresh = yes, isExternal = yes}; /* table select next*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table action successful*/
    PF0EW01.PF0EWSCD = SQLCA.VAGen_SQLCODE; /* save return code*/
     /* handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      PF0EW01.PF0EWSCD = SQLCA.VAGen_SQLCODE; /* save return code*/
      converseLib.validationFailed(120); /* end of file, next record unavailable*/
      PFWREC.PFWERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        PF0EW01.PF0EWSCD = SQLCA.VAGen_SQLCODE; /* save return code*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PF0EW01.PF0EWFMT;
        PFWREC.PFWCPROC = "PF0E920B"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2730"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VRPTFM01";
        XPPF010(); /* abend routine*/
      end
    end
  end


  call "IO2730" ("CS", SQLCA, PFCREC) {isNoRefresh = yes, isExternal = yes}; /* table close scan*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table action successful*/
     /* this is okay*/
  else /* fatal db2 error, transfer to ta*/
    TA1REC.TA1LOCAT[2] = " ";
    PFWREC.PFWHKEY = PF0EW01.PF0EWFMT;
    PFWREC.PFWCPROC = "PF0E920C"; /* pass calling process*/
    TA1REC.TA1LOCAT[4] = "IO2730"; /* pass i/o module name*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VRPTFM01";
    XPPF010(); /* abend routine*/
  end

    /* reset return code to value from the select next db access*/
  SQLCA.VAGen_SQLCODE = PF0EW01.PF0EWSCD;
end // end PF0E920

// vrptfm01 table add
Function PF0E930()
  PFCREC.PFCREF = PF0EW01.PF0EWFMT; /* move table key*/
  PFCREC.PFCFMNBR = PF0EW01.PF0EWTYP;
  PFCREC.YFTCD = PF0EW01.PF0EWTRN;
  PFWREC.PFWIDX = 1;
  while (PFWIDX <= 13)
    PFCREC.YTPCD[PFWIDX] = PF0EW01.PF0EWTIM[PFWIDX];
    PFCREC.YPDCD[PFWIDX] = PF0EW01.PF0EWDAT[PFWIDX];
    PFWIDX = PFWIDX + 1;
  end
  PFCREC.PFCPCTC[1] = PF0EW01.PF0EWCU[1];
  PFCREC.PFCPCTC[2] = PF0EW01.PF0EWCL[1];
  PFCREC.PFCPCTC[3] = PF0EW01.PF0EWCU[2];
  PFCREC.PFCPCTC[4] = PF0EW01.PF0EWCL[2];
  PFCREC.PFCPCTC[5] = PF0EW01.PF0EWCU[3];
  PFCREC.PFCPCTC[6] = PF0EW01.PF0EWCL[3];
  PFCREC.PFCPCTC[7] = PF0EW01.PF0EWCU[4];
  PFCREC.PFCPCTC[8] = PF0EW01.PF0EWCL[4];

  PFCREC.XXXUSRID = COMMAREA.CAUSERID; /* give ownership of rec to user*/

  XPPF030(); /* ta0040 date/time call routine*/

  PFCREC.ZZZSDT = TA2REC.TA2GRGGN; /* move system date to set up date*/
  PFCREC.ZZZCHGDT = TA2REC.TA2GRGGN;
                                   /* move system date to change date*/
  PFCREC.ZZZCHGTM = TA2REC.TA2TIMHM;
                                   /* move system time to change time*/

  call "IO2730" ("A ", SQLCA, PFCREC) {isNoRefresh = yes, isExternal = yes}; /* table add*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table i/o successful*/
    converseLib.validationFailed(24); /* format ref # saved*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PF0EW01.PF0EWFMT;
        PFWREC.PFWCPROC = "PF0E930"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2730"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VRPTFM01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end PF0E930

// vrptfm01 table update
Function PF0E940()
  PFCREC.PFCREF = PF0EW01.PF0EWFMT; /* move table key*/
  PFCREC.PFCFMNBR = PF0EW01.PF0EWTYP;
  PFCREC.YFTCD = PF0EW01.PF0EWTRN;
  PFWREC.PFWIDX = 1;
  while (PFWIDX <= 13)
    PFCREC.YTPCD[PFWIDX] = PF0EW01.PF0EWTIM[PFWIDX];
    PFCREC.YPDCD[PFWIDX] = PF0EW01.PF0EWDAT[PFWIDX];
    PFWIDX = PFWIDX + 1;
  end
  PFCREC.PFCPCTC[1] = PF0EW01.PF0EWCU[1];
  PFCREC.PFCPCTC[2] = PF0EW01.PF0EWCL[1];
  PFCREC.PFCPCTC[3] = PF0EW01.PF0EWCU[2];
  PFCREC.PFCPCTC[4] = PF0EW01.PF0EWCL[2];
  PFCREC.PFCPCTC[5] = PF0EW01.PF0EWCU[3];
  PFCREC.PFCPCTC[6] = PF0EW01.PF0EWCL[3];
  PFCREC.PFCPCTC[7] = PF0EW01.PF0EWCU[4];
  PFCREC.PFCPCTC[8] = PF0EW01.PF0EWCL[4];

  XPPF030(); /* ta0040 date/time call routine*/

  PFCREC.ZZZCHGDT = TA2REC.TA2GRGGN; /* move system date*/
  PFCREC.ZZZCHGTM = TA2REC.TA2TIMHM; /* move system time*/

  call "IO2730" ("U ", SQLCA, PFCREC) {isNoRefresh = yes, isExternal = yes}; /* table update*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table i/o successful*/
    converseLib.validationFailed(15); /* changes have been entered*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PF0EW01.PF0EWFMT;
        PFWREC.PFWCPROC = "PF0E940"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2730"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VRPTFM01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end PF0E940

// vrptfm01 table delete
Function PF0E950()
  PFCREC.PFCREF = PF0EW01.PF0EWFMT; /* move table key*/

  call "IO2730" ("D ", SQLCA, PFCREC) {isNoRefresh = yes, isExternal = yes}; /* table delete*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table i/o successful*/
    converseLib.validationFailed(26); /* format reference # deleted*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PF0EW01.PF0EWFMT;
        PFWREC.PFWCPROC = "PF0E950"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2730"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VRPTFM01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end PF0E950

// vsumat01 select existance
Function PF0E990()
   /* -----------------------------------------------------------;*/
   /* PF0E990 - This process checks the summary table for the   ;*/
             /* the existance of any summaries that use a       ;*/
             /* specific format.  A format cannot be changed    ;*/
             /* or deleted if it is used in any summaries.      ;*/
   /* -----------------------------------------------------------;*/

   /* set up summary table key*/
  PFEREC.PFCREF = PF0EW01.PF0EWFMT; /* specific format ref #*/
  PFEREC.PFDREF = -1; /* indicates any rpt attribute ref #*/
  PFEREC.PFBREF = -1; /* indicates any i/s group ref #*/

  call "IO2770" ("SE", SQLCA, PFEREC) {isNoRefresh = yes, isExternal = yes}; /* table select existance*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
     /* this is okay*/
  else
    if (SQLCA.VAGen_SQLCODE == +0 /* if one row found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/
      if (PF0EW01.PF0EWACT == "C") /* if action is 'change'*/
        converseLib.validationFailed(124); /* cannot change, ref# is part of a summary*/
      else /* else*/
        converseLib.validationFailed(123); /* cannot delete, ref# is part of a summary*/
      end
      PFWREC.PFWERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PF0EW01.PF0EWFMT;
        PFWREC.PFWCPROC = "PF0E990"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2770"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VSUMAT01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end PF0E990

//*** RECORD=PF0EW01 ****
//    This record contains the working storage fields that
// are unique to the application PF0E - Format Maintenance.
// ***********************
Record PF0EW01 type basicRecord
  10 PF0EWFMT PF0EWFMT ; 
  10 PF0EWFMC PF0EWFMC ; 
  10 PF0EWTYP PF0EWTYP ; 
  10 PF0EWACT PF0EWACT ; 
  10 PF0EWTRN PF0EWTRN ; 
  10 PF0EWDT PF0EWDT [13] ; 
    15 PF0EWDAT PF0EWDAT ; 
    15 PF0EWTIM PF0EWTIM ; 
  10 PF0EWSH PF0EWSH [13] ; 
    15 PF0EWDSH PF0EWDSH ; 
    15 PF0EWSPC PF0EWSPC ; 
    15 PF0EWTSH PF0EWTSH ; 
  10 PF0EWLH PF0EWLH [3] ; 
    15 PF0EWDLH PF0EWDLH ; 
    15 PF0EWTLH PF0EWTLH ; 
  10 PF0EWCU PF0EWCU [4] ; 
  10 PF0EWCL PF0EWCL [4] ; 
  10 PF0EWDCF PF0EWDCF ; 
  10 PF0EWEOZ PF0EWEOZ ; 
  10 PF0EWEO1 PF0EWEO1 ; 
  10 PF0EWEO2 PF0EWEO2 ; 
  10 PF0EWEO3 PF0EWEO3 ; 
  10 PF0EWEO4 PF0EWEO4 ; 
  10 PF0EWEO5 PF0EWEO5 ; 
  10 PF0EWSCD PF0EWSCD ; 
end // end PF0EW01

// action
DataItem PF0EWACT char(1)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// column number, lower
DataItem PF0EWCL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// column number, upper
DataItem PF0EWCU num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//    2 char data
DataItem PF0EWDAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete confirm msg issued flag
DataItem PF0EWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    10 char data heading
DataItem PF0EWDLH char(10)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

//    2 char data
DataItem PF0EWDSH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 5 char data/time 13 times
DataItem PF0EWDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end fmt type 1 flag
DataItem PF0EWEO1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end fmt type 2 flag
DataItem PF0EWEO2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// end fmt type 3 flag
DataItem PF0EWEO3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end fmt type 4 flag
DataItem PF0EWEO4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end fmt type 5 flag
DataItem PF0EWEO5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem PF0EWEOZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// format reference number - char
DataItem PF0EWFMC char(3)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// format reference number
DataItem PF0EWFMT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 20 char data/time heading
DataItem PF0EWLH char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql return code hold area
DataItem PF0EWSCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 6 char data/time heading
DataItem PF0EWSH char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    1 char space
DataItem PF0EWSPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    3 char time
DataItem PF0EWTIM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    10 char time heading
DataItem PF0EWTLH char(10)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// transaction type
DataItem PF0EWTRN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//    3 char time
DataItem PF0EWTSH char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format type number (1-5)
DataItem PF0EWTYP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

