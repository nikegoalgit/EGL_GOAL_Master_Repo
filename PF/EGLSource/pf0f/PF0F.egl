package pf0f;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.*;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import pf.common.*;
import sm.common.SM1REC;
import sy.common.SY1REC;
import sy.common.SY2CLRID;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import xx.common.*;
import xx.common.XGPCD;
import xx.common.XLCCD;
import xx.common.XQACD;
import xx01.*;
import xx01.XATTBL;
import xx01.XAUTBL;
import xx01.XBTTBL;
import xx01.XCNTBL;
import xx02.*;
import xx02.XDMCD;
import xx02.XDRTBL;
import xx02.XDVTBL;
import xx02.XFCTBL;
import xx02.XFMTBL;
import xx02.XGATBL;
import xx02.XGPTBL;
import xx02.XGSTBL;
import xx03.*;
import xx03.XLCTBL;
import xx03.XMCTBL;
import xx04.*;
import xx04.XOBTBL;
import xx04.XPCTBL;
import xx04.XPLTBL;
import xx04.XPRTBL;
import xx05.*;
import xx05.XQATBL;
import xx05.XRDTBL;
import xx05.XRYTBL;
import xx05.XSPTBL;
import xx05.XSUTBL;
import xx06.*;
import xx06.XWHTBL;
import xx07.*;
import xx07.YFATBL;
import xx08.*;
import xx08.SY1STNBR;
import xx08.YFETBL;
import xx08.YFFTBL;
import xx08.YFGTBL;
import xx08.YGRTBL;
import xx08.YICTBL;
import xx08.YMATBL;
import xx08.YMBTBL;
import xx08.YMCTBL;
import xx09.*;
import xx09.YSCTBL;
import xx09.YSETBL;
import xx09.YSFTBL;
import xx10.*;
import xx10.YSYTBL;
//*** PROGRAM=PF0F ****
// ;***********************************************************
// ; This application is designed to permit the user to perform
// ; inquiries or maintenance on the profitability reporting
// ; attribute data base.
// ;
// ;  Date    Init  Description
// ; -------  ----  -----------------------------------------
// ; 1-03-89   mh   original transfer to production.
// ; 1-26-89   JW   ADD NONCSP CALL OPTION
// ; 2-16-89   mh   chg. maps to display reverse video
// ; 5-01-89   DC   Bypass edits on inquiries, rework product
// ;                editing, change fastpath out, and rename
// ;                account type data item.
// ; 5-02-89   DC   Perform product edit routines even if
// ;                specific values not specified to move '8'
// ;                back to pfdrec.pficd before updating row.
// ; 6-21-89   DC   Change Summary Order Type to Base Order
// ;                Type (XOBTBL).
// ; 7-13-89   DC   Re-Gen for changes to YFATBL, YMATBL,
// ;                YMBTBL, and YMCTBL.
// ; 8-31-89  jwood removed ypgtbl from tbl list as per dc
// ; 9-29-89   DC   Summary Product Group window was displaying
// ;                wrong table (XPR - Product Type).  Changed
// ;                to XGS - Product Group, in PF0F680.
// ;12-06-89 tgriff Suppress edits of default values entered in
// ;                3 maps.  Suppress unwanted transfer of
// ;                control to another application after use of
// ;                Pop-up windows.
// ;04-15-94 mjk    Added, deleted, & re-named some attributes.
// ;                So, now there are 45 attributes total.
// ;                2, XFC and XMC, must have 1 specific value
// ;                entered--but only 1.
// ;03-01-96 MBUHIT Regen for GCOA mod to YICTBL.
// ;11-19-97 MLEABO Re-gen for table changes ysetbl, ysftbl.
// ;***********************************************************
// ;                   TEST PLAN:
// ; PRIMARY SCREENS:
// ; --test for gaps numbering the elements and make sure the
// ;   error messages work: ex: 1,2,3,4,7....
// ; SECONDARY SCREENS:
// ; --inquiries:
// ; ---general:
// ;   --make sure fields are protected.
// ;   --check the displays.
// ; ---after Selects:
// ;   --test gaps in buckets: fill 1-6, skip 7, 8 invalid....
// ;   --check for duplicates.
// ;   --check 1 to 8 choices.
// ;   --save and inquire.
// ;   --'zz' or 'zzz' valid? (except for product).
// ;   --'99' or '999' invalid? (except for product).
// ; ---pop-up windows:
// ;   --make sure the correct corporate table is displayed.
// ; OTHER CONSIDERATIONS:
// ; --test the ordering hierarchies in pf0f210.
// ; --test regular 2 byte attribute fields (most) versus:
// ; ---3 byte attribute fields: YMA, YMB, YMC, YFF, YFG, XMC.
// ; ---4 byte attribute fields: agency, YIC.
// ; --the 2 'S' fields: XFC, XMC.
// ; --product fields.
// ;***********************************************************
// *********************
Program PF0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PF0FW01 PF0FW01; // record
  PF1REC PF1REC; // record
  PF2REC PF2REC; // record
  PFDREC PFDREC; // record
  PFEREC PFEREC; // record
  PFWREC PFWREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PF0FT {deleteAfterUse = yes}; // table
  use XATTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBTTBL {deleteAfterUse = yes}; // table
  use XCNTBL {deleteAfterUse = yes}; // table
  use XDRTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XFCTBL {deleteAfterUse = yes}; // table
  use XFMTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XGSTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XMCTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XRDTBL {deleteAfterUse = yes}; // table
  use XRYTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YFATBL {deleteAfterUse = yes}; // table
  use YFETBL {deleteAfterUse = yes}; // table
  use YFFTBL {deleteAfterUse = yes}; // table
  use YFGTBL {deleteAfterUse = yes}; // table
  use YGRTBL {deleteAfterUse = yes}; // table
  use YICTBL {deleteAfterUse = yes}; // table
  use YMATBL {deleteAfterUse = yes}; // table
  use YMBTBL {deleteAfterUse = yes}; // table
  use YMCTBL {deleteAfterUse = yes}; // table
  use YSCTBL {deleteAfterUse = yes}; // table
  use YSETBL {deleteAfterUse = yes}; // table
  use YSFTBL {deleteAfterUse = yes}; // table
  use YSYTBL {deleteAfterUse = yes}; // table
  use PF0FM.PF0FM001,  // forms
      PF0FM.PF0FM002, 
      PF0FM.PF0FM003, 
      PF0FM.PF0FM004,
      PF0FM.XX0XM001
   {
    pfKeyEquate = yes
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PF0F000: PF0F000();
  end // end main
end // end PF0F

// application main logic
Function PF0F000()
   /* *******************************************************/
   /* *   this is the main logic for the program.          **/
   /* *******************************************************/
  ;
  PF0F001(); /* initialize the application*/
  ;
  while (PFWREC.PFWEOAF != "Y") /* while not end-of-application*/
    PF0F100(); /* converse screen m001*/
  end
  ;
  XPPF002(); /* exit application*/
  ;
   /* in case of trouble,transfer to pf0a*/
  COMMAREA.CATOAP = "PF0A";
  XSEXIT();
  ;
  exit program;
  ;
  ;
end // end PF0F000

// initialization routine
Function PF0F001()
   /* ************************************************************/
   /* *  pf0f001 -initialize program - handle incoming fastpath **/
   /* ************************************************************/
  ;
  XSENTRY();
  ;
  XSSEGTR();
  ;
  set PFWREC empty; /* clear all application records*/
  set PF0FW01 empty;
  set PF1REC empty;
  set PFDREC empty;
  set PFEREC empty;
  set XX0XW02 empty;
  ;
  PFWREC.PFWEOAF = "N"; /* initialize flags*/
  PFWREC.PFWRECF = "N";
  PFWREC.PFW1STF = "N";
  PFWREC.PFWERRF = "N";
  PF0FW01.PF0FWDEL = "N";
  ;
  set PF0FM001 initial; /* initialize screen*/
  ;
  PF1REC.PF1PASS = COMMAREA.CAUSERA;
  COMMAREA.CAUSERA = " ";
  ;
  if (PF1REC.PF1XFERF == "Y") /* if another application is*/
    PF0FM001.PFDREF = PF1REC.PF1ATT; /* bridging thru pf keys,*/
    PF0FM001.PF0FMACT = "I"; /* process an inquiry routine*/
    PF0F170(); /* for the attribute ref #*/
    if (PFWREC.PFWRECF == "N") /* passed in the bridge record*/
      PFWREC.PFWERRF = "Y";
      converseLib.validationFailed(049);
                                   /* requested attribute ref # not on file*/
      return;
    end
    PFWREC.PFW1STF = "Y";
    set PF0FM001.PFDREF cursor;
    set PF0FM001.PF0FMACT protect;
    return;
  end
  ;
  if (COMMAREA.CAITEM != " ") /* if another application is*/
    PF0FM001.PFDREF = COMMAREA.CAITEM; /* fast pathing to this appl.,*/
    PF0FM001.PF0FMACT = "I"; /* process an inquire routine*/
    PF0F170(); /* for the attribute ref #*/
    if (PFWREC.PFWRECF == "N") /* passed in the commarea record*/
      PFWREC.PFWERRF = "Y";
      converseLib.validationFailed(049);
                                   /* requested attribute ref # not on file*/
      return;
    end
    PFWREC.PFW1STF = "Y";
    COMMAREA.CAITEM = " ";
    return;
  end
  PF0FM001.XXXRVNBR = "0";
end // end PF0F001

// converse screen-main logic
Function PF0F100()
   /* *********************************************************/
   /* *  main logic loop for program - converse screen here  **/
   /* *********************************************************/
  ;
     /* before stage*/
  ;
  ;
  if (PFWREC.PFWERRF == "N" /* if not first time thru and no*/
   && PFWREC.PFW1STF == "N") /* errors on first pass,*/
    PFWSUB1 = 1;
    while (PFWSUB1 < 46)
      ;
      PF0F130(); /* clear main screen*/
      ;
    end
    set PF0FM001.PFDREF cursor;
  end
  ;
  if (PF1REC.PF1XFERF == "Y") /* if this request is via the bridging*/
    PF0FM001.PF0FMACT = "I"; /* routine, then default to inquiry mode*/
    set PF0FM001.PF0FMACT protect; /* and prevent user from modifying the*/
  end /* action code field.*/
  ;
  set PF0FM002 initial;
  set PF0FM003 initial;
  set PF0FM004 initial;
  ;
  if (PFWERRF == "N") /* if no errors, set field attributes*/
    PFWSUB1 = 1; /* to inhibit updating for inquiries*/
    while (PFWSUB1 < 46) /* and deletes*/
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == "D")
        set PF0FM001.PF0FMCDE[PFWSUB1] skip;
        set PF0FM001.PFDVALFL[PFWSUB1] skip;
      else
        set PF0FM001.PF0FMCDE[PFWSUB1] initialAttributes;
        set PF0FM001.PFDVALFL[PFWSUB1] initialAttributes;
      end
      PFWSUB1 = PFWSUB1 + 1;
    end
  end
  ;
   /* n o t e:  if attributes are ever taken away, must set here.*/
   /* SET PF0FM001.PF0FMCDE(2) AUTOSKIP;*/
   /* SET PF0FM001.PFDVALFL(2) AUTOSKIP;*/
   /* SET PF0FM001.PF0FMCDE(17) AUTOSKIP;*/
   /* SET PF0FM001.PFDVALFL(17) AUTOSKIP;*/
   /* SET PF0FM001.PF0FMCDE(29) AUTOSKIP;     /* ;set fields reserved for*/
   /* SET PF0FM001.PFDVALFL(29) AUTOSKIP;     /* ;further expansion to*/
   /* SET PF0FM001.PF0FMCDE(32) AUTOSKIP;     /* ;autoskip*/
   /* SET PF0FM001.PFDVALFL(32) AUTOSKIP;*/
   /* SET PF0FM001.PF0FMCDE(35) AUTOSKIP;*/
   /* SET PF0FM001.PFDVALFL(35) AUTOSKIP;*/
   /* SET PF0FM001.PF0FMCDE(38) AUTOSKIP;*/
   /* SET PF0FM001.PFDVALFL(38) AUTOSKIP;*/
   /* SET PF0FM001.PF0FMCDE(41) AUTOSKIP;*/
   /* SET PF0FM001.PFDVALFL(41) AUTOSKIP;*/
   /* SET PF0FM001.PF0FMCDE(44) AUTOSKIP;*/
   /* SET PF0FM001.PFDVALFL(44) AUTOSKIP;*/
  ;
  PF0FM001.PF0FMDTE = VGVar.currentShortGregorianDate; /* move date to screens*/
  PF0FM002.PF0FMDTE = VGVar.currentShortGregorianDate;
  PF0FM003.PF0FMDTE = VGVar.currentShortGregorianDate;
  PF0FM004.PF0FMDTE = VGVar.currentShortGregorianDate;
  ;
   /* This is to put 'S' next to the 2 attributes that MUST have 1*/
   /* specific value entered (if that attribute is chosen). 0194/mjk*/
   /*  */
  PF0FM001.PFDVALFL[24] = "S";
  PF0FM001.PFDVALFL[33] = "S";
   /*  */
  PFWREC.PFWEOAF = "N"; /* clear application flags*/
  PFWREC.PFWEOSF = "N";
  PFWREC.PFWERRF = "N";
  PF0FW01.PF0FWSC1 = "N";
  PF0FW01.PF0FWSC2 = "N";
  PF0FW01.PF0FWSC3 = "N";
  ;
  if (PF1REC.PF1ORIG == "PF0C") /* if "pf key" bridge was used,*/
    PF0FM001.PF0FMPFK = "15:SUM MAINT";
                                   /* place the appropriate pf key*/
    set PF0FM001.PF0FMPFK normal;
    set PF0FM001.PF0FMPFK skip;
  else /* and prompt on the bottom of*/
    if (PF1REC.PF1ORIG == "PF0G") /* the screen.*/
      PF0FM001.PF0FMPFK = "15:SUM REQ";
      set PF0FM001.PF0FMPFK normal;
      set PF0FM001.PF0FMPFK skip;
    else
      if (PF1REC.PF1ORIG == "PF0H")
        PF0FM001.PF0FMPFK = "15:SUM PRT";
        set PF0FM001.PF0FMPFK normal;
        set PF0FM001.PF0FMPFK skip;
      else
        if (PF1REC.PF1ORIG == "PF0P")
          PF0FM001.PF0FMPFK = "15:PRNT DIR";
          set PF0FM001.PF0FMPFK normal;
          set PF0FM001.PF0FMPFK skip;
        end
      end
    end
  end
  ;
  converse PF0FM001 ;
  ;
     /* after stage*/
  ;
  set PF0FM001.PFDREF initialAttributes;
  set PF0FM001.PF0FMACT initialAttributes;
  PFWREC.PFWSUB1 = 1;
  while (PFWREC.PFWSUB1 <= 45)
    set PF0FM001.PF0FMCDE[PFWSUB1] initialAttributes;
    set PF0FM001.PFDVALFL[PFWSUB1] initialAttributes;
    PFWREC.PFWSUB1 = PFWREC.PFWSUB1 + 1;
  end
  set PF0FM001.CATOAP initialAttributes;
  set PF0FM001.CAITEM initialAttributes;
  ;
  ;
  PF0FS01(); /* check pf keys*/
  ;
  ;
  if (PFWREC.PFWEOAF == "Y") /* end the application?*/
    return;
  end
  ;
  if (PFWREC.PFWEOSF == "Y") /* return to the previous screen*/
    COMMAREA.CATOAP = "PF0A";
    PFWREC.PFWEOAF = "Y";
    return;
  end
  ;
  if (PF0FM001.PFDREF == 0)
    set PF0FM001.PFDREF cursor, bold;
    converseLib.validationFailed(027);
                                   /* attribute reference # must be entered*/
    PFWREC.PFWERRF = "Y";
  end
  ;
  if (converseVar.eventKey is pf19) /* if pf19, set logic so that program*/
    PF0FW01.PFDREF = 0; /* thinks it is first time thru.*/
    PF0FW01.PF0FWACT = " ";
  end
  ;
  if (PF0FM001.PFDREF != PF0FW01.PFDREF /* if ref # or activity changes*/
   || PF0FM001.PF0FMACT != PF0FW01.PF0FWACT) /* reset the 1st time flag*/
    PFWREC.PFW1STF = "N";
    PF0FW01.PF0FWDEL = "N";
  end
  ;
  ;
  if (PFWREC.PFW1STF == "Y") /* if first screen ready to process*/
    if (PFWREC.PFWERRF == "N") /* and no errors encountered,*/
      ;
      PF0F200(); /* process main and secondary screens*/
      ;
    end
  end
  ;
  ;
  if (PFWREC.PFW1STF == "Y" /* if this is the first time through*/
   && PFWERRF == "N")      
    PFWREC.PFW1STF = "N";
  else
    if (PFWERRF == "N")
      PFWSUB1 = 1;
      while (PFWSUB1 < 46)
        ;
        PF0F130(); /* clear main screen*/
        ;
      end
      ;
      PF0F150(); /* validate action & select vrptat01*/
      ;
      if (PFWREC.PFWERRF == "N")
        PFWREC.PFW1STF = "Y";
      end
    end
  end
  ;
  ;
  PF0FW01.PFDREF = PF0FM001.PFDREF;
  if (PF0FW01.PF0FWACT != "D")
    PF0FW01.PF0FWACT = PF0FM001.PF0FMACT;
  end
end // end PF0F100

// clear main screen
Function PF0F130()
   /* **********************************************************/
   /* *  this routine will clear the 45 occurences of element **/
   /* *  numbers and selection fields on the pf0fm001 main    **/
   /* *  screen. will clear data from previous transaction.   **/
   /* **********************************************************/
  ;
  PF0FM001.PF0FMCDE[PFWSUB1] = 0; /* clear element #*/
  PF0FM001.PFDVALFL[PFWSUB1] = " "; /* clear selection field*/
  ;
  PFWSUB1 = PFWSUB1 + 1;
end // end PF0F130

// validate act & select vrptat01
Function PF0F150()
   /* **********************************************************/
   /* *  action code entered must be ' ' 'i' 'a' 'c' 'd'.     **/
   /* *  if ' ' 'i' 'c' 'd' was entered, record must be on    **/
   /* *  file. if 'a' was entered, record can't be on file.   **/
   /* **********************************************************/
  ;
  if (PF0FM001.PF0FMACT == " " /* check for valid action code*/
   || PF0FM001.PF0FMACT == "I" 
   || PF0FM001.PF0FMACT == "A" 
   || PF0FM001.PF0FMACT == "C" 
   || PF0FM001.PF0FMACT == "D")
     /* next sentence*/
  else
    set PF0FM001.PF0FMACT cursor, bold;
    PFWREC.PFWERRF = "Y";
    converseLib.validationFailed(005); /* action must be i, a, c, or d*/
    return;
  end
  ;
   /* -----------------------------------------------------------;*/
   /* Check action against security flag in commarea.  Reject   ;*/
   /* if user is not authorized to do the chosen action.        ;*/
   /* -----------------------------------------------------------;*/
  ;
  if (PF0FW01.PF0FWACT == "A") /* can user perform an add?*/
    if (COMMAREA.CAADDFL == "Y")
       /* this is okay*/
    else
      set PF0FM001.PF0FMACT cursor, bold;
      converseLib.validationFailed(71); /* user not authorized for this action*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end
  ;
  if (PF0FW01.PF0FWACT == "I" /* can userid perform an inquiry?*/
   || PF0FW01.PF0FWACT == " ")
    if (COMMAREA.CAINQFL == "Y")
       /* this is okay*/
    else
      set PF0FM001.PF0FMACT cursor, bold;
      converseLib.validationFailed(71); /* user not authorized for this action*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end
  ;
  if (PF0FW01.PF0FWACT == "C") /* can userid perform a change?*/
    if (COMMAREA.CACHGFL == "Y")
       /* this is okay*/
    else
      set PF0FM001.PF0FMACT cursor, bold;
      converseLib.validationFailed(71); /* user not authorized for this action*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end
  ;
  if (PF0FW01.PF0FWACT == "D") /* can userid perform a delete?*/
    if (COMMAREA.CADELFL == "Y")
       /* this is okay*/
    else
      set PF0FM001.PF0FMACT cursor, bold;
      converseLib.validationFailed(71); /* user not authorized for this action*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end
  ;
  ;
  PF0F170(); /* select dproft.vrptat01 row*/
  ;
  ;
  if (converseVar.eventKey not pf19)
    if (PF0FM001.PF0FMACT == " " /* if record not on file*/
     || PF0FM001.PF0FMACT == "I" /* and action code is ' ' or*/
     || PF0FM001.PF0FMACT == "C" /* 'i' or 'c' or 'd', it's*/
     || PF0FM001.PF0FMACT == "D") /* an error.*/
      if (PFWREC.PFWRECF == "N")
        set PF0FM001.PFDREF cursor, bold;
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(049);
                                   /* requested attribute ref # not on file*/
        return;
      end
    end
  end
  ;
  if (PF0FM001.PF0FMACT == "A" /* if record on file and*/
   && PFWREC.PFWRECF == "Y")   /* action code is 'a',*/
    set PF0FM001.PFDREF cursor, bold;
    PFWREC.PFWERRF = "Y"; /* it's an error.*/
    converseLib.validationFailed(050); /* requested attribute ref # already on file*/
    return;
  end
  ;
  if (PF0FM001.PF0FMACT == "A") /* if action code is 'a'*/
    set PFDREC empty; /* clear record*/
    PFDREC.PFDREF = PF0FM001.PFDREF; /* move screen ref # to record*/
    return; /* return to main screen*/
  end
  ;
  if (PF0FM001.PF0FMACT == "C") /* if userid isn't the original userid*/
                                   /* or*/
    if (COMMAREA.CAUSERID != PFDREC.XXXUSRID)
                                   /* doesn't have global authority*/
      if (COMMAREA.CACLVL[1] == "Y") /* to update records; send error message*/
        /* next sentence*/
      else
        set PF0FM001.PF0FMACT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this record*/
        PFWERRF = "Y";
      end
    end
  end
  ;
  if (PF0FM001.PF0FMACT == "D") /* if userid isn't the original userid*/
                                   /* or*/
    if (COMMAREA.CAUSERID != PFDREC.XXXUSRID)
                                   /* doesn't have global authority*/
      if (COMMAREA.CADLVL[1] == "Y") /* to update records; send error message*/
        /* next sentence*/
      else
        set PF0FM001.PF0FMACT cursor, bold;
        converseLib.validationFailed(119); /* userid not authorized to update this record*/
        PFWERRF = "Y";
      end
    end
  end
  ;
   /* IF PF0FM001.PFDREF IN PF0GT.PFDREF; if ref # is in predefine*/
   /* IF PF0FM001.PF0FMACT EQ 'D'   ; do not allow a delete.*/
     /* SET PF0FM001.PF0FMACT CURSOR,BRIGHT;*/
     /* MOVE 124 TO EZEMNO; cannot change; ref # is part of a sum*/
     /* MOVE 'Y' TO PFWERRF;*/
     /* EZERTN;*/
   /* END ;*/
   /* END ;*/
  ;
  ;
  set PFEREC empty;
  set SQLCA empty;
  ;
  PFEREC.PFCREF = -1; /* set wild card search keys for*/
  PFEREC.PFBREF = -1; /* delete verification*/
  PFEREC.PFDREF = PF0FM001.PFDREF; /* set specific search key*/
  ;
  call "IO2770" ("SE", SQLCA, PFEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* select existance vsumat01*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100) /* if ref # not found*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +0 /* if a single row,*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows are found*/
      if (PF0FM001.PF0FMACT == "C")
        set PF0FM001.PF0FMACT cursor, bold;
        PFWERRF = "Y";
        converseLib.validationFailed(124); /* cannot change; ref # is part of a summary*/
        return;
      end
      if (PF0FM001.PF0FMACT == "D") /* is part of an existing summary*/
        set PF0FM001.PF0FMACT cursor, bold;
        PFWERRF = "Y";
        converseLib.validationFailed(123); /* cannot delete; ref # is part of a summary*/
        return;
      end
    else
      TA1REC.TA1DBASE = "DPROFT"; /* abend the program*/
      TA1REC.TA1TBLVU = "VSUMAT01";
      PF0FW01.PF0FWREF = PFEREC.PFDREF;
      TA1REC.TA1TBLKE = PF0FW01.PF0FWREF;
      TA1REC.TA1LOCAT[1] = "PF0F150";
      TA1REC.TA1LOCAT[2] = "IO2770";
      XPPF010();
    end
  end
end // end PF0F150

// select dproft.vrptat01 row
Function PF0F170()
   /* **********************************************************/
   /* *  see if entered attribute reference # is in data      **/
   /* *  base. set flag accordingly.                          **/
   /* **********************************************************/
  ;
  set PFDREC empty; /* clear w/s record*/
  set SQLCA empty; /* clear sql record*/
  PFWREC.PFWRECF = "N"; /* reset record found flag*/
  ;
  if (converseVar.eventKey is pf19) /* user has requested to view the next*/
                                   /* sequential*/
    if (PF0FM001.PFDREF == PFWREC.PFWREF) /* increment the ref #*/
      PFWREC.PFWREF = PFWREC.PFWREF + 1;
    else
      PFWREC.PFWREF = PF0FM001.PFDREF; /* pf19 for 1st time*/
    end
    PFDREC.PFDREF = PFWREC.PFWREF;
  end
  ;
  if (converseVar.eventKey not pf19)
    PFWREC.PFWREF = PF0FM001.PFDREF;
    PFDREC.PFDREF = PFWREC.PFWREF;
  end
  ;
  call "IO2740" ("SS", SQLCA, PFDREC) {isNoRefresh = yes, isExternal = yes}; /* select scan vrptat01*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* if cursor open ok*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROFT"; /* fatal db2 error, abend the prog.*/
    TA1REC.TA1TBLVU = "VRPTAT01";
    PF0FW01.PF0FWREF = PFDREC.PFDREF;
    TA1REC.TA1TBLKE = PF0FW01.PF0FWREF;
    TA1REC.TA1LOCAT[3] = "PF0F170A";
    TA1REC.TA1LOCAT[4] = "IO2740";
    XPPF010();
  end
  ;
  call "IO2740" ("SN", SQLCA, PFDREC) {isNoRefresh = yes, isExternal = yes}; /* select next vrptat01*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* if requested record is in data base,*/
    if (PF0FM001.PFDREF == PFDREC.PFDREF)
      PFWREC.PFWRECF = "Y"; /* set flag to 'yes'*/
    end
    if (converseVar.eventKey is pf19)
      PFWREC.PFWRECF = "Y"; /* set flag to 'yes'*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
                                   /* if requested record not in data base,*/
      PFWREC.PFWRECF = "N"; /* set flag to 'no'*/
    else
      TA1REC.TA1DBASE = "DPROFT"; /* fatal db2 error, abend the prog.*/
      TA1REC.TA1TBLVU = "VRPTAT01";
      PF0FW01.PF0FWREF = PFDREC.PFDREF;
      TA1REC.TA1TBLKE = PF0FW01.PF0FWREF;
      TA1REC.TA1LOCAT[3] = "PF0F170B";
      TA1REC.TA1LOCAT[4] = "IO2740";
      XPPF010();
    end
  end
  ;
  call "IO2740" ("CS", SQLCA, PFDREC) {isNoRefresh = yes, isExternal = yes}; /* close scan vrptat01*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* if cursor close ok*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROFT"; /* fatal db2 error, abend the prog.*/
    TA1REC.TA1TBLVU = "VRPTAT01";
    PF0FW01.PF0FWREF = PFDREC.PFDREF;
    TA1REC.TA1TBLKE = PF0FW01.PF0FWREF;
    TA1REC.TA1LOCAT[3] = "PF0F170C";
    TA1REC.TA1LOCAT[4] = "IO2740";
    XPPF010();
  end
  ;
  ;
  if (converseVar.eventKey is pf19) /* if view next requested and there are no more*/
    if (PFWREC.PFWRECF == "N") /* ;data base rows, send error message*/
      PF0FM001.PFDREF = PFWREC.PFWREF;
      set PF0FM001.PFDREF cursor, bold;
      PFWERRF = "Y";
      converseLib.validationFailed(120); /* end of file; next record unavailable*/
      return;
    else
      PF0FM001.PFDREF = PFDREC.PFDREF; /* move next sequential ref #*/
      PF0FM002.PFDREF = PFDREC.PFDREF; /* to all screens*/
      PF0FM003.PFDREF = PFDREC.PFDREF;
      PF0FM004.PFDREF = PFDREC.PFDREF;
      PFWREC.PFWREF = PFDREC.PFDREF;
    end
  end
  ;
  if (PFWREC.PFWRECF == "N") /* if record not found, exit routine*/
    return;
  end
  ;
  PFWSUB1 = 1; /* set index*/
  while (PFWSUB1 < 9) /* search for entries of pficd in*/
                                   /* pfdrec,*/
    if (PFDREC.PFICD[PFWSUB1] > " ") /* when an entry is found, find the*/
      if (PFDREC.PFICD[PFWSUB1] in PF0FT.PFICD) /* code subscript in*/
        PFWSUB2 = PF0FT.PF0FTIDX[sysVar.arrayIndex]; /* code/subscript table and*/
                                 /* set screen subscript to table value*/
      end
      PF0FM001.PF0FMCDE[PFWSUB2] = PFWSUB1;
      if (PFDREC.PFDVALFL[PFWSUB1] == "Y")
        PF0FM001.PFDVALFL[PFWSUB2] = "S";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
end // end PF0F170

// prcs main & secondary screens
Function PF0F200()
   /* ************************************************************/
   /* *  process the request from the main screen. perform      **/
   /* *  edit process and perform converse of any of the        **/
   /* *  three secondary selection screens that might have      **/
   /* *  been selected.                                         **/
   /* ************************************************************/
  ;
  PF0FW01.PFICD[1] = " "; /* clear duplicate field area*/
  PF0FW01.PFICD[2] = " ";
  PF0FW01.PFICD[3] = " ";
  PF0FW01.PFICD[4] = " ";
  PF0FW01.PFICD[5] = " ";
  PF0FW01.PFICD[6] = " ";
  PF0FW01.PFICD[7] = " ";
  PF0FW01.PFICD[8] = " ";
  ;
  ;
  PFWIDX = 45;
  while (PFWIDX > 0)
    ;
    PF0F300(); /* edit main screen & setup secondary screens*/
    ;
    PFWIDX = PFWIDX - 1;
  end
  ;
  ;
  PFWREC.PFWTBLF = " ";
  PF0FW01.PF0FWPSL = " ";
  PF0FW01.PF0FWPFL = " ";
  ;
  ;
  PFWTBLX = 8;
  while (PFWTBLX > 0) /* make sure no gaps (1-8)*/
    ;
    PF0F310(); /* validate element table numbering*/
    ;
    PFWTBLX = PFWTBLX - 1;
  end
  ;
  ;
  PFWCOUNT = 0; /* initialize counter*/
  if (PF0FM001.PF0FMCDE[45] > 0) /* product field has been selected*/
    PFWCOUNT = PFWCOUNT + 1;
  end
  if (PF0FM001.PF0FMCDE[42] > 0) /* product field has been selected*/
    PFWCOUNT = PFWCOUNT + 1;
  end
  if (PF0FM001.PF0FMCDE[39] > 0) /* product field has been selected*/
    PFWCOUNT = PFWCOUNT + 1;
  end
  ;
  if (PFWCOUNT > 1) /* if more than 1 product field is selected*/
    if (PF0FM001.PF0FMCDE[45] > 0) /* highlight the product fields that*/
      PFWERRF = "Y"; /* were entered*/
      converseLib.validationFailed(117); /* only one product field can be*/
                                   /* selected*/
      set PF0FM001.PF0FMCDE[45] cursor, bold;
    end
    if (PF0FM001.PF0FMCDE[42] > 0) /* highlight the product fields that*/
      PFWERRF = "Y"; /* were entered*/
      converseLib.validationFailed(117); /* only one product field can be*/
                                   /* selected*/
      set PF0FM001.PF0FMCDE[42] cursor, bold;
    end
    if (PF0FM001.PF0FMCDE[39] > 0) /* highlight the product fields that*/
      PFWERRF = "Y"; /* were entered*/
      converseLib.validationFailed(117); /* only one product field can be*/
                                   /* selected*/
      set PF0FM001.PF0FMCDE[39] cursor, bold;
    end
  end
  ;
  ;
  if (PF0FM001.PF0FMACT == "D") /* if this a delete,*/
    ;
    PF0F900(); /* delete dproft.vrptat01 row*/
    ;
    return;
  end
  ;
  ;
  PF0F210(); /* edit hierarchy logic*/
  ;
  ;
  if (PF0FW01.PF0FWPFL == "Y") /* if a product was entered*/
    ;
    PF0F320(); /* edit product entry*/
    ;
  end
  ;
  ;
  if (PF0FW01.PF0FWPSL == "Y") /* if a product was non-selected, make sure*/
                            /* all other elmts have specific vals*/
    PF0F330(); /* product non-selection edit*/
    ;
  end
  ;
  ;
   /* If user with low security does inquiries on attributes*/
   /* created by a high security user, errors may be generated*/
   /* above (eg: in pf0f330).  Bypass these errors for inquiries*/
   /* so the secondary screens may be conversed.*/
  ;
  if (PFWREC.PFWERRF == "Y") /* if main menu had errors*/
    if (PF0FM001.PF0FMACT == "I" /* if action is inquiry*/
     || PF0FM001.PF0FMACT == " ")
      PFWREC.PFWERRF = "N"; /* ignore errors on inquiries*/
      converseLib.validationFailed(0);
    else
      return; /* return error*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf12) /* if user pushed edit only pfkey*/
    PFWERRF = "Y";
    converseLib.validationFailed(051); /* edit successful; press enter to perform update*/
    return;
  end
  ;
  ;
   /* ************************************************************/
   /* *  process the secondary screens                          **/
   /* ************************************************************/
  ;
  PF0F220(); /* set pfdrec empty*/
  ;
  ;
  if (PF0FW01.PF0FWUP1 == "Y") /* if item from col. 1 selected*/
    PFWREC.PFWERRF = "Y";
    while (PFWREC.PFWERRF == "Y")
      ;
      PF0F600(); /* process pf0fm002 screen*/
      ;
    end
  end
  ;
  if (PFWREC.PFWEOAF == "Y") /* end the application?*/
    return;
  end
  ;
  if (PFWREC.PFWEOSF == "Y") /* return to the previous screen*/
    return;
  end
  ;
  ;
  if (PF0FW01.PF0FWUP2 == "Y") /* if item from col. 2 selected*/
    PFWREC.PFWERRF = "Y";
    while (PFWREC.PFWERRF == "Y")
      ;
      PF0F700(); /* process pf0fm003 screen*/
      ;
    end
  end
  ;
  if (PFWREC.PFWEOAF == "Y") /* end the application?*/
    return;
  end
  ;
  if (PFWREC.PFWEOSF == "Y") /* return to the previous screen*/
    return;
  end
  ;
  ;
  if (PF0FW01.PF0FWUP3 == "Y") /* if item from col. 3 selected*/
    PFWREC.PFWERRF = "Y";
    while (PFWREC.PFWERRF == "Y")
      ;
      PF0F800(); /* send pf0fm004 screen*/
      ;
    end
  end
  ;
  if (PFWREC.PFWEOSF == "Y") /* return to the previous screen*/
    return;
  end
  ;
  ;
  if (PF0FM001.PF0FMACT == " " /* if request is an inquiry, return*/
   || PF0FM001.PF0FMACT == "I")
    return;
  end
  ;
  ;
  if (PF0FM001.PF0FMACT == "C") /* if request is a change,*/
    if (PFWREC.PFWRECF == "Y")
      ;
      PF0F665(); /* update dproft.vrptat01 row*/
      ;
    end
  end
  ;
  ;
  if (PF0FM001.PF0FMACT == "A") /* if request is an add,*/
    ;
    PF0F675(); /* add dproft.vrptat01 row*/
    ;
  end
  ;
  ;
  PF0FW01.PF0FWUP1 = "N"; /* reset column flags*/
  PF0FW01.PF0FWUP2 = "N";
  PF0FW01.PF0FWUP3 = "N";
end // end PF0F200

// edit hierarchy logic
Function PF0F210()
   /* *********************************************************/
   /* *  the purpose of this routine is to check the order   **/
   /* *  that elements were selected. in other words, it     **/
   /* *  doesn't make sense to give sales rep. an element #  **/
   /* *  of 3 and agency an element # of 4. this will make   **/
   /* *  agency a subset of sales rep. when the order should **/
   /* *  be the opposite.                                    **/
   /* *********************************************************/
  ;
  if (PF0FM001.PF0FMCDE[6] > 0)
    if (PF0FM001.PF0FMCDE[13] > PF0FM001.PF0FMCDE[6]) /* (13) - summary gpc*/
      converseLib.validationFailed(171); /* (6) - gpc*/
      PFWERRF = "Y";
      set PF0FM001.PF0FMCDE[6] cursor, bold;
    end
  end
  ;
   /* ******************************************************************/
   /* the section below has been commented out, because #19 is now XPL.*/
   /* (it used to be financial level 2). 011494/mjk.*/
   /* #16 has been renamed 'business unit', but is still fin. lvl 1.*/
   /* ******************************************************************/
   /* IF PF0FM001.PF0FMCDE(19) > 0;*/
   /* IF PF0FM001.PF0FMCDE(16) > PF0FM001.PF0FMCDE(19);*/
   /* /* (16) - finc. lvl. 1*/
   /* MOVE 172 TO EZEMNO;                       /* (19) - finc. lvl. 2*/
   /* MOVE 'Y' TO PFWERRF;*/
   /* SET PF0FM001.PF0FMCDE(19) CURSOR,BRIGHT;*/
   /* END;*/
   /* END;*/
   /* ******************************************************************/
  ;
  if (PF0FM001.PF0FMCDE[37] > 0)
    if (PF0FM001.PF0FMCDE[34] > PF0FM001.PF0FMCDE[37])
                                   /* (34) - summ. prod. grp*/
      converseLib.validationFailed(173); /* (37) - product group*/
      PFWERRF = "Y";
      set PF0FM001.PF0FMCDE[37] cursor, bold;
    end
  end
  ;
  if (PF0FM001.PF0FMCDE[12] > 0)
    if (PF0FM001.PF0FMCDE[09] > PF0FM001.PF0FMCDE[12])
                                   /* (9) - summ. prod. type*/
      converseLib.validationFailed(174); /* (12) - product type*/
      PFWERRF = "Y";
      set PF0FM001.PF0FMCDE[12] cursor, bold;
    end
  end
  ;
  if (PF0FM001.PF0FMCDE[4] > 0)
    if (PF0FM001.PF0FMCDE[1] > PF0FM001.PF0FMCDE[4]) /* (1) - sales group*/
      converseLib.validationFailed(175); /* (4) - agency*/
      PFWERRF = "Y";
      set PF0FM001.PF0FMCDE[4] cursor, bold;
    end
  end
  ;
   /* ******************************************************************/
   /* the section below has been commented out, because #2 is now XDR.*/
   /* (it used to be sales rep (sm4repid)).  011494/mjk.*/
   /* ******************************************************************/
   /* IF PF0FM001.PF0FMCDE(2) > 0;*/
   /* IF PF0FM001.PF0FMCDE(1) > PF0FM001.PF0FMCDE(2); /* (1) - sales group*/
   /* MOVE 176 EZEMNO;*/
   /* /* (2) - sales rep.*/
   /* MOVE 'Y' TO PFWERRF;*/
   /* SET PF0FM001.PF0FMCDE(2) CURSOR,BRIGHT;*/
   /* END;*/
   /* END;*/
   /* ;*/
   /* IF PF0FM001.PF0FMCDE(2) > 0;*/
   /* IF PF0FM001.PF0FMCDE(4) > PF0FM001.PF0FMCDE(2);   /* (4) - agency*/
   /* MOVE 177 EZEMNO;*/
   /* /* (2) - sales rep.*/
   /* MOVE 'Y' TO PFWERRF;*/
   /* SET PF0FM001.PF0FMCDE(2) CURSOR,BRIGHT;*/
   /* END;*/
   /* END;*/
   /* ******************************************************************/
  ;
  if (PF0FM001.PF0FMCDE[5] > 0)
    if (PF0FM001.PF0FMCDE[7] > PF0FM001.PF0FMCDE[5])
                                   /* (5) - account class*/
      converseLib.validationFailed(178); /* (7) - account type*/
      PFWERRF = "Y";
      set PF0FM001.PF0FMCDE[5] cursor, bold;
    end
  end
  ;
end // end PF0F210

// set pfdrec empty
Function PF0F220()
   /* *****************************************************/
   /* *    this routine is used to clear pfdrec of       **/
   /* *    data returned from the data base.             **/
   /* *****************************************************/
  ;
  PFWSUB3 = 1; /* intialize subscript*/
  ;
  while (PFWSUB3 < 8) /* move spaces to pfdrec data elements*/
    PFDREC.PFICD[PFWSUB3] = " ";
    PFDREC.PFDVALFL[PFWSUB3] = " ";
    PFWSUB3 = PFWSUB3 + 1;
  end
  ;
  PFWSUB3 = 1; /* intialize subscript*/
  ;
  while (PFWSUB3 < 57) /* move spaces to pfdrec code values*/
    PFDREC.PFDCDVAL[PFWSUB3] = " ";
    PFWSUB3 = PFWSUB3 + 1;
  end
  ;
  PFDREC.PFICD[8] = " ";
  PFDREC.PFDVALFL[8] = " ";
  ;
  PFWSUB3 = 1; /* intialize subscript*/
  ;
  while (PFWSUB3 < 10) /* move spaces to product fields*/
    PFDREC.XGPCD[PFWSUB3] = " ";
    PFDREC.SY1STNBR[PFWSUB3] = " ";
    PFDREC.SY2CLRID[PFWSUB3] = " ";
    PFDREC.XDMCD[PFWSUB3] = " ";
    PFDREC.XQACD[PFWSUB3] = " ";
    PFDREC.XLCCD[PFWSUB3] = " ";
    PFWSUB3 = PFWSUB3 + 1;
  end
end // end PF0F220

// edit main scr.,setup secondary
Function PF0F300()
   /* **********************************************************/
   /* *  edit the info. entered on the main screen starting   **/
   /* *  at the last entry position and decrement to the      **/
   /* *  first position. if an element of 1-8 is entered,     **/
   /* *  that element is saved in the relative (1-8) position **/
   /* *  of a table.                                          **/
   /* ------------------------------------------------------- **/
   /* Added special edit to bypass attributes 24 and 33 for the*/
   /* 'S' check, since the 'S' is put there by pf0f to indicate*/
   /* that if those attributes are selected, there MUST be a*/
   /* specific value selected.  0194/mjk.*/
   /* **********************************************************/
  ;
  if (PFWIDX == 24
   || PFWIDX == 33) /* bypass the 'S' check if attribute 24*/
                                   /* or 33*/
    /* next sentence*/
  else
    if (PF0FM001.PFDVALFL[PFWIDX] == "S" /* whoops! they entered a*/
     && PF0FM001.PF0FMCDE[PFWIDX] == 0)  /* selection without an element*/
      converseLib.validationFailed(018); /* sel can't be made without entering*/
                                   /* element #*/
      PFWREC.PFWERRF = "Y";
      set PF0FM001.PFDVALFL[PFWIDX] bold;
      set PF0FM001.PF0FMCDE[PFWIDX] bold;
      set PF0FM001.PF0FMCDE[PFWIDX] cursor;
    end
  end
  ;
   /* the 2 'IF' statements below have been added to keep the users from*/
   /* trying to get rid of the 'S' that we've set for attributes 24 & 33.*/
   /* 0194/mjk.*/
  if (PF0FM001.PFDVALFL[24] != "S")
    converseLib.validationFailed(360); /* the letter 's' must be kept here,*/
                                  /* whether attribute is selected or not.*/
    PFWREC.PFWERRF = "Y";
    set PF0FM001.PFDVALFL[24] bold;
    set PF0FM001.PFDVALFL[24] cursor;
  end
  ;
  if (PF0FM001.PFDVALFL[33] != "S")
    converseLib.validationFailed(361); /* the letter 's' must be kept here,*/
                                  /* whether attribute is selected or not.*/
    PFWREC.PFWERRF = "Y";
    set PF0FM001.PFDVALFL[33] bold;
    set PF0FM001.PFDVALFL[33] cursor;
  end
  ;
  if (PF0FM001.PFDVALFL[PFWIDX] != " ")
    if (PF0FM001.PFDVALFL[PFWIDX] != "S") /* they must use an 's'*/
      converseLib.validationFailed(021); /* the letter 's' must be used to make a*/
                                   /* selection*/
      PFWREC.PFWERRF = "Y";
      set PF0FM001.PFDVALFL[PFWIDX] bold;
      set PF0FM001.PFDVALFL[PFWIDX] cursor;
    end
  end
  ;
  if (PF0FM001.PF0FMCDE[PFWIDX] != 0)
    if (PF0FM001.PF0FMCDE[PFWIDX] < 1 /* they can only enter*/
     || PF0FM001.PF0FMCDE[PFWIDX] > 8) /* elements in the range of 1-8*/
      converseLib.validationFailed(019); /* element # must be in the range of 1*/
                                   /* thru 8*/
      PFWREC.PFWERRF = "Y";
      set PF0FM001.PF0FMCDE[PFWIDX] bold;
      set PF0FM001.PF0FMCDE[PFWIDX] cursor;
    end
  end
  ;
  if (PF0FM001.PF0FMCDE[PFWIDX] > 0 /* first, check for dup.*/
   && PF0FM001.PF0FMCDE[PFWIDX] < 9) /* element numbers.*/
    PFWREC.PFWTBLX = PF0FM001.PF0FMCDE[PFWIDX];
    if (PF0FW01.PFICD[PFWTBLX] > " ") /* if element is already in table*/
      converseLib.validationFailed(020); /* duplicate element # entered*/
      PFWREC.PFWERRF = "Y";
      set PF0FM001.PF0FMCDE[PFWIDX] bold;
      set PF0FM001.PF0FMCDE[PFWIDX] cursor;
    else /* else save it in ws*/
      PF0FW01.PFICD[PFWTBLX] = PF0FT.PFICD[PFWIDX];
      PF0FW01.PFDVALFL[PFWTBLX] = PF0FM001.PFDVALFL[PFWIDX];
      set PF0FM001.PF0FMCDE[PFWIDX] normal;
      set PF0FM001.PFDVALFL[PFWIDX] normal;
      ;
      PF0F400(); /* setup secondary screens*/
      ;
    end
  end
  ;
  if (PF0FM001.PF0FMCDE[PFWIDX] == 8) /* element #8 can be used for product*/
    if (PFWIDX == 39 
     /* selection only. if other attributes*/
     || PFWIDX == 42 /* are selected it's an error.*/
     || PFWIDX == 45)
    else
      set PF0FM001.PF0FMCDE[PFWIDX] cursor, bold;
      PFWREC.PFWERRF = "Y";
      converseLib.validationFailed(181); /* element #8 must be product only*/
    end
  end
end // end PF0F300

// validate ele. tbl. numbering
Function PF0F310()
   /* *************************************************************/
   /* *   check element table (PF0Fw01) to make sure the data    **/
   /* *   entry person did not leave a gap(s) in the element     **/
   /* *   numbers entered. element #s should be 1-8 in sequence  **/
   /* *   (i.e. 1,2,3,4). an entry of 1,2,4 will not be allowed. **/
   /* *************************************************************/
  ;
  if (PF0FW01.PFICD[PFWTBLX] == " " /* if a gap exists in*/
   && PFWREC.PFWTBLF == "Y")        /* the element table it's*/
    converseLib.validationFailed(022); /* an error!*/
    PFWREC.PFWERRF = "Y";
  end
  ;
  if (PFWTBLX != 8) /* for all non-product element entries*/
    if (PF0FW01.PFICD[PFWTBLX] != " ")
                                   /* if the element table has an entry,*/
      PFWREC.PFWTBLF = "Y"; /* set the flag*/
    end
  end
  ;
  if (PF0FW01.PFICD[PFWTBLX] == "39"
   /* if product selected, set prod. flag*/
   || PF0FW01.PFICD[PFWTBLX] == "42"
   || PF0FW01.PFICD[PFWTBLX] == "45")
    PF0FW01.PF0FWPFL = "Y";
    if (PF0FW01.PFDVALFL[PFWTBLX] == " ")
      PF0FW01.PF0FWPSL = "Y";
    end
  end
end // end PF0F310

// edit product entry
Function PF0F320()
   /* ****************************************************/
   /* *   this routine will scan the elements entered   **/
   /* *   to make sure that the product selection was   **/
   /* *   the last element # entered.                   **/
   /* ****************************************************/
  ;
  PFWSUB1 = 1; /* reset subscript*/
  PF0FW01.PF0FWPFL = " "; /* reset product flag*/
  ;
  while (PFWSUB1 < 8)
    if (PF0FW01.PFICD[PFWSUB1] > " ") /* if an element has been entered*/
      if (PF0FW01.PF0FWPFL == "Y") /* and a product has already been*/
        PFWREC.PFWERRF = "Y"; /* entered, it's an error.*/
        converseLib.validationFailed(187); /* product must be last element entered*/
      end
    end
    if (PF0FW01.PFICD[PFWSUB1] == "39" /* if element is a product,*/
     || PF0FW01.PFICD[PFWSUB1] == "42" /* set the product flag*/
     || PF0FW01.PFICD[PFWSUB1] == "45")
      PF0FW01.PF0FWPFL = "Y";
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
end // end PF0F320

// product non-selection edit
Function PF0F330()
   /* *****************************************************/
   /* *  the user has entered product as an element but  **/
   /* *  isn't entering specific values for product.     **/
   /* *  because this would create a mammoth  report,    **/
   /* *  all other elements must have selections made,   **/
   /* *  unless the user has high change or add security.**/
   /* *****************************************************/
  ;
  PF0FW01.PF0FWPSL = " "; /* clear product non-selection flag*/
  ;
  if (PF0FM001.PF0FMACT == "C" /* if action is change*/
   && COMMAREA.CACLVL[1] == "Y") /* and user has high change security*/
    return; /* bypass this edit restriction*/
  end
  if (PF0FM001.PF0FMACT == "A" /* if action is add*/
   && COMMAREA.CAALVL[1] == "Y") /* and user has high add security*/
    return; /* bypass this edit restriction*/
  end
  ;
  PFWREC.PFWSUB1 = 1;
  while (PFWREC.PFWSUB1 < 8)
    if (PF0FW01.PFICD[PFWSUB1] > " ") /* if an element was entered*/
      if (PF0FW01.PFICD[PFWSUB1] != "39" /* and it isn't a product*/
       && PF0FW01.PFICD[PFWSUB1] != "42" 
       && PF0FW01.PFICD[PFWSUB1] != "45")
        if (PF0FW01.PFDVALFL[PFWSUB1] == " ")
                                   /* if an entry for specific vals*/
          PFWREC.PFWERRF = "Y"; /* wasn't made, it's an error*/
          converseLib.validationFailed(188);
                                   /* all other elements must have specific*/
        end /* values when product does not*/
      end
    end
    PFWREC.PFWSUB1 = PFWREC.PFWSUB1 + 1;
  end
end // end PF0F330

// setup secondary screens
Function PF0F400()
   /* ***********************************************************/
   /* *  THIS PROCESS WILL DETERMINE IF An 's' was entered     **/
   /* *  in the selection field of the primary screen for      **/
   /* *  the indexed field.if an 's' was entered, the data     **/
   /* *  entry fields for that data element are set to         **/
   /* *  'unprotected' to permit data entry and a flag is set  **/
   /* *  to indicate which secondary screen(s) are to be sent. **/
   /* ***********************************************************/
  ;
  if (PFWIDX == 45) /* if this the first time through the*/
                                   /* routine,*/
    set PF0FM002 initial; /* clear all three screens*/
    set PF0FM003 initial;
    set PF0FM004 initial;
  end
  ;
  if (PF1REC.PF1ORIG == "PF0C") /* if "pf key" bridge was used,*/
    PF0FM002.PF0FMPFK = "15:SUM MAINT";
                                   /* place the appropriate pf key*/
    PF0FM003.PF0FMPFK = "15:SUM MAINT";
                                   /* place the appropriate pf key*/
    PF0FM004.PF0FMPFK = "15:SUM MAINT";
                                   /* place the appropriate pf key*/
    set PF0FM002.PF0FMPFK normal;
    set PF0FM002.PF0FMPFK skip;
    set PF0FM003.PF0FMPFK normal;
    set PF0FM003.PF0FMPFK skip;
    set PF0FM004.PF0FMPFK normal;
    set PF0FM004.PF0FMPFK skip;
  else /* and prompt on the bottom of*/
    if (PF1REC.PF1ORIG == "PF0G") /* the screen.*/
      PF0FM002.PF0FMPFK = "15:SUM REQ";
      PF0FM003.PF0FMPFK = "15:SUM REQ";
      PF0FM004.PF0FMPFK = "15:SUM REQ";
      set PF0FM002.PF0FMPFK normal;
      set PF0FM002.PF0FMPFK skip;
      set PF0FM003.PF0FMPFK normal;
      set PF0FM003.PF0FMPFK skip;
      set PF0FM004.PF0FMPFK normal;
      set PF0FM004.PF0FMPFK skip;
    else
      if (PF1REC.PF1ORIG == "PF0H")
        PF0FM002.PF0FMPFK = "15:SUM PRT";
        PF0FM003.PF0FMPFK = "15:SUM PRT";
        PF0FM004.PF0FMPFK = "15:SUM PRT";
        set PF0FM002.PF0FMPFK normal;
        set PF0FM002.PF0FMPFK skip;
        set PF0FM003.PF0FMPFK normal;
        set PF0FM003.PF0FMPFK skip;
        set PF0FM004.PF0FMPFK normal;
        set PF0FM004.PF0FMPFK skip;
      end
    end
  end
  ;
  PF0FM002.PFDREF = PF0FM001.PFDREF; /* move ref # from 1st screen*/
  PF0FM003.PFDREF = PF0FM001.PFDREF; /* to all screens*/
  PF0FM004.PFDREF = PF0FM001.PFDREF;
  ;
  if (PFWIDX == 1) /* if field #1  is selected*/
    if (PF0FM001.PF0FMCDE[1] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[1] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.PF0FMYGR[1] normal;
        set PF0FM002.PF0FMYGR[2] normal;
        set PF0FM002.PF0FMYGR[3] normal;
        set PF0FM002.PF0FMYGR[4] normal;
        set PF0FM002.PF0FMYGR[5] normal;
        set PF0FM002.PF0FMYGR[6] normal;
        set PF0FM002.PF0FMYGR[7] normal;
        set PF0FM002.PF0FMYGR[8] normal;
        set PF0FM002.PF0FMYGR[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.PF0FMYGR[1] protect;
        set PF0FM002.PF0FMYGR[2] protect;
        set PF0FM002.PF0FMYGR[3] protect;
        set PF0FM002.PF0FMYGR[4] protect;
        set PF0FM002.PF0FMYGR[5] protect;
        set PF0FM002.PF0FMYGR[6] protect;
        set PF0FM002.PF0FMYGR[7] protect;
        set PF0FM002.PF0FMYGR[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.PF0FMYGR[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.PF0FMYGR[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.PF0FMYGR[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.PF0FMYGR[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.PF0FMYGR[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.PF0FMYGR[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.PF0FMYGR[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.PF0FMYGR[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 2) /* if field #2  is selected*/
    if (PF0FM001.PF0FMCDE[2] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[2] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.XDR-PROD-REG-CD[1] normal;
        set PF0FM003.XDR-PROD-REG-CD[2] normal;
        set PF0FM003.XDR-PROD-REG-CD[3] normal;
        set PF0FM003.XDR-PROD-REG-CD[4] normal;
        set PF0FM003.XDR-PROD-REG-CD[5] normal;
        set PF0FM003.XDR-PROD-REG-CD[6] normal;
        set PF0FM003.XDR-PROD-REG-CD[7] normal;
        set PF0FM003.XDR-PROD-REG-CD[8] normal;
        set PF0FM003.XDR-PROD-REG-CD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.XDR-PROD-REG-CD[1] protect;
        set PF0FM003.XDR-PROD-REG-CD[2] protect;
        set PF0FM003.XDR-PROD-REG-CD[3] protect;
        set PF0FM003.XDR-PROD-REG-CD[4] protect;
        set PF0FM003.XDR-PROD-REG-CD[5] protect;
        set PF0FM003.XDR-PROD-REG-CD[6] protect;
        set PF0FM003.XDR-PROD-REG-CD[7] protect;
        set PF0FM003.XDR-PROD-REG-CD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.XDR-PROD-REG-CD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.XDR-PROD-REG-CD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.XDR-PROD-REG-CD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.XDR-PROD-REG-CD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.XDR-PROD-REG-CD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.XDR-PROD-REG-CD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.XDR-PROD-REG-CD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.XDR-PROD-REG-CD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 3) /* if field #3  is selected*/
    if (PF0FM001.PF0FMCDE[3] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[3] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XGACD[1] normal;
        set PF0FM004.XGACD[2] normal;
        set PF0FM004.XGACD[3] normal;
        set PF0FM004.XGACD[4] normal;
        set PF0FM004.XGACD[5] normal;
        set PF0FM004.XGACD[6] normal;
        set PF0FM004.XGACD[7] normal;
        set PF0FM004.XGACD[8] normal;
        set PF0FM004.XGACD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XGACD[1] protect;
        set PF0FM004.XGACD[2] protect;
        set PF0FM004.XGACD[3] protect;
        set PF0FM004.XGACD[4] protect;
        set PF0FM004.XGACD[5] protect;
        set PF0FM004.XGACD[6] protect;
        set PF0FM004.XGACD[7] protect;
        set PF0FM004.XGACD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.XGACD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.XGACD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.XGACD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.XGACD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.XGACD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.XGACD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.XGACD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.XGACD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 4) /* if field #4  is selected*/
    if (PF0FM001.PF0FMCDE[4] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[4] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.SM1AGYID[1] normal;
        set PF0FM002.SM1AGYID[2] normal;
        set PF0FM002.SM1AGYID[3] normal;
        set PF0FM002.SM1AGYID[4] normal;
        set PF0FM002.SM1AGYID[5] normal;
        set PF0FM002.SM1AGYID[6] normal;
        set PF0FM002.SM1AGYID[7] normal;
        set PF0FM002.SM1AGYID[8] normal;
        set PF0FM002.SM1AGYID[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.SM1AGYID[1] protect;
        set PF0FM002.SM1AGYID[2] protect;
        set PF0FM002.SM1AGYID[3] protect;
        set PF0FM002.SM1AGYID[4] protect;
        set PF0FM002.SM1AGYID[5] protect;
        set PF0FM002.SM1AGYID[6] protect;
        set PF0FM002.SM1AGYID[7] protect;
        set PF0FM002.SM1AGYID[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.SM1AGYID[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.SM1AGYID[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.SM1AGYID[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.SM1AGYID[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.SM1AGYID[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.SM1AGYID[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.SM1AGYID[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.SM1AGYID[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 5) /* if field #5  is selected*/
    if (PF0FM001.PF0FMCDE[5] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[5] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.PF0FMXAU[1] normal;
        set PF0FM003.PF0FMXAU[2] normal;
        set PF0FM003.PF0FMXAU[3] normal;
        set PF0FM003.PF0FMXAU[4] normal;
        set PF0FM003.PF0FMXAU[5] normal;
        set PF0FM003.PF0FMXAU[6] normal;
        set PF0FM003.PF0FMXAU[7] normal;
        set PF0FM003.PF0FMXAU[8] normal;
        set PF0FM003.PF0FMXAU[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.PF0FMXAU[1] protect;
        set PF0FM003.PF0FMXAU[2] protect;
        set PF0FM003.PF0FMXAU[3] protect;
        set PF0FM003.PF0FMXAU[4] protect;
        set PF0FM003.PF0FMXAU[5] protect;
        set PF0FM003.PF0FMXAU[6] protect;
        set PF0FM003.PF0FMXAU[7] protect;
        set PF0FM003.PF0FMXAU[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.PF0FMXAU[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.PF0FMXAU[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.PF0FMXAU[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.PF0FMXAU[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.PF0FMXAU[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.PF0FMXAU[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.PF0FMXAU[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.PF0FMXAU[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 6) /* if field #6  is selected*/
    if (PF0FM001.PF0FMCDE[6] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[6] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XGPCD[1] normal;
        set PF0FM004.XGPCD[2] normal;
        set PF0FM004.XGPCD[3] normal;
        set PF0FM004.XGPCD[4] normal;
        set PF0FM004.XGPCD[5] normal;
        set PF0FM004.XGPCD[6] normal;
        set PF0FM004.XGPCD[7] normal;
        set PF0FM004.XGPCD[8] normal;
        set PF0FM004.XGPCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XGPCD[1] protect;
        set PF0FM004.XGPCD[2] protect;
        set PF0FM004.XGPCD[3] protect;
        set PF0FM004.XGPCD[4] protect;
        set PF0FM004.XGPCD[5] protect;
        set PF0FM004.XGPCD[6] protect;
        set PF0FM004.XGPCD[7] protect;
        set PF0FM004.XGPCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.XGPCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.XGPCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.XGPCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.XGPCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.XGPCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.XGPCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.XGPCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.XGPCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 7) /* if field #7  is selected*/
    if (PF0FM001.PF0FMCDE[7] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[7] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.XATCD[1] normal;
        set PF0FM002.XATCD[2] normal;
        set PF0FM002.XATCD[3] normal;
        set PF0FM002.XATCD[4] normal;
        set PF0FM002.XATCD[5] normal;
        set PF0FM002.XATCD[6] normal;
        set PF0FM002.XATCD[7] normal;
        set PF0FM002.XATCD[8] normal;
        set PF0FM002.XATCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.XATCD[1] protect;
        set PF0FM002.XATCD[2] protect;
        set PF0FM002.XATCD[3] protect;
        set PF0FM002.XATCD[4] protect;
        set PF0FM002.XATCD[5] protect;
        set PF0FM002.XATCD[6] protect;
        set PF0FM002.XATCD[7] protect;
        set PF0FM002.XATCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.XATCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.XATCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.XATCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.XATCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.XATCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.XATCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.XATCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.XATCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 8) /* if field #8  is selected*/
    if (PF0FM001.PF0FMCDE[8] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[8] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.XOBCD[1] normal;
        set PF0FM003.XOBCD[2] normal;
        set PF0FM003.XOBCD[3] normal;
        set PF0FM003.XOBCD[4] normal;
        set PF0FM003.XOBCD[5] normal;
        set PF0FM003.XOBCD[6] normal;
        set PF0FM003.XOBCD[7] normal;
        set PF0FM003.XOBCD[8] normal;
        set PF0FM003.XOBCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.XOBCD[1] protect;
        set PF0FM003.XOBCD[2] protect;
        set PF0FM003.XOBCD[3] protect;
        set PF0FM003.XOBCD[4] protect;
        set PF0FM003.XOBCD[5] protect;
        set PF0FM003.XOBCD[6] protect;
        set PF0FM003.XOBCD[7] protect;
        set PF0FM003.XOBCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.XOBCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.XOBCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.XOBCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.XOBCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.XOBCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.XOBCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.XOBCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.XOBCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 9) /* if field #9  is selected*/
    if (PF0FM001.PF0FMCDE[9] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[9] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.PF0FMYPR[1] normal;
        set PF0FM004.PF0FMYPR[2] normal;
        set PF0FM004.PF0FMYPR[3] normal;
        set PF0FM004.PF0FMYPR[4] normal;
        set PF0FM004.PF0FMYPR[5] normal;
        set PF0FM004.PF0FMYPR[6] normal;
        set PF0FM004.PF0FMYPR[7] normal;
        set PF0FM004.PF0FMYPR[8] normal;
        set PF0FM004.PF0FMYPR[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.PF0FMYPR[1] protect;
        set PF0FM004.PF0FMYPR[2] protect;
        set PF0FM004.PF0FMYPR[3] protect;
        set PF0FM004.PF0FMYPR[4] protect;
        set PF0FM004.PF0FMYPR[5] protect;
        set PF0FM004.PF0FMYPR[6] protect;
        set PF0FM004.PF0FMYPR[7] protect;
        set PF0FM004.PF0FMYPR[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.PF0FMYPR[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.PF0FMYPR[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.PF0FMYPR[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.PF0FMYPR[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.PF0FMYPR[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.PF0FMYPR[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.PF0FMYPR[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.PF0FMYPR[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 10) /* if field #10 is selected*/
    if (PF0FM001.PF0FMCDE[10] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[10] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.XDVCD[1] normal;
        set PF0FM002.XDVCD[2] normal;
        set PF0FM002.XDVCD[3] normal;
        set PF0FM002.XDVCD[4] normal;
        set PF0FM002.XDVCD[5] normal;
        set PF0FM002.XDVCD[6] normal;
        set PF0FM002.XDVCD[7] normal;
        set PF0FM002.XDVCD[8] normal;
        set PF0FM002.XDVCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.XDVCD[1] protect;
        set PF0FM002.XDVCD[2] protect;
        set PF0FM002.XDVCD[3] protect;
        set PF0FM002.XDVCD[4] protect;
        set PF0FM002.XDVCD[5] protect;
        set PF0FM002.XDVCD[6] protect;
        set PF0FM002.XDVCD[7] protect;
        set PF0FM002.XDVCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.XDVCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.XDVCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.XDVCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.XDVCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.XDVCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.XDVCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.XDVCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.XDVCD[8] = PF0FW01.PFDCDVAL[8];
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.XDVCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.XDVCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.XDVCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.XDVCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.XDVCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.XDVCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.XDVCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.XDVCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 11) /* if field #11 is selected*/
    if (PF0FM001.PF0FMCDE[11] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[11] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.PF0FMYIC[1] normal;
        set PF0FM003.PF0FMYIC[2] normal;
        set PF0FM003.PF0FMYIC[3] normal;
        set PF0FM003.PF0FMYIC[4] normal;
        set PF0FM003.PF0FMYIC[5] normal;
        set PF0FM003.PF0FMYIC[6] normal;
        set PF0FM003.PF0FMYIC[7] normal;
        set PF0FM003.PF0FMYIC[8] normal;
        set PF0FM003.PF0FMYIC[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.PF0FMYIC[1] protect;
        set PF0FM003.PF0FMYIC[2] protect;
        set PF0FM003.PF0FMYIC[3] protect;
        set PF0FM003.PF0FMYIC[4] protect;
        set PF0FM003.PF0FMYIC[5] protect;
        set PF0FM003.PF0FMYIC[6] protect;
        set PF0FM003.PF0FMYIC[7] protect;
        set PF0FM003.PF0FMYIC[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.PF0FMYIC[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.PF0FMYIC[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.PF0FMYIC[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.PF0FMYIC[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.PF0FMYIC[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.PF0FMYIC[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.PF0FMYIC[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.PF0FMYIC[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 12) /* if field #12 is selected*/
    if (PF0FM001.PF0FMCDE[12] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[12] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XPRCD[1] normal;
        set PF0FM004.XPRCD[2] normal;
        set PF0FM004.XPRCD[3] normal;
        set PF0FM004.XPRCD[4] normal;
        set PF0FM004.XPRCD[5] normal;
        set PF0FM004.XPRCD[6] normal;
        set PF0FM004.XPRCD[7] normal;
        set PF0FM004.XPRCD[8] normal;
        set PF0FM004.XPRCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XPRCD[1] protect;
        set PF0FM004.XPRCD[2] protect;
        set PF0FM004.XPRCD[3] protect;
        set PF0FM004.XPRCD[4] protect;
        set PF0FM004.XPRCD[5] protect;
        set PF0FM004.XPRCD[6] protect;
        set PF0FM004.XPRCD[7] protect;
        set PF0FM004.XPRCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.XPRCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.XPRCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.XPRCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.XPRCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.XPRCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.XPRCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.XPRCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.XPRCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 13) /* if field #13 is selected*/
    if (PF0FM001.PF0FMCDE[13] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[13] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.PF0FMYGP[1] normal;
        set PF0FM002.PF0FMYGP[2] normal;
        set PF0FM002.PF0FMYGP[3] normal;
        set PF0FM002.PF0FMYGP[4] normal;
        set PF0FM002.PF0FMYGP[5] normal;
        set PF0FM002.PF0FMYGP[6] normal;
        set PF0FM002.PF0FMYGP[7] normal;
        set PF0FM002.PF0FMYGP[8] normal;
        set PF0FM002.PF0FMYGP[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.PF0FMYGP[1] protect;
        set PF0FM002.PF0FMYGP[2] protect;
        set PF0FM002.PF0FMYGP[3] protect;
        set PF0FM002.PF0FMYGP[4] protect;
        set PF0FM002.PF0FMYGP[5] protect;
        set PF0FM002.PF0FMYGP[6] protect;
        set PF0FM002.PF0FMYGP[7] protect;
        set PF0FM002.PF0FMYGP[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.PF0FMYGP[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.PF0FMYGP[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.PF0FMYGP[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.PF0FMYGP[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.PF0FMYGP[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.PF0FMYGP[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.PF0FMYGP[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.PF0FMYGP[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 14) /* if field #14 is selected*/
    if (PF0FM001.PF0FMCDE[14] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[14] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.XWHCD[1] normal;
        set PF0FM003.XWHCD[2] normal;
        set PF0FM003.XWHCD[3] normal;
        set PF0FM003.XWHCD[4] normal;
        set PF0FM003.XWHCD[5] normal;
        set PF0FM003.XWHCD[6] normal;
        set PF0FM003.XWHCD[7] normal;
        set PF0FM003.XWHCD[8] normal;
        set PF0FM003.XWHCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.XWHCD[1] protect;
        set PF0FM003.XWHCD[2] protect;
        set PF0FM003.XWHCD[3] protect;
        set PF0FM003.XWHCD[4] protect;
        set PF0FM003.XWHCD[5] protect;
        set PF0FM003.XWHCD[6] protect;
        set PF0FM003.XWHCD[7] protect;
        set PF0FM003.XWHCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.XWHCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.XWHCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.XWHCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.XWHCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.XWHCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.XWHCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.XWHCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.XWHCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 15) /* if field #15 is selected*/
    if (PF0FM001.PF0FMCDE[15] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[15] == "S") /* if specific values are to b*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set fla*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XFMCD[1] normal;
        set PF0FM004.XFMCD[2] normal;
        set PF0FM004.XFMCD[3] normal;
        set PF0FM004.XFMCD[4] normal;
        set PF0FM004.XFMCD[5] normal;
        set PF0FM004.XFMCD[6] normal;
        set PF0FM004.XFMCD[7] normal;
        set PF0FM004.XFMCD[8] normal;
        set PF0FM004.XFMCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XFMCD[1] protect;
        set PF0FM004.XFMCD[2] protect;
        set PF0FM004.XFMCD[3] protect;
        set PF0FM004.XFMCD[4] protect;
        set PF0FM004.XFMCD[5] protect;
        set PF0FM004.XFMCD[6] protect;
        set PF0FM004.XFMCD[7] protect;
        set PF0FM004.XFMCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.XFMCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.XFMCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.XFMCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.XFMCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.XFMCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.XFMCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.XFMCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.XFMCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 16) /* if field #16 is selected*/
    if (PF0FM001.PF0FMCDE[16] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[16] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.YFACD[1] normal;
        set PF0FM002.YFACD[2] normal;
        set PF0FM002.YFACD[3] normal;
        set PF0FM002.YFACD[4] normal;
        set PF0FM002.YFACD[5] normal;
        set PF0FM002.YFACD[6] normal;
        set PF0FM002.YFACD[7] normal;
        set PF0FM002.YFACD[8] normal;
        set PF0FM002.YFACD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.YFACD[1] protect;
        set PF0FM002.YFACD[2] protect;
        set PF0FM002.YFACD[3] protect;
        set PF0FM002.YFACD[4] protect;
        set PF0FM002.YFACD[5] protect;
        set PF0FM002.YFACD[6] protect;
        set PF0FM002.YFACD[7] protect;
        set PF0FM002.YFACD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.YFACD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.YFACD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.YFACD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.YFACD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.YFACD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.YFACD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.YFACD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.YFACD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 17) /* if field #17 is selected*/
    if (PF0FM001.PF0FMCDE[17] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[17] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.XCNCD[1] normal;
        set PF0FM003.XCNCD[2] normal;
        set PF0FM003.XCNCD[3] normal;
        set PF0FM003.XCNCD[4] normal;
        set PF0FM003.XCNCD[5] normal;
        set PF0FM003.XCNCD[6] normal;
        set PF0FM003.XCNCD[7] normal;
        set PF0FM003.XCNCD[8] normal;
        set PF0FM003.XCNCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.XCNCD[1] protect;
        set PF0FM003.XCNCD[2] protect;
        set PF0FM003.XCNCD[3] protect;
        set PF0FM003.XCNCD[4] protect;
        set PF0FM003.XCNCD[5] protect;
        set PF0FM003.XCNCD[6] protect;
        set PF0FM003.XCNCD[7] protect;
        set PF0FM003.XCNCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.XCNCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.XCNCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.XCNCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.XCNCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.XCNCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.XCNCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.XCNCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.XCNCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  ;
  if (PFWIDX == 18) /* if field #18 is selected*/
    if (PF0FM001.PF0FMCDE[18] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[18] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.PF0FMXBT[1] normal;
        set PF0FM004.PF0FMXBT[2] normal;
        set PF0FM004.PF0FMXBT[3] normal;
        set PF0FM004.PF0FMXBT[4] normal;
        set PF0FM004.PF0FMXBT[5] normal;
        set PF0FM004.PF0FMXBT[6] normal;
        set PF0FM004.PF0FMXBT[7] normal;
        set PF0FM004.PF0FMXBT[8] normal;
        set PF0FM004.PF0FMXBT[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.PF0FMXBT[1] protect;
        set PF0FM004.PF0FMXBT[2] protect;
        set PF0FM004.PF0FMXBT[3] protect;
        set PF0FM004.PF0FMXBT[4] protect;
        set PF0FM004.PF0FMXBT[5] protect;
        set PF0FM004.PF0FMXBT[6] protect;
        set PF0FM004.PF0FMXBT[7] protect;
        set PF0FM004.PF0FMXBT[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.PF0FMXBT[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.PF0FMXBT[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.PF0FMXBT[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.PF0FMXBT[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.PF0FMXBT[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.PF0FMXBT[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.PF0FMXBT[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.PF0FMXBT[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 19) /* if field #19 is selected*/
    if (PF0FM001.PF0FMCDE[19] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[19] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.XPLCD[1] normal;
        set PF0FM002.XPLCD[2] normal;
        set PF0FM002.XPLCD[3] normal;
        set PF0FM002.XPLCD[4] normal;
        set PF0FM002.XPLCD[5] normal;
        set PF0FM002.XPLCD[6] normal;
        set PF0FM002.XPLCD[7] normal;
        set PF0FM002.XPLCD[8] normal;
        set PF0FM002.XPLCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.XPLCD[1] protect;
        set PF0FM002.XPLCD[2] protect;
        set PF0FM002.XPLCD[3] protect;
        set PF0FM002.XPLCD[4] protect;
        set PF0FM002.XPLCD[5] protect;
        set PF0FM002.XPLCD[6] protect;
        set PF0FM002.XPLCD[7] protect;
        set PF0FM002.XPLCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.XPLCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.XPLCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.XPLCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.XPLCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.XPLCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.XPLCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.XPLCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.XPLCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 20) /* if field #20 is selected*/
    if (PF0FM001.PF0FMCDE[20] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[20] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.PF0FMXRY[1] normal;
        set PF0FM003.PF0FMXRY[2] normal;
        set PF0FM003.PF0FMXRY[3] normal;
        set PF0FM003.PF0FMXRY[4] normal;
        set PF0FM003.PF0FMXRY[5] normal;
        set PF0FM003.PF0FMXRY[6] normal;
        set PF0FM003.PF0FMXRY[7] normal;
        set PF0FM003.PF0FMXRY[8] normal;
        set PF0FM003.PF0FMXRY[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.PF0FMXRY[1] protect;
        set PF0FM003.PF0FMXRY[2] protect;
        set PF0FM003.PF0FMXRY[3] protect;
        set PF0FM003.PF0FMXRY[4] protect;
        set PF0FM003.PF0FMXRY[5] protect;
        set PF0FM003.PF0FMXRY[6] protect;
        set PF0FM003.PF0FMXRY[7] protect;
        set PF0FM003.PF0FMXRY[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.PF0FMXRY[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.PF0FMXRY[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.PF0FMXRY[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.PF0FMXRY[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.PF0FMXRY[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.PF0FMXRY[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.PF0FMXRY[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.PF0FMXRY[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 21) /* if field #21 is selected*/
    if (PF0FM001.PF0FMCDE[21] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[21] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XSUCD[1] normal;
        set PF0FM004.XSUCD[2] normal;
        set PF0FM004.XSUCD[3] normal;
        set PF0FM004.XSUCD[4] normal;
        set PF0FM004.XSUCD[5] normal;
        set PF0FM004.XSUCD[6] normal;
        set PF0FM004.XSUCD[7] normal;
        set PF0FM004.XSUCD[8] normal;
        set PF0FM004.XSUCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XSUCD[1] protect;
        set PF0FM004.XSUCD[2] protect;
        set PF0FM004.XSUCD[3] protect;
        set PF0FM004.XSUCD[4] protect;
        set PF0FM004.XSUCD[5] protect;
        set PF0FM004.XSUCD[6] protect;
        set PF0FM004.XSUCD[7] protect;
        set PF0FM004.XSUCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.XSUCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.XSUCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.XSUCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.XSUCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.XSUCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.XSUCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.XSUCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.XSUCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 22) /* if field #22 is selected*/
    if (PF0FM001.PF0FMCDE[22] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[22] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.YMACD[1] normal;
        set PF0FM002.YMACD[2] normal;
        set PF0FM002.YMACD[3] normal;
        set PF0FM002.YMACD[4] normal;
        set PF0FM002.YMACD[5] normal;
        set PF0FM002.YMACD[6] normal;
        set PF0FM002.YMACD[7] normal;
        set PF0FM002.YMACD[8] normal;
        set PF0FM002.YMACD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM002.YMACD[1] protect;
        set PF0FM002.YMACD[2] protect;
        set PF0FM002.YMACD[3] protect;
        set PF0FM002.YMACD[4] protect;
        set PF0FM002.YMACD[5] protect;
        set PF0FM002.YMACD[6] protect;
        set PF0FM002.YMACD[7] protect;
        set PF0FM002.YMACD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.YMACD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.YMACD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.YMACD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.YMACD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.YMACD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.YMACD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.YMACD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.YMACD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 23) /* if field #23 is selected*/
    if (PF0FM001.PF0FMCDE[23] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[23] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.PF0FMYSS[1] normal;
        set PF0FM003.PF0FMYSS[2] normal;
        set PF0FM003.PF0FMYSS[3] normal;
        set PF0FM003.PF0FMYSS[4] normal;
        set PF0FM003.PF0FMYSS[5] normal;
        set PF0FM003.PF0FMYSS[6] normal;
        set PF0FM003.PF0FMYSS[7] normal;
        set PF0FM003.PF0FMYSS[8] normal;
        set PF0FM003.PF0FMYSS[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.PF0FMYSS[1] protect;
        set PF0FM003.PF0FMYSS[2] protect;
        set PF0FM003.PF0FMYSS[3] protect;
        set PF0FM003.PF0FMYSS[4] protect;
        set PF0FM003.PF0FMYSS[5] protect;
        set PF0FM003.PF0FMYSS[6] protect;
        set PF0FM003.PF0FMYSS[7] protect;
        set PF0FM003.PF0FMYSS[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.PF0FMYSS[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.PF0FMYSS[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.PF0FMYSS[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.PF0FMYSS[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.PF0FMYSS[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.PF0FMYSS[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.PF0FMYSS[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.PF0FMYSS[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 24) /* if field #24 is selected*/
    if (PF0FM001.PF0FMCDE[24] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[24] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XFCCD normal;
        /* SET PF0FM004.XFCCD(2) NORMAL;*/
        /* SET PF0FM004.XFCCD(3) NORMAL;*/
        /* SET PF0FM004.XFCCD(4) NORMAL;*/
        /* SET PF0FM004.XFCCD(5) NORMAL;*/
        /* SET PF0FM004.XFCCD(6) NORMAL;*/
        /* SET PF0FM004.XFCCD(7) NORMAL;*/
        /* SET PF0FM004.XFCCD(8) NORMAL;*/
        set PF0FM004.XFCCD cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM004.XFCCD protect;
        /* SET PF0FM004.XFCCD(2) PROTECT;*/
        /* SET PF0FM004.XFCCD(3) PROTECT;*/
        /* SET PF0FM004.XFCCD(4) PROTECT;*/
        /* SET PF0FM004.XFCCD(5) PROTECT;*/
        /* SET PF0FM004.XFCCD(6) PROTECT;*/
        /* SET PF0FM004.XFCCD(7) PROTECT;*/
        /* SET PF0FM004.XFCCD(8) PROTECT;*/
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.XFCCD = PF0FW01.PFDCDVAL[1]; /* move codes*/
        /* MOVE PF0FW01.PFDCDVAL(2) TO PF0FM004.XFCCD(2);/* to screen*/
        /* MOVE PF0FW01.PFDCDVAL(3) TO PF0FM004.XFCCD(3);*/
        /* MOVE PF0FW01.PFDCDVAL(4) TO PF0FM004.XFCCD(4);*/
        /* MOVE PF0FW01.PFDCDVAL(5) TO PF0FM004.XFCCD(5);*/
        /* MOVE PF0FW01.PFDCDVAL(6) TO PF0FM004.XFCCD(6);*/
        /* MOVE PF0FW01.PFDCDVAL(7) TO PF0FM004.XFCCD(7);*/
        /* MOVE PF0FW01.PFDCDVAL(8) TO PF0FM004.XFCCD(8);*/
      end
    end
    return;
  end
  ;
  if (PFWIDX == 25) /* if field #25 is selected*/
    if (PF0FM001.PF0FMCDE[25] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[25] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.YMBCD[1] normal;
        set PF0FM002.YMBCD[2] normal;
        set PF0FM002.YMBCD[3] normal;
        set PF0FM002.YMBCD[4] normal;
        set PF0FM002.YMBCD[5] normal;
        set PF0FM002.YMBCD[6] normal;
        set PF0FM002.YMBCD[7] normal;
        set PF0FM002.YMBCD[8] normal;
        set PF0FM002.YMBCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.YMBCD[1] protect;
        set PF0FM002.YMBCD[2] protect;
        set PF0FM002.YMBCD[3] protect;
        set PF0FM002.YMBCD[4] protect;
        set PF0FM002.YMBCD[5] protect;
        set PF0FM002.YMBCD[6] protect;
        set PF0FM002.YMBCD[7] protect;
        set PF0FM002.YMBCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.YMBCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.YMBCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.YMBCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.YMBCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.YMBCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.YMBCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.YMBCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.YMBCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 26) /* if field #26 is selected*/
    if (PF0FM001.PF0FMCDE[26] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[26] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM003.XDVCD[1] normal;
        set PF0FM003.XDVCD[2] normal;
        set PF0FM003.XDVCD[3] normal;
        set PF0FM003.XDVCD[4] normal;
        set PF0FM003.XDVCD[5] normal;
        set PF0FM003.XDVCD[6] normal;
        set PF0FM003.XDVCD[7] normal;
        set PF0FM003.XDVCD[8] normal;
        set PF0FM003.XDVCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM003.XDVCD[1] protect;
        set PF0FM003.XDVCD[2] protect;
        set PF0FM003.XDVCD[3] protect;
        set PF0FM003.XDVCD[4] protect;
        set PF0FM003.XDVCD[5] protect;
        set PF0FM003.XDVCD[6] protect;
        set PF0FM003.XDVCD[7] protect;
        set PF0FM003.XDVCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.XDVCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.XDVCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.XDVCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.XDVCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.XDVCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.XDVCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.XDVCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.XDVCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 27) /* if field #27 is selected*/
    if (PF0FM001.PF0FMCDE[27] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[27] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.XPCCD[1] normal;
        set PF0FM004.XPCCD[2] normal;
        set PF0FM004.XPCCD[3] normal;
        set PF0FM004.XPCCD[4] normal;
        set PF0FM004.XPCCD[5] normal;
        set PF0FM004.XPCCD[6] normal;
        set PF0FM004.XPCCD[7] normal;
        set PF0FM004.XPCCD[8] normal;
        set PF0FM004.XPCCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.XPCCD[1] protect;
        set PF0FM004.XPCCD[2] protect;
        set PF0FM004.XPCCD[3] protect;
        set PF0FM004.XPCCD[4] protect;
        set PF0FM004.XPCCD[5] protect;
        set PF0FM004.XPCCD[6] protect;
        set PF0FM004.XPCCD[7] protect;
        set PF0FM004.XPCCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.XPCCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.XPCCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.XPCCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.XPCCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.XPCCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.XPCCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.XPCCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.XPCCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 28) /* if field #28 is selected*/
    if (PF0FM001.PF0FMCDE[28] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[28] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.YMCCD[1] normal;
        set PF0FM002.YMCCD[2] normal;
        set PF0FM002.YMCCD[3] normal;
        set PF0FM002.YMCCD[4] normal;
        set PF0FM002.YMCCD[5] normal;
        set PF0FM002.YMCCD[6] normal;
        set PF0FM002.YMCCD[7] normal;
        set PF0FM002.YMCCD[8] normal;
        set PF0FM002.YMCCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.YMCCD[1] protect;
        set PF0FM002.YMCCD[2] protect;
        set PF0FM002.YMCCD[3] protect;
        set PF0FM002.YMCCD[4] protect;
        set PF0FM002.YMCCD[5] protect;
        set PF0FM002.YMCCD[6] protect;
        set PF0FM002.YMCCD[7] protect;
        set PF0FM002.YMCCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.YMCCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.YMCCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.YMCCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.YMCCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.YMCCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.YMCCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.YMCCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.YMCCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  ;
  if (PFWIDX == 29) /* if field #29 is selected*/
    if (PF0FM001.PF0FMCDE[29] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[29] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM003.XRD-RPT-DIV-CD[1] normal;
        set PF0FM003.XRD-RPT-DIV-CD[2] normal;
        set PF0FM003.XRD-RPT-DIV-CD[3] normal;
        set PF0FM003.XRD-RPT-DIV-CD[4] normal;
        set PF0FM003.XRD-RPT-DIV-CD[5] normal;
        set PF0FM003.XRD-RPT-DIV-CD[6] normal;
        set PF0FM003.XRD-RPT-DIV-CD[7] normal;
        set PF0FM003.XRD-RPT-DIV-CD[8] normal;
        set PF0FM003.XRD-RPT-DIV-CD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM003.XRD-RPT-DIV-CD[1] protect;
        set PF0FM003.XRD-RPT-DIV-CD[2] protect;
        set PF0FM003.XRD-RPT-DIV-CD[3] protect;
        set PF0FM003.XRD-RPT-DIV-CD[4] protect;
        set PF0FM003.XRD-RPT-DIV-CD[5] protect;
        set PF0FM003.XRD-RPT-DIV-CD[6] protect;
        set PF0FM003.XRD-RPT-DIV-CD[7] protect;
        set PF0FM003.XRD-RPT-DIV-CD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.XRD-RPT-DIV-CD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.XRD-RPT-DIV-CD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.XRD-RPT-DIV-CD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.XRD-RPT-DIV-CD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.XRD-RPT-DIV-CD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.XRD-RPT-DIV-CD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.XRD-RPT-DIV-CD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.XRD-RPT-DIV-CD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 30) /* if field #30 is selected*/
    if (PF0FM001.PF0FMCDE[30] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[30] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMXQA[1] normal;
        set PF0FM004.PF0FMXQA[2] normal;
        set PF0FM004.PF0FMXQA[3] normal;
        set PF0FM004.PF0FMXQA[4] normal;
        set PF0FM004.PF0FMXQA[5] normal;
        set PF0FM004.PF0FMXQA[6] normal;
        set PF0FM004.PF0FMXQA[7] normal;
        set PF0FM004.PF0FMXQA[8] normal;
        set PF0FM004.PF0FMXQA[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMXQA[1] protect;
        set PF0FM004.PF0FMXQA[2] protect;
        set PF0FM004.PF0FMXQA[3] protect;
        set PF0FM004.PF0FMXQA[4] protect;
        set PF0FM004.PF0FMXQA[5] protect;
        set PF0FM004.PF0FMXQA[6] protect;
        set PF0FM004.PF0FMXQA[7] protect;
        set PF0FM004.PF0FMXQA[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.PF0FMXQA[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.PF0FMXQA[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.PF0FMXQA[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.PF0FMXQA[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.PF0FMXQA[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.PF0FMXQA[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.PF0FMXQA[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.PF0FMXQA[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 31) /* if field #31 is selected*/
    if (PF0FM001.PF0FMCDE[31] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[31] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.YSCCD[1] normal;
        set PF0FM002.YSCCD[2] normal;
        set PF0FM002.YSCCD[3] normal;
        set PF0FM002.YSCCD[4] normal;
        set PF0FM002.YSCCD[5] normal;
        set PF0FM002.YSCCD[6] normal;
        set PF0FM002.YSCCD[7] normal;
        set PF0FM002.YSCCD[8] normal;
        set PF0FM002.YSCCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.YSCCD[1] protect;
        set PF0FM002.YSCCD[2] protect;
        set PF0FM002.YSCCD[3] protect;
        set PF0FM002.YSCCD[4] protect;
        set PF0FM002.YSCCD[5] protect;
        set PF0FM002.YSCCD[6] protect;
        set PF0FM002.YSCCD[7] protect;
        set PF0FM002.YSCCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.YSCCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.YSCCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.YSCCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.YSCCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.YSCCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.YSCCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.YSCCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.YSCCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 32) /* if field #32 is selected*/
    if (PF0FM001.PF0FMCDE[32] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[32] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM003.YSE-SLS-CAT1-CD[1] normal;
        set PF0FM003.YSE-SLS-CAT1-CD[2] normal;
        set PF0FM003.YSE-SLS-CAT1-CD[3] normal;
        set PF0FM003.YSE-SLS-CAT1-CD[4] normal;
        set PF0FM003.YSE-SLS-CAT1-CD[5] normal;
        set PF0FM003.YSE-SLS-CAT1-CD[6] normal;
        set PF0FM003.YSE-SLS-CAT1-CD[7] normal;
        set PF0FM003.YSE-SLS-CAT1-CD[8] normal;
        set PF0FM003.YSE-SLS-CAT1-CD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM003.YSE-SLS-CAT1-CD[1] protect;
        set PF0FM003.YSE-SLS-CAT1-CD[2] protect;
        set PF0FM003.YSE-SLS-CAT1-CD[3] protect;
        set PF0FM003.YSE-SLS-CAT1-CD[4] protect;
        set PF0FM003.YSE-SLS-CAT1-CD[5] protect;
        set PF0FM003.YSE-SLS-CAT1-CD[6] protect;
        set PF0FM003.YSE-SLS-CAT1-CD[7] protect;
        set PF0FM003.YSE-SLS-CAT1-CD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.YSE-SLS-CAT1-CD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.YSE-SLS-CAT1-CD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.YSE-SLS-CAT1-CD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.YSE-SLS-CAT1-CD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.YSE-SLS-CAT1-CD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.YSE-SLS-CAT1-CD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.YSE-SLS-CAT1-CD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.YSE-SLS-CAT1-CD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 33) /* if field #33 is selected*/
    if (PF0FM001.PF0FMCDE[33] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[33] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.XMCCD normal;
        /* SET PF0FM004.XMCCD(2) NORMAL;*/
        /* SET PF0FM004.XMCCD(3) NORMAL;*/
        /* SET PF0FM004.XMCCD(4) NORMAL;*/
        /* SET PF0FM004.XMCCD(5) NORMAL;*/
        /* SET PF0FM004.XMCCD(6) NORMAL;*/
        /* SET PF0FM004.XMCCD(7) NORMAL;*/
        /* SET PF0FM004.XMCCD(8) NORMAL;*/
        set PF0FM004.XMCCD cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.XMCCD protect;
        /* SET PF0FM004.XMCCD(2) PROTECT;*/
        /* SET PF0FM004.XMCCD(3) PROTECT;*/
        /* SET PF0FM004.XMCCD(4) PROTECT;*/
        /* SET PF0FM004.XMCCD(5) PROTECT;*/
        /* SET PF0FM004.XMCCD(6) PROTECT;*/
        /* SET PF0FM004.XMCCD(7) PROTECT;*/
        /* SET PF0FM004.XMCCD(8) PROTECT;*/
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.XMCCD = PF0FW01.PFDCDVAL[1]; /* move codes*/
        /* MOVE PF0FW01.PFDCDVAL(2) TO PF0FM004.XMCCD(2);/* to screen*/
        /* MOVE PF0FW01.PFDCDVAL(3) TO PF0FM004.XMCCD(3);*/
        /* MOVE PF0FW01.PFDCDVAL(4) TO PF0FM004.XMCCD(4);*/
        /* MOVE PF0FW01.PFDCDVAL(5) TO PF0FM004.XMCCD(5);*/
        /* MOVE PF0FW01.PFDCDVAL(6) TO PF0FM004.XMCCD(6);*/
        /* MOVE PF0FW01.PFDCDVAL(7) TO PF0FM004.XMCCD(7);*/
        /* MOVE PF0FW01.PFDCDVAL(8) TO PF0FM004.XMCCD(8);*/
      end
    end
    return;
  end
  ;
  if (PFWIDX == 34) /* if field #34 is selected*/
    if (PF0FM001.PF0FMCDE[34] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[34] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.PF0FMYSP[1] normal;
        set PF0FM002.PF0FMYSP[2] normal;
        set PF0FM002.PF0FMYSP[3] normal;
        set PF0FM002.PF0FMYSP[4] normal;
        set PF0FM002.PF0FMYSP[5] normal;
        set PF0FM002.PF0FMYSP[6] normal;
        set PF0FM002.PF0FMYSP[7] normal;
        set PF0FM002.PF0FMYSP[8] normal;
        set PF0FM002.PF0FMYSP[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.PF0FMYSP[1] protect;
        set PF0FM002.PF0FMYSP[2] protect;
        set PF0FM002.PF0FMYSP[3] protect;
        set PF0FM002.PF0FMYSP[4] protect;
        set PF0FM002.PF0FMYSP[5] protect;
        set PF0FM002.PF0FMYSP[6] protect;
        set PF0FM002.PF0FMYSP[7] protect;
        set PF0FM002.PF0FMYSP[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.PF0FMYSP[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.PF0FMYSP[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.PF0FMYSP[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.PF0FMYSP[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.PF0FMYSP[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.PF0FMYSP[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.PF0FMYSP[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.PF0FMYSP[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 35) /* if field #35 is selected*/
    if (PF0FM001.PF0FMCDE[35] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[35] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM003.YSF-SLS-CAT2-CD[1] normal;
        set PF0FM003.YSF-SLS-CAT2-CD[2] normal;
        set PF0FM003.YSF-SLS-CAT2-CD[3] normal;
        set PF0FM003.YSF-SLS-CAT2-CD[4] normal;
        set PF0FM003.YSF-SLS-CAT2-CD[5] normal;
        set PF0FM003.YSF-SLS-CAT2-CD[6] normal;
        set PF0FM003.YSF-SLS-CAT2-CD[7] normal;
        set PF0FM003.YSF-SLS-CAT2-CD[8] normal;
        set PF0FM003.YSF-SLS-CAT2-CD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM003.YSF-SLS-CAT2-CD[1] protect;
        set PF0FM003.YSF-SLS-CAT2-CD[2] protect;
        set PF0FM003.YSF-SLS-CAT2-CD[3] protect;
        set PF0FM003.YSF-SLS-CAT2-CD[4] protect;
        set PF0FM003.YSF-SLS-CAT2-CD[5] protect;
        set PF0FM003.YSF-SLS-CAT2-CD[6] protect;
        set PF0FM003.YSF-SLS-CAT2-CD[7] protect;
        set PF0FM003.YSF-SLS-CAT2-CD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.YSF-SLS-CAT2-CD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.YSF-SLS-CAT2-CD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.YSF-SLS-CAT2-CD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.YSF-SLS-CAT2-CD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.YSF-SLS-CAT2-CD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.YSF-SLS-CAT2-CD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.YSF-SLS-CAT2-CD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.YSF-SLS-CAT2-CD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 36) /* if field #36 is selected*/
    if (PF0FM001.PF0FMCDE[36] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[36] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMLCR[1] normal;
        set PF0FM004.PF0FMLCR[2] normal;
        set PF0FM004.PF0FMLCR[3] normal;
        set PF0FM004.PF0FMLCR[4] normal;
        set PF0FM004.PF0FMLCR[5] normal;
        set PF0FM004.PF0FMLCR[6] normal;
        set PF0FM004.PF0FMLCR[7] normal;
        set PF0FM004.PF0FMLCR[8] normal;
        set PF0FM004.PF0FMLCR[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMLCR[1] protect;
        set PF0FM004.PF0FMLCR[2] protect;
        set PF0FM004.PF0FMLCR[3] protect;
        set PF0FM004.PF0FMLCR[4] protect;
        set PF0FM004.PF0FMLCR[5] protect;
        set PF0FM004.PF0FMLCR[6] protect;
        set PF0FM004.PF0FMLCR[7] protect;
        set PF0FM004.PF0FMLCR[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.PF0FMLCR[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM004.PF0FMLCR[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM004.PF0FMLCR[3] = PF0FW01.PFDCDVAL[3];
        PF0FM004.PF0FMLCR[4] = PF0FW01.PFDCDVAL[4];
        PF0FM004.PF0FMLCR[5] = PF0FW01.PFDCDVAL[5];
        PF0FM004.PF0FMLCR[6] = PF0FW01.PFDCDVAL[6];
        PF0FM004.PF0FMLCR[7] = PF0FW01.PFDCDVAL[7];
        PF0FM004.PF0FMLCR[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 37) /* if field #37 is selected*/
    if (PF0FM001.PF0FMCDE[37] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[37] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.XGSCD[1] normal;
        set PF0FM002.XGSCD[2] normal;
        set PF0FM002.XGSCD[3] normal;
        set PF0FM002.XGSCD[4] normal;
        set PF0FM002.XGSCD[5] normal;
        set PF0FM002.XGSCD[6] normal;
        set PF0FM002.XGSCD[7] normal;
        set PF0FM002.XGSCD[8] normal;
        set PF0FM002.XGSCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.XGSCD[1] protect;
        set PF0FM002.XGSCD[2] protect;
        set PF0FM002.XGSCD[3] protect;
        set PF0FM002.XGSCD[4] protect;
        set PF0FM002.XGSCD[5] protect;
        set PF0FM002.XGSCD[6] protect;
        set PF0FM002.XGSCD[7] protect;
        set PF0FM002.XGSCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.XGSCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.XGSCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.XGSCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.XGSCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.XGSCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.XGSCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.XGSCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.XGSCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 38) /* if field #38 is selected*/
    if (PF0FM001.PF0FMCDE[38] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[38] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.YFE-FIN-LVL3-CD[1] normal;
        set PF0FM003.YFE-FIN-LVL3-CD[2] normal;
        set PF0FM003.YFE-FIN-LVL3-CD[3] normal;
        set PF0FM003.YFE-FIN-LVL3-CD[4] normal;
        set PF0FM003.YFE-FIN-LVL3-CD[5] normal;
        set PF0FM003.YFE-FIN-LVL3-CD[6] normal;
        set PF0FM003.YFE-FIN-LVL3-CD[7] normal;
        set PF0FM003.YFE-FIN-LVL3-CD[8] normal;
        set PF0FM003.YFE-FIN-LVL3-CD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.YFE-FIN-LVL3-CD[1] protect;
        set PF0FM003.YFE-FIN-LVL3-CD[2] protect;
        set PF0FM003.YFE-FIN-LVL3-CD[3] protect;
        set PF0FM003.YFE-FIN-LVL3-CD[4] protect;
        set PF0FM003.YFE-FIN-LVL3-CD[5] protect;
        set PF0FM003.YFE-FIN-LVL3-CD[6] protect;
        set PF0FM003.YFE-FIN-LVL3-CD[7] protect;
        set PF0FM003.YFE-FIN-LVL3-CD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.YFE-FIN-LVL3-CD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.YFE-FIN-LVL3-CD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.YFE-FIN-LVL3-CD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.YFE-FIN-LVL3-CD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.YFE-FIN-LVL3-CD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.YFE-FIN-LVL3-CD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.YFE-FIN-LVL3-CD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.YFE-FIN-LVL3-CD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 39) /* if field #39 is selected*/
    if (PF0FM001.PF0FMCDE[39] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[39] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMGPC[1] normal;
        set PF0FM004.SY1STNBR[1] normal;
        set PF0FM004.PF0FMGPC[2] normal;
        set PF0FM004.SY1STNBR[2] normal;
        set PF0FM004.PF0FMGPC[3] normal;
        set PF0FM004.SY1STNBR[3] normal;
        set PF0FM004.PF0FMGPC[4] normal;
        set PF0FM004.SY1STNBR[4] normal;
        set PF0FM004.PF0FMGPC[5] normal;
        set PF0FM004.SY1STNBR[5] normal;
        set PF0FM004.PF0FMGPC[6] normal;
        set PF0FM004.SY1STNBR[6] normal;
        set PF0FM004.PF0FMGPC[7] normal;
        set PF0FM004.SY1STNBR[7] normal;
        set PF0FM004.PF0FMGPC[8] normal;
        set PF0FM004.SY1STNBR[8] normal;
        set PF0FM004.PF0FMGPC[9] normal;
        set PF0FM004.SY1STNBR[9] normal;
        set PF0FM004.PF0FMGPC[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMGPC[1] protect;
        set PF0FM004.SY1STNBR[1] protect;
        set PF0FM004.PF0FMGPC[2] protect;
        set PF0FM004.SY1STNBR[2] protect;
        set PF0FM004.PF0FMGPC[3] protect;
        set PF0FM004.SY1STNBR[3] protect;
        set PF0FM004.PF0FMGPC[4] protect;
        set PF0FM004.SY1STNBR[4] protect;
        set PF0FM004.PF0FMGPC[5] protect;
        set PF0FM004.SY1STNBR[5] protect;
        set PF0FM004.PF0FMGPC[6] protect;
        set PF0FM004.SY1STNBR[6] protect;
        set PF0FM004.PF0FMGPC[7] protect;
        set PF0FM004.SY1STNBR[7] protect;
        set PF0FM004.PF0FMGPC[8] protect;
        set PF0FM004.SY1STNBR[8] protect;
        set PF0FM004.PF0FMGPC[9] protect;
        set PF0FM004.SY1STNBR[9] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.PF0FMGPC[1] = PF0FW01.XGPCD[1]; /* move codes*/
        PF0FM004.SY1STNBR[1] = PF0FW01.SY1STNBR[1]; /* to screen*/
        PF0FM004.PF0FMGPC[2] = PF0FW01.XGPCD[2];
        PF0FM004.SY1STNBR[2] = PF0FW01.SY1STNBR[2];
        PF0FM004.PF0FMGPC[3] = PF0FW01.XGPCD[3];
        PF0FM004.SY1STNBR[3] = PF0FW01.SY1STNBR[3];
        PF0FM004.PF0FMGPC[4] = PF0FW01.XGPCD[4];
        PF0FM004.SY1STNBR[4] = PF0FW01.SY1STNBR[4];
        PF0FM004.PF0FMGPC[5] = PF0FW01.XGPCD[5];
        PF0FM004.SY1STNBR[5] = PF0FW01.SY1STNBR[5];
        PF0FM004.PF0FMGPC[6] = PF0FW01.XGPCD[6];
        PF0FM004.SY1STNBR[6] = PF0FW01.SY1STNBR[6];
        PF0FM004.PF0FMGPC[7] = PF0FW01.XGPCD[7];
        PF0FM004.SY1STNBR[7] = PF0FW01.SY1STNBR[7];
        PF0FM004.PF0FMGPC[8] = PF0FW01.XGPCD[8];
        PF0FM004.SY1STNBR[8] = PF0FW01.SY1STNBR[8];
        PF0FM004.PF0FMGPC[9] = PF0FW01.XGPCD[9];
        PF0FM004.SY1STNBR[9] = PF0FW01.SY1STNBR[9]; /* to screen*/
      end
    end
    return;
  end
  ;
  if (PFWIDX == 40) /* if field #40 is selected*/
    if (PF0FM001.PF0FMCDE[40] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[40] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.XSPCD[1] normal;
        set PF0FM002.XSPCD[2] normal;
        set PF0FM002.XSPCD[3] normal;
        set PF0FM002.XSPCD[4] normal;
        set PF0FM002.XSPCD[5] normal;
        set PF0FM002.XSPCD[6] normal;
        set PF0FM002.XSPCD[7] normal;
        set PF0FM002.XSPCD[8] normal;
        set PF0FM002.XSPCD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.XSPCD[1] protect;
        set PF0FM002.XSPCD[2] protect;
        set PF0FM002.XSPCD[3] protect;
        set PF0FM002.XSPCD[4] protect;
        set PF0FM002.XSPCD[5] protect;
        set PF0FM002.XSPCD[6] protect;
        set PF0FM002.XSPCD[7] protect;
        set PF0FM002.XSPCD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.XSPCD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.XSPCD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.XSPCD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.XSPCD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.XSPCD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.XSPCD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.XSPCD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.XSPCD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 41) /* if field #41 is selected*/
    if (PF0FM001.PF0FMCDE[41] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[41] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.YFF-FIN-LVL4-CD[1] normal;
        set PF0FM003.YFF-FIN-LVL4-CD[2] normal;
        set PF0FM003.YFF-FIN-LVL4-CD[3] normal;
        set PF0FM003.YFF-FIN-LVL4-CD[4] normal;
        set PF0FM003.YFF-FIN-LVL4-CD[5] normal;
        set PF0FM003.YFF-FIN-LVL4-CD[6] normal;
        set PF0FM003.YFF-FIN-LVL4-CD[7] normal;
        set PF0FM003.YFF-FIN-LVL4-CD[8] normal;
        set PF0FM003.YFF-FIN-LVL4-CD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.YFF-FIN-LVL4-CD[1] protect;
        set PF0FM003.YFF-FIN-LVL4-CD[2] protect;
        set PF0FM003.YFF-FIN-LVL4-CD[3] protect;
        set PF0FM003.YFF-FIN-LVL4-CD[4] protect;
        set PF0FM003.YFF-FIN-LVL4-CD[5] protect;
        set PF0FM003.YFF-FIN-LVL4-CD[6] protect;
        set PF0FM003.YFF-FIN-LVL4-CD[7] protect;
        set PF0FM003.YFF-FIN-LVL4-CD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.YFF-FIN-LVL4-CD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.YFF-FIN-LVL4-CD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.YFF-FIN-LVL4-CD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.YFF-FIN-LVL4-CD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.YFF-FIN-LVL4-CD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.YFF-FIN-LVL4-CD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.YFF-FIN-LVL4-CD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.YFF-FIN-LVL4-CD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 42) /* if field #42 is selected*/
    if (PF0FM001.PF0FMCDE[42] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[42] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMGPC[1] normal;
        set PF0FM004.SY1STNBR[1] normal;
        set PF0FM004.XQACD[1] normal;
        set PF0FM004.PF0FMLFC[1] normal;
        set PF0FM004.PF0FMGPC[2] normal;
        set PF0FM004.SY1STNBR[2] normal;
        set PF0FM004.XQACD[2] normal;
        set PF0FM004.PF0FMLFC[2] normal;
        set PF0FM004.PF0FMGPC[3] normal;
        set PF0FM004.SY1STNBR[3] normal;
        set PF0FM004.XQACD[3] normal;
        set PF0FM004.PF0FMLFC[3] normal;
        set PF0FM004.PF0FMGPC[4] normal;
        set PF0FM004.SY1STNBR[4] normal;
        set PF0FM004.XQACD[4] normal;
        set PF0FM004.PF0FMLFC[4] normal;
        set PF0FM004.PF0FMGPC[5] normal;
        set PF0FM004.SY1STNBR[5] normal;
        set PF0FM004.XQACD[5] normal;
        set PF0FM004.PF0FMLFC[5] normal;
        set PF0FM004.PF0FMGPC[6] normal;
        set PF0FM004.SY1STNBR[6] normal;
        set PF0FM004.XQACD[6] normal;
        set PF0FM004.PF0FMLFC[6] normal;
        set PF0FM004.PF0FMGPC[7] normal;
        set PF0FM004.SY1STNBR[7] normal;
        set PF0FM004.XQACD[7] normal;
        set PF0FM004.PF0FMLFC[7] normal;
        set PF0FM004.PF0FMGPC[8] normal;
        set PF0FM004.SY1STNBR[8] normal;
        set PF0FM004.XQACD[8] normal;
        set PF0FM004.PF0FMLFC[8] normal;
        set PF0FM004.PF0FMGPC[9] normal;
        set PF0FM004.SY1STNBR[9] normal;
        set PF0FM004.XQACD[9] normal;
        set PF0FM004.PF0FMLFC[9] normal;
        set PF0FM004.PF0FMGPC[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMGPC[1] protect;
        set PF0FM004.SY1STNBR[1] protect;
        set PF0FM004.XQACD[1] protect;
        set PF0FM004.PF0FMLFC[1] protect;
        set PF0FM004.PF0FMGPC[2] protect;
        set PF0FM004.SY1STNBR[2] protect;
        set PF0FM004.XQACD[2] protect;
        set PF0FM004.PF0FMLFC[2] protect;
        set PF0FM004.PF0FMGPC[3] protect;
        set PF0FM004.SY1STNBR[3] protect;
        set PF0FM004.XQACD[3] protect;
        set PF0FM004.PF0FMLFC[3] protect;
        set PF0FM004.PF0FMGPC[4] protect;
        set PF0FM004.SY1STNBR[4] protect;
        set PF0FM004.XQACD[4] protect;
        set PF0FM004.PF0FMLFC[4] protect;
        set PF0FM004.PF0FMGPC[5] protect;
        set PF0FM004.SY1STNBR[5] protect;
        set PF0FM004.XQACD[5] protect;
        set PF0FM004.PF0FMLFC[5] protect;
        set PF0FM004.PF0FMGPC[6] protect;
        set PF0FM004.SY1STNBR[6] protect;
        set PF0FM004.XQACD[6] protect;
        set PF0FM004.PF0FMLFC[6] protect;
        set PF0FM004.PF0FMGPC[7] protect;
        set PF0FM004.SY1STNBR[7] protect;
        set PF0FM004.XQACD[7] protect;
        set PF0FM004.PF0FMLFC[7] protect;
        set PF0FM004.PF0FMGPC[8] protect;
        set PF0FM004.SY1STNBR[8] protect;
        set PF0FM004.XQACD[8] protect;
        set PF0FM004.PF0FMLFC[8] protect;
        set PF0FM004.PF0FMGPC[9] protect;
        set PF0FM004.SY1STNBR[9] protect;
        set PF0FM004.XQACD[9] protect;
        set PF0FM004.PF0FMLFC[9] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.PF0FMGPC[1] = PF0FW01.XGPCD[1]; /* move codes*/
        PF0FM004.SY1STNBR[1] = PF0FW01.SY1STNBR[1]; /* to screen*/
        PF0FM004.XQACD[1] = PF0FW01.XQACD[1];
        PF0FM004.PF0FMLFC[1] = PF0FW01.XLCCD[1];
        PF0FM004.PF0FMGPC[2] = PF0FW01.XGPCD[2];
        PF0FM004.SY1STNBR[2] = PF0FW01.SY1STNBR[2];
        PF0FM004.XQACD[2] = PF0FW01.XQACD[2];
        PF0FM004.PF0FMLFC[2] = PF0FW01.XLCCD[2];
        PF0FM004.PF0FMGPC[3] = PF0FW01.XGPCD[3];
        PF0FM004.SY1STNBR[3] = PF0FW01.SY1STNBR[3];
        PF0FM004.XQACD[3] = PF0FW01.XQACD[3];
        PF0FM004.PF0FMLFC[3] = PF0FW01.XLCCD[3];
        PF0FM004.PF0FMGPC[4] = PF0FW01.XGPCD[4];
        PF0FM004.SY1STNBR[4] = PF0FW01.SY1STNBR[4];
        PF0FM004.XQACD[4] = PF0FW01.XQACD[4];
        PF0FM004.PF0FMLFC[4] = PF0FW01.XLCCD[4];
        PF0FM004.PF0FMGPC[5] = PF0FW01.XGPCD[5];
        PF0FM004.SY1STNBR[5] = PF0FW01.SY1STNBR[5];
        PF0FM004.XQACD[5] = PF0FW01.XQACD[5];
        PF0FM004.PF0FMLFC[5] = PF0FW01.XLCCD[5];
        PF0FM004.PF0FMGPC[6] = PF0FW01.XGPCD[6];
        PF0FM004.SY1STNBR[6] = PF0FW01.SY1STNBR[6];
        PF0FM004.XQACD[6] = PF0FW01.XQACD[6];
        PF0FM004.PF0FMLFC[6] = PF0FW01.XLCCD[6];
        PF0FM004.PF0FMGPC[7] = PF0FW01.XGPCD[7];
        PF0FM004.SY1STNBR[7] = PF0FW01.SY1STNBR[7];
        PF0FM004.XQACD[7] = PF0FW01.XQACD[7];
        PF0FM004.PF0FMLFC[7] = PF0FW01.XLCCD[7];
        PF0FM004.PF0FMGPC[8] = PF0FW01.XGPCD[8];
        PF0FM004.SY1STNBR[8] = PF0FW01.SY1STNBR[8];
        PF0FM004.XQACD[8] = PF0FW01.XQACD[8];
        PF0FM004.PF0FMLFC[8] = PF0FW01.XLCCD[8];
        PF0FM004.PF0FMGPC[9] = PF0FW01.XGPCD[9];
        PF0FM004.SY1STNBR[9] = PF0FW01.SY1STNBR[9];
        PF0FM004.XQACD[9] = PF0FW01.XQACD[9];
        PF0FM004.PF0FMLFC[9] = PF0FW01.XLCCD[9];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 43) /* if field #43 is selected*/
    if (PF0FM001.PF0FMCDE[43] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP1 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[43] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC1 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm002 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm002 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.XGACD[1] normal;
        set PF0FM002.XGACD[2] normal;
        set PF0FM002.XGACD[3] normal;
        set PF0FM002.XGACD[4] normal;
        set PF0FM002.XGACD[5] normal;
        set PF0FM002.XGACD[6] normal;
        set PF0FM002.XGACD[7] normal;
        set PF0FM002.XGACD[8] normal;
        set PF0FM002.XGACD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM002.XGACD[1] protect;
        set PF0FM002.XGACD[2] protect;
        set PF0FM002.XGACD[3] protect;
        set PF0FM002.XGACD[4] protect;
        set PF0FM002.XGACD[5] protect;
        set PF0FM002.XGACD[6] protect;
        set PF0FM002.XGACD[7] protect;
        set PF0FM002.XGACD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM002.XGACD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM002.XGACD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM002.XGACD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM002.XGACD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM002.XGACD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM002.XGACD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM002.XGACD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM002.XGACD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
  if (PFWIDX == 44) /* if field #44 is selected*/
    if (PF0FM001.PF0FMCDE[44] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP2 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[44] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC2 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm003 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm003 to be sent*/
       || PF0FM001.PF0FMACT == "I" 
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.YFG-FIN-LVL5-CD[1] normal;
        set PF0FM003.YFG-FIN-LVL5-CD[2] normal;
        set PF0FM003.YFG-FIN-LVL5-CD[3] normal;
        set PF0FM003.YFG-FIN-LVL5-CD[4] normal;
        set PF0FM003.YFG-FIN-LVL5-CD[5] normal;
        set PF0FM003.YFG-FIN-LVL5-CD[6] normal;
        set PF0FM003.YFG-FIN-LVL5-CD[7] normal;
        set PF0FM003.YFG-FIN-LVL5-CD[8] normal;
        set PF0FM003.YFG-FIN-LVL5-CD[1] cursor;
      end
      if (PF0FM001.PF0FMACT == "I"
       || PF0FM001.PF0FMACT == " ")
        set PF0FM003.YFG-FIN-LVL5-CD[1] protect;
        set PF0FM003.YFG-FIN-LVL5-CD[2] protect;
        set PF0FM003.YFG-FIN-LVL5-CD[3] protect;
        set PF0FM003.YFG-FIN-LVL5-CD[4] protect;
        set PF0FM003.YFG-FIN-LVL5-CD[5] protect;
        set PF0FM003.YFG-FIN-LVL5-CD[6] protect;
        set PF0FM003.YFG-FIN-LVL5-CD[7] protect;
        set PF0FM003.YFG-FIN-LVL5-CD[8] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM003.YFG-FIN-LVL5-CD[1] = PF0FW01.PFDCDVAL[1]; /* move codes*/
        PF0FM003.YFG-FIN-LVL5-CD[2] = PF0FW01.PFDCDVAL[2]; /* to screen*/
        PF0FM003.YFG-FIN-LVL5-CD[3] = PF0FW01.PFDCDVAL[3];
        PF0FM003.YFG-FIN-LVL5-CD[4] = PF0FW01.PFDCDVAL[4];
        PF0FM003.YFG-FIN-LVL5-CD[5] = PF0FW01.PFDCDVAL[5];
        PF0FM003.YFG-FIN-LVL5-CD[6] = PF0FW01.PFDCDVAL[6];
        PF0FM003.YFG-FIN-LVL5-CD[7] = PF0FW01.PFDCDVAL[7];
        PF0FM003.YFG-FIN-LVL5-CD[8] = PF0FW01.PFDCDVAL[8];
      end
    end
    return;
  end
  ;
   /* The product attributes have been revised, so certain lines below*/
   /* have been commented out accordingly. 0194/mjk.*/
  if (PFWIDX == 45) /* if field #45 is selected*/
    if (PF0FM001.PF0FMCDE[45] > 0) /* on primary screen, set column*/
      PF0FW01.PF0FWUP3 = "Y"; /* update flag*/
    end
    if (PF0FM001.PFDVALFL[45] == "S") /* if specific values are to be entered*/
      PF0FW01.PF0FWSC3 = "Y"; /* unprotect the fields on the secondary*/
      if (PF0FM001.PF0FMACT == "A" /* screen pf0fm004 and set flag for*/
       || PF0FM001.PF0FMACT == "C" /* pf0fm004 to be sent*/
       || PF0FM001.PF0FMACT == " " 
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMGPC[1] normal;
        set PF0FM004.SY1STNBR[1] normal;
        set PF0FM004.PF0FMCOL[1] normal;
        set PF0FM004.XDMCD[1] normal;
        /* SET PF0FM004.XQACD(1) NORMAL;*/
        /* SET PF0FM004.PF0FMLFC(1) NORMAL;*/
        set PF0FM004.PF0FMGPC[2] normal;
        set PF0FM004.SY1STNBR[2] normal;
        set PF0FM004.PF0FMCOL[2] normal;
        set PF0FM004.XDMCD[2] normal;
        /* SET PF0FM004.XQACD(2) NORMAL;*/
        /* SET PF0FM004.PF0FMLFC(2) NORMAL;*/
        set PF0FM004.PF0FMGPC[3] normal;
        set PF0FM004.SY1STNBR[3] normal;
        set PF0FM004.PF0FMCOL[3] normal;
        set PF0FM004.XDMCD[3] normal;
        /* SET PF0FM004.XQACD(3) NORMAL;*/
        /* SET PF0FM004.PF0FMLFC(3) NORMAL;*/
        set PF0FM004.PF0FMGPC[4] normal;
        set PF0FM004.SY1STNBR[4] normal;
        set PF0FM004.PF0FMCOL[4] normal;
        set PF0FM004.XDMCD[4] normal;
        /* SET PF0FM004.XQACD(4) NORMAL;*/
        /* SET PF0FM004.PF0FMLFC(4) NORMAL;*/
        set PF0FM004.PF0FMGPC[5] normal;
        set PF0FM004.SY1STNBR[5] normal;
        set PF0FM004.PF0FMCOL[5] normal;
        set PF0FM004.XDMCD[5] normal;
        /* SET PF0FM004.XQACD(5) NORMAL;*/
        /* SET PF0FM004.PF0FMLFC(5) NORMAL;*/
        set PF0FM004.PF0FMGPC[6] normal;
        set PF0FM004.SY1STNBR[6] normal;
        set PF0FM004.PF0FMCOL[6] normal;
        set PF0FM004.XDMCD[6] normal;
        /* SET PF0FM004.XQACD(6) NORMAL;*/
        /* SET PF0FM004.PF0FMLFC(6) NORMAL;*/
        set PF0FM004.PF0FMGPC[7] normal;
        set PF0FM004.SY1STNBR[7] normal;
        set PF0FM004.PF0FMCOL[7] normal;
        set PF0FM004.XDMCD[7] normal;
        /* SET PF0FM004.XQACD(7) NORMAL;*/
        /* SET PF0FM004.PF0FMLFC(7) NORMAL;*/
        set PF0FM004.PF0FMGPC[8] normal;
        set PF0FM004.SY1STNBR[8] normal;
        set PF0FM004.PF0FMCOL[8] normal;
        set PF0FM004.XDMCD[8] normal;
        /* SET PF0FM004.XQACD(8) NORMAL;*/
        /* SET PF0FM004.PF0FMLFC(8) NORMAL;*/
        set PF0FM004.PF0FMGPC[9] normal;
        set PF0FM004.SY1STNBR[9] normal;
        set PF0FM004.PF0FMCOL[9] normal;
        set PF0FM004.XDMCD[9] normal;
        /* SET PF0FM004.XQACD(9) NORMAL;*/
        /* SET PF0FM004.PF0FMLFC(9) NORMAL;*/
        set PF0FM004.PF0FMGPC[1] cursor;
      end
      if (PF0FM001.PF0FMACT == " "
       || PF0FM001.PF0FMACT == "I")
        set PF0FM004.PF0FMGPC[1] protect;
        set PF0FM004.SY1STNBR[1] protect;
        set PF0FM004.PF0FMCOL[1] protect;
        set PF0FM004.XDMCD[1] protect;
        set PF0FM004.XQACD[1] protect;
        set PF0FM004.PF0FMLFC[1] protect;
        set PF0FM004.PF0FMGPC[2] protect;
        set PF0FM004.SY1STNBR[2] protect;
        set PF0FM004.PF0FMCOL[2] protect;
        set PF0FM004.XDMCD[2] protect;
        set PF0FM004.XQACD[2] protect;
        set PF0FM004.PF0FMLFC[2] protect;
        set PF0FM004.PF0FMGPC[3] protect;
        set PF0FM004.SY1STNBR[3] protect;
        set PF0FM004.PF0FMCOL[3] protect;
        set PF0FM004.XDMCD[3] protect;
        set PF0FM004.XQACD[3] protect;
        set PF0FM004.PF0FMLFC[3] protect;
        set PF0FM004.PF0FMGPC[4] protect;
        set PF0FM004.SY1STNBR[4] protect;
        set PF0FM004.PF0FMCOL[4] protect;
        set PF0FM004.XDMCD[4] protect;
        set PF0FM004.XQACD[4] protect;
        set PF0FM004.PF0FMLFC[4] protect;
        set PF0FM004.PF0FMGPC[5] protect;
        set PF0FM004.SY1STNBR[5] protect;
        set PF0FM004.PF0FMCOL[5] protect;
        set PF0FM004.XDMCD[5] protect;
        set PF0FM004.XQACD[5] protect;
        set PF0FM004.PF0FMLFC[5] protect;
        set PF0FM004.PF0FMGPC[6] protect;
        set PF0FM004.SY1STNBR[6] protect;
        set PF0FM004.PF0FMCOL[6] protect;
        set PF0FM004.XDMCD[6] protect;
        set PF0FM004.XQACD[6] protect;
        set PF0FM004.PF0FMLFC[6] protect;
        set PF0FM004.PF0FMGPC[7] protect;
        set PF0FM004.SY1STNBR[7] protect;
        set PF0FM004.PF0FMCOL[7] protect;
        set PF0FM004.XDMCD[7] protect;
        set PF0FM004.XQACD[7] protect;
        set PF0FM004.PF0FMLFC[7] protect;
        set PF0FM004.PF0FMGPC[8] protect;
        set PF0FM004.SY1STNBR[8] protect;
        set PF0FM004.PF0FMCOL[8] protect;
        set PF0FM004.XDMCD[8] protect;
        set PF0FM004.XQACD[8] protect;
        set PF0FM004.PF0FMLFC[8] protect;
        set PF0FM004.PF0FMGPC[9] protect;
        set PF0FM004.SY1STNBR[9] protect;
        set PF0FM004.PF0FMCOL[9] protect;
        set PF0FM004.XDMCD[9] protect;
        set PF0FM004.XQACD[9] protect;
        set PF0FM004.PF0FMLFC[9] protect;
      end
      if (PFWREC.PFWRECF == "Y") /* if record is on file,*/
        move PFWIDX to PFWSUB withV60Compat; /* set subscript for perform routine*/
        PF0F410(); /* routine to determine code values*/
        PF0FM004.PF0FMGPC[1] = PF0FW01.XGPCD[1]; /* move codes*/
        PF0FM004.SY1STNBR[1] = PF0FW01.SY1STNBR[1]; /* to screen*/
        PF0FM004.PF0FMCOL[1] = PF0FW01.SY2CLRID[1];
        PF0FM004.XDMCD[1] = PF0FW01.XDMCD[1];
        /* MOVE PF0FW01.XQACD(1) TO PF0FM004.XQACD(1);*/
        /* MOVE PF0FW01.XLCCD(1) TO PF0FM004.PF0FMLFC(1);*/
        PF0FM004.PF0FMGPC[2] = PF0FW01.XGPCD[2];
        PF0FM004.SY1STNBR[2] = PF0FW01.SY1STNBR[2];
        PF0FM004.PF0FMCOL[2] = PF0FW01.SY2CLRID[2];
        PF0FM004.XDMCD[2] = PF0FW01.XDMCD[2];
        /* MOVE PF0FW01.XQACD(2) TO PF0FM004.XQACD(2);*/
        /* MOVE PF0FW01.XLCCD(2) TO PF0FM004.PF0FMLFC(2);*/
        PF0FM004.PF0FMGPC[3] = PF0FW01.XGPCD[3];
        PF0FM004.SY1STNBR[3] = PF0FW01.SY1STNBR[3];
        PF0FM004.PF0FMCOL[3] = PF0FW01.SY2CLRID[3];
        PF0FM004.XDMCD[3] = PF0FW01.XDMCD[3];
        /* MOVE PF0FW01.XQACD(3) TO PF0FM004.XQACD(3);*/
        /* MOVE PF0FW01.XLCCD(3) TO PF0FM004.PF0FMLFC(3);*/
        PF0FM004.PF0FMGPC[4] = PF0FW01.XGPCD[4];
        PF0FM004.SY1STNBR[4] = PF0FW01.SY1STNBR[4];
        PF0FM004.PF0FMCOL[4] = PF0FW01.SY2CLRID[4];
        PF0FM004.XDMCD[4] = PF0FW01.XDMCD[4];
        /* MOVE PF0FW01.XQACD(4) TO PF0FM004.XQACD(4);*/
        /* MOVE PF0FW01.XLCCD(4) TO PF0FM004.PF0FMLFC(4);*/
        PF0FM004.PF0FMGPC[5] = PF0FW01.XGPCD[5];
        PF0FM004.SY1STNBR[5] = PF0FW01.SY1STNBR[5];
        PF0FM004.PF0FMCOL[5] = PF0FW01.SY2CLRID[5];
        PF0FM004.XDMCD[5] = PF0FW01.XDMCD[5];
        /* MOVE PF0FW01.XQACD(5) TO PF0FM004.XQACD(5);*/
        /* MOVE PF0FW01.XLCCD(5) TO PF0FM004.PF0FMLFC(5);*/
        PF0FM004.PF0FMGPC[6] = PF0FW01.XGPCD[6];
        PF0FM004.SY1STNBR[6] = PF0FW01.SY1STNBR[6];
        PF0FM004.PF0FMCOL[6] = PF0FW01.SY2CLRID[6];
        PF0FM004.XDMCD[6] = PF0FW01.XDMCD[6];
        /* MOVE PF0FW01.XQACD(6) TO PF0FM004.XQACD(6);*/
        /* MOVE PF0FW01.XLCCD(6) TO PF0FM004.PF0FMLFC(6);*/
        PF0FM004.PF0FMGPC[7] = PF0FW01.XGPCD[7];
        PF0FM004.SY1STNBR[7] = PF0FW01.SY1STNBR[7];
        PF0FM004.PF0FMCOL[7] = PF0FW01.SY2CLRID[7];
        PF0FM004.XDMCD[7] = PF0FW01.XDMCD[7];
        /* MOVE PF0FW01.XQACD(7) TO PF0FM004.XQACD(7);*/
        /* MOVE PF0FW01.XLCCD(7) TO PF0FM004.PF0FMLFC(7);*/
        PF0FM004.PF0FMGPC[8] = PF0FW01.XGPCD[8];
        PF0FM004.SY1STNBR[8] = PF0FW01.SY1STNBR[8];
        PF0FM004.PF0FMCOL[8] = PF0FW01.SY2CLRID[8];
        PF0FM004.XDMCD[8] = PF0FW01.XDMCD[8];
        /* MOVE PF0FW01.XQACD(8) TO PF0FM004.XQACD(8);*/
        /* MOVE PF0FW01.XLCCD(8) TO PF0FM004.PF0FMLFC(8);*/
        PF0FM004.PF0FMGPC[9] = PF0FW01.XGPCD[9];
        PF0FM004.SY1STNBR[9] = PF0FW01.SY1STNBR[9];
        PF0FM004.PF0FMCOL[9] = PF0FW01.SY2CLRID[9];
        PF0FM004.XDMCD[9] = PF0FW01.XDMCD[9];
        /* MOVE PF0FW01.XQACD(9) TO PF0FM004.XQACD(9);*/
        /* MOVE PF0FW01.XLCCD(9) TO PF0FM004.PF0FMLFC(9);*/
      end
    end
    return;
  end
end // end PF0F400

// setup att. code values for scr
Function PF0F410()
   /* ****************************************************/
   /* *   if the rept. att. ref # entered is in the     **/
   /* *   dproft.vrptat01 table, use the pficd field    **/
   /* *   from screen pf0fm001 to determine the code    **/
   /* *   values (pfdcdval) that are to be setup on the **/
   /* *   secondary screens. use the pficd field as     **/
   /* *   follows:                                      **/
   /* *                          index range            **/
   /* *   pficd value     low index      high index     **/
   /* *   -----------     ---------      ----------     **/
   /* *       1              001            008         **/
   /* *       2              009            016         **/
   /* *       3              017            024         **/
   /* *       4              025            032         **/
   /* *       5              033            040         **/
   /* *       6              041            048         **/
   /* *       7              049            056         **/
   /* *       8              special product routine    **/
   /* *                                                 **/
   /* *   once the index range has been determined,     **/
   /* *   move the code values within the index range   **/
   /* *   to a w/s storage area to be moved to the      **/
   /* *   screen.                                       **/
   /* ****************************************************/
  ;
  if (PFWREC.PFWRECF == "N") /* if there is no db2 record,*/
    return; /* exit the routine.*/
  end
  ;
  PFWSUB1 = 0; /* initialize subscript*/
  ;
  if (PF0FM001.PF0FMCDE[PFWSUB] == 1) /* set index range based upon*/
    PFWSUB1 = 001; /* pficd field.*/
    PFWSUB2 = 008;
  else
    if (PF0FM001.PF0FMCDE[PFWSUB] == 2) /* set index range based upon*/
      PFWSUB1 = 009; /* pficd field.*/
      PFWSUB2 = 016;
    else
      if (PF0FM001.PF0FMCDE[PFWSUB] == 3) /* set index range based upon*/
        PFWSUB1 = 017; /* pficd field.*/
        PFWSUB2 = 024;
      else
        if (PF0FM001.PF0FMCDE[PFWSUB] == 4) /* set index range based upon*/
          PFWSUB1 = 025; /* pficd field.*/
          PFWSUB2 = 032;
        else
          if (PF0FM001.PF0FMCDE[PFWSUB] == 5) /* set index range based upon*/
            PFWSUB1 = 033; /* pficd field.*/
            PFWSUB2 = 040;
          else
            if (PF0FM001.PF0FMCDE[PFWSUB] == 6)
                                   /* set index range based upon*/
              PFWSUB1 = 041; /* pficd field.*/
              PFWSUB2 = 048;
            else
              if (PF0FM001.PF0FMCDE[PFWSUB] == 7)
                                   /* set index range based upon*/
                PFWSUB1 = 049; /* pficd field.*/
                PFWSUB2 = 056;
              end
            end
          end
        end
      end
    end
  end
  ;
  PFWSUB3 = 1; /* set w/s storage area index*/
  ;
  if (PFWSUB1 > 0) /* if elements 1-7 were selected*/
    while (PFWSUB1 <= PFWSUB2) /* move all code values within index*/
      PFWSAVDX = PF0FM001.PF0FMCDE[PFWSUB];
      PF0FW01.PF0FWCDE = PFDREC.PFICD[PFWSAVDX];
      if (PFWIDX == PF0FW01.PF0FWCDE)
        PF0FW01.PFDCDVAL[PFWSUB3] = PFDREC.PFDCDVAL[PFWSUB1];
      else
        PF0FW01.PFDCDVAL[PFWSUB3] = " ";
        PFDREC.PFDCDVAL[PFWSUB1] = " ";
      end
      PFWSUB1 = PFWSUB1 + 1; /* to w/s storage area*/
      PFWSUB3 = PFWSUB3 + 1;
    end
  end
  ;
  if (PF0FM001.PF0FMCDE[PFWSUB] == 8) /* special product routine*/
    PFWSUB3 = 1;
    PFWSUB1 = 1;
    PFWSUB2 = 9;
    while (PFWSUB1 <= PFWSUB2) /* move all product values within*/
      PF0FW01.XGPCD[PFWSUB3] = PFDREC.XGPCD[PFWSUB1];
      PF0FW01.SY1STNBR[PFWSUB3] = PFDREC.SY1STNBR[PFWSUB1];
      PF0FW01.SY2CLRID[PFWSUB3] = PFDREC.SY2CLRID[PFWSUB1];
      PF0FW01.XDMCD[PFWSUB3] = PFDREC.XDMCD[PFWSUB1];
      PF0FW01.XQACD[PFWSUB3] = PFDREC.XQACD[PFWSUB1];
      PF0FW01.XLCCD[PFWSUB3] = PFDREC.XLCCD[PFWSUB1];
      PFWSUB1 = PFWSUB1 + 1;
                                   /* index range to w/s storage area*/
      PFWSUB3 = PFWSUB3 + 1;
    end
  end
end // end PF0F410

// determine code val. subscript
Function PF0F420()
   /* ********************************************************/
   /* *  the purpose of this process is determine the       **/
   /* *  starting position in the pfdrec for storing the    **/
   /* *  eight screen occurences of the attribute source    **/
   /* *  codes. pfwsub1 contains the element # value.       **/
   /* ********************************************************/
  ;
  if (PFWSUB1 == 1)
    PFWSUB2 = 1; /* start at pfdcdval(1)*/
  else
    if (PFWSUB1 == 2)
      PFWSUB2 = 9; /* start at pfdcdval(9)*/
    else
      if (PFWSUB1 == 3)
        PFWSUB2 = 17; /* start at pfdcdval(17)*/
      else
        if (PFWSUB1 == 4)
          PFWSUB2 = 25; /* start at pfdcdval(25)*/
        else
          if (PFWSUB1 == 5)
            PFWSUB2 = 33; /* start at pfdcdval(33)*/
          else
            if (PFWSUB1 == 6)
              PFWSUB2 = 41; /* start at pfdcdval(41)*/
            else
              if (PFWSUB1 == 7)
                PFWSUB2 = 49; /* start at pfdcdval(49)*/
              end
            end
          end
        end
      end
    end
  end
end // end PF0F420

// process screen pf0fm002
Function PF0F600()
  PFWERRF = "N";
  ;
  if (PF0FW01.PF0FWSC1 == "Y") /* if item from col. 1 selected*/
    /* with an 's'*/
    PF0F690(); /* send pf0fm002 screen*/
  end
  ;
  if (PF0FM001.PF0FMACT == "I" /* if action is inquiry*/
   || PF0FM001.PF0FMACT == " " 
   || PFWEOAF == "Y"           /* or end the application*/
   || PFWEOSF == "Y")          /* or end the screen*/
    return;
  end
  ;
   /* **********************************************************/
   /* **  perform screen editing indexing from bottom (43)   ***/
   /* **  to top (1) so that cursor will be positioned on    ***/
   /* **  the first occurrence of an error on the screen.    ***/
   /* **********************************************************/
  ;
  if (PFWREC.PFWERRF == "N")
    if (PF0FM001.PF0FMCDE[43] > 0) /* if screen pf0fm002 field*/
      PF0F643(); /* pf0fmxga is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[40] > 0) /* if screen pf0fm002 field*/
      PF0F640(); /* pf0fmxsp is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[37] > 0) /* if screen pf0fm002 field*/
      PF0F637(); /* pf0fmypg is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[34] > 0) /* if screen pf0fm002 field*/
      PF0F634(); /* pf0fmypg is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[31] > 0) /* if screen pf0fm002 field*/
      PF0F631(); /* pf0fmysc is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[28] > 0) /* if screen pf0fm002 field*/
      PF0F628(); /* pf0fmymc is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[25] > 0) /* if screen pf0fm002 field*/
      PF0F625(); /* pf0fmymb is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[22] > 0) /* if screen pf0fm002 field*/
      PF0F622(); /* pf0fmyma is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[19] > 0) /* if screen pf0fm002 field*/
      PF0F619(); /* xplcd    is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[16] > 0) /* if screen pf0fm002 field*/
      PF0F616(); /* pf0fmyfa is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[13] > 0) /* if screen pf0fm002 field*/
      PF0F613(); /* pf0fmygp is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[10] > 0) /* if screen pf0fm002 field*/
      PF0F610(); /* pf0fmxdv is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[07] > 0) /* if screen pf0fm002 field*/
      PF0F607(); /* pf0fmxat is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[04] > 0) /* if screen pf0fm002 field*/
      PF0F604(); /* pf0fmagy is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[01] > 0) /* if screen pf0fm002 field*/
      PF0F601(); /* pf0fmreg is to be updated,*/
    end /* check for field validity.*/
    ;
  end
  ;
  if (PFWEDTF == "Y") /* if user specified 'edit only' by*/
                                   /* using pf12 and*/
    if (PFWREC.PFWERRF == "N") /* the edit was successful, send the*/
                                   /* user*/
      PFWREC.PFWERRF = "Y"; /* a message stating that.*/
      converseLib.validationFailed(051); /* edit successful; press enter to*/
                                   /* perform update*/
    end
  end
  ;
  if (PF0FW01.PF0FWPOP == "Y")
    PFWREC.PFWERRF = "Y"; /* stop to show selections*/
  end
  ;
end // end PF0F600

// edit (ygr) for field validity
Function PF0F601()
   /* *******************************************************/
   /* **               packing routine                    ***/
   /* **  this routine will left-justify entered data     ***/
   /* **  fields thereby eliminating any embedded blanks. ***/
   /* **  (i.e.) :                                        ***/
   /* **                                                  ***/
   /* **  field1  01 __ 02 __ 04 __ __ 07 08              ***/
   /* **                                                  ***/
   /* **  the packing routine would change field1 as      ***/
   /* **  follows:                                        ***/
   /* **                                                  ***/
   /* **  field1  01 02 04 07 08 __ __ __ __              ***/
   /* **                                                  ***/
   /* *******************************************************/
  ;
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.PF0FMYGR[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.PF0FMYGR[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.PF0FMYGR[PFWSUB1] = PF0FM002.PF0FMYGR[PFWSUB2];
        PF0FM002.PF0FMYGR[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* **********************************************************/
   /* **              end of packing routine                 ***/
   /* **********************************************************/
  ;
   /* **********************************************************/
   /* **              duplication routine                    ***/
   /* **  this routine will prevent a data entry operator    ***/
   /* **  from entered the same value twice. both occurences ***/
   /* **  of the duplicated field will be highlighted.       ***/
   /* **********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.PF0FMYGR[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.PF0FMYGR[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.PF0FMYGR[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.PF0FMYGR[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.PF0FMYGR[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ********************************************************/
   /* **           end of duplication routine              ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **           data validation routine                 ***/
   /* **  this routine wil access either a DB2 table or    ***/
   /* **  a CSP table to verify that the data entered in   ***/
   /* **  a field is valid. the routine will start at the  ***/
   /* **  eighth occurence of the field and work back to   ***/
   /* **  the first occurence.                             ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.PF0FMYGR[PFWSUB1] > " " /* code is valid*/
     && PF0FM002.PF0FMYGR[PFWSUB1] != "ZZ")
      if (PF0FM002.PF0FMYGR[PFWSUB1] in YGRTBL.YGRCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(138);
        set PF0FM002.PF0FMYGR[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[01];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[01];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.PF0FMYGR[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* determine index for position in*/
                                   /* pfdrec*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y"; /* move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGR[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGR[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGR[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGR[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGR[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGR[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGR[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGR[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F601

// edit (agy) for field validity
Function PF0F604()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.SM1AGYID[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.SM1AGYID[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.SM1AGYID[PFWSUB1] = PF0FM002.SM1AGYID[PFWSUB2];
        PF0FM002.SM1AGYID[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.SM1AGYID[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.SM1AGYID[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.SM1AGYID[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.SM1AGYID[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.SM1AGYID[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.SM1AGYID[PFWSUB1] == "?") /* in agency field*/
      set PF0FM002.SM1AGYID[PFWSUB1] cursor, bold; /* user tried to window*/
      PFWREC.PFWERRF = "Y"; /* and it doesn't exist*/
      converseLib.validationFailed(105);
    else
      if (PF0FM002.SM1AGYID[PFWSUB1] > " " /* if agency code was entered*/
       && PF0FM002.SM1AGYID[PFWSUB1] != "ZZZZ") /* non-default*/
        set SM1REC empty; /* call 'IO0050' to access prod. data*/
                                   /* base*/
        SM1REC.SM1AGYID = PF0FM002.SM1AGYID[PFWSUB1];
        call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == +0) /* if record on data base, return*/
           /* next sentence*/
        else
          if (SQLCA.VAGen_SQLCODE == +100) /* if record not found,*/
            PFWERRF = "Y"; /* take appropriate measures*/
            set PF0FM002.SM1AGYID[PFWSUB1] cursor;
            set PF0FM002.SM1AGYID[PFWSUB1] bold;
            converseLib.validationFailed(139);
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* if data base page busy,*/
              PFWERRF = "Y"; /* notify user*/
              converseLib.validationFailed(114);
            else
              TA1REC.TA1LOCAT[2] = PF0FM002.SM1AGYID[PFWSUB1];
              TA1REC.TA1LOCAT[4] = "IO0050"; /* transfer to ta*/
              TA1REC.TA1DBASE = "DSLSMN";
              TA1REC.TA1TBLVU = "VSAGCY01";
              XPPF010();
            end
          end
        end
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[04];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[04];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.SM1AGYID[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.SM1AGYID[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.SM1AGYID[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.SM1AGYID[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.SM1AGYID[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.SM1AGYID[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.SM1AGYID[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.SM1AGYID[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.SM1AGYID[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F604

// edit (xat) for field validity
Function PF0F607()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.XATCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.XATCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.XATCD[PFWSUB1] = PF0FM002.XATCD[PFWSUB2];
        PF0FM002.XATCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.XATCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.XATCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.XATCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.XATCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.XATCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104); /* data field duplicated*/
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.XATCD[PFWSUB1] > " " /* xat code is valid*/
     && PF0FM002.XATCD[PFWSUB1] != "ZZ")
      if (PF0FM002.XATCD[PFWSUB1] in XATTBL.XATCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(140); /* data field duplicated*/
        set PF0FM002.XATCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[07];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[07];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.XATCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XATCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XATCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XATCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XATCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XATCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XATCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XATCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XATCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F607

// edit (xdv) for field validity
Function PF0F610()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.XDVCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.XDVCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.XDVCD[PFWSUB1] = PF0FM002.XDVCD[PFWSUB2];
        PF0FM002.XDVCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.XDVCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.XDVCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.XDVCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.XDVCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.XDVCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.XDVCD[PFWSUB1] > " " /* div code is valid*/
     && PF0FM002.XDVCD[PFWSUB1] != "ZZ")
      if (PF0FM002.XDVCD[PFWSUB1] in XDVTBL.XDVCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(076);
        set PF0FM002.XDVCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[10];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[10];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.XDVCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XDVCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XDVCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XDVCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XDVCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XDVCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XDVCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XDVCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XDVCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F610

// edit (ysp) for field validity
Function PF0F613()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.PF0FMYGP[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.PF0FMYGP[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.PF0FMYGP[PFWSUB1] = PF0FM002.PF0FMYGP[PFWSUB2];
        PF0FM002.PF0FMYGP[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.PF0FMYGP[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.PF0FMYGP[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.PF0FMYGP[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.PF0FMYGP[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.PF0FMYGP[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.PF0FMYGP[PFWSUB1] > " " /* if data has been entered*/
     && PF0FM002.PF0FMYGP[PFWSUB1] != "ZZ")
      PFWREC.PFWTBLID = "XGP"; /* in field, check DB2 table*/
      PFWREC.PFWSYSID = "PF"; /* to validate data.*/
      PFWREC.PFWSUMID = 0001;
      PFWREC.PFWSUMCD = PF0FM002.PF0FMYGP[PFWSUB1];
      PFWREC.PFWSUMVL = "****";
      XPPF500(); /* perform data base access*/
      if (PFWCOUNT == 0)
        converseLib.validationFailed(077);
        PFWERRF = "Y";
        set PF0FM002.PF0FMYGP[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[13];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[13];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.PF0FMYGP[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGP[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGP[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGP[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGP[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGP[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGP[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGP[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYGP[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F613

// edit (yfa) for field validity
Function PF0F616()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.YFACD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.YFACD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.YFACD[PFWSUB1] = PF0FM002.YFACD[PFWSUB2];
        PF0FM002.YFACD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.YFACD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.YFACD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.YFACD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.YFACD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.YFACD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.YFACD[PFWSUB1] > " "
     && PF0FM002.YFACD[PFWSUB1] != "ZZ")
      if (PF0FM002.YFACD[PFWSUB1] in YFATBL.YFACD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(141);
        set PF0FM002.YFACD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[16];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[16];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.YFACD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YFACD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YFACD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YFACD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YFACD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YFACD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YFACD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YFACD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YFACD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F616

// edit (xpl) for field validity
Function PF0F619()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.XPLCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.XPLCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.XPLCD[PFWSUB1] = PF0FM002.XPLCD[PFWSUB2];
        PF0FM002.XPLCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.XPLCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.XPLCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.XPLCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.XPLCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.XPLCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.XPLCD[PFWSUB1] > " "
     && PF0FM002.XPLCD[PFWSUB1] != "ZZ")
      if (PF0FM002.XPLCD[PFWSUB1] in XPLTBL.XPLCD
       && PF0FM002.XPLCD[PFWSUB1] != "99")
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(142);
        set PF0FM002.XPLCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[19];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[19];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.XPLCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XPLCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XPLCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XPLCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XPLCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XPLCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XPLCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XPLCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XPLCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F619

// edit (yma) for field validity
Function PF0F622()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.YMACD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.YMACD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.YMACD[PFWSUB1] = PF0FM002.YMACD[PFWSUB2];
        PF0FM002.YMACD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.YMACD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.YMACD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.YMACD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.YMACD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.YMACD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.YMACD[PFWSUB1] > " "
     && PF0FM002.YMACD[PFWSUB1] != "ZZZ")
      if (PF0FM002.YMACD[PFWSUB1] in YMATBL.YMACD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(143);
        set PF0FM002.YMACD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[22];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[22];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.YMACD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMACD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMACD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMACD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMACD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMACD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMACD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMACD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMACD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F622

// edit (ymb) for field validity
Function PF0F625()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.YMBCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.YMBCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.YMBCD[PFWSUB1] = PF0FM002.YMBCD[PFWSUB2];
        PF0FM002.YMBCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.YMBCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.YMBCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.YMBCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.YMBCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.YMBCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.YMBCD[PFWSUB1] > " "
     && PF0FM002.YMBCD[PFWSUB1] != "ZZZ")
      if (PF0FM002.YMBCD[PFWSUB1] in YMBTBL.YMBCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(144);
        set PF0FM002.YMBCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[25];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[25];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.YMBCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMBCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMBCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMBCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMBCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMBCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMBCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMBCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMBCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F625

// edit (ymc) for field validity
Function PF0F628()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.YMCCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.YMCCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.YMCCD[PFWSUB1] = PF0FM002.YMCCD[PFWSUB2];
        PF0FM002.YMCCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.YMCCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.YMCCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.YMCCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.YMCCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.YMCCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.YMCCD[PFWSUB1] > " "
     && PF0FM002.YMCCD[PFWSUB1] != "ZZZ")
      if (PF0FM002.YMCCD[PFWSUB1] in YMCTBL.YMCCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(145);
        set PF0FM002.YMCCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[28];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[28];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.YMCCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMCCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMCCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMCCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMCCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMCCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMCCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMCCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YMCCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F628

// edit (ysc) for field validity
Function PF0F631()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.YSCCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.YSCCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.YSCCD[PFWSUB1] = PF0FM002.YSCCD[PFWSUB2];
        PF0FM002.YSCCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.YSCCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.YSCCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.YSCCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.YSCCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.YSCCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.YSCCD[PFWSUB1] > " "
     && PF0FM002.YSCCD[PFWSUB1] != "ZZ")
      if (PF0FM002.YSCCD[PFWSUB1] in YSCTBL.YSCCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(076);
        set PF0FM002.YSCCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[31];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[31];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.YSCCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YSCCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YSCCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YSCCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YSCCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YSCCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YSCCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YSCCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.YSCCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F631

// edit (ysp) for field validity
Function PF0F634()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.PF0FMYSP[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.PF0FMYSP[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.PF0FMYSP[PFWSUB1] = PF0FM002.PF0FMYSP[PFWSUB2];
        PF0FM002.PF0FMYSP[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.PF0FMYSP[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.PF0FMYSP[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.PF0FMYSP[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.PF0FMYSP[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.PF0FMYSP[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.PF0FMYSP[PFWSUB1] > " " /* if data has been entered*/
     && PF0FM002.PF0FMYSP[PFWSUB1] != "ZZ")
      PFWREC.PFWTBLID = "XGS"; /* in field, check DB2 table*/
      PFWREC.PFWSYSID = "PF"; /* to validate data.*/
      PFWREC.PFWSUMID = 0001;
      PFWREC.PFWSUMCD = PF0FM002.PF0FMYSP[PFWSUB1];
      PFWREC.PFWSUMVL = "****";
      XPPF500(); /* perform data base access*/
      if (PFWCOUNT == 0)
        converseLib.validationFailed(077);
        PFWERRF = "Y";
        set PF0FM002.PF0FMYSP[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[34];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[34];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.PF0FMYSP[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYSP[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYSP[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYSP[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYSP[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYSP[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYSP[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYSP[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.PF0FMYSP[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F634

// edit (ypg) for field validity
Function PF0F637()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.XGSCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.XGSCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.XGSCD[PFWSUB1] = PF0FM002.XGSCD[PFWSUB2];
        PF0FM002.XGSCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.XGSCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.XGSCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.XGSCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.XGSCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.XGSCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.XGSCD[PFWSUB1] > " "
     && PF0FM002.XGSCD[PFWSUB1] != "ZZ")
      if (PF0FM002.XGSCD[PFWSUB1] in XGSTBL.XGSCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(147);
        set PF0FM002.XGSCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[37];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[37];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.XGSCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGSCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGSCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGSCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGSCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGSCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGSCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGSCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGSCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F637

// edit (xsp) for field validity
Function PF0F640()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.XSPCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.XSPCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.XSPCD[PFWSUB1] = PF0FM002.XSPCD[PFWSUB2];
        PF0FM002.XSPCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.XSPCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.XSPCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.XSPCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.XSPCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.XSPCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.XSPCD[PFWSUB1] > " "
     && PF0FM002.XSPCD[PFWSUB1] != "ZZ")
      if (PF0FM002.XSPCD[PFWSUB1] in XSPTBL.XSPCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(148);
        set PF0FM002.XSPCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[40];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[40];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.XSPCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XSPCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XSPCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XSPCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XSPCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XSPCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XSPCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XSPCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XSPCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F640

// edit (xga) for field validity
Function PF0F643()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM002.XGACD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM002.XGACD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM002.XGACD[PFWSUB1] = PF0FM002.XGACD[PFWSUB2];
        PF0FM002.XGACD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM002.XGACD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM002.XGACD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM002.XGACD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM002.XGACD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM002.XGACD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM002.XGACD[PFWSUB1] > " " /* if data has been entered*/
     && PF0FM002.XGACD[PFWSUB1] != "ZZ") /* non-default*/
      PFWREC.PFWTBLID = "XGA"; /* in field, check DB2 table*/
      PFWREC.PFWSYSID = "PF"; /* to validate data.*/
      PFWREC.PFWSUMID = 0001;
      PFWREC.PFWSUMCD = PF0FM002.XGACD[PFWSUB1];
      PFWREC.PFWSUMVL = "****";
      XPPF500(); /* perform data base access*/
      if (PFWCOUNT == 0)
        converseLib.validationFailed(149);
        PFWERRF = "Y";
        set PF0FM002.XGACD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[43];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[43];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM002.XGACD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGACD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGACD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGACD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGACD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGACD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGACD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGACD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM002.XGACD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F643

// update dproft.vrptat01 row
Function PF0F665()
   /* ***********************************************************/
   /* *         update dproft.vrptat01 row                     **/
   /* *  up to this point, the application has edited the      **/
   /* *  data entered on the three screens(pf0fm002,pf0fm003,  **/
   /* *  pf0fm004) and placed the edited information in        **/
   /* *  pfdrec. now pfdrec will be used to change the row.    **/
   /* ***********************************************************/
  ;
  if (PFDREC.PFICD[1] == " "
   && PFDREC.PFICD[2] == " "
   && PFDREC.PFICD[3] == " "
   && PFDREC.PFICD[4] == " "
   && PFDREC.PFICD[5] == " "
   && PFDREC.PFICD[6] == " "
   && PFDREC.PFICD[7] == " "
   && PFDREC.PFICD[8] == " ")
    PFWERRF = "Y";
    converseLib.validationFailed(180);
                                   /* cannot change; no attributes selected*/
    return;
  end
  ;
  if (PFDREC.PFICD[8] != " "    /* if product was chosen*/
   && PFDREC.PFDVALFL[8] == " " /* and no specific prod vals selected*/
   && COMMAREA.CACLVL[1] == "N")
                                   /* and user's chg security is not high*/
    PFWREC.PFWSUB1 = 1; /* require all attributes chosen to*/
    while (PFWREC.PFWSUB1 <= 7) /* to have specific vals selected*/
      if (PFDREC.PFICD[PFWSUB1] != " "
       && PFDREC.PFDVALFL[PFWSUB1] == " ")
        PFWERRF = "Y";
        converseLib.validationFailed(188);
                                   /* all other elements must have specific*/
        return; /* values when product does not*/
      end
      PFWREC.PFWSUB1 = PFWREC.PFWSUB1 + 1;
    end
  end
  ;
  XPPF030(); /* get system time/date*/
  ;
  PFDREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PFDREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  ;
  set SQLCA empty; /* clear the sql code record*/
  ;
  call "IO2740" ("U ", SQLCA, PFDREC) {isNoRefresh = yes, isExternal = yes}; /* update vrptat01 db2 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* if record changed, send user a message*/
    converseLib.validationFailed(015); /* changes have been entered*/
    return;
  else /* else abend the application*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VRPTAT01";
    PF0FW01.PF0FWREF = PFDREC.PFDREF;
    TA1REC.TA1TBLKE = PF0FW01.PF0FWREF;
    TA1REC.TA1LOCAT[2] = "PF0F665";
    TA1REC.TA1LOCAT[4] = "IO2740";
    XPPF010();
  end
end // end PF0F665

// add dproft.vrptat01 row
Function PF0F675()
   /* ***********************************************************/
   /* *           add dproft.vrptat01 row                      **/
   /* *  up to this point, the application has edited the      **/
   /* *  data entered on the three screens(pf0fm002,pf0fm003,  **/
   /* *  pf0fm004) and placed the edited information in        **/
   /* *  pfdrec. now pfdrec will be used to add the row.       **/
   /* ***********************************************************/
  ;
  if (PFDREC.PFICD[1] == " "
   && PFDREC.PFICD[2] == " "
   && PFDREC.PFICD[3] == " "
   && PFDREC.PFICD[4] == " "
   && PFDREC.PFICD[5] == " "
   && PFDREC.PFICD[6] == " "
   && PFDREC.PFICD[7] == " "
   && PFDREC.PFICD[8] == " ")
    PFWERRF = "Y";
    converseLib.validationFailed(179); /* cannot add; no attributes selected*/
    return;
  end
  ;
  if (PFDREC.PFICD[8] != " "    /* if product was chosen*/
   && PFDREC.PFDVALFL[8] == " " /* and no specific prod vals selected*/
   && COMMAREA.CAALVL[1] == "N")
                                   /* and user's add security is not high*/
    PFWREC.PFWSUB1 = 1; /* require all attributes chosen to*/
    while (PFWREC.PFWSUB1 <= 7) /* to have specific vals selected*/
      if (PFDREC.PFICD[PFWSUB1] != " "
       && PFDREC.PFDVALFL[PFWSUB1] == " ")
        PFWERRF = "Y";
        converseLib.validationFailed(188);
                                   /* all other elements must have specific*/
        return; /* values when product does not*/
      end
      PFWREC.PFWSUB1 = PFWREC.PFWSUB1 + 1;
    end
  end
  ;
  XPPF030(); /* get system time/date*/
  ;
  PFDREC.ZZZSDT = TA2REC.TA2GRGGN;
  PFDREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  PFDREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  PFDREC.ZZZCHGCT = 0;
  ;
  PFDREC.XXXUSRID = COMMAREA.CAUSERID;
  ;
  set SQLCA empty; /* clear the sql code record*/
  ;
  call "IO2740" ("A ", SQLCA, PFDREC) {isNoRefresh = yes, isExternal = yes}; /* add vrptat01 db2 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* if record added, send user a message*/
    converseLib.validationFailed(133); /* attribute ref # added to data base*/
    return;
  else /* else abend the application*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VRPTAT01";
    PF0FW01.PF0FWREF = PFDREC.PFDREF;
    TA1REC.TA1TBLKE = PF0FW01.PF0FWREF;
    TA1REC.TA1LOCAT[2] = "PF0F675";
    TA1REC.TA1LOCAT[4] = "IO2740";
    XPPF010();
  end
end // end PF0F675

// PF0FM002 windowing routine
Function PF0F680()
   /* *********************************************************/
   /* *            PF0FM002 windowing routine                **/
   /* *   browse thru screen pf0fm002 searching for '?'.     **/
   /* *   perform the appropriate windowing routine for      **/
   /* *   each occurrence of a '?'.                          **/
   /* *********************************************************/
  ;
  PF0FW01.PF0FWPOP = "N"; /* Set Pop-up window flag off*/
  ;
   /* *********************************************************/
   /* ***                                                  ****/
   /* ***        'sales group' pop-up screen               ****/
   /* ***                                                  ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.PF0FMYGR[PFWSUB1] == "?") /* in sales group field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      XX0XW02.XX0XWHDR = "              SALES GROUP ";
      while (XX0XW02.XX0XWEND == "N")
        XPYGR01(); /* converse sales group pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.PF0FMYGR[PFWSUB1] = YGRTBL.YGRCD[XX0XWPIX];
        set PF0FM002.PF0FMYGR[PFWSUB1] cursor;
      else
        PF0FM002.PF0FMYGR[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***                                                  ****/
   /* ***   'agency' pop-up screen doesn't exist           ****/
   /* ***                                                  ****/
   /* *********************************************************/
  ;
  ;
   /* *********************************************************/
   /* ***       'account type' pop-up screen               ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.XATCD[PFWSUB1] == "?") /* in account type field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      XX0XW02.XX0XWHDR = "            ACCOUNT TYPE  ";
      while (XX0XW02.XX0XWEND == "N")
        XPXAT01(); /* converse account type pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.XATCD[PFWSUB1] = XATTBL.XATCD[XX0XWPIX];
        set PF0FM002.XATCD[PFWSUB1] cursor;
      else
        PF0FM002.XATCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
  ;
   /* *********************************************************/
   /* ***       owning division pop-up screen              ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.XDVCD[PFWSUB1] == "?") /* in state code field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      XX0XW02.XX0XWHDR = "          OWNING DIVISION ";
      while (XX0XW02.XX0XWEND == "N")
        XPXDV01(); /* converse division code pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.XDVCD[PFWSUB1] = XDVTBL.XDVCD[XX0XWPIX];
        set PF0FM002.XDVCD[PFWSUB1] cursor;
      else
        PF0FM002.XDVCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***       'summary gpc' pop-up screen                ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  PFWREC.PFWTBLID = "XGP"; /* move summary key fields to*/
  PFWREC.PFWSYSID = "PF"; /* pfwsetky hold area*/
  PFWREC.PFWSUMID = 0001;
  PFWREC.PFWSUMCD = "**";
  PFWREC.PFWSUMVL = "****";
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.PF0FMYGP[PFWSUB1] == "?") /* in summ. gpc field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPPF500(); /* summary table (ysm) access routine*/
      ;
      if (PFWCOUNT == 0) /* if summ. gpc not in summary table,*/
        set PF0FM002.PF0FMYGP[PFWSUB1] cursor, bold; /* it's an error*/
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(105); /* window not available for field*/
      else
        XPXX001(); /* initialization - pop up window*/
        XX0XW02.XX0XWHDR = "          SUMMARY GPC     ";
        while (XX0XW02.XX0XWEND == "N")
          XPPF510(); /* converse summary pop up window*/
          ;
             /* ************************************************/
             /* **   If the user selection flag is equal     ***/
             /* **   to 'y', use the passed table index      ***/
             /* **   'XXXPINX' to move the table code and    ***/
             /* **   description to the map.                 ***/
             /* ************************************************/
          ;
        end
        if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
          PF0FM002.PF0FMYGP[PFWSUB1] = PF2REC.YSMSUMCD[XX0XWPIX];
          set PF0FM002.PF0FMYGP[PFWSUB1] cursor;
        else
          PF0FM002.PF0FMYGP[PFWSUB1] = " ";
        end
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* *** business unit (financial lvl 1) pop-up screen    ****/
   /* renamed description from 'financial level 1',is still YFA. 0194/mjk*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.YFACD[PFWSUB1] == "?") /* in 'business unit' field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      /* MOVE '        FINANCIAL LEVEL 1 ' TO XX0XW02.XX0XWHDR;*/
      XX0XW02.XX0XWHDR = "         BUSINESS UNIT    ";
      while (XX0XW02.XX0XWEND == "N")
        XPYFA01(); /* converse bus unit pop up window*/
        ;
        /* ************************************************/
        /* **   If the user selection flag is equal     ***/
        /* **   to 'y', use the passed table index      ***/
        /* **   'XXXPINX' to move the table code and    ***/
        /* **   description to the map.                 ***/
        /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.YFACD[PFWSUB1] = YFATBL.YFACD[XX0XWPIX];
        set PF0FM002.YFACD[PFWSUB1] cursor;
      else
        PF0FM002.YFACD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***      'product line'      pop-up screen           ****/
   /* replaced 'financial level 2'/yfb with XPL. 0194/mjk  ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.XPLCD[PFWSUB1] == "?") /* in 'product line' field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      /* MOVE '        FINANCIAL LEVEL 2 ' TO XX0XW02.XX0XWHDR;*/
      XX0XW02.XX0XWHDR = "         PRODUCT LINE     ";
      while (XX0XW02.XX0XWEND == "N")
        XPXPL01(); /* converse prod line pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.XPLCD[PFWSUB1] = XPLTBL.XPLCD[XX0XWPIX];
        set PF0FM002.XPLCD[PFWSUB1] cursor;
      else
        PF0FM002.XPLCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***      'marketing division' pop-up screen          ****/
   /* renamed description from 'marketing level 1', is still YMA. 0194/mjk*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.YMACD[PFWSUB1] == "?") /* in mkting div  field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      /* MOVE '        MARKETING LEVEL 1 ' TO XX0XW02.XX0XWHDR;*/
      XX0XW02.XX0XWHDR = "        MARKETING DIVISION";
      while (XX0XW02.XX0XWEND == "N")
        XPYMA01(); /* converse mkting div pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.YMACD[PFWSUB1] = YMATBL.YMACD[XX0XWPIX];
        set PF0FM002.YMACD[PFWSUB1] cursor;
      else
        PF0FM002.YMACD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***      'marketing category' pop-up screen          ****/
   /* renamed description from 'marketing level 2', is still YMB. 0194/mjk*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.YMBCD[PFWSUB1] == "?") /* in mkting cat field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      /* MOVE '        MARKETING LEVEL 2 ' TO XX0XW02.XX0XWHDR;*/
      XX0XW02.XX0XWHDR = "        MARKETING CATEGORY";
      while (XX0XW02.XX0XWEND == "N")
        XPYMB01(); /* converse mkting cat pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.YMBCD[PFWSUB1] = YMBTBL.YMBCD[XX0XWPIX];
        set PF0FM002.YMBCD[PFWSUB1] cursor;
      else
        PF0FM002.YMBCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***      'market detail cat' pop-up screen           ****/
   /* renamed description from 'marketing level 3',is still YMC. 0194/mjk*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.YMCCD[PFWSUB1] == "?") /* in mkt d cat field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      /* MOVE '        MARKETING LEVEL 3 ' TO XX0XW02.XX0XWHDR;*/
      XX0XW02.XX0XWHDR = "       MKT DETAIL CATEGORY";
      while (XX0XW02.XX0XWEND == "N")
        XPYMC01(); /* converse mkt d cat pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.YMCCD[PFWSUB1] = YMCTBL.YMCCD[XX0XWPIX];
        set PF0FM002.YMCCD[PFWSUB1] cursor;
      else
        PF0FM002.YMCCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***       'sales category' pop-up screen             ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.YSCCD[PFWSUB1] == "?") /* in sales cat. field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      XX0XW02.XX0XWHDR = "           SALES CATEGORY ";
      while (XX0XW02.XX0XWEND == "N")
        XPYSC01(); /* converse sales cat. pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.YSCCD[PFWSUB1] = YSCTBL.YSCCD[XX0XWPIX];
        set PF0FM002.YSCCD[PFWSUB1] cursor;
      else
        PF0FM002.YSCCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***     'summary product group'  pop-up screen       ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  PFWREC.PFWTBLID = "XGS"; /* move summary key fields to*/
  PFWREC.PFWSYSID = "PF"; /* pfwsetky hold area*/
  PFWREC.PFWSUMID = 0001;
  PFWREC.PFWSUMCD = "**";
  PFWREC.PFWSUMVL = "****";
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.PF0FMYSP[PFWSUB1] == "?") /* in summ. prod. grp. field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPPF500(); /* summary table (ysm) access routine*/
      ;
      if (PFWCOUNT == 0) /* if summ. gpc not in summary table,*/
        set PF0FM002.PF0FMYSP[PFWSUB1] cursor, bold; /* it's an error*/
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(105); /* window not available for field*/
      else
        XPXX001(); /* initialization - pop up window*/
        XX0XW02.XX0XWHDR = "       SUMMARY PRODUCT GROUP";
        while (XX0XW02.XX0XWEND == "N")
          XPPF510(); /* converse summary pop up window*/
          ;
             /* ************************************************/
             /* **   If the user selection flag is equal     ***/
             /* **   to 'y', use the passed table index      ***/
             /* **   'XXXPINX' to move the table code and    ***/
             /* **   description to the map.                 ***/
             /* ************************************************/
          ;
        end
        if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
          PF0FM002.PF0FMYSP[PFWSUB1] = PF2REC.YSMSUMCD[XX0XWPIX];
          set PF0FM002.PF0FMYSP[PFWSUB1] cursor;
        else
          PF0FM002.PF0FMYSP[PFWSUB1] = " ";
        end
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***       'product group' pop-up screen              ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.XGSCD[PFWSUB1] == "?") /* in prod. grp. field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      XX0XW02.XX0XWHDR = "           PRODUCT GROUP  ";
      while (XX0XW02.XX0XWEND == "N")
        XPXGS01(); /* converse product group pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.XGSCD[PFWSUB1] = XGSTBL.XGSCD[XX0XWPIX];
        set PF0FM002.XGSCD[PFWSUB1] cursor;
      else
        PF0FM002.XGSCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***       'sport activity' pop-up screen             ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.XSPCD[PFWSUB1] == "?") /* in sport activity field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* initialization - pop up window*/
      XX0XW02.XX0XWHDR = "            SPORT ACTIVITY";
      while (XX0XW02.XX0XWEND == "N")
        XPXSP01();
                                   /* converse sport activity pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM002.XSPCD[PFWSUB1] = XSPTBL.XSPCD[XX0XWPIX];
        set PF0FM002.XSPCD[PFWSUB1] cursor;
      else
        PF0FM002.XSPCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***      'summary gender age' pop-up screen          ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  PFWREC.PFWTBLID = "XGA"; /* move summary key fields to*/
  PFWREC.PFWSYSID = "PF"; /* pfwsetky hold area*/
  PFWREC.PFWSUMID = 0001;
  PFWREC.PFWSUMCD = "**";
  PFWREC.PFWSUMVL = "****";
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM002.XGACD[PFWSUB1] == "?") /* in summ. prod. grp. field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPPF500(); /* summary table (ysm) access routine*/
      ;
      if (PFWCOUNT == 0) /* if summ. gpc not in summary table,*/
        set PF0FM002.XGACD[PFWSUB1] cursor, bold; /* it's an error*/
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(105); /* window not available for field*/
      else
        XPXX001(); /* initialization - pop up window*/
        XX0XW02.XX0XWHDR = "          SUMMARY GENDER AGE";
        while (XX0XW02.XX0XWEND == "N")
          XPPF510(); /* converse summary pop up window*/
          ;
             /* ************************************************/
             /* **   If the user selection flag is equal     ***/
             /* **   to 'y', use the passed table index      ***/
             /* **   'XXXPINX' to move the table code and    ***/
             /* **   description to the map.                 ***/
             /* ************************************************/
          ;
        end
        if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
          PF0FM002.XGACD[PFWSUB1] = PF2REC.YSMSUMCD[XX0XWPIX];
          set PF0FM002.XGACD[PFWSUB1] cursor;
        else
          PF0FM002.XGACD[PFWSUB1] = " ";
        end
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
end // end PF0F680

// converse screen pf0fm002
Function PF0F690()
   /* ***********************************************************/
   /* *  an 's' was entered in the first column of the primary **/
   /* *  screen (pf0fm001). therefore, send screen pf0fm002    **/
   /* *  with the field(s) marked with an 's' unprotected to   **/
   /* *  permit data entry.                                    **/
   /* ***********************************************************/
  ;
  PFWREC.PFWERRF = "N";
  PFWREC.PFWEDTF = "N";
  ;
  ;
  converse PF0FM002 ;
  ;
  PF0FS01(); /* check pf keys*/
  ;
  if (converseVar.eventKey is pf12) /* if user has requested an edit, set*/
    PFWREC.PFWEDTF = "Y"; /* the edit flag (pfwedtf) because*/
  end /* window activity will wipe out*/
   /* the original ezeaid key*/
  ;
  if (PFWREC.PFWEOAF == "Y" /* end the application?*/
   || PFWREC.PFWEOSF == "Y")
    return;
  end
  ;
  if (PF0FM001.PF0FMACT == " " /* if this is an inquiry,*/
   || PF0FM001.PF0FMACT == "I") /* return*/
    return;
  end
  ;
  if (PFWREC.PFWERRF == "N") /* perform window routine*/
    PF0F680();
  end
  ;
  converseLib.clearScreen();
   /* reset map after windowing.*/
end // end PF0F690

// process screen pf0fm003
Function PF0F700()
  PFWERRF = "N";
  ;
  if (PF0FW01.PF0FWSC2 == "Y") /* if item from col. 2 selected*/
    /* with an 's'*/
    PF0F790(); /* send pf0fm003 screen*/
  end
  ;
  if (PF0FM001.PF0FMACT == "I" /* if action is inquiry*/
   || PF0FM001.PF0FMACT == " " 
   || PFWEOAF == "Y"           /* or end the application*/
   || PFWEOSF == "Y")          /* or end the screen*/
    return;
  end
  ;
   /* **********************************************************/
   /* **  perform screen editing indexing from bottom (44)   ***/
   /* **  to top (2) so that cursor will be positioned on    ***/
   /* **  the first occurence of an error on the screen.     ***/
   /* **********************************************************/
  ;
  if (PFWREC.PFWERRF == "N")
    if (PF0FM001.PF0FMCDE[44] > 0) /* if screen pf0fm003 field*/
      PF0F744(); /* yfgcd    is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[41] > 0) /* if screen pf0fm003 field*/
      PF0F741(); /* yffcd    is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[38] > 0) /* if screen pf0fm003 field*/
      PF0F738(); /* yfecd    is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[35] > 0) /* if screen pf0fm003 field*/
      PF0F735(); /* ysfcd    is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[32] > 0) /* if screen pf0fm003 field*/
      PF0F732(); /* ysecd    is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[29] > 0) /* if screen pf0fm003 field*/
      PF0F729(); /* xrdcd is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[26] > 0) /* if screen pf0fm003 field*/
      PF0F726(); /* pf0fmxdv is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[23] > 0) /* if screen pf0fm003 field*/
      PF0F723(); /* pf0fmyss is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[20] > 0) /* if screen pf0fm003 field*/
      PF0F720(); /* pf0fmxry is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[17] > 0) /* if screen pf0fm003 field*/
      PF0F717(); /* xcncd    is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[14] > 0) /* if screen pf0fm003 field*/
      PF0F714(); /* pf0fmxwh is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[11] > 0) /* if screen pf0fm003 field*/
      PF0F711(); /* pf0fmyic is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[08] > 0) /* if screen pf0fm003 field*/
      PF0F708(); /* xobcd is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[05] > 0) /* if screen pf0fm003 field*/
      PF0F705(); /* pf0fmxau is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[02] > 0) /* IF SCREEN PF0FM003 FIELD*/
      PF0F702(); /* xdrcd    is to be updated,*/
    end /* check for field validity.*/
    ;
  end
  ;
  if (PFWEDTF == "Y")
    if (PFWREC.PFWERRF == "N")
      PFWREC.PFWERRF = "Y";
      converseLib.validationFailed(051); /* edit successful; press enter to*/
                                   /* perform update*/
    end
  end
  ;
  if (PF0FW01.PF0FWPOP == "Y")
    PFWREC.PFWERRF = "Y"; /* Stop to show selections*/
  end
end // end PF0F700

// edit (xdr) for field validity
Function PF0F702()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.XDR-PROD-REG-CD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.XDR-PROD-REG-CD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.XDR-PROD-REG-CD[PFWSUB1] = PF0FM003.XDR-PROD-REG-CD[PFWSUB2];
        PF0FM003.XDR-PROD-REG-CD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field; make*/
    if (PF0FM003.XDR-PROD-REG-CD[PFWSUB1] > " ") /* sure it isn't entered*/
      PF0FWAT2 = PF0FM003.XDR-PROD-REG-CD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold area,*/
        if (PF0FM003.XDR-PROD-REG-CD[PFWSUB2] == PF0FWAT2) /* increment cntr*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data entered more*/
          set PF0FM003.XDR-PROD-REG-CD[PFWSUB1] bold; /* than once, so flag*/
          set PF0FM003.XDR-PROD-REG-CD[PFWSUB1] cursor; /* as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.XDR-PROD-REG-CD[PFWSUB1] > " "
     && PF0FM003.XDR-PROD-REG-CD[PFWSUB1] != "ZZ")
      if (PF0FM003.XDR-PROD-REG-CD[PFWSUB1] in XDRTBL.XDR-PROD-REG-CD
       && PF0FM003.XDR-PROD-REG-CD[PFWSUB1] != "99")
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(150);
        set PF0FM003.XDR-PROD-REG-CD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[02];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[02];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.XDR-PROD-REG-CD[1] > " ")
    /* /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                  /* /* in pfdrec*/
                                   /* and move data elements to pfdrec*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDR-PROD-REG-CD[1];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDR-PROD-REG-CD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDR-PROD-REG-CD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDR-PROD-REG-CD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDR-PROD-REG-CD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDR-PROD-REG-CD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDR-PROD-REG-CD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDR-PROD-REG-CD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F702

// edit (xau) for field validity
Function PF0F705()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.PF0FMXAU[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.PF0FMXAU[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.PF0FMXAU[PFWSUB1] = PF0FM003.PF0FMXAU[PFWSUB2];
        PF0FM003.PF0FMXAU[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM003.PF0FMXAU[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM003.PF0FMXAU[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM003.PF0FMXAU[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM003.PF0FMXAU[PFWSUB1] bold; /* entered more than once*/
          set PF0FM003.PF0FMXAU[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.PF0FMXAU[PFWSUB1] > " "
     && PF0FM003.PF0FMXAU[PFWSUB1] != "83")
      if (PF0FM003.PF0FMXAU[PFWSUB1] in XAUTBL.XAUCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(151);
        set PF0FM003.PF0FMXAU[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[05];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[05];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.PF0FMXAU[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXAU[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXAU[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXAU[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXAU[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXAU[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXAU[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXAU[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXAU[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F705

// edit (xob) for field validity
Function PF0F708()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.XOBCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.XOBCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.XOBCD[PFWSUB1] = PF0FM003.XOBCD[PFWSUB2];
        PF0FM003.XOBCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM003.XOBCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM003.XOBCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM003.XOBCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM003.XOBCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM003.XOBCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104); /* data field duplicated*/
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.XOBCD[PFWSUB1] > " " /* if data has been entered*/
     && PF0FM003.XOBCD[PFWSUB1] != "ZZ") /* that is non-default*/
      if (PF0FM003.XOBCD[PFWSUB1] in XOBTBL.XOBCD)
         /* next sentence*/
      else
        converseLib.validationFailed(152); /* entered base order type invalid*/
        PFWERRF = "Y";
        set PF0FM003.XOBCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[08];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[08];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.XOBCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XOBCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XOBCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XOBCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XOBCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XOBCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XOBCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XOBCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XOBCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F708

// edit (yic) for field validity
Function PF0F711()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.PF0FMYIC[PFWSUB1] > 0) /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.PF0FMYIC[PFWSUB2] > 0)
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.PF0FMYIC[PFWSUB1] = PF0FM003.PF0FMYIC[PFWSUB2];
        PF0FM003.PF0FMYIC[PFWSUB2] = 0;
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM003.PF0FMYIC[PFWSUB1] > 0) /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM003.PF0FMYIC[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM003.PF0FMYIC[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM003.PF0FMYIC[PFWSUB1] bold; /* entered more than once*/
          set PF0FM003.PF0FMYIC[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.PF0FMYIC[PFWSUB1] > " "
     && PF0FM003.PF0FMYIC[PFWSUB1] != "9999")
      PF0FW01.PF0FWYIC = PF0FM003.PF0FMYIC[PFWSUB1];
      if (PF0FW01.PF0FWYIC in YICTBL.YICCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(153);
        set PF0FM003.PF0FMYIC[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[11];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[11];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.PF0FMYIC[1] > 0) /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYIC[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYIC[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYIC[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYIC[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYIC[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYIC[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYIC[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYIC[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F711

// edit (xwh) for field validity
Function PF0F714()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.XWHCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.XWHCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.XWHCD[PFWSUB1] = PF0FM003.XWHCD[PFWSUB2];
        PF0FM003.XWHCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM003.XWHCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM003.XWHCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM003.XWHCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM003.XWHCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM003.XWHCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.XWHCD[PFWSUB1] > " "
     && PF0FM003.XWHCD[PFWSUB1] != "ZZ")
      if (PF0FM003.XWHCD[PFWSUB1] in XWHTBL.XWHCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(154);
        set PF0FM003.XWHCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[14];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[14];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.XWHCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XWHCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XWHCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XWHCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XWHCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XWHCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XWHCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XWHCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XWHCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F714

// edit (xcn) for field validity
Function PF0F717()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.XCNCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.XCNCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.XCNCD[PFWSUB1] = PF0FM003.XCNCD[PFWSUB2];
        PF0FM003.XCNCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM003.XCNCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM003.XCNCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold area,*/
        if (PF0FM003.XCNCD[PFWSUB2] == PF0FWAT2) /* increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM003.XCNCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM003.XCNCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.XCNCD[PFWSUB1] > " "
     && PF0FM003.XCNCD[PFWSUB1] != "ZZ")
      if (PF0FM003.XCNCD[PFWSUB1] in XCNTBL.XCNCD
       && PF0FM003.XCNCD[PFWSUB1] != "99")
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(155);
        set PF0FM003.XCNCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[17];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[17];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.XCNCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XCNCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XCNCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XCNCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XCNCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XCNCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XCNCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XCNCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XCNCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F717

// edit (xry) for field validity
Function PF0F720()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.PF0FMXRY[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.PF0FMXRY[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.PF0FMXRY[PFWSUB1] = PF0FM003.PF0FMXRY[PFWSUB2];
        PF0FM003.PF0FMXRY[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM003.PF0FMXRY[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM003.PF0FMXRY[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM003.PF0FMXRY[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM003.PF0FMXRY[PFWSUB1] bold; /* entered more than once*/
          set PF0FM003.PF0FMXRY[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.PF0FMXRY[PFWSUB1] > " "
     && PF0FM003.PF0FMXRY[PFWSUB1] != "ZZ")
      if (PF0FM003.PF0FMXRY[PFWSUB1] in XRYTBL.XRYCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(156);
        set PF0FM003.PF0FMXRY[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[20];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[20];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.PF0FMXRY[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXRY[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXRY[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXRY[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXRY[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXRY[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXRY[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXRY[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMXRY[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F720

// edit (yss) for field validity
Function PF0F723()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.PF0FMYSS[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.PF0FMYSS[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.PF0FMYSS[PFWSUB1] = PF0FM003.PF0FMYSS[PFWSUB2];
        PF0FM003.PF0FMYSS[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM003.PF0FMYSS[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM003.PF0FMYSS[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM003.PF0FMYSS[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM003.PF0FMYSS[PFWSUB1] bold; /* entered more than once*/
          set PF0FM003.PF0FMYSS[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.PF0FMYSS[PFWSUB1] > " "
     && PF0FM003.PF0FMYSS[PFWSUB1] != "ZZ")
      if (PF0FM003.PF0FMYSS[PFWSUB1] in YSYTBL.YSYCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(157);
        set PF0FM003.PF0FMYSS[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[23];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[23];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.PF0FMYSS[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYSS[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYSS[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYSS[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYSS[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYSS[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYSS[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYSS[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.PF0FMYSS[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F723

// edit (xdv) for validity
Function PF0F726()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.XDVCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.XDVCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.XDVCD[PFWSUB1] = PF0FM003.XDVCD[PFWSUB2];
        PF0FM003.XDVCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM003.XDVCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM003.XDVCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM003.XDVCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM003.XDVCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM003.XDVCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.XDVCD[PFWSUB1] > " "
     && PF0FM003.XDVCD[PFWSUB1] != "ZZ")
      if (PF0FM003.XDVCD[PFWSUB1] in XDVTBL.XDVCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(158);
        set PF0FM003.XDVCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[26];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[26];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.XDVCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDVCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDVCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDVCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDVCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDVCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDVCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDVCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XDVCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F726

// edit (xrd) for field validity
Function PF0F729()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.XRD-RPT-DIV-CD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] = PF0FM003.XRD-RPT-DIV-CD[PFWSUB2];
        PF0FM003.XRD-RPT-DIV-CD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
                                  /* /* make sure*/
                                   /* it isn't entered more than once.*/
    if (PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] > " ")
      PF0FWAT2 = PF0FM003.XRD-RPT-DIV-CD[PFWSUB1];
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold area,*/
        if (PF0FM003.XRD-RPT-DIV-CD[PFWSUB2] == PF0FWAT2) /* increment cntr*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data entered more*/
          set PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] bold; /* than once, so flag*/
          set PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] cursor; /* it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] > " "
     && PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] != "ZZ")
      if (PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] in XRDTBL.XRD-RPT-DIV-CD
       && PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] != "99")
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(353);
        set PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[29];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[29];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
    /* if user entered data as selection criteria,*/
  if (PF0FM003.XRD-RPT-DIV-CD[1] > " ")
    PF0F420(); /* determine index for position in*/
                                   /* pfdrec*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* and move data elements to pfdrec*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XRD-RPT-DIV-CD[1];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XRD-RPT-DIV-CD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XRD-RPT-DIV-CD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XRD-RPT-DIV-CD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XRD-RPT-DIV-CD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XRD-RPT-DIV-CD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XRD-RPT-DIV-CD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.XRD-RPT-DIV-CD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F729

// edit (yse) for field validity
Function PF0F732()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.YSE-SLS-CAT1-CD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] = PF0FM003.YSE-SLS-CAT1-CD[PFWSUB2];
        PF0FM003.YSE-SLS-CAT1-CD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    /* make sure it isn't entered more than once.*/
    if (PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] > " ")
      PF0FWAT2 = PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1];
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold area,*/
        if (PF0FM003.YSE-SLS-CAT1-CD[PFWSUB2] == PF0FWAT2) /* increment cntr*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data entered*/
          /* more than once, so flag it as an error.*/
          set PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] bold;
          set PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] cursor;
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] > " "
     && PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] != "ZZ")
      if (PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] in YSETBL.YSE-SLS-CAT1-CD
       && PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] != "999")
                                  /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(354);
        set PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[32];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[32];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.YSE-SLS-CAT1-CD[1] > " ")
    /* /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
    /* /* in pfdrec and move data elements to pfdrec*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSE-SLS-CAT1-CD[1];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSE-SLS-CAT1-CD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSE-SLS-CAT1-CD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSE-SLS-CAT1-CD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSE-SLS-CAT1-CD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSE-SLS-CAT1-CD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSE-SLS-CAT1-CD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSE-SLS-CAT1-CD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F732

// edit (ysf) for field validity
Function PF0F735()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.YSF-SLS-CAT2-CD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] = PF0FM003.YSF-SLS-CAT2-CD[PFWSUB2];
        PF0FM003.YSF-SLS-CAT2-CD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    /* make sure it isn't entered more than once.*/
    if (PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] > " ")
      PF0FWAT2 = PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1];
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold area,*/
        if (PF0FM003.YSF-SLS-CAT2-CD[PFWSUB2] == PF0FWAT2) /* increment cntr*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data entered more*/
                                   /* than once,*/
          set PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] bold; /* so flag it*/
          set PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] cursor; /* as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] > " "
     && PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] != "ZZ")
      if (PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] in YSFTBL.YSF-SLS-CAT2-CD
       && PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] != "99")
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(356);
        set PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[35];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[35];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.YSF-SLS-CAT2-CD[1] > " ")
                                   /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                           /* in pfdrec and move data elements to pfdrec*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSF-SLS-CAT2-CD[1];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSF-SLS-CAT2-CD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSF-SLS-CAT2-CD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSF-SLS-CAT2-CD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSF-SLS-CAT2-CD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSF-SLS-CAT2-CD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSF-SLS-CAT2-CD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YSF-SLS-CAT2-CD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F735

// edit (yfe) for field validity
Function PF0F738()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.YFE-FIN-LVL3-CD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] = PF0FM003.YFE-FIN-LVL3-CD[PFWSUB2];
        PF0FM003.YFE-FIN-LVL3-CD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
                   /* make sure it isn't entered more than once.*/
    if (PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] > " ")
      PF0FWAT2 = PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1];
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold area,*/
        if (PF0FM003.YFE-FIN-LVL3-CD[PFWSUB2] == PF0FWAT2) /* increment cntr*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data entered more*/
                                   /* than*/
          set PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] bold; /* once, so flag*/
          set PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] cursor; /* it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] > " "
     && PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] != "ZZ")
      if (PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] in YFETBL.YFE-FIN-LVL3-CD
       && PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] != "99")
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(357);
        set PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[38];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[38];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.YFE-FIN-LVL3-CD[1] > " ")
                                  /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                             /* in pfdrec and move data elements to pfdrec*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFE-FIN-LVL3-CD[1];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFE-FIN-LVL3-CD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFE-FIN-LVL3-CD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFE-FIN-LVL3-CD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFE-FIN-LVL3-CD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFE-FIN-LVL3-CD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFE-FIN-LVL3-CD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFE-FIN-LVL3-CD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F738

// edit (yff) for field validity
Function PF0F741()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.YFF-FIN-LVL4-CD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] = PF0FM003.YFF-FIN-LVL4-CD[PFWSUB2];
        PF0FM003.YFF-FIN-LVL4-CD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
                   /* make sure it isn't entered more than once.*/
    if (PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] > " ")
      PF0FWAT2 = PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1];
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold area,*/
        if (PF0FM003.YFF-FIN-LVL4-CD[PFWSUB2] == PF0FWAT2) /* increment cntr*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data entered more*/
                                   /* than*/
          set PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] bold; /* once, so flag*/
          set PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] cursor; /* it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] > " "
     && PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] != "ZZZ")
      if (PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] in YFFTBL.YFF-FIN-LVL4-CD
       && PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] != "999")
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(358);
        set PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[41];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[41];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.YFF-FIN-LVL4-CD[1] > " ")
                                  /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                             /* in pfdrec and move data elements to pfdrec*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFF-FIN-LVL4-CD[1];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFF-FIN-LVL4-CD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFF-FIN-LVL4-CD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFF-FIN-LVL4-CD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFF-FIN-LVL4-CD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFF-FIN-LVL4-CD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFF-FIN-LVL4-CD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFF-FIN-LVL4-CD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F741

// edit (yfg) for field validity
Function PF0F744()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM003.YFG-FIN-LVL5-CD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] = PF0FM003.YFG-FIN-LVL5-CD[PFWSUB2];
        PF0FM003.YFG-FIN-LVL5-CD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
                      /* make sure it isn't entered more than once.*/
    if (PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] > " ")
      PF0FWAT2 = PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1];
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold area,*/
        if (PF0FM003.YFG-FIN-LVL5-CD[PFWSUB2] == PF0FWAT2) /* increment cntr*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data entered more*/
                                   /* than*/
          set PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] bold; /* once, so flag*/
          set PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] cursor; /* it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] > " "
     && PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] != "ZZZ")
      if (PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] in YFGTBL.YFG-FIN-LVL5-CD
       && PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] != "999")
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(359);
        set PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[44];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[44];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM003.YFG-FIN-LVL5-CD[1] > " ")
                                  /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                       /* in pfdrec and move data elements to pfdrec*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFG-FIN-LVL5-CD[1];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFG-FIN-LVL5-CD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFG-FIN-LVL5-CD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFG-FIN-LVL5-CD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFG-FIN-LVL5-CD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFG-FIN-LVL5-CD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFG-FIN-LVL5-CD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM003.YFG-FIN-LVL5-CD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F744

// windowing routine
Function PF0F780()
   /* *********************************************************/
   /* *                windowing routine                     **/
   /* *   browse thru screen pf0fm003 searching for '?'.     **/
   /* *   perform the appropriate windowing routine for      **/
   /* *   each occurrence of a '?'.                          **/
   /* *********************************************************/
  ;
  PF0FW01.PF0FWPOP = "N";
  ;
   /* *********************************************************/
   /* ***       'development region' pop-up screen         ****/
   /* replaced 'sales rep' which was not being used.*/
   /* (there was not a pop-up screen for sales rep....)*/
   /* new attribute as of 0194/mjk.*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM003.XDR-PROD-REG-CD[PFWSUB1] == "?") /* in dev region field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "       DEVELOPMENT REGION ";
      while (XX0XW02.XX0XWEND == "N")
        XPXDR01(); /* perform dev. region pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.XDR-PROD-REG-CD[PFWSUB1] = XDRTBL.XDR-PROD-REG-CD[XX0XWPIX];
        set PF0FM003.XDR-PROD-REG-CD[PFWSUB1] cursor;
      else
        PF0FM003.XDR-PROD-REG-CD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***       'account class' pop-up screen              ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM003.PF0FMXAU[PFWSUB1] == "?") /* in account type field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "            ACCOUNT CLASS ";
      while (XX0XW02.XX0XWEND == "N")
        XPXAU01(); /* perform account class pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.PF0FMXAU[PFWSUB1] = XAUTBL.XAUCD[XX0XWPIX];
        set PF0FM003.PF0FMXAU[PFWSUB1] cursor;
      else
        PF0FM003.PF0FMXAU[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
  ;
   /* *********************************************************/
   /* ***       'base order type' pop-up screen            ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM003.XOBCD[PFWSUB1] == "?") /* in base order type field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "           BASE ORDER TYPE";
      while (XX0XW02.XX0XWEND == "N")
        XPXOB01();
                                   /* perform base order type pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.XOBCD[PFWSUB1] = XOBTBL.XOBCD[XX0XWPIX];
        set PF0FM003.XOBCD[PFWSUB1] cursor;
      else
        PF0FM003.XOBCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
  ;
   /* *********************************************************/
   /* ***       'invt. account code' pop-up screen        ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM003.PF0FMYIC[PFWSUB1] == "?") /* in invt. acct code field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "       INVT. ACCOUNT CODE";
      while (XX0XW02.XX0XWEND == "N")
        XPYIC01(); /* perform invt. acct. code pop up*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FW01.PF0FWYIC = YICTBL.YICCD[XX0XWPIX];
        PF0FM003.PF0FMYIC[PFWSUB1] = PF0FW01.PF0FWYIC;
        set PF0FM003.PF0FMYIC[PFWSUB1] cursor;
      else
        PF0FM003.PF0FMYIC[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***       'warehouse number' pop-up screen            ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM003.XWHCD[PFWSUB1] == "?") /* in 'warehouse number' field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "         WAREHOUSE NUMBER ";
      while (XX0XW02.XX0XWEND == "N")
        XPXWH01(); /* perform pop up window routine*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.XWHCD[PFWSUB1] = XWHTBL.XWHCD[XX0XWPIX];
        set PF0FM003.XWHCD[PFWSUB1] cursor;
      else
        PF0FM003.XWHCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***       'construction code' pop-up screen           ****/
   /* new attribute as of 0194/mjk.*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM003.XCNCD[PFWSUB1] == "?") /* in 'construction code' field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "        CONSTRUCTION CODE ";
      while (XX0XW02.XX0XWEND == "N")
        XPXCN01(); /* perform pop up window routine*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.XCNCD[PFWSUB1] = XCNTBL.XCNCD[XX0XWPIX];
        set PF0FM003.XCNCD[PFWSUB1] cursor;
      else
        PF0FM003.XCNCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***           'royalty code' pop-up screen           ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM003.PF0FMXRY[PFWSUB1] == "?") /* in royalty code  field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "             ROYALTY CODE ";
      while (XX0XW02.XX0XWEND == "N")
        XPXRY01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.PF0FMXRY[PFWSUB1] = XRYTBL.XRYCD[XX0XWPIX];
        set PF0FM003.PF0FMXRY[PFWSUB1] cursor;
      else
        PF0FM003.PF0FMXRY[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***         'source system '  pop-up screen          ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM003.PF0FMYSS[PFWSUB1] == "?") /* in source system field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "            SOURCE SYSTEM ";
      while (XX0XW02.XX0XWEND == "N")
        XPYSY01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.PF0FMYSS[PFWSUB1] = YSYTBL.YSYCD[XX0XWPIX];
        set PF0FM003.PF0FMYSS[PFWSUB1] cursor;
      else
        PF0FM003.PF0FMYSS[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***        'order division' pop-up screen            ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM003.XDVCD[PFWSUB1] == "?") /* in order division field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "            ORDER DIVISION";
      while (XX0XW02.XX0XWEND == "N")
        XPXDV01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.XDVCD[PFWSUB1] = XDVTBL.XDVCD[XX0XWPIX];
        set PF0FM003.XDVCD[PFWSUB1] cursor;
      else
        PF0FM003.XDVCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***        'reporting division' pop-up screen        ****/
   /* new attribute as of 0194/mjk.*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
                                  /* in reporting division field*/
    if (PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] == "?")
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "        REPORTING DIVISION";
      while (XX0XW02.XX0XWEND == "N")
        XPXRD01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] = XRDTBL.XRD-RPT-DIV-CD[XX0XWPIX];
        set PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] cursor;
      else
        PF0FM003.XRD-RPT-DIV-CD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***        'sales category 1'   pop-up screen        ****/
   /* new attribute as of 0194/mjk.*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
                                  /* in sales category 1   field*/
    if (PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] == "?")
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "        SALES CATEGORY 1  ";
      while (XX0XW02.XX0XWEND == "N")
        XPYSE01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] = YSETBL.YSE-SLS-CAT1-CD[XX0XWPIX];
        set PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] cursor;
      else
        PF0FM003.YSE-SLS-CAT1-CD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***        'sales category 2'   pop-up screen        ****/
   /* new attribute as of 0194/mjk.*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
                                  /* in sales category 2   field*/
    if (PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] == "?")
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "        SALES CATEGORY 2  ";
      while (XX0XW02.XX0XWEND == "N")
        XPYSF01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] = YSFTBL.YSF-SLS-CAT2-CD[XX0XWPIX];
        set PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] cursor;
      else
        PF0FM003.YSF-SLS-CAT2-CD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***        'financial lvl 3'    pop-up screen        ****/
   /* new attribute as of 0194/mjk.*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
                                  /* in financial level 3  field*/
    if (PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] == "?")
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "       FINANCIAL LEVEL 3  ";
      while (XX0XW02.XX0XWEND == "N")
        XPYFE01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] = YFETBL.YFE-FIN-LVL3-CD[XX0XWPIX];
        set PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] cursor;
      else
        PF0FM003.YFE-FIN-LVL3-CD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***        'financial lvl 4'    pop-up screen        ****/
   /* new attribute as of 0194/mjk.*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
                                  /* in financial level 4  field*/
    if (PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] == "?")
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "       FINANCIAL LEVEL 4  ";
      while (XX0XW02.XX0XWEND == "N")
        XPYFF01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] = YFFTBL.YFF-FIN-LVL4-CD[XX0XWPIX];
        set PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] cursor;
      else
        PF0FM003.YFF-FIN-LVL4-CD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***        'financial lvl 5'    pop-up screen        ****/
   /* new attribute as of 0194/mjk.*/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
                                  /* in financial level 5  field*/
    if (PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] == "?")
      PF0FW01.PF0FWPOP = "Y"; /* Set Pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "       FINANCIAL LEVEL 5  ";
      while (XX0XW02.XX0XWEND == "N")
        XPYFG01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] = YFGTBL.YFG-FIN-LVL5-CD[XX0XWPIX];
        set PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] cursor;
      else
        PF0FM003.YFG-FIN-LVL5-CD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
end // end PF0F780

// converse screen pf0fm003
Function PF0F790()
   /* ***********************************************************/
   /* *  an 's' was entered in the first column of the primary **/
   /* *  screen (pf0fm001). therefore, send screen pf0fm003    **/
   /* *  with the field(s) marked with an 's' unprotected to   **/
   /* *  permit data entry.                                    **/
   /* ***********************************************************/
  ;
  PFWREC.PFWERRF = "N";
  PFWREC.PFWEDTF = "N";
  ;
  ;
  converse PF0FM003 ;
  ;
  PF0FS01(); /* check pf keys*/
  ;
  if (converseVar.eventKey is pf12) /* if user has requested an edit, set*/
    PFWREC.PFWEDTF = "Y"; /* the edit flag (pfwedtf) because*/
  end /* window activity will wipe out*/
   /* the original ezeaid key*/
  ;
  if (PFWREC.PFWEOAF == "Y" /* end the application?*/
   || PFWREC.PFWEOSF == "Y")
    return;
  end
  ;
  if (PF0FM001.PF0FMACT == " " /* if this is an inquiry,*/
   || PF0FM001.PF0FMACT == "I") /* return*/
    return;
  end
  ;
  if (PFWREC.PFWERRF == "N") /* perform window routine*/
    PF0F780();
  end
  ;
  converseLib.clearScreen();
   /* reset map after windowing.*/
end // end PF0F790

// pr0cess screen pf0fm004
Function PF0F800()
  PFWERRF = "N";
  ;
  if (PF0FW01.PF0FWSC3 == "Y") /* if item from col. 3 selected*/
    /* with an 's'*/
    PF0F890(); /* send pf0fm004 screen*/
  end
  ;
  if (PF0FM001.PF0FMACT == "I" /* if action is inquiry*/
   || PF0FM001.PF0FMACT == " " 
   || PFWEOAF == "Y"           /* or end the application*/
   || PFWEOSF == "Y")          /* or end the screen*/
    return;
  end
  ;
   /* **********************************************************/
   /* **  perform screen editing indexing from bottom (45)   ***/
   /* **  to top (3) so that cursor will be positioned on    ***/
   /* **  the first occurrence of an error on the screen.    ***/
   /* **********************************************************/
  ;
  ;
  if (PFWREC.PFWERRF == "N")
    if (PF0FM001.PF0FMCDE[45] > 0) /* if screen pf0fm004 field*/
      PF0F845(); /* product is to be updated,*/
    end /* check for field validity.*/
    if (PF0FM001.PF0FMCDE[42] > 0) /* if screen pf0fm004 field*/
      PF0F842(); /* product is to be updated,*/
    end /* check for field validity.*/
    if (PF0FM001.PF0FMCDE[39] > 0) /* if screen pf0fm004 field*/
      PF0F839(); /* product is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[36] > 0) /* if screen pf0fm004 field*/
      PF0F836(); /* pf0fmlcr is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[33] > 0) /* if screen pf0fm004 field*/
      PF0F833(); /* xmccd    is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[30] > 0) /* if screen pf0fm004 field*/
      PF0F830(); /* pf0fmxqa is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[27] > 0) /* if screen pf0fm004 field*/
      PF0F827(); /* pf0fmxpc is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[24] > 0) /* if screen pf0fm004 field*/
      PF0F824(); /* xfccd    is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[21] > 0) /* if screen pf0fm004 field*/
      PF0F821(); /* pf0fmxsu is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[18] > 0) /* if screen pf0fm004 field*/
      PF0F818(); /* pf0fmxbt is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[15] > 0) /* if screen pf0fm004 field*/
      PF0F815(); /* pf0fmxfm is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[12] > 0) /* if screen pf0fm004 field*/
      PF0F812(); /* pf0fmxpr is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[09] > 0) /* if screen pf0fm004 field*/
      PF0F809(); /* pf0fmypr is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[06] > 0) /* if screen pf0fm004 field*/
      PF0F806(); /* pf0fmxgp is to be updated,*/
    end /* check for field validity.*/
    ;
    if (PF0FM001.PF0FMCDE[03] > 0) /* if screen pf0fm004 field*/
      PF0F803(); /* pf0fmxga is to be updated,*/
    end /* check for field validity.*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset map after windowing.*/
  ;
  if (PFWEDTF == "Y")
    if (PFWREC.PFWERRF == "N")
      PFWREC.PFWERRF = "Y";
      converseLib.validationFailed(051); /* edit successful; press enter to perform update*/
    end
  end
  ;
  if (PF0FW01.PF0FWPOP == "Y")
    PFWREC.PFWERRF = "Y";
  end
end // end PF0F800

// edit (xga) for field validity
Function PF0F803()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.XGACD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.XGACD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.XGACD[PFWSUB1] = PF0FM004.XGACD[PFWSUB2];
        PF0FM004.XGACD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.XGACD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM004.XGACD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.XGACD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.XGACD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.XGACD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.XGACD[PFWSUB1] > " "
     && PF0FM004.XGACD[PFWSUB1] != "ZZ")
      if (PF0FM004.XGACD[PFWSUB1] in XGATBL.XGACD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(159);
        set PF0FM004.XGACD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[03];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[03];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.XGACD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGACD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGACD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGACD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGACD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGACD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGACD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGACD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGACD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F803

// edit (xgp) for field validity
Function PF0F806()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.XGPCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.XGPCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.XGPCD[PFWSUB1] = PF0FM004.XGPCD[PFWSUB2];
        PF0FM004.XGPCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.XGPCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM004.XGPCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.XGPCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.XGPCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.XGPCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.XGPCD[PFWSUB1] > " "
     && PF0FM004.XGPCD[PFWSUB1] != "99")
      if (PF0FM004.XGPCD[PFWSUB1] in XGPTBL.XGPCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(160);
        set PF0FM004.XGPCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[06];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[06];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.XGPCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGPCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGPCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGPCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGPCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGPCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGPCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGPCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XGPCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F806

// edit (ypr) for field validity
Function PF0F809()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.PF0FMYPR[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.PF0FMYPR[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.PF0FMYPR[PFWSUB1] = PF0FM004.PF0FMYPR[PFWSUB2];
        PF0FM004.PF0FMYPR[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.PF0FMYPR[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM004.PF0FMYPR[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.PF0FMYPR[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.PF0FMYPR[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.PF0FMYPR[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.PF0FMYPR[PFWSUB1] > " " /* if data has been entered*/
     && PF0FM004.PF0FMYPR[PFWSUB1] != "ZZ")
      PFWREC.PFWTBLID = "XPR"; /* in field, check DB2 table*/
      PFWREC.PFWSYSID = "PF"; /* to validate data.*/
      PFWREC.PFWSUMID = 0001;
      PFWREC.PFWSUMCD = PF0FM004.PF0FMYPR[PFWSUB1];
      PFWREC.PFWSUMVL = "****";
      XPPF500(); /* perform data base access*/
      if (PFWCOUNT == 0) /* if item not there, it's an error*/
        converseLib.validationFailed(161);
        PFWERRF = "Y";
        set PF0FM004.PF0FMYPR[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[09];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[09];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.PF0FMYPR[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMYPR[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMYPR[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMYPR[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMYPR[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMYPR[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMYPR[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMYPR[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMYPR[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F809

// edit (xpr) for field validity
Function PF0F812()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.XPRCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.XPRCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.XPRCD[PFWSUB1] = PF0FM004.XPRCD[PFWSUB2];
        PF0FM004.XPRCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.XPRCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM004.XPRCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.XPRCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.XPRCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.XPRCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.XPRCD[PFWSUB1] > " "
     && PF0FM004.XPRCD[PFWSUB1] != "ZZ")
      if (PF0FM004.XPRCD[PFWSUB1] in XPRTBL.XPRCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(162);
        set PF0FM004.XPRCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[12];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[12];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.XPRCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPRCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPRCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPRCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPRCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPRCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPRCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPRCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPRCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F812

// edit (xfm) for field validity
Function PF0F815()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.XFMCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.XFMCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.XFMCD[PFWSUB1] = PF0FM004.XFMCD[PFWSUB2];
        PF0FM004.XFMCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.XFMCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM004.XFMCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.XFMCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.XFMCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.XFMCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.XFMCD[PFWSUB1] > " "
     && PF0FM004.XFMCD[PFWSUB1] != "ZZ")
      if (PF0FM004.XFMCD[PFWSUB1] in XFMTBL.XFMCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(163);
        set PF0FM004.XFMCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[15];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[15];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.XFMCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XFMCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XFMCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XFMCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XFMCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XFMCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XFMCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XFMCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XFMCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F815

// edit (xbt) for field validity
Function PF0F818()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.PF0FMXBT[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.PF0FMXBT[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.PF0FMXBT[PFWSUB1] = PF0FM004.PF0FMXBT[PFWSUB2];
        PF0FM004.PF0FMXBT[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.PF0FMXBT[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM004.PF0FMXBT[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.PF0FMXBT[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.PF0FMXBT[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.PF0FMXBT[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.PF0FMXBT[PFWSUB1] > " "
     && PF0FM004.PF0FMXBT[PFWSUB1] != "ZZ")
      if (PF0FM004.PF0FMXBT[PFWSUB1] in XBTTBL.XBTCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(164);
        set PF0FM004.PF0FMXBT[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[18];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[18];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.PF0FMXBT[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXBT[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXBT[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXBT[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXBT[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXBT[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXBT[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXBT[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXBT[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F818

// edit (xsu) for field validity
Function PF0F821()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.XSUCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.XSUCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.XSUCD[PFWSUB1] = PF0FM004.XSUCD[PFWSUB2];
        PF0FM004.XSUCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.XSUCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM004.XSUCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.XSUCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.XSUCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.XSUCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.XSUCD[PFWSUB1] > " "
     && PF0FM004.XSUCD[PFWSUB1] != "ZZ")
      if (PF0FM004.XSUCD[PFWSUB1] in XSUTBL.XSUCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(165);
        set PF0FM004.XSUCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[21];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[21];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.XSUCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XSUCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XSUCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XSUCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XSUCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XSUCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XSUCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XSUCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XSUCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F821

// edit (xfc) for field validity
Function PF0F824()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
   /* *************************************************************/
   /* N O T E:  due to only 1 value allowed, a lot of this code*/
   /* has been commented out, repeated and changed where needed.0194/mjk.*/
   /* *************************************************************/
   /* WHILE PFWSUB2 LE 1;*/
   /* IF PF0FM004.XFCCD(PFWSUB1) GT ' ';/* if slot in use*/
   /* PFWSUB1 = PFWSUB1 + 1;*/
   /* PFWSUB2 = PFWSUB2 + 1;       /* find first empty cell*/
   /* ELSE;*/
   /* MOVE 1 TO PFWSUB3;*/
   /* WHILE PFWSUB3 EQ 1*/
   /* AND PFWSUB2 LE 1;*/
   /* IF PF0FM004.XFCCD(PFWSUB2) GT ' ';*/
   /* MOVE 0 TO PFWSUB3;       /* find next cell to move up*/
   /* ELSE;*/
   /* PFWSUB2 = PFWSUB2 + 1;*/
   /* END;*/
   /* END;*/
   /* IF PFWSUB2 LE 1;             /* if not end of array*/
   /* MOVE PF0FM004.XFCCD(PFWSUB2) TO PF0FM004.XFCCD(PFWSUB1);*/
   /* MOVE ' ' TO PF0FM004.XFCCD(PFWSUB2);*/
   /* PFWSUB1 = PFWSUB1 + 1;*/
   /* PFWSUB2 = PFWSUB2 + 1;*/
   /* END;*/
   /* END;*/
   /* END;*/
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
   /* MOVE 1 TO PFWSUB1;               /* re-initialize the subscript*/
  ;
   /* WHILE PFWSUB1 GT 0;              /* if user entered data in field;*/
   /* IF PF0FM004.XFCCD(PFWSUB1) GT ' ';/* make sure it isn't entered*/
   /* MOVE PF0FM004.XFCCD(PFWSUB1) TO PF0FWAT2;/* more than once.*/
   /* MOVE 1 TO PFWSUB2;*/
   /* MOVE 0 TO PFWCOUNT;*/
   /* WHILE PFWSUB2 GT 0;          /* if field equals the hold*/
   /* IF PF0FM004.XFCCD(PFWSUB2) EQ PF0FWAT2;/* area,increment counter*/
   /* PFWCOUNT = PFWCOUNT + 1;*/
   /* END;*/
   /* IF PFWCOUNT GT 1;          /* count > 1 means data*/
   /* SET PF0FM004.XFCCD(PFWSUB1) BRIGHT;/* entered more than once*/
   /* SET PF0FM004.XFCCD(PFWSUB1) CURSOR;/* flag it as an error.*/
   /* MOVE 'Y' TO PFWERRF;*/
   /* MOVE 104 TO EZEMNO;*/
   /* END;*/
   /* PFWSUB2 = PFWSUB2 - 1;*/
   /* END;*/
   /* END;*/
   /* PFWSUB1 = PFWSUB1 - 1;*/
   /* END;*/
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
   /* MOVE 8 TO PFWSUB1;*/
  ;
   /* WHILE PFWSUB1 GT 0;*/
   /* IF PF0FM004.XFCCD(PFWSUB1) GT ' '*/
   /* AND PF0FM004.XFCCD(PFWSUB1) NE 'ZZ';*/
   /* IF PF0FM004.XFCCD(PFWSUB1) IN XFCTBL.XFCCD*/
   /* AND PF0FM004.XFCCD(PFWSUB1) NE '99';*/
  if (PF0FM004.XFCCD > " "
   && PF0FM004.XFCCD != "ZZ")
    if (PF0FM004.XFCCD in XFCTBL.XFCCD
     && PF0FM004.XFCCD != "99")
         /* next sentence*/
    else
      PFWREC.PFWERRF = "Y";
      converseLib.validationFailed(166);
      /* SET PF0FM004.XFCCD(PFWSUB1) CURSOR,BRIGHT;*/
      set PF0FM004.XFCCD cursor, bold;
    end
    /* the following 'else' added to make sure users enter an xfc value*/
    /* 052494/mjk.*/
  else /* pf0fm004.xfccd not GT ' '; meaning:*/
    PFWREC.PFWERRF = "Y"; /* they did not fill in or select a*/
                                   /* value*/
    converseLib.validationFailed(362); /* spec feature must have data field*/
                                   /* entered*/
    /* SET PF0FM004.XFCCD(PFWSUB1) CURSOR,BRIGHT;*/
    set PF0FM004.XFCCD cursor, bold;
  end
  PFWSUB1 = PFWSUB1 - 1;
   /* END;*/
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[24];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[24];
                                   /* move the table field code*/
                                  /* to the appropriate pfdrec position*/
  ;
   /* IF PF0FM004.XFCCD(1) GT ' ';  /* if user entered data as selection*/
  if (PF0FM004.XFCCD > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    /* MOVE PF0FM004.XFCCD(1) TO PFDREC.PFDCDVAL(PFWSUB2);/* to pfdrec*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XFCCD; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    /* we are now moving spaces to the other 7 slots in pfdrec.*/
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    /* this is the old code not being used at this time....*/
    /* MOVE PF0FM004.XFCCD(2) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XFCCD(3) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XFCCD(4) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XFCCD(5) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XFCCD(6) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XFCCD(7) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XFCCD(8) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
  end
end // end PF0F824

// edit (xpc) for field validity
Function PF0F827()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.XPCCD[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.XPCCD[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.XPCCD[PFWSUB1] = PF0FM004.XPCCD[PFWSUB2];
        PF0FM004.XPCCD[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.XPCCD[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM004.XPCCD[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.XPCCD[PFWSUB2] == PF0FWAT2) /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.XPCCD[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.XPCCD[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.XPCCD[PFWSUB1] > " "
     && PF0FM004.XPCCD[PFWSUB1] != "ZZ")
      if (PF0FM004.XPCCD[PFWSUB1] in XPCTBL.XPCCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(167);
        set PF0FM004.XPCCD[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[27];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[27];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.XPCCD[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPCCD[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPCCD[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPCCD[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPCCD[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPCCD[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPCCD[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPCCD[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XPCCD[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F827

// edit (xqa) for field validity
Function PF0F830()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.PF0FMXQA[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.PF0FMXQA[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.PF0FMXQA[PFWSUB1] = PF0FM004.PF0FMXQA[PFWSUB2];
        PF0FM004.PF0FMXQA[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.PF0FMXQA[PFWSUB1] > " ") /* make sure it isn't entered*/
      PF0FWAT2 = PF0FM004.PF0FMXQA[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.PF0FMXQA[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.PF0FMXQA[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.PF0FMXQA[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.PF0FMXQA[PFWSUB1] > " "
     && PF0FM004.PF0FMXQA[PFWSUB1] != "99")
      if (PF0FM004.PF0FMXQA[PFWSUB1] in XQATBL.XQACD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(167);
        set PF0FM004.PF0FMXQA[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[30];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[30];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.PF0FMXQA[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXQA[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXQA[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXQA[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXQA[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXQA[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXQA[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXQA[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMXQA[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F830

// edit (xmc) for field validity
Function PF0F833()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
   /* N O T E: subscripts set at 'LE' 1 due to only 1 value allowed.*/
   /* a lot of this code has been commented out, repeated, and changed*/
   /* where needed. 0194/mjk.*/
   /* *************************************************************/
  ;
   /* WHILE PFWSUB2 LE 1;*/
   /* IF PF0FM004.XMCCD(PFWSUB1) GT ' ';/* if slot in use*/
   /* PFWSUB1 = PFWSUB1 + 1;*/
   /* PFWSUB2 = PFWSUB2 + 1;       /* find first empty cell*/
   /* ELSE;*/
   /* MOVE 1 TO PFWSUB3;*/
   /* WHILE PFWSUB3 EQ 1*/
   /* AND PFWSUB2 LE 1;*/
   /* IF PF0FM004.XMCCD(PFWSUB2) GT ' ';*/
   /* MOVE 0 TO PFWSUB3;       /* find next cell to move up*/
   /* ELSE;*/
   /* PFWSUB2 = PFWSUB2 + 1;*/
   /* END;*/
   /* END;*/
   /* IF PFWSUB2 LE 1;             /* if not end of array*/
   /* MOVE PF0FM004.XMCCD(PFWSUB2) TO PF0FM004.XMCCD(PFWSUB1);*/
   /* MOVE ' ' TO PF0FM004.XMCCD(PFWSUB2);*/
   /* PFWSUB1 = PFWSUB1 + 1;*/
   /* PFWSUB2 = PFWSUB2 + 1;*/
   /* END;*/
   /* END;*/
   /* END;*/
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
   /* MOVE 1 TO PFWSUB1;               /* re-initialize the subscript*/
   /* ;*/
   /* WHILE PFWSUB1 GT 0;              /* if user entered data in field;*/
   /* IF PF0FM004.XMCCD(PFWSUB1) GT ' ';/* make sure it isn't entered*/
   /* MOVE PF0FM004.XMCCD(PFWSUB1) TO PF0FWAT2;/* more than once.*/
   /* MOVE 1 TO PFWSUB2;*/
   /* MOVE 0 TO PFWCOUNT;*/
   /* WHILE PFWSUB2 GT 0;          /* if field equals the hold area,*/
   /* IF PF0FM004.XMCCD(PFWSUB2) EQ PF0FWAT2;/* increment counter*/
   /* PFWCOUNT = PFWCOUNT + 1;*/
   /* END;*/
   /* IF PFWCOUNT GT 1;          /* count > 1 means data*/
   /* SET PF0FM004.XMCCD(PFWSUB1) BRIGHT;/* entered more than once*/
   /* SET PF0FM004.XMCCD(PFWSUB1) CURSOR;/* flag it as an error.*/
   /* MOVE 'Y' TO PFWERRF;*/
   /* MOVE 104 TO EZEMNO;*/
   /* END;*/
   /* PFWSUB2 = PFWSUB2 - 1;*/
   /* END;*/
   /* END;*/
   /* PFWSUB1 = PFWSUB1 - 1;*/
   /* END;*/
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
   /* MOVE 1 TO PFWSUB1;*/
  ;
   /* WHILE PFWSUB1 GT 0;*/
   /* IF PF0FM004.XMCCD(PFWSUB1) GT ' '*/
   /* AND PF0FM004.XMCCD(PFWSUB1) NE 'zzz';*/
   /* IF PF0FM004.XMCCD(PFWSUB1) IN XMCTBL.XMCCD*/
   /* AND PF0FM004.XMCCD(PFWSUB1) NE '99';*/
  if (PF0FM004.XMCCD > " "
   && PF0FM004.XMCCD != "ZZZ")
    /* n o t e : this is a 3-byte field, but the eof entry is just 2....*/
    /* so, had to change from '999' to '99'. 052094/mjk.*/
    if (PF0FM004.XMCCD in XMCTBL.XMCCD
     && PF0FM004.XMCCD != "99")
         /* next sentence*/
    else
      PFWREC.PFWERRF = "Y";
      converseLib.validationFailed(355);
      /* SET PF0FM004.XMCCD(PFWSUB1) CURSOR,BRIGHT;*/
      set PF0FM004.XMCCD cursor, bold;
    end
    /* the following 'else' added to make sure users enter an xmc value*/
    /* 052494/mjk.*/
  else /* pf0fm004.xmccd not GT ' ';meaning:*/
    PFWREC.PFWERRF = "Y"; /* they did not select or fill in a*/
                                   /* value*/
    converseLib.validationFailed(363); /* mat content must have data field*/
                                   /* entered*/
    /* SET PF0FM004.XMCCD(PFWSUB1) CURSOR,BRIGHT;*/
    set PF0FM004.XMCCD cursor, bold;

  end
  PFWSUB1 = PFWSUB1 - 1;
   /* END;*/
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[33];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[33];
                                   /* move the table field code*/
                                  /* to the appropriate pfdrec position*/
  ;
   /* IF PF0FM004.XMCCD(1) GT ' '  ;/*if user entered data as selection*/
  if (PF0FM004.XMCCD > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.XMCCD; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    /* we are moving spaces to slots 2 thru 8 in pfdrec.*/
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = "  ";
    PFWSUB2 = PFWSUB2 + 1;
    /* this is the old code not being used anymore.*/
    /* MOVE PF0FM004.XMCCD(1) TO PFDREC.PFDCDVAL(PFWSUB2);/* to pfdrec*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XMCCD(2) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XMCCD(3) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XMCCD(4) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XMCCD(5) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XMCCD(6) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XMCCD(7) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
    /* MOVE PF0FM004.XMCCD(8) TO PFDREC.PFDCDVAL(PFWSUB2);*/
    /* PFWSUB2 = PFWSUB2 + 1;*/
  end
end // end PF0F833

// edit (lcr) for field validity
Function PF0F836()
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  ;
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  while (PFWSUB2 <= 8)
    if (PF0FM004.PF0FMLCR[PFWSUB1] > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 8)
        if (PF0FM004.PF0FMLCR[PFWSUB2] > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 8) /* if not end of array*/
        PF0FM004.PF0FMLCR[PFWSUB1] = PF0FM004.PF0FMLCR[PFWSUB2];
        PF0FM004.PF0FMLCR[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    if (PF0FM004.PF0FMLCR[PFWSUB1] > " " /* make sure it isn't entered*/
     && PF0FM004.PF0FMLCR[PFWSUB1] != "99")
      PF0FWAT2 = PF0FM004.PF0FMLCR[PFWSUB1]; /* more than once.*/
      PFWSUB2 = 8;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0) /* if field equals the hold*/
        if (PF0FM004.PF0FMLCR[PFWSUB2] == PF0FWAT2)
                                   /* area, increment counter*/
          PFWCOUNT = PFWCOUNT + 1;
        end
        if (PFWCOUNT > 1) /* count > 1 means data*/
          set PF0FM004.PF0FMLCR[PFWSUB1] bold; /* entered more than once*/
          set PF0FM004.PF0FMLCR[PFWSUB1] cursor; /* flag it as an error.*/
          PFWERRF = "Y";
          converseLib.validationFailed(104);
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 8;
  ;
  while (PFWSUB1 > 0)
    if (PF0FM004.PF0FMLCR[PFWSUB1] > " "
     && PF0FM004.PF0FMLCR[PFWSUB1] != "99")
      if (PF0FM004.PF0FMLCR[PFWSUB1] in XLCTBL.XLCCD)
         /* next sentence*/
      else
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(169);
        set PF0FM004.PF0FMLCR[PFWSUB1] cursor, bold;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = PF0FM001.PF0FMCDE[36];
                                   /* move the screen element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[36];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.PF0FMLCR[1] > " ") /* if user entered data as selection*/
    PF0F420(); /* criteria, determine index for*/
                                   /* position*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y";
                                   /* in pfdrec and move data elements*/
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMLCR[1]; /* to pfdrec*/
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMLCR[2];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMLCR[3];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMLCR[4];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMLCR[5];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMLCR[6];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMLCR[7];
    PFWSUB2 = PFWSUB2 + 1;
    PFDREC.PFDCDVAL[PFWSUB2] = PF0FM004.PF0FMLCR[8];
    PFWSUB2 = PFWSUB2 + 1;
  end
end // end PF0F836

// edit product 39 for validity
Function PF0F839()
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  if (PF0FM001.PFDVALFL[39] == "S")
    PFWREC.PFWSUB1 = 1;
    while (PFWREC.PFWSUB1 <= 9) /* reset fields to normal intensity*/
      set PF0FM004.PF0FMGPC[PFWSUB1] normal;
      set PF0FM004.SY1STNBR[PFWSUB1] normal;
      PFWREC.PFWSUB1 = PFWREC.PFWSUB1 + 1;
    end
  end
  ;
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  while (PFWSUB2 <= 9)
    PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB1];
                                   /* string product fields*/
    PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB1]; /* into w/s field*/
    PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB1];
    PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB1];
    PFWREC.XQACD = PF0FM004.XQACD[PFWSUB1];
    PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB1];
    if (PFWREC.PFWPROD > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 9)
        PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB2]; /* string product*/
        PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB2];
                                   /* into w/s field*/
        PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB2];
        PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB2];
        PFWREC.XQACD = PF0FM004.XQACD[PFWSUB2];
        PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB2];
        if (PFWREC.PFWPROD > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 9) /* if not end of array*/
        PF0FM004.PF0FMGPC[PFWSUB1] = PF0FM004.PF0FMGPC[PFWSUB2];
        PF0FM004.SY1STNBR[PFWSUB1] = PF0FM004.SY1STNBR[PFWSUB2];
        PF0FM004.PF0FMCOL[PFWSUB1] = PF0FM004.PF0FMCOL[PFWSUB2];
        PF0FM004.XDMCD[PFWSUB1] = PF0FM004.XDMCD[PFWSUB2];
        PF0FM004.XQACD[PFWSUB1] = PF0FM004.XQACD[PFWSUB2];
        PF0FM004.PF0FMLFC[PFWSUB1] = PF0FM004.PF0FMLFC[PFWSUB2];
        PF0FM004.PF0FMGPC[PFWSUB2] = " ";
        PF0FM004.SY1STNBR[PFWSUB2] = " ";
        PF0FM004.PF0FMCOL[PFWSUB2] = " ";
        PF0FM004.XDMCD[PFWSUB2] = " ";
        PF0FM004.XQACD[PFWSUB2] = " ";
        PF0FM004.PF0FMLFC[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 9; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB1];
                                   /* string product fields*/
    PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB1]; /* into w/s field*/
    PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB1];
    PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB1];
    PFWREC.XQACD = PF0FM004.XQACD[PFWSUB1];
    PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB1];
    if (PFWREC.PFWPROD > " ") /* make sure it isn't entered*/
      PFWREC.PFWHPRD2 = PFWREC.PFWPROD; /* more than once.*/
      PFWSUB2 = 9;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0)
        PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB2];
        PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB2];
        PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB2];
        PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB2];
        PFWREC.XQACD = PF0FM004.XQACD[PFWSUB2];
        PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB2];
        if (PFWREC.PFWPROD == PFWREC.PFWHPRD2) /* if field equals hold area*/
          PFWCOUNT = PFWCOUNT + 1; /* increment hold area*/
        end
        if (PFWCOUNT > 1) /* count > 1 means entered more than*/
                                   /* once*/
          set PF0FM004.SY1STNBR[PFWSUB1] cursor, bold;
          set PF0FM004.PF0FMGPC[PFWSUB1] cursor, bold;
          PFWERRF = "Y";
          converseLib.validationFailed(104); /* data field duplicated*/
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  ;
   /* *************************************************************/
   /* THIS DISABLE HAS BEEN TEMPORARILY DISABLED! 0194/MJK.********/
   /* NOW LETTING THE ATTRIBUTE NUMBER BE PASSED. 0194/MJK.********/
   /* ********** temporarily disables product editing *************/
   /* this causes xppf020 to be performed but only three edits*/
   /* within it are not bypassed.  They are msg 108 - style must*/
   /* be entered, 235 - gpc must be entered, and 106 - not a*/
   /* valid gpc.*/
  PFWREC.PFWPRDAT = "39"; /* move prod attr field cd for prod edit*/
   /* MOVE ' ' TO PFWREC.PFWPRDAT; /* move prod attr field cd*/
   /* ********** temporarily disables product editing *************/
   /* *************************************************************/
  ;
  ;
  PFWREC.PFWIDX = 1; /* init index for unused feature of*/
                                   /* xppf020*/
  ;
  PFWSUB1 = 9;
  while (PFWSUB1 > 0)
    PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB1]; /* string product*/
    PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB1]; /* into w/s field*/
    PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB1];
    PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB1];
    PFWREC.XQACD = PF0FM004.XQACD[PFWSUB1];
    PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB1];
    if (PFWREC.PFWPROD > " "
     && PFWREC.PFWPROD != "99999999999999999")
      ;
      XPPF020(); /* edit prod. for field validity*/
      ;
    end
    if (PFWREC.PFWERRF == "Y")
      if (PFWREC.PFWHLFCF == "Y") /* if life cycle field has an error,*/
        set PF0FM004.PF0FMLFC[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHQUAF == "Y") /* if quality field has an error,*/
        set PF0FM004.XQACD[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHDIMF == "Y") /* if dimension field has an error,*/
        set PF0FM004.XDMCD[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHCOLF == "Y") /* if color field has an error,*/
        set PF0FM004.PF0FMCOL[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHSTYF == "Y") /* if style field has an error,*/
        set PF0FM004.SY1STNBR[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHGPCF == "Y") /* if gpc field has an error,*/
        set PF0FM004.PF0FMGPC[PFWSUB1] cursor, bold; /* highlight it*/
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = 8; /* move product element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[39];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.PF0FMGPC[1] > " ") /* if user entered data as selection*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y"; /* move data elements to pfdrec*/
    PFWREC.PFWSUB2 = 1;
    while (PFWREC.PFWSUB2 <= 9)
      PFDREC.XGPCD[PFWSUB2] = PF0FM004.PF0FMGPC[PFWSUB2];
      PFDREC.SY1STNBR[PFWSUB2] = PF0FM004.SY1STNBR[PFWSUB2];
      PFDREC.SY2CLRID[PFWSUB2] = PF0FM004.PF0FMCOL[PFWSUB2];
      PFDREC.XDMCD[PFWSUB2] = PF0FM004.XDMCD[PFWSUB2];
      PFDREC.XQACD[PFWSUB2] = PF0FM004.XQACD[PFWSUB2];
      PFDREC.XLCCD[PFWSUB2] = PF0FM004.PF0FMLFC[PFWSUB2];
      PFWREC.PFWSUB2 = PFWREC.PFWSUB2 + 1;
    end
  end
end // end PF0F839

// edit product 42 for validity
Function PF0F842()
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
  ;
  if (PF0FM001.PFDVALFL[42] == "S")
    PFWREC.PFWSUB1 = 1;
    while (PFWREC.PFWSUB1 <= 9) /* reset fields to normal intensity*/
      set PF0FM004.PF0FMGPC[PFWSUB1] normal;
      set PF0FM004.SY1STNBR[PFWSUB1] normal;
      set PF0FM004.XQACD[PFWSUB1] normal;
      set PF0FM004.PF0FMLFC[PFWSUB1] normal;
      PFWREC.PFWSUB1 = PFWREC.PFWSUB1 + 1;
    end
  end
  ;
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  while (PFWSUB2 <= 9)
    PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB1];
                                   /* string product fields*/
    PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB1]; /* into w/s field*/
    PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB1];
    PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB1];
    PFWREC.XQACD = PF0FM004.XQACD[PFWSUB1];
    PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB1];
    if (PFWREC.PFWPROD > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 9)
        PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB2]; /* string product*/
        PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB2];
                                   /* into w/s field*/
        PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB2];
        PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB2];
        PFWREC.XQACD = PF0FM004.XQACD[PFWSUB2];
        PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB2];
        if (PFWREC.PFWPROD > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 9) /* if not end of array*/
        PF0FM004.PF0FMGPC[PFWSUB1] = PF0FM004.PF0FMGPC[PFWSUB2];
        PF0FM004.SY1STNBR[PFWSUB1] = PF0FM004.SY1STNBR[PFWSUB2];
        PF0FM004.PF0FMCOL[PFWSUB1] = PF0FM004.PF0FMCOL[PFWSUB2];
        PF0FM004.XDMCD[PFWSUB1] = PF0FM004.XDMCD[PFWSUB2];
        PF0FM004.XQACD[PFWSUB1] = PF0FM004.XQACD[PFWSUB2];
        PF0FM004.PF0FMLFC[PFWSUB1] = PF0FM004.PF0FMLFC[PFWSUB2];
        PF0FM004.PF0FMGPC[PFWSUB2] = " ";
        PF0FM004.SY1STNBR[PFWSUB2] = " ";
        PF0FM004.PF0FMCOL[PFWSUB2] = " ";
        PF0FM004.XDMCD[PFWSUB2] = " ";
        PF0FM004.XQACD[PFWSUB2] = " ";
        PF0FM004.PF0FMLFC[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 9; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB1];
                                   /* string product fields*/
    PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB1]; /* into w/s field*/
    PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB1];
    PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB1];
    PFWREC.XQACD = PF0FM004.XQACD[PFWSUB1];
    PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB1];
    if (PFWREC.PFWPROD > " ") /* make sure it isn't entered*/
      PFWREC.PFWHPRD2 = PFWREC.PFWPROD; /* more than once.*/
      PFWSUB2 = 9;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0)
        PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB2];
        PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB2];
        PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB2];
        PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB2];
        PFWREC.XQACD = PF0FM004.XQACD[PFWSUB2];
        PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB2];
        if (PFWREC.PFWPROD == PFWREC.PFWHPRD2) /* if field equals hold area*/
          PFWCOUNT = PFWCOUNT + 1; /* increment hold area*/
        end
        if (PFWCOUNT > 1) /* count > 1 means data entered*/
          set PF0FM004.PF0FMLFC[PFWSUB1] cursor, bold; /* more than once*/
          set PF0FM004.XQACD[PFWSUB1] cursor, bold;
          set PF0FM004.SY1STNBR[PFWSUB1] cursor, bold;
          set PF0FM004.PF0FMGPC[PFWSUB1] cursor, bold;
          PFWERRF = "Y";
          converseLib.validationFailed(104); /* data field duplicated*/
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  ;
   /* *************************************************************/
   /* THIS DISABLE HAS BEEN TEMPORARILY DISABLED! 0194/MJK.********/
   /* NOW LETTING THE ATTRIBUTE NUMBER BE PASSED. 0194/MJK.********/
   /* ********** temporarily disables product editing *************/
   /* this causes xppf020 to be performed but only three edits*/
   /* within it are not bypassed.  They are msg 108 - style must*/
   /* be entered, 235 - gpc must be entered, and 106 - not a*/
   /* valid gpc.*/
  PFWREC.PFWPRDAT = "42"; /* move prod attr field code for edit*/
                                   /* routine*/
   /* MOVE ' ' TO PFWREC.PFWPRDAT; /* move prod attr field cd for*/
   /* ********** temporarily disables product editing *************/
   /* *************************************************************/
  ;
  ;
  PFWREC.PFWIDX = 1; /* init index for unused feature of*/
                                   /* xppf020*/
  ;
  PFWSUB1 = 9;
  while (PFWSUB1 > 0)
    PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB1]; /* string product*/
    PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB1]; /* into w/s field*/
    PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB1];
    PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB1];
    PFWREC.XQACD = PF0FM004.XQACD[PFWSUB1];
    PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB1];
    if (PFWREC.PFWPROD > " ")
      ;
      XPPF020(); /* edit prod. for field validity*/
      ;
    end
    if (PFWREC.PFWERRF == "Y")
      if (PFWREC.PFWHLFCF == "Y") /* if life cycle field has an error,*/
        set PF0FM004.PF0FMLFC[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHQUAF == "Y") /* if quality field has an error,*/
        set PF0FM004.XQACD[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHDIMF == "Y") /* if dimension field has an error,*/
        set PF0FM004.XDMCD[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHCOLF == "Y") /* if color field has an error,*/
        set PF0FM004.PF0FMCOL[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHSTYF == "Y") /* if style field has an error,*/
        set PF0FM004.SY1STNBR[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHGPCF == "Y") /* if gpc field has an error,*/
        set PF0FM004.PF0FMGPC[PFWSUB1] cursor, bold; /* highlight it*/
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = 8; /* move product element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[42];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.PF0FMGPC[1] > " ") /* if user entered data as selection*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y"; /* move data elements to pfdrec*/
    PFWREC.PFWSUB2 = 1;
    while (PFWREC.PFWSUB2 <= 9)
      PFDREC.XGPCD[PFWSUB2] = PF0FM004.PF0FMGPC[PFWSUB2];
      PFDREC.SY1STNBR[PFWSUB2] = PF0FM004.SY1STNBR[PFWSUB2];
      PFDREC.SY2CLRID[PFWSUB2] = PF0FM004.PF0FMCOL[PFWSUB2];
      PFDREC.XDMCD[PFWSUB2] = PF0FM004.XDMCD[PFWSUB2];
      PFDREC.XQACD[PFWSUB2] = PF0FM004.XQACD[PFWSUB2];
      PFDREC.XLCCD[PFWSUB2] = PF0FM004.PF0FMLFC[PFWSUB2];
      PFWREC.PFWSUB2 = PFWREC.PFWSUB2 + 1;
    end
  end
end // end PF0F842

// edit product 45 for validity
Function PF0F845()
   /* ************************************************************/
   /* **  packing routine - see pf0f601 for comments           ***/
   /* *************************************************************/
   /* PLEASE NOTE:  certain product attributes have been changed, so*/
   /* certain lines below have been commented out.  0194/mjk.*/
  ;
  if (PF0FM001.PFDVALFL[45] == "S")
    PFWREC.PFWSUB1 = 1;
    while (PFWREC.PFWSUB1 <= 9) /* reset fields to normal intensity*/
      set PF0FM004.PF0FMGPC[PFWSUB1] normal;
      set PF0FM004.SY1STNBR[PFWSUB1] normal;
      set PF0FM004.PF0FMCOL[PFWSUB1] normal;
      set PF0FM004.XDMCD[PFWSUB1] normal;
      set PF0FM004.XQACD[PFWSUB1] normal;
      set PF0FM004.PF0FMLFC[PFWSUB1] normal;
      PFWREC.PFWSUB1 = PFWREC.PFWSUB1 + 1;
    end
  end
  ;
  PFWREC.PFWSUB1 = 1;
  PFWREC.PFWSUB2 = 2;
  while (PFWSUB2 <= 9)
    PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB1];
                                   /* string product fields*/
    PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB1]; /* into w/s field*/
    PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB1];
    PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB1];
    PFWREC.XQACD = PF0FM004.XQACD[PFWSUB1];
    PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB1];
    if (PFWREC.PFWPROD > " ") /* if slot in use*/
      PFWSUB1 = PFWSUB1 + 1;
      PFWSUB2 = PFWSUB2 + 1; /* find first empty cell*/
    else
      PFWSUB3 = 1;
      while (PFWSUB3 == 1
       && PFWSUB2 <= 9)
        PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB2]; /* string product*/
        PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB2];
                                   /* into w/s field*/
        PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB2];
        PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB2];
        PFWREC.XQACD = PF0FM004.XQACD[PFWSUB2];
        PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB2];
        if (PFWREC.PFWPROD > " ")
          PFWSUB3 = 0; /* find next cell to move up*/
        else
          PFWSUB2 = PFWSUB2 + 1;
        end
      end
      if (PFWSUB2 <= 9) /* if not end of array*/
        PF0FM004.PF0FMGPC[PFWSUB1] = PF0FM004.PF0FMGPC[PFWSUB2];
        PF0FM004.SY1STNBR[PFWSUB1] = PF0FM004.SY1STNBR[PFWSUB2];
        PF0FM004.PF0FMCOL[PFWSUB1] = PF0FM004.PF0FMCOL[PFWSUB2];
        PF0FM004.XDMCD[PFWSUB1] = PF0FM004.XDMCD[PFWSUB2];
        PF0FM004.XQACD[PFWSUB1] = PF0FM004.XQACD[PFWSUB2];
        PF0FM004.PF0FMLFC[PFWSUB1] = PF0FM004.PF0FMLFC[PFWSUB2];
        PF0FM004.PF0FMGPC[PFWSUB2] = " ";
        PF0FM004.SY1STNBR[PFWSUB2] = " ";
        PF0FM004.PF0FMCOL[PFWSUB2] = " ";
        PF0FM004.XDMCD[PFWSUB2] = " ";
        PF0FM004.XQACD[PFWSUB2] = " ";
        PF0FM004.PF0FMLFC[PFWSUB2] = " ";
        PFWSUB1 = PFWSUB1 + 1;
        PFWSUB2 = PFWSUB2 + 1;
      end
    end
  end
  ;
   /* ********************************************************/
   /* **          end of packing routine                   ***/
   /* ********************************************************/
  ;
   /* ********************************************************/
   /* **  check for duplication in the data entry fields   ***/
   /* ********************************************************/
  ;
  PFWSUB1 = 9; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 > 0) /* if user entered data in field;*/
    PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB1];
                                   /* string product fields*/
    PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB1]; /* into w/s field*/
    PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB1];
    PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB1];
    PFWREC.XQACD = PF0FM004.XQACD[PFWSUB1];
    PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB1];
    if (PFWREC.PFWPROD > " ") /* make sure it isn't entered*/
      PFWREC.PFWHPRD2 = PFWREC.PFWPROD; /* more than once.*/
      PFWSUB2 = 9;
      PFWCOUNT = 0;
      while (PFWSUB2 > 0)
        PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB2];
        PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB2];
        PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB2];
        PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB2];
        PFWREC.XQACD = PF0FM004.XQACD[PFWSUB2];
        PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB2];
        if (PFWREC.PFWPROD == PFWREC.PFWHPRD2) /* if field equals hold area*/
          PFWCOUNT = PFWCOUNT + 1; /* increment hold area*/
        end
        if (PFWCOUNT > 1) /* count > 1 means data entered > once*/
          /* SET PF0FM004.PF0FMLFC(PFWSUB1) CURSOR,BRIGHT;*/
          /* SET PF0FM004.XQACD(PFWSUB1) CURSOR,BRIGHT;*/
          set PF0FM004.XDMCD[PFWSUB1] cursor, bold;
          set PF0FM004.PF0FMCOL[PFWSUB1] cursor, bold;
          set PF0FM004.SY1STNBR[PFWSUB1] cursor, bold;
          set PF0FM004.PF0FMGPC[PFWSUB1] cursor, bold;
          PFWERRF = "Y";
          converseLib.validationFailed(104); /* data field duplicated*/
        end
        PFWSUB2 = PFWSUB2 - 1;
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* *******************************************************/
   /* **      end of duplication check                    ***/
   /* *******************************************************/
  ;
   /* ********************************************************/
   /* **   data editing routine - see pf0f601 for comments ***/
   /* ********************************************************/
  ;
  ;
   /* *************************************************************/
   /* THIS DISABLE HAS BEEN TEMPORARILY DISABLED! 0194/MJK.********/
   /* NOW LETTING THE ATTRIBUTE NUMBER BE PASSED. 0194/MJK.********/
   /* ********** temporarily disables product editing *************/
   /* this causes xppf020 to be performed but only three edits*/
   /* within it are not bypassed.  They are msg 108 - style must*/
   /* be entered, 235 - gpc must be entered, and 106 - not a*/
   /* valid gpc.*/
  PFWREC.PFWPRDAT = "45"; /* move prod attr field cd for edit*/
                                   /* routine*/
   /* MOVE ' ' TO PFWREC.PFWPRDAT;     /* move prod attr field cd for edit*/
                                   /* routine*/
   /* ********** temporarily disables product editing *************/
   /* *************************************************************/
  ;
  ;
  PFWREC.PFWIDX = 1; /* init index for unused feature of*/
                                   /* xppf020*/
  ;
  PFWSUB1 = 9;
  while (PFWSUB1 > 0)
    PFWREC.XGPCD = PF0FM004.PF0FMGPC[PFWSUB1]; /* string product*/
    PFWREC.SY1STNBR = PF0FM004.SY1STNBR[PFWSUB1]; /* into w/s field*/
    PFWREC.SY2CLRID = PF0FM004.PF0FMCOL[PFWSUB1];
    PFWREC.XDMCD = PF0FM004.XDMCD[PFWSUB1];
    PFWREC.XQACD = PF0FM004.XQACD[PFWSUB1];
    PFWREC.XLCCD = PF0FM004.PF0FMLFC[PFWSUB1];
    if (PFWREC.PFWPROD > " ")
      ;
      XPPF020(); /* edit prod. for field validity*/
      ;
    end
    if (PFWREC.PFWERRF == "Y")
      if (PFWREC.PFWHLFCF == "Y") /* if life cycle field has an error,*/
        set PF0FM004.PF0FMLFC[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHQUAF == "Y") /* if quality field has an error,*/
        set PF0FM004.XQACD[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHDIMF == "Y") /* if dimension field has an error,*/
        set PF0FM004.XDMCD[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHCOLF == "Y") /* if color field has an error,*/
        set PF0FM004.PF0FMCOL[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHSTYF == "Y") /* if style field has an error,*/
        set PF0FM004.SY1STNBR[PFWSUB1] cursor, bold; /* highlight it*/
      end
      if (PFWREC.PFWHGPCF == "Y") /* if gpc field has an error,*/
        set PF0FM004.PF0FMGPC[PFWSUB1] cursor, bold; /* highlight it*/
      end
    end
    PFWSUB1 = PFWSUB1 - 1;
  end
  ;
   /* ******************************************************/
   /* *  if the screen edit routine was successful, move  **/
   /* *  the screen data elements to pfdrec. once all of  **/
   /* *  the data elements have been edited, pfdrec will  **/
   /* *  used to update dproft.vrptat01.                  **/
   /* ******************************************************/
  ;
  if (PFWERRF == "Y") /* if there were errors in the edit*/
                                   /* routine,*/
    return; /* exit the routine*/
  end
  ;
  PFWSUB1 = 8; /* move product element # to the sub.*/
  ;
  PFDREC.PFICD[PFWSUB1] = PF0FT.PFICD[45];
                                   /* move the table field code*/
    /* to the appropriate pfdrec position*/
  ;
  if (PF0FM004.PF0FMGPC[1] > " ") /* if user entered data as selection*/
    PFDREC.PFDVALFL[PFWSUB1] = "Y"; /* move data elements to pfdrec*/
    PFWREC.PFWSUB2 = 1;
    while (PFWREC.PFWSUB2 <= 9)
      PFDREC.XGPCD[PFWSUB2] = PF0FM004.PF0FMGPC[PFWSUB2];
      PFDREC.SY1STNBR[PFWSUB2] = PF0FM004.SY1STNBR[PFWSUB2];
      PFDREC.SY2CLRID[PFWSUB2] = PF0FM004.PF0FMCOL[PFWSUB2];
      PFDREC.XDMCD[PFWSUB2] = PF0FM004.XDMCD[PFWSUB2];
      PFDREC.XQACD[PFWSUB2] = PF0FM004.XQACD[PFWSUB2];
      PFDREC.XLCCD[PFWSUB2] = PF0FM004.PF0FMLFC[PFWSUB2];
      PFWREC.PFWSUB2 = PFWREC.PFWSUB2 + 1;
    end
  end
end // end PF0F845

// windowing routine
Function PF0F880()
   /* *********************************************************/
   /* *                windowing routine                     **/
   /* *   browse thru screen pf0fm004 searching for '?'.     **/
   /* *   perform the appropriate windowing routine for      **/
   /* *   each occurrence of a '?'.                          **/
   /* *********************************************************/
  ;
  PF0FW01.PF0FWPOP = "N";
  ;
   /* *********************************************************/
   /* ***       'gender age' pop-up screen                 ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.XGACD[PFWSUB1] == "?") /* in gender age field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "             GENDER AGE   ";
      while (XX0XW02.XX0XWEND == "N")
        XPXGA01(); /* perform gender age pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM004.XGACD[PFWSUB1] = XGATBL.XGACD[XX0XWPIX];
        set PF0FM004.XGACD[PFWSUB1] cursor;
      else
        PF0FM004.XGACD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***                'gpc' pop-up screen               ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.XGPCD[PFWSUB1] == "?") /* in gpc field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "                  GPC     ";
      while (XX0XW02.XX0XWEND == "N")
        XPXGP01(); /* perform gpc pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM004.XGPCD[PFWSUB1] = XGPTBL.XGPCD[XX0XWPIX];
        set PF0FM004.XGPCD[PFWSUB1] cursor;
      else
        PF0FM004.XGPCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
  ;
   /* *********************************************************/
   /* ***      'summary prod. type' pop-up screen          ****/
   /* *********************************************************/
  ;
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  PFWREC.PFWTBLID = "XPR"; /* move summary key fields to*/
  PFWREC.PFWSYSID = "PF"; /* pfwsetky hold area*/
  PFWREC.PFWSUMID = 0001;
  PFWREC.PFWSUMCD = "**";
  PFWREC.PFWSUMVL = "****";
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.PF0FMYPR[PFWSUB1] == "?") /* in summ. gpc field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPPF500(); /* access DB2 data base*/
      ;
      if (PFWCOUNT == 0) /* if summ. gpc not in summary table,*/
        set PF0FM004.PF0FMYPR[PFWSUB1] cursor, bold; /* it's an error*/
        PFWREC.PFWERRF = "Y";
        converseLib.validationFailed(105);
      else
        XPXX001(); /* perform pop-up screen initialization*/
        XX0XW02.XX0XWHDR = "      SUMMARY PRODUCT TYPE";
        while (XX0XW02.XX0XWEND == "N")
          XPPF510(); /* perform summ. code pop up window*/
          ;
             /* ************************************************/
             /* **   If the user selection flag is equal     ***/
             /* **   to 'y', use the passed table index      ***/
             /* **   'XXXPINX' to move the table code and    ***/
             /* **   description to the map.                 ***/
             /* ************************************************/
          ;
        end
        if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
          PF0FM004.PF0FMYPR[PFWSUB1] = PF2REC.YSMSUMCD[XX0XWPIX];
          set PF0FM004.PF0FMYPR[PFWSUB1] cursor;
        else
          PF0FM004.PF0FMYPR[PFWSUB1] = " ";
        end
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
  ;
   /* *********************************************************/
   /* ***       'product type' pop-up screen               ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.XPRCD[PFWSUB1] == "?") /* in product type field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "           PRODUCT TYPE   ";
      while (XX0XW02.XX0XWEND == "N")
        XPXPR01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM004.XPRCD[PFWSUB1] = XPRTBL.XPRCD[XX0XWPIX];
        set PF0FM004.XPRCD[PFWSUB1] cursor;
      else
        PF0FM004.XPRCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***               'family' pop-up screen             ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.XFMCD[PFWSUB1] == "?") /* in family field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "                 FAMILY   ";
      while (XX0XW02.XX0XWEND == "N")
        XPXFM01(); /* perform pop up window routine*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM004.XFMCD[PFWSUB1] = XFMTBL.XFMCD[XX0XWPIX];
        set PF0FM004.XFMCD[PFWSUB1] cursor;
      else
        PF0FM004.XFMCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***             'body type' pop-up screen            ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.PF0FMXBT[PFWSUB1] == "?") /* in body type field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "              BODY TYPE   ";
      while (XX0XW02.XX0XWEND == "N")
        XPXBT01(); /* perform pop up window routine*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM004.PF0FMXBT[PFWSUB1] = XBTTBL.XBTCD[XX0XWPIX];
        set PF0FM004.PF0FMXBT[PFWSUB1] cursor;
      else
        PF0FM004.PF0FMXBT[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***             'silhouette' pop-up screen           ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.XSUCD[PFWSUB1] == "?") /* in silhouette field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "               SILHOUETTE ";
      while (XX0XW02.XX0XWEND == "N")
        XPXSU01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM004.XSUCD[PFWSUB1] = XSUTBL.XSUCD[XX0XWPIX];
        set PF0FM004.XSUCD[PFWSUB1] cursor;
      else
        PF0FM004.XSUCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***      'special feature'  pop-up screen            ****/
   /* this is a new specification on an existing attribute as of 0194/mjk.*/
   /* NOTE: ONLY 1 VALUE MAY BE ENTERED, SO ALL CODE HAVING TO DO WITH*/
   /* THE SUBSCRIPTS OF THE BUCKETS HAS BEEN COMMENTED OUT.*/
   /* *********************************************************/
  ;
   /* MOVE 1 TO PFWREC.PFWSUB1;        /* re-initialize the subscript*/
  ;
   /* WHILE PFWSUB1 LE 8;              /* check to see if '?' entered*/
   /* IF PF0FM004.XFCCD(PFWSUB1) = '?';/* in spec. features field*/
  if (PF0FM004.XFCCD == "?") /* in spec. features field*/
    PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
    XPXX001(); /* perform pop-up screen initialization*/
    XX0XW02.XX0XWHDR = "          SPECIAL FEATURES";
    while (XX0XW02.XX0XWEND == "N")
      XPXFC01(); /* perform pop up window*/
      ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
      ;
    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      /* MOVE XFCTBL.XFCCD(XX0XWPIX) TO PF0FM004.XFCCD(PFWSUB1);*/
      PF0FM004.XFCCD = XFCTBL.XFCCD[XX0XWPIX];
      /* SET PF0FM004.XFCCD(PFWSUB1) CURSOR;*/
      set PF0FM004.XFCCD cursor;
    else
      /* the following code has been changed/added so that if the user*/
      /* does*/
      /* enter a '?', but then does not select anything from the pop-up,*/
      /* they will be sent an error message that says:*/
      /* 'special feature must have data field entered'.052094/mjk.*/
      /* MOVE ' ' TO PF0FM004.XFCCD(PFWSUB1);*/
      PFWERRF = "Y"; /* see comments above.*/
      converseLib.validationFailed(362);
      set PF0FM004.XFCCD cursor;
      set PF0FM004.XFCCD bold;
      return;
    end
  end
   /* PFWSUB1 = PFWSUB1 + 1;*/
   /* END;*/
  ;
   /* *********************************************************/
   /* ***      'product category' pop-up screen            ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.XPCCD[PFWSUB1] == "?") /* in prod. category field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "        PRODUCT CATEGORY";
      while (XX0XW02.XX0XWEND == "N")
        XPXPC01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM004.XPCCD[PFWSUB1] = XPCTBL.XPCCD[XX0XWPIX];
        set PF0FM004.XPCCD[PFWSUB1] cursor;
      else
        PF0FM004.XPCCD[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***              'quality' pop-up screen             ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.PF0FMXQA[PFWSUB1] == "?") /* in quality field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      XX0XW02.XX0XWHDR = "                 QUALITY  ";
      while (XX0XW02.XX0XWEND == "N")
        XPXQA01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM004.PF0FMXQA[PFWSUB1] = XQATBL.XQACD[XX0XWPIX];
        set PF0FM004.PF0FMXQA[PFWSUB1] cursor;
      else
        PF0FM004.PF0FMXQA[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************************/
   /* N O T E : this is the old 'xlc per prod' code commented out.0194/mjk*/
   /* *********************************************************************/
   /* ***          'life cycle per prod' pop-up screen     ****/
   /* *********************************************************/
  ;
   /* MOVE 1 TO PFWREC.PFWSUB1;        /* re-initialize the subscript*/
  ;
   /* WHILE PFWSUB1 LE 8;              /* check to see if '?' entered*/
   /* F PF0FM004.XLCCD(PFWSUB1) = '?';/* in life cycle field*/
   /* MOVE 'Y' TO PF0FW01.PF0FWPOP;/* Set pop-up window flag on*/
   /* PERFORM XPXX001;             /* perform pop-up screen initialization*/
      /* MOVE '              LIFE CYCLE  ' TO XX0XW02.XX0XWHDR;*/
   /* WHILE XX0XW02.XX0XWEND EQ 'N';*/
   /* PERFORM XPXLC01;           /* perform pop up window*/
   /* ;*/
   /* ;   /* ************************************************/
   /* ;   /* **   If the user selection flag is equal     ***/
   /* ;   /* **   to 'y', use the passed table index      ***/
   /* ;   /* **   'XXXPINX' to move the table code and    ***/
   /* ;   /* **   description to the map.                 ***/
   /* ;   /* ************************************************/
   /* ;*/
   /* END;*/
   /* IF XX0XW02.XX0XWPIX GT 0;    /* if the user selected a code*/
   /* MOVE XLCTBL.XLCCD(XX0XWPIX) TO PF0FM004.XLCCD(PFWSUB1);*/
   /* SET PF0FM004.XLCCD(PFWSUB1) CURSOR;*/
   /* ELSE;*/
   /* MOVE ' ' TO PF0FM004.XLCCD(PFWSUB1);*/
   /* END;*/
   /* END;*/
   /* PFWSUB1 = PFWSUB1 + 1;*/
   /* END;*/
   /* *********************************************************/
   /* ***       'material content'   pop-up screen         ****/
   /* replaced 'life cycle per product' (code commented out above this).*/
   /* this is a new attribute as of 0194/mjk.*/
   /* NOTE: ONLY 1 VALUE MAY BE ENTERED, SO ALL CODE HAVING TO DO WITH*/
   /* THE SUBSCRIPTS OF THE BUCKETS HAS BEEN COMMENTED OUT.*/
   /* *********************************************************/
  ;
   /* MOVE 1 TO PFWREC.PFWSUB1;        /* re-initialize the subscript*/
  ;
   /* WHILE PFWSUB1 LE 8;              /* check to see if '?' entered*/
   /* IF PF0FM004.XMCCD(PFWSUB1) = '?';/* in material content field*/
  if (PF0FM004.XMCCD == "?") /* in material content field*/
    PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
    XPXX001(); /* perform pop-up screen initialization*/
    XX0XW02.XX0XWHDR = "           MATERIAL CONTENT";
    while (XX0XW02.XX0XWEND == "N")
      XPXMC01(); /* perform pop up window*/
      ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
      ;
    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      /* MOVE XMCTBL.XMCCD(XX0XWPIX) TO PF0FM004.XMCCD(PFWSUB1);*/
      PF0FM004.XMCCD = XMCTBL.XMCCD[XX0XWPIX];
      /* SET PF0FM004.XMCCD(PFWSUB1) CURSOR;*/
      set PF0FM004.XMCCD cursor;
    else
      /* the following code has been changed/added so that if the user*/
      /* does*/
      /* enter a '?', but then does not select anything from the pop-up,*/
      /* they will be sent an error message that says:*/
      /* 'material content must have data field entered'.052094/mjk.*/
      /* MOVE ' ' TO PF0FM004.XMCCD(PFWSUB1);*/
      PFWERRF = "Y"; /* see comments above.*/
      converseLib.validationFailed(363);
      set PF0FM004.XMCCD cursor;
      set PF0FM004.XMCCD bold;
      return;
    end
  end
   /* PFWSUB1 = PFWSUB1 + 1;*/
   /* END;*/
  ;
   /* *********************************************************/
   /* ***          'life cycle per rec' pop-up screen      ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.PF0FMLCR[PFWSUB1] == "?") /* in life cycle field*/
      PF0FW01.PF0FWPOP = "Y"; /* Set pop-up window flag on*/
      XPXX001(); /* perform pop-up screen initialization*/
      /* MOVE '              LIFE CYCLE  ' TO XX0XW02.XX0XWHDR;*/
      XX0XW02.XX0XWHDR = "   LIFE CYCLE PER RECORD  ";
      while (XX0XW02.XX0XWEND == "N")
        XPXLC01(); /* perform pop up window*/
        ;
           /* ************************************************/
           /* **   If the user selection flag is equal     ***/
           /* **   to 'y', use the passed table index      ***/
           /* **   'XXXPINX' to move the table code and    ***/
           /* **   description to the map.                 ***/
           /* ************************************************/
        ;
      end
      if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
        PF0FM004.PF0FMLCR[PFWSUB1] = XLCTBL.XLCCD[XX0XWPIX];
        set PF0FM004.PF0FMLCR[PFWSUB1] cursor;
      else
        PF0FM004.PF0FMLCR[PFWSUB1] = " ";
      end
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
   /* *********************************************************/
   /* ***             'product' pop-up screen              ****/
   /* ***             ****not used********                 ****/
   /* *********************************************************/
  ;
  PFWREC.PFWSUB1 = 1; /* re-initialize the subscript*/
  ;
  while (PFWSUB1 <= 8) /* check to see if '?' entered*/
    if (PF0FM004.PF0FMGPC[PFWSUB1] == "?") /* in gpc field*/
      set PF0FM004.PF0FMGPC[PFWSUB1] cursor, bold; /* it's an error*/
      converseLib.validationFailed(105);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0FM004.SY1STNBR[PFWSUB1] == "?") /* in style field*/
      set PF0FM004.SY1STNBR[PFWSUB1] cursor, bold; /* it's an error*/
      converseLib.validationFailed(105);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0FM004.PF0FMCOL[PFWSUB1] == "?") /* in color field*/
      set PF0FM004.PF0FMCOL[PFWSUB1] cursor, bold; /* it's an error*/
      converseLib.validationFailed(105);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0FM004.XDMCD[PFWSUB1] == "?") /* in dimension field*/
      set PF0FM004.XDMCD[PFWSUB1] cursor, bold; /* it's an error*/
      converseLib.validationFailed(105);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0FM004.XQACD[PFWSUB1] == "?") /* in quality field*/
      set PF0FM004.XQACD[PFWSUB1] cursor, bold; /* it's an error*/
      converseLib.validationFailed(105);
      PFWREC.PFWERRF = "Y";
    end
    if (PF0FM004.PF0FMLFC[PFWSUB1] == "?") /* in life cycle field*/
      set PF0FM004.PF0FMLFC[PFWSUB1] cursor, bold; /* it's an error*/
      converseLib.validationFailed(105);
      PFWREC.PFWERRF = "Y";
    end
    PFWSUB1 = PFWSUB1 + 1;
  end
  ;
end // end PF0F880

// converse screen pf0fm004
Function PF0F890()
   /* ***********************************************************/
   /* *  an 's' was entered in the third column of the primary **/
   /* *  screen (pf0fm001). therefore, send screen pf0fm004    **/
   /* *  with the field(s) marked with an 's' unprotected to   **/
   /* *  permit data entry.                                    **/
   /* ***********************************************************/
  ;
  PFWREC.PFWERRF = "N";
  PFWREC.PFWEDTF = "N";
  ;
  ;
  converse PF0FM004 ;
  ;
  PF0FS01(); /* check pf keys*/
  ;
  if (converseVar.eventKey is pf12) /* if user has requested an edit, set*/
    PFWREC.PFWEDTF = "Y"; /* the edit flag (pfwedtf) because*/
  end /* window activity will wipe out*/
                                  /* the original ezeaid key*/
  ;
  if (PFWREC.PFWEOAF == "Y" /* end the application?*/
   || PFWREC.PFWEOSF == "Y")
    return;
  end
  ;
  if (PF0FM001.PF0FMACT == " " /* if this is an inquiry,*/
   || PF0FM001.PF0FMACT == "I") /* return*/
    return;
  end
  ;
  if (PFWREC.PFWERRF == "N") /* perform window routine*/
    PF0F880();
  end
  ;
  converseLib.clearScreen();
   /* reset map after windowing.*/
end // end PF0F890

// delete dproft.vrptat01 row
Function PF0F900()
   /* ****************************************************/
   /* *           delete dproft.vrptat01 row            **/
   /* *  the first time a user requests a delete, the   **/
   /* *  action code is blanked out and a message is    **/
   /* *  sent to the user warning them of the impending **/
   /* *  delete. they must then reenter the 'd' action  **/
   /* *  code and the row will be deleted.              **/
   /* ****************************************************/
  ;
  if (PF0FW01.PF0FWDEL == "N") /* if delete flag isn't set,*/
    converseLib.validationFailed(122); /* delete requested;re-enter 'd' action*/
                                   /* code to cnfrm*/
    PFWERRF = "Y"; /* set error flag*/
    PF0FW01.PF0FWDEL = "Y"; /* set delete flag*/
    PF0FW01.PF0FWACT = "D"; /* save activity code from screen*/
    PF0FM001.PF0FMACT = " "; /* blank out activity code on screen*/
    set PF0FM001.PF0FMACT cursor, bold;
    return;
  end
  ;
  set SQLCA empty; /* clear sql record*/
  ;
  call "IO2740" ("D ", SQLCA, PFDREC) {isNoRefresh = yes, isExternal = yes}; /* delete vrptat01 db2 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* if record deleted, send user a message*/
    converseLib.validationFailed(170); /* report attribute ref # deleted*/
  else /* else abend the application*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VRPTAT01";
    PF0FW01.PF0FWREF = PFDREC.PFDREF;
    TA1REC.TA1TBLKE = PF0FW01.PF0FWREF;
    TA1REC.TA1LOCAT[2] = "PF0F900";
    TA1REC.TA1LOCAT[4] = "IO2740";
    XPPF010();
  end
  ;
  PF0FW01.PF0FWDEL = "N"; /* re-set delete flag*/
  PF0FW01.PF0FWACT = " "; /* re-set activity flag*/
  PF0FM001.PF0FMACT = " "; /* clear screen activity*/
end // end PF0F900

// check pf keys
Function PF0FS01()
   /* ************************************************************/
   /* *   process the pf keys that might have been entered      **/
   /* ************************************************************/
  ;
  PFWREC.PFWCPROC = "PF0FS01"; /* set current process name*/
  ;
  if (PF1REC.PF1XFERF == "Y") /* if this request was via the*/
    if (converseVar.eventKey is enter) /* "pf keys" bridge, the only pf*/
      return; /* allowed are 'enter' or 'pf4'*/
    end
    if (converseVar.eventKey is pf4)
      XSPF4();
      PF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      PFWREC.PFWERRF = "Y";
      return;
    end
    if (converseVar.eventKey is pf15)
      COMMAREA.CATOAP = PF1REC.PF1ORIG;
      COMMAREA.CAUSERA = PF1REC.PF1PASS;
      PFWREC.PFWEOAF = "Y";
      PFWREC.PFWEOSF = "Y";
      return;
    end
    converseLib.validationFailed(001); /* invalid pf key pressed; please retry*/
    PFWREC.PFWERRF = "Y";
  end
  ;
  ;
  if (PF0FM001.CATOAP != " " /* if fastpath entered- screen #1*/
   || PF0FM001.CAITEM != " ")
    if (PF0FM001.CATOAP == "PF0F") /* if fastpath to self*/
      set PF0FM001.CATOAP cursor, bold;
      converseLib.validationFailed(010); /* cannot transfer to requested screen*/
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWSUB = 45;
    while (PFWREC.PFWSUB >= 1)
      if (PF0FM001.PFDVALFL[PFWSUB] is modified)
        set PF0FM001.PFDVALFL[PFWSUB] cursor, bold;
        converseLib.validationFailed(002); /* do not enter data if using fastpath option*/
        PFWREC.PFWERRF = "Y";
      end
      if (PF0FM001.PF0FMCDE[PFWSUB] is modified)
        set PF0FM001.PF0FMCDE[PFWSUB] cursor, bold;
        converseLib.validationFailed(002); /* do not enter data if using fastpath option*/
        PFWREC.PFWERRF = "Y";
      end
      PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
    end
    if (PF0FM001.PF0FMACT is modified)
      set PF0FM001.PF0FMACT cursor, bold;
      converseLib.validationFailed(002); /* do not enter data if using fastpath data*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0FM001.PFDREF is modified)
      set PF0FM001.PFDREF cursor, bold;
      converseLib.validationFailed(002); /* do not enter data if using fastpath data*/
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end
    if (PFWREC.PFWERRF == "Y")
      return;
    else
      COMMAREA.CAFROMAP = "PF0F";
      COMMAREA.CATOAP = PF0FM001.CATOAP;
      COMMAREA.CAITEM = PF0FM001.CAITEM;
      XSEXIT();
      PFWREC.PFWERRF = "Y";
      PF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is enter)
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf1) /* 'help'*/
    XSPF1();
    PF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    PFWREC.PFWERRF = "Y";
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf3) /* set flag to return to*/
    PFWREC.PFWEOSF = "Y"; /* previous screen*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf4)
    XSPF4();
    PF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    PFWREC.PFWERRF = "Y";
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf19) /* if view next is requested and activity*/
    if (PF0FM001.PF0FMACT == "A") /* is an add, send an error message*/
      set PF0FM001.PF0FMACT cursor, bold;
      PFWERRF = "Y";
      converseLib.validationFailed(126); /* pf19 not allowed with 'a' activity code*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf19) /* if view next is requested and activity*/
    if (PF0FM001.PF0FMACT == "D") /* is a delete, send an error message*/
      set PF0FM001.PF0FMACT cursor, bold;
      PFWERRF = "Y";
      converseLib.validationFailed(125); /* pf19 not allowed with 'd' activity code*/
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf12 /* edit or*/
   || converseVar.eventKey is pf19) /* view next is ok*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pa1 /* cancel request and*/
   || converseVar.eventKey is pa2) /* send a clear screen*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
    PFWREC.PFWERRF = "Y";
    converseLib.validationFailed(189); /* pa2 pressed; screen changes aborted*/
    return;
  end
  ;
  ;
  converseLib.validationFailed(1); /* invalid pf key pressed; please retry*/
  PFWREC.PFWERRF = "Y";
end // end PF0FS01

Record PF0FW01 type basicRecord
  10 PFDCDVAL PFDCDVAL [8] ; 
    15 PF0FWCD1 PF0FWCD1 ; 
    15 PF0FWCD2 PF0FWCD2 ; 
  10 PF0FWPRD PF0FWPRD [9] ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XLCCD XLCCD ; 
  10 PFICD PFICD [8] ; 
  10 PFDVALFL PFDVALFL [8] ; 
  10 PF0FWSC1 PF0FWSC1 ; 
  10 PF0FWSC2 PF0FWSC2 ; 
  10 PF0FWSC3 PF0FWSC3 ; 
  10 PFDREF PFDREF ; 
  10 PF0FWACT PF0FWACT ; 
  10 PF0FWUP1 PF0FWUP1 ; 
  10 PF0FWUP2 PF0FWUP2 ; 
  10 PF0FWUP3 PF0FWUP3 ; 
  10 PF0FWATT PF0FWATT ; 
  10 PF0FWAT1 PF0FWAT1 ; 
  10 PF0FWAT2 PF0FWAT2 ; 
  10 PF0FWCNT PF0FWCNT ; 
  10 PF0FWREF PF0FWREF ; 
  10 PF0FWCDE PF0FWCDE ; 
  10 PF0FWDEL PF0FWDEL ; 
  10 PF0FWYIC PF0FWYIC ; 
    15 PF0FWYC2 PF0FWYC2 ; 
  10 PF0FWPFL PF0FWPFL ; 
  10 PF0FWPSL PF0FWPSL ; 
  10 PF0FWPOP PF0FWPOP ; 
end // end PF0FW01

// actioncode
DataItem PF0FWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem PF0FWAT1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2 char. attr. hold area
DataItem PF0FWAT2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4 char. attr. hold area
DataItem PF0FWATT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// attr. cd.-1st two pos.
DataItem PF0FWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// attr. cd.-last two pos.
DataItem PF0FWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pficd conversion field
DataItem PF0FWCDE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count hold field
DataItem PF0FWCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete 1st time flag
DataItem PF0FWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product flag
DataItem PF0FWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window flag
DataItem PF0FWPOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product field
DataItem PF0FWPRD char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product non-selection flag
DataItem PF0FWPSL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// abend ref key
DataItem PF0FWREF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF0F screen 1 flag
DataItem PF0FWSC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//      screen 2 flag
DataItem PF0FWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//      screen 3 flag
DataItem PF0FWSC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// col. 1 update flag
DataItem PF0FWUP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// col. 2 update flag
DataItem PF0FWUP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// col. 3 update flag
DataItem PF0FWUP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inv. acct. cd. conversion
DataItem PF0FWYC2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inv. acct. cd. conversion
DataItem PF0FWYIC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

