package pf0h;
import corpcom2.XC1REC;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPPF002;
import corpcom3.XPPF010;
import corpcom3.XPPF030;
import corpcom3.XPPF200;
import corpcom3.XPPF300;
import corpcom3.XPPF400;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import pf.common.*;
import sm.common.SM1REC;
import sy.common.SY1REC;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import xx.common.*;
import xx.common.YISCD;
import xx01.*;
import xx02.*;
import xx03.*;
import xx04.*;
import xx05.*;
import xx05.XROTBL;
import xx06.*;
import xx07.*;
import xx08.*;
import xx08.YISTBL;
import xx09.*;
import xx10.*;
//*** PROGRAM=PF0H ****
// PF0H: Summary Print Parameters and Summary Create
//       Parameters Application for the Profitability
//       Reporting System.
// 
// Overview:
//       This application has two main functions. The first
//       is to generate print parameters which specify how
//       and which portions of summaries are to be printed.
//       The second is to generate summary create parameters
//       which specify how to create a summary from an
//       existing summary, and which portions should be
//       included.
//         For each print parameter a DPROFT.VRPTPM01 row is
//       created.  For each summary create parameter a
//       DPROFT.VRPTPM01 row and a DPROFT.VSUMAT01 row are
//       created.
//         Only three maps are used for the five types of
//       print parameters created.  Types 1 and 4 use map
//       1, types 2 and 5 use map 2, and type 3 uses map 3.
// 
// 
// Maintenance History:
//   Date      By             Description of Change
// --------  ------  -----------------------------------------
//  2-28-89  DCassi  Original transfer to production.
//  3-08-89  DCassi  Require summary format type to be 1
//           rather than 3 for condensed print.  Reset record
//           found and other flags before fastpath and pfkey
//           processing, rather than before pf19 processing.
//           Check XROTBL.XROPPFL when editing printer id.
//           Protect all fields except summary name and source
//           summary name when first displaying the screens.
//  3-16-89  DCassi  Change print level default from 'S'
//           (Summary) to 'D' (Detail).  Include Description
//           and Route To fields in the check for identical
//           print parameters.
//  3-28-89  DCassi  Add a window for printer field displaying
//           only the remote printers that are valid for
//           profitability.
//  6-21-89  DCassi  Change Summary Order Type to Base Order
//           Type (XOBTBL).
//  6-21-89  DCassi  Re-GEn for changes to YFATBL, YMATBL,
//           YMBTBL, and YMCTBL.
//  8-31-89  jwood   removed ypgtbl from tbl list as per dc
//  1-16-90  dbrock  added code to initialize the PFFPRTYI
//                   to spaces due to the addition of this
//                   field during the january tables changes
//  4-02-90  cvo     Added two new processing cycles 'w' & 'q'.
//                   Renamed cycles: 's' to 'b', & 't' to 'p'.
//                   deleted cycle 'a'.  Modified pf0h182,
//                   pf0h282, pf0h382.
//  9-15-90  cvo     Select sum. description and remote printer
//                   code (xrocd) from vrptpm01 for display
//                   when xfer from PF0P.
//                   Display the priority and cycle from
//                   vsumat01 rather than default values when a
//                   summary is requested from PF0H.
// 10-10-90  cvo     changed xrocd field length from 2 to 4.
// 04-15-94  mjk     changes for added attributes.
// 03-01-96  MBUHIT  Regen for GCOA changes to YICTBL.
// 11-19-97  mleabo  Re-gen for table changes ysetbl, tsftbl.
// *********************
Program PF0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PF0HW01 PF0HW01; // record
  PF1REC PF1REC; // record
  PF2REC PF2REC; // record
  PFAREC PFAREC; // record
  PFBREC PFBREC; // record
  PFCREC PFCREC; // record
  PFDREC PFDREC; // record
  PFEREC PFEREC; // record
  PFFREC PFFREC; // record
  PFIREC PFIREC; // record
  PFWREC PFWREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XC1REC XC1REC; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YISTBL {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use XATTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBTTBL {deleteAfterUse = yes}; // table
  use XCNTBL {deleteAfterUse = yes}; // table
  use XDRTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XFCTBL {deleteAfterUse = yes}; // table
  use XFMTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XGSTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XMCTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XRDTBL {deleteAfterUse = yes}; // table
  use XRYTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YFATBL {deleteAfterUse = yes}; // table
  use YFETBL {deleteAfterUse = yes}; // table
  use YFFTBL {deleteAfterUse = yes}; // table
  use YFGTBL {deleteAfterUse = yes}; // table
  use YGRTBL {deleteAfterUse = yes}; // table
  use YICTBL {deleteAfterUse = yes}; // table
  use YMATBL {deleteAfterUse = yes}; // table
  use YMBTBL {deleteAfterUse = yes}; // table
  use YMCTBL {deleteAfterUse = yes}; // table
  use YSCTBL {deleteAfterUse = yes}; // table
  use YSETBL {deleteAfterUse = yes}; // table
  use YSFTBL {deleteAfterUse = yes}; // table
  use YSYTBL {deleteAfterUse = yes}; // table
  use PF0HM.PF0HM000,  // forms
      PF0HM.PF0HM001, 
      PF0HM.PF0HM002, 
      PF0HM.PF0HM003, 
      PF0HM.PF0HM004, 
      PF0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PF0H000: PF0H000();
  end // end main
end // end PF0H

// PF0H mainline logic
Function PF0H000()
  PF0H001(); /* initialization*/

  while (PFWREC.PFWEOAF == "N") /* while application is active*/

    PF0H010(); /* select screen to converse*/

  end

  XPPF002(); /* exit*/


  if (PFWREC.PFWMSG != " ") /* in case of reject from exit*/
    COMMAREA.CAMSG = PFWREC.PFWMSG; /* save message*/
  end
  COMMAREA.CATOAP = "PF0A"; /* xfer to main PF menu*/
  XSEXIT();
end // end PF0H000

// initialization
Function PF0H001()
  XSENTRY(); /* security checking*/

  XSSEGTR(); /* set cics start tran id*/

  set PF0HM000 initial; /* clear print option menu*/
  set PF0HM001 initial; /* clear selection 1 screen*/
  set PF0HM002 initial; /* clear selection 2 screen*/
  set PF0HM003 initial; /* clear selection 3 screen*/
  set PF0HM004 initial; /* clear change sort sequence screen*/
  set PFWREC empty; /* clear general PF working storage*/
  set PF0HW01 empty; /* clear PF0H working storage*/
  set PFAREC empty; /* clear prof control tab i/o rec*/
  set PFBREC empty; /* clear i/s group table i/o rec*/
  set PFCREC empty; /* clear report format table i/o rec*/
  set PFDREC empty; /* clear report attribute table i/o rec*/
  set PFEREC empty;
                                   /* clear summary attribute table i/o rec*/
  set PFFREC empty; /* clear report parameter table i/o rec*/
  set PFIREC empty; /* clear report att desc tab i/o rec*/
  set PF1REC empty; /* clear bridge record*/
  set PF2REC empty; /* clear summary code table record*/
  set XX0XW02 empty; /* clear pop-up window routine record*/
  set YSMREC empty; /* clear summary table i/o record*/
  set SY1REC empty; /* clear style table i/o record*/
  set SYCREC empty; /* clear composite color table i/o*/
                                   /* record*/
  set SM1REC empty; /* clear sales agency table i/o record*/
   /* sm4rec is not used anymore.  0394/mjk.*/
   /* SET SM4REC EMPTY;                 /* clear sales rep table i/o record*/
  set XC1REC empty; /* clear default printer routine record*/
  set SQLCA empty; /* clear sql comm area record*/
  set ERRSQLCA empty; /* clear sql comm area record*/
  set TA1REC empty; /* clear error diag routine record*/
  set TA2REC empty; /* clear date routine record*/

  PFWREC.PFWEOAF = "N"; /* set end of appl flag*/
  PFWREC.PFWERRF = "N"; /* set error flag*/
  PFWREC.PFWRECF = "N"; /* set record found flag*/
  PF0HW01.PF0HWDCF = "N"; /* set delete confirm msg issued flag*/
  PF0HW01.PF0HWP19 = "Y"; /* set first pf19 for session flag*/

  PF0HW01.PFFPRTYP = "0"; /* signal PF0H menu active*/


  PF0H002(); /* initial security check*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


  PF0HM000.XXXCURDT = VGVar.currentShortGregorianDate; /* move current date to screens*/
  PF0HM001.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0HM002.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0HM003.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0HM004.XXXCURDT = VGVar.currentShortGregorianDate;


   /* -----------------------------------------------------------;*/
     /* Get the default remote printer id for this terminal.    ;*/
     /* It is returned from the utility using 3 bytes           ;*/
     /* (eg: 'R10'), which we move to PF0HWDEF which is a       ;*/
     /* 3 byte character field.  PF0HWDPR is a redefiniton      ;*/
     /* of the last two bytes of this field (eg: '10'), which   ;*/
     /* is moved to the screens in other processes.             ;*/
       /* For printer id's under 10 (eg: 'R7 '), in addition    ;*/
     /* to stripping off the 'R' the id number is padded on     ;*/
     /* the left with a zero (eg: 'R7 ' becomes '07').          ;*/
   /* -----------------------------------------------------------;*/

  PF0H003(); /* get default remote printer id*/

  PF1REC.PF1PASS = COMMAREA.CAUSERA; /* receive passed record*/
  if (PF1REC.PF1ORIG == "PF0P")
     /* don't clear causera*/
  else
    COMMAREA.CAUSERA = " "; /* clear user area*/
  end

  if (PF1REC.PF1XFERF == "Y" /* if xfer via PF keys*/
   && PF1REC.PF1ORIG == "PF0H") /* and returning on bridge*/

    PF0H004(); /* pfkey bridge back into pf0h*/

  else
    if (COMMAREA.CACURRAP != " " /* fast path entry*/
     && COMMAREA.CAITEM != " ") 
      if (COMMAREA.CAITEM == "1"
       || COMMAREA.CAITEM == "2"
       || COMMAREA.CAITEM == "3"
       || COMMAREA.CAITEM == "4")
        PF0HW01.PFFPRTYP = COMMAREA.CAITEM;
      else
        set PF0HM000.PFFPRTYP cursor, bold; /* print type selection*/
        converseLib.validationFailed(47); /* please enter 1, 2, 3, or 4 for*/
                                   /* selection*/
        PFWREC.PFWERRF = "Y";
        return;
      end
      COMMAREA.CAITEM = " ";
    end
  end
end // end PF0H001

// initial security check
Function PF0H002()
   /* -----------------------------------------------------------;*/
      /* Select profitiability control table row to check       ;*/
    /* PFAREC.PFALKOTF, the summary lockout flag.  Abend for    ;*/
    /* a -911 return code because process can not be repeated.  ;*/
   /* -----------------------------------------------------------;*/

  PF0H971(); /* vpfctl01 select unique*/

  if (SQLCA.VAGen_SQLCODE != +0) /* if table i/o unsuccessful*/
    TA1REC.TA1LOCAT[2] = " "; /* fatal db2 error, transfer to ta*/
    PFWREC.PFWHKEY = " ";
    PFWREC.PFWCPROC = "PF0H002"; /* pass calling process*/
    TA1REC.TA1LOCAT[4] = "IO2670"; /* pass i/o module name*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VPFCTL01";
    XPPF010(); /* abend routine*/
  end


   /* -----------------------------------------------------------;*/
    /* Check add security.                                      ;*/
   /* -----------------------------------------------------------;*/

  PF0H870(); /* check add security*/
end // end PF0H002

// get default remote printer id
Function PF0H003()
  set XC1REC empty; /* clear i/o record*/

  call "XC0100" (XC1REC) {isNoRefresh = yes, isExternal = yes}; /* default remote printer id routine*/

  if (XC1REC.XC1RETCD != 0) /* if an error occured*/
    TA1REC.TA1TYPE = "APPL"; /* error type*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    TA1REC.TA1PGMNM = "PF0H"; /* program name*/
    TA1REC.TA1LOC = "OBTAIN CICS REMOTE PRINTER ID";
    SQLCA.SQLCAREC = XC1REC.XC1GRPLV; /* error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diagnostic routine*/

    COMMAREA.CAUSERA = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end

  PF0HW01.PF0HWPRT = XC1REC.XC1RMTPR;
                                   /* save default printer (redefine)*/
  PF0HW01.PF0HWDPR = "0000";

  if (PF0HW01.PF0HWPR5 != " ")
    PF0HW01.PF0HWDP5 = PF0HW01.PF0HWPR5;
    PF0HW01.PF0HWDP4 = PF0HW01.PF0HWPR4;
    PF0HW01.PF0HWDP3 = PF0HW01.PF0HWPR3;
    PF0HW01.PF0HWDP2 = PF0HW01.PF0HWPR2;
  else
    if (PF0HW01.PF0HWPR4 != " ")
      PF0HW01.PF0HWDP5 = PF0HW01.PF0HWPR4;
      PF0HW01.PF0HWDP4 = PF0HW01.PF0HWPR3;
      PF0HW01.PF0HWDP3 = PF0HW01.PF0HWPR2;
    else
      if (PF0HW01.PF0HWPR3 != " ")
        PF0HW01.PF0HWDP5 = PF0HW01.PF0HWPR3;
        PF0HW01.PF0HWDP4 = PF0HW01.PF0HWPR2;
      else
        if (PF0HW01.PF0HWPR2 != " ")
          PF0HW01.PF0HWDP5 = PF0HW01.PF0HWPR2;
        end
      end
    end
  end


  if (PF0HW01.PF0HWDPR in XROTBL.XROCD) /* if this is a valid printer id*/
    if (XROTBL.XROPFFL[sysVar.arrayIndex] == "N") /* if not valid for profitablity*/
      PF0HW01.PF0HWDPR = " "; /* do not provide a default prtr*/
    end
  else /* else this is not a valid printer id*/
    PF0HW01.PF0HWDPR = " "; /* do not provide a default printer*/
  end

end // end PF0H003

// pfkey bridge back into pf0h
Function PF0H004()
   /* -----------------------------------------------------------;*/
     /* select the summary attribute row for the summary name   ;*/
     /* or the source summary name.                             ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PF1XFERF = "N"; /* signal xfer not active*/

  PF0HW01.PFFPRTYP = PF1REC.PF1SCRNF; /* signal which screen active*/

  if (PF0HW01.PFFPRTYP == "1" /* if a print option*/
   || PF0HW01.PFFPRTYP == "2" 
   || PF0HW01.PFFPRTYP == "3")
    PFEREC.PFESUMNM = PF1REC.PF1NAM; /* mov sum name to key*/
  else
    if (PF0HW01.PFFPRTYP == "4" /* if a new summary option*/
     || PF0HW01.PFFPRTYP == "5")
      PFEREC.PFESUMNM = PF1REC.PFESRCNM;
                                   /* mov source sum name to key*/
    else
      PF0HW01.PFFPRTYP = "0";
      converseLib.validationFailed(215); /* pf14, 15, or 16 bridge return failed*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end


  PF0H921(); /* vsumat01 select unique*/

  if (SQLCA.VAGen_SQLCODE != 0) /* if i/o unsuccessful*/
    PF0HW01.PFFPRTYP = "0";
    converseLib.validationFailed(215); /* pf14, 15, or 16 bridge return failed*/
    PFWREC.PFWERRF = "Y";
    return;
  end


   /* -----------------------------------------------------------;*/
     /* select the report attribute row for the summary         ;*/
     /* selected above.                                         ;*/
   /* -----------------------------------------------------------;*/

  PFDREC.PFDREF = PFEREC.PFDREF;
                                   /* report attribute reference nbr*/

  PF0H941(); /* vrptat01 select unique*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* reconstruct the screen conversed before the bridge.     ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "1"
   || PF0HW01.PFFPRTYP == "4")

    PF0H005(); /* scrn 1 pfkey bridge back in*/

  else
    if (PF0HW01.PFFPRTYP == "2"
     || PF0HW01.PFFPRTYP == "5")

      PF0H006(); /* scrn 2 pfkey bridge back in*/

    else
      if (PF0HW01.PFFPRTYP == "3")

        PF0H007(); /* scrn 3 pfkey bridge back in*/

      else
        PF0HW01.PFFPRTYP = "0";
        converseLib.validationFailed(215); /* pf14, 15, or 16 bridge return failed*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    end
  end


   /* -----------------------------------------------------------;*/
   /* -----------------------------------------------------------;*/
     /* Converse the change sort sequencing screen (scrn 4)     ;*/
     /* if the scrn 4 active indicator flag is 'y'.  This       ;*/
     /* indicates that the user bridged out from scrn 4         ;*/
     /* rather than one of the 3 main screens.                  ;*/
   /* -----------------------------------------------------------;*/
   /* -----------------------------------------------------------;*/

  if (PF1REC.PF1S4AIN == "N") /* scrn 4 active indicator*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Save these fields in working storage for use if the     ;*/
     /* user re-initializes scrn 4 with PA2.                    ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PFESUMNM = PF1REC.PF1NAM; /* save summary name*/
  PF0HW01.PFESRCNM = PF1REC.PFESRCNM; /* save source summary name*/
  PF0HW01.PF0HWDSC = PF1REC.PF1DSC; /* save prt or new sum desc*/


   /* -----------------------------------------------------------;*/
     /* Restore the display only fields.                        ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM004 initial;
  PF0HM004.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0HM004.PFESUMNM = PF1REC.PF1NAM;
  if (PF0HW01.PFFPRTYP == "1" /* if any of the PRINT options*/
   || PF0HW01.PFFPRTYP == "2" 
   || PF0HW01.PFFPRTYP == "3")
     /* move summary desc to pfesumde*/
    PF0HM004.PFESUMDE = PFEREC.PFESUMDE;
  else
                                   /* else it's a create new summary option*/
     /* move new summary desc to pfesumde*/
    PF0HM004.PFESUMDE = PF1REC.PF1DSC;
  end
  PF0HM004.PFESRCNM = PF1REC.PFESRCNM;
  PF0HM004.PFCREF = PFEREC.PFCREF;
  PF0HM004.PFBREF = PFEREC.PFBREF;
  PF0HM004.PFDREF = PFEREC.PFDREF;
  PF0HM004.PFABSPRM = PFEREC.PFABSPRM;
  PF0HM004.PFABSPRY = PFEREC.PFABSPRY;


   /* -----------------------------------------------------------;*/
     /* Restore the ACTUAL scrn 4 fields, which are changeable  ;*/
     /* by the users, to thier values before the bridge out.    ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 8)
    PF0HM004.PF0HMELE[PFWSUB] = PF1REC.PF1ELEM[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PF0HM004.PF0HMCLS = PF1REC.PF1CLS;
  PF0HM004.PF0HMDEO = PF1REC.PF1DEO;
  PF0HM004.PF0HMASO = PF1REC.PF1ASO;
  PF0HM004.PFESQCOL = PF1REC.PF1COLUM;


   /* -----------------------------------------------------------;*/
     /* Converse scrn 4.                                        ;*/
   /* -----------------------------------------------------------;*/

   /* note: pf0hm004.pfesumnm eq ' ' signals scrn 4 to init from*/
         /* pf0hw01.  Do NOT do that in this case.*/
  PF0HM004.PFESUMNM = PF1REC.PF1NAM;

  PFWREC.PFWEXT = "N"; /* set scrn 4 exit flag*/
  while (PFWREC.PFWEXT == "N") /* while scrn 4 exit flag is no*/

    PF0H400(); /* scrn 4 converse*/

  end
end // end PF0H004

// scrn 1 pfkey bridge back in
Function PF0H005()
   /* -----------------------------------------------------------;*/
     /* Recreate screen using PF1REC fields.                    ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "1")
    PF0HM001.PF0HMSNM = "   PRINT ALL OR SELECTED LOGICAL PAGES";

    PF0HM001.PFESUMNM = PF1REC.PF1NAM;

     /* move print parameter desc to pf0hmdsc*/
    PF0HM001.PF0HMDSC = PF1REC.PF1DSC;

    PF0HM001.PF0HMPRY = PF1REC.PF1PRY;
    PF0HM001.PFELGCPG = PF1REC.PFELGCPG;

    PF0HM001.XXXUNTXT = PF1REC.XXXUNTXT;
     /* PF0HM001.PF0HMCSQ is set below*/
    PF0HM001.XROCD = PF1REC.XROCD;
    PF0HM001.XROABRV = PF1REC.XROABRV;

    PF0HM001.XXXNDTXT = PF1REC.XXXNDTXT;
    PF0HM001.PFECYCIN = PF1REC.PFECYCIN;
    PF0HM001.XXXNBRCY = PF1REC.XXXNBRCY;

    PF0HM001.XXXNLTXT = PF1REC.XXXNLTXT;
    PF0HM001.PFFPRLVL = PF1REC.PFFPRLVL;

    PF0HM001.PFFPRFRS = PF1REC.PFFPRFRS;
  else
    PF0HM001.PF0HMSNM = "CREATE A SUMMARY FROM A SELECTED SUMMARY";

    PF0HM001.PFESUMNM = PF1REC.PF1NAM;
    PF0HM001.PFESRCNM = PF1REC.PFESRCNM;
     /* move source summary desc to pfesumde*/
    PF0HM001.PFESUMDE = PF1REC.PFESUMDE;

     /* move new summary desc to pf0hmdsc*/
    PF0HM001.PF0HMDSC = PF1REC.PF1DSC;

    PF0HM001.PF0HMPRY = PF1REC.PF1PRY;
    PF0HM001.PFELGCPG = PF1REC.PFELGCPG;

     /* PF0HM001.PF0HMCSQ is set below*/
  end

  if (PF1REC.PF1S4AIN == "N") /* scrn 4 active indicator*/
    PF0HM001.PF0HMCSQ = PF1REC.PF1CSQ; /* reset the saved value*/
  else /* else, set to 'n' now for after the return from scrn 4*/
    PF0HM001.PF0HMCSQ = "N";
  end


  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PF0HM001.PFIDESC[PFWSUB] = PF1REC.PFIDESC[PFWSUB];
    PF0HM001.PFDCDVAL[PFWSUB] = PF1REC.PFDCDVAL[PFWSUB];
    PF0HM001.PF0HMVDS[PFWSUB] = PF1REC.PF1VDS[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  PF0HM001.PF0HMPRD = PF1REC.PF1PRD;
  PF0HM001.XGPCD = PF1REC.XGPCD;
  PF0HM001.SY1STNBR = PF1REC.SY1STNBR;
  PF0HM001.SY2CLRID = PF1REC.SY2CLRID;
  PF0HM001.XDMCD = PF1REC.XDMCD;
  PF0HM001.XQACD = PF1REC.XQACD;
  PF0HM001.XLCCD = PF1REC.XLCCD;
  PF0HM001.SY1SSTNM = PF1REC.SY1SSTNM;
  PF0HM001.SY2CLRAB = PF1REC.SY2CLRAB;

   /* restore PF0HW01 'default' scrn 4 fields*/
  PF0HW01.PFESRTEL = PF1REC.PFESRTEL;
  PF0HW01.YISCD = PF1REC.YISCD;
  PF0HW01.PFBISGRP = PF1REC.PFBISGRP;
  PF0HW01.PFESEIND = PF1REC.PFESEIND;
  PF0HW01.PFESQCOL = PF1REC.PFESQCOL;

  if (PF1REC.PF1EZEMN == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(PF1REC.PF1EZEMN);
  end /* reset error message*/
  PFWREC.PFWRECF = PF1REC.PF1RECF; /* record found flag*/
end // end PF0H005

// scrn 2 reconstruct from bridge
Function PF0H006()
   /* -----------------------------------------------------------;*/
     /* Recreate screen using PF1REC fields.                    ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "2")
    PF0HM002.PF0HMSNM = "          PRINT SELECTED LEVELS";

    PF0HM002.PFESUMNM = PF1REC.PF1NAM;

     /* move print parameter desc to pf0hmdsc*/
    PF0HM002.PF0HMDSC = PF1REC.PF1DSC;

    PF0HM002.PF0HMPRY = PF1REC.PF1PRY;
    PF0HM002.PFELGCPG = PF1REC.PFELGCPG;

    PF0HM002.XXXUNTXT = PF1REC.XXXUNTXT;
     /* PF0HM002.PF0HMCSQ is set below*/
    PF0HM002.XROCD = PF1REC.XROCD;
    PF0HM002.XROABRV = PF1REC.XROABRV;

    PF0HM002.XXXNDTXT = PF1REC.XXXNDTXT;
    PF0HM002.PFECYCIN = PF1REC.PFECYCIN;
    PF0HM002.XXXNBRCY = PF1REC.XXXNBRCY;

    PF0HM002.XXXNLTXT = PF1REC.XXXNLTXT;
    PF0HM002.PFFPRLVL = PF1REC.PFFPRLVL;
  else
    PF0HM002.PF0HMSNM = " CREATE A SUMMARY FROM SELECTED LEVELS";

    PF0HM002.PFESUMNM = PF1REC.PF1NAM;
    PF0HM002.PFESRCNM = PF1REC.PFESRCNM;
     /* move source summary desc to pfesumde*/
    PF0HM002.PFESUMDE = PF1REC.PFESUMDE;

     /* move new summary desc to pf0hmdsc*/
    PF0HM002.PF0HMDSC = PF1REC.PF1DSC;

    PF0HM002.PF0HMPRY = PF1REC.PF1PRY;
    PF0HM002.PFELGCPG = PF1REC.PFELGCPG;

     /* PF0HM002.PF0HMCSQ is set below*/
  end

  if (PF1REC.PF1S4AIN == "N") /* scrn 4 active indicator*/
    PF0HM002.PF0HMCSQ = PF1REC.PF1CSQ; /* reset the saved value*/
  else /* else, set to 'n' now for after the return from scrn 4*/
    PF0HM002.PF0HMCSQ = "N";
  end

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PF0HM002.PFIDESC[PFWSUB] = PF1REC.PFIDESC[PFWSUB];
    PF0HM002.PFDCDVAL[PFWSUB] = PF1REC.PFDCDVAL[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  PF0HM002.PFDCDVAL[8] = PF1REC.PFDCDVAL[8];
  PF0HM002.PF0HMPRD = PF1REC.PF1PRD;

   /* restore PF0HW01 'default' scrn 4 fields*/
  PF0HW01.PFESRTEL = PF1REC.PFESRTEL;
  PF0HW01.YISCD = PF1REC.YISCD;
  PF0HW01.PFBISGRP = PF1REC.PFBISGRP;
  PF0HW01.PFESEIND = PF1REC.PFESEIND;
  PF0HW01.PFESQCOL = PF1REC.PFESQCOL;

  if (PF1REC.PF1EZEMN == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(PF1REC.PF1EZEMN);
  end /* reset error message*/
  PFWREC.PFWRECF = PF1REC.PF1RECF; /* record found flag*/
end // end PF0H006

// scrn 3 reconstruct from bridge
Function PF0H007()
   /* -----------------------------------------------------------;*/
     /* Recreate screen using PF1REC fields.                    ;*/
   /* -----------------------------------------------------------;*/

  PF0HM003.PFESUMNM = PF1REC.PF1NAM;

   /* move print parameter desc to pf0hmdsc*/
  PF0HM003.PF0HMDSC = PF1REC.PF1DSC;

  PF0HM003.PF0HMPRY = PF1REC.PF1PRY;
  PF0HM003.PFELGCPG = PF1REC.PFELGCPG;

  PF0HM003.XXXUNTXT = PF1REC.XXXUNTXT;
  if (PF1REC.PF1S4AIN == "N") /* scrn 4 active indicator*/
    PF0HM003.PF0HMCSQ = PF1REC.PF1CSQ; /* reset the saved value*/
  else /* else, set to 'n' now for after the return from scrn 4*/
    PF0HM003.PF0HMCSQ = "N";
  end
  PF0HM003.XROCD = PF1REC.XROCD;
  PF0HM003.XROABRV = PF1REC.XROABRV;

  PF0HM003.XXXNDTXT = PF1REC.XXXNDTXT;
  PF0HM003.PFECYCIN = PF1REC.PFECYCIN;
  PF0HM003.XXXNBRCY = PF1REC.XXXNBRCY;

  PF0HM003.XXXNLTXT = PF1REC.XXXNLTXT;
   /* PFFPRLVL field is not on this screen*/

  PF0HM003.PFFPRFRS = PF1REC.PFFPRFRS;


  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PF0HM003.PFFFMCH[PFWSUB] = PF1REC.PFFFMCH[PFWSUB];
    PF0HM003.PFIDESC[PFWSUB] = PF1REC.PFIDESC[PFWSUB];
    PF0HM003.PFDCDVAL[PFWSUB] = PF1REC.PFDCDVAL[PFWSUB];
    PF0HM003.PF0HMVDS[PFWSUB] = PF1REC.PF1VDS[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PF0HM003.PFFFMCH[8] = PF1REC.PFFFMCH[8];

  PF0HM003.PF0HMPRD = PF1REC.PF1PRD;
  PF0HM003.XGPCD = PF1REC.XGPCD;
  PF0HM003.SY1STNBR = PF1REC.SY1STNBR;
  PF0HM003.SY2CLRID = PF1REC.SY2CLRID;
  PF0HM003.XDMCD = PF1REC.XDMCD;
  PF0HM003.XQACD = PF1REC.XQACD;
  PF0HM003.XLCCD = PF1REC.XLCCD;
  PF0HM003.SY1SSTNM = PF1REC.SY1SSTNM;
  PF0HM003.SY2CLRAB = PF1REC.SY2CLRAB;

   /* restore PF0HW01 'default' scrn 4 fields*/
  PF0HW01.PFESRTEL = PF1REC.PFESRTEL;
  PF0HW01.YISCD = PF1REC.YISCD;
  PF0HW01.PFBISGRP = PF1REC.PFBISGRP;
  PF0HW01.PFESEIND = PF1REC.PFESEIND;
  PF0HW01.PFESQCOL = PF1REC.PFESQCOL;

  if (PF1REC.PF1EZEMN == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(PF1REC.PF1EZEMN);
  end /* reset error message*/
  PFWREC.PFWRECF = PF1REC.PF1RECF; /* record found flag*/
end // end PF0H007

// select screen to converse
Function PF0H010()
   /* -----------------------------------------------------------;*/
     /* This routine controls which of the five screens are     ;*/
     /* conversed.  Screen 0 is the menu screen which allows    ;*/
     /* selection of one of the 3 print parameter screens,      ;*/
     /* or the  create summary screen.                          ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "0") /* if print type selection is Menu*/
    PFWREC.PFWRECF = "N"; /* reset record found flag*/
    PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
    PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
    while (PF0HW01.PFFPRTYP == "0") /* while sel = 0 (PF0H menu)*/

      PF0H050(); /* scrn 0 converse*/

      if (PFWREC.PFWEOAF == "Y") /* if end of appl*/
        return;
      end
    end
    set PF0HM000 initial; /* clear screen*/
    PF0HM000.XXXCURDT = VGVar.currentShortGregorianDate;
    return;
  end

  if (PF0HW01.PFFPRTYP == "1" /* print all or selected summaries*/
   /* screen*/
   || PF0HW01.PFFPRTYP == "4") /* create a sum from a selected sum*/
    while (PF0HW01.PFFPRTYP == "1" /* while sel = 1*/
     || PF0HW01.PFFPRTYP == "4") /* or sel = 4*/

      PF0H100(); /* scrn 1 converse*/

      if (PFWREC.PFWEOAF == "Y") /* if end of appl*/
        return;
      end
    end
    set PF0HM001 initial; /* clear screen*/
    PF0HM001.XXXCURDT = VGVar.currentShortGregorianDate;
    return;
  end

   /* 5 is not used, but this is okay since it is an 'OR'. 0394/mjk.*/
  if (PF0HW01.PFFPRTYP == "2" /* print specific level screen*/
   || PF0HW01.PFFPRTYP == "5") /* create a sum from a specific level*/
    while (PF0HW01.PFFPRTYP == "2" /* while sel = 2*/
     || PF0HW01.PFFPRTYP == "5") /* or sel = 5*/

      PF0H200(); /* scrn 2 converse*/

      if (PFWREC.PFWEOAF == "Y") /* if end of appl*/
        return;
      end
    end
    set PF0HM002 initial; /* clear screen*/
    PF0HM002.XXXCURDT = VGVar.currentShortGregorianDate;
    return;
  end

  if (PF0HW01.PFFPRTYP == "3") /* print in condensed format screen*/
    while (PF0HW01.PFFPRTYP == "3") /* while sel = 3*/

      PF0H300(); /* scrn 3 converse*/

      if (PFWREC.PFWEOAF == "Y") /* if end of appl*/
        return;
      end
    end
    set PF0HM003 initial; /* clear screen*/
    PF0HM003.XXXCURDT = VGVar.currentShortGregorianDate;
    return;
  end

   /* fall through error*/
  PF0HM000.PFFPRTYP = "0"; /* set menu print type selection*/
  PF0HW01.PFFPRTYP = "0";
  set PF0HM000.PFFPRTYP cursor, bold;
  converseLib.validationFailed(47); /* please enter 1, 2, 3, or 4 for*/
                                   /* selection*/
  PFWREC.PFWERRF = "Y";
end // end PF0H010

// scrn 0 converse
Function PF0H050()
  if (PFWREC.PFWMSG != " ")
                                   /* display incoming msg*/
    PF0HM000.VAGen_EZEMSG = PFWREC.PFWMSG;
  end

  converse PF0HM000 ;

  PF0HW01.PFFPRTYP = PF0HM000.PFFPRTYP; /* save print type selection*/

  set PF0HM000.PFFPRTYP cursor, initialAttributes; /* print type selection*/
  set PF0HM000.CATOAP initialAttributes;
  set PF0HM000.CAITEM initialAttributes;

  PFWREC.PFWERRF = "N"; /* reset error flag*/
  PFWREC.PFWMSG = " "; /* clear message line*/
  PF0HM000.VAGen_EZEMSG = " ";


   /* -----------------------------------------------------------;*/
     /* Check for Fastpath, PF & PA keys                        ;*/
   /* -----------------------------------------------------------;*/

  PF0H051(); /* scrn 0 fastpath, pf & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    PF0HW01.PFFPRTYP = "0";
    PF0HM000.PFFPRTYP = " ";
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Check Security                                          ;*/
   /* -----------------------------------------------------------;*/

  PF0H870(); /* security checking*/

  if (PFWREC.PFWERRF == "Y")
    PF0HW01.PFFPRTYP = "0";
    PF0HM000.PFFPRTYP = " ";
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Edit Print Type Selection                               ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM000.PFFPRTYP == "1" /* print type selection*/
   || PF0HM000.PFFPRTYP == "2" 
   || PF0HM000.PFFPRTYP == "3" 
   || PF0HM000.PFFPRTYP == "4")
     /* this is okay*/
  else
    PF0HW01.PFFPRTYP = "0";
    PF0HM000.PFFPRTYP = " ";
    set PF0HM000.PFFPRTYP cursor, bold;
    converseLib.validationFailed(47); /* please enter 1, 2, 3, or 4 for selection*/
    PFWREC.PFWERRF = "Y";
    return;
  end
end // end PF0H050

// scrn 0 fastpath, pf & pa keys
Function PF0H051()
   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on    ;*/
     /* the screen.  If other data has been entered, put cursor ;*/
     /* on the bad field and send an error message.  Do not     ;*/
     /* allow fastpath back into same application.              ;*/
   /* -----------------------------------------------------------;*/
  if (PF0HM000.CATOAP != " " /* if fastpath*/
   || PF0HM000.CAITEM != " ")
    if (PF0HM000.CATOAP == "PF0H") /* if fastpath into same appl*/
      set PF0HM000.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested application*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0HM000.PFFPRTYP is modified) /* print type selection*/
      set PF0HM000.PFFPRTYP cursor, bold;
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0HM000.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0HM000.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end


   /* -----------------------------------------------------------;*/
      /* Check for PF and PA key entries.                       ;*/
   /* -----------------------------------------------------------;*/
  if (converseVar.eventKey is enter)
      /* no action*/
  else
    if (converseVar.eventKey is pf12 /* edit not allowed from scrn 0*/
     || converseVar.eventKey is pf14 /* bridge out not allowed from scrn 0*/
     || converseVar.eventKey is pf15 /* bridge out not allowed from scrn 0*/
     || converseVar.eventKey is pf16 /* bridge out not allowed from scrn 0*/
     || converseVar.eventKey is pf19) /* view next not allowed from scrn 0*/
      converseLib.validationFailed(1); /* invalid pf key pressed - retry*/
      PFWREC.PFWERRF = "Y";
      return;
    else

      PF0H880(); /* process pf & pa keys*/

      if (PFWREC.PFWERRF == "Y" /* if error returned from check*/
       || PFWREC.PFWEOAF == "Y" /* or end of application*/
       || PF0HW01.PFFPRTYP != "0") /* or screen 0 no longer active*/
        PFWERRF = "Y";
        return; /* exit this routine*/
      end
    end
  end
end // end PF0H051

// scrn 1 converse
Function PF0H100()
   /* -----------------------------------------------------------;*/
     /* Converse screen 1:                                      ;*/
       /* 'PRINT ALL OR SELECTED SUMMARIES' screen, or          ;*/
       /* 'CREATE A SUMMARY FROM A SELECTED SUMMARY' screen     ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
     /* Set screen attributes.                                  ;*/
   /* -----------------------------------------------------------;*/

  PF0H110(); /* scrn 1 set scrn attributes*/

  PF1REC.PF1EZEMN = converseVar.validationMsgNum; /* save msg for possible bridge*/

  if (PFWREC.PFWMSG != " ")
    PF0HM001.VAGen_EZEMSG = PFWREC.PFWMSG;
  end

  if (PF1REC.PF1XFERF == "Y"
   && PF1REC.PF1ORIG == "PF0P")
    if (PF0HW01.PFFPRTYP == "1")
      PF0HM001.PFESUMNM = PF1REC.PF1NAM;
      PFFREC.PFANXTNO = PF1REC.PF1ANX;
      PFFREC.PFESUMNM = PF1REC.PF1NAM;
      PFEREC.PFESUMNM = PF1REC.PF1NAM;
      PF0H999(); /* vrptpm select unique*/
      PF0HM001.PF0HMDSC = PFFREC.PFFRPTDS; /* cvo 9/15/90*/
      PF0HM001.PF0HMPRY = PFFREC.PFFPRTYI;
      PF0HM001.PFFPRFRS = PFFREC.PFFPRFRS;
      PF0HM001.PFECYCIN = PFFREC.PFECYCIN;
      PF0HM001.XXXUNTXT = PFFREC.XXXUNTXT;
      PF0HM001.XXXNLTXT = PFFREC.XXXNLTXT;
      PF0HM001.XXXNDTXT = PFFREC.XXXNDTXT;
      PF0HM001.XXXNBRCY = PFFREC.XXXNBRCY;
      PF0HM001.PFFPRLVL = PFFREC.PFFPRLVL;
      PF0HM001.XGPCD = PFFREC.XGPCD;
      PF0HM001.SY1STNBR = PFFREC.SY1STNBR;
      PF0HM001.SY2CLRID = PFFREC.SY2CLRID;
      PF0HM001.XDMCD = PFFREC.XDMCD;
      PF0HM001.XQACD = PFFREC.XQACD;
      PF0HM001.XLCCD = PFFREC.XLCCD;
      PF0HM001.XROCD = PFFREC.XROCD; /* cvo 9/15/90*/
      if (PFFREC.XROCD in XROTBL.XROCD)
        PF0HM001.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
      else
        PF0HM001.XROABRV = " ";
      end
      PF0H921(); /* vsumat*/
      PF0HM001.PFELGCPG = PFEREC.PFELGCPG;
      PF0HM001.PF0HMCSQ = "N";
      PFDREC.PFDREF = PFEREC.PFDREF;
      PF0H941(); /* vrptat*/
      PFWREC.PFWSUB = 1;
      while (PFWREC.PFWSUB <= 7)
        if (PFDREC.PFICD[PFWSUB] != " ")
          PFIREC.PFICD = PFDREC.PFICD[PFWSUB];
          PF0H931();
          PF0HM001.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
        else
          PF0HM001.PFIDESC[PFWSUB] = " ";
        end
        PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
      end
      if (PFDREC.PFICD[8] != " ")
        PFIREC.PFICD = PFDREC.PFICD[8];
        PF0H931();
        PF0HM001.PF0HMPRD = PFIREC.PFIDESC;
        set PF0HM001.XGPCD skip;
        set PF0HM001.SY1STNBR skip;
        set PF0HM001.SY2CLRID skip;
        set PF0HM001.XDMCD skip;
        set PF0HM001.XQACD skip;
        set PF0HM001.XLCCD skip;
      else
        PF0HM001.PF0HMPRD = " ";
      end

    else
      PF0HM001.PFESRCNM = PF1REC.PF1NAM;
      PFEREC.PFESUMNM = PF1REC.PF1NAM;
      PFFREC.PFESUMNM = PF1REC.PF1NAM;
      PFFREC.PFANXTNO = PF1REC.PF1ANX;
      PF0H999(); /* vrptpm select unique*/
      PF0HM001.PF0HMDSC = PFFREC.PFFRPTDS; /* cvo 9/15/90*/
      PF0HM001.PF0HMPRY = PFFREC.PFFPRTYI;
      PF0HM001.SY1STNBR = PFFREC.SY1STNBR;
      PF0HM001.XGPCD = PFFREC.XGPCD;
      PF0HM001.SY2CLRID = PFFREC.SY2CLRID;
      PF0HM001.XDMCD = PFFREC.XDMCD;
      PF0HM001.XQACD = PFFREC.XQACD;
      PF0HM001.XLCCD = PFFREC.XLCCD;
      PF0H921();
      PFDREC.PFDREF = PFEREC.PFDREF;
      PF0HM001.PFELGCPG = PFEREC.PFELGCPG;
      PF0HM001.PF0HMCSQ = "N";
      PF0H941();
      PFWREC.PFWSUB = 1;
      while (PFWREC.PFWSUB <= 7)
        if (PFDREC.PFICD[PFWSUB] != " ")
          PFIREC.PFICD = PFDREC.PFICD[PFWSUB];
          PF0H931();
          PF0HM001.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
        else
          PF0HM001.PFIDESC[PFWSUB] = " ";
        end
        PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
      end
      if (PFDREC.PFICD[8] != " ")
        PFIREC.PFICD = PFDREC.PFICD[8];
        PF0H931();
        PF0HM001.PF0HMPRD = PFIREC.PFIDESC;
        set PF0HM001.XGPCD skip;
        set PF0HM001.SY1STNBR skip;
        set PF0HM001.SY2CLRID skip;
        set PF0HM001.XDMCD skip;
        set PF0HM001.XQACD skip;
        set PF0HM001.XLCCD skip;
      else
        PF0HM001.PF0HMPRD = " ";
      end
    end
  end

  if (PF1REC.PF1ORIG == "PF0P")
    PF0HM001.PF0HMPFK = "17:PRNT DIR";
    set PF0HM001.PF0HMPFK normal;
    set PF0HM001.PF0HMPFK skip;
  end


  if (PF1REC.PF1ORIG == "PF0P")
    PFWREC.PFWSUB = 1;
    while (PFWREC.PFWSUB <= 7)
      if (PF1REC.PFDCDVAL[PFWSUB] != " ")
        PF0HM001.PFDCDVAL[PFWSUB] = PF1REC.PFDCDVAL[PFWSUB];
        set PF0HM001.PFDCDVAL[PFWSUB] normal;
        set PF0HM001.PFDCDVAL[PFWSUB] skip;
      end
      PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
    end
  end
  converse PF0HM001 ;

  PFWREC.PFWERRF = "N"; /* reset error flag*/
  PFWREC.PFWMSG = " "; /* clear message line*/
  PF0HM001.VAGen_EZEMSG = " ";


   /* -----------------------------------------------------------;*/
     /* Reset flags if summary name or source summary name is   ;*/
     /* changed.                                                ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PFESUMNM is modified
   || PF0HM001.PFESRCNM is modified)
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
    PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
  end


   /* -----------------------------------------------------------;*/
     /* Check for fastpath, pf & pa keys.                       ;*/
   /* -----------------------------------------------------------;*/

  PF0H120(); /* scrn 1 fastpath, pf & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Check security.                                         ;*/
   /* -----------------------------------------------------------;*/

  PF0H870(); /* check add security*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* These 3 PF keys transfer the user to one of 3 other     ;*/
     /* PF applications.  Data is saved before the transfer,    ;*/
     /* allowing the user to return to the point at which he or ;*/
     /* she left.  Transfer occurs in the routine XPPF200.      ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf14 /* if bridge pf key pushed*/
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf16)

    PF0H130(); /* scrn 1 pfkey bridge out*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* The pf19 read next key displays all the existing        ;*/
     /* parameters for a summary, in the same order that they   ;*/
     /* were created.  It also displays a new field on the      ;*/
     /* screen, the delete field.  When the user stops pushing  ;*/
     /* pf19 and pushes enter instead, the delete field is      ;*/
     /* removed from the screen again.                          ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19) /* if read next pf key pushed*/

    PF0H140(); /* scrn 1 pf19 read next*/

     /* force screen re-initialization if not pf19 next time*/
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    return;
  else
    PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
  end


   /* -----------------------------------------------------------;*/
     /* Deletes can be requested only when the user is scanning ;*/
     /* through the existing parameters using pf19.             ;*/
     /* For a print request, the rptpm row is deleted.  For a   ;*/
     /* new summary request, both the rptpm row and the sumat   ;*/
     /* row are deleted.                                        ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PF0HMDLT == "D") /* if user entered 'd' on screen*/

    PF0H150(); /* scrn 1 delete rptpm & sumat*/

    return;
  else
    PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
  end


   /* -----------------------------------------------------------;*/
       /* If the summary or source summary names are modified,  ;*/
     /* clear the screen and display the default values and     ;*/
     /* reporting attributes for the summary, using the         ;*/
     /* appropriate display process.                            ;*/
       /* Otherwise, process the displayed sum.  This includes  ;*/
     /* editing, possibly displaying the change sort screen     ;*/
     /* (scrn 4), checking for duplicates, and creating the     ;*/
     /* print rptpm or new summary rptpm and sumat.             ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PFESUMNM is modified /* if a new summary*/
   || PF0HM001.PFESRCNM is modified /* or a new source summary*/
   || PFWREC.PFWRECF == "N")        /* or records found flag is no*/
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    PFWREC.PFWEDTF = "Y"; /* reset edit attribute values flag*/
    if (PF0HW01.PFFPRTYP == "1")

      PF0H160(); /* scrn 1 print (typ 1) display*/

    else

      PF0H170(); /* scrn 1 new sum (typ 4) display*/

    end
    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PFWREC.PFWRECF = "Y"; /* set records found flag*/

  else /* else not a new sum or source sum*/

    PF0H180(); /* scrn 1 process displayed scrn*/

  end
end // end PF0H100

// scrn 1 set scrn attributes
Function PF0H110()
   /* ----------------------------------------------------------;*/
     /* Set screen attributes for the appropriate print type.  ;*/
     /* If the records found flag is 'n', protect all the      ;*/
     /* fields except for the summary name and source summary  ;*/
     /* name.  This flag will be 'n' when: the screen is first ;*/
     /* displayed as blank, the user changed the summary name  ;*/
     /* or source summary name to an invalid name, the user    ;*/
     /* is using PF19 to read through the existing parameters, ;*/
     /* or the user is deleting a parameter.                   ;*/
   /* ----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "1")
    PF0HM001.PF0HMSNM = "   PRINT ALL OR SELECTED LOGICAL PAGES";
    set PF0HM001.PF0HMSSL skip, invisible;
    set PF0HM001.PFESRCNM skip, invisible;
    set PF0HM001.PFESUMDE skip, invisible; /* source sum desc*/
    if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
      set PF0HM001.PF0HMDSC skip;
      set PF0HM001.PF0HMPRY skip;
      set PF0HM001.XXXUNTXT skip;
      set PF0HM001.PF0HMCSQ skip;
      set PF0HM001.XROCD skip;
      set PF0HM001.XXXNDTXT skip;
      set PF0HM001.PFECYCIN skip;
      set PF0HM001.XXXNBRCY skip;
      set PF0HM001.XXXNLTXT skip;
      set PF0HM001.PFFPRLVL skip;
      set PF0HM001.PFFPRFRS skip;
    end
  else
    PF0HM001.PF0HMSNM = "CREATE A SUMMARY FROM A SELECTED SUMMARY";
    set PF0HM001.PF0HMRTL skip, invisible;
    set PF0HM001.PF0HMUNL skip, invisible;
    set PF0HM001.XXXUNTXT skip, invisible;
    set PF0HM001.PF0HMPRL skip, invisible;
    set PF0HM001.XROCD skip, invisible;
    set PF0HM001.XROABRV skip, invisible;
    set PF0HM001.PF0HMNDL skip, invisible;
    set PF0HM001.XXXNDTXT skip, invisible;
    set PF0HM001.PF0HMCYL skip, invisible;
    set PF0HM001.PFECYCIN skip, invisible;
    set PF0HM001.PF0HMCPL skip, invisible;
    set PF0HM001.XXXNBRCY skip, invisible;
    set PF0HM001.PF0HMNLL skip, invisible;
    set PF0HM001.XXXNLTXT skip, invisible;
    set PF0HM001.PF0HMPLL skip, invisible;
    set PF0HM001.PFFPRLVL skip, invisible;
    set PF0HM001.PF0HMFL1 skip, invisible;
    set PF0HM001.PFFPRFRS skip, invisible;
    set PF0HM001.PF0HMFL2 skip, invisible;
    if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
      set PF0HM001.PF0HMDSC skip;
      set PF0HM001.PF0HMPRY skip;
      set PF0HM001.PF0HMCSQ skip;
    end
  end


   /* ----------------------------------------------------------;*/
     /* Protect all the value fields if the records found flag ;*/
     /* is 'n'.  Darken any value fields that don't have       ;*/
     /* attributes.                                            ;*/
   /* ----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
      set PF0HM001.PFDCDVAL[PFWSUB] skip; /* protect field*/
    end
    if (PF0HM001.PFIDESC[PFWSUB] == " ") /* if no attribute showing*/
      set PF0HM001.PFDCDVAL[PFWSUB] skip, invisible;
                                   /* protect & darken field*/
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end


   /* ----------------------------------------------------------;*/
     /* Set the product field attributes.                      ;*/
   /* ----------------------------------------------------------;*/

  if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
    set PF0HM001.XGPCD skip; /* protect all the product fields*/
    set PF0HM001.SY1STNBR skip;
    set PF0HM001.SY2CLRID skip;
    set PF0HM001.XDMCD skip;
    set PF0HM001.XQACD skip;
    set PF0HM001.XLCCD skip;
  end

  if (PFDREC.PFICD[8] == "39") /* if product attrib. is gpc, style*/
                                  /* protect the remaining prod fields*/
    set PF0HM001.SY2CLRID skip, invisible;
    set PF0HM001.XDMCD skip, invisible;
    set PF0HM001.XQACD skip, invisible;
    set PF0HM001.XLCCD skip, invisible;
  end

  if (PFDREC.PFICD[8] == "42") /* if product attrib. is gpc, style,*/
                                   /* qual, lc*/
                                  /* protect the remaining prod fields*/
    set PF0HM001.SY2CLRID skip, invisible;
    set PF0HM001.XDMCD skip, invisible;
  end

  if (PFDREC.PFICD[8] == "45") /* if product attrib. is gpc, style,*/
                                   /* clr,dim*/
                                  /* protect the remaining prod fields*/
    set PF0HM001.XQACD skip, invisible;
    set PF0HM001.XLCCD skip, invisible;
  end

  if (PF0HM001.PF0HMPRD == " ") /* if product desc eq ' ' (no product at*/
                                   /* all)*/
    set PF0HM001.XGPCD skip, invisible; /* protect and darken all prod fields*/
    set PF0HM001.SY1STNBR skip, invisible;
    set PF0HM001.SY2CLRID skip, invisible;
    set PF0HM001.XDMCD skip, invisible;
    set PF0HM001.XQACD skip, invisible;
    set PF0HM001.XLCCD skip, invisible;
  end
end // end PF0H110

// scrn 1 fastpath, pf & pa keys
Function PF0H120()
   /* -----------------------------------------------------------;*/
     /* Reset screen fields.                                    ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM001.PF0HMSNM initialAttributes;
  set PF0HM001.PFESUMNM initialAttributes;
  set PF0HM001.PF0HMSSL initialAttributes;
  set PF0HM001.PFESRCNM initialAttributes;
  set PF0HM001.PFESUMDE initialAttributes; /* source sum desc*/
  set PF0HM001.PF0HMDSC initialAttributes; /* prt param or new sum desc*/
  set PF0HM001.PF0HMRTL initialAttributes;
  set PF0HM001.PF0HMPRY initialAttributes;
  set PF0HM001.PFELGCPG initialAttributes;

  set PF0HM001.PF0HMUNL initialAttributes;
  set PF0HM001.XXXUNTXT initialAttributes;
  set PF0HM001.PF0HMCSQ initialAttributes;
  set PF0HM001.PF0HMPRL initialAttributes;
  set PF0HM001.XROCD initialAttributes;
  set PF0HM001.XROABRV initialAttributes;
  set PF0HM001.PF0HMNDL initialAttributes;
  set PF0HM001.XXXNDTXT initialAttributes;
  set PF0HM001.PF0HMCYL initialAttributes;
  set PF0HM001.PFECYCIN initialAttributes;
  set PF0HM001.PF0HMCPL initialAttributes;
  set PF0HM001.XXXNBRCY initialAttributes;
  set PF0HM001.PF0HMNLL initialAttributes;
  set PF0HM001.XXXNLTXT initialAttributes;
  set PF0HM001.PF0HMPLL initialAttributes;
  set PF0HM001.PFFPRLVL initialAttributes;

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    set PF0HM001.PFDCDVAL[PFWSUB] initialAttributes; /* attribute value*/
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  set PF0HM001.XGPCD initialAttributes;
  set PF0HM001.SY1STNBR initialAttributes;
  set PF0HM001.SY2CLRID initialAttributes;
  set PF0HM001.XDMCD initialAttributes;
  set PF0HM001.XQACD initialAttributes;
  set PF0HM001.XLCCD initialAttributes;
  set PF0HM001.PF0HMFL1 initialAttributes;
  set PF0HM001.PFFPRFRS initialAttributes;
  set PF0HM001.PF0HMFL2 initialAttributes;
  set PF0HM001.PF0HMDEL initialAttributes;
  set PF0HM001.PF0HMDLT initialAttributes;
  set PF0HM001.CATOAP initialAttributes;
  set PF0HM001.CAITEM initialAttributes;


   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on    ;*/
     /* the screen.  If other data has been entered, put cursor ;*/
     /* on the bad field and send an error message.  Do not     ;*/
     /* allow fastpath back into same application.              ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.CATOAP != " " /* if fastpath*/
   || PF0HM001.CAITEM != " ")
    if (PF0HM001.CATOAP == "PF0H") /* if fastpath into same appl*/
      set PF0HM001.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
       /* wait to set pfwerrf until after the following process*/
    end
    if (PF0HM001.PF0HMDLT is modified)
      set PF0HM001.PF0HMDLT cursor, bold;
      PFWREC.PFWERRF = "Y";
    end

    PF0H191(); /* scrn 1 data entry check*/

    if (PFWREC.PFWERRF == "Y") /* if an error occured*/
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
    end
    if (PF0HM001.CATOAP == "PF0H") /* if fastpath into same appl*/
      PFWREC.PFWERRF = "Y"; /* set error flag for msg 10 above*/
    end

    if (PF0HM001.PFESRCNM is modified)
      set PF0HM001.PFESRCNM cursor, bold;
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0HM001.PFESUMNM is modified)
      set PF0HM001.PFESUMNM cursor, bold;
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0HM001.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0HM001.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Check for PF and PA key entries.                        ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is enter)
      /* no action*/
  else

    PF0H880(); /* process PF & PA keys*/

    if (PF0HW01.PFFPRTYP != "1" /* if screen 1 no longer active*/
     && PF0HW01.PFFPRTYP != "4") /* and screen 4 no longer active*/
      PFWERRF = "Y";
      return; /* exit this routine*/
    end
  end
end // end PF0H120

// scrn 1 pfkey bridge out
Function PF0H130()
   /* -----------------------------------------------------------;*/
     /* Verify the summary name or the source summary name      ;*/
     /* have been entered.                                      ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "4")
    if (PF0HM001.PFESRCNM == " ")
      set PF0HM001.PFESRCNM cursor, bold;
      converseLib.validationFailed(276); /* pls enter source sum name along w/*/
                                   /* pf14,15 or 16*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  else
    if (PF0HM001.PFESUMNM == " ")
      set PF0HM001.PFESUMNM cursor, bold;
      converseLib.validationFailed(79); /* please enter sum name along with pf14,15 or 16*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Verify nothing is changed on the screen except the      ;*/
     /* summary name or the source summary name.                ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PF0HMDLT is modified)
    set PF0HM001.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H191(); /* scrn 1 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(216); /* do not enter values when using pf14, 15, or 16*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Select the summary or the source summary from the       ;*/
     /* database.                                               ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "4")
    PFEREC.PFESUMNM = PF0HM001.PFESRCNM;
  else
    PFEREC.PFESUMNM = PF0HM001.PFESUMNM;
  end

  PF0H921(); /* vsumat01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
    if (PF0HW01.PFFPRTYP == "4")
      set PF0HM001.PFESRCNM cursor, bold;
      converseLib.validationFailed(262); /* source summary name is not on file*/
    else
      set PF0HM001.PFESUMNM cursor, bold;
      converseLib.validationFailed(62); /* summary name is not on file*/
    end
    PFWREC.PFWERRF = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* if i/o unsuccessful*/
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Move the screen fields to the bridge record.            ;*/
   /* -----------------------------------------------------------;*/

  PF0H840(); /* scrn 1 bridge out PF1REC load*/


   /* -----------------------------------------------------------;*/
     /* These 5 PF1REC fields are used to store the ACTUAL      ;*/
     /* updateable scrn 4 fields.  They are initialized to      ;*/
     /* spaces and zeros because scrn 4 is not currently        ;*/
     /* active.                                                 ;*/
       /* There are also 5 different PF1REC fields that are     ;*/
     /* used to store the PF0HW01 working storage fields for    ;*/
     /* scrn 4.  These fields contain the 'default' sort        ;*/
     /* fields from the vsumat01 row or the last saved updates  ;*/
     /* to these from scrn 4.  They are saved in PF1REC in      ;*/
     /* the process performed above that loads PF1REC.          ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 8)
    PF1REC.PF1ELEM[PFWSUB] = " ";
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PF1REC.PF1CLS = 0;
  PF1REC.PF1DEO = " ";
  PF1REC.PF1ASO = " ";
  PF1REC.PF1COLUM = 0;


   /* -----------------------------------------------------------;*/
     /* Set the scrn 4 active indicator to 'n'.  Indicates      ;*/
     /* that scrn 4 was not conversed when the user bridged     ;*/
     /* out.                                                    ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PF1S4AIN = "N"; /* scrn 4 active indicator*/


   /* -----------------------------------------------------------;*/
     /* Bridge out.                                             ;*/
   /* -----------------------------------------------------------;*/

  XPPF200(); /* pf14,15,16,17 bridge routine*/
end // end PF0H130

// scrn 1 pf19 read next
Function PF0H140()
   /* -----------------------------------------------------------;*/
     /* Check delete security.                                  ;*/
   /* -----------------------------------------------------------;*/

  PF0H890(); /* pf19 check del security*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Verify that no modifications have been made to screen   ;*/
     /* fields other than the summary name.                     ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PF0HMDLT is modified)
    set PF0HM001.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H191(); /* scrn 1 data entry check*/

  if (PF0HM001.PFESRCNM is modified)
    set PF0HM001.PFESRCNM cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(212); /* do not enter values when using pf19*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Save fields in pf0hw01 for later use.                   ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PFESUMNM = PF0HM001.PFESUMNM; /* save summary name*/
  PF0HW01.PFESRCNM = PF0HM001.PFESRCNM; /* save source summary name*/
  PF0HW01.PF0HWDSC = PF0HM001.PF0HMDSC; /* save prt or new sum desc*/


   /* -----------------------------------------------------------;*/
     /* Display the change sort sequencing screen (scrn 4)      ;*/
     /* after the first display of a parameter.                 ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PF0HWP19 == "N"
   /* if first pf19 for session flag is 'n'*/
   && PF0HM001.PF0HMCSQ == "Y")

     /* signals screen 4 to initialize from pf0hw01*/
    PF0HM004.PFESUMNM = " ";

    PF0H400(); /* scrn 4 converse*/

     /* prevent entering this loop more than once for a param.*/
    PF0HM001.PF0HMCSQ = "N";

    set PF0HM001.PF0HMDEL skip; /* set delete fields visible*/
    set PF0HM001.PF0HMDLT normal;
    return;
  end


   /* -----------------------------------------------------------;*/
     /* If this is the first pf19 of this 'session', select the ;*/
     /* summary from the database.  A pf19 'session' lasts as   ;*/
     /* long as the user continues to push pf19 rather than     ;*/
     /* enter.  The PF0HW01.PF0HWP19 flag is used to indicate   ;*/
     /* if this is the first pf19 in this pf19 session.  It's   ;*/
     /* normal value (the user is not using pf19) is 'y'.       ;*/
     /* When the user presses pf19 the first time, it is set    ;*/
     /* to 'n' after it is used in this process.  It stays set  ;*/
     /* to 'n' durring the pf19 session.  When the session ends ;*/
     /* (the user presses enter instead of another pf19) the    ;*/
     /* flag is reset to 'y'.                                   ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM001 initial; /* clear map*/
  PF0HM001.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved summary name*/
  PF0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* put current date on screen*/

  if (PF0HW01.PF0HWP19 == "Y")
                                   /* if first pf19 for session flag is 'y'*/

     /* get sumat & rptat rows for the summary name entered*/
    PF0H141(); /* scrn 1 pf19 get sumat & rptat*/

  end

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Open the parameter table cursor selecting all           ;*/
     /* parameters for this summary.                            ;*/
   /* -----------------------------------------------------------;*/

  PFFREC.PFESUMNM = PF0HM001.PFESUMNM;

  PF0H911(); /* vrptpm01 select scan*/

  if (SQLCA.VAGen_SQLCODE != 0) /* if db2 access unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Select a parameter to display.  Only display a          ;*/
     /* parameter if the security allows the user to delete it. ;*/
     /* If this is the first pf19 for this session then just    ;*/
     /* select the first parameter.  If it is not the first     ;*/
     /* pf19 then read through the parameters until you find    ;*/
     /* the next parameter after the last one displayed in this ;*/
     /* pf19 session.                                           ;*/
   /* -----------------------------------------------------------;*/

   /* PF0HW01.PF0HWNXT is used to hold the sequence number*/
   /* of the desired parameter to be displayed.  The*/
   /* desired parameter's sequence number must be greater*/
   /* than or equal to this sequence number.*/

  if (PF0HW01.PF0HWP19 == "Y")
                                   /* if first pf19 for session flag is 'y'*/
    PF0HW01.PF0HWNXT = 0; /* get first parameter*/
  end
  PFFREC.PFANXTNO = -1; /* ensures loop is processed at least once*/

   /* continue looping while there are still more parameters*/
   /* and the key of the current parameter is less than the*/
   /* key of the desired parameter.  the user must have the*/
   /* proper security to be allowed to view a parameter.*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PFFREC.PFANXTNO < PF0HW01.PF0HWNXT)

    PF0H142(); /* scrn 1 pf19 get param, chk sec*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end

   /* set the next parameter to be displayed for use*/
   /* the next time through this process.*/

  PF0HW01.PF0HWNXT = PFFREC.PFANXTNO + 1;


   /* -----------------------------------------------------------;*/
     /* Display the selected parameter on one of the three      ;*/
     /* screens.                                                ;*/
   /* -----------------------------------------------------------;*/

  PF0H143(); /* scrn 1 pf19 display sel param*/


   /* -----------------------------------------------------------;*/
     /* Close the cursor.                                       ;*/
   /* -----------------------------------------------------------;*/

  PF0H913(); /* vrptpm01 close scan*/
end // end PF0H140

// scrn 1 pf19 get sumat & rptat
Function PF0H141()
  PFEREC.PFESUMNM = PF0HM001.PFESUMNM;

  PF0H921(); /* vsumat01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
    set PF0HM001.PFESUMNM cursor, bold;
    converseLib.validationFailed(62); /* summary name is not on file*/
    PFWREC.PFWERRF = "Y";
    return;
  end


  PFDREC.PFDREF = PFEREC.PFDREF; /* report attr ref nbr*/

  PF0H941(); /* vrptat01 select unique*/
end // end PF0H141

// scrn 1 pf19 get param, chk sec
Function PF0H142()
   /* -----------------------------------------------------------;*/
     /* Select the next vrptpm01 row from the cursor.           ;*/
   /* -----------------------------------------------------------;*/

  PF0H912(); /* vrptpm01 select next*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
    set PF0HM001.PFESUMNM cursor, bold;
    if (PF0HW01.PF0HWP19 == "Y") /* first pf19 for session flag*/
      converseLib.validationFailed(214); /* no print/create parameters exist for sum*/
    else
      converseLib.validationFailed(213); /* no more prt/create param exist for sum & user*/
    end
    PFWREC.PFWERRF = "Y";

    PF0H913(); /* vrptpm01 close scan*/

    return;
  end

  PF0HW01.PF0HWP19 = "N";
                                   /* set first pf19 for session flag to no*/


   /* -----------------------------------------------------------;*/
     /* If we have not yet reached the desired param, return.   ;*/
       /* The key of the current parameter can be greater than  ;*/
     /* (as well as equal to) the key of the desired parameter  ;*/
     /* because the sequence numbers are ascending but not      ;*/
     /* every number may be there (eg: 1,2,4,7,8,...).          ;*/
   /* -----------------------------------------------------------;*/

  if (PFFREC.PFANXTNO < PF0HW01.PF0HWNXT)
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Check if this user is authorized to delete this param.  ;*/
   /* -----------------------------------------------------------;*/

  if (COMMAREA.CADLVL[1] == "Y") /* deletes always allowed (super user)*/
     /* this is okay - security granted*/
     /* key values will cause exit from loop*/
     /* this param will be displayed*/
  else /* deletes not always allowed*/
    if (PFFREC.XXXUSRID == COMMAREA.CAUSERID /* user created param*/
     && PFAREC.PFALKOTF == "N")              /* not summary lockout*/
       /* this is okay - security granted*/
       /* key values will cause exit from loop*/
       /* this param will be displayed*/

    else /* else, do not allow user to see or delete this param*/

       /* security denied, set key to 1 greater than the current*/
       /* key, to continue looping and get another param*/
      PF0HW01.PF0HWNXT = PFFREC.PFANXTNO + 1;
    end
  end
end // end PF0H142

// scrn 1 pf19 display sel param
Function PF0H143()
  PF0HW01.PFFPRTYP = PFFREC.PFFPRTYP; /* print type selection*/

  if (PFFREC.PFFPRTYP == "1"
   || PFFREC.PFFPRTYP == "4")

    PF0H810(); /* scrn 1 format from vrptpm01*/

    PF0HM001.PF0HMCSQ = "Y"; /* trigger scrn 4 display next converse*/
  else
    if (PFFREC.PFFPRTYP == "2"
     || PFFREC.PFFPRTYP == "5")

      PF0H820(); /* scrn 2 format from vrptpm01*/

      PF0HM002.PF0HMCSQ = "Y";
                                   /* trigger scrn 4 display next converse*/
    else
      if (PFFREC.PFFPRTYP == "3")

        PF0H830(); /* scrn 3 format from vrptpm01*/

        PF0HM003.PF0HMCSQ = "Y";
                                   /* trigger scrn 4 dsply next converse*/
      else
        PF0HW01.PFFPRTYP = "1"; /* select screen 1*/
        set PF0HM001.PF0HMDEL skip; /* set delete fields visible*/
        set PF0HM001.PF0HMDLT normal;
        converseLib.validationFailed(228); /* invalid data on file*/
        PFWREC.PFWERRF = "Y";
      end
    end
  end
end // end PF0H143

// scrn 1 delete rptpm & sumat
Function PF0H150()
   /* -----------------------------------------------------------;*/
     /* Verify no fields changed except delete indicator.       ;*/
   /* -----------------------------------------------------------;*/

  PF0H191(); /* scrn 1 data entry check*/

  if (PF0HM001.PFESRCNM is modified)
    set PF0HM001.PFESRCNM cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.PFESUMNM is modified)
    set PF0HM001.PFESUMNM cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.PFWERRF == "Y")
    PF0HW01.PF0HWDCF = "N"; /* delete confirm msg issued flag*/
    set PF0HM001.PF0HMDEL skip; /* set delete fields visible*/
    set PF0HM001.PF0HMDLT normal;
    converseLib.validationFailed(203); /* do not enter values when deleting a*/
                                   /* print param*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Issue delete confirmation message if not already done.  ;*/
   /* -----------------------------------------------------------;*/

  PF0HM001.PF0HMDLT = " "; /* user must reenter 'd' code*/

  if (PF0HW01.PF0HWDCF == "N") /* delete confirm msg issued flag*/
    PF0HW01.PF0HWDCF = "Y"; /* delete confirm msg issued flag*/
    set PF0HM001.PF0HMDEL skip; /* set delete fields visible*/
    set PF0HM001.PF0HMDLT cursor, bold;
    converseLib.validationFailed(122); /* delete requested; re-enter 'd' to confirm*/
    return;
  end

  PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/


   /* -----------------------------------------------------------;*/
     /* Delete rptpm row for print request or new summary       ;*/
     /* request.                                                ;*/
   /* -----------------------------------------------------------;*/

   /* key is already in pffrec from the select*/

  PF0H915(); /* vrptpm01 delete*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end

  converseLib.validationFailed(204); /* print parameter deleted*/


   /* -----------------------------------------------------------;*/
     /* Delete sumat row if this is a new summary request.      ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "4")
    PFEREC.PFESUMNM = PF0HM001.PFESUMNM;

    PF0H923(); /* vsumat01 delete*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end

  converseLib.validationFailed(275); /* summary request deleted*/
end // end PF0H150

// scrn 1 print (typ 1) display
Function PF0H160()
   /* -----------------------------------------------------------;*/
     /* Verify no fields changed except the summary name.       ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PF0HMDLT is modified)
    set PF0HM001.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H191(); /* scrn 1 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(73); /* do not enter values when changing summary name*/
  end


   /* -----------------------------------------------------------;*/
     /* If no errors were found, re-initialize the screen.      ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "N")
    PF0HW01.PFESUMNM = PF0HM001.PFESUMNM; /* save summary name*/
    set PF0HM001 initial; /* clear map*/
    PF0HM001.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved sum name*/
    PF0HM001.XXXCURDT = VGVar.currentShortGregorianDate;
    PF0HM001.PF0HMSNM = "   PRINT ALL OR SELECTED LOGICAL PAGES";
  end

   /* -----------------------------------------------------------;*/
     /* Select the summary attribute row for the summary name.  ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PFESUMNM != " ")
    PFEREC.PFESUMNM = PF0HM001.PFESUMNM;

    PF0H921(); /* vsumat01 select unique*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0HM001.PFESUMNM cursor, bold;
      converseLib.validationFailed(62); /* summary name is not on file*/
      PFWREC.PFWERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* if i/o unsuccessful*/
        return;
      else
        PF0HM001.PF0HMDSC = PFEREC.PFESUMDE;
        PF0HM001.PF0HMPRY = PFEREC.PFEPRIND; /* cvo 9/15/90*/
        PF0HM001.PFECYCIN = PFEREC.PFECYCIN;
      end
    end
  end


   /* -----------------------------------------------------------;*/
     /* Issue an error message if the summary name was not      ;*/
     /* entered.                                                ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PFESUMNM == " ")
    set PF0HM001.PFESUMNM cursor, bold;
    converseLib.validationFailed(35); /* please enter summary name*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* If any errors have occured above, return.               ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Select report attribute row.                            ;*/
   /* -----------------------------------------------------------;*/

  PFDREC.PFDREF = PFEREC.PFDREF;
                                   /* report attribute reference nbr*/

  PF0H941(); /* vrptat01 select unique*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Set up default screen values.                           ;*/
   /* -----------------------------------------------------------;*/

  PF0HM001.PFESRCNM = " "; /* (dark field) source summary name*/
  PF0HM001.PFESUMDE = " "; /* (dark field) source summar*/
  PF0HM001.PFELGCPG = PFEREC.PFELGCPG; /* logical pages*/
  PF0HM001.XXXUNTXT = " "; /* route to user name*/
  PF0HM001.PF0HMCSQ = "N"; /* change sequence indicator*/
  PF0HM001.XROCD = PF0HW01.PF0HWDPR; /* default printer for this term*/
  if (PF0HW01.PF0HWDPR in XROTBL.XROCD)
    PF0HM001.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex]; /* printer abreviation*/
  else
    PF0HM001.XROABRV = " "; /* printer abreviation*/
  end
  PF0HM001.XXXNDTXT = " "; /* route to nike department*/
  PF0HM001.XXXNBRCY = 1; /* number of copies*/
  PF0HM001.XXXNLTXT = " "; /* route to nike location*/
  PF0HM001.PFFPRLVL = "D"; /* detail print level*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFDREC.PFICD[PFWSUB] != " ")
      PFIREC.PFICD = PFDREC.PFICD[PFWSUB];

      PF0H931(); /* vfield01 select unique*/

      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM001.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
    else
      PF0HM001.PFIDESC[PFWSUB] = " ";
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFDREC.PFICD[8] != " ")
    PFIREC.PFICD = PFDREC.PFICD[8];

    PF0H931(); /* vfield01 select unique*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PF0HM001.PF0HMPRD = PFIREC.PFIDESC;
  else
    PF0HM001.PF0HMPRD = " ";
  end

  PF0HM001.PFFPRFRS = 0; /* print first occurance*/
  PF0HM001.PF0HMDLT = " "; /* (dark field) delete indicator*/

  PF0HW01.PFESRTEL = PFEREC.PFESRTEL;
  PF0HW01.YISCD = PFEREC.YISCD;
  PF0HW01.PFBISGRP = PFEREC.PFBISGRP;
  PF0HW01.PFESEIND = PFEREC.PFESEIND;
  PF0HW01.PFESQCOL = PFEREC.PFESQCOL;
end // end PF0H160

// scrn 1 new sum (typ 4) display
Function PF0H170()
   /* -----------------------------------------------------------;*/
     /* Verify no fields changed except summary name or source  ;*/
     /* summary name.                                           ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PF0HMDLT is modified)
    set PF0HM001.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H191(); /* scrn 1 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(73); /* do not enter vals when chging sum or*/
                                   /* src sum nm*/
  end


   /* -----------------------------------------------------------;*/
     /* If no errors were found, re-initialize the screen.      ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "N")
    PF0HW01.PFESUMNM = PF0HM001.PFESUMNM; /* save summary name*/
    PF0HW01.PFESRCNM = PF0HM001.PFESRCNM; /* save source summary name*/
    set PF0HM001 initial; /* clear map*/
    PF0HM001.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved sum name*/
    PF0HM001.PFESRCNM = PF0HW01.PFESRCNM;
                                   /* replace saved srce sum nm*/
    PF0HM001.XXXCURDT = VGVar.currentShortGregorianDate;
    PF0HM001.PF0HMSNM = "CREATE A SUMMARY FROM A SELECTED SUMMARY";
  end


   /* -----------------------------------------------------------;*/
     /* Select the NEW summary row first and the SOURCE         ;*/
     /* summary row second.  This order of selecting the two    ;*/
     /* rows will leave the PFEREC i/o record containing the    ;*/
     /* row for SOURCE summary name after both selects are      ;*/
     /* complete.  This is the row needed for further           ;*/
     /* processing.                                             ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
     /* Attempt to select the summary attribute row for the     ;*/
     /* NEW summary name.  It should not exist.  If it does     ;*/
     /* exist set the new sum name error flag to 'y'.  It is    ;*/
     /* used to issue the error message after the SOURCE        ;*/
     /* summary name editing is complete.                       ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PF0HWSEF = "N"; /* initialize NEW summary name error*/
                                   /* flag*/
  if (PF0HM001.PFESUMNM != " ") /* if NEW summary name was entered*/
    PFEREC.PFESUMNM = PF0HM001.PFESUMNM; /* use NEW sum name as key*/

    PF0H921(); /* vsumat01 select unique*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
      PF0HW01.PF0HWSEF = "Y"; /* set NEW sum name error flag*/
      PFWREC.PFWERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
         /* this is okay*/
      else
        return;
      end
    end
  end


   /* -----------------------------------------------------------;*/
     /* Select the summary attribute row for the SOURCE summary ;*/
     /* name.  It should exist.                                 ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PFESRCNM != " ") /* if SOURCE summary name was entered*/
    PFEREC.PFESUMNM = PF0HM001.PFESRCNM;
                                   /* use SOURCE sum name as key*/

    PF0H921(); /* vsumat01 select unique*/

    if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
      PF0HM001.PF0HMDSC = PFEREC.PFESUMDE;
       /* this is okay*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
        set PF0HM001.PFESRCNM cursor, bold;
        converseLib.validationFailed(262); /* source summary name is not on file*/
        PFWREC.PFWERRF = "Y";
      else
        return;
      end
    end
  end


   /* At this point, PFEREC contains the SOURCE summary*/
   /* row, if the SOURCE summary name was not blank and*/
   /* and the select above was successful.*/


   /* -----------------------------------------------------------;*/
     /* If the source summary name of the SOURCE summary is     ;*/
     /* not blank, the user is trying to create a summary from  ;*/
     /* a summary that was created from yet another summary.    ;*/
     /* This is invalid.                                        ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PFESRCNM != " "  /* if SOURCE summary name was entered*/
   && SQLCA.VAGen_SQLCODE == +0 /* and SOURCE summary was found above*/
   && PFEREC.PFESRCNM != " ")   /* and IT'S source name is not blank*/
    set PF0HM001.PFESRCNM cursor, bold;
    converseLib.validationFailed(277); /* src sum invalid; src sum created from*/
                                   /* another sum*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* Issue error message if SOURCE summary name was not      ;*/
     /* entered at all.                                         ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PFESRCNM == " ")
    set PF0HM001.PFESRCNM cursor, bold;
    converseLib.validationFailed(261); /* please enter source summary name*/
    PFWREC.PFWERRF = "Y";
  end


   /* SOURCE summary name is editing is complete at this point.*/


   /* -----------------------------------------------------------;*/
     /* If the NEW summary name already exists, this error      ;*/
     /* was determined above but the error message was not      ;*/
     /* issued.  The error message is issued at this point      ;*/
     /* so it will override any errors issued above for the     ;*/
     /* SOURCE summary name.  This is because the NEW summary   ;*/
     /* name appears on the screen BEFORE the SOURCE summary    ;*/
     /* name.                                                   ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PF0HWSEF == "Y")
                                   /* if NEW summary name error flag is 'y'*/
    set PF0HM001.PFESUMNM cursor, bold;
    converseLib.validationFailed(193); /* summary name entered already exists*/
  end


   /* -----------------------------------------------------------;*/
     /* Issue error message if NEW summary name was not         ;*/
     /* entered at all.                                         ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PFESUMNM == " ")
    set PF0HM001.PFESUMNM cursor, bold;
    converseLib.validationFailed(35); /* please enter summary name*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* Issue an error message if both the NEW summary name     ;*/
     /* and the SOURCE summary name were left blank.            ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PFESUMNM == " "
   && PF0HM001.PFESRCNM == " ")
    set PF0HM001.PFESRCNM cursor, bold;
    set PF0HM001.PFESUMNM cursor, bold;
    converseLib.validationFailed(283); /* must enter both sum name and source sum name*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* If any errors have occurred above, return.              ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* Editing of the both summary names is complete at*/
   /* this point.*/


   /* -----------------------------------------------------------;*/
     /* Select the report attribute row for the SOURCE summary. ;*/
   /* -----------------------------------------------------------;*/

  PFDREC.PFDREF = PFEREC.PFDREF;
                                   /* report attribute reference nbr*/

  PF0H941(); /* vrptat01 select unique*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Set up default screen values.                           ;*/
   /* -----------------------------------------------------------;*/

  PF0HM001.PFESUMDE = PFEREC.PFESUMDE; /* source summary description*/
   /* MOVE ' ' TO PF0HM001.PF0HMDSC   ; new summary description*/
  PF0HM001.PF0HMPRY = "2"; /* overnight priority*/
  PF0HM001.PFELGCPG = PFEREC.PFELGCPG; /* logical pages*/
  PF0HM001.XXXUNTXT = " "; /* (dark field) route to user name*/
  PF0HM001.PF0HMCSQ = "N"; /* change sequence indicator*/
  PF0HM001.XROCD = " "; /* (dark field) printer*/
  PF0HM001.XROABRV = " "; /* (dark field) printer abreviation*/
  PF0HM001.XXXNDTXT = " ";
                                   /* (dark field) route to nike department*/
  PF0HM001.PFECYCIN = " "; /* (dark field) cycle indicator*/
  PF0HM001.XXXNBRCY = 0; /* (dark field) number of copies*/
  PF0HM001.XXXNLTXT = " "; /* (dark field) route to nike location*/
  PF0HM001.PFFPRLVL = " "; /* (dark field) summary print level*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFDREC.PFICD[PFWSUB] != " ")
      PFIREC.PFICD = PFDREC.PFICD[PFWSUB];

      PF0H931(); /* vfield01 select unique*/

      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM001.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
    else
      PF0HM001.PFIDESC[PFWSUB] = " ";
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFDREC.PFICD[8] != " ")
    PFIREC.PFICD = PFDREC.PFICD[8];

    PF0H931(); /* vfield01 select unique*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PF0HM001.PF0HMPRD = PFIREC.PFIDESC;
  else
    PF0HM001.PF0HMPRD = " ";
  end

  PF0HM001.PFFPRFRS = 0; /* (dark field) print first occurance*/
  PF0HM001.PF0HMDLT = " "; /* (dark field) delete indicator*/

  PF0HW01.PFESRTEL = PFEREC.PFESRTEL;
  PF0HW01.YISCD = PFEREC.YISCD;
  PF0HW01.PFBISGRP = PFEREC.PFBISGRP;
  PF0HW01.PFESEIND = PFEREC.PFESEIND;
  PF0HW01.PFESQCOL = PFEREC.PFESQCOL;
end // end PF0H170

// scrn 1 process displayed scrn
Function PF0H180()
   /* -----------------------------------------------------------;*/
     /* Edit all fields on the screen.                          ;*/
   /* -----------------------------------------------------------;*/

  PF0H181(); /* scrn 1 edit*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Converse the change sort sequencing screen (scrn 4)     ;*/
     /* if the flag on this screen is 'y'.  Continue conversing ;*/
     /* the screen until the exit flag is 'y'.                  ;*/
       /* If the exit flag is 'y' and there is an error, ezertn ;*/
     /* immediately.  If the exit flag is 'y' but there is no   ;*/
     /* error, check for duplicates (if PFFPRTYP eq '1')        ;*/
     /* before doing an ezertn.                                 ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PFESUMNM = PF0HM001.PFESUMNM; /* save summary name*/
  PF0HW01.PFESRCNM = PF0HM001.PFESRCNM; /* save source summary name*/
  PF0HW01.PF0HWDSC = PF0HM001.PF0HMDSC; /* save prt or new sum desc*/

  PFWREC.PFWEXT = "N"; /* set scrn 4 exit flag*/
  if (PF0HM001.PF0HMCSQ == "Y")
    PF0HM004.PFESUMNM = " "; /* signals scrn 4 to init from pf0hw01*/
    while (PFWREC.PFWEXT == "N") /* while scrn 4 exit flag is no*/

      PF0H400(); /* scrn 4 converse*/

    end
    PF0HM001.PF0HMCSQ = "N";
     /* if there is an error, ezertn now, else wait*/
     /* to ezertn until after checking for duplicates*/
    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* If we are creating a print parameter, check if a        ;*/
     /* identical parameter already exists.                     ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "1")

    PF0H183(); /* scrn 1 duplicate print check*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* If screen 4 exit flag is 'y', we just returned from     ;*/
     /* screen 4.  Perform an ezertn so the original screen     ;*/
     /* will be conversed again before the report parameter     ;*/
     /* is created.                                             ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWEXT == "Y") /* if scrn 4 exit flag is yes*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* If user pushed edit key display confirmation message.   ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf12 /* if edit pfkey pushed*/
   || PF0HW01.PF0HWP12 == "Y")     /* or ezeaid eq pf12 flag is yes*/
    PF0HW01.PF0HWP12 = "N"; /* reset ezeaid eq pf12 flag*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Add the print parameter or the new summary create       ;*/
     /* parameter and summary attribute.                        ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "1")

    PF0H185(); /* scrn 1 add print rptpm*/

  else

    PF0H186(); /* scrn 1 add sum rptpm & sumat*/

  end

  PFWREC.PFWRECF = "N"; /* reset records found flag*/
  PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
  PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
end // end PF0H180

// scrn 1 edit
Function PF0H181()
   /* -----------------------------------------------------------;*/
     /* Converse PF remote printer pop-up window, if requested. ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PF0HWP12 = "N"; /* ezeaid eq pf12 flag*/
  if (converseVar.eventKey is pf12) /* if ezeaid is pf12 set flag for later use be-*/
    PF0HW01.PF0HWP12 = "Y"; /* cause windows may change ezeaid*/
  end

  if (PF0HM001.XROCD != " "
   || PF0HM001.XROCD == "?")
    PF0HW01.PF0HWPR0 = PF0HM001.XROCD;
    PF0H187(); /* format printer id*/

    if (PF0HM001.XROCD != "?")
      if (PF0HW01.PF0HWMP1 <= "Z"
       || PF0HW01.PF0HWMP2 <= "Z"
       || PF0HW01.PF0HWMP3 <= "Z"
       || PF0HW01.PF0HWMP4 <= "Z")
        converseLib.validationFailed(61); /* not a valid printer id*/
        PFWREC.PFWERRF = "Y";
      else
        PF0HM001.XROCD = PF0HW01.PF0HWMPR;
      end
    end
  end

  if (PF0HM001.XROCD == "?")
    PF0HM001.XROCD = PF0HW01.PF0HWMPR;

    XPXX001(); /* initialize for window rtn*/

    XX0XW02.XX0XWHDR = "       PROFITABILITY PRINTERS";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/
      XPPF040(); /* converse pf xrotbl pop-up window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PF0HM001.XROCD = XROTBL.XROCD[XX0XWPIX]; /* save it*/
    else
      PF0HM001.XROCD = " ";
    end
     /* set pf0hm001 page is performed below*/
  end


   /* -----------------------------------------------------------;*/
     /* Move reporting attribute value and product screen       ;*/
     /* fields to working storage, process windows, edit        ;*/
     /* the fields, and move the fields back to the screen.     ;*/
   /* -----------------------------------------------------------;*/

  PF0H811(); /* scrn 1 move attr to pfwrec*/

  XPPF300(); /* window report attribute values*/

  converseLib.clearScreen();
  
                                   /* blank out screen before next converse*/

  if (PFWREC.PFWERRF == "N") /* (only severe errs are flagged in wind.)*/

    XPPF400(); /* edit entered attribute fields*/

  end

  PF0H812(); /* scrn 1 move attr from pfwrec*/


   /* -----------------------------------------------------------;*/
     /* Edit the remaining screen fields.                       ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM001.PF0HMDLT == "D"
   || PF0HM001.PF0HMDLT == " ")
     /* this is okay*/
  else
    set PF0HM001.PF0HMDLT cursor, bold;
    converseLib.validationFailed(205); /* must enter 'd' or blank in delete field*/
    PFWREC.PFWERRF = "Y";
  end

   /* note: PFFPRFRS (print first occurrence) requires no editing*/


   /* -----------------------------------------------------------;*/
     /* Edit the fields unique to the print selection.          ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "1") /* if print type selection is 'prt all*/
                                   /* or slctd'*/

    PF0H182(); /* scrn 1 edit print (typ 1) flds*/

  end


  if (PF0HW01.PFFPRTYP == "4") /* if typ eq '1', field already edited above*/
    if (PF0HM001.PF0HMCSQ == "Y"
     || PF0HM001.PF0HMCSQ == "N")
       /* this is okay*/
    else
      set PF0HM001.PF0HMCSQ cursor, bold;
      converseLib.validationFailed(264); /* change sort sequence must be 'y' or 'n'*/
      PFWREC.PFWERRF = "Y";
    end
  end


  if (PF0HM001.PF0HMPRY == "1" /* immediate priority*/
   || PF0HM001.PF0HMPRY == "2") /* overnight priority*/
     /* this is okay*/
  else
    set PF0HM001.PF0HMPRY cursor, bold;
    converseLib.validationFailed(102); /* priority must '1'(immediate) or '2'(overnight)*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM001.PF0HMPRY != "2" /* if the param is not overnight*/
   /* priority*/
   && PFEREC.PFECRTDT == 0     /* and summary has not been created yet*/
   && PFEREC.PFEPRIND == "2")  /* and summary has overnight priority*/
    set PF0HM001.PF0HMPRY cursor, bold;
    converseLib.validationFailed(278); /* sum pri is 2 & it's not created; p*/
                                   /* pri must be 2*/
    PFWREC.PFWERRF = "Y";
  end

   /* note: PF0HMDSC (print or new sum desc) requires no editing*/
end // end PF0H181

// scrn 1 edit print (typ 1) flds
Function PF0H182()
  if (PF0HM001.PFFPRLVL == "S" /* require summary,*/
   || PF0HM001.PFFPRLVL == "D" /* or detail,*/
   || PF0HM001.PFFPRLVL == "E") /* or exploded detail*/
     /* this is okay*/
  else
    set PF0HM001.PFFPRLVL cursor, bold;
    converseLib.validationFailed(57); /* print level must be 's'(sum),*/
                                   /* 'd'(det) or 'e'(exp)*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM001.XXXNLTXT == " ") /* require route to nike location*/
    set PF0HM001.XXXNLTXT cursor, bold;
    converseLib.validationFailed(279); /* route to location must be entered*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM001.XXXNBRCY == 0)
    set PF0HM001.XXXNBRCY cursor, bold;
    converseLib.validationFailed(59); /* please enter # of copies desired*/
    PFWREC.PFWERRF = "Y";
  else
    if (PF0HM001.XXXNBRCY > 25)
      set PF0HM001.XXXNBRCY cursor, bold;
      converseLib.validationFailed(60); /* maximum # of copies allowed is 25*/
      PFWREC.PFWERRF = "Y";
    end
  end

   /* ------------------------------------------------------------*/
   /* change processing cycles, 4/2/90, cvo  <=== begin*/
   /* ------------------------------------------------------------*/

  if (PFEREC.PFECYCIN == "F") /* if the summary's cycle is 'f'*/
    if (PF0HM001.PFECYCIN == "F"
     /* then param's cycle must be 'f' or 'o'*/
     || PF0HM001.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM001.PFECYCIN cursor, bold;
      converseLib.validationFailed(266); /* sum cyc is f; prt cyc mst be 'f' or 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "B") /* if the summary's cycle is 'b'*/
    if (PF0HM001.PFECYCIN == "B"
     /* then param's cycle must be 'b' or 'o'*/
     || PF0HM001.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM001.PFECYCIN cursor, bold;
      converseLib.validationFailed(267); /* sum cyc is b; prt cyc mst be 'b' or 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "P") /* if the summary's cycle is 'p'*/
    if (PF0HM001.PFECYCIN == "P"
     /* then param's cycle must be 'p' or 'o'*/
     || PF0HM001.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM001.PFECYCIN cursor, bold;
      converseLib.validationFailed(268); /* sum cycle is p; prt cycle must be 'p' or 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "W") /* if the summary's cycle is 'w'*/
    if (PF0HM001.PFECYCIN == "W"
     /* then param's cycle must be 'w' or 'o'*/
     || PF0HM001.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM001.PFECYCIN cursor, bold;
      converseLib.validationFailed(269); /* sum cycle is w; prt cycle must be w,q,or o*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "Q") /* if the summary's cycle is 'q'*/
    if (PF0HM001.PFECYCIN == "Q"
     /* then param's cycle must be 'q' or 'o'*/
     || PF0HM001.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM001.PFECYCIN cursor, bold;
      converseLib.validationFailed(345); /* sum cycle is q; prt cycle must be q,or o*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "O") /* if the summary's cycle is 'o'*/
    if (PF0HM001.PFECYCIN == "O") /* then param's cycle must be 'o' only*/
       /* this is okay*/
    else
      set PF0HM001.PFECYCIN cursor, bold;
      converseLib.validationFailed(270); /* sum cyc is o; prt cyc mst be o*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN != "F" /* if summary's cycle ne f,b,p,w,q,o*/
   && PFEREC.PFECYCIN != "B" 
   && PFEREC.PFECYCIN != "P" 
   && PFEREC.PFECYCIN != "W" 
   && PFEREC.PFECYCIN != "Q" 
   && PFEREC.PFECYCIN != "O")
    if (PF0HM001.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM001.PFECYCIN cursor, bold;
      converseLib.validationFailed(270); /* prt cycle must be 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end
   /* ------------------------------------------------------------*/
   /* change processing cycles, 4/2/90, cvo  <=== end*/
   /* ------------------------------------------------------------*/

  if (PF0HM001.XROCD == " ")
    PF0HM001.XROABRV = " ";
    set PF0HM001.XROCD cursor, bold;
    converseLib.validationFailed(58); /* please enter printer id*/
    PFWREC.PFWERRF = "Y";
  else
    if (PF0HM001.XROCD in XROTBL.XROCD) /* if in remote printer table*/
      if (XROTBL.XROPFFL[sysVar.arrayIndex] == "Y") /* if valid for profitablity*/
        PF0HM001.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
      else
        PF0HM001.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
        set PF0HM001.XROCD cursor, bold;
        converseLib.validationFailed(295); /* not a valid printer id for the*/
                                   /* profit. system*/
        PFWREC.PFWERRF = "Y";
      end
    else
      PF0HM001.XROABRV = " ";
      set PF0HM001.XROCD cursor, bold;
      converseLib.validationFailed(61); /* not a valid printer id*/
      PFWREC.PFWERRF = "Y";
    end
  end


  if (PF0HM001.PF0HMCSQ == "Y"
   || PF0HM001.PF0HMCSQ == "N")
     /* this is okay*/
  else
    set PF0HM001.PF0HMCSQ cursor, bold;
    converseLib.validationFailed(264); /* change sort sequence must be 'y' or 'n'*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0HM001.XXXUNTXT == " ")
    set PF0HM001.XXXUNTXT cursor, bold;
    converseLib.validationFailed(265); /* route to name must be entered*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0H182

// scrn 1 duplicate print check
Function PF0H183()
   /* -----------------------------------------------------------;*/
     /* Open a cursor containing all the print parameters       ;*/
     /* for this summary.  Select each print parameter and      ;*/
     /* check if it is identical to the print parameter being   ;*/
     /* created.  Do not allow duplicate print parameters.      ;*/
   /* -----------------------------------------------------------;*/

  PFFREC.PFESUMNM = PF0HM001.PFESUMNM;

  PF0H911(); /* vrptpm01 select scan*/

  if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
    return;
  end


   /* if this point is reached,*/
   /* the select scan was successful (sqlca.sqlcode eq 0)*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PFWREC.PFWERRF == "N")

    PF0H912(); /* vrptpm01 select next*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/

      PF0H184(); /* scrn 1 compare against rptpm*/

    end
  end

  PF0H913(); /* vrptpm01 close scan*/
end // end PF0H183

// scrn 1 compare against rptpm
Function PF0H184()
   /* -----------------------------------------------------------;*/
     /* As soon as a single field is found that differs,        ;*/
     /* return to the calling process.  This means the print    ;*/
     /* parameter being created is not a duplicate of this      ;*/
     /* existing parameter.  If all the fields are identical    ;*/
     /* except for the summary name (PFESUMNM), an error        ;*/
     /* message will be issued.                                 ;*/
   /* -----------------------------------------------------------;*/

   /* PFESUMNM will always differ*/
   /* PFANXTNO not a screen field*/

  if (PFFREC.PFFRPTDS != PF0HM001.PF0HMDSC
   || PFFREC.PFFPRLVL != PF0HM001.PFFPRLVL
   || PFFREC.XROCD != PF0HM001.XROCD
   /* PFFDTFMI not a screen field*/
   || PFFREC.PFFPRTYP != "1"
   || PFFREC.XXXNBRCY != PF0HM001.XXXNBRCY
   || PFFREC.PFFPRTYI != PF0HM001.PF0HMPRY
   || PFFREC.PFFPRFRS != PF0HM001.PFFPRFRS
   || PFFREC.PFECYCIN != PF0HM001.PFECYCIN)
    return;
  end

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
     /* PFFFMCH not on this screen*/
    if (PFFREC.PFICD[PFWSUB] != PFDREC.PFICD[PFWSUB]
     || PFFREC.PFDCDVAL[PFWSUB] != PF0HM001.PFDCDVAL[PFWSUB])
      return;
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFFREC.PFICD[8] != PFDREC.PFICD[8])
    return;
  end

  if (PFFREC.XGPCD != PF0HM001.XGPCD
   || PFFREC.SY1STNBR != PF0HM001.SY1STNBR
   || PFFREC.SY2CLRID != PF0HM001.SY2CLRID
   || PFFREC.XDMCD != PF0HM001.XDMCD
   || PFFREC.XQACD != PF0HM001.XQACD
   || PFFREC.XLCCD != PF0HM001.XLCCD)
    return;
  end

  if (PFFREC.PFESRTEL != PF0HW01.PFESRTEL
   || PFFREC.YISCD != PF0HW01.YISCD
   || PFFREC.PFBISGRP != PF0HW01.PFBISGRP
   || PFFREC.PFESEIND != PF0HW01.PFESEIND
   || PFFREC.PFESQCOL != PF0HW01.PFESQCOL)
    return;
  end

   /* XXXUSRID not a screen field*/

  if (PFFREC.XXXUNTXT != PF0HM001.XXXUNTXT
   || PFFREC.XXXNLTXT != PF0HM001.XXXNLTXT
   || PFFREC.XXXNDTXT != PF0HM001.XXXNDTXT)
    return;
  end

   /* ZZZSDT, ZZZCHGDT, ZZZCHGTM, and ZZZCHGCT not screen fields*/

   /* if this point is reached then the row and the screen are*/
   /* identical (except for the summary name).  This is an*/
   /* error.*/

  set PF0HM001.PFESUMNM cursor, bold;
  converseLib.validationFailed(217); /* identical print parameter already exists*/
  PFWREC.PFWERRF = "Y";
end // end PF0H184

// scrn 1 add print rptpm
Function PF0H185()
   /* -----------------------------------------------------------;*/
     /* Select vpfctl01 to get the next sequence nbr (PFANXTNO) ;*/
   /* -----------------------------------------------------------;*/

  PF0H971(); /* vpfctl01 select unique*/

  if (PFWREC.PFWERRF == "Y") /* if db access unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Move screen to PFFREC.                                  ;*/
   /* -----------------------------------------------------------;*/

  set PFFREC empty;
  PFFREC.PFESUMNM = PF0HM001.PFESUMNM;
  PFFREC.PFANXTNO = PFAREC.PFANXTNO;
  PFFREC.PFFRPTDS = PF0HM001.PF0HMDSC;
  PFFREC.PFFPRLVL = PF0HM001.PFFPRLVL;
  PFFREC.XROCD = PF0HM001.XROCD;
  PFFREC.PFFDTFMI = " ";
  PFFREC.PFFPRTYP = "1"; /* print all or selected levels*/
  PFFREC.XXXNBRCY = PF0HM001.XXXNBRCY;
  PFFREC.PFFPRTYI = PF0HM001.PF0HMPRY;
  PFFREC.PFFPRFRS = PF0HM001.PFFPRFRS;
  PFFREC.PFECYCIN = PF0HM001.PFECYCIN;

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PFFREC.PFFFMCH[PFWSUB] = " ";
    PFFREC.PFICD[PFWSUB] = PFDREC.PFICD[PFWSUB];
    PFFREC.PFDCDVAL[PFWSUB] = PF0HM001.PFDCDVAL[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PFFREC.PFFFMCH[8] = " ";
  PFFREC.PFICD[8] = PFDREC.PFICD[8];
  PFFREC.PFDCDVAL[8] = " ";

  PFFREC.XGPCD = PF0HM001.XGPCD;
  PFFREC.SY1STNBR = PF0HM001.SY1STNBR;
  PFFREC.SY2CLRID = PF0HM001.SY2CLRID;
  PFFREC.XDMCD = PF0HM001.XDMCD;
  PFFREC.XQACD = PF0HM001.XQACD;
  PFFREC.XLCCD = PF0HM001.XLCCD;

  PFFREC.PFESRTEL = PF0HW01.PFESRTEL;
  PFFREC.YISCD = PF0HW01.YISCD;
  PFFREC.PFBISGRP = PF0HW01.PFBISGRP;
  PFFREC.PFESEIND = PF0HW01.PFESEIND;
  PFFREC.PFESQCOL = PF0HW01.PFESQCOL;

  PFFREC.XXXUNTXT = PF0HM001.XXXUNTXT;
  PFFREC.XXXNLTXT = PF0HM001.XXXNLTXT;
  PFFREC.XXXNDTXT = PF0HM001.XXXNDTXT;


   /* -----------------------------------------------------------;*/
     /* Add print parameter.                                    ;*/
   /* -----------------------------------------------------------;*/

  PF0H914(); /* vrptpm01 add*/

  if (PFWREC.PFWERRF == "Y") /* if db insert unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Update vpfctl01 to increment next sequence nbr          ;*/
     /* (PFANXTNO).                                             ;*/
   /* -----------------------------------------------------------;*/

  PF0H972(); /* vpfctl01 update 2*/

  if (PFWREC.PFWERRF == "Y") /* if db update unsuccessful*/
    return;
  end

  converseLib.validationFailed(207); /* print parameter created*/
end // end PF0H185

// scrn 1 add sum rptpm & sumat
Function PF0H186()
   /* -----------------------------------------------------------;*/
     /* Select vpfctl01 to get the next sequence nbr (PFANXTNO) ;*/
   /* -----------------------------------------------------------;*/

  PF0H971(); /* vpfctl01 select unique*/

  if (PFWREC.PFWERRF == "Y") /* if db access unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Move screen to PFFREC.                                  ;*/
   /* -----------------------------------------------------------;*/

  set PFFREC empty;
  PFFREC.PFESUMNM = PF0HM001.PFESUMNM;
  PFFREC.PFANXTNO = PFAREC.PFANXTNO;
  PFFREC.PFFRPTDS = " ";
  PFFREC.PFFPRLVL = "E"; /* 'expanded' print level*/
  PFFREC.XROCD = " ";
  PFFREC.PFFDTFMI = " ";
  PFFREC.PFFPRTYP = "4"; /* create a summary from a selected summary*/
  PFFREC.XXXNBRCY = 0;
  PFFREC.PFFPRTYI = PF0HM001.PF0HMPRY; /* same pri on pffrec and pferec*/
  PFFREC.PFFPRFRS = 0;
  PFFREC.PFECYCIN = "O"; /* 'on request' cycle indicator*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PFFREC.PFFFMCH[PFWSUB] = " ";
    PFFREC.PFICD[PFWSUB] = PFDREC.PFICD[PFWSUB];
    PFFREC.PFDCDVAL[PFWSUB] = PF0HM001.PFDCDVAL[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PFFREC.PFFFMCH[8] = " ";
  PFFREC.PFICD[8] = PFDREC.PFICD[8];
  PFFREC.PFDCDVAL[8] = " ";

  PFFREC.XGPCD = PF0HM001.XGPCD;
  PFFREC.SY1STNBR = PF0HM001.SY1STNBR;
  PFFREC.SY2CLRID = PF0HM001.SY2CLRID;
  PFFREC.XDMCD = PF0HM001.XDMCD;
  PFFREC.XQACD = PF0HM001.XQACD;
  PFFREC.XLCCD = PF0HM001.XLCCD;

  PFFREC.PFESRTEL = PF0HW01.PFESRTEL;
  PFFREC.YISCD = PF0HW01.YISCD;
  PFFREC.PFBISGRP = PF0HW01.PFBISGRP;
  PFFREC.PFESEIND = PF0HW01.PFESEIND;
  PFFREC.PFESQCOL = PF0HW01.PFESQCOL;

  PFFREC.XXXUNTXT = " ";
  PFFREC.XXXNLTXT = " ";
  PFFREC.XXXNDTXT = " ";


   /* -----------------------------------------------------------;*/
     /* Add new summary report parameter.                       ;*/
   /* -----------------------------------------------------------;*/

  PF0H914(); /* vrptpm01 add*/

  if (PFWREC.PFWERRF == "Y") /* if db insert unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Update vpfctl01 to increment next sequence nbr          ;*/
     /* (PFANXTNO).                                             ;*/
   /* -----------------------------------------------------------;*/

  PF0H972(); /* vpfctl01 update 2*/

  if (PFWREC.PFWERRF == "Y") /* if db update unsuccessful*/
    return;
  end

   /* -----------------------------------------------------------;*/
     /* create the new summary attribute record (pferec).       ;*/
     /* pferec currently contains the row for the source        ;*/
     /* summary.  Use the existing values in some of the fields ;*/
     /* and change only those fields needed to make it a row    ;*/
     /* for the new summary.                                    ;*/
   /* -----------------------------------------------------------;*/

  PFEREC.PFESRCNM = PFEREC.PFESUMNM; /* move sum nm to source sum nm*/
  PFEREC.PFESUMNM = PF0HM001.PFESUMNM; /* overlay the old sum nm*/
  PFEREC.PFESUMDE = PF0HM001.PF0HMDSC;
  PFEREC.PFGSUMN = 0;
  PFEREC.PFEPRIND = PF0HM001.PF0HMPRY; /* same pri on pffrec and pferec*/

  PFEREC.PFESRTEL = PF0HW01.PFESRTEL;
  PFEREC.YISCD = PF0HW01.YISCD;
  PFEREC.PFBISGRP = PF0HW01.PFBISGRP;
  PFEREC.PFESEIND = PF0HW01.PFESEIND;
  PFEREC.PFESQCOL = PF0HW01.PFESQCOL;

  PFEREC.PFECRTDT = 0;
  PFEREC.PFECYCIN = "O"; /* 'on-request' cycle indicator*/
  PFEREC.PFESTIND = " "; /* 'set up but not in process yet'*/
                                   /* status*/
  PFEREC.PFELGCPG = 0;


   /* -----------------------------------------------------------;*/
     /* Add new summary attribute.                              ;*/
   /* -----------------------------------------------------------;*/

  PF0H922(); /* vsumat01 add*/

  if (PFWREC.PFWERRF == "Y") /* if db insert unsuccessful*/
    return;
  end

  converseLib.validationFailed(271); /* summary request created*/
end // end PF0H186

// format scr. printer id
Function PF0H187()
  PF0HW01.PF0HWMPR = "0000";

  if (PF0HW01.PF0HWPR5 != " ")
    PF0HW01.PF0HWMP4 = PF0HW01.PF0HWPR5;
    PF0HW01.PF0HWMP3 = PF0HW01.PF0HWPR4;
    PF0HW01.PF0HWMP2 = PF0HW01.PF0HWPR3;
    PF0HW01.PF0HWMP1 = PF0HW01.PF0HWPR2;
  else
    if (PF0HW01.PF0HWPR4 != " ")
      PF0HW01.PF0HWMP4 = PF0HW01.PF0HWPR4;
      PF0HW01.PF0HWMP3 = PF0HW01.PF0HWPR3;
      PF0HW01.PF0HWMP2 = PF0HW01.PF0HWPR2;
    else
      if (PF0HW01.PF0HWPR3 != " ")
        PF0HW01.PF0HWMP4 = PF0HW01.PF0HWPR3;
        PF0HW01.PF0HWMP3 = PF0HW01.PF0HWPR2;
      else
        if (PF0HW01.PF0HWPR2 != " ")
          PF0HW01.PF0HWMP4 = PF0HW01.PF0HWPR2;
        end
      end
    end
  end

end // end PF0H187

// scrn 1 data entry check
Function PF0H191()
   /* -----------------------------------------------------------;*/
    /* Check all screen fields except sum name, source sum nm,  ;*/
    /* & delete for data entry.  Highlight, set the cursor, and ;*/
    /* set the error flag for every field that has changed.     ;*/
   /* -----------------------------------------------------------;*/

   /* note that PF0HM001.PF0HMDLT is not tested in this process*/

  if (PF0HM001.PFFPRFRS is modified)
    set PF0HM001.PFFPRFRS cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.XLCCD is modified)
    set PF0HM001.XLCCD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.XQACD is modified)
    set PF0HM001.XQACD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.XDMCD is modified)
    set PF0HM001.XDMCD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.SY2CLRID is modified)
    set PF0HM001.SY2CLRID cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.SY1STNBR is modified)
    set PF0HM001.SY1STNBR cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.XGPCD is modified)
    set PF0HM001.XGPCD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PFWREC.PFWSUB = 7;
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM001.PFDCDVAL[PFWSUB] is modified)
      set PF0HM001.PFDCDVAL[PFWSUB] cursor, bold;
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end

  if (PF0HM001.PFFPRLVL is modified)
    set PF0HM001.PFFPRLVL cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.XXXNLTXT is modified)
    set PF0HM001.XXXNLTXT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.XXXNBRCY is modified)
    set PF0HM001.XXXNBRCY cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.PFECYCIN is modified)
    set PF0HM001.PFECYCIN cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.XXXNDTXT is modified)
    set PF0HM001.XXXNDTXT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.XROCD is modified)
    set PF0HM001.XROCD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.PF0HMCSQ is modified)
    set PF0HM001.PF0HMCSQ cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.XXXUNTXT is modified)
    set PF0HM001.XXXUNTXT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.PF0HMPRY is modified)
    set PF0HM001.PF0HMPRY cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM001.PF0HMDSC is modified)
    set PF0HM001.PF0HMDSC cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

   /* note that PF0HM001.PFESRCNM is not tested in this process*/
   /* note that PF0HM001.PFESUMNM is not tested in this process*/
end // end PF0H191

// scrn 2 converse
Function PF0H200()
   /* -----------------------------------------------------------;*/
     /* Converse screen 2:                                      ;*/
       /* 'PRINT SPECIFIC LEVELS' screen, or                    ;*/
       /* 'CREATE A SUMMARY FROM SPECIFIC LEVELS' screen        ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
     /* Set screen attributes.                                  ;*/
   /* -----------------------------------------------------------;*/

  PF0H210(); /* scrn 2 set scrn attributes*/

  PF1REC.PF1EZEMN = converseVar.validationMsgNum; /* save msg for possible bridge*/

  if (PFWREC.PFWMSG != " ")
    PF0HM002.VAGen_EZEMSG = PFWREC.PFWMSG;
  end

  if (PF1REC.PF1XFERF == "Y")
    if (PF0HW01.PFFPRTYP == "2")
      PF0HM002.PFESUMNM = PF1REC.PF1NAM;
      PFFREC.PFESUMNM = PF1REC.PF1NAM;
      PFFREC.PFANXTNO = PF1REC.PF1ANX;
    else
      PF0HM002.PFESRCNM = PF1REC.PF1NAM;
      PFFREC.PFESUMNM = PF1REC.PF1NAM;
      PFFREC.PFANXTNO = PF1REC.PF1ANX;
    end
    PF0H999();
    PF0HM002.PF0HMDSC = PFFREC.PFFRPTDS; /* cvo 9/15/90*/
    PF0HM002.PF0HMPRY = PFFREC.PFFPRTYI;
    PF0HM002.PFECYCIN = PFFREC.PFECYCIN;
    PF0HM002.XXXUNTXT = PFFREC.XXXUNTXT;
    PF0HM002.XXXNLTXT = PFFREC.XXXNLTXT;
    PF0HM002.XXXNDTXT = PFFREC.XXXNDTXT;
    PF0HM002.XXXNBRCY = PFFREC.XXXNBRCY;
    PF0HM002.PFFPRLVL = PFFREC.PFFPRLVL;
    PF0HM002.PF0HMCSQ = "N";
    PF0HM002.XROCD = PFFREC.XROCD;
    if (PFFREC.XROCD in XROTBL.XROCD)
      PF0HM002.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
    else
      PF0HM002.XROABRV = " ";
    end

    PFEREC.PFESUMNM = PF1REC.PF1NAM;
    PF0H921();
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
     /* MOVE PFEREC.PFESUMDE TO PF0HM002.PF0HMDSC;    cvo 9/15/90*/
    PFDREC.PFDREF = PFEREC.PFDREF;
    PF0HM002.PFELGCPG = PFEREC.PFELGCPG;
    PF0H941();
    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PFWREC.PFWSUB = 1;
    while (PFWREC.PFWSUB <= 7)
      if (PFDREC.PFICD[PFWSUB] != " ")
        PFIREC.PFICD = PFDREC.PFICD[PFWSUB];
        PF0H931();
        if (PFWREC.PFWERRF == "Y")
          return;
        end
        PF0HM002.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
        PF0HM002.PFDCDVAL[PFWSUB] = PFFREC.PFDCDVAL[PFWSUB];
      else
        PF0HM002.PFIDESC[PFWSUB] = " ";
      end
      PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
    end
    if (PFDREC.PFICD[8] != " ")
      PFIREC.PFICD = PFDREC.PFICD[8];
      PF0H931();
      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM002.PF0HMPRD = PFIREC.PFIDESC;
      set PF0HM002.PFDCDVAL[8] skip;
      PF0HM002.PFDCDVAL[PFWSUB] = PFFREC.PFDCDVAL[8];
    else
      PF0HM002.PF0HMPRD = " ";
    end
  end

  if (PF1REC.PF1ORIG == "PF0P")
    PF0HM002.PF0HMPFK = "17:PRNT DIR";
    set PF0HM002.PF0HMPFK normal;
    set PF0HM002.PF0HMPFK skip;
  end

  if (PF1REC.PF1ORIG == "PF0P")
    PFWREC.PFWSUB = 1;
    while (PFWREC.PFWSUB <= 7)
      if (PF1REC.PFDCDVAL[PFWSUB] != " ")
        PF0HM002.PFDCDVAL[PFWSUB] = PF1REC.PFDCDVAL[PFWSUB];
        set PF0HM002.PFDCDVAL[PFWSUB] normal;
        set PF0HM002.PFDCDVAL[PFWSUB] skip;
      end
      PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
    end
  end

  converse PF0HM002 ;

  PFWREC.PFWERRF = "N"; /* reset error flag*/
  PFWREC.PFWMSG = " "; /* clear message line*/
  PF0HM002.VAGen_EZEMSG = " ";


   /* -----------------------------------------------------------;*/
     /* Reset flags if summary name or source summary name is   ;*/
     /* changed.                                                ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PFESUMNM is modified
   || PF0HM002.PFESRCNM is modified)
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
    PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
  end


   /* -----------------------------------------------------------;*/
     /* Check for fastpath, pf & pa keys.                       ;*/
   /* -----------------------------------------------------------;*/

  PF0H220(); /* scrn 2 fastpath, pf & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Check security.                                         ;*/
   /* -----------------------------------------------------------;*/

  PF0H870(); /* check add security*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* These 3 PF keys transfer the user to one of 3 other     ;*/
     /* PF applications.  Data is saved before the transfer,    ;*/
     /* allowing the user to return to the point at which he or ;*/
     /* she left.  Transfer occurs in the routine XPPF200.      ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf14 /* if bridge pf key pushed*/
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf16)

    PF0H230(); /* scrn 2 pfkey bridge out*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* The pf19 read next key displays all the existing        ;*/
     /* parameters for a summary, in the same order that they   ;*/
     /* were created.  It also displays a new field on the      ;*/
     /* screen, the delete field.  When the user stops pushing  ;*/
     /* pf19 and pushes enter instead, the delete field is      ;*/
     /* removed from the screen again.                          ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19) /* if read next pf key pushed*/

    PF0H240(); /* scrn 2 pf19 read next*/

     /* force screen re-initialization if not pf19 next time*/
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    return;
  else
    PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
  end


   /* -----------------------------------------------------------;*/
     /* Deletes can be requested only when the user is scaning  ;*/
     /* through the existing parameters using pf19.             ;*/
     /* For a print request, the rptpm row is deleted.  For a   ;*/
     /* new summary request, both the rptpm row and the sumat   ;*/
     /* row are deleted.                                        ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PF0HMDLT == "D") /* if user entered 'd' on screen*/

    PF0H250(); /* scrn 2 delete rptpm & sumat*/

    return;
  else
    PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
  end


   /* -----------------------------------------------------------;*/
       /* If the summary or source summary names are modified,  ;*/
     /* clear the screen and display the default values and     ;*/
     /* reporting attributes for the summary, using the         ;*/
     /* appropriate display process.                            ;*/
       /* Otherwise, process the displayed sum.  This includes  ;*/
     /* editing, possibly displaying the change sort screen     ;*/
     /* (scrn 4), checking for duplicates, and creating the     ;*/
     /* print rptpm or new summary rptpm and sumat.             ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PFESUMNM is modified /* if a new summary*/
   || PF0HM002.PFESRCNM is modified /* or a new source summary*/
   || PFWREC.PFWRECF == "N")        /* or records found flag is no*/
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    PFWREC.PFWEDTF = "Y"; /* reset edit attribute values flag*/
    if (PF0HW01.PFFPRTYP == "2")

      PF0H260(); /* scrn 2 print (typ 2) display*/

    else

      PF0H270(); /* scrn 2 new sum (typ 5) display*/

    end
    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PFWREC.PFWRECF = "Y"; /* set records found flag*/

  else /* else not a new sum or source sum*/

    PF0H280(); /* scrn 2 process displayed scrn*/

  end
end // end PF0H200

// scrn 2 set scrn attributes
Function PF0H210()
   /* ----------------------------------------------------------;*/
     /* Set screen attributes for the appropriate print type.  ;*/
     /* If the records found flag is 'n', protect all the      ;*/
     /* fields except for the summary name and source summary  ;*/
     /* name.  This flag will be 'n' when: the screen is first ;*/
     /* displayed as blank, the user changed the summary name  ;*/
     /* or source summary name to an invalid name, the user    ;*/
     /* is using PF19 to read through the existing parameters, ;*/
     /* or the user is deleting a parameter.                   ;*/
   /* ----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "2")
    PF0HM002.PF0HMSNM = "         PRINT SPECIFIC LEVELS";
    set PF0HM002.PF0HMSSL skip, invisible;
    set PF0HM002.PFESRCNM skip, invisible;
    set PF0HM002.PFESUMDE skip, invisible; /* source sum desc*/
    if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
      set PF0HM002.PF0HMDSC skip;
      set PF0HM002.PF0HMPRY skip;
      set PF0HM002.XXXUNTXT skip;
      set PF0HM002.PF0HMCSQ skip;
      set PF0HM002.XROCD skip;
      set PF0HM002.XXXNDTXT skip;
      set PF0HM002.PFECYCIN skip;
      set PF0HM002.XXXNBRCY skip;
      set PF0HM002.XXXNLTXT skip;
      set PF0HM002.PFFPRLVL skip;
    end
  else
    PF0HM002.PF0HMSNM = " CREATE A SUMMARY FROM SPECIFIC LEVELS";
    set PF0HM002.PF0HMRTL skip, invisible;
    set PF0HM002.PF0HMUNL skip, invisible;
    set PF0HM002.XXXUNTXT skip, invisible;
    set PF0HM002.PF0HMPRL skip, invisible;
    set PF0HM002.XROCD skip, invisible;
    set PF0HM002.XROABRV skip, invisible;
    set PF0HM002.PF0HMNDL skip, invisible;
    set PF0HM002.XXXNDTXT skip, invisible;
    set PF0HM002.PF0HMCYL skip, invisible;
    set PF0HM002.PFECYCIN skip, invisible;
    set PF0HM002.PF0HMCPL skip, invisible;
    set PF0HM002.XXXNBRCY skip, invisible;
    set PF0HM002.PF0HMNLL skip, invisible;
    set PF0HM002.XXXNLTXT skip, invisible;
    set PF0HM002.PF0HMPLL skip, invisible;
    set PF0HM002.PFFPRLVL skip, invisible;
    if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
      set PF0HM002.PF0HMDSC skip;
      set PF0HM002.PF0HMPRY skip;
      set PF0HM002.PF0HMCSQ skip;
    end
  end


   /* ----------------------------------------------------------;*/
     /* Protect all the value fields if the records found flag ;*/
     /* is 'n'.  Darken any value fields that don't have       ;*/
     /* attributes.                                            ;*/
   /* ----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
      set PF0HM002.PFDCDVAL[PFWSUB] skip; /* protect field*/
    end
    if (PF0HM002.PFIDESC[PFWSUB] == " ") /* if no attribute showing*/
      set PF0HM002.PFDCDVAL[PFWSUB] skip, invisible;
                                   /* protect & darken field*/
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end


   /* ----------------------------------------------------------;*/
     /* Set the product field attributes.                      ;*/
   /* ----------------------------------------------------------;*/

  if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
    set PF0HM002.PFDCDVAL[8] skip; /* protect field*/
  end

  if (PF0HM002.PF0HMPRD == " ") /* if product desc eq ' ' (no product at*/
                                   /* all)*/
    set PF0HM002.PFDCDVAL[8] skip, invisible; /* protect & darken field*/
  end
end // end PF0H210

// scrn 2 fastpath, pf & pa keys
Function PF0H220()
   /* -----------------------------------------------------------;*/
     /* Reset screen fields.                                    ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM002.PF0HMSNM initialAttributes;
  set PF0HM002.PFESUMNM initialAttributes;
  set PF0HM002.PF0HMSSL initialAttributes;
  set PF0HM002.PFESRCNM initialAttributes;
  set PF0HM002.PFESUMDE initialAttributes; /* source sum desc*/
  set PF0HM002.PF0HMDSC initialAttributes; /* prt param or new sum desc*/
  set PF0HM002.PF0HMRTL initialAttributes;
  set PF0HM002.PF0HMPRY initialAttributes;
  set PF0HM002.PFELGCPG initialAttributes;
  set PF0HM002.PF0HMUNL initialAttributes;
  set PF0HM002.XXXUNTXT initialAttributes;
  set PF0HM002.PF0HMCSQ initialAttributes;
  set PF0HM002.PF0HMPRL initialAttributes;
  set PF0HM002.XROCD initialAttributes;
  set PF0HM002.XROABRV initialAttributes;
  set PF0HM002.PF0HMNDL initialAttributes;
  set PF0HM002.XXXNDTXT initialAttributes;
  set PF0HM002.PF0HMCYL initialAttributes;
  set PF0HM002.PFECYCIN initialAttributes;
  set PF0HM002.PF0HMCPL initialAttributes;
  set PF0HM002.XXXNBRCY initialAttributes;
  set PF0HM002.PF0HMNLL initialAttributes;
  set PF0HM002.XXXNLTXT initialAttributes;
  set PF0HM002.PF0HMPLL initialAttributes;
  set PF0HM002.PFFPRLVL initialAttributes;

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    set PF0HM002.PFDCDVAL[PFWSUB] initialAttributes; /* attribute value*/
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  set PF0HM002.PFDCDVAL[8] initialAttributes; /* attribute value*/
  set PF0HM002.PF0HMDEL initialAttributes;
  set PF0HM002.PF0HMDLT initialAttributes;
  set PF0HM002.CATOAP initialAttributes;
  set PF0HM002.CAITEM initialAttributes;


   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on    ;*/
     /* the screen.  If other data has been entered, put cursor ;*/
     /* on the bad field and send an error message.  Do not     ;*/
     /* allow fastpath back into same application.              ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.CATOAP != " " /* if fastpath*/
   || PF0HM002.CAITEM != " ")
    if (PF0HM002.CATOAP == "PF0H") /* if fastpath into same appl*/
      set PF0HM002.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
       /* wait to set pfwerrf until after the following process*/
    end
    if (PF0HM002.PF0HMDLT is modified)
      set PF0HM002.PF0HMDLT cursor, bold;
      PFWREC.PFWERRF = "Y";
    end

    PF0H291(); /* scrn 2 data entry check*/

    if (PFWREC.PFWERRF == "Y") /* if an error occured*/
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
    end
    if (PF0HM002.CATOAP == "PF0H") /* if fastpath into same appl*/
      PFWREC.PFWERRF = "Y"; /* set error flag for msg 10 above*/
    end

    if (PF0HM002.PFESRCNM is modified)
      set PF0HM002.PFESRCNM cursor, bold;
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0HM002.PFESUMNM is modified)
      set PF0HM002.PFESUMNM cursor, bold;
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0HM002.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0HM002.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Check for PF and PA key entries.                        ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is enter)
      /* no action*/
  else

    PF0H880(); /* process PF & PA keys*/

    if (PF0HW01.PFFPRTYP != "2" /* if screen 2 no longer active*/
     && PF0HW01.PFFPRTYP != "5") /* and screen 5 no longer active*/
      PFWERRF = "Y";
      return; /* exit this routine*/
    end
  end
end // end PF0H220

// scrn 2 pfkey bridge out
Function PF0H230()
   /* -----------------------------------------------------------;*/
     /* Verify the summary name or the source summary name      ;*/
     /* have been entered.                                      ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "5")
    if (PF0HM002.PFESRCNM == " ")
      set PF0HM002.PFESRCNM cursor, bold;
      converseLib.validationFailed(276); /* pls enter source sum name along w/*/
                                   /* pf14,15 or 16*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  else
    if (PF0HM002.PFESUMNM == " ")
      set PF0HM002.PFESUMNM cursor, bold;
      converseLib.validationFailed(79); /* please enter sum name along with pf14,15 or 16*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Verify nothing is changed on the screen except the      ;*/
     /* summary name or the source summary name.                ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PF0HMDLT is modified)
    set PF0HM002.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H291(); /* scrn 2 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(216); /* do not enter values when using pf14, 15, or 16*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Select the summary or the source summary from the       ;*/
     /* database.                                               ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "5")
    PFEREC.PFESUMNM = PF0HM002.PFESRCNM;
  else
    PFEREC.PFESUMNM = PF0HM002.PFESUMNM;
  end

  PF0H921(); /* vsumat01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
    if (PF0HW01.PFFPRTYP == "5")
      set PF0HM002.PFESRCNM cursor, bold;
      converseLib.validationFailed(262); /* source summary name is not on file*/
    else
      set PF0HM002.PFESUMNM cursor, bold;
      converseLib.validationFailed(62); /* summary name is not on file*/
    end
    PFWREC.PFWERRF = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* if i/o unsuccessful*/
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Move the screen fields to the bridge record.            ;*/
   /* -----------------------------------------------------------;*/

  PF0H850(); /* scrn 2 bridge out PF1REC load*/


   /* -----------------------------------------------------------;*/
     /* These 5 PF1REC fields are used to store the ACTUAL      ;*/
     /* updateable scrn 4 fields.  They are initialized to      ;*/
     /* spaces and zeros because scrn 4 is not currently        ;*/
     /* active.                                                 ;*/
       /* There are also 5 different PF1REC fields that are     ;*/
     /* used to store the PF0HW01 working storage fields for    ;*/
     /* scrn 4.  These fields contain the 'default' sort        ;*/
     /* fields from the vsumat01 row or the last saved updates  ;*/
     /* to these from scrn 4.  They are saved in PF1REC in      ;*/
     /* the process performed above that loads PF1REC.          ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 8)
    PF1REC.PF1ELEM[PFWSUB] = " ";
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PF1REC.PF1CLS = 0;
  PF1REC.PF1DEO = " ";
  PF1REC.PF1ASO = " ";
  PF1REC.PF1COLUM = 0;


   /* -----------------------------------------------------------;*/
     /* Set the scrn 4 active indicator to 'n'.  Indicates      ;*/
     /* that scrn 4 was not conversed when the user bridged     ;*/
     /* out.                                                    ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PF1S4AIN = "N"; /* scrn 4 active indicator*/


   /* -----------------------------------------------------------;*/
     /* Bridge out.                                             ;*/
   /* -----------------------------------------------------------;*/

  XPPF200(); /* pf14,15,16,17 bridge routine*/
end // end PF0H230

// scrn 2 pf19 read next
Function PF0H240()
   /* -----------------------------------------------------------;*/
     /* Check delete security.                                  ;*/
   /* -----------------------------------------------------------;*/

  PF0H890(); /* pf19 check del security*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Verify that no modifications have been made to screen   ;*/
     /* fields other than the summary name.                     ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PF0HMDLT is modified)
    set PF0HM002.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H291(); /* scrn 2 data entry check*/

  if (PF0HM002.PFESRCNM is modified)
    set PF0HM002.PFESRCNM cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(212); /* do not enter values when using pf19*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Save fields for later use.                              ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PFESUMNM = PF0HM002.PFESUMNM; /* save summary name*/
  PF0HW01.PFESRCNM = PF0HM002.PFESRCNM; /* save source summary name*/
  PF0HW01.PF0HWDSC = PF0HM002.PF0HMDSC; /* save prt or new sum desc*/


   /* -----------------------------------------------------------;*/
     /* Display the change sort sequencing screen (scrn 4)      ;*/
     /* after the first display of a parameter.                 ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PF0HWP19 == "N"
   /* if first pf19 for session flag is 'n'*/
   && PF0HM002.PF0HMCSQ == "Y")

     /* signals screen 4 to initialize from pf0hw01*/
    PF0HM004.PFESUMNM = " ";

    PF0H400(); /* scrn 4 converse*/

     /* prevent entering this loop more than once for a param.*/
    PF0HM002.PF0HMCSQ = "N";

    set PF0HM002.PF0HMDEL skip; /* set delete fields visible*/
    set PF0HM002.PF0HMDLT normal;
    return;
  end


   /* -----------------------------------------------------------;*/
     /* If this is the first pf19 of this 'session', select the ;*/
     /* summary from the database.  A pf19 'session' lasts as   ;*/
     /* long as the user continues to push pf19 rather than     ;*/
     /* enter.  The PF0HW01.PF0HWP19 flag is used to indicate   ;*/
     /* if this is the first pf19 in this pf19 session.  It's   ;*/
     /* normal value (the user is not using pf19) is 'y'.       ;*/
     /* When the user presses pf19 the first time, it is set    ;*/
     /* to 'n' after it is used in this process.  It stays set  ;*/
     /* to 'n' durring the pf19 session.  When the session ends ;*/
     /* (the user presses enter instead of another pf19) the    ;*/
     /* flag is reset to 'y'.                                   ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM002 initial; /* clear map*/
  PF0HM002.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved summary name*/
  PF0HM002.XXXCURDT = VGVar.currentShortGregorianDate; /* put current date on screen*/

  if (PF0HW01.PF0HWP19 == "Y")
                                   /* if first pf19 for session flag is 'y'*/

     /* get sumat & rptat rows for the summary name entered*/
    PF0H241(); /* scrn 2 pf19 get sumat & rptat*/

  end

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Open the parameter table cursor selecting all           ;*/
     /* parameters for this summary.                            ;*/
   /* -----------------------------------------------------------;*/

  PFFREC.PFESUMNM = PF0HM002.PFESUMNM;

  PF0H911(); /* vrptpm01 select scan*/

  if (SQLCA.VAGen_SQLCODE != 0) /* if db2 access unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Select a parameter to display.  Only display a          ;*/
     /* parameter if the security allows the user to delete it. ;*/
     /* If this is the first pf19 for this session then just    ;*/
     /* select the first parameter.  If it is not the first     ;*/
     /* pf19 then read through the parameters until you find    ;*/
     /* the next parameter after the last one displayed in this ;*/
     /* pf19 session.                                           ;*/
   /* -----------------------------------------------------------;*/

   /* PF0HW01.PF0HWNXT is used to hold the sequence number*/
   /* of the desired parameter to be displayed.  The*/
   /* desired parameter's sequence number must be greater*/
   /* than or equal to this sequence number.*/

  if (PF0HW01.PF0HWP19 == "Y")
                                   /* if first pf19 for session flag is 'y'*/
    PF0HW01.PF0HWNXT = 0; /* get first parameter*/
  end
  PFFREC.PFANXTNO = -1; /* ensures loop is processed at least once*/

   /* continue looping while there are still more parameters*/
   /* and the key of the current parameter is less than the*/
   /* key of the desired parameter.  the user must have the*/
   /* proper security to be allowed to view a parameter.*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PFFREC.PFANXTNO < PF0HW01.PF0HWNXT)

    PF0H242(); /* scrn 2 pf19 get param, chk sec*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end

   /* set the next parameter to be displayed for use*/
   /* the next time through this process.*/

  PF0HW01.PF0HWNXT = PFFREC.PFANXTNO + 1;


   /* -----------------------------------------------------------;*/
     /* Display the selected parameter on one of the three      ;*/
     /* screens.                                                ;*/
   /* -----------------------------------------------------------;*/

  PF0H243(); /* scrn 2 pf19 display sel param*/


   /* -----------------------------------------------------------;*/
     /* Close the cursor.                                       ;*/
   /* -----------------------------------------------------------;*/

  PF0H913(); /* vrptpm01 close scan*/
end // end PF0H240

// scrn 2 pf19 get sumat & rptat
Function PF0H241()
  PFEREC.PFESUMNM = PF0HM002.PFESUMNM;

  PF0H921(); /* vsumat01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
    set PF0HM002.PFESUMNM cursor, bold;
    converseLib.validationFailed(62); /* summary name is not on file*/
    PFWREC.PFWERRF = "Y";
    return;
  end


  PFDREC.PFDREF = PFEREC.PFDREF; /* report attr ref nbr*/

  PF0H941(); /* vrptat01 select unique*/
end // end PF0H241

// scrn 2 pf19 get param, chk sec
Function PF0H242()
   /* -----------------------------------------------------------;*/
     /* Select the next vrptpm01 row from the cursor.           ;*/
   /* -----------------------------------------------------------;*/

  PF0H912(); /* vrptpm01 select next*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
    set PF0HM002.PFESUMNM cursor, bold;
    if (PF0HW01.PF0HWP19 == "Y") /* first pf19 for session flag*/
      converseLib.validationFailed(214); /* no print/create parameters exist for sum*/
    else
      converseLib.validationFailed(213); /* no more prt/create param exist for sum & user*/
    end
    PFWREC.PFWERRF = "Y";

    PF0H913(); /* vrptpm01 close scan*/

    return;
  end

  PF0HW01.PF0HWP19 = "N";
                                   /* set first pf19 for session flag to no*/


   /* -----------------------------------------------------------;*/
     /* If we have not yet reached the desired param, return.   ;*/
       /* The key of the current parameter can be greater than  ;*/
     /* (as well as equal to) the key of the desired parameter  ;*/
     /* because the sequence numbers are ascending but not      ;*/
     /* every number may be there (eg: 1,2,4,7,8,...).          ;*/
   /* -----------------------------------------------------------;*/

  if (PFFREC.PFANXTNO < PF0HW01.PF0HWNXT)
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Check if this user is authorized to delete this param.  ;*/
   /* -----------------------------------------------------------;*/

  if (COMMAREA.CADLVL[1] == "Y") /* deletes always allowed (super user)*/
     /* this is okay - security granted*/
     /* key values will cause exit from loop*/
     /* this param will be displayed*/
  else /* deletes not always allowed*/
    if (PFFREC.XXXUSRID == COMMAREA.CAUSERID /* user created param*/
     && PFAREC.PFALKOTF == "N")              /* not summary lockout*/
       /* this is okay - security granted*/
       /* key values will cause exit from loop*/
       /* this param will be displayed*/

    else /* else, do not allow user to see or delete this param*/

       /* security denied, set key to 1 greater than the current*/
       /* key, to continue looping and get another param*/
      PF0HW01.PF0HWNXT = PFFREC.PFANXTNO + 1;
    end
  end
end // end PF0H242

// scrn 2 pf19 display sel param
Function PF0H243()
  PF0HW01.PFFPRTYP = PFFREC.PFFPRTYP; /* print type selection*/

  if (PFFREC.PFFPRTYP == "1"
   || PFFREC.PFFPRTYP == "4")

    PF0H810(); /* scrn 1 format from vrptpm01*/

    PF0HM001.PF0HMCSQ = "Y"; /* trigger scrn 4 display next converse*/
  else
    if (PFFREC.PFFPRTYP == "2"
     || PFFREC.PFFPRTYP == "5")

      PF0H820(); /* scrn 2 format from vrptpm01*/

      PF0HM002.PF0HMCSQ = "Y";
                                   /* trigger scrn 4 display next converse*/
    else
      if (PFFREC.PFFPRTYP == "3")

        PF0H830(); /* scrn 3 format from vrptpm01*/

        PF0HM003.PF0HMCSQ = "Y";
                                   /* trigger scrn 4 dsply next converse*/
      else
        PF0HW01.PFFPRTYP = "2"; /* select screen 2*/
        set PF0HM002.PF0HMDEL skip; /* set delete fields visible*/
        set PF0HM002.PF0HMDLT normal;
        converseLib.validationFailed(228); /* invalid data on file*/
        PFWREC.PFWERRF = "Y";
      end
    end
  end
end // end PF0H243

// scrn 2 delete rptpm & sumat
Function PF0H250()
   /* -----------------------------------------------------------;*/
     /* Verify no fields changed except delete indicator.       ;*/
   /* -----------------------------------------------------------;*/

  PF0H291(); /* scrn 2 data entry check*/

  if (PF0HM002.PFESRCNM is modified)
    set PF0HM002.PFESRCNM cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.PFESUMNM is modified)
    set PF0HM002.PFESUMNM cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.PFWERRF == "Y")
    PF0HW01.PF0HWDCF = "N"; /* delete confirm msg issued flag*/
    set PF0HM002.PF0HMDEL skip; /* set delete fields visible*/
    set PF0HM002.PF0HMDLT normal;
    converseLib.validationFailed(203); /* do not enter values when deleting a*/
                                   /* print param*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Issue delete confirmation message if not already done.  ;*/
   /* -----------------------------------------------------------;*/

  PF0HM002.PF0HMDLT = " "; /* user must reenter 'd' code*/

  if (PF0HW01.PF0HWDCF == "N") /* delete confirm msg issued flag*/
    PF0HW01.PF0HWDCF = "Y"; /* delete confirm msg issued flag*/
    set PF0HM002.PF0HMDEL skip; /* set delete fields visible*/
    set PF0HM002.PF0HMDLT cursor, bold;
    converseLib.validationFailed(122); /* delete requested; re-enter 'd' to confirm*/
    return;
  end

  PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/


   /* -----------------------------------------------------------;*/
     /* Delete rptpm row for print request or new summary       ;*/
     /* request.                                                ;*/
   /* -----------------------------------------------------------;*/

   /* key is already in pffrec from the select*/

  PF0H915(); /* vrptpm01 delete*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end

  converseLib.validationFailed(204); /* print parameter deleted*/


   /* -----------------------------------------------------------;*/
     /* Delete sumat row if this is a new summary request.      ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "5")
    PFEREC.PFESUMNM = PF0HM002.PFESUMNM;

    PF0H923(); /* vsumat01 delete*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end

  converseLib.validationFailed(275); /* summary request deleted*/
end // end PF0H250

// scrn 2 print (typ 2) display
Function PF0H260()
   /* -----------------------------------------------------------;*/
     /* Verify no fields changed except the summary name.       ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PF0HMDLT is modified)
    set PF0HM002.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H291(); /* scrn 2 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(73); /* do not enter values when changing summary name*/
  end


   /* -----------------------------------------------------------;*/
     /* If no errors were found, re-initialize the screen.      ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "N")
    PF0HW01.PFESUMNM = PF0HM002.PFESUMNM; /* save summary name*/
    set PF0HM002 initial; /* clear map*/
    PF0HM002.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved sum name*/
    PF0HM002.XXXCURDT = VGVar.currentShortGregorianDate;
    PF0HM002.PF0HMSNM = "          PRINT SPECIFIC LEVELS";
  end


   /* -----------------------------------------------------------;*/
     /* Select the summary attribute row for the summary name.  ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PFESUMNM != " ")
    PFEREC.PFESUMNM = PF0HM002.PFESUMNM;

    PF0H921(); /* vsumat01 select unique*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0HM002.PFESUMNM cursor, bold;
      converseLib.validationFailed(62); /* summary name is not on file*/
      PFWREC.PFWERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* if i/o unsuccessful*/
        return;
      else
        PF0HM002.PF0HMDSC = PFEREC.PFESUMDE;
        PF0HM002.PF0HMPRY = PFEREC.PFEPRIND;
        PF0HM002.PFECYCIN = PFEREC.PFECYCIN;
      end
    end
  end


   /* -----------------------------------------------------------;*/
     /* Issue an error message if the summary name was not      ;*/
     /* entered.                                                ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PFESUMNM == " ")
    set PF0HM002.PFESUMNM cursor, bold;
    converseLib.validationFailed(35); /* please enter summary name*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* If any errors have occured above, return.               ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Select report attribute row.                            ;*/
   /* -----------------------------------------------------------;*/

  PFDREC.PFDREF = PFEREC.PFDREF;
                                   /* report attribute reference nbr*/

  PF0H941(); /* vrptat01 select unique*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Set up default screen values.                           ;*/
   /* -----------------------------------------------------------;*/

  PF0HM002.PFESRCNM = " "; /* (dark field) source summary name*/
  PF0HM002.PFESUMDE = " "; /* (dark field) source summary descr*/
  PF0HM002.PFELGCPG = PFEREC.PFELGCPG; /* logical pages*/
  PF0HM002.XXXUNTXT = " "; /* route to user name*/
  PF0HM002.PF0HMCSQ = "N"; /* change sequence indicator*/
  PF0HM002.XROCD = PF0HW01.PF0HWDPR; /* default printer for this term*/
  if (PF0HW01.PF0HWDPR in XROTBL.XROCD)
    PF0HM002.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex]; /* printer abreviation*/
  else
    PF0HM002.XROABRV = " "; /* printer abreviation*/
  end
  PF0HM002.XXXNDTXT = " "; /* route to department*/
  PF0HM002.XXXNBRCY = 1; /* number of copies*/
  PF0HM002.XXXNLTXT = " "; /* route to location*/
  PF0HM002.PFFPRLVL = "D"; /* detail print level*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFDREC.PFICD[PFWSUB] != " ")
      PFIREC.PFICD = PFDREC.PFICD[PFWSUB];

      PF0H931(); /* vfield01 select unique*/

      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM002.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
    else
      PF0HM002.PFIDESC[PFWSUB] = " ";
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFDREC.PFICD[8] != " ")
    PFIREC.PFICD = PFDREC.PFICD[8];

    PF0H931(); /* vfield01 select unique*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PF0HM002.PF0HMPRD = PFIREC.PFIDESC;
  else
    PF0HM002.PF0HMPRD = " ";
  end

  PF0HM002.PF0HMDLT = " "; /* (dark field) delete indicator*/

  PF0HW01.PFESRTEL = PFEREC.PFESRTEL;
  PF0HW01.YISCD = PFEREC.YISCD;
  PF0HW01.PFBISGRP = PFEREC.PFBISGRP;
  PF0HW01.PFESEIND = PFEREC.PFESEIND;
  PF0HW01.PFESQCOL = PFEREC.PFESQCOL;
end // end PF0H260

// scrn 2 new sum (typ 5) display
Function PF0H270()
   /* -----------------------------------------------------------;*/
     /* Verify no fields changed except summary name or source  ;*/
     /* summary name.                                           ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PF0HMDLT is modified)
    set PF0HM002.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H291(); /* scrn 2 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(73); /* do not enter vals when chging sum or*/
                                   /* src sum nm*/
  end


   /* -----------------------------------------------------------;*/
     /* If no errors were found, re-initialize the screen.      ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "N")
    PF0HW01.PFESUMNM = PF0HM002.PFESUMNM; /* save summary name*/
    PF0HW01.PFESRCNM = PF0HM002.PFESRCNM; /* save source summary name*/
    set PF0HM002 initial; /* clear map*/
    PF0HM002.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved sum name*/
    PF0HM002.PFESRCNM = PF0HW01.PFESRCNM;
                                   /* replace saved srce sum nm*/
    PF0HM002.XXXCURDT = VGVar.currentShortGregorianDate;
    PF0HM002.PF0HMSNM = " CREATE A SUMMARY FROM SPECIFIC LEVELS";
  end


   /* -----------------------------------------------------------;*/
     /* Select the NEW summary row first and the SOURCE         ;*/
     /* summary row second.  This order of selecting the two    ;*/
     /* rows will leave the PFEREC i/o record containing the    ;*/
     /* row for SOURCE summary name after both selects are      ;*/
     /* complete.  This is the row needed for further           ;*/
     /* processing.                                             ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
     /* Attempt to select the summary attribute row for the     ;*/
     /* NEW summary name.  It should not exist.  If it does     ;*/
     /* exist set the new sum name error flag to 'y'.  It is    ;*/
     /* used to issue the error message after the SOURCE        ;*/
     /* summary name editing is complete.                       ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PF0HWSEF = "N"; /* initialize NEW summary name error*/
                                   /* flag*/
  if (PF0HM002.PFESUMNM != " ") /* if NEW summary name was entered*/
    PFEREC.PFESUMNM = PF0HM002.PFESUMNM; /* use NEW sum name as key*/

    PF0H921(); /* vsumat01 select unique*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
      PF0HW01.PF0HWSEF = "Y"; /* set NEW sum name error flag*/
      PFWREC.PFWERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
         /* this is okay*/
      else
        return;
      end
    end
  end


   /* -----------------------------------------------------------;*/
     /* Select the summary attribute row for the SOURCE summary ;*/
     /* name.  It should exist.                                 ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PFESRCNM != " ") /* if SOURCE summary name was entered*/
    PFEREC.PFESUMNM = PF0HM002.PFESRCNM;
                                   /* use SOURCE sum name as key*/

    PF0H921(); /* vsumat01 select unique*/

    if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
       /* this is okay*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
        set PF0HM002.PFESRCNM cursor, bold;
        converseLib.validationFailed(262); /* source summary name is not on file*/
        PFWREC.PFWERRF = "Y";
      else
        return;
      end
    end
  end


   /* At this point, PFEREC contains the SOURCE summary*/
   /* row, if the SOURCE summary name was not blank and*/
   /* and the select above was successful.*/


   /* -----------------------------------------------------------;*/
     /* If the source summary name of the SOURCE summary is     ;*/
     /* not blank, the user is trying to create a summary from  ;*/
     /* a summary that was created from yet another summary.    ;*/
     /* This is invalid.                                        ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PFESRCNM != " "  /* if SOURCE summary name was entered*/
   && SQLCA.VAGen_SQLCODE == +0 /* and SOURCE summary was found above*/
   && PFEREC.PFESRCNM != " ")   /* and IT'S source name is not blank*/
    set PF0HM002.PFESRCNM cursor, bold;
    converseLib.validationFailed(277); /* src sum invalid; src sum created from*/
                                   /* another sum*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* Issue error message if SOURCE summary name was not      ;*/
     /* entered at all.                                         ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PFESRCNM == " ")
    set PF0HM002.PFESRCNM cursor, bold;
    converseLib.validationFailed(261); /* please enter source summary name*/
    PFWREC.PFWERRF = "Y";
  end


   /* SOURCE summary name is editing is complete at this point.*/


   /* -----------------------------------------------------------;*/
     /* If the NEW summary name already exists, this error      ;*/
     /* was determined above but the error message was not      ;*/
     /* issued.  The error message is issued at this point      ;*/
     /* so it will override any errors issued above for the     ;*/
     /* SOURCE summary name.  This is because the NEW summary   ;*/
     /* name appears on the screen BEFORE the SOURCE summary    ;*/
     /* name.                                                   ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PF0HWSEF == "Y")
                                   /* if NEW summary name error flag is 'y'*/
    set PF0HM002.PFESUMNM cursor, bold;
    converseLib.validationFailed(193); /* summary name entered already exists*/
  end


   /* -----------------------------------------------------------;*/
     /* Issue error message if NEW summary name was not         ;*/
     /* entered at all.                                         ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PFESUMNM == " ")
    set PF0HM002.PFESUMNM cursor, bold;
    converseLib.validationFailed(35); /* please enter summary name*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* Issue an error message if both the NEW summary name     ;*/
     /* and the SOURCE summary name were left blank.            ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM002.PFESUMNM == " "
   && PF0HM002.PFESRCNM == " ")
    set PF0HM002.PFESRCNM cursor, bold;
    set PF0HM002.PFESUMNM cursor, bold;
    converseLib.validationFailed(283); /* must enter both sum name and source sum name*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* If any errors have occurred above, return.              ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* Editing of the both summary names is complete at*/
   /* this point.*/


   /* -----------------------------------------------------------;*/
     /* Select the report attribute row for the SOURCE summary. ;*/
   /* -----------------------------------------------------------;*/

  PFDREC.PFDREF = PFEREC.PFDREF;
                                   /* report attribute reference nbr*/

  PF0H941(); /* vrptat01 select unique*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Set up default screen values.                           ;*/
   /* -----------------------------------------------------------;*/

  PF0HM002.PFESUMDE = PFEREC.PFESUMDE; /* source summary description*/
  PF0HM002.PF0HMDSC = " "; /* new summary description*/
  PF0HM002.PF0HMPRY = "2"; /* overnight priority*/
  PF0HM002.PFELGCPG = PFEREC.PFELGCPG; /* logical pages*/
  PF0HM002.XXXUNTXT = " "; /* (dark field) route to user name*/
  PF0HM002.PF0HMCSQ = "N"; /* change sequence indicator*/
  PF0HM002.XROCD = " "; /* (dark field) printer*/
  PF0HM002.XROABRV = " "; /* (dark field) printer abreviation*/
  PF0HM002.XXXNDTXT = " "; /* (dark field) route to department*/
  PF0HM002.PFECYCIN = " "; /* (dark field) cycle indicator*/
  PF0HM002.XXXNBRCY = 0; /* (dark field) number of copies*/
  PF0HM002.XXXNLTXT = " "; /* (dark field) route to location*/
  PF0HM002.PFFPRLVL = " "; /* (dark field) summary print level*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFDREC.PFICD[PFWSUB] != " ")
      PFIREC.PFICD = PFDREC.PFICD[PFWSUB];

      PF0H931(); /* vfield01 select unique*/

      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM002.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
    else
      PF0HM002.PFIDESC[PFWSUB] = " ";
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFDREC.PFICD[8] != " ")
    PFIREC.PFICD = PFDREC.PFICD[8];

    PF0H931(); /* vfield01 select unique*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PF0HM002.PF0HMPRD = PFIREC.PFIDESC;
  else
    PF0HM002.PF0HMPRD = " ";
  end

  PF0HM002.PF0HMDLT = " "; /* (dark field) delete indicator*/

  PF0HW01.PFESRTEL = PFEREC.PFESRTEL;
  PF0HW01.YISCD = PFEREC.YISCD;
  PF0HW01.PFBISGRP = PFEREC.PFBISGRP;
  PF0HW01.PFESEIND = PFEREC.PFESEIND;
  PF0HW01.PFESQCOL = PFEREC.PFESQCOL;
end // end PF0H270

// scrn 2 process displayed scrn
Function PF0H280()
   /* -----------------------------------------------------------;*/
     /* Edit all fields on the screen.                          ;*/
   /* -----------------------------------------------------------;*/

  PF0H281(); /* scrn 2 edit*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Converse the change sort sequencing screen (scrn 4)     ;*/
     /* if the flag on this screen is 'y'.  Continue conversing ;*/
     /* the screen until the exit flag is 'y'.                  ;*/
       /* If the exit flag is 'y' and there is an error, ezertn ;*/
     /* immediately.  If the exit flag is 'y' but there is no   ;*/
     /* error, check for duplicates (if PFFPRTYP eq '2')        ;*/
     /* before doing an ezertn.                                 ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PFESUMNM = PF0HM002.PFESUMNM; /* save summary name*/
  PF0HW01.PFESRCNM = PF0HM002.PFESRCNM; /* save source summary name*/
  PF0HW01.PF0HWDSC = PF0HM002.PF0HMDSC; /* save prt or new sum desc*/

  PFWREC.PFWEXT = "N"; /* set scrn 4 exit flag*/
  if (PF0HM002.PF0HMCSQ == "Y")
    PF0HM004.PFESUMNM = " "; /* signals scrn 4 to init from pf0hw01*/
    while (PFWREC.PFWEXT == "N") /* while scrn 4 exit flag is no*/

      PF0H400(); /* scrn 4 converse*/

    end
    PF0HM002.PF0HMCSQ = "N";
     /* if there is an error, ezertn now, else wait*/
     /* to ezertn until after checking for duplicates*/
    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* If we are creating a print parameter, check if a        ;*/
     /* identical parameter already exists.                     ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "2")

    PF0H283(); /* scrn 2 duplicate print check*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* If screen 4 exit flag is 'y', we just returned from     ;*/
     /* screen 4.  Perform an ezertn so the original screen     ;*/
     /* will be conversed again before the report parameter     ;*/
     /* is created.                                             ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWEXT == "Y") /* if scrn 4 exit flag is yes*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* If user pushed edit key display confirmation message.   ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf12 /* if edit pfkey pushed*/
   || PF0HW01.PF0HWP12 == "Y")     /* or ezeaid eq pf12 flag is yes*/
    PF0HW01.PF0HWP12 = "N"; /* reset ezeaid eq pf12 flag*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Add the print parameter or the new summary create       ;*/
     /* parameter and summary attribute.                        ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "2")

    PF0H285(); /* scrn 2 add print rptpm*/

  else

    PF0H286(); /* scrn 2 add sum rptpm & sumat*/

  end

  PFWREC.PFWRECF = "N"; /* reset records found flag*/
  PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
  PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
end // end PF0H280

// scrn 2 edit
Function PF0H281()
   /* -----------------------------------------------------------;*/
     /* Converse PF remote printer pop-up window, if requested. ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PF0HWP12 = "N"; /* ezeaid eq pf12 flag*/
  if (converseVar.eventKey is pf12) /* if ezeaid is pf12 set flag for later use be-*/
    PF0HW01.PF0HWP12 = "Y"; /* cause windows may change ezeaid*/
  end

  if (PF0HM002.XROCD != " "
   || PF0HM002.XROCD == "?")
    PF0HW01.PF0HWPR0 = PF0HM002.XROCD;
    PF0H187();

    if (PF0HM002.XROCD != "?")
      if (PF0HW01.PF0HWMP1 <= "Z"
       || PF0HW01.PF0HWMP2 <= "Z"
       || PF0HW01.PF0HWMP3 <= "Z"
       || PF0HW01.PF0HWMP4 <= "Z")
        converseLib.validationFailed(61); /* not a valid printer id*/
        PFWREC.PFWERRF = "Y";
      else
        PF0HM002.XROCD = PF0HW01.PF0HWMPR;
      end
    end
  end

  if (PF0HM002.XROCD == "?")

    PF0HM002.XROCD = PF0HW01.PF0HWMPR;

    XPXX001(); /* initialize for window rtn*/

    XX0XW02.XX0XWHDR = "       PROFITABILITY PRINTERS";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/
      XPPF040(); /* converse pf xrotbl pop-up window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PF0HM002.XROCD = XROTBL.XROCD[XX0XWPIX]; /* save it*/
    else
      PF0HM002.XROCD = " ";
    end
    converseLib.clearScreen();
    
                                   /* blank out screen before next converse*/
  end


   /* -----------------------------------------------------------;*/
     /* Edit the screen fields.                                 ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWTBLF = "N"; /* initialize value found flag*/
  PFWREC.PFWSUB = 8; /* note subscript is 8, not 7*/
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM002.PFDCDVAL[PFWSUB] == "X"
     || PF0HM002.PFDCDVAL[PFWSUB] == " ")
       /* this is okay*/
    else
      set PF0HM002.PFDCDVAL[PFWSUB] cursor, bold;
      converseLib.validationFailed(229); /* must enter 'x' or blank in the level field*/
      PFWREC.PFWERRF = "Y";
    end
    if (PF0HM002.PFDCDVAL[PFWSUB] != " ")
      PFWREC.PFWTBLF = "Y"; /* set value found flag*/
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end

  if (PFWREC.PFWTBLF == "N") /* if value found flag indic. nothing entered*/
    if (PF0HM002.PF0HMPRD != " ")
      set PF0HM002.PFDCDVAL[8] cursor, bold;
    end
    PFWREC.PFWSUB = 7;
    while (PFWREC.PFWSUB >= 1)
      if (PF0HM002.PFIDESC[PFWSUB] != " ")
        set PF0HM002.PFDCDVAL[PFWSUB] cursor, bold;
      end
      PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
    end
    converseLib.validationFailed(231); /* at least one rpt. attr. level must be*/
                                   /* specified*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0HM002.PF0HMDLT == "D"
   || PF0HM002.PF0HMDLT == " ")
     /* this is okay*/
  else
    set PF0HM002.PF0HMDLT cursor, bold;
    converseLib.validationFailed(205); /* must enter 'd' or blank in delete field*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* Edit the fields unique to print selection.              ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "2") /* if print type selection is prt*/
                                   /* specific lvls*/

    PF0H282(); /* scrn 2 edit print (typ 2) flds*/

  end


  if (PF0HW01.PFFPRTYP == "5") /* if typ eq '2', field already edited above*/
    if (PF0HM002.PF0HMCSQ == "Y"
     || PF0HM002.PF0HMCSQ == "N")
       /* this is okay*/
    else
      set PF0HM002.PF0HMCSQ cursor, bold;
      converseLib.validationFailed(264); /* change sort sequence must be 'y' or 'n'*/
      PFWREC.PFWERRF = "Y";
    end
  end


  if (PF0HM002.PF0HMPRY == "1" /* immediate priority*/
   || PF0HM002.PF0HMPRY == "2") /* overnight priority*/
     /* this is okay*/
  else
    set PF0HM002.PF0HMPRY cursor, bold;
    converseLib.validationFailed(102); /* priority must be '1'(immediate) or*/
                                   /* '2'(overnight)*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM002.PF0HMPRY != "2" /* if the param is not overnight*/
   /* priority*/
   && PFEREC.PFECRTDT == 0     /* and summary has not been created yet*/
   && PFEREC.PFEPRIND == "2")  /* and summary has overnight priority*/
    set PF0HM002.PF0HMPRY cursor, bold;
    converseLib.validationFailed(278); /* sum pri is 2 & it's not created; p*/
                                   /* pri must be 2*/
    PFWREC.PFWERRF = "Y";
  end

   /* note: PF0HMDSC (print or new sum desc) requires no editing*/
end // end PF0H281

// scrn 2 edit print (typ 2) flds
Function PF0H282()
  if (PF0HM002.PFFPRLVL == "S" /* require summary,*/
   || PF0HM002.PFFPRLVL == "D" /* or detail,*/
   || PF0HM002.PFFPRLVL == "E") /* or exploded detail*/
     /* this is okay*/
  else
    set PF0HM002.PFFPRLVL cursor, bold;
    converseLib.validationFailed(57); /* print level must be 's'(sum),*/
                                   /* 'd'(det) or 'e'(exp)*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0HM002.XXXNLTXT == " ") /* require route to nike location*/
    set PF0HM002.XXXNLTXT cursor, bold;
    converseLib.validationFailed(279); /* route to location must be entered*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0HM002.XXXNBRCY == 0)
    set PF0HM002.XXXNBRCY cursor, bold;
    converseLib.validationFailed(59); /* please enter # of copies desired*/
    PFWREC.PFWERRF = "Y";
  else
    if (PF0HM002.XXXNBRCY > 25)
      set PF0HM002.XXXNBRCY cursor, bold;
      converseLib.validationFailed(60); /* maximum # of copies allowed is 25*/
      PFWREC.PFWERRF = "Y";
    end
  end

   /* -------------------------------------------------------*/
   /* change processing cycles, 4/2/90, cvo  <=== begin*/
   /* -------------------------------------------------------*/

  if (PFEREC.PFECYCIN == "F") /* if the summary's cycle is 'f'*/
    if (PF0HM002.PFECYCIN == "F"
     /* then param's cycle must be 'f' or 'o'*/
     || PF0HM002.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM002.PFECYCIN cursor, bold;
      converseLib.validationFailed(266); /* sum cyc is f; prt cyc mst be 'f' or 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "B") /* if the summary's cycle is 'b'*/
    if (PF0HM002.PFECYCIN == "B"
     /* then param's cycle must be 'b' or 'o'*/
     || PF0HM002.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM002.PFECYCIN cursor, bold;
      converseLib.validationFailed(267); /* sum cyc is b; prt cyc mst be 'b' or 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "P") /* if the summary's cycle is 'p'*/
    if (PF0HM002.PFECYCIN == "P"
     /* then param's cycle must be 'p' or 'o'*/
     || PF0HM002.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM002.PFECYCIN cursor, bold;
      converseLib.validationFailed(268); /* sum cycle is p; prt cycle must be 'p' or 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "W") /* if the summary's cycle is 'w'*/
    if (PF0HM002.PFECYCIN == "W"
     /* then param's cycle must be 'w' or 'o'*/
     || PF0HM002.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM002.PFECYCIN cursor, bold;
      converseLib.validationFailed(269);
                                   /* sum cycle is w; prt cycle must be w,o*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "Q") /* if the summary's cycle is 'q'*/
    if (PF0HM002.PFECYCIN == "Q"
     /* then param's cycle must be 'q' or 'o'*/
     || PF0HM002.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM002.PFECYCIN cursor, bold;
      converseLib.validationFailed(345); /* sum cycle is q; prt cycle must be q,or o*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "O") /* if the summary's cycle is 'o'*/
    if (PF0HM002.PFECYCIN == "O") /* then param's cycle must be 'o' only*/
       /* this is okay*/
    else
      set PF0HM002.PFECYCIN cursor, bold;
      converseLib.validationFailed(270); /* sum cyc is o; prt cyc mst be o*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN != "F" /* if summary's cycle ne f,b,p,w,q,o*/
   && PFEREC.PFECYCIN != "B" 
   && PFEREC.PFECYCIN != "P" 
   && PFEREC.PFECYCIN != "W" 
   && PFEREC.PFECYCIN != "Q" 
   && PFEREC.PFECYCIN != "O")
    if (PF0HM002.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM002.PFECYCIN cursor, bold;
      converseLib.validationFailed(270); /* prt cycle must be 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end
   /* --------------------------------------------------*/
   /* change processing cycles, 4/2/90, cvo  <=== end*/
   /* --------------------------------------------------*/

  if (PF0HM002.XROCD == " ")
    PF0HM002.XROABRV = " ";
    set PF0HM002.XROCD cursor, bold;
    converseLib.validationFailed(58); /* please enter printer id*/
    PFWREC.PFWERRF = "Y";
  else
    if (PF0HM002.XROCD in XROTBL.XROCD) /* if in remote printer table*/
      if (XROTBL.XROPFFL[sysVar.arrayIndex] == "Y") /* if valid for profitablity*/
        PF0HM002.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
      else
        PF0HM002.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
        set PF0HM002.XROCD cursor, bold;
        converseLib.validationFailed(295); /* not a valid printer id for profit. system*/
        PFWREC.PFWERRF = "Y";
      end
    else
      PF0HM002.XROABRV = " ";
      set PF0HM002.XROCD cursor, bold;
      converseLib.validationFailed(61); /* not a valid printer id*/
      PFWREC.PFWERRF = "Y";
    end
  end


  if (PF0HM002.PF0HMCSQ == "Y"
   || PF0HM002.PF0HMCSQ == "N")
     /* this is okay*/
  else
    set PF0HM002.PF0HMCSQ cursor, bold;
    converseLib.validationFailed(264); /* change sort sequence must be 'y' or 'n'*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0HM002.XXXUNTXT == " ")
    set PF0HM002.XXXUNTXT cursor, bold;
    converseLib.validationFailed(265); /* route to name must be entered*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0H282

// scrn 2 duplicate print check
Function PF0H283()
   /* -----------------------------------------------------------;*/
     /* Open a cursor containing all the print parameters       ;*/
     /* for this summary.  Select each print parameter and      ;*/
     /* check if it is identical to the print parameter being   ;*/
     /* created.  Do not allow duplicate print parameters.      ;*/
   /* -----------------------------------------------------------;*/

  PFFREC.PFESUMNM = PF0HM002.PFESUMNM;

  PF0H911(); /* vrptpm01 select scan*/

  if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
    return;
  end


   /* if this point is reached,*/
   /* the select scan was successful (sqlca.sqlcode eq 0)*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PFWREC.PFWERRF == "N")

    PF0H912(); /* vrptpm01 select next*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/

      PF0H284(); /* scrn 2 compare against rptpm*/

    end
  end

  PF0H913(); /* vrptpm01 close scan*/
end // end PF0H283

// scrn 2 compare against rptpm
Function PF0H284()
   /* -----------------------------------------------------------;*/
     /* As soon as a single field is found that differs,        ;*/
     /* return to the calling process.  This means the print    ;*/
     /* parameter being created is not a duplicate of this      ;*/
     /* existing parameter.  If all the fields are identical    ;*/
     /* except for the summary name (PFESUMNM), an error        ;*/
     /* message will be issued.                                 ;*/
   /* -----------------------------------------------------------;*/

   /* PFESUMNM will always differ*/
   /* PFANXTNO not a screen field*/

  if (PFFREC.PFFRPTDS != PF0HM002.PF0HMDSC
   || PFFREC.PFFPRLVL != PF0HM002.PFFPRLVL
   || PFFREC.XROCD != PF0HM002.XROCD
   /* PFFDTFMI not a screen field*/
   || PFFREC.PFFPRTYP != "2"
   || PFFREC.XXXNBRCY != PF0HM002.XXXNBRCY
   || PFFREC.PFFPRTYI != PF0HM002.PF0HMPRY
   /* PFFPRFRS not on this screen*/
   || PFFREC.PFECYCIN != PF0HM002.PFECYCIN)
    return;
  end

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
     /* PFFFMCH not on this screen*/
    if (PFFREC.PFICD[PFWSUB] != PFDREC.PFICD[PFWSUB]
     || PFFREC.PFDCDVAL[PFWSUB] != PF0HM002.PFDCDVAL[PFWSUB])
      return;
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFFREC.PFICD[8] != PFDREC.PFICD[8]
   || PFFREC.PFDCDVAL[8] != PF0HM002.PFDCDVAL[8])
    return;
  end

   /* XGPCD, SY1STNBR, SY2CLRID, XDMCD, XQACD, and XLCCD are*/
   /* not on this screen.*/

  if (PFFREC.PFESRTEL != PF0HW01.PFESRTEL
   || PFFREC.YISCD != PF0HW01.YISCD
   || PFFREC.PFBISGRP != PF0HW01.PFBISGRP
   || PFFREC.PFESEIND != PF0HW01.PFESEIND
   || PFFREC.PFESQCOL != PF0HW01.PFESQCOL)
    return;
  end

   /* XXXUSRID not a screen field*/

  if (PFFREC.XXXUNTXT != PF0HM002.XXXUNTXT
   || PFFREC.XXXNLTXT != PF0HM002.XXXNLTXT
   || PFFREC.XXXNDTXT != PF0HM002.XXXNDTXT)
    return;
  end

   /* ZZZSDT, ZZZCHGDT, ZZZCHGTM, and ZZZCHGCT not screen fields*/

   /* if this point is reached then the row and the screen are*/
   /* identical (except for the summary name).  This is an*/
   /* error.*/

  set PF0HM001.PFESUMNM cursor, bold;
  converseLib.validationFailed(217); /* identical print parameter already exists*/
  PFWREC.PFWERRF = "Y";
end // end PF0H284

// scrn 2 add print rptpm
Function PF0H285()
   /* -----------------------------------------------------------;*/
     /* Select vpfctl01 to get the next sequence nbr (PFANXTNO) ;*/
   /* -----------------------------------------------------------;*/

  PF0H971(); /* vpfctl01 select unique*/

  if (PFWREC.PFWERRF == "Y") /* if db access unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Move screen to PFFREC.                                  ;*/
   /* -----------------------------------------------------------;*/

  set PFFREC empty;
  PFFREC.PFESUMNM = PF0HM002.PFESUMNM;
  PFFREC.PFANXTNO = PFAREC.PFANXTNO;
  PFFREC.PFFRPTDS = PF0HM002.PF0HMDSC;
  PFFREC.PFFPRLVL = PF0HM002.PFFPRLVL;
  PFFREC.XROCD = PF0HM002.XROCD;
  PFFREC.PFFDTFMI = " ";
  PFFREC.PFFPRTYP = "2"; /* print specific levels*/
  PFFREC.XXXNBRCY = PF0HM002.XXXNBRCY;
  PFFREC.PFFPRTYI = PF0HM002.PF0HMPRY;
  PFFREC.PFFPRFRS = 0;
  PFFREC.PFECYCIN = PF0HM002.PFECYCIN;

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PFFREC.PFFFMCH[PFWSUB] = " ";
    PFFREC.PFICD[PFWSUB] = PFDREC.PFICD[PFWSUB];
    PFFREC.PFDCDVAL[PFWSUB] = PF0HM002.PFDCDVAL[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PFFREC.PFFFMCH[8] = " ";
  PFFREC.PFICD[8] = PFDREC.PFICD[8];
  PFFREC.PFDCDVAL[8] = PF0HM002.PFDCDVAL[8];

  PFFREC.XGPCD = " ";
  PFFREC.SY1STNBR = " ";
  PFFREC.SY2CLRID = " ";
  PFFREC.XDMCD = " ";
  PFFREC.XQACD = " ";
  PFFREC.XLCCD = " ";

  PFFREC.PFESRTEL = PF0HW01.PFESRTEL;
  PFFREC.YISCD = PF0HW01.YISCD;
  PFFREC.PFBISGRP = PF0HW01.PFBISGRP;
  PFFREC.PFESEIND = PF0HW01.PFESEIND;
  PFFREC.PFESQCOL = PF0HW01.PFESQCOL;

  PFFREC.XXXUNTXT = PF0HM002.XXXUNTXT;
  PFFREC.XXXNLTXT = PF0HM002.XXXNLTXT;
  PFFREC.XXXNDTXT = PF0HM002.XXXNDTXT;


   /* -----------------------------------------------------------;*/
     /* Add print parameter.                                    ;*/
   /* -----------------------------------------------------------;*/

  PF0H914(); /* vrptpm01 add*/

  if (PFWREC.PFWERRF == "Y") /* if db insert unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Update vpfctl01 to increment next sequence nbr          ;*/
     /* (PFANXTNO).                                             ;*/
   /* -----------------------------------------------------------;*/

  PF0H972(); /* vpfctl01 update 2*/

  if (PFWREC.PFWERRF == "Y") /* if db update unsuccessful*/
    return;
  end

  converseLib.validationFailed(207); /* print parameter created*/
end // end PF0H285

// scrn 2 add sum rptpm & sumat
Function PF0H286()
   /* -----------------------------------------------------------;*/
     /* Select vpfctl01 to get the next sequence nbr (PFANXTNO) ;*/
   /* -----------------------------------------------------------;*/

  PF0H971(); /* vpfctl01 select unique*/

  if (PFWREC.PFWERRF == "Y") /* if db access unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Move screen to PFFREC.                                  ;*/
   /* -----------------------------------------------------------;*/

  set PFFREC empty;
  PFFREC.PFESUMNM = PF0HM002.PFESUMNM;
  PFFREC.PFANXTNO = PFAREC.PFANXTNO;
  PFFREC.PFFRPTDS = " ";
  PFFREC.PFFPRLVL = "E"; /* 'expanded' print level*/
  PFFREC.XROCD = " ";
  PFFREC.PFFDTFMI = " ";
  PFFREC.PFFPRTYP = "5"; /* create summary from specific levels*/
  PFFREC.XXXNBRCY = 0;
  PFFREC.PFFPRTYI = PF0HM002.PF0HMPRY; /* same pri on pffrec and pferec*/
  PFFREC.PFFPRFRS = 0;
  PFFREC.PFECYCIN = "O"; /* 'on request' cycle indicator*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PFFREC.PFFFMCH[PFWSUB] = " ";
    PFFREC.PFICD[PFWSUB] = PFDREC.PFICD[PFWSUB];
    PFFREC.PFDCDVAL[PFWSUB] = PF0HM002.PFDCDVAL[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PFFREC.PFFFMCH[8] = " ";
  PFFREC.PFICD[8] = PFDREC.PFICD[8];
  PFFREC.PFDCDVAL[8] = PF0HM002.PFDCDVAL[8];

  PFFREC.XGPCD = " ";
  PFFREC.SY1STNBR = " ";
  PFFREC.SY2CLRID = " ";
  PFFREC.XDMCD = " ";
  PFFREC.XQACD = " ";
  PFFREC.XLCCD = " ";

  PFFREC.PFESRTEL = PF0HW01.PFESRTEL;
  PFFREC.YISCD = PF0HW01.YISCD;
  PFFREC.PFBISGRP = PF0HW01.PFBISGRP;
  PFFREC.PFESEIND = PF0HW01.PFESEIND;
  PFFREC.PFESQCOL = PF0HW01.PFESQCOL;

  PFFREC.XXXUNTXT = " ";
  PFFREC.XXXNLTXT = " ";
  PFFREC.XXXNDTXT = " ";


   /* -----------------------------------------------------------;*/
     /* Add new summary report parameter.                       ;*/
   /* -----------------------------------------------------------;*/

  PF0H914(); /* vrptpm01 add*/

  if (PFWREC.PFWERRF == "Y") /* if db insert unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Update vpfctl01 to increment next sequence nbr          ;*/
     /* (PFANXTNO).                                             ;*/
   /* -----------------------------------------------------------;*/

  PF0H972(); /* vpfctl01 update 2*/

  if (PFWREC.PFWERRF == "Y") /* if db update unsuccessful*/
    return;
  end

   /* -----------------------------------------------------------;*/
     /* create the new summary attribute record (pferec).       ;*/
     /* pferec currently contains the row for the source        ;*/
     /* summary.  Use the existing values in some of the fields ;*/
     /* and change only those fields needed to make it a row    ;*/
     /* for the new summary.                                    ;*/
   /* -----------------------------------------------------------;*/

  PFEREC.PFESRCNM = PFEREC.PFESUMNM; /* move sum nm to source sum nm*/
  PFEREC.PFESUMNM = PF0HM002.PFESUMNM; /* overlay the old sum nm*/
  PFEREC.PFESUMDE = PF0HM002.PF0HMDSC;
  PFEREC.PFGSUMN = 0;
  PFEREC.PFEPRIND = PF0HM002.PF0HMPRY; /* same pri on pffrec and pferec*/

  PFEREC.PFESRTEL = PF0HW01.PFESRTEL;
  PFEREC.YISCD = PF0HW01.YISCD;
  PFEREC.PFBISGRP = PF0HW01.PFBISGRP;
  PFEREC.PFESEIND = PF0HW01.PFESEIND;
  PFEREC.PFESQCOL = PF0HW01.PFESQCOL;

  PFEREC.PFECRTDT = 0;
  PFEREC.PFECYCIN = "O"; /* 'on-request' cycle indicator*/
  PFEREC.PFESTIND = " "; /* 'set up but not in process yet'*/
                                   /* status*/
  PFEREC.PFELGCPG = 0;


   /* -----------------------------------------------------------;*/
     /* Add new summary attribute.                              ;*/
   /* -----------------------------------------------------------;*/

  PF0H922(); /* vsumat01 add*/

  if (PFWREC.PFWERRF == "Y") /* if db insert unsuccessful*/
    return;
  end

  converseLib.validationFailed(271); /* summary request created*/
end // end PF0H286

// scrn 2 data entry check
Function PF0H291()
   /* -----------------------------------------------------------;*/
    /* Check all screen fields except sum name, source sum nm,  ;*/
    /* & delete for data entry.  Highlight, set the cursor, and ;*/
    /* set the error flag for every field that has changed.     ;*/
   /* -----------------------------------------------------------;*/

   /* note that PF0HM002.PF0HMDLT is not tested in this process*/

  PFWREC.PFWSUB = 8; /* note subscript is 8, not 7*/
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM002.PFDCDVAL[PFWSUB] is modified)
      set PF0HM002.PFDCDVAL[PFWSUB] cursor, bold;
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end

  if (PF0HM002.PFFPRLVL is modified)
    set PF0HM002.PFFPRLVL cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.XXXNLTXT is modified)
    set PF0HM002.XXXNLTXT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.XXXNBRCY is modified)
    set PF0HM002.XXXNBRCY cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.PFECYCIN is modified)
    set PF0HM002.PFECYCIN cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.XXXNDTXT is modified)
    set PF0HM002.XXXNDTXT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.XROCD is modified)
    set PF0HM002.XROCD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.PF0HMCSQ is modified)
    set PF0HM002.PF0HMCSQ cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.XXXUNTXT is modified)
    set PF0HM002.XXXUNTXT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.PF0HMPRY is modified)
    set PF0HM002.PF0HMPRY cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM002.PF0HMDSC is modified)
    set PF0HM002.PF0HMDSC cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

   /* note that PF0Hm002.PFESRCNM is not tested in this process*/
   /* note that PF0Hm002.PFESUMNM is not tested in this process*/
end // end PF0H291

// scrn 3 converse
Function PF0H300()
   /* -----------------------------------------------------------;*/
     /* Converse screen 3:                                      ;*/
       /* 'PRINT IN CONDENSED FORMAT' screen                    ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
     /* Set screen attributes.                                  ;*/
   /* -----------------------------------------------------------;*/

  PF0H310(); /* scrn 3 set scrn attributes*/

  PF1REC.PF1EZEMN = converseVar.validationMsgNum; /* save msg for possible bridge*/

  if (PFWREC.PFWMSG != " ")
    PF0HM003.VAGen_EZEMSG = PFWREC.PFWMSG;
  end

  if (PF1REC.PF1XFERF == "Y")
    PF0HM003.PFESUMNM = PF1REC.PF1NAM;
    PFEREC.PFESUMNM = PF1REC.PF1NAM;
    PFFREC.PFESUMNM = PF1REC.PF1NAM;
    PFFREC.PFANXTNO = PF1REC.PF1ANX;
    PF0H999();
    PF0HM003.PF0HMDSC = PFFREC.PFFRPTDS; /* cvo 9/15/90*/
    PF0HM003.PF0HMPRY = PFFREC.PFFPRTYI;
    PF0HM003.PFECYCIN = PFFREC.PFECYCIN;
    PF0HM003.XXXUNTXT = PFFREC.XXXUNTXT;
    PF0HM003.XXXNLTXT = PFFREC.XXXNLTXT;
    PF0HM003.XXXNDTXT = PFFREC.XXXNDTXT;
    PF0HM003.XXXNBRCY = PFFREC.XXXNBRCY;
    PF0HM003.XGPCD = PFFREC.XGPCD;
    PF0HM003.SY1STNBR = PFFREC.SY1STNBR;
    PF0HM003.SY2CLRID = PFFREC.SY2CLRID;
    PF0HM003.XDMCD = PFFREC.XDMCD;
    PF0HM003.XQACD = PFFREC.XQACD;
    PF0HM003.XLCCD = PFFREC.XLCCD;
    PF0HM003.PF0HMCSQ = "N";
    PF0HM003.XROCD = PFFREC.XROCD;
    if (PFFREC.XROCD in XROTBL.XROCD)
      PF0HM003.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
    else
      PF0HM003.XROABRV = " ";
    end
    PF0H921();
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
    PFCREC.PFCREF = PFEREC.PFCREF;
    PF0HM003.PFELGCPG = PFEREC.PFELGCPG;
    PF0H951();
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
    PFDREC.PFDREF = PFEREC.PFDREF;
    PF0H941();
    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end
    PFWREC.PFWSUB = 1;
    while (PFWREC.PFWSUB <= 7)
      if (PFDREC.PFICD[PFWSUB] != " ")
        PFIREC.PFICD = PFDREC.PFICD[PFWSUB];
        PF0H931();
        if (PFWREC.PFWERRF == "Y")
          return;
        end
        PF0HM003.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
      else
        PF0HM003.PFIDESC[PFWSUB] = " ";
      end
      PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
    end
    if (PFDREC.PFICD[8] != " ")
      PFIREC.PFICD = PFDREC.PFICD[8];
      PF0H931();
      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM003.PF0HMPRD = PFIREC.PFIDESC;
      set PF0HM003.XGPCD skip;
      set PF0HM003.SY1STNBR skip;
      set PF0HM003.SY2CLRID skip;
      set PF0HM003.XDMCD skip;
      set PF0HM003.XQACD skip;
      set PF0HM003.XLCCD skip;
    else
      PF0HM003.PF0HMPRD = " ";
    end
  end

  if (PF1REC.PF1ORIG == "PF0P")
    PF0HM003.PF0HMPFK = "17:PRNT DIR";
    set PF0HM003.PF0HMPFK normal;
    set PF0HM003.PF0HMPFK skip;
  end

  if (PF1REC.PF1ORIG == "PF0P")
    PFWREC.PFWSUB = 1;
    while (PFWREC.PFWSUB <= 7)
      if (PF1REC.PFDCDVAL[PFWSUB] != " ")
        PF0HM003.PFDCDVAL[PFWSUB] = PF1REC.PFDCDVAL[PFWSUB];
        set PF0HM003.PFDCDVAL[PFWSUB] normal;
        set PF0HM003.PFDCDVAL[PFWSUB] skip;
      end
      PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
    end
  end

  converse PF0HM003 ;

  PFWREC.PFWERRF = "N"; /* reset error flag*/
  PFWREC.PFWMSG = " "; /* clear message line*/
  PF0HM003.VAGen_EZEMSG = " ";


   /* -----------------------------------------------------------;*/
     /* Reset flags if summary name is changed.                 ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PFESUMNM is modified)
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
    PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
  end


   /* -----------------------------------------------------------;*/
     /* Check for fastpath, pf & pa keys.                       ;*/
   /* -----------------------------------------------------------;*/

  PF0H320(); /* scrn 3 fastpath, pf & pa keys*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Check security.                                         ;*/
   /* -----------------------------------------------------------;*/

  PF0H870(); /* check add security*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* These 3 PF keys transfer the user to one of 3 other     ;*/
     /* PF applications.  Data is saved before the transfer,    ;*/
     /* allowing the user to return to the point at which he or ;*/
     /* she left.  Transfer occurs in the routine XPPF200.      ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf14 /* if bridge pf key pushed*/
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf16)

    PF0H330(); /* scrn 3 pfkey bridge out*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* The pf19 read next key displays all the existing        ;*/
     /* parameters for a summary, in the same order that they   ;*/
     /* were created.  It also displays a new field on the      ;*/
     /* screen, the delete field.  When the user stops pushing  ;*/
     /* pf19 and pushes enter instead, the delete field is      ;*/
     /* removed from the screen again.                          ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf19) /* if read next pf key pushed*/

    PF0H340(); /* scrn 3 pf19 read next*/

     /* force screen re-initialization if not pf19 next time*/
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    return;
  else
    PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
  end


   /* -----------------------------------------------------------;*/
     /* Deletes can be requested only when the user is scaning  ;*/
     /* through the existing parameters using pf19.             ;*/
     /* For a print request, the rptpm row is deleted.          ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PF0HMDLT == "D") /* if user entered 'd' on screen*/

    PF0H350(); /* scrn 3 delete rptpm*/

    return;
  else
    PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
  end


   /* -----------------------------------------------------------;*/
       /* If the summary name is modified,                      ;*/
     /* clear the screen and display the default values and     ;*/
     /* reporting attributes for the summary, using the         ;*/
     /* appropriate display process.                            ;*/
       /* Otherwise, process the displayed sum.  This includes  ;*/
     /* editing, possibly displaying the change sort screen     ;*/
     /* (scrn 4), checking for duplicates, and creating the     ;*/
     /* print rptpm row.                                        ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PFESUMNM is modified /* if a new summary*/
   || PFWREC.PFWRECF == "N")        /* or records found flag is no*/
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    PFWREC.PFWEDTF = "Y"; /* reset edit attribute values flag*/

    PF0H360(); /* scrn 3 print (typ 3) display*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PFWREC.PFWRECF = "Y"; /* set records found flag*/

  else /* else not a new sum*/

    PF0H380(); /* scrn 3 process displayed scrn*/

  end
end // end PF0H300

// scrn 3 set scrn attributes
Function PF0H310()
   /* ----------------------------------------------------------;*/
     /* If the records found flag is 'n', protect all the      ;*/
     /* fields except for the summary name.                    ;*/
       /* This flag will be 'n' when: the screen is first      ;*/
     /* displayed as blank, the user changed the summary name  ;*/
     /* to an invalid name, the user is using PF19 to read     ;*/
     /* through the existing parameters, or the user is        ;*/
     /* deleting a parameter.                                  ;*/
   /* ----------------------------------------------------------;*/

  if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
    set PF0HM003.PF0HMDSC skip;
    set PF0HM003.PF0HMPRY skip;
    set PF0HM003.XXXUNTXT skip;
    set PF0HM003.PF0HMCSQ skip;
    set PF0HM003.XROCD skip;
    set PF0HM003.XXXNDTXT skip;
    set PF0HM003.PFECYCIN skip;
    set PF0HM003.XXXNBRCY skip;
    set PF0HM003.XXXNLTXT skip;
    set PF0HM003.PFFPRFRS skip;
  end


   /* ----------------------------------------------------------;*/
     /* Protect all the value fields if the records found flag ;*/
     /* is 'n'.  Darken any value fields that don't have       ;*/
     /* attributes.                                            ;*/
   /* ----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
      set PF0HM003.PFFFMCH[PFWSUB] skip; /* protect fields*/
      set PF0HM003.PFDCDVAL[PFWSUB] skip;
    end
    if (PF0HM003.PFIDESC[PFWSUB] == " ") /* if no attribute showing*/
      set PF0HM003.PFFFMCH[PFWSUB] skip, invisible;
                                   /* protect & darken fields*/
      set PF0HM003.PFDCDVAL[PFWSUB] skip, invisible;
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end


   /* ----------------------------------------------------------;*/
     /* Set the product field attributes.                      ;*/
   /* ----------------------------------------------------------;*/

  if (PFWREC.PFWRECF == "N") /* if records found flag is 'n'*/
    set PF0HM003.PFFFMCH[8] skip;
                                   /* protect all the product fields*/
    set PF0HM003.XGPCD skip;
    set PF0HM003.SY1STNBR skip;
    set PF0HM003.SY2CLRID skip;
    set PF0HM003.XDMCD skip;
    set PF0HM003.XQACD skip;
    set PF0HM003.XLCCD skip;
  end

  if (PFDREC.PFICD[8] == "39") /* if product attrib. is gpc, style*/
    set PF0HM003.SY2CLRID skip; /* protect the remaining prod fields*/
    set PF0HM003.XDMCD skip;
    set PF0HM003.XQACD skip;
    set PF0HM003.XLCCD skip;
  end

  if (PFDREC.PFICD[8] == "42") /* if product attrib. is gpc, style, qual, lc*/
    set PF0HM003.SY2CLRID skip; /* protect the remaining prod fields*/
    set PF0HM003.XDMCD skip;
  end

  if (PF0HM003.PF0HMPRD == " ") /* if product desc eq ' ' (no product at*/
                                   /* all)*/
    set PF0HM003.PFFFMCH[8] skip, invisible;
                                   /* protect & darken all prod flds*/
    set PF0HM003.XGPCD skip, invisible;
    set PF0HM003.SY1STNBR skip, invisible;
    set PF0HM003.SY2CLRID skip, invisible;
    set PF0HM003.XDMCD skip, invisible;
    set PF0HM003.XQACD skip, invisible;
    set PF0HM003.XLCCD skip, invisible;
  end
end // end PF0H310

// scrn 2 fastpath, pf & pa keys
Function PF0H320()
   /* -----------------------------------------------------------;*/
     /* Reset screen fields.                                    ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM003.PF0HMSNM initialAttributes;
  set PF0HM003.PFESUMNM initialAttributes;
  set PF0HM003.PF0HMDSC initialAttributes; /* prt param desc*/
  set PF0HM003.PF0HMRTL initialAttributes;
  set PF0HM003.PF0HMPRY initialAttributes;
  set PF0HM003.PFELGCPG initialAttributes;
  set PF0HM003.PF0HMUNL initialAttributes;
  set PF0HM003.XXXUNTXT initialAttributes;
  set PF0HM003.PF0HMCSQ initialAttributes;
  set PF0HM003.PF0HMPRL initialAttributes;
  set PF0HM003.XROCD initialAttributes;
  set PF0HM003.XROABRV initialAttributes;
  set PF0HM003.PF0HMNDL initialAttributes;
  set PF0HM003.XXXNDTXT initialAttributes;
  set PF0HM003.PF0HMCYL initialAttributes;
  set PF0HM003.PFECYCIN initialAttributes;
  set PF0HM003.PF0HMCPL initialAttributes;
  set PF0HM003.XXXNBRCY initialAttributes;
  set PF0HM003.PF0HMNLL initialAttributes;
  set PF0HM003.XXXNLTXT initialAttributes;
   /* no pffprlvl on scrn 3*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    set PF0HM003.PFFFMCH[PFWSUB] initialAttributes; /* format character*/
    set PF0HM003.PFDCDVAL[PFWSUB] initialAttributes; /* attribute value*/
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  set PF0HM003.PFFFMCH[8] initialAttributes; /* format character*/

  set PF0HM003.XGPCD initialAttributes;
  set PF0HM003.SY1STNBR initialAttributes;
  set PF0HM003.SY2CLRID initialAttributes;
  set PF0HM003.XDMCD initialAttributes;
  set PF0HM003.XQACD initialAttributes;
  set PF0HM003.XLCCD initialAttributes;
  set PF0HM003.PF0HMFL1 initialAttributes;
  set PF0HM003.PFFPRFRS initialAttributes;
  set PF0HM003.PF0HMFL2 initialAttributes;
  set PF0HM003.PF0HMDEL initialAttributes;
  set PF0HM003.PF0HMDLT initialAttributes;
  set PF0HM003.CATOAP initialAttributes;
  set PF0HM003.CAITEM initialAttributes;


   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on    ;*/
     /* the screen.  If other data has been entered, put cursor ;*/
     /* on the bad field and send an error message.  Do not     ;*/
     /* allow fastpath back into same application.              ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.CATOAP != " " /* if fastpath*/
   || PF0HM003.CAITEM != " ")
    if (PF0HM003.CATOAP == "PF0H") /* if fastpath into same appl*/
      set PF0HM003.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
       /* wait to set pfwerrf until after the following process*/
    end
    if (PF0HM003.PF0HMDLT is modified)
      set PF0HM003.PF0HMDLT cursor, bold;
      PFWREC.PFWERRF = "Y";
    end

    PF0H391(); /* scrn 3 data entry check*/

    if (PFWREC.PFWERRF == "Y") /* if an error occured*/
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
    end
    if (PF0HM003.CATOAP == "PF0H") /* if fastpath into same appl*/
      PFWREC.PFWERRF = "Y"; /* set error flag for msg 10 above*/
    end

    if (PF0HM003.PFESUMNM is modified)
      set PF0HM003.PFESUMNM cursor, bold;
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
      PFWREC.PFWERRF = "Y";
    end
    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0HM003.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0HM003.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PFWREC.PFWERRF = "Y";
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Check for PF and PA key entries.                        ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is enter)
      /* no action*/
  else

    PF0H880(); /* process PF & PA keys*/

    if (PF0HW01.PFFPRTYP != "3") /* if screen 3 no longer active*/
      PFWERRF = "Y";
      return; /* exit this routine*/
    end
  end
end // end PF0H320

// scrn 3 pf14, 15, & 16 bridge
Function PF0H330()
   /* -----------------------------------------------------------;*/
     /* Verify the summary name has been entered.               ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PFESUMNM == " ")
    set PF0HM003.PFESUMNM cursor, bold;
    converseLib.validationFailed(79); /* please enter sum name along with pf14,15 or 16*/
    PFWREC.PFWERRF = "Y";
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Verify nothing is changed on the screen except the      ;*/
     /* summary name.                                           ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PF0HMDLT is modified)
    set PF0HM003.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H391(); /* scrn 3 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(216); /* do not enter values when using pf14, 15, or 16*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Select the summary from the database.                   ;*/
   /* -----------------------------------------------------------;*/

  PFEREC.PFESUMNM = PF0HM003.PFESUMNM;

  PF0H921(); /* vsumat01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
    set PF0HM003.PFESUMNM cursor, bold;
    converseLib.validationFailed(62); /* summary name is not on file*/
    PFWREC.PFWERRF = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* if i/o unsuccessful*/
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Move the screen fields to the bridge record.            ;*/
   /* -----------------------------------------------------------;*/

  PF0H860(); /* scrn 3 bridge out PF1REC load*/


   /* -----------------------------------------------------------;*/
     /* These 5 PF1REC fields are used to store the ACTUAL      ;*/
     /* updateable scrn 4 fields.  They are initialized to      ;*/
     /* spaces and zeros because scrn 4 is not currently        ;*/
     /* active.                                                 ;*/
       /* There are also 5 different PF1REC fields that are     ;*/
     /* used to store the PF0HW01 working storage fields for    ;*/
     /* scrn 4.  These fields contain the 'default' sort        ;*/
     /* fields from the vsumat01 row or the last saved updates  ;*/
     /* to these from scrn 4.  They are saved in PF1REC in      ;*/
     /* the process performed above that loads PF1REC.          ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 8)
    PF1REC.PF1ELEM[PFWSUB] = " ";
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PF1REC.PF1CLS = 0;
  PF1REC.PF1DEO = " ";
  PF1REC.PF1ASO = " ";
  PF1REC.PF1COLUM = 0;


   /* -----------------------------------------------------------;*/
     /* Set the scrn 4 active indicator to 'n'.  Indicates      ;*/
     /* that scrn 4 was not conversed when the user bridged     ;*/
     /* out.                                                    ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PF1S4AIN = "N"; /* scrn 4 active indicator*/


   /* -----------------------------------------------------------;*/
     /* Bridge out.                                             ;*/
   /* -----------------------------------------------------------;*/

  XPPF200(); /* pf14,15,16,17 bridge routine*/
end // end PF0H330

// scrn 3 pf19 read next
Function PF0H340()
   /* -----------------------------------------------------------;*/
     /* Check delete security.                                  ;*/
   /* -----------------------------------------------------------;*/

  PF0H890(); /* pf19 check del security*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Verify that no modifications have been made to screen   ;*/
     /* fields other than the summary name.                     ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PF0HMDLT is modified)
    set PF0HM003.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H391(); /* scrn 3 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(212); /* do not enter values when using pf19*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Save fields in pf0hw01 for later use.                   ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PFESUMNM = PF0HM003.PFESUMNM; /* save summary name*/
  PF0HW01.PFESRCNM = " "; /* save source summary name*/
  PF0HW01.PF0HWDSC = PF0HM003.PF0HMDSC; /* save print desc*/


   /* -----------------------------------------------------------;*/
     /* Display the change sort sequencing screen (scrn 4)      ;*/
     /* after the first display of a parameter.                 ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PF0HWP19 == "N"
   /* if first pf19 for session flag is 'n'*/
   && PF0HM003.PF0HMCSQ == "Y")

     /* signals screen 4 to initialize from pf0hw01*/
    PF0HM004.PFESUMNM = " ";

    PF0H400(); /* scrn 4 converse*/

     /* prevent entering this loop more than once for a param.*/
    PF0HM003.PF0HMCSQ = "N";

    set PF0HM003.PF0HMDEL skip; /* set delete fields visible*/
    set PF0HM003.PF0HMDLT normal;
    return;
  end


   /* -----------------------------------------------------------;*/
     /* If this is the first pf19 of this 'session', select the ;*/
     /* summary from the database.  A pf19 'session' lasts as   ;*/
     /* long as the user continues to push pf19 rather than     ;*/
     /* enter.  The PF0HW01.PF0HWP19 flag is used to indicate   ;*/
     /* if this is the first pf19 in this pf19 session.  It's   ;*/
     /* normal value (the user is not using pf19) is 'y'.       ;*/
     /* When the user presses pf19 the first time, it is set    ;*/
     /* to 'n' after it is used in this process.  It stays set  ;*/
     /* to 'n' durring the pf19 session.  When the session ends ;*/
     /* (the user presses enter instead of another pf19) the    ;*/
     /* flag is reset to 'y'.                                   ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM003 initial; /* clear map*/
  PF0HM003.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved summary name*/
  PF0HM003.XXXCURDT = VGVar.currentShortGregorianDate; /* put current date on screen*/

  if (PF0HW01.PF0HWP19 == "Y")
                                   /* if first pf19 for session flag is 'y'*/

     /* get sumat & rptat rows for the summary name entered*/
    PF0H341(); /* scrn 3 pf19 get sumat & rptat*/

  end

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Open the parameter table cursor selecting all           ;*/
     /* parameters for this summary.                            ;*/
   /* -----------------------------------------------------------;*/

  PFFREC.PFESUMNM = PF0HM003.PFESUMNM;

  PF0H911(); /* vrptpm01 select scan*/

  if (SQLCA.VAGen_SQLCODE != 0) /* if db2 access unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Select a parameter to display.  Only display a          ;*/
     /* parameter if the security allows the user to delete it. ;*/
     /* If this is the first pf19 for this session then just    ;*/
     /* select the first parameter.  If it is not the first     ;*/
     /* pf19 then read through the parameters until you find    ;*/
     /* the next parameter after the last one displayed in this ;*/
     /* pf19 session.                                           ;*/
   /* -----------------------------------------------------------;*/

   /* PF0HW01.PF0HWNXT is used to hold the sequence number*/
   /* of the desired parameter to be displayed.  The*/
   /* desired parameter's sequence number must be greater*/
   /* than or equal to this sequence number.*/

  if (PF0HW01.PF0HWP19 == "Y")
                                   /* if first pf19 for session flag is 'y'*/
    PF0HW01.PF0HWNXT = 0; /* get first parameter*/
  end
  PFFREC.PFANXTNO = -1; /* ensures loop is processed at least once*/

   /* continue looping while there are still more parameters*/
   /* and the key of the current parameter is less than the*/
   /* key of the desired parameter.  the user must have the*/
   /* proper security to be allowed to view a parameter.*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PFFREC.PFANXTNO < PF0HW01.PF0HWNXT)

    PF0H342(); /* scrn 3 pf19 get param, chk sec*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end

   /* set the next parameter to be displayed for use*/
   /* the next time through this process.*/

  PF0HW01.PF0HWNXT = PFFREC.PFANXTNO + 1;


   /* -----------------------------------------------------------;*/
     /* Display the selected parameter on one of the three      ;*/
     /* screens.                                                ;*/
   /* -----------------------------------------------------------;*/

  PF0H343(); /* scrn 3 pf19 display sel param*/


   /* -----------------------------------------------------------;*/
     /* Close the cursor.                                       ;*/
   /* -----------------------------------------------------------;*/

  PF0H913(); /* vrptpm01 close scan*/
end // end PF0H340

// scrn 3 pf19 get sumat & rptat
Function PF0H341()
  PFEREC.PFESUMNM = PF0HM003.PFESUMNM;

  PF0H921(); /* vsumat01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
    set PF0HM003.PFESUMNM cursor, bold;
    converseLib.validationFailed(62); /* summary name is not on file*/
    PFWREC.PFWERRF = "Y";
    return;
  end


  PFDREC.PFDREF = PFEREC.PFDREF; /* report attr ref nbr*/

  PF0H941(); /* vrptat01 select unique*/
end // end PF0H341

// scrn 3 pf19 get param, chk sec
Function PF0H342()
   /* -----------------------------------------------------------;*/
     /* Select the next vrptpm01 row from the cursor.           ;*/
   /* -----------------------------------------------------------;*/

  PF0H912(); /* vrptpm01 select next*/

  if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
    set PF0HM003.PFESUMNM cursor, bold;
    if (PF0HW01.PF0HWP19 == "Y") /* first pf19 for session flag*/
      converseLib.validationFailed(214); /* no print/create parameters exist for sum*/
    else
      converseLib.validationFailed(213); /* no more prt/create param exist for sum & user*/
    end
    PFWREC.PFWERRF = "Y";

    PF0H913(); /* vrptpm01 close scan*/

    return;
  end

  PF0HW01.PF0HWP19 = "N";
                                   /* set first pf19 for session flag to no*/


   /* -----------------------------------------------------------;*/
     /* If we have not yet reached the desired param, return.   ;*/
       /* The key of the current parameter can be greater than  ;*/
     /* (as well as equal to) the key of the desired parameter  ;*/
     /* because the sequence numbers are ascending but not      ;*/
     /* every number may be there (eg: 1,2,4,7,8,...).          ;*/
   /* -----------------------------------------------------------;*/

  if (PFFREC.PFANXTNO < PF0HW01.PF0HWNXT)
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Check if this user is authorized to delete this param.  ;*/
   /* -----------------------------------------------------------;*/

  if (COMMAREA.CADLVL[1] == "Y") /* deletes always allowed (super user)*/
     /* this is okay - security granted*/
     /* key values will cause exit from loop*/
     /* this param will be displayed*/
  else /* deletes not always allowed*/
    if (PFFREC.XXXUSRID == COMMAREA.CAUSERID /* user created param*/
     && PFAREC.PFALKOTF == "N")              /* not summary lockout*/
       /* this is okay - security granted*/
       /* key values will cause exit from loop*/
       /* this param will be displayed*/

    else /* else, do not allow user to see or delete this param*/

       /* security denied, set key to 1 greater than the current*/
       /* key, to continue looping and get another param*/
      PF0HW01.PF0HWNXT = PFFREC.PFANXTNO + 1;
    end
  end
end // end PF0H342

// scrn 3 pf19 display sel param
Function PF0H343()
  PF0HW01.PFFPRTYP = PFFREC.PFFPRTYP; /* print type selection*/

  if (PFFREC.PFFPRTYP == "1"
   || PFFREC.PFFPRTYP == "4")

    PF0H810(); /* scrn 1 format from vrptpm01*/

    PF0HM001.PF0HMCSQ = "Y"; /* trigger scrn 4 display next converse*/
  else
    if (PFFREC.PFFPRTYP == "2"
     || PFFREC.PFFPRTYP == "5")

      PF0H820(); /* scrn 2 format from vrptpm01*/

      PF0HM002.PF0HMCSQ = "Y";
                                   /* trigger scrn 4 display next converse*/
    else
      if (PFFREC.PFFPRTYP == "3")

        PF0H830(); /* scrn 3 format from vrptpm01*/

        PF0HM003.PF0HMCSQ = "Y";
                                   /* trigger scrn 4 dsply next converse*/
      else
        PF0HW01.PFFPRTYP = "3"; /* select screen 3*/
        set PF0HM003.PF0HMDEL skip; /* set delete fields visible*/
        set PF0HM003.PF0HMDLT normal;
        converseLib.validationFailed(228); /* invalid data on file*/
        PFWREC.PFWERRF = "Y";
      end
    end
  end
end // end PF0H343

// scrn 3 delete rptpm
Function PF0H350()
   /* -----------------------------------------------------------;*/
     /* Verify no fields changed except delete indicator.       ;*/
   /* -----------------------------------------------------------;*/

  PF0H391(); /* scrn 3 data entry check*/

  if (PF0HM003.PFESUMNM is modified)
    set PF0HM003.PFESUMNM cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PFWREC.PFWERRF == "Y")
    PF0HW01.PF0HWDCF = "N"; /* delete confirm msg issued flag*/
    set PF0HM003.PF0HMDEL skip; /* set delete fields visible*/
    set PF0HM003.PF0HMDLT normal;
    converseLib.validationFailed(203); /* do not enter values when deleting a*/
                                   /* print param*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Issue delete confirmation message if not already done.  ;*/
   /* -----------------------------------------------------------;*/

  PF0HM003.PF0HMDLT = " "; /* user must reenter 'd' code*/

  if (PF0HW01.PF0HWDCF == "N") /* delete confirm msg issued flag*/
    PF0HW01.PF0HWDCF = "Y"; /* delete confirm msg issued flag*/
    set PF0HM003.PF0HMDEL skip; /* set delete fields visible*/
    set PF0HM003.PF0HMDLT cursor, bold;
    converseLib.validationFailed(122); /* delete requested; re-enter 'd' to confirm*/
    return;
  end

  PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/


   /* -----------------------------------------------------------;*/
     /* Delete rptpm row for print request.                     ;*/
   /* -----------------------------------------------------------;*/

   /* key is already in pffrec from the select*/

  PF0H915(); /* vrptpm01 delete*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end

  converseLib.validationFailed(204); /* print parameter deleted*/
end // end PF0H350

// scrn 3 print (typ 3) display
Function PF0H360()
   /* -----------------------------------------------------------;*/
     /* Verify no fields changed except the summary name.       ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PF0HMDLT is modified)
    set PF0HM003.PF0HMDLT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PF0H391(); /* scrn 3 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(73); /* do not enter values when changing summary name*/
  end


   /* -----------------------------------------------------------;*/
     /* If no errors were found, re-initialize the screen.      ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "N")
    PF0HW01.PFESUMNM = PF0HM003.PFESUMNM; /* save summary name*/
    set PF0HM003 initial; /* clear map*/
    PF0HM003.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved sum name*/
    PF0HM003.XXXCURDT = VGVar.currentShortGregorianDate;
  end


   /* -----------------------------------------------------------;*/
     /* Select the summary attribute row for the summary name.  ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PFESUMNM != " ")
    PFEREC.PFESUMNM = PF0HM003.PFESUMNM;

    PF0H921(); /* vsumat01 select unique*/

    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
      set PF0HM003.PFESUMNM cursor, bold;
      converseLib.validationFailed(62); /* summary name is not on file*/
      PFWREC.PFWERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* if i/o unsuccessful*/
        return;
      else
        PF0HM003.PF0HMDSC = PFEREC.PFESUMDE;
        PF0HM003.PF0HMPRY = PFEREC.PFEPRIND;
        PF0HM003.PFECYCIN = PFEREC.PFECYCIN;
      end
    end
  end


   /* -----------------------------------------------------------;*/
     /* Screen 3 can only be used on summaries with report      ;*/
     /* format (vrptfm01) type 1.  Select the rptfm for this    ;*/
     /* summary and check it's format type.                     ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PFESUMNM != " "
   && SQLCA.VAGen_SQLCODE == 0) /* if i/o successful*/
    PFCREC.PFCREF = PFEREC.PFCREF; /* format reference nbr*/

    PF0H951(); /* vrptfm01 select unique*/

    if (SQLCA.VAGen_SQLCODE != 0) /* if i/o unsuccessful*/
      return;
    end

    if (PFCREC.PFCFMNBR != "01") /* if not report format type 1*/
      set PF0HM003.PFESUMNM cursor, bold;
      converseLib.validationFailed(252); /* only summaries with format type 1 can be*/
      PFWREC.PFWERRF = "Y"; /* printed from this screen*/
    end
  end


   /* -----------------------------------------------------------;*/
     /* Issue an error message if the summary name was not      ;*/
     /* entered.                                                ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PFESUMNM == " ")
    set PF0HM003.PFESUMNM cursor, bold;
    converseLib.validationFailed(35); /* please enter summary name*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
     /* If any errors have occured above, return.               ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Select report attribute row.                            ;*/
   /* -----------------------------------------------------------;*/

  PFDREC.PFDREF = PFEREC.PFDREF;
                                   /* report attribute reference nbr*/

  PF0H941(); /* vrptat01 select unique*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Set up default screen values.                           ;*/
   /* -----------------------------------------------------------;*/

  PF0HM003.PFELGCPG = PFEREC.PFELGCPG; /* logical pages*/
  PF0HM003.XXXUNTXT = " "; /* route to user name*/
  PF0HM003.PF0HMCSQ = "N"; /* change sequence indicator*/
  PF0HM003.XROCD = PF0HW01.PF0HWDPR; /* default printer for this term*/
  if (PF0HW01.PF0HWDPR in XROTBL.XROCD)
    PF0HM003.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex]; /* printer abreviation*/
  else
    PF0HM003.XROABRV = " "; /* printer abreviation*/
  end
  PF0HM003.XXXNDTXT = " "; /* route to department*/
  PF0HM003.XXXNBRCY = 1; /* number of copies*/
  PF0HM003.XXXNLTXT = " "; /* route to location*/
   /* pffprlvl not a field on screen 3*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFDREC.PFICD[PFWSUB] != " ")
      PFIREC.PFICD = PFDREC.PFICD[PFWSUB];

      PF0H931(); /* vfield01 select unique*/

      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM003.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
    else
      PF0HM003.PFIDESC[PFWSUB] = " ";
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFDREC.PFICD[8] != " ")
    PFIREC.PFICD = PFDREC.PFICD[8];

    PF0H931(); /* vfield01 select unique*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PF0HM003.PF0HMPRD = PFIREC.PFIDESC;
  else
    PF0HM003.PF0HMPRD = " ";
  end

  PF0HM003.PFFPRFRS = 0; /* print first occurance*/
  PF0HM003.PF0HMDLT = " "; /* (dark field) delete indicator*/

  PF0HW01.PFESRTEL = PFEREC.PFESRTEL;
  PF0HW01.YISCD = PFEREC.YISCD;
  PF0HW01.PFBISGRP = PFEREC.PFBISGRP;
  PF0HW01.PFESEIND = PFEREC.PFESEIND;
  PF0HW01.PFESQCOL = PFEREC.PFESQCOL;
end // end PF0H360

// scrn 3 process displayed scrn
Function PF0H380()
   /* -----------------------------------------------------------;*/
     /* Edit all fields on the screen.                          ;*/
   /* -----------------------------------------------------------;*/

  PF0H381(); /* scrn 3 edit*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Converse the change sort sequencing screen (scrn 4)     ;*/
     /* if the flag on this screen is 'y'.  Continue            ;*/
     /* conversing the screen until the exit flag is 'y'.       ;*/
       /* If the exit flag is 'y' and there is an error, ezertn ;*/
     /* immediately.  If the exit flag is 'y' but there is no   ;*/
     /* error, check for duplicates before doing an ezertn.     ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PFESUMNM = PF0HM003.PFESUMNM; /* save summary name*/
  PF0HW01.PFESRCNM = " "; /* save source summary name*/
  PF0HW01.PF0HWDSC = PF0HM003.PF0HMDSC; /* save print description*/

  PFWREC.PFWEXT = "N"; /* set scrn 4 exit flag*/
  if (PF0HM003.PF0HMCSQ == "Y")
    PF0HM004.PFESUMNM = " "; /* signals scrn 4 to init from pf0hw01*/
    while (PFWREC.PFWEXT == "N") /* while scrn 4 exit flag is no*/

      PF0H400(); /* scrn 4 converse*/

    end
    PF0HM003.PF0HMCSQ = "N";
     /* if there is an error, ezertn now, else wait*/
     /* to ezertn until after checking for duplicates*/
    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Check if an identical print parameter already exists.   ;*/
   /* -----------------------------------------------------------;*/

  PF0H383(); /* scrn 3 duplicate print chk*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* If screen 4 exit flag is 'y', we just returned from     ;*/
     /* screen 4.  Perform an ezertn so the original screen     ;*/
     /* will be conversed again before the report parameter     ;*/
     /* is created.                                             ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWEXT == "Y") /* if scrn 4 exit flag is yes*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* If user pushed edit key display confirmation message.   ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf12 /* if edit pfkey pushed*/
   || PF0HW01.PF0HWP12 == "Y")     /* or ezeaid eq pf12 flag is yes*/
    PF0HW01.PF0HWP12 = "N"; /* reset ezeaid eq pf12 flag*/
    converseLib.validationFailed(51); /* edit successful; press enter to perform update*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Add the print parameter row to the table.               ;*/
   /* -----------------------------------------------------------;*/

  PF0H385(); /* scrn 3 add print rptpm*/

  PFWREC.PFWRECF = "N"; /* reset records found flag*/
  PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
  PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
end // end PF0H380

// scrn 3 edit
Function PF0H381()
   /* -----------------------------------------------------------;*/
     /* Converse PF remote printer pop-up window, if requested. ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PF0HWP12 = "N"; /* ezeaid eq pf12 flag*/
  if (converseVar.eventKey is pf12) /* if ezeaid is pf12 set flag for later use be-*/
    PF0HW01.PF0HWP12 = "Y"; /* cause windows may change ezeaid*/
  end

  if (PF0HM003.XROCD != " "
   || PF0HM003.XROCD == "?")
    PF0HW01.PF0HWPR0 = PF0HM003.XROCD;
    PF0H187();

    if (PF0HM003.XROCD != "?")
      if (PF0HW01.PF0HWMP1 <= "Z"
       || PF0HW01.PF0HWMP2 <= "Z"
       || PF0HW01.PF0HWMP3 <= "Z"
       || PF0HW01.PF0HWMP4 <= "Z")
        converseLib.validationFailed(61); /* not a valid printer id*/
        PFWREC.PFWERRF = "Y";
      else
        PF0HM003.XROCD = PF0HW01.PF0HWMPR;
      end
    end
  end

  if (PF0HM003.XROCD == "?")

    PF0HM003.XROCD = PF0HW01.PF0HWMPR;

    XPXX001(); /* initialize for window rtn*/

    XX0XW02.XX0XWHDR = "       PROFITABILITY PRINTERS";
    while (XX0XW02.XX0XWEND == "N") /* while pop up active*/
      XPPF040(); /* converse pf xrotbl pop-up window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if the user selected a code*/
      PF0HM003.XROCD = XROTBL.XROCD[XX0XWPIX]; /* save it*/
    else
      PF0HM003.XROCD = " ";
    end
     /* set pf0hm003 page is performed below*/
  end


   /* -----------------------------------------------------------;*/
     /* Move reporting attribute value and product screen       ;*/
     /* fields to working storage, process windows, edit        ;*/
     /* the fields, and move the fields back to the screen.     ;*/
   /* -----------------------------------------------------------;*/

  PF0H831(); /* scrn 3 move attr to pfwrec*/

  XPPF300(); /* window report attribute values*/

  converseLib.clearScreen();
  
                                   /* blank out screen before next converse*/

  if (PFWREC.PFWERRF == "N") /* (only severe errs are flagged in wind.)*/

    XPPF400(); /* edit entered attribute fields*/

  end

  PF0H832(); /* scrn 3 move attr from pfwrec*/


   /* -----------------------------------------------------------;*/
     /* Edit the remaining screen fields.                       ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM003.PF0HMDLT == "D"
   || PF0HM003.PF0HMDLT == " ")
     /* this is okay*/
  else
    set PF0HM003.PF0HMDLT cursor, bold;
    converseLib.validationFailed(205); /* must enter 'd' or blank in delete field*/
    PFWREC.PFWERRF = "Y";
  end

   /* note: PFFPRFRS (print first occurrence) requires no editing*/

  if (PF0HM003.PFFFMCH[8] == "P" /* page break format character*/
   || PF0HM003.PFFFMCH[8] == "D" /* double spacing*/
   || PF0HM003.PFFFMCH[8] == "S" /* single spacing*/
   || PF0HM003.PFFFMCH[8] == " ") /* single spacing - default*/
     /* this is okay*/
  else
    set PF0HM003.PFFFMCH[8] cursor, bold;
    converseLib.validationFailed(230); /* must enter p,d,s, or blank in spacing field*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM003.PF0HMPRD != " ") /* if there is a product attribute*/
    if (PF0HM003.XGPCD != " " /* if there is a product specified*/
     || PF0HM003.SY1STNBR != " "
     || PF0HM003.SY2CLRID != " "
     || PF0HM003.XDMCD != " " 
     || PF0HM003.XQACD != " " 
     || PF0HM003.XLCCD != " ")
      if (PF0HM003.PFFFMCH[8] == " ") /* if there is not a format char*/
        PF0HM003.PFFFMCH[8] = "S"; /* default to single spacing*/
      end
    end
  end

  if (PF0HM003.PF0HMPRD != " " /* if there is a product attribute*/
   && PF0HM003.XGPCD == " "    /* and there is no product specified*/
   && PF0HM003.SY1STNBR == " " 
   && PF0HM003.SY2CLRID == " " 
   && PF0HM003.XDMCD == " "    
   && PF0HM003.XQACD == " "    
   && PF0HM003.XLCCD == " "    
   && PF0HM003.PFFFMCH[8] != " ") /* and there is a format char*/
    set PF0HM003.PFFFMCH[8] cursor, bold;
    converseLib.validationFailed(232); /* cannot enter spacing for an attribute if*/
    PFWREC.PFWERRF = "Y"; /* no value is entered*/
  end

  PFWREC.PFWSUB = 7;
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM003.PFFFMCH[PFWSUB] == "P" /* page break format character*/
     || PF0HM003.PFFFMCH[PFWSUB] == "D" /* double spacing*/
     || PF0HM003.PFFFMCH[PFWSUB] == "S" /* single spacing*/
     || PF0HM003.PFFFMCH[PFWSUB] == " ") /* single spacing - default*/
       /* this is okay*/
    else
      set PF0HM003.PFFFMCH[PFWSUB] cursor, bold;
      converseLib.validationFailed(230); /* must enter p,d,s, or blank in spacing field*/
      PFWREC.PFWERRF = "Y";
    end

    if (PF0HM003.PFIDESC[PFWSUB] != " "  /* if there is an attribute*/
     && PF0HM003.PFDCDVAL[PFWSUB] != " " /* and an attr value is specif*/
     && PF0HM003.PFFFMCH[PFWSUB] == " ")
                                   /* and there is not a format char*/
      PF0HM003.PFFFMCH[PFWSUB] = "S"; /* default to single spacing*/
    end

    if (PF0HM003.PFIDESC[PFWSUB] != " "  /* if there is an attribute*/
     && PF0HM003.PFDCDVAL[PFWSUB] == " " /* and no attr value is specif*/
     && PF0HM003.PFFFMCH[PFWSUB] != " ") /* and there is a format char*/
      set PF0HM003.PFFFMCH[PFWSUB] cursor, bold;
      converseLib.validationFailed(232); /* cannot enter spacing for an attribute if*/
      PFWREC.PFWERRF = "Y"; /* no value is entered*/
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end


   /* -----------------------------------------------------------;*/
     /* Edit the fields unique to the print selection.          ;*/
   /* -----------------------------------------------------------;*/

  PF0H382(); /* scrn 3 edit print (typ 3) flds*/


  if (PF0HM003.PF0HMPRY == "1" /* immediate priority*/
   || PF0HM003.PF0HMPRY == "2") /* overnight priority*/
     /* this is okay*/
  else
    set PF0HM003.PF0HMPRY cursor, bold;
    converseLib.validationFailed(102); /* priority must '1'(immediate) or '2'(overnight)*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM003.PF0HMPRY != "2" /* if the param is not overnight*/
   /* priority*/
   && PFEREC.PFECRTDT == 0     /* and summary has not been created yet*/
   && PFEREC.PFEPRIND == "2")  /* and summary has overnight priority*/
    set PF0HM003.PF0HMPRY cursor, bold;
    converseLib.validationFailed(278); /* sum pri is 2 & it's not created; p*/
                                   /* pri must be 2*/
    PFWREC.PFWERRF = "Y";
  end

   /* note: PF0HMDSC (print desc) requires no editing*/
end // end PF0H381

// scrn 3 edit print (typ 3) flds
Function PF0H382()
   /* PFFPRLVL field is not on this screen.*/

  if (PF0HM003.XXXNLTXT == " ") /* require route to nike location*/
    set PF0HM003.XXXNLTXT cursor, bold;
    converseLib.validationFailed(279); /* route to location must be entered*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0HM003.XXXNBRCY == 0)
    set PF0HM003.XXXNBRCY cursor, bold;
    converseLib.validationFailed(59); /* please enter # of copies desired*/
    PFWREC.PFWERRF = "Y";
  else
    if (PF0HM003.XXXNBRCY > 25)
      set PF0HM003.XXXNBRCY cursor, bold;
      converseLib.validationFailed(60); /* maximum # of copies allowed is 25*/
      PFWREC.PFWERRF = "Y";
    end
  end

   /* ------------------------------------------------------------*/
   /* change processing cycles, 4/2/90, cvo   <=== begin*/
   /* ------------------------------------------------------------*/

  if (PFEREC.PFECYCIN == "F") /* if the summary's cycle is 'f'*/
    if (PF0HM003.PFECYCIN == "F"
     /* then param's cycle must be 'f' or 'o'*/
     || PF0HM003.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM003.PFECYCIN cursor, bold;
      converseLib.validationFailed(266); /* sum cyc is f; prt cyc mst be 'f' or 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "B") /* if the summary's cycle is 'b'*/
    if (PF0HM003.PFECYCIN == "B"
     /* then param's cycle must be 'b' or 'o'*/
     || PF0HM003.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM003.PFECYCIN cursor, bold;
      converseLib.validationFailed(267); /* sum cyc is b; prt cyc mst be 'b' or 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "P") /* if the summary's cycle is 'p'*/
    if (PF0HM003.PFECYCIN == "P"
     /* then param's cycle must be 'p' or 'o'*/
     || PF0HM003.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM003.PFECYCIN cursor, bold;
      converseLib.validationFailed(268); /* sum cycle is p; prt cycle must be 'p' or 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "W") /* if the summary's cycle is 'w'*/
    if (PF0HM003.PFECYCIN == "W"
     /* then param's cycle must be 'w' or 'o'*/
     || PF0HM003.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM003.PFECYCIN cursor, bold;
      converseLib.validationFailed(269); /* sum cycle is w; prt cycle must be w,q,or o*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "Q") /* if the summary's cycle is 'q'*/
    if (PF0HM003.PFECYCIN == "Q"
     /* then param's cycle must be 'q' or 'o'*/
     || PF0HM003.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM003.PFECYCIN cursor, bold;
      converseLib.validationFailed(345); /* sum cycle is q; prt cycle must be q,or o*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN == "O") /* if the summary's cycle is 'o'*/
    if (PF0HM003.PFECYCIN == "O") /* then param's cycle must be 'o' only*/
       /* this is okay*/
    else
      set PF0HM003.PFECYCIN cursor, bold;
      converseLib.validationFailed(270); /* sum cyc is o; prt cyc mst be o*/
      PFWREC.PFWERRF = "Y";
    end
  end

  if (PFEREC.PFECYCIN != "F" /* if summary's cycle ne f,b,p,w,q,o*/
   && PFEREC.PFECYCIN != "B" 
   && PFEREC.PFECYCIN != "P" 
   && PFEREC.PFECYCIN != "W" 
   && PFEREC.PFECYCIN != "Q" 
   && PFEREC.PFECYCIN != "O")
    if (PF0HM003.PFECYCIN == "O")
       /* this is okay*/
    else
      set PF0HM003.PFECYCIN cursor, bold;
      converseLib.validationFailed(270); /* prt cycle must be 'o'*/
      PFWREC.PFWERRF = "Y";
    end
  end
   /* ------------------------------------------------------------*/
   /* change processing cycles, 4/2/90, cvo  <=== end*/
   /* ------------------------------------------------------------*/

  if (PF0HM003.XROCD == " ")
    PF0HM003.XROABRV = " ";
    set PF0HM003.XROCD cursor, bold;
    converseLib.validationFailed(58); /* please enter printer id*/
    PFWREC.PFWERRF = "Y";
  else
    if (PF0HM003.XROCD in XROTBL.XROCD) /* if in remote printer table*/
      if (XROTBL.XROPFFL[sysVar.arrayIndex] == "Y") /* if valid for profitability*/
        PF0HM003.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
      else
        PF0HM003.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
        set PF0HM003.XROCD cursor, bold;
        converseLib.validationFailed(295); /* not a valid printer id for the*/
                                   /* profit. system*/
        PFWREC.PFWERRF = "Y";
      end
    else
      PF0HM003.XROABRV = " ";
      set PF0HM003.XROCD cursor, bold;
      converseLib.validationFailed(61); /* not a valid printer id*/
      PFWREC.PFWERRF = "Y";
    end
  end


  if (PF0HM003.PF0HMCSQ == "Y"
   || PF0HM003.PF0HMCSQ == "N")
     /* this is okay*/
  else
    set PF0HM003.PF0HMCSQ cursor, bold;
    converseLib.validationFailed(264); /* change sort sequence must be 'y' or 'n'*/
    PFWREC.PFWERRF = "Y";
  end


  if (PF0HM003.XXXUNTXT == " ")
    set PF0HM003.XXXUNTXT cursor, bold;
    converseLib.validationFailed(265); /* route to name must be entered*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0H382

// scrn 3 duplicate print check
Function PF0H383()
   /* -----------------------------------------------------------;*/
     /* Open a cursor containing all the print parameters       ;*/
     /* for this summary.  Select each print parameter and      ;*/
     /* check if it is identical to the print parameter being   ;*/
     /* created.  Do not allow duplicate print parameters.      ;*/
   /* -----------------------------------------------------------;*/

  PFFREC.PFESUMNM = PF0HM003.PFESUMNM;

  PF0H911(); /* vrptpm01 select scan*/

  if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
    return;
  end


   /* if this point is reached,*/
   /* the select scan was successful (sqlca.sqlcode eq 0)*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PFWREC.PFWERRF == "N")

    PF0H912(); /* vrptpm01 select next*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/

      PF0H384(); /* scrn 3 compare against rptpm*/

    end
  end

  PF0H913(); /* vrptpm01 close scan*/
end // end PF0H383

// scrn 3 compare against rptpm
Function PF0H384()
   /* -----------------------------------------------------------;*/
     /* As soon as a single field is found that differs,        ;*/
     /* return to the calling process.  This means the print    ;*/
     /* parameter being created is not a duplicate of this      ;*/
     /* existing parameter.  If all the fields are identical    ;*/
     /* except for the summary name (PFESUMNM), an error        ;*/
     /* message will be issued.                                 ;*/
   /* -----------------------------------------------------------;*/

   /* PFESUMNM will always differ*/
   /* PFANXTNO not a screen field*/

  if (PFFREC.PFFRPTDS != PF0HM003.PF0HMDSC
   /* PFFPRLVL not on this screen*/
   || PFFREC.XROCD != PF0HM003.XROCD
   /* PFFDTFMI not a screen field*/
   || PFFREC.PFFPRTYP != "3"
   || PFFREC.XXXNBRCY != PF0HM003.XXXNBRCY
   || PFFREC.PFFPRTYI != PF0HM003.PF0HMPRY
   || PFFREC.PFFPRFRS != PF0HM003.PFFPRFRS
   || PFFREC.PFECYCIN != PF0HM003.PFECYCIN)
    return;
  end

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFFREC.PFFFMCH[PFWSUB] != PF0HM003.PFFFMCH[PFWSUB]
     || PFFREC.PFICD[PFWSUB] != PFDREC.PFICD[PFWSUB]
     || PFFREC.PFDCDVAL[PFWSUB] != PF0HM003.PFDCDVAL[PFWSUB])
      return;
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFFREC.PFFFMCH[8] != PF0HM003.PFFFMCH[8]
   || PFFREC.PFICD[8] != PFDREC.PFICD[8])
    return;
  end

  if (PFFREC.XGPCD != PF0HM003.XGPCD
   || PFFREC.SY1STNBR != PF0HM003.SY1STNBR
   || PFFREC.SY2CLRID != PF0HM003.SY2CLRID
   || PFFREC.XDMCD != PF0HM003.XDMCD
   || PFFREC.XQACD != PF0HM003.XQACD
   || PFFREC.XLCCD != PF0HM003.XLCCD)
    return;
  end

  if (PFFREC.PFESRTEL != PF0HW01.PFESRTEL
   || PFFREC.YISCD != PF0HW01.YISCD
   || PFFREC.PFBISGRP != PF0HW01.PFBISGRP
   || PFFREC.PFESEIND != PF0HW01.PFESEIND
   || PFFREC.PFESQCOL != PF0HW01.PFESQCOL)
    return;
  end

   /* XXXUSRID not a screen field*/

  if (PFFREC.XXXUNTXT != PF0HM003.XXXUNTXT
   || PFFREC.XXXNLTXT != PF0HM003.XXXNLTXT
   || PFFREC.XXXNDTXT != PF0HM003.XXXNDTXT)
    return;
  end

   /* ZZZSDT, ZZZCHGDT, ZZZCHGTM, and ZZZCHGCT not screen fields*/

   /* if this point is reached then the row and the screen are*/
   /* identical (except for the summary name).  This is an*/
   /* error.*/

  set PF0HM003.PFESUMNM cursor, bold;
  converseLib.validationFailed(217); /* identical print parameter already exists*/
  PFWREC.PFWERRF = "Y";
end // end PF0H384

// scrn 3 add print rptpm
Function PF0H385()
   /* -----------------------------------------------------------;*/
     /* Select vpfctl01 to get the next sequence nbr (PFANXTNO) ;*/
   /* -----------------------------------------------------------;*/

  PF0H971(); /* vpfctl01 select unique*/

  if (PFWREC.PFWERRF == "Y") /* if db access unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Move screen to PFFREC.                                  ;*/
   /* -----------------------------------------------------------;*/

  set PFFREC empty;
  PFFREC.PFESUMNM = PF0HM003.PFESUMNM;
  PFFREC.PFANXTNO = PFAREC.PFANXTNO;
  PFFREC.PFFRPTDS = PF0HM003.PF0HMDSC;
  PFFREC.PFFPRLVL = " ";
  PFFREC.XROCD = PF0HM003.XROCD;
  PFFREC.PFFDTFMI = " ";
  PFFREC.PFFPRTYP = "3"; /* print in condensed format*/
  PFFREC.XXXNBRCY = PF0HM003.XXXNBRCY;
  PFFREC.PFFPRTYI = PF0HM003.PF0HMPRY;
  PFFREC.PFFPRFRS = PF0HM003.PFFPRFRS;
  PFFREC.PFECYCIN = PF0HM003.PFECYCIN;

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PFFREC.PFFFMCH[PFWSUB] = PF0HM003.PFFFMCH[PFWSUB];
    PFFREC.PFICD[PFWSUB] = PFDREC.PFICD[PFWSUB];
    PFFREC.PFDCDVAL[PFWSUB] = PF0HM003.PFDCDVAL[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PFFREC.PFFFMCH[8] = PF0HM003.PFFFMCH[8];
  PFFREC.PFICD[8] = PFDREC.PFICD[8];
  PFFREC.PFDCDVAL[8] = " ";

  PFFREC.XGPCD = PF0HM003.XGPCD;
  PFFREC.SY1STNBR = PF0HM003.SY1STNBR;
  PFFREC.SY2CLRID = PF0HM003.SY2CLRID;
  PFFREC.XDMCD = PF0HM003.XDMCD;
  PFFREC.XQACD = PF0HM003.XQACD;
  PFFREC.XLCCD = PF0HM003.XLCCD;

  PFFREC.PFESRTEL = PF0HW01.PFESRTEL;
  PFFREC.YISCD = PF0HW01.YISCD;
  PFFREC.PFBISGRP = PF0HW01.PFBISGRP;
  PFFREC.PFESEIND = PF0HW01.PFESEIND;
  PFFREC.PFESQCOL = PF0HW01.PFESQCOL;

  PFFREC.XXXUNTXT = PF0HM003.XXXUNTXT;
  PFFREC.XXXNLTXT = PF0HM003.XXXNLTXT;
  PFFREC.XXXNDTXT = PF0HM003.XXXNDTXT;


   /* -----------------------------------------------------------;*/
     /* Add print parameter.                                    ;*/
   /* -----------------------------------------------------------;*/

  PF0H914(); /* vrptpm01 add*/

  if (PFWREC.PFWERRF == "Y") /* if db insert unsuccessful*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Update vpfctl01 to increment next sequence nbr          ;*/
     /* (PFANXTNO).                                             ;*/
   /* -----------------------------------------------------------;*/

  PF0H972(); /* vpfctl01 update 2*/

  if (PFWREC.PFWERRF == "Y") /* if db update unsuccessful*/
    return;
  end

  converseLib.validationFailed(207); /* print parameter created*/
end // end PF0H385

// scrn 3 data entry check
Function PF0H391()
   /* -----------------------------------------------------------;*/
    /* Check all screen fields except sum name, source sum nm,  ;*/
    /* & delete for data entry.  Highlight, set the cursor, and ;*/
    /* set the error flag for every field that has changed.     ;*/
   /* -----------------------------------------------------------;*/

   /* note that PF0Hm003.PF0HMDLT is not tested in this process*/

  if (PF0HM003.PFFPRFRS is modified)
    set PF0HM003.PFFPRFRS cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.XLCCD is modified)
    set PF0HM003.XLCCD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.XQACD is modified)
    set PF0HM003.XQACD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.XDMCD is modified)
    set PF0HM003.XDMCD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.SY2CLRID is modified)
    set PF0HM003.SY2CLRID cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.SY1STNBR is modified)
    set PF0HM003.SY1STNBR cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.XGPCD is modified)
    set PF0HM003.XGPCD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM003.PFFFMCH[8] is modified)
    set PF0HM003.PFFFMCH[8] cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  PFWREC.PFWSUB = 7;
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM003.PFDCDVAL[PFWSUB] is modified)
      set PF0HM003.PFDCDVAL[PFWSUB] cursor, bold;
      PFWREC.PFWERRF = "Y";
    end
    if (PF0HM003.PFFFMCH[PFWSUB] is modified)
      set PF0HM003.PFFFMCH[PFWSUB] cursor, bold;
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end

   /* PFFPRLVL field is not on this screen*/
  if (PF0HM003.XXXNLTXT is modified)
    set PF0HM003.XXXNLTXT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.XXXNBRCY is modified)
    set PF0HM003.XXXNBRCY cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.PFECYCIN is modified)
    set PF0HM003.PFECYCIN cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.XXXNDTXT is modified)
    set PF0HM003.XXXNDTXT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.XROCD is modified)
    set PF0HM003.XROCD cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.PF0HMCSQ is modified)
    set PF0HM003.PF0HMCSQ cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.XXXUNTXT is modified)
    set PF0HM003.XXXUNTXT cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.PF0HMPRY is modified)
    set PF0HM003.PF0HMPRY cursor, bold;
    PFWREC.PFWERRF = "Y";
  end
  if (PF0HM003.PF0HMDSC is modified)
    set PF0HM003.PF0HMDSC cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

   /* note that PF0Hm003.PFESUMNM is not tested in this process*/
end // end PF0H391

// scrn 4 converse
Function PF0H400()
   /* -----------------------------------------------------------;*/
     /* Converse 'CHANGE SORT SEQUENCE' screen                  ;*/
   /* -----------------------------------------------------------;*/

   /* -----------------------------------------------------------;*/
     /* Initialize scrn 4 from PF0HW01 rec if PF0HM004.PFESUMNM ;*/
     /* EQ ' '.  This field is used as a flag.                  ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM004.PFESUMNM == " ")

    PF0H410(); /* scrn 4 move from pf0hw01*/

  end


   /* -----------------------------------------------------------;*/
     /* Set screen field attributes.  If this process was       ;*/
     /* performed by one of the print options rather than one   ;*/
     /* of the create new summary options, darken the source    ;*/
     /* summary name fields.  If the records found flag is 'n'  ;*/
     /* protect all the screen fields.  If the user is using    ;*/
     /* PF19, the flag will be 'n'.                             ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "1" /* if any of the PRINT options*/
   || PF0HW01.PFFPRTYP == "2" 
   || PF0HW01.PFFPRTYP == "3")
    set PF0HM004.PF0HMSNL skip, invisible;
                                   /* darken source sum name literal*/
    set PF0HM004.PFESRCNM skip, invisible; /* darken source sum name*/
  end

  if (PFWREC.PFWRECF == "N") /* if records found flag 'n' (true while*/
                                   /* pf19ing)*/
    set PF0HM004.XXXPRCNM cursor;
    PFWREC.PFWSUB = 1;
    while (PFWREC.PFWSUB <= 8)
      set PF0HM004.PF0HMELE[PFWSUB] skip;
      PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
    end
    set PF0HM004.PF0HMCLS skip;
    set PF0HM004.PF0HMDEO skip;
    set PF0HM004.PF0HMASO skip;
    set PF0HM004.PFESQCOL skip;
    set PF0HM004.CATOAP skip;
    set PF0HM004.CAITEM skip;
  end


  PF1REC.PF1EZEMN = converseVar.validationMsgNum; /* save msg for possible bridge*/

  if (PFWREC.PFWMSG != " ")
    PF0HM004.VAGen_EZEMSG = PFWREC.PFWMSG;
  end

  converse PF0HM004 ;

  PFWREC.PFWERRF = "N"; /* reset error flag*/
  PFWREC.PFWMSG = " "; /* clear message line*/
  PF0HM004.VAGen_EZEMSG = " ";


   /* -----------------------------------------------------------;*/
     /* if the user was reading through the parameters using    ;*/
     /* pf19 before screen 4 was entered, ignore any input on   ;*/
     /* screen 4 and exit.                                      ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PF0HWP19 == "N") /* first pf19 for session flag*/
    if (converseVar.eventKey is pf19)
       /* this is okay*/
    else
      converseLib.validationFailed(282); /* pfkey ignored; should continue using pf19 on*/
    end /* the chg seq screen*/
    PFWREC.PFWEXT = "Y"; /* set scrn 4 exit flag*/
    return; /* return*/
  end


   /* -----------------------------------------------------------;*/
     /* check for fastpath, pf & pa keys                        ;*/
   /* -----------------------------------------------------------;*/

  PF0H420(); /* scrn 4 fastpath, pf & pa keys*/

  if (PFWREC.PFWEXT == "Y" /* if scrn 4 exit flag set*/
   || PFWREC.PFWERRF == "Y") /* or an error occured*/
    return; /* return*/
  end


   /* -----------------------------------------------------------;*/
     /* check security                                          ;*/
   /* -----------------------------------------------------------;*/

  PF0H870(); /* check add security*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* These 3 pf keys transfer the user to one of 3 other     ;*/
     /* pf applications.  data is saved before the transfer,    ;*/
     /* allowing the user to return to the point at which he or ;*/
     /* she left.  Transfer occurs in the routine xppf200.      ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf14 /* if bridge pf key pushed*/
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf16)

    PF0H430(); /* scrn 4 pfkey bridge out*/

    return;
  end


   /* -----------------------------------------------------------;*/
     /* scrn 4 edit                                             ;*/
   /* -----------------------------------------------------------;*/

  PF0H440(); /* scrn 4 edit*/

  if (PFWREC.PFWERRF == "Y")
    return;
  end


   /* -----------------------------------------------------------;*/
     /* save changes in working storage if enter pushed.        ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is pf12 /* if edit pfkey pushed*/
   || PF0HW01.PF0HWP12 == "Y")     /* or ezeaid eq pf12 flag is yes*/
    PF0HW01.PF0HWP12 = "N"; /* reset ezeaid eq pf12 flag*/
    converseLib.validationFailed(274); /* edit succ.; press enter to return to parm scrn*/
    return;
  end


  PF0H450(); /* scrn 4 save in pf0hw01*/


   /* Note that the following message displays on the*/
   /* calling screen, not screen 4.*/
  converseLib.validationFailed(51); /* edit successful; press enter to perform update*/

  PFWREC.PFWEXT = "Y"; /* set scrn 4 exit flag*/
end // end PF0H400

// scrn 4 move from pf0hw01
Function PF0H410()
   /* -----------------------------------------------------------;*/
      /* Move display only fields from PFEREC and PF0hW01 to    ;*/
      /* the screen.                                            ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM004 initial;
  PF0HM004.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0HM004.PFESUMNM = PF0HW01.PFESUMNM;
  if (PF0HW01.PFFPRTYP == "1" /* if any of the PRINT options*/
   || PF0HW01.PFFPRTYP == "2" 
   || PF0HW01.PFFPRTYP == "3")
     /* move summary desc to pfesumde*/
    PF0HM004.PFESUMDE = PFEREC.PFESUMDE;
  else
                                   /* else it's a create new summary option*/
     /* move new summary desc to pfesumde*/
    PF0HM004.PFESUMDE = PF0HW01.PF0HWDSC;
  end
  PF0HM004.PFESRCNM = PF0HW01.PFESRCNM;
  PF0HM004.PFCREF = PFEREC.PFCREF;
  PF0HM004.PFBREF = PFEREC.PFBREF;
  PF0HM004.PFDREF = PFEREC.PFDREF;
  PF0HM004.PFABSPRM = PFEREC.PFABSPRM;
  PF0HM004.PFABSPRY = PFEREC.PFABSPRY;


   /* -----------------------------------------------------------;*/
      /* Move the user changeable fields from PF0HW01 to the    ;*/
      /* screen.                                                ;*/
        /* The following 5 PF0HW01 fields contain the 'default' ;*/
      /* sort parameters.  These are initially taken from       ;*/
      /* the vsumat01 row.  If the user makes changes on        ;*/
      /* scrn 4 the changes are saved to these fields when      ;*/
      /* scrn 4 is exited.  If the user re-enters scrn 4        ;*/
      /* then these new values are displayed, and are the       ;*/
      /* new 'defaults'.  If the user pushes PA2 - reset,       ;*/
      /* these values are re-displayed.                         ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFESRTEL == "01")
    PF0HM004.PF0HMELE[1] = "X";
  else
    if (PF0HW01.PFESRTEL == "02")
      PF0HM004.PF0HMELE[2] = "X";
    else
      if (PF0HW01.PFESRTEL == "03")
        PF0HM004.PF0HMELE[3] = "X";
      else
        if (PF0HW01.PFESRTEL == "04")
          PF0HM004.PF0HMELE[4] = "X";
        else
          if (PF0HW01.PFESRTEL == "05")
            PF0HM004.PF0HMELE[5] = "X";
          else
            if (PF0HW01.PFESRTEL == "06")
              PF0HM004.PF0HMELE[6] = "X";
            else
              if (PF0HW01.PFESRTEL == "07")
                PF0HM004.PF0HMELE[7] = "X";
              else
                if (PF0HW01.PFESRTEL == "08")
                  PF0HM004.PF0HMELE[8] = "X";
                else
                  if (PF0HW01.PFESRTEL == "09")
                    PF0HM004.PF0HMCLS = PF0HW01.YISCD;
                  else
                    if (PF0HW01.PFESRTEL == "10")
                      PF0HM004.PF0HMCLS = PF0HW01.PFBISGRP;
                    else
                      PF0HM004.PF0HMELE[1] = PF0HW01.PFESRTEL;
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

  if (PF0HW01.PFESEIND == "D")
    PF0HM004.PF0HMDEO = "X";
  else
    if (PF0HW01.PFESEIND == "A")
      PF0HM004.PF0HMASO = "X";
    else
      PF0HM004.PF0HMDEO = PF0HW01.PFESEIND;
    end
  end

  PF0HM004.PFESQCOL = PF0HW01.PFESQCOL;
end // end PF0H410

// scrn 4 fastpath, pf & pa keys
Function PF0H420()
  set PF0HM004.PFESUMNM initialAttributes;
  set PF0HM004.PFESUMDE initialAttributes;
  set PF0HM004.PF0HMSNL initialAttributes;
  set PF0HM004.PFESRCNM initialAttributes;
  set PF0HM004.PFCREF initialAttributes;
  set PF0HM004.PFBREF initialAttributes;
  set PF0HM004.PFDREF initialAttributes;
  set PF0HM004.PFABSPRM initialAttributes;
  set PF0HM004.PFABSPRY initialAttributes;
  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 8)
    set PF0HM004.PF0HMELE[PFWSUB] initialAttributes;
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  set PF0HM004.PF0HMCLS initialAttributes;
  set PF0HM004.PF0HMDEO initialAttributes;
  set PF0HM004.PF0HMASO initialAttributes;
  set PF0HM004.PFESQCOL initialAttributes;
  set PF0HM004.CATOAP initialAttributes;
  set PF0HM004.CAITEM initialAttributes;

   /* -----------------------------------------------------------;*/
     /* Check for fastpath exit request.  Fastpath out is only  ;*/
     /* allowed if no data has been entered anywhere else on    ;*/
     /* the screen.  If other data has been entered, put cursor ;*/
     /* on the bad field and send an error message.  Do not     ;*/
     /* allow fastpath back into same application.              ;*/
   /* -----------------------------------------------------------;*/


  if (PF0HM004.CATOAP != " " /* if fastpath*/
   || PF0HM004.CAITEM != " ")
    if (PF0HM004.CATOAP == "PF0H") /* if fastpath into same appl*/
      set PF0HM004.CATOAP cursor, bold;
      converseLib.validationFailed(10); /* cannot transfer to requested screen*/
       /* wait to set pfwerrf until after the following process*/
    end

    PF0H491(); /* scrn 4 data entry check*/

    if (PFWREC.PFWERRF == "Y") /* if an error occured*/
      converseLib.validationFailed(2); /* do not enter data if using fastpath option*/
    end
    if (PF0HM004.CATOAP == "PF0H") /* if fastpath into same appl*/
      PFWREC.PFWERRF = "Y"; /* set error flag for msg 10 above*/
    end

    if (converseVar.eventKey not enter)
      converseLib.validationFailed(190); /* must press enter when using fastpath*/
      PFWREC.PFWERRF = "Y";
    end

    if (PFWREC.PFWERRF == "Y") /* if any errors occured*/
      return; /* return*/
    else /* else*/
      COMMAREA.CATOAP = PF0HM004.CATOAP; /* allow fastpath*/
      COMMAREA.CAITEM = PF0HM004.CAITEM;
      PFWREC.PFWEOAF = "Y";
      PFWREC.PFWEXT = "Y"; /* set scrn 4 exit flag*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end


   /* -----------------------------------------------------------;*/
     /* Check for PF and PA key entries.                        ;*/
   /* -----------------------------------------------------------;*/

  if (converseVar.eventKey is enter)
      /* no action*/
  else

    PF0H421(); /* process PF & PA keys*/

  end
end // end PF0H420

// scrn 4 process PF & PA keys
Function PF0H421()
  if (converseVar.eventKey is pf1) /* help*/
    XSPF1();
    PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
    PFWREC.PFWERRF = "Y"; /* set error flag*/
    return;
  end


  if (converseVar.eventKey is pf3) /* if pf3 exit key pressed*/
    converseLib.validationFailed(272); /* sort sequence parameter changes canceled*/
    PFWREC.PFWEXT = "Y"; /* set scrn 4 exit flag*/
    return;
  end


  if (converseVar.eventKey is pf4) /* return to main system menu*/
    XSPF4();
    PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
    PFWREC.PFWERRF = "Y"; /* set error flag*/
    return;
  end


  if (converseVar.eventKey is pf12 /* edit pf key*/
   || converseVar.eventKey is pf14 /* bridge out pfkey*/
   || converseVar.eventKey is pf15 /* bridge out pfkey*/
   || converseVar.eventKey is pf16) /* bridge out pfkey*/
    return; /* process later*/
  end


  if (converseVar.eventKey is pf19) /* if read next pfkey*/
    PFWREC.PFWEXT = "Y"; /* set scrn 4 exit flag*/
    return;
  end


  if (converseVar.eventKey is pa2) /* cancel key*/

     /* signals scrn 4 to initialize from pf0hw01*/
    PF0HM004.PFESUMNM = " ";

    converseLib.clearScreen();
    
    converseLib.validationFailed(0); /* clear any leftover message*/
    PFWREC.PFWMSG = " ";
    converseLib.validationFailed(189); /* pa2 pressed; screen changes aborted*/
    PFWREC.PFWERRF = "Y";
    return;
  end


  converseLib.validationFailed(1); /* fall through error - invalid pfkey*/
  PFWREC.PFWERRF = "Y"; /* signal error*/
end // end PF0H421

// scrn 4 pfkey bridge out
Function PF0H430()
   /* -----------------------------------------------------------;*/
     /* Verify nothing is changed on the screen.                ;*/
   /* -----------------------------------------------------------;*/

  PF0H491(); /* scrn 4 data entry check*/

  if (PFWREC.PFWERRF == "Y")
    converseLib.validationFailed(216); /* do not enter values when using pf14, 15, or 16*/
    return;
  end


   /* -----------------------------------------------------------;*/
     /* Move the fields from the screen that was conversed      ;*/
     /* prior to scrn 4 (the 'calling' screen) to the bridge    ;*/
     /* record.                                                 ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HW01.PFFPRTYP == "1"
   || PF0HW01.PFFPRTYP == "4")

    PF0H840(); /* scrn 1 bridge out PF1REC load*/

  else
    if (PF0HW01.PFFPRTYP == "2"
     || PF0HW01.PFFPRTYP == "5")

      PF0H850(); /* scrn 2 bridge out PF1REC load*/

    else
      if (PF0HW01.PFFPRTYP == "3")

        PF0H860(); /* scrn 3 bridge out PF1REC load*/

      end
    end
  end


   /* -----------------------------------------------------------;*/
     /* These 5 PF1REC fields are used to store the ACTUAL      ;*/
     /* updateable scrn 4 fields.                               ;*/
       /* There are also 5 different PF1REC fields that are     ;*/
     /* used to store the PF0HW01 working storage fields for    ;*/
     /* scrn 4.  These fields contain the 'default' sort        ;*/
     /* fields from the vsumat01 row or the last saved updates  ;*/
     /* to these from scrn 4.  They are saved in PF1REC in      ;*/
     /* the processes performed above that load PF1REC.         ;*/
       /* These two sets of fields will differ if changes to    ;*/
     /* scrn 4 are made but not saved yet at the time of the    ;*/
     /* bridge out.                                             ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 8)
    PF1REC.PF1ELEM[PFWSUB] = PF0HM004.PF0HMELE[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PF1REC.PF1CLS = PF0HM004.PF0HMCLS;
  PF1REC.PF1DEO = PF0HM004.PF0HMDEO;
  PF1REC.PF1ASO = PF0HM004.PF0HMASO;
  PF1REC.PF1COLUM = PF0HM004.PFESQCOL;


   /* -----------------------------------------------------------;*/
     /* Set the scrn 4 active indicator.  Causes the bridge IN  ;*/
     /* routine to converse scrn 4 instead of the calling scrn. ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PF1S4AIN = "Y"; /* scrn 4 active indicator*/


   /* -----------------------------------------------------------;*/
     /* Bridge out.                                             ;*/
   /* -----------------------------------------------------------;*/

  XPPF200(); /* pf14,15,16,17 bridge routine*/
end // end PF0H430

// scrn 4 edit
Function PF0H440()
   /* -----------------------------------------------------------;*/
    /* Select the report format row, if it is not already       ;*/
    /* selected, for use in editing the sort column.            ;*/
   /* -----------------------------------------------------------;*/

  if (PFCREC.PFCREF != PFEREC.PFCREF)
                                   /* if have not already selected this row*/
    PFCREC.PFCREF = PFEREC.PFCREF; /* format reference nbr*/

    PF0H951(); /* vrptfm01 select unique*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
  end


   /* -----------------------------------------------------------;*/
    /* Edit the sort column.                                    ;*/
   /* -----------------------------------------------------------;*/

  if (PFCREC.PFCFMNBR == "01"
   || PFCREC.PFCFMNBR == "05")
    if (PF0HM004.PF0HMELE[8] == " ")
      if (PF0HM004.PFESQCOL >= 1
       && PF0HM004.PFESQCOL <= 13)
         /* this is okay*/
      else
        set PF0HM004.PFESQCOL cursor, bold;
        converseLib.validationFailed(52); /* column # must be 1 thru 13 for format type*/
        PFWREC.PFWERRF = "Y";
      end
    end
  end

  if (PFCREC.PFCFMNBR == "02"
   || PFCREC.PFCFMNBR == "03"
   || PFCREC.PFCFMNBR == "04")
    if (PF0HM004.PF0HMELE[8] == " ")
      if (PF0HM004.PFESQCOL >= 1
       && PF0HM004.PFESQCOL <= 12)
         /* this is okay*/
      else
        set PF0HM004.PFESQCOL cursor, bold;
        converseLib.validationFailed(53); /* column # must be 1 thru 12 for format type*/
        PFWREC.PFWERRF = "Y";
      end
    end
  end

  if (PF0HM004.PF0HMELE[8] != " " /* element is sequential*/
   && PF0HM004.PFESQCOL != 0)     /* sort column is entered*/
    set PF0HM004.PF0HMELE[8] bold;
    set PF0HM004.PFESQCOL cursor, bold;
    converseLib.validationFailed(242); /* col nbr can't be entered when element is seq*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM004.PF0HMELE[8] == " " /* element is not sequential*/
   && PF0HM004.PFESQCOL == 0)     /* sort column is entered*/
    set PF0HM004.PF0HMELE[8] bold;
    set PF0HM004.PFESQCOL cursor, bold;
    converseLib.validationFailed(241); /* col nbr must be entered when element*/
                                   /* is not seq*/
    PFWREC.PFWERRF = "Y";
  end


   /* -----------------------------------------------------------;*/
    /* Edit ORDER section. Must select ASC or DSC, not both.    ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM004.PF0HMASO != " " /* if ascending order chosen*/
   && PF0HM004.PF0HMDEO != " ") /* and descending order also chosen*/
    set PF0HM004.PF0HMDEO cursor, bold;
    set PF0HM004.PF0HMASO bold;
    converseLib.validationFailed(44); /* do not sel more than one entry from this sect*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM004.PF0HMASO == " " /* if ascending order not chosen*/
   && PF0HM004.PF0HMDEO == " ") /* and descending order not chosen*/
    set PF0HM004.PF0HMDEO cursor, bold;
    set PF0HM004.PF0HMASO bold;
    converseLib.validationFailed(43); /* please select 1 entry from this section*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM004.PF0HMELE[8] != " " /* if sequential element selected*/
   && PF0HM004.PF0HMASO == " "    /* and ascending order not chosen*/
   && PF0HM004.PF0HMDEO == " ")   /* and descending order not chosen*/
    set PF0HM004.PF0HMELE[8] bold;
    set PF0HM004.PF0HMASO cursor, bold;
    converseLib.validationFailed(273); /* ascending order required when element is seq*/
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM004.PF0HMELE[8] != " " /* if sequential element selected*/
   && PF0HM004.PF0HMDEO != " ")   /* and descending order chosen*/
    set PF0HM004.PF0HMELE[8] bold;
    set PF0HM004.PF0HMDEO cursor, bold;
    converseLib.validationFailed(243); /* desc order not allowed when element is seq*/
    PFWREC.PFWERRF = "Y";
  end

   /* -----------------------------------------------------------;*/
    /* Check ELEMENT section for entries.  Allow only one       ;*/
    /* choice.  If more than one, highlight all choices.        ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM004.PF0HMCLS != 0) /* if i/s class entered*/

    PF0H441(); /* scrn 4 edit i/s class*/

  end


  PFWREC.PFWCOUNT = 0; /* initialize element section entry counter*/
  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 8)
    if (PF0HM004.PF0HMELE[PFWSUB] != " ") /* if ELEMENT selected*/
      PFWREC.PFWCOUNT = PFWREC.PFWCOUNT + 1;
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  if (PF0HM004.PF0HMCLS != 0) /* if i/s class selected*/
    PFWREC.PFWCOUNT = PFWREC.PFWCOUNT + 1;
  end

   /* Must have one and only one element or i/s class selected.*/

  if (PFWREC.PFWCOUNT == 0) /* if no element or i/s class entered*/
    set PF0HM004.PF0HMELE[1] cursor, bold;
    converseLib.validationFailed(43); /* please select 1 entry from this section*/
    PFWREC.PFWERRF = "Y";
  end

  if (PFWREC.PFWCOUNT > 1) /* if more than one element or i/s class entered*/
     /* brighten all fields entered*/
    if (PF0HM004.PF0HMCLS != 0) /* if i/s class entered*/
      set PF0HM004.PF0HMCLS cursor, bold;
    end
    PFWREC.PFWSUB = 8;
    while (PFWREC.PFWSUB >= 1)
      if (PF0HM004.PF0HMELE[PFWSUB] != " ") /* if ELEMENT entered*/
        set PF0HM004.PF0HMELE[PFWSUB] cursor, bold;
      end
      PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
    end
    converseLib.validationFailed(44); /* do not sel more than one entry from this sect*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0H440

// scrn 4 edit i/s class
Function PF0H441()
   /* -----------------------------------------------------------;*/
      /* This routine verifies the i/s class entered.           ;*/
      /* If the i/s class # ends in a '0', the yistbl csp       ;*/
      /* table will be scanned for validation.  If the i/s      ;*/
      /* class # ending is > than '0', the i/s group #s         ;*/
      /* are selected from the database into a ws table,        ;*/
      /* which is then used to validate the i/s class #.        ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PF0HWCLS = PF0HM004.PF0HMCLS; /* move i/s class to w/s*/

  if (PF0HW01.PF0HWCL2 == 0) /* if last digit is 0, an i/s class was entered*/
    if (PF0HW01.PF0HWCLS in YISTBL.YISCD) /* check the yis table*/
      return; /* if valid i/s class, exit routine ok*/
    else
      set PF0HM004.PF0HMCLS cursor, bold;
      converseLib.validationFailed(038); /* i/s group ref # not valid*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end

   /* at this point, we know the*/
   /* last digit is not 0, therefore an i/s group was entered*/


  if (PF0HW01.PFBREF != PFEREC.PFBREF)
                                   /* if table not already loaded for i/s*/
    PF0HW01.PFBREF = PFEREC.PFBREF; /* save table key in ws*/
    PFWREC.PFWSUB = 1;
    while (PFWREC.PFWSUB <= 200)
      PF0HW01.PF0HWISC[PFWSUB] = 0;
      PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
    end

    PFBREC.PFBREF = PFEREC.PFBREF; /* move table key*/

    PF0H961(); /* visgrp01 select scan*/

    PFWREC.PFWSUB = 1;
    while (PFBREC.PFBREF == PFEREC.PFBREF
     && SQLCA.VAGen_SQLCODE == 0
     && PFWREC.PFWSUB <= 200)

      PF0H962(); /* visgrp01 select next*/

      if (SQLCA.VAGen_SQLCODE == +0 /* if table action successful*/
       && PFBREC.PFBREF == PFEREC.PFBREF)
        PF0HW01.PF0HWISC[PFWSUB] = PFBREC.YISCD[2] + PFBREC.PFBISGRP;
        PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
      else
        if (SQLCA.VAGen_SQLCODE == +100 /* if row not found*/
         || PFBREC.PFBREF != PFEREC.PFBREF)
           /* these conditions will cause an exit from this while loop*/
        end
      end
    end

    PF0H963(); /* visgrp01 close scan*/

  end


  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 200) /* scan i/s groups saved in w/s*/
    if (PF0HW01.PF0HWCLS == PF0HW01.PF0HWISC[PFWSUB]) /* if i/s group found*/
      return; /* this is okay, exit the routine*/
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end


   /* fall through error*/
  set PF0HM004.PF0HMCLS cursor, bold;
  converseLib.validationFailed(046); /* income statement class not valid for the i/s grp ref#*/
  PFWREC.PFWERRF = "Y";
end // end PF0H441

// scrn 4 save in pf0hw01
Function PF0H450()
   /* -----------------------------------------------------------;*/
      /* Move the user changeable fields from the screen to     ;*/
      /* PF0HW01.                                               ;*/
   /* -----------------------------------------------------------;*/

  PF0HW01.PFESRTEL = "00";
  PF0HW01.YISCD = 0;
  PF0HW01.PFBISGRP = 0;

  if (PF0HM004.PF0HMELE[1] != " ")
    PF0HW01.PFESRTEL = "01";
  else
    if (PF0HM004.PF0HMELE[2] != " ")
      PF0HW01.PFESRTEL = "02";
    else
      if (PF0HM004.PF0HMELE[3] != " ")
        PF0HW01.PFESRTEL = "03";
      else
        if (PF0HM004.PF0HMELE[4] != " ")
          PF0HW01.PFESRTEL = "04";
        else
          if (PF0HM004.PF0HMELE[5] != " ")
            PF0HW01.PFESRTEL = "05";
          else
            if (PF0HM004.PF0HMELE[6] != " ")
              PF0HW01.PFESRTEL = "06";
            else
              if (PF0HM004.PF0HMELE[7] != " ")
                PF0HW01.PFESRTEL = "07";
              else
                if (PF0HM004.PF0HMELE[8] != " ")
                  PF0HW01.PFESRTEL = "08";
                else
                  if (PF0HM004.PF0HMCLS != 0)
                    PF0HW01.PF0HWCLS = PF0HM004.PF0HMCLS;
                    if (PF0HW01.PF0HWCL2 == 0) /* if last PF0HWCLS digit 0*/
                      PF0HW01.PFESRTEL = "09";
                      PF0HW01.YISCD = PF0HM004.PF0HMCLS; /* i/s class*/
                      PF0HW01.PFBISGRP = 0;
                    else
                      PF0HW01.PFESRTEL = "10";
                      PF0HW01.PFBISGRP = PF0HM004.PF0HMCLS;
                                   /* i/s grp*/
                      PF0HW01.YISCD = 0;
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

  PF0HW01.PFESEIND = " ";
  if (PF0HM004.PF0HMDEO != " ")
    PF0HW01.PFESEIND = "D";
  else
    if (PF0HM004.PF0HMASO != " ")
      PF0HW01.PFESEIND = "A";
    end
  end

  PF0HW01.PFESQCOL = PF0HM004.PFESQCOL;
end // end PF0H450

// scrn 4 data entry check
Function PF0H491()
   /* -----------------------------------------------------------;*/
    /* Check all screen fields for data entry.  Highlight, set  ;*/
    /* the cursor, and set the error flag for every field that  ;*/
    /* has changed.                                             ;*/
   /* -----------------------------------------------------------;*/

  if (PF0HM004.PFESQCOL is modified)
    set PF0HM004.PFESQCOL cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM004.PF0HMASO is modified)
    set PF0HM004.PF0HMASO cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM004.PF0HMDEO is modified)
    set PF0HM004.PF0HMDEO cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  if (PF0HM004.PF0HMCLS is modified)
    set PF0HM004.PF0HMCLS cursor, bold;
    PFWREC.PFWERRF = "Y";
  end

  PFWREC.PFWSUB = 8;
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM004.PF0HMELE[PFWSUB] is modified)
      set PF0HM004.PF0HMELE[PFWSUB] cursor, bold;
      PFWREC.PFWERRF = "Y";
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end
end // end PF0H491

// scrn 1 format from vrptpm01
Function PF0H810()
   /* -----------------------------------------------------------;*/
     /* Set up screen from print parameter row.                 ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM001 initial; /* clear map*/
  PF0HM001.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0HM001.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved sum name*/

  if (PF0HW01.PFFPRTYP == "1")
    PF0HM001.PF0HMSNM = "   PRINT ALL OR SELECTED LOGICAL PAGES";

     /* print parameter description*/
    PF0HM001.PF0HMDSC = PFFREC.PFFRPTDS;

    PF0HM001.PF0HMPRY = PFFREC.PFFPRTYI;
    PF0HM001.PFELGCPG = PFEREC.PFELGCPG;

    PF0HM001.XXXUNTXT = PFFREC.XXXUNTXT;
    PF0HM001.PF0HMCSQ = "N";
    PF0HM001.XROCD = PFFREC.XROCD;
    if (PFFREC.XROCD in XROTBL.XROCD)
      PF0HM001.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
    else
      PF0HM001.XROABRV = " ";
    end

    PF0HM001.XXXNDTXT = PFFREC.XXXNDTXT;
    PF0HM001.PFECYCIN = PFFREC.PFECYCIN;
    PF0HM001.XXXNBRCY = PFFREC.XXXNBRCY;

    PF0HM001.XXXNLTXT = PFFREC.XXXNLTXT;
    PF0HM001.PFFPRLVL = PFFREC.PFFPRLVL;

    PF0HM001.PFFPRFRS = PFFREC.PFFPRFRS;
  else
    PF0HM001.PF0HMSNM = "CREATE A SUMMARY FROM A SELECTED SUMMARY";

    PF0HM001.PFESRCNM = PFEREC.PFESRCNM;
     /* source summary description not available*/
    PF0HM001.PFESUMDE = " ";

     /* new summary description*/
    PF0HM001.PF0HMDSC = PFEREC.PFESUMDE;

    PF0HM001.PF0HMPRY = PFEREC.PFEPRIND;
    PF0HM001.PFELGCPG = PFEREC.PFELGCPG;

    PF0HM001.PF0HMCSQ = "N";
  end

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFFREC.PFICD[PFWSUB] != " ")
      PFIREC.PFICD = PFFREC.PFICD[PFWSUB];

      PF0H931(); /* vfield01 select unique*/

      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM001.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
    else
      PF0HM001.PFIDESC[PFWSUB] = " ";
    end
    PF0HM001.PFDCDVAL[PFWSUB] = PFFREC.PFDCDVAL[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFFREC.PFICD[8] != " ")
    PFIREC.PFICD = PFFREC.PFICD[8];

    PF0H931(); /* vfield01 select unique*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PF0HM001.PF0HMPRD = PFIREC.PFIDESC;
  else
    PF0HM001.PF0HMPRD = " ";
  end
  PF0HM001.XGPCD = PFFREC.XGPCD;
  PF0HM001.SY1STNBR = PFFREC.SY1STNBR;
  PF0HM001.SY2CLRID = PFFREC.SY2CLRID;
  PF0HM001.XDMCD = PFFREC.XDMCD;
  PF0HM001.XQACD = PFFREC.XQACD;
  PF0HM001.XLCCD = PFFREC.XLCCD;

  PF0HM001.PF0HMDLT = " ";

  PF0HW01.PFESRTEL = PFFREC.PFESRTEL;
  PF0HW01.YISCD = PFFREC.YISCD;
  PF0HW01.PFBISGRP = PFFREC.PFBISGRP;
  PF0HW01.PFESEIND = PFFREC.PFESEIND;
  PF0HW01.PFESQCOL = PFFREC.PFESQCOL;


   /* -----------------------------------------------------------;*/
     /* Use the edit common routine to generate descriptions    ;*/
     /* for the reporting attribute values.                     ;*/
   /* -----------------------------------------------------------;*/

  PF0H811(); /* scrn 1 move attr to pfwrec*/

  XPPF400(); /* edit entered attribute fields*/

  PF0H812(); /* scrn 1 move attr from pfwrec*/
end // end PF0H810

// scrn 1 move attr to pfwrec
Function PF0H811()
   /* -----------------------------------------------------------;*/
     /* Move reporting attribute value and product              ;*/
     /* screen fields to working storage record PFWREC          ;*/
     /* so the common routines XPPF300 and XPPF400 can access   ;*/
     /* the data.  Initialize the description and error fields  ;*/
     /* that will be set in these routines.                     ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PFWREC.PFWDESC[PFWSUB] = " "; /* attribute value 15 byte desc*/
    PFWREC.PFWABRV[PFWSUB] = " "; /* attribute value 8 byte abbrev*/
    PFWREC.PFWVALER[PFWSUB] = "N"; /* attribute value error flag*/
    if (PF0HM001.PFDCDVAL[PFWSUB] == "ALL")
                                   /* xppf400 considers 'all' invalid*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* don't send 'all' to be edited*/
    else
      PFWREC.PFDCDVAL[PFWSUB] = PF0HM001.PFDCDVAL[PFWSUB];
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  PFWREC.PFWPRDAT = PFDREC.PFICD[8]; /* save product attr. code*/

  PFWREC.XGPCD = PF0HM001.XGPCD; /* gen prod class code*/
  PFWREC.PFWHGPCF = "N"; /* gen prod class code error flag*/

  if (PF0HM001.SY1STNBR == "ALL") /* xppf400 considers 'all' invalid,*/
    PFWREC.SY1STNBR = " "; /* don't send 'all' to be edited*/
  else
    PFWREC.SY1STNBR = PF0HM001.SY1STNBR; /* style number*/
  end
  PFWREC.PFWHSTYF = "N"; /* style number error flag*/

  PFWREC.SY2CLRID = PF0HM001.SY2CLRID; /* identifying color*/
  PFWREC.PFWHCOLF = "N"; /* identifying color error flag*/

  PFWREC.XDMCD = PF0HM001.XDMCD; /* dimension code*/
  PFWREC.PFWHDIMF = "N"; /* dimension code error flag*/

  PFWREC.XQACD = PF0HM001.XQACD; /* quality code*/
  PFWREC.PFWHQUAF = "N"; /* quality code error flag*/

  PFWREC.XLCCD = PF0HM001.XLCCD; /* life cycle code*/
  PFWREC.PFWHLFCF = "N"; /* life cycle code error flag*/

  PFWREC.PFWDESC[8] = " "; /* short style name*/
  PFWREC.SY2CLRAB = " "; /* color description abrev*/
end // end PF0H811

// scrn 1 move attr from pfwrec
Function PF0H812()
   /* -----------------------------------------------------------;*/
     /* Move fields used by common processs XPPF300 and         ;*/
     /* XPPF400 from working storage record PFWREC to the       ;*/
     /* screen.  Use error flags to set fields in error to      ;*/
     /* BRIGHT, leaving the cursor on the first field in error. ;*/
     /* Also edit attribute values so that none are skipped.    ;*/
   /* -----------------------------------------------------------;*/

  PF0HM001.SY1SSTNM = PFWREC.PFWDESC[8]; /* short style name*/
  PF0HM001.SY2CLRAB = PFWREC.SY2CLRAB; /* color description abrev*/

  PF0HM001.XLCCD = PFWREC.XLCCD; /* life cycle code*/
  if (PFWREC.PFWHLFCF == "Y") /* life cycle code error flag*/
    set PF0HM001.XLCCD cursor, bold;
  end

  PF0HM001.XQACD = PFWREC.XQACD; /* quality code*/
  if (PFWREC.PFWHQUAF == "Y") /* quality code error flag*/
    set PF0HM001.XQACD cursor, bold;
  end

  PF0HM001.XDMCD = PFWREC.XDMCD; /* dimension code*/
  if (PFWREC.PFWHDIMF == "Y") /* dimension code error flag*/
    set PF0HM001.XDMCD cursor, bold;
  end

  PF0HM001.SY2CLRID = PFWREC.SY2CLRID; /* identifying color*/
  if (PFWREC.PFWHCOLF == "Y") /* identifying color error flag*/
    set PF0HM001.SY2CLRID cursor, bold;
  end

  if (PF0HM001.SY1STNBR != "ALL") /* 'all' was not passed to xppf400*/
    PF0HM001.SY1STNBR = PFWREC.SY1STNBR; /* style number*/
  end
  if (PFWREC.PFWHSTYF == "Y") /* style number error flag*/
    set PF0HM001.SY1STNBR cursor, bold;
  end

  PF0HM001.XGPCD = PFWREC.XGPCD; /* general product code*/
  if (PFWREC.PFWHGPCF == "Y") /* general product code error flag*/
    set PF0HM001.XGPCD cursor, bold;
  end


   /* -----------------------------------------------------------;*/
     /* Move the working storage fields back to the screen      ;*/
     /* and highlight the fields with errors.                   ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 7;
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM001.PFDCDVAL[PFWSUB] != "ALL")
                                   /* 'all' wasn't passed to xppf400*/
      PF0HM001.PFDCDVAL[PFWSUB] = PFWREC.PFDCDVAL[PFWSUB];
    end
    if (PFWREC.PFWVALER[PFWSUB] == "Y") /* attr value error flag*/
      set PF0HM001.PFDCDVAL[PFWSUB] cursor, bold;
    end
    PF0HM001.PF0HMVDS[PFWSUB] = PFWREC.PFWDESC[PFWSUB]; /* att val*/
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end


   /* -----------------------------------------------------------;*/
     /* Edit the report attributes so that an attribute         ;*/
     /* cannot have a value unless all the attributes above     ;*/
     /* it have values.                                         ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWTBLF = "N"; /* initialize value found flag*/
  if (PF0HM001.XGPCD != " " /* if a product field was entered*/
   || PF0HM001.SY1STNBR != " "
   || PF0HM001.SY2CLRID != " "
   || PF0HM001.XDMCD != " " 
   || PF0HM001.XQACD != " " 
   || PF0HM001.XLCCD != " ")
    PFWREC.PFWTBLF = "Y"; /* set value found flag*/
  end

  PFWREC.PFWSUB = 7;
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM001.PFIDESC[PFWSUB] != " ")
                                   /* if an attrib exists at this level*/
      if (PF0HM001.PFDCDVAL[PFWSUB] == " ")
                                   /* if attrib value is not entered*/
        if (PFWREC.PFWTBLF == "Y") /* if value found flag is set*/
          set PF0HM001.PFDCDVAL[PFWSUB] cursor, bold;
          converseLib.validationFailed(226); /* cannot skip a higher lvl rpt att*/
          PFWREC.PFWERRF = "Y";
        end
      else
        PFWREC.PFWTBLF = "Y"; /* set value found flag*/
      end
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end


   /* -----------------------------------------------------------;*/
     /* Flag an error if no attr. values at all were entered.   ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWTBLF == "N") /* if  value found flag indic. nothing entered*/
    if (PFDREC.PFICD[1] != " ")
      set PF0HM001.PFDCDVAL[1] cursor, bold;
    else
      set PF0HM001.SY1STNBR cursor, bold;
      set PF0HM001.XGPCD cursor, bold;
    end
    converseLib.validationFailed(227); /* at least one attribute value must be specified*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0H812

// scrn 2 format from vrptpm01
Function PF0H820()
   /* -----------------------------------------------------------;*/
     /* Set up screen from print parameter row.                 ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM002 initial; /* clear map*/
  PF0HM002.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0HM002.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved sum name*/

  if (PF0HW01.PFFPRTYP == "2")
    PF0HM002.PF0HMSNM = "          PRINT SELECTED LEVELS";

     /* print parameter description*/
    PF0HM002.PF0HMDSC = PFFREC.PFFRPTDS;

    PF0HM002.PF0HMPRY = PFFREC.PFFPRTYI;
    PF0HM002.PFELGCPG = PFEREC.PFELGCPG;

    PF0HM002.XXXUNTXT = PFFREC.XXXUNTXT;
    PF0HM002.PF0HMCSQ = "N";
    PF0HM002.XROCD = PFFREC.XROCD;
    if (PFFREC.XROCD in XROTBL.XROCD)
      PF0HM002.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
    else
      PF0HM002.XROABRV = " ";
    end

    PF0HM002.XXXNDTXT = PFFREC.XXXNDTXT;
    PF0HM002.PFECYCIN = PFFREC.PFECYCIN;
    PF0HM002.XXXNBRCY = PFFREC.XXXNBRCY;

    PF0HM002.XXXNLTXT = PFFREC.XXXNLTXT;
    PF0HM002.PFFPRLVL = PFFREC.PFFPRLVL;
  else
    PF0HM002.PF0HMSNM = " CREATE A SUMMARY FROM SELECTED LEVELS";

    PF0HM002.PFESRCNM = PFEREC.PFESRCNM;
     /* source summary description not available*/
    PF0HM002.PFESUMDE = " ";

     /* new summary description*/
    PF0HM002.PF0HMDSC = PFEREC.PFESUMDE;

    PF0HM002.PF0HMPRY = PFEREC.PFEPRIND;
    PF0HM002.PFELGCPG = PFEREC.PFELGCPG;

    PF0HM002.PF0HMCSQ = "N";
  end

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    if (PFFREC.PFICD[PFWSUB] != " ")
      PFIREC.PFICD = PFFREC.PFICD[PFWSUB];

      PF0H931(); /* vfield01 select unique*/

      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM002.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
    else
      PF0HM002.PFIDESC[PFWSUB] = " ";
    end
    PF0HM002.PFDCDVAL[PFWSUB] = PFFREC.PFDCDVAL[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  if (PFFREC.PFICD[8] != " ")
    PFIREC.PFICD = PFFREC.PFICD[8];

    PF0H931(); /* vfield01 select unique*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PF0HM002.PF0HMPRD = PFIREC.PFIDESC;
  else
    PF0HM002.PF0HMPRD = " ";
  end

  PF0HM002.PFDCDVAL[8] = PFFREC.PFDCDVAL[8];

  PF0HM002.PF0HMDLT = " ";

  PF0HW01.PFESRTEL = PFFREC.PFESRTEL;
  PF0HW01.YISCD = PFFREC.YISCD;
  PF0HW01.PFBISGRP = PFFREC.PFBISGRP;
  PF0HW01.PFESEIND = PFFREC.PFESEIND;
  PF0HW01.PFESQCOL = PFFREC.PFESQCOL;
end // end PF0H820

// scrn 3 format from vrptpm01
Function PF0H830()
   /* -----------------------------------------------------------;*/
     /* Set up screen from print parameter row.                 ;*/
   /* -----------------------------------------------------------;*/

  set PF0HM003 initial; /* clear map*/
  PF0HM003.XXXCURDT = VGVar.currentShortGregorianDate;
  PF0HM003.PFESUMNM = PF0HW01.PFESUMNM; /* replace saved summary name*/

   /* print parameter description*/
  PF0HM003.PF0HMDSC = PFFREC.PFFRPTDS;

  PF0HM003.PF0HMPRY = PFFREC.PFFPRTYI;
  PF0HM003.PFELGCPG = PFEREC.PFELGCPG;

  PF0HM003.XXXUNTXT = PFFREC.XXXUNTXT;
  PF0HM003.PF0HMCSQ = "N";
  PF0HM003.XROCD = PFFREC.XROCD;
  if (PFFREC.XROCD in XROTBL.XROCD)
    PF0HM003.XROABRV = XROTBL.XROABRV[sysVar.arrayIndex];
  else
    PF0HM003.XROABRV = " ";
  end

  PF0HM003.XXXNDTXT = PFFREC.XXXNDTXT;
  PF0HM003.PFECYCIN = PFFREC.PFECYCIN;
  PF0HM003.XXXNBRCY = PFFREC.XXXNBRCY;

  PF0HM003.XXXNLTXT = PFFREC.XXXNLTXT;
   /* PFFPRLVL field is not on this screen*/

  PF0HM003.PFFPRFRS = PFFREC.PFFPRFRS;

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PF0HM003.PFFFMCH[PFWSUB] = PFFREC.PFFFMCH[PFWSUB];
    if (PFFREC.PFICD[PFWSUB] != " ")
      PFIREC.PFICD = PFFREC.PFICD[PFWSUB];

      PF0H931(); /* vfield01 select unique*/

      if (PFWREC.PFWERRF == "Y")
        return;
      end
      PF0HM003.PFIDESC[PFWSUB] = PFIREC.PFIDESC;
    else
      PF0HM003.PFIDESC[PFWSUB] = " ";
    end
    PF0HM003.PFDCDVAL[PFWSUB] = PFFREC.PFDCDVAL[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  PF0HM003.PFFFMCH[8] = PFFREC.PFFFMCH[8];

  if (PFFREC.PFICD[8] != " ")
    PFIREC.PFICD = PFFREC.PFICD[8];

    PF0H931(); /* vfield01 select unique*/

    if (PFWREC.PFWERRF == "Y")
      return;
    end
    PF0HM003.PF0HMPRD = PFIREC.PFIDESC;
  else
    PF0HM003.PF0HMPRD = " ";
  end

  PF0HM003.XGPCD = PFFREC.XGPCD;
  PF0HM003.SY1STNBR = PFFREC.SY1STNBR;
  PF0HM003.SY2CLRID = PFFREC.SY2CLRID;
  PF0HM003.XDMCD = PFFREC.XDMCD;
  PF0HM003.XQACD = PFFREC.XQACD;
  PF0HM003.XLCCD = PFFREC.XLCCD;

  PF0HM003.PF0HMDLT = " ";

  PF0HW01.PFESRTEL = PFFREC.PFESRTEL;
  PF0HW01.YISCD = PFFREC.YISCD;
  PF0HW01.PFBISGRP = PFFREC.PFBISGRP;
  PF0HW01.PFESEIND = PFFREC.PFESEIND;
  PF0HW01.PFESQCOL = PFFREC.PFESQCOL;


   /* -----------------------------------------------------------;*/
     /* Use the edit common routine to generate descriptions    ;*/
     /* for the reporting attribute values.                     ;*/
   /* -----------------------------------------------------------;*/

  PF0H831(); /* scrn 3 move attr to pfwrec*/

  XPPF400(); /* edit entered attribute fields*/

  PF0H832(); /* scrn 3 move attr from pfwrec*/
end // end PF0H830

// scrn 3 move attr to pfwrec
Function PF0H831()
   /* -----------------------------------------------------------;*/
     /* Move reporting attribute value and product              ;*/
     /* screen fields to working storage record PFWREC          ;*/
     /* so the common routines XPPF300 and XPPF400 can access   ;*/
     /* the data.  Initialize the description and error fields  ;*/
     /* that will be set in these routines.                     ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PFWREC.PFWDESC[PFWSUB] = " "; /* attribute value 15 byte desc*/
    PFWREC.PFWABRV[PFWSUB] = " "; /* attribute value 8 byte abbrev*/
    PFWREC.PFWVALER[PFWSUB] = "N"; /* attribute value error flag*/
    if (PF0HM003.PFDCDVAL[PFWSUB] == "ALL")
                                   /* xppf400 considers 'all' invalid*/
      PFWREC.PFDCDVAL[PFWSUB] = " "; /* don't send 'all' to be edited*/
    else
      PFWREC.PFDCDVAL[PFWSUB] = PF0HM003.PFDCDVAL[PFWSUB];
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end

  PFWREC.PFWPRDAT = PFDREC.PFICD[8]; /* save product attr. code*/

  PFWREC.XGPCD = PF0HM003.XGPCD; /* gen prod class code*/
  PFWREC.PFWHGPCF = "N"; /* gen prod class code error flag*/

  if (PF0HM003.SY1STNBR == "ALL") /* xppf400 considers 'all' invalid,*/
    PFWREC.SY1STNBR = " "; /* don't send 'all' to be edited*/
  else
    PFWREC.SY1STNBR = PF0HM003.SY1STNBR; /* style number*/
  end
  PFWREC.PFWHSTYF = "N"; /* style number error flag*/

  PFWREC.SY2CLRID = PF0HM003.SY2CLRID; /* identifying color*/
  PFWREC.PFWHCOLF = "N"; /* identifying color error flag*/

  PFWREC.XDMCD = PF0HM003.XDMCD; /* dimension code*/
  PFWREC.PFWHDIMF = "N"; /* dimension code error flag*/

  PFWREC.XQACD = PF0HM003.XQACD; /* quality code*/
  PFWREC.PFWHQUAF = "N"; /* quality code error flag*/

  PFWREC.XLCCD = PF0HM003.XLCCD; /* life cycle code*/
  PFWREC.PFWHLFCF = "N"; /* life cycle code error flag*/

  PFWREC.PFWDESC[8] = " "; /* short style name*/
  PFWREC.SY2CLRAB = " "; /* color description abrev*/
end // end PF0H831

// scrn 3 move attr from pfwrec
Function PF0H832()
   /* -----------------------------------------------------------;*/
     /* Move fields used by common processs XPPF300 and         ;*/
     /* XPPF400 from working storage record PFWREC to the       ;*/
     /* screen.  Use error flags to set fields in error to      ;*/
     /* BRIGHT, leaving the cursor on the first field in error. ;*/
     /* Also edit attribute values so that none are skipped.    ;*/
   /* -----------------------------------------------------------;*/

  PF0HM003.SY1SSTNM = PFWREC.PFWDESC[8]; /* short style name*/
  PF0HM003.SY2CLRAB = PFWREC.SY2CLRAB; /* color description abrev*/

  PF0HM003.XLCCD = PFWREC.XLCCD; /* life cycle code*/
  if (PFWREC.PFWHLFCF == "Y") /* life cycle code error flag*/
    set PF0HM003.XLCCD cursor, bold;
  end

  PF0HM003.XQACD = PFWREC.XQACD; /* quality code*/
  if (PFWREC.PFWHQUAF == "Y") /* quality code error flag*/
    set PF0HM003.XQACD cursor, bold;
  end

  PF0HM003.XDMCD = PFWREC.XDMCD; /* dimension code*/
  if (PFWREC.PFWHDIMF == "Y") /* dimension code error flag*/
    set PF0HM003.XDMCD cursor, bold;
  end

  PF0HM003.SY2CLRID = PFWREC.SY2CLRID; /* identifying color*/
  if (PFWREC.PFWHCOLF == "Y") /* identifying color error flag*/
    set PF0HM003.SY2CLRID cursor, bold;
  end

  if (PF0HM003.SY1STNBR != "ALL") /* 'all' was not passed to xppf400*/
    PF0HM003.SY1STNBR = PFWREC.SY1STNBR; /* style number*/
  end
  if (PFWREC.PFWHSTYF == "Y") /* style number error flag*/
    set PF0HM003.SY1STNBR cursor, bold;
  end

  PF0HM003.XGPCD = PFWREC.XGPCD; /* general product code*/
  if (PFWREC.PFWHGPCF == "Y") /* general product code error flag*/
    set PF0HM003.XGPCD cursor, bold;
  end


   /* -----------------------------------------------------------;*/
     /* Move the working storage fields back to the screen      ;*/
     /* and highlight the fields with errors.                   ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWSUB = 7;
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM003.PFDCDVAL[PFWSUB] != "ALL")
                                   /* 'all' wasn't passed to xppf400*/
      PF0HM003.PFDCDVAL[PFWSUB] = PFWREC.PFDCDVAL[PFWSUB];
    end
    if (PFWREC.PFWVALER[PFWSUB] == "Y") /* attr value error flag*/
      set PF0HM003.PFDCDVAL[PFWSUB] cursor, bold;
    end
    PF0HM003.PF0HMVDS[PFWSUB] = PFWREC.PFWDESC[PFWSUB]; /* att val*/
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end


   /* -----------------------------------------------------------;*/
     /* Edit the report attributes so that an attribute         ;*/
     /* cannot have a value unless all the attributes above     ;*/
     /* it have values.                                         ;*/
   /* -----------------------------------------------------------;*/

  PFWREC.PFWTBLF = "N"; /* initialize value found flag*/
  if (PF0HM003.XGPCD != " " /* if a product field was entered*/
   || PF0HM003.SY1STNBR != " "
   || PF0HM003.SY2CLRID != " "
   || PF0HM003.XDMCD != " " 
   || PF0HM003.XQACD != " " 
   || PF0HM003.XLCCD != " ")
    PFWREC.PFWTBLF = "Y"; /* set value found flag*/
  end

  PFWREC.PFWSUB = 7;
  while (PFWREC.PFWSUB >= 1)
    if (PF0HM003.PFIDESC[PFWSUB] != " ")
                                   /* if an attrib exists at this level*/
      if (PF0HM003.PFDCDVAL[PFWSUB] == " ")
                                   /* if attrib value is not entered*/
        if (PFWREC.PFWTBLF == "Y") /* if value found flag is set*/
          set PF0HM003.PFDCDVAL[PFWSUB] cursor, bold;
          converseLib.validationFailed(226); /* cannot skip a higher lvl rpt att*/
          PFWREC.PFWERRF = "Y";
        end
      else
        PFWREC.PFWTBLF = "Y"; /* set value found flag*/
      end
    end
    PFWREC.PFWSUB = PFWREC.PFWSUB - 1;
  end


   /* -----------------------------------------------------------;*/
     /* Flag an error if no attr. values at all were entered.   ;*/
   /* -----------------------------------------------------------;*/

  if (PFWREC.PFWTBLF == "N") /* if  value found flag indic. nothing entered*/
    if (PFDREC.PFICD[1] != " ")
      set PF0HM003.PFDCDVAL[1] cursor, bold;
    else
      set PF0HM003.SY1STNBR cursor, bold;
      set PF0HM003.XGPCD cursor, bold;
    end
    converseLib.validationFailed(227); /* at least one attribute value must be specified*/
    PFWREC.PFWERRF = "Y";
  end
end // end PF0H832

// scrn 1 bridge out PF1REC load
Function PF0H840()
   /* -----------------------------------------------------------;*/
     /* Move the screen fields to the bridge record.            ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PF1XFERF = "Y"; /* signal xfer active*/
  PF1REC.PF1ORIG = "PF0H"; /* originating application*/
  PF1REC.PF1CURR = "PF0H"; /* current application*/

  PF1REC.PF1FMT = PFEREC.PFCREF;
  PF1REC.PF1ISG = PFEREC.PFBREF;
  PF1REC.PF1ATT = PFEREC.PFDREF;

  if (PF0HW01.PFFPRTYP == "1")
    PF1REC.PF1SCRNF = "1"; /* signal type 1 active*/
    PF1REC.PF1NAM = PF0HM001.PFESUMNM;
    PF1REC.PFESRCNM = " ";
     /* source summary description*/
    PF1REC.PFESUMDE = " ";

     /* move print parameter desc to pf1dsc*/
    PF1REC.PF1DSC = PF0HM001.PF0HMDSC;

    PF1REC.PF1PRY = PF0HM001.PF0HMPRY;
    PF1REC.PFELGCPG = PF0HM001.PFELGCPG;

    PF1REC.XXXUNTXT = PF0HM001.XXXUNTXT;
    PF1REC.PF1CSQ = PF0HM001.PF0HMCSQ;
    PF1REC.XROCD = PF0HM001.XROCD;
    PF1REC.XROABRV = PF0HM001.XROABRV;

    PF1REC.XXXNDTXT = PF0HM001.XXXNDTXT;
    PF1REC.PFECYCIN = PF0HM001.PFECYCIN;
    PF1REC.XXXNBRCY = PF0HM001.XXXNBRCY;

    PF1REC.XXXNLTXT = PF0HM001.XXXNLTXT;
    PF1REC.PFFPRLVL = PF0HM001.PFFPRLVL;

    PF1REC.PFFPRFRS = PF0HM001.PFFPRFRS;
  else
    PF1REC.PF1SCRNF = "4"; /* signal type 4 active*/
    PF1REC.PF1NAM = PF0HM001.PFESUMNM;
    PF1REC.PFESRCNM = PF0HM001.PFESRCNM;
     /* move source summary desc to pfesumde*/
    PF1REC.PFESUMDE = PF0HM001.PFESUMDE;

     /* move new summary desc to pf1dsc*/
    PF1REC.PF1DSC = PF0HM001.PF0HMDSC;

    PF1REC.PF1PRY = PF0HM001.PF0HMPRY;
    PF1REC.PFELGCPG = PF0HM001.PFELGCPG;

    PF1REC.XXXUNTXT = " ";
    PF1REC.PF1CSQ = PF0HM001.PF0HMCSQ;
    PF1REC.XROCD = " ";
    PF1REC.XROABRV = " ";

    PF1REC.XXXNDTXT = " ";
    PF1REC.PFECYCIN = " ";
    PF1REC.XXXNBRCY = 0;

    PF1REC.XXXNLTXT = " ";
    PF1REC.PFFPRLVL = " ";

    PF1REC.PFFPRFRS = 0;
  end

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PF1REC.PFFFMCH[PFWSUB] = " ";
    PF1REC.PFIDESC[PFWSUB] = PF0HM001.PFIDESC[PFWSUB];
    PF1REC.PFDCDVAL[PFWSUB] = PF0HM001.PFDCDVAL[PFWSUB];
    PF1REC.PF1VDS[PFWSUB] = PF0HM001.PF0HMVDS[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PF1REC.PFFFMCH[8] = " ";
  PF1REC.PFDCDVAL[8] = " ";

  PF1REC.PF1PRD = PF0HM001.PF0HMPRD;
  PF1REC.XGPCD = PF0HM001.XGPCD;
  PF1REC.SY1STNBR = PF0HM001.SY1STNBR;
  PF1REC.SY2CLRID = PF0HM001.SY2CLRID;
  PF1REC.XDMCD = PF0HM001.XDMCD;
  PF1REC.XQACD = PF0HM001.XQACD;
  PF1REC.XLCCD = PF0HM001.XLCCD;
  PF1REC.SY1SSTNM = PF0HM001.SY1SSTNM;
  PF1REC.SY2CLRAB = PF0HM001.SY2CLRAB;


   /* -----------------------------------------------------------;*/
     /* These 5 PF1REC fields are used to store the 5 PF0HW01   ;*/
     /* working storage fields for scrn 4.  These fields        ;*/
     /* contain the 'default' sort fields from the vsumat01     ;*/
     /* row or the last saved updates to these from scrn 4.     ;*/
       /* The ACTUAL scrn 4 fields (which will differ if changes;*/
     /* are made but not saved yet) are stored in 5 different   ;*/
     /* PF1REC fields in the processes that perform this        ;*/
     /* process.                                                ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PFESRTEL = PF0HW01.PFESRTEL;
  PF1REC.YISCD = PF0HW01.YISCD;
  PF1REC.PFBISGRP = PF0HW01.PFBISGRP;
  PF1REC.PFESEIND = PF0HW01.PFESEIND;
  PF1REC.PFESQCOL = PF0HW01.PFESQCOL;


  PF1REC.PFFDTFMI = " ";
  PF1REC.PF1RECF = PFWREC.PFWRECF; /* record found flag*/
end // end PF0H840

// scrn 2 bridge out PF1REC load
Function PF0H850()
   /* -----------------------------------------------------------;*/
     /* Move the screen fields to the bridge record.            ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PF1XFERF = "Y"; /* signal xfer active*/
  PF1REC.PF1ORIG = "PF0H"; /* originating application*/
  PF1REC.PF1CURR = "PF0H"; /* current application*/

  PF1REC.PF1FMT = PFEREC.PFCREF;
  PF1REC.PF1ISG = PFEREC.PFBREF;
  PF1REC.PF1ATT = PFEREC.PFDREF;

  if (PF0HW01.PFFPRTYP == "2")
    PF1REC.PF1SCRNF = "2"; /* signal type 2 active*/
    PF1REC.PF1NAM = PF0HM002.PFESUMNM;
    PF1REC.PFESRCNM = " ";
     /* source summary description*/
    PF1REC.PFESUMDE = " ";

     /* move print parameter desc to pf1dsc*/
    PF1REC.PF1DSC = PF0HM002.PF0HMDSC;

    PF1REC.PF1PRY = PF0HM002.PF0HMPRY;
    PF1REC.PFELGCPG = PF0HM002.PFELGCPG;

    PF1REC.XXXUNTXT = PF0HM002.XXXUNTXT;
    PF1REC.PF1CSQ = PF0HM002.PF0HMCSQ;
    PF1REC.XROCD = PF0HM002.XROCD;
    PF1REC.XROABRV = PF0HM002.XROABRV;

    PF1REC.XXXNDTXT = PF0HM002.XXXNDTXT;
    PF1REC.PFECYCIN = PF0HM002.PFECYCIN;
    PF1REC.XXXNBRCY = PF0HM002.XXXNBRCY;

    PF1REC.XXXNLTXT = PF0HM002.XXXNLTXT;
    PF1REC.PFFPRLVL = PF0HM002.PFFPRLVL;

    PF1REC.PFFPRFRS = 0;
  else
    PF1REC.PF1SCRNF = "5"; /* signal type 5 active*/
    PF1REC.PF1NAM = PF0HM002.PFESUMNM;
    PF1REC.PFESRCNM = PF0HM002.PFESRCNM;
     /* move source summary desc to pfesumde*/
    PF1REC.PFESUMDE = PF0HM002.PFESUMDE;

     /* move new summary desc to pf1dsc*/
    PF1REC.PF1DSC = PF0HM002.PF0HMDSC;

    PF1REC.PF1PRY = PF0HM002.PF0HMPRY;
    PF1REC.PFELGCPG = PF0HM002.PFELGCPG;

    PF1REC.XXXUNTXT = " ";
    PF1REC.PF1CSQ = PF0HM002.PF0HMCSQ;
    PF1REC.XROCD = " ";
    PF1REC.XROABRV = " ";

    PF1REC.XXXNDTXT = " ";
    PF1REC.PFECYCIN = " ";
    PF1REC.XXXNBRCY = 0;

    PF1REC.XXXNLTXT = " ";
    PF1REC.PFFPRLVL = " ";

    PF1REC.PFFPRFRS = 0;
  end

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PF1REC.PFFFMCH[PFWSUB] = " ";
    PF1REC.PFIDESC[PFWSUB] = PF0HM002.PFIDESC[PFWSUB];
    PF1REC.PFDCDVAL[PFWSUB] = PF0HM002.PFDCDVAL[PFWSUB];
    PF1REC.PF1VDS[PFWSUB] = " ";
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PF1REC.PFFFMCH[8] = " ";
  PF1REC.PFDCDVAL[8] = PF0HM002.PFDCDVAL[8];

  PF1REC.PF1PRD = PF0HM002.PF0HMPRD;
  PF1REC.XGPCD = " ";
  PF1REC.SY1STNBR = " ";
  PF1REC.SY2CLRID = " ";
  PF1REC.XDMCD = " ";
  PF1REC.XQACD = " ";
  PF1REC.XLCCD = " ";
  PF1REC.SY1SSTNM = " ";
  PF1REC.SY2CLRAB = " ";


   /* -----------------------------------------------------------;*/
     /* These 5 PF1REC fields are used to store the 5 PF0HW01   ;*/
     /* working storage fields for scrn 4.  These fields        ;*/
     /* contain the 'default' sort fields from the vsumat01     ;*/
     /* row or the last saved updates to these from scrn 4.     ;*/
       /* The ACTUAL scrn 4 fields (which will differ if changes;*/
     /* are made but not saved yet) are stored in 5 different   ;*/
     /* PF1REC fields in the processes that perform this        ;*/
     /* process.                                                ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PFESRTEL = PF0HW01.PFESRTEL;
  PF1REC.YISCD = PF0HW01.YISCD;
  PF1REC.PFBISGRP = PF0HW01.PFBISGRP;
  PF1REC.PFESEIND = PF0HW01.PFESEIND;
  PF1REC.PFESQCOL = PF0HW01.PFESQCOL;


  PF1REC.PFFDTFMI = " ";
  PF1REC.PF1RECF = PFWREC.PFWRECF; /* record found flag*/
end // end PF0H850

// scrn 3 bridge out PF1REC load
Function PF0H860()
   /* -----------------------------------------------------------;*/
     /* Move the screen fields to the bridge record.            ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PF1XFERF = "Y"; /* signal xfer active*/
  PF1REC.PF1ORIG = "PF0H"; /* originating application*/
  PF1REC.PF1CURR = "PF0H"; /* current application*/

  PF1REC.PF1FMT = PFEREC.PFCREF;
  PF1REC.PF1ISG = PFEREC.PFBREF;
  PF1REC.PF1ATT = PFEREC.PFDREF;

  PF1REC.PF1SCRNF = "3"; /* signal type 3 active*/
  PF1REC.PF1NAM = PF0HM003.PFESUMNM;
  PF1REC.PFESRCNM = " ";
   /* source summary description*/
  PF1REC.PFESUMDE = " ";

   /* move print parameter desc to pf1dsc*/
  PF1REC.PF1DSC = PF0HM003.PF0HMDSC;

  PF1REC.PF1PRY = PF0HM003.PF0HMPRY;
  PF1REC.PFELGCPG = PF0HM003.PFELGCPG;

  PF1REC.XXXUNTXT = PF0HM003.XXXUNTXT;
  PF1REC.PF1CSQ = PF0HM003.PF0HMCSQ;
  PF1REC.XROCD = PF0HM003.XROCD;
  PF1REC.XROABRV = PF0HM003.XROABRV;

  PF1REC.XXXNDTXT = PF0HM003.XXXNDTXT;
  PF1REC.PFECYCIN = PF0HM003.PFECYCIN;
  PF1REC.XXXNBRCY = PF0HM003.XXXNBRCY;

  PF1REC.XXXNLTXT = PF0HM003.XXXNLTXT;
  PF1REC.PFFPRLVL = " ";

  PF1REC.PFFPRFRS = PF0HM003.PFFPRFRS;

  PFWREC.PFWSUB = 1;
  while (PFWREC.PFWSUB <= 7)
    PF1REC.PFFFMCH[PFWSUB] = PF0HM003.PFFFMCH[PFWSUB];
    PF1REC.PFIDESC[PFWSUB] = PF0HM003.PFIDESC[PFWSUB];
    PF1REC.PFDCDVAL[PFWSUB] = PF0HM003.PFDCDVAL[PFWSUB];
    PF1REC.PF1VDS[PFWSUB] = PF0HM003.PF0HMVDS[PFWSUB];
    PFWREC.PFWSUB = PFWREC.PFWSUB + 1;
  end
  PF1REC.PFFFMCH[8] = PF0HM003.PFFFMCH[8];
  PF1REC.PFDCDVAL[8] = " ";

  PF1REC.PF1PRD = PF0HM003.PF0HMPRD;
  PF1REC.XGPCD = PF0HM003.XGPCD;
  PF1REC.SY1STNBR = PF0HM003.SY1STNBR;
  PF1REC.SY2CLRID = PF0HM003.SY2CLRID;
  PF1REC.XDMCD = PF0HM003.XDMCD;
  PF1REC.XQACD = PF0HM003.XQACD;
  PF1REC.XLCCD = PF0HM003.XLCCD;
  PF1REC.SY1SSTNM = PF0HM003.SY1SSTNM;
  PF1REC.SY2CLRAB = PF0HM003.SY2CLRAB;


   /* -----------------------------------------------------------;*/
     /* These 5 PF1REC fields are used to store the 5 PF0HW01   ;*/
     /* working storage fields for scrn 4.  These fields        ;*/
     /* contain the 'default' sort fields from the vsumat01     ;*/
     /* row or the last saved updates to these from scrn 4.     ;*/
       /* The ACTUAL scrn 4 fields (which will differ if changes;*/
     /* are made but not saved yet) are stored in 5 different   ;*/
     /* PF1REC fields in the processes that perform this        ;*/
     /* process.                                                ;*/
   /* -----------------------------------------------------------;*/

  PF1REC.PFESRTEL = PF0HW01.PFESRTEL;
  PF1REC.YISCD = PF0HW01.YISCD;
  PF1REC.PFBISGRP = PF0HW01.PFBISGRP;
  PF1REC.PFESEIND = PF0HW01.PFESEIND;
  PF1REC.PFESQCOL = PF0HW01.PFESQCOL;


  PF1REC.PFFDTFMI = " ";
  PF1REC.PF1RECF = PFWREC.PFWRECF; /* record found flag*/
end // end PF0H860

// check add security
Function PF0H870()
  if (COMMAREA.CAALVL[1] == "Y") /* adds always allowed (super user)*/
     /* this is okay - security granted*/
  else /* adds not always allowed, check*/
                                   /* further*/
    if (PFAREC.PFALKOTF == "N") /* not lockout*/
      if (COMMAREA.CAADDFL == "Y") /* adds allowed*/
         /* this is okay - security granted*/
      else /* adds never allowed*/
        converseLib.validationFailed(210); /* userid not authorized to add*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    else /* lockout*/
      converseLib.validationFailed(211); /* userid not auth. to add durr sum lockout*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end
end // end PF0H870

// process PF & PA keys
Function PF0H880()
  if (converseVar.eventKey is pf1) /* help*/
    XSPF1();
    PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
    PFWREC.PFWERRF = "Y"; /* set error flag*/
    return;
  end


  if (converseVar.eventKey is pf3 /* if pf3 exit key pressed*/
   || converseVar.eventKey is pf17) /* if pf17 key pressed*/
    if (PF0HW01.PFFPRTYP == "1" /* if scrn 1 active*/
     || PF0HW01.PFFPRTYP == "2" /* or scrn 2 active*/
     || PF0HW01.PFFPRTYP == "3" /* or scrn 3 active*/
     || PF0HW01.PFFPRTYP == "4" /* or scrn 4 active*/
     || PF0HW01.PFFPRTYP == "5") /* or scrn 5 active*/
      PF0HW01.PFFPRTYP = "0"; /* signal end of this screen*/
      PF0HM000.PFFPRTYP = " "; /* signal end of this screen*/
      converseLib.validationFailed(0); /* clear any leftover message*/
      PFWREC.PFWMSG = " ";
      if (PF1REC.PF1ORIG == "PF0P") /* if backing out of any screen*/
        COMMAREA.CATOAP = "PF0P";
                                   /* and you came from pf0p,go back*/
        PFWREC.PFWEOAF = "Y"; /* set end of application*/
      end
      return; /* go back to PF0H menu*/
    else /* else*/
      if (PF1REC.PF1ORIG == "PF0P")
        COMMAREA.CATOAP = "PF0P";
      else
        COMMAREA.CATOAP = "PF0A"; /* return to main profit menu*/
      end
      XSEXIT();
      PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
      PFWREC.PFWERRF = "Y"; /* set error flag*/
      return;
    end
  end


  if (converseVar.eventKey is pf4) /* return to main system menu*/
    XSPF4();
    PFWREC.PFWMSG = COMMAREA.CAMSG; /* result of bad pass*/
    PFWREC.PFWERRF = "Y"; /* set error flag*/
    return;
  end


  if (converseVar.eventKey is pf12 /* edit pf key*/
   || converseVar.eventKey is pf14 /* bridge out pfkey*/
   || converseVar.eventKey is pf15 /* bridge out pfkey*/
   || converseVar.eventKey is pf16 /* bridge out pfkey*/
   || converseVar.eventKey is pf19) /* read next pfkey*/
    return; /* process later*/
  end


  if (converseVar.eventKey is pa2) /* cancel key*/
    set PF0HM001 initial;
    converseLib.clearScreen();
    
    PF0HM001.XXXCURDT = VGVar.currentShortGregorianDate;
    set PF0HM002 initial;
    converseLib.clearScreen();
    
    PF0HM002.XXXCURDT = VGVar.currentShortGregorianDate;
    set PF0HM003 initial;
    set PF0HM003 initial;
    PF0HM003.XXXCURDT = VGVar.currentShortGregorianDate;
    converseLib.validationFailed(0); /* clear any leftover message*/
    PFWREC.PFWMSG = " ";
    converseLib.validationFailed(189); /* pa2 pressed; screen changes aborted*/
    PFWREC.PFWRECF = "N"; /* reset records found flag*/
    PF0HW01.PF0HWP19 = "Y"; /* reset first pf19 for session flag*/
    PF0HW01.PF0HWDCF = "N"; /* reset delete confirm msg issued flag*/
    PFWREC.PFWERRF = "Y";
    return;
  end


  converseLib.validationFailed(1); /* fall through error - invalid pfkey*/
  PFWREC.PFWERRF = "Y"; /* signal error*/
end // end PF0H880

// pf19 check del security
Function PF0H890()
   /* -----------------------------------------------------------;*/
     /* Check delete security.  If user cannot delete summaries ;*/
     /* then do not allow them to use pf19 read next, not even  ;*/
     /* for inquiry.                                            ;*/
   /* -----------------------------------------------------------;*/

  if (COMMAREA.CADLVL[1] == "Y") /* deletes always allowed (super user)*/
     /* this is okay - security granted*/
  else /* deletes not always allowed, check further*/
    if (PFAREC.PFALKOTF == "N") /* not lockout*/
      if (COMMAREA.CADELFL == "Y") /* deletes allowed*/
         /* this is okay - security granted*/
      else /* deletes never allowed*/
        converseLib.validationFailed(208); /* userid not authorized to delete*/
        PFWREC.PFWERRF = "Y";
        return;
      end
    else /* lockout*/
      converseLib.validationFailed(209); /* userid not auth. to delete durr sum lockout*/
      PFWREC.PFWERRF = "Y";
      return;
    end
  end
end // end PF0H890

// vrptpm01 select scan
Function PF0H911()
  PFFREC.PFANXTNO = -1; /* select 'all' numbers*/

  call "IO2880" ("S1", SQLCA, PFFREC) {isNoRefresh = yes, isExternal = yes}; /* vrptpm01 select scan*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if select successful*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
      converseLib.validationFailed(114); /* data base was busy, please retry*/
      PFWREC.PFWERRF = "Y";
    else /* fatal db2 error, transfer to ta*/
      TA1REC.TA1LOCAT[2] = " ";
      PF0HW01.PF0HWKEY = " "; /* clear key redefinition area*/
      PF0HW01.PF0HWKC1 = PFFREC.PFESUMNM; /* move to key char 1 area*/
      PF0HW01.PF0HWKB2 = PFFREC.PFANXTNO;
                                   /* move to key binary 2 area*/
      PFWREC.PFWHKEY = PF0HW01.PF0HWKEY; /* move key to hold key area*/
      PFWREC.PFWCPROC = "PF0H911"; /* pass calling process*/
      TA1REC.TA1LOCAT[4] = "IO2880"; /* pass i/o module name*/
      TA1REC.TA1DBASE = "DPROFT";
      TA1REC.TA1TBLVU = "VRPTPM01";
      XPPF010(); /* abend routine*/
    end
  end
end // end PF0H911

// vrptpm01 select next
Function PF0H912()
  call "IO2880" ("N1", SQLCA, PFFREC) {isNoRefresh = yes, isExternal = yes}; /* vrptpm01 select next*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* this is okay - handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PF0HW01.PF0HWKEY = " "; /* clear key redefinition area*/
        PF0HW01.PF0HWKC1 = PFFREC.PFESUMNM; /* key char 1 area*/
        PF0HW01.PF0HWKB2 = PFFREC.PFANXTNO; /* key binary 2 area*/
        PFWREC.PFWHKEY = PF0HW01.PF0HWKEY;
                                   /* move key to hold key area*/
        PFWREC.PFWCPROC = "PF0H912"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2880"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VRPTPM01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end PF0H912

// vrptpm01 close scan
Function PF0H913()
  call "IO2880" ("C1", SQLCA, PFFREC) {isNoRefresh = yes, isExternal = yes}; /* vrptpm01 close scan*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if close successful*/
     /* this is okay - do nothing*/
  else
    TA1REC.TA1LOCAT[2] = " ";
    PFWREC.PFWHKEY = PFFREC.PFESUMNM;
    PFWREC.PFWCPROC = "PF0H913"; /* pass calling process*/
    TA1REC.TA1LOCAT[4] = "IO2880"; /* pass i/o module name*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VRPTPM01";
    XPPF010(); /* abend routine*/
  end
end // end PF0H913

// vrptpm01 add
Function PF0H914()
  PFFREC.XXXUSRID = COMMAREA.CAUSERID; /* move user id to record*/
  PFFREC.PFFSTIND = " "; /* init status to spaces*/

  XPPF030(); /* ta0040 date/time call routine*/

  PFFREC.ZZZSDT = TA2REC.TA2GRGGN;
                                   /* move system date to set up date*/
  PFFREC.ZZZCHGDT = TA2REC.TA2GRGGN;
                                   /* move system date to change date*/
  PFFREC.ZZZCHGTM = TA2REC.TA2TIMHM;
                                   /* move system time to change time*/
  PFFREC.ZZZCHGCT = 0; /* initialize change count to zero*/

  call "IO2880" ("A ", SQLCA, PFFREC) {isNoRefresh = yes, isExternal = yes}; /* vrptpm01 table*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if add successful*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
      converseLib.validationFailed(114); /* data base was busy, please retry*/
      PFWREC.PFWERRF = "Y";
    else /* fatal db2 error, transfer to ta*/
      TA1REC.TA1LOCAT[2] = " ";
      PFWREC.PFWHKEY = PFFREC.PFESUMNM;
      PFWREC.PFWCPROC = "PF0H914"; /* pass calling process*/
      TA1REC.TA1LOCAT[4] = "IO2880"; /* pass i/o module name*/
      TA1REC.TA1DBASE = "DPROFT";
      TA1REC.TA1TBLVU = "VRPTPM01";
      XPPF010(); /* abend routine*/
    end
  end
end // end PF0H914

// vrptpm01 delete
Function PF0H915()
  call "IO2880" ("D ", SQLCA, PFFREC) {isNoRefresh = yes, isExternal = yes}; /* vrptpm01 delete*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
      converseLib.validationFailed(114); /* data base was busy, please retry*/
      PFWREC.PFWERRF = "Y";
    else /* fatal db2 error, transfer to ta*/
      TA1REC.TA1LOCAT[2] = " ";
      PF0HW01.PF0HWKEY = " "; /* clear key redefinition area*/
      PF0HW01.PF0HWKC1 = PFFREC.PFESUMNM; /* move to key char 1 area*/
      PF0HW01.PF0HWKB2 = PFFREC.PFANXTNO;
                                   /* move to key binary 2 area*/
      PFWREC.PFWHKEY = PF0HW01.PF0HWKEY; /* move key to hold key area*/
      PFWREC.PFWCPROC = "PF0H915"; /* pass calling process*/
      TA1REC.TA1LOCAT[4] = "IO2880"; /* pass i/o module name*/
      TA1REC.TA1DBASE = "DPROFT";
      TA1REC.TA1TBLVU = "VRPTPM01";
      XPPF010(); /* abend routine*/
    end
  end
end // end PF0H915

// vsumat01 select unique
Function PF0H921()
  call "IO2770" ("S ", SQLCA, PFEREC) {isNoRefresh = yes, isExternal = yes}; /* vsumat01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PFWREC.PFWHKEY = PFEREC.PFESUMNM;
        PFWREC.PFWCPROC = "PF0H921"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2770"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VSUMAT01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end PF0H921

// vsumat01 add
Function PF0H922()
  PFEREC.XXXUSRID = COMMAREA.CAUSERID; /* move user id to record*/

  XPPF030(); /* ta0040 date/time call routine*/

  PFEREC.ZZZSDT = TA2REC.TA2GRGGN;
                                   /* move system date to set up date*/
  PFEREC.ZZZCHGDT = TA2REC.TA2GRGGN;
                                   /* move system date to change date*/
  PFEREC.ZZZCHGTM = TA2REC.TA2TIMHM;
                                   /* move system time to change time*/
  PFEREC.ZZZCHGCT = 0; /* initialize change count to zero*/
  PFEREC.ZZNBRROW = 0; /* set number of rows to 0*/

  call "IO2770" ("A ", SQLCA, PFEREC) {isNoRefresh = yes, isExternal = yes}; /* vsumat01 table*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if add successful*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
      converseLib.validationFailed(114); /* data base was busy, please retry*/
      PFWREC.PFWERRF = "Y";
    else /* fatal db2 error, transfer to ta*/
      TA1REC.TA1LOCAT[2] = " ";
      PFWREC.PFWHKEY = PFEREC.PFESUMNM;
      PFWREC.PFWCPROC = "PF0H922"; /* pass calling process*/
      TA1REC.TA1LOCAT[4] = "IO2770"; /* pass i/o module name*/
      TA1REC.TA1DBASE = "DPROFT";
      TA1REC.TA1TBLVU = "VSUMAT01";
      XPPF010(); /* abend routine*/
    end
  end
end // end PF0H922

// vsumat01 delete
Function PF0H923()
  call "IO2770" ("D ", SQLCA, PFEREC) {isNoRefresh = yes, isExternal = yes}; /* vsumat01 delete*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row deleted sucessfully*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
      converseLib.validationFailed(114); /* data base was busy, please retry*/
      PFWREC.PFWERRF = "Y";
    else /* fatal db2 error, transfer to ta*/
      TA1REC.TA1LOCAT[2] = " ";
      PFWREC.PFWHKEY = PFEREC.PFESUMNM;
      PFWREC.PFWCPROC = "PF0H923"; /* pass calling process*/
      TA1REC.TA1LOCAT[4] = "IO2770"; /* pass i/o module name*/
      TA1REC.TA1DBASE = "DPROFT";
      TA1REC.TA1TBLVU = "VSUMAT01";
      XPPF010(); /* abend routine*/
    end
  end
end // end PF0H923

// vfield01 select unique
Function PF0H931()
  call "IO2890" ("S ", SQLCA, PFIREC) {isNoRefresh = yes, isExternal = yes}; /* vfield01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
      converseLib.validationFailed(114); /* data base was busy, please retry*/
      PFWREC.PFWERRF = "Y";
    else /* fatal db2 error, transfer to ta*/
      TA1REC.TA1LOCAT[2] = " ";
      PFWREC.PFWHKEY = PFIREC.PFICD;
      PFWREC.PFWCPROC = "PF0H931"; /* pass calling process*/
      TA1REC.TA1LOCAT[4] = "IO2890"; /* pass i/o module name*/
      TA1REC.TA1DBASE = "DPROFT";
      TA1REC.TA1TBLVU = "VFIELD01";
      XPPF010(); /* abend routine*/
    end
  end
end // end PF0H931

// vrptat01 select unique
Function PF0H941()
  call "IO2740" ("S ", SQLCA, PFDREC) {isNoRefresh = yes, isExternal = yes}; /* vrptat01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
      converseLib.validationFailed(114); /* data base was busy, please retry*/
      PFWREC.PFWERRF = "Y";
    else /* fatal db2 error, transfer to ta*/
      TA1REC.TA1LOCAT[2] = " ";
      PF0HW01.PF0HWKEY = " "; /* clear key redefinition area*/
      PF0HW01.PF0HWKB1 = PFEREC.PFDREF; /* move to key binary 1 area*/
      PFWREC.PFWHKEY = PF0HW01.PF0HWKEY; /* move key to hold key area*/
      PFWREC.PFWCPROC = "PF0H941"; /* pass calling process*/
      TA1REC.TA1LOCAT[4] = "IO2740"; /* pass i/o module name*/
      TA1REC.TA1DBASE = "DPROFT";
      TA1REC.TA1TBLVU = "VRPTAT01";
      XPPF010(); /* abend routine*/
    end
  end
end // end PF0H941

// vrptfm01 select unique
Function PF0H951()
  call "IO2730" ("S ", SQLCA, PFCREC) {isNoRefresh = yes, isExternal = yes}; /* vrptfm01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
      converseLib.validationFailed(114); /* data base was busy, please retry*/
      PFWREC.PFWERRF = "Y";
    else /* fatal db2 error, transfer to ta*/
      TA1REC.TA1LOCAT[2] = " ";
      PF0HW01.PF0HWKEY = " "; /* clear key redefinition area*/
      PF0HW01.PF0HWKB1 = PFEREC.PFCREF; /* move to key binary 1 area*/
      PFWREC.PFWHKEY = PF0HW01.PF0HWKEY; /* move key to hold key area*/
      PFWREC.PFWCPROC = "PF0H951"; /* pass calling process*/
      TA1REC.TA1LOCAT[4] = "IO2730"; /* pass i/o module name*/
      TA1REC.TA1DBASE = "DPROFT";
      TA1REC.TA1TBLVU = "VRPTFM01";
      XPPF010(); /* abend routine*/
    end
  end
end // end PF0H951

// visgrp01 select scan
Function PF0H961()
  call "IO2710" ("SS", SQLCA, PFBREC) {isNoRefresh = yes, isExternal = yes}; /* visgrp01 select scan*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table action successful*/
     /* this is okay*/
  else /* fatal db2 error, transfer to ta*/
    TA1REC.TA1LOCAT[2] = " ";
    PF0HW01.PF0HWNKY = PFEREC.PFBREF; /* numric key hold*/
    PFWREC.PFWHKEY = PF0HW01.PF0HWNKY;
    PFWREC.PFWCPROC = "PF0H961"; /* pass calling process*/
    TA1REC.TA1LOCAT[4] = "IO2710"; /* pass i/o module name*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VISGRP01";
    XPPF010(); /* abend routine*/
  end
end // end PF0H961

// visgrp01 select next
Function PF0H962()
  call "IO2710" ("SN", SQLCA, PFBREC) {isNoRefresh = yes, isExternal = yes}; /* visgrp01 select next*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table action successful*/
     /* handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PF0HW01.PF0HWNKY = PFEREC.PFBREF; /* numeric key hold*/
        PFWREC.PFWHKEY = PF0HW01.PF0HWNKY;
        PFWREC.PFWCPROC = "PF0H962"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2710"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VISGRP01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end PF0H962

// visgrp01 close scan
Function PF0H963()
  call "IO2710" ("CS", SQLCA, PFBREC) {isNoRefresh = yes, isExternal = yes}; /* visgrp01 close scan*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table action successful*/
     /* this is okay*/
  else /* fatal db2 error, transfer to ta*/
    TA1REC.TA1LOCAT[2] = " ";
    PF0HW01.PF0HWNKY = PFEREC.PFBREF; /* numeric key hold*/
    PFWREC.PFWHKEY = PF0HW01.PF0HWNKY;
    PFWREC.PFWCPROC = "PF0H963"; /* pass calling process*/
    TA1REC.TA1LOCAT[4] = "IO2710"; /* pass i/o module name*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VISGRP01";
    XPPF010(); /* abend routine*/
  end
end // end PF0H963

// vpfctl01 select unique
Function PF0H971()
   /* -----------------------------------------------------------;*/
    /* the control table always contains one and only one row,  ;*/
    /* therefore no key is required for i/o.                    ;*/
   /* -----------------------------------------------------------;*/

  call "IO2670" ("S ", SQLCA, PFAREC) {isNoRefresh = yes, isExternal = yes}; /* vpfctl01 select unique*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table i/o successful*/
     /* next sentence                 do nothing*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
      PFWERRF = "Y";
      converseLib.validationFailed(114); /* data base was busy, please retry*/
    else /* fatal db2 error, transfer to ta*/
      TA1REC.TA1LOCAT[2] = " ";
      PFWREC.PFWHKEY = " ";
      PFWREC.PFWCPROC = "PF0H971"; /* pass calling process*/
      TA1REC.TA1LOCAT[4] = "IO2670"; /* pass i/o module name*/
      TA1REC.TA1DBASE = "DPROFT";
      TA1REC.TA1TBLVU = "VPFCTL01";
      XPPF010(); /* abend routine*/
    end
  end

end // end PF0H971

// vpfctl01 update 2
Function PF0H972()
  XPPF030(); /* ta0040 date/time call routine*/

  PFAREC.ZZZCHGDT = TA2REC.TA2GRGGN; /* move system date*/
  PFAREC.ZZZCHGTM = TA2REC.TA2TIMHM; /* move system time*/

   /* -----------------------------------------------------------;*/
    /* The control table always contains one and only one row,  ;*/
    /* therefore no key is required for i/o.                    ;*/
    /* Update 2 in module IO2670 automatically increments       ;*/
    /* PFAREC.PFANXTNO, the next sequence number for a VRPTPM01 ;*/
    /* report print parameter.                                  ;*/
   /* -----------------------------------------------------------;*/

  call "IO2670" ("U2", SQLCA, PFAREC) {isNoRefresh = yes, isExternal = yes}; /* vpfctl01 update 2*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if table i/o successful*/
     /* next sentence                 do nothing*/
  else /* fatal db2 error, transfer to ta*/
    /* -----------------------------------------------------------;*/
     /* -911 table page busy will cause a fatal error.  The       ;*/
     /* VRPTPM01 row has already been inserted with the current   ;*/
     /* PFANXTNO.  It must be incremented by one and updated on   ;*/
     /* the VPFCTL01 table for the next insert to work correctly. ;*/
     /* If the -911 SQLCODE was not a fatal error, the two        ;*/
     /* tables would not be in sync.                              ;*/
    /* -----------------------------------------------------------;*/
    TA1REC.TA1LOCAT[2] = " ";
    PFWREC.PFWHKEY = " ";
    PFWREC.PFWCPROC = "PF0H972"; /* pass calling process*/
    TA1REC.TA1LOCAT[4] = "IO2670"; /* pass i/o module name*/
    TA1REC.TA1DBASE = "DPROFT";
    TA1REC.TA1TBLVU = "VPFCTL01";
    XPPF010(); /* abend routine*/
  end
end // end PF0H972

// vrptpm01 select next
Function PF0H999()
  call "IO2880" ("S ", SQLCA, PFFREC) {isNoRefresh = yes, isExternal = yes}; /* vrptpm01 select next*/

  if (SQLCA.VAGen_SQLCODE == +0) /* if row found*/
     /* this is okay - handle in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* if row not found*/
       /* this is okay - handle in calling process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if table page busy*/
        converseLib.validationFailed(114); /* data base was busy, please retry*/
        PFWREC.PFWERRF = "Y";
      else /* fatal db2 error, transfer to ta*/
        TA1REC.TA1LOCAT[2] = " ";
        PF0HW01.PF0HWKEY = " "; /* clear key redefinition area*/
        PF0HW01.PF0HWKC1 = PFFREC.PFESUMNM; /* key char 1 area*/
        PF0HW01.PF0HWKB2 = PFFREC.PFANXTNO; /* key binary 2 area*/
        PFWREC.PFWHKEY = PF0HW01.PF0HWKEY;
                                   /* move key to hold key area*/
        PFWREC.PFWCPROC = "PF0H999"; /* pass calling process*/
        TA1REC.TA1LOCAT[4] = "IO2880"; /* pass i/o module name*/
        TA1REC.TA1DBASE = "DPROFT";
        TA1REC.TA1TBLVU = "VRPTPM01";
        XPPF010(); /* abend routine*/
      end
    end
  end
end // end PF0H999

// Converse PF XROTBL pop-up wndw
Function XPPF040()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XROTBL.XROCD[XX0XWCT1] != "9999") /* Or end of data*/
        if (XROTBL.XXXSTAT[XX0XWCT1] == "A" /* If active status on code*/
         && XROTBL.XROPFFL[XX0XWCT1] == "Y")
                                   /* <***** and valid for profit*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XROTBL.XROCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XROTBL.XRODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XROTBL.XXXSTAT[XX0XWCT1] == "A" /* If the status is active*/
         && XROTBL.XROPFFL[XX0XWCT1] == "Y")
                                   /* <***** and valid for profit*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XROTBL.XROCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XROTBL.XRODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XROTBL.XROCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPPF040

//*** RECORD=PF0HW01 ****
//   This record contains the working storage fields that are
// unique to application PF0H - Summary Report Print Parameters
// ***********************
Record PF0HW01 type basicRecord
  10 PFFPRTYP PFFPRTYP ; 
  10 PF0HWDEF PF0HWDEF ; 
    15 PF0HWDPR PF0HWDPR ; 
      20 PF0HWDP2 PF0HWDP2 ; 
      20 PF0HWDP3 PF0HWDP3 ; 
      20 PF0HWDP4 PF0HWDP4 ; 
      20 PF0HWDP5 PF0HWDP5 ; 
  10 PFESUMNM PFESUMNM ; 
  10 PFESRCNM PFESRCNM ; 
  10 PF0HWDSC PF0HWDSC ; 
  10 PF0HWNXT PF0HWNXT ; 
  10 PF0HWP19 PF0HWP19 ; 
  10 PF0HWDCF PF0HWDCF ; 
  10 PF0HWP12 PF0HWP12 ; 
  10 PF0HWSEF PF0HWSEF ; 
  10 PF0HWKEY PF0HWKEY ; 
    15 PF0HWKC1 PF0HWKC1 ; 
      20 PF0HWKB1 PF0HWKB1 ; 
      20 PF0HWKF1 PF0HWKF1 ; 
    15 PF0HWKB2 PF0HWKB2 ; 
    15 PF0HWKF2 PF0HWKF2 ; 
  10 PF0HWNKY PF0HWNKY ; 
  10 PFESRTEL PFESRTEL ; 
  10 YISCD YISCD ; 
  10 PFBISGRP PFBISGRP ; 
  10 PFESEIND PFESEIND ; 
  10 PFESQCOL PFESQCOL ; 
  10 PFBREF PFBREF ; 
  10 PF0HWISC PF0HWISC [200] ; 
  10 PF0HWCLS PF0HWCLS ; 
    15 PF0HWCL1 PF0HWCL1 ; 
    15 PF0HWCL2 PF0HWCL2 ; 
  10 PF0HWPRT PF0HWPRT ; 
    15 PF0HWPR1 PF0HWPR1 ; 
    15 PF0HWPR0 PF0HWPR0 ; 
      20 PF0HWPR2 PF0HWPR2 ; 
      20 PF0HWPR3 PF0HWPR3 ; 
      20 PF0HWPR4 PF0HWPR4 ; 
      20 PF0HWPR5 PF0HWPR5 ; 
  10 PF0HWMPR PF0HWMPR ; 
    15 PF0HWMP1 PF0HWMP1 ; 
    15 PF0HWMP2 PF0HWMP2 ; 
    15 PF0HWMP3 PF0HWMP3 ; 
    15 PF0HWMP4 PF0HWMP4 ; 
end // end PF0HW01

//   i/s class first 3 bytes
DataItem PF0HWCL1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   i/s class last byte
DataItem PF0HWCL2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// i/s class redefines group lvl
DataItem PF0HWCLS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete confirm msg issued flag
DataItem PF0HWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default printer group level
DataItem PF0HWDEF char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     default printer 2nd byte
DataItem PF0HWDP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     default printer 3rd byte
DataItem PF0HWDP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     default printer 4rd byte
DataItem PF0HWDP4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     default printer 5rd byte
DataItem PF0HWDP5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   default printer for terminal
DataItem PF0HWDPR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prt param report or sum desc
DataItem PF0HWDSC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i/s class ws table
DataItem PF0HWISC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     key binary 1 (bytes 1-2)
DataItem PF0HWKB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   key binary 2 (bytes 11-12)
DataItem PF0HWKB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   key character 1 (bytes 1-10)
DataItem PF0HWKC1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key redef. for abend reporting
DataItem PF0HWKEY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     key filler 1 (bytes 3-10)
DataItem PF0HWKF1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   key filler 2 (bytes 13-20)
DataItem PF0HWKF2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   scr. printer id 1st byte
DataItem PF0HWMP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   scr. printer id 2nd byte
DataItem PF0HWMP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   scr. printer id 3rd byte
DataItem PF0HWMP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   scr. printer id 4rd byte
DataItem PF0HWMP4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// printer id entered from scr.
DataItem PF0HWMPR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric key for abend reportng
DataItem PF0HWNKY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next > seq # than last display
DataItem PF0HWNXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ezeaid eq pf12 flag
DataItem PF0HWP12 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first pf19 for a summary flag
DataItem PF0HWP19 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   ws printer id last 4-byte
DataItem PF0HWPR0 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   ws printer id 1st byte
DataItem PF0HWPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   ws printer id 2nd byte
DataItem PF0HWPR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   ws printer id 3rd byte
DataItem PF0HWPR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   ws printer id 4th byte
DataItem PF0HWPR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   ws printer id 5th byte
DataItem PF0HWPR5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws printer id
DataItem PF0HWPRT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new summary name error flag
DataItem PF0HWSEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

