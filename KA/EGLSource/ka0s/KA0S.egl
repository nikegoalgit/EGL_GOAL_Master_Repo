package ka0s;

import corpcom2.XX0XW01;
import corpcom2.XZZREC;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XCFABRV;
import corpx1.XCFTBL;
import corpx1.XCTCD;
import corpx1.XGPTBL;
import corpx1.XIDTBL;
import corpx1.XNITBL;
import corpx1.XWHTBL;
import corpx2.XNIABRV;
import corpx2.XSTCD;
import corpx2.XXX-ADDR1;
import corpx2.XXX-ADDR2;
import corpx2.XXX-ADDR3;
import corpx2.XXXCITY;
import corpx2.XXXZIP;
import corpy2.YSVABRV;
import corpy2.YSVTBL;
import kl.common.KIZTBL;
import ku.common.KU0XW10;
import ku.common.KU0XW30;
import ku.common.KUCREC;
import ku.common.KULAAID;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ku.common.KUWREC;
import ku.common.KUYREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import vv.common.VCUSAP01;
import vv.common.VDSTRB01;
import vv.common.VLADDR01;
import xa.common.XA0AW02;
import xa.common.XA1REC;
//*** PROGRAM=KA0S ****
// ************************************************************
//                  maintenance history log
// ------------------------------------------------------------
//  date    int   modules             description
// ------------------------------------------------------------
// 031887   clt   ka0sm050   fix length of cust store number
//                ka0sm060   corrected screen name in heading
// 072187   clt              added 3 new fields to kumrec
// 030188   clt   ka0s070    default county code to '000'
// 031088   clt              added deferred mailing indicator
// 041488   clt   ka0s070    changed csp county code to xcycd
// 062288   clt   ka0s075    reset application if company
//                             being updated at the same time.
// 111188   jbw              added noncsp option on calls
// 111188   jbw              added xssegtr logic
// 031489   clt              replace sic code with store class
//                           and remove sperry store type
// 041489   clt              removed sales service reps
// 042489   JWOOD            removed XSRTBL FROM T & AR LIST
// 051289   clt              database changes
// 091289   dsalzw           added new screens for Nil long
//                           address processing
// 011690   jfiat            db changes
// 031690   dsalzw           change to go to km0l versus ka0d
// 032990   dsalzw           db changes
// 091090   dsalzw           added kiztbl for audit trail
// 121490   dsalzw           edit image codes against gpc code
// 020491   dsalzw           db changes
// 030191   jhemme           removed kudrec
// 031891   twatso           move xidcd to store from customer
// 041191   twatso           handle the nil invoice dist too
// 041591   twatso           make dept 4 bytes instead of 2
// 042291   wjohns           changed to call ka0d instead of
//                             km0l.
// 050191   dsalzw           change heading to store self id
// 072591   dsalzw           fix map attribute
// 101191   CHELLM           Added CU-OFSHR-FL to map KA0SM050
// 031392   CHELLM           Added xxxzip to update only.
//                           march 92 db2 changes
// 050692   CHELLM           Removed restriction for 3 digit
//                           Store ID. (KA0SSD1)
// 021193   CHELLM           FIX 'Store 0 skipped' bug.
//                           Added refresh of KUCREC in KA0S050
//                           Flow process.
// 050393   CHELLM           FIX screen colors.
// 060793   CHELLM           Added default GPC and XWH's
//                           for NIL adds.
// 7-july-1993         dlegg      Change calls to TA0020 with
//                                ABND to RETN. KA0S020,070,
//                                071,075,S1G,S1D,S2G,S2D,S2G,
//                                S2D,S62,S68,S72.
// 13-july-1993        dlegg      Add sgrp to init all appl
//                                records. KA0S010.
// 10/03/93 CHELLM     fixed first drop ship default value
//                     ka0sm050 kumstrid use edit attribute:
//                     trailing minus sign for initial -1 value
// 11/12/93 CHELLM     Database changes:  vcmpny01, vaddr001
// 12/01/93 CHELLM     Correct First Store ID default logic.
// 10/03/93 CHELLM     Add currency code default canada and u.s
// 11/17/97 MBURLE     Y2KFIX: Regenerated to pick up changes
//                     to date routine, XX0XS01.
// 03/28/01 GDECKE     ADD LOGIC TO REASSIGN SAP ACCOUNT ID
//                     FOR NIL CUSTOMER.
// 12/26/01 LTANIK     Add Logic to validate SAP-ACCT and
//                     record VCUSAP01 changes in Audit Table.
// *********************
Program KA0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KA0SW01 KA0SW01; // record
  KU0XW10 KU0XW10; // record
  KU0XW30 KU0XW30; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUWREC KUWREC; // record
  KUYREC KUYREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCUSAP01 VCUSAP01; // record
  VDSTRB01 VDSTRB01; // record
  VLADDR01 VLADDR01; // record
  XA0AW02 XA0AW02; // record
  XA1REC XA1REC; // record
  XX0XW01 XX0XW01; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XCFTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XIDTBL {deleteAfterUse = yes}; // table
  use XNITBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YSVTBL {deleteAfterUse = yes}; // table
  use KA0SM.KA0SM050,  // forms
      KA0SM.KA0SM051, 
      KA0SM.KA0SM060, 
      KA0SM.KA0SM061
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KA0S010: KA0S010();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0S020; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S020: KA0S020();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (COMMAREA.CADLVL[2] == "Y")
      goto KA0S031; /* proceed to next long address process*/
    else
      goto KA0S030; /* proceed to next process*/
    end


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S030: KA0S030();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0S040; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S031: KA0S031();
     /* ***********************************************************/
     /* *****   f l o w    s t a g e                          *****/
     /* ***********************************************************/


    goto KA0S041; /* proceed to next long process*/


     /* ***********************************************************/
     /* *****   e n d   f l o w    s t a g e                  *****/
     /* ***********************************************************/
    KA0S040: KA0S040();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0S050; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S041: KA0S041();
     /* *********************************************************/
     /* ***       f l o w    s t a g e                      *****/
     /* *********************************************************/


    goto KA0S051; /* process next long process*/


     /* *********************************************************/
     /* ***      e n d   f l o w    s t a g e               *****/
     /* *********************************************************/
    KA0S050: KA0S050();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.eventKey is pa2)
      goto KA0S020; /* 02-11-93 chellm Added this group to reset KUCREC to*/
                                    /* prevent store zero from being*/
                                     /* skipped.*/
      goto KA0S030;
    else
      if (converseVar.validationMsgNum == 0)
        if (KA0SW01.KA0SWFST == "Y")
          converseLib.validationFailed(22);
          KA0SW01.KA0SWFST = "N";
          goto KA0S050;
        else
          if (converseVar.eventKey is pf12)
            if (KA0SM050.KUMSTAID == KA0SW01.KA0SWNXT)
              KA0SW01.KA0SWNXT = 0;
            else
              /* next sentence*/
            end
            goto KA0S055;
          else
            converseLib.validationFailed(22);
            goto KA0S050;
          end
        end
      else
        set KA0SM050 alarm;
        goto KA0S050;
      end
    end


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S051: KA0S051();
     /* *********************************************************/
     /* ***      f l o w    s t a g e                      ******/
     /* *********************************************************/


    if (converseVar.eventKey is pa2)
      goto KA0S031;
    else
      if (converseVar.validationMsgNum == 0)
        if (KA0SW01.KA0SWFST == "Y")
          converseLib.validationFailed(22);
          KA0SW01.KA0SWFST = "N";
          goto KA0S051;
        else
          if (converseVar.eventKey is pf12)
            if (KA0SM051.KUMSTAID == KA0SW01.KA0SWNXT)
              KA0SW01.KA0SWNXT = 0;
            else
               /* next sentence*/
            end
            goto KA0S056;
          else
            converseLib.validationFailed(22);
            goto KA0S051;
          end
        end
      else
        set KA0SM051 alarm;
        goto KA0S051;
      end
    end


     /* *********************************************************/
     /* ***       e n d  f l o w    s t a g e              ******/
     /* *********************************************************/
    KA0S055: KA0S055();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0S060; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S056: KA0S056();
     /* *****************************************************/
     /* ***         f l o w    s t a g e                *****/
     /* *****************************************************/


    goto KA0S061; /* proceed to next long process*/


     /* *****************************************************/
     /* ***      e n d    f l o w    s t a g e          *****/
     /* *****************************************************/
    KA0S060: KA0S060();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (KA0SW01.KA0SWLOP >= 1000)
      goto KA0S999;
    end
    if (converseVar.eventKey is pa2)
      goto KA0S055;
    else
      if (converseVar.validationMsgNum == 0)
        if (KA0SW01.KA0SWFST == "Y")
          converseLib.validationFailed(22);
          KA0SW01.KA0SWFST = "N";
          goto KA0S060;
        else
          if (converseVar.eventKey is pf12)
            goto KA0S070;
          else
            converseLib.validationFailed(22);
            goto KA0S060;
          end
        end
      else
        set KA0SM060 alarm;
        goto KA0S060;
      end
    end


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S061: KA0S061();
     /* ******************************************************/
     /* ***           f l o w    s t a g e               *****/
     /* ******************************************************/


    if (KA0SW01.KA0SWLOP >= 1000)
      goto KA0S999;
    end

    if (converseVar.eventKey is pa2)
      goto KA0S056;
    else
      if (converseVar.validationMsgNum == 0)
        if (KA0SW01.KA0SWFST == "Y")
          converseLib.validationFailed(22);
          KA0SW01.KA0SWFST = "N";
          goto KA0S061;
        else
          if (converseVar.eventKey is pf12)
            goto KA0S071;
          else
            converseLib.validationFailed(22);
            goto KA0S061;
          end
        end
      else
        set KA0SM061 alarm;
        goto KA0S061;
      end
    end


     /* ******************************************************/
     /* ***        e n d    f l o w    s t a g e         *****/
     /* ******************************************************/
    KA0S070: KA0S070();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.validationMsgNum == 27)
      goto KA0S060;
    else
      goto KA0S075;
    end


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S071: KA0S071();
     /* *******************************************************/
     /* ****             f l o w    s t a g e             *****/
     /* *******************************************************/


    if (converseVar.validationMsgNum == 27)
      goto KA0S061;
    else
      goto KA0S075;
    end


     /* *******************************************************/
     /* ****     e n d    f l o w    s t a g e            *****/
     /* *******************************************************/
    KA0S075: KA0S075();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (KA0SW01.KA0SWRST == "Y") /* company being updated*/
      goto KA0S010;
    end

    goto KA0S080; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S080: KA0S080();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (COMMAREA.CADLVL[2] == "Y")
      goto KA0S061; /* return to re-display long screen*/
    else
      goto KA0S060; /* return to re-display screen*/
    end


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0S999: KA0S999();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


                /* no flow processing done here*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
  end // end main
end // end KA0S

// ADD AUDIT RECORD
Function KA0S-ADD-AUDT-RECD()
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                 /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "KA0S-ADD-AUDIT-RECD  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "KA0S"; /* Program number*/
    TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCUAUD01"; /* Table view name*/
    TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* call error routine*/
    XSPF4();
  end
end // end KA0S-ADD-AUDT-RECD

// Add VCUSAP01
Function KA0S-ADD-VCUSAP01()
  /* * KA0S-ADD-VCUSAP01*/
  /* * ADD NEW ROW FROM DCUST.VCUSAP01*/
  /* * THIS IS EXECUTED AFTER DELETING THE OLD VERSION OF THE VCUSAP01*/
  /* * ROW. CU-CO-ID AND CU-STOR-ID ARE KEY FIELDS THAT ARE TO BE*/
  /* * UPDATED, SO A DELETE AND ADD IS DONE INSTEAD OF AN UPDATE.*/
  /*  */
  /* the remaining fields were already filled in when the SAP/GOAL*/
  /* link program initially added the VCUSAP01 line.*/
  VCUSAP01.CU-ADDR-ID = KUMREC.KUMSTAID;
  VCUSAP01.CU-BLGRP-ID = KUMREC.KUCCOID;
  VCUSAP01.XXXPGUID = "NILMAINT";

   /* GET SYSTEM DATE AND TIME, MOVE TO ZZ- FIELDS*/
  XX0XS01();
  VCUSAP01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VCUSAP01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
  VCUSAP01.ZZ-CHNG-CNT = VCUSAP01.ZZ-CHNG-CNT + 1;

  /* TCS CHANGE BEGIN 12/20/2001*/
  VCUSAP01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VCUSAP01.ZZ-CHNG-CNT = 0;
  /* TCS CHANGE END   12/20/2001*/
  try
    call "VCUSAP01" ("A ", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      KA0SS-ADD-VPARM101(); /* INSERT VPARM0101 LINE TO LET*/
                                   /* SAP KNOW THE SAP# WAS REASSIGNED*/
  /* TCS CHANGE BEGIN   - 12/21/2001 ADD AUDIT RECORD*/
      set KUZREC empty;
      KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
      KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;

      KUZREC.KUZTYPE = "A"; /* assign type code value*/
      KUZREC.KUZBFCD = " "; /* assign "after" code*/
      KUZREC.XXXTBLNM = "VCUSAP01";
                               /* move tbl name to audit rec*/
      KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
      KUZREC.KUCCOID = VCUSAP01.KUCCOID; /* move co id to audit rec*/
      KUZREC.KUMSTRID = VCUSAP01.KUMSTRID;
                               /* move store id to audit rec*/
      KUZREC.KUZDATA = VCUSAP01.VCUSAP01-RECORD-GROUP; /* MOVE GRP DA*/
      if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
        KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
        KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
        KA0S-ADD-AUDT-RECD();
      else
        KUZREC.KUZSSEQ = 0;
        KUZREC.KUZLEN = 0;
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "KA0S   ";
        TA1REC.TA1LOCAT[1] = "KA0S-ADD-";
        TA1REC.TA1LOCAT[2] = "KIZTBL   ";
        TA1REC.TA1LOCAT[3] = "VCUSAP01 ";
        TA1REC.TA1MAP = "KA0SM001";
        TA1REC.TA1DBASE = "DCUST.";
        TA1REC.TA1TBLVU = "VCUSAP01";
        TA1TBLKE = "TABLE NOT FOUND";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end

      /* TCS CHANGE 12/21/2001 END    ADD AUDIT RECORD*/

      return; /* Return to previous process*/
    else
      converseLib.validationFailed(481); /* Invalid SAP number*/
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KA0S-ADD-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KA0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KA0S-ADD-VCUSAP01

// Delete VCUSAP01
Function KA0S-DEL-VCUSAP01()
  /* * KA0S-DEL-VCUSAP01*/
  /* * REMOVE SELECTED ROW FROM DCUST.VCUSAP01*/
  /*  */
  /* DO NOT ALTER THESE FIELDS - THE VALUES THAT WERE RETURNED*/
  /* FROM THE ORIGINAL SELECT ARE THE ONES NEEDED TO TARGET THE*/
  /* ROW THAT MUST BE DELETED.*/
  /* SET VCUSAP01 EMPTY;*/
  /* MOVE KA0SM010.KUCCOID TO VCUSAP01.KUCCOID;*/
  /* MOVE KA0SM010.KUMSTRID TO VCUSAP01.KUMSTRID;*/
  /* MOVE 0 TO VCUSAP01.XNXCD;*/

  try
    call "VCUSAP01" ("D ", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)

      /* TCS CHANGE 12/21/2001 BEGIN  ADD AUDIT RECORD*/
      set KUZREC empty;
      KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
      KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;

      KUZREC.KUZTYPE = "D"; /* assign type code value*/
      KUZREC.KUZBFCD = " "; /* assign "after" code*/
      KUZREC.XXXTBLNM = "VCUSAP01";
                                /* move tbl name to audit rec*/
      KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
      KUZREC.KUCCOID = VCUSAP01.KUCCOID; /* move co id to audit rec*/
      KUZREC.KUMSTRID = VCUSAP01.KUMSTRID;
                                /* move store id to audit rec*/
      KUZREC.KUZDATA = VCUSAP01.VCUSAP01-RECORD-GROUP; /* MOVE GRP DA*/
      if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
        KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
        KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
        KA0S-ADD-AUDT-RECD();
      else
        KUZREC.KUZSSEQ = 0;
        KUZREC.KUZLEN = 0;
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "KM0S   ";
        TA1REC.TA1LOCAT[1] = "KM0S-ADD-";
        TA1REC.TA1LOCAT[2] = "KIZTBL   ";
        TA1REC.TA1LOCAT[3] = "VCUSAP01 ";
        TA1REC.TA1MAP = "KM0SM001";
        TA1REC.TA1DBASE = "DCUST.";
        TA1REC.TA1TBLVU = "VCUSAP01";
        TA1TBLKE = "TABLE NOT FOUND";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end

      /* TCS CHANGE 12/21/2001 END    ADD AUDIT RECORD*/

      return; /* Return to previous process*/
    else
      converseLib.validationFailed(481); /* Invalid SAP number*/
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KA0S-DEL-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KA0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KA0S-DEL-VCUSAP01

// Select VCUSAP01
Function KA0S-DUP-VCUSAP01()
  /* * KA0S-DUP-VCUSAP01*/
  /* * SELECT ROW FROM DCUST.VCUSAP01 USING COMPANY, STORE AND DEPT=0.*/
  /* * IF FOUND, A ROW ALREADY EXISTS FOR THE STORE, AND THE UPDATE*/
  /* * TO THE SAP NUMBER SHOULD NOT BE DONE BECAUSE THE RESULT WILL BE*/
  /* * A DUPLICATE ON COMPANY AND STORE, WHICH CAN CAUSE PROCESSING*/
  /* * ERRORS WHEN DOING SELECTS LATER. SHOW ERROR MESSAGE.*/
  /*  */
  KA0SW01.KA0SW-VCUSAP01-COPY = VCUSAP01-RECORD-GROUP;
  /*  */
  set VCUSAP01 empty;

  VCUSAP01.KUCCOID = KA0SM051.KUCCOID;
  VCUSAP01.KUMSTRID = KA0SM051.KUMSTRID;
  VCUSAP01.XNXCD = 0;

  try
    call "VCUSAP01" ("SB", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0
     && KA0SM051.CU-SAP-ACCT-ID != VCUSAP01.CU-SAP-ACCT-ID)
      if (KA0SW01.KA0SW-DUP-SAP-OVRD-FL == "Y"
       && converseVar.eventKey is pf12)
        /* UPDATE COMPANY-ID ON THE OLD SAP ROW TO 9777777 AND CONTINUE*/
        /* WITH THE STORE UPDATE. OTHERWISE, SHOW WARNING MESSAGE*/
        KA0S-DEL-VCUSAP01();
        VCUSAP01.KUCCOID = 9777777;
        VCUSAP01.KUMSTRID = KUMREC.KUMSTRID;
        KA0S-ADD-VCUSAP01();
        KA0SW01.KA0SW-DUP-SAP-OVRD-FL = "N";


      else
        KA0SW01.KA0SW-REPLACE-SAP-LIT = "PRESS PF12 AGAIN TO REPLACE SAP ACCT ";
        KA0SW01.KA0SW-REPLACE-SAP-ACCT-ID = VCUSAP01.CU-SAP-ACCT-ID;
        KA0SM051.KA0SMMSG = KA0SW01.KA0SW-REPLACE-SAP-MSG;

        /* MOVE -1 TO KA0SW01.KA0SWLSI; /* hose up last store id*/
        set KA0SM051.CU-SAP-ACCT-ID cursor, modified, bold;
        converseLib.validationFailed(485); /* UPDATE WOULD CAUSE DUPLICATE ROW*/
        /* MOVE VCUSAP01.CU-SAP-ACCT-ID TO KA0SM051.CU-SAP-ACCT-ID;*/
        /* MOVE VCUSAP01.CU-SAP-ACCT-ID TO KA0SW01.CU-SAP-ACCT-ID;*/
      end
      VCUSAP01-RECORD-GROUP = KA0SW01.KA0SW-VCUSAP01-COPY;
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        VCUSAP01-RECORD-GROUP = KA0SW01.KA0SW-VCUSAP01-COPY;
        return; /* Return to previous process*/
      end
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KA0S-DUP-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KA0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KA0S-DUP-VCUSAP01

// Select VCUSAP01
Function KA0S-SEL-VCUSAP01()
  /* * KA0S-SEL-VCUSAP01*/
  /* * SELECT ROW FROM DCUST.VCUSAP01*/
  /*  */
  set VCUSAP01 empty;

  if (KA0SW01.KA0SW-ENTERED-SAP-ACCT == "Y")
    VCUSAP01.CU-SAP-ACCT-ID = KA0SM051.CU-SAP-ACCT-ID;

    try
      call "VCUSAP01" ("S ", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
    end /* Select record*/

  else
    VCUSAP01.KUCCOID = KA0SM051.KUCCOID;
    VCUSAP01.KUMSTRID = KA0SM051.KUMSTRID;
    VCUSAP01.XNXCD = 0;

    try
      call "VCUSAP01" ("SB", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
    end /* Select record*/

  end

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)

      if (KA0SW01.KA0SW-ENTERED-SAP-ACCT == "N")
        KA0SM051.CU-SAP-ACCT-ID = VCUSAP01.CU-SAP-ACCT-ID;
        KA0SW01.CU-SAP-ACCT-ID = VCUSAP01.CU-SAP-ACCT-ID;
      else
        KA0SW01.KA0SW-FROM-CUST-IS-NIL = "Y";
        if (VCUSAP01.KUCCOID == 9777777)
           /* next sentence*/
        else
  /* TCS CHANGE BEGIN 12/20/2001*/
  /* KA0SS-SEL-VCMPNY01;*/
  /* IF KA0SW01.KA0SW-FROM-CUST-IS-NIL = 'N';*/
  /* MOVE -1 TO KA0SW01.KA0SWLSI;/* hose up last store id*/
  /* SET KA0SM051.CU-SAP-ACCT-ID CURSOR,MODIFIED,BRIGHT;*/
  /* MOVE 481 TO EZEMNO;    /* Invalid SAP number*/
  /* END;*/
  /* TCS CHANGE END   12/20/2001*/
        end
      end

      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        if (KA0SW01.KA0SW-ENTERED-SAP-ACCT == "Y")
          set KA0SM051.CU-SAP-ACCT-ID cursor, modified, bold;
          converseLib.validationFailed(481); /* Invalid SAP number*/
        end
        return; /* Return to previous process*/
     /* TCS CHANGE END   12/20/2001*/
      end
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KA0S-SEL-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KA0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KA0S-SEL-VCUSAP01

// first time thru logic
Function KA0S010()


   /* *************************************************************/
   /* *****        i n i t i t i a l    p r o c e s s        ******/
   /* *************************************************************/


  XSENTRY();

  XSSEGTR(); /* 11/88 jbw - set segmented trans id*/

  if (COMMAREA.CAFROMAP != "KA0M" /* if not from menu*/
   && COMMAREA.CAFROMAP != "KA0C" /* and not from "add company"*/
   && COMMAREA.CAFROMAP != "KA0D") /* end not from "add customer unit"*/
    COMMAREA.CATOAP = "KA0M"; /* destination "customer add menu"*/
    XSEXIT(); /* perform transfer*/
    exit program; /* if transfer no good "stop !"*/
  end /* end of "if" statement*/
  KA0SS-INIT-RECS();
  KA0SW01.KA0SWGRP = COMMAREA.CAUSERA;
  KA0SW01.KA0SWNXT = 0;
  KA0SW01.KA0SWLOP = 0;
  set KA0SM050 initial;
  set KA0SM051 initial;
  set KA0SM060 initial;
  set KA0SM061 initial;
  XA0AW02.XXXUSER = COMMAREA.CAUSERID;
                                 /* ;initialize user id from xa0a*/





end // end KA0S010

// call db2 io mod for co. info
Function KA0S020()


   /* *************************************************************/
   /* ***** this is where a dbii i/o module is called        ******/
   /* ***** to determine if the company exists, the company  ******/
   /* ***** row is read in the company table, otherwise      ******/
   /* ***** control is returned to the menu along with an    ******/
   /* ***** error message.                                   ******/
   /* *************************************************************/


  KUCREC.KUCCOID = KA0SW01.KA0SWCID;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;  call i/o mod to select co.*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      KA0SW01.KA0SWERR = 25; /* ERROR "not found"*/
      COMMAREA.CAUSERA = KA0SW01.KA0SWGRP;
                                        /* work fields to commarea*/
      COMMAREA.CATOAP = "KA0M";
                                   /* destination of control xfer*/
      XSEXIT(); /* xfer control to add menu*/
    else /* else(error other than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0S020 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUCREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  end /* end of "if" statement*/





end // end KA0S020

// call db2 io mod for address
Function KA0S030()


   /* *************************************************************/
   /* ***** this is where a dbii i/o module will be called   ******/
   /* ***** to get the information on the address table      ******/
   /* ***** the address on the company table is used to      ******/
   /* ***** the store address.                               ******/
   /* *************************************************************/


  XA0AW02.KULAAID = KUCREC.KUCCOAID;
  XA0AW02.KUCCOID = KUCREC.KUCCOID;
  XA0AW02.XA0AWFNC = "G";
  call "XA0A" (XA0AW02) {isNoRefresh = yes};
  if (XA0AW02.XA0AWERR[1] != 0)
    set KA0SM050.KUMSTAID cursor, bold;
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
  end





end // end KA0S030

// call db2 io mod for long addr
Function KA0S031()


   /* *************************************************************/
   /* ***** this is where a dbii i/o module will be called   ******/
   /* ***** to get the information on the address table      ******/
   /* ***** the address on the company table is used to      ******/
   /* ***** the store address.                               ******/
   /* *************************************************************/


  XA1REC.NLATYPIN = "C";
  XA1REC.NLABSIND = " ";
  XA1REC.NLAONECH = " ";
  XA1REC.NLAADRID = KUCREC.KUCCOAID;
  XA1REC.NLAINTGR = KUCREC.KUCCOID;
  XA1REC.NLASINT1 = 0;
  XA1REC.NLASINT2 = 0;

  XA1REC.XA1FUNCT = "G";

  call "XA0C" (XA1REC) {isNoRefresh = yes};
  if (XA1REC.XA1ERIND[1] != 0)
    set KA0SM051.KUMSTAID cursor, bold;
    if (XA1REC.XA1ERIND[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[1]);
    end
  end





end // end KA0S031

// format store screen
Function KA0S040()


   /* *************************************************************/
   /* *****     f o r m a t    s t o r e    s c r e e n      ******/
   /* *************************************************************/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-OFSHR-FL.*/

   /* *************************************************************/


  set KA0SM050 initial;
  KA0SM050.KUCCOID = KUCREC.KUCCOID;
  KA0SM050.KUCCONM = KUCREC.KUCCONM;
  KA0SM050.KUCCOANM = KUCREC.KUCCOANM;
  KA0SM050.KUMSTRID = KA0SW01.KA0SWSID;
  KA0SM050.KA0SMDT = VGVar.currentShortGregorianDate;
  KA0SM050.KUMSTAID = XA0AW02.KULAAID;
  KA0SW01.KA0SWAID = XA0AW02.KULAAID;
  KA0SM050.XXX-ADDR1 = XA0AW02.XXX-ADDR1;
  KA0SM050.XXX-ADDR2 = XA0AW02.XXX-ADDR2;
  KA0SM050.XXX-ADDR3 = XA0AW02.XXX-ADDR3;
  KA0SM050.XXXCITY = XA0AW02.XXXCITY;
  KA0SM050.XSTCD = XA0AW02.XSTCD;
  KA0SM050.XXXZIP = XA0AW02.XXXZIP;
  KA0SM050.XCTCD = XA0AW02.XCTCD;
  KA0SW01.KULAAID = XA0AW02.KULAAID;
  KA0SW01.XXX-ADDR1 = XA0AW02.XXX-ADDR1;
  KA0SW01.XXX-ADDR2 = XA0AW02.XXX-ADDR2;
  KA0SW01.XXX-ADDR3 = XA0AW02.XXX-ADDR3;
  KA0SW01.XXXCITY = XA0AW02.XXXCITY;
  KA0SW01.XSTCD = XA0AW02.XSTCD;
  KA0SW01.XXXZIP = XA0AW02.XXXZIP;
  KA0SW01.XCTCD = XA0AW02.XCTCD;
  KA0SM050.KA0SMSFL = "N";
  KA0SM050.KUMDCIND = "N";
  KA0SM050.KUMDMIND = "N";
  KA0SM050.CU-OFSHR-FL = "N";
  KA0SM050.KUMRQRWF = "N";
  KA0SM050.KUMRQLBF = "N";
  KA0SM050.KUMRQDSF = "N";
  KA0SM050.KUMRQPKF = "N";
  KA0SW01.KA0SWFST = "Y";

  KA0SW01.KA0SWFSR = "N"; /* initialize first store flag to 'no'*/

  set KA0SM050.KUMSTRID cursor; /* initialize cursor position*/


end // end KA0S040

// format long store screen
Function KA0S041()


   /* *************************************************************/
   /* **  f o r m a t    l o n g   s t o r e    s c r e e n   *****/
   /* *************************************************************/


  set KA0SM051 initial;
  KA0SM051.KUCCOID = KUCREC.KUCCOID;
  KA0SM051.KUCCONM = KUCREC.KUCCONM;
  KA0SM051.KUCCOANM = KUCREC.KUCCOANM;
  KA0SM051.KUMSTRID = KA0SW01.KA0SWSID;
  KA0SM051.CU-SAP-ACCT-ID = KA0SW01.CU-SAP-ACCT-ID;
  KA0SM051.KA0SMDT = VGVar.currentShortGregorianDate;
  KA0SM051.KUMSTAID = XA1REC.NLAADRID;
  KA0SW01.KA0SWAID = XA1REC.NLAADRID;
  KA0SM051.XXX-ADDR1 = XA1REC.XXX-ADDR1;
  KA0SM051.XXX-ADDR2 = XA1REC.XXX-ADDR2;
  KA0SM051.XXX-ADDR3 = XA1REC.XXX-ADDR3;
  KA0SM051.XXX-ADDR4 = XA1REC.XXX-ADDR4;
  KA0SM051.XXX-ADDR5 = XA1REC.XXX-ADDR5;
  KA0SM051.XXX-ADDR6 = XA1REC.XXX-ADDR6;
  KA0SM051.XSTCD = XA1REC.XSTCD;
  KA0SM051.XXXZIP = XA1REC.XXXZIP;
  KA0SM051.XCTCD = XA1REC.XCTCD;
  KA0SW01.KULAAID = XA1REC.NLAADRID;
  KA0SW01.XXX-ADDR1 = XA1REC.XXX-ADDR1;
  KA0SW01.XXX-ADDR2 = XA1REC.XXX-ADDR2;
  KA0SW01.XXX-ADDR3 = XA1REC.XXX-ADDR3;
  KA0SW01.XSTCD = XA1REC.XSTCD;
  KA0SW01.XXXZIP = XA1REC.XXXZIP;
  KA0SW01.XCTCD = XA1REC.XCTCD;
  KA0SM051.KA0SMSFL = "N";
  KA0SM051.KUMDCIND = "N";
  KA0SM051.KUMDMIND = "N";
  KA0SM051.KUMRQRWF = "N";
  KA0SM051.KUMRQLBF = "N";
  KA0SM051.KUMRQDSF = "N";
  KA0SM051.KUMRQPKF = "N";
  KA0SW01.KA0SWFST = "Y";

  KA0SW01.KA0SWFSR = "N"; /* initialize first store flag to 'no'*/

  set KA0SM051.KUMSTRID cursor; /* initialize cursor position*/


end // end KA0S041

// converse add store screen
Function KA0S050()
  converse KA0SM050 ;


  KA0SS1H(); /* set modified fields to modified*/
  KA0SSPF(); /* standard pf-key checking*/
  KA0SS10(); /* edit checking for screen*/





end // end KA0S050

// converse add store screen
Function KA0S051()

   /* *************************************************************/
   /* *    M A I N T T N A N C E     H I S T O R Y    L O G      **/
   /* *----------------------------------------------------------**/
   /* *   DATE    PGRM    DESCRIPTION                            **/
   /* *----------------------------------------------------------**/
   /* * 03-28-01  GDECKE  HANDLE SAP ACCOUNT ID ON NIL CUSTOMER  **/
   /* *----------------------------------------------------------**/

  if (KA0SW01.KA0SW-NIL-CUST-IND == "N")
    KA0SM051.CU-SAP-ACCT-ID = " ";
    set KA0SM051.KA0SM-SAP-ACCT-LIT invisible, protect;
    set KA0SM051.CU-SAP-ACCT-ID invisible, protect;
  else
    KA0SW01.KA0SW-PREV-SAP-ACCT = KA0SM051.CU-SAP-ACCT-ID;
    KA0SW01.KA0SW-PREV-CO-ID = KA0SM051.KUCCOID;
    KA0SW01.KA0SW-PREV-STOR-ID = KA0SM051.KUMSTRID;
  end

  if (KA0SW01.KA0SW-DUP-SAP-OVRD-FL == "N"
   && converseVar.validationMsgNum == 485)
    KA0SW01.KA0SW-DUP-SAP-OVRD-FL = "Y";
  else
    KA0SW01.KA0SW-DUP-SAP-OVRD-FL = "N";
  end



  converse KA0SM051 ;


  KA0SS2H(); /* set modified fields to modified*/
  KA0SSPF(); /* standard pf-key checking*/
  KA0SS20(); /* edit checking for screen*/

   /* synchronize ws with value found in ka0sm051.CU-SAP-ACCT-ID*/

   /* determine if this is a NIL customer*/
  if (KA0SM051.KUCCOID != 0)
    KA0SS-SEL-VDSTRB01();
  end

  if (KA0SM051.KUCCOID == 0
   || KA0SW01.KA0SW-NIL-CUST-IND == "N")
     /* next sentence - do not process the SAP account*/
  else
    if (KA0SM051.KUCCOID != KA0SW01.KA0SW-PREV-CO-ID
     || KA0SM051.KUMSTRID != KA0SW01.KA0SW-PREV-STOR-ID)
      if (KA0SM051.CU-SAP-ACCT-ID == KA0SW01.KA0SW-PREV-SAP-ACCT)

        KA0SM051.CU-SAP-ACCT-ID = " ";
        VCUSAP01.CU-SAP-ACCT-ID = " ";
        KA0SW01.CU-SAP-ACCT-ID = " ";
      end
    end


  /* TCS CHANGE BEGIN 12/20/2001*/
  /* IF KA0SM051.CU-SAP-ACCT-ID = ' ';*/
  /* MOVE 'N' TO KA0SW01.KA0SW-ENTERED-SAP-ACCT;*/
  /* PERFORM KA0S-SEL-VCUSAP01;*/
  /* MOVE VCUSAP01.CU-SAP-ACCT-ID TO KA0SM051.CU-SAP-ACCT-ID;*/
  /* ELSE;*/
    KA0SW01.KA0SW-ENTERED-SAP-ACCT = "Y";
    KA0S-SEL-VCUSAP01();
  /* END;*/
  /* TCS CHANGE END   12/20/2001*/
  end

end // end KA0S051

// format ship-to screen
Function KA0S055()


   /* *************************************************************/
   /* *****    f o r m a t    s h i p - t o    s c r e e n   ******/
   /* *************************************************************/


  set KA0SM060 initial;
  KA0SW01.KA0SWFST = "Y";
  KA0SM060.KA0SMDT = VGVar.currentShortGregorianDate;
  KA0SM060.KUCCOID = KUCREC.KUCCOID;
  KA0SM060.KUCCONM = KUCREC.KUCCONM;
  KA0SM060.KUCCOANM = KUCREC.KUCCOANM;
  KA0SM060.KUMSTRID = KA0SM050.KUMSTRID;
  KA0SM060.KUMSTRNM = KA0SM050.KUMSTRNM;
  KA0SM060.KUMSHAID = KA0SM050.KUMSTAID;
  KA0SW01.KA0SWAID = KA0SM050.KUMSTAID;
  KA0SM060.XXX-ADDR1 = KA0SM050.XXX-ADDR1;
  KA0SM060.XXX-ADDR2 = KA0SM050.XXX-ADDR2;
  KA0SM060.XXX-ADDR3 = KA0SM050.XXX-ADDR3;
  KA0SM060.XXXCITY = KA0SM050.XXXCITY;
  KA0SM060.XSTCD = KA0SM050.XSTCD;
  KA0SM060.XXXZIP = KA0SM050.XXXZIP;
  KA0SM060.XCTCD = KA0SM050.XCTCD;
  if (KA0SM050.KA0SMSFL == "Y")
    set KA0SM060.KA0SMSID skip;
    set KA0SM060.KUMSHAID skip;
    set KA0SM060.XXX-ADDR1 skip;
    set KA0SM060.XXX-ADDR2 skip;
    set KA0SM060.XXX-ADDR3 skip;
    set KA0SM060.XXXCITY skip;
    set KA0SM060.XSTCD skip;
    set KA0SM060.XXXZIP skip;
    set KA0SM060.XCTCD skip;
    set KA0SM060.XGPCD[1] cursor;
  else
    set KA0SM060.KA0SMSID cursor; /* initialize cursor position*/
  end





end // end KA0S055

// format long ship-to screen
Function KA0S056()


   /* *************************************************************/
   /* *** f o r m a t    N I L   s h i p - t o    s c r e e n   ***/
   /* *************************************************************/


  set KA0SM061 initial;
  KA0SW01.KA0SWFST = "Y";
  KA0SM061.KA0SMDT = VGVar.currentShortGregorianDate;
  KA0SM061.KUCCOID = KUCREC.KUCCOID;
  KA0SM061.KUCCONM = KUCREC.KUCCONM;
  KA0SM061.KUCCOANM = KUCREC.KUCCOANM;
  KA0SM061.KUMSTRID = KA0SM051.KUMSTRID;
  KA0SM061.KUMSTRNM = KA0SM051.KUMSTRNM;
  KA0SM061.KUMSHAID = KA0SM051.KUMSTAID;
  KA0SW01.KA0SWAID = KA0SM051.KUMSTAID;
  KA0SM061.XXX-ADDR1 = KA0SM051.XXX-ADDR1;
  KA0SM061.XXX-ADDR2 = KA0SM051.XXX-ADDR2;
  KA0SM061.XXX-ADDR3 = KA0SM051.XXX-ADDR3;
  KA0SM061.XXX-ADDR4 = KA0SM051.XXX-ADDR4;
  KA0SM061.XXX-ADDR5 = KA0SM051.XXX-ADDR5;
  KA0SM061.XXX-ADDR6 = KA0SM051.XXX-ADDR6;
  KA0SM061.XSTCD = KA0SM051.XSTCD;
  KA0SM061.XXXZIP = KA0SM051.XXXZIP;
  KA0SM061.XCTCD = KA0SM051.XCTCD;

   /* ------------   Move default values    --------------*/
  KA0SM061.XGPCD[1] = "02";
  KA0SM061.XGPCD[2] = "03";
  KA0SM061.XGPCD[3] = "04";
  KA0SM061.XWHCD[1] = "07";
  KA0SM061.XWHCD[2] = "51";
  KA0SM061.XWHCD[3] = "12";


   /* ------------  Get default descriptions  --------------*/
  if (KA0SM061.XWHCD[1] != " ")
    if (KA0SM061.XWHCD[1] in XWHTBL.XWHCD)
      KA0SM061.XWHNM[1] = XWHTBL.XWHNM[sysVar.arrayIndex];
    end
  end
  if (KA0SM061.XWHCD[2] != " ")
    if (KA0SM061.XWHCD[2] in XWHTBL.XWHCD)
      KA0SM061.XWHNM[2] = XWHTBL.XWHNM[sysVar.arrayIndex];
    end
  end
  if (KA0SM061.XWHCD[3] != " ")
    if (KA0SM061.XWHCD[3] in XWHTBL.XWHCD)
      KA0SM061.XWHNM[3] = XWHTBL.XWHNM[sysVar.arrayIndex];
    end
  end

  if (KA0SM061.XGPCD[1] != " ")
    if (KA0SM061.XGPCD[1] in XGPTBL.XGPCD)
      KA0SM061.XGPABRV[1] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
  end
  if (KA0SM061.XGPCD[2] != " ")
    if (KA0SM061.XGPCD[2] in XGPTBL.XGPCD)
      KA0SM061.XGPABRV[2] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
  end
  if (KA0SM061.XGPCD[3] != " ")
    if (KA0SM061.XGPCD[3] in XGPTBL.XGPCD)
      KA0SM061.XGPABRV[3] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
  end


  if (KA0SM051.KA0SMSFL == "Y")
    set KA0SM061.KA0SMSID skip;
    set KA0SM061.KUMSHAID skip;
    set KA0SM061.XXX-ADDR1 skip;
    set KA0SM061.XXX-ADDR2 skip;
    set KA0SM061.XXX-ADDR3 skip;
    set KA0SM061.XXX-ADDR4 skip;
    set KA0SM061.XXX-ADDR5 skip;
    set KA0SM061.XXX-ADDR6 skip;
    set KA0SM061.XSTCD skip;
    set KA0SM061.XXXZIP skip;
    set KA0SM061.XCTCD skip;
    set KA0SM061.XGPCD[1] cursor;
  else
    set KA0SM061.KA0SMSID cursor; /* initialize cursor position*/
  end





end // end KA0S056

// converse add ship-to screen
Function KA0S060()
  converse KA0SM060 ;


  KA0SSPF(); /* standard pfkey checking*/
  KA0SS67(); /* set modified fields, modified*/
  KA0SS60(); /* editing of screen*/





end // end KA0S060

// converse long add ship-to scrn
Function KA0S061()
  converse KA0SM061 ;


  KA0SSPF(); /* standard pfkey checking*/
  KA0SS77(); /* set modified fields, modified*/
  KA0SS70(); /* editing of screen*/





end // end KA0S061

// update store table
Function KA0S070()

   /* *************************************************************/
   /* *****  i n s e r t    s t o r e    a d d r e s s       ******/
   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-OFSHR-FL.*/

   /* *************************************************************/


  XA0AW02.KUCCOID = KA0SM050.KUCCOID;
  XA0AW02.KULAAID = KA0SM050.KUMSTAID;
  XA0AW02.XA0AWFNC = "G";
  call "XA0A" (XA0AW02) {isNoRefresh = yes};
  if (XA0AW02.XA0AWERR[1] == 14)
    XA0AW02.XXX-ADDR1 = KA0SM050.XXX-ADDR1;
    XA0AW02.XXX-ADDR2 = KA0SM050.XXX-ADDR2;
    XA0AW02.XXX-ADDR3 = KA0SM050.XXX-ADDR3;
    XA0AW02.XXXCITY = KA0SM050.XXXCITY;
    XA0AW02.XSTCD = KA0SM050.XSTCD;
    XA0AW02.XXXZIP = KA0SM050.XXXZIP;
    XA0AW02.XCTCD = KA0SM050.XCTCD;
    XA0AW02.XCYCD = "000";
    XA0AW02.XA0AWFNC = "I";
    call "XA0A" (XA0AW02) {isNoRefresh = yes};
    if (XA0AW02.XA0AWERR[1] != 0)
      converseLib.validationFailed(100);
    end
  else
    if (XA0AW02.XA0AWERR[1] != 0)
      converseLib.validationFailed(101);
    else
      XA0AW02.XA0AWFNC = "A";
      call "XA0A" (XA0AW02) {isNoRefresh = yes};
    end
  end

   /* *************************************************************/
   /* *****  i n s e r t    s h i p - g r o u p    a d d r   ******/
   /* *************************************************************/

  XA0AW02.KUCCOID = KA0SM060.KUCCOID;
  XA0AW02.KULAAID = KA0SM060.KUMSHAID;
  XA0AW02.XA0AWFNC = "G";
  call "XA0A" (XA0AW02) {isNoRefresh = yes};
  if (XA0AW02.XA0AWERR[1] == 14)
    XA0AW02.XXX-ADDR1 = KA0SM060.XXX-ADDR1;
    XA0AW02.XXX-ADDR2 = KA0SM060.XXX-ADDR2;
    XA0AW02.XXX-ADDR3 = KA0SM060.XXX-ADDR3;
    XA0AW02.XXXCITY = KA0SM060.XXXCITY;
    XA0AW02.XSTCD = KA0SM060.XSTCD;
    XA0AW02.XXXZIP = KA0SM060.XXXZIP;
    XA0AW02.XCTCD = KA0SM060.XCTCD;
    XA0AW02.XCYCD = "000";
    XA0AW02.XA0AWFNC = "I";
    call "XA0A" (XA0AW02) {isNoRefresh = yes};
    if (XA0AW02.XA0AWERR[1] != 0)
      converseLib.validationFailed(100);
    end
  else
    if (XA0AW02.XA0AWERR[1] != 0)
      converseLib.validationFailed(101);
    else
      XA0AW02.XA0AWFNC = "A";
      call "XA0A" (XA0AW02) {isNoRefresh = yes};
    end
  end

   /* *************************************************************/
   /* *****   i n s e r t    s t o r e     r e c o r d       ******/
   /* *************************************************************/


  set KUMREC empty;
  KA0SS1Z(); /* default currency code*/
  KUMREC.XXXSTAT = "I";
  KUMREC.KUCCOID = KA0SM050.KUCCOID;
  KUMREC.KUMSTRID = KA0SM050.KUMSTRID;
  KUMREC.KUMSTRNM = KA0SM050.KUMSTRNM;
  KU0XW30.KU0XW3GP = KUMREC.KUMSTRNM;
  call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes};
  KUMREC.KUMSTSNM = KU0XW10.KU0XW1GP;
  KUMREC.KUMXSTCD = KA0SM050.XSTCD;
  KU0XW30.KU0XW3GP = " ";
  KU0XW30.KU0XW3GP = KA0SM050.XXXCITY;
  call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes};
  KUMREC.KUMCITYS = KU0XW10.KU0XW1GP;
  KUMREC.XXXZIP = KA0SM050.XXXZIP;
  KUMREC.KUMSTAID = KA0SM050.KUMSTAID;
  KUMREC.KUMSHAID = KA0SM060.KUMSHAID;
  KUMREC.KUMPHN = KA0SM050.KUMPHN;
  KUMREC.KUMSLFID = KA0SM050.KUMSLFID;
  KUMREC.KUMDMIND = KA0SM050.KUMDMIND;
  KUMREC.CU-OFSHR-FL = KA0SM050.CU-OFSHR-FL;
  KUMREC.XIDCD = KA0SM050.XIDCD;
  KUMREC.KUMDCIND = KA0SM050.KUMDCIND;
  KUMREC.KUMNRSVC = KA0SM050.KUMNRSVC;
  KUMREC.YSVCD = KA0SM050.YSVCD;
  KUMREC.XCFCD = KA0SM050.XCFCD;
  KUMREC.KUMXNIFT = KA0SM050.KUMXNIFT;
  KUMREC.KUMXNIAP = KA0SM050.KUMXNIAP;
  KUMREC.KUMRQRWF = KA0SM050.KUMRQRWF;
  KUMREC.KUMRQLBF = KA0SM050.KUMRQLBF;
  KUMREC.KUMRQDSF = KA0SM050.KUMRQDSF;
  KUMREC.KUMRQPKF = KA0SM050.KUMRQPKF;
  KUMREC.XGPCD[1] = KA0SM060.XGPCD[1];
  KUMREC.XGPCD[2] = KA0SM060.XGPCD[2];
  KUMREC.XGPCD[3] = KA0SM060.XGPCD[3];
  KUMREC.XWHCD[1] = KA0SM060.XWHCD[1];
  KUMREC.XWHCD[2] = KA0SM060.XWHCD[2];
  KUMREC.XWHCD[3] = KA0SM060.XWHCD[3];
   /* *************************************************************/
  XX0XS01(); /* get date and time*/
  KUMREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move curr dt to setup dt*/
  KUMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move curr dt to change dt*/
  KUMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move curr time to chng time*/
  KUMREC.ZZZCHGCT = 0; /* initialize chng count to 0*/
   /* *************************************************************/
  call "IO0340" ("A ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    /* **********************  call error routine  *****************/
    TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
    TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
    TA1REC.TA1PGMNM = "KA0S070 "; /* move program name to error rec*/
    TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
    TA1REC.TA1DBASE = "DCUST   ";
                                   /* move database name to error rec*/
    TA1REC.TA1TBLVU = "VSTORE01";
                                   /* move table view to error record*/
    set KUWREC empty; /* initialize error work rec*/
    /* ************* move keys to error work record  ***************/
    KUWREC.KUCCOID = KUMREC.KUCCOID;
    KUWREC.KUMSTRID = KUMREC.KUMSTRID;
    /* *************************************************************/
    TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* call db backout*/
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
    XSPF4();
    /* *************************************************************/
    /* ***** the following commented until retro-fitting of   ******/
    /* ***** the return from the error routine                ******/
    /* *************************************************************/
    /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                  /* ;     move appl global data*/
    /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
    /* XSEXIT                          ;     transfer to next appl*/
    /* ******************  end of error routine  *******************/
  else /* else(return code okay)*/
    /* ********** format and write audit report record ***********/
    KUZREC.KUZTYPE = "A"; /* assign type code value*/
    KUZREC.KUZBFCD = " "; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VSTORE01";
                                   /* move tbl name to audit rec*/
    KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
    KUZREC.KUCCOID = KUMREC.KUCCOID; /* move co id to audit rec*/
    KUZREC.KUMSTRID = KUMREC.KUMSTRID;
                                   /* move store id to audit rec*/
    KUZREC.ZZZSDT = KUMREC.ZZZSDT; /* move up date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KUMREC.KUMGRP; /* move data to audit record*/
    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "KA0S   ";
      TA1REC.TA1LOCAT[1] = "KA0S070  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VSTORE01 ";
      TA1REC.TA1MAP = "KA0SM000";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                  /* ;              ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0S070 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUMREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0sWORK.KA0sWGRP TO COMMAREA.CAUSERA;*/
                                  /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end




end // end KA0S070

// update kumrec fr 51 map
Function KA0S071()

   /* *************************************************************/
   /* *****  update store record from kaosmo51 map (kumrec)  ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****  i n s e r t    s t o r e    a d d r e s s       ******/
   /* *************************************************************/

    /* ------------------------------------------------------------**/
    /* M A I N T E N A N C E    H I S T O R Y    L O G          **/
    /* ------------------------------------------------------------**/
    /* DATE    PGMR    DESCRIPTION                              **/
    /* ------------------------------------------------------------**/
    /* 03-28-01  GDECKE  ADD LOGIC TO HANDLE SAP ACCT FOR NIL CUST**/
    /* ------------------------------------------------------------**/

   /* *************************************************************/

   /* CHECK FOR POSSIBLE DUPLICATE IF VCUSAP01 GETS UPDATED*/
  if (KA0SW01.KA0SW-NIL-CUST-IND == "Y"
   && KA0SM051.CU-SAP-ACCT-ID != " ")
    KA0S-DUP-VCUSAP01();
    if (converseVar.validationMsgNum == 485)
      return;
    end
  end

  XA1REC.NLATYPIN = "C";
  XA1REC.NLABSIND = " ";
  XA1REC.NLAONECH = " ";
  XA1REC.NLASINT1 = 0;
  XA1REC.NLASINT2 = 0;

  XA1REC.NLAINTGR = KA0SM051.KUCCOID;
  XA1REC.NLAADRID = KA0SM051.KUMSTAID;

  XA1REC.XA1FUNCT = "G";

  call "XA0C" (XA1REC) {isNoRefresh = yes};
  if (XA1REC.XA1ERIND[1] == 14)
    XA1REC.XXX-ADDR1 = KA0SM051.XXX-ADDR1;
    XA1REC.XXX-ADDR2 = KA0SM051.XXX-ADDR2;
    XA1REC.XXX-ADDR3 = KA0SM051.XXX-ADDR3;
    XA1REC.XXX-ADDR4 = KA0SM051.XXX-ADDR4;
    XA1REC.XXX-ADDR5 = KA0SM051.XXX-ADDR5;
    XA1REC.XXX-ADDR6 = KA0SM051.XXX-ADDR6;
    XA1REC.XSTCD = KA0SM051.XSTCD;
    XA1REC.XXXZIP = KA0SM051.XXXZIP;
    XA1REC.XCTCD = KA0SM051.XCTCD;
    XA1REC.XA1FUNCT = "I";
    call "XA0C" (XA1REC) {isNoRefresh = yes};
    if (XA1REC.XA1ERIND[1] != 0)
      converseLib.validationFailed(100);
    end
  else
    if (XA1REC.XA1ERIND[1] != 0)
      converseLib.validationFailed(101);
    else
      XA1REC.XA1FUNCT = "A";
      call "XA0C" (XA1REC) {isNoRefresh = yes};
    end
  end

   /* *************************************************************/
   /* *****  i n s e r t    s h i p - g r o u p    a d d r   ******/
   /* *************************************************************/

  XA1REC.NLATYPIN = "C";
  XA1REC.NLABSIND = " ";
  XA1REC.NLAONECH = " ";
  XA1REC.NLASINT1 = 0;
  XA1REC.NLASINT2 = 0;

  XA1REC.NLAINTGR = KA0SM061.KUCCOID;
  XA1REC.NLAADRID = KA0SM061.KUMSHAID;

  XA1REC.XA1FUNCT = "G";

  call "XA0C" (XA1REC) {isNoRefresh = yes};
  if (XA1REC.XA1ERIND[1] == 14)
    XA1REC.XXX-ADDR1 = KA0SM061.XXX-ADDR1;
    XA1REC.XXX-ADDR2 = KA0SM061.XXX-ADDR2;
    XA1REC.XXX-ADDR3 = KA0SM061.XXX-ADDR3;
    XA1REC.XXX-ADDR4 = KA0SM061.XXX-ADDR4;
    XA1REC.XXX-ADDR5 = KA0SM061.XXX-ADDR5;
    XA1REC.XXX-ADDR6 = KA0SM061.XXX-ADDR6;
    XA1REC.XSTCD = KA0SM061.XSTCD;
    XA1REC.XXXZIP = KA0SM061.XXXZIP;
    XA1REC.XCTCD = KA0SM061.XCTCD;
    XA1REC.XA1FUNCT = "I";
    call "XA0C" (XA1REC) {isNoRefresh = yes};
    if (XA1REC.XA1ERIND[1] != 0)
      converseLib.validationFailed(100);
    end
  else
    if (XA1REC.XA1ERIND[1] != 0)
      converseLib.validationFailed(101);
    else
      XA1REC.XA1FUNCT = "A";
      call "XA0C" (XA1REC) {isNoRefresh = yes};
    end
  end

   /* *************************************************************/
   /* *****   i n s e r t    s t o r e     r e c o r d       ******/
   /* *************************************************************/


  set KUMREC empty;
  KUMREC.XXXSTAT = "I";
  KUMREC.KUCCOID = KA0SM051.KUCCOID;
  KUMREC.KUMSTRID = KA0SM051.KUMSTRID;
  KUMREC.KUMSTRNM = KA0SM051.KUMSTRNM;
  KU0XW30.KU0XW3GP = KUMREC.KUMSTRNM;
  call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes};
  KUMREC.KUMSTSNM = KU0XW10.KU0XW1GP;
  KUMREC.KUMXSTCD = KA0SM051.XSTCD;
  KU0XW30.KU0XW3GP = " ";
  KU0XW30.KU0XW3GP = KA0SM051.XXX-ADDR5;
  call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes};
  KUMREC.KUMCITYS = KU0XW10.KU0XW1GP;
  KUMREC.XXXZIP = KA0SM051.XXXZIP;
  KUMREC.KUMSTAID = KA0SM051.KUMSTAID;
  KUMREC.KUMSHAID = KA0SM061.KUMSHAID;
  KUMREC.KUMPHN = KA0SM051.KUMPHN;
  KUMREC.KUMSLFID = KA0SM051.KUMSLFID;
  KUMREC.KUMDMIND = KA0SM051.KUMDMIND;
  KUMREC.KUMDCIND = KA0SM051.KUMDCIND;
  KUMREC.KUMNRSVC = KA0SM051.KUMNRSVC;
  KUMREC.XIDCD = KA0SM051.XIDCD; /* invoice dist 041191*/
  KUMREC.YSVCD = KA0SM051.YSVCD;
  KUMREC.XCFCD = KA0SM051.XCFCD;
  KUMREC.KUMXNIFT = KA0SM051.KUMXNIFT;
  KUMREC.KUMXNIAP = KA0SM051.KUMXNIAP;
  KUMREC.KUMRQRWF = KA0SM051.KUMRQRWF;
  KUMREC.KUMRQLBF = KA0SM051.KUMRQLBF;
  KUMREC.KUMRQDSF = KA0SM051.KUMRQDSF;
  KUMREC.KUMRQPKF = KA0SM051.KUMRQPKF;
  KUMREC.XGPCD[1] = KA0SM061.XGPCD[1];
  KUMREC.XGPCD[2] = KA0SM061.XGPCD[2];
  KUMREC.XGPCD[3] = KA0SM061.XGPCD[3];
  KUMREC.XWHCD[1] = KA0SM061.XWHCD[1];
  KUMREC.XWHCD[2] = KA0SM061.XWHCD[2];
  KUMREC.XWHCD[3] = KA0SM061.XWHCD[3];

   /* *************************************************************/
  XX0XS01(); /* get date and time*/
  KUMREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move curr dt to setup dt*/
  KUMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move curr dt to change dt*/
  KUMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move curr time to chng time*/
  KUMREC.ZZZCHGCT = 0; /* initialize chng count to 0*/
   /* *************************************************************/
  call "IO0340" ("A ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    /* **********************  call error routine  *****************/
    TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
    TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
    TA1REC.TA1PGMNM = "KA0S070 "; /* move program name to error rec*/
    TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
    TA1REC.TA1DBASE = "DCUST   ";
                                   /* move database name to error rec*/
    TA1REC.TA1TBLVU = "VSTORE01";
                                   /* move table view to error record*/
    set KUWREC empty; /* initialize error work rec*/
    /* ************* move keys to error work record  ***************/
    KUWREC.KUCCOID = KUMREC.KUCCOID;
    KUWREC.KUMSTRID = KUMREC.KUMSTRID;
    /* *************************************************************/
    TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* call db backout*/
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
    XSPF4();
    /* *************************************************************/
    /* ***** the following commented until retro-fitting of   ******/
    /* ***** the return from the error routine                ******/
    /* *************************************************************/
    /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                  /* ;     move appl global data*/
    /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
    /* XSEXIT                          ;     transfer to next appl*/
    /* ******************  end of error routine  *******************/
  else /* else(return code okay)*/
    /* ********** format and write audit report record ***********/
    KUZREC.KUZTYPE = "A"; /* assign type code value*/
    KUZREC.KUZBFCD = " "; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VSTORE01";
                                   /* move tbl name to audit rec*/
    KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
    KUZREC.KUCCOID = KUMREC.KUCCOID; /* move co id to audit rec*/
    KUZREC.KUMSTRID = KUMREC.KUMSTRID;
                                   /* move store id to audit rec*/
    KUZREC.ZZZSDT = KUMREC.ZZZSDT; /* move date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KUMREC.KUMGRP; /* move data to audit record*/
    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "KA0S   ";
      TA1REC.TA1LOCAT[1] = "KA0S071  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VSTORE01 ";
      TA1REC.TA1MAP = "KA0SM000";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end

    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                  /* ;              ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0S070 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUMREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0sWORK.KA0sWGRP TO COMMAREA.CAUSERA;*/
                                  /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end


     /* ALSO UPDATE VCUSAP01 ROW IF COMPANY OR STORE HAS CHANGED*/
     /* THIS WOULD HAPPEN IF THE CU-SAP-ACCT-ID WAS ENTERED, AND THE*/
     /* COMPANY AND STORE IS STILL SET TO THE VALUE LOADED BY THE*/
     /* SAP/GOAL LINK PROGRAMS (IT2010).*/


  if (KA0SM051.KUCCOID == 0
   || KA0SW01.KA0SW-NIL-CUST-IND == "N")
       /* next sentence - do not process the SAP account*/
  else

    KA0S-DEL-VCUSAP01();
    VCUSAP01.KUCCOID = KUMREC.KUCCOID;
    VCUSAP01.KUMSTRID = KUMREC.KUMSTRID;
    KA0S-ADD-VCUSAP01();
  end

end // end KA0S071

// update company table
Function KA0S075()


   /* *************************************************************/
   /* ***** this is where a dbii i/o module is called        ******/
   /* ***** to update the company table record after the     ******/
   /* ***** store record has been added.                     ******/
   /* *************************************************************/


  if (KUMREC.KUMSTRID > KUCREC.KUCMSTID)
    KUCREC.KUCMSTID = KUMREC.KUMSTRID;
  else
    /* next sentence*/
  end
  call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;  call i/o mod to select co.*/
  if (SQLCA.VAGen_SQLCODE == 100)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KA0SW01.KA0SWRST = "Y";
    converseLib.validationFailed(228);
    exit stack;
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    /* **********************  call error routine  *****************/
    TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
    TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
    TA1REC.TA1PGMNM = "KA0S075 "; /* move program name to error rec*/
    TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
    TA1REC.TA1DBASE = "DCUST   ";
                                   /* move database name to error rec*/
    TA1REC.TA1TBLVU = "VCMPNY01";
                                   /* move table view to error record*/
    set KUWREC empty; /* initialize error work rec*/
    /* ************* move keys to error work record  ***************/
    KUWREC.KUCCOID = KUCREC.KUCCOID;
    /* *************************************************************/
    TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                   /* ;     move table key value*/
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* call db backout*/
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                   /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
    XSPF4();
    /* *************************************************************/
    /* ***** the following commented until retro-fitting of   ******/
    /* ***** the return from the error routine                ******/
    /* *************************************************************/
    /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                    /* ;     move appl global data*/
    /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
    /* XSEXIT                          ;     transfer to next appl*/
    /* ******************  end of error routine  *******************/
  end /* END OF "if" STATEMENT*/





end // end KA0S075

// transfer to add customer(dept)
Function KA0S080()


   /* *************************************************************/
   /* *****  t r a n s f e r    t o    a d d    c u s t -    ******/
   /* *****       u n i t    a p p l i c a t i o n           ******/
   /* *************************************************************/


   /* **********  execute csp call commit  ****************/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit all data base updates*/
   /* **************  commit completed ********************/


  KA0SW01.KA0SWSID = KUMREC.KUMSTRID;
  COMMAREA.CAUSERA = KA0SW01.KA0SWGRP;
  COMMAREA.CATOAP = "KA0D";
  COMMAREA.CAMSG = " ";

  XSEXIT();

   /* MOVE 'STORE UPDATED (' TO KA0SW01.KA0SWBR1;*/
   /* MOVE COMMAREA.CASECRC TO KA0SW01.KA0SWBR2;*/
   /* MOVE '-' TO KA0SW01.KA0SWBR3;*/
   /* MOVE EZERT8 TO KA0SW01.KA0SWBR4;*/
   /* MOVE ')' TO KA0SW01.KA0SWBR5;*/
   /* MOVE KA0SW01.KA0SWBRC TO KA0SM060.KA0SMMSG;*/
   /* MOVE KA0SW01.KA0SWBRC TO KA0SM061.KA0SMMSG;*/

  KA0SM060.KA0SMMSG = COMMAREA.CAMSG;
  KA0SM061.KA0SMMSG = COMMAREA.CAMSG;
  converseLib.validationFailed(41);
  exit stack;





end // end KA0S080

// return to cust add menu
Function KA0S999()


   /* *************************************************************/
   /* ***** r e t u r n    t o    c u s t    a d d   m e n u ******/
   /* *************************************************************/


   /* >>>>>>>>>>>>>> perform csp call commit here <<<<<<<<<<<<<<<<*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit all data base updates*/
   /* >>>>>>>>>>>>>>>>> call commit performed <<<<<<<<<<<<<<<<<<<<*/


  COMMAREA.CAUSERA = KA0SW01.KA0SWGRP;
  COMMAREA.CATOAP = "KA0M";
  XSEXIT();
  converseLib.validationFailed(41);
  exit stack;





end // end KA0S999

// add a line on the parm table
Function KA0SS-ADD-VPARM101()
  /* * KA0S-ADD-VPARM101*/
  /* * INSERT AN NIL CUSTOMER SAP CHANGE TRANSACTION TO THE VPARM101 TABLE*/
  /*  */
  set XZZREC empty;

  XZZREC.XZZQRYID = "IT2010";
  KA0SW01.KA0SW-SAP-TEN-CHAR = VCUSAP01.CU-SAP-ACCT-ID;
  XZZREC.XZZ4CHR1 = KA0SW01.KA0SW-SAP-FOUR-CHAR;
  XZZREC.XZZ6CHR = KA0SW01.KA0SW-SAP-SIX-CHAR;
   /* TCS CHANGE  12/21/2001 BEGIN*/
  XZZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  XZZREC.ZZZSTM = XX0XW01.XX0XWTIM;
   /* TCS CHANGE  12/21/2001 END*/
  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KA0S-ADD-VPARM101    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KA0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
  TA1REC.TA1TBLKE = KA0SW01.KA0SW-SAP-TEN-CHAR; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

                                   /* Exit to display map*/


end // end KA0SS-ADD-VPARM101

Function KA0SS-INIT-RECS()
   /* *************************************************************/
   /* *****        initialize records used by ka0s           ******/
   /* *************************************************************/

  set KUCREC empty; /* initialize record*/
  set KULREC empty; /* initialize record*/
  set VLADDR01 empty; /* initialize record*/
  set KUMREC empty; /* initialize record*/
  set KUNREC empty; /* initialize record*/
  set KUYREC empty; /* initialize record*/
  set KUZREC empty; /* initialize record*/
  set KA0SW01 empty; /* initialize record*/
  set XA0AW02 empty; /* initialize record*/
  set XA1REC empty; /* initialize record*/
  set SQLCA empty; /* initialize record*/
  set TA1REC empty; /* initialize record*/
  set XX0XW01 empty; /* initialize record*/
  set KU0XW10 empty; /* initialize record*/
  set KU0XW30 empty; /* initialize record*/
  set KUWREC empty; /* initialize record*/

end // end KA0SS-INIT-RECS

// select for cust on distrib tbl
Function KA0SS-SEL-VDSTRB01()
  /* * KA0S-SEL-VDSTRB01*/
  /* * SELECT ROW FROM DCUST.VDSTRB01*/
  /*  */
  set VDSTRB01 empty;

  VDSTRB01.KUCCOID = KA0SM051.KUCCOID;

  try
    call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      KA0SW01.KA0SW-NIL-CUST-IND = "Y";
      return; /* Return to previous process*/
    else
      KA0SW01.KA0SW-NIL-CUST-IND = "N";
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KA0S-SEL-VDSTRB01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KA0S"; /* Program number*/
  TA1REC.TA1DBASE = "DNILO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDSTRB01"; /* Table view name*/
  TA1REC.TA1DBASE = "DNILO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDSTRB01"; /* Table view name*/
  KA0SW01.KA0SW-NUM-CU-CO-ID = VDSTRB01.KUCCOID;
  TA1REC.TA1TBLKE = KA0SW01.KA0SW-CHAR-CU-CO-ID; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

                                   /* Exit to display map*/


end // end KA0SS-SEL-VDSTRB01

// edit fields on ka0sm050
Function KA0SS10()


   /* *************************************************************/
   /* ***** e d i t    f i e l d s    o n    k a 0 s m 0 5 0 ******/
   /* *************************************************************/


  set KA0SM050.KUMSTRID cursor; /* initialize cursor position*/
  KA0SS1N(); /* edit require flags*/
  KA0SS12(); /* edit nike image codes*/
  KA0SS13(); /* edit customer self image code*/
  KA0SS14(); /* edit store class code*/
  KA0SS17(); /* edit nbr of stores serviced*/
  KA0SS18(); /* edit distribution center ind*/
  KA0SS1M(); /* edit deferred mailing indicator*/
  KA0SS16(); /* edit customers store number*/
  KA0SS19(); /* edit ship-to-same-addr flag*/
  KA0SS1A(); /* edit address*/
  KA0SS1B(); /* edit store phone number*/
  KA0SS1C(); /* edit store name*/
  KA0SS1D(); /* edit/assign store id*/





end // end KA0SS10

// edit image codes
Function KA0SS12()


   /* *************************************************************/
   /* *************************************************************/
   /* *****        e d i t    i m a g e    c o d e s         ******/
   /* *************************************************************/
   /* *************************************************************/

   /* *************************************************************/
   /* *****        e d i t    a p p a r e l   i m a g e      ******/
   /* *************************************************************/


  set KA0SM050.KUMXNIAP initialAttributes; /* set field attribute to defined value*/
  if (KA0SM050.KUMXNIAP != " ") /* if apperal image is not blank*/
    if (KA0SM050.KUMXNIAP in XNITBL.XNICD)
      KA0SW01.XNIABRV = XNITBL.XNIABRV[sysVar.arrayIndex];
    end
                                     /* search table for image cd*/
    if (sysVar.arrayIndex == 0) /* if image code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM050.KUMXNIAP cursor, bold;
                                 /* ;     highlight field in error*/
    else /* else(image code found)*/
      /* ***************  check status code of entry  ****************/
      if (XNITBL.XXXSTAT[sysVar.arrayIndex] == "A" /* if status is active*/
       && XNITBL.XGPCD[sysVar.arrayIndex] == "03") /* and gpc is 03 (aprl)*/
        /* next sentence                ;  okay*/
      else /* else(status is active)*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM050.KUMXNIAP cursor, bold;
                                     /* ;  highlight field in error*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





   /* *************************************************************/
   /* *****        e d i t    f o o t w e a r   i m a g e    ******/
   /* *************************************************************/


  set KA0SM050.KUMXNIFT initialAttributes; /* set field attribute to defined value*/
  if (KA0SM050.KUMXNIFT != " ") /* if footwear image is not blank*/

    if (KA0SM050.KUMXNIFT in XNITBL.XNICD)
      KA0SW01.XNIABRV = XNITBL.XNIABRV[sysVar.arrayIndex];
    end
                                     /* search table for image cd*/

    if (sysVar.arrayIndex == 0) /* if image code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM050.KUMXNIFT cursor, bold;
                                         /* highlight field in error*/
    else /* else(image code found)*/
      /* ***************  check status code of entry  ****************/
      if (XNITBL.XXXSTAT[sysVar.arrayIndex] == "A" /* if status is active*/
       && XNITBL.XGPCD[sysVar.arrayIndex] == "02") /* and gpc is 02 (ftwr)*/
        /* next sentence                ;  okay*/
      else /* else(status is active)*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM050.KUMXNIFT cursor, bold;
                                     /* ;  highlight field in error*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS12

// edit customer self image codes
Function KA0SS13()


   /* *************************************************************/
   /* *************************************************************/
   /* *****   e d i t    s e l f    i m a g e    c o d e s   ******/
   /* *************************************************************/
   /* *************************************************************/

  set KA0SM050.XCFCD initialAttributes; /* set field attribute to defined*/
  if (KA0SM050.XCFCD != " ") /* if self image is not blank*/
    if (KA0SM050.XCFCD in XCFTBL.XCFCD)
      KA0SW01.XCFABRV = XCFTBL.XCFABRV[sysVar.arrayIndex];
    end
                                     /* search table for image cd*/
    if (sysVar.arrayIndex == 0) /* if image code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM050.XCFCD cursor, bold; /* highlight field in error*/
    else /* else(image code found)*/
      /* ***************  check status code of entry  ****************/
      if (XCFTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM050.XCFCD cursor, bold; /* highlight field in error*/
      else /* else(status is active)*/
        /* next sentence            ;       okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS13

// edit store class code
Function KA0SS14()


   /* *************************************************************/
   /* *************************************************************/
   /* *****          e d i t     s i c     c o d e           ******/
   /* *************************************************************/
   /* *************************************************************/

  set KA0SM050.YSVCD initialAttributes; /* set field attribute to defined*/
  if (KA0SM050.YSVCD != " ") /* if sic code is not blank*/
    if (KA0SM050.YSVCD in YSVTBL.YSVCD)
      KA0SW01.YSVABRV = YSVTBL.YSVABRV[sysVar.arrayIndex];
    end
                                     /* search table for sic code*/
    if (sysVar.arrayIndex == 0) /* if sic code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM050.YSVCD cursor, bold; /* highlight field in error*/
    else /* else(store class cd found)*/
      /* ***************  check status code of entry  ****************/
      if (YSVTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM050.YSVCD cursor, bold; /* highlight field in error*/
      else /* else(status is active)*/
        /* next sentence            ;       okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS14

// edit customers store number
Function KA0SS16()


   /* *************************************************************/
   /* *****   e d i t    c u s t o m e r s    s t o r e      ******/
   /* *****                 n u m b e r                      ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****   this field is optional and free form.....      ******/
   /* *****   no validation is required, anything entered in ******/
   /* *****   this field is acceptable.                      ******/
   /* *************************************************************/





end // end KA0SS16

// edit number of stores serviced
Function KA0SS17()


   /* *************************************************************/
   /* *****  e d i t    n u m b e r    o f    s t o r e s    ******/
   /* *****        s e r v i c e d    b y    d / c           ******/
   /* *************************************************************/


  set KA0SM050.KUMNRSVC initialAttributes; /* set field attribute to defined*/

  if (KA0SM050.KUMDCIND == "N")
    if (KA0SM050.KUMNRSVC != 0)
      converseLib.validationFailed(21);
      set KA0SM050.KUMNRSVC cursor, bold;
    else
      /* next sentence              ;    okay*/
    end
  else /* else(dist center ind = 'y')*/
    if (KA0SM050.KUMNRSVC == 0) /* if nbr of stores serviced = 0*/
      converseLib.validationFailed(5); /* error "required field missing"*/
      set KA0SM050.KUMNRSVC cursor, bold;
                                 /* ;    highlight error*/
    else /* else(nbr stores serviced not 0)*/
      /* next sentence              ;    okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS17

// edit distribution center ind
Function KA0SS18()


   /* *************************************************************/
   /* *****       e d i t    d i s t r i b u t i o n         ******/
   /* *****        c e n t e r    i n d i c a t o r          ******/
   /* *************************************************************/


  set KA0SM050.KUMDCIND initialAttributes; /* set attribute to defined*/

  if (KA0SM050.KUMDCIND != "Y" /* if dist center ind not 'y'*/
   && KA0SM050.KUMDCIND != "N") /* and dist center ind not 'n'*/
    if (KA0SM050.KUMDCIND == " ") /* if dist center field is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else
                                   /* else(dist center ind not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM050.KUMDCIND cursor, bold; /* highlight error field*/
  else /* else(dist center ind ok)*/
    /* next sentence                ;        okay*/
  end /* end of "if" statement*/






end // end KA0SS18

// edit same-ship-to-addr switch
Function KA0SS19()


   /* *************************************************************/
   /* *****       e d i t    s a m e - s h i p - t o -       ******/
   /* *****             a d d r     s w i t c h              ******/
   /* *************************************************************/


  set KA0SM050.KA0SMSFL initialAttributes; /* set attribute to defined values*/

  if (KA0SM050.KA0SMSFL != "Y" /* if same-ship-sw not 'y'*/
   && KA0SM050.KA0SMSFL != "N") /* and same-ship-sw not 'n'*/
    if (KA0SM050.KA0SMSFL == " ")
                                   /* if same-ship-sw field is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(same-ship-sw not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM050.KA0SMSFL cursor, bold; /* highlight error field*/
  else /* else(same-ship-sw ok)*/
    /* next sentence                ;        okay*/
  end /* end of "if" statement*/






end // end KA0SS19

// edit store address
Function KA0SS1A()


   /* *************************************************************/
   /* *****       e d i t    s t o r e    a d d r e s s      ******/
   /* *************************************************************/


   /* ********** set address field attributes to normal ***********/
  set KA0SM050.KUMSTAID initialAttributes;
  set KA0SM050.XXX-ADDR1 initialAttributes;
  set KA0SM050.XXX-ADDR2 initialAttributes;
  set KA0SM050.XXX-ADDR3 initialAttributes;
  set KA0SM050.XXXCITY initialAttributes;
  set KA0SM050.XSTCD initialAttributes;
  set KA0SM050.XXXZIP initialAttributes;
  set KA0SM050.XCTCD initialAttributes;
   /* *************************************************************/

  if (KA0SM050.KUMSTAID == 0) /* if store address id equal zero*/
    KA0SS1E(); /* edit address fields*/
  else /* else(store address id not equal zero*/
    if (KA0SM050.KUMSTAID == KA0SW01.KA0SWAID)
                                 /* ;  if addr-id = last-addr-id*/
      KA0SS1E(); /* edit address fields*/
    else /* else(new addr-id entered)*/
      KA0SS1F(); /* get address and format screen*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/






end // end KA0SS1A

// edit store phone number
Function KA0SS1B()


   /* *************************************************************/
   /* *****   e d i t    s t o r e    p h o n e    n b r     ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****   this field is optional, and free form.....     ******/
   /* *****   anything entered in this field is acceptable   ******/
   /* *****   no validation is required.                     ******/
   /* *************************************************************/





end // end KA0SS1B

// edit store name
Function KA0SS1C()


   /* *************************************************************/
   /* *****       e d i t    s t o r e    n a m e            ******/
   /* *************************************************************/


  set KA0SM050.KUMSTRNM initialAttributes; /* set field attribute to defined*/
  if (KA0SM050.KUMSTRNM == " ") /* if store name is blank*/
    converseLib.validationFailed(5); /* error "required missing"*/
    set KA0SM050.KUMSTRNM cursor, bold; /* highlight error field*/
  else /* else(same-ship-sw not blank)*/
    /* next sentence                ;          okay*/
  end /* end of "if" statement*/






end // end KA0SS1C

// edit/assign store id
Function KA0SS1D()


   /* *************************************************************/
   /* *****    e d i t / a s s i g n    s t o r e    i d     ******/
   /* *************************************************************/


  set KA0SM050.KUMSTRID initialAttributes; /* set field attributes to defined*/
                                   /* values*/
  if (KA0SM050.KUMSTRID != 0) /* if store id not equal zero*/
    if (KUCMSTID == -1 /* if this is first store for co*/
     || KA0SW01.KA0SWFSR == "Y") /* or if first store flag equal 'y'*/
      converseLib.validationFailed(79); /* error "first must be 0"*/
      set KA0SM050.KUMSTRID cursor, bold;
                                 /* ;    highlight error*/
    else /* else(this is not first store)*/

        /* *****-----determine if store already exists-----********/
        /* **********  move keys to store table record  ***********/
      KUMREC.KUCCOID = KA0SM050.KUCCOID;
      KUMREC.KUMSTRID = KA0SM050.KUMSTRID;

      call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
                                     /* ;  call dbii i/o module store*/
      if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
        if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
            /* next sentence            ;      not found is okay*/
        else
                                   /* else(dbii rtrn cd bad, but not 100)*/
                                  /* **********************  call error*/
                                   /* routine  *****************/
          TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
          TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
          TA1REC.TA1PGMNM = "KA0SS1D "; /* move program name to error rec*/
          TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1MAP = "KA0SM050"; /* move map name to error record*/
          TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
          TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
          set KUWREC empty; /* initialize error work rec*/
                                  /* ************* move keys to error work*/
                                   /* record  ***************/
          KUWREC.KUCCOID = KA0SM050.KUCCOID;
          KUWREC.KUMSTRID = KA0SM050.KUMSTRID;

            /* *************************************************************/
          TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                           /* ;     move table key value*/
          KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* call db backout*/
          SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                           /* ;*/
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
          XSPF4();

            /* *************************************************************/
                                  /* ***** the following commented until*/
                                   /* retro-fitting of   ******/
                                  /* ***** the return from the error*/
                                   /* routine                ******/

            /* *************************************************************/
            /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                            /* ;     move appl global data*/
                                  /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;*/
                                   /* cust main menu is dest*/
            /* XSEXIT                          ;     transfer to next appl*/
                                  /* ******************  end of error*/
                                   /* routine  *******************/
        end /* END OF "if" STATEMENT*/
      else /* else(store found)*/
        converseLib.validationFailed(75); /* error "store already exists"*/
        set KA0SM050.KUMSTRID cursor, bold;
                                     /* ;    highlight error field*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else /* else(store number not = 0)*/


    /* *************************************************************/
    /* ***** this is where the last used store within this    ******/
    /* ***** company is looked up, incrimented, and used      ******/
    /* ***** as the new store id number.                      ******/
    /* *************************************************************/


    if (KA0SW01.KA0SWNXS != 0) /* if next-store-id known*/
      KA0SM050.KUMSTRID = KA0SW01.KA0SWNXS;
                                 /* ;    move next-store-id to screen*/
    else /* else(next-store-id not known)*/
      KA0SW01.KA0SWLOP = 0; /* initialize loopcounter to 0*/
      SQLCA.VAGen_SQLCODE = 0; /* initialize dbii return code to 0*/
      KA0SM050.KUMSTRID = KUCREC.KUCMSTID;
                                   /* ;    move max store id to rec*/
      while (SQLCA.VAGen_SQLCODE == 0 /* loop (to find next available*/
       /* ;      store id)*/
       && KA0SW01.KA0SWLOP <= 1000)
                                   /* until store not found -or-*/
                                   /* ;      all store numbers read.*/

        if (KA0SW01.KA0SWFSR == "Y")
                                   /* if first-store-flag = 'y'*/
          /* next sentence            ;        no not increment id*/
        else
                                   /* else(first-store-flag not = 'y')*/
          KA0SM050.KUMSTRID = KA0SM050.KUMSTRID + 1;
                                   /* ;        increment max store id*/
        end /* end of "if" statement*/

        if (KA0SM050.KUMSTRID == 0) /* if store id = 0, after add*/
          KA0SW01.KA0SWFSR = "Y"; /* set first-store-flag to 'y'*/
        end /* end of "if" statement*/

        if (KA0SM050.KUMSTRID > 999) /* if max store id > 999*/
          KA0SM050.KUMSTRID = 0; /* start over at zero*/
        else /* else(store number < 999)*/
          /* ********** format store rec with keys ***********/
          KUMREC.KUCCOID = KA0SM050.KUCCOID;
          KUMREC.KUMSTRID = KA0SM050.KUMSTRID;

          call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
                                   /* ;      call dbii to get store row*/
          if (SQLCA.VAGen_SQLCODE != 0) /* if call not okok*/
            if (SQLCA.VAGen_SQLCODE == 100) /* if store number not found*/
              /* next sentence        ;          ok, use store number*/
            else
                                   /* else(rtrn cd bad, but not 100)*/
   /* **********************  call error routine  *****************/
              TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
              TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
              TA1REC.TA1PGMNM = "KA0SS1D "; /* move program name to error rec*/
              TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
              TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
              TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
              TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
              TA1REC.TA1MAP = "KA0SM050"; /* move map name to error record*/
              TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
              TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
              set KUWREC empty; /* initialize error work rec*/
   /* ************* move keys to error work record  ***************/
              KUWREC.KUCCOID = KA0SM050.KUCCOID;
              KUWREC.KUMSTRID = KA0SM050.KUMSTRID;
   /* *************************************************************/
              TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                             /* ;     move table key value*/
              KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* call db backout*/
              SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                             /* ;*/
              call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
              XSPF4();
   /* *************************************************************/
   /* ***** the following commented until retro-fitting of   ******/
   /* ***** the return from the error routine                ******/
   /* *************************************************************/
              /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                  /* ;     move appl global data*/
   /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
   /* XSEXIT                          ;     transfer to next appl*/
   /* ******************  end of error routine  *******************/
            end /* end of "if" statement*/
          end /* END OF "if" STATEMENT*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
      KUCREC.KUCMSTID = KA0SM050.KUMSTRID;
                                   /* ;move new store id to company*/
                                   /* ;max store id field*/
      KA0SW01.KA0SWNXS = KA0SM050.KUMSTRID;
                                   /* ;  save next store id*/
    end /* end of "if" statement*/
  end /* end of "while" loop*/
  if (KA0SW01.KA0SWLOP >= 1000) /* if loop exited because all store nbrs*/
                                 /* ;used*/
    converseLib.validationFailed(27);
                                   /* error "max stores under this comapny"*/
    set KA0SM050.KUMSTRID cursor, bold;
                                 /* ;  highlight error field*/
  end /* end of "if" statement*/





end // end KA0SS1D

// edit store address fields
Function KA0SS1E()


   /* *************************************************************/
   /* *****  e d i t    a d d r e s s    o n    s c r e e n  ******/
   /* *************************************************************/


   /* ****** move address fields to address application rec *******/
  XA0AW02.XXX-ADDR1 = KA0SM050.XXX-ADDR1;
  XA0AW02.XXX-ADDR2 = KA0SM050.XXX-ADDR2;
  XA0AW02.XXX-ADDR3 = KA0SM050.XXX-ADDR3;
  XA0AW02.XXXCITY = KA0SM050.XXXCITY;
  XA0AW02.XSTCD = KA0SM050.XSTCD;
  XA0AW02.XXXZIP = KA0SM050.XXXZIP;
  XA0AW02.XCTCD = KA0SM050.XCTCD;
   /* *************************************************************/

  XA0AW02.XA0AWFNC = "E"; /* "edit only" function code*/
  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address application*/

   /* ********** move address fields back to map ******************/
  KA0SM050.XXX-ADDR1 = XA0AW02.XXX-ADDR1;
  KA0SM050.XXX-ADDR2 = XA0AW02.XXX-ADDR2;
  KA0SM050.XXX-ADDR3 = XA0AW02.XXX-ADDR3;
  KA0SM050.XXXCITY = XA0AW02.XXXCITY;
  KA0SM050.XSTCD = XA0AW02.XSTCD;
  KA0SM050.XXXZIP = XA0AW02.XXXZIP;
  KA0SM050.XCTCD = XA0AW02.XCTCD;
   /* *************************************************************/

   /* **********  determine if any address fields in error  *******/
  if (XA0AW02.XA0AWERR[8] != 0) /* if error in country field*/
    set KA0SM050.XCTCD cursor, bold; /* highlight country field*/
    if (XA0AW02.XA0AWERR[8] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[8]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[7] != 0) /* if error in zip code field*/
    set KA0SM050.XXXZIP cursor, bold; /* highlight zip code field*/
    if (XA0AW02.XA0AWERR[7] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[7]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[6] != 0) /* if error in state code field*/
    set KA0SM050.XSTCD cursor, bold;
                                   /* highlight state code field*/
    if (XA0AW02.XA0AWERR[6] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[6]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[5] != 0) /* if error in city field*/
    set KA0SM050.XXXCITY cursor, bold; /* highlight city field*/
    if (XA0AW02.XA0AWERR[5] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[5]);
    end /* move error message number*/
  end /* end of "if"statement*/
  if (XA0AW02.XA0AWERR[4] != 0) /* if error in address line 3*/
    set KA0SM050.XXX-ADDR3 cursor, bold;
                                   /* highlight address line 3 field*/
    if (XA0AW02.XA0AWERR[4] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[4]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[3] != 0) /* if error in address line 2*/
    set KA0SM050.XXX-ADDR2 cursor, bold;
                                   /* highlight address line 2 field*/
    if (XA0AW02.XA0AWERR[3] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[3]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[2] != 0) /* if error in address line 1*/
    set KA0SM050.XXX-ADDR1 cursor, bold; /* highlight address line 1*/
    if (XA0AW02.XA0AWERR[2] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[2]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[1] != 0) /* if any general error sr*/
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end /* move error meaage number*/
  end /* end of "if" statement*/
   /* *************************************************************/

  if (KA0SM050.XXX-ADDR1 is modified /* if any address line has been modified*/
   || KA0SM050.XXX-ADDR2 is modified /* |*/
   || KA0SM050.XXX-ADDR3 is modified /* |*/
   || KA0SM050.XXXCITY is modified   /* |*/
   || KA0SM050.XSTCD is modified     /* |*/
   || KA0SM050.XXXZIP is modified    /* |*/
   || KA0SM050.XCTCD is modified)    /* |*/
    /* **********  if no errors found assign address id  ***********/
    if (XA0AW02.XA0AWERR[1] == 0 /* if no errors in address*/
     && XA0AW02.XA0AWERR[2] == 0 /* |*/
     && XA0AW02.XA0AWERR[3] == 0 /* |*/
     && XA0AW02.XA0AWERR[4] == 0 /* |*/
     && XA0AW02.XA0AWERR[5] == 0 /* |*/
     && XA0AW02.XA0AWERR[6] == 0 /* |*/
     && XA0AW02.XA0AWERR[7] == 0 /* |*/
     && XA0AW02.XA0AWERR[8] == 0) /* |*/
      KA0SS1G(); /* assign next avail addr id*/
    else /* else(errors in address)*/
      /* next sentence              ;    continue*/
    end /* end of "if" statement*/
  else /* else(address not modified)*/
    KA0SM050.KUMSTAID = KA0SW01.KA0SWAID;
                                 /* ;  move last-addr-id to addr-id*/
  end /* end of "if" statement*/
   /* *************************************************************/





end // end KA0SS1E

// get address and format map
Function KA0SS1F()


   /* *************************************************************/
   /* *****  g e t    a d d r e s s    &    f o r m a t      ******/
   /* *************************************************************/



   /* **********  move keys to address table record  **************/
  XA0AW02.KULAAID = KA0SM050.KUMSTAID;
  XA0AW02.KUCCOID = KA0SM050.KUCCOID;

  XA0AW02.XA0AWFNC = "G"; /* "get address" function code*/
  call "XA0A" (XA0AW02) {isNoRefresh = yes};
                                   /* call address application for address*/
  if (XA0AW02.XA0AWERR[1] == 0) /* if return code "ok"*/
    /* ******************* move address to map  ********************/
    KA0SM050.XXX-ADDR1 = XA0AW02.XXX-ADDR1;
    KA0SM050.XXX-ADDR2 = XA0AW02.XXX-ADDR2;
    KA0SM050.XXX-ADDR3 = XA0AW02.XXX-ADDR3;
    KA0SM050.XXXCITY = XA0AW02.XXXCITY;
    KA0SM050.XSTCD = XA0AW02.XSTCD;
    KA0SM050.XXXZIP = XA0AW02.XXXZIP;
    KA0SM050.XCTCD = XA0AW02.XCTCD;
    KA0SW01.KA0SWAID = XA0AW02.KULAAID;

  else /* else(return code not "ok")*/
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
                                 /* ;    move error message number*/
    set KA0SM050.KUMSTAID cursor, bold;
                                 /* ;    highlight adrees id field*/
  end /* end of "if" statement*/





end // end KA0SS1F

// determine next avail addr id
Function KA0SS1G()


   /* *************************************************************/
   /* *****    d e t e r m i n e    n e x t    a v a i l     ******/
   /* *****              a d d r e s s    i d                ******/
   /* *************************************************************/


  if (KA0SW01.KA0SWNXT != 0) /* if next avail-addr-id already known*/
    KA0SM050.KUMSTAID = KA0SW01.KA0SWNXT;
                                 /* ;  move next-avail-addr-id*/
                                 /* ;  to addr-id*/
  else /* else(next-avail-addr-id not known)*/
    SQLCA.VAGen_SQLCODE = 0;
    KA0SM050.KUMSTAID = KUCREC.KUCMADID;
    while (SQLCA.VAGen_SQLCODE == 0)
      KA0SM050.KUMSTAID = KA0SM050.KUMSTAID + 1;
      if (KA0SM050.KUMSTAID > 9998)
        KA0SM050.KUMSTAID = 0;
      else
        KULREC.KUCCOID = KA0SM050.KUCCOID;
        KULREC.KULAAID = KA0SM050.KUMSTAID;
        call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE != 0)
          if (SQLCA.VAGen_SQLCODE == 100)
            /* next sentence*/
          else
                                  /* **********************  call error*/
                                   /* routine  *****************/
            TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
            TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
            TA1REC.TA1PGMNM = "KA0SS1G "; /* move program name to error rec*/
            TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1MAP = "KA0SM050"; /* move map name to error record*/
            TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
            TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
            set KUWREC empty; /* initialize error work rec*/
                                  /* ************* move keys to error work*/
                                   /* record  ***************/
            KUWREC.KUCCOID = KA0SM050.KUCCOID;
            KUWREC.KUMSTRID = KA0SM050.KUMSTRID;

            /* *************************************************************/
            TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                           /* ;     move table key value*/
            KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* call db backout*/
            SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                           /* ;*/
            call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
            XSPF4();

            /* *************************************************************/
                                  /* ***** the following commented until*/
                                   /* retro-fitting of   ******/
                                  /* ***** the return from the error*/
                                   /* routine                ******/

            /* *************************************************************/
            /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                            /* ;     move appl global data*/
                                  /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;*/
                                   /* cust main menu is dest*/
            /* XSEXIT                          ;     transfer to next appl*/
                                  /* ******************  end of error*/
                                   /* routine  *******************/
          end
        end /* END OF "if" STATEMENT*/
      end /* end of "if" statement*/
    end /* end of "while" loop*/
    KA0SW01.KA0SWNXT = KA0SM050.KUMSTAID;
                                 /* ;  save next-avail-addr-id*/
    KUCREC.KUCMADID = KA0SM050.KUMSTAID;
                                 /* ;  move last-used-addr-id to*/
                                 /* ;  company record*/
  end /* end of "if" statement*/
  KA0SW01.KA0SWAID = KA0SM050.KUMSTAID;
                                 /* ;move addr-id to last-addr-id*/





end // end KA0SS1G

// set modified fields modified
Function KA0SS1H()


   /* *************************************************************/
   /* *****        r e s e t    a n y    m d t ' s           ******/
   /* *************************************************************/


  if (KA0SM050.XXX-ADDR1 is modified)
    set KA0SM050.XXX-ADDR1 modified;
  end
  if (KA0SM050.XXX-ADDR2 is modified)
    set KA0SM050.XXX-ADDR2 modified;
  end
  if (KA0SM050.XXX-ADDR3 is modified)
    set KA0SM050.XXX-ADDR3 modified;
  end
  if (KA0SM050.XXXCITY is modified)
    set KA0SM050.XXXCITY modified;
  end
  if (KA0SM050.XSTCD is modified)
    set KA0SM050.XSTCD modified;
  end
  if (KA0SM050.XXXZIP is modified)
    set KA0SM050.XXXZIP modified;
  end
  if (KA0SM050.XCTCD is modified)
    set KA0SM050.XCTCD modified;
  end





end // end KA0SS1H

// edit inv dist and defer mail
Function KA0SS1M()
   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-OFSHR-FL edit.*/
    /* 03-11-94 CHELLM Added edit for Europe only XID codes.*/


   /* *************************************************************/

   /* *******************************************************/
   /* edit defer mail*/
   /* *******************************************************/

  set KA0SM050.KUMDMIND initialAttributes;

  if (KA0SM050.KUMDMIND == " ")
    converseLib.validationFailed(5);
    set KA0SM050.KUMDMIND cursor, bold;
    return;
  end

  if (KA0SM050.KUMDMIND == "Y"
   || KA0SM050.KUMDMIND == "N")
    /* next sentence*/
  else
    converseLib.validationFailed(20);
    set KA0SM050.KUMDMIND cursor, bold;
  end

   /* *******************************************************/
   /* edit offshore flag*/
   /* *******************************************************/

  set KA0SM050.CU-OFSHR-FL initialAttributes;

  if (KA0SM050.CU-OFSHR-FL == " ")
    converseLib.validationFailed(5);
    set KA0SM050.CU-OFSHR-FL cursor, bold;
    return;
  end

  if (KA0SM050.CU-OFSHR-FL == "Y"
   || KA0SM050.CU-OFSHR-FL == "N")
    /* next sentence*/
  else
    converseLib.validationFailed(20);
    set KA0SM050.CU-OFSHR-FL cursor, bold;
  end

   /* *******************************************************/
   /* edit invoice distribution indicator*/
   /* *******************************************************/

  if (KA0SM050.XIDCD == "  ") /* indicator is missing, defalt to 01*/
    KA0SM050.XIDCD = "01";
     /* MOVE 5 TO EZEMNO;*/
     /* SET KA0SM050.XIDCD CURSOR,MODIFIED,BRIGHT;*/
  else
    if (KA0SM050.XIDCD in XIDTBL.XIDCD) /* if on table*/
      if (XIDTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* but not active*/
        converseLib.validationFailed(17);
        set KA0SM050.XIDCD cursor, modified, bold;
      else
        set KA0SM050.XIDCD initialAttributes;
      end
    else
      converseLib.validationFailed(17);
      set KA0SM050.XIDCD cursor, modified, bold;
    end
  end


end // end KA0SS1M

// edit require flags
Function KA0SS1N()


   /* *************************************************************/
   /* *****       e d i t    r e q u i r e   f l a g s       ******/
   /* *************************************************************/


  set KA0SM050.KUMRQPKF initialAttributes; /* set attribute to defined*/
  set KA0SM050.KUMRQPKF modified; /* set attribute to modified*/

  if (KA0SM050.KUMRQPKF != "Y" /* if pack flag is not 'y'*/
   && KA0SM050.KUMRQPKF != "N") /* and pack flag is not 'n'*/
    if (KA0SM050.KUMRQPKF == " ") /* if pack flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(pack flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM050.KUMRQPKF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/

  set KA0SM050.KUMRQDSF initialAttributes; /* set attribute to defined*/
  set KA0SM050.KUMRQDSF modified; /* set attribute to modified*/

  if (KA0SM050.KUMRQDSF != "Y" /* if dist flag is not 'y'*/
   && KA0SM050.KUMRQDSF != "N") /* and dist flag is not 'n'*/
    if (KA0SM050.KUMRQDSF == " ") /* if dist flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(dist flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM050.KUMRQDSF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/

  set KA0SM050.KUMRQLBF initialAttributes; /* set attribute to defined*/
  set KA0SM050.KUMRQLBF modified; /* set attribute to modified*/

  if (KA0SM050.KUMRQLBF != "Y" /* if label flag is not 'y'*/
   && KA0SM050.KUMRQLBF != "N") /* and label flag is not 'n'*/
    if (KA0SM050.KUMRQLBF == " ") /* if label flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(label flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM050.KUMRQLBF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/

  set KA0SM050.KUMRQRWF initialAttributes; /* set attribute to defined*/
  set KA0SM050.KUMRQRWF modified; /* set attribute to modified*/

  if (KA0SM050.KUMRQRWF != "Y" /* if review flag is not 'y'*/
   && KA0SM050.KUMRQRWF != "N") /* and review flag is not 'n'*/
    if (KA0SM050.KUMRQRWF == " ") /* if review flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else
                                   /* else(review flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM050.KUMRQRWF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/


end // end KA0SS1N

// default currency code
Function KA0SS1Z()


   /* *************************************************************/
   /* *****       d e f a u l t   c u r r e n c y            ******/
   /* *************************************************************/


  if (COMMAREA.CADLVL[3] == "Y") /* if canadian user*/
    KUMREC.ZFC-CRCY-CD = "CAD"; /* default to canadian dollar*/
  else /* else(same-ship-sw not blank)*/
    KUMREC.ZFC-CRCY-CD = "USD"; /* default to u.s. dollar*/
  end /* end of "if" statement*/






end // end KA0SS1Z

// edit fields on ka0sm051
Function KA0SS20()


   /* *************************************************************/
   /* ***** e d i t    f i e l d s    o n    k a 0 s m 0 5 0 ******/
   /* *************************************************************/


  set KA0SM051.KUMSTRID cursor; /* initialize cursor position*/
  KA0SS2N(); /* edit nike require flag*/
  KA0SS22(); /* edit nike image codes*/
  KA0SS23(); /* edit customer self image code*/
  KA0SS24(); /* edit store class code*/
  KA0SS27(); /* edit nbr of stores serviced*/
  KA0SS28(); /* edit distribution center ind*/
  KA0SS2M(); /* edit deferred mailing indicator*/
  KA0SS26(); /* edit customers store number*/
  KA0SS29(); /* edit ship-to-same-addr flag*/
  KA0SS2A(); /* edit address*/
  KA0SS2B(); /* edit store phone number*/
  KA0SS2C(); /* edit store name*/
  KA0SS2D(); /* edit/assign store id*/





end // end KA0SS20

// edit image codes
Function KA0SS22()


   /* *************************************************************/
   /* *************************************************************/
   /* *****        e d i t    i m a g e    c o d e s         ******/
   /* *************************************************************/
   /* *************************************************************/

   /* *************************************************************/
   /* *****        e d i t    a p p a r e l   i m a g e      ******/
   /* *************************************************************/


  set KA0SM051.KUMXNIAP initialAttributes; /* set field attribute to defined value*/
  if (KA0SM051.KUMXNIAP != " ") /* if apperal image is not blank*/
    if (KA0SM051.KUMXNIAP in XNITBL.XNICD)
      KA0SW01.XNIABRV = XNITBL.XNIABRV[sysVar.arrayIndex];
    end
                                     /* search table for image cd*/
    if (sysVar.arrayIndex == 0) /* if image code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM051.KUMXNIAP cursor, bold;
                                 /* ;     highlight field in error*/
    else /* else(image code found)*/
      /* ***************  check status code of entry  ****************/
      if (XNITBL.XXXSTAT[sysVar.arrayIndex] == "A" /* if status is active*/
       && XNITBL.XGPCD[sysVar.arrayIndex] == "03") /* and gpc is 03 (aprl)*/
        /* next sentence                ;  okay*/
      else /* else(status is active)*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM051.KUMXNIAP cursor, bold;
                                     /* ;  highlight field in error*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





   /* *************************************************************/
   /* *****        e d i t    f o o t w e a r   i m a g e    ******/
   /* *************************************************************/


  set KA0SM051.KUMXNIFT initialAttributes; /* set field attribute to defined value*/
  if (KA0SM051.KUMXNIFT != " ") /* if footwear image is not blank*/

    if (KA0SM051.KUMXNIFT in XNITBL.XNICD)
      KA0SW01.XNIABRV = XNITBL.XNIABRV[sysVar.arrayIndex];
    end
                                     /* search table for image cd*/

    if (sysVar.arrayIndex == 0) /* if image code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM051.KUMXNIFT cursor, bold;
                                         /* highlight field in error*/
    else /* else(image code found)*/
      /* ***************  check status code of entry  ****************/
      if (XNITBL.XXXSTAT[sysVar.arrayIndex] == "A" /* if status is active*/
       && XNITBL.XGPCD[sysVar.arrayIndex] == "02") /* and gpc is 02 (ftwr)*/
        /* next sentence                ;  okay*/
      else /* else(status is active)*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM051.KUMXNIFT cursor, bold;
                                     /* ;  highlight field in error*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS22

// edit customer self image codes
Function KA0SS23()


   /* *************************************************************/
   /* *************************************************************/
   /* *****   e d i t    s e l f    i m a g e    c o d e s   ******/
   /* *************************************************************/
   /* *************************************************************/

  set KA0SM051.XCFCD initialAttributes; /* set field attribute to defined*/
  if (KA0SM051.XCFCD != " ") /* if self image is not blank*/
    if (KA0SM051.XCFCD in XCFTBL.XCFCD)
      KA0SW01.XCFABRV = XCFTBL.XCFABRV[sysVar.arrayIndex];
    end
                                     /* search table for image cd*/
    if (sysVar.arrayIndex == 0) /* if image code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM051.XCFCD cursor, bold; /* highlight field in error*/
    else /* else(image code found)*/
      /* ***************  check status code of entry  ****************/
      if (XCFTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM051.XCFCD cursor, bold; /* highlight field in error*/
      else /* else(status is active)*/
        /* next sentence            ;       okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS23

// edit store class code
Function KA0SS24()


   /* *************************************************************/
   /* *************************************************************/
   /* *****          e d i t     s i c     c o d e           ******/
   /* *************************************************************/
   /* *************************************************************/

  set KA0SM051.YSVCD initialAttributes; /* set field attribute to defined*/
  if (KA0SM051.YSVCD != " ") /* if sic code is not blank*/
    if (KA0SM051.YSVCD in YSVTBL.YSVCD)
      KA0SW01.YSVABRV = YSVTBL.YSVABRV[sysVar.arrayIndex];
    end
                                     /* search table for sic code*/
    if (sysVar.arrayIndex == 0) /* if sic code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM051.YSVCD cursor, bold; /* highlight field in error*/
    else /* else(store class cd found)*/
      /* ***************  check status code of entry  ****************/
      if (YSVTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM051.YSVCD cursor, bold; /* highlight field in error*/
      else /* else(status is active)*/
        /* next sentence            ;       okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS24

// edit customers store number
Function KA0SS26()


   /* *************************************************************/
   /* *****   e d i t    c u s t o m e r s    s t o r e      ******/
   /* *****                 n u m b e r                      ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****   this field is optional and free form.....      ******/
   /* *****   no validation is required, anything entered in ******/
   /* *****   this field is acceptable.                      ******/
   /* *************************************************************/





end // end KA0SS26

// edit number of stores serviced
Function KA0SS27()


   /* *************************************************************/
   /* *****  e d i t    n u m b e r    o f    s t o r e s    ******/
   /* *****        s e r v i c e d    b y    d / c           ******/
   /* *************************************************************/


  set KA0SM051.KUMNRSVC initialAttributes; /* set field attribute to defined*/

  if (KA0SM051.KUMDCIND == "N")
    if (KA0SM051.KUMNRSVC != 0)
      converseLib.validationFailed(21);
      set KA0SM051.KUMNRSVC cursor, bold;
    else
      /* next sentence              ;    okay*/
    end
  else /* else(dist center ind = 'y')*/
    if (KA0SM051.KUMNRSVC == 0) /* if nbr of stores serviced = 0*/
      converseLib.validationFailed(5); /* error "required field missing"*/
      set KA0SM051.KUMNRSVC cursor, bold;
                                 /* ;    highlight error*/
    else /* else(nbr stores serviced not 0)*/
      /* next sentence              ;    okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS27

// edit distribution center ind
Function KA0SS28()


   /* *************************************************************/
   /* *****       e d i t    d i s t r i b u t i o n         ******/
   /* *****        c e n t e r    i n d i c a t o r          ******/
   /* *************************************************************/


  set KA0SM051.KUMDCIND initialAttributes; /* set attribute to defined*/

  if (KA0SM051.KUMDCIND != "Y" /* if dist center ind not 'y'*/
   && KA0SM051.KUMDCIND != "N") /* and dist center ind not 'n'*/
    if (KA0SM051.KUMDCIND == " ") /* if dist center field is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else
                                   /* else(dist center ind not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM051.KUMDCIND cursor, bold; /* highlight error field*/
  else /* else(dist center ind ok)*/
    /* next sentence                ;        okay*/
  end /* end of "if" statement*/






end // end KA0SS28

// edit same-ship-to-addr switch
Function KA0SS29()


   /* *************************************************************/
   /* *****       e d i t    s a m e - s h i p - t o -       ******/
   /* *****             a d d r     s w i t c h              ******/
   /* *************************************************************/


  set KA0SM051.KA0SMSFL initialAttributes; /* set attribute to defined values*/

  if (KA0SM051.KA0SMSFL != "Y" /* if same-ship-sw not 'y'*/
   && KA0SM051.KA0SMSFL != "N") /* and same-ship-sw not 'n'*/
    if (KA0SM051.KA0SMSFL == " ")
                                   /* if same-ship-sw field is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(same-ship-sw not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM051.KA0SMSFL cursor, bold; /* highlight error field*/
  else /* else(same-ship-sw ok)*/
    /* next sentence                ;        okay*/
  end /* end of "if" statement*/






end // end KA0SS29

// edit long store address
Function KA0SS2A()


   /* *************************************************************/
   /* **  e d i t    l o n g    s t o r e    a d d r e s s      ***/
   /* *************************************************************/


   /* ********** set address field attributes to normal ***********/
  set KA0SM051.KUMSTAID initialAttributes;
  set KA0SM051.XXX-ADDR1 initialAttributes;
  set KA0SM051.XXX-ADDR2 initialAttributes;
  set KA0SM051.XXX-ADDR3 initialAttributes;
  set KA0SM051.XXX-ADDR4 initialAttributes;
  set KA0SM051.XXX-ADDR5 initialAttributes;
  set KA0SM051.XXX-ADDR6 initialAttributes;
  set KA0SM051.XSTCD initialAttributes;
  set KA0SM051.XXXZIP initialAttributes;
  set KA0SM051.XCTCD initialAttributes;
   /* *************************************************************/

  if (KA0SM051.KUMSTAID == 0) /* if store address id equal zero*/
    KA0SS2E(); /* edit address fields*/
  else /* else(store address id not equal zero*/
    if (KA0SM051.KUMSTAID == KA0SW01.KA0SWAID)
                                 /* ;  if addr-id = last-addr-id*/
      KA0SS2E(); /* edit address fields*/
    else /* else(new addr-id entered)*/
      KA0SS2F(); /* get address and format screen*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/






end // end KA0SS2A

// edit store phone number
Function KA0SS2B()


   /* *************************************************************/
   /* *****   e d i t    s t o r e    p h o n e    n b r     ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****   this field is optional, and free form.....     ******/
   /* *****   anything entered in this field is acceptable   ******/
   /* *****   no validation is required.                     ******/
   /* *************************************************************/





end // end KA0SS2B

// edit store name
Function KA0SS2C()


   /* *************************************************************/
   /* *****       e d i t    s t o r e    n a m e            ******/
   /* *************************************************************/


  set KA0SM051.KUMSTRNM initialAttributes; /* set field attribute to defined*/
  if (KA0SM051.KUMSTRNM == " ") /* if store name is blank*/
    converseLib.validationFailed(5); /* error "required missing"*/
    set KA0SM051.KUMSTRNM cursor, bold; /* highlight error field*/
  else /* else(same-ship-sw not blank)*/
    /* next sentence                ;          okay*/
  end /* end of "if" statement*/






end // end KA0SS2C

// edit/assign store id (long)
Function KA0SS2D()


   /* *************************************************************/
   /* *****    e d i t / a s s i g n    s t o r e    i d     ******/
   /* *************************************************************/


  set KA0SM051.KUMSTRID initialAttributes; /* set field attributes to defined*/
                                   /* values*/
  if (KA0SM051.KUMSTRID != 0) /* if store id not equal zero*/
    if (KUCREC.KUCMSTID == -1 /* if this is first store for co*/
     || KA0SW01.KA0SWFSR == "Y") /* or if first store flag equal 'y'*/
      converseLib.validationFailed(79); /* error "first must be 0"*/
      set KA0SM051.KUMSTRID cursor, bold;
                                 /* ;    highlight error*/
    else /* else(this is not first store)*/
      if (KA0SM051.KUMSTRID > 999) /* if store id has more than 3 digits*/
        converseLib.validationFailed(76); /* error "store id too large"*/
        set KA0SM051.KUMSTRID cursor, bold;
                                   /* ;    highlight error*/
      else /* else(store number has < 4 digits)*/

        /* *****-----determine if store already exists-----********/
        /* **********  move keys to store table record  ***********/
        KUMREC.KUCCOID = KA0SM051.KUCCOID;
        KUMREC.KUMSTRID = KA0SM051.KUMSTRID;

        call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
                                     /* ;  call dbii i/o module store*/
        if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
          if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
            /* next sentence            ;      not found is okay*/
          else
                                   /* else(dbii rtrn cd bad, but not 100)*/
                                  /* **********************  call error*/
                                   /* routine  *****************/
            TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
            TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
            TA1REC.TA1PGMNM = "KA0SS1D "; /* move program name to error rec*/
            TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1MAP = "KA0SM051"; /* move map name to error record*/
            TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
            TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
            set KUWREC empty; /* initialize error work rec*/
                                  /* ************* move keys to error work*/
                                   /* record  ***************/
            KUWREC.KUCCOID = KA0SM051.KUCCOID;
            KUWREC.KUMSTRID = KA0SM051.KUMSTRID;

            /* *************************************************************/
            TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                           /* ;     move table key value*/
            KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* call db backout*/
            SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                           /* ;*/
            call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
            XSPF4();

            /* *************************************************************/
                                  /* ***** the following commented until*/
                                   /* retro-fitting of   ******/
                                  /* ***** the return from the error*/
                                   /* routine                ******/

            /* *************************************************************/
            /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                            /* ;     move appl global data*/
                                  /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;*/
                                   /* cust main menu is dest*/
            /* XSEXIT                          ;     transfer to next appl*/
                                  /* ******************  end of error*/
                                   /* routine  *******************/
          end /* END OF "if" STATEMENT*/
        else /* else(store found)*/
          converseLib.validationFailed(75); /* error "store already exists"*/
          set KA0SM051.KUMSTRID cursor, bold;
                                     /* ;    highlight error field*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else /* else(store number not = 0)*/


    /* *************************************************************/
    /* ***** this is where the last used store within this    ******/
    /* ***** company is looked up, incrimented, and used      ******/
    /* ***** as the new store id number.                      ******/
    /* *************************************************************/


    if (KA0SW01.KA0SWNXS != 0) /* if next-store-id known*/
      KA0SM051.KUMSTRID = KA0SW01.KA0SWNXS;
                                 /* ;    move next-store-id to screen*/
    else /* else(next-store-id not known)*/
      KA0SW01.KA0SWLOP = 0; /* initialize loopcounter to 0*/
      SQLCA.VAGen_SQLCODE = 0; /* initialize dbii return code to 0*/
      KA0SM051.KUMSTRID = KUCREC.KUCMSTID;
                                   /* ;    move max store id to rec*/
      while (SQLCA.VAGen_SQLCODE == 0 /* loop (to find next available*/
       /* ;      store id)*/
       && KA0SW01.KA0SWLOP <= 1000)
                                   /* until store not found -or-*/
                                   /* ;      all store numbers read.*/

        if (KA0SW01.KA0SWFSR == "Y")
                                   /* if first-store-flag = 'y'*/
          /* next sentence            ;        no not increment id*/
        else
                                   /* else(first-store-flag not = 'y')*/
          KA0SM051.KUMSTRID = KA0SM051.KUMSTRID + 1;
                                   /* ;        increment max store id*/
        end /* end of "if" statement*/

        if (KA0SM051.KUMSTRID == 0) /* if store id = 0, after add*/
          KA0SW01.KA0SWFSR = "Y"; /* set first-store-flag to 'y'*/
        end /* end of "if" statement*/

        if (KA0SM051.KUMSTRID > 999) /* if max store id > 999*/
          KA0SM051.KUMSTRID = 0; /* start over at zero*/
        else /* else(store number < 999)*/
          /* ********** format store rec with keys ***********/
          KUMREC.KUCCOID = KA0SM051.KUCCOID;
          KUMREC.KUMSTRID = KA0SM051.KUMSTRID;

          call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
                                   /* ;      call dbii to get store row*/
          if (SQLCA.VAGen_SQLCODE != 0) /* if call not okok*/
            if (SQLCA.VAGen_SQLCODE == 100) /* if store number not found*/
              /* next sentence        ;          ok, use store number*/
            else
                                   /* else(rtrn cd bad, but not 100)*/
   /* **********************  call error routine  *****************/
              TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
              TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
              TA1REC.TA1PGMNM = "KA0SS1D "; /* move program name to error rec*/
              TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
              TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
              TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
              TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
              TA1REC.TA1MAP = "KA0SM051"; /* move map name to error record*/
              TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
              TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
              set KUWREC empty; /* initialize error work rec*/
   /* ************* move keys to error work record  ***************/
              KUWREC.KUCCOID = KA0SM051.KUCCOID;
              KUWREC.KUMSTRID = KA0SM051.KUMSTRID;
   /* *************************************************************/
              TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                             /* ;     move table key value*/
              KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* call db backout*/
              SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                             /* ;*/
              call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
              XSPF4();
   /* *************************************************************/
   /* ***** the following commented until retro-fitting of   ******/
   /* ***** the return from the error routine                ******/
   /* *************************************************************/
              /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                  /* ;     move appl global data*/
   /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
   /* XSEXIT                          ;     transfer to next appl*/
   /* ******************  end of error routine  *******************/
            end /* end of "if" statement*/
          end /* END OF "if" STATEMENT*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
      KUCREC.KUCMSTID = KA0SM051.KUMSTRID;
                                   /* ;move new store id to company*/
                                   /* ;max store id field*/
      KA0SW01.KA0SWNXS = KA0SM051.KUMSTRID;
                                   /* ;  save next store id*/
    end /* end of "if" statement*/
  end /* end of "while" loop*/
  if (KA0SW01.KA0SWLOP >= 1000) /* if loop exited because all store nbrs*/
                                 /* ;used*/
    converseLib.validationFailed(27);
                                   /* error "max stores under this comapny"*/
    set KA0SM051.KUMSTRID cursor, bold;
                                 /* ;  highlight error field*/
  end /* end of "if" statement*/





end // end KA0SS2D

// edit long address fields
Function KA0SS2E()


   /* *************************************************************/
   /* ** e d i t    l o n g    a d d r e s s    s c r e e n  ******/
   /* *************************************************************/


   /* ****** move address fields to address application rec *******/
  XA1REC.XXX-ADDR1 = KA0SM051.XXX-ADDR1;
  XA1REC.XXX-ADDR2 = KA0SM051.XXX-ADDR2;
  XA1REC.XXX-ADDR3 = KA0SM051.XXX-ADDR3;
  XA1REC.XXX-ADDR4 = KA0SM051.XXX-ADDR4;
  XA1REC.XXX-ADDR5 = KA0SM051.XXX-ADDR5;
  XA1REC.XXX-ADDR6 = KA0SM051.XXX-ADDR6;
  XA1REC.XSTCD = KA0SM051.XSTCD;
  XA1REC.XXXZIP = KA0SM051.XXXZIP;
  XA1REC.XCTCD = KA0SM051.XCTCD;
   /* *************************************************************/

  XA1REC.XA1FUNCT = "E"; /* "edit only" function code*/
  call "XA0C" (XA1REC) {isNoRefresh = yes}; /* call address application*/

   /* ********** move address fields back to map ******************/
  KA0SM051.XXX-ADDR1 = XA1REC.XXX-ADDR1;
  KA0SM051.XXX-ADDR2 = XA1REC.XXX-ADDR2;
  KA0SM051.XXX-ADDR3 = XA1REC.XXX-ADDR3;
  KA0SM051.XXX-ADDR4 = XA1REC.XXX-ADDR4;
  KA0SM051.XXX-ADDR5 = XA1REC.XXX-ADDR5;
  KA0SM051.XXX-ADDR6 = XA1REC.XXX-ADDR6;
  KA0SM051.XSTCD = XA1REC.XSTCD;
  KA0SM051.XXXZIP = XA1REC.XXXZIP;
  KA0SM051.XCTCD = XA1REC.XCTCD;
   /* *************************************************************/

   /* **********  determine if any address fields in error  *******/
  if (XA1REC.XA1ERIND[10] != 0) /* if error in country field*/
    set KA0SM051.XCTCD cursor, bold; /* highlight country field*/
    if (XA1REC.XA1ERIND[10] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[10]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[9] != 0) /* if error in zip code field*/
    set KA0SM051.XXXZIP cursor, bold; /* highlight zip code field*/
    if (XA1REC.XA1ERIND[9] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[9]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[8] != 0) /* if error in state code field*/
    set KA0SM051.XSTCD cursor, bold;
                                   /* highlight state code field*/
    if (XA1REC.XA1ERIND[8] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[8]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[7] != 0) /* if error in country field*/
    set KA0SM051.XXX-ADDR6 cursor, bold; /* highlight country field*/
    if (XA1REC.XA1ERIND[7] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[7]);
    end /* move error message number*/
  end /* end of "if"statement*/
  if (XA1REC.XA1ERIND[6] != 0) /* if error in city field*/
    set KA0SM051.XXX-ADDR5 cursor, bold; /* highlight city field*/
    if (XA1REC.XA1ERIND[6] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[6]);
    end /* move error message number*/
  end /* end of "if"statement*/
  if (XA1REC.XA1ERIND[5] != 0) /* if error in address line 4*/
    set KA0SM051.XXX-ADDR4 cursor, bold;
                                   /* highlight address line 4 field*/
    if (XA1REC.XA1ERIND[5] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[5]);
    end /* move error message number*/
  end /* end of "if"statement*/
  if (XA1REC.XA1ERIND[4] != 0) /* if error in address line 3*/
    set KA0SM051.XXX-ADDR3 cursor, bold;
                                   /* highlight address line 3 field*/
    if (XA1REC.XA1ERIND[4] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[4]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[3] != 0) /* if error in address line 2*/
    set KA0SM051.XXX-ADDR2 cursor, bold;
                                   /* highlight address line 2 field*/
    if (XA1REC.XA1ERIND[3] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[3]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[2] != 0) /* if error in address line 1*/
    set KA0SM051.XXX-ADDR1 cursor, bold; /* highlight address line 1*/
    if (XA1REC.XA1ERIND[2] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[2]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[1] != 0) /* if any general error sr*/
    if (XA1REC.XA1ERIND[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[1]);
    end /* move error meaage number*/
  end /* end of "if" statement*/
   /* *************************************************************/

  if (KA0SM051.XXX-ADDR1 is modified /* if any address line has been modified*/
   || KA0SM051.XXX-ADDR2 is modified /* |*/
   || KA0SM051.XXX-ADDR3 is modified /* |*/
   || KA0SM051.XXX-ADDR4 is modified /* |*/
   || KA0SM051.XXX-ADDR5 is modified /* |*/
   || KA0SM051.XXX-ADDR6 is modified /* |*/
   || KA0SM051.XSTCD is modified     /* |*/
   || KA0SM051.XXXZIP is modified    /* |*/
   || KA0SM051.XCTCD is modified)    /* |*/
    /* **********  if no errors found assign address id  ***********/
    if (XA1REC.XA1ERIND[1] == 0 /* if no errors in address*/
     && XA1REC.XA1ERIND[2] == 0 /* |*/
     && XA1REC.XA1ERIND[3] == 0 /* |*/
     && XA1REC.XA1ERIND[4] == 0 /* |*/
     && XA1REC.XA1ERIND[5] == 0 /* |*/
     && XA1REC.XA1ERIND[6] == 0 /* |*/
     && XA1REC.XA1ERIND[7] == 0 /* |*/
     && XA1REC.XA1ERIND[8] == 0 /* |*/
     && XA1REC.XA1ERIND[9] == 0 /* |*/
     && XA1REC.XA1ERIND[10] == 0) /* |*/
      KA0SS2G(); /* assign next avail addr id*/
    else /* else(errors in address)*/
      /* next sentence              ;    continue*/
    end /* end of "if" statement*/
  else /* else(address not modified)*/
    KA0SM051.KUMSTAID = KA0SW01.KA0SWAID;
                                 /* ;  move last-addr-id to addr-id*/
  end /* end of "if" statement*/
   /* *************************************************************/





end // end KA0SS2E

// get long addr and format map
Function KA0SS2F()


   /* *************************************************************/
   /* **  g e t    l o n g   a d d r e s s    &    f o r m a t  ***/
   /* *************************************************************/

   /* **********  move keys to address table record  **************/

  XA1REC.NLATYPIN = "C";
  XA1REC.NLABSIND = " ";
  XA1REC.NLAONECH = " ";
  XA1REC.NLASINT1 = 0;
  XA1REC.NLASINT2 = 0;

  XA1REC.NLAADRID = KA0SM051.KUMSTAID;
  XA1REC.NLAINTGR = KA0SM051.KUCCOID;

  XA1REC.XA1FUNCT = "G"; /* "get address" function code*/
  call "XA0C" (XA1REC) {isNoRefresh = yes};
                                   /* call address application for address*/
  if (XA1REC.XA1ERIND[1] == 0) /* if return code "ok"*/
    /* ******************* move address to map  ********************/
    KA0SM051.XXX-ADDR1 = XA1REC.XXX-ADDR1;
    KA0SM051.XXX-ADDR2 = XA1REC.XXX-ADDR2;
    KA0SM051.XXX-ADDR3 = XA1REC.XXX-ADDR3;
    KA0SM051.XXX-ADDR4 = XA1REC.XXX-ADDR4;
    KA0SM051.XXX-ADDR5 = XA1REC.XXX-ADDR5;
    KA0SM051.XXX-ADDR6 = XA1REC.XXX-ADDR6;
    KA0SM051.XSTCD = XA1REC.XSTCD;
    KA0SM051.XXXZIP = XA1REC.XXXZIP;
    KA0SM051.XCTCD = XA1REC.XCTCD;
    KA0SW01.KA0SWAID = XA1REC.NLAADRID;

  else /* else(return code not "ok")*/
    if (XA1REC.XA1ERIND[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[1]);
    end
                                 /* ;    move error message number*/
    set KA0SM051.KUMSTAID cursor, bold;
                                 /* ;    highlight adrees id field*/
  end /* end of "if" statement*/





end // end KA0SS2F

// determine next avail addr id
Function KA0SS2G()


   /* *************************************************************/
   /* *****    d e t e r m i n e    n e x t    a v a i l     ******/
   /* *****              a d d r e s s    i d                ******/
   /* *************************************************************/


  if (KA0SW01.KA0SWNXT != 0) /* if next avail-addr-id already known*/
    KA0SM050.KUMSTAID = KA0SW01.KA0SWNXT;
                                 /* ;  move next-avail-addr-id*/
                                 /* ;  to addr-id*/
  else /* else(next-avail-addr-id not known)*/
    SQLCA.VAGen_SQLCODE = 0;
    KA0SM050.KUMSTAID = KUCREC.KUCMADID;
    while (SQLCA.VAGen_SQLCODE == 0)
      KA0SM051.KUMSTAID = KA0SM051.KUMSTAID + 1;
      if (KA0SM051.KUMSTAID > 9998)
        KA0SM051.KUMSTAID = 0;
      else
        KULREC.KUCCOID = KA0SM051.KUCCOID;
        KULREC.KULAAID = KA0SM051.KUMSTAID;
        call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE != 0)
          if (SQLCA.VAGen_SQLCODE == 100)
            /* next sentence*/
          else
                                  /* **********************  call error*/
                                   /* routine  *****************/
            TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
            TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
            TA1REC.TA1PGMNM = "KA0SS1G "; /* move program name to error rec*/
            TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1MAP = "KA0SM051"; /* move map name to error record*/
            TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
            TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
            set KUWREC empty; /* initialize error work rec*/
                                  /* ************* move keys to error work*/
                                   /* record  ***************/
            KUWREC.KUCCOID = KA0SM051.KUCCOID;
            KUWREC.KUMSTRID = KA0SM051.KUMSTRID;

            /* *************************************************************/
            TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                           /* ;     move table key value*/
            KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* call db backout*/
            SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                           /* ;*/
            call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
            XSPF4();

            /* *************************************************************/
                                  /* ***** the following commented until*/
                                   /* retro-fitting of   ******/
                                  /* ***** the return from the error*/
                                   /* routine                ******/

            /* *************************************************************/
            /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                            /* ;     move appl global data*/
                                  /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;*/
                                   /* cust main menu is dest*/
            /* XSEXIT                          ;     transfer to next appl*/
                                  /* ******************  end of error*/
                                   /* routine  *******************/
          end
        end /* END OF "if" STATEMENT*/
      end /* end of "if" statement*/
    end /* end of "while" loop*/
    KA0SW01.KA0SWNXT = KA0SM051.KUMSTAID;
                                 /* ;  save next-avail-addr-id*/
    KUCREC.KUCMADID = KA0SM051.KUMSTAID;
                                 /* ;  move last-used-addr-id to*/
                                 /* ;  company record*/
  end /* end of "if" statement*/
  KA0SW01.KA0SWAID = KA0SM051.KUMSTAID;
                                 /* ;move addr-id to last-addr-id*/





end // end KA0SS2G

// set modified fields modified
Function KA0SS2H()


   /* *************************************************************/
   /* *****        r e s e t    a n y    m d t ' s           ******/
   /* *************************************************************/

   /* *************************************************************/
   /* *    M A I N T T N A N C E     H I S T O R Y    L O G      **/
   /* *----------------------------------------------------------**/
   /* *   DATE    PGRM    DESCRIPTION                            **/
   /* *----------------------------------------------------------**/
   /* * 03-28-02  GDECKE  HANDLE SAP ACCOUNT ID                  **/
   /* *************************************************************/

  if (KA0SM051.CU-SAP-ACCT-ID is modified)
    set KA0SM051.CU-SAP-ACCT-ID modified;
  end

  if (KA0SM051.XXX-ADDR1 is modified)
    set KA0SM051.XXX-ADDR1 modified;
  end
  if (KA0SM051.XXX-ADDR2 is modified)
    set KA0SM051.XXX-ADDR2 modified;
  end
  if (KA0SM051.XXX-ADDR3 is modified)
    set KA0SM051.XXX-ADDR3 modified;
  end
  if (KA0SM051.XXX-ADDR4 is modified)
    set KA0SM051.XXX-ADDR4 modified;
  end
  if (KA0SM051.XXX-ADDR5 is modified)
    set KA0SM051.XXX-ADDR5 modified;
  end
  if (KA0SM051.XXX-ADDR6 is modified)
    set KA0SM051.XXX-ADDR6 modified;
  end
  if (KA0SM051.XSTCD is modified)
    set KA0SM051.XSTCD modified;
  end
  if (KA0SM051.XXXZIP is modified)
    set KA0SM051.XXXZIP modified;
  end
  if (KA0SM051.XCTCD is modified)
    set KA0SM051.XCTCD modified;
  end





end // end KA0SS2H

// edit inv dist and defer mail
Function KA0SS2M()

   /* ***********************************************/
   /* edit deferred mail*/
   /* ***********************************************/

  set KA0SM051.KUMDMIND initialAttributes;

  if (KA0SM051.KUMDMIND == " ")
    converseLib.validationFailed(5);
    set KA0SM051.KUMDMIND cursor, bold;
    return;
  end

  if (KA0SM051.KUMDMIND == "Y"
   || KA0SM051.KUMDMIND == "N")
    /* next sentence*/
  else
    converseLib.validationFailed(20);
    set KA0SM051.KUMDMIND cursor, bold;
  end



   /* ***********************************************/
   /* edit invoice distribution indicator*/
   /* ***********************************************/
  if (KA0SM051.XIDCD == "  ")
    KA0SM051.XIDCD = "01";
     /* MOVE 5 TO EZEMNO;*/
     /* SET KA0SM051.XIDCD CURSOR,MODIFIED,BRIGHT;*/
  else

    if (KA0SM051.XIDCD in XIDTBL.XIDCD) /* if on table*/
      if (XIDTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* but not active*/
        converseLib.validationFailed(17);
        set KA0SM051.XIDCD cursor, modified, bold;
      else
        set KA0SM051.XIDCD initialAttributes;
      end
    else
      converseLib.validationFailed(17);
      set KA0SM051.XIDCD cursor, modified, bold;
    end
  end

  if (KA0SM051.XIDCD == "10" /* if European only code*/
   || KA0SM051.XIDCD == "11") /* Flag error*/
    converseLib.validationFailed(17);
    set KA0SM051.XIDCD cursor, modified, bold;
  end

end // end KA0SS2M

// edit require flags
Function KA0SS2N()


   /* *************************************************************/
   /* *****       e d i t    r e q u i r e   f l a g s       ******/
   /* *************************************************************/


  set KA0SM051.KUMRQPKF initialAttributes; /* set attribute to defined*/
  set KA0SM051.KUMRQPKF modified; /* set attribute to modified*/

  if (KA0SM051.KUMRQPKF != "Y" /* if pack flag is not 'y'*/
   && KA0SM051.KUMRQPKF != "N") /* and pack flag is not 'n'*/
    if (KA0SM051.KUMRQPKF == " ") /* if pack flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(pack flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM051.KUMRQPKF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/

  set KA0SM051.KUMRQDSF initialAttributes; /* set attribute to defined*/
  set KA0SM051.KUMRQDSF modified; /* set attribute to modified*/

  if (KA0SM051.KUMRQDSF != "Y" /* if dist flag is not 'y'*/
   && KA0SM051.KUMRQDSF != "N") /* and dist flag is not 'n'*/
    if (KA0SM051.KUMRQDSF == " ") /* if dist flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(dist flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM051.KUMRQDSF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/

  set KA0SM051.KUMRQLBF initialAttributes; /* set attribute to defined*/
  set KA0SM051.KUMRQLBF modified; /* set attribute to modified*/

  if (KA0SM051.KUMRQLBF != "Y" /* if label flag is not 'y'*/
   && KA0SM051.KUMRQLBF != "N") /* and label flag is not 'n'*/
    if (KA0SM051.KUMRQLBF == " ") /* if label flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(label flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM051.KUMRQLBF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/

  set KA0SM051.KUMRQRWF initialAttributes; /* set attribute to defined*/
  set KA0SM051.KUMRQRWF modified; /* set attribute to modified*/

  if (KA0SM051.KUMRQRWF != "Y" /* if review flag is not 'y'*/
   && KA0SM051.KUMRQRWF != "N") /* and review flag is not 'n'*/
    if (KA0SM051.KUMRQRWF == " ") /* if review flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else
                                   /* else(review flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0SM051.KUMRQRWF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/


end // end KA0SS2N

// edit fields on ka0sm060
Function KA0SS60()


   /* *************************************************************/
   /* ***** e d i t    f i e l d s    o n    k a 0 s m 0 6 0 ******/
   /* *************************************************************/


  if (KA0SM050.KA0SMSFL == "N") /* if address fields not autoskip*/
    set KA0SM060.KA0SMSID cursor; /* initialize cursor position*/
  else /* else(all address fields autoskip)*/
    set KA0SM060.XGPCD[1] cursor; /* initialize cursor position*/
  end /* end of "if" statement*/
  KA0SS69(); /* top justify all warehouse lines*/
  KA0SW01.KA0SWNDX = 3; /* initialize index to 3*/
  while (KA0SW01.KA0SWNDX >= 1)
                                   /* loop thru warehouse lines on screen*/
    set KA0SM060.XGPCD[KA0SWNDX] initialAttributes; /* set attributes defined*/
    set KA0SM060.XWHCD[KA0SWNDX] initialAttributes; /* set attributes defined*/
    set KA0SM060.XWHNM[KA0SWNDX] initialAttributes; /* set attributes defined*/
    KA0SM060.XWHNM[KA0SWNDX] = " "; /* initialize warehouse name*/
    set KA0SM060.XGPABRV[KA0SWNDX] initialAttributes; /* set attributes defined*/
    KA0SM060.XGPABRV[KA0SWNDX] = " "; /* initialize gpc decode*/
    if (KA0SM060.XGPCD[KA0SWNDX] != " " /* if at least one code entered*/
     || KA0SM060.XWHCD[KA0SWNDX] != " ") /* |*/
      KA0SS61(); /* edit warehouse*/
      KA0SS6B(); /* edit for duplicate gpc's*/
      KA0SS63(); /* edit gpc code*/
    end /* end of "if" statement*/
    KA0SW01.KA0SWNDX = KA0SW01.KA0SWNDX - 1;
                                        /* decriment index*/
  end /* end of while loop*/
  KA0SS6A(); /* insure one warehouse entered*/
  if (KA0SM050.KA0SMSFL == "N")
                                   /* if address different than previous*/
    KA0SS62(); /* edit ship to address fields*/
  end /* end of "if" statement*/





end // end KA0SS60

// edit warehouses
Function KA0SS61()


   /* *************************************************************/
   /* *****      e d i t    w a r e h o u s e   i d ' s      ******/
   /* *************************************************************/


  if (KA0SM060.XWHCD[KA0SWNDX] != " ") /* if warehouse code is not blank*/
    if (KA0SM060.XWHCD[KA0SWNDX] in XWHTBL.XWHCD)
      KA0SM060.XWHNM[KA0SWNDX] = XWHTBL.XWHNM[sysVar.arrayIndex];
    end
                                        /* search table for image*/
    if (sysVar.arrayIndex == 0) /* if warehouse code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM060.XWHCD[KA0SWNDX] cursor, bold;
                                 /* ;          highlight field in err*/
    else /* else(warehouse cd found)*/
      /* ***************  check status code of entry  ****************/
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM060.XWHCD[KA0SWNDX] cursor, bold;
                                     /* ;        highlight field in err*/
        KA0SM060.XWHNM[KA0SWNDX] = " ";
                                 /* ;        blank out decode*/
      else /* else(status is active)*/
        if (KA0SM060.XGPCD[KA0SWNDX] != " ") /* if gpc code is not blank*/
          /* ***** test that warehouse supplies customers gpc ******/
          if (XWHTBL.XGPCD1[sysVar.arrayIndex] != KA0SM060.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD2[sysVar.arrayIndex] != KA0SM060.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD3[sysVar.arrayIndex] != KA0SM060.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD4[sysVar.arrayIndex] != KA0SM060.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD5[sysVar.arrayIndex] != KA0SM060.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD6[sysVar.arrayIndex] != KA0SM060.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD7[sysVar.arrayIndex] != KA0SM060.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD8[sysVar.arrayIndex] != KA0SM060.XGPCD[KA0SWNDX])
            converseLib.validationFailed(87);
                                   /* error "invalid warehouse, gpc"*/
            set KA0SM060.XWHCD[KA0SWNDX] cursor, bold;
            set KA0SM060.XWHNM[KA0SWNDX] skip, bold;
                                 /* ;        highlight error*/
          else /* else(valid warehouse for gpc)*/
            /* next sentence        ;        okay*/
          end /* end of "if" statement*/
        else /* else(gpc code not entered)*/
          /* next sentence          ;      don't bother*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
    /* IF KA0SM060.XGPCD(KA0SWNDX) EQ ' ';if gpc code is blank*/
      /* MOVE 5 TO EZEMNO            ;      error "required"*/
      /* SET KA0SM060.XGPCD(KA0SWNDX) CURSOR,BRIGHT;highlight field*/
    /* ELSE                          ;    else(gpc code not blank)*/
      /* ;next sentence              ;      okay(checked later)*/
    /* END                           ;    end of "if" statement*/
  else /* else(warehouse code not blank)*/
    if (KA0SM060.XGPCD[KA0SWNDX] != " ") /* if gpc code not blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
      set KA0SM060.XWHCD[KA0SWNDX] cursor, bold;
    else /* else(gpc code entered)*/
      /* next sentence              ;      okay(checked later)*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS61

// edit ship-group address
Function KA0SS62()


   /* *************************************************************/
   /* *****  e d i t    s h i p - g r o u p    a d d r e s s ******/
   /* *************************************************************/


  set KA0SM060.KA0SMSID initialAttributes;
  set KA0SM060.KUMSHAID initialAttributes;
  set KA0SM060.XXX-ADDR1 initialAttributes;
  set KA0SM060.XXX-ADDR2 initialAttributes;
  set KA0SM060.XXX-ADDR3 initialAttributes;
  set KA0SM060.XXXCITY initialAttributes;
  set KA0SM060.XSTCD initialAttributes;
  set KA0SM060.XXXZIP initialAttributes;
  set KA0SM060.XCTCD initialAttributes;
  if (KA0SM060.KA0SMSID == " " /* if associate with field is blank*/
   || KA0SM060.KA0SMSID == KA0SW01.KA0SWLSI)
                                 /* ;  or associate-with = last*/
    if (KA0SM060.KUMSHAID == 0) /* if store address id equal zero*/
      KA0SS64(); /* edit address fields*/
    else
                                   /* else(store address id not equal zero*/
      if (KA0SM060.KUMSHAID == KA0SW01.KA0SWAID)
                                 /* ;    if addr-id = last-addr-id*/
        KA0SS64(); /* edit address fields*/
      else /* else(new addr-id entered)*/
        KA0SW01.KA0SWLSI = " "; /* re-initialize last-store-id*/
        KA0SM060.KA0SMSID = " ";
                                   /* re-initialize ass/w store-id*/
        KA0SS65(); /* get address and format screen*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
                                 /* ;*/
  else /* else(ass/w field is not blank)*/
    KA0SW01.KA0SWGST = KA0SM060.KA0SMSID;
                                 /* ;  move ass/with for num check*/
    /* ***** right justify and zero fill ******/
    KA0SW01.KA0SWNDX = 1; /* initialize index to 1*/
    while (KA0SW01.KA0SWNDX <= 4 /* loop thru digits up to 4 times*/
     && KA0SW01.KA0SWD4 == " ") /* or until right justified*/
      KA0SW01.KA0SWD4 = KA0SW01.KA0SWD3;
      KA0SW01.KA0SWD3 = KA0SW01.KA0SWD2;
      KA0SW01.KA0SWD2 = KA0SW01.KA0SWD1;
      KA0SW01.KA0SWD1 = "0";
      KA0SW01.KA0SWNDX = KA0SW01.KA0SWNDX + 1;
                                 /* ;  increment index by 1*/
    end /* end of "while" loop*/

    /* ***** the following will check for numeric data ******/
    if (KA0SW01.KA0SWD1 >= "0" /* if digit greater than, or equal 0*/
     && KA0SW01.KA0SWD1 <= "9" /* and digit less than, or equal 9*/
     && KA0SW01.KA0SWD2 >= "0" 
     /* and digit greater than, or equal 0*/
     && KA0SW01.KA0SWD2 <= "9" /* and digit less than, or equal 9*/
     && KA0SW01.KA0SWD3 >= "0" 
     /* and digit greater than, or equal 0*/
     && KA0SW01.KA0SWD3 <= "9" /* and digit less than, or equal 9*/
     && KA0SW01.KA0SWD4 >= "0" 
     /* and digit greater than, or equal 0*/
     && KA0SW01.KA0SWD4 <= "9") /* and digit less than, or equal 9*/
      /* *************************************************************/
      /* *****  if field contains numeric data, move to         ******/
      /* *****  a numeric field                                 ******/
      /* *************************************************************/
      KA0SWD21 = KA0SW01.KA0SWD1;
      KA0SWD22 = KA0SW01.KA0SWD2;
      KA0SWD23 = KA0SW01.KA0SWD3;
      KA0SWD24 = KA0SW01.KA0SWD4;
      KUMREC.KUCCOID = KA0SM060.KUCCOID;
                                 /* ;    move company id to store id*/
                                 /* ;*/
      /* ***** move numeric field with store id to store rec ******/
      KUMREC.KUMSTRID = KA0SW01.KA0SW2ST;
                                 /* ;    move store id to store rec*/
      KA0SM060.KA0SMSID = KA0SW01.KA0SW2ST;
                                 /* ;    move 0-fill store id to map*/
                                 /* ;*/
      call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;    call i/o mod to get ass stor*/
      if (SQLCA.VAGen_SQLCODE != 0) /* IF RETURN CODE NOT OKAY*/
        if (SQLCA.VAGen_SQLCODE == 100) /* IF RETUEN CODE = "not found""*/
          converseLib.validationFailed(26); /* error "store not found"*/
          set KA0SM060.KA0SMSID cursor, bold;
                                 /* ;        highlight error*/
        else /* else(rc other than "not found)*/
          /* **********************  call error routine  *****************/
          TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
          TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
          TA1REC.TA1PGMNM = "KA0SS62 "; /* move program name to error rec*/
          TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1MAP = "KA0SM060"; /* move map name to error record*/
          TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
          TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
          set KUWREC empty; /* initialize error work rec*/
          /* ************* move keys to error work record  ***************/
          KUWREC.KUCCOID = KUMREC.KUCCOID;
          KUWREC.KUMSTRID = KUMREC.KUMSTRID;
          /* *************************************************************/
          TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                         /* ;     move table key value*/
          KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* call db backout*/
          SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                         /* ;*/
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
          XSPF4();
          /* *************************************************************/
          /* ***** the following commented until retro-fitting of   ******/
          /* ***** the return from the error routine                ******/
          /* *************************************************************/
          /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                          /* ;     move appl global data*/
          /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
          /* XSEXIT                     ;     transfer to next appl*/
          /* ******************  end of error routine  *******************/
        end /* end of "if" statement"*/
      else /* else(return code okay)*/
        if (KA0SM060.KUMSHAID == 0) /* if addr id blank*/
          KA0SM060.KUMSHAID = KUMREC.KUMSHAID;
                                 /* ;        move ass/w ship-to*/
                                 /* ;        addr-id to addr-id*/
          KA0SS65(); /* get addr and format screen*/
          KA0SW01.KA0SWLSI = KA0SM060.KA0SMSID;
                                 /* ;        move ass/w to last-ass/w*/
        else /* else(addr-id not blank)*/
          if (KUMREC.KUMSHAID != KA0SM060.KUMSHAID)
                                 /* ;        if addr-id's are not same*/
            if (KA0SM060.KUMSHAID != KA0SW01.KA0SWAID)
                                 /* ;          if addr-id not eq last-*/
                                 /* ;            addr-id*/
              set KA0SM060.KA0SMSID cursor, bold;
              set KA0SM060.KUMSHAID bold; /* highlight error fields*/
              converseLib.validationFailed(93);
                                   /* error "fields don't match"*/
            else
                                   /* else(addr-id = last-addr-id)*/
              KA0SW01.KA0SWLSI = KA0SM060.KA0SMSID;
                                 /* ;            move ass/w to last-ass/w*/
              KA0SM060.KUMSHAID = KUMREC.KUMSHAID;
                                 /* ;            move addr-id to screen*/
              KA0SS65(); /* get addr & format screen*/
            end /* end of "if" statement*/
          else /* else(addr-id's are the same)*/
            KA0SW01.KA0SWLSI = KA0SM060.KA0SMSID;
                                 /* ;          move ass/w to last-ass/w*/
            KA0SS65(); /* get addr and format screen*/
          end /* end of "if" statement*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    else /* else(ass/w store id not numeric)*/
      converseLib.validationFailed(83); /* error "invalid store number"*/
      set KA0SM060.KA0SMSID cursor, bold;
                                 /* ;    highlight error*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS62

// edit gpc codes
Function KA0SS63()


   /* *************************************************************/
   /* *****          e d i t    g p c    c o d e s           ******/
   /* *************************************************************/


  if (KA0SM060.XGPCD[KA0SWNDX] != " ") /* if gpc code is not blank*/
    if (KA0SM060.XGPCD[KA0SWNDX] in XGPTBL.XGPCD)
      KA0SM060.XGPABRV[KA0SWNDX] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
                                 /* ;        search table for gpc*/
    if (sysVar.arrayIndex == 0) /* if gpc code not found*/
      if (converseVar.validationMsgNum == 87) /* if last error was*/
                                 /* ;            "warehouse invalid*/
                                 /* ;            for gpc specified"*/
        set KA0SM060.XWHCD[KA0SWNDX] initialAttributes; /* reset attribute*/
        set KA0SM060.XWHNM[KA0SWNDX] initialAttributes; /* reset attribute*/
      else /* else(other error)*/
        /* next sentence            ;            continue*/
      end /* end of "if" statement*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM060.XGPCD[KA0SWNDX] cursor, bold;
                                 /* ;          highlight field in err*/
    else /* else(if gpc code found)*/
      /* ***************  check status code of entry  ****************/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        if (converseVar.validationMsgNum == 87) /* if last error was*/
                                 /* ;              "warehouse invalid*/
                                 /* ;              for gpc specified"*/
          set KA0SM060.XWHCD[KA0SWNDX] initialAttributes; /* reset attribute*/
          set KA0SM060.XWHNM[KA0SWNDX] initialAttributes; /* reset attribute*/
        else /* else(other error)*/
          /* next sentence          ;              continue*/
        end /* end of "if" statement*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM060.XGPCD[KA0SWNDX] cursor, bold;
                                 /* ;            highlight field in err*/
      else /* else(status is active)*/
        /* next sentence            ;            okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
    /* IF KA0SM060.XWHCD(KA0SWNDX) EQ ' ';    if warehouse blank*/
      /* IF EZETST NE 0              ;          if no previous err*/
        /* MOVE 5 TO EZEMNO          ;            error "required"*/
        /* SET KA0SM060.XWHCD(KA0SWNDX) CURSOR,BRIGHT;*/
        /* ;                         ;            highlight error*/
      /* ELSE                        ;          else(prev error)*/
        /* SET KA0SM060.XWHCD(KA0SWNDX) BRIGHT;   highlight error*/
      /* END                         ;          end of "if" stmt*/
    /* END                           ;        end of "if" statement*/
  else /* else(gpc code is blank)*/
    if (KA0SM060.XWHCD[KA0SWNDX] != " ") /* if warehouse not blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
      set KA0SM060.XGPCD[KA0SWNDX] cursor, bold;
                                 /* ;          highlight error*/
    else /* else*/
      /* next sentence              ;          okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS63

// edit address on screen
Function KA0SS64()


   /* *************************************************************/
   /* *****  e d i t    a d d r e s s    o n    s c r e e n  ******/
   /* *************************************************************/


   /* ****** move address fields to address application rec *******/
  XA0AW02.XXX-ADDR1 = KA0SM060.XXX-ADDR1;
  XA0AW02.XXX-ADDR2 = KA0SM060.XXX-ADDR2;
  XA0AW02.XXX-ADDR3 = KA0SM060.XXX-ADDR3;
  XA0AW02.XXXCITY = KA0SM060.XXXCITY;
  XA0AW02.XSTCD = KA0SM060.XSTCD;
  XA0AW02.XXXZIP = KA0SM060.XXXZIP;
  XA0AW02.XCTCD = KA0SM060.XCTCD;
   /* *************************************************************/

  XA0AW02.XA0AWFNC = "E"; /* "edit only" function code*/
  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address application*/

   /* ********** move address fields back to map ******************/
  KA0SM060.XXX-ADDR1 = XA0AW02.XXX-ADDR1;
  KA0SM060.XXX-ADDR2 = XA0AW02.XXX-ADDR2;
  KA0SM060.XXX-ADDR3 = XA0AW02.XXX-ADDR3;
  KA0SM060.XXXCITY = XA0AW02.XXXCITY;
  KA0SM060.XSTCD = XA0AW02.XSTCD;
  KA0SM060.XXXZIP = XA0AW02.XXXZIP;
  KA0SM060.XCTCD = XA0AW02.XCTCD;
   /* *************************************************************/

   /* **********  determine if any address fields in error  *******/
  if (XA0AW02.XA0AWERR[8] != 0) /* if error in country field*/
    set KA0SM060.XCTCD cursor, bold; /* highlight country field*/
    if (XA0AW02.XA0AWERR[8] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[8]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[7] != 0) /* if error in zip code field*/
    set KA0SM060.XXXZIP cursor, bold; /* highlight zip code field*/
    if (XA0AW02.XA0AWERR[7] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[7]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[6] != 0) /* if error in state code field*/
    set KA0SM060.XSTCD cursor, bold;
                                   /* highlight state code field*/
    if (XA0AW02.XA0AWERR[6] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[6]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[5] != 0) /* if error in city field*/
    set KA0SM060.XXXCITY cursor, bold; /* highlight city field*/
    if (XA0AW02.XA0AWERR[5] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[5]);
    end /* move error message number*/
  end /* end of "if"statement*/
  if (XA0AW02.XA0AWERR[4] != 0) /* if error in address line 3*/
    set KA0SM060.XXX-ADDR3 cursor, bold;
                                   /* highlight address line 3 field*/
    if (XA0AW02.XA0AWERR[4] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[4]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[3] != 0) /* if error in address line 2*/
    set KA0SM060.XXX-ADDR2 cursor, bold;
                                   /* highlight address line 2 field*/
    if (XA0AW02.XA0AWERR[3] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[3]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[2] != 0) /* if error in address line 1*/
    set KA0SM060.XXX-ADDR1 cursor, bold; /* highlight address line 1*/
    if (XA0AW02.XA0AWERR[2] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[2]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[1] != 0) /* if any general error sr*/
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end /* move error meaage number*/
  end /* end of "if" statement*/
   /* *************************************************************/

  if (KA0SM060.XXX-ADDR1 is modified /* if any address line has been modified*/
   || KA0SM060.XXX-ADDR2 is modified /* |*/
   || KA0SM060.XXX-ADDR3 is modified /* |*/
   || KA0SM060.XXXCITY is modified   /* |*/
   || KA0SM060.XSTCD is modified     /* |*/
   || KA0SM060.XXXZIP is modified    /* |*/
   || KA0SM060.XCTCD is modified)    /* |*/
    /* **********  if no errors found assign address id  ***********/
    if (XA0AW02.XA0AWERR[1] == 0 /* if no errors in address*/
     && XA0AW02.XA0AWERR[2] == 0 /* |*/
     && XA0AW02.XA0AWERR[3] == 0 /* |*/
     && XA0AW02.XA0AWERR[4] == 0 /* |*/
     && XA0AW02.XA0AWERR[5] == 0 /* |*/
     && XA0AW02.XA0AWERR[6] == 0 /* |*/
     && XA0AW02.XA0AWERR[7] == 0 /* |*/
     && XA0AW02.XA0AWERR[8] == 0) /* |*/
      KA0SS68(); /* assign next avail addr id*/
    else /* else(errors in address)*/
      /* next sentence              ;    continue*/
    end /* end of "if" statement*/
  else /* else(address not modified)*/
    KA0SM060.KUMSHAID = KA0SW01.KA0SWAID;
                                 /* ;  move last-addr-id to addr-id*/
  end /* end of "if" statement*/
   /* *************************************************************/





end // end KA0SS64

// get address and format screen
Function KA0SS65()


   /* *************************************************************/
   /* *****  g e t    a d d r e s s    i n    f i e l d      ******/
   /* *************************************************************/


   /* **********  move keys to address table record  **************/
  XA0AW02.KULAAID = KA0SM060.KUMSHAID;
  XA0AW02.KUCCOID = KA0SM060.KUCCOID;

  XA0AW02.XA0AWFNC = "G"; /* "get address" function code*/
  call "XA0A" (XA0AW02) {isNoRefresh = yes};
                                   /* call address application for address*/
  if (XA0AW02.XA0AWERR[1] == 0) /* if return code "ok"*/
    /* ******************* move address to map  ********************/
    KA0SM060.XXX-ADDR1 = XA0AW02.XXX-ADDR1;
    KA0SM060.XXX-ADDR2 = XA0AW02.XXX-ADDR2;
    KA0SM060.XXX-ADDR3 = XA0AW02.XXX-ADDR3;
    KA0SM060.XXXCITY = XA0AW02.XXXCITY;
    KA0SM060.XSTCD = XA0AW02.XSTCD;
    KA0SM060.XXXZIP = XA0AW02.XXXZIP;
    KA0SM060.XCTCD = XA0AW02.XCTCD;
    KA0SW01.KA0SWAID = XA0AW02.KULAAID;

  else /* else(return code not "ok")*/
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
                                 /* ;    move error message number*/
    set KA0SM060.KUMSHAID cursor, bold;
                                 /* ;    highlight adrees id field*/
  end /* end of "if" statement*/





end // end KA0SS65

// set fields modified
Function KA0SS67()
   /* *************************************************************/
   /* *****        r e s e t    a n y    m d t ' s           ******/
   /* *************************************************************/
  if (KA0SM060.XXX-ADDR1 is modified)
    set KA0SM060.XXX-ADDR1 modified;
  end
  if (KA0SM060.XXX-ADDR2 is modified)
    set KA0SM060.XXX-ADDR2 modified;
  end
  if (KA0SM060.XXX-ADDR3 is modified)
    set KA0SM060.XXX-ADDR3 modified;
  end
  if (KA0SM060.XXXCITY is modified)
    set KA0SM060.XXXCITY modified;
  end
  if (KA0SM060.XSTCD is modified)
    set KA0SM060.XSTCD modified;
  end
  if (KA0SM060.XXXZIP is modified)
    set KA0SM060.XXXZIP modified;
  end
  if (KA0SM060.XCTCD is modified)
    set KA0SM060.XCTCD modified;
  end
end // end KA0SS67

// get next avail addr id
Function KA0SS68()


   /* *************************************************************/
   /* *****    d e t e r m i n e    n e x t    a v a i l     ******/
   /* *****              a d d r e s s    i d                ******/
   /* *************************************************************/


  KA0SM060.KA0SMSID = " "; /* re-initialize ass/w store-id*/
  KA0SW01.KA0SWLSI = " "; /* re-initialize last ass/w store-id*/
  if (KA0SW01.KA0SWNXT != 0) /* if next avail-addr-id already known*/
    KA0SM060.KUMSHAID = KA0SW01.KA0SWNXT;
                                 /* ;  move next-avail-addr-id*/
                                 /* ;  to addr-id*/
  else /* else(next-avail-addr-id not known)*/
    SQLCA.VAGen_SQLCODE = 0;
    KA0SM060.KUMSHAID = KUCREC.KUCMADID;
    while (SQLCA.VAGen_SQLCODE == 0)
      KA0SM060.KUMSHAID = KA0SM060.KUMSHAID + 1;
      if (KA0SM060.KUMSHAID > 9998)
        KA0SM060.KUMSHAID = 0;
      else
        KULREC.KUCCOID = KA0SM060.KUCCOID;
        KULREC.KULAAID = KA0SM060.KUMSHAID;
        call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE != 0)
          if (SQLCA.VAGen_SQLCODE == 100)
            /* next sentence*/
          else
                                  /* **********************  call error*/
                                   /* routine  *****************/
            TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
            TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
            TA1REC.TA1PGMNM = "KA0SS1G "; /* move program name to error rec*/
            TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
            TA1REC.TA1MAP = "KA0SM050"; /* move map name to error record*/
            TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
            TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
            set KUWREC empty; /* initialize error work rec*/
                                  /* ************* move keys to error work*/
                                   /* record  ***************/
            KUWREC.KUCCOID = KULREC.KUCCOID;
            KUWREC.KUMSTRID = KULREC.KULAAID;

            /* *************************************************************/
            TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                           /* ;     move table key value*/
            KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* call db backout*/
            SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                           /* ;*/
            call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
            XSPF4();

            /* *************************************************************/
                                  /* ***** the following commented until*/
                                   /* retro-fitting of   ******/
                                  /* ***** the return from the error*/
                                   /* routine                ******/

            /* *************************************************************/
            /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                            /* ;     move appl global data*/
                                  /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;*/
                                   /* cust main menu is dest*/
            /* XSEXIT                          ;     transfer to next appl*/
                                  /* ******************  end of error*/
                                   /* routine  *******************/
          end
        end /* END OF "if" STATEMENT*/
      end /* end of "if" statement*/
    end /* end of "while" loop*/
    KA0SW01.KA0SWNXT = KA0SM060.KUMSHAID;
                                 /* ;  save next-avail-addr-id*/
    KUCREC.KUCMADID = KA0SM060.KUMSHAID;
                                 /* ;  move last-used-addr-id to*/
                                 /* ;  company record*/
    KA0SW01.KA0SWAID = KA0SW01.KA0SWNXT;
                                 /* ;  move next-addr-id to last-id*/
  end /* end of "if" statement*/





end // end KA0SS68

// top justify warehouse lines
Function KA0SS69()


   /* *************************************************************/
   /* *****   t o p    j u s t i f y    w a r e h o u s e    ******/
   /* *****                    l i n e s                     ******/
   /* *************************************************************/


  if (KA0SM060.XWHCD[2] == " " /* if warehouse code blank*/
   && KA0SM060.XGPCD[2] == " ") /* and gpc code blank*/
    KA0SM060.XWHCD[2] = KA0SM060.XWHCD[3]; /* move warehouse 3 to 2*/
    KA0SM060.XGPCD[2] = KA0SM060.XGPCD[3]; /* move gpc 3 to 2*/
    KA0SM060.XWHCD[3] = " "; /* blank out warehouse 3*/
    KA0SM060.XGPCD[3] = " "; /* blank out gpc 3*/
  end /* end of "if" statement*/
  if (KA0SM060.XWHCD[1] == " " /* if warehouse code blank*/
   && KA0SM060.XGPCD[1] == " ") /* and gpc code blank*/
    KA0SM060.XWHCD[1] = KA0SM060.XWHCD[2]; /* move warehouse 2 to 1*/
    KA0SM060.XGPCD[1] = KA0SM060.XGPCD[2]; /* move gpc 2 to 1*/
    KA0SM060.XWHCD[2] = KA0SM060.XWHCD[3]; /* move warehouse 3 to 2*/
    KA0SM060.XGPCD[2] = KA0SM060.XGPCD[3]; /* move gpc 3 to 2*/
    KA0SM060.XWHCD[3] = " "; /* blank out warehouse 3*/
    KA0SM060.XGPCD[3] = " "; /* blank out gpc 3*/
  end /* end of "if" statement*/





end // end KA0SS69

// insure one warehouse entered
Function KA0SS6A()


   /* *************************************************************/
   /* *****       i n s u r e    b o t h    c o d e s        ******/
   /* *****                   e n t e r e d                  ******/
   /* *************************************************************/


  if (KA0SM060.XWHCD[1] == " "
   && KA0SM060.XGPCD[1] == " ")
    converseLib.validationFailed(28);
    set KA0SM060.XGPCD[1] cursor, bold;
    set KA0SM060.XWHCD[1] bold;
  else
    /* next sentence*/
  end





end // end KA0SS6A

// edit for duplicate gpc's
Function KA0SS6B()


   /* *************************************************************/
   /* ****  c h e c k    f o r    d u p l i c a t e    g p c  *****/
   /* ****                     c o d e s                      *****/
   /* *************************************************************/


  if (KA0SW01.KA0SWNDX == 3) /* if editing 3rd line*/
    if (KA0SM060.XGPCD[3] != " ") /* if gpc not blanc*/
      if (KA0SM060.XGPCD[3] == KA0SM060.XGPCD[2] /* if 3rd gpc = 2nd gpc*/
       || KA0SM060.XGPCD[3] == KA0SM060.XGPCD[1]) /* or 3rd gpc eq 1st gpc*/
        converseLib.validationFailed(88); /* error "no duplicates"*/
        set KA0SM060.XGPCD[3] cursor, bold; /* highlight error*/
        set KA0SM060.XGPABRV[3] skip, bold; /* highlight error*/
      end /* end of "if" statement*/
    else /* else(gpc is blank)*/
      /* next sentence              ;             okay*/
    end /* end of "if" statement*/
  else /* else(index not eq 3)*/
    if (KA0SW01.KA0SWNDX == 2) /* if editing 2nd line*/
      if (KA0SM060.XGPCD[2] != " ") /* if gpc not blanc*/
        if (KA0SM060.XGPCD[2] == KA0SM060.XGPCD[1]) /* if 2nd gpc eq 1st gpc*/
          converseLib.validationFailed(88); /* error "noduplicates"*/
          set KA0SM060.XGPCD[2] cursor, bold; /* highlight error*/
          set KA0SM060.XGPABRV[2] skip, bold; /* highlight error*/
        end /* end of "if" statement*/
      else /* else(gpc is blank)*/
        /* next sentence            ;               okay*/
      end /* end of "if" statement*/
    else /* else(editing 1st line)*/
      /* next sentence              ;             no edit*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS6B

// edit fields on ka0sm061
Function KA0SS70()


   /* *************************************************************/
   /* ***** e d i t    f i e l d s    o n    k a 0 s m 0 6 1 ******/
   /* *************************************************************/


  if (KA0SM051.KA0SMSFL == "N") /* if address fields not autoskip*/
    set KA0SM061.KA0SMSID cursor; /* initialize cursor position*/
  else /* else(all address fields autoskip)*/
    set KA0SM061.XGPCD[1] cursor; /* initialize cursor position*/
  end /* end of "if" statement*/
  KA0SS79(); /* top justify all warehouse lines*/
  KA0SW01.KA0SWNDX = 3; /* initialize index to 3*/
  while (KA0SW01.KA0SWNDX >= 1)
                                   /* loop thru warehouse lines on screen*/
    set KA0SM061.XGPCD[KA0SWNDX] initialAttributes; /* set attributes defined*/
    set KA0SM061.XWHCD[KA0SWNDX] initialAttributes; /* set attributes defined*/
    set KA0SM061.XWHNM[KA0SWNDX] initialAttributes; /* set attributes defined*/
    KA0SM061.XWHNM[KA0SWNDX] = " "; /* initialize warehouse name*/
    set KA0SM061.XGPABRV[KA0SWNDX] initialAttributes; /* set attributes defined*/
    KA0SM061.XGPABRV[KA0SWNDX] = " "; /* initialize gpc decode*/
    if (KA0SM061.XGPCD[KA0SWNDX] != " " /* if at least one code entered*/
     || KA0SM061.XWHCD[KA0SWNDX] != " ") /* |*/
      KA0SS71(); /* edit warehouse*/
      KA0SS7B(); /* edit for duplicate gpc's*/
      KA0SS73(); /* edit gpc code*/
    end /* end of "if" statement*/
    KA0SW01.KA0SWNDX = KA0SW01.KA0SWNDX - 1;
                                        /* decriment index*/
  end /* end of while loop*/
  KA0SS7A(); /* insure one warehouse entered*/
  if (KA0SM051.KA0SMSFL == "N")
                                   /* if address different than previous*/
    KA0SS72(); /* edit ship to address fields*/
  end /* end of "if" statement*/





end // end KA0SS70

// edit warehouses
Function KA0SS71()


   /* *************************************************************/
   /* *****      e d i t    w a r e h o u s e   i d ' s      ******/
   /* *************************************************************/


  if (KA0SM061.XWHCD[KA0SWNDX] != " ") /* if warehouse code is not blank*/
    if (KA0SM061.XWHCD[KA0SWNDX] in XWHTBL.XWHCD)
      KA0SM061.XWHNM[KA0SWNDX] = XWHTBL.XWHNM[sysVar.arrayIndex];
    end
                                        /* search table for image*/
    if (sysVar.arrayIndex == 0) /* if warehouse code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM061.XWHCD[KA0SWNDX] cursor, bold;
                                 /* ;          highlight field in err*/
    else /* else(warehouse cd found)*/
      /* ***************  check status code of entry  ****************/
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM061.XWHCD[KA0SWNDX] cursor, bold;
                                     /* ;        highlight field in err*/
        KA0SM061.XWHNM[KA0SWNDX] = " ";
                                 /* ;        blank out decode*/
      else /* else(status is active)*/
        if (KA0SM061.XGPCD[KA0SWNDX] != " ") /* if gpc code is not blank*/
          /* ***** test that warehouse supplies customers gpc ******/
          if (XWHTBL.XGPCD1[sysVar.arrayIndex] != KA0SM061.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD2[sysVar.arrayIndex] != KA0SM061.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD3[sysVar.arrayIndex] != KA0SM061.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD4[sysVar.arrayIndex] != KA0SM061.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD5[sysVar.arrayIndex] != KA0SM061.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD6[sysVar.arrayIndex] != KA0SM061.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD7[sysVar.arrayIndex] != KA0SM061.XGPCD[KA0SWNDX]
           && XWHTBL.XGPCD8[sysVar.arrayIndex] != KA0SM061.XGPCD[KA0SWNDX])
            converseLib.validationFailed(87);
                                   /* error "invalid warehouse, gpc"*/
            set KA0SM061.XWHCD[KA0SWNDX] cursor, bold;
            set KA0SM061.XWHNM[KA0SWNDX] skip, bold;
                                 /* ;        highlight error*/
          else /* else(valid warehouse for gpc)*/
            /* next sentence        ;        okay*/
          end /* end of "if" statement*/
        else /* else(gpc code not entered)*/
          /* next sentence          ;      don't bother*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
    /* IF KA0Sm061.XGPCD(KA0SWNDX) EQ ' ';if gpc code is blank*/
      /* MOVE 5 TO EZEMNO            ;      error "required"*/
      /* SET KA0Sm061.XGPCD(KA0SWNDX) CURSOR,BRIGHT;highlight field*/
    /* ELSE                          ;    else(gpc code not blank)*/
      /* ;next sentence              ;      okay(checked later)*/
    /* END                           ;    end of "if" statement*/
  else /* else(warehouse code not blank)*/
    if (KA0SM061.XGPCD[KA0SWNDX] != " ") /* if gpc code not blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
      set KA0SM061.XWHCD[KA0SWNDX] cursor, bold;
    else /* else(gpc code entered)*/
      /* next sentence              ;      okay(checked later)*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS71

// edit ship-group address
Function KA0SS72()


   /* *************************************************************/
   /* *****  e d i t    s h i p - g r o u p    a d d r e s s ******/
   /* *************************************************************/


  set KA0SM061.KA0SMSID initialAttributes;
  set KA0SM061.KUMSHAID initialAttributes;
  set KA0SM061.XXX-ADDR1 initialAttributes;
  set KA0SM061.XXX-ADDR2 initialAttributes;
  set KA0SM061.XXX-ADDR3 initialAttributes;
  set KA0SM061.XXX-ADDR4 initialAttributes;
  set KA0SM061.XXX-ADDR5 initialAttributes;
  set KA0SM061.XXX-ADDR6 initialAttributes;
  set KA0SM061.XSTCD initialAttributes;
  set KA0SM061.XXXZIP initialAttributes;
  set KA0SM061.XCTCD initialAttributes;
  if (KA0SM061.KA0SMSID == " " /* if associate with field is blank*/
   || KA0SM061.KA0SMSID == KA0SW01.KA0SWLSI)
                                 /* ;  or associate-with = last*/
    if (KA0SM061.KUMSHAID == 0) /* if store address id equal zero*/
      KA0SS74(); /* edit address fields*/
    else
                                   /* else(store address id not equal zero*/
      if (KA0SM061.KUMSHAID == KA0SW01.KA0SWAID)
                                 /* ;    if addr-id = last-addr-id*/
        KA0SS74(); /* edit address fields*/
      else /* else(new addr-id entered)*/
        KA0SW01.KA0SWLSI = " "; /* re-initialize last-store-id*/
        KA0SM061.KA0SMSID = " ";
                                   /* re-initialize ass/w store-id*/
        KA0SS75(); /* get address and format screen*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
                                 /* ;*/
  else /* else(ass/w field is not blank)*/
    KA0SW01.KA0SWGST = KA0SM061.KA0SMSID;
                                 /* ;  move ass/with for num check*/
    /* ***** right justify and zero fill ******/
    KA0SW01.KA0SWNDX = 1; /* initialize index to 1*/
    while (KA0SW01.KA0SWNDX <= 4 /* loop thru digits up to 4 times*/
     && KA0SW01.KA0SWD4 == " ") /* or until right justified*/
      KA0SW01.KA0SWD4 = KA0SW01.KA0SWD3;
      KA0SW01.KA0SWD3 = KA0SW01.KA0SWD2;
      KA0SW01.KA0SWD2 = KA0SW01.KA0SWD1;
      KA0SW01.KA0SWD1 = "0";
      KA0SW01.KA0SWNDX = KA0SW01.KA0SWNDX + 1;
                                 /* ;  increment index by 1*/
    end /* end of "while" loop*/

    /* ***** the following will check for numeric data ******/
    if (KA0SW01.KA0SWD1 >= "0" /* if digit greater than, or equal 0*/
     && KA0SW01.KA0SWD1 <= "9" /* and digit less than, or equal 9*/
     && KA0SW01.KA0SWD2 >= "0" 
     /* and digit greater than, or equal 0*/
     && KA0SW01.KA0SWD2 <= "9" /* and digit less than, or equal 9*/
     && KA0SW01.KA0SWD3 >= "0" 
     /* and digit greater than, or equal 0*/
     && KA0SW01.KA0SWD3 <= "9" /* and digit less than, or equal 9*/
     && KA0SW01.KA0SWD4 >= "0" 
     /* and digit greater than, or equal 0*/
     && KA0SW01.KA0SWD4 <= "9") /* and digit less than, or equal 9*/
      /* *************************************************************/
      /* *****  if field contains numeric data, move to         ******/
      /* *****  a numeric field                                 ******/
      /* *************************************************************/
      KA0SWD21 = KA0SW01.KA0SWD1;
      KA0SWD22 = KA0SW01.KA0SWD2;
      KA0SWD23 = KA0SW01.KA0SWD3;
      KA0SWD24 = KA0SW01.KA0SWD4;
      KUMREC.KUCCOID = KA0SM061.KUCCOID;
                                 /* ;    move company id to store id*/
                                 /* ;*/
      /* ***** move numeric field with store id to store rec ******/
      KUMREC.KUMSTRID = KA0SW01.KA0SW2ST;
                                 /* ;    move store id to store rec*/
      KA0SM061.KA0SMSID = KA0SW01.KA0SW2ST;
                                 /* ;    move 0-fill store id to map*/
                                 /* ;*/
      call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;    call i/o mod to get ass stor*/
      if (SQLCA.VAGen_SQLCODE != 0) /* IF RETURN CODE NOT OKAY*/
        if (SQLCA.VAGen_SQLCODE == 100) /* IF RETUEN CODE = "not found""*/
          converseLib.validationFailed(26); /* error "store not found"*/
          set KA0SM061.KA0SMSID cursor, bold;
                                 /* ;        highlight error*/
        else /* else(rc other than "not found)*/
          /* **********************  call error routine  *****************/
          TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
          TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
          TA1REC.TA1PGMNM = "KA0SS72 "; /* move program name to error rec*/
          TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1MAP = "KA0SM061"; /* move map name to error record*/
          TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
          TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
          set KUWREC empty; /* initialize error work rec*/
          /* ************* move keys to error work record  ***************/
          KUWREC.KUCCOID = KUMREC.KUCCOID;
          KUWREC.KUMSTRID = KUMREC.KUMSTRID;
          /* *************************************************************/
          TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                         /* ;     move table key value*/
          KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* call db backout*/
          SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                         /* ;*/
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
          XSPF4();
          /* *************************************************************/
          /* ***** the following commented until retro-fitting of   ******/
          /* ***** the return from the error routine                ******/
          /* *************************************************************/
          /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                          /* ;     move appl global data*/
          /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
          /* XSEXIT                     ;     transfer to next appl*/
          /* ******************  end of error routine  *******************/
        end /* end of "if" statement"*/
      else /* else(return code okay)*/
        if (KA0SM061.KUMSHAID == 0) /* if addr id blank*/
          KA0SM061.KUMSHAID = KUMREC.KUMSHAID;
                                 /* ;        move ass/w ship-to*/
                                 /* ;        addr-id to addr-id*/
          KA0SS75(); /* get addr and format screen*/
          KA0SW01.KA0SWLSI = KA0SM061.KA0SMSID;
                                 /* ;        move ass/w to last-ass/w*/
        else /* else(addr-id not blank)*/
          if (KUMREC.KUMSHAID != KA0SM061.KUMSHAID)
                                 /* ;        if addr-id's are not same*/
            if (KA0SM061.KUMSHAID != KA0SW01.KA0SWAID)
                                 /* ;          if addr-id not eq last-*/
                                 /* ;            addr-id*/
              set KA0SM061.KA0SMSID cursor, bold;
              set KA0SM061.KUMSHAID bold; /* highlight error fields*/
              converseLib.validationFailed(93);
                                   /* error "fields don't match"*/
            else
                                   /* else(addr-id = last-addr-id)*/
              KA0SW01.KA0SWLSI = KA0SM061.KA0SMSID;
                                 /* ;            move ass/w to last-ass/w*/
              KA0SM061.KUMSHAID = KUMREC.KUMSHAID;
                                 /* ;            move addr-id to screen*/
              KA0SS75(); /* get addr & format screen*/
            end /* end of "if" statement*/
          else /* else(addr-id's are the same)*/
            KA0SW01.KA0SWLSI = KA0SM061.KA0SMSID;
                                 /* ;          move ass/w to last-ass/w*/
            KA0SS75(); /* get addr and format screen*/
          end /* end of "if" statement*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    else /* else(ass/w store id not numeric)*/
      converseLib.validationFailed(83); /* error "invalid store number"*/
      set KA0SM061.KA0SMSID cursor, bold;
                                 /* ;    highlight error*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS72

// edit gpc codes
Function KA0SS73()


   /* *************************************************************/
   /* *****          e d i t    g p c    c o d e s           ******/
   /* *************************************************************/


  if (KA0SM061.XGPCD[KA0SWNDX] != " ") /* if gpc code is not blank*/
    if (KA0SM061.XGPCD[KA0SWNDX] in XGPTBL.XGPCD)
      KA0SM061.XGPABRV[KA0SWNDX] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
                                 /* ;        search table for gpc*/
    if (sysVar.arrayIndex == 0) /* if gpc code not found*/
      if (converseVar.validationMsgNum == 87) /* if last error was*/
                                 /* ;            "warehouse invalid*/
                                 /* ;            for gpc specified"*/
        set KA0SM061.XWHCD[KA0SWNDX] initialAttributes; /* reset attribute*/
        set KA0SM061.XWHNM[KA0SWNDX] initialAttributes; /* reset attribute*/
      else /* else(other error)*/
        /* next sentence            ;            continue*/
      end /* end of "if" statement*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0SM061.XGPCD[KA0SWNDX] cursor, bold;
                                 /* ;          highlight field in err*/
    else /* else(if gpc code found)*/
      /* ***************  check status code of entry  ****************/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        if (converseVar.validationMsgNum == 87) /* if last error was*/
                                 /* ;              "warehouse invalid*/
                                 /* ;              for gpc specified"*/
          set KA0SM061.XWHCD[KA0SWNDX] initialAttributes; /* reset attribute*/
          set KA0SM061.XWHNM[KA0SWNDX] initialAttributes; /* reset attribute*/
        else /* else(other error)*/
          /* next sentence          ;              continue*/
        end /* end of "if" statement*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0SM061.XGPCD[KA0SWNDX] cursor, bold;
                                 /* ;            highlight field in err*/
      else /* else(status is active)*/
        /* next sentence            ;            okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
    /* IF KA0Sm061.XWHCD(KA0SWNDX) EQ ' ';    if warehouse blank*/
      /* IF EZETST NE 0              ;          if no previous err*/
        /* MOVE 5 TO EZEMNO          ;            error "required"*/
        /* SET KA0Sm061.XWHCD(KA0SWNDX) CURSOR,BRIGHT;*/
        /* ;                         ;            highlight error*/
      /* ELSE                        ;          else(prev error)*/
        /* SET KA0Sm061.XWHCD(KA0SWNDX) BRIGHT;   highlight error*/
      /* END                         ;          end of "if" stmt*/
    /* END                           ;        end of "if" statement*/
  else /* else(gpc code is blank)*/
    if (KA0SM061.XWHCD[KA0SWNDX] != " ") /* if warehouse not blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
      set KA0SM061.XGPCD[KA0SWNDX] cursor, bold;
                                 /* ;          highlight error*/
    else /* else*/
      /* next sentence              ;          okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS73

// edit address on screen
Function KA0SS74()


   /* *************************************************************/
   /* *****  e d i t    a d d r e s s    o n    s c r e e n  ******/
   /* *************************************************************/


   /* ****** move address fields to address application rec *******/
  XA1REC.XXX-ADDR1 = KA0SM061.XXX-ADDR1;
  XA1REC.XXX-ADDR2 = KA0SM061.XXX-ADDR2;
  XA1REC.XXX-ADDR3 = KA0SM061.XXX-ADDR3;
  XA1REC.XXX-ADDR4 = KA0SM061.XXX-ADDR4;
  XA1REC.XXX-ADDR5 = KA0SM061.XXX-ADDR5;
  XA1REC.XXX-ADDR6 = KA0SM061.XXX-ADDR6;
  XA1REC.XSTCD = KA0SM061.XSTCD;
  XA1REC.XXXZIP = KA0SM061.XXXZIP;
  XA1REC.XCTCD = KA0SM061.XCTCD;
   /* *************************************************************/

  XA1REC.XA1FUNCT = "E"; /* "edit only" function code*/
  call "XA0C" (XA1REC) {isNoRefresh = yes}; /* call address application*/

   /* ********** move address fields back to map ******************/
  KA0SM061.XXX-ADDR1 = XA1REC.XXX-ADDR1;
  KA0SM061.XXX-ADDR2 = XA1REC.XXX-ADDR2;
  KA0SM061.XXX-ADDR3 = XA1REC.XXX-ADDR3;
  KA0SM061.XXX-ADDR4 = XA1REC.XXX-ADDR4;
  KA0SM061.XXX-ADDR5 = XA1REC.XXX-ADDR5;
  KA0SM061.XXX-ADDR6 = XA1REC.XXX-ADDR6;
  KA0SM061.XSTCD = XA1REC.XSTCD;
  KA0SM061.XXXZIP = XA1REC.XXXZIP;
  KA0SM061.XCTCD = XA1REC.XCTCD;
   /* *************************************************************/

   /* **********  determine if any address fields in error  *******/
  if (XA1REC.XA1ERIND[10] != 0) /* if error in country field*/
    set KA0SM061.XCTCD cursor, bold; /* highlight country field*/
    if (XA1REC.XA1ERIND[10] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[10]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[9] != 0) /* if error in zip code field*/
    set KA0SM061.XXXZIP cursor, bold; /* highlight zip code field*/
    if (XA1REC.XA1ERIND[9] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[9]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[8] != 0) /* if error in state code field*/
    set KA0SM061.XSTCD cursor, bold;
                                   /* highlight state code field*/
    if (XA1REC.XA1ERIND[8] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[8]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[7] != 0) /* if error in country field*/
    set KA0SM061.XXX-ADDR6 cursor, bold; /* highlight country field*/
    if (XA1REC.XA1ERIND[7] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[7]);
    end /* move error message number*/
  end /* end of "if"statement*/
  if (XA1REC.XA1ERIND[6] != 0) /* if error in city field*/
    set KA0SM061.XXX-ADDR5 cursor, bold; /* highlight city field*/
    if (XA1REC.XA1ERIND[6] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[6]);
    end /* move error message number*/
  end /* end of "if"statement*/
  if (XA1REC.XA1ERIND[5] != 0) /* if error in address line 4*/
    set KA0SM061.XXX-ADDR4 cursor, bold;
                                   /* highlight address line 4 field*/
    if (XA1REC.XA1ERIND[5] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[5]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[4] != 0) /* if error in address line 3*/
    set KA0SM061.XXX-ADDR3 cursor, bold;
                                   /* highlight address line 3 field*/
    if (XA1REC.XA1ERIND[4] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[4]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[3] != 0) /* if error in address line 2*/
    set KA0SM061.XXX-ADDR2 cursor, bold;
                                   /* highlight address line 2 field*/
    if (XA1REC.XA1ERIND[3] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[3]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[2] != 0) /* if error in address line 1*/
    set KA0SM061.XXX-ADDR1 cursor, bold; /* highlight address line 1*/
    if (XA1REC.XA1ERIND[2] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[2]);
    end /* move error message number*/
  end /* end of "if" statement*/
  if (XA1REC.XA1ERIND[1] != 0) /* if any general error sr*/
    if (XA1REC.XA1ERIND[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[1]);
    end /* move error meaage number*/
  end /* end of "if" statement*/
   /* *************************************************************/

  if (KA0SM061.XXX-ADDR1 is modified /* if any address line has been modified*/
   || KA0SM061.XXX-ADDR2 is modified /* |*/
   || KA0SM061.XXX-ADDR3 is modified /* |*/
   || KA0SM061.XXX-ADDR4 is modified /* |*/
   || KA0SM061.XXX-ADDR5 is modified /* |*/
   || KA0SM061.XXX-ADDR6 is modified /* |*/
   || KA0SM061.XSTCD is modified     /* |*/
   || KA0SM061.XXXZIP is modified    /* |*/
   || KA0SM061.XCTCD is modified)    /* |*/
    /* **********  if no errors found assign address id  ***********/
    if (XA1REC.XA1ERIND[1] == 0 /* if no errors in address*/
     && XA1REC.XA1ERIND[2] == 0 /* |*/
     && XA1REC.XA1ERIND[3] == 0 /* |*/
     && XA1REC.XA1ERIND[4] == 0 /* |*/
     && XA1REC.XA1ERIND[5] == 0 /* |*/
     && XA1REC.XA1ERIND[6] == 0 /* |*/
     && XA1REC.XA1ERIND[7] == 0 /* |*/
     && XA1REC.XA1ERIND[8] == 0 /* |*/
     && XA1REC.XA1ERIND[9] == 0 /* |*/
     && XA1REC.XA1ERIND[10] == 0) /* |*/
      KA0SS68(); /* assign next avail addr id*/
    else /* else(errors in address)*/
      /* next sentence              ;    continue*/
    end /* end of "if" statement*/
  else /* else(address not modified)*/
    KA0SM061.KUMSHAID = KA0SW01.KA0SWAID;
                                 /* ;  move last-addr-id to addr-id*/
  end /* end of "if" statement*/
   /* *************************************************************/





end // end KA0SS74

// get address and format screen
Function KA0SS75()


   /* *************************************************************/
   /* *****  g e t    a d d r e s s    i n    f i e l d      ******/
   /* *************************************************************/

   /* **********  move keys to address table record  **************/

  XA1REC.NLATYPIN = "C";
  XA1REC.NLABSIND = " ";
  XA1REC.NLAONECH = " ";
  XA1REC.NLASINT1 = 0;
  XA1REC.NLASINT2 = 0;

  XA1REC.NLAADRID = KA0SM061.KUMSHAID;
  XA1REC.NLAINTGR = KA0SM061.KUCCOID;

  XA1REC.XA1FUNCT = "G"; /* "get address" function code*/
  call "XA0C" (XA1REC) {isNoRefresh = yes};
                                   /* call address application for address*/
  if (XA1REC.XA1ERIND[1] == 0) /* if return code "ok"*/
    /* ******************* move address to map  ********************/
    KA0SM061.XXX-ADDR1 = XA1REC.XXX-ADDR1;
    KA0SM061.XXX-ADDR2 = XA1REC.XXX-ADDR2;
    KA0SM061.XXX-ADDR3 = XA1REC.XXX-ADDR3;
    KA0SM061.XXX-ADDR4 = XA1REC.XXX-ADDR4;
    KA0SM061.XXX-ADDR5 = XA1REC.XXX-ADDR5;
    KA0SM061.XXX-ADDR6 = XA1REC.XXX-ADDR6;
    KA0SM061.XSTCD = XA1REC.XSTCD;
    KA0SM061.XXXZIP = XA1REC.XXXZIP;
    KA0SM061.XCTCD = XA1REC.XCTCD;
    KA0SW01.KA0SWAID = XA1REC.NLAADRID;

  else /* else(return code not "ok")*/
    if (XA1REC.XA1ERIND[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[1]);
    end
                                 /* ;    move error message number*/
    set KA0SM061.KUMSHAID cursor, bold;
                                 /* ;    highlight adrees id field*/
  end /* end of "if" statement*/





end // end KA0SS75

// set fields modified
Function KA0SS77()
   /* *************************************************************/
   /* *****        r e s e t    a n y    m d t ' s           ******/
   /* *************************************************************/
  if (KA0SM061.XXX-ADDR1 is modified)
    set KA0SM061.XXX-ADDR1 modified;
  end
  if (KA0SM061.XXX-ADDR2 is modified)
    set KA0SM061.XXX-ADDR2 modified;
  end
  if (KA0SM061.XXX-ADDR3 is modified)
    set KA0SM061.XXX-ADDR3 modified;
  end
  if (KA0SM061.XXX-ADDR4 is modified)
    set KA0SM061.XXX-ADDR4 modified;
  end
  if (KA0SM061.XXX-ADDR5 is modified)
    set KA0SM061.XXX-ADDR5 modified;
  end
  if (KA0SM061.XXX-ADDR6 is modified)
    set KA0SM061.XXX-ADDR6 modified;
  end
  if (KA0SM061.XSTCD is modified)
    set KA0SM061.XSTCD modified;
  end
  if (KA0SM061.XXXZIP is modified)
    set KA0SM061.XXXZIP modified;
  end
  if (KA0SM061.XCTCD is modified)
    set KA0SM061.XCTCD modified;
  end
end // end KA0SS77

// top justify warehouse lines
Function KA0SS79()


   /* *************************************************************/
   /* *****   t o p    j u s t i f y    w a r e h o u s e    ******/
   /* *****                    l i n e s                     ******/
   /* *************************************************************/


  if (KA0SM061.XWHCD[2] == " " /* if warehouse code blank*/
   && KA0SM061.XGPCD[2] == " ") /* and gpc code blank*/
    KA0SM061.XWHCD[2] = KA0SM061.XWHCD[3]; /* move warehouse 3 to 2*/
    KA0SM061.XGPCD[2] = KA0SM061.XGPCD[3]; /* move gpc 3 to 2*/
    KA0SM061.XWHCD[3] = " "; /* blank out warehouse 3*/
    KA0SM061.XGPCD[3] = " "; /* blank out gpc 3*/
  end /* end of "if" statement*/
  if (KA0SM061.XWHCD[1] == " " /* if warehouse code blank*/
   && KA0SM061.XGPCD[1] == " ") /* and gpc code blank*/
    KA0SM061.XWHCD[1] = KA0SM061.XWHCD[2]; /* move warehouse 2 to 1*/
    KA0SM061.XGPCD[1] = KA0SM061.XGPCD[2]; /* move gpc 2 to 1*/
    KA0SM061.XWHCD[2] = KA0SM061.XWHCD[3]; /* move warehouse 3 to 2*/
    KA0SM061.XGPCD[2] = KA0SM061.XGPCD[3]; /* move gpc 3 to 2*/
    KA0SM061.XWHCD[3] = " "; /* blank out warehouse 3*/
    KA0SM061.XGPCD[3] = " "; /* blank out gpc 3*/
  end /* end of "if" statement*/





end // end KA0SS79

// insure one warehouse entered
Function KA0SS7A()


   /* *************************************************************/
   /* *****       i n s u r e    b o t h    c o d e s        ******/
   /* *****                   e n t e r e d                  ******/
   /* *************************************************************/


  if (KA0SM061.XWHCD[1] == " "
   && KA0SM061.XGPCD[1] == " ")
    converseLib.validationFailed(28);
    set KA0SM061.XGPCD[1] cursor, bold;
    set KA0SM061.XWHCD[1] bold;
  else
    /* next sentence*/
  end





end // end KA0SS7A

// edit for duplicate gpc's
Function KA0SS7B()


   /* *************************************************************/
   /* ****  c h e c k    f o r    d u p l i c a t e    g p c  *****/
   /* ****                     c o d e s                      *****/
   /* *************************************************************/


  if (KA0SW01.KA0SWNDX == 3) /* if editing 3rd line*/
    if (KA0SM061.XGPCD[3] != " ") /* if gpc not blanc*/
      if (KA0SM061.XGPCD[3] == KA0SM061.XGPCD[2] /* if 3rd gpc = 2nd gpc*/
       || KA0SM061.XGPCD[3] == KA0SM061.XGPCD[1]) /* or 3rd gpc eq 1st gpc*/
        converseLib.validationFailed(88); /* error "no duplicates"*/
        set KA0SM061.XGPCD[3] cursor, bold; /* highlight error*/
        set KA0SM061.XGPABRV[3] skip, bold; /* highlight error*/
      end /* end of "if" statement*/
    else /* else(gpc is blank)*/
      /* next sentence              ;             okay*/
    end /* end of "if" statement*/
  else /* else(index not eq 3)*/
    if (KA0SW01.KA0SWNDX == 2) /* if editing 2nd line*/
      if (KA0SM061.XGPCD[2] != " ") /* if gpc not blanc*/
        if (KA0SM061.XGPCD[2] == KA0SM061.XGPCD[1]) /* if 2nd gpc eq 1st gpc*/
          converseLib.validationFailed(88); /* error "noduplicates"*/
          set KA0SM061.XGPCD[2] cursor, bold; /* highlight error*/
          set KA0SM061.XGPABRV[2] skip, bold; /* highlight error*/
        end /* end of "if" statement*/
      else /* else(gpc is blank)*/
        /* next sentence            ;               okay*/
      end /* end of "if" statement*/
    else /* else(editing 1st line)*/
      /* next sentence              ;             no edit*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0SS7B

// pfkey checking statement group
Function KA0SSPF()


   /* *************************************************************/
   /* *****            c h e c k    p f - k e y s            ******/
   /* *************************************************************/


  if (converseVar.eventKey is enter)
    return;
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
    converseLib.validationFailed(41);
    exit stack;
  end
  if (converseVar.eventKey is pf3)
    if (KA0SW01.KA0SWCFL == "Y")
      COMMAREA.CAUSERA = KA0SW01.KA0SWGRP;
      COMMAREA.CATOAP = "KA0M";
      XSEXIT();
      converseLib.validationFailed(41);
      exit stack;
    else
      converseLib.validationFailed(4);
      KA0SW01.KA0SWCFL = "Y";
      exit stack;
    end
  else
    KA0SW01.KA0SWCFL = "N";
  end
  if (converseVar.eventKey is pf4)
    if (KA0SW01.KA0SW4FL == "Y")
      COMMAREA.CAUSERA = KA0SW01.KA0SWGRP;
      XSPF4();
      converseLib.validationFailed(41);
      exit stack;
    else
      converseLib.validationFailed(4);
      KA0SW01.KA0SW4FL = "Y";
      exit stack;
    end
  else
    KA0SW01.KA0SW4FL = "N";
  end
  if (converseVar.eventKey is pf5)
    if (KA0SW01.KA0SW5FL == "Y")
      COMMAREA.CAUSERA = KA0SW01.KA0SWGRP;
      COMMAREA.CATOAP = "KU0M";
      XSEXIT();
      converseLib.validationFailed(41);
      exit stack;
    else
      converseLib.validationFailed(4);
      KA0SW01.KA0SW5FL = "Y";
      exit stack;
    end
  else
    KA0SW01.KA0SW5FL = "N";
  end
  if (converseVar.eventKey is pf12)
    return;
  end
  if (converseVar.eventKey is pa2)
    exit stack;
  end
  converseLib.validationFailed(3);
  exit stack;





end // end KA0SSPF

//*** RECORD=KA0SW01 ****
// this is the working storage record for the ka0s application
// "add store"
// ***********************
Record KA0SW01 type basicRecord
  5 KA0SWNDX KA0SWNDX ; 
  5 KA0SWGRP KA0SWGRP ; 
    7 KA0SWKEY KA0SWKEY ; 
      10 KA0SWCID KA0SWCID ; 
      10 KA0SWSID KA0SWSID ; 
      10 KA0SWDID KA0SWDID ; 
      10 KA0SWGID KA0SWGID ; 
    7 KA0SWERR KA0SWERR ; 
  5 KA0SWCOV KA0SWCOV ; 
  5 XNIABRV XNIABRV ; 
  5 XCFABRV XCFABRV ; 
  5 YSVABRV YSVABRV ; 
  5 KULAAID KULAAID ; 
  5 XXX-ADDR1 XXX-ADDR1 ; 
  5 XXX-ADDR2 XXX-ADDR2 ; 
  5 XXX-ADDR3 XXX-ADDR3 ; 
  5 XXXCITY XXXCITY ; 
  5 XSTCD XSTCD ; 
  5 XXXZIP XXXZIP ; 
  5 XCTCD XCTCD ; 
  5 KA0SWDT KA0SWDT ; 
    10 KA0SWCCD KA0SWCCD ; 
    10 KA0SWYDT KA0SWYDT ; 
    10 KA0SWMDT KA0SWMDT ; 
    10 KA0SWDDT KA0SWDDT ; 
  5 KA0SWCDT KA0SWCDT ; 
    10 KA0SWMM KA0SWMM ; 
    10 KA0SWDD KA0SWDD ; 
    10 KA0SWYY KA0SWYY ; 
  5 KA0SWFST KA0SWFST ; 
  5 KA0SWCFL KA0SWCFL ; 
  5 KA0SW4FL KA0SW4FL ; 
  5 KA0SW5FL KA0SW5FL ; 
  5 KA0SWISH KA0SWISH ; 
  5 KA0SWAID KA0SWAID ; 
  5 KA0SWLSI KA0SWLSI ; 
  5 KA0SWNXT KA0SWNXT ; 
  5 KA0SWRST KA0SWRST ; 
  5 KA0SWNXS KA0SWNXS ; 
  5 KA0SWNML KA0SWNML ; 
  5 KA0SWNMS KA0SWNMS ; 
  5 KA0SWLOP KA0SWLOP ; 
  5 KA0SWFSR KA0SWFSR ; 
  5 KA0SWGST KA0SWGST ; 
    10 KA0SWD1 KA0SWD1 ; 
    10 KA0SWD2 KA0SWD2 ; 
    10 KA0SWD3 KA0SWD3 ; 
    10 KA0SWD4 KA0SWD4 ; 
  5 KA0SW2ST KA0SW2ST ; 
    10 KA0SWD21 KA0SWD21 ; 
    10 KA0SWD22 KA0SWD22 ; 
    10 KA0SWD23 KA0SWD23 ; 
    10 KA0SWD24 KA0SWD24 ; 
  5 KA0SWXSR KA0SWXSR ; 
    10 KA0SW1SR KA0SW1SR ; 
    10 KA0SW2SR KA0SW2SR ; 
  5 KA0SWBRC KA0SWBRC ; 
    10 KA0SWBR1 KA0SWBR1 ; 
    10 KA0SWBR2 KA0SWBR2 ; 
    10 KA0SWBR3 KA0SWBR3 ; 
    10 KA0SWBR4 KA0SWBR4 ; 
    10 KA0SWBR5 KA0SWBR5 ; 
  5 CU-SAP-ACCT-ID CU-SAP-ACCT-ID ; 
  5 KA0SW-ENTERED-SAP-ACCT KA0SW-ENTERED-SAP-ACCT ; 
  5 KA0SW-NIL-CUST-IND KA0SW-NIL-CUST-IND ; 
  5 KA0SW-NUM-CU-CO-ID KA0SW-NUM-CU-CO-ID ; 
    10 KA0SW-CHAR-CU-CO-ID KA0SW-CHAR-CU-CO-ID ; 
  5 KA0SW-PREV-SAP-ACCT KA0SW-PREV-SAP-ACCT ; 
  5 KA0SW-PREV-CO-ID KA0SW-PREV-CO-ID ; 
  5 KA0SW-PREV-STOR-ID KA0SW-PREV-STOR-ID ; 
  5 KA0SW-VCUSAP01-COPY KA0SW-VCUSAP01-COPY ; 
  5 KA0SW-DUP-SAP-OVRD-FL KA0SW-DUP-SAP-OVRD-FL ; 
  5 KA0SW-REPLACE-SAP-MSG KA0SW-REPLACE-SAP-MSG ; 
    10 KA0SW-REPLACE-SAP-LIT KA0SW-REPLACE-SAP-LIT ; 
    10 KA0SW-REPLACE-SAP-ACCT-ID KA0SW-REPLACE-SAP-ACCT-ID ; 
  5 KA0SW-SAP-TEN-CHAR KA0SW-SAP-TEN-CHAR ; 
    10 KA0SW-SAP-FOUR-CHAR KA0SW-SAP-FOUR-CHAR ; 
    10 KA0SW-SAP-SIX-CHAR KA0SW-SAP-SIX-CHAR ; 
  5 KA0SW-FROM-CUST-IS-NIL KA0SW-FROM-CUST-IS-NIL ; 
  5 KA0SW-SAVE-VCMPNY01-RECORD KA0SW-SAVE-VCMPNY01-RECORD ; 
end // end KA0SW01

// company - display character
DataItem KA0SW-CHAR-CU-CO-ID char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ALLOW REPLACING DUP CUSAP LINE
DataItem KA0SW-DUP-SAP-OVRD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ENTERED='Y', NOT ENTERED='N'
DataItem KA0SW-ENTERED-SAP-ACCT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCUSAP01 FROM CUST IS NIL
DataItem KA0SW-FROM-CUST-IS-NIL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIL CUSTOMER='Y', NOT NIL='N'
DataItem KA0SW-NIL-CUST-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company - display numeric
DataItem KA0SW-NUM-CU-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PREVIOUS COMPANY ID
DataItem KA0SW-PREV-CO-ID char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PREVIOUS SAP ACCOUNT ID
DataItem KA0SW-PREV-SAP-ACCT char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PREVIOUS STORE ID
DataItem KA0SW-PREV-STOR-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DUP SAP NUMBER ERR MSG ACCT ID
DataItem KA0SW-REPLACE-SAP-ACCT-ID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DUP SAP NUMBER ERR MSG LITERAL
DataItem KA0SW-REPLACE-SAP-LIT char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DUPLICATE SAP NUMBER ERR MSG
DataItem KA0SW-REPLACE-SAP-MSG char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST 4 CHARS - SAP ACCT ID
DataItem KA0SW-SAP-FOUR-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LAST 6 CHARS - SAP ACCT ID
DataItem KA0SW-SAP-SIX-CHAR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GRP ITEM FOR SAP ACCT ID SPLIT
DataItem KA0SW-SAP-TEN-CHAR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AREA FOR SAVING VCMPNY01 COPY
DataItem KA0SW-SAVE-VCMPNY01-RECORD char(400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SAVE A COPY OF VCUSAP01 RECORD
DataItem KA0SW-VCUSAP01-COPY char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st digit
DataItem KA0SW1SR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd digit
DataItem KA0SW2SR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num group store id
DataItem KA0SW2ST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// confirmation for pf3 flag
DataItem KA0SW4FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confirmation for pf3 flag
DataItem KA0SW5FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last address id
DataItem KA0SWAID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store updated msg
DataItem KA0SWBR1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// casecrc code
DataItem KA0SWBR2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dash
DataItem KA0SWBR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ezert8 code
DataItem KA0SWBR4 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// right peren
DataItem KA0SWBR5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bad return code msg
DataItem KA0SWBRC char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century date for database
DataItem KA0SWCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convert date field
DataItem KA0SWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// confirmation for pf3 flag
DataItem KA0SWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem KA0SWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// convertion field
DataItem KA0SWCOV num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// digit 1
DataItem KA0SWD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 2
DataItem KA0SWD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 1
DataItem KA0SWD21 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 2
DataItem KA0SWD22 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 3
DataItem KA0SWD23 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 4
DataItem KA0SWD24 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 3
DataItem KA0SWD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 4
DataItem KA0SWD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date convert dayes
DataItem KA0SWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day date for database
DataItem KA0SWDDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept id
DataItem KA0SWDID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date for database format
DataItem KA0SWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ezemno error number
DataItem KA0SWERR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first store flag
DataItem KA0SWFSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem KA0SWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem KA0SWGID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group name
DataItem KA0SWGRP char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group store id
DataItem KA0SWGST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// insert ship-group addr flag
DataItem KA0SWISH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer key
DataItem KA0SWKEY char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// loop counter
DataItem KA0SWLOP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last associate with id
DataItem KA0SWLSI char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month date for database
DataItem KA0SWMDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date convert monthes
DataItem KA0SWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem KA0SWNDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// long name
DataItem KA0SWNML char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short name(compressed)
DataItem KA0SWNMS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next available store id
DataItem KA0SWNXS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next available address id
DataItem KA0SWNXT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reset application
DataItem KA0SWRST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KA0SWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xsr code for lookup
DataItem KA0SWXSR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year date for database
DataItem KA0SWYDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date convert years
DataItem KA0SWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

