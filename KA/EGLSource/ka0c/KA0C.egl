package ka0c;

import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXX-INTL-PHONE-NBR;
import corpcom7.XXXSTAT;
import corpx1.XACTBL;
import corpx1.XAUCD;
import corpx1.XAUTBL;
import corpx1.XCACD;
import corpx1.XCCCD;
import corpx1.XCCTBL;
import corpx1.XCECD;
import corpx1.XCETBL;
import corpx1.XCRCD;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XCUCD;
import corpx1.XCUTBL;
import corpx1.XDZ-DATA-DIST-CD;
import corpx1.XDZTBL;
import corpx1.XGBTBL;
import corpx1.XIECD;
import corpx1.XIETBL;
import corpx1.XLBCD;
import corpx1.XLBTBL;
import corpx1.XLCTBL;
import corpx1.XLECD;
import corpx1.XLETBL;
import corpx1.XLGCD;
import corpx1.XLGTBL;
import corpx1.XNXTBL;
import corpx1.XQATBL;
import corpx1.XSPTBL;
import corpx2.XOPCD;
import corpy2.YCH-CHNL-CLS-CD;
import corpy2.YCHTBL;
import corpy2.YCPCD;
import corpy2.YCPTBL;
import corpy2.YCU-CRTN-USE-CD;
import corpy2.YLICD;
import corpy2.YPOTBL;
import corpy2.YVICD;
import corpz3.ZARTBL;
import corpz3.ZFLTBL;
import corpz3.ZRGTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import kl.common.KIZTBL;
import ku.common.KU0XW10;
import ku.common.KU0XW30;
import ku.common.KUCACYDT;
import ku.common.KUCACYNR;
import ku.common.KUCACYRT;
import ku.common.KUCALERT;
import ku.common.KUCAPDEX;
import ku.common.KUCAPRDT;
import ku.common.KUCASMT;
import ku.common.KUCATCSH;
import ku.common.KUCBLAID;
import ku.common.KUCBPIND;
import ku.common.KUCCCAID;
import ku.common.KUCCNSCD;
import ku.common.KUCCNTCT;
import ku.common.KUCCOAID;
import ku.common.KUCCOANM;
import ku.common.KUCCOBDT;
import ku.common.KUCCOID;
import ku.common.KUCCOIDN;
import ku.common.KUCCOLCD;
import ku.common.KUCCOMNT;
import ku.common.KUCCONM;
import ku.common.KUCCRLEF;
import ku.common.KUCCRLEX;
import ku.common.KUCCRLIN;
import ku.common.KUCCSHNF;
import ku.common.KUCCSTDT;
import ku.common.KUCECODY;
import ku.common.KUCFINDT;
import ku.common.KUCFPRDT;
import ku.common.KUCFRTPD;
import ku.common.KUCFTRTI;
import ku.common.KUCGRP;
import ku.common.KUCGRPID;
import ku.common.KUCIDIND;
import ku.common.KUCINSPD;
import ku.common.KUCJSRFL;
import ku.common.KUCLBOFL;
import ku.common.KUCLCAMT;
import ku.common.KUCLCEDT;
import ku.common.KUCLCXDT;
import ku.common.KUCLVIND;
import ku.common.KUCMADID;
import ku.common.KUCMAGCT;
import ku.common.KUCMSTID;
import ku.common.KUCNSCNT;
import ku.common.KUCPDSPD;
import ku.common.KUCPHN;
import ku.common.KUCPOFL;
import ku.common.KUCPRPTI;
import ku.common.KUCPRVRT;
import ku.common.KUCPSFL;
import ku.common.KUCRAUTH;
import ku.common.KUCREC;
import ku.common.KUCSBKFL;
import ku.common.KUCSKIND;
import ku.common.KUCSSCNT;
import ku.common.KUCSTMT;
import ku.common.KUCSTYNT;
import ku.common.KUCUNTCS;
import ku.common.KUCVNDFL;
import ku.common.KUCWHSFL;
import ku.common.KUCXCSFL;
import ku.common.KUCYPOAP;
import ku.common.KUCYPOFT;
import ku.common.KUEREC;
import ku.common.KUHREC;
import ku.common.KUJCRIND;
import ku.common.KUJREC;
import ku.common.KUJXLCND;
import ku.common.KUJXQAND;
import ku.common.KUJXSPND;
import ku.common.KUKPCOID;
import ku.common.KUKREC;
import ku.common.KURREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import vv.common.VCMPNY02;
import vv.common.VDSTRB01;
import vv.common.VZFC0001;
import xa.common.XA0AW02;
import xa.common.XA1REC;
//*** PROGRAM=KA0C ****
// -----------------  ka0c - add company ----------------------
// 
// overview:  this application performs the setup/edit/add
//            function for the company level of the customer
//            data base.
// 
// date written:  04/86
// author:        david ply - cap gemini america
// 
// ************************************************************
//  date    int   modules              description
// ------   ---   --------   ----------------------------------
// 030587   clt   ka0c025    added two new fields - ycpcd
//                ka0cs13                         - kucmjrid
//                ka0cs14    deleted two fields   - xcmcd
//                ka0cm025                        - kucarnbr
//                ka0cw01
//                ka0cs8a
//                ka0cs29
//                ka0cw04
// 031787   clt   ka0cs14   changed company audit record length
//                ka0cs29   from 326 to 322.
// 051987   clt   ka0cs25   changes occurred during changes to
//                ka0cs16   kuarec.
//                ka0cm035
// 071587   clt   ka0cs99   change ext/int default to 'e'
// 030188   clt   ka0cs28   default county code to '000'
//                ka0cs30
//                ka0cs31
// 031088   clt             changes to company table
// 041488   clt             changed csp county code to xcycd
// 051888   clt             change edit of co-op analyst
// 111188   jbw             added noncsp option to calls
// 111188   jbw             added xssegtr logic
// 120888   clt             added leverage buyout flag
// 050189   clt             removed dunning from bill group
// 051289   clt             database changes
// 060989   clt             change edit of financial dates
// 091289  dsalzw           add NIL fields to Add screen
//                          and added long address screen
// 092889  dsalzw           change to go to km0n NIL terms if
//                          it is a NIL user.
// 111489  dsalzw           database changes
// 011690  jfiat            database changes
// 031390  jfiat            initialize substitution flag
//                          field used will be renamed on 04/06
// 032990  dsalzw           database changes
// 061290  dsalzw           replaced xcuttlcd with xcurmgr
// 081090  dsalzw           removed fim-stmt-call date
// 091090  dsalzw           add kiztbl for audit trail
// 100290  dsalzw           database changes
// 101590  dsalzw           update blgrp on cmpny
// 110690  dsalzw           chg desc from bill group to billing
// 112190  dsalzw           added max aging to screen
// 120590  dsalzw           default lock box to 00 if xau has
//                          doc to ar = 'i'
// 121290  dsalzw           add po req & alloc field at company
//                          rather than cust001
// 020491  dsalzw           database changes
// 022891  dsalzw           require customer departments
// 030891  twatso           add vend auth at company from vcust
// 032691  dsalzw           fix zzsdt date on the all db2
// 040891  dsalzw           database changes
// 041591  twatso           make dept 4 bytes instead of 2
// 050791  dsalzw           add opt screen for buy restrictions
// 060991  dsalzw           database changes
// 061991  dsalzw  require both ftwr & aprl for alloc fields
// 072591  dsalzw  fix map attributes
// 101191  CHELLM  Added CU-STYNM-PRT-FL to map KA0CM025
//                 Added CU-CO-SHORT-NM logic to updt. KUCREC.
//                 Changed gender age to base gender age in
//                 KA0CM075.
// 030132  CHELLM  Added NIL Distributor table fields(VDSTRB01)
//                     , Credit Appl Dt & DAB Rpt Dt
// 031692  CHELLM  Added ^GT curr-date edits to
//                     , Credit Appl Dt & DAB Rpt Dt
// 061292  CHELLM  DB2 changes Renamed KUCPDIND - CU-PO-ID-FL
//                                     KUCEOM   - CU-BILL-IND
// 090492  cancie  changed xxxcctry to xctcd (country code)
//                 changed xxxcst   to xstcd (state code)
//                 changed xxxccity to xxxcity (city)
//                 changed xxxczip  to xxxzip (zip code)
// 091892  CHELLM  Added CU Level table format and add process
//                 performed when CMPNY is added
// 101292  CVO     DB2 changes.
//                 Changed to use dcorp.vzfc0001 db2 table
//                 instead of csp table zfctbl.
// 030293  CHELLM  Removed Corporate Phone from map KA0CM015
//                 Removed Credit Contact  from map KA0CM025
//                 Both fields are now added through the AR
//                 system into DACRCV.VCTACT01.  Customer apps
//                 now pull these fields from this table for
//                 display only.
// 041593  CHELLM  Removed CULVL01 update when company is added
//                 This function will now be done in KG0D.
//                 KA0D, Customer Unit Add process will xfer to
//                 KG0D after KG0C - Rep Add.
// 2-july-1993          dlegg      Change calls to TA0020 with
//                                 ABND to RETN. KA0C095, 096,
//                                 100,105,110,013,S07,S08,S09,
//                                 S8A,S26.
// 13-july-1993         dlegg      add check for numeric values
//                                 before moves. add sgrp to
//                                 init all records. KA0C010.
// 100193  CHELLM  CSP 4.1 Conversion.
//                 Allow for Send Statement values 4 & 5.
// 111293  CHELLM  Database Changes:
//                 resized xxx-addr1,2,3 added xxx-addr4,5,6.
//                 deleted cu-aloc-seq-ftwr, cu-aloc-seq-aprl
//                 deleted cu-asgn-ctrl-ftwr, cu-asgn-ctrl-aprl
//                 added   xdz-data-dist-cd
//                 added   cu-cusku-sz-fl
// 120193  CHELLM  fix azra abned when adding multi co's.
//                 initialize redefined fields in ka0cw02.
// 02-10-94 BCourt Fix edit in XCC table to allow for both
//           active and inactive rows for one code.
//           Fix underscores to dashes for XDZ_DATA_DIST_CD.
//           See KA0CS13, map name XDZ..., KA0C025 & KA0CS29.
// 03/11/94 CHELLM Database Changes:
//           Renamed KUCMXYNT TO CU-MAX-FTWR-YNT-CD
//            Added CU-MAX-APRL-YNT-CD, XXX-INTL-PHONE-NBR
// 04/10/95 CHELLM Added DEL level security (3) for Nike Canada
// 08/22/96 kclar1 database changes added cu-ivc-prt-ind
// 12/03/97 rgilli Y2K MODIFICATIONS MADE TO:
//                 kA0CW00:  Added date fields ka0cw-eff-ccyy,
//                           ka0cw-exp-ccyy, and ka0cwyc.
//                 KA0CM025: Removed zero supression from
//                           all date fields.
//                 KA0CM045: Removed zero supression from
//                           all date fields.
//                 KA0CM065: Removed zero supression from
//                           all date fields.
//                 KA0C025:  Changed "if" statement to bypass
//                           edit if both buy mmyy equal zero.
//                 KA0C045:  Add century windowing.
//                (Appl flow)Init. w/s century field.
//                 KA0C065:  Changed "if" statement. See code
//                 KA0CS11:  Removed year edit check.
//                 KA0CS12:  Changed "if" statement. See code
//                 KA0CS13:  Removed year edit check.
//                           Change yy to ccyy compare.
//                           Changed "If" statements. See code
//                 KA0CS14:  Changed "if" statement. See code
//                 KA0CS18:  Removed year edit check.
//                           Changed "If" statements. See code
//                 KA0CS21:  Removed year edit check.
//                           Change yy to ccyy compare.
//                           Changed "If" statements. See code
// 05/12/98 kclar1 KA0CS29:  remove ftwr from xopcd.
// 10-06-00 GDECKE KA0CS14: Require entry of channel class code
// 
// *********************
Program KA0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KA0CW01 KA0CW01; // record
  KA0CW02 KA0CW02; // record
  KA0CW04 KA0CW04; // record
  KU0XW10 KU0XW10; // record
  KU0XW30 KU0XW30; // record
  KUCREC KUCREC; // record
  KUEREC KUEREC; // record
  KUHREC KUHREC; // record
  KUJREC KUJREC; // record
  KUKREC KUKREC; // record
  KURREC KURREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCMPNY02 VCMPNY02; // record
  VDSTRB01 VDSTRB01; // record
  VZFC0001 VZFC0001; // record
  XA0AW02 XA0AW02; // record
  XA1REC XA1REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XACTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCCTBL {deleteAfterUse = yes}; // table
  use XCETBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XCUTBL {deleteAfterUse = yes}; // table
  use XDZTBL {deleteAfterUse = yes}; // table
  use XGBTBL {deleteAfterUse = yes}; // table
  use XIETBL {deleteAfterUse = yes}; // table
  use XLBTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XLETBL {deleteAfterUse = yes}; // table
  use XLGTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use YCPTBL {deleteAfterUse = yes}; // table
  use YPOTBL {deleteAfterUse = yes}; // table
  use YCHTBL {deleteAfterUse = yes}; // table
  use ZARTBL {deleteAfterUse = yes}; // table
  use ZRGTBL {deleteAfterUse = yes}; // table
  use ZFLTBL {deleteAfterUse = yes}; // table
  use KA0CM.KA0CM015,  // forms
      KA0CM.KA0CM016, 
      KA0CM.KA0CM025, 
      KA0CM.KA0CM035, 
      KA0CM.KA0CM036, 
      KA0CM.KA0CM045, 
      KA0CM.KA0CM055, 
      KA0CM.KA0CM065, 
      KA0CM.KA0CM075, 
      KA0CM.KA0CM085
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KA0C010: KA0C010();

     /* ---------  ka0c010 flow ---------------*/

    if (COMMAREA.CADLVL[2] == "Y")
      goto KA0C016; /* to converse/edit NIL company address*/
    else
      goto KA0C015; /* to converse/edit company address*/
    end


    KA0C015: KA0C015();

     /* --------  ka0c015 flow  ----------------*/

    if (converseVar.eventKey is pa2)
      goto KA0C010; /* refresh screen*/
    end

    if (KA0CM015.KA0CMMSG != " "
     || KA0CM015.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C015; /* errors/msg's - redisplay address map*/
    end


    if (converseVar.eventKey is pf12)
      goto KA0C020; /* continue to setup company*/
    else
      set KA0CM015.KUCCOID cursor;
      KA0CM015.KA0CMMSG = "PRESS PF12 TO CONFIRM ";
      goto KA0C015; /* redisplay address map*/
    end

    KA0C016: KA0C016();

     /* -------- ka0c016 flow ---------------*/

    if (converseVar.eventKey is pa2)
      goto KA0C010; /* refresh screen*/
    end

    if (KA0CM016.KA0CMMSG != " "
     || KA0CM016.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C016; /* errors/msg's - redisplay address map*/
    end


    if (converseVar.eventKey is pf12)
      goto KA0C020; /* continue to setup company*/
    else
      set KA0CM016.KUCCOID cursor;
      KA0CM016.KA0CMMSG = "PRESS PF12 TO CONFIRM";
      goto KA0C016; /* redisplay address map*/
    end

    KA0C020: KA0C020();
     /* --------  flow for ka0c020  ----------*/

    goto KA0C025; /* to converse/edit company setup*/

    KA0C025: KA0C025();

     /* --------  ka0c025 flow  ----------------*/

    if (converseVar.eventKey is pa2)
      goto KA0C020; /* refresh screen*/
    end

    if (KA0CM025.KA0CMMSG != " "
     || KA0CM025.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C025; /* errors/msg's - redisplay*/
    end

    if (converseVar.eventKey is pf12)
      goto KA0C030; /* continue to setup billing*/
    else
      set KA0CM025.KUCSSCNT cursor;
      KA0CM025.KA0CMMSG = "PRESS PF12 TO CONFIRM ";
      goto KA0C025; /* redisplay setup company*/
    end

    KA0C030: KA0C030();
     /* --------  flow for ka0c030  ----------*/

    if (COMMAREA.CADLVL[2] == "Y")
      goto KA0C036; /* to converse/edit long bill setup*/
    else
      goto KA0C035; /* to converse/edit billing setup*/
    end

    KA0C035: KA0C035();
     /* --------  ka0c035 flow  ----------------*/

    if (converseVar.eventKey is pa2)
      goto KA0C030; /* refresh screen*/
    end

    if (KA0CM035.KA0CMMSG != " "
     || KA0CM035.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C035; /* errors/msg's - redisplay billing*/
    end


    if (converseVar.eventKey is pf12)
      goto KA0C040; /* continue to principals*/
    else
      if (KA0CM015.KA0CMBF1 == "N"
       && KA0CM015.KA0CMBF2 == "N")
        set KA0CM035.XXX-ADDR1 cursor;
      else
        set KA0CM035.CU-BILL-IND cursor;
      end
      KA0CM035.KA0CMMSG = "PRESS PF12 TO CONFIRM ";
      goto KA0C035; /* redisplay billing*/
    end

    KA0C036: KA0C036();
     /* --------------- ka0c036 flow --------------------------*/

    if (converseVar.eventKey is pa2)
      goto KA0C030; /* refresh screen*/
    end

    if (KA0CM036.KA0CMMSG != " "
     || KA0CM036.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C036;
    end /* errors/msg's - redisplay billing*/


    if (converseVar.eventKey is pf12)
      goto KA0C040; /* continue to principals*/
    else
      if (KA0CM015.KA0CMBF1 == "N"
       && KA0CM015.KA0CMBF2 == "N")
        set KA0CM036.XXX-ADDR1 cursor;
      else
        set KA0CM036.KUCSTMT cursor;
      end
      KA0CM036.KA0CMMSG = "PRESS PF12 TO CONFIRM ";
      goto KA0C036; /* redisplay billing*/
    end

    KA0C040: KA0C040();
     /* --------  flow for ka0c040  ----------*/

    goto KA0C045; /* to converse/edit principals*/

    KA0C045: KA0C045();
     /* --------  ka0c045 flow  ----------------*/

    if (converseVar.eventKey is pa2)
      goto KA0C040; /* refresh screen*/
    end

    if (converseVar.eventKey is pf13)
      goto KA0C070; /* continue to department data menu*/
    end

    if (KA0CM045.KA0CMMSG != " "
     || KA0CM045.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C045; /* errors or messages - redisplay*/
                                     /* principals*/
    end

    if (converseVar.eventKey is pf12) /* confirm request?*/
       /* next sentence*/
    else
      set KA0CM045.KUHPRNM cursor;
      KA0CM045.KA0CMMSG = "PRESS PF12 TO CONFIRM ";
      goto KA0C045;
    end

      /* clean edit - move occurance to working storage*/

    KA0CM045.KA0CMMSG = "ADD ADDITIONAL PRINCIPALS";
    KA0CWIX1 = KA0CWIX1 + 1;

      /* principal occurances are stored here*/
    KA0CW01.KA0CWPNM[KA0CWIX1] = KA0CM045.KUHPRNM; /* name*/
    KA0CW01.KA0CWPTL[KA0CWIX1] = KA0CM045.KUHPRTLT; /* title*/
    KA0CW01.KA0CWSSN[KA0CWIX1] = KA0CM045.XXXSSN; /* social security*/
    if (KA0CM045.KA0CMGMM > 0)
      /* ------------------ y2k in begin --------------*/
      if (KA0CM045.KA0CMGYY > 60) /* Century windowing*/
        KA0CW01.KA0CWGEC[KA0CWIX1] = 19; /**/
      else
        KA0CW01.KA0CWGEC[KA0CWIX1] = 20; /**/
      end
      /* ------------------ y2k in end   --------------*/
    end
    KA0CW01.KA0CWGEY[KA0CWIX1] = KA0CM045.KA0CMGYY; /* year*/
    KA0CW01.KA0CWGEM[KA0CWIX1] = KA0CM045.KA0CMGMM; /* month*/
    KA0CW01.KA0CWGED[KA0CWIX1] = KA0CM045.KA0CMGDD; /* day*/
    KA0CW01.KA0CWGF1[KA0CWIX1] = KA0CM045.KUHGUAR; /* guarantee flag*/
    KA0CW01.KA0CWGF2[KA0CWIX1] = KA0CM045.KUHSGUAR; /* spouse guar. flg*/

    if (KA0CWIX1 == 5)
      goto KA0C070; /* max added - goto init dept menu*/
    end

    KA0CM045.KUHPRNM = " "; /* reset data entry fields*/
    KA0CM045.KUHPRTLT = " ";
    KA0CM045.XXXSSN = 0;
    KA0CM045.KA0CMGYY = 0;
    KA0CM045.KA0CMGMM = 0;
    KA0CM045.KA0CMGDD = 0;
    KA0CM045.KUHGUAR = " ";
    KA0CM045.KUHSGUAR = " ";
    KA0CW01.KA0CWEDT = " "; /* good edit field*/
    set KA0CM045.KUHPRNM cursor;

    goto KA0C045; /* redisplay for new add*/

    KA0C070: KA0C070();
     /* --------  flow for ka0c070  ----------*/

    goto KA0C075; /* to converse/edit dept data*/

    KA0C075: KA0C075();
     /* --------  ka0c075 flow  ----------------*/


    if (converseVar.eventKey is pa2)
      goto KA0C070; /* refresh screen*/
    end


    if (KA0CM075.KA0CMMSG != " "
     || KA0CM075.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C075;
                                     /* errors or messages - redisplay credit*/
    end


    if (converseVar.eventKey is pf13)
      if (KA0CW01.KA0CWNDP > " ")
        goto KA0C055; /* back to optional data menu*/
      else
        converseLib.validationFailed(77); /* at least one dept required*/
        goto KA0C075; /* errors or messages - redisplay dept*/
      end
    end


    if (converseVar.eventKey is pf7) /* page back*/
      KA0CM075.KA0CMSEQ[1] = KA0CM075.KA0CMSEQ[1] - 5;
      if (KA0CM075.KA0CMSEQ[1] < 1)
        KA0CM075.KA0CMSEQ[1] = 1;
      end
      goto KA0C075; /* redisplay with new page*/
    end


    if (converseVar.eventKey is pf8) /* page forward*/
      if (KA0CM075.KA0CMXNX[05] > " ")
        KA0CM075.KA0CMSEQ[1] = KA0CM075.KA0CMSEQ[1] + 5;
        if (KA0CM075.KA0CMSEQ[1] > 21)
          KA0CM075.KA0CMSEQ[1] = 21;
        end
        goto KA0C075; /* redisplay with new page*/
      else
        KA0CM075.KA0CMMSG = "MUST ENTER 5 DEPTS BEFORE PAGING";
        goto KA0C075; /* redisplay with current page*/
      end
    end

    if (converseVar.eventKey is pf12)
      /* next sentence*/
    else
      KA0CM075.KA0CMMSG = "PRESS PF12 TO CONFIRM";
      goto KA0C075;
    end

      /* confirmed entry - page forward for new set if 5 entries*/

    if (KA0CM075.KA0CMXNX[05] != " ")
      KA0CM075.KA0CMSEQ[1] = KA0CM075.KA0CMSEQ[1] + 5;
      if (KA0CM075.KA0CMSEQ[1] > 21) /* all data entered? - return to menu*/
        KA0CW01.KA0CWEDT = " ";
        KA0CM075.KA0CMSEQ[1] = 1;
        goto KA0C055;
      end
    end

    KA0CW01.KA0CWEDT = " "; /* reset good edit flag*/
    goto KA0C075; /* redisplay with approp. page*/



    KA0C050: KA0C050();
     /* --------  flow for ka0c050  ----------*/

    goto KA0C055; /* to optional data menu*/

    KA0C055: KA0C055();
     /* --------  ka0c055 flow  ----------------*/

    if (converseVar.eventKey is pa2)
      goto KA0C050; /* refresh screen*/
    end

    if (KA0CM055.KA0CMMSG != " "
     || KA0CM055.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C055; /* errors or messages - redisplay menu*/
    end

    if (KA0CM055.KA0CMCRO != " ") /* credit option selected?*/
      if (KA0CM065.KUCCONM > " ") /* credit data already entered?*/
        goto KA0C065; /* redisplay entered data*/
      else
        goto KA0C060; /* initialize and display*/
      end
    end

    if (KA0CM055.KA0CMBUY != " ") /* buy restrictions selected ?*/
      if (KA0CM085.KUCCONM > " ") /* restrictions already entered?*/
        KA0CW01.KA0CWIX2 = 1; /* set index*/
        goto KA0C085; /* redisplay entered data*/
      else
        goto KA0C080; /* initialize and display*/
      end
    end

    if (converseVar.eventKey is pf2) /* add all data*/
      goto KA0C095; /* add company data*/
    end

    goto KA0C055; /* redisplay menu*/

    KA0C060: KA0C060();
     /* --------  flow for ka0c060  ----------*/

    goto KA0C065; /* to converse/edit credit data*/

    KA0C065: KA0C065();
     /* --------  ka0c065 flow  ----------------*/

    if (converseVar.eventKey is pa2)
      goto KA0C060; /* refresh screen*/
    end

    if (KA0CM065.KA0CMMSG != " "
     || KA0CM065.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C065;
                                     /* errors or messages - redisplay credit*/
    end

    if (converseVar.eventKey is pf13)
      goto KA0C055; /* back to optional data menu*/
    end

    if (converseVar.eventKey is pf12)
       /* next sentence*/
    else
      set KA0CM065.KUCLCAMT cursor;
      KA0CM065.KA0CMMSG = "PRESS PF12 TO CONFIRM";
      goto KA0C065;
    end

    KA0CM055.KA0CMCRO = " "; /* clear credit option*/


    goto KA0C055; /* redisplay optional data menu*/

    KA0C080: KA0C080();
     /* --------  flow for ka0c080  ----------*/

    goto KA0C085; /* to converse/edit buy data*/

    KA0C085: KA0C085();
     /* --------  ka0c085 flow  ----------------*/


    if (converseVar.eventKey is pa2)
      goto KA0C080; /* refresh screen*/
    end


    if (KA0CM085.KA0CMMSG != " "
     || KA0CM085.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0C085;
                                     /* errors or messages - redisplay credit*/
    end


    if (converseVar.eventKey is pf13)
      goto KA0C055; /* back to optional data menu*/
    end


    if (converseVar.eventKey is pf7) /* page back*/
      KA0CW01.KA0CWIX2 = KA0CW01.KA0CWIX2 - 6;
      if (KA0CW01.KA0CWIX2 < 1)
        KA0CW01.KA0CWIX2 = 1;
      end
      goto KA0C085; /* redisplay with new page*/
    end


    if (converseVar.eventKey is pf8) /* page forward*/
      if (KA0CW01.KA0CWNDP[KA0CWIX2] > " ")
        if (KA0CW01.KA0CWIX2 > 27)
          KA0CW01.KA0CWIX2 = 27;
        end
        goto KA0C085; /* redisplay with new page*/
      else
        KA0CM085.KA0CMMSG = "END OF DEPTS TO DISPLAY         ";
        goto KA0C085; /* redisplay with current page*/
      end
    end

    if (converseVar.eventKey is pf12)
      /* next sentence*/
    else
      KA0CM085.KA0CMMSG = "PRESS PF12 TO CONFIRM";
      goto KA0C085;
    end

      /* confirmed entry - page forward for new set if 3 entries*/

    if (KA0CW01.KA0CWNDP[KA0CWIX2] == " ") /* no more data*/
      KA0CW01.KA0CWEDT = " "; /* reset good edit flag*/
      KA0CM055.KA0CMBUY = " "; /* reset buy flag*/
      goto KA0C055;
    end

    KA0CW01.KA0CWEDT = " "; /* reset good edit flag*/
    KA0CM055.KA0CMBUY = " "; /* reset buy flag*/
    goto KA0C085; /* redisplay with approp. page*/


    KA0C095: KA0C095();
     /* -------  flow for ka0c095 -------------*/

      /* continue to add comment*/

    goto KA0C100;
    KA0C096: KA0C096();
    KA0C100: KA0C100();
     /* -------  flow for ka0c100 -------------*/

      /* continue to add principals*/

    goto KA0C105;
    KA0C105: KA0C105();
     /* -------  flow for ka0c105 -------------*/

      /* continue to add departments*/

    goto KA0C110;
    KA0C110: KA0C110();
     /* -------  flow for ka0c110 -------------*/

      /* if xfer to add store doesnt cut it...*/

     /* (back to opt menu for now)*/

    if (KA0CM055.KA0CMMSG != " ") /* other errors?*/
      KA0CM055.KA0CMMSG = "COMPANY RECORDS ADDED";
    end

    goto KA0C055;
  end // end main
end // end KA0C

// init company address map
Function KA0C010()

   /* -------- start process ka0c010 --------------*/

       /* check entry security using xsentry stmt grp*/
  XSENTRY(); /* commented out for now*/

  XSSEGTR(); /* 11/88 jw - set segmented trans id*/


      /* set date in map, initialize work flds*/

  KA0CS-INIT-RECS();

  set KA0CM015 initial; /* clear map fields*/
  set KA0CM016 initial; /* clear map fields*/

  XX0XS01(); /* get today's date*/

  KA0CM015.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date to short addr map*/
  KA0CM016.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date to long addr map*/

  KA0CW02.KA0CWGRP = COMMAREA.CAUSERA; /* move user commarea to work*/

  if (COMMAREA.CAITEM != " ")
    KA0CW02.KA0CWGRP = COMMAREA.CAITEM;
  end
  if (KA0CW02.KA0CWCID-CHAR is numeric)
    KA0CM015.KUCCOID = KA0CW02.KA0CWCID; /* key from add menu*/
    KA0CM016.KUCCOID = KA0CW02.KA0CWCID;
    KA0CM015.XLECD = KA0CW02.KA0CWXLE; /* legal entity*/
    KA0CM016.XLECD = KA0CW02.KA0CWXLE; /* legal entity*/
  else
    KA0CW02.KA0CWCID = 0;
  end
  if (KA0CW02.KA0CWOCP-CHAR is numeric)
    /* next sentence*/
  else
    KA0CW02.KA0CWOCP = 0;
  end
  if (KA0CW02.KA0CWERR-CHAR is numeric)
    /* next sentence*/
  else
    KA0CW02.KA0CWERR = 0;
  end

  if (KA0CM015.KUCCOID > 0)
    KA0CS05(); /* edit company id*/
  else

     /* default legal entity codes*/

    if (COMMAREA.CADLVL[3] == "Y") /* Nike Canada User*/
      KA0CM015.XLECD = "03"; /* legal entity*/
      KA0CM015.XCTCD = "CANA"; /* country code*/
      KA0CM015.XCTCD1 = "CANA"; /* country code*/
    else
      if (COMMAREA.CADLVL[2] == "Y") /* nil user*/
        KA0CM016.XLECD = "02"; /* legal entity*/
      else
        if (COMMAREA.CADLVL[1] == "Y") /* cole haan user*/
          KA0CM015.XLECD = "08"; /* legal entity*/
        end
      end
    end
  end

   /* ------------  end of process ka0c010 --------------*/
end // end KA0C010

Function KA0C013()
   /* *************************************************/
   /* get foreign currency record  vzfc0001*/
   /* *************************************************/

  set SQLCA empty;
  set VZFC0001 empty;

  VZFC0001.ZFC-CRCY-CD = KA0CM025.ZFCCD;

  call "DC0060" ("S ", SQLCA, VZFC0001) {isNoRefresh = yes, isExternal = yes}; /* read dcorp.vzfc0001*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
      /* NEXT SENTENCE*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VZFC0001";
    TA1REC.TA1MAP = " ";
    KA0CW01.KA0CWKEY = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = VZFC0001.ZFC-CRCY-CD;
    TA1REC.TA1PGMNM = "KA0C013";
    TA1REC.TA1LOC = "READING DB2 VZFC0001";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end


end // end KA0C013

// converse company address map
Function KA0C015()

   /* ------------  process ka0c015 start ------------*/

   /* -----------  before stage  ------------------------------*/

       /* no before processing*/

  converse KA0CM015 ;


   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM015.VAGen_EZEMSG = " ";
  KA0CM015.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

  KA0CS01(); /* check standard pf keys*/
  KA0CM015.KA0CMMSG = KA0CW01.KA0CWMSG;

  if (converseVar.validationMsgNum != 0 /* error or warning*/
   || KA0CM015.KA0CMMSG != " ")         /* error or warning*/
    exit stack;
  end

    /* ----------------- edit --------------------------*/

  KA0CS02(); /* check bill to address flags*/

  set KA0CM015.XCTCD initialAttributes; /* reset hiliting*/
  set KA0CM015.KA0CM-ZIP initialAttributes; /* (may have cleared addr*/
  set KA0CM015.KA0CM-STATE initialAttributes; /* after entry with errors)*/
  set KA0CM015.KA0CM-CITY initialAttributes;
  set KA0CM015.KA0CM-ALT-ADDR3 initialAttributes;

  if (KA0CM015.KA0CM-ALT-ADDR1 > " " /* check alternate address*/
   || KA0CM015.KA0CM-ALT-ADDR2 > " " 
   || KA0CM015.KA0CM-ALT-ADDR3 > " " 
   || KA0CM015.KA0CM-CITY > " "      
   || KA0CM015.KA0CM-ZIP > " "       
   || KA0CM015.KA0CM-STATE > " ")   
    KA0CS03();
  end

  KA0CS04(); /* check hq address*/

    /* corporate phone number - optional, no edit*/
    /* company doing business as name - optional, no edit*/

    /* check company name - required*/
  if (KA0CM015.KUCCONM == " ")
    set KA0CM015.KUCCONM cursor, modified, bold;
    KA0CM015.KA0CMMSG = "COMPANY NAME REQUIRED";
  else
    set KA0CM015.KUCCONM initialAttributes;
  end

   /* check company number  - must not exist.*/
   /* generate if not user entered*/
  KA0CS05();


      /* check parent company id - must be valid if entered*/
  set KA0CM015.KUKPCOID initialAttributes;
  KA0CM015.KUKPCONM = " ";
  if (KA0CM015.KUKPCOID != 0)
    KA0CS06();
  end

     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KA0CM015.KA0CMMSG == " "
   && converseVar.validationMsgNum == 0
   && KA0CW01.KA0CWEDT == "X")
    /* next sentence*/
  else
    if (KA0CM015.KA0CMMSG == " "
     && converseVar.validationMsgNum == 0)
      set KA0CM015.KUCCOID cursor;
      KA0CW01.KA0CWEDT = "X"; /* set good edit flag*/
      KA0CM015.KA0CMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM";
    end
  end

    /* -----------   end of process ka0c015  ------------*/

end // end KA0C015

// converse Long company address
Function KA0C016()

   /* ------------  process ka0c016 start ------------*/

   /* -----------  before stage  ------------------------------*/

       /* no before processing*/

  converse KA0CM016 ;


   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM016.VAGen_EZEMSG = " ";
  KA0CM016.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

  KA0CS01(); /* check standard pf keys*/
  KA0CM016.KA0CMMSG = KA0CW01.KA0CWMSG;

  if (converseVar.validationMsgNum != 0 /* error or warning*/
   || KA0CM016.KA0CMMSG != " ")         /* error or warning*/
    exit stack;
  end

    /* ----------------- edit --------------------------*/

  KA0CSN1(); /* move long address fields to short*/
   /* address for later use*/

  KA0CS02(); /* check bill to address flags*/

  set KA0CM016.CCTCD initialAttributes; /* reset hiliting*/
  set KA0CM016.KA0CM-NZIP initialAttributes; /* (may have cleared addr*/
  set KA0CM016.CSTCD initialAttributes; /* after entry with errors)*/
  set KA0CM016.KA0CM-ALT-ADDR1 initialAttributes;
  set KA0CM016.KA0CM-ALT-ADDR2 initialAttributes;
  set KA0CM016.KA0CM-ALT-ADDR3 initialAttributes;
  set KA0CM016.KA0CM-ALT-ADDR4 initialAttributes;
  set KA0CM016.KA0CM-ALT-ADDR5 initialAttributes;
  set KA0CM016.KA0CM-ALT-ADDR6 initialAttributes;

  if (KA0CM016.KA0CM-ALT-ADDR1 > " " /* check alternate address*/
   || KA0CM016.KA0CM-ALT-ADDR2 > " " 
   || KA0CM016.KA0CM-ALT-ADDR3 > " " 
   || KA0CM016.KA0CM-ALT-ADDR4 > " " 
   || KA0CM016.KA0CM-ALT-ADDR5 > " " 
   || KA0CM016.KA0CM-ALT-ADDR6 > " " 
   || KA0CM016.CCTCD > " "           
   || KA0CM016.KA0CM-NZIP > " "      
   || KA0CM016.CSTCD > " ")         
    KA0CSN2();
  end

  KA0CSN3(); /* check hq address*/

    /* corporate phone number - optional, no edit*/
    /* company doing business as name - optional, no edit*/

    /* check company name - required*/
  if (KA0CM016.KUCCONM == " ")
    set KA0CM016.KUCCONM cursor, modified, bold;
    KA0CM016.KA0CMMSG = "COMPANY NAME REQUIRED";
  else
    set KA0CM016.KUCCONM initialAttributes;
  end

   /* check company number  - must not exist.*/
   /* generate if not user entered*/
  KA0CS05();


      /* check parent company id - must be valid if entered*/
  set KA0CM016.KUKPCOID initialAttributes;
  KA0CM016.KUKPCONM = " ";
  if (KA0CM016.KUKPCOID != 0)
    KA0CS06();
  end

     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KA0CM016.KA0CMMSG == " "
   && converseVar.validationMsgNum == 0
   && KA0CW01.KA0CWEDT == "X")
    /* next sentence*/
  else
    if (KA0CM016.KA0CMMSG == " "
     && converseVar.validationMsgNum == 0)
      set KA0CM016.KUCCOID cursor;
      KA0CW01.KA0CWEDT = "X"; /* set good edit flag*/
      KA0CM016.KA0CMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM";
    end
  end

    /* -----------   end of process ka0c016  ------------*/

end // end KA0C016

// init company setup map
Function KA0C020()


   /* -------- start process ka0c020 --------------*/

   /* -----------------------------------------------------------*/
      /* execute processing: initialize fields.                 **/
   /* -----------------------------------------------------------*/


      /* set date in map, initialize work flds*/

  set KA0CM025 initial; /* clear map fields*/
  KA0CW01.KA0CWEDT = " "; /* clear good edit flg*/
  KA0CW01.KA0CWPF3 = " "; /* clear data lost flg*/
  KA0CW01.KA0CWPF4 = " "; /* clear data lost flg*/
  KA0CM025.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date to map*/

     /* carry forward company and parent data*/

  KA0CM025.KUKPCOID = KA0CM015.KUKPCOID; /* parent co id*/
  KA0CM025.KUKPCONM = KA0CM015.KUKPCONM; /* parent co name*/
  KA0CM025.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KA0CM025.KUCCONM = KA0CM015.KUCCONM; /* company name*/
  KA0CM025.KUCCOANM = KA0CM015.KUCCOANM; /* company dba name*/
  KA0CM025.KUCMAGCT = 12; /* max aging ct*/

  if (COMMAREA.CADLVL[3] == "Y") /* if canadian user*/
    KA0CM025.ZFCCD = "CAD"; /* default currency to canadian dollar*/
    KA0CM025.XCTCD = "CANA"; /* default country code*/
  end

   /* ------------  end of process ka0c020 --------------*/

end // end KA0C020

// converse company setup map
Function KA0C025()

   /* ------------  process ka0c025 start ------------*/
   /* ********************************************************************/
   /* maintenance log.                                               ***/
   /* 02-10-94  BCourt Change XDZ_... to XDZ-...                      ***/
   /* ********************************************************************/

         /* if not a nil user set nil fields to auto skip*/

  if (COMMAREA.CADLVL[2] == "Y")
     /* next sentence*/
  else
    set KA0CM025.ZARCD skip; /* acct region*/
    set KA0CM025.ZRGCD skip; /* sales region*/
    set KA0CM025.XCTCD skip; /* country code*/
    set KA0CM025.ZFLCD skip; /* frgn lanuage*/
    set KA0CM025.ZFCCD skip; /* frgn currency*/
    set KA0CM025.NL-PRT-MUL-PRO-FL skip; /* mult pro inv*/
    set KA0CM025.NL-PRT-WT-PRO-FL skip; /* prt wt*/
    set KA0CM025.KUCINSPD skip; /* insurance prepd*/
    set KA0CM025.KUCFRTPD skip; /* freight prepd*/
    set KA0CM025.XDZ-DATA-DIST-CD skip; /* Data Distribution Code*/
  end


  converse KA0CM025 ;


   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM025.VAGen_EZEMSG = " ";
  KA0CM025.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

  KA0CS01(); /* check standard pf keys*/
  KA0CM025.KA0CMMSG = KA0CW01.KA0CWMSG;

  if (converseVar.validationMsgNum != 0 /* error or warning*/
   || KA0CM025.KA0CMMSG != " ")         /* error or warning*/
    exit stack;
  end

    /* ----------------- edit --------------------------*/

    /* check credit service reps - 1st and 3rd req, check*/
    /* corp table for values.*/
  KA0CS10();

  KA0CS99(); /* edit misc flags*/

    /* the following fields are optional, no edit required*/
      /* project account number*/
      /* comment*/
      /* credit contact*/
      /* nike store count*/
      /* self store count*/

   /* all duns flds optional, if one present, all must be present*/
  set KA0CM025.KUCACYNR initialAttributes;
  set KA0CM025.KUCACYRT initialAttributes;
  set KA0CM025.KUCLVIND initialAttributes;
  set KA0CM025.KA0CMDBM initialAttributes;
  set KA0CM025.KA0CMDBY initialAttributes;
   /* ---------------------- y2k out begin ------------------*/
   /* IF KA0CM025.KUCACYNR GT 0*/
    /* OR KA0CM025.KUCACYRT GT ' '*/
    /* OR KA0CM025.KUCLVIND GT ' '*/
    /* OR KA0CM025.KA0CMDBM GT 0*/
    /* OR KA0CM025.KA0CMDBY GT 0;*/
   /* KA0CS11;                       /* check dun and bradstreet fields*/
   /* end;*/
   /* ---------------------- y2k out end   ------------------*/
   /* ---------------------- y2k in begin  ------------------*/
  if (KA0CM025.KUCACYNR > 0
   || KA0CM025.KUCACYRT > " "
   || KA0CM025.KUCLVIND > " ")
    KA0CS11(); /* check dun and bradstreet fields*/
  else
    if (KA0CM025.KA0CMDBM == 0
     && KA0CM025.KA0CMDBY == 0)
      /* next sentence*/
    else
      KA0CS11(); /* check dun and bradstreet fields*/
    end
  end
   /* ---------------------- y2k in end    ------------------*/

    /* check financial stmt dates*/
  KA0CS12();

    /* check miscellanious credit data*/
  KA0CS13();

    /* check account class code - req, valid table entry*/
    /* check legal organization type - req, valid tbl entry*/
    /* check started business date - opt, rng on month*/
  KA0CS14();

     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KA0CM025.KA0CMMSG == " "
   && converseVar.validationMsgNum == 0
   && KA0CW01.KA0CWEDT == "X")
    /* next sentence*/
  else
    if (KA0CM025.KA0CMMSG == " "
     && converseVar.validationMsgNum == 0)
      set KA0CM025.KUCSSCNT cursor;
      KA0CW01.KA0CWEDT = "X"; /* set commarea add flag*/
      KA0CM025.KA0CMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM";
    end
  end


    /* -----------   end of process ka0c025  ------------*/

end // end KA0C025

// init billing info map
Function KA0C030()


   /* -------- start process ka0c030 --------------*/

   /* -----------------------------------------------------------*/
      /* execute processing: initialize fields.                 **/
   /* -----------------------------------------------------------*/


      /* set date in map, initialize work flds*/

  set KA0CM035 initial; /* clear map fields*/
  set KA0CM036 initial; /* clear map fields*/

  KA0CW01.KA0CWEDT = " "; /* clear good edit flag*/
  KA0CW01.KA0CWPF3 = " "; /* clear data lost flag*/
  KA0CW01.KA0CWPF4 = " "; /* clear data lost flag*/
  KA0CM035.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date if map*/
  KA0CM036.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date if map*/

     /* carry forward company and parent data*/

  KA0CM035.KUKPCOID = KA0CM015.KUKPCOID; /* parent co id*/
  KA0CM036.KUKPCOID = KA0CM015.KUKPCOID; /* parent co id*/
  KA0CM035.KUKPCONM = KA0CM015.KUKPCONM; /* parent co name*/
  KA0CM036.KUKPCONM = KA0CM015.KUKPCONM; /* parent co name*/
  KA0CM035.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KA0CM036.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KA0CM035.KUCCONM = KA0CM015.KUCCONM; /* company name*/
  KA0CM036.KUCCONM = KA0CM015.KUCCONM; /* company name*/
  KA0CM035.KUCCOANM = KA0CM015.KUCCOANM; /* company dba name*/
  KA0CM036.KUCCOANM = KA0CM015.KUCCOANM; /* company dba name*/

   /* if bill to flag set in setup company address, carry*/
   /* flagged address forward, and protect address fields.*/
  if (KA0CM015.KA0CMBF1 == "Y"
   || KA0CM015.KA0CMBF2 == "Y")
    if (COMMAREA.CADLVL[2] == "Y")
      KA0CSNA();
      set KA0CM036.KUCSTMT cursor;
    else
      KA0CS15();
      set KA0CM035.KUCSTMT cursor;
    end
  end

   /* ------------  end of process ka0c030 --------------*/

end // end KA0C030

// converse billing info map
Function KA0C035()


   /* ------------  process ka0c035 start ------------*/

   /* ---------------------------------------------------------*/
    /* before stage: no processing                           **/
   /* ---------------------------------------------------------*/


  converse KA0CM035 ;


   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM035.VAGen_EZEMSG = " ";
  KA0CM035.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

  KA0CS01(); /* check standard pf keys*/
  KA0CM035.KA0CMMSG = KA0CW01.KA0CWMSG;

  if (converseVar.validationMsgNum != 0 /* error or warning*/
   || KA0CM035.KA0CMMSG != " ")         /* error or warning*/
    exit stack;
  end

    /* ----------------- edit --------------------------*/

    /* check billing flags - all required, must be y or n*/
  KA0CS16();

    /* if bill to flag not set in setup company address,*/
    /* check entered billing address*/

  if (KA0CM015.KA0CMBF1 != "Y"
   && KA0CM015.KA0CMBF2 != "Y")
    KA0CS17(); /* check address*/
  end


     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KA0CM035.KA0CMMSG == " "
   && converseVar.validationMsgNum == 0
   && KA0CW01.KA0CWEDT == "X")
    /* next sentence*/
  else
    if (KA0CM035.KA0CMMSG == " "
     && converseVar.validationMsgNum == 0)
      if (KA0CM015.KA0CMBF1 == "N"
       && KA0CM015.KA0CMBF2 == "N")
        set KA0CM035.XXX-ADDR1 cursor;
      else
        set KA0CM035.CU-BILL-IND cursor;
      end
      KA0CW01.KA0CWEDT = "X"; /* set good edit flag*/
      KA0CM035.KA0CMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM";
    end
  end


    /* -----------   end of process ka0c035  ------------*/
end // end KA0C035

// converse long billing info
Function KA0C036()

   /* ------------  process ka0c036 start ------------*/

   /* ---------------------------------------------------------*/
    /* before stage: no processing                           **/
   /* ---------------------------------------------------------*/


  converse KA0CM036 ;

   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM036.VAGen_EZEMSG = " ";
  KA0CM036.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

  KA0CS01(); /* check standard pf keys*/
  KA0CM036.KA0CMMSG = KA0CW01.KA0CWMSG;

  if (converseVar.validationMsgNum != 0 /* error or warning*/
   || KA0CM036.KA0CMMSG != " ")         /* error or warning*/
    exit stack;
  end

    /* ----------------- edit --------------------------*/

  KA0CSN4(); /* move m036 fields to m035*/

    /* check billing flags - all required, must be y or n*/
  KA0CS16();

    /* if bill to flag not set in setup company address,*/
    /* check entered billing address*/

  if (KA0CM015.KA0CMBF1 != "Y"
   && KA0CM015.KA0CMBF2 != "Y")
    KA0CSN6(); /* check address*/
  end


     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KA0CM036.KA0CMMSG == " "
   && converseVar.validationMsgNum == 0
   && KA0CW01.KA0CWEDT == "X")
    /* next sentence*/
  else
    if (KA0CM036.KA0CMMSG == " "
     && converseVar.validationMsgNum == 0)
      if (KA0CM015.KA0CMBF1 == "N"
       && KA0CM015.KA0CMBF2 == "N")
        set KA0CM036.XXX-ADDR1 cursor;
      else
        set KA0CM036.KUCSTMT cursor;
      end
      KA0CW01.KA0CWEDT = "X"; /* set good edit flag*/
      KA0CM036.KA0CMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM";
    end
  end


    /* -----------   end of process ka0c036  ------------*/
end // end KA0C036

// init company principals map
Function KA0C040()


   /* -------- start process ka0c040 --------------*/

   /* -----------------------------------------------------------*/
      /* execute processing: initialize fields.                 **/
   /* -----------------------------------------------------------*/


      /* set date in map, initialize work flds*/

  set KA0CM045 initial; /* clear map fields*/
  KA0CW01.KA0CWEDT = " "; /* clear good edit flag*/
  KA0CW01.KA0CWPF3 = " "; /* clear data lost flag*/
  KA0CW01.KA0CWPF4 = " "; /* clear data lost flag*/
  KA0CWIX1 = 0; /* init work index*/
  KA0CM045.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date if map*/

     /* carry forward company and parent data*/

  KA0CM045.KUKPCOID = KA0CM015.KUKPCOID; /* parent co id*/
  KA0CM045.KUKPCONM = KA0CM015.KUKPCONM; /* parent co name*/
  KA0CM045.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KA0CM045.KUCCONM = KA0CM015.KUCCONM; /* company name*/
  KA0CM045.KUCCOANM = KA0CM015.KUCCOANM; /* company dba name*/

   /* ------------  end of process ka0c040 --------------*/

end // end KA0C040

// converse co. principals map
Function KA0C045()


   /* ------------  process ka0c045 start ------------*/

   /* ---------------------------------------------------------*/
    /* before stage: no processing                           **/
   /* ---------------------------------------------------------*/


  converse KA0CM045 ;


   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM045.VAGen_EZEMSG = " ";
  KA0CM045.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

  if (converseVar.eventKey is pf13) /* continue to optional data menu*/
    exit stack;
  end

  KA0CS01(); /* check standard pf keys*/
  KA0CM045.KA0CMMSG = KA0CW01.KA0CWMSG;

  if (converseVar.validationMsgNum != 0 /* error or warning*/
   || KA0CM045.KA0CMMSG != " ")         /* error or warning*/
    exit stack;
  end

    /* ----------------- edit --------------------------*/

    /* check spouses guarantee code*/
    /* check guarantee code*/
      /* (must be y or n if present)*/
    /* check guarantee date*/
      /* (range check month and day if present)*/
    /* check social security number - must fill if present*/
    /* principal title and principal name*/
      /* (must be present if any data present)*/

  KA0CS18(); /* edits performed in stmt grp*/

     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KA0CM045.KA0CMMSG == " "
   && converseVar.validationMsgNum == 0
   && KA0CW01.KA0CWEDT == "X")
    /* next sentence*/
  else
    if (KA0CM045.KA0CMMSG == " "
     && converseVar.validationMsgNum == 0)
      set KA0CM045.KUHPRNM cursor;
      KA0CW01.KA0CWEDT = "X"; /* set good edit flag*/
      KA0CM045.KA0CMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM";
    end
  end


    /* -----------   end of process ka0c045  ------------*/


end // end KA0C045

// clear optional data fields
Function KA0C050()


   /* -------- start process ka0c050 --------------*/

   /* -----------------------------------------------------------*/
      /* execute processing: initialize fields.                 **/
   /* -----------------------------------------------------------*/

      /* set date in map, initialize work flds*/

  set KA0CM055 initial; /* clear map fields*/
  KA0CW01.KA0CWEDT = " "; /* clear good edit flag*/
  KA0CW01.KA0CWPF3 = " "; /* clear data lost flag*/
  KA0CW01.KA0CWPF4 = " "; /* clear data lost flag*/
  KA0CM055.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date if map*/

   /* ------------  end of process ka0c050 --------------*/

end // end KA0C050

// converse company option map
Function KA0C055()


   /* ------------  process ka0c055 start ------------*/

   /* ---------------------------------------------------------*/
    /* before stage: no processing                           **/
   /* ---------------------------------------------------------*/

  converse KA0CM055 ;


   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM055.VAGen_EZEMSG = " ";
  KA0CM055.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

  if (converseVar.eventKey is pf2 /* exit-add data*/
   && KA0CM055.KA0CMCRO == " "    
   && KA0CM055.KA0CMBUY == " ")  
    exit stack;
  end

  KA0CS01(); /* check standard pf keys*/
  KA0CM055.KA0CMMSG = KA0CW01.KA0CWMSG;

    /* -----------   end of process ka0c055 ------------*/


end // end KA0C055

// init credit data map
Function KA0C060()


   /* -------- start process ka0c060 --------------*/

   /* -----------------------------------------------------------*/
      /* execute processing: initialize fields.                 **/
   /* -----------------------------------------------------------*/


      /* set date in map, initialize work flds*/

  set KA0CM065 initial; /* clear map fields*/
  KA0CW01.KA0CWEDT = " "; /* clear good edit flag*/
  KA0CW01.KA0CWPF3 = " "; /* clear data lost flag*/
  KA0CW01.KA0CWPF4 = " "; /* clear data lost flag*/
  KA0CM065.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date if map*/

     /* carry forward company and parent data*/

  KA0CM065.KUKPCOID = KA0CM015.KUKPCOID; /* parent co id*/
  KA0CM065.KUKPCONM = KA0CM015.KUKPCONM; /* parent co name*/
  KA0CM065.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KA0CM065.KUCCONM = KA0CM015.KUCCONM; /* company name*/
  KA0CM065.KUCCOANM = KA0CM015.KUCCOANM; /* company dba name*/

   /* ------------  end of process ka0c060 --------------*/

end // end KA0C060

// converse company credit map
Function KA0C065()


   /* ------------  process ka0c065 start ------------*/

   /* ---------------------------------------------------------*/
    /* before stage: no processing                           **/
   /* ---------------------------------------------------------*/


  converse KA0CM065 ;


   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM065.VAGen_EZEMSG = " ";
  KA0CM065.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

  if (converseVar.eventKey is pf13) /* exit to optional data menu*/
    /* next sentence*/
  else
    KA0CS01(); /* check standard pf keys*/
    KA0CM065.KA0CMMSG = KA0CW01.KA0CWMSG;
  end

  if (converseVar.validationMsgNum != 0 /* error or warning*/
   || KA0CM065.KA0CMMSG != " ")         /* error or warning*/
    exit stack;
  end

    /* ----------------- edit --------------------------*/


   /* if any letter of credit flds present, all*/
    /* letter of credit flds must be present.*/
  set KA0CM065.KA0CMLEM initialAttributes;
  set KA0CM065.KA0CMLED initialAttributes;
  set KA0CM065.KA0CMLEY initialAttributes;
  set KA0CM065.KA0CMLXM initialAttributes;
  set KA0CM065.KA0CMLXD initialAttributes;
  set KA0CM065.KA0CMLXY initialAttributes;
  set KA0CM065.KUCLCAMT initialAttributes;
   /* ---------------------- y2k out begin ------------------*/
   /* IF KA0CM065.KA0CMLEM GT 0*/
    /* OR KA0CM065.KA0CMLED GT 0*/
    /* OR KA0CM065.KA0CMLEY GT 0*/
    /* OR KA0CM065.KA0CMLXM GT 0*/
    /* OR KA0CM065.KA0CMLXD GT 0*/
    /* OR KA0CM065.KA0CMLXY GT 0*/
    /* OR KA0CM065.KUCLCAMT GT 0;*/
    /* KA0CS21;                        /* edit all letter of credit flds*/
   /* END;*/
   /* ---------------------- y2k out end   ------------------*/
   /* ---------------------- y2k in begin  ------------------*/
  if (KA0CM065.KA0CMLEM == 0
   && KA0CM065.KA0CMLED == 0
   && KA0CM065.KA0CMLEY == 0
   && KA0CM065.KA0CMLXM == 0
   && KA0CM065.KA0CMLXD == 0
   && KA0CM065.KA0CMLXY == 0
   && KA0CM065.KUCLCAMT == 0)
    /* next sentence*/
  else
    KA0CS21(); /* edit all letter of credit flds*/
  end
   /* ---------------------- y2k in end    ------------------*/

     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KA0CM065.KA0CMMSG == " "
   && converseVar.validationMsgNum == 0
   && converseVar.eventKey is pf13) /* exit to opt menu*/
    exit stack;
  end

  if (KA0CM065.KA0CMMSG == " "
   && converseVar.validationMsgNum == 0
   && KA0CW01.KA0CWEDT == "X")
    /* next sentence*/
  else
    if (KA0CM065.KA0CMMSG == " "
     && converseVar.validationMsgNum == 0)
      set KA0CM065.KUCLCAMT cursor;
      KA0CW01.KA0CWEDT = "X"; /* set good edit flag*/
      KA0CM065.KA0CMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM";
    end
  end


    /* -----------   end of process ka0c065  ------------*/


end // end KA0C065

// init company depts map
Function KA0C070()


   /* -------- start process ka0c070 --------------*/

   /* -----------------------------------------------------------*/
      /* execute processing: initialize fields.                 **/
   /* -----------------------------------------------------------*/


      /* set date in map, initialize work flds*/

   /* map cleared, headings initialized in before stage*/
   /* of ka0cm075*/

  KA0CM075.KA0CMSEQ[1] = 1; /* set first line number*/
  KA0CW01.KA0CWEDT = " "; /* clear good edit flag*/
  KA0CW01.KA0CWPF3 = " "; /* clear data lost flag*/
  KA0CW01.KA0CWPF4 = " "; /* clear data lost flag*/
  KA0CM075.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date if map*/


   /* ------------  end of process ka0c070 --------------*/

end // end KA0C070

// converse company depts map
Function KA0C075()


   /* ------------  process ka0c075 start ------------*/

   /* --------------  before stage  ---------------------------*/
    /* if no msg's, set line sequence numbers/build page,   **/
    /* else redisplay with msg*/

  if (KA0CM075.KA0CMMSG == " "
   && KA0CM075.VAGen_EZEMSG == " "
   && converseVar.validationMsgNum == 0)
    KA0CS22(); /* set line numbers/build page*/
  end


  converse KA0CM075 ;


   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM075.VAGen_EZEMSG = " ";
  KA0CM075.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

    /* edit data before exit or paging*/
  if (converseVar.eventKey is pf13 /* exit to optional data menu*/
   || converseVar.eventKey is pf7  /* page back*/
   || converseVar.eventKey is pf8) /* page forward*/
     /* next sentence               ; edit before exit*/
  else
    KA0CS01(); /* check other pf keys*/
    KA0CM075.KA0CMMSG = KA0CW01.KA0CWMSG;
  end

  if (converseVar.validationMsgNum != 0 /* invalid pf key*/
   || KA0CM075.KA0CMMSG != " ")         /* security error*/
    exit stack;
  end

    /* ----------------- edit --------------------------*/

  KA0CS23(); /* upward adjust rows/rebuild work*/

  KA0CWIX1 = 05; /* reset counter*/

   /* nike dept code -req (at least once), if present*/
    /* must be in table*/
   /* cust dept and name - opt*/

  while (KA0CWIX1 >= 1)
    set KA0CM075.KA0CMXNX[KA0CWIX1] initialAttributes;
    if (KA0CM075.KA0CMXNX[KA0CWIX1] > " "
     || KA0CM075.KUJSLFID[KA0CWIX1] > " "
     || KA0CM075.KUJSLFNM[KA0CWIX1] > " ")
      KA0CS24(); /* edit dept row*/
    end
    KA0CWIX1 = KA0CWIX1 - 1;
  end

     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

     /* check for exit to menu, or paging*/
  if (KA0CM075.KA0CMMSG == " ")
    if (converseVar.eventKey is pf13 /* to opt menu*/
     || converseVar.eventKey is pf7  /* page back*/
     || converseVar.eventKey is pf8) /* page forward*/
      exit stack;
    end
  end

  if (KA0CM075.KA0CMMSG == " "
   && KA0CW01.KA0CWEDT == "X"
   && converseVar.eventKey is pf12)
    /* next sentence*/
  else
    if (KA0CM075.KA0CMMSG == " ")
      set KA0CM075.KA0CMXNX[1] cursor;
      KA0CW01.KA0CWEDT = "X"; /* set good edit flag*/
      KA0CM075.KA0CMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM";
    end
  end


    /* -----------   end of process ka0c075  ------------*/


end // end KA0C075

// init company buy map
Function KA0C080()


   /* -------- start process ka0c080 --------------*/

   /* -----------------------------------------------------------*/
      /* execute processing: initialize fields.                 **/
   /* -----------------------------------------------------------*/


      /* set date in map, initialize work flds*/

   /* map cleared, headings initialized in before stage*/
   /* of ka0cm085*/

  KA0CW01.KA0CWEDT = " "; /* clear good edit flag*/
  KA0CW01.KA0CWPF3 = " "; /* clear data lost flag*/
  KA0CW01.KA0CWPF4 = " "; /* clear data lost flag*/
  KA0CW01.KA0CWIX2 = 1; /* set index*/
  KA0CM085.KA0CMDT = VGVar.currentShortGregorianDate; /* move sys date if map*/


   /* ------------  end of process ka0c080 --------------*/

end // end KA0C080

// converse company buy map
Function KA0C085()


   /* ------------  process ka0c085 start ------------*/

   /* --------------  before stage  ---------------------------*/
    /* if no msg's, set line sequence numbers/build page,   **/
    /* else redisplay with msg*/

  if (KA0CM085.KA0CMMSG == " "
   && KA0CM085.VAGen_EZEMSG == " "
   && converseVar.validationMsgNum == 0)
    KA0CS52(); /* set line numbers/build page*/
  end


  converse KA0CM085 ;


   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KA0CM085.VAGen_EZEMSG = " ";
  KA0CM085.KA0CMMSG = " ";
  KA0CW01.KA0CWMSG = " ";

   /* --------------- check aid byte ---------------------*/

    /* edit data before exit or paging*/
  if (converseVar.eventKey is pf13 /* exit to optional data menu*/
   || converseVar.eventKey is pf7  /* page back*/
   || converseVar.eventKey is pf8) /* page forward*/
     /* next sentence               ; edit before exit*/
  else
    KA0CS01(); /* check other pf keys*/
    KA0CM085.KA0CMMSG = KA0CW01.KA0CWMSG;
  end

  if (converseVar.validationMsgNum != 0 /* invalid pf key*/
   || KA0CM085.KA0CMMSG != " ")         /* security error*/
    exit stack;
  end


    /* ----------------- edit --------------------------*/
  KA0CWIX1 = 03; /* reset counter*/
  move KA0CWIX2 to KA0CWIX3 withV60Compat; /* save counter*/
  KA0CWIX2 = KA0CWIX2 - 1;

  while (KA0CWIX1 >= 1)
    if (KA0CM085.KUJXLCND[KA0CWIX1] == " "
     && KA0CM085.KUJXSPND[KA0CWIX1] == " "
     && KA0CM085.KUJXQAND[KA0CWIX1] == " "
     && KA0CM085.KA0CMLC1[KA0CWIX1] == " "
     && KA0CM085.KA0CMLC2[KA0CWIX1] == " "
     && KA0CM085.KA0CMLC3[KA0CWIX1] == " "
     && KA0CM085.KA0CMLC4[KA0CWIX1] == " "
     && KA0CM085.KA0CMSP1[KA0CWIX1] == " "
     && KA0CM085.KA0CMSP2[KA0CWIX1] == " "
     && KA0CM085.KA0CMSP3[KA0CWIX1] == " "
     && KA0CM085.KA0CMSP4[KA0CWIX1] == " "
     && KA0CM085.KA0CMQA1[KA0CWIX1] == " "
     && KA0CM085.KA0CMQA2[KA0CWIX1] == " "
     && KA0CM085.KA0CMQA3[KA0CWIX1] == " "
     && KA0CM085.KA0CMQA4[KA0CWIX1] == " ")
       /* next sentence        ; no changes*/
    else
      KA0CS54(); /* edit dept row*/
    end
    KA0CWIX1 = KA0CWIX1 - 1;
    KA0CWIX2 = KA0CWIX2 - 1;
  end

  move KA0CWIX3 to KA0CWIX2 withV60Compat; /* set index back to saved value*/

     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

     /* check for exit to menu, or paging*/
  if (KA0CM085.KA0CMMSG == " ")
    if (converseVar.eventKey is pf13 /* to opt menu*/
     || converseVar.eventKey is pf7  /* page back*/
     || converseVar.eventKey is pf8) /* page forward*/
      exit stack;
    end
  end

  if (KA0CM085.KA0CMMSG == " "
   && KA0CW01.KA0CWEDT == "X"
   && converseVar.eventKey is pf12)
    /* next sentence*/
  else
    if (KA0CM085.KA0CMMSG == " ")
      set KA0CM085.KUJXLCND[1] cursor;
      KA0CW01.KA0CWEDT = "X"; /* set good edit flag*/
      KA0CM085.KA0CMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM";
    end
  end


    /* -----------   end of process ka0c085  ------------*/


end // end KA0C085

// format and add company data
Function KA0C095()
   /* -------- start process ka0c095 --------------*/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled CUTAG REC creation.*/
    /* 08-22-96 kclar1 added vcmpny02 view for cu-ivc-pnt-ind*/

   /* *************************************************************/

   /* -----------------------------------------------------------*/
      /* execute processing: build and add company record       **/
      /* and audit trail record                                 **/
   /* -----------------------------------------------------------*/

  XX0XS01(); /* format date and time*/

  KA0CS29(); /* format company record*/

  set VCMPNY02 empty;
  move KUCREC to VCMPNY02 withV60Compat;
  VCMPNY02.CU-IVC-PRT-IND = "2";
  call "VCMPNY02" ("A ", SQLCA, VCMPNY02) {isNoRefresh = yes, isExternal = yes}; /* add company record*/

  if (SQLCA.VAGen_SQLCODE != 0) /* not good add*/
    KA0CW01.KA0CWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KA0CW01.KA0CWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1MAP = " ";
    KA0CW01.KA0CWKEY = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KA0CW01.KA0CWKEY;
    TA1REC.TA1LOC = "ADDING DB2 DCUST.VCMPNY01";
    TA1PGMNM = "KA0C095";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

  KA0CS26(); /* write audit record*/

  if (COMMAREA.CADLVL[2] == "Y") /* if adding NIL company*/
    KA0C096(); /* insert VDSTRB01 record*/
  end

   /* ------------  end of process ka0c095 --------------*/
end // end KA0C095

// add NIL dstrb data
Function KA0C096()
   /* -------- start process ka0c096 --------------*/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 03-13-92 CHELLM created.*/

   /* *************************************************************/

  call "IO4600" ("A ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* add company record*/

  if (SQLCA.VAGen_SQLCODE != 0) /* not good add*/
    KA0CW01.KA0CWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KA0CW01.KA0CWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VDSTRB01";
    TA1REC.TA1MAP = " ";
    KA0CW01.KA0CWKEY = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KA0CW01.KA0CWKEY;
    TA1REC.TA1LOC = "ADDING DB2 DCUST.VCMPNY01";
    TA1PGMNM = "KA0C096";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end



   /* ------------  end of process ka0c096 --------------*/
end // end KA0C096

// format and add comment data
Function KA0C100()
   /* -------- start process ka0c100 --------------*/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled CUTAG record creation KUXREC.*/

   /* *************************************************************/

   /* -----------------------------------------------------------*/
      /* execute processing: build and add comment data.        **/
      /* first comment is sales, second is credit               **/
   /* -----------------------------------------------------------*/

  KA0CWIX1 = 1;
  while (KA0CWIX1 <= 2) /* for sales or credit comment*/

    if (KA0CM025.KUECOMNT[KA0CWIX1] > " ") /* comment present?*/

      set KUEREC empty;
      if (KA0CWIX1 == 1)
        KUEREC.XNDCD = "SMNG"; /* sales comment*/
      end
      if (KA0CWIX1 == 2)
        KUEREC.XNDCD = "CRMN"; /* credit comment*/
      end
      KUEREC.KUECTYP = "C";
      KUEREC.KUECSEQ = 1;

      KA0CS32(); /* format comment/audit records*/

      call "IO0250" ("A ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes}; /* add comment record*/
       /* comment record*/
      if (SQLCA.VAGen_SQLCODE != 0) /* not good add*/
        KA0CW01.KA0CWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* syncpoint rollback*/
        SQLCA.SQLCAREC = KA0CW01.KA0CWSQL;
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCOMNT01";
        TA1REC.TA1MAP = " ";
        KA0CW01.KA0CWKEY = KUEREC.KUECMTID;
        TA1REC.TA1TBLKE = KA0CW01.KA0CWKEY;
        TA1REC.TA1LOC = "ADDING VCOMNT01 DEPT";
        TA1REC.TA1LOCAT[4] = KUEREC.XNDCD;
        TA1PGMNM = "KA0C100";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
      end

      KA0CS26(); /* write audit record*/


    end /* end if comment present*/
    KA0CWIX1 = KA0CWIX1 + 1;
  end

   /* ------------  end of process ka0c100 --------------*/
end // end KA0C100

// format and add principals data
Function KA0C105()
   /* -------- start process ka0c105 --------------*/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled CUTAG record creation KUXREC.*/

   /* *************************************************************/

   /* -----------------------------------------------------------*/
      /* execute processing: build and add principals data      **/
   /* -----------------------------------------------------------*/

  KA0CWIX1 = 1; /* reset counter*/

  while (KA0CWIX1 <= 5) /* for each possible principal*/

    if (KA0CW01.KA0CWSSN[KA0CWIX1] > 0 /* if principal present*/
     || KA0CW01.KA0CWPNM[KA0CWIX1] > " "
     || KA0CW01.KA0CWPTL[KA0CWIX1] > " "
     || KA0CW01.KA0CWGF1[KA0CWIX1] > " "
     || KA0CW01.KA0CWGF2[KA0CWIX1] > " "
     || KA0CW01.KA0CWGE[KA0CWIX1] > 0)

      KA0CS33(); /* format principal/audit record*/

         /* add principal*/
      call "IO0320" ("A ", SQLCA, KUHREC) {isNoRefresh = yes, isExternal = yes}; /* add principals record*/
      if (SQLCA.VAGen_SQLCODE != 0) /* not good add?*/
        KA0CW01.KA0CWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* syncpoint rollback*/
        SQLCA.SQLCAREC = KA0CW01.KA0CWSQL;
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VPRINC01";
        TA1REC.TA1MAP = " ";
        KA0CW01.KA0CWKEY = KUHREC.KUCCOID;
        TA1REC.TA1TBLKE = KA0CW01.KA0CWKEY;
        TA1REC.TA1LOC = "ADDING VPRINC01 SEQ";
        KA0CW01.KA0CWKEY = KUHREC.KUHSEQNO;
        TA1REC.TA1LOCAT[4] = KA0CW01.KA0CWKEY;
        TA1REC.TA1PGMNM = "KA0C105";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
      end

      KA0CS26(); /* write audit record*/


    end /* end if principal present*/
    KA0CWIX1 = KA0CWIX1 + 1;
  end

   /* ------------  end of process ka0c105 --------------*/
end // end KA0C105

// format and add department data
Function KA0C110()
   /* -------- start process ka0c110 --------------*/

   /* -----------------------------------------------------------*/
      /* execute processing: build and add department data      **/
   /* -----------------------------------------------------------*/

   /* ----------  format from work record -----------*/

  KA0CWIX1 = 1; /* reset counter*/

  while (KA0CWIX1 <= 30) /* for each possible dept*/

    if (KA0CW01.KA0CWNDP[KA0CWIX1] != " ") /* if dept present*/

      KA0CS34(); /* format department and audit*/

         /* add department*/
      call "IO0290" ("A ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* add department*/
      if (SQLCA.VAGen_SQLCODE != 0) /* not good add?*/
        KA0CW01.KA0CWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* syncpoint rollback*/
        SQLCA.SQLCAREC = KA0CW01.KA0CWSQL;
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VDEPT001";
        TA1REC.TA1MAP = " ";
        KA0CW01.KA0CWKEY = KUJREC.KUCCOID;
        TA1REC.TA1TBLKE = KA0CW01.KA0CWKEY;
        TA1REC.TA1LOC = "ADDING VDEPT001";
        KA0CW01.KA0CWKEY = KUJREC.XNXCD;
        TA1REC.TA1LOCAT[3] = KA0CW01.KA0CWKEY;
        TA1REC.TA1PGMNM = "KA0C110";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
      end

      KA0CS26(); /* write audit record*/

    end
    KA0CWIX1 = KA0CWIX1 + 1;
  end


   /* ----- transfer to add store  ----------*/

  if (COMMAREA.CADLVL[2] == "Y")
    KA0CW02.KA0CWCID = KUCREC.KUCCOID; /* pass company to store*/
    COMMAREA.CAUSERA = KA0CW02.KA0CWGRP;
    COMMAREA.CATOAP = "KM0N";
    XSEXIT(); /* transfer to add store*/
    KA0CM055.KA0CMMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
  else
    KA0CW02.KA0CWCID = KUCREC.KUCCOID; /* pass company to store*/
    COMMAREA.CAUSERA = KA0CW02.KA0CWGRP;
    COMMAREA.CATOAP = "KA0S";
    XSEXIT(); /* transfer to add store*/
    KA0CM055.KA0CMMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
  end


   /* ------------  end of process ka0c110 --------------*/
end // end KA0C110

// Init appl recs
Function KA0CS-INIT-RECS()
  /* ******************************************************************/
  /* *      Initialize all records used by KA0C*/
  /* ******************************************************************/

  set KUCREC empty;
  set KUEREC empty;
  set KUHREC empty;
  set KUJREC empty;
  set KUKREC empty;
  set KURREC empty;
  set KUZREC empty;
  set VDSTRB01 empty;
  set KA0CW01 empty;
  set KA0CW02 empty;
  set KA0CW04 empty;
  set KU0XW10 empty;
  set KU0XW30 empty;
  set XA0AW02 empty;
  set XX0XW01 empty;
  set XA1REC empty;
  set SQLCA empty;
  set TA1REC empty;
  set VZFC0001 empty;

  KA0CW01.KA0CWNXN = 0;
  KA0CW02.KA0CWCID = 0;
  KA0CW02.KA0CWSID = 0;
  KA0CW02.KA0CWDID = 0;
  KA0CW02.KA0CWOCP = 0;
  KA0CW02.KA0CWERR = 0;
end // end KA0CS-INIT-RECS

// check standard pf keys
Function KA0CS01()
    /* ---------- start stmt grp ka0cs01 -----------------*/

    /* statement group ka0ps01 - check valid entry key,*/
       /* do menu transfers if requested*/


  if (converseVar.eventKey is enter) /* enter - return to process*/
    return;
  else
    if (converseVar.eventKey is pa2) /* pa2 - refresh screen*/
      exit stack;
    else
      if (converseVar.eventKey is pf1) /* pf1 - help*/
        XSPF1();
        KA0CW01.KA0CWMSG = COMMAREA.CAMSG;
        COMMAREA.CATOAP = " "; /* 'help' not valid - reset*/
        exit stack;
      else
        if (converseVar.eventKey is pf3 /* pf3 - return to customer menu*/
         && KA0CW01.KA0CWPF3 == "X")    /* warning message sent*/
          KA0CW01.KA0CWPF3 = " "; /* reset warning flag*/
          COMMAREA.CATOAP = "KA0M";
          XSEXIT(); /* verify application and transfer*/
          COMMAREA.CATOAP = " "; /* ka0m not valid - reset*/
          KA0CW01.KA0CWMSG = COMMAREA.CAMSG;
          exit stack;
        else
          if (converseVar.eventKey is pf3) /* pf3 - return to customer menu*/
            KA0CW01.KA0CWPF3 = "X"; /* set warning flag*/
            converseLib.validationFailed(4); /* data will be lost warning*/
            exit stack;
          else
            if (converseVar.eventKey is pf4 /* pf4 - return to main menu*/
             && KA0CW01.KA0CWPF4 == "X")    /* warning message sent*/
              KA0CW01.KA0CWPF4 = " "; /* reset warning flag*/
              XSPF4();
              KA0CW01.KA0CWMSG = COMMAREA.CAMSG;
              COMMAREA.CATOAP = " "; /* menu appl invalid*/
              exit stack;
            else
              if (converseVar.eventKey is pf4) /* pf4 - return to main menu*/
                KA0CW01.KA0CWPF4 = "X"; /* set warning flag*/
                converseLib.validationFailed(4); /* data will be lost warning*/
                exit stack;
              else
                if (converseVar.eventKey is pf12) /* pf12 - confirm data entered*/
                  return;
                else
                  converseLib.validationFailed(3); /* invalid pf key*/
                end
              end
            end
          end
        end
      end
    end
  end

    /* -----------   end of stmt grp ka0cs01  ------------*/
end // end KA0CS01

// edit bill to flags
Function KA0CS02()

   /* ------------  stmt grp ka0cs02 start ------------*/

    /* check bill to address flags*/

  if (KA0CM015.KA0CMBF1 == "Y" /* check hq address flag*/
   || KA0CM015.KA0CMBF1 == "N")
    set KA0CM015.KA0CMBF1 initialAttributes;
    set KA0CM016.KA0CMBF1 initialAttributes;
  else
    set KA0CM015.KA0CMBF1 cursor, modified, bold;
    set KA0CM016.KA0CMBF1 cursor, modified, bold;
    KA0CM015.KA0CMMSG = "BILL TO ADDRESS MUST BE Y OR N";
    KA0CM016.KA0CMMSG = "BILL TO ADDRESS MUST BE Y OR N";
  end

  if (KA0CM015.KA0CMBF2 == "Y" /* check alt address flag*/
   || KA0CM015.KA0CMBF2 == "N")
    set KA0CM015.KA0CMBF2 initialAttributes;
    set KA0CM016.KA0CMBF2 initialAttributes;
  else
    set KA0CM015.KA0CMBF2 cursor, modified, bold;
    set KA0CM016.KA0CMBF2 cursor, modified, bold;
    KA0CM015.KA0CMMSG = "BILL TO ADDRESS MUST BE Y OR N";
    KA0CM016.KA0CMMSG = "BILL TO ADDRESS MUST BE Y OR N";
  end

  if (KA0CM015.KA0CMBF1 == "Y" /* check both = y*/
   && KA0CM015.KA0CMBF2 == "Y")
    set KA0CM015.KA0CMBF1 modified, bold;
    set KA0CM016.KA0CMBF1 modified, bold;
    set KA0CM015.KA0CMBF2 cursor, modified, bold;
    set KA0CM016.KA0CMBF2 cursor, modified, bold;
    KA0CM015.KA0CMMSG = "ONLY ONE ADDRESS MAY BE BILL TO";
    KA0CM016.KA0CMMSG = "ONLY ONE ADDRESS MAY BE BILL TO";
  end


    /* -----------   end stmt grp ka0cs02  ------------*/

end // end KA0CS02

// edit alternate address
Function KA0CS03()
   /* ------------  stmt grp ka0cs03 start ------------*/

    /* check alternate address - use xa0a - address appl*/

  set XA0AW02 empty; /* clear work fields*/
  XA0AW02.XXX-ADDR1 = KA0CM015.KA0CM-ALT-ADDR1;
  XA0AW02.XXX-ADDR2 = KA0CM015.KA0CM-ALT-ADDR2;
  XA0AW02.XXX-ADDR3 = KA0CM015.KA0CM-ALT-ADDR3;
  XA0AW02.XXXCITY = KA0CM015.KA0CM-CITY;
  XA0AW02.XSTCD = KA0CM015.KA0CM-STATE;
  XA0AW02.XXXZIP = KA0CM015.KA0CM-ZIP;
  XA0AW02.XCTCD = KA0CM015.XCTCD;
  XA0AW02.XA0AWFNC = "E"; /* request edit*/

  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address appl*/

  if (XA0AW02.XA0AWERR[8] != 0) /* check country code*/
    set KA0CM015.XCTCD cursor, modified, bold;
    KA0CM015.KA0CMMSG = "INVALID COUNTRY CODE";
  end
  if (XA0AW02.XA0AWERR[7] != 0) /* check zip code*/
    set KA0CM015.KA0CM-ZIP cursor, modified, bold;
    KA0CM015.KA0CMMSG = "INVALID ZIP CODE";
  end
  if (XA0AW02.XA0AWERR[6] != 0) /* check state code*/
    set KA0CM015.KA0CM-STATE cursor, modified, bold;
    KA0CM015.KA0CMMSG = "INVALID STATE CODE";
  end
  if (XA0AW02.XA0AWERR[5] != 0) /* check city code*/
    set KA0CM015.KA0CM-CITY cursor, modified, bold;
    KA0CM015.KA0CMMSG = "CITY REQUIRED";
  end
  if (XA0AW02.XA0AWERR[4] != 0) /* check address line*/
    set KA0CM015.KA0CM-ALT-ADDR3 cursor, modified, bold;
    KA0CM015.KA0CMMSG = "AT LEAST 1 ADDRESS LINE REQUIRED";
  end

  KA0CM015.KA0CM-ALT-ADDR1 = XA0AW02.XXX-ADDR1;
  KA0CM015.KA0CM-ALT-ADDR2 = XA0AW02.XXX-ADDR2;
  KA0CM015.KA0CM-ALT-ADDR3 = XA0AW02.XXX-ADDR3;

   /* ------------  stmt grp ka0cs03 end ------------*/
end // end KA0CS03

// edit hq address
Function KA0CS04()
   /* ------------ stmt grp ka0cs04 start ------------*/

    /* check headquarter address - use xa0a - address appl*/

  set XA0AW02 empty; /* clear work fields*/
  XA0AW02.XXX-ADDR1 = KA0CM015.KA0CM-HQ-ADDR1;
  XA0AW02.XXX-ADDR2 = KA0CM015.KA0CM-HQ-ADDR2;
  XA0AW02.XXX-ADDR3 = KA0CM015.KA0CM-HQ-ADDR3;
  XA0AW02.XXXCITY = KA0CM015.XXXCITY;
  XA0AW02.XSTCD = KA0CM015.XSTCD;
  XA0AW02.XXXZIP = KA0CM015.XXXZIP;
  XA0AW02.XCTCD = KA0CM015.XCTCD;
  XA0AW02.XA0AWFNC = "E"; /* request edit*/

  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address appl*/

  if (XA0AW02.XA0AWERR[8] != 0) /* check country code*/
    set KA0CM015.XCTCD cursor, modified, bold;
    KA0CM015.KA0CMMSG = "INVALID COUNTRY CODE";
  else
    set KA0CM015.XCTCD initialAttributes;
  end
  if (XA0AW02.XA0AWERR[7] != 0) /* check zip code*/
    set KA0CM015.XXXZIP cursor, modified, bold;
    KA0CM015.KA0CMMSG = "INVALID ZIP CODE";
  else
    set KA0CM015.XXXZIP initialAttributes;
  end
  if (XA0AW02.XA0AWERR[6] != 0) /* check state code*/
    set KA0CM015.XSTCD cursor, modified, bold;
    KA0CM015.KA0CMMSG = "INVALID STATE CODE";
  else
    set KA0CM015.XSTCD initialAttributes;
  end
  if (XA0AW02.XA0AWERR[5] != 0) /* check city code*/
    set KA0CM015.XXXCITY cursor, modified, bold;
    KA0CM015.KA0CMMSG = "CITY REQUIRED";
  else
    set KA0CM015.XXXCITY initialAttributes;
  end
  if (XA0AW02.XA0AWERR[4] != 0) /* check address line*/
    set KA0CM015.KA0CM-HQ-ADDR3 cursor, modified, bold;
    KA0CM015.KA0CMMSG = "AT LEAST 1 ADDRESS LINE REQUIRED";
  else
    set KA0CM015.KA0CM-HQ-ADDR3 initialAttributes;
  end

  KA0CM015.KA0CM-HQ-ADDR1 = XA0AW02.XXX-ADDR1;
  KA0CM015.KA0CM-HQ-ADDR2 = XA0AW02.XXX-ADDR2;
  KA0CM015.KA0CM-HQ-ADDR3 = XA0AW02.XXX-ADDR3;

   /* ---------- stmt grp ka0cs04 end ------------*/
end // end KA0CS04

// edit company number
Function KA0CS05()
   /* ------------ stmt grp ka0cs05 start ------------*/


   /* generate company id if not entered*/
  if (KA0CM015.KUCCOID == 0)
    if (KA0CW01.KA0CWIN1 == "X") /* gen'd already*/
      KA0CM015.KUCCOID = KURREC.KURCNEXT - 1;
      KA0CM016.KUCCOID = KA0CM015.KUCCOID;
    else
      KA0CS07(); /* generate new number*/
    end
  end

   /* check company number if user entered - must not exist*/

  if (KA0CW01.KA0CWIN1 == "X") /* generated company number*/
     /* next sentence - already verified*/
  else
    KUCREC.KUCCOID = KA0CM015.KUCCOID; /* set company key*/
    KA0CS08(); /* read company*/

    if (SQLCA.VAGen_SQLCODE == 0)
      set KA0CM015.KUCCOID cursor, modified, bold;
      set KA0CM016.KUCCOID cursor, modified, bold;
      KA0CM015.KA0CMMSG = "COMPANY ID ALREADY EXISTS";
      KA0CM016.KA0CMMSG = "COMPANY ID ALREADY EXISTS";
      return;
    end
  end

    /* edit for required and valid legal entity*/

  if (COMMAREA.CADLVL[3] == "Y") /* Nike Canada Customer*/
    KA0CM015.XLECD = "03";
  else
    if (COMMAREA.CADLVL[2] == "Y") /* nil company*/
      KA0CM016.XLECD = "02";
    else
      if (COMMAREA.CADLVL[1] == "Y") /* cole haan*/
        KA0CM015.XLECD = "08";
      else
        if (COMMAREA.CADLVL[1] == "N" /* nike inc or side 1 people*/
         && COMMAREA.CADLVL[2] == "N" 
         && KA0CM015.KUCCOID > 0)     /* have company id*/
          if (KA0CM015.XLECD == " ") /* blank legal entity*/
            set KA0CM015.XLECD cursor, modified, bold;
            KA0CM015.KA0CMMSG = "LEGAL ENTITY MUST BE ENTERED";
            return;
          else
            if (KA0CM015.XLECD in XLETBL.XLECD
             && XLETBL.XXXSTAT[sysVar.arrayIndex] == "A")
              if (XLETBL.XLECD[sysVar.arrayIndex] == "01"
               || XLETBL.XLECD[sysVar.arrayIndex] == "05")
               /* next sentence - valid entry*/
              else
                set KA0CM015.XLECD cursor, modified, bold;
                KA0CM015.KA0CMMSG = "LEGAL ENTITY NOT VALID";
                return;
              end
             /* next sentence - valid entry*/
            else
              set KA0CM015.XLECD cursor, modified, bold;
              converseLib.validationFailed(17); /* entry not in table*/
              return;
            end
          end
        end
      end
    end
  end

    /* edit for valid cole haan company id ranges*/

  if (COMMAREA.CADLVL[1] == "Y") /* if cole haan*/
    if (KA0CM015.KUCCOID > 7999999 /* cole haan numbers*/
     && KA0CM015.KUCCOID < 9000000)
       /* next sentence - have valid customer number*/
    else
      set KA0CM015.KUCCOID cursor, modified, bold;
      KA0CM015.KA0CMMSG = "COMPANY ID NOT BETWEEN 8000000 & 9000000";
      return;
    end
  else /* not cole haan*/
    if (COMMAREA.CADLVL[2] == "Y") /* nil user*/
      if (KA0CM016.KUCCOID > 7999999 /* cole haan numbers*/
       && KA0CM016.KUCCOID < 9000000)
        set KA0CM016.KUCCOID cursor, modified, bold;
        KA0CM016.KA0CMMSG = "COMPANY ID FOR COLE HAAN COMPANY";
        return;
      end /* not cole haan on nil screen*/
    else
      if (KA0CM015.KUCCOID > 7999999 /* cole haan numbers*/
       && KA0CM015.KUCCOID < 9000000)
        set KA0CM015.KUCCOID cursor, modified, bold;
        KA0CM015.KA0CMMSG = "COMPANY ID FOR COLE HAAN COMPANY";
        return;
      end
    end
  end

    /* edit for valid side 1 company id ranges*/

  if (KA0CM015.XLECD == "05") /* if side 1*/
    if (KA0CM015.KUCCOID > 8999999 /* side 1 numbers*/
     && KA0CM015.KUCCOID <= 9999999)
       /* next sentence - have valid customer number*/
    else
      set KA0CM015.KUCCOID cursor, modified, bold;
      KA0CM015.KA0CMMSG = "COMPANY ID NOT BETWEEN 9000000 & 9999999";
      return;
    end
  else /* not side 1*/
    if (COMMAREA.CADLVL[2] == "Y") /* on nil screen*/
      if (KA0CM016.KUCCOID > 8999999 /* side 1  numbers*/
       && KA0CM016.KUCCOID < 9999999)
        set KA0CM016.KUCCOID cursor, modified, bold;
        KA0CM016.KA0CMMSG = "COMPANY ID FOR SIDE 1 COMPANY";
        return;
      end
    else /* not side 1*/
      if (KA0CM015.KUCCOID > 8999999 /* side 1  numbers*/
       && KA0CM015.KUCCOID < 9999999)
        set KA0CM015.KUCCOID cursor, modified, bold;
        KA0CM015.KA0CMMSG = "COMPANY ID FOR SIDE 1 COMPANY";
        return;
      end
    end
  end

   /* check parent number if user entered - must not exist*/

  KUKREC.KUKPCOID = KA0CM015.KUCCOID; /* set company key*/
  KA0CS09(); /* read parent*/

  if (SQLCA.VAGen_SQLCODE == 0)
    set KA0CM015.KUCCOID cursor, modified, bold;
    set KA0CM016.KUCCOID cursor, modified, bold;
    KA0CM015.KA0CMMSG = "COMPANY ID ALREADY EXISTS AT PARENT LEVEL";
    KA0CM016.KA0CMMSG = "COMPANY ID ALREADY EXISTS AT PARENT LEVEL";
    return;
  end

  set KA0CM015.KUCCOID initialAttributes;
  set KA0CM016.KUCCOID initialAttributes;
  set KA0CM015.XLECD initialAttributes;
  set KA0CM016.XLECD initialAttributes;

   /* ------------ stmt grp ka0cs05 end ------------*/
end // end KA0CS05

// edit parent company id
Function KA0CS06()
   /* ------------ stmt grp ka0cs06 start ------------*/

      /* check parent company id - must be valid if entered*/

  KUKREC.KUKPCOID = KA0CM015.KUKPCOID; /* set key*/
  KA0CS09(); /* read parent*/
  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    set KA0CM015.KUKPCOID initialAttributes;
    set KA0CM016.KUKPCOID initialAttributes;
    KA0CM015.KUKPCONM = KUKREC.KUKPCONM;
    KA0CM016.KUKPCONM = KUKREC.KUKPCONM;
  else
    set KA0CM015.KUKPCOID cursor, modified, bold;
    set KA0CM016.KUKPCOID cursor, modified, bold;
    KA0CM015.KA0CMMSG = "INVALID PARENT COMPANY ID";
    KA0CM016.KA0CMMSG = "INVALID PARENT COMPANY ID";
  end

   /* ------------ stmt grp ka0cs06 end ------------*/
end // end KA0CS06

// generate company id
Function KA0CS07()
    /* ----  start stmt grp ka0cs07 - company id generation --*/

   /* -------- read next id table ---------------*/

  set KURREC empty;
  call "IO0390" ("S ", SQLCA, KURREC) {isNoRefresh = yes, isExternal = yes}; /* read next id db2 table*/
  if (SQLCA.VAGen_SQLCODE != 0) /* record not found, or bad io*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1LOC = "NO KEY FOR VNXTID01 TBL";
    TA1REC.TA1PGMNM = "KA0CS07";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VNXTID01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1TBLKE = " ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

   /* --- check for existing company/parent id ---------*/
   /* if exists, increment id and try again*/

  KUCREC.KUCCOID = KURREC.KURCNEXT; /* set company key*/
  KA0CW01.KA0CWIN1 = " "; /* clear company # generated ind*/

  while (KA0CW01.KA0CWIN1 == " ")
    KA0CS08(); /* read cmpny table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KUCREC.KUCCOID = KUCREC.KUCCOID + 1; /* already exists - try again*/
    else
      KUKREC.KUKPCOID = KUCREC.KUCCOID;
      KA0CS09(); /* read parnt table*/
      if (SQLCA.VAGen_SQLCODE == 100)
        KA0CW02.KA0CWCID = KUCREC.KUCCOID;
        KA0CW01.KA0CWIN1 = "X"; /* set generated flag*/
      else
        KUCREC.KUCCOID = KUCREC.KUCCOID + 1;
      end
    end
  end

   /* -----------  update next id table --------*/
     /* move generated value to commarea, update ctl record*/
     /* with next available company number*/

  KA0CW02.KA0CWCID = KUCREC.KUCCOID; /* commarea work company #*/
  KA0CM015.KUCCOID = KUCREC.KUCCOID; /* map company number*/
  KA0CM016.KUCCOID = KUCREC.KUCCOID; /* map company number*/

  KURREC.KURCNEXT = KUCREC.KUCCOID + 1; /* update next avail. company id*/
  XX0XS01(); /* convert csp date/time*/
  KURREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KURREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO0390" ("U ", SQLCA, KURREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* good update*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(55); /* updated since last reference*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOC = "UPDATE OF VNXTID01 TBL";
      TA1REC.TA1PGMNM = "KA0CS07";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VNXTID01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1TBLKE = " ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

    /* ------  end stmt grp ka0cs07 - company id gen. ----*/

end // end KA0CS07

// read company table
Function KA0CS08()
   /* ------------ stmt grp ka0cs08 start ------------*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KA0CS08";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1MAP = " ";
    KA0CW01.KA0CWKEY = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KA0CW01.KA0CWKEY;
    TA1LOC = "READING DB2 TBL DCUST.VCMPNY";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end


   /* ------------ stmt grp ka0cs08 end ------------*/
end // end KA0CS08

// read parent company table
Function KA0CS09()
   /* ------------ stmt grp ka0cs09 start ------------*/

  call "IO0030" ("S ", SQLCA, KUKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0 /* record found*/
   || SQLCA.VAGen_SQLCODE == 100) /* record not found*/
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KA0CS09";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPARNT01";
    TA1REC.TA1MAP = " ";
    KA0CW01.KA0CWKEY = KUKREC.KUKPCOID;
    TA1REC.TA1TBLKE = KA0CW01.KA0CWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ------------ stmt grp ka0cs09 end ------------*/
end // end KA0CS09

// check credit service reps
Function KA0CS10()
   /* ------------ stmt grp ka0cs10 start ------------*/

    /* check credit service reps - must be valid if entered*/
    /* 1st entry - credit service rep - must be present*/
    /* 2rd entry - credit analyst rep - must be present*/

  set KA0CM025.XCECD initialAttributes;
  if (KA0CM025.XCECD > " ")
    if (KA0CM025.XCECD in XCETBL.XCECD)
      if (XCETBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* next sentence*/
      else
        KA0CM025.KA0CMMSG = "INACTIVE CREDIT ANALYST REP CODE";
        set KA0CM025.XCECD cursor, modified, bold;
      end
    else
      KA0CM025.KA0CMMSG = "INVALID CREDIT ANALYST REP CODE";
      set KA0CM025.XCECD cursor, modified, bold;
    end
  else
    KA0CM025.KA0CMMSG = "CREDIT ANALYST REP CODE REQUIRED";
    set KA0CM025.XCECD cursor, modified, bold;
  end


  set KA0CM025.XCUCD initialAttributes;
  if (KA0CM025.XCUCD > " ")
    if (KA0CM025.XCUCD in XCUTBL.XCUCD)
      if (XCUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (XCUTBL.XCURMGR[sysVar.arrayIndex] == "AA" /* c & a rep*/
         || XCUTBL.XCURMGR[sysVar.arrayIndex] == "JS70") /* coll rep*/
          KA0CM025.KA0CMMSG = "INVALID CREDIT SERVICE REP CODE";
          set KA0CM025.XCUCD cursor, modified, bold;
        else
          if (XCUTBL.XCRCD[sysVar.arrayIndex] == KA0CM025.XCRCD)
             /* next sentence*/
          else
            KA0CM025.KA0CMMSG = "CR CREG AND CR RESP MUST MATCH";
            set KA0CM025.XCRCD modified, bold;
            set KA0CM025.XCUCD cursor, modified, bold;
          end
        end
      else
        KA0CM025.KA0CMMSG = "INACTIVE CREDIT SERVICE REP CODE";
        set KA0CM025.XCUCD cursor, modified, bold;
      end
    else
      KA0CM025.KA0CMMSG = "INVALID CREDIT SERVICE REP CODE";
      set KA0CM025.XCUCD cursor, modified, bold;
    end
  else
    KA0CM025.KA0CMMSG = "CREDIT SERVICE REP CODE REQUIRED";
    set KA0CM025.XCUCD cursor, modified, bold;
  end

   /* ------------ stmt grp ka0cs10 end ------------*/
end // end KA0CS10

// edit dun and bradstreet fields
Function KA0CS11()
   /* ---------- stmt grp ka0cs11 start -------------------*/

    /* check duns number*/
  if (KA0CM025.KUCACYNR > 0)
    /* next sentence*/
  else
    KA0CM025.KA0CMMSG = "DUNS NUMBER REQUIRED";
    set KA0CM025.KUCACYNR cursor, modified, bold;
  end

    /* check dun and bradstreet rating*/
  if (KA0CM025.KUCACYRT > " ")
    /* next sentence*/
  else
    KA0CM025.KA0CMMSG = "DUN AND BRADSTREET RATING REQUIRED";
    set KA0CM025.KUCACYRT cursor, modified, bold;
  end

    /* check level (p or c)*/
  if (KA0CM025.KUCLVIND == "P")
    if (KA0CM025.KUKPCOID > 0)
      /* next sentence*/
    else
      KA0CM025.KA0CMMSG = "NO PARENT ENTERED - LVL CANNOT BE P";
      set KA0CM025.KUCLVIND cursor, modified, bold;
    end
  else
    if (KA0CM025.KUCLVIND == "C")
      /* next sentence*/
    else
      KA0CM025.KA0CMMSG = "LEVEL CODE NOT P OR C";
      set KA0CM025.KUCLVIND cursor, modified, bold;
    end
  end

    /* check dun and bradstreet rating date*/
  if (KA0CM025.KA0CMDBM > 0)
    if (KA0CM025.KA0CMDBM >= 1
     && KA0CM025.KA0CMDBM <= 12)
      /* next sentence*/
    else
      KA0CM025.KA0CMMSG = "DUN & BRADSTREET MONTH OUT OF RANGE";
      set KA0CM025.KA0CMDBM cursor, modified, bold;
    end
  else
    KA0CM025.KA0CMMSG = "DUN & BRADSTREET MONTH REQUIRED";
    set KA0CM025.KA0CMDBM cursor, modified, bold;
  end

   /* --------------------- y2k out begin ------------------*/
   /* IF KA0CM025.KA0CMDBY GT 0;*/
    /* ;/* next sentence*/
   /* ELSE;*/
    /* MOVE 'DUN & BRADSTREET YEAR REQUIRED' TO KA0CM025.KA0CMMSG;*/
    /* SET KA0CM025.KA0CMDBY CURSOR,MODIFIED,BRIGHT;*/
   /* END;*/
   /* --------------------- y2k out end   ------------------*/

   /* ---------- stmt grp ka0cs11 end -------------------*/
end // end KA0CS11

// edit fin stmt info & NIL flags
Function KA0CS12()
   /* ------------ stmt grp ka0cs12 start ------------*/

   /* check NIL Freight Prepaid flag*/
  if (KA0CM025.KUCFRTPD != " ")
    if (KA0CM025.KUCFRTPD == "Y"
     || KA0CM025.KUCFRTPD == "N")
      set KA0CM025.KUCFRTPD initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.KUCFRTPD cursor, modified, bold;
    end
  else
    KA0CM025.KUCFRTPD = "N";
    set KA0CM025.KUCFRTPD initialAttributes;
  end

    /* check NIL Insurance Prepaid flag*/
  if (KA0CM025.KUCINSPD != " ")
    if (KA0CM025.KUCINSPD == "Y"
     || KA0CM025.KUCINSPD == "N")
      set KA0CM025.KUCINSPD initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.KUCINSPD cursor, modified, bold;
    end
  else /* set up default values*/
    if (KA0CM025.XAUCD != " ")
      if (KA0CM025.XAUCD in XAUTBL.XAUCD)
        if (XAUTBL.XATCD[sysVar.arrayIndex] == "03")
          KA0CM025.KUCINSPD = "Y";
          set KA0CM025.KUCINSPD initialAttributes;
        else
          KA0CM025.KUCINSPD = "N";
          set KA0CM025.KUCINSPD initialAttributes;
        end
      else
        set KA0CM025.KUCINSPD initialAttributes;
      end
    else
      set KA0CM025.KUCINSPD initialAttributes;
    end
  end


    /* financial stmt issue date*/
  set KA0CM025.KA0CMFIY initialAttributes;
  set KA0CM025.KA0CMFIM initialAttributes;

   /* ------------------------- y2k out begin -----------------*/
   /* IF KA0CM025.KA0CMFIY GT 0;*/
    /* IF KA0CM025.KA0CMFIM GT 0;*/
      /* ;/* next sentence*/
    /* ELSE;*/
      /* MOVE 'FINCE STMT ISSUE YEAR REQUIRED' TO KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CMFIY CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/
   /* END;*/
   /* ------------------------- y2k out end   -----------------*/

   /* ------------------------- y2k in begin  -----------------*/
  if (KA0CM025.KA0CMFIM == 0
   && KA0CM025.KA0CMFIY == 0)
    /* next sentence*/
  else
    /* ------------------------- y2k in end --------------------*/
    if (KA0CM025.KA0CMFIM > 0)
      if (KA0CM025.KA0CMFIM >= 1
       && KA0CM025.KA0CMFIM <= 12)
        /* next sentence*/
      else
        KA0CM025.KA0CMMSG = "FINCE STMT ISSUE MONTH OUT OF RANGE";
        set KA0CM025.KA0CMFIM cursor, modified, bold;
      end
    else
      if (KA0CM025.KA0CMFIY > 0)
        KA0CM025.KA0CMMSG = "FINCE STMT ISSUE MONTH REQUIRED";
        set KA0CM025.KA0CMFIM cursor, modified, bold;
      end
    end
  end

   /* ------------ stmt grp ka0cs12 end ------------*/
end // end KA0CS12

// edit misl credit data
Function KA0CS13()
   /* ------------ stmt grp ka0cs13 start ------------*/
   /* **************************************************************/
   /* ** maintenance log                                          **/
   /* 02/10/94  BCourt  Revise 'xcc' edit to allow for one code to**/
   /* have both 'A'ctive and 'I'nactive statuses.     **/
   /* Use only active value. Copy from OP0C.          **/
   /* Change XDZ_DATA_DIST_CD to xdz-data-dist-cd.    **/
   /* **************************************************************/

    /* credit line eff date must be < exp date*/
  set KA0CM025.KA0CMCFM initialAttributes;
  set KA0CM025.KA0CMCFY initialAttributes;
  set KA0CM025.KA0CMCXM initialAttributes;
  set KA0CM025.KA0CMCXY initialAttributes;
   /* ---------------------- y2k out begin -----------------------*/
   /* IF KA0CM025.KA0CMCFY GT KA0CM025.KA0CMCXY;*/
   /* ---------------------- y2k out end   -----------------------*/
   /* ---------------------- y2k in begin  ------------------------*/
  if (KA0CM025.KA0CMCFM == 0
   && KA0CM025.KA0CMCFY == 0)
    KA0CW01.KA0CW-EFF-CCYY = 0;
  else
    KA0CW01.KA0CW-EFF-YY = KA0CM025.KA0CMCFY;
    if (KA0CM025.KA0CMCFY > 60) /* Century windowing*/
      KA0CW01.KA0CW-EFF-CC = 19;
    else
      KA0CW01.KA0CW-EFF-CC = 20;
    end
  end

  if (KA0CM025.KA0CMCXM == 0
   && KA0CM025.KA0CMCXY == 0)
    KA0CW01.KA0CW-EXP-CCYY = 0;
  else
    KA0CW01.KA0CW-EXP-YY = KA0CM025.KA0CMCXY;
    if (KA0CM025.KA0CMCXY > 60) /* Century windowing*/
      KA0CW01.KA0CW-EXP-CC = 19;
    else
      KA0CW01.KA0CW-EXP-CC = 20;
    end
  end

  if (KA0CW01.KA0CW-EFF-CCYY > KA0CW01.KA0CW-EXP-CCYY)
    /* ---------------------- y2k in end    ------------------------*/
    KA0CM025.KA0CMMSG = "CREDIT LINE EFF DATE MUST BE < EXP DATE";
    set KA0CM025.KA0CMCXY modified, bold; /* exp date*/
    set KA0CM025.KA0CMCXM modified, bold;
    set KA0CM025.KA0CMCFY modified, bold; /* eff date*/
    set KA0CM025.KA0CMCFM cursor, modified, bold;
  else
    if (KA0CM025.KA0CMCFY == KA0CM025.KA0CMCXY
     && KA0CM025.KA0CMCFM >= KA0CM025.KA0CMCXM)
      KA0CM025.KA0CMMSG = "CREDIT LINE EFF DATE MUST BE < EXP DATE";
      set KA0CM025.KA0CMCXY modified, bold; /* exp date*/
      set KA0CM025.KA0CMCXM modified, bold;
      set KA0CM025.KA0CMCFY modified, bold; /* eff date*/
      set KA0CM025.KA0CMCFM cursor, modified, bold;
    end
  end


    /* check credit line exp date - required*/
   /* ---------------------- y2k in begin  ------------------------*/
  if (KA0CM025.KA0CMCXM == 0 /* date required*/
   && KA0CM025.KA0CMCXY == 0)
    KA0CM025.KA0CMMSG = "CREDIT LINE EXP DATE REQUIRED";
    set KA0CM025.KA0CMCXM cursor, modified, bold;
    set KA0CM025.KA0CMCXY modified, bold;
  else
    if (KA0CM025.KA0CMCXM >= 1 /* check exp month*/
     && KA0CM025.KA0CMCXM <= 12)
      /* next sentence*/
    else
      KA0CM025.KA0CMMSG = "CREDIT LINE EXP MONTH OUT OF RANGE";
      set KA0CM025.KA0CMCXM cursor, modified, bold;
    end
  end
   /* ---------------------- y2k in end    ------------------------*/

   /* ---------------------- y2k out begin ------------------------*/
   /* The code listed below was copied, modified and placed above.*/

   /* IF KA0CM025.KA0CMCXM GT 0        /* is exp. date present?*/
    /* OR KA0CM025.KA0CMCXY GT 0;*/

    /* IF KA0CM025.KA0CMCXY GT 0;     /* check exp year*/
      /* ;/* next sentence*/
    /* ELSE;*/
      /* MOVE 'CREDIT LINE EXP YEAR REQUIRED' TO KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CMCXY CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/
    /* IF KA0CM025.KA0CMCXM GE 1      /* check exp month*/
      /* AND KA0CM025.KA0CMCXM LE 12;*/
      /* ;/* next sentence*/
    /* ELSE;*/
      /* MOVE 'CREDIT LINE EXP MONTH OUT OF RANGE' TO KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CMCXM CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/

   /* ELSE;*/
    /* MOVE 'CREDIT LINE EXP DATE REQUIRED' TO KA0CM025.KA0CMMSG;*/
    /* SET KA0CM025.KA0CMCXM CURSOR,MODIFIED,BRIGHT;*/
    /* SET KA0CM025.KA0CMCXY MODIFIED,BRIGHT;*/
   /* END;*/
   /* ---------------------- y2k out begin ------------------------*/


   /* check credit line effective date - required*/
   /* ---------------------- y2k in begin  ------------------------*/
  if (KA0CM025.KA0CMCFM == 0 /* date required*/
   && KA0CM025.KA0CMCFY == 0)
    KA0CM025.KA0CMMSG = "CREDIT LINE EFFECTIVE DATE REQUIRED";
    set KA0CM025.KA0CMCFM cursor, modified, bold;
    set KA0CM025.KA0CMCFY modified, bold;
  else
    if (KA0CM025.KA0CMCFM >= 1 /* check exp month*/
     && KA0CM025.KA0CMCFM <= 12)
      /* next sentence*/
    else
      KA0CM025.KA0CMMSG = "CREDIT LINE EFFECTIVE MONTH OUT OF RANGE";
      set KA0CM025.KA0CMCFM cursor, modified, bold;
    end
  end
   /* ---------------------- y2k in end    ------------------------*/

   /* ---------------------- y2k out begin ------------------------*/
   /* The code listed below was copied, modified and placed above.*/

   /* IF KA0CM025.KA0CMCFM GT 0        /* is eff. date present?*/
    /* OR KA0CM025.KA0CMCFY GT 0;*/
    /* ;*/
    /* IF KA0CM025.KA0CMCFY GT 0;     /* check eff. year*/
      /* ;/* next sentence*/
    /* ELSE;*/
      /* MOVE 'CREDIT LINE EFFECTIVE YEAR REQUIRED' TO KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CMCFY CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/
    /* IF KA0CM025.KA0CMCFM GE 1      /* check eff. month*/
      /* AND KA0CM025.KA0CMCFM LE 12;*/
      /* ;/* next sentence*/
    /* ELSE;*/
                                  /* MOVE 'CREDIT LINE EFFECTIVE MONTH OUT*/
                                   /* OF RANGE' KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CMCFM CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/
    /* ;*/
   /* ELSE;*/
    /* MOVE 'CREDIT LINE EFFECTIVE DATE REQUIRED' TO KA0CM025.KA0CMMSG;*/
    /* SET KA0CM025.KA0CMCFM CURSOR,MODIFIED,BRIGHT;*/
    /* SET KA0CM025.KA0CMCFY MODIFIED,BRIGHT;*/
   /* END;*/
   /* ---------------------- y2k out end   ------------------------*/


   /* check credit application date - required(not req for NIL)*/
  set KA0CM025.KA0CM-CR-APPL-MM initialAttributes;
  set KA0CM025.KA0CM-CR-APPL-YY initialAttributes;
   /* ---------------------- y2k in begin  ------------------------*/
  KA0CW01.KA0CWYMD = VGVar.currentGregorianDate;
  if (KA0CM025.KA0CM-CR-APPL-MM == 0 /* DATE NOT PRESENT CK USER*/
   && KA0CM025.KA0CM-CR-APPL-YY == 0)
    if (COMMAREA.CADLVL[2] != "Y") /* and not NIL user*/
      KA0CM025.KA0CMMSG = "CREDIT APPLICATION DATE REQUIRED";
      set KA0CM025.KA0CM-CR-APPL-MM cursor, modified, bold;
      set KA0CM025.KA0CM-CR-APPL-YY modified, bold;
    else
        /* NEXT SENTENCE;*/
    end
  else
    KA0CW01.KA0CW-CR-APPL-YY = KA0CM025.KA0CM-CR-APPL-YY;
    if (KA0CM025.KA0CM-CR-APPL-YY > 60) /* Century windowing*/
      KA0CW01.KA0CW-CR-APPL-CC = 19;
    else
      KA0CW01.KA0CW-CR-APPL-CC = 20;
    end
    if (KA0CW01.KA0CW-CR-APPL-CCYY <= KA0CW01.KA0CW-CCYY
     && KA0CW01.KA0CW-CR-APPL-CCYY > 1960)
      /* next sentence*/
    else
      KA0CM025.KA0CMMSG = "CREDIT APPLICATION YEAR IS INVALID";
      set KA0CM025.KA0CM-CR-APPL-YY cursor, modified, bold;
    end

    if (KA0CM025.KA0CM-CR-APPL-MM >= 1 /* check eff. month*/
     && KA0CM025.KA0CM-CR-APPL-MM <= 12)
      if (KA0CM025.KA0CM-CR-APPL-YY == XX0XW01.XX0XWYY
       && KA0CM025.KA0CM-CR-APPL-MM > XX0XW01.XX0XWMM)
        KA0CM025.KA0CMMSG = "CREDIT APP DATE CANT BE GREATER THAN THE CURRENT DATE";
        set KA0CM025.KA0CM-CR-APPL-MM cursor, modified, bold;
      else
         /* next sentence*/
      end
    else
      KA0CM025.KA0CMMSG = "CREDIT APPLICATION MONTH IS INVALID  ";
      set KA0CM025.KA0CM-CR-APPL-MM cursor, modified, bold;
    end
  end
   /* ---------------------- y2k in end    ------------------------*/

   /* ---------------------- y2k out begin ------------------------*/
   /* The code listed below was copied, modified and placed above.*/

   /* IF KA0CM025.KA0CM-CR-APPL-MM GT 0/* is eff. date present?*/
    /* OR KA0CM025.KA0CM-CR-APPL-YY GT 0;*/
    /* ;*/
    /* IF KA0CM025.KA0CM-CR-APPL-YY GT 0;/* check eff. year*/
      /* ;/* next sentence*/
    /* ELSE;*/
      /* IF COMMAREA.CADLVL(2) NE 'Y';/* and not NIL user*/
        /* MOVE 'CREDIT APPLICATION YEAR REQUIRED' TO KA0CM025.KA0CMMSG;*/
        /* SET KA0CM025.KA0CM-CR-APPL-YY CURSOR,MODIFIED,BRIGHT;*/
      /* END;*/
    /* END;*/
    /* IF KA0CM025.KA0CM-CR-APPL-YY GT 0/* check eff. year*/
      /* AND KA0CM025.KA0CM-CR-APPL-YY LE XX0XW01.XX0XWYY*/
      /* AND KA0CM025.KA0CM-CR-APPL-YY GE 60;*/
      /* ;/* next sentence*/
    /* ELSE;*/
     /* MOVE 'CREDIT APPLICATION YEAR IS INVALID' TO KA0CM025.KA0CMMSG;*/
     /* SET KA0CM025.KA0CM-CR-APPL-YY CURSOR,MODIFIED,BRIGHT;*/
     /* END;*/
    /* IF KA0CM025.KA0CM-CR-APPL-MM GE 1/* check eff. month*/
      /* AND KA0CM025.KA0CM-CR-APPL-MM LE 12;*/
      /* IF KA0CM025.KA0CM-CR-APPL-YY EQ XX0XW01.XX0XWYY*/
        /* AND KA0CM025.KA0CM-CR-APPL-MM GT XX0XW01.XX0XWMM;*/
       /* MOVE 'CREDIT APP DATE CANT BE GREATER THAN THE CURRENT DATE'*/
         /* TO KA0CM025.KA0CMMSG;*/
       /* SET KA0CM025.KA0CM-CR-APPL-MM CURSOR,MODIFIED,BRIGHT;*/
     /* ELSE;*/
       /* ; /* next sentence*/
     /* END;*/
   /* ELSE;*/
     /* MOVE 'CREDIT APPLICATION MONTH IS INVALID  ' KA0CM025.KA0CMMSG;*/
     /* SET KA0CM025.KA0CM-CR-APPL-MM CURSOR,MODIFIED,BRIGHT;*/
   /* END;*/
    /* ;*/
   /* ELSE;*/
    /* IF COMMAREA.CADLVL(2) NE 'Y';  /* and not NIL user*/
      /* MOVE 'CREDIT APPLICATION DATE REQUIRED' TO KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CM-CR-APPL-MM CURSOR,MODIFIED,BRIGHT;*/
      /* SET KA0CM025.KA0CM-CR-APPL-YY MODIFIED,BRIGHT;*/
    /* END;*/
   /* END;*/
   /* ;*/
   /* ---------------------- y2k out end   ------------------------*/
   /* ------------------------------------------*/
   /* Dun & Bradstreet Report Date*/
   /* ------------------------------------------*/

  set KA0CM025.KA0CM-LST-DAB-RPT-MM initialAttributes;
  set KA0CM025.KA0CM-LST-DAB-RPT-YY initialAttributes;
   /* ---------------------- y2k in begin  ------------------------*/
  if (KA0CM025.KA0CM-LST-DAB-RPT-MM == 0
   && KA0CM025.KA0CM-LST-DAB-RPT-YY == 0)
   /* next sentence*/
  else

    KA0CW01.KA0CW-LST-DAB-RPT-YY = KA0CM025.KA0CM-LST-DAB-RPT-YY;
    if (KA0CM025.KA0CM-LST-DAB-RPT-YY > 60) /* Century windowing*/
      KA0CW01.KA0CW-LST-DAB-RPT-CC = 19;
    else
      KA0CW01.KA0CW-LST-DAB-RPT-CC = 20;
    end
    if (KA0CW01.KA0CW-LST-DAB-RPT-CCYY <= KA0CW01.KA0CW-CCYY
     && KA0CW01.KA0CW-LST-DAB-RPT-CCYY > 1960)
      /* next sentence*/
    else
      KA0CM025.KA0CMMSG = "CREDIT APPLICATION YEAR IS INVALID";
      set KA0CM025.KA0CM-LST-DAB-RPT-YY cursor, modified, bold;
    end

    if (KA0CM025.KA0CM-LST-DAB-RPT-MM >= 1
     && KA0CM025.KA0CM-LST-DAB-RPT-MM <= 12)
      if (KA0CM025.KA0CM-LST-DAB-RPT-YY == XX0XW01.XX0XWYY
       && KA0CM025.KA0CM-LST-DAB-RPT-MM > XX0XW01.XX0XWMM)
        KA0CM025.KA0CMMSG = "D&B REPORT DATE CANT BE GREATER THAN THE CURRENT DATE";
        set KA0CM025.KA0CM-LST-DAB-RPT-MM cursor, modified, bold;
      else
         /* next sentence*/
      end
    else
      KA0CM025.KA0CMMSG = "DUN&BRDST REPORT MONTH OUT OF RANGE";
      set KA0CM025.KA0CM-LST-DAB-RPT-MM cursor, modified, bold;
    end
  end
   /* ---------------------- y2k in end    ------------------------*/

   /* ---------------------- y2k out begin ------------------------*/
   /* The code listed below was copied, modified and placed above.*/

   /* IF KA0CM025.KA0CM-LST-DAB-RPT-MM GT 0;*/
    /* IF KA0CM025.KA0CM-LST-DAB-RPT-MM GE 1*/
      /* AND KA0CM025.KA0CM-LST-DAB-RPT-MM LE 12;*/
      /* IF KA0CM025.KA0CM-LST-DAB-RPT-YY EQ XX0XW01.XX0XWYY*/
        /* AND KA0CM025.KA0CM-LST-DAB-RPT-MM GT XX0XW01.XX0XWMM;*/
        /* MOVE 'D&B REPORT DATE CANT BE GREATER THAN THE CURRENT DATE'*/
          /* TO KA0CM025.KA0CMMSG;*/
        /* SET KA0CM025.KA0CM-LST-DAB-RPT-MM CURSOR,MODIFIED,BRIGHT;*/
      /* ELSE;*/
        /* ; /* next sentence*/
      /* END;*/
    /* ELSE;*/
      /* MOVE 'DUN&BRDST REPORT MONTH OUT OF RANGE' TO KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CM-LST-DAB-RPT-MM CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/
   /* END;*/

   /* IF KA0CM025.KA0CM-LST-DAB-RPT-YY GT 0;*/
    /* IF KA0CM025.KA0CM-LST-DAB-RPT-YY GT 0/* check eff. year*/
      /* AND KA0CM025.KA0CM-LST-DAB-RPT-YY LE XX0XW01.XX0XWYY*/
      /* AND KA0CM025.KA0CM-LST-DAB-RPT-YY GE 60;*/
      /* ;/* next sentence*/
    /* ELSE;*/
      /* MOVE 'DUN&BRDST REPORT YEAR IS INVALID  ' TO KA0CM025.KA0CMMSG;*/
     /* SET KA0CM025.KA0CM-LST-DAB-RPT-YY CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/
    /* IF KA0CM025.KA0CM-LST-DAB-RPT-MM EQ 0;*/
      /* MOVE 'DUN&BRDST REPORT MONTH REQUIRED' TO KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CM-LST-DAB-RPT-MM CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/
   /* ELSE;*/
    /* IF KA0CM025.KA0CM-LST-DAB-RPT-MM GT 0;*/
      /* MOVE 'DUN&BRDST REPORT YEAR REQUIRED' TO KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CM-LST-DAB-RPT-YY CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/
   /* END;*/
   /* ---------------------- y2k out begin ------------------------*/

    /* check company credit line - required*/
  if (KA0CM025.KUCCRLIN > 0)
    set KA0CM025.KUCCRLIN initialAttributes;
  else
    KA0CM025.KA0CMMSG = "CREDIT LINE AMOUNT REQUIRED";
    set KA0CM025.KUCCRLIN cursor, modified, bold;
  end

    /* check credit managers assessment - opt*/
  if (KA0CM025.KUCASMT > 0)
    if (KA0CM025.KUCASMT >= 1
     && KA0CM025.KUCASMT <= 30)
      set KA0CM025.KUCASMT initialAttributes;
    else
      KA0CM025.KA0CMMSG = "CREDIT MGR ASSESSMENT OUT OF RANGE";
      set KA0CM025.KUCASMT cursor, modified, bold;
    end
  end

   /* ****************************************/
    /* edit NIL Foreign Currency Code*/
   /* ****************************************/

  if (KA0CM025.ZFCCD == " ")
    set KA0CM025.ZFCCD initialAttributes;
  else
    KA0C013(); /* select foreign currency code*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KA0CM025.ZFCCD == VZFC0001.ZFC-CRCY-CD)
        if (VZFC0001.XXX-STAT == "A")
          set KA0CM025.ZFCCD initialAttributes;
        else
          converseLib.validationFailed(71);
          set KA0CM025.ZFCCD cursor, modified, bold;
        end
      else
        converseLib.validationFailed(17);
        set KA0CM025.ZFCCD cursor, modified, bold;
      end
    else
      converseLib.validationFailed(17);
      set KA0CM025.ZFCCD cursor, modified, bold;
    end
  end

    /* check credit status code - req, valid table entry*/
  KA0CM025.KA0CMCCD = " "; /* blank decode field*/
  if (KA0CM025.XCCCD != " ")

    KA0CW01.KA0CWCD = KA0CM025.XCCCD; /* 1 char to 2 char*/
  /* RETR KA0CW01.KA0CWCD XCCTBL.XCCCD KA0CM025.KA0CMCCD XCCABRV;*/
    /* GET OP0CS-CHECK-CREDIT ... chng 'retr' to this 2/10/94*/
    sysVar.arrayIndex = 1; /* Reset Subscript 1*/
    while (sysVar.arrayIndex < 99 /* until row found*/
     && XCCTBL.XCCCD[sysVar.arrayIndex] != "99") /* or end of XCCTBL*/
      if (XCCTBL.XCCCD[sysVar.arrayIndex] == KA0CW01.KA0CWCD /* xcc code found*/
       && XCCTBL.XXXSTAT[sysVar.arrayIndex] == "A")          /* code is active*/
        set KA0CM025.XCCCD initialAttributes;
        KA0CM025.KA0CMCCD = XCCTBL.XCCABRV[sysVar.arrayIndex];
        sysVar.arrayIndex = 99; /* set found to 'y'*/
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Increment subscript 1*/
    end
    if (sysVar.arrayIndex < 99) /* valid row not found 2/10/94*/
      KA0CM025.KA0CMMSG = "CREDIT STATUS CODE NOT VALID";
      set KA0CM025.XCCCD cursor, modified, bold;
    end

  else
    KA0CM025.KA0CMMSG = "CREDIT STATUS CODE REQUIRED";
    set KA0CM025.XCCCD cursor, modified, bold;
  end


    /* check co-op analyst code*/

  set KA0CM025.YCPCD initialAttributes;
  KA0CW01.KA0CWYCD = KA0CM025.YCPCD;
  if (KA0CW01.KA0CWYCD != 0)
    if (KA0CW01.KA0CWYCD in YCPTBL.YCPCD
     && YCPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      set KA0CM025.YCPCD initialAttributes;
    else
      KA0CM025.KA0CMMSG = "INVALID CO-OP ANALYST CODE";
      set KA0CM025.YCPCD cursor, modified, bold;
    end
  else
    if (KA0CM015.XCTCD == "USA ")
      KA0CM025.KA0CMMSG = "CO-OP ANALYST CODE REQUIRED";
      set KA0CM025.YCPCD cursor, modified, bold;
    end
  end


    /* edit NIL foreign Language Code*/
  if (KA0CM025.ZFLCD != " ")
    if (KA0CM025.ZFLCD in ZFLTBL.ZFLCD)
      if (ZFLTBL.XXXSTAT[sysVar.arrayIndex] == "A"
       && ZFLTBL.ZFLCD[sysVar.arrayIndex] != "99")
        set KA0CM025.ZFLCD initialAttributes;
      else
        converseLib.validationFailed(71);
        set KA0CM025.ZFLCD cursor, modified, bold;
      end
    else
      converseLib.validationFailed(17);
      set KA0CM025.ZFLCD cursor, modified, bold;
    end
  else
    set KA0CM025.ZFLCD initialAttributes;
  end


    /* check credit region id - req, values in xcrtbl*/
  KA0CM025.KA0CMCRD = " "; /* blank decode field*/
  if (KA0CM025.XCRCD != " ")

    if (KA0CM025.XCUCD in XCUTBL.XCUCD
     && XCUTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     && XCUTBL.XCRCD[sysVar.arrayIndex] == KA0CM025.XCRCD)
      set KA0CM025.XCRCD initialAttributes;
    else
      KA0CM025.KA0CMMSG = "CR REGION MUST MATCH CR RESP";
      set KA0CM025.XCRCD cursor, modified, bold;
      set KA0CM025.XCUCD modified, bold;
    end

  else
    KA0CM025.KA0CMMSG = "CREDIT REGION ID REQUIRED";
    set KA0CM025.XCRCD cursor, modified, bold;
  end /* end if ' '*/


    /* edit NIL Data Distribution Code*/

  if (KA0CM025.XDZ-DATA-DIST-CD != " ") /* 2/10/94 chng '_' to '-'.*/
    if (KA0CM025.XDZ-DATA-DIST-CD in XDZTBL.XDZ-DATA-DIST-CD)
      if (XDZTBL.XXXSTAT[sysVar.arrayIndex] == "A"
       && XDZTBL.XDZ-DATA-DIST-CD[sysVar.arrayIndex] != "99")
        set KA0CM025.XDZ-DATA-DIST-CD initialAttributes;
      else
        converseLib.validationFailed(71);
        set KA0CM025.XDZ-DATA-DIST-CD cursor, modified, bold;
      end
    else
      converseLib.validationFailed(17);
      set KA0CM025.XDZ-DATA-DIST-CD cursor, modified, bold;
    end
  end
  if (KA0CM016.XLECD == "02")
    KA0CM025.XDZ-DATA-DIST-CD = "DS";
  else
    if (KA0CM015.XLECD == "03")
      KA0CM025.XDZ-DATA-DIST-CD = "CA";
    else
      KA0CM025.XDZ-DATA-DIST-CD = "US";
    end
  end

   /* ------------ stmt grp ka0cs13 end   ------------*/
end // end KA0CS13

// edit misc data
Function KA0CS14()
   /* ------------ stmt grp ka0cs14 start ------------*/

   /* ******************************************************************/
   /* m a i n t e n a n c e    h i s t o r y    l o g              **/
   /* ----------------------------------------------------------------**/
   /* date    pgmr    description                                  **/
   /* ----------------------------------------------------------------**/
   /* 10-06-00  gdecke  require entry of channel class code          **/
   /* ******************************************************************/

    /* check account class code - req, valid table entry*/
  KA0CM025.KA0CMAUD = " "; /* blank decode field*/
  if (KA0CM025.XAUCD != " ")

    if (KA0CM025.XAUCD in XAUTBL.XAUCD)
      KA0CM025.KA0CMAUD = XAUTBL.XAUCD[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex != 0
     && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      set KA0CM025.XAUCD initialAttributes;
      if (COMMAREA.CADLVL[1] == "Y") /* Cole Haan User*/
        if (XAUTBL.XATCD[sysVar.arrayIndex] == "08")
           /* next sentence*/
        else
          KA0CM025.KA0CMMSG = "ACCOUNT CLASS CODE NOT VALID";
          set KA0CM025.XAUCD cursor, modified, bold;
        end
      else
        if (COMMAREA.CADLVL[2] == "Y") /* NIL User*/
          if (XAUTBL.XATCD[sysVar.arrayIndex] == "03")
             /* next sentence*/
          else
            KA0CM025.KA0CMMSG = "ACCOUNT CLASS CODE NOT VALID";
            set KA0CM025.XAUCD cursor, modified, bold;
          end
        else /* else INC User*/
          if (XAUTBL.XATCD[sysVar.arrayIndex] == "08"
           || XAUTBL.XATCD[sysVar.arrayIndex] == "03")
            KA0CM025.KA0CMMSG = "ACCOUNT CLASS CODE NOT VALID";
            set KA0CM025.XAUCD cursor, modified, bold;
          end
        end
      end
    else
      KA0CM025.KA0CMMSG = "ACCOUNT CLASS CODE NOT VALID";
      set KA0CM025.XAUCD cursor, modified, bold;
    end

  else
    KA0CM025.KA0CMMSG = "ACCOUNT CLASS CODE REQUIRED";
    set KA0CM025.XAUCD cursor, modified, bold;
  end


    /* edit NIL Country Code*/
  if (KA0CM025.XCTCD != " ")
    if (KA0CM025.XCTCD in XCTTBL.XCTCD)
      if (XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KA0CM025.XCTCD initialAttributes;
      else
        converseLib.validationFailed(71);
        set KA0CM025.XCTCD cursor, modified, bold;
      end
    else
      converseLib.validationFailed(17);
      set KA0CM025.XCTCD cursor, modified, bold;
    end
  else
    KA0CM025.XCTCD = KA0CM015.XCTCD;
    set KA0CM025.XCTCD initialAttributes;
  end


    /* check legal organization type - req, valid tbl entry*/
  KA0CM025.KA0CMLGD = " "; /* blank decode field*/
  if (KA0CM025.XLGCD != " ")

    if (KA0CM025.XLGCD in XLGTBL.XLGCD)
      KA0CM025.KA0CMLGD = XLGTBL.XLGABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex != 0
     && XLGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      set KA0CM025.XLGCD initialAttributes;
    else
      KA0CM025.KA0CMMSG = "LEGAL ORGANIZATION TYPE CODE NOT VALID";
      set KA0CM025.XLGCD cursor, modified, bold;
    end

  else
    KA0CM025.KA0CMMSG = "LEGAL ORGANIZATION TYPE CODE REQUIRED";
    set KA0CM025.XLGCD cursor, modified, bold;
  end


    /* check started business date - opt, rng on month*/
   /* --------------------- y2k out begin ------------*/
   /* IF KA0CM025.KA0CMBMM GT 0*/
    /* OR KA0CM025.KA0CMBYY GT 0;*/
    /* IF KA0CM025.KA0CMBYY GT 0;*/
      /* SET KA0CM025.KA0CMBYY DEFINED;*/
    /* ELSE;*/
      /* MOVE 'STARTED BUSINESS YEAR REQUIRED' TO KA0CM025.KA0CMMSG;*/
      /* SET KA0CM025.KA0CMBYY CURSOR,MODIFIED,BRIGHT;*/
    /* END;*/
   /* --------------------- y2k out end   ------------*/
   /* --------------------- y2k in begin  ------------*/
  set KA0CM025.KA0CMBMM initialAttributes;
  set KA0CM025.KA0CMBYY initialAttributes;

  if (KA0CM025.KA0CMBYY == 0
   && KA0CM025.KA0CMBMM == 0)
     /* next sentence*/
  else
    /* --------------------- y2k in end    ------------*/
    if (KA0CM025.KA0CMBMM >= 1
     && KA0CM025.KA0CMBMM <= 12)
      set KA0CM025.KA0CMBMM initialAttributes;
    else
      KA0CM025.KA0CMMSG = "STARTED BUSINESS MONTH OUT OF RANGE";
      set KA0CM025.KA0CMBMM cursor, modified, bold;
    end
  end


    /* edit NIL Accounting Region*/
  if (COMMAREA.CADLVL[2] == "Y")
    if (KA0CM025.ZARCD != " ")
      if (KA0CM025.ZARCD in ZARTBL.ZARCD)
        if (ZARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KA0CM025.ZARCD initialAttributes;
        else
          converseLib.validationFailed(71);
          KA0CM025.KA0CMMSG = "NIL ACCOUNTING REGION REQUIRED";
          set KA0CM025.ZARCD cursor, modified, bold;
        end
      else
        converseLib.validationFailed(17);
        KA0CM025.KA0CMMSG = "NIL ACCOUNTING REGION REQUIRED";
        set KA0CM025.ZARCD cursor, modified, bold;
      end
    else
      KA0CM025.KA0CMMSG = "NIL ACCOUNTING REGION REQUIRED";
      set KA0CM025.ZARCD cursor, modified, bold;
    end
  end


    /* edit NIL Sales Region*/
  if (COMMAREA.CADLVL[2] == "Y")
    if (KA0CM025.ZRGCD != " ")
      if (KA0CM025.ZRGCD in ZRGTBL.ZRGCD)
        if (ZRGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KA0CM025.ZRGCD initialAttributes;
        else
          converseLib.validationFailed(17);
          KA0CM025.KA0CMMSG = "NIL SALES REGION REQUIRED";
          set KA0CM025.ZRGCD cursor, modified, bold;
        end
      else
        converseLib.validationFailed(17);
        KA0CM025.KA0CMMSG = "NIL SALES REGION REQUIRED";
        set KA0CM025.ZRGCD cursor, modified, bold;
      end
    else
      KA0CM025.KA0CMMSG = "NIL SALES REGION REQUIRED";
      set KA0CM025.ZRGCD cursor, modified, bold;
    end
  end


       /* check group company id*/

  set KA0CM025.KUCGRPID initialAttributes;
  if (KA0CM025.KUCGRPID > 0)
    KA0CW04.KUCCOID = KA0CM025.KUCGRPID;
    KA0CS8A();
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      KA0CM025.KA0CMMSG = "INVALID GROUP ID";
      set KA0CM025.KUCGRPID cursor, modified, bold;
    end
  end

  if (KA0CM025.YCH-CHNL-CLS-CD != " ")
    if (KA0CM025.YCH-CHNL-CLS-CD in YCHTBL.YCH-CHNL-CLS-CD)
      if (YCHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KA0CM025.YCH-CHNL-CLS-CD initialAttributes;
      else
        converseLib.validationFailed(17);
        KA0CM025.KA0CMMSG = "CHANNEL CLASS CODE IS INACTIVE";
        set KA0CM025.YCH-CHNL-CLS-CD cursor, modified, bold;
      end
    else
      converseLib.validationFailed(17);
      KA0CM025.KA0CMMSG = "VALID CHANNEL CLASS CODE REQUIRED";
      set KA0CM025.YCH-CHNL-CLS-CD cursor, modified, bold;
    end
  else
    if ((KA0CM025.XAUCD == "21"
     || KA0CM025.XAUCD == "22"
     || KA0CM025.XAUCD == "23"
     || KA0CM025.XAUCD == "28"))
      if (KA0CM025.XAUCD in XAUTBL.XAUCD)
        if (XAUTBL.XAUARIND[sysVar.arrayIndex] == "W")
          KA0CM025.KA0CMMSG = "VALID CHANNEL CLASS CODE REQUIRED";
          set KA0CM025.YCH-CHNL-CLS-CD cursor, modified, bold;
        end
      end
    end
  end
   /* ------------ stmt grp ka0cs14 end   ------------*/
end // end KA0CS14

// carry forward billing address
Function KA0CS15()
   /* -------- start stmt grp ka0cs15 --------------*/

   /* if bill to flag set in setup company address, carry*/
   /* flagged address forward, and protect address fields.*/

  if (KA0CM015.KA0CMBF1 == "Y") /* check hq address flag*/
    KA0CM035.XXX-ADDR1 = KA0CM015.KA0CM-HQ-ADDR1;
    set KA0CM035.XXX-ADDR1 skip;
    KA0CM035.XXX-ADDR2 = KA0CM015.KA0CM-HQ-ADDR2;
    set KA0CM035.XXX-ADDR2 skip;
    KA0CM035.XXX-ADDR3 = KA0CM015.KA0CM-HQ-ADDR3;
    set KA0CM035.XXX-ADDR3 skip;
    KA0CM035.XXXCITY = KA0CM015.XXXCITY;
    set KA0CM035.XXXCITY skip;
    KA0CM035.XSTCD = KA0CM015.XSTCD;
    set KA0CM035.XSTCD skip;
    KA0CM035.XXXZIP = KA0CM015.XXXZIP;
    set KA0CM035.XXXZIP skip;
    KA0CM035.XCTCD = KA0CM015.XCTCD;
    set KA0CM035.XCTCD skip;
  end

  if (KA0CM015.KA0CMBF2 == "Y") /* check alt address flag*/
    KA0CM035.XXX-ADDR1 = KA0CM015.KA0CM-ALT-ADDR1;
    set KA0CM035.XXX-ADDR1 skip;
    KA0CM035.XXX-ADDR2 = KA0CM015.KA0CM-ALT-ADDR2;
    set KA0CM035.XXX-ADDR2 skip;
    KA0CM035.XXX-ADDR3 = KA0CM015.KA0CM-ALT-ADDR3;
    set KA0CM035.XXX-ADDR3 skip;
    KA0CM035.XXXCITY = KA0CM015.KA0CM-CITY;
    set KA0CM035.XXXCITY skip;
    KA0CM035.XSTCD = KA0CM015.KA0CM-STATE;
    set KA0CM035.XSTCD skip;
    KA0CM035.XXXZIP = KA0CM015.KA0CM-ZIP;
    set KA0CM035.XXXZIP skip;
    KA0CM035.XCTCD = KA0CM015.XCTCD;
    set KA0CM035.XCTCD skip;
  end

   /* -------- end stmt grp ka0cs15 --------------*/
end // end KA0CS15

// edit flags
Function KA0CS16()
   /* ------------ stmt grp ka0cs16 start ------------*/
   /* ;*/

   /* ********************************************/
    /* check p.o. required code - footwear*/
   /* ********************************************/

  if (KA0CM035.KUCYPOFT != "  ")
    if (KA0CM035.KUCYPOFT in YPOTBL.YPOCD)
      if (YPOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KA0CM035.KUCYPOFT initialAttributes;
        set KA0CM036.KUCYPOFT initialAttributes;
      else
        converseLib.validationFailed(71); /* code is inactive*/
        set KA0CM035.KUCYPOFT initialAttributes;
        set KA0CM036.KUCYPOFT initialAttributes;
      end
    else
      converseLib.validationFailed(17); /* invalid value*/
      set KA0CM035.KUCYPOFT cursor, modified, bold;
      set KA0CM036.KUCYPOFT cursor, modified, bold;
    end
  else
    KA0CM035.KUCYPOFT = "00";
    KA0CM036.KUCYPOFT = "00";
    set KA0CM035.KUCYPOFT initialAttributes;
    set KA0CM036.KUCYPOFT initialAttributes;
  end


   /* ********************************************/
    /* check p.o. required code - apparel*/
   /* ********************************************/

  if (KA0CM035.KUCYPOAP != "  ")
    if (KA0CM035.KUCYPOAP in YPOTBL.YPOCD)
      if (YPOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KA0CM035.KUCYPOAP initialAttributes;
        set KA0CM036.KUCYPOAP initialAttributes;
      else
        converseLib.validationFailed(71); /* code is inactive*/
        set KA0CM035.KUCYPOAP initialAttributes;
        set KA0CM036.KUCYPOAP initialAttributes;
      end
    else
      converseLib.validationFailed(17); /* invalid value*/
      set KA0CM035.KUCYPOAP cursor, modified, bold;
      set KA0CM036.KUCYPOAP cursor, modified, bold;
    end
  else
    KA0CM035.KUCYPOAP = "00";
    KA0CM036.KUCYPOAP = "00";
    set KA0CM035.KUCYPOAP initialAttributes;
    set KA0CM036.KUCYPOAP initialAttributes;
  end


   /* ********************************************/
    /* check po required flag*/
   /* ********************************************/

  if (KA0CM035.KUCPOFL == " ")
    KA0CM035.KUCPOFL = "N";
    KA0CM036.KUCPOFL = "N";
    set KA0CM035.KUCPOFL initialAttributes;
    set KA0CM036.KUCPOFL initialAttributes;
  else
    if (KA0CM035.KUCPOFL == "Y"
     || KA0CM035.KUCPOFL == "N")
      set KA0CM035.KUCPOFL initialAttributes;
      set KA0CM036.KUCPOFL initialAttributes;
    else
      converseLib.validationFailed(20); /* must be y or n*/
      set KA0CM035.KUCPOFL cursor, modified, bold;
      set KA0CM036.KUCPOFL cursor, modified, bold;
    end
  end


   /* ********************************************/
    /* check po required flag - combinations*/
   /* ********************************************/

  if (KA0CM035.KUCPOFL == "N")
    if (KA0CM035.KUCYPOAP == "00"
     && KA0CM035.KUCYPOFT == "00")
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* invalid combination*/
      set KA0CM035.KUCYPOAP cursor, modified, bold;
      set KA0CM036.KUCYPOAP cursor, modified, bold;
      set KA0CM035.KUCYPOFT modified, bold;
      set KA0CM036.KUCYPOFT modified, bold;
    end
  else
    if (KA0CM035.KUCPOFL == "Y")
      if (KA0CM035.KUCYPOAP == "00"
       || KA0CM035.KUCYPOFT == "00")
        converseLib.validationFailed(17); /* invalid combination*/
        set KA0CM035.KUCYPOAP cursor, modified, bold;
        set KA0CM036.KUCYPOAP cursor, modified, bold;
        set KA0CM035.KUCYPOFT modified, bold;
        set KA0CM036.KUCYPOFT modified, bold;
      else
         /* next sentence*/
      end
    end
  end


   /* ********************************************/
    /* check vendor authorization required flag*/
    /* must be y or n*/
   /* ********************************************/

  if (KA0CM035.KUCVNDFL == " ")
    KA0CM035.KUCVNDFL = "N";
    KA0CM036.KUCVNDFL = "N";
    set KA0CM035.KUCVNDFL initialAttributes;
    set KA0CM036.KUCVNDFL initialAttributes;
  else
    if (KA0CM035.KUCVNDFL == "Y"
     || KA0CM035.KUCVNDFL == "N")
      set KA0CM035.KUCVNDFL initialAttributes;
      set KA0CM036.KUCVNDFL initialAttributes;
    else
      converseLib.validationFailed(20); /* must be y or n*/
      set KA0CM035.KUCVNDFL cursor, modified, bold;
      set KA0CM036.KUCVNDFL cursor, modified, bold;
    end
  end


   /* ********************************************/
    /* check p.o. dating indicator*/
   /* ********************************************/

  if (KA0CM035.CU-PO-DT-FL == " ")
    KA0CM035.CU-PO-DT-FL = "N";
    KA0CM036.CU-PO-DT-FL = "N";
    set KA0CM035.CU-PO-DT-FL initialAttributes;
    set KA0CM036.CU-PO-DT-FL initialAttributes;
  else
    if (KA0CM035.CU-PO-DT-FL == "Y"
     || KA0CM035.CU-PO-DT-FL == "N")
      set KA0CM035.CU-PO-DT-FL initialAttributes;
      set KA0CM036.CU-PO-DT-FL initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM035.CU-PO-DT-FL cursor, modified, bold;
      set KA0CM036.CU-PO-DT-FL cursor, modified, bold;
    end
  end

   /* ********************************************/
    /* check preferred discount payment day*/
   /* ********************************************/

  if (KA0CM035.CU-BILL-IND == "Y")
    if (KA0CM035.KUCPDSPD == 0)
      converseLib.validationFailed(190);
      set KA0CM035.KUCPDSPD cursor, modified, bold;
      set KA0CM036.KUCPDSPD cursor, modified, bold;
    else
      if (KA0CM035.KUCPDSPD > 1
       && KA0CM035.KUCPDSPD < 29)
        set KA0CM035.KUCPDSPD initialAttributes;
        set KA0CM036.KUCPDSPD initialAttributes;
      else
        converseLib.validationFailed(190);
        set KA0CM035.KUCPDSPD cursor, modified, bold;
        set KA0CM036.KUCPDSPD cursor, modified, bold;
      end
    end
  else
    if (KA0CM035.KUCPDSPD == 0)
      set KA0CM035.KUCPDSPD initialAttributes;
      set KA0CM036.KUCPDSPD initialAttributes;
    else
      converseLib.validationFailed(191);
      set KA0CM035.KUCPDSPD cursor, modified, bold;
      set KA0CM036.KUCPDSPD cursor, modified, bold;
    end
  end

   /* ********************************************/
   /* check eom cutoff day*/
   /* ********************************************/

  if (KA0CM035.CU-BILL-IND == "Y"
   || KA0CM035.CU-PO-DT-FL == "Y")
    if (KA0CM035.KUCECODY == 0)
      converseLib.validationFailed(190);
      set KA0CM035.KUCECODY cursor, modified, bold;
      set KA0CM036.KUCECODY cursor, modified, bold;
    else
      if (KA0CM035.KUCECODY > 1
       && KA0CM035.KUCECODY < 29)
        set KA0CM035.KUCECODY initialAttributes;
        set KA0CM036.KUCECODY initialAttributes;
      else
        converseLib.validationFailed(190);
        set KA0CM035.KUCECODY cursor, modified, bold;
        set KA0CM036.KUCECODY cursor, modified, bold;
      end
    end
  else
    if (KA0CM035.KUCECODY == 0)
      set KA0CM035.KUCECODY initialAttributes;
      set KA0CM036.KUCECODY initialAttributes;
    else
      converseLib.validationFailed(191);
      set KA0CM035.KUCECODY cursor, modified, bold;
      set KA0CM036.KUCECODY cursor, modified, bold;
    end
  end


   /* ********************************************/
   /* ****     check subdivision req flag    *****/
   /* ********************************************/

  if (KA0CM035.KUCJSRFL != " ")
    if (KA0CM035.KUCJSRFL == "Y"
     || KA0CM035.KUCJSRFL == "N")
      set KA0CM035.KUCJSRFL initialAttributes;
      set KA0CM036.KUCJSRFL initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM035.KUCJSRFL cursor, modified, bold;
      set KA0CM036.KUCJSRFL cursor, modified, bold;
    end
  else
    KA0CM035.KUCJSRFL = "N";
    KA0CM036.KUCJSRFL = "N";
    set KA0CM035.KUCJSRFL initialAttributes;
    set KA0CM036.KUCJSRFL initialAttributes;
  end


   /* ********************************************/
    /* check end of month flag*/
   /* ********************************************/

  if (KA0CM035.CU-BILL-IND != " ")
    if (KA0CM035.CU-BILL-IND == "Y"
     || KA0CM035.CU-BILL-IND == "N")
      set KA0CM035.CU-BILL-IND initialAttributes;
      set KA0CM036.CU-BILL-IND initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM035.CU-BILL-IND cursor, modified, bold;
      set KA0CM036.CU-BILL-IND cursor, modified, bold;
    end
  else
    KA0CM035.CU-BILL-IND = "N";
    KA0CM036.CU-BILL-IND = "N";
    set KA0CM035.CU-BILL-IND initialAttributes;
    set KA0CM036.CU-BILL-IND initialAttributes;
  end


   /* *****************************************/
    /* check send statement indicator*/
   /* *****************************************/

  if (KA0CM035.KUCSTMT != " ")
    if (KA0CM035.KUCSTMT == "1"
     || KA0CM035.KUCSTMT == "2"
     || KA0CM035.KUCSTMT == "3"
     || KA0CM035.KUCSTMT == "4"
     || KA0CM035.KUCSTMT == "5")
      set KA0CM035.KUCSTMT initialAttributes;
      set KA0CM036.KUCSTMT initialAttributes;
    else
      converseLib.validationFailed(320);
      set KA0CM035.KUCSTMT cursor, modified, bold;
      set KA0CM036.KUCSTMT cursor, modified, bold;
    end
  else
    KA0CM035.KUCSTMT = "1";
    KA0CM036.KUCSTMT = "1";
    set KA0CM035.KUCSTMT initialAttributes;
    set KA0CM036.KUCSTMT initialAttributes;
  end


   /* ------------ stmt grp ka0cs16 end ------------*/
end // end KA0CS16

// edit billing address
Function KA0CS17()
   /* ------------ stmt grp ka0cs17 start ------------*/

    /* check billing address - use xa0a - address appl*/

  set XA0AW02 empty; /* clear work fields*/
  XA0AW02.XXX-ADDR1 = KA0CM035.XXX-ADDR1;
  XA0AW02.XXX-ADDR2 = KA0CM035.XXX-ADDR2;
  XA0AW02.XXX-ADDR3 = KA0CM035.XXX-ADDR3;
  XA0AW02.XXXCITY = KA0CM035.XXXCITY;
  XA0AW02.XSTCD = KA0CM035.XSTCD;
  XA0AW02.XXXZIP = KA0CM035.XXXZIP;
  XA0AW02.XCTCD = KA0CM035.XCTCD;
  XA0AW02.XA0AWFNC = "E"; /* request edit*/

  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address appl*/

  if (XA0AW02.XA0AWERR[8] != 0) /* check country code*/
    set KA0CM035.XCTCD cursor, modified, bold;
    KA0CM035.KA0CMMSG = "INVALID COUNTRY CODE";
  else
    set KA0CM035.XCTCD initialAttributes;
  end
  if (XA0AW02.XA0AWERR[7] != 0) /* check zip code*/
    set KA0CM035.XXXZIP cursor, modified, bold;
    KA0CM035.KA0CMMSG = "INVALID ZIP CODE";
  else
    set KA0CM035.XXXZIP initialAttributes;
  end
  if (XA0AW02.XA0AWERR[6] != 0) /* check state code*/
    set KA0CM035.XSTCD cursor, modified, bold;
    KA0CM035.KA0CMMSG = "INVALID STATE CODE";
  else
    set KA0CM035.XSTCD initialAttributes;
  end
  if (XA0AW02.XA0AWERR[5] != 0) /* check city code*/
    set KA0CM035.XXXCITY cursor, modified, bold;
    KA0CM035.KA0CMMSG = "CITY REQUIRED";
  else
    set KA0CM035.XXXCITY initialAttributes;
  end
  if (XA0AW02.XA0AWERR[4] != 0) /* check address lines*/
    set KA0CM035.XXX-ADDR3 cursor, modified, bold;
    KA0CM035.KA0CMMSG = "AT LEAST 1 ADDRESS LINE REQUIRED";
  else
    set KA0CM035.XXX-ADDR3 initialAttributes;
  end

  KA0CM035.XXX-ADDR1 = XA0AW02.XXX-ADDR1;
  KA0CM035.XXX-ADDR2 = XA0AW02.XXX-ADDR2;
  KA0CM035.XXX-ADDR3 = XA0AW02.XXX-ADDR3;

   /* ---------- stmt grp ka0cs17 end ------------*/
end // end KA0CS17

// edit principals data
Function KA0CS18()
   /* ------------ stmt grp ka0cs18 start ------------*/

    /* check spouses guarantee code*/
  if (KA0CM045.KUHSGUAR > " "
   && KA0CM045.KUHSGUAR != "Y"
   && KA0CM045.KUHSGUAR != "N")
    set KA0CM045.KUHSGUAR cursor, modified, bold;
    KA0CM045.KA0CMMSG = "SPOUSES GUARANTEE FLAG MUST BE Y OR N";
  else
    set KA0CM045.KUHSGUAR initialAttributes;
  end


  set KA0CM045.KUHGUAR initialAttributes;
  set KA0CM045.KA0CMGMM initialAttributes;
  set KA0CM045.KA0CMGDD initialAttributes;
  set KA0CM045.KA0CMGYY initialAttributes;

    /* check guarantee code*/
  if (KA0CM045.KUHGUAR == "Y"
   || KA0CM045.KUHGUAR == "N")
    /* next sentence*/
  else
    KA0CM045.KA0CMMSG = "GUARANTEE CODE MUST BE Y/N";
  end


    /* check guarantee date*/
   /* ---------------------- y2k out begin -----------------*/
   /* IF KA0CM045.KA0CMGMM GT 0          /* any date field entered?*/
    /* OR KA0CM045.KA0CMGDD GT 0*/
    /* OR KA0CM045.KA0CMGYY GT 0;*/
   /* ---------------------- y2k out end   -----------------*/
   /* ---------------------- y2k in begin  -----------------*/
  if (KA0CM045.KA0CMGMM == 0 /* any date field entered?*/
   && KA0CM045.KA0CMGDD == 0 
   && KA0CM045.KA0CMGYY == 0)
    if (KA0CM045.KUHGUAR != "N") /* no date - set guar code to n*/
      KA0CM045.KUHGUAR = "N";
    end
  else
   /* ---------------------- y2k in end    -----------------*/
    KA0CM045.KUHGUAR = "Y"; /* if date present, set guar*/
    set KA0CM045.KUHGUAR initialAttributes; /* code to 'y'*/
    /* -------------------- y2k in begin  -----------*/
    set KA0CM045.KA0CMGYY initialAttributes;
    /* -------------------- y2k in end    -----------*/
    /* -------------------- y2k out begin ----------*/
    /* IF KA0CM045.KA0CMGYY GT 0;       /* check year*/
      /* SET KA0CM045.KA0CMGYY DEFINED;*/
    /* ELSE;*/
      /* SET KA0CM045.KA0CMGYY CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'YEAR REQUIRED' TO KA0CM045.KA0CMMSG;*/
    /* END;*/
    /* --------------------- y2k out end  -----------*/
    if (KA0CM045.KA0CMGDD >= 1 /* check day*/
     && KA0CM045.KA0CMGDD <= 31)
      set KA0CM045.KA0CMGDD initialAttributes;
    else
      set KA0CM045.KA0CMGDD cursor, modified, bold;
      KA0CM045.KA0CMMSG = "DAY OUT OF VALID RANGE";
    end
    if (KA0CM045.KA0CMGMM >= 1 /* check month*/
     && KA0CM045.KA0CMGMM <= 12)
      set KA0CM045.KA0CMGMM initialAttributes;
    else
      set KA0CM045.KA0CMGMM cursor, modified, bold;
      KA0CM045.KA0CMMSG = "MONTH OUT OF VALID RANGE";
    end

  end
   /* --------------------- y2k out begin (moved above) -------------*/
   /* ELSE;*/
    /* IF KA0CM045.KUHGUAR NE 'N';     /* no date - set guar code to n*/
      /* MOVE 'N' TO KA0CM045.KUHGUAR;*/
    /* END;*/
   /* END;*/
   /* --------------------- y2k out end (moved above) -------------*/

    /* social security - must fill if present*/
  set KA0CM045.XXXSSN initialAttributes;
  if (KA0CM045.XXXSSN > 0)
    if (KA0CM045.XXXSSN < 1000000)
      KA0CM045.KA0CMMSG = "INVALID SOC. SEC. NUMBER";
      set KA0CM045.XXXSSN cursor, modified, bold;
    end
  end

    /* check principal title - must be present*/
  if (KA0CM045.KUHPRTLT != " ")
    set KA0CM045.KUHPRTLT initialAttributes;
  else
    set KA0CM045.KUHPRTLT cursor, modified, bold;
    KA0CM045.KA0CMMSG = "TITLE REQUIRED IF PRINCIPAL PRESENT";
  end

    /* check principal name - must be present*/
  if (KA0CM045.KUHPRNM != " ")
    set KA0CM045.KUHPRNM initialAttributes;
  else
    set KA0CM045.KUHPRNM cursor, modified, bold;
    KA0CM045.KA0CMMSG = "NAME REQUIRED IF PRINCIPAL PRESENT";
  end


   /* ------------ stmt grp ka0cs18 start ------------*/
end // end KA0CS18

// edit letter of credit data
Function KA0CS21()
   /* ------------ stmt grp ka0cs21 start ------------*/

   /* edit letter of credit flds - all must be present*/

    /* eff date must be < exp date*/
   /* ---------------------- y2k out begin -----------------*/
   /* IF KA0CM065.KA0CMLEY GT KA0CM065.KA0CMLXY;*/
   /* ---------------------- y2k out end   -----------------*/
   /* ---------------------- y2k in begin  -----------------*/
  KA0CW01.KA0CW-EFF-YY = KA0CM065.KA0CMLEY;
  if (KA0CM065.KA0CMLEY > 60) /* Century windowing*/
    KA0CW01.KA0CW-EFF-CC = 19;
  else
    KA0CW01.KA0CW-EFF-CC = 20;
  end

  KA0CW01.KA0CW-EXP-YY = KA0CM065.KA0CMLXY;
  if (KA0CM065.KA0CMLXY > 60) /* Century windowing*/
    KA0CW01.KA0CW-EXP-CC = 19;
  else
    KA0CW01.KA0CW-EXP-CC = 20;
  end

  if (KA0CW01.KA0CW-EFF-CCYY > KA0CW01.KA0CW-EXP-CCYY)
   /* ---------------------- y2k in end    -----------------*/
    set KA0CM065.KA0CMLEM cursor, modified, bold;
    set KA0CM065.KA0CMLED modified, bold;
    set KA0CM065.KA0CMLEY modified, bold; /* eff date*/
    set KA0CM065.KA0CMLXM modified, bold;
    set KA0CM065.KA0CMLXD modified, bold;
    set KA0CM065.KA0CMLXY modified, bold; /* exp date*/
    KA0CM065.KA0CMMSG = "L.O.C. EFF DATE MUST BE < EXP DATE";
  else
    if (KA0CM065.KA0CMLEY == KA0CM065.KA0CMLXY
     && KA0CM065.KA0CMLEM > KA0CM065.KA0CMLXM)
      set KA0CM065.KA0CMLEM cursor, modified, bold;
      set KA0CM065.KA0CMLED modified, bold;
      set KA0CM065.KA0CMLEY modified, bold; /* eff date*/
      set KA0CM065.KA0CMLXM modified, bold;
      set KA0CM065.KA0CMLXD modified, bold;
      set KA0CM065.KA0CMLXY modified, bold; /* exp date*/
      KA0CM065.KA0CMMSG = "L.O.C. EFF DATE MUST BE < EXP DATE";
    else
      if (KA0CM065.KA0CMLEY == KA0CM065.KA0CMLXY
       && KA0CM065.KA0CMLEM == KA0CM065.KA0CMLXM
       && KA0CM065.KA0CMLED >= KA0CM065.KA0CMLXD)
        set KA0CM065.KA0CMLEM cursor, modified, bold;
        set KA0CM065.KA0CMLED modified, bold;
        set KA0CM065.KA0CMLEY modified, bold; /* eff date*/
        set KA0CM065.KA0CMLXM modified, bold;
        set KA0CM065.KA0CMLXD modified, bold;
        set KA0CM065.KA0CMLXY modified, bold; /* exp date*/
        KA0CM065.KA0CMMSG = "L.O.C. EFF DATE MUST BE < EXP DATE";
      end
    end
  end


    /* expiration date*/
   /* ---------------------- y2k in begin  -----------------*/
  if (KA0CM065.KA0CMLXM == 0 /* if exp. date present*/
   && KA0CM065.KA0CMLXD == 0 
   && KA0CM065.KA0CMLXY == 0)
    set KA0CM065.KA0CMLXM cursor, modified, bold;
    set KA0CM065.KA0CMLXD modified, bold;
    set KA0CM065.KA0CMLXY modified, bold;
    KA0CM065.KA0CMMSG = "LETTER OF CREDIT EXP DATE REQUIRED";
  else

    if (KA0CM065.KA0CMLXD >= 1 /* check day*/
     && KA0CM065.KA0CMLXD <= 31)
       /* next sentence*/
    else
      set KA0CM065.KA0CMLXD cursor, modified, bold;
      KA0CM065.KA0CMMSG = "LETTER OF CREDIT EXP DAY OUT OF RANGE";
    end

    if (KA0CM065.KA0CMLXM >= 1 /* check month*/
     && KA0CM065.KA0CMLXM <= 12)
       /* next sentence*/
    else
      set KA0CM065.KA0CMLXM cursor, modified, bold;
      KA0CM065.KA0CMMSG = "LETTER OF CREDIT EXP MONTH OUT OF RANGE";
    end
  end
   /* ---------------------- y2k in begin  -----------------*/
   /* ---------------------- y2k out begin -----------------*/
   /* The code listed below was copied, modified and placed above.*/
    /* expiration date*/
   /* IF KA0CM065.KA0CMLXM GT 0           /* if exp. date present*/
    /* OR KA0CM065.KA0CMLXD GT 0*/
    /* OR KA0CM065.KA0CMLXY GT 0;*/
    /* ;*/
    /* IF KA0CM065.KA0CMLXY GT 0;       /* check year*/
      /* ; /* next sentence*/
    /* ELSE;*/
      /* SET KA0CM065.KA0CMLXY CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'LETTER OF CREDIT EXP YEAR REQUIRED' TO KA0CM065.KA0CMMSG;*/
    /* END;*/
   /* IF KA0CM065.KA0CMLXD GE 1        /* check day*/
     /* AND KA0CM065.KA0CMLXD LE 31;*/
     /* ; /* next sentence*/
   /* ELSE;*/
     /* SET KA0CM065.KA0CMLXD CURSOR,MODIFIED,BRIGHT;*/
     /* MOVE 'LETTER OF CREDIT EXP DAY OUT OF RANGE' TO KA0CM065.KA0CMMSG;*/
   /* END;*/
   /* IF KA0CM065.KA0CMLXM GE 1        /* check month*/
     /* AND KA0CM065.KA0CMLXM LE 12;*/
     /* ; /* next sentence*/
   /* ELSE;*/
     /* SET KA0CM065.KA0CMLXM CURSOR,MODIFIED,BRIGHT;*/
                                  /* MOVE 'LETTER OF CREDIT EXP MONTH OUT*/
                                   /* OF RANGE' TO KA0CM065.KA0CMMSG;*/
   /* END;*/
   /* ;*/
   /* ELSE;*/
    /* SET KA0CM065.KA0CMLXM CURSOR,MODIFIED,BRIGHT;*/
    /* SET KA0CM065.KA0CMLXD MODIFIED,BRIGHT;*/
    /* SET KA0CM065.KA0CMLXY MODIFIED,BRIGHT;*/
    /* MOVE 'LETTER OF CREDIT EXP DATE REQUIRED' TO KA0CM065.KA0CMMSG;*/
   /* END;*/
   /* ---------------------- y2k out end   -----------------*/
   /* ---------------------- y2k in begin  -----------------*/
    /* effective date*/
  if (KA0CM065.KA0CMLEM == 0 /* if effective date present*/
   && KA0CM065.KA0CMLED == 0 
   && KA0CM065.KA0CMLEY == 0)
    set KA0CM065.KA0CMLEM cursor, modified, bold;
    set KA0CM065.KA0CMLED modified, bold;
    set KA0CM065.KA0CMLEY modified, bold;
    KA0CM065.KA0CMMSG = "LETTER OF CREDIT DATE REQUIRED";
  else

    if (KA0CM065.KA0CMLED >= 1 /* check day*/
     && KA0CM065.KA0CMLED <= 31)
       /* next sentence*/
    else
      set KA0CM065.KA0CMLED cursor, modified, bold;
      KA0CM065.KA0CMMSG = "LETTER OF CREDIT DAY OUT OF RANGE";
    end

    if (KA0CM065.KA0CMLEM >= 1 /* check month*/
     && KA0CM065.KA0CMLEM <= 12)
       /* next sentence*/
    else
      set KA0CM065.KA0CMLEM cursor, modified, bold;
      KA0CM065.KA0CMMSG = "LETTER OF CREDIT MONTH OUT OF RANGE";
    end
  end
   /* ---------------------- y2k in end    -----------------*/
   /* ---------------------- y2k out begin -----------------*/
   /* The code listed below was copied, modified and placed above.*/

    /* effective date*/
   /* IF KA0CM065.KA0CMLEM GT 0          /* if effective date present*/
    /* OR KA0CM065.KA0CMLED GT 0*/
    /* OR KA0CM065.KA0CMLEY GT 0;*/
    /* ;*/
    /* IF KA0CM065.KA0CMLEY GT 0;       /* check year*/
      /* ; /* next sentence*/
    /* ELSE;*/
      /* SET KA0CM065.KA0CMLEY CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'LETTER OF CREDIT YEAR REQUIRED' TO KA0CM065.KA0CMMSG;*/
    /* END;*/
    /* IF KA0CM065.KA0CMLED GE 1        /* check day*/
      /* AND KA0CM065.KA0CMLED LE 31;*/
      /* ; /* next sentence*/
    /* ELSE;*/
      /* SET KA0CM065.KA0CMLED CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'LETTER OF CREDIT DAY OUT OF RANGE' TO KA0CM065.KA0CMMSG;*/
    /* END;*/
    /* IF KA0CM065.KA0CMLEM GE 1        /* check month*/
      /* AND KA0CM065.KA0CMLEM LE 12;*/
      /* ; /* next sentence*/
    /* ELSE;*/
      /* SET KA0CM065.KA0CMLEM CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'LETTER OF CREDIT MONTH OUT OF RANGE' TO KA0CM065.KA0CMMSG;*/
    /* END;*/
    /* ;*/
   /* ELSE;*/
    /* SET KA0CM065.KA0CMLEM CURSOR,MODIFIED,BRIGHT;*/
    /* SET KA0CM065.KA0CMLED MODIFIED,BRIGHT;*/
    /* SET KA0CM065.KA0CMLEY MODIFIED,BRIGHT;*/
    /* MOVE 'LETTER OF CREDIT DATE REQUIRED' TO KA0CM065.KA0CMMSG;*/
   /* END;*/

   /* ---------------------- y2k out begin -----------------*/

    /* amount*/
  if (KA0CM065.KUCLCAMT > 0)
     /* next sentence*/
  else
    set KA0CM065.KUCLCAMT cursor, modified, bold;
    KA0CM065.KA0CMMSG = "LETTER OF CREDIT AMOUNT REQUIRED";
  end

   /* ------------ stmt grp ka0cs21 end ------------*/
end // end KA0CS21

// set line numbers/build page
Function KA0CS22()
   /* ------------- stmt grp ka0cs22 start ------------------*/

  KA0CWIX2 = KA0CM075.KA0CMSEQ[1]; /* set line start number*/
  set KA0CM075 initial; /* clear dept map*/

     /* carry forward company and parent data*/
  KA0CM075.KUKPCOID = KA0CM015.KUKPCOID; /* parent co id*/
  KA0CM075.KUKPCONM = KA0CM015.KUKPCONM; /* parent co name*/
  KA0CM075.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KA0CM075.KUCCONM = KA0CM015.KUCCONM; /* company name*/
  KA0CM075.KUCCOANM = KA0CM015.KUCCOANM; /* company dba name*/
  KA0CM075.KUJCRIND[1] = "N"; /* cr hold ind*/
  KA0CM075.KUJCRIND[2] = "N"; /* cr hold ind*/
  KA0CM075.KUJCRIND[3] = "N"; /* cr hold ind*/
  KA0CM075.KUJCRIND[4] = "N"; /* cr hold ind*/
  KA0CM075.KUJCRIND[5] = "N"; /* cr hold ind*/

  set KA0CM075.KA0CMXNX[1] cursor; /* cursor at first nike dept*/

   /* ---  build line numbers ---*/
  KA0CWIX1 = 1;
  while (KA0CWIX1 <= 05)
    KA0CM075.KA0CMSEQ[KA0CWIX1] = KA0CWIX2;
    KA0CWIX2 = KA0CWIX2 + 1;
    KA0CWIX1 = KA0CWIX1 + 1;
  end

   /* --- build page from work record ----*/
    /* use line number from map for work record indx (ka0windx).*/
    /* use ka0widx2 for map index*/

  KA0CWIX2 = 1;
  while (KA0CWIX2 <= 05)
    KA0CM075.KA0CMDPT[KA0CWIX2] = " ";
    KA0CWIX1 = KA0CM075.KA0CMSEQ[KA0CWIX2];
    if (KA0CW01.KA0CWNDP[KA0CWIX1] != " ")
      KA0CM075.KA0CMXNX[KA0CWIX2] = KA0CW01.KA0CWNDP[KA0CWIX1];
      KA0CW01.KA0CWNXA = KA0CW01.KA0CWNDP[KA0CWIX1];
      if (KA0CW01.KA0CWNXN in XNXTBL.XNXABRV)
        KA0CM075.KA0CMDPT[KA0CWIX2] = XNXTBL.XNXDESC[sysVar.arrayIndex];
      end
      KA0CM075.KUJSLFID[KA0CWIX2] = KA0CW01.KA0CWCDP[KA0CWIX1];
      KA0CM075.KUJSLFNM[KA0CWIX2] = KA0CW01.KA0CWCNM[KA0CWIX1];
      KA0CM075.KUJCRIND[KA0CWIX2] = KA0CW01.KUJCRIND[KA0CWIX1];
      KA0CM075.KA0CMGA1[KA0CWIX2] = KA0CW01.KA0CWGA1[KA0CWIX1];
      KA0CM075.KA0CMGA2[KA0CWIX2] = KA0CW01.KA0CWGA2[KA0CWIX1];
      KA0CM075.KA0CMGA3[KA0CWIX2] = KA0CW01.KA0CWGA3[KA0CWIX1];
      KA0CM075.KA0CMGA4[KA0CWIX2] = KA0CW01.KA0CWGA4[KA0CWIX1];
      KA0CM075.KA0CMSP1[KA0CWIX2] = KA0CW01.KA0CWSP1[KA0CWIX1];
      KA0CM075.KA0CMSP2[KA0CWIX2] = KA0CW01.KA0CWSP2[KA0CWIX1];
      KA0CM075.KA0CMSP3[KA0CWIX2] = KA0CW01.KA0CWSP3[KA0CWIX1];
      KA0CM075.KA0CMSP4[KA0CWIX2] = KA0CW01.KA0CWSP4[KA0CWIX1];
      KA0CM075.KA0CMSP5[KA0CWIX2] = KA0CW01.KA0CWSP5[KA0CWIX1];
      KA0CM075.KA0CMSP6[KA0CWIX2] = KA0CW01.KA0CWSP6[KA0CWIX1];
      KA0CM075.KA0CMSP7[KA0CWIX2] = KA0CW01.KA0CWSP7[KA0CWIX1];
      KA0CM075.KA0CMSP8[KA0CWIX2] = KA0CW01.KA0CWSP8[KA0CWIX1];
    end
    KA0CWIX2 = KA0CWIX2 + 1;
  end

   /* ------------- stmt grp ka0cs22 end ------------------*/
end // end KA0CS22

// upward adjust dept rows
Function KA0CS23()
   /* ------------ stmt grp ka0cs23 start ------------*/

      /* upward adjust dept rows*/

  KA0CWIX1 = 1;
  while (KA0CWIX1 <= 05)

    if (KA0CM075.KA0CMXNX[KA0CWIX1] == "  " /* current row empty?*/
     && KA0CM075.KUJSLFID[KA0CWIX1] == " "  
     && KA0CM075.KUJSLFNM[KA0CWIX1] == " ")

      KA0CWIX2 = KA0CWIX1 + 1;
      while (KA0CWIX2 <= 05) /* look for next non empty row*/

        if (KA0CM075.KA0CMXNX[KA0CWIX2] != " " /* found next non empty row?*/
         || KA0CM075.KUJSLFID[KA0CWIX2] != " " 
         || KA0CM075.KUJSLFNM[KA0CWIX2] != " ")
          KA0CM075.KA0CMXNX[KA0CWIX1] = KA0CM075.KA0CMXNX[KA0CWIX2];
          KA0CM075.KUJSLFID[KA0CWIX1] = KA0CM075.KUJSLFID[KA0CWIX2];
          KA0CM075.KUJSLFNM[KA0CWIX1] = KA0CM075.KUJSLFNM[KA0CWIX2];
          KA0CM075.KUJCRIND[KA0CWIX1] = KA0CM075.KUJCRIND[KA0CWIX2];
          KA0CM075.KA0CMGA1[KA0CWIX1] = KA0CM075.KA0CMGA1[KA0CWIX2];
          KA0CM075.KA0CMGA2[KA0CWIX1] = KA0CM075.KA0CMGA2[KA0CWIX2];
          KA0CM075.KA0CMGA3[KA0CWIX1] = KA0CM075.KA0CMGA3[KA0CWIX2];
          KA0CM075.KA0CMGA4[KA0CWIX1] = KA0CM075.KA0CMGA4[KA0CWIX2];
          KA0CM075.KA0CMSP1[KA0CWIX1] = KA0CM075.KA0CMSP1[KA0CWIX2];
          KA0CM075.KA0CMSP2[KA0CWIX1] = KA0CM075.KA0CMSP2[KA0CWIX2];
          KA0CM075.KA0CMSP3[KA0CWIX1] = KA0CM075.KA0CMSP3[KA0CWIX2];
          KA0CM075.KA0CMSP4[KA0CWIX1] = KA0CM075.KA0CMSP4[KA0CWIX2];
          KA0CM075.KA0CMSP5[KA0CWIX1] = KA0CM075.KA0CMSP5[KA0CWIX2];
          KA0CM075.KA0CMSP6[KA0CWIX1] = KA0CM075.KA0CMSP6[KA0CWIX2];
          KA0CM075.KA0CMSP7[KA0CWIX1] = KA0CM075.KA0CMSP7[KA0CWIX2];
          KA0CM075.KA0CMSP8[KA0CWIX1] = KA0CM075.KA0CMSP8[KA0CWIX2];
          KA0CM075.KA0CMXNX[KA0CWIX2] = " ";
          KA0CM075.KUJSLFID[KA0CWIX2] = " ";
          KA0CM075.KUJSLFNM[KA0CWIX2] = " ";
          KA0CM075.KUJCRIND[KA0CWIX2] = " ";
          KA0CM075.KA0CMGA1[KA0CWIX2] = " ";
          KA0CM075.KA0CMGA2[KA0CWIX2] = " ";
          KA0CM075.KA0CMGA3[KA0CWIX2] = " ";
          KA0CM075.KA0CMGA4[KA0CWIX2] = " ";
          KA0CM075.KA0CMSP1[KA0CWIX2] = " ";
          KA0CM075.KA0CMSP2[KA0CWIX2] = " ";
          KA0CM075.KA0CMSP3[KA0CWIX2] = " ";
          KA0CM075.KA0CMSP4[KA0CWIX2] = " ";
          KA0CM075.KA0CMSP5[KA0CWIX2] = " ";
          KA0CM075.KA0CMSP6[KA0CWIX2] = " ";
          KA0CM075.KA0CMSP7[KA0CWIX2] = " ";
          KA0CM075.KA0CMSP8[KA0CWIX2] = " ";
          KA0CWIX2 = 05;
        end
        KA0CWIX2 = KA0CWIX2 + 1;

      end /* end look for next non empty row*/

    end /* end if current row empty*/
    KA0CWIX1 = KA0CWIX1 + 1;

  end /* end cycle thru current rows*/


    /* rebuild work array after upward adjustment*/

  KA0CWIX1 = 1;
  while (KA0CWIX1 <= 05)
    KA0CWIX2 = KA0CM075.KA0CMSEQ[KA0CWIX1]; /* set line to index*/
    KA0CW01.KA0CWNDP[KA0CWIX2] = KA0CM075.KA0CMXNX[KA0CWIX1];
    KA0CW01.KA0CWCDP[KA0CWIX2] = KA0CM075.KUJSLFID[KA0CWIX1];
    KA0CW01.KA0CWCNM[KA0CWIX2] = KA0CM075.KUJSLFNM[KA0CWIX1];
    KA0CW01.KUJCRIND[KA0CWIX2] = KA0CM075.KUJCRIND[KA0CWIX1];
    KA0CW01.KA0CWGA1[KA0CWIX2] = KA0CM075.KA0CMGA1[KA0CWIX1];
    KA0CW01.KA0CWGA2[KA0CWIX2] = KA0CM075.KA0CMGA2[KA0CWIX1];
    KA0CW01.KA0CWGA3[KA0CWIX2] = KA0CM075.KA0CMGA3[KA0CWIX1];
    KA0CW01.KA0CWGA4[KA0CWIX2] = KA0CM075.KA0CMGA4[KA0CWIX1];
    KA0CW01.KA0CWSP1[KA0CWIX2] = KA0CM075.KA0CMSP1[KA0CWIX1];
    KA0CW01.KA0CWSP2[KA0CWIX2] = KA0CM075.KA0CMSP2[KA0CWIX1];
    KA0CW01.KA0CWSP3[KA0CWIX2] = KA0CM075.KA0CMSP3[KA0CWIX1];
    KA0CW01.KA0CWSP4[KA0CWIX2] = KA0CM075.KA0CMSP4[KA0CWIX1];
    KA0CW01.KA0CWSP5[KA0CWIX2] = KA0CM075.KA0CMSP5[KA0CWIX1];
    KA0CW01.KA0CWSP6[KA0CWIX2] = KA0CM075.KA0CMSP6[KA0CWIX1];
    KA0CW01.KA0CWSP7[KA0CWIX2] = KA0CM075.KA0CMSP7[KA0CWIX1];
    KA0CW01.KA0CWSP8[KA0CWIX2] = KA0CM075.KA0CMSP8[KA0CWIX1];
    KA0CM075.KA0CMDPT[KA0CWIX1] = " ";
    KA0CWIX1 = KA0CWIX1 + 1;
  end

   /* ------------ stmt grp ka0cs23 end ------------*/
end // end KA0CS23

// edit department row
Function KA0CS24()
   /* ------------ stmt grp ka0cs24 start ------------*/

  KA0CW01.KA0CWIN1 = " "; /* clear work indicator*/

    /* edit cr hold indicator*/
  KA0CS43();

    /* edit sport activity codes*/
  KA0CS44();


    /* edit gender/age codes*/
  KA0CS45();


    /* edit department self id and name*/
  KA0CS46();


   /* verify that department is in valid department table*/

  KA0CM075.KA0CMDPT[KA0CWIX1] = " ";
  if (KA0CM075.KA0CMXNX[KA0CWIX1] == " ")
    KA0CM075.KA0CMXNX[KA0CWIX1] = "00";
  end
  KA0CW01.KA0CWNXA = KA0CM075.KA0CMXNX[KA0CWIX1]; /* data conv.*/

  if (KA0CW01.KA0CWNXA is numeric)
    if (KA0CW01.KA0CWNXN in XNXTBL.XNXCD)
      KA0CM075.KA0CMDPT[KA0CWIX1] = XNXTBL.XNXDESC[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0
     || XNXTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      set KA0CM075.KA0CMXNX[KA0CWIX1] cursor, modified, bold;
      KA0CM075.KA0CMMSG = "NIKE DEPT NOT IN VALID DEPT TABLE";
      KA0CW01.KA0CWIN1 = "X"; /* flag error for line*/
    end
  else
    set KA0CM075.KA0CMXNX[KA0CWIX1] cursor, modified, bold;
    KA0CM075.KA0CMMSG = "NIKE DEPT NOT IN VALID DEPT TABLE";
    KA0CW01.KA0CWIN1 = "X"; /* flag error for line*/
  end

    /* check for alpha data entered in dept field*/
  KA0CW01.KA0CWCD = KA0CM075.KA0CMXNX[KA0CWIX1];
  if (KA0CW01.KA0CWCD != "  ")
    if (KA0CW01.KA0CWCD1 >= "0"
     && KA0CW01.KA0CWCD1 <= "9")
      /* next sentence*/
    else
      KA0CM075.KA0CMMSG = "INVALID DEPT CODE";
      set KA0CM075.KA0CMXNX[KA0CWIX1] cursor, modified, bold;
      KA0CW01.KA0CWIN1 = "X"; /* flag error for line*/
    end
    if (KA0CW01.KA0CWCD2 >= "0"
     && KA0CW01.KA0CWCD2 <= "9")
      /* next sentence*/
    else
      KA0CM075.KA0CMMSG = "INVALID DEPT CODE";
      set KA0CM075.KA0CMXNX[KA0CWIX1] cursor, modified, bold;
      KA0CW01.KA0CWIN1 = "X"; /* flag error for line*/
    end
  end


    /* verify that dept is not duplicated*/

  KA0CWIX2 = 1;
  while (KA0CWIX2 <= 30
   && KA0CW01.KA0CWIN1 != "X")
    if (KA0CM075.KA0CMXNX[KA0CWIX1] == KA0CW01.KA0CWNDP[KA0CWIX2]
     && KA0CM075.KA0CMSEQ[KA0CWIX1] != KA0CWIX2)
      KA0CM075.KA0CMMSG = "NIKE DEPT ALREADY USED FOR COMPANY";
      set KA0CM075.KA0CMXNX[KA0CWIX1] cursor, modified, bold;
      KA0CW01.KA0CWIN1 = "X"; /* flag error for line*/
    end
    KA0CWIX2 = KA0CWIX2 + 1;
  end


   /* ------------ stmt grp ka0cs24 end ------------*/
end // end KA0CS24

// write audit record
Function KA0CS26()
   /* -------- start stmt grp ka0cs26 -------------*/

        /* write audit record*/

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* add bill group audit rec*/

  if (SQLCA.VAGen_SQLCODE != 0) /* not good add*/
    KA0CW01.KA0CWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KA0CW01.KA0CWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1TBLKE = " ";
    TA1LOC = "ADDING DB2 DCUST.VCUAUD01";
    TA1PGMNM = "KA0CS26";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ------------  end of stmt grp ka0cs26 --------------*/
end // end KA0CS26

// add bill group address
Function KA0CS28()
   /* ------------ stmt grp ka0cs28 start ------------*/

    /* add bill group address - use xa0a - address appl*/

  set XA0AW02 empty; /* clear work fields*/
  XA0AW02.KUCCOID = KA0CM035.KUCCOID;
  XA0AW02.KULAAID = 1;
  XA0AW02.XXX-ADDR1 = KA0CM035.XXX-ADDR1;
  XA0AW02.XXX-ADDR2 = KA0CM035.XXX-ADDR2;
  XA0AW02.XXX-ADDR3 = KA0CM035.XXX-ADDR3;
  XA0AW02.XXXCITY = KA0CM035.XXXCITY;
  XA0AW02.XSTCD = KA0CM035.XSTCD;
  XA0AW02.XXXZIP = KA0CM035.XXXZIP;
  XA0AW02.XCTCD = KA0CM035.XCTCD;
  XA0AW02.XCYCD = "000";
  XA0AW02.XXXUSER = COMMAREA.CAUSERID;
  XA0AW02.XA0AWFNC = "I"; /* request address add/use cnt 1*/

  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address appl*/

   /* ---------- stmt grp ka0cs28 end ------------*/
end // end KA0CS28

// format kucrec (company)
Function KA0CS29()
   /* -------- start stmt grp ka0cs29 --------------*/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-STYNM-PRT-FL.*/
    /* Added CU-CO-SHORT-NM.*/
    /* 03-02-93 CHELLM Removed KUCCNTCT from the map.(credit contact)*/
    /* KUCPHN   from the map.(Corp Phone)*/
    /* 12-02-93 CHELLM Changed distributor forcast ind default value*/
                       /* from 'p' to 'n'.*/
    /* Added xdz-data-dist-cd*/
    /* 02-10-94 BCourt Change XDZ_... to XDZ-...*/
    /* 03-11-94 chellm rename kucmxynt to cu-max-ftwr-ynt-cd*/
    /* 08-22-96 KCLAR1 database change to add cu-ivc-prt-ind,*/
                       /* changed view to vcmpny02*/
    /* 11-28-97 RGILLI Added century windowing for all dates*/
    /* 05-12-98 kclar1 removed ftwr cd from xopcd*/
   /* *************************************************************/


  set KUCREC empty; /* clear company record*/

  KUCREC.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KUCREC.KUKPCOID = KA0CM015.KUKPCOID; /* parent company id*/
  KUCREC.KUCCONM = KA0CM015.KUCCONM; /* company name*/
  KU0XW30.KU0XW3GP = KUCREC.KUCCONM;
  call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes};
  KUCREC.CU-CO-SHORT-NM = KU0XW10.KU0XW1GP;
  KUCREC.KUCCOANM = KA0CM015.KUCCOANM; /* company dba name*/


   /* generate bill to address, address id*/

  if (COMMAREA.CADLVL[2] == "Y")
    KA0CSN7(); /* add long addr*/
    KUCREC.KUCBLAID = XA1REC.NLAADRID; /* address id*/
  else
    KA0CS28(); /* add addr*/
    KUCREC.KUCBLAID = XA0AW02.KULAAID; /* address id*/
  end


   /* generate hq address, address id*/

  if (COMMAREA.CADLVL[2] == "Y") /* a nil company with long address*/
    if (KA0CM016.KA0CMBF1 == "Y") /* same as billing?*/
      KUCREC.KUCCOAID = KUCREC.KUCBLAID;
      KUCREC.KUCMADID = 1; /* max address id = 1*/
      XA1REC.NLAINTGR = KA0CM016.KUCCOID;
      XA1REC.NLAADRID = KUCREC.KUCBLAID;
      XA1REC.XA1FUNCT = "A";
      call "XA0C" (XA1REC) {isNoRefresh = yes}; /* inc. addr use count*/
    else
      KA0CSN8(); /* add addr/use cnt = 1*/
      KUCREC.KUCCOAID = XA1REC.NLAADRID; /* hq address id = 2*/
      KUCREC.KUCMADID = 2; /* max address id = 2*/
    end
  else /* a company with normal address*/
    if (KA0CM015.KA0CMBF1 == "Y") /* same as billing?*/
      KUCREC.KUCCOAID = KUCREC.KUCBLAID;
      KUCREC.KUCMADID = 1; /* max address id = 1*/
      XA0AW02.KUCCOID = KA0CM015.KUCCOID;
      XA0AW02.KULAAID = KUCREC.KUCBLAID;
      XA0AW02.XA0AWFNC = "A";
      call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* inc. addr use count*/
    else
      KA0CS30(); /* add addr/use cnt = 1*/
      KUCREC.KUCCOAID = XA0AW02.KULAAID; /* hq address id = 2*/
      KUCREC.KUCMADID = 2; /* max address id = 2*/
    end
  end


   /* generate alt (dba) address, address id*/

  if (COMMAREA.CADLVL[2] == "Y") /* a nil company with long address*/
    if (KA0CM016.KA0CMBF2 == "Y") /* same as billing?*/
      KUCREC.KUCCCAID = 1; /* addr id = 1*/
      XA1REC.NLAINTGR = KA0CM016.KUCCOID;
      XA1REC.NLAADRID = KUCREC.KUCBLAID;
      XA1REC.XA1FUNCT = "A";
      call "XA0C" (XA1REC) {isNoRefresh = yes}; /* inc. addr use count*/
    else
      if (KA0CM016.KA0CM-ALT-ADDR4 > " ") /* alternate exists?*/
        KA0CSN9(); /* add addr/use cnt = 1*/
        KUCREC.KUCCCAID = XA1REC.NLAADRID; /* alternate address id*/
        KUCREC.KUCMADID = XA1REC.NLAADRID; /* max addr = 2 or 3*/
      end
    end
  else /* a company with normal address*/
    if (KA0CM015.KA0CMBF2 == "Y") /* same as billing?*/
      KUCREC.KUCCCAID = 1; /* addr id = 1*/
      XA0AW02.KUCCOID = KA0CM015.KUCCOID;
      XA0AW02.KULAAID = KUCREC.KUCBLAID;
      XA0AW02.XA0AWFNC = "A";
      call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* inc. addr use count*/
    else
      if (KA0CM015.KA0CM-ALT-ADDR3 > " ") /* alternate exists?*/
        KA0CS31(); /* add addr/use cnt = 1*/
        KUCREC.KUCCCAID = XA0AW02.KULAAID; /* alternate address id*/
        KUCREC.KUCMADID = XA0AW02.KULAAID; /* max addr = 2 or 3*/
      end
    end
  end


   /* a nil companay with legal entity*/

  if (COMMAREA.CADLVL[2] == "Y")
    KUCREC.XLECD = KA0CM016.XLECD; /* xle-lgl-entity-cd*/
  else
    KUCREC.XLECD = KA0CM015.XLECD; /* xle-lgl-entity-cd*/
  end

  KUCREC.KUCMSTID = -1; /* flag max store cnt*/
  KUCREC.KUCCOIDN = KA0CW02.KA0CWOCP; /* old company number*/
  KUCREC.KUCGRPID = KA0CM025.KUCGRPID; /* group company id*/
   /* ------------------ Y2K OUT begin ---------------*/
   /* MOVE 19 TO KA0CW01.KA0CWYC;      /* century*/
   /* ------------------ Y2K OUT end   ---------------*/
  KA0CW01.KA0CWYD = 00; /* day*/
   /* ------------------ Y2K IN begin  ---------------*/
  if (KA0CM025.KA0CMBYY > 60)
    KA0CW01.KA0CWYC = 19;
  else
    KA0CW01.KA0CWYC = 20;
  end
   /* ------------------ Y2K IN end    ---------------*/
  KA0CW01.KA0CWYY = KA0CM025.KA0CMBYY;
  KA0CW01.KA0CWYM = KA0CM025.KA0CMBMM;
  KUCREC.KUCCOBDT = KA0CW01.KA0CWYMD; /* started business date*/
   /* ------------------------ Y2K IN begin ----------------*/
  if (KA0CM025.KA0CMFIY > 60)
    KA0CW01.KA0CWYC = 19;
  else
    KA0CW01.KA0CWYC = 20;
  end
   /* ------------------------ Y2K IN end ------------------*/
  KA0CW01.KA0CWYY = KA0CM025.KA0CMFIY;
  KA0CW01.KA0CWYM = KA0CM025.KA0CMFIM;
  KUCREC.KUCFINDT = KA0CW01.KA0CWYMD;
                                   /* finance. stmt issue date*/
  KUCREC.KUCMAGCT = KA0CM025.KUCMAGCT; /* max aging count*/
  KUCREC.KUCSSCNT = KA0CM025.KUCSSCNT; /* store self count*/
  KUCREC.KUCNSCNT = KA0CM025.KUCNSCNT; /* nike store count*/
  KUCREC.XLGCD = KA0CM025.XLGCD;
                                   /* legal organization code*/
  KUCREC.YCPCD = KA0CM025.YCPCD;
                                   /* co-op analyst code*/
  KUCREC.XCRCD = KA0CM025.XCRCD; /* credit region id code*/
  KUCREC.XCUCD = KA0CM025.XCUCD;
                                   /* credit service reps*/
  KUCREC.XCECD = KA0CM025.XCECD;
  KUCREC.XAUCD = KA0CM025.XAUCD;
                                   /* account class code*/
  KUCREC.YVICD[1] = "  "; /* remit short code*/
  KUCREC.YVICD[2] = "  "; /* discount break code*/
  KUCREC.YVICD[3] = "  "; /* overpay code*/
  KUCREC.YLICD = "02"; /* late interest code*/
  KUCREC.KUCPSFL = "Y"; /* product subst flag*/
  KUCREC.KUCATCSH = "N";
  KUCREC.KUCCSHNF = "N";
  KUCREC.KUCPOFL = KA0CM035.KUCPOFL; /* cu-po-req-fl*/
  KUCREC.KUCYPOAP = KA0CM035.KUCYPOAP; /* cu-ypo-aprl-cd*/
  KUCREC.KUCYPOFT = KA0CM035.KUCYPOFT; /* cu-ypo-ftwr-cd*/
  KUCREC.KUCVNDFL = KA0CM035.KUCVNDFL; /* vend auth req fl*/
  KUCREC.KUCSTMT = KA0CM035.KUCSTMT; /* cu-acct-stmt-ind*/
  KUCREC.KUCXCSFL = "N";
  KUCREC.KUCFRTPD = "N";
  KUCREC.KUCINSPD = "N";
  KUCREC.KUCFTRTI = "N"; /* future o.t. indicator*/
  KUCREC.KUCPRPTI = "N"; /* prop o.t. indicator*/
  KUCREC.KUCCOLCD = "N"; /* collection code*/
  KUCREC.KUCSTYNT = " "; /* init std carton size*/
  KUCREC.CU-MAX-FTWR-YNT-CD = " "; /* init max carton size ftwr*/
  KUCREC.CU-MAX-APRL-YNT-CD = " "; /* init max carton size aprl*/
  KUCREC.YCU-CRTN-USE-CD = " "; /* CARTON USE CODE*/
  KUCREC.KUCSBKFL = "N"; /* init spcl bk flag*/
  KUCREC.KUCUNTCS = 0; /* init units per case*/
  KUCREC.XXXSTAT = "I"; /* company stat*/
  KUCREC.CU-PRT-XREF-FL = "N"; /* print cross ref flag*/
  KUCREC.CU-HANG-DFLT-FL = "N"; /* hanger default fl*/
  KUCREC.CU-DOC-BY-ORD-FL = "N"; /* document by order fl*/
   /* ------------------ Y2K OUT begin ---------------*/
   /* MOVE KA0CW01.KA0CWYC TO KA0CW-LST-DAB-RPT-CC;*/
   /* ------------------ Y2K OUT end   ---------------*/
   /* ------------------ Y2K in begin  ---------------*/
  if (KA0CM025.KA0CM-LST-DAB-RPT-YY > 60)
    KA0CW01.KA0CW-LST-DAB-RPT-CC = 19;
  else
    KA0CW01.KA0CW-LST-DAB-RPT-CC = 20;
  end
   /* ------------------ Y2K in end    ---------------*/
  move KA0CM-LST-DAB-RPT-YY to KA0CW-LST-DAB-RPT-YY withV60Compat;
  move KA0CM-LST-DAB-RPT-MM to KA0CW-LST-DAB-RPT-MM withV60Compat;
  KA0CW-LST-DAB-RPT-DD = KA0CW01.KA0CWYD;
  KUCREC.CU-LST-DAB-RPT-DT = KA0CW-LST-DAB-RPT-DT;
   /* ------------------ Y2K out begin ---------------*/
   /* MOVE KA0CW01.KA0CWYC TO KA0CW-CR-APPL-CC;*/
   /* ------------------ Y2K out end   ---------------*/
   /* ------------------ Y2K in begin  ---------------*/
  if (KA0CM025.KA0CM-CR-APPL-YY > 60)
    KA0CW01.KA0CW-CR-APPL-CC = 19;
  else
    KA0CW01.KA0CW-CR-APPL-CC = 20;
  end
   /* ------------------ Y2K in end    ---------------*/
  move KA0CM-CR-APPL-YY to KA0CW-CR-APPL-YY withV60Compat;
  move KA0CM-CR-APPL-MM to KA0CW-CR-APPL-MM withV60Compat;
  KA0CW-CR-APPL-DD = KA0CW01.KA0CWYD;
  KUCREC.CU-CR-APPL-DT = KA0CW-CR-APPL-DT;
  KUCREC.YCH-CHNL-CLS-CD = KA0CM025.YCH-CHNL-CLS-CD;
  KUCREC.CU-EDI-CUST-IND = " "; /* EDI Customer Indicator*/
  KUCREC.CU-CUSKU-SZ-FL = "N"; /* Customer Xref by size fl*/
  KUCREC.XDZ-DATA-DIST-CD = KA0CM025.XDZ-DATA-DIST-CD;
  KUCREC.CU-CO-SELF-NBR = " ";
  KUCREC.CU-VEND-NBR = " ";
  KUCREC.XXX-INTL-PHONE-NBR = " ";

   /* IF KUCREC.XAUCD = '22'           /* check account class code*/
   /* OR KUCREC.XAUCD = '23'*/
   /* OR KUCREC.XAUCD = '28';*/
   /* MOVE 'FT02' TO KUCREC.XOPCD(1);/* default ftwr ord typ profile*/
   /* ELSE;*/
  KUCREC.XOPCD[1] = " ";
  KUCREC.XOPCD[2] = " ";
  KUCREC.XOPCD[3] = " ";
  KUCREC.XOPCD[4] = " ";
   /* END;*/

  KUCREC.XIECD = KA0CM025.XIECD; /* int/ext flag*/
  KUCREC.KUCIDIND = KA0CM025.KUCIDIND; /* inv delay ind*/
  KUCREC.KUCBPIND = KA0CM025.KUCBPIND; /* bk dt price ovr ind*/
  KUCREC.KUCWHSFL = KA0CM025.KUCWHSFL; /* whse acct flag*/
  KUCREC.CU-PL-STYNM-PRT-FL = KA0CM025.CU-PL-STYNM-PRT-FL;
  KUCREC.KUCRAUTH = KA0CM025.KUCRAUTH; /* clm return auth fl*/
  KUCREC.KUCCRLIN = KA0CM025.KUCCRLIN; /* credit line amount*/
   /* ------------------ Y2K in begin  ---------------*/
  if (KA0CM025.KA0CMCFY > 60)
    KA0CW01.KA0CWYC = 19;
  else
    KA0CW01.KA0CWYC = 20;
  end
   /* ------------------ Y2K in end    ---------------*/
  KA0CW01.KA0CWYY = KA0CM025.KA0CMCFY;
  KA0CW01.KA0CWYM = KA0CM025.KA0CMCFM;
  KUCREC.KUCCRLEF = KA0CW01.KA0CWYMD; /* credit line eff date*/
   /* ------------------ Y2K in begin  ---------------*/
  if (KA0CM025.KA0CMCXY > 60)
    KA0CW01.KA0CWYC = 19;
  else
    KA0CW01.KA0CWYC = 20;
  end
   /* ------------------ Y2K in end    ---------------*/
  KA0CW01.KA0CWYY = KA0CM025.KA0CMCXY;
  KA0CW01.KA0CWYM = KA0CM025.KA0CMCXM;
  KUCREC.KUCCRLEX = KA0CW01.KA0CWYMD; /* credit line exp date*/
  KUCREC.KUCASMT = KA0CM025.KUCASMT; /* cr mgr assessment*/
  KUCREC.XCCCD = KA0CM025.XCCCD; /* cr status code*/
  KUCREC.XCACD = "01"; /* cr agency id (d&b)*/
  KUCREC.KUCACYNR = KA0CM025.KUCACYNR; /* cr agency cust no (d&b)*/
   /* ------------------ Y2K in begin  ---------------*/
  if (KA0CM025.KA0CMDBY > 60)
    KA0CW01.KA0CWYC = 19;
  else
    KA0CW01.KA0CWYC = 20;
  end
   /* ------------------ Y2K in end    ---------------*/
  KA0CW01.KA0CWYY = KA0CM025.KA0CMDBY;
  KA0CW01.KA0CWYM = KA0CM025.KA0CMDBM;
  KUCREC.KUCACYDT = KA0CW01.KA0CWYMD; /* cr agency rating date*/
  KUCREC.KUCACYRT = KA0CM025.KUCACYRT; /* cr agency rating*/
  KUCREC.KUCLVIND = KA0CM025.KUCLVIND; /* cr agency level code*/
   /* ------------------ Y2K in begin  ---------------*/
  if (KA0CM065.KA0CMLEY > 60)
    KA0CW01.KA0CWYC = 19;
  else
    KA0CW01.KA0CWYC = 20;
  end
   /* ------------------ Y2K in end    ---------------*/
  KA0CW01.KA0CWYY = KA0CM065.KA0CMLEY;
  KA0CW01.KA0CWYM = KA0CM065.KA0CMLEM;
  KA0CW01.KA0CWYD = KA0CM065.KA0CMLED;
  KUCREC.KUCLCEDT = KA0CW01.KA0CWYMD;
                                   /* letter/credit entry date*/
   /* ------------------ Y2K in begin  ---------------*/
  if (KA0CM065.KA0CMLXY > 60)
    KA0CW01.KA0CWYC = 19;
  else
    KA0CW01.KA0CWYC = 20;
  end
   /* ------------------ Y2K in end    ---------------*/
  KA0CW01.KA0CWYY = KA0CM065.KA0CMLXY;
  KA0CW01.KA0CWYM = KA0CM065.KA0CMLXM;
  KA0CW01.KA0CWYD = KA0CM065.KA0CMLXD;
  KUCREC.KUCLCXDT = KA0CW01.KA0CWYMD;
                                   /* letter/credit exp. date*/
  KUCREC.KUCLCAMT = KA0CM065.KUCLCAMT;
                                   /* letter of credit amount*/
  KUCREC.KUCLBOFL = KA0CM025.KUCLBOFL; /* leverage buyout*/
  if (KA0CM025.KUECOMNT[1] > " "
   || KA0CM025.KUECOMNT[2] > " ")
    KUCREC.KUCCOMNT = "Y"; /* comment indicator*/
  end

  KUCREC.CU-BILL-IND = KA0CM035.CU-BILL-IND; /* end of month flag*/
  KUCREC.CU-PO-DT-FL = KA0CM035.CU-PO-DT-FL; /* po dating indicator*/
  KUCREC.KUCECODY = KA0CM035.KUCECODY; /* eom cutoff day*/
  KUCREC.KUCPDSPD = KA0CM035.KUCPDSPD; /* pref disc pymnt day*/
  KUCREC.KUCJSRFL = KA0CM035.KUCJSRFL; /* subdivision# req flag*/

  KUCREC.KUCFRTPD = KA0CM025.KUCFRTPD; /* freight prepaid flag*/
  KUCREC.KUCINSPD = KA0CM025.KUCINSPD; /* insurance prepaid flag*/
  KUCREC.XCTCD = KA0CM025.XCTCD; /* country code*/

    /* if nike international company set lockbox to 'in' or 'nl'*/
    /* otherwise*/
    /* if xau has 'doc to ar' = i set lockbox to '00'*/
    /* otherwise*/
      /* use first 3 characters of zip code to search xlbtbl*/
      /* to find the lock box code*/

  if (KA0CM025.XAUCD == "33") /* if nil company with*/
    KUCREC.XLBCD = "NL"; /* account class of '33'*/
  else
    if (KA0CM025.XAUCD == "31" /* if nil company with*/
     || KA0CM025.XAUCD == "32") /* account class or '31' or '32'*/
      KUCREC.XLBCD = "IN";
    else

      if (KA0CM025.XAUCD in XAUTBL.XAUCD)
        if (XAUTBL.XAUARIND[sysVar.arrayIndex] == "I" /* if internal company*/
         && XAUTBL.XAUCD[sysVar.arrayIndex] != "90")  /* and not colehaan*/
          KUCREC.XLBCD = "00";
        else /* else set the lockbox by zip*/
          KA0CW01.KA0CWZIP = KA0CM035.XXXZIP; /* build pfx*/
          KA0CWIX1 = 1;
          while (XLBTBL.XLBZPFX[KA0CWIX1] < KA0CW01.KA0CWZPX)
                                   /* range search*/
            KA0CWIX1 = KA0CWIX1 + 1;
          end
          KUCREC.XLBCD = XLBTBL.XLBCD[KA0CWIX1];
        end
      end
    end
  end


   /* ---------- move NIL Information groups ------------ 06/29/89*/
  VDSTRB01.KUCCOID = KA0CM025.KUCCOID; /* company id*/
  VDSTRB01.ZARCD = KA0CM025.ZARCD; /* accounting region cd*/
  VDSTRB01.ZRGCD = KA0CM025.ZRGCD; /* sales region cd*/
  VDSTRB01.ZFLCD = KA0CM025.ZFLCD; /* foreign language code*/
  VDSTRB01.ZFCCD = KA0CM025.ZFCCD; /* foreign currency code*/
  VDSTRB01.NL-PRT-MUL-PRO-FL = KA0CM025.NL-PRT-MUL-PRO-FL;
                                   /* print mult pro*/
  VDSTRB01.NL-PRT-WT-PRO-FL = KA0CM025.NL-PRT-WT-PRO-FL; /* print wt*/
  VDSTRB01.NL-PRT-SECR-PRO-FL = "N"; /* default secure pro flag*/
  VDSTRB01.NL-PRT-UNT-PRC-FL = "N"; /* default print unit price fl*/
  VDSTRB01.NL-PRT-XMC-IND = "4"; /* default print material cntnt ind*/
  VDSTRB01.NL-DSTR-FCST-IND = "N"; /* default distributor forcast ind*/
  VDSTRB01.NL-CRTF-ADDR-IND = "B";
  VDSTRB01.XXXSTAT = "A";
  VDSTRB01.ZZZSDT = XX0XW01.XX0XWDAT; /* stamp add date*/
  VDSTRB01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp chng date*/
  VDSTRB01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/
                                   /* default certificate of origin addr*/

  KUCREC.ZZZSDT = XX0XW01.XX0XWDAT; /* stamp add date*/
  KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/

   /* --------  format audit trail record -------------*/

  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCMPNY02";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUCREC.KUCCOID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUCREC.KUCGRP;

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KA0C   ";
    TA1REC.TA1LOCAT[1] = "KA0CS29  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCMPNY02 ";
    TA1REC.TA1MAP = "KA0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

   /* ------------  end of stmt grp ka0cs29 --------------*/
end // end KA0CS29

// hq address add
Function KA0CS30()
   /* ------------ stmt grp ka0cs30 start ------------*/

    /* add headquarter address - use xa0a - address appl*/

  set XA0AW02 empty; /* clear work fields*/
  XA0AW02.KUCCOID = KA0CM015.KUCCOID; /* company*/
  XA0AW02.KULAAID = 2; /* address id*/
  XA0AW02.XXX-ADDR1 = KA0CM015.KA0CM-HQ-ADDR1;
  XA0AW02.XXX-ADDR2 = KA0CM015.KA0CM-HQ-ADDR2;
  XA0AW02.XXX-ADDR3 = KA0CM015.KA0CM-HQ-ADDR3;
  XA0AW02.XXXCITY = KA0CM015.XXXCITY;
  XA0AW02.XSTCD = KA0CM015.XSTCD;
  XA0AW02.XXXZIP = KA0CM015.XXXZIP;
  XA0AW02.XCTCD = KA0CM015.XCTCD;
  XA0AW02.XCYCD = "000";
  XA0AW02.XXXUSER = COMMAREA.CAUSERID;
  XA0AW02.XA0AWFNC = "I"; /* request address add/use cnt 1*/

  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address appl*/

   /* ---------- stmt grp ka0cs30 end ------------*/
end // end KA0CS30

// alternate (dba) address add
Function KA0CS31()
   /* ------------  stmt grp ka0cs31 start ------------*/

    /* add alternate address - use xa0a - address appl*/

  set XA0AW02 empty; /* clear work fields*/
  XA0AW02.KUCCOID = KA0CM015.KUCCOID; /* company*/
  XA0AW02.KULAAID = KUCREC.KUCMADID + 1; /* address = max address + 1*/
  XA0AW02.XXX-ADDR1 = KA0CM015.KA0CM-ALT-ADDR1;
  XA0AW02.XXX-ADDR2 = KA0CM015.KA0CM-ALT-ADDR2;
  XA0AW02.XXX-ADDR3 = KA0CM015.KA0CM-ALT-ADDR3;
  XA0AW02.XXXCITY = KA0CM015.KA0CM-CITY;
  XA0AW02.XSTCD = KA0CM015.KA0CM-STATE;
  XA0AW02.XXXZIP = KA0CM015.KA0CM-ZIP;
  XA0AW02.XCTCD = KA0CM015.XCTCD;
  XA0AW02.XCYCD = "000";
  XA0AW02.XXXUSER = COMMAREA.CAUSERID;
  XA0AW02.XA0AWFNC = "I"; /* request address add/use cnt = 1*/

  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address appl*/

   /* ------------  stmt grp ka0cs31 end ------------*/
end // end KA0CS31

// format kuerec (comments)
Function KA0CS32()
   /* -------- start stmt grp ka0cs32 --------------*/


  KUEREC.KUECMTID = KA0CM015.KUCCOID; /* comment id*/
  KUEREC.KUECOMNT = KA0CM025.KUECOMNT[KA0CWIX1]; /* comment*/

  KUEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp add date*/
  KUEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/

   /* --------  format audit trail record -------------*/
  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCOMNT01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUEREC.KUECMTID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUEREC.KUEGRP;

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KA0C   ";
    TA1REC.TA1LOCAT[1] = "KA0CS32  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCOMNT01 ";
    TA1REC.TA1MAP = "KA0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

   /* ------------  end of stmt grp ka0cs32 --------------*/
end // end KA0CS32

// format kuhrec (principals)
Function KA0CS33()
   /* -------- start stmt grp ka0cs33 --------------*/

  set KUHREC empty; /* clear principals record*/

  KUHREC.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KUHREC.KUHSEQNO = KA0CWIX1;
                                   /* principal sequence*/
  KUHREC.XXXSSN = KA0CW01.KA0CWSSN[KA0CWIX1]; /* social security*/
  KUHREC.KUHPRNM = KA0CW01.KA0CWPNM[KA0CWIX1]; /* name*/
  KUHREC.KUHPRTLT = KA0CW01.KA0CWPTL[KA0CWIX1]; /* title*/
  KUHREC.KUHGUAR = KA0CW01.KA0CWGF1[KA0CWIX1]; /* guarantee flag*/
  KUHREC.KUHSGUAR = KA0CW01.KA0CWGF2[KA0CWIX1]; /* spouses guar. flg*/
  KUHREC.KUHGEDT = KA0CW01.KA0CWGE[KA0CWIX1]; /* date*/

  KUHREC.ZZZSDT = XX0XW01.XX0XWDAT; /* stamp add date*/
  KUHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/

   /* --------  format audit trail record -------------*/

  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VPRINC01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUHREC.KUCCOID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUHREC.KUHGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KA0C   ";
    TA1REC.TA1LOCAT[1] = "KA0CS33  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VPRINC01 ";
    TA1REC.TA1MAP = "KA0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VPRINC01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

   /* ------------  end of stmt grp ka0cs33 --------------*/
end // end KA0CS33

// format kujrec (dept) from work
Function KA0CS34()
   /* -------- start stmt grp ka0cs34 --------------*/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Renamed kujrec.xgacd to kujrec.xgbcd*/


   /* *************************************************************/


  set KUJREC empty; /* clear department record*/

  KUJREC.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KA0CW01.KA0CWNXA = KA0CW01.KA0CWNDP[KA0CWIX1]; /* data conv.*/
  KUJREC.XNXCD = KA0CW01.KA0CWNXN; /* nike dept code*/
  KUJREC.KUJSLFID = KA0CW01.KA0CWCDP[KA0CWIX1]; /* cust self id*/
  KUJREC.KUJSLFNM = KA0CW01.KA0CWCNM[KA0CWIX1]; /* cust self name*/
  KUJREC.KUJCRIND = KA0CW01.KUJCRIND[KA0CWIX1]; /* cr hold*/
  KUJREC.KUJXSPCD[1] = KA0CW01.KA0CWSP1[KA0CWIX1]; /* sa_xsp_cd*/
  KUJREC.KUJXSPCD[2] = KA0CW01.KA0CWSP2[KA0CWIX1];
  KUJREC.KUJXSPCD[3] = KA0CW01.KA0CWSP3[KA0CWIX1];
  KUJREC.KUJXSPCD[4] = KA0CW01.KA0CWSP4[KA0CWIX1];
  KUJREC.KUJXSPCD[5] = KA0CW01.KA0CWSP5[KA0CWIX1];
  KUJREC.KUJXSPCD[6] = KA0CW01.KA0CWSP6[KA0CWIX1];
  KUJREC.KUJXSPCD[7] = KA0CW01.KA0CWSP7[KA0CWIX1];
  KUJREC.KUJXSPCD[8] = KA0CW01.KA0CWSP8[KA0CWIX1];
  KUJREC.XGBCD[1] = KA0CW01.KA0CWGA1[KA0CWIX1]; /* xga code*/
  KUJREC.XGBCD[2] = KA0CW01.KA0CWGA2[KA0CWIX1];
  KUJREC.XGBCD[3] = KA0CW01.KA0CWGA3[KA0CWIX1];
  KUJREC.XGBCD[4] = KA0CW01.KA0CWGA4[KA0CWIX1];
  KUJREC.KUJXLCND = KA0CW01.KUJXLCND[KA0CWIX1]; /* buy for xlc*/
  KUJREC.KUJXSPND = KA0CW01.KUJXSPND[KA0CWIX1]; /* buy for xsp*/
  KUJREC.KUJXQAND = KA0CW01.KUJXQAND[KA0CWIX1]; /* buy for xqa*/
  KUJREC.XLCCD[1] = KA0CW01.KA0CWLC1[KA0CWIX1]; /* xlc code*/
  KUJREC.XLCCD[2] = KA0CW01.KA0CWLC2[KA0CWIX1];
  KUJREC.XLCCD[3] = KA0CW01.KA0CWLC3[KA0CWIX1];
  KUJREC.XLCCD[4] = KA0CW01.KA0CWLC4[KA0CWIX1];
  KUJREC.XSPCD[1] = KA0CW01.KA0CWSB1[KA0CWIX1]; /* xsp code*/
  KUJREC.XSPCD[2] = KA0CW01.KA0CWSB2[KA0CWIX1];
  KUJREC.XSPCD[3] = KA0CW01.KA0CWSB3[KA0CWIX1];
  KUJREC.XSPCD[4] = KA0CW01.KA0CWSB4[KA0CWIX1];
  KUJREC.XQACD[1] = KA0CW01.KA0CWQA1[KA0CWIX1]; /* xqa code*/
  KUJREC.XQACD[2] = KA0CW01.KA0CWQA2[KA0CWIX1];
  KUJREC.XQACD[3] = KA0CW01.KA0CWQA3[KA0CWIX1];
  KUJREC.XQACD[4] = KA0CW01.KA0CWQA4[KA0CWIX1];

  KUJREC.XXXSTAT = "A"; /* status*/

  KUJREC.ZZZSDT = XX0XW01.XX0XWDAT; /* stamp add date*/
  KUJREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp add date*/
  KUJREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/

   /* --------  format audit trail record -------------*/

  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VDEPT001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUJREC.KUCCOID;
  KUZREC.XNXCD = KUJREC.XNXCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUJREC.KUJGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KA0C   ";
    TA1REC.TA1LOCAT[1] = "KA0CS34  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VDEPT001 ";
    TA1REC.TA1MAP = "KA0CM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VDEPT001";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

   /* ------------  end of stmt grp ka0cs34 --------------*/
end // end KA0CS34

// edit cr hold ind
Function KA0CS43()

    /* edit credit hold ind*/

  if (KA0CM075.KUJCRIND[KA0CWIX1] == "N"
   || KA0CM075.KUJCRIND[KA0CWIX1] == "Y")
    set KA0CM075.KUJCRIND[KA0CWIX1] initialAttributes;
  else
     /* code invalid*/
    set KA0CM075.KUJCRIND[KA0CWIX1] cursor, modified, bold;
    KA0CW01.KA0CWIN1 = "X"; /* set error*/
    KA0CM075.KA0CMMSG = "INVALID CODE, CODE SHOULD BE Y OR N ";
  end


end // end KA0CS43

// edit sport activity codes
Function KA0CS44()

   /* **** edit sport activity codes*/

  if (KA0CM075.KA0CMSP8[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSP8[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMSP8[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMSP8[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMSP8[KA0CWIX1] cursor, modified, bold;
        KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMSP8[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMSP8[KA0CWIX1] cursor, modified, bold;
      KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMSP7[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSP7[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMSP7[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMSP7[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMSP7[KA0CWIX1] cursor, modified, bold;
        KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMSP7[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMSP7[KA0CWIX1] cursor, modified, bold;
      KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMSP6[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSP6[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMSP6[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMSP6[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMSP6[KA0CWIX1] cursor, modified, bold;
        KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMSP6[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMSP6[KA0CWIX1] cursor, modified, bold;
      KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMSP5[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSP5[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMSP5[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMSP5[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMSP5[KA0CWIX1] cursor, modified, bold;
        KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMSP5[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMSP5[KA0CWIX1] cursor, modified, bold;
      KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMSP4[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSP4[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMSP4[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMSP4[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMSP4[KA0CWIX1] cursor, modified, bold;
        KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMSP4[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMSP4[KA0CWIX1] cursor, modified, bold;
      KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMSP3[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSP3[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMSP3[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMSP3[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMSP3[KA0CWIX1] cursor, modified, bold;
        KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMSP3[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMSP3[KA0CWIX1] cursor, modified, bold;
      KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMSP2[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSP2[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMSP2[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMSP2[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMSP2[KA0CWIX1] cursor, modified, bold;
        KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMSP2[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMSP2[KA0CWIX1] cursor, modified, bold;
      KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMSP1[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSP1[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMSP1[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMSP1[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMSP1[KA0CWIX1] cursor, modified, bold;
        KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMSP1[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMSP1[KA0CWIX1] cursor, modified, bold;
      KA0CM075.KA0CMMSG = "SPORT ACTIVITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end


end // end KA0CS44

// edit gender/age codes
Function KA0CS45()

   /* ****           edit base gender age codes*/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Changed gender age to base gender age.*/

   /* *************************************************************/

  if (KA0CM075.KA0CMGA4[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWGA4[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMGA4[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMGA4[KA0CWIX1] in XGBTBL.XGBCD)
      if (XGBTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMGA4[KA0CWIX1] cursor, bold;
        KA0CM075.KA0CMMSG = "BASE GNDR/AGE CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMGA4[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMGA4[KA0CWIX1] cursor, bold;
      KA0CM075.KA0CMMSG = "BASE GNDR/AGE CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMGA3[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWGA3[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMGA3[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMGA3[KA0CWIX1] in XGBTBL.XGBCD)
      if (XGBTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMGA3[KA0CWIX1] cursor, bold;
        KA0CM075.KA0CMMSG = "BASE GNDR/AGE CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMGA3[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMGA3[KA0CWIX1] cursor, bold;
      KA0CM075.KA0CMMSG = "BASE GNDR/AGE CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMGA2[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWGA2[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMGA2[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMGA2[KA0CWIX1] in XGBTBL.XGBCD)
      if (XGBTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMGA2[KA0CWIX1] cursor, bold;
        KA0CM075.KA0CMMSG = "BASE GNDR/AGE CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMGA2[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMGA2[KA0CWIX1] cursor, bold;
      KA0CM075.KA0CMMSG = "BASE GNDR/AGE CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM075.KA0CMGA1[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWGA1[KA0CWIX1] == " ")
       /* next sentence*/
    else
      set KA0CM075.KA0CMGA1[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM075.KA0CMGA1[KA0CWIX1] in XGBTBL.XGBCD)
      if (XGBTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM075.KA0CMGA1[KA0CWIX1] cursor, bold;
        KA0CM075.KA0CMMSG = "BASE GNDR/AGE CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        set KA0CM075.KA0CMGA1[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM075.KA0CMGA1[KA0CWIX1] cursor, bold;
      KA0CM075.KA0CMMSG = "BASE GNDR/AGE CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end


end // end KA0CS45

// edit dept self id & name
Function KA0CS46()

    /* edit department self id & name*/


   /* **** Edit department self name*/
  if (KA0CM075.KA0CMXNX[KA0CWIX1] == "00")
    set KA0CM075.KUJSLFNM[KA0CWIX1] initialAttributes;
  else
    if (KA0CM075.KUJSLFNM[KA0CWIX1] > " ")
      set KA0CM075.KUJSLFNM[KA0CWIX1] initialAttributes;
    else
      set KA0CM075.KUJSLFNM[KA0CWIX1] cursor, bold;
      KA0CM075.KA0CMMSG = "REQUIRED FIELD IS MISSING ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end


   /* **** Edit department self id*/
  if (KA0CM075.KA0CMXNX[KA0CWIX1] == "00")
    set KA0CM075.KUJSLFID[KA0CWIX1] initialAttributes;
  else
    if (KA0CM075.KUJSLFID[KA0CWIX1] > " ")
      set KA0CM075.KUJSLFID[KA0CWIX1] initialAttributes;
    else
      set KA0CM075.KUJSLFID[KA0CWIX1] cursor, bold;
      KA0CM075.KA0CMMSG = "REQUIRED FIELD IS MISSING ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end


end // end KA0CS46

// set up line nbr/build screen
Function KA0CS52()
   /* ------------- stmt grp ka0cs52 start ------------------*/

  set KA0CM085 initial; /* clear dept map*/

     /* carry forward company and parent data*/
  KA0CM085.KUCCOID = KA0CM015.KUCCOID; /* company id*/
  KA0CM085.KUCCONM = KA0CM015.KUCCONM; /* company name*/
  KA0CM085.KUCCOANM = KA0CM015.KUCCOANM; /* company dba name*/

  set KA0CM085.KUJXLCND[1] cursor; /* cursor at first nike dept*/

   /* --- build page from work record ----*/
  KA0CWIX1 = 1;
  while (KA0CWIX1 <= 03)
    KA0CM085.KA0CMXNX[KA0CWIX1] = " ";
    if (KA0CW01.KA0CWNDP[KA0CWIX2] != " ")
      KA0CM085.KA0CMXNX[KA0CWIX1] = KA0CW01.KA0CWNDP[KA0CWIX2];
      KA0CW01.KA0CWNXA = KA0CW01.KA0CWNDP[KA0CWIX2];
      if (KA0CW01.KA0CWNXN in XNXTBL.XNXCD)
        KA0CM085.XNXABRV[KA0CWIX1] = XNXTBL.XNXABRV[sysVar.arrayIndex];
      end
      KA0CM085.KUJSLFID[KA0CWIX1] = KA0CW01.KA0CWCDP[KA0CWIX2];
      KA0CM085.KUJSLFNM[KA0CWIX1] = KA0CW01.KA0CWCNM[KA0CWIX2];
      KA0CM085.KUJXLCND[KA0CWIX1] = KA0CW01.KUJXLCND[KA0CWIX2];
      KA0CM085.KA0CMLC1[KA0CWIX1] = KA0CW01.KA0CWLC1[KA0CWIX2];
      KA0CM085.KA0CMLC2[KA0CWIX1] = KA0CW01.KA0CWLC2[KA0CWIX2];
      KA0CM085.KA0CMLC3[KA0CWIX1] = KA0CW01.KA0CWLC3[KA0CWIX2];
      KA0CM085.KA0CMLC4[KA0CWIX1] = KA0CW01.KA0CWLC4[KA0CWIX2];
      KA0CM085.KUJXSPND[KA0CWIX1] = KA0CW01.KUJXSPND[KA0CWIX2];
      KA0CM085.KA0CMSP1[KA0CWIX1] = KA0CW01.KA0CWSB1[KA0CWIX2];
      KA0CM085.KA0CMSP2[KA0CWIX1] = KA0CW01.KA0CWSB2[KA0CWIX2];
      KA0CM085.KA0CMSP3[KA0CWIX1] = KA0CW01.KA0CWSB3[KA0CWIX2];
      KA0CM085.KA0CMSP4[KA0CWIX1] = KA0CW01.KA0CWSB4[KA0CWIX2];
      KA0CM085.KUJXQAND[KA0CWIX1] = KA0CW01.KUJXQAND[KA0CWIX2];
      KA0CM085.KA0CMQA1[KA0CWIX1] = KA0CW01.KA0CWQA1[KA0CWIX2];
      KA0CM085.KA0CMQA2[KA0CWIX1] = KA0CW01.KA0CWQA2[KA0CWIX2];
      KA0CM085.KA0CMQA3[KA0CWIX1] = KA0CW01.KA0CWQA3[KA0CWIX2];
      KA0CM085.KA0CMQA4[KA0CWIX1] = KA0CW01.KA0CWQA4[KA0CWIX2];
      KA0CS54(); /* edit screen for descriptions*/
    else /* set fields to autoskip*/
      set KA0CM085.KA0CMXNX[KA0CWIX1] skip;
      set KA0CM085.KUJSLFID[KA0CWIX1] skip;
      set KA0CM085.KUJSLFNM[KA0CWIX1] skip;
      set KA0CM085.KUJXLCND[KA0CWIX1] skip;
      set KA0CM085.KA0CMLC1[KA0CWIX1] skip;
      set KA0CM085.KA0CMLC2[KA0CWIX1] skip;
      set KA0CM085.KA0CMLC3[KA0CWIX1] skip;
      set KA0CM085.KA0CMLC4[KA0CWIX1] skip;
      set KA0CM085.KUJXSPND[KA0CWIX1] skip;
      set KA0CM085.KA0CMSP1[KA0CWIX1] skip;
      set KA0CM085.KA0CMSP2[KA0CWIX1] skip;
      set KA0CM085.KA0CMSP3[KA0CWIX1] skip;
      set KA0CM085.KA0CMSP4[KA0CWIX1] skip;
      set KA0CM085.KUJXQAND[KA0CWIX1] skip;
      set KA0CM085.KA0CMQA1[KA0CWIX1] skip;
      set KA0CM085.KA0CMQA2[KA0CWIX1] skip;
      set KA0CM085.KA0CMQA3[KA0CWIX1] skip;
      set KA0CM085.KA0CMQA4[KA0CWIX1] skip;
    end
    KA0CWIX2 = KA0CWIX2 + 1;
    KA0CWIX1 = KA0CWIX1 + 1;
  end

   /* ------------- stmt grp ka0cs52 end ------------------*/
end // end KA0CS52

// edit buying restrictions
Function KA0CS54()
   /* ------------ stmt grp ka0cs54 start ------------*/

  KA0CW01.KA0CWIN1 = " "; /* clear work indicator*/

    /* edit life cycle codes*/
  KA0CS56();

    /* edit sport activity codes*/
  KA0CS57();


    /* edit quality codes*/
  KA0CS58();


   /* ------------ stmt grp ka0cs54 end ------------*/
end // end KA0CS54

// edit life cycle codes
Function KA0CS56()

   /* **** edit life cycle codes*/

  if (KA0CM085.KA0CMLC4[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWLC4[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWLC4[KA0CWIX2] = KA0CM085.KA0CMLC4[KA0CWIX1];
      KA0CM085.KA0CMLA4[KA0CWIX1] = " ";
      set KA0CM085.KA0CMLC4[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMLC4[KA0CWIX1] in XLCTBL.XLCCD)
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMLC4[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMLA4[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "LIFE CYCLE CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWLC4[KA0CWIX2] = KA0CM085.KA0CMLC4[KA0CWIX1];
        KA0CM085.KA0CMLA4[KA0CWIX1] = XLCTBL.XLCABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMLC4[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMLC4[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMLA4[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "LIFE CYCLE CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM085.KA0CMLC3[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWLC3[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWLC3[KA0CWIX2] = KA0CM085.KA0CMLC3[KA0CWIX1];
      KA0CM085.KA0CMLA3[KA0CWIX1] = " ";
      set KA0CM085.KA0CMLC3[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMLC3[KA0CWIX1] in XLCTBL.XLCCD)
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMLC3[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMLA3[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "LIFE CYCLE CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWLC3[KA0CWIX2] = KA0CM085.KA0CMLC3[KA0CWIX1];
        KA0CM085.KA0CMLA3[KA0CWIX1] = XLCTBL.XLCABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMLC3[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMLC3[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMLA3[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "LIFE CYCLE CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM085.KA0CMLC2[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWLC2[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWLC2[KA0CWIX2] = KA0CM085.KA0CMLC2[KA0CWIX1];
      KA0CM085.KA0CMLA2[KA0CWIX1] = " ";
      set KA0CM085.KA0CMLC2[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMLC2[KA0CWIX1] in XLCTBL.XLCCD)
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMLC2[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMLA2[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "LIFE CYCLE CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWLC2[KA0CWIX2] = KA0CM085.KA0CMLC2[KA0CWIX1];
        KA0CM085.KA0CMLA2[KA0CWIX1] = XLCTBL.XLCABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMLC2[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMLC2[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMLA2[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "LIFE CYCLE CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM085.KA0CMLC1[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWLC1[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWLC1[KA0CWIX2] = KA0CM085.KA0CMLC1[KA0CWIX1];
      KA0CM085.KA0CMLA1[KA0CWIX1] = " ";
      set KA0CM085.KA0CMLC1[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMLC1[KA0CWIX1] in XLCTBL.XLCCD)
      if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMLC1[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMLA1[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "LIFE CYCLE CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWLC1[KA0CWIX2] = KA0CM085.KA0CMLC1[KA0CWIX1];
        KA0CM085.KA0CMLA1[KA0CWIX1] = XLCTBL.XLCABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMLC1[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMLC1[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMLA1[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "LIFE CYCLE CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end



   /* ****** edit buy restrict ind*/
  if (KA0CM085.KUJXLCND[KA0CWIX1] == " "
   || KA0CM085.KUJXLCND[KA0CWIX1] == "N")
    if (KA0CW01.KA0CWLC1[KA0CWIX2] == " "
     && KA0CW01.KA0CWLC2[KA0CWIX2] == " "
     && KA0CW01.KA0CWLC3[KA0CWIX2] == " "
     && KA0CW01.KA0CWLC4[KA0CWIX2] == " ")
      KA0CM085.KA0CMBLC[KA0CWIX1] = " ";
    else
      set KA0CM085.KUJXLCND[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMBLC[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "BUY IND IS A REQUIRED FIELD";
      KA0CW01.KA0CWIN1 = "X";
    end
  else
    if (KA0CM085.KUJXLCND[KA0CWIX1] == "A"
     || KA0CM085.KUJXLCND[KA0CWIX1] == "R")
      if (KA0CW01.KA0CWLC1[KA0CWIX2] == " "
       && KA0CW01.KA0CWLC2[KA0CWIX2] == " "
       && KA0CW01.KA0CWLC3[KA0CWIX2] == " "
       && KA0CW01.KA0CWLC4[KA0CWIX2] == " ")
        set KA0CM085.KUJXLCND[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMBLC[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "MUST SPACES IF NO CODES ENTERED";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KUJXLCND[KA0CWIX2] = KA0CM085.KUJXLCND[KA0CWIX1];
        set KA0CM085.KUJXLCND[KA0CWIX1] initialAttributes;
        if (KA0CM085.KUJXLCND[KA0CWIX1] == "A")
          KA0CM085.KA0CMBLC[KA0CWIX1] = "ALLOWED ONLY   ";
        else
          KA0CM085.KA0CMBLC[KA0CWIX1] = "RESTRICTED FROM";
        end
      end
    else
      set KA0CM085.KUJXLCND[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMBLC[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "INVALID BUY IND, TRY A OR R";
      KA0CW01.KA0CWIN1 = "X";
    end
  end


end // end KA0CS56

// edit sport activity codes
Function KA0CS57()

   /* **** edit sport activity codes*/

  if (KA0CM085.KA0CMSP4[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSB4[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWSB4[KA0CWIX2] = KA0CM085.KA0CMSP4[KA0CWIX1];
      KA0CM085.KA0CMSA4[KA0CWIX1] = " ";
      set KA0CM085.KA0CMSP4[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMSP4[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMSP4[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMSA4[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "SPORT ACT CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWSB4[KA0CWIX2] = KA0CM085.KA0CMSP4[KA0CWIX1];
        KA0CM085.KA0CMSA4[KA0CWIX1] = XSPTBL.XSPABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMSP4[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMSP4[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMSA4[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "SPORT ACT CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM085.KA0CMSP3[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSB3[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWSB3[KA0CWIX2] = KA0CM085.KA0CMSP3[KA0CWIX1];
      KA0CM085.KA0CMSA3[KA0CWIX1] = " ";
      set KA0CM085.KA0CMSP3[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMSP3[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMSP3[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMSA3[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "SPORT ACT CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWSB3[KA0CWIX2] = KA0CM085.KA0CMSP3[KA0CWIX1];
        KA0CM085.KA0CMSA3[KA0CWIX1] = XSPTBL.XSPABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMSP3[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMSP3[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMSA3[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "SPORT ACT CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM085.KA0CMSP2[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSB2[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWSB2[KA0CWIX2] = KA0CM085.KA0CMSP2[KA0CWIX1];
      KA0CM085.KA0CMSA2[KA0CWIX1] = " ";
      set KA0CM085.KA0CMSP2[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMSP2[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMSP2[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMSA2[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "SPORT ACT CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWSB2[KA0CWIX2] = KA0CM085.KA0CMSP2[KA0CWIX1];
        KA0CM085.KA0CMSA2[KA0CWIX1] = XSPTBL.XSPABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMSP2[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMSP2[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMSA2[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "SPORT ACT CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM085.KA0CMSP1[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWSB1[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWSB1[KA0CWIX2] = KA0CM085.KA0CMSP1[KA0CWIX1];
      KA0CM085.KA0CMSA1[KA0CWIX1] = " ";
      set KA0CM085.KA0CMSP1[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMSP1[KA0CWIX1] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMSP1[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMSA1[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "SPORT ACT CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWSB1[KA0CWIX2] = KA0CM085.KA0CMSP1[KA0CWIX1];
        KA0CM085.KA0CMSA1[KA0CWIX1] = XSPTBL.XSPABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMSP1[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMSP1[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMSA1[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "SPORT ACT CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end



   /* ****** edit buy restrict ind*/
  if (KA0CM085.KUJXSPND[KA0CWIX1] == " "
   || KA0CM085.KUJXSPND[KA0CWIX1] == "N")
    if (KA0CW01.KA0CWSB1[KA0CWIX2] == " "
     && KA0CW01.KA0CWSB2[KA0CWIX2] == " "
     && KA0CW01.KA0CWSB3[KA0CWIX2] == " "
     && KA0CW01.KA0CWSB4[KA0CWIX2] == " ")
      KA0CM085.KA0CMBSP[KA0CWIX1] = " ";
    else
      set KA0CM085.KUJXSPND[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMBSP[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "BUY IND IS A REQUIRED FIELD";
      KA0CW01.KA0CWIN1 = "X";
    end
  else
    if (KA0CM085.KUJXSPND[KA0CWIX1] == "A"
     || KA0CM085.KUJXSPND[KA0CWIX1] == "R")
      if (KA0CW01.KA0CWSB1[KA0CWIX2] == " "
       && KA0CW01.KA0CWSB2[KA0CWIX2] == " "
       && KA0CW01.KA0CWSB3[KA0CWIX2] == " "
       && KA0CW01.KA0CWSB4[KA0CWIX2] == " ")
        set KA0CM085.KUJXSPND[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMBSP[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "MUST SPACES IF NO CODES ENTERED";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KUJXSPND[KA0CWIX2] = KA0CM085.KUJXSPND[KA0CWIX1];
        set KA0CM085.KUJXSPND[KA0CWIX1] initialAttributes;
        if (KA0CM085.KUJXSPND[KA0CWIX1] == "A")
          KA0CM085.KA0CMBSP[KA0CWIX1] = "ALLOWED ONLY   ";
        else
          KA0CM085.KA0CMBSP[KA0CWIX1] = "RESTRICTED FROM";
        end
      end
    else
      set KA0CM085.KUJXSPND[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMBSP[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "INVALID BUY IND, TRY A OR R";
      KA0CW01.KA0CWIN1 = "X";
    end
  end


end // end KA0CS57

// edit quality codes
Function KA0CS58()

   /* **** edit qualitiy codes*/

  if (KA0CM085.KA0CMQA4[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWQA4[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWQA4[KA0CWIX2] = KA0CM085.KA0CMQA4[KA0CWIX1];
      KA0CM085.KA0CMQD4[KA0CWIX1] = " ";
      set KA0CM085.KA0CMQA4[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMQA4[KA0CWIX1] in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMQA4[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMQD4[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "QUALITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWQA4[KA0CWIX2] = KA0CM085.KA0CMQA4[KA0CWIX1];
        KA0CM085.KA0CMQD4[KA0CWIX1] = XQATBL.XQAABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMQA4[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMQA4[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMQD4[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "QUALITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM085.KA0CMQA3[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWQA3[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWQA3[KA0CWIX2] = KA0CM085.KA0CMQA3[KA0CWIX1];
      KA0CM085.KA0CMQD3[KA0CWIX1] = " ";
      set KA0CM085.KA0CMQA3[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMQA3[KA0CWIX1] in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMQA3[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMQD3[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "QUALITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWQA3[KA0CWIX2] = KA0CM085.KA0CMQA3[KA0CWIX1];
        KA0CM085.KA0CMQD3[KA0CWIX1] = XQATBL.XQAABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMQA3[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMQA3[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMQD3[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "QUALITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM085.KA0CMQA2[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWQA2[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWQA2[KA0CWIX2] = KA0CM085.KA0CMQA2[KA0CWIX1];
      KA0CM085.KA0CMQD2[KA0CWIX1] = " ";
      set KA0CM085.KA0CMQA2[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMQA2[KA0CWIX1] in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMQA2[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMQD2[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "QUALITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWQA2[KA0CWIX2] = KA0CM085.KA0CMQA2[KA0CWIX1];
        KA0CM085.KA0CMQD2[KA0CWIX1] = XQATBL.XQAABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMQA2[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMQA2[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMQD2[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "QUALITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end

  if (KA0CM085.KA0CMQA1[KA0CWIX1] == " ")
    if (KA0CW01.KA0CWQA1[KA0CWIX2] == " ")
       /* next sentence*/
    else
      KA0CW01.KA0CWQA1[KA0CWIX2] = KA0CM085.KA0CMQA1[KA0CWIX1];
      KA0CM085.KA0CMQD1[KA0CWIX1] = " ";
      set KA0CM085.KA0CMQA1[KA0CWIX1] initialAttributes;
    end
  else
    if (KA0CM085.KA0CMQA1[KA0CWIX1] in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KA0CM085.KA0CMQA1[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMQD1[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "QUALITY CODE IS INACTIVE ";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KA0CWQA1[KA0CWIX2] = KA0CM085.KA0CMQA1[KA0CWIX1];
        KA0CM085.KA0CMQD1[KA0CWIX1] = XQATBL.XQAABRV[sysVar.arrayIndex];
        set KA0CM085.KA0CMQA1[KA0CWIX1] initialAttributes;
      end
    else
      set KA0CM085.KA0CMQA1[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMQD1[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "QUALITY CODE IS INVALID ";
      KA0CW01.KA0CWIN1 = "X";
    end
  end



   /* ****** edit buy restrict ind*/
  if (KA0CM085.KUJXQAND[KA0CWIX1] == " "
   || KA0CM085.KUJXQAND[KA0CWIX1] == "N")
    if (KA0CW01.KA0CWQA1[KA0CWIX2] == " "
     && KA0CW01.KA0CWQA2[KA0CWIX2] == " "
     && KA0CW01.KA0CWQA3[KA0CWIX2] == " "
     && KA0CW01.KA0CWQA4[KA0CWIX2] == " ")
      KA0CM085.KA0CMBQA[KA0CWIX1] = " ";
    else
      set KA0CM085.KUJXQAND[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMBQA[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "BUY IND IS A REQUIRED FIELD";
      KA0CW01.KA0CWIN1 = "X";
    end
  else
    if (KA0CM085.KUJXQAND[KA0CWIX1] == "A"
     || KA0CM085.KUJXQAND[KA0CWIX1] == "R")
      if (KA0CW01.KA0CWQA1[KA0CWIX2] == " "
       && KA0CW01.KA0CWQA2[KA0CWIX2] == " "
       && KA0CW01.KA0CWQA3[KA0CWIX2] == " "
       && KA0CW01.KA0CWQA4[KA0CWIX2] == " ")
        set KA0CM085.KUJXQAND[KA0CWIX1] cursor, bold;
        KA0CM085.KA0CMBQA[KA0CWIX1] = " ";
        KA0CM085.KA0CMMSG = "MUST SPACES IF NO CODES ENTERED";
        KA0CW01.KA0CWIN1 = "X";
      else
        KA0CW01.KUJXQAND[KA0CWIX2] = KA0CM085.KUJXQAND[KA0CWIX1];
        set KA0CM085.KUJXQAND[KA0CWIX1] initialAttributes;
        if (KA0CM085.KUJXQAND[KA0CWIX1] == "A")
          KA0CM085.KA0CMBQA[KA0CWIX1] = "ALLOWED ONLY   ";
        else
          KA0CM085.KA0CMBQA[KA0CWIX1] = "RESTRICTED FROM";
        end
      end
    else
      set KA0CM085.KUJXQAND[KA0CWIX1] cursor, bold;
      KA0CM085.KA0CMBQA[KA0CWIX1] = " ";
      KA0CM085.KA0CMMSG = "INVALID BUY IND, TRY A OR R";
      KA0CW01.KA0CWIN1 = "X";
    end
  end


end // end KA0CS58

// read company table
Function KA0CS8A()
   /* ------------ stmt grp ka0cs8a start ------------*/

  call "IO0240" ("S ", SQLCA, KA0CW04) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KA0CS8A";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KA0CW01.KA0CWKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KA0CW01.KA0CWKEY;
      TA1LOC = "READING DB2 TBL DCUST.VCMPNY";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
      XSPF4();
    end
  end


   /* ------------ stmt grp ka0cs8a end ------------*/
end // end KA0CS8A

// edit flags
Function KA0CS99()
   /* ------------ STMT GRP KA0CS99 START ------------*/


    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added edit for CU-STYNM-PRT-FL.*/
    /* 03-13-92 CHELLM Added new VDSTRB01 edits and defaults.*/


   /* *************************************************************/


   /* ********************************************/
   /* ****     check warehousing acct flag   *****/
   /* ********************************************/

  set KA0CM025.KUCWHSFL normal;
  if (KA0CM025.KUCWHSFL != " ")
    if (KA0CM025.KUCWHSFL == "Y"
     || KA0CM025.KUCWHSFL == "N")
      set KA0CM025.KUCWHSFL initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.KUCWHSFL cursor, modified, bold;
    end
  else
    KA0CM025.KUCWHSFL = "N";
    set KA0CM025.KUCWHSFL initialAttributes;
  end


   /* ********************************************/
   /* ****     check style-name-print-flag   *****/
   /* ********************************************/

  set KA0CM025.CU-PL-STYNM-PRT-FL normal;
  if (KA0CM025.CU-PL-STYNM-PRT-FL != " ")
    if (KA0CM025.CU-PL-STYNM-PRT-FL == "Y"
     || KA0CM025.CU-PL-STYNM-PRT-FL == "N")
      set KA0CM025.CU-PL-STYNM-PRT-FL initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.CU-PL-STYNM-PRT-FL cursor, modified, bold;
    end
  else
    KA0CM025.CU-PL-STYNM-PRT-FL = "N";
    set KA0CM025.CU-PL-STYNM-PRT-FL initialAttributes;
  end


   /* ********************************************/
   /* ****     check noncredit return flag   *****/
   /* ********************************************/

  set KA0CM025.CLJNCRFL normal;
  if (KA0CM025.CLJNCRFL != " ")
    if (KA0CM025.CLJNCRFL == "Y"
     || KA0CM025.CLJNCRFL == "N")
      set KA0CM025.CLJNCRFL initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.CLJNCRFL cursor, modified, bold;
    end
  else
    KA0CM025.CLJNCRFL = "N";
    set KA0CM025.CLJNCRFL initialAttributes;
  end


   /* ********************************************/
   /* ****    check internal/external flag   *****/
   /* ********************************************/

  set KA0CM025.XIECD normal;

  if (KA0CM025.XIECD == " ")
    KA0CM025.XIECD = "E ";
  end

  if (KA0CM025.XIECD in XIETBL.XIECD)
    if (XIETBL.XXXSTAT[sysVar.arrayIndex] == "A")
      set KA0CM025.XIECD initialAttributes;
    else
      converseLib.validationFailed(17);
      set KA0CM025.XIECD cursor, modified, bold;
    end
  else
    converseLib.validationFailed(17);
    set KA0CM025.XIECD cursor, modified, bold;
  end


   /* ********************************************/
   /* ****    check claims rtn auth flag     *****/
   /* ********************************************/

  set KA0CM025.KUCRAUTH normal;
  if (KA0CM025.KUCRAUTH != " ")
    if (KA0CM025.KUCRAUTH == "Y"
     || KA0CM025.KUCRAUTH == "N")
      set KA0CM025.KUCRAUTH initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.KUCRAUTH cursor, modified, bold;
    end
  else
    KA0CM025.KUCRAUTH = "Y";
    set KA0CM025.KUCRAUTH initialAttributes;
  end


   /* ********************************************/
   /* ****    check leverage buyout flag     *****/
   /* ********************************************/

  set KA0CM025.KUCLBOFL normal;
  if (KA0CM025.KUCLBOFL != " ")
    if (KA0CM025.KUCLBOFL == "Y"
     || KA0CM025.KUCLBOFL == "N")
      set KA0CM025.KUCLBOFL initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.KUCLBOFL cursor, modified, bold;
    end
  else
    KA0CM025.KUCLBOFL = "N";
    set KA0CM025.KUCLBOFL initialAttributes;
  end


   /* ****************************************/
   /* ****     check print weight flag   *****/
   /* ****************************************/

  set KA0CM025.NL-PRT-WT-PRO-FL normal;
  if (KA0CM025.NL-PRT-WT-PRO-FL != " ")
    if (KA0CM025.NL-PRT-WT-PRO-FL == "Y"
     || KA0CM025.NL-PRT-WT-PRO-FL == "N")
      set KA0CM025.NL-PRT-WT-PRO-FL initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.NL-PRT-WT-PRO-FL cursor, modified, bold;
    end
  else
    KA0CM025.NL-PRT-WT-PRO-FL = "N";
    set KA0CM025.NL-PRT-WT-PRO-FL initialAttributes;
  end


   /* ****************************************/
   /* ****     check prt mult pro flag   *****/
   /* ****************************************/

  set KA0CM025.NL-PRT-MUL-PRO-FL normal;
  if (KA0CM025.NL-PRT-MUL-PRO-FL != " ")
    if (KA0CM025.NL-PRT-MUL-PRO-FL == "Y"
     || KA0CM025.NL-PRT-MUL-PRO-FL == "N")
      set KA0CM025.NL-PRT-MUL-PRO-FL initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.NL-PRT-MUL-PRO-FL cursor, modified, bold;
    end
  else
    KA0CM025.NL-PRT-MUL-PRO-FL = "N";
    set KA0CM025.NL-PRT-MUL-PRO-FL initialAttributes;
  end


   /* **************************************************/
   /* ****     check book dt price override flag   *****/
   /* **************************************************/

  set KA0CM025.KUCBPIND normal;
  if (KA0CM025.KUCBPIND != " ")
    if (KA0CM025.KUCBPIND == "Y"
     || KA0CM025.KUCBPIND == "N")
      set KA0CM025.KUCBPIND initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.KUCBPIND cursor, modified, bold;
    end
  else
    KA0CM025.KUCBPIND = "N";
    set KA0CM025.KUCBPIND initialAttributes;
  end


   /* ********************************************/
   /* ****       check inv delay flag        *****/
   /* ********************************************/

  set KA0CM025.KUCIDIND normal;
  if (KA0CM025.KUCIDIND != " ")
    if (KA0CM025.KUCIDIND == "Y"
     || KA0CM025.KUCIDIND == "N")
      set KA0CM025.KUCIDIND initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0CM025.KUCIDIND cursor, modified, bold;
    end
  else
    KA0CM025.KUCIDIND = "N";
    set KA0CM025.KUCIDIND initialAttributes;
  end


   /* ------------ stmt grp ka0cs99 end ------------*/
end // end KA0CS99

// move m016 fields to m015
Function KA0CSN1()
   /* ----------- start of stmt grp ka0csn1  ------------*/

   /* move map address m016 fields to map address m015*/
   /* this is need when the long address field is displayed*/
   /* as the m015 fields are tested not m016.*/

  KA0CM015.KUKPCOID = KA0CM016.KUKPCOID;
  KA0CM015.KUKPCONM = KA0CM016.KUKPCONM;
  KA0CM015.KUCCOID = KA0CM016.KUCCOID;
  KA0CM015.KUCCONM = KA0CM016.KUCCONM;
  KA0CM015.KUCCOANM = KA0CM016.KUCCOANM;

  if (KA0CM016.KA0CM-HQ-ADDR1 == " ")
    KA0CM015.KA0CM-HQ-ADDR1 = KA0CM016.KA0CM-HQ-ADDR2;
    KA0CM015.KA0CM-HQ-ADDR2 = KA0CM016.KA0CM-HQ-ADDR3;
    KA0CM015.KA0CM-HQ-ADDR3 = KA0CM016.KA0CM-HQ-ADDR4;
  else
    KA0CM015.KA0CM-HQ-ADDR1 = KA0CM016.KA0CM-HQ-ADDR1;
    KA0CM015.KA0CM-HQ-ADDR2 = KA0CM016.KA0CM-HQ-ADDR2;
    KA0CM015.KA0CM-HQ-ADDR3 = KA0CM016.KA0CM-HQ-ADDR3;
  end
  KA0CM015.XXXCITY = KA0CM016.KA0CM-HQ-ADDR5;
  KA0CM015.XSTCD = KA0CM016.XSTCD;
  KA0CM015.XCTCD = KA0CM016.XCTCD;
  KA0CM015.XXXZIP = KA0CM016.XXXZIP;
  KA0CM015.KA0CMBF1 = KA0CM016.KA0CMBF1;

  if (KA0CM016.KA0CM-ALT-ADDR1 == " ")
    KA0CM015.KA0CM-ALT-ADDR1 = KA0CM016.KA0CM-ALT-ADDR2;
    KA0CM015.KA0CM-ALT-ADDR2 = KA0CM016.KA0CM-ALT-ADDR3;
    KA0CM015.KA0CM-ALT-ADDR3 = KA0CM016.KA0CM-ALT-ADDR4;
  else
    KA0CM015.KA0CM-ALT-ADDR1 = KA0CM016.KA0CM-ALT-ADDR1;
    KA0CM015.KA0CM-ALT-ADDR2 = KA0CM016.KA0CM-ALT-ADDR2;
    KA0CM015.KA0CM-ALT-ADDR3 = KA0CM016.KA0CM-ALT-ADDR3;
  end
  KA0CM015.XXXCITY = KA0CM016.KA0CM-ALT-ADDR5;
  KA0CM015.XSTCD = KA0CM016.CSTCD;
  KA0CM015.XCTCD = KA0CM016.CCTCD;
  KA0CM015.XXXZIP = KA0CM016.KA0CM-NZIP;
  KA0CM015.KA0CMBF2 = KA0CM016.KA0CMBF2;

    /* -----------   end of stmt grp ka0csn1  ------------*/

end // end KA0CSN1

// edit long alternate address
Function KA0CSN2()
   /* ------------  stmt grp ka0csn3 start ------------*/

    /* check alternate address - use xa0c - address appl*/

  set XA1REC empty; /* clear work fields*/


  XA1REC.XXX-ADDR1 = KA0CM016.KA0CM-ALT-ADDR1;
  XA1REC.XXX-ADDR2 = KA0CM016.KA0CM-ALT-ADDR2;
  XA1REC.XXX-ADDR3 = KA0CM016.KA0CM-ALT-ADDR3;
  XA1REC.XXX-ADDR4 = KA0CM016.KA0CM-ALT-ADDR4;
  XA1REC.XXX-ADDR5 = KA0CM016.KA0CM-ALT-ADDR5;
  XA1REC.XXX-ADDR6 = KA0CM016.KA0CM-ALT-ADDR6;
  XA1REC.XSTCD = KA0CM016.CSTCD;
  XA1REC.XCTCD = KA0CM016.CCTCD;
  XA1REC.XXXZIP = KA0CM016.KA0CM-NZIP;

  XA1REC.XA1FUNCT = "E"; /* request edit*/

  call "XA0C" (XA1REC) {isNoRefresh = yes}; /* call address appl*/

  if (XA1REC.XA1ERIND[10] != 0) /* check country code*/
    set KA0CM016.CCTCD cursor, modified, bold;
    KA0CM016.KA0CMMSG = "INVALID COUNTRY CODE";
  end
  if (XA1REC.XA1ERIND[9] != 0) /* check zip code*/
    set KA0CM016.KA0CM-NZIP cursor, modified, bold;
    KA0CM016.KA0CMMSG = "INVALID ZIP CODE";
  end
  if (XA1REC.XA1ERIND[8] != 0) /* check state code*/
    set KA0CM016.CSTCD cursor, modified, bold;
    KA0CM016.KA0CMMSG = "INVALID STATE CODE";
  end
  if (XA1REC.XA1ERIND[7] != 0) /* check country desc*/
    set KA0CM016.KA0CM-ALT-ADDR6 cursor, modified, bold;
    KA0CM016.KA0CMMSG = "COUNTRY REQUIRED";
  end
  if (XA1REC.XA1ERIND[6] != 0) /* check city code*/
    set KA0CM016.KA0CM-ALT-ADDR5 cursor, modified, bold;
    KA0CM016.KA0CMMSG = "CITY REQUIRED";
  end
  if (XA1REC.XA1ERIND[5] != 0) /* check address line*/
    set KA0CM016.KA0CM-ALT-ADDR4 cursor, modified, bold;
    KA0CM016.KA0CMMSG = "AT LEAST 1 ADDRESS LINE REQUIRED";
  end

  KA0CM016.KA0CM-ALT-ADDR1 = XA1REC.XXX-ADDR1;
  KA0CM016.KA0CM-ALT-ADDR2 = XA1REC.XXX-ADDR2;
  KA0CM016.KA0CM-ALT-ADDR3 = XA1REC.XXX-ADDR3;
  KA0CM016.KA0CM-ALT-ADDR4 = XA1REC.XXX-ADDR4;
  KA0CM016.KA0CM-ALT-ADDR5 = XA1REC.XXX-ADDR5;
  KA0CM016.KA0CM-ALT-ADDR6 = XA1REC.XXX-ADDR6;
  KA0CM016.CSTCD = XA1REC.XSTCD;
  KA0CM016.KA0CM-NZIP = XA1REC.XXXZIP;
  KA0CM016.CCTCD = XA1REC.XCTCD;

   /* ------------  stmt grp ka0csn3 end ------------*/
end // end KA0CSN2

// edit long hq address
Function KA0CSN3()
   /* ------------ stmt grp ka0csn4 start ------------*/

    /* check headquarter address - use xa0c - address appl*/

  set XA1REC empty; /* clear work fields*/

  XA1REC.XXX-ADDR1 = KA0CM016.KA0CM-HQ-ADDR1;
  XA1REC.XXX-ADDR2 = KA0CM016.KA0CM-HQ-ADDR2;
  XA1REC.XXX-ADDR3 = KA0CM016.KA0CM-HQ-ADDR3;
  XA1REC.XXX-ADDR4 = KA0CM016.KA0CM-HQ-ADDR4;
  XA1REC.XXX-ADDR5 = KA0CM016.KA0CM-HQ-ADDR5;
  XA1REC.XXX-ADDR6 = KA0CM016.KA0CM-HQ-ADDR6;
  XA1REC.XSTCD = KA0CM016.XSTCD;
  XA1REC.XCTCD = KA0CM016.XCTCD;
  XA1REC.XXXZIP = KA0CM016.XXXZIP;

  XA1REC.XA1FUNCT = "E"; /* request edit*/

  call "XA0C" (XA1REC) {isNoRefresh = yes}; /* call address appl*/

  if (XA1REC.XA1ERIND[10] != 0) /* check country code*/
    set KA0CM016.XCTCD cursor, modified, bold;
    KA0CM016.KA0CMMSG = "INVALID COUNTRY CODE";
  else
    set KA0CM016.XCTCD initialAttributes;
  end
  if (XA1REC.XA1ERIND[9] != 0) /* check zip code*/
    set KA0CM016.XXXZIP cursor, modified, bold;
    KA0CM016.KA0CMMSG = "INVALID ZIP CODE";
  else
    set KA0CM016.XXXZIP initialAttributes;
  end
  if (XA1REC.XA1ERIND[8] != 0) /* check state code*/
    set KA0CM016.XSTCD cursor, modified, bold;
    KA0CM016.KA0CMMSG = "INVALID STATE CODE";
  else
    set KA0CM016.XSTCD initialAttributes;
  end
  if (XA1REC.XA1ERIND[7] != 0) /* check country desc*/
    set KA0CM016.KA0CM-HQ-ADDR6 cursor, modified, bold;
    KA0CM016.KA0CMMSG = "COUNTRY REQUIRED";
  else
    set KA0CM016.KA0CM-HQ-ADDR6 initialAttributes;
  end
  if (XA1REC.XA1ERIND[6] != 0) /* check city code*/
    set KA0CM016.KA0CM-HQ-ADDR5 cursor, modified, bold;
    KA0CM016.KA0CMMSG = "CITY REQUIRED";
  else
    set KA0CM016.KA0CM-HQ-ADDR5 initialAttributes;
  end
  if (XA1REC.XA1ERIND[5] != 0) /* check address line*/
    set KA0CM016.KA0CM-HQ-ADDR4 cursor, modified, bold;
    KA0CM016.KA0CMMSG = "AT LEAST 1 ADDRESS LINE REQUIRED";
  else
    set KA0CM016.KA0CM-HQ-ADDR4 initialAttributes;
  end

  KA0CM016.KA0CM-HQ-ADDR1 = XA1REC.XXX-ADDR1;
  KA0CM016.KA0CM-HQ-ADDR2 = XA1REC.XXX-ADDR2;
  KA0CM016.KA0CM-HQ-ADDR3 = XA1REC.XXX-ADDR3;
  KA0CM016.KA0CM-HQ-ADDR4 = XA1REC.XXX-ADDR4;
  KA0CM016.KA0CM-HQ-ADDR5 = XA1REC.XXX-ADDR5;
  KA0CM016.KA0CM-HQ-ADDR6 = XA1REC.XXX-ADDR6;
  KA0CM016.XSTCD = XA1REC.XSTCD;
  KA0CM016.XXXZIP = XA1REC.XXXZIP;
  KA0CM016.XCTCD = XA1REC.XCTCD;

   /* ------------  stmt grp ka0csn3 end ------------*/
end // end KA0CSN3

// move m036 to m035
Function KA0CSN4()
   /* -------- start stmt grp ka0csn4 --------------*/

   /* move ka0cm036 to ka0cm035*/

  KA0CM035.KUCSTMT = KA0CM036.KUCSTMT; /* send statement*/
  KA0CM035.CU-BILL-IND = KA0CM036.CU-BILL-IND; /* eom*/
  KA0CM035.KUCJSRFL = KA0CM036.KUCJSRFL; /* subdivision*/
  KA0CM035.KUCECODY = KA0CM036.KUCECODY; /* eom cutoff*/
  KA0CM035.KUCPDSPD = KA0CM036.KUCPDSPD; /* disc pymt day*/
  KA0CM035.CU-PO-DT-FL = KA0CM036.CU-PO-DT-FL; /* po dating*/
  KA0CM035.KUCPOFL = KA0CM036.KUCPOFL; /* po required flag*/
  KA0CM035.KUCYPOAP = KA0CM036.KUCYPOAP; /* po required -aprl*/
  KA0CM035.KUCYPOFT = KA0CM036.KUCYPOFT; /* po required -ftwr*/
  KA0CM035.KUCVNDFL = KA0CM036.KUCVNDFL; /* vend auth fl*/

   /* -------- end stmt grp ka0csn4 --------------*/
end // end KA0CSN4

// edit billing address
Function KA0CSN6()
   /* ------------ stmt grp ka0csn7 start ------------*/

    /* check billing address - use xa0c - address appl*/

  set XA1REC empty; /* clear work fields*/
  XA1REC.XXX-ADDR1 = KA0CM036.XXX-ADDR1;
  XA1REC.XXX-ADDR2 = KA0CM036.XXX-ADDR2;
  XA1REC.XXX-ADDR3 = KA0CM036.XXX-ADDR3;
  XA1REC.XXX-ADDR4 = KA0CM036.XXX-ADDR4;
  XA1REC.XXX-ADDR5 = KA0CM036.XXX-ADDR5;
  XA1REC.XXX-ADDR6 = KA0CM036.XXX-ADDR6;
  XA1REC.XSTCD = KA0CM036.XSTCD;
  XA1REC.XXXZIP = KA0CM036.XXXZIP;
  XA1REC.XCTCD = KA0CM036.XCTCD;
  XA1REC.XA1FUNCT = "E"; /* request edit*/

  call "XA0C" (XA1REC) {isNoRefresh = yes}; /* call address appl*/

  if (XA1REC.XA1ERIND[10] != 0) /* check country code*/
    set KA0CM036.XCTCD cursor, modified, bold;
    KA0CM036.KA0CMMSG = "INVALID COUNTRY CODE";
  else
    set KA0CM036.XCTCD initialAttributes;
  end
  if (XA1REC.XA1ERIND[9] != 0) /* check zip code*/
    set KA0CM036.XXXZIP cursor, modified, bold;
    KA0CM036.KA0CMMSG = "INVALID ZIP CODE";
  else
    set KA0CM036.XXXZIP initialAttributes;
  end
  if (XA1REC.XA1ERIND[8] != 0) /* check state code*/
    set KA0CM036.XSTCD cursor, modified, bold;
    KA0CM036.KA0CMMSG = "INVALID STATE CODE";
  else
    set KA0CM036.XSTCD initialAttributes;
  end
  if (XA1REC.XA1ERIND[7] != 0) /* check country*/
    set KA0CM036.XXX-ADDR6 cursor, modified, bold;
    KA0CM036.KA0CMMSG = "COUNTRY REQUIRED";
  else
    set KA0CM036.XXX-ADDR6 initialAttributes;
  end
  if (XA1REC.XA1ERIND[6] != 0) /* check city code*/
    set KA0CM036.XXX-ADDR5 cursor, modified, bold;
    KA0CM036.KA0CMMSG = "CITY REQUIRED";
  else
    set KA0CM036.XXX-ADDR5 initialAttributes;
  end
  if (XA1REC.XA1ERIND[5] != 0) /* check address lines*/
    set KA0CM036.XXX-ADDR4 cursor, modified, bold;
    KA0CM036.KA0CMMSG = "AT LEAST 1 ADDRESS LINE REQUIRED";
  else
    set KA0CM036.XXX-ADDR4 initialAttributes;
  end

  KA0CM036.XXX-ADDR1 = XA1REC.XXX-ADDR1;
  KA0CM036.XXX-ADDR2 = XA1REC.XXX-ADDR2;
  KA0CM036.XXX-ADDR3 = XA1REC.XXX-ADDR3;
  KA0CM036.XXX-ADDR4 = XA1REC.XXX-ADDR4;
  KA0CM036.XXX-ADDR5 = XA1REC.XXX-ADDR5;
  KA0CM036.XXX-ADDR6 = XA1REC.XXX-ADDR6;

   /* ---------- stmt grp ka0csn7 end ------------*/
end // end KA0CSN6

// add bill group address - nil
Function KA0CSN7()
   /* ------------ stmt grp ka0csn8 start ------------*/

    /* add bill group address - use xa0c - address appl*/

  set XA1REC empty; /* clear work fields*/
  XA1REC.NLAINTGR = KA0CM036.KUCCOID;
  XA1REC.NLAADRID = 1;
  XA1REC.XXX-ADDR1 = KA0CM036.XXX-ADDR1;
  XA1REC.XXX-ADDR2 = KA0CM036.XXX-ADDR2;
  XA1REC.XXX-ADDR3 = KA0CM036.XXX-ADDR3;
  XA1REC.XXX-ADDR4 = KA0CM036.XXX-ADDR4;
  XA1REC.XXX-ADDR5 = KA0CM036.XXX-ADDR5;
  XA1REC.XXX-ADDR6 = KA0CM036.XXX-ADDR6;
  XA1REC.XSTCD = KA0CM036.XSTCD;
  XA1REC.XXXZIP = KA0CM036.XXXZIP;
  XA1REC.XCTCD = KA0CM036.XCTCD;
  XA1REC.XXXUSER = COMMAREA.CAUSERID;

  XA1REC.NLATYPIN = "C"; /* address from the cust system*/
  XA1REC.XA1FUNCT = "I"; /* request address add/use cnt 1*/

  call "XA0C" (XA1REC) {isNoRefresh = yes}; /* call address appl*/

   /* ---------- stmt grp ka0csn8 end ------------*/
end // end KA0CSN7

// hq address add - nil
Function KA0CSN8()
   /* ------------ stmt grp ka0csna start ------------*/

    /* add headquarter address - use xa0c - address appl*/

  set XA1REC empty; /* clear work fields*/
  XA1REC.NLAINTGR = KA0CM016.KUCCOID; /* company*/
  XA1REC.NLAADRID = 2; /* address id*/
  XA1REC.XXX-ADDR1 = KA0CM016.KA0CM-HQ-ADDR1;
  XA1REC.XXX-ADDR2 = KA0CM016.KA0CM-HQ-ADDR2;
  XA1REC.XXX-ADDR3 = KA0CM016.KA0CM-HQ-ADDR3;
  XA1REC.XXX-ADDR4 = KA0CM016.KA0CM-HQ-ADDR4;
  XA1REC.XXX-ADDR5 = KA0CM016.KA0CM-HQ-ADDR5;
  XA1REC.XXX-ADDR6 = KA0CM016.KA0CM-HQ-ADDR6;
  XA1REC.XSTCD = KA0CM016.XSTCD;
  XA1REC.XXXZIP = KA0CM016.XXXZIP;
  XA1REC.XCTCD = KA0CM016.XCTCD;
  XA1REC.XXXUSER = COMMAREA.CAUSERID;

  XA1REC.NLATYPIN = "C"; /* address from cust system*/
  XA1REC.XA1FUNCT = "I"; /* request address add/use cnt 1*/

  call "XA0C" (XA1REC) {isNoRefresh = yes}; /* call address appl*/

   /* ---------- stmt grp ka0csna end ------------*/
end // end KA0CSN8

// alter (dba) address add - nil
Function KA0CSN9()
   /* ------------  stmt grp ka0csnb start ------------*/

    /* add alternate address - use xa0c - address appl*/

  set XA1REC empty; /* clear work fields*/
  XA1REC.NLAINTGR = KA0CM016.KUCCOID; /* company*/
  XA1REC.NLAADRID = KUCREC.KUCMADID + 1; /* address = max address + 1*/
  XA1REC.XXX-ADDR1 = KA0CM016.KA0CM-HQ-ADDR1;
  XA1REC.XXX-ADDR2 = KA0CM016.KA0CM-HQ-ADDR2;
  XA1REC.XXX-ADDR3 = KA0CM016.KA0CM-HQ-ADDR3;
  XA1REC.XXX-ADDR4 = KA0CM016.KA0CM-HQ-ADDR4;
  XA1REC.XXX-ADDR5 = KA0CM016.KA0CM-HQ-ADDR5;
  XA1REC.XXX-ADDR6 = KA0CM016.KA0CM-HQ-ADDR6;
  XA1REC.XSTCD = KA0CM016.CSTCD;
  XA1REC.XXXZIP = KA0CM016.KA0CM-NZIP;
  XA1REC.XCTCD = KA0CM016.CCTCD;
  XA1REC.XXXUSER = COMMAREA.CAUSERID;

  XA1REC.NLATYPIN = "C"; /* address from the cust system*/
  XA1REC.XA1FUNCT = "I"; /* request address add/use cnt = 1*/

  call "XA0C" (XA1REC) {isNoRefresh = yes}; /* call address appl*/

   /* ------------  stmt grp ka0csnb end ------------*/
end // end KA0CSN9

// carry forward billing address
Function KA0CSNA()
   /* -------- start stmt grp ka0csna --------------*/

   /* if bill to flag set in setup company long address, carry*/
   /* flagged long address forward, and protect address fields.*/

  if (KA0CM016.KA0CMBF1 == "Y") /* check hq address flag*/
    KA0CM036.XXX-ADDR1 = KA0CM016.KA0CM-HQ-ADDR1;
    set KA0CM036.XXX-ADDR1 skip;
    KA0CM036.XXX-ADDR2 = KA0CM016.KA0CM-HQ-ADDR2;
    set KA0CM036.XXX-ADDR2 skip;
    KA0CM036.XXX-ADDR3 = KA0CM016.KA0CM-HQ-ADDR3;
    set KA0CM036.XXX-ADDR3 skip;
    KA0CM036.XXX-ADDR4 = KA0CM016.KA0CM-HQ-ADDR4;
    set KA0CM036.XXX-ADDR4 skip;
    KA0CM036.XXX-ADDR5 = KA0CM016.KA0CM-HQ-ADDR5;
    set KA0CM036.XXX-ADDR5 skip;
    KA0CM036.XXX-ADDR6 = KA0CM016.KA0CM-HQ-ADDR6;
    set KA0CM036.XXX-ADDR6 skip;
    KA0CM036.XSTCD = KA0CM016.XSTCD;
    set KA0CM036.XSTCD skip;
    KA0CM036.XXXZIP = KA0CM016.XXXZIP;
    set KA0CM036.XXXZIP skip;
    KA0CM036.XCTCD = KA0CM016.XCTCD;
    set KA0CM036.XCTCD skip;
  end

  if (KA0CM016.KA0CMBF2 == "Y") /* check alt address flag*/
    KA0CM036.XXX-ADDR1 = KA0CM016.KA0CM-ALT-ADDR1;
    set KA0CM036.XXX-ADDR1 skip;
    KA0CM036.XXX-ADDR2 = KA0CM016.KA0CM-ALT-ADDR2;
    set KA0CM036.XXX-ADDR2 skip;
    KA0CM036.XXX-ADDR3 = KA0CM016.KA0CM-ALT-ADDR3;
    set KA0CM036.XXX-ADDR3 skip;
    KA0CM036.XXX-ADDR4 = KA0CM016.KA0CM-ALT-ADDR4;
    set KA0CM036.XXX-ADDR4 skip;
    KA0CM036.XXX-ADDR5 = KA0CM016.KA0CM-ALT-ADDR5;
    set KA0CM036.XXX-ADDR5 skip;
    KA0CM036.XXX-ADDR6 = KA0CM016.KA0CM-ALT-ADDR6;
    set KA0CM036.XXX-ADDR6 skip;
    KA0CM036.XSTCD = KA0CM016.CSTCD;
    set KA0CM036.XSTCD skip;
    KA0CM036.XXXZIP = KA0CM016.KA0CM-NZIP;
    set KA0CM036.XXXZIP skip;
    KA0CM036.XCTCD = KA0CM016.CCTCD;
    set KA0CM036.XCTCD skip;
  end

   /* -------- end stmt grp ka0csna --------------*/
end // end KA0CSNA

//*** RECORD=KA0CW01 ****
// working storage specific to ka0c.
// ***********************
Record KA0CW01 type basicRecord
  5 KA0CWKEY KA0CWKEY ; 
  5 KA0CWIN1 KA0CWIN1 ; 
  5 KA0CWPF3 KA0CWPF3 ; 
  5 KA0CWPF4 KA0CWPF4 ; 
  5 KA0CWCD KA0CWCD ; 
    10 KA0CWCD1 KA0CWCD1 ; 
    10 KA0CWCD2 KA0CWCD2 ; 
  5 KA0CWEDT KA0CWEDT ; 
  5 KA0CWPRN KA0CWPRN [5] ; 
    10 KA0CWSSN KA0CWSSN ; 
    10 KA0CWPNM KA0CWPNM ; 
    10 KA0CWPTL KA0CWPTL ; 
    10 KA0CWGF1 KA0CWGF1 ; 
    10 KA0CWGF2 KA0CWGF2 ; 
  5 KA0CWGE KA0CWGE [5] ; 
    10 KA0CWGEC KA0CWGEC ; 
    10 KA0CWGEY KA0CWGEY ; 
    10 KA0CWGEM KA0CWGEM ; 
    10 KA0CWGED KA0CWGED ; 
  5 KA0CWNXA KA0CWNXA ; 
    10 KA0CWNXN KA0CWNXN ; 
  5 KA0CWSDP KA0CWSDP [30] ; 
    10 KA0CWNDP KA0CWNDP ; 
    10 KA0CWCDP KA0CWCDP ; 
    10 KA0CWCNM KA0CWCNM ; 
    10 KUJCRIND KUJCRIND ; 
    10 KA0CWGA1 KA0CWGA1 ; 
    10 KA0CWGA2 KA0CWGA2 ; 
    10 KA0CWGA3 KA0CWGA3 ; 
    10 KA0CWGA4 KA0CWGA4 ; 
    10 KA0CWSP1 KA0CWSP1 ; 
    10 KA0CWSP2 KA0CWSP2 ; 
    10 KA0CWSP3 KA0CWSP3 ; 
    10 KA0CWSP4 KA0CWSP4 ; 
    10 KA0CWSP5 KA0CWSP5 ; 
    10 KA0CWSP6 KA0CWSP6 ; 
    10 KA0CWSP7 KA0CWSP7 ; 
    10 KA0CWSP8 KA0CWSP8 ; 
    10 KUJXLCND KUJXLCND ; 
    10 KA0CWLC1 KA0CWLC1 ; 
    10 KA0CWLC2 KA0CWLC2 ; 
    10 KA0CWLC3 KA0CWLC3 ; 
    10 KA0CWLC4 KA0CWLC4 ; 
    10 KUJXSPND KUJXSPND ; 
    10 KA0CWSB1 KA0CWSB1 ; 
    10 KA0CWSB2 KA0CWSB2 ; 
    10 KA0CWSB3 KA0CWSB3 ; 
    10 KA0CWSB4 KA0CWSB4 ; 
    10 KUJXQAND KUJXQAND ; 
    10 KA0CWQA1 KA0CWQA1 ; 
    10 KA0CWQA2 KA0CWQA2 ; 
    10 KA0CWQA3 KA0CWQA3 ; 
    10 KA0CWQA4 KA0CWQA4 ; 
  5 KA0CWYMD KA0CWYMD ; 
    10 KA0CW-CCYY KA0CW-CCYY ; 
      15 KA0CWYC KA0CWYC ; 
      15 KA0CWYY KA0CWYY ; 
    10 KA0CWYM KA0CWYM ; 
    10 KA0CWYD KA0CWYD ; 
  5 KA0CWIX1 KA0CWIX1 ; 
  5 KA0CWIX2 KA0CWIX2 ; 
  5 KA0CWIX3 KA0CWIX3 ; 
  5 KA0CWZIP KA0CWZIP ; 
    10 KA0CWZPX KA0CWZPX ; 
    10 * char(6) ; 
  5 KA0CWSQL KA0CWSQL ; 
  5 KA0CWMSG KA0CWMSG ; 
  5 KA0CWYCD KA0CWYCD ; 
  5 KA0CW-LST-DAB-RPT-DT KA0CW-LST-DAB-RPT-DT ; 
    10 KA0CW-LST-DAB-RPT-CCYY KA0CW-LST-DAB-RPT-CCYY ; 
      15 KA0CW-LST-DAB-RPT-CC KA0CW-LST-DAB-RPT-CC ; 
      15 KA0CW-LST-DAB-RPT-YY KA0CW-LST-DAB-RPT-YY ; 
    10 KA0CW-LST-DAB-RPT-MM KA0CW-LST-DAB-RPT-MM ; 
    10 KA0CW-LST-DAB-RPT-DD KA0CW-LST-DAB-RPT-DD ; 
  5 KA0CW-CR-APPL-DT KA0CW-CR-APPL-DT ; 
    10 KA0CW-CR-APPL-CCYY KA0CW-CR-APPL-CCYY ; 
      15 KA0CW-CR-APPL-CC KA0CW-CR-APPL-CC ; 
      15 KA0CW-CR-APPL-YY KA0CW-CR-APPL-YY ; 
    10 KA0CW-CR-APPL-MM KA0CW-CR-APPL-MM ; 
    10 KA0CW-CR-APPL-DD KA0CW-CR-APPL-DD ; 
  5 KA0CW-EFF-CCYY KA0CW-EFF-CCYY ; 
    10 KA0CW-EFF-CC KA0CW-EFF-CC ; 
    10 KA0CW-EFF-YY KA0CW-EFF-YY ; 
  5 KA0CW-EXP-CCYY KA0CW-EXP-CCYY ; 
    10 KA0CW-EXP-CC KA0CW-EXP-CC ; 
    10 KA0CW-EXP-YY KA0CW-EXP-YY ; 
end // end KA0CW01

//*** RECORD=KA0CW02 ****
// this record formats the data passed to the add customer
// applications thru the commarea.causera field.
// ------------------------------------------------------------
// *               European Cloning
// ------------------------------------------------------------
// *
// 13-july-1993         dlegg     Add character redefintions
//                                of numeric fields.
// ***********************
Record KA0CW02 type basicRecord
  5 KA0CWGRP KA0CWGRP ; 
    10 KA0CWCID KA0CWCID ; 
      15 KA0CWCID-CHAR KA0CWCID-CHAR ; 
    10 KA0CWSID KA0CWSID ; 
      15 KA0CWSID-CHAR KA0CWSID-CHAR ; 
    10 KA0CWDID KA0CWDID ; 
      15 KA0CWDID-CHAR KA0CWDID-CHAR ; 
    10 KA0CWGPC KA0CWGPC ; 
    10 KA0CWXLE KA0CWXLE ; 
    10 KA0CWOCP KA0CWOCP ; 
      15 KA0CWOCP-CHAR KA0CWOCP-CHAR ; 
    10 KA0CWERR KA0CWERR ; 
      15 KA0CWERR-CHAR KA0CWERR-CHAR ; 
end // end KA0CW02

//*** RECORD=KA0CW04 ****
// this is the csp working storage format company table.  the
// table contains data that is specific to the company level
// of the customer data base.
// 
// db2 table:        dcust.vcmpny01
// 
// dclgen:           dcl0021
// 
// i/o mod:          io0240
// 
// key to table:     kuccoid   -   cu-co-id
// 
// date created:     4/4/86
// 
// maintanence log:
//   who       when     why
// --------- --------  ---------------------------------------
// CHELLM    03/11/94  Database changes.
//                     Rnm: CU-MAX-YNT-CD to CU-MAX-FTWR-YNT-CD
//                     Add: CU-MAX-APRL-YNT-CD
//                          CU-CO-SELF-NBR, CU-VEND-NBR
//                          xxx-intl-phone-nbr
// ***********************
Record KA0CW04 type basicRecord
  5 KUCGRP KUCGRP ; 
    10 KUCCOID KUCCOID ; 
    10 KUKPCOID KUKPCOID ; 
    10 KUCGRPID KUCGRPID ; 
    10 KUCCOIDN KUCCOIDN ; 
    10 KUCCONM KUCCONM ; 
    10 CU-CO-SHORT-NM CU-CO-SHORT-NM ; 
    10 KUCCOANM KUCCOANM ; 
    10 KUCCOAID KUCCOAID ; 
    10 KUCCCAID KUCCCAID ; 
    10 KUCBLAID KUCBLAID ; 
    10 KUCPHN KUCPHN ; 
    10 XLECD XLECD ; 
    10 XCTCD XCTCD ; 
    10 KUCCNTCT KUCCNTCT ; 
    10 KUCCOBDT KUCCOBDT ; 
    10 KUCFINDT KUCFINDT ; 
    10 KUCSSCNT KUCSSCNT ; 
    10 KUCNSCNT KUCNSCNT ; 
    10 KUCMSTID KUCMSTID ; 
    10 KUCMADID KUCMADID ; 
    10 XLGCD XLGCD ; 
    10 XCRCD XCRCD ; 
    10 XCUCD XCUCD [2] ; 
    10 XCECD XCECD ; 
    10 XAUCD XAUCD ; 
    10 YCH-CHNL-CLS-CD YCH-CHNL-CLS-CD ; 
    10 YCPCD YCPCD ; 
    10 KUCCOLCD KUCCOLCD ; 
    10 KUCBPIND KUCBPIND ; 
    10 KUCLBOFL KUCLBOFL ; 
    10 KUCIDIND KUCIDIND ; 
    10 XIECD XIECD ; 
    10 CU-PRT-XREF-FL CU-PRT-XREF-FL ; 
    10 XXXSTAT XXXSTAT ; 
    10 KUCATCSH KUCATCSH ; 
    10 KUCCSHNF KUCCSHNF ; 
    10 KUCPOFL KUCPOFL ; 
    10 KUCYPOFT KUCYPOFT ; 
    10 KUCYPOAP KUCYPOAP ; 
    10 KUCWHSFL KUCWHSFL ; 
    10 KUCVNDFL KUCVNDFL ; 
    10 KUCSTMT KUCSTMT ; 
    10 YVICD YVICD [3] ; 
    10 YLICD YLICD ; 
    10 KUCXCSFL KUCXCSFL ; 
    10 KUCINSPD KUCINSPD ; 
    10 KUCFRTPD KUCFRTPD ; 
    10 KUCALERT KUCALERT ; 
    10 KUCMAGCT KUCMAGCT ; 
    10 KUCCNSCD KUCCNSCD ; 
    10 KUCPSFL KUCPSFL ; 
    10 CU-CR-APPL-DT CU-CR-APPL-DT ; 
    10 KUCCRLEF KUCCRLEF ; 
    10 KUCCRLEX KUCCRLEX ; 
    10 KUCCRLIN KUCCRLIN ; 
    10 KUCASMT KUCASMT ; 
    10 XCCCD XCCCD ; 
    10 KUCCSTDT KUCCSTDT ; 
    10 XCACD XCACD ; 
    10 KUCACYNR KUCACYNR ; 
    10 KUCACYDT KUCACYDT ; 
    10 KUCAPDEX KUCAPDEX ; 
    10 KUCACYRT KUCACYRT ; 
    10 KUCPRVRT KUCPRVRT ; 
    10 KUCLVIND KUCLVIND ; 
    10 CU-LST-DAB-RPT-DT CU-LST-DAB-RPT-DT ; 
    10 KUCLCEDT KUCLCEDT ; 
    10 KUCLCXDT KUCLCXDT ; 
    10 KUCLCAMT KUCLCAMT ; 
    10 KUCJSRFL KUCJSRFL ; 
    10 KUCRAUTH KUCRAUTH ; 
    10 CU-BILL-IND CU-BILL-IND ; 
    10 CU-PO-DT-FL CU-PO-DT-FL ; 
    10 KUCECODY KUCECODY ; 
    10 KUCPDSPD KUCPDSPD ; 
    10 XLBCD XLBCD ; 
    10 CU-HANG-DFLT-FL CU-HANG-DFLT-FL ; 
    10 KUCSTYNT KUCSTYNT ; 
    10 CU-MAX-FTWR-YNT-CD CU-MAX-FTWR-YNT-CD ; 
    10 CU-MAX-APRL-YNT-CD CU-MAX-APRL-YNT-CD ; 
    10 YCU-CRTN-USE-CD YCU-CRTN-USE-CD ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 CU-PL-STYNM-PRT-FL CU-PL-STYNM-PRT-FL ; 
    10 CU-DOC-BY-ORD-FL CU-DOC-BY-ORD-FL ; 
    10 KUCFTRTI KUCFTRTI ; 
    10 KUCPRPTI KUCPRPTI ; 
    10 XOPCD XOPCD [4] ; 
    10 KUCAPRDT KUCAPRDT ; 
    10 KUCFPRDT KUCFPRDT ; 
    10 KUCSBKFL KUCSBKFL ; 
    10 KUCCOMNT KUCCOMNT ; 
    10 KUCSKIND KUCSKIND ; 
    10 CU-CUSKU-SZ-FL CU-CUSKU-SZ-FL ; 
    10 CU-EDI-CUST-IND CU-EDI-CUST-IND ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 CU-CO-SELF-NBR CU-CO-SELF-NBR ; 
    10 CU-VEND-NBR CU-VEND-NBR ; 
    10 XXX-INTL-PHONE-NBR XXX-INTL-PHONE-NBR ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end KA0CW04

DataItem KA0CW-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work century
DataItem KA0CW-CR-APPL-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KA0CW-CR-APPL-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work day
DataItem KA0CW-CR-APPL-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu-cr-appl-dt
DataItem KA0CW-CR-APPL-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work month
DataItem KA0CW-CR-APPL-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work year
DataItem KA0CW-CR-APPL-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work century
DataItem KA0CW-EFF-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu-lst-dab-dt
DataItem KA0CW-EFF-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work year
DataItem KA0CW-EFF-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work century
DataItem KA0CW-EXP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu-lst-dab-dt
DataItem KA0CW-EXP-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work year
DataItem KA0CW-EXP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work century
DataItem KA0CW-LST-DAB-RPT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work century
DataItem KA0CW-LST-DAB-RPT-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work day
DataItem KA0CW-LST-DAB-RPT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu-lst-dab-dt
DataItem KA0CW-LST-DAB-RPT-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work month
DataItem KA0CW-LST-DAB-RPT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work year
DataItem KA0CW-LST-DAB-RPT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work code
DataItem KA0CWCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   first char
DataItem KA0CWCD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   second char
DataItem KA0CWCD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   customer self dept
DataItem KA0CWCDP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem KA0CWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KA0CWCID-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   customer self dept name
DataItem KA0CWCNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept id
DataItem KA0CWDID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KA0CWDID-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// good edit flag
DataItem KA0CWEDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error number
DataItem KA0CWERR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KA0CWERR-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGA_GNDR_AGE_CD
DataItem KA0CWGA1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGA_GNDR_AGE_CD
DataItem KA0CWGA2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGA_GNDR_AGE_CD
DataItem KA0CWGA3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGA_GNDR_AGE_CD
DataItem KA0CWGA4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   date (yyyymmdd)
DataItem KA0CWGE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     century
DataItem KA0CWGEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     day
DataItem KA0CWGED num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     month
DataItem KA0CWGEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//     year
DataItem KA0CWGEY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   guarantee flag
DataItem KA0CWGF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   spouse guarantee flag
DataItem KA0CWGF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen. prod. class
DataItem KA0CWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group field
DataItem KA0CWGRP char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general work ind 1
DataItem KA0CWIN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index for occurs
DataItem KA0CWIX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index for occurs
DataItem KA0CWIX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for restrictions
DataItem KA0CWIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work key field
DataItem KA0CWKEY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem KA0CWLC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem KA0CWLC2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem KA0CWLC3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XLC_LIFE_CYC_CD
DataItem KA0CWLC4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area for ka0cs01
DataItem KA0CWMSG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   nike dept
DataItem KA0CWNDP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data conversion work
DataItem KA0CWNXA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   data conversion work
DataItem KA0CWNXN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old company id
DataItem KA0CWOCP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old company id redefined char
DataItem KA0CWOCP-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data lost flag
DataItem KA0CWPF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data lost flag
DataItem KA0CWPF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   name
DataItem KA0CWPNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// principals storage
DataItem KA0CWPRN char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   title
DataItem KA0CWPTL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem KA0CWQA1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem KA0CWQA2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem KA0CWQA3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem KA0CWQA4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KA0CWSB1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KA0CWSB2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KA0CWSB3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KA0CWSB4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save for 30 dept's
DataItem KA0CWSDP char(94)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KA0CWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store id redefined char
DataItem KA0CWSID-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sport activity code
DataItem KA0CWSP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sport activity code
DataItem KA0CWSP2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sport activity code
DataItem KA0CWSP3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sport activity code
DataItem KA0CWSP4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sport activity code
DataItem KA0CWSP5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sport activity code
DataItem KA0CWSP6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sport activity code
DataItem KA0CWSP7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sport activity code
DataItem KA0CWSP8 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area for sqlca
DataItem KA0CWSQL char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   social security number
DataItem KA0CWSSN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// legal entity cd
DataItem KA0CWXLE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   work century
DataItem KA0CWYC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold area for ycpcd
DataItem KA0CWYCD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work day
DataItem KA0CWYD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work month
DataItem KA0CWYM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yyyymmdd
DataItem KA0CWYMD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work year
DataItem KA0CWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work zip code
DataItem KA0CWZIP char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   work zip prefix
DataItem KA0CWZPX char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

