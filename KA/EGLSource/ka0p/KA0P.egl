package ka0p;

import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XSTTBL;
import kl.common.KIZTBL;
import ku.common.KUCREC;
import ku.common.KUKREC;
import ku.common.KURREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import xa.common.XA0AW02;
//*** PROGRAM=KA0P ****
// -------------  ka0p - add parent company  ------------------
// overview:  this application is used to edit parent company
//            data and add it to the parent company db2 table.
// 
// date written:  3/86
// author:        dave ply - cap gemni america
// maintenance
// date     who     why
// _______________________________________________________
// 011690   jfiat   db changes
// 
// processing:
//   1. control is recieved from the add customer menu
//      application. (ka0m)
//   2. xsentry - security checking.
//   3. initialize add parent map.
//   4. converse map loop: (process after stage)
//      a. clear msg fields.
//      b. check standard entry keys.
//      c. edit fields. (field edit requirements noted in
//         process block).
//      d. check for clean edit.  if clean, and good edit flag
//         not set, set edit flag and confirm message.
//   5. flow logic:
//      a. if refresh (pa2) requested, redisplay thru
//         initialization process.
//      b. if edit errors, or messages, reconverse map.
//      c. if no errors/msg's, check confirm key (pf2). if
//         confirm key set, continue to add process. else
//         reconverse with confirm message.
//   6. add process:
//      a. clear kukrec (add parent csp record)
//      b. move map fields to kukrec.  downward adjust address
//         lines for sperry bridge.
//      c. convert csp system date to db2 time/date stamp fmt.
//      d. write db2 record.
//      e. format audit trail record.
//      f. write audit trail record.
//      g. transfer control back to add menu (ka0m).
// ------------------------------------------------------------
// 11/11/88 jbw   added noncsp option to calls
// 11/11/88 jbw   added xssegtr logic
// 09/10/90 dsalz add kiztbl for audit trail
// 10/11/91 CHELLM Regen for DB2 changes.
// ------------------------------------------------------------
// *                European Cloning
// ------------------------------------------------------------
// 2-july-1993          dlegg      Change calls to TA0020 with
//                                 ABND to RETN. KA0P015,S07,
//                                 S08,S06.
// 13-july-1993         dlegg      Add sgrp to initialize all
//                                 records. KA0P005.
// 12-nov-1993          chellm     Database changes
// 18-nov-1997          MBURLE     Y2KFIX: removed zero edit
//                                 from map flds: KA0PMRYY &
//                                 KA0PMRCY. Modified procs:
//                                 KA0P015 and KA0PS02.
// *********************
Program KA0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KA0PW01 KA0PW01; // record
  KUCREC KUCREC; // record
  KUKREC KUKREC; // record
  KURREC KURREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use KA0PM.KA0PM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KA0P005: KA0P005();
     /* ---------  ka0p005 flow --------------------*/
      /* to converse parent add map*/
    goto KA0P010;
    KA0P010: KA0P010();
    ;
    ;
     /* ---------- flow for process ka0p010 ----------------------*/
    ;
     /* if pa2 hit, refresh screen*/
    if (converseVar.eventKey is pa2)
      goto KA0P005;
    end
    ;
       /* if edit errors occured in after process, redisplay*/
    ;
    if (KA0PM010.KA0PMMSG != " "
     || KA0PM010.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KA0P010;
    end
    ;
    ;
       /* if no  edit errors occured in after process, do add*/
          /* customer parent process*/
    ;
    goto KA0P015;
    ;
     /* -------------  end flow ka0p010  -------------------------*/
    ;
    KA0P015: KA0P015();
    ;
     /* ------------  ka0p015 flow  ------------------*/
    ;
    ;
    goto KA0P010; /* redisplay add screen with error msg*/
    ;
  end // end main
end // end KA0P

// init parent company add
Function KA0P005()
  ;
    /* -------------  execute process ka0p005  --------------*/
  ;
  XSENTRY(); /* appl entry security*/
  ;
  XSSEGTR(); /* 11/88 jbw - set segmented trans id*/
  ;
     /* set map id's, date*/
  ;
  KA0PS-INIT-RECS();
  ;
  set KA0PM010 initial;
  ;
  KA0PW01.KA0PWCOM = COMMAREA.CAUSERA; /* key from add menu*/
  if (COMMAREA.CAITEM != " ")
    KA0PW01.KA0PWCOM = COMMAREA.CAITEM; /* key from fastpath*/
    KA0PM010.KUKPCOID = KA0PW01.KA0PWKEY;
  else
    KA0PM010.KUKPCOID = KA0PW01.KA0PWKEY; /* key from add menu*/
  end
  ;
    /* if company id present, check for current existance*/
  if (KA0PM010.KUKPCOID > 0)
    KA0PS01(); /* edit company id*/
  end
  ;
  KA0PM010.KA0PMPRC = "KA0P010"; /* process name*/
  KA0PM010.KA0PMMAP = "KA0PM010"; /* map name*/
  KA0PM010.KA0PMDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* -------------  end process ka0p005  --------------------*/
  ;
end // end KA0P005

// edit add parent company map
Function KA0P010()
  ;
  ;
   /* ---------------------------------------------------------*/
    /* before stage: no processing                           **/
   /* ---------------------------------------------------------*/
  ;
  ;
  converse KA0PM010 ;
  ;
  ;
   /* ---------------------------------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/
  ;
   /* ------------- clear message flds ------------------*/
  ;
  KA0PM010.VAGen_EZEMSG = " ";
  KA0PM010.KA0PMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KA0PSPF(); /* check standard entry keys*/
  ;
  if (converseVar.validationMsgNum != 0
   || KA0PM010.KA0PMMSG != " ")
    exit stack; /* error in standard pf menu transfers*/
  end
  ;
  ;
  if (converseVar.eventKey is pf12 /* pf12 - drop thru for add*/
   && KA0PW01.KA0PWEDT == "X")     /* good edit/confirm*/
    exit stack;
  else
    if (converseVar.eventKey is pf12) /* pf2 - add request invalid*/
      KA0PM010.KA0PMMSG = "YOU MUST PASS THE EDIT BEFORE ADD";
      exit stack;
    else
      if (KA0PW01.KA0PWPF != "X") /* check good entry flag set in ka0pspf*/
        KA0PM010.KA0PMMSG = "ENTRY KEY INVALID ";
        exit stack;
      end
    end
  end
  ;
    /* ----------------- edit --------------------------*/
  ;
   /* ------- edit fields from add parent company map ------*/
  ;
  KA0PS02(); /* edit rpt dates*/
  ;
  KA0PS03(); /* edit address*/
  ;
  KA0PS04(); /* edit name and id*/
  ;
  ;
   /* no input or edit required for:*/
     /* parent company grandparent name*/
     /* parent company dunn & bradstreet*/
  ;
  ;
     /* ---------------   end of edit  ---------------------*/
  ;
     /* ----------  check for clean edit    ------------*/
  ;
  if (KA0PM010.KA0PMMSG == " "
   && converseVar.validationMsgNum == 0)
    set KA0PM010.KUKPCOID cursor;
    KA0PW01.KA0PWEDT = "X"; /* set good edit flag*/
    KA0PM010.KA0PMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM ADD";
  end
  ;
    /* -----------   end of process ka0p010  ------------*/
  ;
end // end KA0P010

// add parent company i/o
Function KA0P015()
  ;
  ;
    /* --------------  execute process ka0p015 --------------*/
  ;
   /* ***********************************************************/
   /* *  this process does the record formating and addition   **/
   /* *  i/o processing for customer parent add.               **/
   /* ***********************************************************/
  ;
   /* ----- move map fields to csp customer parent record ------*/
  ;
  set KUKREC empty;
  KUKREC.KUKPCOID = KA0PM010.KUKPCOID;
  KUKREC.KUKPCONM = KA0PM010.KUKPCONM;
  KUKREC.XXXADDR1 = KA0PM010.XXX-ADDR1;
  KUKREC.XXXADDR2 = KA0PM010.XXX-ADDR2;
  KUKREC.XXXADDR3 = KA0PM010.XXX-ADDR3;
  KUKREC.XXXCITY = KA0PM010.XXXCITY;
  KUKREC.XSTCD = KA0PM010.XSTCD;
  KUKREC.XXXZIP = KA0PM010.XXXZIP;
  KUKREC.XCTCD = KA0PM010.XCTCD;
  if (KA0PM010.KA0PMRMM != 0)
  /* --------- Y2K OUT BEGIN ----------*/
    /* MOVE 19 TO KA0PW01.KA0PW19;*/
  /* --------- Y2K OUT END ------------*/
    ;
  /* --------- Y2K IN BEGIN -----------*/
    if (KA0PM010.KA0PMRYY > 60)
      KA0PW01.KA0PW19 = 19;
    else
      KA0PW01.KA0PW19 = 20;
    end
  /* --------- Y2K IN END -------------*/
    KA0PW01.KA0PWYY = KA0PM010.KA0PMRYY;
    KA0PW01.KA0PWMM = KA0PM010.KA0PMRMM;
    KA0PW01.KA0PWDD = 00;
    KUKREC.KUKARRDT = KA0PW01.KA0PWDT;
  end
  if (KA0PM010.KA0PMRCM != 0)
  /* --------- Y2K OUT BEGIN ----------*/
    /* MOVE 19 TO KA0PW01.KA0PW19;*/
  /* --------- Y2K OUT END ------------*/
    ;
  /* --------- Y2K IN BEGIN -----------*/
    if (KA0PM010.KA0PMRCY > 60)
      KA0PW01.KA0PW19 = 19;
    else
      KA0PW01.KA0PW19 = 20;
    end
  /* --------- Y2K IN END -------------*/
    KA0PW01.KA0PWYY = KA0PM010.KA0PMRCY;
    KA0PW01.KA0PWMM = KA0PM010.KA0PMRCM;
    KA0PW01.KA0PWDD = 00;
    KUKREC.KUKCALDT = KA0PW01.KA0PWDT;
  end
  KUKREC.KUKPCRLN = KA0PM010.KUKPCRLN;
  KUKREC.KUKPDAB = KA0PM010.KUKPDAB;
  KUKREC.KUKGPNM = KA0PM010.KUKGPNM;
  ;
  XX0XS01(); /* convert system date and time format*/
                                   /* to zz format*/
  ;
  KUKREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  KUKREC.ZZZCHGCT = 0;
  ;
  ;
   /* -----------  format audit trail record  ---------------*/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VPARNT01";
  KUZREC.KUCCOID = KUKREC.KUKPCOID;
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KA0P   ";
    TA1REC.TA1LOCAT[1] = "KA0P015  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VPARNT01 ";
    TA1REC.TA1MAP = "KA0PM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VPARNT01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KUZREC.KUZDATA = KUKREC.KUKGRP;
  ;
  ;
    /* ----------------  i/o processing  --------------------*/
  ;
  call "IO0030" ("A ", SQLCA, KUKREC) {isNoRefresh = yes, isExternal = yes}; /* add parent company*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPARNT01";
    TA1REC.TA1MAP = " ";
    KA0PW01.KA0PWKEY = KUKREC.KUKPCOID;
    TA1REC.TA1TBLKE = KA0PW01.KA0PWKEY;
    TA1REC.TA1PGMNM = "KA0P015";
    TA1REC.TA1LOC = "WRITE VPARNT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end
  ;
     /* add audit trail record*/
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* add audit trail record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KA0P015";
    TA1REC.TA1LOC = "WRITE VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end
  ;
   /* -----------  reset and transfer to customer menu --------*/
  ;
  KA0PW01.KA0PWIND = " "; /* reset good edit flag*/
  KA0PW01.KA0PWKEY = KA0PM010.KUKPCOID; /* key to commarea*/
  COMMAREA.CAUSERA = KA0PW01.KA0PWCOM;
  ;
  COMMAREA.CATOAP = "KA0M";
  XSEXIT(); /* verify application and transfer*/
  COMMAREA.CATOAP = " "; /* ka0m not valid - reset*/
  KA0PM010.KA0PMMSG = COMMAREA.CAMSG;
  ;
  ;
end // end KA0P015

// Init records
Function KA0PS-INIT-RECS()
  /* **********************************************************************/
  /* *          Initialize records used by KA0P*/
  /* **********************************************************************/
  ;
  set KUKREC empty;
  set KURREC empty;
  set KUCREC empty;
  set KUZREC empty;
  set XA0AW02 empty;
  set XX0XW01 empty;
  set KA0PW01 empty;
  set SQLCA empty;
  set TA1REC empty;
end // end KA0PS-INIT-RECS

// edit parent company id
Function KA0PS01()
  ;
    /* ------  start stmt grp ka0ps01 - parent co id edit ----*/
  ;
  if (converseVar.eventKey is pf3 /* allow escape from parent id edit*/
   || converseVar.eventKey is pf4) /* if menu pf's hit.*/
    return;
  end
  ;
  ;
     /* read db2 table vparnt01, if row present, error*/
  ;
  KUKREC.KUKPCOID = KA0PM010.KUKPCOID; /* set key*/
  KA0PS07(); /* read parent company*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KA0PM010.KA0PMMSG = "PARENT ID ALREADY EXISTS";
    set KA0PM010.KUKPCOID cursor, bold;
    return;
  end
  ;
  ;
     /* read db2 table vcmpny01, if row present, error*/
  ;
  KUCREC.KUCCOID = KA0PM010.KUKPCOID; /* set key*/
  KA0PS08(); /* read company table*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KA0PM010.KA0PMMSG = "ID ALREADY EXISTS AT COMPANY LEVEL";
    set KA0PM010.KUKPCOID cursor, bold;
    return;
  end
  ;
  set KA0PM010.KUKPCOID initialAttributes;
  ;
    /* ------  end stmt grp ka0ps01 - parent co id edit ----*/
  ;
end // end KA0PS01

// edit rpt dates
Function KA0PS02()
   /* --------- end stmt grp ka0ps02  ----------*/
  ;
   /* edit report dates*/
  ;
   /* parent rpt call date*/
      /* not required, must be 1-12 if present*/
  if (KA0PM010.KA0PMRCM > 0)
  /* ---------- Y2K OUT BEGIN ---------*/
    /* OR KA0PM010.KA0PMRCY GT 0;*/
    ;
    /* IF KA0PM010.KA0PMRCY GT 0;*/
     /* SET KA0PM010.KA0PMRCY DEFINED;*/
    /* ELSE;*/
     /* SET KA0PM010.KA0PMRCY CURSOR,BRIGHT;*/
     /* MOVE 'RPT CALL YEAR REQUIRED' TO KA0PM010.KA0PMMSG;*/
    /* END;*/
  /* ---------- Y2K OUT END -----------*/
    ;
    if (KA0PM010.KA0PMRCM >= 1
     && KA0PM010.KA0PMRCM <= 12)
      set KA0PM010.KA0PMRCM initialAttributes;
    else
      set KA0PM010.KA0PMRCM cursor, bold;
      KA0PM010.KA0PMMSG = "RPT CALL MONTH OUT OF RANGE";
    end
    ;
  end
  ;
  ;
   /* parent rpt date*/
      /* not required, must be 1-12 if present.*/
      /* should be less than call date*/
  if (KA0PM010.KA0PMRMM > 0)
  /* ---------- Y2K OUT BEGIN ---------*/
    /* OR KA0PM010.KA0PMRYY GT 0;*/
    ;
    /* IF KA0PM010.KA0PMRYY GT 0;*/
     /* SET KA0PM010.KA0PMRYY DEFINED;*/
    /* ELSE;*/
     /* SET KA0PM010.KA0PMRYY CURSOR,BRIGHT;*/
     /* MOVE 'RPT YEAR REQUIRED' TO KA0PM010.KA0PMMSG;*/
    /* END;*/
  /* ---------- Y2K OUT END -----------*/
    ;
    if (KA0PM010.KA0PMRMM >= 1
     && KA0PM010.KA0PMRMM <= 12)
      set KA0PM010.KA0PMRMM initialAttributes;
    else
      set KA0PM010.KA0PMRMM cursor, bold;
      KA0PM010.KA0PMMSG = "RPT MONTH OUT OF RANGE";
    end
    ;
  /* ---------- Y2K IN BEGIN ----------*/
    KA0PW01.KA0PWRYY = KA0PM010.KA0PMRYY;
    KA0PW01.KA0PWRMM = KA0PM010.KA0PMRMM;
    if (KA0PM010.KA0PMRYY > 60)
      KA0PW01.KA0PWRCC = "19";
    else
      KA0PW01.KA0PWRCC = "20";
    end
    ;
    KA0PW01.KA0PWCYY = KA0PM010.KA0PMRCY;
    KA0PW01.KA0PWCMM = KA0PM010.KA0PMRCM;
    if (KA0PM010.KA0PMRCY > 60)
      KA0PW01.KA0PWCCC = "19";
    else
      KA0PW01.KA0PWCCC = "20";
    end
    ;
    if (KA0PW01.KA0PWRDT >= KA0PW01.KA0PWCRT)
      KA0PM010.KA0PMMSG = "REPORT DATE MUST BE < CALL DATE";
      set KA0PM010.KA0PMRYY modified, bold;
      set KA0PM010.KA0PMRMM cursor, modified, bold;
    end
  /* ---------- Y2K IN END ------------*/
    ;
  /* ---------- Y2K OUT BEGIN ---------*/
    /* IF KA0PM010.KA0PMRYY GT KA0PM010.KA0PMRCY;*/
     /* MOVE 'REPORT DATE MUST BE < CALL DATE' TO KA0PM010.KA0PMMSG;*/
     /* SET KA0PM010.KA0PMRYY MODIFIED,BRIGHT;*/
     /* SET KA0PM010.KA0PMRMM CURSOR,MODIFIED,BRIGHT;*/
    /* ELSE;*/
     /* IF KA0PM010.KA0PMRYY EQ KA0PM010.KA0PMRCY*/
       /* AND KA0PM010.KA0PMRMM GE KA0PM010.KA0PMRCM;*/
       /* MOVE 'REPORT DATE MUST BE < CALL DATE' TO KA0PM010.KA0PMMSG;*/
       /* SET KA0PM010.KA0PMRYY MODIFIED,BRIGHT;*/
       /* SET KA0PM010.KA0PMRMM CURSOR,MODIFIED,BRIGHT;*/
     /* END;*/
    /* END;*/
  /* ---------- Y2K OUT END -----------*/
    ;
  end
  ;
  ;
   /* --------- end stmt grp ka0ps02  ----------*/
  ;
end // end KA0PS02

// edit address
Function KA0PS03()
  ;
    /* ---------  start stmt grp ka0ps03  ------------*/
  ;
  set KA0PM010.XCTCD initialAttributes;
  set KA0PM010.XXXZIP initialAttributes;
  set KA0PM010.XSTCD initialAttributes;
  set KA0PM010.XXXCITY initialAttributes;
  set KA0PM010.XXX-ADDR3 initialAttributes;
  ;
    /* if any address fields are present, standard*/
    /* address edits need to be done.*/
  ;
  if (KA0PM010.XXX-ADDR1 != " "
   || KA0PM010.XXX-ADDR2 != " "
   || KA0PM010.XXX-ADDR3 != " "
   || KA0PM010.XXXCITY != " "
   || KA0PM010.XSTCD != " "
   || KA0PM010.XXXZIP != " ")
     /* next sentence*/
  else
    return;
  end
  ;
    /* check parent address - use xa0a - address appl*/
  ;
  set XA0AW02 empty; /* clear work fields*/
  XA0AW02.XXX-ADDR1 = KA0PM010.XXX-ADDR1;
  XA0AW02.XXX-ADDR2 = KA0PM010.XXX-ADDR2;
  XA0AW02.XXX-ADDR3 = KA0PM010.XXX-ADDR3;
  XA0AW02.XXXCITY = KA0PM010.XXXCITY;
  XA0AW02.XSTCD = KA0PM010.XSTCD;
  XA0AW02.XXXZIP = KA0PM010.XXXZIP;
  XA0AW02.XCTCD = KA0PM010.XCTCD;
  XA0AW02.XA0AWFNC = "E"; /* request edit*/
  ;
  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address appl*/
  ;
  if (XA0AW02.XA0AWERR[8] != 0) /* check country code*/
    set KA0PM010.XCTCD cursor, modified, bold;
    if (XA0AW02.XA0AWERR[8] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[8]);
    end
  end
  if (XA0AW02.XA0AWERR[7] != 0) /* check zip code*/
    set KA0PM010.XXXZIP cursor, modified, bold;
    if (XA0AW02.XA0AWERR[7] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[7]);
    end
  end
  if (XA0AW02.XA0AWERR[6] != 0) /* check state code*/
    set KA0PM010.XSTCD cursor, modified, bold;
    if (XA0AW02.XA0AWERR[6] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[6]);
    end
  end
  if (XA0AW02.XA0AWERR[5] != 0) /* check city code*/
    set KA0PM010.XXXCITY cursor, modified, bold;
    if (XA0AW02.XA0AWERR[5] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[5]);
    end
  end
  if (XA0AW02.XA0AWERR[4] != 0) /* check address lines*/
    set KA0PM010.XXX-ADDR3 cursor, modified, bold;
    if (XA0AW02.XA0AWERR[4] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[4]);
    end
  end
  ;
  KA0PM010.XXX-ADDR1 = XA0AW02.XXX-ADDR1;
  KA0PM010.XXX-ADDR2 = XA0AW02.XXX-ADDR2;
  KA0PM010.XXX-ADDR3 = XA0AW02.XXX-ADDR3;
  ;
   /* -----------  end of stmt grp ka0ps03  -------------*/
end // end KA0PS03

// edit name and id
Function KA0PS04()
  ;
    /* ---------  start stmt grp ka0ps04 -------------------*/
  ;
    /* check name and id*/
  ;
   /* parent company name - input required*/
  if (KA0PM010.KUKPCONM != " ")
    set KA0PM010.KUKPCONM initialAttributes;
  else
    KA0PM010.KA0PMMSG = "PARENT COMPANY NAME REQUIRED";
    set KA0PM010.KUKPCONM cursor, bold;
  end
  ;
  KA0PW01.KA0PWKEY = KA0PM010.KUKPCOID; /* key to commarea*/
  COMMAREA.CAUSERA = KA0PW01.KA0PWCOM;
  ;
   /* parent company id: input required.*/
  if (KA0PM010.KUKPCOID > 0)
    KA0PS01(); /* read db2 company/parent, error if present*/
  else
    if (KA0PW01.KA0PWIND == "X") /* number already generated*/
      KA0PM010.KUKPCOID = KURREC.KURCNEXT - 1;
    else
      KA0PM010.VAGen_EZEMSG = "PARENT COMPANY ID GENERATED";
      KA0PS06(); /* generate parent company id*/
    end
  end
  ;
    /* ---------  end stmt grp ka0ps04 -------------------*/
  ;
end // end KA0PS04

// generate parent company id
Function KA0PS06()
  ;
    /* ----  start stmt grp ka0ps06 - parent co id generation --*/
  ;
  if (converseVar.eventKey is pf3 /* allow escape from parent id gen*/
   || converseVar.eventKey is pf4) /* if menu pf's hit.*/
    return;
  end
  ;
   /* -------- read next id table ---------------*/
  ;
  KA0PW01.KA0PWIND = " "; /* clear company # generated ind*/
  set KURREC empty;
  ;
  call "IO0390" ("S ", SQLCA, KURREC) {isNoRefresh = yes, isExternal = yes}; /* read next id db2 table*/
  if (SQLCA.VAGen_SQLCODE != 0) /* record not found, or bad io*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VNXTID01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1LOC = "READING VNXTID01";
    TA1REC.TA1PGMNM = "KA0PS06";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
   /* ---- check for existing parent/company id ----*/
   /* if present, increment and try again.*/
  ;
  KUKREC.KUKPCOID = KURREC.KURCNEXT; /* set company key*/
  while (KA0PW01.KA0PWIND == " ")
    KA0PS07(); /* read parent company*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KUKREC.KUKPCOID = KUKREC.KUKPCOID + 1;
    else
      KUCREC.KUCCOID = KUKREC.KUKPCOID;
      KA0PS08(); /* read company*/
      if (SQLCA.VAGen_SQLCODE == 100)
        KA0PW01.KA0PWIND = "X"; /* set generated flag*/
      else
        KUKREC.KUKPCOID = KUKREC.KUKPCOID + 1;
      end
    end
  end
  ;
  ;
   /* -----------  update next id table --------*/
  ;
     /* move generated value to map, update ctl record*/
     /* with next available company number*/
  ;
  KA0PM010.KUKPCOID = KUKREC.KUKPCOID;
  set KA0PM010.KUKPCOID initialAttributes;
  ;
  KURREC.KURCNEXT = KUKREC.KUKPCOID + 1; /* update next avail. company id*/
  XX0XS01(); /* convert csp date/time*/
  KURREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KURREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO0390" ("U ", SQLCA, KURREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* not good update*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(55); /* updated since last reference*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VXNTID01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1LOC = "UPDATE VNXTID01";
      TA1REC.TA1PGMNM = "KA0PS06";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
    /* ------  end stmt grp ka0ps06 - parent co id gen. ----*/
  ;
end // end KA0PS06

// read parent company table
Function KA0PS07()
   /* -------- stmt grp ka0ps07 start -------------\*/
  ;
  call "IO0030" ("S ", SQLCA, KUKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPARNT01";
    TA1REC.TA1PGMNM = "KA0PS07";
    TA1REC.TA1MAP = " ";
    KA0PW01.KA0PWKEY = KUKREC.KUKPCOID;
    TA1REC.TA1TBLKE = KA0PW01.KA0PWKEY;
    TA1REC.TA1LOC = "READ VPARNT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* prt diagnostic screen*/
    XSPF4();
  end
  ;
   /* -------- stmt grp ka0ps07 end -------------\*/
end // end KA0PS07

// read company table
Function KA0PS08()
   /* -------- stmt grp ka0ps08 start -------------\*/
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1PGMNM = "KA0PS08";
    TA1REC.TA1MAP = " ";
    KA0PW01.KA0PWKEY = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KA0PW01.KA0PWKEY;
    TA1REC.TA1LOC = "READ VCMPNY01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* prt diagnostic screen*/
    XSPF4();
  end
  ;
   /* -------- stmt grp ka0ps08 end -------------\*/
end // end KA0PS08

// standard check of aid byte
Function KA0PSPF()
  ;
    /* ---------- start stmt grp ka0pspf -----------------*/
  ;
    /* statement group ka0pspf - check valid entry key,*/
       /* do menu transfers if requested*/
  ;
  KA0PW01.KA0PWPF = " "; /* reset good entry flag*/
  ;
  if (converseVar.eventKey is enter) /* enter - return to process*/
    KA0PW01.KA0PWPF = "X"; /* flag good entry key*/
    return;
  else
    if (converseVar.eventKey is pa2) /* pa2 - refresh screen*/
      KA0PW01.KA0PWPF = "X"; /* flag good entry key*/
      exit stack;
    else
      if (converseVar.eventKey is pf1) /* pf1 - help*/
        KA0PW01.KA0PWPF = "X"; /* flag good entry key*/
        XSPF1(); /* xfer to help appl*/
        KA0PM010.KA0PMMSG = COMMAREA.CAMSG;
        return;
      else
        if (converseVar.eventKey is pf3 /* pf3 - return to customer menu*/
         && KA0PW01.KA0PWPF3 == "X")    /* warning msg sent*/
          KA0PW01.KA0PWPF3 = " ";
          KA0PW01.KA0PWPF = "X"; /* flag good entry key*/
          COMMAREA.CATOAP = "KA0M";
          XSEXIT(); /* verify application and transfer*/
          COMMAREA.CATOAP = " "; /* ka0m not valid - reset*/
          KA0PM010.KA0PMMSG = COMMAREA.CAMSG; /* security error*/
          exit stack;
        else
          if (converseVar.eventKey is pf3 /* pf3 - return to customer menu*/
           && KA0PW01.KA0PWPF3 == " ")    /* warning msg not sent*/
            KA0PW01.KA0PWPF3 = "X";
            KA0PW01.KA0PWPF = "X"; /* flag good entry key*/
            converseLib.validationFailed(4); /* data will be lost msg*/
            exit stack;
          else
            if (converseVar.eventKey is pf4 /* pf4 - return to main menu*/
             && KA0PW01.KA0PWPF4 == "X")    /* warning msg sent*/
              KA0PW01.KA0PWPF4 = " ";
              KA0PW01.KA0PWPF = "X"; /* flag good entry key*/
              XSPF4();
              KA0PM010.KA0PMMSG = COMMAREA.CAMSG; /* security error*/
              COMMAREA.CATOAP = " "; /* menu appl invalid*/
              exit stack;
            else
              if (converseVar.eventKey is pf4 /* pf4 - return to main menu*/
               && KA0PW01.KA0PWPF4 == " ")    /* warning msg sent*/
                KA0PW01.KA0PWPF4 = "X";
                KA0PW01.KA0PWPF = "X"; /* flag good entry key*/
                converseLib.validationFailed(4); /* data will be lost msg*/
              end
            end
          end
        end
      end
    end
  end
  ;
    /* -----------   end of stmt grp ka0pspf  ------------*/
  ;
  ;
end // end KA0PSPF

//*** RECORD=KA0PW01 ****
// this work record is used to format report dates prior to
// conversion to binary in kukrec.
// ***********************
Record KA0PW01 type basicRecord
  5 KA0PWDT KA0PWDT ; 
    10 KA0PW19 KA0PW19 ; 
    10 KA0PWYY KA0PWYY ; 
    10 KA0PWMM KA0PWMM ; 
    10 KA0PWDD KA0PWDD ; 
  5 KA0PWIND KA0PWIND ; 
  5 KA0PWEDT KA0PWEDT ; 
  5 KA0PWPF KA0PWPF ; 
  5 KA0PWPF3 KA0PWPF3 ; 
  5 KA0PWPF4 KA0PWPF4 ; 
  5 KA0PWZIP KA0PWZIP ; 
    10 KA0PWZPA KA0PWZPA [9] ; 
  5 KA0PWIX1 KA0PWIX1 ; 
  5 KA0PWCNT KA0PWCNT ; 
  5 KA0PWCOM KA0PWCOM ; 
    10 KA0PWKEY KA0PWKEY ; 
  5 * char(1) ; // -- Y2K IN BEGIN --
  5 KA0PWRDT KA0PWRDT ; 
    10 KA0PWRCC KA0PWRCC ; 
    10 KA0PWRYY KA0PWRYY ; 
    10 KA0PWRMM KA0PWRMM ; 
  5 * char(1) ; 
  5 KA0PWCRT KA0PWCRT ; 
    10 KA0PWCCC KA0PWCCC ; 
    10 KA0PWCYY KA0PWCYY ; 
    10 KA0PWCMM KA0PWCMM ; 
  5 * char(1) ; // -- Y2K IN END ----
end // end KA0PW01

//   work 19
DataItem KA0PW19 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem KA0PWCCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KA0PWCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KA0PWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// causera reformat field
DataItem KA0PWCOM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report call date ccyymm
DataItem KA0PWCRT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KA0PWCYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   work day
DataItem KA0PWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yyyymmdd
DataItem KA0PWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// good edit flag
DataItem KA0PWEDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general work ind 1
DataItem KA0PWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KA0PWIX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work key field
DataItem KA0PWKEY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work month
DataItem KA0PWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// good entry key flag
DataItem KA0PWPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data lost flag
DataItem KA0PWPF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data lost flag
DataItem KA0PWPF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem KA0PWRCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report date ccyymm
DataItem KA0PWRDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KA0PWRMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem KA0PWRYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   work year
DataItem KA0PWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work zip
DataItem KA0PWZIP char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   work zip array
DataItem KA0PWZPA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

