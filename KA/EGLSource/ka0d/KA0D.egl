package ka0d;
import as1.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import kl.common.*;
import ku.common.*;
import op.common.*;
import sm.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=KA0D ****
// ************************************************************
// *                 maintenance history                      *
// *----------------------------------------------------------*
// *  date     initials     description                       *
// *--------   --------     ----------------------------------*
// *05/18/87     clt        modified for new version of kuarec
// *11/09/87     clt        default alloc seq & assign cntl cat
// *01/05/88     clt        add natl acct code
// *02/02/88     clt        refresh screen for new gpc
// *02/22/88     clt        fix default for min bo qty
// *04/18/88     clt        change csp kunote to kutendt
// *04/25/88     clt        zero out expiration dates
// *05/02/88     clt        add expiration date to terms screen
// *06/20/88     clt        set po req. flag eq y for natl acct
// *06/29/88     clt        change edit of comm. class ind
// *07/13/88     clt        change re-display of optional menu
// *10/18/88     clt        show error msg when co/store updted
// *11/11/88     jbw        added noncsp opt on calls
// *11/11/88     jbw        added xssegtr logic
// *12/09/88     clt        added edit of duplicate group codes
// *01/23/89     clt        added call class indicator
// *05/01/89     clt        removed dunning from bill group
// *05/03/89     clt        removed buyerid from ka0dm020
// *05/12/89     clt        database changes
// *06/26/89     clt        removed bill group screen
// *01/15/90     j fiat     db changes
// *03/02/90     d salzw    removed sales agency, sales rep and
// *                        commissions infor from screen
// *03/29/90     d salzw    db changes
// *04/09/90     d salzw    fix a bug from clean up of ka0d
// *04/12/90     d salzw    fix audit length problem
// *07/31/90     d salzw    edit terms effective date against
// *                        current date
// *09/10/90     d salzw    added kiztbl for audit trail
// *10/02/90     d salzw    db changes
// *11/06/90     d salzw    if Inv Dist Ind shows sending inv
// *                        to alt address, alt address must be
// *                        present on company
// *12/10/90     d salzw    remove PO Req & Alloc from screen
// *02/04/91     dsalzw     db changes
// *03/01/91     jhemme     replaced old kudrec with ta4rec
// *03/08/91     twatso     removed vend auth from screen
// *03/15/91     twatso     removed invoice dist cd from screen
// *04/08/91     twatso     make dept work on gpc level
// *04/15/91     twatso     make dept 4 bytes instead of 2
// *04/19/91     wjohns     add call to vcurep01 rep table and
// *                         logic to check rep table and do
// *                         branch to kg0c when reps need to
// *                         be added.
// *05/07/91     dsalzw     removed buying restrictions
// *06/09/91     dsalzw     db changes
// *06/19/91     dsalzw     remove xci table -- deinstalled
// *07/09/91     dsalzw     move valid dept to ws for passing
// *                        to KG0C
// *07/25/91     dsalzw     fim map attributes
// *09/05/91     chellm     Added insert/creation of VCRCHK01
// *                        record when adding new customers.
// *10/11/91     CHELLM     Database changes:
// *                        Deinstalled cutag records KUXREC.
// *04/16/93     CHELLM     Removed National Acct. Cd and added
// *                        option for Customer Level, KG0D.
// 2-july-1993          dlegg      Change call to TA0020 with
//                                 ABND to RETN. KA0D012,013,
//                                 115,120,130,135,140,150,160,
//                                 161,170,S2K,S2L,S93.
// 13-july-1993         dlegg      Add sgrp to initialize all
//                                 records used by KA0D.
//                                 KA0D010.
// *10/01/93     CHELLM     CSP 4.1 conversion
// *10/12/94     CHELLM     Add edit to prevent adding cust
//                          unit with inactive VDEPT001 row.
// *11/28/97     rgilli     Y2K MODIFICATIONS MADE TO:
//                          KA0DW01:  Add items ka0dwcc1 &
//                                    ka0dwcc2.
//                          KA0DM060: Remove zero supression
//                          KA0D060:  Add century windowing
//                         (Appl flow)
//                          KA0DS6A:  Add century windowing
//                                    DT1 & DT2 fields chg
//                                    from yymmdd to ccyymmdd.
//                          KA0DS68:  Add century windowing.
//                                    Reomve 00 year edit.
// *********************
Program KA0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  ARCREC ARCREC; // record
  COMMAREA COMMAREA ; // record
  KA0DW01 KA0DW01; // record
  KA0DW02 KA0DW02; // record
  KA0DW03 KA0DW03; // record
  KA0DW04 KA0DW04; // record
  KU3REC KU3REC; // record
  KUCREC KUCREC; // record
  KUGREC KUGREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUPREC KUPREC; // record
  KUQREC KUQREC; // record
  KURREC KURREC; // record
  KUSREC KUSREC; // record
  KUTREC KUTREC; // record
  KUWREC KUWREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA4REC TA4REC; // record
  VCRCHK01 VCRCHK01; // record
  VCULVLPD VCULVLPD; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XAATBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCPTBL {deleteAfterUse = yes}; // table
  use XDATBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XIDTBL {deleteAfterUse = yes}; // table
  use XLBTBL {deleteAfterUse = yes}; // table
  use XNATBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XNITBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XSGTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XTDTBL {deleteAfterUse = yes}; // table
  use KA0DM.KA0DM020,  // forms
      KA0DM.KA0DM050, 
      KA0DM.KA0DM060, 
      KA0DM.KA0DM080, 
      KA0DM.KA0DM090
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KA0D010: KA0D010();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/

    goto KA0D012; /* proceed to next process*/

     /* *************************************************************/
     /* *****      e  n  d     f  l  o  w     s  t  a  g  e    ******/
     /* *************************************************************/
    KA0D012: KA0D012();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D013; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D013: KA0D013();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D015; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D015: KA0D015();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D020; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D020: KA0D020();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/

    if (COMMAREA.CAFROMAP == "KG0C")
      goto KA0D999;
    end

    if (COMMAREA.CAFROMAP == "KG0D")
      goto KA0D999;
    end

    if (converseVar.eventKey is pa2) /* if pa2 pressed*/
      goto KA0D015; /* initialize screen*/
    end /* end of :if: statement*/
                                   /* ;*/
    if (converseVar.validationMsgNum == 0) /* if no errors on screen*/
      if (KA0DW01.KA0DWFST == "Y") /* if "confirm" message not yet sent*/
        converseLib.validationFailed(22); /* message "press pf12 to confirm"*/
        KA0DW01.KA0DWFST = "N"; /* indicate "confirm" message sent*/
        goto KA0D020; /* re-converse screen*/
      else
                                     /* else("confirm" message already sent)*/
        if (converseVar.eventKey is pf12) /* if pf12 key was pressed*/
          set KA0DW02 empty;
          KA0DW01.KA0DW3DX = 1;
          KA0DW01.KA0DWFST = "Y";

          goto KA0D045; /* proceed to next process*/
        else /* else(pf12 key not pressed)*/
          converseLib.validationFailed(22); /* message "press pf2 to confirm"*/
          goto KA0D020; /* re-converse screen*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    else /* else(errors on screen)*/
      if (converseVar.validationMsgNum == 73) /* if warning message*/
        if (KA0DW01.KA0DWFST == "N") /* if "confirm" message already sent*/
          if (converseVar.eventKey is pf12) /* if pf12 key was pressed*/
            converseLib.validationFailed(0); /* reset error message*/
            set KA0DW02 empty;
            KA0DW01.KA0DW3DX = 1;
            KA0DW01.KA0DWFST = "Y";

            goto KA0D045; /* proceed to next process*/
          end /* end of "if" statement*/
        else /* else(confirm msg not yet sent)*/
          KA0DW01.KA0DWFST = "N"; /* indicate confirm message sent*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
      set KA0DM020 alarm; /* make screen "beep"*/
      goto KA0D020; /* re-converse screen*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D045: KA0D045();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D050; /* procedeed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D050: KA0D050();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.eventKey is pa2) /* if "pa2" key is pressed*/
      goto KA0D045; /* initialize and re-converse screen*/
    end /* end of "if" statement*/
                                   /* ;*/
    if (converseVar.validationMsgNum != 0) /* if error on screen*/
      goto KA0D050; /* reconverse screen with error msg*/
    else /* else(if pf3 key not pressed)*/
      if (KA0DM050.KA0DMOPT[1] != " " /* if option 1 choosen*/
       || KA0DM050.KA0DMOPT[2] != " " /* or option 2 chooen*/
       || KA0DM050.KA0DMOPT[3] != " ") /* or option 3 choosen*/
        goto KA0D055; /* proceed to next process*/
      else /* else(no options picked)*/
        if (converseVar.eventKey is pf2) /* if "pf2" key was pressed*/
          goto KA0D100; /* proceed update logic*/
        else /* else(pf2 key was not pressed)*/
          converseLib.validationFailed(94); /* msg - "press pf2 to update"*/
          goto KA0D050; /* re-converse screen*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D055: KA0D055();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (KA0DM050.KA0DMOPT[1] != " ") /* if order type option choosen*/
      goto KA0D060; /* proceed to order type option*/
    else /* else(order type option not choosen)*/
      goto KA0D075;
    end /* end of "if" statement*/




     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D060: KA0D060();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.eventKey is pa2) /* if "pa2" key was pressed*/
      goto KA0D055; /* initialize and re-converse screen*/
    end /* end of "if" statement*/
                                   /* ;*/
    if (converseVar.eventKey is pf3 /* if "pf3" key was pressed*/
     && KA0DW01.KA0DWOPF == "Y")    /* and confirmation flag = 'yes'*/
      KA0DW01.KA0DWM6F = "N"; /* re-initialize map-conversed-flag*/
      goto KA0D045; /* goto option menu*/
    end /* end of "if" statement*/
                                   /* ;*/
    if (converseVar.validationMsgNum == 0) /* if no errors on screen*/
      if (KA0DW01.KA0DWFST == "Y") /* if "confirm" message not yet sent*/
        converseLib.validationFailed(70); /* message "press pf12 to confirm"*/
        KA0DW01.KA0DWFST = "N"; /* indicate "confirm" message sent*/
        goto KA0D060; /* re-converse screen*/
      else
                                     /* else("confirm" message already sent)*/
        if (converseVar.eventKey is pf6) /* if pf6 key was pressed*/
          if (KA0DM060.XOTCD != " ") /* if anything on screen*/
            /* ********** move map fields to work record ***********/
            KUTREC.KUCCOID = KA0DM060.KUCCOID;
            KUTREC.KUMSTRID = KA0DM060.KUMSTRID;
            KUTREC.XNXCD = KA0DM060.XNXCD;
            KUTREC.XGPCD = KA0DM060.XGPCD;
            KUTREC.XOTCD = KA0DM060.XOTCD;
            KUTREC.XPTCD[1] = KA0DM060.XPTCD[1];
            KUTREC.XPTCD[2] = KA0DM060.XPTCD[2];
            KUTREC.XPTCD[3] = KA0DM060.XPTCD[3];
            KUTREC.XAACD[1] = KA0DM060.XAACD[1];
            KUTREC.XAACD[2] = KA0DM060.XAACD[2];
            KUTREC.XAACD[3] = KA0DM060.XAACD[3];
            KUTREC.KUTAPOF[1] = KA0DM060.KUTAPOF[1];
            KUTREC.KUTAPOF[2] = KA0DM060.KUTAPOF[2];
            KUTREC.KUTAPOF[3] = KA0DM060.KUTAPOF[3];
            KUTREC.KUTAPBK[1] = KA0DM060.KUTAPBK[1];
            KUTREC.KUTAPBK[2] = KA0DM060.KUTAPBK[2];
            KUTREC.KUTAPBK[3] = KA0DM060.KUTAPBK[3];
            KUTREC.KUTDABK[1] = KA0DM060.KUTDABK[1];
            KUTREC.KUTDABK[2] = KA0DM060.KUTDABK[2];
            KUTREC.KUTDABK[3] = KA0DM060.KUTDABK[3];
            KUTREC.KUTDAOF[1] = KA0DM060.KUTDAOF[1];
            KUTREC.KUTDAOF[2] = KA0DM060.KUTDAOF[2];
            KUTREC.KUTDAOF[3] = KA0DM060.KUTDAOF[3];
            KUTREC.XTDCD[1] = KA0DM060.XTDCD[1];
            KUTREC.XTDCD[2] = KA0DM060.XTDCD[2];
            KUTREC.XTDCD[3] = KA0DM060.XTDCD[3];
            KUTREC.KUTTDPOF[1] = KA0DM060.KUTTDPOF[1];
            KUTREC.KUTTDPOF[2] = KA0DM060.KUTTDPOF[2];
            KUTREC.KUTTDPOF[3] = KA0DM060.KUTTDPOF[3];
            KUTREC.KUTTDPBK[1] = KA0DM060.KUTTDPBK[1];
            KUTREC.KUTTDPBK[2] = KA0DM060.KUTTDPBK[2];
            KUTREC.KUTTDPBK[3] = KA0DM060.KUTTDPBK[3];
            KUTREC.KUTAANET[1] = KA0DM060.KUTAANET[1];
            KUTREC.KUTAANET[2] = KA0DM060.KUTAANET[2];
            KUTREC.KUTAANET[3] = KA0DM060.KUTAANET[3];
            KUTREC.KUTAAFCG[1] = KA0DM060.KUTAAFCG[1];
            KUTREC.KUTAAFCG[2] = KA0DM060.KUTAAFCG[2];
            KUTREC.KUTAAFCG[3] = KA0DM060.KUTAAFCG[3];
            KUTREC.KUTAAFCN[1] = KA0DM060.KUTAAFCN[1];
            KUTREC.KUTAAFCN[2] = KA0DM060.KUTAAFCN[2];
            KUTREC.KUTAAFCN[3] = KA0DM060.KUTAAFCN[3];
            KUTREC.KUTTDNET[1] = KA0DM060.KUTTDNET[1];
            KUTREC.KUTTDNET[2] = KA0DM060.KUTTDNET[2];
            KUTREC.KUTTDNET[3] = KA0DM060.KUTTDNET[3];
            KUTREC.KUTTDSPN[1] = KA0DM060.KUTTDSPN[1];
            KUTREC.KUTTDSPN[2] = KA0DM060.KUTTDSPN[2];
            KUTREC.KUTTDSPN[3] = KA0DM060.KUTTDSPN[3];
            KUTREC.KUTTDDSN[1] = KA0DM060.KUTTDDSN[1];
            KUTREC.KUTTDDSN[2] = KA0DM060.KUTTDDSN[2];
            KUTREC.KUTTDDSN[3] = KA0DM060.KUTTDDSN[3];
            KUTREC.KUTDANET[1] = KA0DM060.KUTDANET[1];
            KUTREC.KUTDANET[2] = KA0DM060.KUTDANET[2];
            KUTREC.KUTDANET[3] = KA0DM060.KUTDANET[3];
            KUTREC.KUTDAHCN[1] = KA0DM060.KUTDAHCN[1];
            KUTREC.KUTDAHCN[2] = KA0DM060.KUTDAHCN[2];
            KUTREC.KUTDAHCN[3] = KA0DM060.KUTDAHCN[3];
            KUTREC.XDACD[1] = KA0DM060.XDACD[1];
            KUTREC.XDACD[2] = KA0DM060.XDACD[2];
            KUTREC.XDACD[3] = KA0DM060.XDACD[3];
            KUTREC.XCPCD[1] = KA0DM060.XCPCD[1];
            KUTREC.XCPCD[2] = KA0DM060.XCPCD[2];
            KUTREC.XCPCD[3] = KA0DM060.XCPCD[3];

            KA0DW01.KA0DWC1T = "00";
            KA0DW01.KA0DWM1T = KA0DM060.KA0DMEMT[1];
            KA0DW01.KA0DWY1T = KA0DM060.KA0DMEYR[1];
            KA0DW01.KA0DWD1T = KA0DM060.KA0DMEDY[1];
            /* --------------- y2k out begin --------------*/
            /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
            /* END;*/
            /* --------------- y2k out begin --------------*/
            /* --------------- y2k in begin  --------------*/
            if (KA0DW01.KA0DW1T != 0)
              if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                KA0DW01.KA0DWC1T = "19";
              else
                KA0DW01.KA0DWC1T = "20";
              end
            end
            /* --------------- y2k in end    --------------*/
            KUTREC.KUTENDT[1] = KA0DW01.KA0DW1T;

            KA0DW01.KA0DWC1T = "00";
            KA0DW01.KA0DWM1T = KA0DM060.KA0DMEMT[2];
            KA0DW01.KA0DWY1T = KA0DM060.KA0DMEYR[2];
            KA0DW01.KA0DWD1T = KA0DM060.KA0DMEDY[2];
            /* --------------- y2k out begin --------------*/
            /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
            /* END;*/
            /* --------------- y2k out begin --------------*/
            /* --------------- y2k in begin  --------------*/
            if (KA0DW01.KA0DW1T != 0)
              if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                KA0DW01.KA0DWC1T = "19";
              else
                KA0DW01.KA0DWC1T = "20";
              end
            end
            /* --------------- y2k in end    --------------*/
            KUTREC.KUTENDT[2] = KA0DW01.KA0DW1T;

            KA0DW01.KA0DWC1T = "00";
            KA0DW01.KA0DWM1T = KA0DM060.KA0DMEMT[3];
            KA0DW01.KA0DWY1T = KA0DM060.KA0DMEYR[3];
            KA0DW01.KA0DWD1T = KA0DM060.KA0DMEDY[3];
            /* --------------- y2k out begin --------------*/
            /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
            /* END;*/
            /* --------------- y2k out begin --------------*/
            /* --------------- y2k in begin  --------------*/
            if (KA0DW01.KA0DW1T != 0)
              if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                KA0DW01.KA0DWC1T = "19";
              else
                KA0DW01.KA0DWC1T = "20";
              end
            end
            /* --------------- y2k in end    --------------*/
            KUTREC.KUTENDT[3] = KA0DW01.KA0DW1T;

            KA0DW01.KA0DWC1T = "00";
            KA0DW01.KA0DWM1T = KA0DM060.KA0DMXMT[1];
            KA0DW01.KA0DWY1T = KA0DM060.KA0DMXYR[1];
            KA0DW01.KA0DWD1T = KA0DM060.KA0DMXDY[1];
            /* --------------- y2k out begin --------------*/
            /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
            /* END;*/
            /* --------------- y2k out begin --------------*/
            /* --------------- y2k in begin  --------------*/
            if (KA0DW01.KA0DW1T != 0)
              if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                KA0DW01.KA0DWC1T = "19";
              else
                KA0DW01.KA0DWC1T = "20";
              end
            end
            /* --------------- y2k in end    --------------*/
            if (KA0DW01.KA0DW1T == 0
             && KUTREC.KUTENDT[1] > 0)
              KUTREC.KUTXNDT[1] = 99999999;
            else
              KUTREC.KUTXNDT[1] = KA0DW01.KA0DW1T;
            end

            KA0DW01.KA0DWC1T = "00";
            KA0DW01.KA0DWM1T = KA0DM060.KA0DMXMT[2];
            KA0DW01.KA0DWY1T = KA0DM060.KA0DMXYR[2];
            KA0DW01.KA0DWD1T = KA0DM060.KA0DMXDY[2];
            /* --------------- y2k out begin --------------*/
            /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
            /* END;*/
            /* --------------- y2k out begin --------------*/
            /* --------------- y2k in begin  --------------*/
            if (KA0DW01.KA0DW1T != 0)
              if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                KA0DW01.KA0DWC1T = "19";
              else
                KA0DW01.KA0DWC1T = "20";
              end
            end
            /* --------------- y2k in end    --------------*/
            if (KA0DW01.KA0DW1T == 0
             && KUTREC.KUTENDT[2] > 0)
              KUTREC.KUTXNDT[2] = 99999999;
            else
              KUTREC.KUTXNDT[2] = KA0DW01.KA0DW1T;
            end

            KA0DW01.KA0DWC1T = "00";
            KA0DW01.KA0DWM1T = KA0DM060.KA0DMXMT[3];
            KA0DW01.KA0DWY1T = KA0DM060.KA0DMXYR[3];
            KA0DW01.KA0DWD1T = KA0DM060.KA0DMXDY[3];
            /* --------------- y2k out begin --------------*/
            /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
            /* END;*/
            /* --------------- y2k out begin --------------*/
            /* --------------- y2k in begin  --------------*/
            if (KA0DW01.KA0DW1T != 0)
              if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                KA0DW01.KA0DWC1T = "19";
              else
                KA0DW01.KA0DWC1T = "20";
              end
            end
            /* --------------- y2k in end    --------------*/
            if (KA0DW01.KA0DW1T == 0
             && KUTREC.KUTENDT[3] > 0)
              KUTREC.KUTXNDT[3] = 99999999;
            else
              KUTREC.KUTXNDT[3] = KA0DW01.KA0DW1T;
            end
            KA0DW02.KUTGRP[KA0DW3DX] = KUTREC.KUTGRP;
            KA0DW01.KA0DW3DX = KA0DW01.KA0DW3DX + 1;
          end /* end of "if" statement*/
          goto KA0D055; /* proceed to next process*/
        else /* else(pf12 key not pressed)*/
          if (converseVar.eventKey is pf12) /* if pf12 key was pressed*/
            if (KA0DM060.XOTCD != " ") /* if anything on screen*/
              /* ********** move map fields to work record ***********/
              KA0DW01.KA0DWC1T = "00";
              KA0DW01.KA0DWM1T = KA0DM060.KA0DMEMT[1];
              KA0DW01.KA0DWY1T = KA0DM060.KA0DMEYR[1];
              KA0DW01.KA0DWD1T = KA0DM060.KA0DMEDY[1];
              /* --------------- y2k out begin --------------*/
              /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
              /* END;*/
              /* --------------- y2k out begin --------------*/
              /* --------------- y2k in begin  --------------*/
              if (KA0DW01.KA0DW1T != 0)
                if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                  KA0DW01.KA0DWC1T = "19";
                else
                  KA0DW01.KA0DWC1T = "20";
                end
              end
              /* --------------- y2k in end    --------------*/
              KUTREC.KUTENDT[1] = KA0DW01.KA0DW1T;

              KA0DW01.KA0DWC1T = "00";
              KA0DW01.KA0DWM1T = KA0DM060.KA0DMEMT[2];
              KA0DW01.KA0DWY1T = KA0DM060.KA0DMEYR[2];
              KA0DW01.KA0DWD1T = KA0DM060.KA0DMEDY[2];
              /* --------------- y2k out begin --------------*/
              /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
              /* END;*/
              /* --------------- y2k out begin --------------*/
              /* --------------- y2k in begin  --------------*/
              if (KA0DW01.KA0DW1T != 0)
                if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                  KA0DW01.KA0DWC1T = "19";
                else
                  KA0DW01.KA0DWC1T = "20";
                end
              end
              /* --------------- y2k in end    --------------*/
              KUTREC.KUTENDT[2] = KA0DW01.KA0DW1T;

              KA0DW01.KA0DWC1T = "00";
              KA0DW01.KA0DWM1T = KA0DM060.KA0DMEMT[3];
              KA0DW01.KA0DWY1T = KA0DM060.KA0DMEYR[3];
              KA0DW01.KA0DWD1T = KA0DM060.KA0DMEDY[3];
              /* --------------- y2k out begin --------------*/
              /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
              /* END;*/
              /* --------------- y2k out begin --------------*/
              /* --------------- y2k in begin  --------------*/
              if (KA0DW01.KA0DW1T != 0)
                if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                  KA0DW01.KA0DWC1T = "19";
                else
                  KA0DW01.KA0DWC1T = "20";
                end
              end
              /* --------------- y2k in end    --------------*/
              KUTREC.KUTENDT[3] = KA0DW01.KA0DW1T;

              KA0DW01.KA0DWC1T = "00";
              KA0DW01.KA0DWM1T = KA0DM060.KA0DMXMT[1];
              KA0DW01.KA0DWY1T = KA0DM060.KA0DMXYR[1];
              KA0DW01.KA0DWD1T = KA0DM060.KA0DMXDY[1];
              /* --------------- y2k out begin --------------*/
              /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
              /* END;*/
              /* --------------- y2k out begin --------------*/
              /* --------------- y2k in begin  --------------*/
              if (KA0DW01.KA0DW1T != 0)
                if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                  KA0DW01.KA0DWC1T = "19";
                else
                  KA0DW01.KA0DWC1T = "20";
                end
              end
              /* --------------- y2k in end    --------------*/
              if (KA0DW01.KA0DW1T == 0
               && KUTREC.KUTENDT[1] > 0)
                KUTREC.KUTXNDT[1] = 99999999;
              else
                KUTREC.KUTXNDT[1] = KA0DW01.KA0DW1T;
              end

              KA0DW01.KA0DWC1T = "00";
              KA0DW01.KA0DWM1T = KA0DM060.KA0DMXMT[2];
              KA0DW01.KA0DWY1T = KA0DM060.KA0DMXYR[2];
              KA0DW01.KA0DWD1T = KA0DM060.KA0DMXDY[2];
              /* --------------- y2k out begin --------------*/
              /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
              /* END;*/
              /* --------------- y2k out begin --------------*/
              /* --------------- y2k in begin  --------------*/
              if (KA0DW01.KA0DW1T != 0)
                if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                  KA0DW01.KA0DWC1T = "19";
                else
                  KA0DW01.KA0DWC1T = "20";
                end
              end
              /* --------------- y2k in end    --------------*/
              if (KA0DW01.KA0DW1T == 0
               && KUTREC.KUTENDT[2] > 0)
                KUTREC.KUTXNDT[2] = 99999999;
              else
                KUTREC.KUTXNDT[2] = KA0DW01.KA0DW1T;
              end

              KA0DW01.KA0DWC1T = "00";
              KA0DW01.KA0DWM1T = KA0DM060.KA0DMXMT[3];
              KA0DW01.KA0DWY1T = KA0DM060.KA0DMXYR[3];
              KA0DW01.KA0DWD1T = KA0DM060.KA0DMXDY[3];
              /* --------------- y2k out begin --------------*/
              /* IF KA0DW01.KA0DW1T NE 0;*/
              /* MOVE '19' TO KA0DW01.KA0DWC1T;*/
              /* END;*/
              /* --------------- y2k out begin --------------*/
              /* --------------- y2k in begin  --------------*/
              if (KA0DW01.KA0DW1T != 0)
                if (KA0DW01.KA0DWY1T > 60) /* Century windowing*/
                  KA0DW01.KA0DWC1T = "19";
                else
                  KA0DW01.KA0DWC1T = "20";
                end
              end
              /* --------------- y2k in end    --------------*/
              if (KA0DW01.KA0DW1T == 0
               && KUTREC.KUTENDT[3] > 0)
                KUTREC.KUTXNDT[3] = 99999999;
              else
                KUTREC.KUTXNDT[3] = KA0DW01.KA0DW1T;
              end

              KUTREC.KUTDABK[1] = KA0DM060.KUTDABK[1];
              KUTREC.KUTDABK[2] = KA0DM060.KUTDABK[2];
              KUTREC.KUTDABK[3] = KA0DM060.KUTDABK[3];
              KUTREC.KUTDAOF[1] = KA0DM060.KUTDAOF[1];
              KUTREC.KUTDAOF[2] = KA0DM060.KUTDAOF[2];
              KUTREC.KUTDAOF[3] = KA0DM060.KUTDAOF[3];
              KUTREC.XTDCD[1] = KA0DM060.XTDCD[1];
              KUTREC.XTDCD[2] = KA0DM060.XTDCD[2];
              KUTREC.XTDCD[3] = KA0DM060.XTDCD[3];
              KUTREC.KUTTDPOF[1] = KA0DM060.KUTTDPOF[1];
              KUTREC.KUTTDPOF[2] = KA0DM060.KUTTDPOF[2];
              KUTREC.KUTTDPOF[3] = KA0DM060.KUTTDPOF[3];
              KUTREC.KUTTDPBK[1] = KA0DM060.KUTTDPBK[1];
              KUTREC.KUTTDPBK[2] = KA0DM060.KUTTDPBK[2];
              KUTREC.KUTTDPBK[3] = KA0DM060.KUTTDPBK[3];
              KUTREC.KUTAANET[1] = KA0DM060.KUTAANET[1];
              KUTREC.KUTAANET[2] = KA0DM060.KUTAANET[2];
              KUTREC.KUTAANET[3] = KA0DM060.KUTAANET[3];
              KUTREC.KUTAAFCG[1] = KA0DM060.KUTAAFCG[1];
              KUTREC.KUTAAFCG[2] = KA0DM060.KUTAAFCG[2];
              KUTREC.KUTAAFCG[3] = KA0DM060.KUTAAFCG[3];
              KUTREC.KUTAAFCN[1] = KA0DM060.KUTAAFCN[1];
              KUTREC.KUTAAFCN[2] = KA0DM060.KUTAAFCN[2];
              KUTREC.KUTAAFCN[3] = KA0DM060.KUTAAFCN[3];
              KUTREC.KUTTDNET[1] = KA0DM060.KUTTDNET[1];
              KUTREC.KUTTDNET[2] = KA0DM060.KUTTDNET[2];
              KUTREC.KUTTDNET[3] = KA0DM060.KUTTDNET[3];
              KUTREC.KUTTDSPN[1] = KA0DM060.KUTTDSPN[1];
              KUTREC.KUTTDSPN[2] = KA0DM060.KUTTDSPN[2];
              KUTREC.KUTTDSPN[3] = KA0DM060.KUTTDSPN[3];
              KUTREC.KUTTDDSN[1] = KA0DM060.KUTTDDSN[1];
              KUTREC.KUTTDDSN[2] = KA0DM060.KUTTDDSN[2];
              KUTREC.KUTTDDSN[3] = KA0DM060.KUTTDDSN[3];
              KUTREC.KUTDANET[1] = KA0DM060.KUTDANET[1];
              KUTREC.KUTDANET[2] = KA0DM060.KUTDANET[2];
              KUTREC.KUTDANET[3] = KA0DM060.KUTDANET[3];
              KUTREC.KUTDAHCN[1] = KA0DM060.KUTDAHCN[1];
              KUTREC.KUTDAHCN[2] = KA0DM060.KUTDAHCN[2];
              KUTREC.KUTDAHCN[3] = KA0DM060.KUTDAHCN[3];
              KUTREC.KUCCOID = KA0DM060.KUCCOID;
              KUTREC.KUMSTRID = KA0DM060.KUMSTRID;
              KUTREC.XNXCD = KA0DM060.XNXCD;
              KUTREC.XGPCD = KA0DM060.XGPCD;
              KUTREC.XOTCD = KA0DM060.XOTCD;
              KUTREC.XPTCD[1] = KA0DM060.XPTCD[1];
              KUTREC.XPTCD[2] = KA0DM060.XPTCD[2];
              KUTREC.XPTCD[3] = KA0DM060.XPTCD[3];
              KUTREC.XAACD[1] = KA0DM060.XAACD[1];
              KUTREC.XAACD[2] = KA0DM060.XAACD[2];
              KUTREC.XAACD[3] = KA0DM060.XAACD[3];
              KUTREC.KUTAPOF[1] = KA0DM060.KUTAPOF[1];
              KUTREC.KUTAPOF[2] = KA0DM060.KUTAPOF[2];
              KUTREC.KUTAPOF[3] = KA0DM060.KUTAPOF[3];
              KUTREC.KUTAPBK[1] = KA0DM060.KUTAPBK[1];
              KUTREC.KUTAPBK[2] = KA0DM060.KUTAPBK[2];
              KUTREC.KUTAPBK[3] = KA0DM060.KUTAPBK[3];
              KUTREC.XTDCD[1] = KA0DM060.XTDCD[1];
              KUTREC.XTDCD[2] = KA0DM060.XTDCD[2];
              KUTREC.XTDCD[3] = KA0DM060.XTDCD[3];
              KUTREC.KUTTDPOF[1] = KA0DM060.KUTTDPOF[1];
              KUTREC.KUTTDPOF[2] = KA0DM060.KUTTDPOF[2];
              KUTREC.KUTTDPOF[3] = KA0DM060.KUTTDPOF[3];
              KUTREC.KUTTDPBK[1] = KA0DM060.KUTTDPBK[1];
              KUTREC.KUTTDPBK[2] = KA0DM060.KUTTDPBK[2];
              KUTREC.KUTTDPBK[3] = KA0DM060.KUTTDPBK[3];
              KUTREC.XDACD[1] = KA0DM060.XDACD[1];
              KUTREC.XDACD[2] = KA0DM060.XDACD[2];
              KUTREC.XDACD[3] = KA0DM060.XDACD[3];
              KUTREC.XCPCD[1] = KA0DM060.XCPCD[1];
              KUTREC.XCPCD[2] = KA0DM060.XCPCD[2];
              KUTREC.XCPCD[3] = KA0DM060.XCPCD[3];
              KA0DW02.KUTGRP[KA0DW3DX] = KUTREC.KUTGRP;
              KA0DW01.KA0DW3DX = KA0DW01.KA0DW3DX + 1;
            end /* end of "if" statement*/
            goto KA0D075; /* proceed to next process*/
          else /* else(pf6 key not pressed)*/
            converseLib.validationFailed(70);
                                     /* message "press pf12 to confirm"*/
            goto KA0D060; /* re-converse screen*/
          end /* end of "if" statement*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    else /* else(errors on screen)*/
      set KA0DM060 alarm; /* make screen "beep"*/
      goto KA0D060; /* re-converse screen*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D075: KA0D075();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (KA0DM050.KA0DMOPT[2] != " ") /* if spcl cust grp option choosen*/
      goto KA0D080; /* proceed to spcl cust grp option*/
    else /* else(spcl instuct option not choosen)*/
      goto KA0D085; /* proceed to spcl instruct scrn*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D080: KA0D080();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.eventKey is pa2) /* if "pa2" key was pressed*/
      goto KA0D075; /* initialize & re-converse screen*/
    end /* end of "if" statement*/
                                   /* ;*/
    if (converseVar.eventKey is pf3 /* if "pf3" key was pressed*/
     && KA0DW01.KA0DWOPF == "Y")    /* and confirmation flag = 'yes'*/
      KA0DW01.KA0DWM8F = "N"; /* re-initialize map-conversed-flag*/
      goto KA0D045; /* return to optional menu*/
    end /* end of "if" statement*/
                                   /* ;*/
    if (converseVar.validationMsgNum == 0) /* if no errors on screen*/
      if (KA0DW01.KA0DWFST == "Y") /* if "confirm" message not yet sent*/
        converseLib.validationFailed(22); /* message "press pf12 to confirm"*/
        KA0DW01.KA0DWFST = "N"; /* indicate "confirm" message sent*/
        goto KA0D080; /* re-converse screen*/
      else
                                     /* else("confirm" message already sent)*/
        if (converseVar.eventKey is pf12) /* if pf12 key was pressed*/
          goto KA0D085; /* proceed to next process*/
        else /* else(pf12 key not pressed)*/
          converseLib.validationFailed(22); /* message "press pf12 to confirm"*/
          goto KA0D080; /* re-converse screen*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    else /* else(errors on screen)*/
      set KA0DM080 alarm; /* make screen "beep"*/
      goto KA0D080; /* re-converse screen*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D085: KA0D085();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (KA0DM050.KA0DMOPT[3] != " ") /* if spcl instruction option choosen*/
      goto KA0D090; /* proceed to spcl instruction option*/
    else /* else(spcl instuct option not choosen)*/
      goto KA0D095; /* proceed to update process's*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D090: KA0D090();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.eventKey is pa2) /* if "pa2" key was pressed*/
      goto KA0D085; /* initialize and re-converse screen*/
    end /* end of "if" statement*/
                                   /* ;*/
    if (converseVar.eventKey is pf3 /* if "pf3" key was pressed*/
     && KA0DW01.KA0DWOPF == "Y")    /* and confirmation-flag = 'yes'*/
      KA0DW01.KA0DWM9F = "N"; /* re-initialize map-conversed-flag*/
      goto KA0D045; /* return to optional menu*/
    end /* end of "if" statement*/
                                   /* ;*/
    if (converseVar.validationMsgNum == 0) /* if no errors on screen*/
      if (KA0DW01.KA0DWFST == "Y") /* if "confirm" message not yet sent*/
        converseLib.validationFailed(22); /* message "press pf12 to confirm"*/
        KA0DW01.KA0DWFST = "N"; /* indicate "confirm" message sent*/
        goto KA0D090; /* re-converse screen*/
      else
                                     /* else("confirm" message already sent)*/
        if (converseVar.eventKey is pf12) /* if pf12 key was pressed*/
          goto KA0D095; /* proceed to next process*/
        else /* else(pf12 key not pressed)*/
          converseLib.validationFailed(22); /* message "press pf12 to confirm"*/
          goto KA0D090; /* re-converse screen*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    else /* else(errors on screen)*/
      set KA0DM090 alarm; /* make screen "beep"*/
      goto KA0D090; /* re-converse screen*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D095: KA0D095();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D045; /* return to option menu*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D100: KA0D100();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D115; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D115: KA0D115();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D120; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D120: KA0D120();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D130; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D130: KA0D130();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D135; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D135: KA0D135();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D140; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D140: KA0D140();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KA0D150; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D150: KA0D150();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/

    if (converseVar.validationMsgNum != 0)
      goto KA0D010;
    else
      goto KA0D160; /* proceed to next process*/
    end


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D160: KA0D160();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.validationMsgNum != 0)
      goto KA0D010;
    else
      goto KA0D999; /* proceed to next process*/
    end


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KA0D999: KA0D999();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/




    goto KA0D020; /* gpc screen*/




     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
  end // end main
end // end KA0D


// first time thru logic
Function KA0D010()


   /* *************************************************************/
   /* *****  f i r s t    t i m e    t h r u    l o g i c    ******/
   /* *************************************************************/


  XSENTRY();

  XSSEGTR(); /* 11/88 jw - set segmented trans id*/

  if (COMMAREA.CAFROMAP != "KA0M" /* if not from cust-add-menu*/
   && COMMAREA.CAFROMAP != "KA0S" /* and not from add-store*/
   && COMMAREA.CAFROMAP != "KA0D" /* and not from add-cust-unit*/
   && COMMAREA.CAFROMAP != "KG0C" /* and not from add-rep*/
   && COMMAREA.CAFROMAP != "KG0D") /* and not from add-CULVL*/
    COMMAREA.CATOAP = "KA0M"; /* destination "cust-add-menu"*/
    XSEXIT(); /* perform transfer*/
    exit program; /* in transfer no good*/
  end /* end of "if" statement*/

  KA0DS-INIT-RECS();

  KA0DW01.KA0DWGRP = COMMAREA.CAUSERA;

  KA0DW01.KA0DWLBG = 0; /* initialize last bill grp id to 0*/

  set KA0DM020 initial; /* clear map*/
  set KA0DM050 initial; /* clear map*/
  set KA0DM060 initial; /* clear map*/
  set KA0DM080 initial; /* clear map*/
  set KA0DM090 initial; /* clear map*/

  KA0DW01.KA0DWM6F = "N"; /* initialize converse map 6 flag to 'n'*/
  KA0DW01.KA0DWM8F = "N"; /* initialize converse map 8 flag to 'n'*/
  KA0DW01.KA0DWM9F = "N"; /* initialize converse map 9 flag to 'n'*/



end // end KA0D010


// read company table
Function KA0D012()


   /* *************************************************************/
   /* ***** this is where a dbii i/o module is called        ******/
   /* ***** to determine if the company exists, the company  ******/
   /* ***** row is read in the company table, otherwise      ******/
   /* ***** control is returned to the menu along with an    ******/
   /* ***** error message.                                   ******/
   /* *************************************************************/


  set KUCREC empty; /* initialize company record*/
  KUCREC.KUCCOID = KA0DW01.KA0DWCID;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;  call i/o mod to select co.*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      KA0DW01.KA0DWERR = 25; /* ERROR "not found"*/
      COMMAREA.CAUSERA = KA0DW01.KA0DWGRP;
                                        /* work fields to commarea*/
      COMMAREA.CATOAP = "KA0M";
                                   /* destination of control xfer*/
      XSEXIT(); /* xfer control to add menu*/
    else /* else(error other than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0D012 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KA0DM020.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  end /* end of "if" statement*/





end // end KA0D012


// read store table
Function KA0D013()


   /* *************************************************************/
   /* ***** this is where a dbii i/o module is called        ******/
   /* ***** to determine if the store exists, the store      ******/
   /* ***** row is read in the store table, otherwise        ******/
   /* ***** control is returned to the menu along with an    ******/
   /* ***** error message.                                   ******/
   /* *************************************************************/


  KUMREC.KUCCOID = KA0DW01.KA0DWCID;
  KUMREC.KUMSTRID = KA0DW01.KA0DWSID;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;  call i/o mod to select co.*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      KA0DW01.KA0DWERR = 26; /* ERROR "not found"*/
      COMMAREA.CAUSERA = KA0DW01.KA0DWGRP;
                                        /* work fields to commarea*/
      COMMAREA.CATOAP = "KA0M";
                                   /* destination of control xfer*/
      XSEXIT(); /* xfer control to add menu*/
    else /* else(error other than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0D013 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KA0DM020.KUCCOID;
      KUWREC.KUMSTRID = KA0DM020.KUMSTRID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  end /* end of "if" statement*/





end // end KA0D013


// format add cust-unit screen
Function KA0D015()


   /* *************************************************************/
   /* *****    f o r m a t    a d d    c u s t - u n i t     ******/
   /* *****                   s c r e e n                    ******/
   /* *************************************************************/


   /* **********  move data from table records to map  ************/
  set KA0DM020 initial;
  KA0DM020.KA0DMDT = VGVar.currentShortGregorianDate;
  KA0DM020.KUCCOID = KUCREC.KUCCOID;
  KA0DM020.KUCCONM = KUCREC.KUCCONM;
  KA0DM020.KUCCOANM = KUCREC.KUCCOANM;
  KA0DM020.KUMSTRID = KUMREC.KUMSTRID;
  KA0DM020.KUMSTRNM = KUMREC.KUMSTRNM;
  KA0DM020.XNXCD = KA0DW01.KA0DWDID;
  KA0DM020.XGPCD = KA0DW01.KA0DWGID;
   /* *************************************************************/

   /* **********  assign oder defaults, default values  ***********/
  KA0DM020.KUNABOFL = "Y";
  if (KA0DM020.XGPCD == "02") /* if "footwear" gpc code*/
    KA0DM020.KUNBOQTY = 3; /* initialize min bo quantity to 3*/
  else /* else(gpc is not "footwear")*/
    if (KA0DM020.XGPCD != " ")
      KA0DM020.KUNBOQTY = 1; /* initialize min bo quantity to 1*/
    else
      KA0DM020.KUNBOQTY = 0;
    end
  end /* end of "if" statement*/
  KA0DM020.KUNCAFL = "N";
  KA0DM020.KUNNOSFL = "N";

   /* *************************************************************/

  if (converseVar.validationMsgNum == 0) /* if no previous errors*/
    KA0DS2J(); /* edit gpc code & get decode*/
    KA0DS2K(); /* edit dept code & get decode*/

    if (converseVar.validationMsgNum != 0) /* if errors in dept or gpc*/
      set KA0DM020.XNXCD initialAttributes; /* reset field attributes*/
      set KA0DM020.XGPCD initialAttributes; /* reset field attributes*/
      converseLib.validationFailed(0); /* remove error message*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/

  KA0DW01.KA0DWFST = "Y"; /* initialize confirm switch to 'y'*/

  set KA0DM020.XGPCD cursor; /* initialize cursor position*/


end // end KA0D015


// display add cust-unit scrn
Function KA0D020()
  if (COMMAREA.CAFROMAP == "KG0C"
   || COMMAREA.CAFROMAP == "KG0D")
    exit stack;
  else
    converse KA0DM020 ;
  end

  if (KA0DM020.XGPCD == "02")
    if (KA0DM020.KUNABOFL == "Y")
      if (KA0DM020.KUNBOQTY == 0)
        KA0DM020.KUNBOQTY = 3;
      end
    end
  else
    if (KA0DM020.KUNABOFL == "Y")
      if (KA0DM020.KUNBOQTY == 0)
        KA0DM020.KUNBOQTY = 1;
      end
    end
  end

  KA0DSPF(); /* check pfkeys*/
  KA0DS20(); /* edit fields on map*/





end // end KA0D020


// format cust-unit option menu
Function KA0D045()


   /* *************************************************************/
   /* ****  f o r m a t    a d d    c u s t o m e r - u n i t *****/
   /* ****              o p t i o n    m e n u                *****/
   /* *************************************************************/


  set KA0DM050 initial;
  KA0DM050.KA0DMDT = VGVar.currentShortGregorianDate; /* move date to map*/
  KA0DW01.KA0DWFST = "Y"; /* initialize first time flag*/
  KA0DW01.KA0DWCFL = "N"; /* initialize confirmation flag to 'no'*/

  set KA0DM050.KA0DMOPT[1] cursor; /* initialize cursor position*/






end // end KA0D045


// display cust-unit option menu
Function KA0D050()
  converse KA0DM050 ;


  KA0DSPF(); /* check pfkeys*/






end // end KA0D050


// format order type screen
Function KA0D055()


   /* *************************************************************/
   /* *****       f o r m a t    o r d e r    t y p e        ******/
   /* *****                   s c r e e n                    ******/
   /* *************************************************************/


  if (KA0DM050.KA0DMOPT[1] != " ") /* if this option choosen*/
    KA0DW01.KA0DWFST = "Y"; /* initialize confirm switch to 'y'*/
    /* **********  move data from table records to map  ************/
    KA0DM060.KA0DMDT = VGVar.currentShortGregorianDate;
    KA0DM060.KUCCOID = KUCREC.KUCCOID;
    KA0DM060.KUCCONM = KUCREC.KUCCONM;
    KA0DM060.KUCCOANM = KUCREC.KUCCOANM;
    KA0DM060.KUMSTRID = KUMREC.KUMSTRID;
    KA0DM060.KUMSTRNM = KUMREC.KUMSTRNM;
    KA0DM060.XNXCD = KA0DM020.XNXCD;
    KA0DM060.XNXDESC = KA0DM020.XNXDESC;
    KA0DM060.XGPCD = KA0DM020.XGPCD;
    KA0DM060.XGPDESC = KA0DM020.XGPDESC;
    /* *************************************************************/
  else /* else(this option not choosen)*/
    /* next sentence                ;  proceed to flow*/
  end /* end of "if" statement*/

  set KA0DM060.XOTCD cursor; /* initialize cursor position*/





end // end KA0D055


// display order type screen
Function KA0D060()
  converse KA0DM060 ;


  KA0DS2P(); /* check pfkeys*/
  KA0DW01.KA0DWM6F = "Y"; /* set map conversed flag to 'y'*/
  if (converseVar.validationMsgNum == 0) /* if no errors on screen*/
    /* ******* sort order of fields on map by date ********/
    KA0DW01.KA0DWNDX = 1; /* move 1 to index 1*/
    KA0DW01.KA0DW2DX = 2; /* move 2 to index 2*/
    KA0DS6A(); /* sort entries on map*/
    KA0DW01.KA0DWNDX = 2; /* move 2 to index 1*/
    KA0DW01.KA0DW2DX = 3; /* move 3 to index 2*/
    KA0DS6A(); /* sort entries on map*/
    KA0DW01.KA0DWNDX = 1; /* move 1 to index 1*/
    KA0DW01.KA0DW2DX = 2; /* move 2 to index 2*/
    KA0DS6A(); /* sort entries on map*/
    /* ****************************************************/
  end /* end of "if" statement*/

  KA0DS60(); /* edit fields on map*/




end // end KA0D060


// format spcl cust grp screen
Function KA0D075()


   /* *************************************************************/
   /* ***** f o r m a t    s p e c i a l    c u s t o m e r  ******/
   /* *****            g r o u p    s c r e e n              ******/
   /* *************************************************************/


  if (KA0DM050.KA0DMOPT[2] != " ") /* if this option choosen*/

    /* **********  move data from table records to map  ************/
    KA0DM080.KA0DMDT = VGVar.currentShortGregorianDate;
    KA0DM080.KUCCOID = KUCREC.KUCCOID;
    KA0DM080.KUCCONM = KUCREC.KUCCONM;
    KA0DM080.KUCCOANM = KUCREC.KUCCOANM;
    KA0DM080.KUMSTRID = KUMREC.KUMSTRID;
    KA0DM080.KUMSTRNM = KUMREC.KUMSTRNM;
    KA0DM080.XNXCD = KA0DM020.XNXCD;
    KA0DM080.XNXDESC = KA0DM020.XNXDESC;
    KA0DM080.XGPCD = KA0DM020.XGPCD;
    KA0DM080.XGPDESC = KA0DM020.XGPDESC;
    /* *************************************************************/

    KA0DW01.KA0DWFST = "Y"; /* initialize confirm switch to 'y'*/
  else /* else(this option not choosen)*/
    /* next sentence                ;  proceed to flow*/
  end /* end of "if" statement*/

  set KA0DM080.XSOCD cursor; /* initialize cursor position*/





end // end KA0D075


// disp spcl customer group scrn
Function KA0D080()
  converse KA0DM080 ;


  KA0DS2P(); /* check pfkeys*/
  KA0DW01.KA0DWM8F = "Y"; /* set map conversed flag to 'y'*/
  KA0DS80(); /* edit fields on map*/





end // end KA0D080


// format special instuctions scr
Function KA0D085()


   /* *************************************************************/
   /* *****          f o r m a t    s p e c i a l            ******/
   /* *****      i n s t r u c t i o n    s c r e e n        ******/
   /* *************************************************************/


  if (KA0DM050.KA0DMOPT[3] != " ") /* if this option choosen*/

    /* **********  move data from table records to map  ************/
    KA0DM090.KA0DMDT = VGVar.currentShortGregorianDate;
    KA0DM090.KUCCOID = KUCREC.KUCCOID;
    KA0DM090.KUCCONM = KUCREC.KUCCONM;
    KA0DM090.KUCCOANM = KUCREC.KUCCOANM;
    KA0DM090.KUMSTRID = KUMREC.KUMSTRID;
    KA0DM090.KUMSTRNM = KUMREC.KUMSTRNM;
    KA0DM090.XNXCD = KA0DM020.XNXCD;
    KA0DM090.XNXDESC = KA0DM020.XNXDESC;
    KA0DM090.XGPCD = KA0DM020.XGPCD;
    KA0DM090.XGPDESC = KA0DM020.XGPDESC;
    /* *************************************************************/

    KA0DW01.KA0DWFST = "Y"; /* initialize confirm switch to 'y'*/
  else /* else(this option not choosen)*/
    /* next sentence                ;  proceed to flow*/
  end /* end of "if" statement*/

  set KA0DM090.XNDCD[1] cursor; /* initialize cursor position*/





end // end KA0D085


// disp special instructions scrn
Function KA0D090()
  converse KA0DM090 ;


  KA0DS2P(); /* check pfkeys*/
  KA0DW01.KA0DWM9F = "Y"; /* set map conversed flag to 'y'*/
  KA0DS90(); /* edit fields on map*/





end // end KA0D090


// looping process(goto options)
Function KA0D095()


   /* *************************************************************/
   /* *****       no processing in this process block        ******/
   /* *************************************************************/


end // end KA0D095


// update processing start
Function KA0D100()


   /* *************************************************************/
   /* *****        u p d a t e    p r o c e s s i n g        ******/
   /* *****                   s t a r t                      ******/
   /* *************************************************************/


  set KUNREC empty; /* initialize cust-unit record*/





end // end KA0D100


// update terms table
Function KA0D115()


   /* *************************************************************/
   /* *****      u p d a t e    t e r m s    t a b l e       ******/
   /* *************************************************************/


  set KUTREC empty;
  KA0DW01.KA0DWNDX = 1; /* initialize index to 1*/
  KUTREC.KUTGRP = KA0DW02.KUTGRP[KA0DWNDX];
  KA0DW01.KA0DW2DX = 1; /* initilize 2nd index to 1*/
  while (KUTREC.XOTCD != " " /* while order types exist in tbl*/
   && KA0DW01.KA0DWNDX <= 100) /* and not end of internal tbl*/
    /* ***************************************/
    XX0XS01(); /* get system date & time*/
    KUTREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUTREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KUTREC.ZZZCHGCT = 0;
    /* ***************************************/

    /* *************************************************************/
    /* ***** do other processing based on the terms stuff here *****/
    /* *************************************************************/
    if (KUTREC.XOTCD in XOTTBL.XOTCD)
      if (XOTTBL.XOTPROPF[sysVar.arrayIndex] == "Y")
        if (KUCREC.KUCPRPTI != "Y")
          KUCREC.KUCPRPTI = "Y"; /* set prop terms indicator to y*/
          KA0DW01.KA0DWUPT = "Y";
        end
      end
    end
    if (XOTTBL.XOTPROPF[sysVar.arrayIndex] != "Y") /* if a non-prop order type*/
      if (KUCREC.KUCFTRTI != "Y")
        KUCREC.KUCFTRTI = "Y";
        KA0DW01.KA0DWUPT = "Y";
      end
    end /* end of "if" statement*/
    /* *************************************************************/
    set KU3REC empty;
    KU3REC.KU3OPT = "A ";

    call "IO0350" (KU3REC, SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE != 0)
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0D115 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VTERMS01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUTREC.KUCCOID;
      KUWREC.KUMSTRID = KUTREC.KUMSTRID;
      KUWREC.XNXCD = KUTREC.XNXCD;
      KUWREC.XGPCD = KUTREC.XGPCD;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    else
      /* ********** format and write audit report record ***********/
      set KUZREC empty; /* initialize audit rec*/
      KUZREC.KUZTYPE = "A"; /* assign type code value*/
      KUZREC.KUZBFCD = " "; /* assign "after" code*/
      KUZREC.XXXTBLNM = "VTERMS01"; /* move tbl name to audit rec*/
      KUZREC.XXXUSER = COMMAREA.CAUSERID;
                                   /* move user id to audit rec*/
      KUZREC.KUCCOID = KUTREC.KUCCOID; /* move co id to audit rec*/
      KUZREC.KUMSTRID = KUTREC.KUMSTRID; /* move co id to audit rec*/
      KUZREC.XNXCD = KUTREC.XNXCD; /* move co id to audit rec*/
      KUZREC.XGPCD = KUTREC.XGPCD; /* move co id to audit rec*/
      KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move date to audit rec*/
      KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
      KUZREC.KUZDATA = KUTREC.KUTGRP; /* move data to audit record*/
      if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
        KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
        KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
      else
        KUZREC.KUZSSEQ = 0;
        KUZREC.KUZLEN = 0;
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "KA0D   ";
        TA1REC.TA1LOCAT[1] = "KA0D115  ";
        TA1REC.TA1LOCAT[2] = "KIZTBL   ";
        TA1REC.TA1LOCAT[3] = "VTERMS01 ";
        TA1REC.TA1MAP = "KA0DM000";
        TA1REC.TA1DBASE = "DCUST.";
        TA1REC.TA1TBLVU = "VTERMS01";
        TA1TBLKE = "TABLE NOT FOUND";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end

      call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
      if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                                 /* ne -803)*/
        /* **********************  call error routine  *****************/
        TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
        TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
        TA1REC.TA1PGMNM = "KA0D115"; /* move program name to error rec*/
        TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
        TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
        TA1REC.TA1TBLVU = "VTERMS01"; /* move table view to error record*/
        set KUWREC empty; /* initialize error work rec*/
        /* ************* move keys to error work record  ***************/
        KUWREC.KUCCOID = KUZREC.KUCCOID;
        KUWREC.KUMSTRID = KUZREC.KUMSTRID;
        KUWREC.XNXCD = KUZREC.XNXCD;
        KUWREC.XGPCD = KUZREC.XGPCD;
        /* *************************************************************/
        TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                       /* ;     move table key value*/
        KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* call db backout*/
        SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                       /* ;*/
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
        XSPF4();
        /* *************************************************************/
        /* ***** the following commented until retro-fitting of   ******/
        /* ***** the return from the error routine                ******/
        /* *************************************************************/
        /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                        /* ;     move appl global data*/
        /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
        /* XSEXIT                          ;     transfer to next appl*/
        /* ******************  end of error routine  *******************/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX + 1;
                                 /* ;  incriment index by 1*/
    set KUTREC empty;
    KUTREC.KUTGRP = KA0DW02.KUTGRP[KA0DWNDX];
  end /* end of "while" loop*/




end // end KA0D115


// update special cust-grp tbl
Function KA0D120()


   /* *************************************************************/
   /* ***** u p d a t e    s p e c i a l   c u s t o m e r   ******/
   /* *****              g r o u p    t a b l e              ******/
   /* *************************************************************/



  set KUPREC empty; /* initialize spcl cust grp rec*/
  KA0DW01.KA0DWNDX = 1; /* initialize index to 1*/
  while (KA0DW01.KA0DWNDX <= 10 /* loop thru all fields entered*/
   && KA0DM080.XSGCD[KA0DWNDX] != " ") /* on spcl cust group screen*/
    KUPREC.XSGCD[KA0DWNDX] = KA0DM080.XSGCD[KA0DWNDX];
                                 /* ;       move map field to rec*/
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX + 1;
                                 /* ;       increment index by 1*/
  end /* end of "while" loop*/
  if (KUPREC.XSGCD[1] != " ")
                                   /* if record has at least 1 spcl cust*/
    KUNREC.KUNCGIND = "Y"; /* turn spcl cust grp ind "on"*/
    /* ************  format keys on spcl cust grp rec  *************/
    KUPREC.KUCCOID = KA0DM080.KUCCOID;
    KUPREC.KUMSTRID = KA0DM080.KUMSTRID;
    KUPREC.XNXCD = KA0DM080.XNXCD;
    KUPREC.XGPCD = KA0DM080.XGPCD;
    KUPREC.XSOCD = KA0DM080.XSOCD;
    /* *************************************************************/
    XX0XS01(); /* get date and time*/
    KUPREC.ZZZSDT = XX0XW01.XX0XWDAT;
    KUPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KUPREC.ZZZCHGCT = 0;
    /* *************************************************************/
    call "IO0260" ("A ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes}; /* module to insert row*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if return code not "okay"*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0D120 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUGRP01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KA0DM080.KUCCOID;
      KUWREC.KUMSTRID = KA0DM080.KUMSTRID;
      KUWREC.XNXCD = KA0DM080.XNXCD;
      KUWREC.XGPCD = KA0DM080.XGPCD;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    else /* else(return code okay)*/
      /* ********** format and write audit report record ***********/
      set KUZREC empty; /* initialize audit rec*/
      KUZREC.KUZTYPE = "A"; /* assign type code value*/
      KUZREC.KUZBFCD = " "; /* assign "after" code*/
      KUZREC.XXXTBLNM = "VCUGRP01"; /* move tbl name to audit rec*/
      KUZREC.XXXUSER = COMMAREA.CAUSERID;
                                   /* move user id to audit rec*/
      KUZREC.KUCCOID = KUPREC.KUCCOID; /* move co id to audit rec*/
      KUZREC.KUMSTRID = KUPREC.KUMSTRID; /* move co id to audit rec*/
      KUZREC.XNXCD = KUPREC.XNXCD;
                                   /* move co id to audit rec*/
      KUZREC.XGPCD = KUPREC.XGPCD;
                                   /* move co id to audit rec*/
      KUZREC.ZZZSDT = KUPREC.ZZZSDT; /* move date to audit rec*/
      KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
      KUZREC.KUZDATA = KUPREC.KUPGRP; /* move data to audit record*/
      if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
        KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
        KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
      else
        KUZREC.KUZSSEQ = 0;
        KUZREC.KUZLEN = 0;
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "KA0D   ";
        TA1REC.TA1LOCAT[1] = "KA0D120  ";
        TA1REC.TA1LOCAT[2] = "KIZTBL   ";
        TA1REC.TA1LOCAT[3] = "VCUGRP01 ";
        TA1REC.TA1MAP = "KA0CM000";
        TA1REC.TA1DBASE = "DCUST.";
        TA1REC.TA1TBLVU = "VCUGRP01";
        TA1TBLKE = "TABLE NOT FOUND";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
      if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                                 /* ne -803)*/
        /* **********************  call error routine  *****************/
        TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
        TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
        TA1REC.TA1PGMNM = "KA0D120 "; /* move program name to error rec*/
        TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
        TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
        TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
        set KUWREC empty; /* initialize error work rec*/
        /* ************* move keys to error work record  ***************/
        KUWREC.KUCCOID = KUZREC.KUCCOID;
        KUWREC.KUMSTRID = KUZREC.KUMSTRID;
        KUWREC.XNXCD = KUZREC.XNXCD;
        KUWREC.XGPCD = KUZREC.XGPCD;
        /* *************************************************************/
        TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                       /* ;     move table key value*/
        KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* call db backout*/
        SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                       /* ;*/
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
        XSPF4();
        /* *************************************************************/
        /* ***** the following commented until retro-fitting of   ******/
        /* ***** the return from the error routine                ******/
        /* *************************************************************/
        /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                        /* ;     move appl global data*/
        /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
        /* XSEXIT                          ;     transfer to next appl*/
        /* ******************  end of error routine  *******************/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else
                                   /* else(no spcl cust grp's entered)*/
    /* next sentence                ;        okay (do not insert)*/
  end /* end of "if" statement*/





end // end KA0D120


// update special inst table
Function KA0D130()


   /* *************************************************************/
   /* *****             u p d a t e    s p e c i a l         ******/
   /* *****          i n s t r u c t i o n    t a b l e      ******/
   /* *************************************************************/


  if (KA0DM090.XNDCD[1] != " ") /* if at least one spcl inst entered*/
    set KUQREC empty; /* initialize special intruction rec*/
    /* ***************  format standard record info  ***************/
    KUQREC.KUCCOID = KA0DM090.KUCCOID;
    KUQREC.KUMSTRID = KA0DM090.KUMSTRID;
    KUQREC.XNXCD = KA0DM090.XNXCD;
    KUQREC.XGPCD = KA0DM090.XGPCD;
    XX0XS01(); /* get date and time*/
    KUQREC.ZZZSDT = XX0XW01.XX0XWDAT;
    KUQREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUQREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KUQREC.ZZZCHGCT = 0;
    /* *************************************************************/
    KA0DW01.KA0DWNDX = 1; /* initialize index to 1*/
    while (KA0DW01.KA0DWNDX <= 10
     /* loop thru all all spcl instructions*/
     && KA0DM090.XNDCD[KA0DWNDX] != " ")
      KUNREC.KUNISIND = "Y"; /* turn spcl instruction ind "on"*/

      /* ***** move data from screen to record ******/
      KUQREC.XNDCD = KA0DM090.XNDCD[KA0DWNDX];
      KUQREC.KUQSIS = KA0DW01.KA0DWNDX;
      KUQREC.KUQSINST = KA0DM090.KUQSINST[KA0DWNDX];
      /* ********************************************/

      /* ***** call i/o module to insert row into table ******/
      call "IO0300" ("A ", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE != 0) /* if return code not "okay"*/
        /* **********************  call error routine  *****************/
        TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
        TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
        TA1REC.TA1PGMNM = "KA0D130 "; /* move program name to error rec*/
        TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
        TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
        TA1REC.TA1TBLVU = "VINST001"; /* move table view to error record*/
        set KUWREC empty; /* initialize error work rec*/
        /* ************* move keys to error work record  ***************/
        KUWREC.KUCCOID = KA0DM090.KUCCOID;
        KUWREC.KUMSTRID = KA0DM090.KUMSTRID;
        KUWREC.XNXCD = KA0DM090.XNXCD;
        KUWREC.XGPCD = KA0DM090.XGPCD;
        /* *************************************************************/
        TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                       /* ;     move table key value*/
        KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* call db backout*/
        SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                       /* ;*/
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
        XSPF4();
        /* *************************************************************/
        /* ***** the following commented until retro-fitting of   ******/
        /* ***** the return from the error routine                ******/
        /* *************************************************************/
        /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                        /* ;     move appl global data*/
        /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
        /* XSEXIT                          ;     transfer to next appl*/
        /* ******************  end of error routine  *******************/
      else
                                   /* else(return code "okay"*/
        KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX + 1; /* increment index*/

        /* ********** format and write audit report record ***********/
        set KUZREC empty; /* initialize audit rec*/
        KUZREC.KUZTYPE = "A"; /* assign type code value*/
        KUZREC.KUZBFCD = " "; /* assign "after" code*/
        KUZREC.XXXTBLNM = "VINST001"; /* move tbl name to audit rec*/
        KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user to audit rec*/
        KUZREC.KUCCOID = KUQREC.KUCCOID;
                                   /* move co id to audit rec*/
        KUZREC.KUMSTRID = KUQREC.KUMSTRID;
                                   /* move co id to audit rec*/
        KUZREC.XNXCD = KUQREC.XNXCD;
                                   /* move co id to audit rec*/
        KUZREC.XGPCD = KUQREC.XGPCD;
                                   /* move co id to audit rec*/
        KUZREC.ZZZSDT = KUQREC.ZZZSDT; /* move date to audit rec*/
        KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
        KUZREC.KUZDATA = KUQREC.KUQGRP; /* move data to audit record*/
        if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
          KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
          KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
        else
          KUZREC.KUZSSEQ = 0;
          KUZREC.KUZLEN = 0;
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "POST";
          TA1REC.TA1PGMNM = "KA0D   ";
          TA1REC.TA1LOCAT[1] = "KA0D130  ";
          TA1REC.TA1LOCAT[2] = "KIZTBL   ";
          TA1REC.TA1LOCAT[3] = "VINST001 ";
          TA1REC.TA1MAP = "KA0DM000";
          TA1REC.TA1DBASE = "DCUST.";
          TA1REC.TA1TBLVU = "VINST001";
          TA1TBLKE = "TABLE NOT FOUND";
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end

        call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod to add*/
        if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                                   /* ne -803)*/
          /* **********************  call error routine  *****************/
          TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
          TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
          TA1REC.TA1PGMNM = "KA0D130 "; /* move program name to error rec*/
          TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
          TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
          TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
          TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
          set KUWREC empty; /* initialize error work rec*/
          /* ************* move keys to error work record  ***************/
          KUWREC.KUCCOID = KUZREC.KUCCOID;
          KUWREC.KUMSTRID = KUZREC.KUMSTRID;
          KUWREC.XNXCD = KUZREC.XNXCD;
          KUWREC.XGPCD = KUZREC.XGPCD;
          /* *************************************************************/
          TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                         /* ;     move table key value*/
          KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* call db backout*/
          SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                         /* ;*/
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
          XSPF4();
          /* *************************************************************/
          /* ***** the following commented until retro-fitting of   ******/
          /* ***** the return from the error routine                ******/
          /* *************************************************************/
          /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                          /* ;     move appl global data*/
          /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
          /* XSEXIT                          ;     transfer to next appl*/
          /* ******************  end of error routine  *******************/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    end /* end of "while" loop*/
  end /* end of "if" statement*/





end // end KA0D130


// update special label table
Function KA0D135()


   /* *************************************************************/
   /* ***  u p d a t e    s p e c i a l    l a b e l    t b l  ****/
   /* *************************************************************/


  if (KA0DM020.KUSTEXT1 != " " /* if any special labels entered*/
   || KA0DM020.KUSTEXT2 != " ") /* |*/
    KUNREC.KUNLABIN = "Y"; /* set label indicator to 'yes'*/
    set KUSREC empty;
    KUSREC.KUCCOID = KA0DM020.KUCCOID;
    KUSREC.KUMSTRID = KA0DM020.KUMSTRID;
    KUSREC.XNXCD = KA0DM020.XNXCD;
    KUSREC.XGPCD = KA0DM020.XGPCD;
    KUSREC.KUSTEXT1 = KA0DM020.KUSTEXT1;
    KUSREC.KUSTEXT2 = KA0DM020.KUSTEXT2;
    /* ***** get system date and time ******/
    XX0XS01();
    KUSREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUSREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KUSREC.ZZZCHGCT = 0;
    call "IO0310" ("A ", SQLCA, KUSREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE != 0)
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0D135 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VLABEL01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUSREC.KUCCOID;
      KUWREC.KUMSTRID = KUSREC.KUMSTRID;
      KUWREC.XNXCD = KUSREC.XNXCD;
      KUWREC.XGPCD = KUSREC.XGPCD;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    else /* return code okay*/
      /* ********** format and write audit report record ***********/
      set KUZREC empty; /* initialize audit rec*/
      KUZREC.KUZTYPE = "A"; /* assign type code value*/
      KUZREC.KUZBFCD = " "; /* assign "after" code*/
      KUZREC.XXXTBLNM = "VLABEL01"; /* move tbl name to audit rec*/
      KUZREC.XXXUSER = COMMAREA.CAUSERID;
                                   /* move user id to audit rec*/
      KUZREC.KUCCOID = KUSREC.KUCCOID; /* move co id to audit rec*/
      KUZREC.KUMSTRID = KUSREC.KUMSTRID; /* move co id to audit rec*/
      KUZREC.XNXCD = KUSREC.XNXCD;
                                   /* move co id to audit rec*/
      KUZREC.XGPCD = KUSREC.XGPCD;
                                   /* move co id to audit rec*/
      KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move date to audit rec*/
      KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
      KUZREC.KUZDATA = KUSREC.KUSGRP; /* move data to audit record*/
      if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
        KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
        KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
      else
        KUZREC.KUZSSEQ = 0;
        KUZREC.KUZLEN = 0;
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "KA0D   ";
        TA1REC.TA1LOCAT[1] = "KA0D135  ";
        TA1REC.TA1LOCAT[2] = "KIZTBL   ";
        TA1REC.TA1LOCAT[3] = "VLABEL01 ";
        TA1REC.TA1MAP = "KA0DM000";
        TA1REC.TA1DBASE = "DCUST.";
        TA1REC.TA1TBLVU = "VLABEL01";
        TA1TBLKE = "TABLE NOT FOUND";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes}; /* call i/o mod to add*/
      if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                                 /* ne -803)*/
        /* **********************  call error routine  *****************/
        TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
        TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
        TA1REC.TA1PGMNM = "KA0D135 "; /* move program name to error rec*/
        TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
        TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
        TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
        TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
        set KUWREC empty; /* initialize error work rec*/
        /* ************* move keys to error work record  ***************/
        KUWREC.KUCCOID = KUZREC.KUCCOID;
        KUWREC.KUMSTRID = KUZREC.KUMSTRID;
        KUWREC.XNXCD = KUZREC.XNXCD;
        KUWREC.XGPCD = KUZREC.XGPCD;
        /* *************************************************************/
        TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                       /* ;     move table key value*/
        KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* call db backout*/
        SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                       /* ;*/
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
        XSPF4();
        /* *************************************************************/
        /* ***** the following commented until retro-fitting of   ******/
        /* ***** the return from the error routine                ******/
        /* *************************************************************/
        /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                        /* ;     move appl global data*/
        /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
        /* XSEXIT                          ;     transfer to next appl*/
        /* ******************  end of error routine  *******************/
      end /* end of "if" statement*/
    end
  end
end // end KA0D135


// update customer-unit tbl
Function KA0D140()


   /* *************************************************************/
   /* *****     u p d a t e    c u s t o m e r - u n i t     ******/
   /* *****                     t a b l e                    ******/
   /* *************************************************************/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled creation of CUTAG records.*/


   /* *************************************************************/

   /* *************************************************************/
   /* *****  format customer-unit table record with info from *****/
   /* *****  previous screens                                 *****/
   /* *************************************************************/
  KUNREC.KUCCOID = KA0DM020.KUCCOID;
  KUNREC.KUMSTRID = KA0DM020.KUMSTRID;
  KUNREC.XNXCD = KA0DM020.XNXCD;
  KUNREC.XGPCD = KA0DM020.XGPCD;

  KUNREC.KUNCAFL = KA0DM020.KUNCAFL;
  KUNREC.KUNNOSFL = KA0DM020.KUNNOSFL;

  KUNREC.KUNABOFL = KA0DM020.KUNABOFL;
  KUNREC.KUNBOQTY = KA0DM020.KUNBOQTY;
  KUNREC.KUNMAPCT = KA0DM020.KUNMAPCT;
  KUNREC.XNACD = " ";
  KUNREC.XGACD[1] = KA0DM020.XGACD[1];
  KUNREC.XGACD[2] = KA0DM020.XGACD[2];
  KUNREC.XGACD[3] = KA0DM020.XGACD[3];
  KUNREC.XGACD[4] = KA0DM020.XGACD[4];
   /* ****************************************;*/
  KUNREC.KUNSPCD[1] = KA0DM020.KUNSPCD[1];
  KUNREC.KUNSPCD[2] = KA0DM020.KUNSPCD[2];
  KUNREC.KUNSPCD[3] = KA0DM020.KUNSPCD[3];
  KUNREC.KUNSPCD[4] = KA0DM020.KUNSPCD[4];
  KUNREC.KUNSPCD[5] = KA0DM020.KUNSPCD[5];
  KUNREC.KUNSPCD[6] = KA0DM020.KUNSPCD[6];
  KUNREC.KUNSPCD[7] = KA0DM020.KUNSPCD[7];
  KUNREC.KUNSPCD[8] = KA0DM020.KUNSPCD[8];
  KUNREC.XXXSTAT = "A";
   /* *********************************************/
  XX0XS01(); /* get system date and time*/
  KUNREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  KUNREC.ZZZCHGCT = 0;
   /* *********************************************/
  call "IO0280" ("A ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    /* **********************  call error routine  *****************/
    TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
    TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
    TA1REC.TA1PGMNM = "KA0D140 "; /* move program name to error rec*/
    TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
    TA1REC.TA1DBASE = "DCUST   ";
                                   /* move database name to error rec*/
    TA1REC.TA1TBLVU = "VCUST001";
                                   /* move table view to error record*/
    set KUWREC empty; /* initialize error work rec*/
    /* ************* move keys to error work record  ***************/
    KUWREC.KUCCOID = KUNREC.KUCCOID;
    KUWREC.KUMSTRID = KUNREC.KUMSTRID;
    KUWREC.XNXCD = KUNREC.XNXCD;
    KUWREC.XGPCD = KUNREC.XGPCD;
    /* *************************************************************/
    TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* call db backout*/
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
    XSPF4();
    /* *************************************************************/
    /* ***** the following commented until retro-fitting of   ******/
    /* ***** the return from the error routine                ******/
    /* *************************************************************/
    /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                  /* ;     move appl global data*/
    /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
    /* XSEXIT                          ;     transfer to next appl*/
    /* ******************  end of error routine  *******************/
  else /* return code okay*/
    /* ********** format and write audit report record ***********/
    set KUZREC empty; /* initialize audit rec*/
    KUZREC.KUZTYPE = "A"; /* assign type code value*/
    KUZREC.KUZBFCD = " "; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VCUST001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
    KUZREC.KUCCOID = KUNREC.KUCCOID; /* move co id to audit rec*/
    KUZREC.KUMSTRID = KUNREC.KUMSTRID; /* move co id to audit rec*/
    KUZREC.XNXCD = KUNREC.XNXCD;
                                   /* move co id to audit rec*/
    KUZREC.XGPCD = KUNREC.XGPCD;
                                   /* move co id to audit rec*/
    KUZREC.ZZZSDT = KUNREC.ZZZSDT; /* move set up date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KUNREC.KUNGRP; /* move data to audit record*/
    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "KA0D   ";
      TA1REC.TA1LOCAT[1] = "KA0D140  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VCUST001 ";
      TA1REC.TA1MAP = "KA0DM000";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                  /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0D140 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      KUWREC.KUMSTRID = KUZREC.KUMSTRID;
      KUWREC.XNXCD = KUZREC.XNXCD;
      KUWREC.XGPCD = KUZREC.XGPCD;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                  /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    else /* else(return code okay)*/
       /* next sentence*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/



end // end KA0D140


// update store table
Function KA0D150()


   /* *************************************************************/
   /* *****      u p d a t e    s t o r e    t a b l e       ******/
   /* *************************************************************/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled createion of CUTAG records.*/


   /* *************************************************************/


  if (KUMREC.XXXSTAT != "A")

    /* ***** note: date & time should be correct...xx0xs01*/
    /* *****       called when customer-unit inserted*/

    KUMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    KUMREC.XXXSTAT = "A";
    call "IO0340" ("U ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(97);
        set KA0DM020.XGPCD cursor;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        exit stack;
      else
        /* ***************  call error routine  *************/
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "KA0D    ";
        TA1REC.TA1LOCAT[1] = "KA0D150 ";
        TA1REC.TA1LOCAT[2] = "        ";
        TA1REC.TA1LOCAT[3] = "        ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1MAP = "N/A     ";
        TA1REC.TA1DBASE = "DCUST   "; /* ec*/
        TA1REC.TA1TBLVU = "VSTORE01";
        set KUWREC empty;
        /* ********* move keys to error work record  ***********/
        KA0DW01.KA0DWCID = KUMREC.KUCCOID;
        KA0DW01.KA0DWSID = KUMREC.KUMSTRID;
        KA0DW01.KA0DWDID = 0;
        KA0DW01.KA0DWGID = " ";
        /* *******************************************************/
        TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
                                   /* ;     move table key value*/
        KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* call db backout*/
        SQLCA.SQLCAREC = KUWREC.KUWSQLCA;

        call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
        XSPF4();
        /* ******************  end of error routine  *******************/
      end
    end
  end
end // end KA0D150


// update company table
Function KA0D160()


   /* *************************************************************/
   /* *****     u p d a t e    c o m p a n y   t a b l e     ******/
   /* *************************************************************/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled creation of CUTAG records.*/


   /* *************************************************************/


  if (KUCREC.XXXSTAT != "A"
   || KA0DW01.KA0DWUPT == "Y")
    KUCREC.XXXSTAT = "A";
    KA0DW01.KA0DWUPT = "N";

    /* *****  note: change date & time should be correct since*/
    /* ****         x0xxs01 was executed when cust-unit inserted*/

    KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)

      KA0D161(); /* add a/r customer record*/

      KA0D162(); /* add crchk customer record*/

    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(31);
        set KA0DM020.XGPCD cursor;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        exit stack;
      else
        /* ****************  call error routine  ****************/
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "KA0D    ";
        TA1REC.TA1LOCAT[1] = "KA0D160 ";
        TA1REC.TA1LOCAT[2] = "        ";
        TA1REC.TA1LOCAT[3] = "        ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1MAP = "N/A     ";
        TA1REC.TA1DBASE = "DCUST   ";
        TA1REC.TA1TBLVU = "VCMPNY01";
        KA0DW01.KA0DWCID = KUCREC.KUCCOID;
        KA0DW01.KA0DWSID = 0;
        KA0DW01.KA0DWDID = 0;
        KA0DW01.KA0DWGID = " ";
        TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
        KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* call db backout*/
        SQLCA.SQLCAREC = KUWREC.KUWSQLCA;

        call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
        XSPF4();
        /* **************  end of error routine  *****************/
      end /* end of "if" statement*/
    end
  end
end // end KA0D160


// create a/r cust record
Function KA0D161()
   /* *************************************************************/
   /* *****   c r e a t e   a / r    c u s t  r e c o r d    ******/
   /* *************************************************************/

  set ARCREC empty;

  ARCREC.KUCCOID = KUCREC.KUCCOID; /* company id*/

  call "IO4160" ("S ", SQLCA, ARCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100)
    /* next sentence - need to add a/r customer*/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KA0D    ";
      TA1REC.TA1LOCAT[1] = "KA0D161 ";
      TA1REC.TA1LOCAT[2] = "        ";
      TA1REC.TA1LOCAT[3] = "        ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "N/A     ";
      TA1REC.TA1DBASE = "DACRCV  ";
      TA1REC.TA1TBLVU = "VARCUS01";
      KA0DW01.KA0DWCID = ARCREC.KUCCOID;
      KA0DW01.KA0DWSID = 0;
      KA0DW01.KA0DWDID = 0;
      KA0DW01.KA0DWGID = " ";
      TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
      XSPF4();
      /* ****************  end of error routine  *****************/
    end
  end

  ARCREC.ARCCOLL = "N"; /* ar-coll-rec-fl*/
  ARCREC.ARCNCRRT = "000"; /* ar-nike-rtng-cd*/
  ARCREC.XXXSTAT = "A"; /* status of table row*/


   /* *****  note: change date & time should be correct since*/
   /* ****         x0xxs01 was executed when cust-unit inserted*/

  ARCREC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  ARCREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  ARCREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  ARCREC.ZZZCHGCT = 1; /* change count*/

  call "IO4160" ("A ", SQLCA, ARCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    /* **********************  call error routine  *****************/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KA0D    ";
    TA1REC.TA1LOCAT[1] = "KA0D161 ";
    TA1REC.TA1LOCAT[2] = "        ";
    TA1REC.TA1LOCAT[3] = "        ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "N/A     ";
    TA1REC.TA1DBASE = "DACRCV  ";
    TA1REC.TA1TBLVU = "VARCUS01";
    KA0DW01.KA0DWCID = ARCREC.KUCCOID;
    KA0DW01.KA0DWSID = 0;
    KA0DW01.KA0DWDID = 0;
    KA0DW01.KA0DWGID = " ";
    TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* call db backout*/
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                   /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
    XSPF4();
    /* ****************  end of error routine  *****************/
  end
end // end KA0D161


// create crchk cust record
Function KA0D162()
   /* *************************************************************/
   /* *****   c r e a t e   a / r    c u s t  r e c o r d    ******/
   /* *************************************************************/

  set VCRCHK01 empty;

  VCRCHK01.KUCCOID = KUCREC.KUCCOID; /* company id*/

  call "IO6010" ("S ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100)
    /* next sentence - need to add crchk customer*/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KA0D    ";
      TA1REC.TA1LOCAT[1] = "KA0D162 ";
      TA1REC.TA1LOCAT[2] = "        ";
      TA1REC.TA1LOCAT[3] = "        ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "N/A     ";
      TA1REC.TA1DBASE = "DACRCV  ";
      TA1REC.TA1TBLVU = "VCRCHK01";
      KA0DW01.KA0DWCID = VCRCHK01.KUCCOID;
      KA0DW01.KA0DWSID = 0;
      KA0DW01.KA0DWDID = 0;
      KA0DW01.KA0DWGID = " ";
      TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                  /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
      XSPF4();
      /* ****************  end of error routine  *****************/
    end
  end



   /* *****  note: change date & time should be correct since*/
   /* ****         x0xxs01 was executed when cust-unit inserted*/

  VCRCHK01.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  VCRCHK01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  VCRCHK01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  VCRCHK01.ZZZCHGCT = 0; /* change count*/

  call "IO6010" ("A ", SQLCA, VCRCHK01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    /* **********************  call error routine  *****************/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KA0D    ";
    TA1REC.TA1LOCAT[1] = "KA0D162 ";
    TA1REC.TA1LOCAT[2] = "        ";
    TA1REC.TA1LOCAT[3] = "        ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "N/A     ";
    TA1REC.TA1DBASE = "DACRCV  ";
    TA1REC.TA1TBLVU = "VCRCHK01";
    KA0DW01.KA0DWCID = VCRCHK01.KUCCOID;
    KA0DW01.KA0DWSID = 0;
    KA0DW01.KA0DWDID = 0;
    KA0DW01.KA0DWGID = " ";
    TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* call db backout*/
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA;
                                  /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* error routine*/
    XSPF4();
                                  /* ;*/
    /* ****************  end of error routine  *****************/
  end
end // end KA0D162


// close rep cursor
Function KA0D170()
   /* *******************************/
   /* * KA0D170 - CLOSE REP CURSOR**/
   /* *******************************/

  call "IO5110" ("C1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KA0D170";
    TA1REC.TA1LOC = "CLOSE CURSOR VCUREP01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUREP01";
    KA0DW01.KA0DWCID = KUCREC.KUCCOID;
    KA0DW01.KA0DWSID = KUGREC.KUMSTRID;
    KA0DW01.KA0DWDID = KUGREC.XNXCD;
    TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
end // end KA0D170


// exit add cust-unit application
Function KA0D999()


   /* *************************************************************/
   /* *****  e x i t    a d d    c u s t o m e r - u n i t   ******/
   /* *****               a p p l i c a t i o n              ******/
   /* *************************************************************/


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit all data base updates*/

  if (COMMAREA.CAFROMAP == "KG0C"
   || COMMAREA.CAFROMAP == "KG0D")
    if (COMMAREA.CAFROMAP == "KG0D")
      COMMAREA.CAFROMAP = "    "; /* so we dont get in here again*/
    end
    KA0DM050.KA0DMFST = KA0DW01.KA0DWSAV;
    KA0DM020.KUNMAPCT = KA0DW01.KA0DWPCT; /* minumum allocation %*/
    KA0DM020.KUNSPCD[1] = KA0DW01.KA0DWSPA[1]; /* sport activity*/
    KA0DM020.KUNSPCD[2] = KA0DW01.KA0DWSPA[2]; /* sport activity*/
    KA0DM020.KUNSPCD[3] = KA0DW01.KA0DWSPA[3]; /* sport activity*/
    KA0DM020.KUNSPCD[4] = KA0DW01.KA0DWSPA[4]; /* sport activity*/
    KA0DM020.KUNSPCD[5] = KA0DW01.KA0DWSPA[5]; /* sport activity*/
    KA0DM020.KUNSPCD[6] = KA0DW01.KA0DWSPA[6]; /* sport activity*/
    KA0DM020.KUNSPCD[7] = KA0DW01.KA0DWSPA[7]; /* sport activity*/
    KA0DM020.KUNSPCD[8] = KA0DW01.KA0DWSPA[8]; /* sport activity*/
    KA0DM020.XGACD[1] = KA0DW01.KA0DWGEN[1]; /* gender age codes*/
    KA0DM020.XGACD[2] = KA0DW01.KA0DWGEN[2]; /* gender age codes*/
    KA0DM020.XGACD[3] = KA0DW01.KA0DWGEN[3]; /* gender age codes*/
    KA0DM020.XGACD[4] = KA0DW01.KA0DWGEN[4]; /* gender age codes*/
    KA0DM020.KUNABOFL = KA0DW01.KA0DWBOC; /* bo code*/
    KA0DM020.KUNBOQTY = KA0DW01.KA0DWBOQ; /* bo code*/
    KA0DM020.KUNCAFL = KA0DW01.KA0DWCAC; /* order ack change flag*/
    KA0DM020.KUNNOSFL = KA0DW01.KA0DWSUB; /* subs allow flag*/
    KA0DM020.KUSTEXT1 = KA0DW01.KA0DWTX1; /* special label inst 1*/
    KA0DM020.KUSTEXT2 = KA0DW01.KA0DWTX2; /* special label inst 2*/
  end

  KA0DW01.KA0DWSAV = KA0DM050.KA0DMFST;
  KA0DW01.KA0DWPCT = KA0DM020.KUNMAPCT;
  KA0DW01.KA0DWSPA[1] = KA0DM020.KUNSPCD[1];
  KA0DW01.KA0DWSPA[2] = KA0DM020.KUNSPCD[2];
  KA0DW01.KA0DWSPA[3] = KA0DM020.KUNSPCD[3];
  KA0DW01.KA0DWSPA[4] = KA0DM020.KUNSPCD[4];
  KA0DW01.KA0DWSPA[5] = KA0DM020.KUNSPCD[5];
  KA0DW01.KA0DWSPA[6] = KA0DM020.KUNSPCD[6];
  KA0DW01.KA0DWSPA[7] = KA0DM020.KUNSPCD[7];
  KA0DW01.KA0DWSPA[8] = KA0DM020.KUNSPCD[8];
  KA0DW01.KA0DWGEN[1] = KA0DM020.XGACD[1];
  KA0DW01.KA0DWGEN[2] = KA0DM020.XGACD[2];
  KA0DW01.KA0DWGEN[3] = KA0DM020.XGACD[3];
  KA0DW01.KA0DWGEN[4] = KA0DM020.XGACD[4];
  KA0DW01.KA0DWBOC = KA0DM020.KUNABOFL;
  KA0DW01.KA0DWBOQ = KA0DM020.KUNBOQTY;
  KA0DW01.KA0DWCAC = KA0DM020.KUNCAFL;
  KA0DW01.KA0DWSUB = KA0DM020.KUNNOSFL;
  KA0DW01.KA0DWTX1 = KA0DM020.KUSTEXT1;
  KA0DW01.KA0DWTX2 = KA0DM020.KUSTEXT2;
  KA0DW01.KA0DWERR = 0;
  converseLib.validationFailed(0);
  COMMAREA.CAUSERA = KA0DW01.KA0DWKEY;
  if (KA0DM050.KA0DMFST == "01")
    KA0DS93(); /* check to see if VCUREP01 needs to be added*/
    KA0DS94(); /* check to see if VCULVL01 needs to be added*/
    COMMAREA.CATOAP = "KA0C";
  else
    if (KA0DM050.KA0DMFST == "02")
      KA0DS93(); /* check to see if VCUREP01 needs to be added*/
      KA0DS94(); /* check to see if VCULVL01 needs to be added*/
      COMMAREA.CATOAP = "KA0S";
    else
      if (KA0DM050.KA0DMFST == "03")
        KA0DS93(); /* check to see if VCUREP01 needs to be added*/
        KA0DS94(); /* check to see if VCULVL01 needs to be added*/
        KA0DW01.KA0DWFST = "Y";
        if (KA0DM020.XGPCD == "02")
          KA0DM020.XGPCD = "03";
          KA0DM020.KUNABOFL = "Y";
          KA0DM020.KUNBOQTY = 1;
        else
          KA0DM020.XGPCD = "02";
          KA0DM020.KUNABOFL = "Y";
          KA0DM020.KUNBOQTY = 3;
        end
        set KA0DM020.XGPCD cursor;
        set KA0DM060 initial;
        set KA0DM080 initial;
        set KA0DM090 initial;
        set KA0DW02 empty;
         /* MOVE 'KA0D' TO COMMAREA.CATOAP;*/
        exit stack;
      else
        if (KA0DM050.KA0DMFST == "04")
          KA0DS93(); /* check to see if VCUREP01 needs to be added*/
          KA0DS94(); /* check to see if VCULVL01 needs to be added*/
          COMMAREA.CATOAP = "KA0P";
        else
          KA0DS93(); /* check to see if VCUREP01 needs to be added*/
          KA0DS94(); /* check to see if VCULVL01 needs to be added*/
          COMMAREA.CATOAP = "KA0M";
        end
      end
    end
  end

  XSEXIT();





end // end KA0D999


Function KA0DS-INIT-RECS()
  /* ***********************************************************************/
  /* Initialize records used by KA0D*/
  /* ***********************************************************************/

  set KA0DW01 empty; /* initialize work record*/
  set ARCREC empty; /* initialize a/r company record*/
  set KUCREC empty; /* initialize company record*/
  set KUGREC empty; /* initialize rep record*/
  set KUJREC empty; /* initialize*/
  set KUMREC empty; /* initialize store record*/
  set KUNREC empty; /* initialize customer-unit record*/
  set KUPREC empty; /* initialize*/
  set KUQREC empty; /* initialize*/
  set KURREC empty; /* initialize*/
  set KUSREC empty; /* initialize*/
  set KUTREC empty; /* initialize*/
  set KUZREC empty; /* initialize*/
  set KU3REC empty; /* initialize*/
  set VCRCHK01 empty; /* initialize*/
  set SQLCA empty; /* initialize*/
  set TA1REC empty; /* initialize*/
  set TA4REC empty; /* initialize*/
  set KUWREC empty; /* initialize*/
  set XX0XW01 empty; /* initialize*/
  set KA0DW02 empty; /* initialize*/
  set KA0DW03 empty; /* initialize work record*/
  set KA0DW04 empty; /* initialize work record*/
end // end KA0DS-INIT-RECS


// edit fields on ka0dm020
Function KA0DS20()


   /* *************************************************************/
   /* ***** e d i t    f i e l d s    o n    k a 0 d m 0 2 0 ******/
   /* *************************************************************/


  KA0DM020.KA0DMMSG = " ";
  set KA0DM020.XGPCD cursor; /* initialize cursor position*/

  KA0DW01.KA0DWNDX = 2; /* initialize index to 2*/
  while (KA0DW01.KA0DWNDX >= 1) /* loop thru special labels*/
    KA0DS22(); /* edit special label*/
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX - 1;
                                 /* ;  decrement index by 1*/
  end /* end of "while" loop*/

  KA0DS25(); /* edit substitutes allowed flag*/
  KA0DS26(); /* edit change acknowledgment flag*/
  KA0DS2A(); /* edit min backorder quantity*/
  KA0DS2B(); /* edit item backorder code*/

  KA0DS2M(); /* left justify gender age codes*/
  KA0DW01.KA0DWNDX = 4; /* initialize index to 4*/
  while (KA0DW01.KA0DWNDX >= 1) /* loop thru gender age codes*/
    KA0DS2D(); /* edit gender age*/
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX - 1;
                                 /* ;  decrement index by 1*/
  end /* end of "while" loop*/

  KA0DS2N(); /* left justify sport activity codes*/
  KA0DW01.KA0DWNDX = 8; /* initialize index to 8*/
  while (KA0DW01.KA0DWNDX >= 1) /* loop thru sport activity codes*/
    KA0DS2E(); /* edit sport activity*/
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX - 1;
                                 /* ;  decriment index by 1*/
  end /* end of "while" loop*/
                                      /* and call class*/
  KA0DS2Q(); /* edit min alloc percent*/
  KA0DS2J(); /* edit gpc*/
  KA0DS2K(); /* edit dept*/
  KA0DS2L(); /* check if customer already added*/



end // end KA0DS20


// edit special label
Function KA0DS22()


   /* *************************************************************/
   /* *****      e d i t    s p e c i a l    l a b e l       ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****  a special labels is optional, free form         ******/
   /* *****  informantion. therefore no editing is required. ******/
   /* *************************************************************/


end // end KA0DS22


// edit substitutes allowed flag
Function KA0DS25()


   /* *************************************************************/
   /* ***** e d i t    s u b s t i t u t e s   a l l o w e d ******/
   /* *************************************************************/


  set KA0DM020.KUNNOSFL normal; /* set attributes to normal*/
  if (KA0DM020.KUNNOSFL != "Y" /* if no subs allow flag not 'y'*/
   && KA0DM020.KUNNOSFL != "N")
                                   /* and no subs allow flag not 'n'*/
    if (KA0DM020.KUNNOSFL == " ")
                                   /* if no subs allow flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(no subs allow not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0DM020.KUNNOSFL cursor, bold; /* highlight error field*/
  else /* else(no subs allow flag ok)*/
    /* next sentence                ;        okay*/
  end /* end of "if" statement*/






end // end KA0DS25


// edit change acknowledgment fl
Function KA0DS26()


   /* *************************************************************/
   /* *****               e d i t    c h a n g e             ******/
   /* *****       a c k n o w l e d g m e n t   f l a g      ******/
   /* *************************************************************/


  set KA0DM020.KUNCAFL normal; /* set attributes to normal*/
  if (KA0DM020.KUNCAFL != "Y" /* if change ack flag not 'y'*/
   && KA0DM020.KUNCAFL != "N") /* and change ack flag not 'n'*/
    if (KA0DM020.KUNCAFL == " ") /* if change ack flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else
                                   /* else(change ack flag not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0DM020.KUNCAFL cursor, bold; /* highlight error field*/
  else /* else(change ack flag ok)*/
    /* next sentence                ;        okay*/
  end /* end of "if" statement*/






end // end KA0DS26


// edit min backorder quantity
Function KA0DS2A()


   /* *************************************************************/
   /* *****      e d i t    m i n    b a c k o r d e r       ******/
   /* *****                q u a n t i t y                   ******/
   /* *************************************************************/


  set KA0DM020.KUNBOQTY initialAttributes; /* reset field attributes*/
  if (KA0DM020.KUNABOFL == "N") /* if item backorder code eq 'n'*/
    KA0DM020.KUNBOQTY = 0; /* set backorder quantity to 0*/
  else /* else(item backorder code not eq 'n')*/
    if (KA0DM020.KUNABOFL == "Y") /* if item backorder code eq 'y'*/
      if (KA0DM020.KUNBOQTY == 0) /* if backorder quantity eq 0*/
        converseLib.validationFailed(5); /* error "zero invalid"*/
        set KA0DM020.KUNBOQTY cursor, bold;
                                 /* ;      highlight error field*/
      else /* else(backorder quantity not 0)*/
        /* next sentence            ;      okay*/
      end /* end of "if" statement*/
    else /* else(item backorder cd not 'y' or 'n')*/
      /* next sentence              ;    okay for this statement grp,*/
                                 /* ;    (error will be found later)*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0DS2A


// edit item backorder code
Function KA0DS2B()


   /* *************************************************************/
   /* ***  e d i t    i t e m    b a c k o r d e r    c o d e  ****/
   /* *************************************************************/


  set KA0DM020.KUNABOFL normal; /* set attribute to normal*/
  if (KA0DM020.KUNABOFL != "Y" /* if no item bo cd not 'y'*/
   && KA0DM020.KUNABOFL != "N") /* and item bo cd not 'n'*/
    if (KA0DM020.KUNABOFL == " ") /* if item bo cd field is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(item bo cd not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KA0DM020.KUNABOFL cursor, bold; /* highlight error field*/
  else /* else(item bo cd ok)*/
    /* next sentence                ;        field ok*/
  end /* end of "if" statement*/






end // end KA0DS2B


// edit gender age
Function KA0DS2D()


   /* *************************************************************/
   /* *****          e d i t    g e n d e r    a g e         ******/
   /* *************************************************************/


  set KA0DM020.XGACD[KA0DWNDX] normal;
                                 /* ; set field attribute normal*/
  if (KA0DM020.XGACD[KA0DWNDX] != " ")
                                 /* ; if gender age not blank*/
    if (KA0DM020.XGACD[KA0DWNDX] in XGATBL.XGACD)
                                 /* ;   if gender age in table*/
      /* ***************  check status code of entry  ****************/
      if (XGATBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM020.XGACD[KA0DWNDX] cursor, bold;
                                 /* ;       highlight field in error*/
      else /* else(status is active)*/
        /* next sentence            ;       okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(gender age not found)*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0DM020.XGACD[KA0DWNDX] cursor, bold;
                                 /* ;     highlight field in error*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0DS2D


// edit sport activity
Function KA0DS2E()


   /* *************************************************************/
   /* *****     e d i t    s p o r t    a c t i v i t y      ******/
   /* *************************************************************/


  set KA0DM020.KUNSPCD[KA0DWNDX] normal;
                                 /* ; set field attribute normal*/
  if (KA0DM020.KUNSPCD[KA0DWNDX] != " ")
                                 /* ; if sport activity not blank*/
    if (KA0DM020.KUNSPCD[KA0DWNDX] in XSPTBL.XSPCD)
                                 /* ;   if sport activity code in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM020.KUNSPCD[KA0DWNDX] cursor, bold;
                                 /* ;       highlight field in error*/
      else /* else(status is active)*/
        /* next sentence            ;       okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(sport activity not found)*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0DM020.KUNSPCD[KA0DWNDX] cursor, bold;
                                 /* ;     highlight field in error*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0DS2E


// edit general product class
Function KA0DS2J()


   /* *************************************************************/
   /* *****    e d i t    g e n e r a l    p r o d u c t     ******/
   /* *****                   c l a s s                      ******/
   /* *************************************************************/


  set KA0DM020.XGPCD normal; /* set field attribute normal*/
  KA0DM020.XGPDESC = " "; /* initialize decode to blanks*/
  if (KA0DM020.XGPCD != " ") /* if general product class not blank*/
    if (KA0DM020.XGPCD in XGPTBL.XGPCD)
      KA0DM020.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
                                 /* ;   search table for gpc*/
    if (sysVar.arrayIndex == 0) /* if  g p c  not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0DM020.XGPCD cursor, bold;
                                 /* ;     highlight field in error*/
    else /* else(g p c  found)*/
      /* ***************  check status code of entry  ****************/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM020.XGPCD cursor, bold;
                                 /* ;       highlight field in error*/
      else /* else(status is active)*/
        if (KA0DM020.XGPCD != KUMREC.XGPCD[1]
         && KA0DM020.XGPCD != KUMREC.XGPCD[2]
         && KA0DM020.XGPCD != KUMREC.XGPCD[3])
                                 /* ;       if cust-unit gpc has no store*/
                                 /* ;         level default warehouse*/
          if (converseVar.validationMsgNum == 0) /* if no previous errors*/
            converseLib.validationFailed(73); /* warning "no default warehouse"*/
          else /* else(previous errors)*/
            /* next sentence        ;           okay*/
          end /* end of "if" statement*/
        else /* else(warehouse exists)*/
          /* next sentence          ;         okay*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
  else /* else(gpc is blank)*/
    converseLib.validationFailed(5); /* error "required field missing"*/
    set KA0DM020.XGPCD cursor, bold; /* highlight error*/
  end /* end of "if" statement*/





end // end KA0DS2J


// edit department
Function KA0DS2K()

   /* removed the 00 to dept 04/08/91 tw*/
   /* need to also check that it is on the kujrec for the company*/
   /* before anything can be added to it.*/

   /* ***********************************************************/
                 /* e d i t     d e p a r t m e n t*/
                /* the validation code - check to*/
       /* see that this is a valid-for-this-company-dept*/
   /* ***********************************************************/

  set KUJREC empty;
  KUJREC.KUCCOID = KUCREC.KUCCOID;
  KUJREC.XNXCD = KA0DM020.XNXCD;

  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* select unique dept*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KUJREC.XXXSTAT == "A")
      KA0DM020.XNXDESC = " "; /* initialize decode to blanks*/
      if (KA0DM020.XNXCD in XNXTBL.XNXCD)
        KA0DM020.XNXDESC = XNXTBL.XNXABRV[sysVar.arrayIndex];
      end
                                 /* ;   srch table for cust-unit id*/
      if (sysVar.arrayIndex == 0) /* if cust-unit id not found*/
        converseLib.validationFailed(17); /* error "invalid code"*/
        set KA0DM020.XNXCD cursor, bold;
      end /* ;   srch table for cust-unit id*/
      /* ***************  check status code of entry  ****************/
      if (XNXTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(71); /* error "invalid code*/
        set KA0DM020.XNXCD cursor, bold;
                                 /* ;       highlight field in error*/
      else /* else(status is active)*/
        KA0DW01.KA0DWDID = KA0DM020.XNXCD; /* set working storage*/
        set KA0DM020.XNXCD normal; /* set field attribute normal*/
      end /* end of "if" statement*/
    else
      converseLib.validationFailed(71); /* error "invalid code"*/
      set KA0DM020.XNXCD cursor, bold;
    end
                                 /* ;     highlight field in error*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* cust dept not found*/
      converseLib.validationFailed(17); /* error "invalid code*/
      set KA0DM020.XNXCD cursor, bold;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KA0DS2K";
      TA1REC.TA1LOC = "SELECT SCAN VDEPT001";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VDEPT001";
      KA0DW01.KA0DWCID = KUCREC.KUCCOID;
       /* MOVE 0 TO KA0DW01.KA0DWKD;*/
      TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end


   /* ***********************************************************/
   /* remove this code if any dept id other than '00' is allowed*/
   /* ***********************************************************/
   /* F KA0DM020.XNXCD NE 0          ; if dept is not '00'*/
   /* MOVE 130 TO EZEMNO            ;   error "dept must be '00'*/
   /* SET KA0DM020.XNXCD CURSOR,BRIGHT     ; highlight error*/
   /* LSE                            ; else(dept is '00')*/
   /* ;next sentence                ;   okay*/
   /* ND                             ; end of "if" statement*/
   /* ZERTN                          ; skip rest of code*/
   /* ***********************************************************/
   /* ************* end of temporary code for '00' dept *********/
   /* ***********************************************************/

end // end KA0DS2K


// check if customer already ex
Function KA0DS2L()


   /* *************************************************************/
   /* ***** this is where a dbii i/o module is called        ******/
   /* ***** to determine if the cust-unit exists, the cust-  ******/
   /* ***** unit row is read in the vcust001 table, otherwise******/
   /* ***** control is returned to the menu along with an    ******/
   /* ***** error message.                                   ******/
   /* *************************************************************/


  KUNREC.KUCCOID = KA0DM020.KUCCOID;
  KUNREC.KUMSTRID = KA0DM020.KUMSTRID;
  KUNREC.XNXCD = KA0DM020.XNXCD;
  KUNREC.XGPCD = KA0DM020.XGPCD;
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;  call i/o mod to select co.*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      /* next sentence              ;      okay*/
    else /* else(error other than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KA0D013 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KA0DM020.KUCCOID;
      KUWREC.KUMSTRID = KA0DM020.KUMSTRID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  else
    converseLib.validationFailed(69); /* ERROR "cust already exists"*/
    set KA0DM020.XNXCD cursor, bold; /* highlight error*/
    set KA0DM020.XGPCD bold; /* highlight error*/
  end /* end of "if" statement*/





end // end KA0DS2L


// left justify gender age cd's
Function KA0DS2M()


   /* *************************************************************/
   /* *****       l e f t    j u s t i f y    c o d e s      ******/
   /* *************************************************************/


   /* ***************** left justify gender ages ******************/
  if (KA0DM020.XGACD[3] == " ")
    KA0DM020.XGACD[3] = KA0DM020.XGACD[4];
    KA0DM020.XGACD[4] = " ";
  end
  if (KA0DM020.XGACD[2] == " ")
    KA0DM020.XGACD[2] = KA0DM020.XGACD[3];
    KA0DM020.XGACD[3] = KA0DM020.XGACD[4];
    KA0DM020.XGACD[4] = " ";
  end
  if (KA0DM020.XGACD[1] == " ")
    KA0DM020.XGACD[1] = KA0DM020.XGACD[2];
    KA0DM020.XGACD[2] = KA0DM020.XGACD[3];
    KA0DM020.XGACD[3] = KA0DM020.XGACD[4];
    KA0DM020.XGACD[4] = " ";
  end





end // end KA0DS2M


// left justify sport activity cd
Function KA0DS2N()


   /* *************************************************************/
   /* *****     l e f t    j u s t i f y    c o d e s        ******/
   /* *************************************************************/


   /* ******************* left justify sport activities ***********/
  if (KA0DM020.KUNSPCD[7] == " ")
    KA0DM020.KUNSPCD[7] = KA0DM020.KUNSPCD[8];
    KA0DM020.KUNSPCD[8] = " ";
  end
  if (KA0DM020.KUNSPCD[6] == " ")
    KA0DM020.KUNSPCD[6] = KA0DM020.KUNSPCD[7];
    KA0DM020.KUNSPCD[7] = KA0DM020.KUNSPCD[8];
    KA0DM020.KUNSPCD[8] = " ";
  end
  if (KA0DM020.KUNSPCD[5] == " ")
    KA0DM020.KUNSPCD[5] = KA0DM020.KUNSPCD[6];
    KA0DM020.KUNSPCD[6] = KA0DM020.KUNSPCD[7];
    KA0DM020.KUNSPCD[7] = KA0DM020.KUNSPCD[8];
    KA0DM020.KUNSPCD[8] = " ";
  end
  if (KA0DM020.KUNSPCD[4] == " ")
    KA0DM020.KUNSPCD[4] = KA0DM020.KUNSPCD[5];
    KA0DM020.KUNSPCD[5] = KA0DM020.KUNSPCD[6];
    KA0DM020.KUNSPCD[6] = KA0DM020.KUNSPCD[7];
    KA0DM020.KUNSPCD[7] = KA0DM020.KUNSPCD[8];
    KA0DM020.KUNSPCD[8] = " ";
  end
  if (KA0DM020.KUNSPCD[3] == " ")
    KA0DM020.KUNSPCD[3] = KA0DM020.KUNSPCD[4];
    KA0DM020.KUNSPCD[4] = KA0DM020.KUNSPCD[5];
    KA0DM020.KUNSPCD[5] = KA0DM020.KUNSPCD[6];
    KA0DM020.KUNSPCD[6] = KA0DM020.KUNSPCD[7];
    KA0DM020.KUNSPCD[7] = KA0DM020.KUNSPCD[8];
    KA0DM020.KUNSPCD[8] = " ";
  end
  if (KA0DM020.KUNSPCD[2] == " ")
    KA0DM020.KUNSPCD[2] = KA0DM020.KUNSPCD[3];
    KA0DM020.KUNSPCD[3] = KA0DM020.KUNSPCD[4];
    KA0DM020.KUNSPCD[4] = KA0DM020.KUNSPCD[5];
    KA0DM020.KUNSPCD[5] = KA0DM020.KUNSPCD[6];
    KA0DM020.KUNSPCD[6] = KA0DM020.KUNSPCD[7];
    KA0DM020.KUNSPCD[7] = KA0DM020.KUNSPCD[8];
    KA0DM020.KUNSPCD[8] = " ";
  end
  if (KA0DM020.KUNSPCD[1] == " ")
    KA0DM020.KUNSPCD[1] = KA0DM020.KUNSPCD[2];
    KA0DM020.KUNSPCD[2] = KA0DM020.KUNSPCD[3];
    KA0DM020.KUNSPCD[3] = KA0DM020.KUNSPCD[4];
    KA0DM020.KUNSPCD[4] = KA0DM020.KUNSPCD[5];
    KA0DM020.KUNSPCD[5] = KA0DM020.KUNSPCD[6];
    KA0DM020.KUNSPCD[6] = KA0DM020.KUNSPCD[7];
    KA0DM020.KUNSPCD[7] = KA0DM020.KUNSPCD[8];
    KA0DM020.KUNSPCD[8] = " ";
  end





end // end KA0DS2N


// check pf-keys for ka0d
Function KA0DS2P()


   /* *************************************************************/
   /* *****            c h e c k    p f - k e y s            ******/
   /* *************************************************************/


  if (converseVar.eventKey is pf3)
    KA0DW01.KA0DWOPF = "N";
    if (KA0DW01.KA0DWCFL == "Y")
      KA0DW01.KA0DWOPF = "Y";
      exit stack;
    else
      converseLib.validationFailed(4);
      KA0DW01.KA0DWCFL = "Y";
      exit stack;
    end
  else
    KA0DW01.KA0DWCFL = "N";
  end
  if (converseVar.eventKey is pf4)
    if (KA0DW01.KA0DW4FL == "Y")
      COMMAREA.CAUSERA = KA0DW01.KA0DWGRP;
      XSPF4();
      converseLib.validationFailed(41);
      exit stack;
    else
      converseLib.validationFailed(4);
      KA0DW01.KA0DW4FL = "Y";
      exit stack;
    end
  else
    KA0DW01.KA0DW4FL = "N";
  end
  if (converseVar.eventKey is pf5)
    if (KA0DW01.KA0DW5FL == "Y")
      COMMAREA.CAUSERA = KA0DW01.KA0DWGRP;
      COMMAREA.CATOAP = "KU0M";
      XSEXIT();
      converseLib.validationFailed(41);
      exit stack;
    else
      converseLib.validationFailed(4);
      KA0DW01.KA0DW5FL = "Y";
      exit stack;
    end
  else
    KA0DW01.KA0DW5FL = "N";
  end
  if (converseVar.eventKey is enter)
    return;
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
  end
  if (converseVar.eventKey is pf2)
    return;
  end
  if (converseVar.eventKey is pf6)
    return;
  end
  if (converseVar.eventKey is pf12)
    return;
  end
  if (converseVar.eventKey is pa2)
    exit stack;
  end
  converseLib.validationFailed(3);
  exit stack;





end // end KA0DS2P


// edit min alloc percent
Function KA0DS2Q()

   /* *************************************************************/
   /* *****     e d i t    m i n   a l l o c   p c t         ******/
   /* *************************************************************/

  set KA0DM020.KUNMAPCT initialAttributes; /* set field attribute normal*/
  if (KA0DM020.KUNMAPCT != 0)
    if (KA0DM020.KUNMAPCT > 100)
      converseLib.validationFailed(017);
      set KA0DM020.KUNMAPCT cursor, bold;
    end
  end


end // end KA0DS2Q


// edit fields on ka0dm060
Function KA0DS60()


   /* *************************************************************/
   /* *****  this is the edit ka0dm060 statement group       ******/
   /* *************************************************************/


  set KA0DM060.XOTCD cursor; /* initialize cursor position*/

   /* *************************************************************/

  KA0DW01.KA0DWNDX = 3; /* initialize index to 3*/
  while (KA0DW01.KA0DWNDX >= 1) /* loop thru order type screen*/
    /* ***** if all fields blank *****;*/
    if (KA0DM060.KA0DMEMT[KA0DWNDX] == 0
     && KA0DM060.KA0DMEYR[KA0DWNDX] == 0
     && KA0DM060.KA0DMEDY[KA0DWNDX] == 0
     && KA0DM060.XPTCD[KA0DWNDX] == " "
     && KA0DM060.XCPCD[KA0DWNDX] == " "
     && KA0DM060.XAACD[KA0DWNDX] == " "
     && KA0DM060.KUTAPBK[KA0DWNDX] == 0
     && KA0DM060.KUTAPOF[KA0DWNDX] == 0
     && KA0DM060.KUTAANET[KA0DWNDX] == " "
     && KA0DM060.KUTAAFCG[KA0DWNDX] == 0
     && KA0DM060.KUTAAFCN[KA0DWNDX] == " "
     && KA0DM060.XTDCD[KA0DWNDX] == " "
     && KA0DM060.KUTTDPBK[KA0DWNDX] == 0
     && KA0DM060.KUTTDPOF[KA0DWNDX] == 0
     && KA0DM060.KUTTDNET[KA0DWNDX] == " "
     && KA0DM060.KUTTDSPN[KA0DWNDX] == " "
     && KA0DM060.KUTTDDSN[KA0DWNDX] == " "
     && KA0DM060.XDACD[KA0DWNDX] == " "
     && KA0DM060.KUTDABK[KA0DWNDX] == 0
     && KA0DM060.KUTDAOF[KA0DWNDX] == 0
     && KA0DM060.KUTDANET[KA0DWNDX] == " "
     && KA0DM060.KUTDAHCN[KA0DWNDX] == " ")
      /* next sentence              ;    all fields blank is okay*/
    else
                                   /* else(at least one field was entered)*/
      KA0DS6C(); /* reset attributes to defined*/
      KA0DS64(); /* edit defective allowance code*/
      KA0DS61(); /* edit trade discount fields*/
      KA0DS62(); /* edit ad allowance discount fields*/
      KA0DS63(); /* edit co-op code*/
      KA0DS66(); /* edit terms code*/
      KA0DS65(); /* make sure at least on code added*/
      KA0DS68(); /* edit expiration dates*/
      KA0DS67(); /* edit effective dates*/
    end /* end of "if" statement*/
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX - 1;
                                 /* ;  decrement index by 1*/
  end /* end of "while" loop*/
  KA0DS69(); /* edit order type*/

end // end KA0DS60


// edit trade discount fields
Function KA0DS61()


   /* -------- edit indicator flags*/


  set KA0DM060.KUTTDDSN[KA0DWNDX] normal;
  if (KA0DM060.KUTTDDSN[KA0DWNDX] != " ")
    if (KA0DM060.KUTTDDSN[KA0DWNDX] == "Y"
     || KA0DM060.KUTTDDSN[KA0DWNDX] == "N")
      set KA0DM060.KUTTDDSN[KA0DWNDX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0DM060.KUTTDDSN[KA0DWNDX] cursor, modified, bold;
    end
  else
    KA0DM060.KUTTDDSN[KA0DWNDX] = "N";
    set KA0DM060.KUTTDDSN[KA0DWNDX] initialAttributes;
  end

  set KA0DM060.KUTTDSPN[KA0DWNDX] normal;
  if (KA0DM060.KUTTDSPN[KA0DWNDX] != " ")
    if (KA0DM060.KUTTDSPN[KA0DWNDX] == "Y"
     || KA0DM060.KUTTDSPN[KA0DWNDX] == "N")
      set KA0DM060.KUTTDSPN[KA0DWNDX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0DM060.KUTTDSPN[KA0DWNDX] cursor, modified, bold;
    end
  else
    KA0DM060.KUTTDSPN[KA0DWNDX] = "N";
    set KA0DM060.KUTTDSPN[KA0DWNDX] initialAttributes;
  end

  set KA0DM060.KUTTDNET[KA0DWNDX] normal;
  if (KA0DM060.KUTTDNET[KA0DWNDX] != " ")
    if (KA0DM060.KUTTDNET[KA0DWNDX] == "Y"
     || KA0DM060.KUTTDNET[KA0DWNDX] == "N")
      set KA0DM060.KUTTDNET[KA0DWNDX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0DM060.KUTTDNET[KA0DWNDX] cursor, modified, bold;
    end
  else
    KA0DM060.KUTTDNET[KA0DWNDX] = "N";
    set KA0DM060.KUTTDNET[KA0DWNDX] initialAttributes;
  end



   /* *************************************************************/
   /* *****     e d i t    t r a d e    d i s c o u n t      ******/
   /* *************************************************************/


  if (KA0DM060.XTDCD[KA0DWNDX] != " ") /* if trade dscnt cd not blank*/
    if (KA0DM060.XTDCD[KA0DWNDX] in XTDTBL.XTDCD)
                                 /* ;      if trace dscnt cd in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XTDTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM060.XTDCD[KA0DWNDX] cursor, bold;
                                 /* ;          highlight error*/
      else /* else(status is active)*/
        /* ********** trade discount code ok, check off face & bank ****/
        KA0DWADD = KA0DM060.KUTTDPOF[KA0DWNDX] + KA0DM060.KUTTDPBK[KA0DWNDX];
        if (KA0DW01.KA0DWADD != XTDTBL.XTDPCT[sysVar.arrayIndex])
                                 /* ;         if discounts dont add up*/
          converseLib.validationFailed(68); /* error "discounts dont add up"*/
          set KA0DM060.XTDCD[KA0DWNDX] cursor, bold;
          set KA0DM060.KUTTDPOF[KA0DWNDX] bold;
          set KA0DM060.KUTTDPBK[KA0DWNDX] bold;
                                 /* ;           highlight error fields*/
        else /* else(discounts add up)*/
          /* next sentence          ;           okay*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    else /* else(not in tbl)*/
      converseLib.validationFailed(17); /* error"invalide code"*/
      set KA0DM060.XTDCD[KA0DWNDX] cursor, bold;
                                 /* ;        highlight error*/
    end /* end of "if" statement*/
  else /* else(trade dscnt allow cd blank)*/
    if (KA0DM060.KUTTDPOF[KA0DWNDX] != 0
     || KA0DM060.KUTTDPBK[KA0DWNDX] != 0)
                                 /* ;      if trade dscnt fce not blk*/
      converseLib.validationFailed(5);
                                   /* error "required field missing"*/
      set KA0DM060.XTDCD[KA0DWNDX] cursor, bold;
                                 /* ;        highlight error*/
    else
                                   /* else(trade dscnt off face blank)*/
      /* next sentence              ;        blank is okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/

end // end KA0DS61


// edit ad allowance dscnt fields
Function KA0DS62()

   /* ----------- edit indicators ------------------------*/


  set KA0DM060.KUTAAFCN[KA0DWNDX] normal;
  if (KA0DM060.KUTAAFCN[KA0DWNDX] != " ")
    if (KA0DM060.KUTAAFCN[KA0DWNDX] == "Y"
     || KA0DM060.KUTAAFCN[KA0DWNDX] == "N")
      set KA0DM060.KUTAAFCN[KA0DWNDX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0DM060.KUTAAFCN[KA0DWNDX] cursor, modified, bold;
    end
  else
    KA0DM060.KUTAAFCN[KA0DWNDX] = "N";
    set KA0DM060.KUTAAFCN[KA0DWNDX] initialAttributes;
  end


  if (KA0DM060.KUTAAFCG[KA0DWNDX] > 0)
    set KA0DM060.KUTAAFCG[KA0DWNDX] initialAttributes;
  else
    /* next sentence*/
  end


  set KA0DM060.KUTAANET[KA0DWNDX] normal;
  if (KA0DM060.KUTAANET[KA0DWNDX] != " ")
    if (KA0DM060.KUTAANET[KA0DWNDX] == "Y"
     || KA0DM060.KUTAANET[KA0DWNDX] == "N")
      set KA0DM060.KUTAANET[KA0DWNDX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0DM060.KUTAANET[KA0DWNDX] cursor, modified, bold;
    end
  else
    KA0DM060.KUTAANET[KA0DWNDX] = "N";
    set KA0DM060.KUTAANET[KA0DWNDX] initialAttributes;
  end


   /* *************************************************************/
   /* ***** e d i t    a d    a l l o w a n c e    d s c n t ******/
   /* *************************************************************/


  if (KA0DM060.XAACD[KA0DWNDX] != " ") /* if trade dscnt cd not blank*/
    if (KA0DM060.XAACD[KA0DWNDX] in XAATBL.XAACD)
                                 /* ;      if trace dscnt cd in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XAATBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM060.XAACD[KA0DWNDX] cursor, bold;
                                 /* ;          highlight error*/
      else /* else(status is active)*/
        /* ********** trade discount code ok, check off face & bank ****/
        KA0DWADD = KA0DM060.KUTAPOF[KA0DWNDX] + KA0DM060.KUTAPBK[KA0DWNDX];
        if (KA0DW01.KA0DWADD != XAATBL.XAAPCT[sysVar.arrayIndex])
                                 /* ;         if discounts dont add up*/
          converseLib.validationFailed(68); /* error "discounts dont add up"*/
          set KA0DM060.XAACD[KA0DWNDX] cursor, bold;
          set KA0DM060.KUTAPOF[KA0DWNDX] bold;
          set KA0DM060.KUTAPBK[KA0DWNDX] bold;
                                 /* ;           highlight error fields*/
        else /* else(discounts add up)*/
          /* next sentence          ;           okay*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    else /* else(not in tbl)*/
      converseLib.validationFailed(17); /* error"invalide code"*/
      set KA0DM060.XAACD[KA0DWNDX] cursor, bold;
                                 /* ;        highlight error*/
    end /* end of "if" statement*/
  else /* else(trade dscnt allow cd blank)*/
    if (KA0DM060.KUTAPOF[KA0DWNDX] != 0
     || KA0DM060.KUTAPBK[KA0DWNDX] != 0)
                                 /* ;      if trade dscnt fce not blk*/
      converseLib.validationFailed(5);
                                   /* error "required field missing"*/
      set KA0DM060.XAACD[KA0DWNDX] cursor, bold;
                                 /* ;        highlight error*/
    else
                                   /* else(trade dscnt off face blank)*/
      /* next sentence              ;        blank is okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/


end // end KA0DS62


// edit co-op code
Function KA0DS63()


   /* *************************************************************/
   /* *****         e d i t    c o - o p    c o d e          ******/
   /* *************************************************************/





  if (KA0DM060.XCPCD[KA0DWNDX] != " ") /* if co-op cd not blank*/
    if (KA0DM060.XCPCD[KA0DWNDX] in XCPTBL.XCPCD)
                                 /* ;      if co-op cd in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XCPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM060.XCPCD[KA0DWNDX] cursor, bold;
                                 /* ;          highlight error*/
      else /* else(status is active)*/
        /* next sentence            ;          okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(not in tbl)*/
      converseLib.validationFailed(17); /* error"invalide code"*/
      set KA0DM060.XCPCD[KA0DWNDX] cursor, bold;
                                 /* ;        highlight error*/
    end /* end of "if" statement*/
  else /* else(co-op cd blank)*/
    /* next sentence                ;      blank is okay*/
  end /* end of "if" statement*/





end // end KA0DS63


// edit defective allowance code
Function KA0DS64()

   /* ----------- edit indicators -----------------*/


  set KA0DM060.KUTDAHCN[KA0DWNDX] normal;
  if (KA0DM060.KUTDAHCN[KA0DWNDX] != " ")
    if (KA0DM060.KUTDAHCN[KA0DWNDX] == "Y"
     || KA0DM060.KUTDAHCN[KA0DWNDX] == "N")
      set KA0DM060.KUTDAHCN[KA0DWNDX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0DM060.KUTDAHCN[KA0DWNDX] cursor, modified, bold;
    end
  else
    KA0DM060.KUTDAHCN[KA0DWNDX] = "N";
    set KA0DM060.KUTDAHCN[KA0DWNDX] initialAttributes;
  end


  set KA0DM060.KUTDANET[KA0DWNDX] normal;
  if (KA0DM060.KUTDANET[KA0DWNDX] != " ")
    if (KA0DM060.KUTDANET[KA0DWNDX] == "Y"
     || KA0DM060.KUTDANET[KA0DWNDX] == "N")
      set KA0DM060.KUTDANET[KA0DWNDX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KA0DM060.KUTDANET[KA0DWNDX] cursor, modified, bold;
    end
  else
    KA0DM060.KUTDANET[KA0DWNDX] = "N";
    set KA0DM060.KUTDANET[KA0DWNDX] initialAttributes;
  end




   /* *************************************************************/
   /* **** e d i t    d e f e c t i v e    a l l o w a n c e  *****/
   /* ****                   c o d e                          *****/
   /* *************************************************************/


  if (KA0DM060.XDACD[KA0DWNDX] != " ") /* if defective allow not blank*/
    if (KA0DM060.XDACD[KA0DWNDX] in XDATBL.XDACD)
                                 /* ;      if defect allow cd in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XDATBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM060.XDACD[KA0DWNDX] cursor, bold;
                                 /* ;          highlight error*/
      else /* else(status is active)*/
        /* ***************defect allow code ok,ck % off face and bank*/
        KA0DWADD = KA0DM060.KUTDAOF[KA0DWNDX] + KA0DM060.KUTDABK[KA0DWNDX];
        if (KA0DW01.KA0DWADD != XDATBL.XDAPCT[sysVar.arrayIndex])
            /* if discounts don't add up*/
          converseLib.validationFailed(68); /* error "discounts don't add up"*/
          set KA0DM060.XDACD[KA0DWNDX] cursor, bold;
          set KA0DM060.KUTDAOF[KA0DWNDX] cursor, bold;
          set KA0DM060.KUTDABK[KA0DWNDX] cursor, bold;
           /* highlight error fields*/
        else /* else(discounts add up)*/
          /* next sentence            ;          okay*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(not in tbl)*/
      converseLib.validationFailed(17); /* error"invalide code"*/
      set KA0DM060.XDACD[KA0DWNDX] cursor, bold;
                                 /* ;        highlight error*/
    end /* end of "if" statement*/
  else /* else(defective allow cd blank)*/
    if (KA0DM060.KUTDAOF[KA0DWNDX] != 0
     || KA0DM060.KUTDABK[KA0DWNDX] != 0)
        /* if trade dscnt facenot blank*/
      converseLib.validationFailed(5); /* error "required field missing"*/
      set KA0DM060.XDACD[KA0DWNDX] cursor, bold;
       /* highlight error*/
    else /* else (trade dscnt off face blank)*/
      /* next sentence                ;      blank is okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/



end // end KA0DS64


// make sure one code entered
Function KA0DS65()


   /* *************************************************************/
   /* ***** m a k e    s u r e    a t    l e a s t    o n e  ******/
   /* *****             c o d e    e n t e r e d             ******/
   /* *************************************************************/


  if (KA0DM060.XPTCD[KA0DWNDX] == " " /* if all discount codes*/
   && KA0DM060.XDACD[KA0DWNDX] == " " /* blank*/
   && KA0DM060.XCPCD[KA0DWNDX] == " " /* |*/
   && KA0DM060.XAACD[KA0DWNDX] == " " /* |*/
   && KA0DM060.XTDCD[KA0DWNDX] == " ") /* |*/
    converseLib.validationFailed(77); /* error "at least one reqd"*/
    set KA0DM060.XPTCD[KA0DWNDX] cursor, bold;
                                              /* highlight error*/
    set KA0DM060.XDACD[KA0DWNDX] bold; /* highlight error*/
    set KA0DM060.XCPCD[KA0DWNDX] bold; /* highlight error*/
    set KA0DM060.XAACD[KA0DWNDX] bold; /* highlight error*/
    set KA0DM060.XTDCD[KA0DWNDX] bold; /* highlight error*/
  else /* else(at least one cd entered)*/
    /* next sentence                     ;       okay*/
  end /* end of "if" statement*/





end // end KA0DS65


// edit terms code
Function KA0DS66()


   /* *************************************************************/
   /* *****         e d i t    t e r m s    c o d e          ******/
   /* *************************************************************/


  if (KA0DM060.XPTCD[KA0DWNDX] != " ") /* if payment terms not blank*/
    if (KA0DM060.XPTCD[KA0DWNDX] in XPTTBL.XPTCD)
                                 /* ;      if payment terms cd in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XPTTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM060.XPTCD[KA0DWNDX] cursor, bold;
                                 /* ;          highlight error*/
      else /* else(status is active)*/
        /* next sentence            ;          okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(not in tbl)*/
      converseLib.validationFailed(17); /* error"invalide code"*/
      set KA0DM060.XPTCD[KA0DWNDX] cursor, bold;
                                 /* ;        highlight error*/
    end /* end of "if" statement*/
  else /* else(payment terms cd blank)*/
    /* next sentence                ;      blank is okay*/
  end /* end of "if" statement*/








end // end KA0DS66


// edit effective date
Function KA0DS67()


   /* *************************************************************/
   /* *****    e d i t    e f f e c t i v e    d a t e       ******/
   /* *************************************************************/


  set TA4REC empty;
  set KA0DM060.KA0DMEMT[KA0DWNDX] normal;
  set KA0DM060.KA0DMEYR[KA0DWNDX] normal;
  set KA0DM060.KA0DMEDY[KA0DWNDX] normal;
   /* ------------------------- Y2K OUT BEGIN ---------------------*/
   /* IF KA0DM060.KA0DMEYR(KA0DWNDX) EQ 0;*/
    /* IF KA0DM060.KA0DMEMT(KA0DWNDX) NE 0*/
      /* OR KA0DM060.KA0DMEDY(KA0DWNDX) NE 0;*/
      /* MOVE 19 TO EZEMNO;*/
      /* SET KA0DM060.KA0DMEYR(KA0DWNDX) CURSOR,BRIGHT;*/
    /* END;*/
   /* ELSE;*/
    /* IF KA0DM060.KA0DMEMT(KA0DWNDX) EQ 0*/
      /* OR KA0DM060.KA0DMEDY(KA0DWNDX) EQ 0;*/
      /* MOVE 19 TO EZEMNO;*/
      /* SET KA0DM060.KA0DMEMT(KA0DWNDX) CURSOR,BRIGHT;*/
      /* SET KA0DM060.KA0DMEDY(KA0DWNDX) BRIGHT;*/
    /* END;*/
   /* END;*/
   /* ------------------------- Y2K OUT END   ---------------------*/
   /* ------------------------- Y2K IN BEGIN  ---------------------*/
  if (KA0DM060.KA0DMEMT[KA0DWNDX] != 0)
    if (KA0DM060.KA0DMEDY[KA0DWNDX] == 0)
      converseLib.validationFailed(19);
      set KA0DM060.KA0DMEDY[KA0DWNDX] cursor, bold;
    end
  else
    if (KA0DM060.KA0DMEDY[KA0DWNDX] != 0)
      converseLib.validationFailed(19);
      set KA0DM060.KA0DMEMT[KA0DWNDX] cursor, bold;
    end
  end
   /* ------------------------- Y2K IN END    ---------------------*/
  if (KA0DM060.KA0DMEMT[KA0DWNDX] == 0
   && KA0DM060.KA0DMEYR[KA0DWNDX] == 0
   && KA0DM060.KA0DMEDY[KA0DWNDX] == 0)
    converseLib.validationFailed(5);
    set KA0DM060.KA0DMEMT[KA0DWNDX] cursor, bold;
    set KA0DM060.KA0DMEYR[KA0DWNDX] bold;
    set KA0DM060.KA0DMEDY[KA0DWNDX] bold;
  else
    KA0DW01.KA0DWYY = KA0DM060.KA0DMEYR[KA0DWNDX];
    KA0DW01.KA0DWMM = KA0DM060.KA0DMEMT[KA0DWNDX];
    KA0DW01.KA0DWDD = KA0DM060.KA0DMEDY[KA0DWNDX];
    TA4REC.TA2GRGA = KA0DW01.KA0DWCDT;
    TA4REC.TA2GRTYP = "A";
    TA4REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA4REC) {isNoRefresh = yes, isExternal = yes};
    if (TA4REC.TA2RTNCD != 0)
      converseLib.validationFailed(19);
      set KA0DM060.KA0DMEMT[KA0DWNDX] cursor, bold;
      set KA0DM060.KA0DMEYR[KA0DWNDX] bold;
      set KA0DM060.KA0DMEDY[KA0DWNDX] bold;
    else
      /* ***** put date into format for database ******/
      KA0DW01.KA0DWM1T = KA0DM060.KA0DMEMT[KA0DWNDX];
      KA0DW01.KA0DWY1T = KA0DM060.KA0DMEYR[KA0DWNDX];
      KA0DW01.KA0DWD1T = KA0DM060.KA0DMEDY[KA0DWNDX];
      KA0DW01.KA0DWC1T = TA4REC.TA2CENT;
      /* ***** edit date against current date ******/
      XX0XS01(); /* get current date*/
      if (KA0DW01.KA0DW1T < XX0XW01.XX0XWDAT)
        converseLib.validationFailed(378);
        set KA0DM060.KA0DMEMT[KA0DWNDX] cursor, bold;
        set KA0DM060.KA0DMEYR[KA0DWNDX] bold;
        set KA0DM060.KA0DMEDY[KA0DWNDX] bold;
      end
      /* **********************************************/
    end
  end

end // end KA0DS67


// edit expiration dates
Function KA0DS68()


   /* *************************************************************/
   /* *****    e d i t    e x p i r a t i o n    d a t e     ******/
   /* *************************************************************/


  set TA4REC empty;
  set KA0DM060.KA0DMXMT[KA0DWNDX] normal;
  set KA0DM060.KA0DMXYR[KA0DWNDX] normal;
  set KA0DM060.KA0DMXDY[KA0DWNDX] normal;
   /* --------------------- y2k out begin -----------------*/
   /* IF KA0DM060.KA0DMXYR(KA0DWNDX) EQ 0;*/
    /* IF KA0DM060.KA0DMXMT(KA0DWNDX) NE 0*/
      /* OR KA0DM060.KA0DMXDY(KA0DWNDX) NE 0;*/
      /* MOVE 19 TO EZEMNO;*/
      /* SET KA0DM060.KA0DMXYR(KA0DWNDX) CURSOR,BRIGHT;*/
    /* END;*/
   /* ELSE;*/
   /* IF KA0DM060.KA0DMXMT(KA0DWNDX) EQ 0*/
    /* OR KA0DM060.KA0DMXDY(KA0DWNDX) EQ 0;*/
      /* MOVE 19 TO EZEMNO;*/
      /* SET KA0DM060.KA0DMXMT(KA0DWNDX) CURSOR,BRIGHT;*/
      /* SET KA0DM060.KA0DMXDY(KA0DWNDX) BRIGHT;*/
    /* END;*/
   /* END;*/
   /* --------------------- y2k out end   -----------------*/
   /* --------------------- y2k in begin  -----------------*/
  if (KA0DM060.KA0DMXMT[KA0DWNDX] == 0)
    if (KA0DM060.KA0DMXDY[KA0DWNDX] != 0)
      converseLib.validationFailed(19);
      set KA0DM060.KA0DMXMT[KA0DWNDX] cursor, bold;
    end
  else
    if (KA0DM060.KA0DMXDY[KA0DWNDX] == 0)
      converseLib.validationFailed(19);
      set KA0DM060.KA0DMXDY[KA0DWNDX] cursor, bold;
    end
  end
   /* --------------------- y2k in end    -----------------*/

  if (KA0DM060.KA0DMXMT[KA0DWNDX] == 0
   && KA0DM060.KA0DMXYR[KA0DWNDX] == 0
   && KA0DM060.KA0DMXDY[KA0DWNDX] == 0)
    /* next sentence*/
  else
    KA0DW01.KA0DWYY = KA0DM060.KA0DMXYR[KA0DWNDX];
    KA0DW01.KA0DWMM = KA0DM060.KA0DMXMT[KA0DWNDX];
    KA0DW01.KA0DWDD = KA0DM060.KA0DMXDY[KA0DWNDX];
    TA4REC.TA2GRGA = KA0DW01.KA0DWCDT;
    TA4REC.TA2GRTYP = "A";
    TA4REC.TA2DTOPT = "GREGGREG";
    call "TA0040" (TA4REC) {isNoRefresh = yes, isExternal = yes};
    if (TA4REC.TA2RTNCD != 0)
      converseLib.validationFailed(19);
      set KA0DM060.KA0DMXMT[KA0DWNDX] cursor, bold;
      set KA0DM060.KA0DMXYR[KA0DWNDX] bold;
      set KA0DM060.KA0DMXDY[KA0DWNDX] bold;
    end
  end

  KA0DW01.KA0DWMM1 = KA0DM060.KA0DMEMT[KA0DWNDX];
  KA0DW01.KA0DWDD1 = KA0DM060.KA0DMEDY[KA0DWNDX];
  KA0DW01.KA0DWYY1 = KA0DM060.KA0DMEYR[KA0DWNDX];
   /* --------------------- y2k in begin  -----------------*/
  if (KA0DW01.KA0DWMM1 == "99"
   && KA0DW01.KA0DWDD1 == "99"
   && KA0DW01.KA0DWYY1 == "99")
    KA0DW01.KA0DWCC1 = 99;
  else
    if (KA0DW01.KA0DWYY1 > "60") /* Century windowing*/
      KA0DW01.KA0DWCC1 = 19;
    else
      KA0DW01.KA0DWCC1 = 20;
    end
  end
   /* --------------------- y2k in end    -----------------*/
  KA0DW01.KA0DWMM2 = KA0DM060.KA0DMXMT[KA0DWNDX];
  KA0DW01.KA0DWDD2 = KA0DM060.KA0DMXDY[KA0DWNDX];
  KA0DW01.KA0DWYY2 = KA0DM060.KA0DMXYR[KA0DWNDX];
   /* --------------------- y2k in begin  -----------------*/
  if (KA0DW01.KA0DWMM2 == "00"
   && KA0DW01.KA0DWDD2 == "00"
   && KA0DW01.KA0DWYY2 == "00")
    KA0DW01.KA0DWCC2 = 00;
  else
    if (KA0DW01.KA0DWYY2 > "60") /* Century windowing*/
      KA0DW01.KA0DWCC2 = 19;
    else
      KA0DW01.KA0DWCC2 = 20;
    end
  end
   /* --------------------- y2k in end    -----------------*/

  if (KA0DW01.KA0DWDT2 == 0)
    /* next sentence*/
  else
    if (KA0DW01.KA0DWDT2 > KA0DW01.KA0DWDT1) /* ccyymmdd*/
      /* next sentence*/
    else
      converseLib.validationFailed(258);
      set KA0DM060.KA0DMXMT[KA0DWNDX] cursor, bold;
      set KA0DM060.KA0DMXDY[KA0DWNDX] bold;
      set KA0DM060.KA0DMXYR[KA0DWNDX] bold;
    end
  end

  if (KA0DW01.KA0DWNDX > 2
   || KA0DW01.KA0DWNDX < 1)
    /* next sentence*/
  else
    if (KA0DW01.KA0DWNDX == 2)
      KA0DW01.KA0DWIDX = 3;
    else
      if (KA0DW01.KA0DWNDX == 1)
        KA0DW01.KA0DWIDX = 2;
      end
    end
    KA0DW01.KA0DWMM1 = KA0DM060.KA0DMEMT[KA0DWIDX];
    KA0DW01.KA0DWDD1 = KA0DM060.KA0DMEDY[KA0DWIDX];
    KA0DW01.KA0DWYY1 = KA0DM060.KA0DMEYR[KA0DWIDX];
    /* --------------------- y2k in begin  -----------------*/
    if (KA0DW01.KA0DWMM1 == "00"
     && KA0DW01.KA0DWDD1 == "00"
     && KA0DW01.KA0DWYY1 == "00")
      KA0DW01.KA0DWCC1 = 00;
    else
      if (KA0DW01.KA0DWMM1 == "99"
       && KA0DW01.KA0DWDD1 == "99"
       && KA0DW01.KA0DWYY1 == "99")
        KA0DW01.KA0DWCC1 = 99;
      else
        if (KA0DW01.KA0DWYY1 > "60") /* Century windowing*/
          KA0DW01.KA0DWCC1 = 19;
        else
          KA0DW01.KA0DWCC1 = 20;
        end
      end
    end
    /* --------------------- y2k in end    -----------------*/
    KA0DW01.KA0DWMM2 = KA0DM060.KA0DMXMT[KA0DWNDX];
    KA0DW01.KA0DWDD2 = KA0DM060.KA0DMXDY[KA0DWNDX];
    KA0DW01.KA0DWYY2 = KA0DM060.KA0DMXYR[KA0DWNDX];
    /* --------------------- y2k in begin  -----------------*/
    if (KA0DW01.KA0DWMM2 == "00"
     && KA0DW01.KA0DWDD2 == "00"
     && KA0DW01.KA0DWYY2 == "00")
      KA0DW01.KA0DWCC2 = 00;
    else
      if (KA0DW01.KA0DWYY2 > "60") /* Century windowing*/
        KA0DW01.KA0DWCC2 = 19;
      else
        KA0DW01.KA0DWCC2 = 20;
      end
    end
    /* --------------------- y2k in end    -----------------*/

    if (KA0DW01.KA0DWDT1 > 0) /* effective date*/
      if (KA0DW01.KA0DWDT2 == 0) /* prior expiration date*/
        converseLib.validationFailed(261);
        set KA0DM060.KA0DMXMT[KA0DWNDX] cursor, bold;
        set KA0DM060.KA0DMXDY[KA0DWNDX] bold;
        set KA0DM060.KA0DMXYR[KA0DWNDX] bold;
      else
        if (KA0DW01.KA0DWDT2 >= KA0DW01.KA0DWDT1)
          converseLib.validationFailed(260);
          set KA0DM060.KA0DMXMT[KA0DWNDX] cursor, bold;
          set KA0DM060.KA0DMXDY[KA0DWNDX] bold;
          set KA0DM060.KA0DMXYR[KA0DWNDX] bold;
        end
      end
    end
  end

end // end KA0DS68


// edit order type code
Function KA0DS69()


   /* *************************************************************/
   /* *****    e d i t   o r d e r     t y p e    c o d e    ******/
   /* *************************************************************/


  set KA0DM060.XOTCD initialAttributes; /* initialize order type field*/
                                 /* ;*/
  if (KA0DM060.XOTCD != " ") /* if order type cd not blank*/
    if (KA0DM060.XOTCD in XOTTBL.XOTCD) /* if order type cd in tbl*/
      if (KA0DM060.XGPCD == XOTTBL.XGPCD[sysVar.arrayIndex])
        /* next sentence*/
      else
        converseLib.validationFailed(171); /* invalid order type for gpc*/
        set KA0DM060.XOTCD cursor, bold;
        return;
      end
      /* ***************  check status code of entry  ****************/
      if (XOTTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM060.XOTCD cursor, bold; /* highlight error*/
      else /* else(status is active)*/
        if (KA0DM060.XOTCD in KA0DW02.XOTCD) /* if order type duplicate*/
          converseLib.validationFailed(74); /* error "duplicate"*/
          set KA0DM060.XOTCD cursor, bold; /* highlight errorj*/
        else /* else(non-duplicate)*/
          /* next sentence      ;                okay*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(not in tbl)*/
      converseLib.validationFailed(17); /* error"invalide code"*/
      set KA0DM060.XOTCD cursor, bold; /* highlight error*/
    end /* end of "if" statement*/
  else /* else(order type cd blank)*/
    if (KA0DM060.KA0DMEMT[1] != 0 
     /* if terms entered, order type reqd*/
     || KA0DM060.KA0DMEDY[1] != 0 /* |*/
     || KA0DM060.KA0DMEYR[1] != 0 /* |*/
     || KA0DM060.KA0DMEMT[2] != 0 /* |*/
     || KA0DM060.KA0DMEDY[2] != 0 /* |*/
     || KA0DM060.KA0DMEYR[2] != 0 /* |*/
     || KA0DM060.KA0DMEMT[3] != 0 /* |*/
     || KA0DM060.KA0DMEDY[3] != 0 /* |*/
     || KA0DM060.KA0DMEYR[3] != 0) /* |*/
      converseLib.validationFailed(5);
                                   /* error "required field missing"*/
      set KA0DM060.XOTCD cursor, bold; /* highlight error*/
    else /* else(assumed no terms entered)*/
      /* next sentence              ;        okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/

end // end KA0DS69


// sort enties on map
Function KA0DS6A()


   /* *************************************************************/
   /* *****     s o r t    e n t r i e s    o n    m a p     ******/
   /* *************************************************************/


  if (KA0DM060.KA0DMEMT[KA0DWNDX] == 0
   && KA0DM060.KA0DMEDY[KA0DWNDX] == 0
   && KA0DM060.KA0DMEYR[KA0DWNDX] == 0)
    /* ----------------- y2k out begin --------------*/
    /* MOVE 999999 TO KA0DW01.KA0DWDT1;*/
    /* ----------------- y2k out end   --------------*/
    /* ----------------- y2k in begin  --------------*/
    KA0DW01.KA0DWDT1 = 99999999;
    /* ----------------- y2k in end    --------------*/
  else
    KA0DW01.KA0DWMM1 = KA0DM060.KA0DMEMT[KA0DWNDX];
    KA0DW01.KA0DWYY1 = KA0DM060.KA0DMEYR[KA0DWNDX];
    KA0DW01.KA0DWDD1 = KA0DM060.KA0DMEDY[KA0DWNDX];
    /* ----------------- y2k in begin  --------------*/
    if (KA0DW01.KA0DWYY1 > "60") /* Century windowing*/
      KA0DW01.KA0DWCC1 = 19;
    else
      KA0DW01.KA0DWCC1 = 20;
    end /* ----------------- y2k in end    --------------*/
  end

  if (KA0DM060.KA0DMEMT[KA0DW2DX] == 0
   && KA0DM060.KA0DMEDY[KA0DW2DX] == 0
   && KA0DM060.KA0DMEYR[KA0DW2DX] == 0)
    /* ----------------- y2k out begin --------------*/
    /* MOVE 999999 TO KA0DW01.KA0DWDT2;*/
    /* ----------------- y2k out end   --------------*/
    /* ----------------- y2k in begin  --------------*/
    KA0DW01.KA0DWDT2 = 99999999;
    /* ----------------- y2k in end    --------------*/
  else
    KA0DW01.KA0DWMM2 = KA0DM060.KA0DMEMT[KA0DW2DX];
    KA0DW01.KA0DWYY2 = KA0DM060.KA0DMEYR[KA0DW2DX];
    KA0DW01.KA0DWDD2 = KA0DM060.KA0DMEDY[KA0DW2DX];
    /* ----------------- y2k in begin  --------------*/
    if (KA0DW01.KA0DWYY2 > 60) /* Century windowing*/
      KA0DW01.KA0DWCC2 = 19;
    else
      KA0DW01.KA0DWCC2 = 20;
    end /* ----------------- y2k in end    --------------*/
  end
  if (KA0DW01.KA0DWDT1 > KA0DW01.KA0DWDT2) /* ccyymmdd format*/
    /* *****************************************************/
    KA0DW03.KA0DMMM = KA0DM060.KA0DMEMT[KA0DWNDX];
    KA0DW03.KA0DMYY = KA0DM060.KA0DMEYR[KA0DWNDX];
    KA0DW03.KA0DMDD = KA0DM060.KA0DMEDY[KA0DWNDX];
    KA0DW03.KA0DXMM = KA0DM060.KA0DMXMT[KA0DWNDX];
    KA0DW03.KA0DXYY = KA0DM060.KA0DMXYR[KA0DWNDX];
    KA0DW03.KA0DXDD = KA0DM060.KA0DMXDY[KA0DWNDX];
    KA0DW03.XPTCD = KA0DM060.XPTCD[KA0DWNDX];
    KA0DW03.XCPCD = KA0DM060.XCPCD[KA0DWNDX];
    KA0DW03.XAACD = KA0DM060.XAACD[KA0DWNDX];
    KA0DW03.KUTAPBK = KA0DM060.KUTAPBK[KA0DWNDX];
    KA0DW03.KUTAPOF = KA0DM060.KUTAPOF[KA0DWNDX];
    KA0DW03.KUTAANET = KA0DM060.KUTAANET[KA0DWNDX];
    KA0DW03.KUTAAFCG = KA0DM060.KUTAAFCG[KA0DWNDX];
    KA0DW03.KUTAAFCN = KA0DM060.KUTAAFCN[KA0DWNDX];
    KA0DW03.XTDCD = KA0DM060.XTDCD[KA0DWNDX];
    KA0DW03.KUTTDPBK = KA0DM060.KUTTDPBK[KA0DWNDX];
    KA0DW03.KUTTDPOF = KA0DM060.KUTTDPOF[KA0DWNDX];
    KA0DW03.KUTTDNET = KA0DM060.KUTTDNET[KA0DWNDX];
    KA0DW03.KUTTDSPN = KA0DM060.KUTTDSPN[KA0DWNDX];
    KA0DW03.KUTTDDSN = KA0DM060.KUTTDDSN[KA0DWNDX];
    KA0DW03.XDACD = KA0DM060.XDACD[KA0DWNDX];
    KA0DW03.KUTDABK = KA0DM060.KUTDABK[KA0DWNDX];
    KA0DW03.KUTDAOF = KA0DM060.KUTDAOF[KA0DWNDX];
    KA0DW03.KUTDANET = KA0DM060.KUTDANET[KA0DWNDX];
    KA0DW03.KUTDAHCN = KA0DM060.KUTDAHCN[KA0DWNDX];
    /* *****************************************************/
    KA0DM060.KA0DMEMT[KA0DWNDX] = KA0DM060.KA0DMEMT[KA0DW2DX];
    KA0DM060.KA0DMEYR[KA0DWNDX] = KA0DM060.KA0DMEYR[KA0DW2DX];
    KA0DM060.KA0DMEDY[KA0DWNDX] = KA0DM060.KA0DMEDY[KA0DW2DX];
    KA0DM060.KA0DMXMT[KA0DWNDX] = KA0DM060.KA0DMXMT[KA0DW2DX];
    KA0DM060.KA0DMXYR[KA0DWNDX] = KA0DM060.KA0DMXYR[KA0DW2DX];
    KA0DM060.KA0DMXDY[KA0DWNDX] = KA0DM060.KA0DMXDY[KA0DW2DX];
    KA0DM060.XPTCD[KA0DWNDX] = KA0DM060.XPTCD[KA0DW2DX];
    KA0DM060.XCPCD[KA0DWNDX] = KA0DM060.XCPCD[KA0DW2DX];
    KA0DM060.XAACD[KA0DWNDX] = KA0DM060.XAACD[KA0DW2DX];
    KA0DM060.KUTAPBK[KA0DWNDX] = KA0DM060.KUTAPBK[KA0DW2DX];
    KA0DM060.KUTAPOF[KA0DWNDX] = KA0DM060.KUTAPOF[KA0DW2DX];
    KA0DM060.KUTAANET[KA0DWNDX] = KA0DM060.KUTAANET[KA0DW2DX];
    KA0DM060.KUTAAFCG[KA0DWNDX] = KA0DM060.KUTAAFCG[KA0DW2DX];
    KA0DM060.KUTAAFCN[KA0DWNDX] = KA0DM060.KUTAAFCN[KA0DW2DX];
    KA0DM060.XTDCD[KA0DWNDX] = KA0DM060.XTDCD[KA0DW2DX];
    KA0DM060.KUTTDPBK[KA0DWNDX] = KA0DM060.KUTTDPBK[KA0DW2DX];
    KA0DM060.KUTTDPOF[KA0DWNDX] = KA0DM060.KUTTDPOF[KA0DW2DX];
    KA0DM060.KUTTDNET[KA0DWNDX] = KA0DM060.KUTTDNET[KA0DW2DX];
    KA0DM060.KUTTDSPN[KA0DWNDX] = KA0DM060.KUTTDSPN[KA0DW2DX];
    KA0DM060.KUTTDDSN[KA0DWNDX] = KA0DM060.KUTTDDSN[KA0DW2DX];
    KA0DM060.XDACD[KA0DWNDX] = KA0DM060.XDACD[KA0DW2DX];
    KA0DM060.KUTDABK[KA0DWNDX] = KA0DM060.KUTDABK[KA0DW2DX];
    KA0DM060.KUTDAOF[KA0DWNDX] = KA0DM060.KUTDAOF[KA0DW2DX];
    KA0DM060.KUTDANET[KA0DWNDX] = KA0DM060.KUTDANET[KA0DW2DX];
    KA0DM060.KUTDAHCN[KA0DWNDX] = KA0DM060.KUTDAHCN[KA0DW2DX];
    /* *****************************************************/
    KA0DM060.KA0DMEMT[KA0DW2DX] = KA0DW03.KA0DMMM;
    KA0DM060.KA0DMEYR[KA0DW2DX] = KA0DW03.KA0DMYY;
    KA0DM060.KA0DMEDY[KA0DW2DX] = KA0DW03.KA0DMDD;
    KA0DM060.KA0DMXMT[KA0DW2DX] = KA0DW03.KA0DXMM;
    KA0DM060.KA0DMXYR[KA0DW2DX] = KA0DW03.KA0DXYY;
    KA0DM060.KA0DMXDY[KA0DW2DX] = KA0DW03.KA0DXDD;
    KA0DM060.XPTCD[KA0DW2DX] = KA0DW03.XPTCD;
    KA0DM060.XCPCD[KA0DW2DX] = KA0DW03.XCPCD;
    KA0DM060.XAACD[KA0DW2DX] = KA0DW03.XAACD;
    KA0DM060.KUTAPBK[KA0DW2DX] = KA0DW03.KUTAPBK;
    KA0DM060.KUTAPOF[KA0DW2DX] = KA0DW03.KUTAPOF;
    KA0DM060.KUTAANET[KA0DW2DX] = KA0DW03.KUTAANET;
    KA0DM060.KUTAAFCG[KA0DW2DX] = KA0DW03.KUTAAFCG;
    KA0DM060.KUTAAFCN[KA0DW2DX] = KA0DW03.KUTAAFCN;
    KA0DM060.XTDCD[KA0DW2DX] = KA0DW03.XTDCD;
    KA0DM060.KUTTDPBK[KA0DW2DX] = KA0DW03.KUTTDPBK;
    KA0DM060.KUTTDPOF[KA0DW2DX] = KA0DW03.KUTTDPOF;
    KA0DM060.KUTTDNET[KA0DW2DX] = KA0DW03.KUTTDNET;
    KA0DM060.KUTTDSPN[KA0DW2DX] = KA0DW03.KUTTDSPN;
    KA0DM060.KUTTDDSN[KA0DW2DX] = KA0DW03.KUTTDDSN;
    KA0DM060.XDACD[KA0DW2DX] = KA0DW03.XDACD;
    KA0DM060.KUTDABK[KA0DW2DX] = KA0DW03.KUTDABK;
    KA0DM060.KUTDAOF[KA0DW2DX] = KA0DW03.KUTDAOF;
    KA0DM060.KUTDANET[KA0DW2DX] = KA0DW03.KUTDANET;
    KA0DM060.KUTDAHCN[KA0DW2DX] = KA0DW03.KUTDAHCN;
    /* *****************************************************/
  end

end // end KA0DS6A


// reset attributes to defined
Function KA0DS6C()


   /* *************************************************************/
   /* *****  r e s e t    f i e l d    a t t r i b u t e s   ******/
   /* *****               t o    d e f i n e d               ******/
   /* *************************************************************/


  set KA0DM060.KA0DMEYR[KA0DWNDX] initialAttributes;
  set KA0DM060.KA0DMEMT[KA0DWNDX] initialAttributes;
  set KA0DM060.KA0DMEDY[KA0DWNDX] initialAttributes;
  set KA0DM060.KA0DMXYR[KA0DWNDX] initialAttributes;
  set KA0DM060.KA0DMXMT[KA0DWNDX] initialAttributes;
  set KA0DM060.KA0DMXDY[KA0DWNDX] initialAttributes;
  set KA0DM060.XPTCD[KA0DWNDX] initialAttributes;
  set KA0DM060.XCPCD[KA0DWNDX] initialAttributes;
  set KA0DM060.XAACD[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTAPBK[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTAPOF[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTAANET[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTAAFCG[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTAAFCN[KA0DWNDX] initialAttributes;
  set KA0DM060.XTDCD[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTTDPBK[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTTDPOF[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTTDNET[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTTDSPN[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTTDDSN[KA0DWNDX] initialAttributes;
  set KA0DM060.XDACD[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTDABK[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTDAOF[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTDANET[KA0DWNDX] initialAttributes;
  set KA0DM060.KUTDAHCN[KA0DWNDX] initialAttributes;

end // end KA0DS6C


// edit special customer grp scrn
Function KA0DS80()


   /* *************************************************************/
   /* *****  e d i t    s p e c i a l    c u s t o m e r     ******/
   /* *****             g r o u p    s c r e e n             ******/
   /* *************************************************************/


  set KA0DM080.XSOCD cursor; /* initialize cursor position*/

  KA0DS8A(); /* edit sales office code*/

  KA0DS81(); /* left justify spcl cust grps*/

  KA0DW01.KA0DWNDX = 10; /* initialize index to 40*/
  while (KA0DW01.KA0DWNDX >= 1) /* loop thru fields on screen*/
    KA0DS82(); /* edit contents of special cust field*/
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX - 1;
                                 /* ;  decrement index by 1*/
  end /* end of "while" loop*/


   /* ************************************************************/
            /* edit for duplicate group codes*/


  KA0DW01.KA0DWNDX = 1;

  while (KA0DW01.KA0DWNDX <= 10)
    KA0DW01.KA0DW2DX = 10;
    while (KA0DW01.KA0DW2DX > 0)
      if (KA0DM080.XSGCD[KA0DWNDX] == KA0DM080.XSGCD[KA0DW2DX]
       && KA0DW01.KA0DWNDX != KA0DW01.KA0DW2DX
       && KA0DM080.XSGCD[KA0DWNDX] != " ")
        converseLib.validationFailed(270);
        set KA0DM080.XSGCD[KA0DW2DX] cursor, modified, bold;
      end
      KA0DW01.KA0DW2DX = KA0DW01.KA0DW2DX - 1;
    end
    if (KA0DM080.XSGCD[KA0DWNDX] == " ")
      KA0DW01.KA0DWNDX = 10;
    end
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX + 1;
  end


end // end KA0DS80


// left justify spcl cust grps
Function KA0DS81()


   /* *************************************************************/
   /* *****     l e f t    j u s t i f y    s p e c i a l    ******/
   /* *****           c u s t o m e r    g r o u p s         ******/
   /* *************************************************************/


   /* **********  find first blank field  *************************/
  KA0DW01.KA0DWNDX = 1; /* initialize index to 1*/
  while (KA0DW01.KA0DWNDX <= 10
   /* loop thru scrn to find empty*/
   && KA0DM080.XSGCD[KA0DWNDX] != " ") /* loop thru scrn to find empty*/
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX + 1; /* increment index*/
  end /* end of "while" loop*/
                                 /* ;*/
   /* *****  suck up any non-blank fields into blank fields ******/
  KA0DW01.KA0DW2DX = KA0DW01.KA0DWNDX + 1; /* index 2 = index 1 + 1*/
  while (KA0DW01.KA0DW2DX <= 10) /* loop thru rest of fields*/
    if (KA0DM080.XSGCD[KA0DW2DX] != " ")
                                   /* if next field not blank*/
      KA0DM080.XSGCD[KA0DWNDX] = KA0DM080.XSGCD[KA0DW2DX];
                                 /* ;             move field to blank*/
      KA0DM080.XSGCD[KA0DW2DX] = " "; /* blank out from field*/
      KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX + 1; /* increment index 1*/
      KA0DW01.KA0DW2DX = KA0DW01.KA0DW2DX + 1; /* increment index 2*/
    else /* else(field not blank)*/
      KA0DW01.KA0DW2DX = KA0DW01.KA0DW2DX + 1; /* increment index 2*/
    end /* end of "if" statement*/
  end /* end of "while" loop*/


end // end KA0DS81


// edit special cust group code
Function KA0DS82()


   /* *************************************************************/
   /* *****    e d i t    s p e c i a l    c u s t o m e r   ******/
   /* *****              g r o u p    c o d e s              ******/
   /* *************************************************************/



  set KA0DM080.XSGCD[KA0DWNDX] initialAttributes; /* initialize field attributes*/
  KA0DM080.XSGABRV[KA0DWNDX] = " ";
                                 /* ;initialize decode for spcl*/

  if (KA0DM080.XSGCD[KA0DWNDX] != " ")
                                   /* if spcl cust grp not blank*/
    if (KA0DM080.XSGCD[KA0DWNDX] in XSGTBL.XSGCD) /* if spcl cust cd in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XSGTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM080.XSGCD[KA0DWNDX] cursor, bold; /* highlight error*/
      else /* else(status is active)*/
        KA0DM080.XSGABRV[KA0DWNDX] = XSGTBL.XSGABRV[sysVar.arrayIndex];
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(not in tbl)*/
      converseLib.validationFailed(17); /* error"invalide code"*/
      set KA0DM080.XSGCD[KA0DWNDX] cursor, bold; /* highlight error*/
    end /* end of "if" statement*/
  else
                                   /* else(spcl cust code blank*/
    /* next sentence                ;               okay*/
  end /* end of "if" statement*/



end // end KA0DS82


// edit sales office code
Function KA0DS8A()


   /* *************************************************************/
   /* *****    e d i t    s a l e s   o f f i c e   c o d e  ******/
   /* *************************************************************/


  set KA0DM080.XSOCD initialAttributes; /* initialize field attributes*/

  if (KA0DM080.XSOCD != " ")
                                   /* if sales office is not blank*/
    if (KA0DM080.XSOCD in XSOTBL.XSOCD) /* if sales office in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XSOTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM080.XSOCD cursor, bold; /* highlight error*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(not in tbl)*/
      converseLib.validationFailed(17); /* error"invalide code"*/
      set KA0DM080.XSOCD cursor, bold; /* highlight error*/
    end /* end of "if" statement*/
  else /* else(sls off code blank*/
    /* next sentence                ;               okay*/
  end /* end of "if" statement*/



end // end KA0DS8A


// edit screen ka0dm090
Function KA0DS90()


   /* *************************************************************/
   /* **** e d i t    s p e c i a l   i n s t r u c t i o n s *****/
   /* *************************************************************/


  set KA0DM090.XNDCD[1] cursor; /* initialize cursor position*/

  KA0DS91(); /* top justify special instructions*/

  KA0DW01.KA0DWNDX = 10; /* initialize index to 10*/
  while (KA0DW01.KA0DWNDX >= 1) /* loop thru fields on screen*/
    KA0DS92();
                                   /* edit contents of special instructions*/
    KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX - 1;
                                 /* ;  decrement index by 1*/
  end /* end of "while" loop*/





end // end KA0DS90


// top justify spcl instructions
Function KA0DS91()


   /* *************************************************************/
   /* *****     t o p    j u s t i f y    s p e c i a l      ******/
   /* *****             i n s t r u c t i o n s              ******/
   /* *************************************************************/


   /* **********  find first blank field  *************************/
  KA0DW01.KA0DWNDX = 1; /* initialize index to 1*/
  KA0DW01.KA0DW2DX = 1; /* set flag to 1*/
  while (KA0DW01.KA0DW2DX == 1
   /* LOOP UNTIL FIRST BLANK LINE*/
   && KA0DW01.KA0DWNDX <= 10) /* |*/
    if (KA0DM090.XNDCD[KA0DWNDX] == " " /* if line blank*/
     && KA0DM090.KUQSINST[KA0DWNDX] == " ") /* |*/
      KA0DW01.KA0DW2DX = 0; /* set flag*/
    else /* ELSE(line not blank)*/
      KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX + 1; /* increment index*/
    end /* end of "if" statement*/
  end /* end of "while" loop*/
                                 /* ;*/
   /* *****  suck up any non-blank fields into blank fields ******/
  KA0DW01.KA0DW2DX = KA0DW01.KA0DWNDX + 1; /* index 2 = index 1 + 1*/
  while (KA0DW01.KA0DW2DX <= 10) /* loop thru rest of fields*/
    if (KA0DM090.XNDCD[KA0DW2DX] != " "
     /* if next field not blank*/
     || KA0DM090.KUQSINST[KA0DW2DX] != " ") /* instuction lines*/
      KA0DM090.XNDCD[KA0DWNDX] = KA0DM090.XNDCD[KA0DW2DX];
      KA0DM090.KUQSINST[KA0DWNDX] = KA0DM090.KUQSINST[KA0DW2DX];
                                 /* ;               move field to blk*/
      KA0DM090.XNDCD[KA0DW2DX] = " "; /* blank out from field*/
      KA0DM090.KUQSINST[KA0DW2DX] = " "; /* blank out from field*/
      KA0DW01.KA0DWNDX = KA0DW01.KA0DWNDX + 1; /* increment index 1*/
      KA0DW01.KA0DW2DX = KA0DW01.KA0DW2DX + 1; /* increment index 2*/
    else /* else(field not blank)*/
      KA0DW01.KA0DW2DX = KA0DW01.KA0DW2DX + 1; /* increment index 2*/
    end /* end of "if" statement*/
  end /* end of "while" loop*/





end // end KA0DS91


// edit special instuction fields
Function KA0DS92()


   /* *************************************************************/
   /* ****  e d i t    s p e c i a l    i n s t r u c t i o n *****/
   /* ****                    f i e l d s                     *****/
   /* *************************************************************/


   /* ***** reset field attributes ******/
  set KA0DM090.KUQSINST[KA0DWNDX] initialAttributes;
  set KA0DM090.XNDCD[KA0DWNDX] initialAttributes;
                                 /* ;*/
  if (KA0DM090.XNDCD[KA0DWNDX] != " ") /* if dept not blank*/
    if (KA0DM090.XNDCD[KA0DWNDX] in XNDTBL.XNDCD) /* if dept code in table*/
      /* ***************  check status code of entry  ****************/
      if (XNDTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KA0DM090.XNDCD[KA0DWNDX] cursor, bold; /* highlight error*/
      else /* else(status is active)*/
        /* next sentence                ;  okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else
                                   /* else(dept cd not found)*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KA0DM090.XNDCD[KA0DWNDX] cursor, bold; /* highlight error*/
    end /* end of "if" statement*/
  else
                                   /* else(dept field is blank)*/
    if (KA0DM090.KUQSINST[KA0DWNDX] != " ") /* IF INST NOT BLANK*/
      converseLib.validationFailed(5); /* error "required missing"*/
      set KA0DM090.XNDCD[KA0DWNDX] cursor, bold; /* highlight error*/
    end /* end of "if" statement*/
  end

  if (KA0DM090.XNDCD[KA0DWNDX] != " ")
                                   /* if dept field not blank*/
    if (KA0DM090.KUQSINST[KA0DWNDX] == " ") /* IF INST NOT BLANK*/
      converseLib.validationFailed(5);
                                   /* error "required missing"*/
      set KA0DM090.KUQSINST[KA0DWNDX] cursor, bold;
                                 /* ;               highlight error*/
    else /* else(dept is blank)*/
      /* next sentence              ;               okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KA0DS92


// check for rep add
Function KA0DS93()
   /* *************************************************************/
   /* ****  c h e c k  f o r  r e p  a d d                    *****/
   /* *************************************************************/

  KUGREC.KUCCOID = KA0DW01.KA0DWCID;
  KUGREC.KUMSTRID = KA0DW01.KA0DWSID;
  KUGREC.XNXCD = KA0DW01.KA0DWDID;
  KUGREC.YSBCD = "**";
  KUGREC.KUGRPTDT = 999999999; /* active reps only*/

  call "IO5110" ("S1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KA0DS93";
    TA1REC.TA1LOC = "SELECT SCAN VCUREP01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUREP01";
    KA0DW01.KA0DWCID = KUGREC.KUCCOID;
    KA0DW01.KA0DWSID = KUGREC.KUMSTRID;
    KA0DW01.KA0DWDID = KUGREC.XNXCD;
    TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

  call "IO5110" ("N1", SQLCA, KUGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KA0D170(); /* close cursor*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KA0D170(); /* close cursor*/
      COMMAREA.CAUSERA = KA0DW01.KA0DWGRP;
      COMMAREA.CATOAP = "KG0C";
      XSEXIT();
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KA0DS93";
      TA1REC.TA1LOC = "FETCH NEXT VCUREP01 ";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUREP01";
      KA0DW01.KA0DWCID = KUGREC.KUCCOID;
      KA0DW01.KA0DWSID = KUGREC.KUMSTRID;
      KA0DW01.KA0DWDID = KUGREC.XNXCD;
      TA1REC.TA1TBLKE = KA0DW01.KA0DWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end





end // end KA0DS93


// check for rep add
Function KA0DS94()
  if (COMMAREA.CAFROMAP == "KG0C")
    COMMAREA.CAUSERA = KA0DW01.KA0DWGRP;
    COMMAREA.CATOAP = "KG0D";
    XSEXIT();
  end


end // end KA0DS94


// check pf-keys for ka0d
Function KA0DSPF()


   /* *************************************************************/
   /* *****            c h e c k    p f - k e y s            ******/
   /* *************************************************************/


  if (converseVar.eventKey is pf3)
    if (KA0DW01.KA0DWCFL == "Y")
      COMMAREA.CAUSERA = KA0DW01.KA0DWGRP;
      COMMAREA.CATOAP = "KA0M";
      XSEXIT();
      converseLib.validationFailed(41);
      exit stack;
    else
      converseLib.validationFailed(4);
      KA0DW01.KA0DWCFL = "Y";
      exit stack;
    end
  else
    KA0DW01.KA0DWCFL = "N";
  end
  if (converseVar.eventKey is pf4)
    if (KA0DW01.KA0DW4FL == "Y")
      COMMAREA.CAUSERA = KA0DW01.KA0DWGRP;
      XSPF4();
      converseLib.validationFailed(41);
      exit stack;
    else
      converseLib.validationFailed(4);
      KA0DW01.KA0DW4FL = "Y";
      exit stack;
    end
  else
    KA0DW01.KA0DW4FL = "N";
  end
  if (converseVar.eventKey is pf5)
    if (KA0DW01.KA0DW5FL == "Y")
      COMMAREA.CAUSERA = KA0DW01.KA0DWGRP;
      COMMAREA.CATOAP = "KU0M";
      XSEXIT();
      converseLib.validationFailed(41);
      exit stack;
    else
      converseLib.validationFailed(4);
      KA0DW01.KA0DW5FL = "Y";
      exit stack;
    end
  else
    KA0DW01.KA0DW5FL = "N";
  end
  if (converseVar.eventKey is enter)
    return;
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
  end
  if (converseVar.eventKey is pf2)
    return;
  end
  if (converseVar.eventKey is pf6)
    return;
  end
  if (converseVar.eventKey is pf12)
    return;
  end
  if (converseVar.eventKey is pa2)
    exit stack;
  end
  converseLib.validationFailed(3);
  exit stack;





end // end KA0DSPF


//*** RECORD=KA0DW01 ****
// this is the working storage for the csp application ku0a
// ***********************
Record KA0DW01 type basicRecord
  5 KA0DWNDX KA0DWNDX ; 
  5 KA0DWIDX KA0DWIDX ; 
  5 KA0DW2DX KA0DW2DX ; 
  5 KA0DW3DX KA0DW3DX ; 
  5 KA0DWUPT KA0DWUPT ; 
  5 KA0DWGRP KA0DWGRP ; 
    7 KA0DWKEY KA0DWKEY ; 
      10 KA0DWCID KA0DWCID ; 
      10 KA0DWSID KA0DWSID ; 
      10 KA0DWDID KA0DWDID ; 
      10 KA0DWGID KA0DWGID ; 
    7 KA0DWERR KA0DWERR ; 
    7 KA0DWSAV KA0DWSAV ; 
    7 KA0DWPCT KA0DWPCT ; 
    7 KA0DWSPA KA0DWSPA [8] ; 
    7 KA0DWGEN KA0DWGEN [4] ; 
    7 KA0DWBOC KA0DWBOC ; 
    7 KA0DWBOQ KA0DWBOQ ; 
    7 KA0DWOAC KA0DWOAC ; 
    7 KA0DWCAC KA0DWCAC ; 
    7 KA0DWSUB KA0DWSUB ; 
    7 KA0DWTX1 KA0DWTX1 ; 
    7 KA0DWTX2 KA0DWTX2 ; 
  5 KA0DWCDT KA0DWCDT ; 
    10 KA0DWMM KA0DWMM ; 
    10 KA0DWDD KA0DWDD ; 
    10 KA0DWYY KA0DWYY ; 
  5 KA0DW1T KA0DW1T ; 
    10 KA0DWC1T KA0DWC1T ; 
    10 KA0DWY1T KA0DWY1T ; 
    10 KA0DWM1T KA0DWM1T ; 
    10 KA0DWD1T KA0DWD1T ; 
  5 KA0DWLBG KA0DWLBG ; 
  5 KA0DWFST KA0DWFST ; 
  5 KA0DWCFL KA0DWCFL ; 
  5 KA0DW4FL KA0DW4FL ; 
  5 KA0DW5FL KA0DW5FL ; 
  5 KA0DWDT1 KA0DWDT1 ; 
    10 KA0DWCC1 KA0DWCC1 ; 
    10 KA0DWYY1 KA0DWYY1 ; 
    10 KA0DWMM1 KA0DWMM1 ; 
    10 KA0DWDD1 KA0DWDD1 ; 
  5 KA0DWDT2 KA0DWDT2 ; 
    10 KA0DWCC2 KA0DWCC2 ; 
    10 KA0DWYY2 KA0DWYY2 ; 
    10 KA0DWMM2 KA0DWMM2 ; 
    10 KA0DWDD2 KA0DWDD2 ; 
  5 KA0DWADD KA0DWADD ; 
  5 KA0DWOPF KA0DWOPF ; 
  5 KA0DWM6F KA0DWM6F ; 
  5 KA0DWM8F KA0DWM8F ; 
  5 KA0DWM9F KA0DWM9F ; 
end // end KA0DW01


Record KA0DW02 type basicRecord
  3 * char(162) [100] ; 
    5 KUTGRP KUTGRP ; 
      10 KUCCOID KUCCOID ; 
      10 KUMSTRID KUMSTRID ; 
      10 XNXCD XNXCD ; 
      10 XGPCD XGPCD ; 
      10 XOTCD XOTCD ; 
      10 * char(146) ; 
    5 KUTENDT KUTENDT ; 
end // end KA0DW02


Record KA0DW03 type basicRecord
  5 KA0DW3GP KA0DW3GP ; 
    10 KA0DMMM KA0DMMM ; 
    10 KA0DMDD KA0DMDD ; 
    10 KA0DMYY KA0DMYY ; 
    10 KA0DXMM KA0DXMM ; 
    10 KA0DXDD KA0DXDD ; 
    10 KA0DXYY KA0DXYY ; 
    10 XPTCD XPTCD ; 
    10 XDACD XDACD ; 
    10 KUTDABK KUTDABK ; 
    10 KUTDAOF KUTDAOF ; 
    10 KUTDANET KUTDANET ; 
    10 KUTDAHCN KUTDAHCN ; 
    10 XCPCD XCPCD ; 
    10 XAACD XAACD ; 
    10 KUTAPBK KUTAPBK ; 
    10 KUTAPOF KUTAPOF ; 
    10 KUTAANET KUTAANET ; 
    10 KUTAAFCG KUTAAFCG ; 
    10 KUTAAFCN KUTAAFCN ; 
    10 XTDCD XTDCD ; 
    10 KUTTDPBK KUTTDPBK ; 
    10 KUTTDPOF KUTTDPOF ; 
    10 KUTTDNET KUTTDNET ; 
    10 KUTTDSPN KUTTDSPN ; 
    10 KUTTDDSN KUTTDDSN ; 
  5 KA0DW3HD KA0DW3HD ; 
end // end KA0DW03


//*** RECORD=KA0DW04 ****
// customer record
// ------------------------attention---------------------------
// this record contains a field named "kubbuyid". this field
// is the key to the buyer table. the buyer table has not yet
// been defined, and will not be defined until a later phase.
// ------------------------------------------------------------
// ***********************
Record KA0DW04 type basicRecord
  5 KA0DW4GP KA0DW4GP ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 KUJSLFID KUJSLFID ; 
    10 KUNCAFL KUNCAFL ; 
    10 KUNNOSFL KUNNOSFL ; 
    10 KUNBOCD KUNBOCD ; 
    10 KUNBOQTY KUNBOQTY ; 
    10 KUNMAPCT KUNMAPCT ; 
    10 XNACD XNACD ; 
    10 XGACD XGACD [4] ; 
    10 KUNSPCD KUNSPCD [8] ; 
    10 KUNISIND KUNISIND ; 
    10 KUNLABIN KUNLABIN ; 
    10 KUNCGIND KUNCGIND ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end KA0DW04


// day
DataItem KA0DMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// month
DataItem KA0DMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end


// year
DataItem KA0DMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end


// date for database format
DataItem KA0DW1T num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// 2nd index
DataItem KA0DW2DX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// 3nd index
DataItem KA0DW3DX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// group level
DataItem KA0DW3GP char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// move hold area
DataItem KA0DW3HD char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// confirmation flag for pf4
DataItem KA0DW4FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// customer group field
DataItem KA0DW4GP char(69)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// confirmation flag for pf5
DataItem KA0DW5FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// add field
DataItem KA0DWADD decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// save bo code
DataItem KA0DWBOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save bo quantity
DataItem KA0DWBOQ num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// century date for database
DataItem KA0DWC1T char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save order ack change code
DataItem KA0DWCAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KA0DWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// date 1
DataItem KA0DWCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// convert date field
DataItem KA0DWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// confirmation flag for pf3
DataItem KA0DWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// company id
DataItem KA0DWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// daye date for database
DataItem KA0DWD1T char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// date convert days
DataItem KA0DWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// days
DataItem KA0DWDD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// days
DataItem KA0DWDD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// dept id
DataItem KA0DWDID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// date 1
DataItem KA0DWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// date 2
DataItem KA0DWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ezemno error number
DataItem KA0DWERR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// first time thru flag
DataItem KA0DWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save gender age codes
DataItem KA0DWGEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// gen prod class code
DataItem KA0DWGID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// group name
DataItem KA0DWGRP char(119)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// table index
DataItem KA0DWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// customer key
DataItem KA0DWKEY char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// last bill group on screen
DataItem KA0DWLBG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// month date for database
DataItem KA0DWM1T char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// map 6 conversed flag
DataItem KA0DWM6F char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// map 8 conversed flag
DataItem KA0DWM8F char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// map 9 conversed flag
DataItem KA0DWM9F char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// date convert months
DataItem KA0DWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// months
DataItem KA0DWMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// months
DataItem KA0DWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// table index
DataItem KA0DWNDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// save order ack code
DataItem KA0DWOAC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// return to optional menu flag
DataItem KA0DWOPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save bo percentage
DataItem KA0DWPCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// save selection
DataItem KA0DWSAV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// store id
DataItem KA0DWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// save sport activiry codes
DataItem KA0DWSPA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save sub allow flag
DataItem KA0DWSUB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save special label 1
DataItem KA0DWTX1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save special label 1
DataItem KA0DWTX2 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// update company switch
DataItem KA0DWUPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// year date for database
DataItem KA0DWY1T char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// date convert years
DataItem KA0DWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// years
DataItem KA0DWYY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// years
DataItem KA0DWYY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// day
DataItem KA0DXDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// month
DataItem KA0DXMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// year
DataItem KA0DXYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


