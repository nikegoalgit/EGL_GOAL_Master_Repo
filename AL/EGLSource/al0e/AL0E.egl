package al0e;

import al.common.ALHREC;
import corpcom1.CAMSG;
import corpcom1.CAUSERA;
import corpcom2.XX0XW01;
import corpcom3.XPTA0P;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.DCMS-ORD-STAT-CD;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.SQLCAREC;
import corpcom7.XXX-INX-FLD-NBR;
import corpcom7.XXX-LN-SEL-IND;
import corpcom7.XXX-MAP-DSP-CD;
import corpcom7.XXX-MAP-FMAT-FL;
import corpcom7.XXX-MSG-LOC-ID;
import corpcom7.XXX-MSG-NBR;
import corpcom7.XXX-RQT-DATA-FL;
import corpcom7.XXX-USER-ID;
import corpcom7.ZZ-CHNG-PGM-ID;
import corpx1.XDMCD;
import corpx1.XDNCD;
import corpx1.XDNTBL;
import corpx1.XWHTBL;
import corpx2.XPA-CUST-PACK-CD;
import corpx2.XSO-SLS-OFC-ID;
import corpx2.XWH-WHSE-CD;
import corpx2.XWHCD;
import corpx2.XWHSABRV;
import corpz3.ZZ-CHNG-DT;
import ep.common.EPIREC;
import ku.common.KUMREC;
import ku.common.KUMSTRNM;
import op.common.OP-CUST-ORD-ID;
import op.common.OP-LINE-ITEM-NBR;
import op.common.OP-NIKE-ORD-ID;
import op.common.OP-ORD-PART-CHAR;
import op.common.OP1CUNDT;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1NTMAL;
import op.common.OP1PARTN;
import op.common.OP2LNINB;
import op.common.OP2REC;
import op.common.OP2TONOQ;
import pk.common.PK-NBR-TIMES-ALOC;
import pk.common.PK-SEL-IND;
import pk.common.PK-TOT-ITEM-QTY;
import pk.common.PK-TOT-ORD-QTY;
import pw.common.PWHREC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1-GROUP;
import ta.common.TA1REC;
import ta.common.TA3APLID;
import ta.common.TA3DB2SS;
import ta.common.TA3REC;
import ta.common.TA3USRID;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VMPOLH01;
import vv.common.VMPOLI01;
//*** PROGRAM=AL0E ****
// This application allows a user to do an online deallocation
// which can be an entire order or selected products for the
// Memphis Apparel Warehouse (51) only. Application AL0D is no
// longer used by the Memphis Apparel Warehouse.
// 
// There are three different screens that may be displayed.
// 
// The first screen displayed to the user allows entire order
// deallocation or an option to view the order allocation list,
// or to display the product summary screen.
// 
// The second screen displays order allocation list, an option
// to deallocate (PF20), or to see the product summary (PF6)
// per order allocation.  This screen allows the user to select
// which allocation needs to be deallocated.  An 'S' is entered
// for allocations to be deallocated and an 'N' for allocations
// that need to remain allocated.
// 
// The third screen displays the different products within the
// order allocation.  This screen is very useful when only
// certain items need to be deallocated.  Users enter an 'S'
// to the products and press PF20 to deallocate.  It provides
// an option to browse products when there is more than one
// one screenful (PF7/PF8).
// 
// Deallocation is done through EP1520.  EP1520 is a NIKEBOTH
// subroutine designed to do all deallocation functions.  This
// is a clone of the AL1520 subroutine.
// 
// Depending upon the type of deallocation performed, a JOB is
// submitted from online to send transactions down to the DCMS
// system.
// 
// The user may exit to any allowed application via FASTPATH or
// via valid PF keys.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// RETROFT  04-14-98  KDENNE  Created for Apparel Retrofit.
//          10-26-98  kdenne  Fix JCL tables AL0ET01 & AL0ET02
//          11-05-98  jcarey  Fix occurs limit in loops
//          11-13-98  kdenne  Added delete of vmpoli01 row when
//                            the item is missing on the
//                            dorder.vitem001 table.
//          02-01-99  kdenne  Added logic to check if the DCMS
//                            Order Extract is running & not
//                            allow deallocations until it is
//                            finished executing.
// *********************
Program AL0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AL0EW00 AL0EW00; // record
  AL0EW01 AL0EW01; // record
  AL0EW02 AL0EW02; // record
  AL0EW03 AL0EW03; // record
  AL0EW04 AL0EW04; // record
  ALHREC ALHREC; // record
  ALXREC ALXREC; // record
  COMMAREA COMMAREA ; // record
  EPIREC EPIREC; // record
  ERRSQLCA ERRSQLCA; // record
  KUMREC KUMREC; // record
  OP2REC OP2REC; // record
  PWHREC PWHREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VMPOLH01 VMPOLH01; // record
  VMPOLI01 VMPOLI01; // record
  WEP1521 WEP1521; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDNTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use AL0ET01 {deleteAfterUse = yes}; // table
  use AL0ETT1 {deleteAfterUse = yes}; // table
  use AL0ET02 {deleteAfterUse = yes}; // table
  use AL0ETT2 {deleteAfterUse = yes}; // table
  use AL0EM.AL0EM001,  // forms
      AL0EM.AL0EM002, 
      AL0EM.AL0EM003
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAL-00000: XPAL-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set AL0EM001 initial; /* Deallocate screen*/
    set AL0EM002 initial; /* Allocation list screen*/
    set AL0EM003 initial; /* Product summary screen*/
    ;
    set WEP1521 empty; /* EP1520 parameter*/
    set ALHREC empty; /* VDATAG01 copybook*/
    set AL0EW01 empty; /* Map 1 work area*/
    set AL0EW02 empty; /* Map 2 work area*/
    set AL0EW03 empty; /* Map 3 work area*/
    ;
    set KUMREC empty; /* Store copybook*/
    ;
    set OP2REC empty; /* Order item copybook*/
    ;
    set VMPOLH01 empty; /* Mirror pool header copybook*/
    set VMPOLI01 empty; /* Mirror pool item copybook*/
    set PWHREC empty; /* Picking run copybook*/
    ;
    set SQLCA empty; /* SQL communication area*/
    set ERRSQLCA empty; /* SQL error diagnosis area*/
    ;
    set TA1REC empty; /* Error diagnostic information*/
    set TA3REC empty; /* CICS Query routine information*/
    set TA6REC empty; /* Background job request area*/
    set TAEREC empty; /* Error diagnostic parameters*/
    ;
    if (COMMAREA.CAFROMAP == "AL0D") /* transferred in from AL0D*/
      ;
      AL0EW01.XWHCD = ALXREC.XWHCD; /* warehouse cd*/
      AL0EW01.AL0EW-OP1CUOID = ALXREC.OP1CUOID; /* to get part char*/
      AL0EW01.OP1CUOID = ALXREC.OP1CUOID; /* Order nbr*/
      AL0EW01.OP1NORID = ALXREC.OP1NORID;
      ;
    else
      set ALXREC empty;
    end
    ;
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    ;
    AL0EW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto AL0E-00000;
    ;
    ;
    AL0E-00000: AL0E-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto AL0E-00000;
    ;
    ;
  end // end main
end // end AL0E

// Determine which map to display
Function AL0E-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the map that was requested.*/
   /* 2) Otherwise, indicate error and exit to System Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW00.XXX-MAP-DSP-CD == "1") /* Map 1 was requested, view sel menu*/
    ;
    AL0E-10000(); /* Display map 1*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (AL0EW00.XXX-MAP-DSP-CD == "2") /* Map 2 was requested, alloc list*/
    ;
    AL0E-20000(); /* Display map 2*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (AL0EW00.XXX-MAP-DSP-CD == "3") /* Map 3 was requested, view prod summ*/
    ;
    AL0E-30000(); /* Display map 3*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "00000"; /* Message location*/
  ALXREC.XXX-MSG-NBR = 10; /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "INVALID MAP NUMBER REQUESTED"; /* Description*/
  TA1REC.TA1MAPNO = AL0EW00.XXX-MAP-DSP-CD; /* Map requested*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the application system menu.*/
   /* ------------------------------------------------------------*/
  ;
  COMMAREA.CATOAP = "AL0A"; /* System Menu*/
  ;
  XSALS-EXIT(); /* Exit to another application*/
  ;
   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1FUNC = "ABND"; /* Termination function*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end AL0E-00000

// Main process to display map 1
Function AL0E-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Verify the data that was entered.*/
   /* 4) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AL0E-11000(); /* Format and display the map*/
  ;
  AL0E-12000(); /* Check attention identifier*/
  ;
  AL0E-13000(); /* Verify the entered data*/
  ;
  AL0E-14000(); /* Process valid input request*/
  ;
  ;
end // end AL0E-10000

// Format and converse map 1
Function AL0E-11000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ALXREC.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    AL0E-11100(); /* Format the data in the map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AL0EM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AL0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (ALXREC.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " "   /* or message text*/
   || ALXREC.CAMSG != " ")    /* AL message text*/
    ;
    if (ALXREC.CAMSG != " ") /* AL message text*/
      AL0EM001.AL0EM-MESSAGE = ALXREC.CAMSG;
    end
    ;
    if (ALXREC.XXX-MSG-NBR != 0) /* Message to display*/
      ;
      if (ALXREC.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ALXREC.XXX-MSG-NBR);
      end /* Message number*/
    else
      AL0EM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    if (ALXREC.XXX-MSG-LOC-ID == " ") /* Message location*/
      AL0EM001.XXX-MSG-LOC-ID = "AL0E    ";
    else
      AL0EM001.XXX-MSG-LOC-ID = ALXREC.XXX-MSG-LOC-ID;
    end
    ;
    set AL0EM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse AL0EM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  ALXREC.XXX-MSG-LOC-ID = " "; /* Message location*/
  ALXREC.XXX-MSG-NBR = 0; /* Message number*/
  ALXREC.CAMSG = " "; /* AL message text*/
  COMMAREA.CAMSG = " "; /* Message text*/
  AL0EM001.AL0EM-MESSAGE = " ";
  ;
  COMMAREA.CATOAP = AL0EM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = AL0EM001.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AL0EM001.OP1CUOID initialAttributes; /* Order nbr*/
  set AL0EM001.OP1NORID initialAttributes;
  set AL0EM001.XDNCD initialAttributes; /* Deallocation reason code*/
  ;
  if (COMMAREA.CAALVL[1] == "Y"
   && COMMAREA.CAALVL[2] == "Y") /* Commarea add level flags*/
    set AL0EM001.XXX-LN-SEL-IND initialAttributes; /* Option selected*/
  else
    set AL0EM001.XXX-LN-SEL-IND invisible, skip; /* no show*/
  end
  ;
  set AL0EM001.CATOAP initialAttributes; /* TO application*/
  set AL0EM001.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end AL0E-11000

// Format data for map 1
Function AL0E-11100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set AL0EM001 initial; /* M001 input/output area*/
  ;
  AL0EW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/
  ;
   /* ------------------------------------------------------------*/
   /* If order nbr is missing, position the cursor on that field.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW01.OP1CUOID == 0) /* Order nbr missing*/
    set AL0EM001.OP1CUOID cursor; /* Position cursor*/
  else
    ;
    if (AL0EW01.OP1NORID == 0)
      set AL0EM001.OP1NORID cursor;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EM001.OP1CUOID = AL0EW01.OP1CUOID; /* Order nbr*/
  AL0EM001.OP1NORID = AL0EW01.OP1NORID;
  ;
  if (COMMAREA.CAALVL[1] == "Y"
   && COMMAREA.CAALVL[2] == "Y") /* Commarea add level flags*/
    ;
    set AL0EM001.XXX-LN-SEL-IND initialAttributes;
    AL0EM001.XXX-LN-SEL-IND = AL0EW01.XXX-LN-SEL-IND;
    ;
  else
    ;
    set AL0EM001.XXX-LN-SEL-IND skip, noHighLight;
    ;
  end
  ;
  AL0EM001.XDNCD = AL0EW01.XDNCD; /* Deallocation reason code*/
  ;
  ;
end // end AL0E-11100

// Check attention identifier
Function AL0E-12000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (AL0EW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set AL0EW01 empty; /* M001 display storage*/
    end
    ;
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSALS-EXIT(); /* Exit to another application*/
      ;
      set AL0EM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      ALXREC.XXX-MSG-LOC-ID = "12000"; /* Message location*/
      converseLib.validationFailed(303); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AL0EM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AL0M"; /* System Menu*/
    end
    ;
    XSALS-EXIT(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    ALXREC.XXX-MSG-LOC-ID = "12000"; /* Message location*/
    converseLib.validationFailed(1); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end AL0E-12000

// Verify the entered data
Function AL0E-13000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM001.CAITEM > " ") /* Application data was entered*/
    ;
    ALXREC.XXX-MSG-LOC-ID = "13000"; /* Message location*/
    converseLib.validationFailed(195); /* Enter only with FAST PATH*/
    set AL0EM001.CAITEM cursor, bold; /* Highlight*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If key field changed, determine if any other field changed.*/
   /* ------------------------------------------------------------*/
  ;
  AL0E-13100(); /* Check for required key fields*/
  ;
  if (AL0EM001.OP1CUOID != AL0EW01.OP1CUOID 
   || AL0EM001.OP1NORID != AL0EW01.OP1NORID /* Order nbr changed*/
   || COMMAREA.CAFROMAP == "AL0D")          /* xfer in from AL0D*/
    ;
    set AL0EW01 empty;
    set AL0EW02 empty;
    set AL0EW03 empty;
    ;
    AL0EW01.AL0EW-FIRST-PASS-PACK-FL = "Y";
    ;
    AL0E-13200(); /* Select order data and*/
                                   /* other related data*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify related data.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf6) /* View product summary*/
    ;
    if (AL0EW01.AL0EW-MULTI-ALLOC-FL == "Y") /* Multiples exist*/
      ALXREC.XXX-MSG-LOC-ID = "13000";
      converseLib.validationFailed(405); /* Option not allowed w/Multiple alocs*/
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf20) /* Deallocate Order*/
    ;
    if (AL0EW01.AL0EW-MULTI-ALLOC-FL == "Y") /* Can't Deallocate Order*/
      ALXREC.XXX-MSG-LOC-ID = "13000";
      converseLib.validationFailed(406); /* Dealloc Not allowed, Multiple alocs*/
    end
    ;
    if (AL0EW01.AL0EW-PEND-ALLOC-FL == "Y") /* Pending Dealloc, cont*/
      ALXREC.XXX-MSG-LOC-ID = "13000";
      converseLib.validationFailed(412); /* Pending Dealloc, continue*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end AL0E-13000

// Check for required key fields
Function AL0E-13100()
   /* ------------------------------------------------------------*/
   /* Verify deallocation reason code.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM001.XDNCD in XDNTBL.XDNCD) /* Exist in table*/
    ;
    if (XDNTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active*/
      /* next sentence*/
    else
      ALXREC.XXX-MSG-LOC-ID = "13100"; /* Message location*/
      converseLib.validationFailed(4); /* Invalid field*/
      set AL0EM001.XDNCD cursor, bold;
    end
    ;
  else
    ;
    ALXREC.XXX-MSG-LOC-ID = "13100"; /* Message location*/
    converseLib.validationFailed(4); /* Invalid field*/
    set AL0EM001.XDNCD cursor, bold;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify an option is entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    if (AL0EM001.XXX-LN-SEL-IND == "1" /* Deallocate entire order*/
     || AL0EM001.XXX-LN-SEL-IND == "2" /* Allocation List*/
     || AL0EM001.XXX-LN-SEL-IND == "3") /* View product summary*/
      /* next sentence*/
    else
      ALXREC.XXX-MSG-LOC-ID = "13100"; /* Message location*/
      converseLib.validationFailed(4); /* Invalid field*/
      set AL0EM001.XXX-LN-SEL-IND cursor, bold; /* Highlight*/
    end
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* If a valid pf key is pressed.*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is pf5 /* Allocation List*/
     || converseVar.eventKey is pf6 /* View product summary*/
     || converseVar.eventKey is pf20) /* Deallocate entire order*/
      /* next sentence*/
    else
      ALXREC.XXX-MSG-LOC-ID = "13100"; /* Message location*/
      converseLib.validationFailed(4); /* Invalid field*/
      set AL0EM001.XXX-LN-SEL-IND cursor, bold; /* Highlight*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that an order number was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM001.OP1NORID <= 0) /* Nike ord id not entered*/
    ALXREC.XXX-MSG-LOC-ID = "13100"; /* Message location*/
    converseLib.validationFailed(55); /* Order nbr not entered*/
    set AL0EM001.OP1NORID cursor, bold; /* Highlight*/
  end
  ;
  if (AL0EM001.OP1CUOID <= 0) /* Cust ord id not entered*/
    ALXREC.XXX-MSG-LOC-ID = "13100"; /* Message location*/
    converseLib.validationFailed(55); /* Order nbr not entered*/
    set AL0EM001.OP1CUOID cursor, bold; /* Highlight*/
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if any allocation with a status of blank or 'A'*/
   /* (allocated) exists in the Mirror Pool*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM001.OP1CUOID > 0 /* Cust ord id entered*/
   && AL0EM001.OP1NORID > 0) /* Nike ord id entered*/
    ;
    set VMPOLH01 empty;
    set EPIREC empty;
    ;
    if (AL0EW01.XWHCD > " ")
      VMPOLH01.XWH-WHSE-CD = AL0EW01.XWHCD;
    else
      if (COMMAREA.XWHCD > " ")
        VMPOLH01.XWH-WHSE-CD = COMMAREA.XWHCD;
      else
        VMPOLH01.XWH-WHSE-CD = "51";
      end
    end
    ;
    VMPOLH01.PK-ORD-STKTF-ID = AL0EM001.OP1CUOID; /* Cust ord id*/
    VMPOLH01.PK-NIKE-ORD-ID = AL0EM001.OP1NORID; /* Nike ord id*/
    VMPOLH01.PK-NBR-TIMES-ALOC = -1; /* Allocation number*/
    ;
    EPIREC.EPI-IO-TASK = "T1";
    EPIREC.EPI-DCMS-ORD-STAT-CD1 = "A";
    ;
    AL0ES-VMPOLH01-SC(); /* Select count Mirror header*/
    ;
    if (EPIREC.EPI-PK-ORD-CNT == 0) /* No allocations exist for stat*/
                                  /* cds 'a' & ' '*/
      /* check for any presents of the order in Mirror Pool*/
      ;
      EPIREC.EPI-DCMS-ORD-STAT-CD2 = "S";
      EPIREC.EPI-DCMS-ORD-STAT-CD3 = "R";
      EPIREC.EPI-DCMS-ORD-STAT-CD4 = "P";
      EPIREC.EPI-DCMS-ORD-STAT-CD5 = "H";
      EPIREC.EPI-DCMS-ORD-STAT-CD6 = "V";
      ;
      AL0ES-VMPOLH01-SC();
      ;
      if (EPIREC.EPI-PK-ORD-CNT == 0) /* Order is not in Mirror Pool*/
        ;
        ALXREC.OP1CUOID = AL0EM001.OP1CUOID; /* pass cust nbr*/
        ALXREC.OP1NORID = AL0EM001.OP1NORID;
        ALXREC.XXX-MSG-NBR = 413;
        COMMAREA.CATOAP = "AL0D"; /**/
        ;
        XSALS-EXIT();
        ;
        ALXREC.XXX-MSG-LOC-ID = "13100";
        converseLib.validationFailed(413); /* Order not found*/
        ;
        exit stack;
        ;
      else
        ;
        ALXREC.XXX-MSG-LOC-ID = "13100";
        converseLib.validationFailed(407); /* DCMS not valid for dealloc.*/
        exit stack;
        ;
      end
      ;
    end
    ;
    AL0EW01.AL0EW-MULTI-ALLOC-FL = "N"; /* No multiple allocs*/
    ;
    if (EPIREC.EPI-PK-ORD-CNT > 1) /* Multiple allocations exist*/
      AL0EW01.AL0EW-MULTI-ALLOC-FL = "Y";
      ;
      if (AL0EM001.XXX-LN-SEL-IND == "1" /* Deallocate entire order*/
       || AL0EM001.XXX-LN-SEL-IND == "3") /* Product summary*/
        ALXREC.XXX-MSG-LOC-ID = "13100"; /* Message location*/
        converseLib.validationFailed(405); /* Multiples exist, opt not allowed*/
        set AL0EM001.XXX-LN-SEL-IND cursor, bold; /* Highlight*/
        exit stack;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end AL0E-13100

// Select order and related data
Function AL0E-13200()
   /* ------------------------------------------------------------*/
   /* If an error was found, return.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Select order in Mirror Pool when only one allocation exists*/
   /* ------------------------------------------------------------*/
  ;
  set VMPOLH01 empty;
  set EPIREC empty;
  ;
  if (AL0EW01.XWHCD > " ")
    VMPOLH01.XWH-WHSE-CD = AL0EW01.XWHCD;
  else
    if (COMMAREA.XWHCD > " ")
      VMPOLH01.XWH-WHSE-CD = COMMAREA.XWHCD;
    else
      VMPOLH01.XWH-WHSE-CD = "51";
    end
  end
  ;
  VMPOLH01.PK-ORD-STKTF-ID = AL0EM001.OP1CUOID; /* Cust ord id*/
  VMPOLH01.PK-NIKE-ORD-ID = AL0EM001.OP1NORID; /* Nike ord id*/
  VMPOLH01.PK-NBR-TIMES-ALOC = -1; /* Allocation number*/
  ;
  EPIREC.EPI-IO-TASK = "S4";
  EPIREC.EPI-DCMS-ORD-STAT-CD1 = "A";
  ;
  AL0ES-VMPOLH01-SS(); /* Sel Scan 4 on Mirror pool hdr*/
  ;
  EPIREC.EPI-IO-TASK = "N4";
  AL0ES-VMPOLH01-SN(); /* Sel Next 4 on Mirror pool hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Order Allocation found*/
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* No order allocation found*/
      ;
      ALXREC.XXX-MSG-LOC-ID = "13200";
      converseLib.validationFailed(56); /* Order not found*/
      set AL0EM001.OP1CUOID cursor, bold; /* Highlight*/
      ;
      EPIREC.EPI-IO-TASK = "C4";
      AL0ES-VMPOLH01-CS(); /* Sel close on Mirror pool hdr*/
      ;
      return;
      ;
    end
    ;
  end
  ;
  EPIREC.EPI-IO-TASK = "C4";
  AL0ES-VMPOLH01-CS(); /* Sel close on Mirror pool hdr*/
  ;
  AL0EW01.XWHCD = VMPOLH01.XWH-WHSE-CD; /* Warehouse*/
  AL0EW01.AL0EW-OP1CUOID = VMPOLH01.PK-ORD-STKTF-ID; /* Fmt part char*/
  AL0EW01.OP1CUOID = VMPOLH01.PK-ORD-STKTF-ID; /* / Order nbr*/
  AL0EW01.OP1NORID = VMPOLH01.PK-NIKE-ORD-ID;
  ;
  AL0EW01.OP1NTMAL = VMPOLH01.PK-NBR-TIMES-ALOC; /* Nbr of time alloc*/
  AL0EW01.DCMS-ORD-STAT-CD = VMPOLH01.DCMS-ORD-STAT-CD;
  AL0EW01.OP1CUNDT = VMPOLH01.OP-CUST-NEED-DT; /* Customer need date*/
  AL0EW01.XSO-SLS-OFC-ID = VMPOLH01.XSO-SLS-OFC-ID; /* Sales Ofc cd*/
  AL0EW01.XPA-CUST-PACK-CD = VMPOLH01.XPA-CUST-PACK-CD;
  AL0EW01.PK-SEL-IND = VMPOLH01.PK-SEL-IND; /* Select Indicator*/
  ;
   /* ------------------------------------------------------------*/
   /* Interpet the order status literal.*/
   /* ------------------------------------------------------------*/
  ;
  AL0ES-STATUS-LITS();
  ;
  AL0ES-HEADING-INFO();
  ;
   /* ------------------------------------------------------------*/
   /* Check for deallocation batch request.*/
   /* ------------------------------------------------------------*/
  ;
  set ALHREC empty;
  ;
  AL0EW01.AL0EW-BATCH-DALOC-FL = "N";
  ;
  ALHREC.ALHRQT = "A";
  ;
  AL0ES-IO2660-S1(); /* Cursor to batch request table*/
  AL0ES-IO2660-N1(); /* Fetch first row*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0
   && AL0EW01.AL0EW-BATCH-DALOC-FL == "N")
    ;
    if (AL0EW01.OP1CUOID == ALHREC.OP1CUOID
     && AL0EW01.OP1NORID == ALHREC.OP1NORID)
      AL0EW01.AL0EW-BATCH-DALOC-FL = "Y";
    end
    ;
    AL0ES-IO2660-N1(); /* Fetch next row*/
    ;
  end
  ;
  AL0ES-IO2660-C1(); /* Close cursor*/
  ;
  if (AL0EW01.AL0EW-BATCH-DALOC-FL == "Y") /* Batch dealloc request*/
    ;
    if (AL0EM001.XXX-LN-SEL-IND == "1") /* Deallocate entire order*/
      ALXREC.XXX-MSG-LOC-ID = "13200"; /* Message location*/
      converseLib.validationFailed(52); /* Pending batch request, Enter to cont*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check for Pending DCMS Deallocation Confirmation*/
   /* ------------------------------------------------------------*/
  ;
  AL0EW01.AL0EW-PEND-ALLOC-FL = "N";
  ;
  if (VMPOLH01.PK-SEL-IND > " ")
    ;
    AL0EW01.AL0EW-PEND-ALLOC-FL = "Y";
    ;
    if (AL0EM001.XXX-LN-SEL-IND == "1") /* Deallocate entire order*/
      ALXREC.XXX-MSG-LOC-ID = "13200"; /* Message location*/
      converseLib.validationFailed(412); /* Pending DCMS Confirmation, enter to cont.*/
    end
    ;
  end
  ;
end // end AL0E-13200

// Process valid input request
Function AL0E-14000()
   /* ------------------------------------------------------------*/
   /* Save any field that was changed in the map display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM001.OP1CUOID != AL0EW01.OP1CUOID)
    AL0EW01.OP1CUOID = AL0EM001.OP1CUOID;
  end
  ;
  if (AL0EM001.OP1NORID != AL0EW01.OP1NORID)
    AL0EW01.OP1NORID = AL0EM001.OP1NORID;
  end
  ;
  if (AL0EM001.XXX-LN-SEL-IND != AL0EW01.XXX-LN-SEL-IND)
    AL0EW01.XXX-LN-SEL-IND = AL0EM001.XXX-LN-SEL-IND;
  end
  ;
  if (AL0EM001.XDNCD != AL0EW01.XDNCD)
    AL0EW01.XDNCD = AL0EM001.XDNCD;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check option selected or PF key pressed to display*/
   /* corresponding map.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM001.XXX-LN-SEL-IND == "2" /* Allocation list*/
   || converseVar.eventKey is pf5)  
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    AL0EW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    AL0EW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
    return;
  end
  ;
  if (AL0EM001.XXX-LN-SEL-IND == "3" /* View product summary*/
   || converseVar.eventKey is pf6)  
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    AL0EW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    AL0EW00.XXX-MAP-DSP-CD = "3"; /* Map to be displayed*/
    return;
  end
  ;
  AL0EW00.AL0EW-ORD-ITM-DALOC-IND = "O"; /* Deallocate entire order*/
  ;
  AL0E-70000(); /* Perform deallocation*/
  ;
  if (converseVar.validationMsgNum > 0) /* If error*/
    return;
  end
  ;
  if (AL0EW01.DCMS-ORD-STAT-CD > " ")
    AL0E-74000(); /* Submit Order dealloc Job*/
  else
    converseLib.validationFailed(82); /* Deallocation Successful*/
  end
  ;
  set AL0EW01 empty;
  ;
  AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
  AL0EW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
  ;
  ;
end // end AL0E-14000

// Main process to display map 2
Function AL0E-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Verify the data that was entered.*/
   /* 4) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AL0E-21000(); /* Obtain the data to display*/
  ;
  AL0E-22000(); /* Format and display the map*/
  ;
  AL0E-23000(); /* Check attention identifier*/
  ;
  AL0E-24000(); /* Verify the entered data*/
  ;
  AL0E-25000(); /* Process valid input request*/
  ;
  ;
end // end AL0E-20000

// Obtain data to display
Function AL0E-21000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or and error was found*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize order allocation information table of 100 occurrences*/
   /* ------------------------------------------------------------*/
  ;
  AL0E-81000(); /* Obtain allocations to process*/
  ;
   /* ------------------------------------------------------------*/
   /* If no rows were selected, indicate no data to display*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW02.PK-NBR-TIMES-ALOC[1] == 0) /* If no allocations*/
    ;
    ALXREC.XXX-MSG-LOC-ID = "21000"; /* message location*/
    converseLib.validationFailed(408); /* Order not found in Mirror pool*/
    ;
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
    ;
    exit stack;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the request for data is complete*/
   /* ------------------------------------------------------------*/
  ;
  AL0EW00.XXX-INX-FLD-NBR = 1;
  ;
  AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
  ;
  ;
end // end AL0E-21000

// Format and display map 2
Function AL0E-22000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ALXREC.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    AL0E-22100(); /* Format the data in the map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EM002.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AL0EM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AL0EM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (ALXREC.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " "   /* or message text*/
   || ALXREC.CAMSG != " ")    /* or AL message text*/
    ;
    if (ALXREC.CAMSG != " ") /* AL message text*/
      AL0EM002.AL0EM-MESSAGE = ALXREC.CAMSG;
    end
    ;
    if (ALXREC.XXX-MSG-NBR != 0) /* Message to display*/
      ;
      if (ALXREC.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ALXREC.XXX-MSG-NBR);
      end /* Message number*/
    else
      AL0EM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    AL0EM002.XXX-MSG-LOC-ID = ALXREC.XXX-MSG-LOC-ID;
                                   /* Message location*/
    ;
    set AL0EM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse AL0EM002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  ALXREC.XXX-MSG-LOC-ID = " "; /* Message location*/
  ALXREC.XXX-MSG-NBR = 0; /* Message number*/
  ALXREC.CAMSG = " "; /* AL Message text*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = AL0EM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = AL0EM002.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EW00.AL0EW-MAP-INDEX = 1;
  ;
  while (AL0EW00.AL0EW-MAP-INDEX <= 12)
    ;
    set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] initialAttributes;
    ;
    if (AL0EM002.PK-NBR-TIMES-ALOC[AL0EW-MAP-INDEX] == 0)
      set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] skip, noHighLight;
    else
      ;
      if (AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == "N")
        set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] skip;
      end
      ;
    end
    ;
    AL0EW00.AL0EW-MAP-INDEX = AL0EW00.AL0EW-MAP-INDEX + 1;
    ;
  end
  ;
  ;
  set AL0EM002.CATOAP initialAttributes; /* TO application*/
  set AL0EM002.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end AL0E-22000

// Format data for map 2
Function AL0E-22100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set AL0EM002 initial; /* M002 input/output area*/
  ;
  AL0EW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EM002.OP1CUOID = AL0EW01.OP1CUOID; /* Order nbr*/
  AL0EM002.OP1NORID = AL0EW01.OP1NORID;
  ;
  AL0EM002.AL0EM-CUST-ID = AL0EW01.AL0EW-CUST-ID; /* Customer id*/
  AL0EM002.KUMSTRNM = AL0EW01.KUMSTRNM; /* Customer name*/
  ;
  AL0EM002.XWHSABRV = AL0EW01.XWHSABRV; /* Warehouse abbreviation*/
  AL0EM002.OP1CUNDT = AL0EW01.OP1CUNDT; /* Customer need date*/
  ;
  AL0EW02.AL0EW-SET-CURSOR-FL = "N";
  ;
  AL0EW00.AL0EW-MAP-INDEX = 1;
  ;
  while (AL0EW00.AL0EW-MAP-INDEX <= 12
   && AL0EW00.XXX-INX-FLD-NBR <= AL0EW02.AL0EW-NBR-OF-ALLOCS)
    ;
    AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] = AL0EW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR]; /* Select ind*/
    ;
    if (AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == "N")
      set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] skip, noHighLight;
    else
      set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] initialAttributes;
      ;
      if (AL0EW02.AL0EW-SET-CURSOR-FL == "N")
        AL0EW02.AL0EW-SET-CURSOR-FL = "Y";
        set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] cursor;
      end
      ;
    end
    ;
    AL0EM002.PK-NBR-TIMES-ALOC[AL0EW-MAP-INDEX] = AL0EW02.PK-NBR-TIMES-ALOC[XXX-INX-FLD-NBR]; /* allocation nbr*/
    AL0EM002.AL0EM-DCMS-ORD-ST[AL0EW-MAP-INDEX] = AL0EW02.AL0EW-DCMS-ORD-ST[XXX-INX-FLD-NBR]; /* Alloc status*/
    AL0EM002.PK-TOT-ORD-QTY[AL0EW-MAP-INDEX] = AL0EW02.PK-TOT-ORD-QTY[XXX-INX-FLD-NBR]; /* Total Alloc Qty*/
    ;
     /*  */
     /* Save top and bottom product indexes*/
     /*  */
    ;
    if (AL0EW00.AL0EW-MAP-INDEX == 1)
      AL0EW00.AL0EW-TOP-INDEX = AL0EW00.XXX-INX-FLD-NBR;
    end
    ;
    AL0EW00.AL0EW-BOT-INDEX = AL0EW00.XXX-INX-FLD-NBR;
    ;
     /*  */
     /* Increment map and alloc indexes*/
     /*  */
    ;
    AL0EW00.XXX-INX-FLD-NBR = AL0EW00.XXX-INX-FLD-NBR + 1;
    ;
    AL0EW00.AL0EW-MAP-INDEX = AL0EW00.AL0EW-MAP-INDEX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Protect/darken unfilled lines.*/
   /* ------------------------------------------------------------*/
  ;
  while (AL0EW00.AL0EW-MAP-INDEX <= 12)
    ;
    set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] skip, noHighLight;
    ;
    AL0EW00.AL0EW-MAP-INDEX = AL0EW00.AL0EW-MAP-INDEX + 1;
    ;
  end
  ;
  ;
end // end AL0E-22100

// Check attention identifier
Function AL0E-23000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (AL0EW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set AL0EW01 empty; /* M001 display storage*/
    end
    ;
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSALS-EXIT(); /* Exit to another application*/
      ;
      set AL0EM002.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      ALXREC.XXX-MSG-LOC-ID = "23000"; /* Message location*/
      converseLib.validationFailed(303); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AL0EM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      set AL0EW01 empty;
      AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      AL0EW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
      exit stack;
    end
    ;
    XSALS-EXIT(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    ALXREC.XXX-MSG-LOC-ID = "23000"; /* Message location*/
    converseLib.validationFailed(1); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end AL0E-23000

// Verify the entered data
Function AL0E-24000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM002.CAITEM > " ") /* Application data was entered*/
    ;
    ALXREC.XXX-MSG-LOC-ID = "24000"; /* Message location*/
    converseLib.validationFailed(195); /* Enter only with FAST PATH*/
    set AL0EM002.CAITEM cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify changed fields.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EW00.AL0EW-MAP-INDEX = 1;
  AL0EW00.AL0EW-NBR-OF-SELECTS = 0;
  ;
  AL0EW00.XXX-INX-FLD-NBR = AL0EW00.AL0EW-TOP-INDEX;
  ;
  while (AL0EW00.AL0EW-MAP-INDEX <= 12
   && AL0EW00.XXX-INX-FLD-NBR <= AL0EW02.AL0EW-NBR-OF-ALLOCS)
    ;
    if (AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] != 
    AL0EW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR])
      ;
      if (AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == " "
       || AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == "S")
        ;
        AL0EW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX];
        ;
        if (AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == "S"
         && converseVar.eventKey is pf6) /* View product summary*/
          ;
          AL0EW00.AL0EW-NBR-OF-SELECTS = AL0EW00.AL0EW-NBR-OF-SELECTS + 1;
          ;
          if (AL0EW00.AL0EW-NBR-OF-SELECTS > 1)
            ALXREC.XXX-MSG-LOC-ID = "24000"; /* Message location*/
            converseLib.validationFailed(6); /* Only one select allowed*/
            set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] cursor, bold;
          end
          ;
        end
        ;
        if (AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == "S"
         && converseVar.eventKey is pf20) /* Requested Deallocation*/
          ;
          if (AL0EW02.PK-SEL-IND[AL0EW-MAP-INDEX] > " ")
            ALXREC.XXX-MSG-LOC-ID = "24000"; /* Message location*/
            converseLib.validationFailed(412); /* Pending Deallocation*/
            set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] cursor, bold;
          end
          ;
        end
        ;
      else
        ALXREC.XXX-MSG-LOC-ID = "24000"; /* Message location*/
        ;
        if (converseVar.validationMsgNum == 5)
          set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] bold; /* Highlight*/
        else
          converseLib.validationFailed(5); /* Enter 'S' or ' '*/
          set AL0EM002.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] cursor, bold;
        end
        ;
      end
      ;
    end
    ;
    AL0EW00.AL0EW-MAP-INDEX = AL0EW00.AL0EW-MAP-INDEX + 1;
    AL0EW00.XXX-INX-FLD-NBR = AL0EW00.XXX-INX-FLD-NBR + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify browsing conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Backward browsing*/
    ;
    if (AL0EW00.AL0EW-TOP-INDEX == 1)
      ALXREC.XXX-MSG-LOC-ID = "24000"; /* Message location*/
      converseLib.validationFailed(40); /* No more backward browsing possible*/
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf8) /* Forward browsing*/
    ;
    AL0EW00.AL0EW-BOT-INDEX = AL0EW00.AL0EW-BOT-INDEX + 1;
    ;
    if (AL0EW00.AL0EW-BOT-INDEX >= AL0EW02.AL0EW-NBR-OF-ALLOCS)
      ALXREC.XXX-MSG-LOC-ID = "24000"; /* Message location*/
      converseLib.validationFailed(41); /* No more forward browsing possible*/
    end
    ;
    AL0EW00.AL0EW-BOT-INDEX = AL0EW00.AL0EW-BOT-INDEX - 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify related data.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EM002.AL0EM-MESSAGE = " ";
  ;
  if (converseVar.eventKey is enter
   && converseVar.validationMsgNum == 0) /* No error*/
    ;
    if ("S" in AL0EW02.XXX-LN-SEL-IND) /* Allocation selected*/
      AL0EM002.AL0EM-MESSAGE = "PRESS PF20 TO DEALLOCATE SELECTED ALLOCATIONS";
    else
      AL0EM002.AL0EM-MESSAGE = "PLEASE SELECT ALLOCATIONS THAT NEED TO BE DEALLOCATED (IF ANY) OR EXIT";
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf20 /* Deallocate*/
   && converseVar.validationMsgNum == 0) /* No error*/
    ;
    if ("S" in AL0EW02.XXX-LN-SEL-IND) /* Allocation selected*/
       /* next sentence*/
    else
      AL0EM002.AL0EM-MESSAGE = "PLEASE SELECT ALLOCATIONS THAT NEED TO BE DEALLOCATED (IF ANY) OR EXIT";
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf6 /* View product summary*/
   && converseVar.validationMsgNum == 0) /* No error*/
    ;
    if ("S" in AL0EW02.XXX-LN-SEL-IND) /* Allocation selected*/
      /* next sentence*/
    else
      AL0EM002.AL0EM-MESSAGE = "PLEASE SELECT ONE ALLOCATION TO VIEW PRODUCT SUMMARY";
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0 /* Error was found*/
   || AL0EM002.AL0EM-MESSAGE != " ")   
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end AL0E-24000

// Process valid input request
Function AL0E-25000()
   /* ------------------------------------------------------------*/
   /* Check PF key pressed to display corresponding map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf6) /* View product summary*/
    ;
    while ("S" in AL0EW02.XXX-LN-SEL-IND) /* View items for selection*/
      AL0EW02.AL0EW-CURR-INX2 = sysVar.arrayIndex; /* Current alloc index*/
      ;
      AL0EW01.OP1NTMAL = AL0EW02.PK-NBR-TIMES-ALOC[AL0EW-CURR-INX2];
      AL0EW01.DCMS-ORD-STAT-CD = AL0EW02.DCMS-ORD-STAT-CD[AL0EW-CURR-INX2];
      AL0EW01.AL0EW-DCMS-ORD-ST = AL0EW02.AL0EW-DCMS-ORD-ST[AL0EW-CURR-INX2];
      AL0EW01.XSO-SLS-OFC-ID = AL0EW02.XSO-SLS-OFC-ID[AL0EW-CURR-INX2];
      AL0EW01.XPA-CUST-PACK-CD = AL0EW02.XPA-CUST-PACK-CD[AL0EW-CURR-INX2];
      AL0EW01.PK-SEL-IND = AL0EW02.PK-SEL-IND[AL0EW-CURR-INX2];
      ;
      AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      AL0EW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
      AL0EW00.XXX-MAP-DSP-CD = "3"; /* Map to be displayed*/
      return;
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf7) /* View allocations, backward browse*/
    ;
    if (AL0EW00.AL0EW-TOP-INDEX <= 12)
      AL0EW00.XXX-INX-FLD-NBR = 1;
    else
      AL0EW00.XXX-INX-FLD-NBR = AL0EW00.AL0EW-TOP-INDEX - 12;
    end
    ;
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
    return;
    ;
  end
  ;
  if (converseVar.eventKey is pf8) /* View allocations, forward browse*/
    AL0EW00.XXX-INX-FLD-NBR = AL0EW00.AL0EW-BOT-INDEX;
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* View allocations*/
    return;
  end
  ;
  AL0EW00.AL0EW-ORD-ITM-DALOC-IND = "O"; /* Deallocate by allocation*/
  ;
  while ("S" in AL0EW02.XXX-LN-SEL-IND) /* Process selected allocation*/
    AL0EW02.XXX-LN-SEL-IND[sysVar.arrayIndex] = "*";
    AL0EW02.AL0EW-CURR-INX2 = sysVar.arrayIndex; /* Current alloc index*/
    ;
    AL0EW01.OP1NTMAL = AL0EW02.PK-NBR-TIMES-ALOC[AL0EW-CURR-INX2];
    AL0EW01.DCMS-ORD-STAT-CD = AL0EW02.DCMS-ORD-STAT-CD[AL0EW-CURR-INX2];
    AL0EW01.AL0EW-DCMS-ORD-ST = AL0EW02.AL0EW-DCMS-ORD-ST[AL0EW-CURR-INX2];
    AL0EW01.XSO-SLS-OFC-ID = AL0EW02.XSO-SLS-OFC-ID[AL0EW-CURR-INX2];
    AL0EW01.XPA-CUST-PACK-CD = AL0EW02.XPA-CUST-PACK-CD[AL0EW-CURR-INX2];
    AL0EW01.PK-SEL-IND = AL0EW02.PK-SEL-IND[AL0EW-CURR-INX2];
    ;
    AL0E-70000(); /* Perform deallocation*/
  end
  ;
  if (converseVar.validationMsgNum > 0) /* If error*/
    return;
  end
  ;
  if (AL0EW01.DCMS-ORD-STAT-CD > " ")
    AL0E-74000(); /* Submit Order Dealloc Job*/
  else
    converseLib.validationFailed(82); /* Deallocation Successful*/
  end
  ;
  set AL0EW01 empty;
  ;
  AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
  AL0EW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
  ;
  ;
end // end AL0E-25000

// Main process to display map 3
Function AL0E-30000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AL0E-31000(); /* Obtain the data to display*/
  ;
  AL0E-32000(); /* Format and display the map*/
  ;
  AL0E-33000(); /* Check attention identifier*/
  ;
  AL0E-34000(); /* Verify the entered data*/
  ;
  AL0E-35000(); /* Process valid input request*/
  ;
  ;
end // end AL0E-30000

// Obtain data to display
Function AL0E-31000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize line item information table of 900 occurrences.*/
   /* ------------------------------------------------------------*/
  ;
  AL0E-80000(); /* Obtain line items to process*/
  ;
   /* ------------------------------------------------------------*/
   /* If no rows were selected, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW03.AL0EW-PRODUCT-ID[1] == " ") /* If no line item*/
    ;
    ALXREC.XXX-MSG-LOC-ID = "31000"; /* Message location*/
    converseLib.validationFailed(304); /* No product to deallocate*/
    ;
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify Pending Deallocation request*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW01.AL0EW-PEND-ALLOC-FL == "Y")
    ;
    ALXREC.XXX-MSG-LOC-ID = "31000"; /* Message location*/
    converseLib.validationFailed(412); /* Pending deallocation rqst*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EW00.XXX-INX-FLD-NBR = 1;
  ;
  AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
  ;
  ;
end // end AL0E-31000

// Format and display map 3
Function AL0E-32000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ALXREC.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    AL0E-32100(); /* Format the data in the map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EM003.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AL0EM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AL0EM003.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (ALXREC.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " "   /* or message text*/
   || ALXREC.CAMSG != " ")    /* or AL message text*/
    ;
    if (ALXREC.CAMSG != " ") /* AL message text*/
      AL0EM003.AL0EM-MESSAGE = ALXREC.CAMSG;
    end
    ;
    if (ALXREC.XXX-MSG-NBR != 0) /* Message to display*/
      ;
      if (ALXREC.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ALXREC.XXX-MSG-NBR);
      end /* Message number*/
    else
      AL0EM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    AL0EM003.XXX-MSG-LOC-ID = ALXREC.XXX-MSG-LOC-ID;
                                   /* Message location*/
    ;
    set AL0EM003 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse AL0EM003 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  ALXREC.XXX-MSG-LOC-ID = " "; /* Message location*/
  ALXREC.XXX-MSG-NBR = 0; /* Message number*/
  ALXREC.CAMSG = " "; /* AL Message text*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = AL0EM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = AL0EM003.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AL0EW00.AL0EW-MAP-INDEX = 1;
  ;
  while (AL0EW00.AL0EW-MAP-INDEX <= 12)
    ;
    set AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] initialAttributes;
    ;
    if (AL0EM003.AL0EM-PRODUCT-ID[AL0EW-MAP-INDEX] == " ")
      set AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] skip, noHighLight;
    else
      ;
      if (AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == "N")
        set AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] skip;
      end
      ;
    end
    ;
    AL0EW00.AL0EW-MAP-INDEX = AL0EW00.AL0EW-MAP-INDEX + 1;
    ;
  end
  ;
  ;
  set AL0EM003.CATOAP initialAttributes; /* TO application*/
  set AL0EM003.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end AL0E-32000

// Format data for map 3
Function AL0E-32100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set AL0EM003 initial; /* M004 input/output area*/
  ;
  AL0EW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EM003.OP1CUOID = AL0EW01.OP1CUOID; /* Order nbr*/
  AL0EM003.OP1NORID = AL0EW01.OP1NORID;
  AL0EM003.PK-NBR-TIMES-ALOC = AL0EW01.OP1NTMAL;
  ;
  AL0EM003.AL0EM-CUST-ID = AL0EW01.AL0EW-CUST-ID; /* Customer id*/
  AL0EM003.KUMSTRNM = AL0EW01.KUMSTRNM; /* Customer name*/
  ;
  AL0EM003.XWHSABRV = AL0EW01.XWHSABRV; /* Warehouse abbreviation*/
  AL0EM003.AL0EM-DCMS-ORD-ST = AL0EW01.AL0EW-DCMS-ORD-ST;
  AL0EM003.OP1CUNDT = AL0EW01.OP1CUNDT; /* Customer need date*/
  ;
  AL0EW03.AL0EW-SET-CURSOR-FL = "N";
  ;
  AL0EW00.AL0EW-MAP-INDEX = 1;
  ;
  while (AL0EW00.AL0EW-MAP-INDEX <= 12
   && AL0EW00.XXX-INX-FLD-NBR <= AL0EW03.AL0EW-NBR-OF-ITEMS)
    ;
    AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] = AL0EW03.XXX-LN-SEL-IND[XXX-INX-FLD-NBR]; /* Select ind*/
    ;
    if (AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == "N")
      set AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] skip;
    else
      set AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] initialAttributes;
      ;
      if (AL0EW03.AL0EW-SET-CURSOR-FL == "N")
        AL0EW03.AL0EW-SET-CURSOR-FL = "Y";
        set AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] cursor;
      end
      ;
    end
    ;
    AL0EM003.AL0EM-PRODUCT-ID[AL0EW-MAP-INDEX] = AL0EW03.AL0EW-PRODUCT-ID[XXX-INX-FLD-NBR]; /* Product id*/
    ;
    AL0EM003.OP2TONOQ[AL0EW-MAP-INDEX] = AL0EW03.OP2TONOQ[XXX-INX-FLD-NBR]; /* Total on order qty*/
    AL0EM003.PK-TOT-ITEM-QTY[AL0EW-MAP-INDEX] = AL0EW03.PK-TOT-ITEM-QTY[XXX-INX-FLD-NBR]; /* Total alloc qty*/
    ;
     /*  */
     /* Save top and bottom product indexes*/
     /*  */
    ;
    if (AL0EW00.AL0EW-MAP-INDEX == 1)
      AL0EW00.AL0EW-TOP-INDEX = AL0EW00.XXX-INX-FLD-NBR;
    end
    ;
    AL0EW00.AL0EW-BOT-INDEX = AL0EW00.XXX-INX-FLD-NBR;
    ;
     /*  */
     /* Increment map and product indexes*/
     /*  */
    ;
    AL0EW00.XXX-INX-FLD-NBR = AL0EW00.XXX-INX-FLD-NBR + 1;
    ;
    AL0EW00.AL0EW-MAP-INDEX = AL0EW00.AL0EW-MAP-INDEX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Protect/darken unfilled lines.*/
   /* ------------------------------------------------------------*/
  ;
  while (AL0EW00.AL0EW-MAP-INDEX <= 12)
    ;
    set AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] skip, noHighLight;
    ;
    AL0EW00.AL0EW-MAP-INDEX = AL0EW00.AL0EW-MAP-INDEX + 1;
    ;
  end
  ;
  ;
end // end AL0E-32100

// Check attention identifier
Function AL0E-33000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (AL0EW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set AL0EW01 empty; /* M001 display storage*/
    end
    ;
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM003.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSALS-EXIT(); /* Exit to another application*/
      ;
      set AL0EM003.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      ALXREC.XXX-MSG-LOC-ID = "33000"; /* Message location*/
      converseLib.validationFailed(303); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AL0EM003"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      set AL0EW01 empty;
      AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      AL0EW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
      exit stack;
    end
    ;
    XSALS-EXIT(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/
    ;
    ALXREC.XXX-MSG-LOC-ID = "33000"; /* Message location*/
    converseLib.validationFailed(1); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end AL0E-33000

// Verify the entered data
Function AL0E-34000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EM003.CAITEM > " ") /* Application data was entered*/
    ;
    ALXREC.XXX-MSG-LOC-ID = "34000"; /* Message location*/
    converseLib.validationFailed(195); /* Enter only with FAST PATH*/
    set AL0EM003.CAITEM cursor, bold; /* Highlight*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify changed fields.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EW00.AL0EW-MAP-INDEX = 1;
  ;
  AL0EW00.XXX-INX-FLD-NBR = AL0EW00.AL0EW-TOP-INDEX;
  ;
  while (AL0EW00.AL0EW-MAP-INDEX <= 12
   && AL0EW00.XXX-INX-FLD-NBR <= AL0EW03.AL0EW-NBR-OF-ITEMS)
    ;
    if (AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] != 
    AL0EW03.XXX-LN-SEL-IND[XXX-INX-FLD-NBR])
      ;
      if (AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == " "
       || AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] == "S")
        AL0EW03.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX];
      else
        ALXREC.XXX-MSG-LOC-ID = "34000"; /* Message location*/
        ;
        if (converseVar.validationMsgNum == 5)
          set AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] bold; /* Highlight*/
        else
          converseLib.validationFailed(5); /* Enter 'S' or ' '*/
          set AL0EM003.XXX-LN-SEL-IND[AL0EW-MAP-INDEX] cursor, bold;
        end
        ;
      end
      ;
    end
    ;
    AL0EW00.AL0EW-MAP-INDEX = AL0EW00.AL0EW-MAP-INDEX + 1;
    AL0EW00.XXX-INX-FLD-NBR = AL0EW00.XXX-INX-FLD-NBR + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify browsing conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Backward browsing*/
    ;
    if (AL0EW00.AL0EW-TOP-INDEX == 1)
      ALXREC.XXX-MSG-LOC-ID = "34000"; /* Message location*/
      converseLib.validationFailed(40); /* No more backward browsing possible*/
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf8) /* Forward browsing*/
    ;
    AL0EW00.AL0EW-BOT-INDEX = AL0EW00.AL0EW-BOT-INDEX + 1;
    ;
    if (AL0EW00.AL0EW-BOT-INDEX > AL0EW03.AL0EW-NBR-OF-ITEMS)
      ALXREC.XXX-MSG-LOC-ID = "34000"; /* Message location*/
      converseLib.validationFailed(41); /* No more forward browsing possible*/
    end
    ;
    AL0EW00.AL0EW-BOT-INDEX = AL0EW00.AL0EW-BOT-INDEX - 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify related data.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EM003.AL0EM-MESSAGE = " ";
  ;
  if (converseVar.eventKey is enter
   && converseVar.validationMsgNum == 0) /* No error*/
    ;
    if ("S" in AL0EW03.XXX-LN-SEL-IND) /* Item is selected*/
      AL0EM003.AL0EM-MESSAGE = "PRESS PF20 TO DEALLOCATE SELECTED PRODUCTS";
    else
      AL0EM003.AL0EM-MESSAGE = "PLEASE SELECT THE ITEMS THAT NEED TO BE DEALLOCATED (IF ANY) OR EXIT";
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf20 /* Deallocate*/
   && converseVar.validationMsgNum == 0) /* No error*/
    ;
    if ("S" in AL0EW03.XXX-LN-SEL-IND) /* Line item selected*/
      /* next sentence*/
    else
      AL0EM003.AL0EM-MESSAGE = "PLEASE SELECT THE ITEMS THAT NEED TO BE DEALLOCATED (IF ANY) OR EXIT";
    end
    ;
  end
  ;
  if ("S" in AL0EW03.XXX-LN-SEL-IND /* Line item selected*/
   && converseVar.validationMsgNum == 0)
    ;
    if (converseVar.eventKey is pf5) /* View allocation list*/
      AL0EM003.AL0EM-MESSAGE = "ITEMS HAVE BEEN SELECTED - PLEASE PRESS PF20 TO DEALLOCATE";
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0 /* Error was found*/
   || AL0EM003.AL0EM-MESSAGE != " ")   
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end AL0E-34000

// Process valid input request
Function AL0E-35000()
   /* ------------------------------------------------------------*/
   /* Check PF key pressed to display corresponding map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf5) /* View allocation list*/
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    AL0EW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    AL0EW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
    return;
  end
  ;
  if (converseVar.eventKey is pf7) /* View product summ, backward browse*/
    ;
    if (AL0EW00.AL0EW-TOP-INDEX <= 12)
      AL0EW00.XXX-INX-FLD-NBR = 1;
    else
      AL0EW00.XXX-INX-FLD-NBR = AL0EW00.AL0EW-TOP-INDEX - 12;
    end
    ;
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-DSP-CD = "3"; /* Map to be displayed*/
    return;
    ;
  end
  ;
  if (converseVar.eventKey is pf8) /* View product summ, forward browse*/
    AL0EW00.XXX-INX-FLD-NBR = AL0EW00.AL0EW-BOT-INDEX + 1;
    ;
    AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    AL0EW00.XXX-MAP-DSP-CD = "3"; /* Map to be displayed*/
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* View products*/
    return;
  end
  ;
  AL0EW00.AL0EW-ORD-ITM-DALOC-IND = "I"; /* Deallocate by line item*/
  ;
  while ("S" in AL0EW03.XXX-LN-SEL-IND) /* Process selected item*/
    AL0EW03.XXX-LN-SEL-IND[sysVar.arrayIndex] = "*";
    AL0EW03.AL0EW-CURR-INX = sysVar.arrayIndex; /* Current product index*/
    AL0E-70000(); /* Perform deallocation*/
  end
  ;
  if (converseVar.validationMsgNum > 0) /* If error*/
    return;
  end
  ;
  if (AL0EW01.DCMS-ORD-STAT-CD > " ")
    ;
    if (WEP1521.WEP1521-PROCESS-ENTIRE-ORD-FL == "Y")
      AL0E-74000(); /* Submit order dealloc job*/
    else
      AL0E-75000(); /* Submit line item dealloc job*/
    end
    ;
  else
    ;
    converseLib.validationFailed(82); /* Deallocation successful*/
    ;
  end
  ;
  set AL0EW01 empty;
  ;
  AL0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  AL0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
  AL0EW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
  ;
  ;
end // end AL0E-35000

// Process deallocation
Function AL0E-70000()
   /* ------------------------------------------------------------*/
   /* Perform deallocation processing.*/
   /* ------------------------------------------------------------*/
  ;
  set XX0XW01 empty; /* Date and time work area*/
  ;
  XX0XS01(); /* Obtain date and time*/
  ;
  AL0E-71000(); /* Verify deallocation in MVS*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    return;
  end
  ;
  AL0E-73000(); /* Perform MVS deallocation*/
  ;
  ;
end // end AL0E-70000

// Verify MVS/DCMS deallocation
Function AL0E-71000()
   /* ------------------------------------------------------------*/
   /* Verify order status, sent to DCMS or not sent.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW01.DCMS-ORD-STAT-CD == "A" /* Sent to DCMS*/
   || AL0EW01.DCMS-ORD-STAT-CD == " ") /* Not Sent to DCMS*/
    /* next sentence*/
  else
    ALXREC.XXX-MSG-LOC-ID = "71000"; /* Message location*/
    converseLib.validationFailed(407); /* Allocation status invalid*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify pending deallocation in DCMS*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW01.PK-SEL-IND > " ") /* Pending Deallocation*/
    ALXREC.XXX-MSG-LOC-ID = "71000"; /* Message location*/
    converseLib.validationFailed(412); /* Pending Dealloc, continue*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify sales office.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAALVL[1] == "N"
   || COMMAREA.CAALVL[2] == "N")
    ;
    if (AL0EW01.XSO-SLS-OFC-ID == COMMAREA.XSOCD) /* Same sales office*/
      ALXREC.XXX-MSG-LOC-ID = "71000"; /* Message location*/
      converseLib.validationFailed(53); /* Sales office not valid*/
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify if prepack.  If the order is being edited for the*/
   /* first time, confirm prepackaging.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW01.XPA-CUST-PACK-CD == "CU" /* Prepack*/
   || AL0EW01.XPA-CUST-PACK-CD == "IN")
    ;
    if (AL0EW01.AL0EW-FIRST-PASS-PACK-FL == "Y")
      AL0EW01.AL0EW-FIRST-PASS-PACK-FL = "N";
      ALXREC.XXX-MSG-LOC-ID = "71000"; /* Message location*/
      ;
      if (AL0EW00.XXX-MAP-DSP-CD == "1"
       || AL0EW00.XXX-MAP-DSP-CD == "2")
        converseLib.validationFailed(270); /* Prepackaging order, please confirm*/
      end
      ;
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify if Picking is running, sameday and rush runs.*/
   /* ------------------------------------------------------------*/
  ;
  set PWHREC empty;
  ;
  PWHREC.XWHCD = AL0EW01.XWHCD;
  PWHREC.XXXPGMNO = "PK121S"; /* Sameday run*/
  ;
  AL0ES-IO4240-S();
  ;
  if (PWHREC.XXXCMTCT == 1)
    ALXREC.XXX-MSG-LOC-ID = "71000"; /* Message location*/
    converseLib.validationFailed(184); /* Picking is running*/
    return;
  end
  ;
  set PWHREC empty;
  ;
  PWHREC.XWHCD = AL0EW01.XWHCD;
  PWHREC.XXXPGMNO = "PK121R"; /* Rush run*/
  ;
  AL0ES-IO4240-S();
  ;
  if (PWHREC.XXXCMTCT == 1)
    ALXREC.XXX-MSG-LOC-ID = "71000"; /* Message location*/
    converseLib.validationFailed(184); /* Picking is running*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify if DCMS Order Extract is running*/
   /* ------------------------------------------------------------*/
  ;
  set PWHREC empty;
  ;
  PWHREC.XWHCD = AL0EW01.XWHCD;
  PWHREC.XXXPGMNO = "EP121E"; /* DCMS Extract running*/
  ;
  AL0ES-IO4240-S();
  ;
  if (PWHREC.XXXCMTCT == 1)
    ALXREC.XXX-MSG-LOC-ID = "71000"; /* Message location*/
    converseLib.validationFailed(184); /* DCMS Extract is running*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* When deallocating the Whole Order only:*/
   /* Verify if Mirror Pool Items are still on the Order in*/
   /* the DORDER table before processing deallocation request.*/
   /* If the item is missing from the DORDER item table, delete*/
   /* the Mirror Pool Item.*/
   /* ------------------------------------------------------------*/
  ;
  if (AL0EW00.AL0EW-ORD-ITM-DALOC-IND == "O")
    ;
    set VMPOLI01 empty;
    set EPIREC empty;
    ;
    VMPOLI01.XWH-WHSE-CD = AL0EW01.XWHCD;
    VMPOLI01.PK-ORD-STKTF-ID = AL0EW01.OP1CUOID;
    VMPOLI01.PK-NIKE-ORD-ID = AL0EW01.OP1NORID;
    VMPOLI01.PK-NBR-TIMES-ALOC = AL0EW01.OP1NTMAL;
    ;
    EPIREC.EPI-IO-TASK = "S1";
    AL0ES-VMPOLI01-SS();
    ;
    EPIREC.EPI-IO-TASK = "N1";
    AL0ES-VMPOLI01-SN();
    ;
    while (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      AL0ES-IO0440-SU(); /* Find DORDER.VITEM001 row*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* Item not found*/
        AL0ES-DEL-VMPOLI01();
      end
      ;
      AL0ES-VMPOLI01-SN();
      ;
    end
    ;
    EPIREC.EPI-IO-TASK = "C1";
    AL0ES-VMPOLI01-CS();
    ;
  end
  ;
end // end AL0E-71000

// Process MVS/DCMS deallocation
Function AL0E-73000()
   /* ------------------------------------------------------------*/
   /* Process MVS/DCMS deallocation.*/
   /* ------------------------------------------------------------*/
  ;
  set WEP1521 empty; /* EP1520 parameters*/
  ;
   /* ------------------------------------------------------------*/
   /* Format WEP1521 for EP1520 processing.*/
   /* ------------------------------------------------------------*/
  ;
  WEP1521.WEP1521-FUNCTION-CODE = "DA";
  ;
  WEP1521.WEP1521-PROCESS-CODE = "01";
  ;
  WEP1521.XWH-WHSE-CD = AL0EW01.XWHCD;
  WEP1521.OP-ORD-PART-CHAR = AL0EW01.OP1PARTN;
  WEP1521.OP-CUST-ORD-ID = AL0EW01.OP1CUOID;
  WEP1521.OP-NIKE-ORD-ID = AL0EW01.OP1NORID;
  WEP1521.OP-NBR-TM-ALOC = AL0EW01.OP1NTMAL;
  ;
  if (AL0EW00.AL0EW-ORD-ITM-DALOC-IND == "O")
    WEP1521.WEP1521-PROCESS-ENTIRE-ORD-FL = "Y";
                                   /* Deallocate by order*/
  else
    WEP1521.OP-LINE-ITEM-NBR = AL0EW03.OP2LNINB[AL0EW-CURR-INX]; /* Deallocate by line item*/
  end
  ;
  WEP1521.XDN-ALOC-RSN-CD = AL0EW01.XDNCD;
  ;
  WEP1521.XXX-USER-ID = COMMAREA.CAUSERID;
  ;
  WEP1521.ZZ-CHNG-PGM-ID = "AL0E"; /* PROGRAM ID*/
  ;
  WEP1521.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  WEP1521.ZZ-CHNG-HHMMSS = XX0XW01.XX0XWHMS;
  ;
  WEP1521.TA1-GROUP = TA1REC.TA1-GROUP;
  ;
   /* ------------------------------------------------------------*/
   /* Call EP1520 to deallocate.*/
   /* ------------------------------------------------------------*/
  ;
  AL0ES-EP1520(); /* Call EP1520*/
  ;
   /* ------------------------------------------------------------*/
   /* Evaluate EP1520 return.*/
   /* ------------------------------------------------------------*/
  ;
  if (WEP1521.WEP1521-RETURN-CODE == 0000) /* No error*/
    return;
  end
  ;
  if (WEP1521.WEP1521-RETURN-CODE == 0100) /* No line item to deallocate*/
    converseLib.validationFailed(83); /* Deallocation not successful*/
    return;
  end
  ;
   /* Not all items dealoc due to bad status*/
  if (WEP1521.WEP1521-RETURN-CODE == 0110)
    converseLib.validationFailed(127); /* Not all line items deallocated*/
    return;
  end
  ;
   /* No qty to dealoc for the line item*/
  if (WEP1521.WEP1521-RETURN-CODE == 0150)
    if (WEP1521.WEP1521-PROCESS-ENTIRE-ORD-FL == "Y")
      converseLib.validationFailed(127); /* Not all line items deallocated*/
    else
      converseLib.validationFailed(83); /* Deallocation not successful*/
    end
    return;
  end
  ;
   /* Sched nbr not populated*/
   /* Non fatal return from IN9060, no post*/
   /* Non fatal return from AV9060, no post*/
  if (WEP1521.WEP1521-RETURN-CODE == 0120
   || WEP1521.WEP1521-RETURN-CODE == 0160
   || WEP1521.WEP1521-RETURN-CODE == 0170)
    return;
  end
  ;
  if (WEP1521.WEP1521-RETURN-CODE == 8000) /* DB2 deadlock*/
    converseLib.validationFailed(101); /* Database in use*/
    return;
  end
  ;
  if (WEP1521.WEP1521-RETURN-CODE == 8020) /* Inv item not found*/
    converseLib.validationFailed(123); /* No inv, no de-aloc*/
    return;
  end
  ;
  ;
  if (WEP1521.WEP1521-RETURN-CODE == 9060) /* Bad order/line item status*/
    converseLib.validationFailed(84); /* No dealloc to bad order stat*/
    return;
  end
  ;
  TA1REC.TA1-GROUP = WEP1521.TA1-GROUP;
  TAEREC.SQLCAREC = WEP1521.SQLCAREC;
  TA1REC.TA1FUNC = "POST";
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  ;
  ;
end // end AL0E-73000

// DCMS Order Dealloc Submit
Function AL0E-74000()
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  /* Submits the JOB for DCMS Order Dealloction process*/
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  ;
  AL0ES-CICS-REGION(); /* check for CICS region*/
  ;
  if (TA3REC.TA3RGNID == "03") /* PROD Region*/
    AL0E-74010(); /* format production jcl*/
  else
    AL0E-74020(); /* format development jcl*/
  end
  ;
  return;
  ;
end // end AL0E-74000

// SUBMIT PROD ORDER JCL
Function AL0E-74010()
  ;
   /* ------------------------------------------------------------*/
   /* Create and submit Order Deallocation Job - EP1271*/
   /* ------------------------------------------------------------*/
  ;
     /* Initialize the work areas and indexes to be used.*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  set AL0EW04 empty; /* Initialize JCL work area*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  AL0EW04.AL0EWIDX2 = 1; /* Initialize JCL table index*/
  ;
    /* Set condition code to 4 to allow the job to run to completion*/
    /* and treat conditions 0 thru 4 as valid codes*/
  ;
  TA6REC.TA6-MAX-COND-CODE = 0004;
  ;
     /* Format JCL and parameters into the subroutine work area.*/
  ;
  while (AL0EW04.AL0EWIDX2 > 0) /* Until end of table*/
    ;
    if (AL0ET01.TARTYPE[AL0EWIDX2] == " ") /* no tartype*/
      ;
      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0ET01.TARJCL[AL0EWIDX2];
      TA6REC.TARTYPE[TA6INDEX] = AL0ET01.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    ;
    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AL0ET01.TARJCL[AL0EWIDX2] == "/*EOF") /* End of table*/
      ;
      AL0EW04.AL0EWIDX2 = 0; /* Indicate end of table*/
      ;
    else
      ;
      AL0EW04.AL0EWIDX2 = AL0EW04.AL0EWIDX2 + 1;
      ;
    end
    ;
    ;
  end /* *** END WHILE LOOP*/
  ;
     /* Submit the JCL and parameters for batch execution.*/
  ;
  AL0ES-SUBMIT-JCL();
  ;
  ALXREC.XXX-MSG-LOC-ID = "74010";
  ;
     /* Display results of print request.*/
  ;
  if (sysVar.errorCode == "00000000") /* If Submission successful*/
    ;
    ALXREC.CAMSG = COMMAREA.CAMSG; /* Job info message*/
    converseLib.validationFailed(82); /* Deallocation sucessful*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback updates*/
    ;
    ALXREC.CAMSG = COMMAREA.CAMSG; /* Job info message*/
    converseLib.validationFailed(409); /* Error encountered with JOB submit*/
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end AL0E-74010

// SUBMIT TEST ORDER JCL
Function AL0E-74020()
  ;
   /* ------------------------------------------------------------*/
   /* Create and submit test Order JCL - JOB EP1271*/
   /* ------------------------------------------------------------*/
  ;
     /* Initialize the work areas and indexes to be used.*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  set AL0EW04 empty; /* Initialize JCL work area*/
  ;
  AL0EW04.TA3APLID = TA3REC.TA3APLID;
  AL0EW04.TA3DB2SS = TA3REC.TA3DB2SS;
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  AL0EW04.AL0EWIDX2 = 1; /* Initialize JCL table index*/
  ;
   /* Set condition code to 4 to allow the job to run to completion*/
   /* and treat conditions 0 thru 4 as valid codes*/
  ;
  TA6REC.TA6-MAX-COND-CODE = 0004;
  ;
     /* Format JCL and parameters into the subroutine work area.*/
  ;
  while (AL0EW04.AL0EWIDX2 > 0) /* Until end of table*/
    ;
    if (AL0ETT1.TARTYPE[AL0EWIDX2] == "N") /* Parameters statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format the notify statement from the table.*/
       /* ------------------------------------------------------------*/
      ;
      AL0EW04.AL0EW-NOTIFY-CARD = AL0ETT1.TARJCL[AL0EWIDX2];
      AL0EW04.TA3USRID = TA3REC.TA3USRID;
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0EW04.AL0EW-NOTIFY-CARD;
      TA6REC.TARTYPE[TA6INDEX] = AL0ETT1.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    if (AL0ETT1.TARTYPE[AL0EWIDX2] == "1") /* Type statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format the Type statement from the table. (MVSDEVL)*/
       /* ------------------------------------------------------------*/
      ;
      AL0EW04.AL0EW-TYPE-CARD = AL0ETT1.TARJCL[AL0EWIDX2];
      AL0EW04.AL0EW-TYPE-VALUE = AL0EW04.AL0EW-DB2-VALUE;
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0EW04.AL0EW-TYPE-CARD;
      TA6REC.TARTYPE[TA6INDEX] = AL0ETT1.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    if (AL0ETT1.TARTYPE[AL0EWIDX2] == "2") /* Parameters statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format the Systsin statement from the table. (MVSDEVL)*/
       /* ------------------------------------------------------------*/
      ;
      AL0EW04.AL0EW-SYSTSIN-CARD = AL0ETT1.TARJCL[AL0EWIDX2];
      AL0EW04.AL0EW-DSN-VALUE = TA3REC.TA3DB2SS;
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0EW04.AL0EW-SYSTSIN-CARD;
      TA6REC.TARTYPE[TA6INDEX] = AL0ETT1.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    if (AL0ETT1.TARTYPE[AL0EWIDX2] == "3") /* Parameters statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format Level parameter for development region (MVSDEVL)*/
       /* ------------------------------------------------------------*/
      ;
      if (AL0EW04.AL0EW-CICS-LIT == "CICSD")
        ;
        TA6REC.TARJCL[TA6INDEX] = AL0ETT1.TARJCL[AL0EWIDX2];
        TA6REC.TARTYPE[TA6INDEX] = AL0ETT1.TARTYPE[AL0EWIDX2];
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
    end
    ;
    if (AL0ETT1.TARTYPE[AL0EWIDX2] == "4") /* Parameters statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format Level parameter for Test/Psuedo region (MVSDEVL)*/
       /* ------------------------------------------------------------*/
      ;
      if (AL0EW04.AL0EW-CICS-LIT != "CICSD")
        ;
        TA6REC.TARJCL[TA6INDEX] = AL0ETT1.TARJCL[AL0EWIDX2];
        TA6REC.TARTYPE[TA6INDEX] = AL0ETT1.TARTYPE[AL0EWIDX2];
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
    end
    ;
    ;
    if (AL0ETT1.TARTYPE[AL0EWIDX2] == " ") /* no tartype*/
      ;
      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0ETT1.TARJCL[AL0EWIDX2];
      TA6REC.TARTYPE[TA6INDEX] = AL0ETT1.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    ;
    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AL0ETT1.TARJCL[AL0EWIDX2] == "/*EOF") /* End of table*/
      ;
      AL0EW04.AL0EWIDX2 = 0; /* Indicate end of table*/
      ;
    else
      ;
      AL0EW04.AL0EWIDX2 = AL0EW04.AL0EWIDX2 + 1;
      ;
    end
    ;
    ;
  end /* *** END WHILE LOOP*/
  ;
     /* Submit the JCL and parameters for batch execution.*/
  ;
  AL0ES-SUBMIT-JCL();
  ;
  ALXREC.XXX-MSG-LOC-ID = "74020"; /* Message location*/
  ;
     /* Display results of print request.*/
  ;
  if (sysVar.errorCode == "00000000") /* If Submission successful*/
    ;
    ALXREC.CAMSG = COMMAREA.CAMSG; /* Job info message*/
    converseLib.validationFailed(82); /* Deallocation successful*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback Updates*/
    ;
    ALXREC.CAMSG = COMMAREA.CAMSG; /* Job info message*/
    converseLib.validationFailed(409); /* Error encountered with JOB submit*/
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end AL0E-74020

// DCMS Line Dealloc Submit
Function AL0E-75000()
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  /* Submits the JOB for DCMS Line Item  Dealloction process*/
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
  ;
  AL0ES-CICS-REGION(); /* check for CICS region*/
  ;
  if (TA3REC.TA3RGNID == "03") /* PROD Region*/
    AL0E-75010(); /* format production jcl*/
  else
    AL0E-75020(); /* format development jcl*/
  end
  ;
  return;
  ;
end // end AL0E-75000

// SUBMIT PROD LINE JCL
Function AL0E-75010()
  ;
   /* ------------------------------------------------------------*/
   /* Create and submit Line Item Deallocation Job - EP1272*/
   /* ------------------------------------------------------------*/
  ;
     /* Initialize the work areas and indexes to be used.*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  set AL0EW04 empty; /* Initialize JCL work area*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  AL0EW04.AL0EWIDX2 = 1; /* Initialize JCL table index*/
  ;
    /* Set condition code to 4 to allow the job to run to completion*/
    /* and treat conditions 0 thru 4 as valid codes*/
  ;
  TA6REC.TA6-MAX-COND-CODE = 0004;
  ;
     /* Format JCL and parameters into the subroutine work area.*/
  ;
  while (AL0EW04.AL0EWIDX2 > 0) /* Until end of table*/
    ;
    if (AL0ET02.TARTYPE[AL0EWIDX2] == " ") /* no tartype*/
      ;
      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0ET02.TARJCL[AL0EWIDX2];
      TA6REC.TARTYPE[TA6INDEX] = AL0ET02.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    ;
    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AL0ET02.TARJCL[AL0EWIDX2] == "/*EOF") /* End of table*/
      ;
      AL0EW04.AL0EWIDX2 = 0; /* Indicate end of table*/
      ;
    else
      ;
      AL0EW04.AL0EWIDX2 = AL0EW04.AL0EWIDX2 + 1;
      ;
    end
    ;
    ;
  end /* *** END WHILE LOOP*/
  ;
     /* Submit the JCL and parameters for batch execution.*/
  ;
  AL0ES-SUBMIT-JCL();
  ;
  ALXREC.XXX-MSG-LOC-ID = "75010";
  ;
     /* Display results of print request.*/
  ;
  if (sysVar.errorCode == "00000000") /* If Submission successful*/
    ;
    ALXREC.CAMSG = COMMAREA.CAMSG; /* Job info message*/
    converseLib.validationFailed(82); /* Deallocation successful*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback updates*/
    ;
    ALXREC.CAMSG = COMMAREA.CAMSG; /* Job info message*/
    converseLib.validationFailed(409); /* Error encountered with JOB submit*/
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end AL0E-75010

// SUBMIT TEST LINE JCL
Function AL0E-75020()
  ;
   /* ------------------------------------------------------------*/
   /* Create and submit test Line Item JCL - JOB EP1272*/
   /* ------------------------------------------------------------*/
  ;
     /* Initialize the work areas and indexes to be used.*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  set AL0EW04 empty; /* Initialize JCL work area*/
  ;
  AL0EW04.TA3APLID = TA3REC.TA3APLID;
  AL0EW04.TA3DB2SS = TA3REC.TA3DB2SS;
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  AL0EW04.AL0EWIDX2 = 1; /* Initialize JCL table index*/
  ;
   /* Set condition code to 4 to allow the job to run to completion*/
   /* and treat conditions 0 thru 4 as valid codes*/
  ;
  TA6REC.TA6-MAX-COND-CODE = 0004;
  ;
     /* Format JCL and parameters into the subroutine work area.*/
  ;
  while (AL0EW04.AL0EWIDX2 > 0) /* Until end of table*/
    ;
    if (AL0ETT2.TARTYPE[AL0EWIDX2] == "N") /* Parameters statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format the notify statement from the table.*/
       /* ------------------------------------------------------------*/
      ;
      AL0EW04.AL0EW-NOTIFY-CARD = AL0ETT2.TARJCL[AL0EWIDX2];
      AL0EW04.TA3USRID = TA3REC.TA3USRID;
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0EW04.AL0EW-NOTIFY-CARD;
      TA6REC.TARTYPE[TA6INDEX] = AL0ETT2.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    if (AL0ETT2.TARTYPE[AL0EWIDX2] == "1") /* Type statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format the Type statement from the table. (MVSDEVL)*/
       /* ------------------------------------------------------------*/
      ;
      AL0EW04.AL0EW-TYPE-CARD = AL0ETT2.TARJCL[AL0EWIDX2];
      AL0EW04.AL0EW-TYPE-VALUE = AL0EW04.AL0EW-DB2-VALUE;
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0EW04.AL0EW-TYPE-CARD;
      TA6REC.TARTYPE[TA6INDEX] = AL0ETT2.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    if (AL0ETT2.TARTYPE[AL0EWIDX2] == "2") /* Parameters statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format the Systsin statement from the table. (MVSDEVL)*/
       /* ------------------------------------------------------------*/
      ;
      AL0EW04.AL0EW-SYSTSIN-CARD = AL0ETT2.TARJCL[AL0EWIDX2];
      AL0EW04.AL0EW-DSN-VALUE = TA3REC.TA3DB2SS;
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0EW04.AL0EW-SYSTSIN-CARD;
      TA6REC.TARTYPE[TA6INDEX] = AL0ETT2.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    if (AL0ETT2.TARTYPE[AL0EWIDX2] == "3") /* Parameters statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format Level parameter for development region (MVSDEVL)*/
       /* ------------------------------------------------------------*/
      ;
      if (AL0EW04.AL0EW-CICS-LIT == "CICSD")
        ;
        TA6REC.TARJCL[TA6INDEX] = AL0ETT2.TARJCL[AL0EWIDX2];
        TA6REC.TARTYPE[TA6INDEX] = AL0ETT2.TARTYPE[AL0EWIDX2];
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
    end
    ;
    if (AL0ETT2.TARTYPE[AL0EWIDX2] == "4") /* Parameters statement*/
      ;
       /* ------------------------------------------------------------*/
       /* Format Level parameter for Test/Psuedo region (MVSDEVL)*/
       /* ------------------------------------------------------------*/
      ;
      if (AL0EW04.AL0EW-CICS-LIT != "CICSD")
        ;
        TA6REC.TARJCL[TA6INDEX] = AL0ETT2.TARJCL[AL0EWIDX2];
        TA6REC.TARTYPE[TA6INDEX] = AL0ETT2.TARTYPE[AL0EWIDX2];
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
    end
    ;
    ;
    if (AL0ETT2.TARTYPE[AL0EWIDX2] == " ") /* no tartype*/
      ;
      /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = AL0ETT2.TARJCL[AL0EWIDX2];
      TA6REC.TARTYPE[TA6INDEX] = AL0ETT2.TARTYPE[AL0EWIDX2];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    ;
    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AL0ETT2.TARJCL[AL0EWIDX2] == "/*EOF") /* End of table*/
      ;
      AL0EW04.AL0EWIDX2 = 0; /* Indicate end of table*/
      ;
    else
      ;
      AL0EW04.AL0EWIDX2 = AL0EW04.AL0EWIDX2 + 1;
      ;
    end
    ;
    ;
  end /* *** END WHILE LOOP*/
  ;
     /* Submit the JCL and parameters for batch execution.*/
  ;
  AL0ES-SUBMIT-JCL();
  ;
  ALXREC.XXX-MSG-LOC-ID = "75020"; /* Message location*/
  ;
     /* Display results of print request.*/
  ;
  if (sysVar.errorCode == "00000000") /* If Submission successful*/
    ;
    ALXREC.CAMSG = COMMAREA.CAMSG; /* Job info message*/
    converseLib.validationFailed(82); /* Deallocation successful*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback Updates*/
    ;
    ALXREC.CAMSG = COMMAREA.CAMSG; /* Job info message*/
    converseLib.validationFailed(409); /* Error encountered with JOB submit*/
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end AL0E-75020

// Obtain line items to process
Function AL0E-80000()
   /* ------------------------------------------------------------*/
   /* Initialize line item information table of 900 occurrences.*/
   /* ------------------------------------------------------------*/
  ;
  set AL0EW03 empty;
  ;
  AL0EW03.AL0EW-NBR-OF-ITEMS = 0; /* Line items counter*/
  ;
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set VMPOLI01 empty; /* Clear row storage area*/
  set EPIREC empty;
  ;
  VMPOLI01.XWH-WHSE-CD = AL0EW01.XWHCD;
  VMPOLI01.PK-ORD-STKTF-ID = AL0EW01.OP1CUOID;
  VMPOLI01.PK-NIKE-ORD-ID = AL0EW01.OP1NORID;
  VMPOLI01.PK-NBR-TIMES-ALOC = AL0EW01.OP1NTMAL;
  ;
  EPIREC.EPI-IO-TASK = "S1";
  AL0ES-VMPOLI01-SS(); /* Select set of rows*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  EPIREC.EPI-IO-TASK = "N1";
  AL0ES-VMPOLI01-SN(); /* Fetch first row*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   && AL0EW03.AL0EW-NBR-OF-ITEMS < 999)
    ;
    AL0EW03.AL0EW-NBR-OF-ITEMS = AL0EW03.AL0EW-NBR-OF-ITEMS + 1;
    ;
    AL0EW03.XXX-LN-SEL-IND[AL0EW-NBR-OF-ITEMS] = " ";
    if (VMPOLI01.PK-TOT-ITEM-QTY <= 0 /* no aloc qty*/
     || AL0EW01.PK-SEL-IND > " ")     /* Deallocated already*/
      AL0EW03.XXX-LN-SEL-IND[AL0EW-NBR-OF-ITEMS] = "N";
    end
    ;
    AL0EW03.SY1STNBR[AL0EW-NBR-OF-ITEMS] = VMPOLI01.SY-STY-NBR;
                                  /* Style nbr*/
    AL0EW03.AL0EW-SEP1[AL0EW-NBR-OF-ITEMS] = "-";
                                  /* Separator 1*/
    AL0EW03.SY2CLRID[AL0EW-NBR-OF-ITEMS] = VMPOLI01.SY-COLR-CD-ID;
                                  /* Color code id*/
    AL0EW03.AL0EW-SEP2[AL0EW-NBR-OF-ITEMS] = "-";
                                  /* Separator 2*/
    AL0EW03.XDMCD[AL0EW-NBR-OF-ITEMS] = VMPOLI01.XDM-DIM-CD;
                                  /* Dimension code*/
    ;
    AL0EW03.PK-TOT-ITEM-QTY[AL0EW-NBR-OF-ITEMS] = VMPOLI01.PK-TOT-ITEM-QTY; /* Total aloc qty*/
    AL0EW03.OP2LNINB[AL0EW-NBR-OF-ITEMS] = VMPOLI01.PK-LINE-ITEM-NBR; /* Line item nbr*/
    ;
    AL0ES-IO0440-SU();
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Item not found on DORDER*/
      AL0ES-DEL-VMPOLI01(); /* delete Mirror Pool Item*/
    end
    ;
    AL0EW03.OP2TONOQ[AL0EW-NBR-OF-ITEMS] = OP2REC.OP2TONOQ;
                                  /* Total on order qty*/
    ;
    AL0ES-VMPOLI01-SN(); /* Fetch next row*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  ;
  EPIREC.EPI-IO-TASK = "C1";
  AL0ES-VMPOLI01-CS(); /* Close selected set cursor*/
  ;
  ;
end // end AL0E-80000

// Obtain allocations to process
Function AL0E-81000()
   /* ------------------------------------------------------------*/
   /* Initialize allocation information table of 100 occurrences.*/
   /* ------------------------------------------------------------*/
  ;
  set AL0EW02 empty;
  ;
  AL0EW02.AL0EW-NBR-OF-ALLOCS = 0; /* Allocations counter*/
  ;
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set VMPOLH01 empty; /* Clear row storage area*/
  set EPIREC empty;
  ;
  VMPOLH01.XWH-WHSE-CD = AL0EW01.XWHCD;
  VMPOLH01.PK-ORD-STKTF-ID = AL0EW01.OP1CUOID;
  VMPOLH01.PK-NIKE-ORD-ID = AL0EW01.OP1NORID;
  VMPOLH01.PK-NBR-TIMES-ALOC = -1;
  VMPOLH01.DCMS-ORD-STAT-CD = "*";
  ;
  EPIREC.EPI-IO-TASK = "S5";
  AL0ES-VMPOLH01-SS(); /* Select set of rows*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  EPIREC.EPI-IO-TASK = "N5";
  AL0ES-VMPOLH01-SN(); /* Fetch first row*/
  ;
  AL0EW01.OP1CUNDT = VMPOLH01.OP-CUST-NEED-DT; /* Cust need date*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   && AL0EW02.AL0EW-NBR-OF-ALLOCS < 100)
    ;
    AL0EW02.AL0EW-NBR-OF-ALLOCS = AL0EW02.AL0EW-NBR-OF-ALLOCS + 1;
    ;
    AL0EW02.PK-NBR-TIMES-ALOC[AL0EW-NBR-OF-ALLOCS] = VMPOLH01.PK-NBR-TIMES-ALOC; /* Alloc nbr*/
    ;
    AL0EW02.DCMS-ORD-STAT-CD[AL0EW-NBR-OF-ALLOCS] = VMPOLH01.DCMS-ORD-STAT-CD; /* Status code*/
    ;
    AL0ES-STATUS-LITS();
    ;
    AL0EW02.AL0EW-DCMS-ORD-ST[AL0EW-NBR-OF-ALLOCS] = AL0EW01.AL0EW-DCMS-ORD-ST;
    ;
    AL0EW02.XXX-LN-SEL-IND[AL0EW-NBR-OF-ALLOCS] = " ";
    ;
    if (VMPOLH01.DCMS-ORD-STAT-CD == "S" /* Selected*/
     || VMPOLH01.DCMS-ORD-STAT-CD == "R" /* Released*/
     || VMPOLH01.DCMS-ORD-STAT-CD == "P" /* Pack & Hold*/
     || VMPOLH01.DCMS-ORD-STAT-CD == "H" /* Shipped*/
     || VMPOLH01.DCMS-ORD-STAT-CD == "D" /* Deallocated*/
     || VMPOLH01.DCMS-ORD-STAT-CD == "V") /* Voided*/
                                   /* or tagged for delete*/
      AL0EW02.XXX-LN-SEL-IND[AL0EW-NBR-OF-ALLOCS] = "N";
    end
    ;
    AL0EW02.PK-TOT-ORD-QTY[AL0EW-NBR-OF-ALLOCS] = VMPOLH01.PK-TOT-ORD-QTY; /* Total Alloc Qty*/
    ;
    AL0EW02.XSO-SLS-OFC-ID[AL0EW-NBR-OF-ALLOCS] = VMPOLH01.XSO-SLS-OFC-ID; /* Sales Office Id*/
    AL0EW02.XPA-CUST-PACK-CD[AL0EW-NBR-OF-ALLOCS] = VMPOLH01.XPA-CUST-PACK-CD; /* Package cd*/
    AL0EW02.PK-SEL-IND[AL0EW-NBR-OF-ALLOCS] = VMPOLH01.PK-SEL-IND;
    ;
    AL0ES-VMPOLH01-SN(); /* Fetch next row*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  ;
  EPIREC.EPI-IO-TASK = "C5";
  AL0ES-VMPOLH01-CS(); /* Close selected set cursor*/
  ;
  ;
end // end AL0E-81000

// Determine CICS region
Function AL0ES-CICS-REGION()
  ;
   /* ------------------------------------------------------------*/
   /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /*  */
   /* PRODUCTION REGION CAUSES PRODUCTION JCL TO BE EXECUTED and*/
   /* TEST REGION CAUSES TEST JCL TO BE EXECUTED*/
   /*  */
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  ;
  TA3REC.TA3OPTN = "ASSIGN";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)         
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "TA0230"; /* Message location*/
  ;
  converseLib.validationFailed(301); /* Unexpected error occurred*/
  ;
  if (AL0EW00.XXX-MAP-DSP-CD == "1")
    converseLib.clearScreen();
     /* Clear screen before display*/
  else
    if (AL0EW00.XXX-MAP-DSP-CD == "2")
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
  end
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FIND CICS REGION";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-CICS-REGION

// Delete Mirror Pool Item
Function AL0ES-DEL-VMPOLI01()
   /* ------------------------------------------------------------*/
   /* Delete row from the Mirror Pool Item*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VMPOLI01" ("D ", SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "VMPOLIDL"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "2")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "3")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "AL0ES-DEL-VMPOLI01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMPOLI01.VMPOLI01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-DEL-VMPOLI01

// Call EP1520 Dealloc subrtn
Function AL0ES-EP1520()
   /* ------------------------------------------------------------------*/
   /* - -       S U B R O U T I N E   D E S C R I P T I O N         - -*/
   /* ------------------------------------------------------------------*/
   /*  */
   /* This subroutine perform de-allocation functions based upon the*/
   /* input parameters (WEP1521).*/
   /*  */
   /* NOTE: This was cloned/modified from the XSALS-DEALLOCATE process*/
   /*  */
   /* The calling program must check the return code.  For non-fatal*/
   /* - For non-fatal return code (except 0000), the calling*/
   /* program is required to do a POST for now.*/
   /* - For a DB2 deadlock (8000), the calling program may try*/
   /* to call EP1520 again up to a certain number of times.*/
   /* It is the calling program responsibility to display an*/
   /* appropriate message when the limit is exceeded.*/
   /* - For fatal return code, the ABEND screen gets displayed.*/
   /*  */
   /* Below is list of all the possible return codes:*/
   /*  */
   /* EZERT8*/
   /* ------*/
   /* '00000000' = Normal Return*/
   /* OTHER      = Unexpected Error Has Occurred*/
   /*  */
   /* ALAREC.ALA-RETURN-CODE (AL1520 return codes)*/
   /* ----------------------*/
   /* Code    Category    Desciption*/
   /* ----    --------    ----------*/
   /* 0000    No error    No errors encountered*/
   /*  */
   /* 0100    Warning     Not all line items dealloc due to status*/
   /* 0110    Warning     No line item, no dealloc qty processed*/
   /* 0120    Warning     Cannot daloc qty in ShipRec > line item qty*/
   /* 0130    Warning     Negative qty used in calculatng daloc qty*/
   /* 0140    Warning     No qty deallocated for the line item*/
   /* 0150    Warning     Schedule nbr not populated for Process '02'*/
   /* 0160    Warning     Non-fatal return code from IN9060, no post*/
   /* 0165    Warning     Non-fatal return code from IN9060*/
   /* 0170    Warning     Non-fatal return code from AV2200, no post*/
   /* 0175    Warning     Non-fatal return code from AV2200*/
   /*  */
   /* 0220    Warning     Input ZZ-CHNG-HHMM possibly not populated*/
   /* 0230    Warning     Input ZZ-CHNG-PGM-ID not populated*/
   /*  */
   /* 6000    Serious     CICS call to IN8000 not successful*/
   /* 6010    Serious     Bad return cd from IN8000 credit check*/
   /* 6020    Serious     Order in ShipRec, dealloc not allowed*/
   /*  */
   /* 7000    Serious     Not found on Aloc Reason DB (XDN)*/
   /* 7010    Serious     Not found on Pick Program Tracking DB*/
   /* 7020    Serious     Order header not found*/
   /* 7030    Serious     CICS call to CC1070 not successful*/
   /* 7040    Serious     Bad return cd from CC1061/CC1070*/
   /* 7050    Serious     CICS call to DB1000 not successful*/
   /* 7060    Serious     Bad return cd from DB1011/DB1000*/
   /* 7065    Serious     CICS call to IN9060 not successful*/
   /* 7070    Serious     Bad return cd from IN9060*/
   /* 7075    Serious     CICS call to AV2200 not successful*/
   /* 7080    Serious     Bad return cd from AV2200*/
   /* 7090    Serious     CICS call to TA0020 not successful*/
   /*  */
   /* 8000    Serious     DB2 deadlock*/
   /* 8010    Serious     DB2 error (see WERRDIAG and SQLCA)*/
   /* 8020    Serious     Inventory item not found, no de-aloc*/
   /*  */
   /* 9000    Serious     Function code not set to deallocation*/
   /* 9010    Serious     Invalid EP1520 process code*/
   /* 9020    Serious     ZZ fields not properly populated*/
   /* 9030    Serious     Entire order flag nor line item nbr*/
   /* not populated*/
   /* 9040    Serious     Entire order flag and line item nbr*/
   /* both populated*/
   /* 9050    Serious     Only line item dealloc allowed when*/
   /* scheduled in ShipRec*/
   /* 9060    Serious     Order/line item bad status code*/
   /* 9070    Serious     Intervening update, ZZ-CHNG-CNT updated*/
  ;
  try
    call "EP1520" (WEP1521) {isNoRefresh = yes, isExternal = yes};
  end /* Call subroutine*/
  ;
   /* ------------------------------------------------------------------*/
   /* If successful call, check EP1520 return code.*/
   /* Otherwise, an unexpected error has occurred, call TA0020.*/
   /* ------------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    /* ------------------------------------------------------------------*/
    /* If the return code category is No Error/Warning/Error, or DB2*/
    /* deadlock, or inv item not found - return to previous process/*/
    /* statement group.*/
    /* ------------------------------------------------------------------*/
    ;
    if (WEP1521.WEP1521-RETURN-CODE >= 0000
     && WEP1521.WEP1521-RETURN-CODE <= 2999)
      return;
    end
    ;
    if (WEP1521.WEP1521-RETURN-CODE == 8000
     || WEP1521.WEP1521-RETURN-CODE == 8020
     || WEP1521.WEP1521-RETURN-CODE == 9060)
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      return;
    end
    ;
    /* ------------------------------------------------------------------*/
    /* When the return code is fatal, call TA0020.*/
    /* ------------------------------------------------------------------*/
    ;
    TA1REC.TA1-GROUP = WEP1521.TA1-GROUP;
    TAEREC.SQLCAREC = WEP1521.SQLCAREC;
    ;
    /* ------------------------------------------------------------------*/
    /* When DB2 error, roll back all updates*/
    /* ------------------------------------------------------------------*/
    ;
    if (WEP1521.WEP1521-RETURN-CODE > 7000
     && WEP1521.WEP1521-RETURN-CODE <= 9999) /* DB2 error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
    end
    ;
  else
    TA1REC.TA1TYPE = "APPL"; /* Error type*/
    TA1REC.TA1FUNC = "RETN"; /* Error function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP error code*/
    TAEREC.TAEDESC1 = "ERROR OCCURRED-BAD CSP CALL TO EP1520"; /* Error message*/
    TAEREC.TAEDESC2 = WEP1521.WEP1521-GROUP;
                                   /* Called subr. parms*/
  end
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  ;
  ALXREC.XXX-MSG-LOC-ID = "EP1520"; /* Message location*/
  ;
  COMMAREA.CAMSG = "FATAL ERROR OCCURRED IN DEALLOCATION SUBROUTINE, NO DALOC DONE";
  ;
  AL0EW00.XXX-MAP-DSP-CD = "1";
  AL0EW00.XXX-RQT-DATA-FL = "N";
  AL0EW00.XXX-MAP-FMAT-FL = "Y";
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  exit stack;
  ;
  ;
end // end AL0ES-EP1520

// Retrieves data for Map Heading
Function AL0ES-HEADING-INFO()
  ;
   /* ------------------------------------------------------------*/
   /* Select and save customer information.*/
   /* ------------------------------------------------------------*/
  ;
  AL0EW01.AL0EW-KUCCOID = VMPOLH01.CU-CO-ID; /* Customer id*/
  AL0EW01.AL0EW-SEP1 = "."; /* Separator 1*/
  AL0EW01.AL0EW-KUMSTRID = VMPOLH01.CU-STOR-ID; /* Store id*/
  AL0EW01.AL0EW-SEP2 = "."; /* Separator 2*/
  AL0EW01.AL0EW-XNXCD = VMPOLH01.XNX-DEPT-ID-XREF; /* Dept id xref*/
  ;
  set KUMREC empty;
  ;
  KUMREC.KUCCOID = VMPOLH01.CU-CO-ID;
  KUMREC.KUMSTRID = VMPOLH01.CU-STOR-ID;
  ;
  AL0ES-IO0340-S(); /* Select cust name in the store table*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    AL0EW01.KUMSTRNM = KUMREC.KUMSTRNM;
  else
    AL0EW01.KUMSTRNM = "CUSTOMER IS NOT FOUND";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save warehouse short abbreviation.*/
   /* ------------------------------------------------------------*/
  ;
  if (VMPOLH01.XWH-WHSE-CD in XWHTBL.XWHCD)
    AL0EW01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    /* Added for Canada 8/95*/
    AL0EW00.AL0EW-EXTRN-ZFC-CD = XWHTBL.ZFC-CRCY-CD[sysVar.arrayIndex];
    AL0EW00.AL0EW-LPAR = "(";
    AL0EW00.AL0EW-RPAR = ")";
  else
    AL0EW01.XWHSABRV = "ERROR";
  end
  ;
end // end AL0ES-HEADING-INFO

// Select reqstd row in store tbl
Function AL0ES-IO0340-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the store table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "IO0340S"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/
  TA1REC.TA1TBLKE = AL0EW01.AL0EW-KUMKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-IO0340-S

// Fetch row in line item tbl
Function AL0ES-IO0440-SU()
   /* ------------------------------------------------------------*/
   /* Select row from the line item table.*/
   /* ------------------------------------------------------------*/
  ;
  OP2REC.OP1PARTN = VMPOLI01.PK-ORD-PART-CHAR; /* Order nbr*/
  OP2REC.OP1CUOID = VMPOLI01.PK-ORD-STKTF-ID;
  OP2REC.OP1NORID = VMPOLI01.PK-NIKE-ORD-ID;
  OP2REC.OP2LNINB = VMPOLI01.PK-LINE-ITEM-NBR; /* Line item nbr*/
  ;
  try
    call "IO0440" ("S ", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "IO0440SU"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "2")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "3")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       "; /* Description*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-IO0440-SU

// Close cursor in batch daloc
Function AL0ES-IO2660-C1()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of batch dealloc rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2660" ("C1", SQLCA, ALHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "IO2660C1"; /* Message location*/
  ;
  converseLib.validationFailed(301); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DALLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDATAG01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-IO2660-C1

// Fetch row in batch daloc tbl
Function AL0ES-IO2660-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the batch deallocation table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2660" ("N1", SQLCA, ALHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "IO2660N1"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DALLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDATAG01"; /* Table view name*/
  TA1REC.TA1TBLKE = ALHREC.ALHKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-IO2660-N1

// Select cursor batch daloc tbl
Function AL0ES-IO2660-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the batch dealloc tbl.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2660" ("S1", SQLCA, ALHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "IO2660S1"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DALLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDATAG01"; /* Table view name*/
  TA1REC.TA1TBLKE = ALHREC.ALHKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-IO2660-S1

// Select picking sameday/rush rn
Function AL0ES-IO4240-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the picking sameday/rush runs.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4240" ("S ", SQLCA, PWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "IO4240S"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "2")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "3")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWHREC.PWHKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-IO4240-S

// Interpets Order status codes
Function AL0ES-STATUS-LITS()
   /* ------------------------------------------------------------*/
   /* Interpet the order status codes into literals*/
   /* ------------------------------------------------------------*/
  ;
  if (VMPOLH01.DCMS-ORD-STAT-CD == "A") /* Passed*/
    AL0EW01.AL0EW-DCMS-ORD-ST = "PASSED    ";
  end
  ;
  if (VMPOLH01.DCMS-ORD-STAT-CD == " "
   && VMPOLH01.DCMS-ERROR-FL == "N") /* In Process*/
    AL0EW01.AL0EW-DCMS-ORD-ST = "IN PROCESS";
  end
  ;
  if (VMPOLH01.DCMS-ORD-STAT-CD == " "
   && VMPOLH01.DCMS-ERROR-FL == "Y") /* In Review*/
    AL0EW01.AL0EW-DCMS-ORD-ST = "IN REVIEW ";
  end
  ;
  if (VMPOLH01.DCMS-ORD-STAT-CD == "S") /* Selected*/
    AL0EW01.AL0EW-DCMS-ORD-ST = "SELECTED  ";
  end
  ;
  if (VMPOLH01.DCMS-ORD-STAT-CD == "R") /* Released*/
    AL0EW01.AL0EW-DCMS-ORD-ST = "RELEASED  ";
  end
  ;
  if (VMPOLH01.DCMS-ORD-STAT-CD == "P") /* Pack & Hold*/
    AL0EW01.AL0EW-DCMS-ORD-ST = "PACK&HOLD ";
  end
  ;
  if (VMPOLH01.DCMS-ORD-STAT-CD == "H") /* Shipped*/
    AL0EW01.AL0EW-DCMS-ORD-ST = "SHIPPED   ";
  end
  ;
  if (VMPOLH01.DCMS-ORD-STAT-CD == "V") /* Voided*/
    AL0EW01.AL0EW-DCMS-ORD-ST = "VOIDED    ";
  end
  ;
  if (VMPOLH01.DCMS-ORD-STAT-CD == "D") /* Deallocated*/
    AL0EW01.AL0EW-DCMS-ORD-ST = "DEALLOCATE";
  end
  ;
  ;
end // end AL0ES-STATUS-LITS

// SUBMIT JCL TO INTERNAL READER
Function AL0ES-SUBMIT-JCL()
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "SUBJCL"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(410); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(411); /* Indicate user cancelled*/
    ;
  else
    converseLib.validationFailed(301); /* Indicate system error*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback Updates*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-SUBMIT-JCL

// Close cursor - VMPOLH01
Function AL0ES-VMPOLH01-CS()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of Mirror Pool Header*/
   /* ------------------------------------------------------------*/
  ;
  set SQLCA empty;
  ;
  try
    call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "VMPOLHCS"; /* Message location*/
  ;
  converseLib.validationFailed(301); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-VMPOLH01-CS

// Select count Mirror Pool hdr
Function AL0ES-VMPOLH01-SC()
   /* ------------------------------------------------------------*/
   /* Select count from the Mirror Pool Header table.*/
   /* ------------------------------------------------------------*/
  ;
  set SQLCA empty;
  ;
  try
    call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100)
        EPIREC.EPI-PK-ORD-CNT = 0;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "VMPOLHSC"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT COUNT TABLE"; /* Description*/
  TA1REC.TA1DBASE = "DPICK    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-VMPOLH01-SC

// Fetch row - VMPOLH01
Function AL0ES-VMPOLH01-SN()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the Mirror Pool Header*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "VMPOLHSN"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "2")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "3")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-VMPOLH01-SN

// Select cursor - VMPOLH01
Function AL0ES-VMPOLH01-SS()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from Mirror Pool Header*/
   /* ------------------------------------------------------------*/
  ;
  set SQLCA empty;
  ;
  try
    call "VMPOLH01" (EPIREC, SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "VMPOLHSS"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "2")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "3")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMPOLH01.VMPOLH01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-VMPOLH01-SS

// Close cursor - VMPOLI01
Function AL0ES-VMPOLI01-CS()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of Mirror Pool Item*/
   /* ------------------------------------------------------------*/
  ;
  set SQLCA empty;
  ;
  try
    call "VMPOLI01" (EPIREC, SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "VMPOLICS"; /* Message location*/
  ;
  converseLib.validationFailed(301); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLI01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-VMPOLI01-CS

// Fetch row - VMPOLI01
Function AL0ES-VMPOLI01-SN()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the Mirror Pool Item*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VMPOLI01" (EPIREC, SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "VMPOLISN"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "2")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "3")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMPOLI01.VMPOLI01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-VMPOLI01-SN

// Select cursor - VMPOLI01
Function AL0ES-VMPOLI01-SS()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from Mirror Pool Item*/
   /* ------------------------------------------------------------*/
  ;
  set SQLCA empty;
  ;
  try
    call "VMPOLI01" (EPIREC, SQLCA, VMPOLI01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "VMPOLISS"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(302); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(301); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "2")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    if (AL0EW00.XXX-MAP-DSP-CD == "3")
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = ALXREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMPOLI01.VMPOLI01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AL0ES-VMPOLI01-SS

// Application Initialization
Function XPAL-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/
  ;
  XSENTRY(); /* Application entry validation*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/
  ;
  XSSEGTR(); /* Set transaction identification*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain date and time.*/
   /* ------------------------------------------------------------*/
  ;
  set XX0XW01 empty; /* Date/time subrtn parameters*/
  ;
  XX0XS01(); /* Obtain date and time*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/
    ;
    ALXREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set ALXREC empty; /* Initialize work record*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/
  ;
  ;
end // end XPAL-00000

// Exit to another application
Function XSALS-EXIT()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Goal Documentation*/
  end
  ;
  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the system work record in the COMMAREA user area.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/
    ;
    COMMAREA.CAUSERA = ALXREC.CAUSERA; /* Save work record*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/
  ;
  XSEXIT(); /* Exit to another application*/
  ;
  ALXREC.XXX-MSG-LOC-ID = "XSEXIT"; /* Message location*/
  ;
   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/
  ;
  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* Current application*/
  ;
  if (converseVar.eventKey is pfkey) /* PF key was pressed*/
    ;
    COMMAREA.CATOAP = " "; /* Clear TO application*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end
    ;
  end
  ;
  ;
end // end XSALS-EXIT

//*** RECORD=AL0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AL0EW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-MAP-DSP-CD XXX-MAP-DSP-CD ; 
  10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  10 AL0EW-NBR-OF-SELECTS AL0EW-NBR-OF-SELECTS ; 
  10 AL0EW-MAP-INDEX AL0EW-MAP-INDEX ; 
  10 AL0EW-TOP-INDEX AL0EW-TOP-INDEX ; 
  10 AL0EW-BOT-INDEX AL0EW-BOT-INDEX ; 
  10 AL0EW-ORD-ITM-DALOC-IND AL0EW-ORD-ITM-DALOC-IND ; 
  10 AL0EW-THEATEROPR-KEY AL0EW-THEATEROPR-KEY ; 
  10 AL0EW-CURRENCY AL0EW-CURRENCY ; 
    15 AL0EW-LPAR AL0EW-LPAR ; 
    15 AL0EW-EXTRN-ZFC-CD AL0EW-EXTRN-ZFC-CD ; 
    15 AL0EW-RPAR AL0EW-RPAR ; 
end // end AL0EW00

//*** RECORD=AL0EW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record AL0EW01 type basicRecord
  5 AL0EW-REC01-GROUP AL0EW-REC01-GROUP ; 
    10 AL0EW-BATCH-DALOC-FL AL0EW-BATCH-DALOC-FL ; 
    10 AL0EW-FIRST-PASS-PACK-FL AL0EW-FIRST-PASS-PACK-FL ; 
    10 AL0EW-OP1CUOID AL0EW-OP1CUOID ; 
      15 * num(8) ; 
      15 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1NTMAL OP1NTMAL ; 
    10 DCMS-ORD-STAT-CD DCMS-ORD-STAT-CD ; 
    10 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
    10 XDNCD XDNCD ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 AL0EW-MULTI-ALLOC-FL AL0EW-MULTI-ALLOC-FL ; 
    10 AL0EW-PEND-ALLOC-FL AL0EW-PEND-ALLOC-FL ; 
    10 AL0EW-DCMS-ORD-ST AL0EW-DCMS-ORD-ST ; 
    10 AL0EW-CUST-ID AL0EW-CUST-ID ; 
      15 AL0EW-KUMKEY AL0EW-KUMKEY ; 
        20 AL0EW-KUCCOID AL0EW-KUCCOID ; 
        20 AL0EW-SEP1 AL0EW-SEP1 ; 
        20 AL0EW-KUMSTRID AL0EW-KUMSTRID ; 
      15 AL0EW-SEP2 AL0EW-SEP2 ; 
      15 AL0EW-XNXCD AL0EW-XNXCD ; 
    10 KUMSTRNM KUMSTRNM ; 
    10 XWHCD XWHCD ; 
    10 XWHSABRV XWHSABRV ; 
    10 XSO-SLS-OFC-ID XSO-SLS-OFC-ID ; 
    10 XPA-CUST-PACK-CD XPA-CUST-PACK-CD ; 
    10 PK-SEL-IND PK-SEL-IND ; 
end // end AL0EW01

//*** RECORD=AL0EW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record AL0EW02 type basicRecord
  10 AL0EW-NBR-OF-ALLOCS AL0EW-NBR-OF-ALLOCS ; 
  10 AL0EW-CURR-INX2 AL0EW-CURR-INX2 ; 
  10 AL0EW-SET-CURSOR-FL AL0EW-SET-CURSOR-FL ; 
  10 AL0EW-ALLOC-DATA AL0EW-ALLOC-DATA [100] ; 
    15 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
    15 PK-NBR-TIMES-ALOC PK-NBR-TIMES-ALOC ; 
    15 DCMS-ORD-STAT-CD DCMS-ORD-STAT-CD ; 
    15 AL0EW-DCMS-ORD-ST AL0EW-DCMS-ORD-ST ; 
    15 PK-TOT-ORD-QTY PK-TOT-ORD-QTY ; 
    15 XSO-SLS-OFC-ID XSO-SLS-OFC-ID ; 
    15 XPA-CUST-PACK-CD XPA-CUST-PACK-CD ; 
    15 PK-SEL-IND PK-SEL-IND ; 
end // end AL0EW02

//*** RECORD=AL0EW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record AL0EW03 type basicRecord
  10 AL0EW-NBR-OF-ITEMS AL0EW-NBR-OF-ITEMS ; 
  10 AL0EW-CURR-INX AL0EW-CURR-INX ; 
  10 AL0EW-SET-CURSOR-FL AL0EW-SET-CURSOR-FL ; 
  10 AL0EW-LINE-ITEM-DATA AL0EW-LINE-ITEM-DATA [999] ; 
    15 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
    15 AL0EW-PRODUCT-ID AL0EW-PRODUCT-ID ; 
      20 SY1STNBR SY1STNBR ; 
      20 AL0EW-SEP1 AL0EW-SEP1 ; 
      20 SY2CLRID SY2CLRID ; 
      20 AL0EW-SEP2 AL0EW-SEP2 ; 
      20 XDMCD XDMCD ; 
    15 OP2TONOQ OP2TONOQ ; 
    15 PK-TOT-ITEM-QTY PK-TOT-ITEM-QTY ; 
    15 OP2LNINB OP2LNINB ; 
end // end AL0EW03

//*** RECORD=AL0EW04 ****
// JCL variable card overrides for TARJCL table
// ***********************
Record AL0EW04 type basicRecord
  10 AL0EWIDX2 AL0EWIDX2 ; 
  10 TA3DB2SS TA3DB2SS ; 
    15 AL0EW-DB2-LIT AL0EW-DB2-LIT ; 
    15 AL0EW-DB2-VALUE AL0EW-DB2-VALUE ; 
  10 TA3APLID TA3APLID ; 
    15 AL0EW-CICS-LIT AL0EW-CICS-LIT ; 
    15 AL0EW-CICS-VALUE AL0EW-CICS-VALUE ; 
    15 * char(1) ; 
  10 AL0EW-NOTIFY-CARD char(80) ; // NOTIFY card
    15 * char(22) ; 
    15 TA3USRID TA3USRID ; 
    15 * char(50) ; 
  10 AL0EW-SYSTSIN-CARD char(80) ; // JCL Systsin card
    15 * char(11) ; 
    15 AL0EW-DSN-VALUE char(4) ; // DB2 Subsystem value
    15 * char(65) ; 
  10 AL0EW-TYPE-CARD AL0EW-TYPE-CARD ; 
    15 * char(15) ; 
    15 AL0EW-TYPE-VALUE AL0EW-TYPE-VALUE ; 
    15 * char(64) ; 
end // end AL0EW04

//*** RECORD=ALXREC ****
// ************ DEVELOPMENT MODEL SYSTEM COMMAREA *************
// 
// This record contains data fields that are passed between the
// Development Model System applications.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      08/31/94  HKEMPE  New record.
// retrofit 10/05/98  kdenne  added xwh,order, msg fields
// **********************
Record ALXREC type basicRecord
  5 CAUSERA CAUSERA ; 
    10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
    10 XXX-MSG-NBR XXX-MSG-NBR ; 
    10 XWHCD XWHCD ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 CAMSG CAMSG ; 
    10 * char(1604) ; 
end // end ALXREC

//*** RECORD=WEP1521 ****
// *De-Allocation Update Subroutine Parameter for MVS/DCMS
// 
// *NOTE:  This was cloned/modified from the ALAREC record.
//         In order to meet the DCMS system requirements for
//         the Memphis Apparel warehouse.
// 
// This record contains the input/output parameters for EP1520
// (De-Allocation) for the MVS/DCMS orders.  Since this is a
// NIKEBOTH subroutine, the record must be exactly 2500 bytes
// in length.
// 
// This is the generic record for calling subroutine EP1520.
// It should be used whenever this subroutine is called from
// a CSP application.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      04/17/98  KDENNE  NEW RECORD
// ***********************
Record WEP1521 type basicRecord
  5 WEP1521-GROUP WEP1521-GROUP ; 
    10 WEP1521-FUNCTION-CODE WEP1521-FUNCTION-CODE ; 
    10 WEP1521-PROCESS-CODE WEP1521-PROCESS-CODE ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 OP-ORD-PART-CHAR OP-ORD-PART-CHAR ; 
    10 OP-CUST-ORD-ID OP-CUST-ORD-ID ; 
    10 OP-NIKE-ORD-ID OP-NIKE-ORD-ID ; 
    10 OP-NBR-TM-ALOC OP-NBR-TM-ALOC ; 
    10 WEP1521-PROCESS-ENTIRE-ORD-FL WEP1521-PROCESS-ENTIRE-ORD-FL ; 
    10 OP-LINE-ITEM-NBR OP-LINE-ITEM-NBR ; 
    10 XDN-ALOC-RSN-CD XDN-ALOC-RSN-CD ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZ-CHNG-PGM-ID ZZ-CHNG-PGM-ID ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMMSS ZZ-CHNG-HHMMSS ; 
    10 WEP1521-RETURN-CODE WEP1521-RETURN-CODE ; 
    10 TA1-GROUP TA1-GROUP ; 
    10 SQLCAREC SQLCAREC ; 
    10 * char(2164) ; 
end // end WEP1521

// Order Allocation info
DataItem AL0EW-ALLOC-DATA char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Batch deallocation requested
DataItem AL0EW-BATCH-DALOC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for Backward paging
DataItem AL0EW-BOT-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CICS Region literal (CICSD,T)
DataItem AL0EW-CICS-LIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CICS Region Id
DataItem AL0EW-CICS-VALUE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current product index
DataItem AL0EW-CURR-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current allocation index
DataItem AL0EW-CURR-INX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Currency
DataItem AL0EW-CURRENCY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer identification
DataItem AL0EW-CUST-ID char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AL0EW-DB2-LIT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AL0EW-DB2-VALUE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DCMS Order Status Literal
DataItem AL0EW-DCMS-ORD-ST char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Currency code
DataItem AL0EW-EXTRN-ZFC-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First pass for the order
DataItem AL0EW-FIRST-PASS-PACK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Uncomp cu_co_id
DataItem AL0EW-KUCCOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer key
DataItem AL0EW-KUMKEY num(14)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Uncomp cu_stor_id
DataItem AL0EW-KUMSTRID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product information
DataItem AL0EW-LINE-ITEM-DATA char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Left parenthesis
DataItem AL0EW-LPAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map formatting
DataItem AL0EW-MAP-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Multiple allocs exist flag
DataItem AL0EW-MULTI-ALLOC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of order allocations
DataItem AL0EW-NBR-OF-ALLOCS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of items
DataItem AL0EW-NBR-OF-ITEMS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of 'S' entered on map
DataItem AL0EW-NBR-OF-SELECTS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Uncomp op_cust_ord_id
DataItem AL0EW-OP1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order or line daloc ind
DataItem AL0EW-ORD-ITM-DALOC-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pending alloc exist flag
DataItem AL0EW-PEND-ALLOC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Product identification
DataItem AL0EW-PRODUCT-ID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record Group level
DataItem AL0EW-REC01-GROUP char(102)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Right parenthesis
DataItem AL0EW-RPAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Separator 1
DataItem AL0EW-SEP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Separator 2
DataItem AL0EW-SEP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set cursor flag
DataItem AL0EW-SET-CURSOR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Theater of operation
DataItem AL0EW-THEATEROPR-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for forward paging
DataItem AL0EW-TOP-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TYPE card
DataItem AL0EW-TYPE-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// T,D,F,Y value
DataItem AL0EW-TYPE-VALUE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Uncomp xnx_dep_id_xref
DataItem AL0EW-XNXCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for JCL Table
DataItem AL0EWIDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NBR TIMES ALLOC
DataItem OP-NBR-TM-ALOC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FUNCTION CODE
DataItem WEP1521-FUNCTION-CODE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INPUT PARAMETERS
DataItem WEP1521-GROUP char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROCESS CODE
DataItem WEP1521-PROCESS-CODE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROCESS ENTIRE ORDER
DataItem WEP1521-PROCESS-ENTIRE-ORD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RETURN CODE
DataItem WEP1521-RETURN-CODE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XDN_ALOC_RSN_CD
DataItem XDN-ALOC-RSN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPG-PKG-TYP-CD
DataItem ZZ-CHNG-HHMMSS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

