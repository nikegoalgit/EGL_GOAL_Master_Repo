package fl0o;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom3.XPTA0P;
import corpcom3.XPXSE01;
import corpcom3.XPXX001;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXPGMNB;
import corpx1.XSETBL;
import corpx1.XSNTBL;
import corpx2.XSECD;
import fb.common.FB9REC;
import fb.common.FBAREC;
import fb.common.FBEREC;
import fl.common.FLWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FL0O ****
// This application is associated with the Factory Load System.
// 
// It provides a screen for users to create, delete, copy, or
// rerun a schedule number.
// 
// The application will submit (via the internal reader) the
// program that performs the requested function. These programs
// are FL2500 (create, delete, or copy) and FL2510 (rerun).
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/19/89  CNEWMA  New application.
// 0000001  10/16/90  jalle1  Add JCL table and logic to submit
//                            FL292D - LRPS DELETE A SEASON
// fl-337   04/08/92  pmainw  eec restrictions.
// fl-358   05/19/93  jmclau  removed processing of fl2951
//                            proc which generates fl2951 LRPF
//                            ASSIGNED TO BLANK FACTORIES RPT.
// fl-358   05/20/93  jmclau  removed pop window logic when
//                            running the create schedule opt.
// FB9994   08/10/93  LDELUH  Chg loadlibs for cob2.
// fl-371.a 01/05/95  pmainw  Make eec restriction logic
//                            optional.
// fl1269   09/05/97  atanu   Independent submission of
//                            Footwear / Equipment LRPS
// *********************
Program FL0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FBAREC FBAREC; // record
  FBEREC FBEREC; // record
  FL0OW00 FL0OW00; // record
  FL0OW01 FL0OW01; // record
  FL0OW02 FL0OW02; // record
  FL0OW03 FL0OW03; // record
  FL0OW04 FL0OW04; // record
  FLWREC FLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0OT01; // table
  use FL0OT02; // table
  use FL0OT03; // table
  use FL0OT04; // table
  use FL0OT05 {deleteAfterUse = yes}; // table
  use FL0OT06 {deleteAfterUse = yes}; // table
  use FL0OT07 {deleteAfterUse = yes}; // table
  use FL0OT08 {deleteAfterUse = yes}; // table
  use XSETBL; // table
  use XSNTBL; // table
  use FL0OM.FL0OM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FL0OM010 initial; /* M001 input/output*/
    set FL0OW00 empty; /* Working storage*/
    set FL0OW01 empty; /* display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* XPTA0P work record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FL0OW00.FL0OWSIP = "N"; /* initialize switch*/
    FL0OW00.FL0OW-EEC-RESTRICTION = "N";
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0O001; /* Converse the main process*/
    ;
    ;
    FL0O001: FL0O001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0O001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FL0O

// Inquire/maintain a table row
Function FL0O001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FL0O100(); /* Obtain the data to display*/
  ;
  FL0O200(); /* Format and display the map*/
  ;
  FL0O300(); /* Check attention identifier*/
  ;
  FL0O400(); /* Reset fields to normal intensity*/
  ;
  FL0O500(); /* Verify the entered data*/
  ;
  FL0O600(); /* Process valid input request*/
  ;
  ;
end // end FL0O001

// Obtain the data to display
Function FL0O100()
   /* ------------------------------------------------------------*/
   /* if data not requested, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OW00.FL0OWSIP == "Y" /* schedule in process*/
   || FLWREC.XXXMSGNO != 0    /* error occured*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    return;
  end
  ;
  FL0OW00.FL0OWRNA = "N"; /* reset switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Select Row - Footwear Buy Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty; /* clear record*/
  ;
  FBEREC.XXXPGMNB = "FL250D"; /* program name*/
  ;
  FL0O110(); /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* Select Row - Footwear Buy Program Control Table for FL251D.*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty; /* clear record*/
  ;
  FBEREC.XXXPGMNB = "FL251D"; /* program name*/
  ;
  FL0O110(); /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* Select Row - Footwear Buy Program Control Table for FL292D.*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty; /* clear record*/
  ;
  FBEREC.XXXPGMNB = "FL292D"; /* program name*/
  ;
  FL0O110(); /* Select table row*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select Row - Footwear Buy Program Control Table for FL293D.*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty; /* clear record*/
  ;
  FBEREC.XXXPGMNB = "FL293D"; /* program name*/
  ;
  FL0O110(); /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* Select Row - Factory Model Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0O120(); /* Select table row*/
  ;
  /* MOVE FL0OW00.FL0OW-EEC-RESTRICTION  the field is not appearing to the*/
  /* TO FL0OM010.FL0OM-EEC-RESTRICTION; screen and value is defaulted 'N'*/
end // end FL0O100

// Select Table Row - Pgm Cntrl
Function FL0O110()
   /* ------------------------------------------------------------*/
   /* Get Table Row*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FBEREC.FBEDRPS == "Y")
        converseLib.validationFailed(104); /* 'LR Detail Schedule is being run'*/
        FLWREC.XXXMODID = "110"; /* module identification*/
        FL0OW00.FL0OWSIP = "Y"; /* set switch*/
        exit stack; /* Return to previous process*/
      else
        return;
      end
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        return;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "110"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O110

// Select Table Row - Fcty Cntrl
Function FL0O120()
   /* --------------------------------------------------------------*/
   /* Select Row - Factory Model Table(DFBUY.VFYMDL01) for footwear*/
   /* --------------------------------------------------------------*/
  ;
  set FBAREC empty;
  ;
  FBAREC.FBDMDTYP = "FTF"; /* Model type for footwear*/
  ;
  FL0O130(); /* Select (S3) DFBUY.VFYMDL01*/
  FL0O140(); /* Fetch (N3) DFBUY.VFYMDL01*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful move schd nbr to working storage and map var.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0OW00.FL0OW-LFSHD = FBAREC.FBAMDNBR; /* last ftwr schd nbr*/
      FL0OM010.FL0OM-LFSHD = FBAREC.FBAMDNBR; /* /move schd nbr to map*/
      ;
    else
      return;
    end
  end
  FL0O150(); /* Close (C3) DFBUY.VFYMDL01*/
  ;
   /* ---------------------------------------------------------------*/
   /* Select Row - Factory Model Table(DFBUY.VFYMDL01) for Equipmant*/
   /* ---------------------------------------------------------------*/
  ;
  set FBAREC empty;
  ;
  FBAREC.FBDMDTYP = "FTE"; /* Model type for equipment*/
  ;
  FL0O130(); /* Select (S3) DFBUY.VFYMDL01*/
  FL0O140(); /* Fetch (N3) DFBUY.VFYMDL01*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful move schd nbr to working storage and map var.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0OW00.FL0OW-LESHD = FBAREC.FBAMDNBR; /* last equp schd nbr*/
      FL0OM010.FL0OM-LESHD = FBAREC.FBAMDNBR; /* /move schd nbr to map*/
      ;
    else
      return;
    end
  end
  ;
  FL0O150(); /* Close (C3) DFBUY.VFYMDL01*/
  ;
   /* ------------------------------------------------------------*/
   /* Select Row - Factory Model Control Table*/
   /* ------------------------------------------------------------*/
  ;
  set FB9REC empty; /* clear record*/
  ;
   /* ------------------------------------------------------------*/
   /* Get Row - Factory Control Table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0OW00.FL0OWDDT = FB9REC.FB8BUYDT; /* Buy date*/
      FL0OW00.FL0OW-LDPSN = FB9REC.FB9LDPSN; /* move mdl nbr to Wrk St.*/
      if (FL0OW00.FL0OW-LFSHD == FL0OW00.FL0OW-LDPSN
       || FL0OW00.FL0OW-LDPSN-DEC < 0.01)
        FL0OW00.FL0OW-FCSD = FL0OW00.FL0OW-LDPSN + .01;
      else
        FL0OW00.FL0OW-FCSD = FL0OW00.FL0OW-LDPSN; /* create ftwr schd nbr*/
      end
      if (FL0OW00.FL0OW-LESHD == FL0OW00.FL0OW-LDPSN
       || FL0OW00.FL0OW-LDPSN-DEC < 0.01)
        FL0OW00.FL0OW-ECSD = FL0OW00.FL0OW-LDPSN + .01;
      else
        FL0OW00.FL0OW-ECSD = FL0OW00.FL0OW-LDPSN; /* create ftwr schd nbr*/
      end
      FL0OM010.FL0OM-FCSD = FL0OW00.FL0OW-FCSD; /* ftwr schd nbr to map*/
      FL0OM010.FL0OM-ECSD = FL0OW00.FL0OW-ECSD; /* equp schd nbr to map*/
  /* MOVE FL0OW00.FL0OW-FCSD TO FL0OM010.FL0OMCTS;/* copy to schedule nbr*/
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FLWREC.XXXMODID = "120"; /* module identification*/
        converseLib.validationFailed(01); /* 'error, please notify programming'*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "120"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O120

// Select set (S3) DFBUY.VFYMDL01
Function FL0O130()
   /* ------------------------------------------------------------*/
   /* Select the requested sets from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3470" ("S3", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      return;
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
        converseLib.validationFailed(125); /* Schedule number not found*/
        FLWREC.XXXMODID = "130";
        return;
        ;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(48); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "130"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "130 SELECT DFBUY.VFYMDL01   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O130

// Fetch (N3) DFBUY.VFYMDL01
Function FL0O140()
   /* ------------------------------------------------------------*/
   /* Select the requested sets from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3470" ("N3", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      return; /* Return to previous process*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
        converseLib.validationFailed(140);
        FLWREC.XXXMODID = "520";
        return;
        ;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(48); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "140"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "140 FETCH TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O140

// Close set (C3) DFBUY.VFYMDL01
Function FL0O150()
   /* ------------------------------------------------------------*/
   /* Close the selected set of records from the table*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3470" ("C3", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RETURN*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(48); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "150"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "150 CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FL0O150

// Format and converse the map
Function FL0O200()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FL0OM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0OM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0OM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If ezemno has been set, it will override xxxmsgno*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FLWREC.XXXMSGNO != 0) /* Message to display*/
    FL0OM010.XXXMODID = FLWREC.XXXMODID; /* module identification*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end
                                   /* message number moved to ezemno*/
    set FL0OM010 alarm;
  end
  ;
  converse FL0OM010 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.XXXMODID = " "; /* Module identification*/
  FL0OM010.XXXMODID = " "; /* Module identification*/
  FLWREC.XXXMSGNO = 0; /* error message number*/
  COMMAREA.CATOAP = FL0OM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0OM010.CAITEM; /* Application data*/
  ;
  ;
end // end FL0O200

// Check attention identifier
Function FL0O300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FL0OM010 initial; /* clear map*/
    COMMAREA.CATOAP = " "; /* clear to application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    exit stack; /* return to show error msg*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFLS01();
      set FL0OM010.CATOAP cursor, bold; /* set cursor*/
      ;
    else
      ;
      converseLib.validationFailed(44); /* 'cannot access application'*/
      FL0OM010.XXXMODID = "300"; /* module identification*/
      ;
    end
    ;
    exit stack;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF4 is pressed, go to Main Menu*/
   /* If PF5 is pressed, go to Production Menu*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* pf3 was pressed*/
   || converseVar.eventKey is pf4  /* pf4 was pressed*/
   || converseVar.eventKey is pf5  /* pf5 was pressed*/
   || converseVar.eventKey is pf13 /* pf13 was pressed*/
   || converseVar.eventKey is pf15 /* pf15 was pressed*/
   || converseVar.eventKey is pf16 /* pf16 was pressed*/
   || converseVar.eventKey is pf17 /* pf17 was pressed*/
   || converseVar.eventKey is pf18 /* pf18 was pressed*/
   || converseVar.eventKey is pf19 /* pf19 was pressed*/
   || converseVar.eventKey is pf21) /* pf21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0OM010"; /* APPLICATION FIND CODE*/
    end
    ;
    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "FL0M";
    end
    ;
    if (converseVar.eventKey is pf13) /* pf12 was pressed*/
      COMMAREA.CATOAP = "FL0N"; /* Priority Selection*/
    end
    ;
    if (converseVar.eventKey is pf15) /* pf15 was pressed*/
      COMMAREA.CATOAP = "FL0P"; /* Moves*/
    end
    ;
    if (converseVar.eventKey is pf16) /* pf16 was pressed*/
      COMMAREA.CATOAP = "FL0Q"; /* Factory Splits*/
    end
    ;
    if (converseVar.eventKey is pf17) /* pf17 was pressed*/
      COMMAREA.CATOAP = "FL0V"; /* Factory Moves/Splits by Month*/
    end
    ;
    if (converseVar.eventKey is pf18) /* pf18 was pressed*/
      COMMAREA.CATOAP = "FL0W"; /* Purchase Adjustments*/
    end
    ;
    if (converseVar.eventKey is pf19) /* pf19 was pressed*/
      COMMAREA.CATOAP = "FL0S"; /* Detail Schedule Lists*/
    end
    ;
    if (converseVar.eventKey is pf21) /* pf21 was pressed*/
      COMMAREA.CATOAP = "FL0U"; /* Report Requests*/
    end
    ;
    XSFLS01();
    exit stack;
    ;
  end
  ;
  if (converseVar.eventKey not enter) /* enter was not pressed*/
    converseLib.validationFailed(3); /* Indicate PF key not valid*/
    FLWREC.XXXMODID = "300"; /* Process name*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* PA3 was pressed*/
      converseLib.clearScreen();
      
    end
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end FL0O300

// Reset highlighted fields
Function FL0O400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0OM010.FL0OM-FCSD initialAttributes; /* create schedule ftwr mdl number*/
  set FL0OM010.FL0OM-ECSD initialAttributes; /* create schedule equp mdl number*/
  set FL0OM010.FL0OMDSD initialAttributes; /* delete schedule model number*/
  set FL0OM010.FL0OMCFS initialAttributes; /* copy from schedule model number*/
  set FL0OM010.FL0OMCTS initialAttributes; /* copy to schedule model number*/
  set FL0OM010.FL0OMZCS initialAttributes; /* zero cleanup schedule number*/
  set FL0OM010.XSECD initialAttributes; /* season code*/
  set FL0OM010.XSNYR initialAttributes; /* season year range*/
  set FL0OM010.FL0OMQTB initialAttributes; /* qtb max value*/
  /* SET FL0OM010.FL0OM-EEC-RESTRICTION DEFINED; It is not valid now.*/
  set FL0OM010.FL0OM-PREV-LRPS-NBR initialAttributes; /**/
  ;
  FL0OW00.FL0OWIX1 = 1; /* initialize index*/
  while (FL0OW00.FL0OWIX1 <= 5)
    set FL0OM010.FL0OMSEL[FL0OWIX1] initialAttributes; /* selection code*/
    FL0OW00.FL0OWIX1 = FL0OW00.FL0OWIX1 + 1; /* increment index*/
  end
  ;
  set FL0OM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0OM010.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* if no lists requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.XSECD == "?") /* sesn cd list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FLWREC.XXXMSGNO = 121; /* no pf keys with list*/
      FLWREC.XXXMODID = "400"; /* module identification*/
      ;
      exit stack; /* exit to display a map*/
      ;
    end
    ;
  else
    ;
    return; /* return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if requested, display the list of season codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.XSECD == "?") /* sesn cd list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "SEASON CODE"; /* heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* until end of request*/
      XPXSE01(); /* display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      FL0OM010.XSECD = "    ";
    else
      FL0OM010.XSECD = XSETBL.XSECD[XX0XWPIX]; /* selected code*/
    end
    ;
    set FL0OM010.XSECD cursor; /* establish cursor position*/
  end
  ;
  ;
  ;
  ;
end // end FL0O400

// Verify the entered data
Function FL0O500()
   /* ------------------------------------------------------------*/
   /* Edit item (if entered)*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* item entered*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    set FL0OM010.CAITEM cursor, bold; /* set cursor*/
    FLWREC.XXXMSGNO = 40; /* 'enter only with Fast Path'*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if schedule in process, reset switch*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OW00.FL0OWSIP == "Y" /* schedule in process*/
   || FL0OW00.FL0OWRNA == "Y") /* resources not available*/
    FL0OW00.FL0OWSIP = "N"; /* reset switch*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    converseLib.validationFailed(104); /* 'schedule in process'*/
    exit stack; /* return to display the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If any zero cleanup data has been entered, ensure that*/
   /* corresponding selection was made.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMZCS != 0 /* zero sched nbr not 0*/
   || FL0OM010.XSECD != " "  /* or season cd not blank*/
   || FL0OM010.XSNYR != 0    /* or season yr range not 0*/
   || FL0OM010.FL0OMQTB != 0) /* or qtb not 0*/
    ;
    if (FL0OM010.FL0OMSEL[5] != "S") /* selection not made*/
      FLWREC.XXXMSGNO = 60; /* 'no option selected'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0OM010.FL0OMSEL[5] cursor, bold; /* set cursor*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a model number has been entered in the delete, copy, or*/
   /* second pass fields, ensure that the corresponding selection*/
   /* was made.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FL0OM010.FL0OMCFS != 0 /* copy from schedule nbr*/
   || FL0OM010.FL0OMCTS != 0) /* copy to schedule nbr*/
    if (FL0OM010.FL0OMSEL[4] != "S") /* selection not made*/
      FLWREC.XXXMSGNO = 60; /* 'no option selected'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0OM010.FL0OMSEL[4] cursor, bold; /* set cursor*/
    else
      if (FL0OM010.FL0OMCFS == 0) /* no mdl nbr entered for copy from*/
        FLWREC.XXXMSGNO = 521; /* 'copy from nbr has not entered'*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        set FL0OM010.FL0OMCFS cursor, bold; /* set cursor*/
      end
      if (FL0OM010.FL0OMCTS == 0) /* no mdl nbr entered for copy to*/
        FLWREC.XXXMSGNO = 522; /* 'copy to nbr has not entered'*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        set FL0OM010.FL0OMCTS cursor, bold; /* set cursor*/
      end
    end
  else
    if (FL0OM010.FL0OMSEL[4] == "S") /* selection not made*/
      FLWREC.XXXMSGNO = 521; /* 'copy from nbr has not entered'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0OM010.FL0OMCFS cursor, bold; /* set cursor*/
    end
  end
  ;
  if (FL0OM010.FL0OMDSD != 0) /* delete schedule nbr*/
    if (FL0OM010.FL0OMSEL[3] != "S") /* selection not made*/
      FLWREC.XXXMSGNO = 60; /* 'no option selected'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0OM010.FL0OMSEL[3] cursor, bold; /* set cursor*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify all selection codes equal a ' ' or an 'S'.*/
   /* ------------------------------------------------------------*/
  ;
  FL0OW00.FL0OWSCT = 0; /* initialize count*/
  ;
  FL0OW00.FL0OWIX1 = 5; /* initialize index*/
  ;
  while (FL0OW00.FL0OWIX1 > 0) /* number of selections available*/
    if (FL0OM010.FL0OMSEL[FL0OWIX1] == " ") /* selection equal space*/
       /* next sentence*/
    else
      if (FL0OM010.FL0OMSEL[FL0OWIX1] == "S") /* selection equal 'S'*/
        FL0OW00.FL0OWSCT = FL0OW00.FL0OWSCT + 1; /* selection count*/
      else
        FL0OW00.FL0OWSCT = FL0OW00.FL0OWSCT + 1; /* selection count*/
        FLWREC.XXXMSGNO = 41; /* 'S' is only valid code*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        set FL0OM010.FL0OMSEL[FL0OWIX1] cursor, bold; /* set cursor*/
      end
    end
    FL0OW00.FL0OWIX1 = FL0OW00.FL0OWIX1 - 1; /* decrement index*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if more than one selection made, set up error message*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OW00.FL0OWSCT > 1) /* more than one selection made*/
    FLWREC.XXXMSGNO = 73; /* 'more than one selection'*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    FL0OW00.FL0OWIX1 = 5; /* initialize index*/
    while (FL0OW00.FL0OWIX1 > 0)
      if (FL0OM010.FL0OMSEL[FL0OWIX1] == "S") /* selection made*/
        set FL0OM010.FL0OMSEL[FL0OWIX1] cursor, bold; /* set cursor*/
      end
      FL0OW00.FL0OWIX1 = FL0OW00.FL0OWIX1 - 1; /* decrement index*/
    end
  end
  ;
  FL0OW00.FL0OWSCT = 0; /* initialize count*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* verify zero cleanup date if 's'elected.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMSEL[5] == "S") /* zero cleanup selected*/
    ;
    FL0OW00.FL0OWSCT = FL0OW00.FL0OWSCT + 1; /* increment count*/
    ;
    if (FL0OM010.FL0OMQTB > 0) /* qtb > 0*/
       /* next sentence*/
    else
      FLWREC.XXXMSGNO = 10; /* 'invalid value'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0OM010.FL0OMQTB cursor, bold; /* set cursor*/
    end
    ;
    if (FL0OM010.XSNYR == 0) /* sesn yr rnge not entered*/
      FLWREC.XXXMSGNO = 08; /* 'required field'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0OM010.XSNYR cursor, bold; /* set cursor*/
    else
      if (FL0OM010.XSNYR in XSNTBL.XSNYR /* sesn yr rnge in table*/
       && XSNTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
         /* next sentence*/
      else
        FLWREC.XXXMSGNO = 10; /* 'invalid value'*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        set FL0OM010.XSNYR cursor, bold; /* set cursor*/
      end
    end
    ;
    ;
    if (FL0OM010.XSECD == "  ") /* sesn cd not entered*/
      FLWREC.XXXMSGNO = 08; /* 'required field'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0OM010.XSECD cursor, bold; /* set cursor*/
    else
      if (FL0OM010.XSECD in XSETBL.XSECD /* sesn cd in table*/
       && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
         /* next sentence*/
      else
        FLWREC.XXXMSGNO = 10; /* 'invalid value'*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        set FL0OM010.XSECD cursor, bold; /* set cursor*/
      end
    end
    ;
    ;
    /* ------------------------------------------------------------*/
     /* ensure schedule number exists.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0OM010.FL0OMZCS == 0) /* sched cd not entered*/
      FLWREC.XXXMSGNO = 08; /* 'required field'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0OM010.FL0OMZCS cursor, bold; /* set cursor*/
    else
      set FBAREC empty; /* clear row storage area*/
      FBAREC.FBDMDTYP = "FT1"; /* Model type*/
      FBAREC.FBAMDNBR = FL0OM010.FL0OMZCS; /* zero cleanup sched nbr*/
      FL0O520(); /* select table row*/
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/
        set FL0OM010.FL0OMZCS cursor, bold; /* set cursor*/
      end
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* if copy Schedule was selected, ensure it does exist*/
   /* If so, perform copy schedule.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMSEL[4] == "S" /* copy schedule selected*/
   && FL0OM010.FL0OMCFS != 0)     /* sch nbr is entered*/
    FL0OW00.FL0OWSCT = FL0OW00.FL0OWSCT + 1; /* increment count*/
    set FBAREC empty; /* clear row storage area*/
    FBAREC.FBDMDTYP = "FT1"; /* Model type*/
    FBAREC.FBAMDNBR = FL0OM010.FL0OMCFS; /* copy from schedule model*/
    FL0O520(); /* select table row*/
    ;
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        set FBAREC empty; /* clear row storage area*/
        FBAREC.FBDMDTYP = "FL1"; /* model type*/
        FBAREC.FBAMDNBR = FL0OM010.FL0OMCTS; /* schedule number*/
        FL0O530(); /* determine if copy to schedule exists*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
          set FL0OM010.FL0OMCFS cursor, bold; /* set cursor*/
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if delete Schedule Number was selected, ensure it does*/
   /* exist. If so, perform delete Schedule Number.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMSEL[3] == "S") /* delete Schedule number selected*/
    FL0OW00.FL0OWSCT = FL0OW00.FL0OWSCT + 1; /* increment count*/
    set FBAREC empty; /* clear row storage area*/
    FBAREC.FBDMDTYP = "FT1"; /* Model type*/
    FBAREC.FBAMDNBR = FL0OM010.FL0OMDSD; /* delete schedule model number*/
    FL0O520(); /* select table row*/
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/
      set FL0OM010.FL0OMDSD cursor, bold; /* set cursor*/
    end
  end
  ;
   /* ---------------------------------------------------------------------*/
   /* if create ftwr/equp LR Detail Shedule was selected,ensure it doesn't*/
   /* exist. If not, perform create LR Detail Schedule.*/
   /* ---------------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMSEL[2] == "S" /* Create Footwear LR Detail Schedule*/
   || FL0OM010.FL0OMSEL[1] == "S") /* Create Equipment LR Detail Schedule*/
    FL0OW00.FL0OWSCT = FL0OW00.FL0OWSCT + 1; /* increment count*/
    if (FL0OM010.FL0OM-PREV-LRPS-NBR != 0)
      set FBAREC empty; /* clear row storage area*/
      FBAREC.FBDMDTYP = "FT1"; /* Model type*/
      FBAREC.FBAMDNBR = FL0OM010.FL0OM-PREV-LRPS-NBR;
                                   /* ovrride prev lr*/
      FL0O520(); /* select table row*/
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/
        set FL0OM010.FL0OM-PREV-LRPS-NBR cursor, bold;
        FLWREC.XXXMSGNO = 125; /* sched notfound*/
      end
    end
  /* IF FL0OM010.FL0OM-EEC-RESTRICTION NE 'Y'*/
  /* AND FL0OM010.FL0OM-EEC-RESTRICTION NE 'N';*/
  /* SET FL0OM010.FL0OM-EEC-RESTRICTION CURSOR,BRIGHT;*/
  /* MOVE 10 TO FLWREC.XXXMSGNO;  /* invalid value*/
  /* END;*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0
   || FLWREC.XXXMSGNO != 0)
    exit stack;
  end
  ;
  ;
end // end FL0O500

// Select table row - Fcty Mdl
Function FL0O520()
   /* ------------------------------------------------------------*/
   /* Fetch row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* return to previous process*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        converseLib.validationFailed(125); /* 'schedule number not found'*/
        FLWREC.XXXMODID = "520"; /* module identification*/
        return; /* return to previous process*/
        ;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(48); /* 'fatal database error'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "520"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O520

// Select table row - Fcty Mdl
Function FL0O530()
   /* ------------------------------------------------------------*/
   /* Fetch row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      converseLib.validationFailed(46); /* 'data base updated by another user'*/
      FLWREC.XXXMODID = "530"; /* module identification*/
      return; /* return to previous process*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        return; /* return to previous process*/
        ;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(48); /* 'fatal database error'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "530"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O530

// Process valid input request
Function FL0O600()
   /* ------------------------------------------------------------*/
   /* if no selections made, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OW00.FL0OWSCT == 0) /* error occured*/
    return; /* return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Clear out JCL Work areas*/
   /* ------------------------------------------------------------*/
  ;
  FL0OW01.TARJCL = 0; /* move zereos to parameters record*/
  FL0OW02.TARJCL = 0; /* move zereos to execution Jcl record*/
  FL0OW03.TARJCL = 0; /* move zereos to condition overrides*/
  ;
   /* ------------------------------------------------------------*/
   /* Call subroutine to obtain current date and time*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
   /* ------------------------------------------------------------*/
   /* if option 1 selected, create schedule for footwear*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMSEL[1] == "S") /* create schedule selected*/
    ;
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL250D"; /* program number*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEDRPS = "Y"; /* schedule in process flag*/
    FL0OW00.FL0OWSIP = "Y"; /* schedule in process flag*/
    FL0OW01.FL0OWSCH = FL0OM010.FL0OM-FCSD;
    FL0OW00.FL0OWMDL = FL0OM010.FL0OM-FCSD; /* WS model*/
    FL0OW00.FL0OWMM = FL0OW00.FL0OWMIT; /* Model integer to month*/
    FL0OW00.FL0OWYY = FL0OW00.FL0OWDYY; /* Buy date year to year*/
    FL0OW00.FL0OWDD = 01; /* Day*/
    FL0OW01.FL0OWSDT = FL0OW00.FL0OWYY; /* start date*/
    FL0OW01.FL0OW-PREV-LRPS-NBR = FL0OM010.FL0OM-PREV-LRPS-NBR;
    FL0OW01.FL0OW-FTWR-EQUP-FL = "N"; /* Set the flag for ftwr schd*/
    FL0OW01.FL0OWBPF = 1; /* batch process flag*/
    FL0OW00.XXXPGMNB = "FL2500"; /* program number*/
    FL0OW00.FL0OWPNM = "FL2501"; /* procedure number*/
  /* IF FL0OM010.FL0OM-EEC-RESTRICTION EQ 'Y';/* Map field has commented out*/
    if (FL0OW00.FL0OW-EEC-RESTRICTION == "Y") /* process by eec restriction*/
      FL0O605(); /* Submit Job for Batch Processing,eec*/
    else
      FL0O606(); /* Submit Job for Batch Processing*/
    end
    FL0OM010.FL0OMSEL[1] = " "; /* clear selection field*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if option 2 selected, create schedule for Equipment*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMSEL[2] == "S") /* create schedule selected*/
    ;
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL250D"; /* program number*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEDRPS = "Y"; /* schedule in process flag*/
    FL0OW00.FL0OWSIP = "Y"; /* schedule in process flag*/
    FL0OW01.FL0OWSCH = FL0OM010.FL0OM-ECSD;
    FL0OW00.FL0OWMDL = FL0OM010.FL0OM-ECSD; /* WS model*/
    FL0OW00.FL0OWMM = FL0OW00.FL0OWMIT; /* Model integer to month*/
    FL0OW00.FL0OWYY = FL0OW00.FL0OWDYY; /* Buy date year to year*/
    FL0OW00.FL0OWDD = 01; /* Day*/
    FL0OW01.FL0OWSDT = FL0OW00.FL0OWYY; /* start date*/
    FL0OW01.FL0OW-PREV-LRPS-NBR = FL0OM010.FL0OM-PREV-LRPS-NBR;
    FL0OW01.FL0OW-FTWR-EQUP-FL = "Y"; /* Set the flag for ftwr schd*/
    FL0OW01.FL0OWBPF = 1; /* batch process flag*/
    FL0OW00.XXXPGMNB = "FL2500"; /* program number*/
    FL0OW00.FL0OWPNM = "FL2501"; /* procedure number*/
  /* IF FL0OM010.FL0OM-EEC-RESTRICTION EQ 'Y';/* Map field no longer exist.*/
    if (FL0OW00.FL0OW-EEC-RESTRICTION == "Y") /* Compare the default value.*/
      FL0O605(); /* Submit Job for Batch Processing,eec*/
    else
      FL0O606(); /* Submit Job for Batch Processing*/
    end
    FL0OM010.FL0OMSEL[2] = " "; /* clear selection field*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if option 3 selected, delete schedule number*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMSEL[3] == "S") /* delete schedule nbr selected*/
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL293D"; /* program number*/
    FL0OW00.XXXPGMNB = "FL2930"; /* program number*/
    FL0OW00.FL0OWPNM = "FL2931"; /* Proc name*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEDRPS = "Y"; /* schedule in process flag*/
    FL0OW00.FL0OWSIP = "Y"; /* schedule in process flag*/
    FL0OW01.FL0OWSCH = FL0OM010.FL0OMDSD; /* delete schedule model number*/
    FL0OW01.FL0OWBPF = 2; /* batch process flag*/
    FL0O630(); /* Submit Job for Batch Processing*/
    FL0OM010.FL0OMSEL[3] = " "; /* clear selection field*/
    FL0OM010.FL0OMDSD = 0; /* schedule number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if option 4 selected, copy schedule*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMSEL[4] == "S") /* copy schedule selected*/
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL293D"; /* program number*/
    FL0OW00.XXXPGMNB = "FL2930"; /* program number*/
    FL0OW00.FL0OWPNM = "FL2931,"; /* Proc name*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEDRPS = "Y"; /* schedule in process flag*/
    FL0OW00.FL0OWSIP = "Y"; /* schedule in process flag*/
    FL0OW01.FL0OWCTS = FL0OM010.FL0OMCTS; /* copy to shcedule number*/
    FL0OW01.FL0OWCFS = FL0OM010.FL0OMCFS;
                                   /* copy from schedule number*/
    FL0OW00.FL0OWMDL = FL0OM010.FL0OMCTS; /* WS model*/
    FL0OW00.FL0OWMM = FL0OW00.FL0OWMIT; /* Model integer to month*/
    FL0OW00.FL0OWYY = FL0OW00.FL0OWDYY; /* Buy date year to year*/
    FL0OW00.FL0OWDD = 01; /* Day*/
    FL0OW01.FL0OWSDT = FL0OW00.FL0OWYY; /* start date*/
    FL0OW01.FL0OWBPF = 3; /* batch process flag*/
    FL0O630(); /* Submit Job for Batch Processing*/
    FL0OM010.FL0OMSEL[4] = " "; /* clear selection field*/
    FL0OM010.FL0OMCFS = 0; /* schedule number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if option 5 selected, perform zero cleanup*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0OM010.FL0OMSEL[5] == "S") /* delete schedule nbr selected*/
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL292D"; /* program number*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEDRPS = "Y"; /* schedule in process flag*/
    FL0OW00.FL0OWSIP = "Y"; /* schedule in process flag*/
    ;
    FL0OW04.FL0OMZCS = FL0OM010.FL0OMZCS; /* sched nbr*/
    FL0OW04.XSECD = FL0OM010.XSECD; /* season code*/
    FL0OW04.FL0OWXSY = FL0OM010.XSNYR; /* season yr*/
    FL0OW04.FL0OMQTB = FL0OM010.FL0OMQTB; /* qtb*/
    ;
    FL0OW01.FL0OWBPF = 4; /* batch process flag*/
    FL0O620(); /* Submit Job for Batch Proc.*/
    FL0OM010.FL0OMSEL[5] = " "; /* clear selection field*/
    FL0OM010.FL0OMZCS = 0; /* schedule number*/
    FL0OM010.XSECD = "  "; /* season cd*/
    FL0OM010.XSNYR = 0; /* season yr*/
    FL0OM010.FL0OMQTB = 0; /* qtb*/
  end
  ;
  ;
  ;
  ;
end // end FL0O600

// submit test/production jcl
Function FL0O605()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0O610(); /* format production jcl*/
    else
      FL0O611(); /* format development jcl*/
    end
  else
    ;
    FL0OM010.XXXMODID = "605"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
end // end FL0O605

// submit test/production jcl
Function FL0O606()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0O640(); /* format production jcl*/
    else
      FL0O641(); /* format development jcl*/
    end
  else
    ;
    FL0OM010.XXXMODID = "606"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
end // end FL0O606

// Process Factory Model/prod jcl
Function FL0O610()
   /* ------------------------------------------------------------*/
   /* Add Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0O612(); /* Add Table Row - Pgm Cntrl Tble*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0OW00.FL0OWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0OW00.FL0OWIXT > 0) /* Until end of table*/
    ;
    if (FL0OT02.TARTYPE[FL0OWIXT] == "E") /* Execute statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/
      ;
      FL0OW02.TARJCL = FL0OT02.TARJCL[FL0OWIXT]; /* Execution JCL*/
      FL0OW02.FL0OWPNM = FL0OW00.FL0OWPNM; /* procedure name*/
      TA6REC.TARJCL[TA6INDEX] = FL0OW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT02.TARTYPE[FL0OWIXT]; /* Type*/
      ;
    else
      ;
      if (FL0OT02.TARTYPE[FL0OWIXT] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/
        ;
        FL0OW01.FL0OWRES = "INTL"; /* Restriction status*/
        TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0OT02.TARTYPE[FL0OWIXT]; /* Type*/
        ;
      else
        if (FL0OT02.TARTYPE[FL0OWIXT] == "Q") /* Parameters statement*/
          ;
         /* ------------------------------------------------------------*/
          /* Format parameters*/
         /* ------------------------------------------------------------*/
          ;
          FL0OW01.FL0OWRES = "NONR"; /* Restriction status*/
          TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0OT02.TARTYPE[FL0OWIXT];
                                   /* Type*/
          ;
        else
          ;
          if (FL0OT02.TARTYPE[FL0OWIXT] == "Z") /* override statement*/
            ;
            ;
            /* ------------------------------------------------------------*/
            /* Format System Override statement*/
            ;
            /* ------------------------------------------------------------*/
            ;
            FL0OW03.TARJCL = FL0OT02.TARJCL[FL0OWIXT]; /* JCL*/
            FL0OW03.FL0OWPGM = FL0OW00.XXXPGMNB; /* program*/
            TA6REC.TARJCL[TA6INDEX] = FL0OW03.TARJCL; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = FL0OT02.TARTYPE[FL0OWIXT]; /* Type*/
            ;
          else
            ;
            ;
            ;
            /* ------------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/
            ;
            /* ------------------------------------------------------------*/
            ;
            TA6REC.TARJCL[TA6INDEX] = FL0OT02.TARJCL[FL0OWIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = FL0OT02.TARTYPE[FL0OWIXT];
            ;
          end
        end
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
     /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
     /* ------------------------------------------------------------*/
    ;
    if (FL0OT02.TARJCL[FL0OWIXT] == "/*EOF") /* End of table*/
      ;
      FL0OW00.FL0OWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0OW00.FL0OWIXT = FL0OW00.FL0OWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0O615(); /* Submit the JCL*/
  ;
  ;
end // end FL0O610

// Process Factory Model/test jcl
Function FL0O611()
   /* ------------------------------------------------------------*/
   /* Add Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0O612(); /* Add Table Row - Pgm Cntrl Tble*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0OW00.FL0OWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0OW00.FL0OWIXT > 0) /* Until end of table*/
    ;
    if (FL0OT01.TARTYPE[FL0OWIXT] == "E") /* Execute statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/
      ;
      FL0OW02.TARJCL = FL0OT01.TARJCL[FL0OWIXT]; /* Execution JCL*/
      FL0OW02.FL0OWPNM = FL0OW00.FL0OWPNM; /* procedure name*/
      TA6REC.TARJCL[TA6INDEX] = FL0OW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT01.TARTYPE[FL0OWIXT]; /* Type*/
      ;
    else
      ;
      if (FL0OT01.TARTYPE[FL0OWIXT] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/
        FL0OW01.FL0OWRES = "INTL"; /* Restriction status*/
        TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0OT01.TARTYPE[FL0OWIXT]; /* Type*/
        ;
      else
        ;
        if (FL0OT01.TARTYPE[FL0OWIXT] == "Q") /* Parameters statement*/
          ;
         /* ------------------------------------------------------------*/
          /* Format parameters*/
         /* ------------------------------------------------------------*/
          FL0OW01.FL0OWRES = "NONR"; /* Restriction status*/
          TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0OT01.TARTYPE[FL0OWIXT];
                                   /* Type*/
          ;
        else
          ;
          if (FL0OT01.TARTYPE[FL0OWIXT] == "Z") /* override statement*/
            ;
            ;
            /* ------------------------------------------------------------*/
            /* Format System Override statement*/
            ;
            /* ------------------------------------------------------------*/
            ;
            FL0OW03.TARJCL = FL0OT01.TARJCL[FL0OWIXT]; /* JCL*/
            FL0OW03.FL0OWPGM = FL0OW00.XXXPGMNB; /* program*/
            TA6REC.TARJCL[TA6INDEX] = FL0OW03.TARJCL; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = FL0OT01.TARTYPE[FL0OWIXT]; /* Type*/
            ;
          else
            ;
            ;
            ;
            /* ------------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/
            ;
            /* ------------------------------------------------------------*/
            ;
            TA6REC.TARJCL[TA6INDEX] = FL0OT01.TARJCL[FL0OWIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = FL0OT01.TARTYPE[FL0OWIXT];
            ;
          end
        end
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
     /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
     /* ------------------------------------------------------------*/
    ;
    if (FL0OT01.TARJCL[FL0OWIXT] == "/*EOF") /* End of table*/
      ;
      FL0OW00.FL0OWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0OW00.FL0OWIXT = FL0OW00.FL0OWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0O615(); /* Submit the JCL*/
  ;
  ;
end // end FL0O611

// set pgm cntl lrps flag to y
Function FL0O612()
   /* ------------------------------------------------------------*/
   /* select row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call not successful*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0 /* or not good return code*/
     && SQLCA.VAGen_SQLCODE != -911) /* data base in use*/
      converseLib.validationFailed(01); /* 'error - please notify programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
    end
    ;
  end
  ;
  ;
  if (sysVar.errorCode != "00000000") /* Call not successful*/
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    FLWREC.XXXMODID = "612"; /* Module identification*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT PGM  CONTROL TABLE ROW ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* update row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FBEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  FBEREC.FBEDRPS = "Y"; /* detail lrps flag*/
  ;
  try
    call "IO3440" ("U ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      FLWREC.XXXMODID = "612"; /* Module identification*/
      exit stack;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "612"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PGM  CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O612

// Submit Jcl - Batch Processing
Function FL0O614()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* no scrn msg at batch job eoj*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0O616(); /* set lrps flag = n  program cntl*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "614"; /* module identification*/
    ;
  end
  ;
  return; /* Return to previous process*/
  ;
  ;
end // end FL0O614

// Submit Jcl - Batch Processing
Function FL0O615()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* no scrn msg at batch job eoj*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0O616(); /* set lrps flag = n  program cntl*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "615"; /* module identification*/
    ;
  end
  ;
  return; /* Return to previous process*/
  ;
  ;
end // end FL0O615

// set pgm cntl lrps flag to n
Function FL0O616()
   /* ------------------------------------------------------------*/
   /* select row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call not successful*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0 /* or not good return code*/
     && SQLCA.VAGen_SQLCODE != -911) /* data base in use*/
      converseLib.validationFailed(01); /* 'error - please notify programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
    end
    ;
  end
  ;
  if (sysVar.errorCode != "00000000") /* Call not successful*/
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    FLWREC.XXXMODID = "616"; /* Module identification*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT PGM  CONTROL TABLE ROW ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* update row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FBEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  FBEREC.FBEDRPS = "N"; /* detail lrps flag*/
  ;
  try
    call "IO3440" ("U ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      FLWREC.XXXMODID = "616"; /* Module identification*/
      exit stack;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "616"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PGM  CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O616

// submit test/prod jcl
Function FL0O620()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0O621(); /* format production jcl*/
    else
      FL0O625(); /* format development jcl*/
    end
  else
    ;
    FL0OM010.XXXMODID = "620"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
end // end FL0O620

// process zero cleanup /prod jcl
Function FL0O621()
   /* ------------------------------------------------------------*/
   /* Add Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0O622(); /* update table row - Pgm Cntrl Tble*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0OW00.FL0OWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0OW00.FL0OWIXT > 0) /* Until end of table*/
    ;
    if (FL0OT04.TARTYPE[FL0OWIXT] == "P") /* parm stmt*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0OW04.TARJCL; /* jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT04.TARTYPE[FL0OWIXT];
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0OT04.TARJCL[FL0OWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT04.TARTYPE[FL0OWIXT];
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0OT04.TARJCL[FL0OWIXT] == "/*EOF") /* End of table*/
      ;
      FL0OW00.FL0OWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0OW00.FL0OWIXT = FL0OW00.FL0OWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0O623(); /* Submit the JCL*/
  ;
  ;
end // end FL0O621

// set pgm cntl lrps flag to y
Function FL0O622()
   /* ------------------------------------------------------------*/
   /* select row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call not successful*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0 /* or not good return code*/
     && SQLCA.VAGen_SQLCODE != -911) /* data base in use*/
      converseLib.validationFailed(01); /* 'error - please notify programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
    end
    ;
  end
  ;
  ;
  if (sysVar.errorCode != "00000000") /* Call not successful*/
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    FLWREC.XXXMODID = "622"; /* Module identification*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT PGM  CONTROL TABLE ROW ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* update row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FBEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  FBEREC.FBEDRPS = "Y"; /* detail lrps flag*/
  ;
  try
    call "IO3440" ("U ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      FLWREC.XXXMODID = "622"; /* Module identification*/
      exit stack;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "622"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PGM  CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O622

// Submit Jcl - Batch Processing
Function FL0O623()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* submit JCL only*/
  TA6REC.TA6MSGSW = "N"; /* no scrn msg at batch job eoj*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "623"; /* module identification*/
    ;
  end
  ;
  return; /* Return to previous process*/
  ;
  ;
end // end FL0O623

// process zero cleanup /test jcl
Function FL0O625()
   /* ------------------------------------------------------------*/
   /* Add Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0O622(); /* update table row - Pgm Cntrl Tble*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0OW00.FL0OWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0OW00.FL0OWIXT > 0) /* Until end of table*/
    ;
    if (FL0OT03.TARTYPE[FL0OWIXT] == "P") /* parm stmt*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0OW04.TARJCL; /* jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT03.TARTYPE[FL0OWIXT];
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0OT03.TARJCL[FL0OWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT03.TARTYPE[FL0OWIXT];
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0OT03.TARJCL[FL0OWIXT] == "/*EOF") /* End of table*/
      ;
      FL0OW00.FL0OWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0OW00.FL0OWIXT = FL0OW00.FL0OWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0O623(); /* Submit the JCL*/
  ;
  ;
end // end FL0O625

// submit test/production jcl
Function FL0O630()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0O631(); /* format production jcl*/
    else
      FL0O635(); /* format development jcl*/
    end
  else
    ;
    FL0OM010.XXXMODID = "605"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
end // end FL0O630

// Process Factory Model/prod jcl
Function FL0O631()
   /* ------------------------------------------------------------*/
   /* Add Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0O612(); /* Add Table Row - Pgm Cntrl Tble*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0OW00.FL0OWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0OW00.FL0OWIXT > 0) /* Until end of table*/
    ;
    if (FL0OT06.TARTYPE[FL0OWIXT] == "E") /* Execute statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/
      ;
      FL0OW02.TARJCL = FL0OT06.TARJCL[FL0OWIXT]; /* Execution JCL*/
      FL0OW02.FL0OWPNM = FL0OW00.FL0OWPNM; /* procedure name*/
      TA6REC.TARJCL[TA6INDEX] = FL0OW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT06.TARTYPE[FL0OWIXT]; /* Type*/
      ;
    else
      ;
      if (FL0OT06.TARTYPE[FL0OWIXT] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0OT06.TARTYPE[FL0OWIXT]; /* Type*/
        ;
      else
        ;
        if (FL0OT06.TARTYPE[FL0OWIXT] == "Z") /* override statement*/
          ;
          /* ------------------------------------------------------------*/
           /* Format System Override statement*/
          /* ------------------------------------------------------------*/
          ;
          FL0OW03.TARJCL = FL0OT06.TARJCL[FL0OWIXT]; /* JCL*/
          FL0OW03.FL0OWPGM = FL0OW00.XXXPGMNB; /* program*/
          TA6REC.TARJCL[TA6INDEX] = FL0OW03.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0OT06.TARTYPE[FL0OWIXT]; /* Type*/
          ;
        else
          ;
          ;
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/
          ;
          TA6REC.TARJCL[TA6INDEX] = FL0OT06.TARJCL[FL0OWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0OT06.TARTYPE[FL0OWIXT];
          ;
        end
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0OT06.TARJCL[FL0OWIXT] == "/*EOF") /* End of table*/
      ;
      FL0OW00.FL0OWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0OW00.FL0OWIXT = FL0OW00.FL0OWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0O614(); /* Submit the JCL*/
  ;
  ;
end // end FL0O631

// Process Factory Model/test jcl
Function FL0O635()
   /* ------------------------------------------------------------*/
   /* Add Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0O612(); /* Add Table Row - Pgm Cntrl Tble*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0OW00.FL0OWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0OW00.FL0OWIXT > 0) /* Until end of table*/
    ;
    if (FL0OT05.TARTYPE[FL0OWIXT] == "E") /* Execute statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/
      ;
      FL0OW02.TARJCL = FL0OT05.TARJCL[FL0OWIXT]; /* Execution JCL*/
      FL0OW02.FL0OWPNM = FL0OW00.FL0OWPNM; /* procedure name*/
      TA6REC.TARJCL[TA6INDEX] = FL0OW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT05.TARTYPE[FL0OWIXT]; /* Type*/
      ;
    else
      ;
      if (FL0OT05.TARTYPE[FL0OWIXT] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0OT05.TARTYPE[FL0OWIXT]; /* Type*/
        ;
      else
        ;
        if (FL0OT05.TARTYPE[FL0OWIXT] == "Z") /* override statement*/
          ;
          /* ------------------------------------------------------------*/
           /* Format System Override statement*/
          /* ------------------------------------------------------------*/
          ;
          FL0OW03.TARJCL = FL0OT05.TARJCL[FL0OWIXT]; /* JCL*/
          FL0OW03.FL0OWPGM = FL0OW00.XXXPGMNB; /* program*/
          TA6REC.TARJCL[TA6INDEX] = FL0OW03.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0OT05.TARTYPE[FL0OWIXT]; /* Type*/
          ;
        else
          ;
          ;
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/
          ;
          TA6REC.TARJCL[TA6INDEX] = FL0OT05.TARJCL[FL0OWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0OT05.TARTYPE[FL0OWIXT];
          ;
        end
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0OT05.TARJCL[FL0OWIXT] == "/*EOF") /* End of table*/
      ;
      FL0OW00.FL0OWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0OW00.FL0OWIXT = FL0OW00.FL0OWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0O614(); /* Submit the JCL*/
  ;
  ;
end // end FL0O635

// Process Factory Model/prod jcl
Function FL0O640()
   /* ------------------------------------------------------------*/
   /* Add Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0O642(); /* Add Table Row - Pgm Cntrl Tble*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0OW00.FL0OWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0OW00.FL0OWIXT > 0) /* Until end of table*/
    ;
    if (FL0OT08.TARTYPE[FL0OWIXT] == "E") /* Execute statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/
      ;
      FL0OW02.TARJCL = FL0OT08.TARJCL[FL0OWIXT]; /* Execution JCL*/
      FL0OW02.FL0OWPNM = FL0OW00.FL0OWPNM; /* procedure name*/
      TA6REC.TARJCL[TA6INDEX] = FL0OW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT08.TARTYPE[FL0OWIXT]; /* Type*/
      ;
    else
      ;
      if (FL0OT08.TARTYPE[FL0OWIXT] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/
        ;
        FL0OW01.FL0OWRES = "INTL"; /* Restriction status*/
        TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0OT08.TARTYPE[FL0OWIXT]; /* Type*/
        ;
      else
        if (FL0OT08.TARTYPE[FL0OWIXT] == "Q") /* Parameters statement*/
          ;
         /* ------------------------------------------------------------*/
          /* Format parameters*/
         /* ------------------------------------------------------------*/
          ;
  /* IF FL0OM010.FL0OM-EEC-RESTRICTION EQ 'Y';map field has commented out*/
          if (FL0OW00.FL0OW-EEC-RESTRICTION == "Y")
            FL0OW01.FL0OWRES = "NONR"; /* Restriction status*/
          else
            FL0OW01.FL0OWRES = "    "; /* Restriction status*/
          end
          TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0OT08.TARTYPE[FL0OWIXT];
                                   /* Type*/
          ;
        else
          ;
          if (FL0OT08.TARTYPE[FL0OWIXT] == "Z") /* override statement*/
            ;
            ;
            /* ------------------------------------------------------------*/
            /* Format System Override statement*/
            ;
            /* ------------------------------------------------------------*/
            ;
            FL0OW03.TARJCL = FL0OT08.TARJCL[FL0OWIXT]; /* JCL*/
            FL0OW03.FL0OWPGM = FL0OW00.XXXPGMNB; /* program*/
            TA6REC.TARJCL[TA6INDEX] = FL0OW03.TARJCL; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = FL0OT08.TARTYPE[FL0OWIXT]; /* Type*/
            ;
          else
            ;
            ;
            ;
            /* ------------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/
            ;
            /* ------------------------------------------------------------*/
            ;
            TA6REC.TARJCL[TA6INDEX] = FL0OT08.TARJCL[FL0OWIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = FL0OT08.TARTYPE[FL0OWIXT];
            ;
          end
        end
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
     /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
     /* ------------------------------------------------------------*/
    ;
    if (FL0OT08.TARJCL[FL0OWIXT] == "/*EOF") /* End of table*/
      ;
      FL0OW00.FL0OWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0OW00.FL0OWIXT = FL0OW00.FL0OWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0O645(); /* Submit the JCL*/
  ;
  ;
end // end FL0O640

// Process Factory Model/test jcl
Function FL0O641()
   /* ------------------------------------------------------------*/
   /* Add Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0O642(); /* Add Table Row - Pgm Cntrl Tble*/
  ;
  FLWREC.XXXMODID = "641"; /* Module identification*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0OW00.FL0OWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0OW00.FL0OWIXT > 0) /* Until end of table*/
    ;
    if (FL0OT07.TARTYPE[FL0OWIXT] == "E") /* Execute statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/
      ;
      FL0OW02.TARJCL = FL0OT07.TARJCL[FL0OWIXT]; /* Execution JCL*/
      FL0OW02.FL0OWPNM = FL0OW00.FL0OWPNM; /* procedure name*/
      TA6REC.TARJCL[TA6INDEX] = FL0OW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0OT07.TARTYPE[FL0OWIXT]; /* Type*/
      ;
    else
      ;
      if (FL0OT07.TARTYPE[FL0OWIXT] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/
        FL0OW01.FL0OWRES = "INTL"; /* Restriction status*/
        TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0OT07.TARTYPE[FL0OWIXT]; /* Type*/
        ;
      else
        ;
        if (FL0OT07.TARTYPE[FL0OWIXT] == "Q") /* Parameters statement*/
          ;
         /* ------------------------------------------------------------*/
          /* Format parameters*/
         /* ------------------------------------------------------------*/
          ;
  /* IF FL0OM010.FL0OM-EEC-RESTRICTION EQ 'Y';map field has commented out*/
          if (FL0OW00.FL0OW-EEC-RESTRICTION == "Y")
            FL0OW01.FL0OWRES = "NONR"; /* Restriction status*/
          else
            FL0OW01.FL0OWRES = "    "; /* Restriction status*/
          end
          TA6REC.TARJCL[TA6INDEX] = FL0OW01.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0OT07.TARTYPE[FL0OWIXT];
                                   /* Type*/
          ;
        else
          ;
          if (FL0OT07.TARTYPE[FL0OWIXT] == "Z") /* override statement*/
            ;
            ;
            /* ------------------------------------------------------------*/
            /* Format System Override statement*/
            ;
            /* ------------------------------------------------------------*/
            ;
            FL0OW03.TARJCL = FL0OT07.TARJCL[FL0OWIXT]; /* JCL*/
            FL0OW03.FL0OWPGM = FL0OW00.XXXPGMNB; /* program*/
            TA6REC.TARJCL[TA6INDEX] = FL0OW03.TARJCL; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = FL0OT07.TARTYPE[FL0OWIXT]; /* Type*/
            ;
          else
            ;
            ;
            ;
            /* ------------------------------------------------------------*/
            /* Format the Job Control Language statement from the table.*/
            ;
            /* ------------------------------------------------------------*/
            ;
            TA6REC.TARJCL[TA6INDEX] = FL0OT07.TARJCL[FL0OWIXT]; /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = FL0OT07.TARTYPE[FL0OWIXT];
            ;
          end
        end
      end
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
     /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
     /* ------------------------------------------------------------*/
    ;
    if (FL0OT07.TARJCL[FL0OWIXT] == "/*EOF") /* End of table*/
      ;
      FL0OW00.FL0OWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0OW00.FL0OWIXT = FL0OW00.FL0OWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0O645(); /* Submit the JCL*/
  ;
  ;
end // end FL0O641

// set pgm cntl lrps flag to y
Function FL0O642()
   /* ------------------------------------------------------------*/
   /* select row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call not successful*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0 /* or not good return code*/
     && SQLCA.VAGen_SQLCODE != -911) /* data base in use*/
      converseLib.validationFailed(01); /* 'error - please notify programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
    end
    ;
  end
  ;
  ;
  if (sysVar.errorCode != "00000000") /* Call not successful*/
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    FLWREC.XXXMODID = "642"; /* Module identification*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT PGM  CONTROL TABLE ROW ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* update row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FBEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  FBEREC.FBEDRPS = "Y"; /* detail lrps flag*/
  ;
  try
    call "IO3440" ("U ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      FLWREC.XXXMODID = "642"; /* Module identification*/
      exit stack;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "642"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PGM  CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O642

// Submit Jcl - Batch Processing
Function FL0O645()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* no scrn msg at batch job eoj*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0O646(); /* set lrps flag = n  program cntl*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "646"; /* module identification*/
    ;
  end
  ;
  return; /* Return to previous process*/
  ;
  ;
end // end FL0O645

// set pgm cntl lrps flag to n
Function FL0O646()
   /* ------------------------------------------------------------*/
   /* select row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call not successful*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0 /* or not good return code*/
     && SQLCA.VAGen_SQLCODE != -911) /* data base in use*/
      converseLib.validationFailed(01); /* 'error - please notify programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
    end
    ;
  end
  ;
  if (sysVar.errorCode != "00000000") /* Call not successful*/
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    FLWREC.XXXMODID = "646"; /* Module identification*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT PGM  CONTROL TABLE ROW ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* update row Program Control Table*/
   /* ------------------------------------------------------------*/
  ;
  FBEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  FBEREC.FBEDRPS = "N"; /* detail lrps flag*/
  ;
  try
    call "IO3440" ("U ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      FLWREC.XXXMODID = "646"; /* Module identification*/
      exit stack;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0OW00.FL0OWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "646"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PGM  CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0O646

//*** RECORD=FL0OW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0OW00 type basicRecord
  10 FL0OWRNA FL0OWRNA ; 
  10 FL0OWSCT FL0OWSCT ; 
  10 FL0OWIX1 FL0OWIX1 ; 
  10 FL0OWIX2 FL0OWIX2 ; 
  10 FL0OWIXT FL0OWIXT ; 
  10 FL0OWSIP FL0OWSIP ; 
  10 FL0OW-LFSHD FL0OW-LFSHD ; 
    15 FL0OW-LFSHD-INT FL0OW-LFSHD-INT ; 
    15 FL0OW-LFSHD-DEC FL0OW-LFSHD-DEC ; 
  10 FL0OW-LESHD FL0OW-LESHD ; 
    15 FL0OW-LESHD-INT FL0OW-LESHD-INT ; 
    15 FL0OW-LESHD-DEC FL0OW-LESHD-DEC ; 
  10 FL0OW-LDPSN FL0OW-LDPSN ; 
    15 FL0OW-LDPSN-INT FL0OW-LDPSN-INT ; 
    15 FL0OW-LDPSN-DEC FL0OW-LDPSN-DEC ; 
  10 FL0OW-FCSD FL0OW-FCSD ; 
  10 FL0OW-ECSD FL0OW-ECSD ; 
  10 FL0OW1YM FL0OW1YM ; 
    15 FL0OW1YY FL0OW1YY ; 
    15 FL0OW1MM FL0OW1MM ; 
  10 FL0OWGRG FL0OWGRG ; 
    15 FL0OWMM FL0OWMM ; 
    15 FL0OWDD FL0OWDD ; 
    15 FL0OWYY FL0OWYY ; 
  10 FL0OWDDT FL0OWDDT ; 
    15 FL0OWDCC FL0OWDCC ; 
    15 FL0OWDYY FL0OWDYY ; 
    15 FL0OWDMM FL0OWDMM ; 
    15 FL0OWDDD FL0OWDDD ; 
  10 FL0OWMDL FL0OWMDL ; 
    15 FL0OWMIT FL0OWMIT ; 
    15 FL0OWMDC FL0OWMDC ; 
  10 XXXPGMNB XXXPGMNB ; 
  10 FL0OWPNM FL0OWPNM ; 
  10 FL0OW-EEC-RESTRICTION FL0OW-EEC-RESTRICTION ; 
  10 FL0OW-PREV-LRPS-NBR FL0OW-PREV-LRPS-NBR ; 
end // end FL0OW00

//*** RECORD=FL0OW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0OW01 type basicRecord
  10 TARJCL TARJCL ; 
    15 FL0OWSCH FL0OWSCH ; 
    15 FL0OWSDT FL0OWSDT ; 
    15 FL0OWCFS FL0OWCFS ; 
    15 FL0OWCTS FL0OWCTS ; 
    15 FL0OWBPF FL0OWBPF ; 
    15 FL0OWRES FL0OWRES ; 
    15 FL0OW-PREV-LRPS-NBR FL0OW-PREV-LRPS-NBR ; 
    15 FL0OW-FTWR-EQUP-FL FL0OW-FTWR-EQUP-FL ; 
    15 * char(52) ; 
end // end FL0OW01

//*** RECORD=FL0OW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0OW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 * char(15) ; 
    15 FL0OWPNM FL0OWPNM ; 
    15 * char(59) ; 
end // end FL0OW02

//*** RECORD=FL0OW03 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0OW03 type basicRecord
  10 TARJCL TARJCL ; 
    15 * char(12) ; 
    15 FL0OWPGM FL0OWPGM ; 
    15 * char(62) ; 
end // end FL0OW03

//*** RECORD=FL0OW04 ****
// -------------------------------------------------
// parm record sent to FB292D - LRPS Delete a Season
// -------------------------------------------------
// ***********************
Record FL0OW04 type basicRecord
  10 TARJCL TARJCL ; 
    15 FL0OMZCS FL0OMZCS ; 
    15 XSECD XSECD ; 
    15 FL0OWXSY FL0OWXSY ; 
    15 FL0OMQTB FL0OMQTB ; 
    15 * char(61) ; 
end // end FL0OW04

// quantity to buy less than
DataItem FL0OMQTB num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// zero cleanup schedule number
DataItem FL0OMZCS num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// create schd mdl nbr for equp
DataItem FL0OW-ECSD num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// INCLUDE EEC RESTRICTION LOGIC
DataItem FL0OW-EEC-RESTRICTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create schd mdl nbr for ftwr
DataItem FL0OW-FCSD num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ftwr / equp selection flag
DataItem FL0OW-FTWR-EQUP-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// last created schedule for equp
DataItem FL0OW-LDPSN num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Decimal part of schedule nbr
DataItem FL0OW-LDPSN-DEC num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Integer part of schedule nbr
DataItem FL0OW-LDPSN-INT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// last created schedule for equp
DataItem FL0OW-LESHD num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Decimal part of schedule nbr
DataItem FL0OW-LESHD-DEC num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Integer part of schedule nbr
DataItem FL0OW-LESHD-INT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// last created schedule for ftwr
DataItem FL0OW-LFSHD num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Decimal part of schedule nbr
DataItem FL0OW-LFSHD-DEC num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Integer part of schedule nbr
DataItem FL0OW-LFSHD-INT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PREVIOUS LRPS OVERRIDE
DataItem FL0OW-PREV-LRPS-NBR num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered month
DataItem FL0OW1MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered year/month
DataItem FL0OW1YM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered year
DataItem FL0OW1YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// batch process flag
DataItem FL0OWBPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// copy from schedule model nbr
DataItem FL0OWCFS num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// copy to schedule model nbr
DataItem FL0OWCTS num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem FL0OWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered day
DataItem FL0OWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem FL0OWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data base format date
DataItem FL0OWDDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FL0OWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FL0OWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gregorian date
DataItem FL0OWGRG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index one for stored fields
DataItem FL0OWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FL0OWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem FL0OWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FL0OWMDC num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// model number
DataItem FL0OWMDL num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FL0OWMIT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered month
DataItem FL0OWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Program name
DataItem FL0OWPGM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc name
DataItem FL0OWPNM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Restrriction status
DataItem FL0OWRES char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resources unavailable
DataItem FL0OWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create schedule model number
DataItem FL0OWSCH num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// selection count
DataItem FL0OWSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start year
DataItem FL0OWSDT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// schedule in process switch
DataItem FL0OWSIP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season year range
DataItem FL0OWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// user entered year
DataItem FL0OWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

