package fl0e;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom3.XPXFR01;
import corpcom3.XPXX001;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXPGMNB;
import corpcom7.ZZHHMMSS;
import corpx1.XCNCD;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XFRABRV;
import corpx1.XFRCD;
import corpx1.XFRTBL;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XXXUSRID;
import corpz3.ZZZSDT;
import fb.common.FB8BUYDT;
import fb.common.FB9REC;
import fb.common.FBAMDNBR;
import fb.common.FBDBTCD;
import fb.common.FBDMDTYP;
import fb.common.FBDQTB;
import fb.common.FBDREC;
import fb.common.FBEREC;
import ff.common.*;
import fl.common.FLWREC;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import fy.common.FYBDXCC;
import fy.common.FYBOXCC;
import fy.common.FYBREC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PGAREC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=FL0E ****
// This application is part of the factory load system.  When
// a model number, style, and from-factory are entered, the
// corresponding stock buy quantity is displayed.  the user may
// then split the quantity among several factories by entering
// factory codes and quantities.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
// control    DATE       NAME    DESCRIPTION OF CHANGE
// --------   --------   ------  ------------------------------
//            05/18/89   LREIN   Created
// 003        06/27/90   rhetri  Defaulted reason code.
// 00000002   08/24/90   jalle1  Check for contention due to
//                               merge before any update to
//                               dfbuy.vflqtb01 (dhermm req)
// F#FL205    10/11/90   jalle1  check for trade restrictions
// 0000000    11/12/90   jalle1  allow use of style development
//                               products (and use defaults).
// 0000000    01/03/91   jalle1  add code to insert to
//                               dfbuy.vflaud01 when any update
//                               is performed.
// 0000000    04/11/91   pmainw  Get style short name from
//                               from dprodg.vsyprd01.
// 0000000    10/08/91   jalle1  oct '91 tbl chg - default new
//                               fields when insert to flqtb.
// fl303      01/30/92   jmclau  enhance factory load system to
//                               handle multiple sales orders.
//                               display an error message if
//                               the product being requested
//                               has a multiple sales order.
// 0000000    06/12/92   pmainw  change fl0ew02.
// FL339      07/01/92   jmclau  modify application to process
//                               factory reason codes.
// FL355      05/21/93   jmclau  allow NIL restriction override
// fl364      09/06/93   jmclau  allow negative fcty qtb on map
// y2kfix     11/20/97   pharwo  Regenerate for xx0xs01 changes
// *********************
Program FL0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FBDREC FBDREC; // record
  FBEREC FBEREC; // record
  FL0EW00 FL0EW00; // record
  FL0EW01 FL0EW01; // record
  FL0EW02 FL0EW02; // record
  FLWREC FLWREC; // record
  FY1REC FY1REC; // record
  FYBREC FYBREC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XFRTBL; // table
  use FL0EM.FL0EM001, // form
  		FL0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    FL0E000: FL0E000();
     /* ------------------------------------------------------------*/
     /* Default reason code to '27'.*/
     /* ------------------------------------------------------------*/

    FL0EM001.XFRCD = "27"; /* default to '27'*/
    if (FL0EM001.XFRCD in XFRTBL.XFRCD)
      FL0EM001.XFRABRV = XFRTBL.XFRABRV[sysVar.arrayIndex];
    end

    FL0EW01.XFRCD = "27"; /* default to '27'*/
    FL0EW01.XFRABRV = FL0EM001.XFRABRV;





     /* ------------------------------------------------------------*/
     /* Default gpc to footwear if blank.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.XGPCD == "  ")
      COMMAREA.XGPCD = "02";
    end




     /* ------------------------------------------------------------*/
     /* Flow to converse the Factory Load  process.*/
     /* ------------------------------------------------------------*/

    goto FL0E001; /* Converse Factory load split process*/


    FL0E001: FL0E001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Factory Load main process.*/
     /* ------------------------------------------------------------*/

    goto FL0E001; /* Converse Factory Load process*/


  end // end main
end // end FL0E

// special appl initialisation
Function FL0E000()
   /* ------------------------------------------------------------*/
   /* perform the standard application initialisation*/
   /* ------------------------------------------------------------*/

  XPFL001();

   /* ------------------------------------------------------------*/
   /* initialise working storage and map output areas.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty; /* sql commarea*/
  set FL0EW00 empty; /* application working storage*/
  set FL0EW01 empty; /* display working storage*/
  set FL0EM001 initial; /* initialise map output area*/
  FL0EW00.FL0EWDRF = "N"; /* no to request for data sw*/
  FL0EW00.FL0EWTR-OVERIDE-FL = "N"; /* initialize trade*/
                                   /* restriction override fl*/

  if (FLWREC.FBAMDNBR != 0)
    FL0EW00.FL0EWDRF = "Y"; /* request data*/
    FL0EM001.FBAMDNBR = FLWREC.FBAMDNBR; /* model number*/
  end

  if (FLWREC.FY1FCTYC != " ")
    FL0EW00.FL0EWDRF = "Y"; /* request data*/
    FL0EM001.FY1FCTYC = FLWREC.FY1FCTYC; /* factory*/
  end

  if (FLWREC.SY1STNBR != " ")
    FL0EW00.FL0EWDRF = "Y"; /* request data*/
    FL0EM001.SY1STNBR = FLWREC.SY1STNBR; /* style number*/
  end

  if (FLWREC.SY2CLRID != " ")
    FL0EW00.FL0EWDRF = "Y"; /* request data*/
    FL0EM001.SY2CLRID = FLWREC.SY2CLRID; /* color code*/
  end

  if (FLWREC.XDMCD != " ")
    FL0EW00.FL0EWDRF = "Y"; /* request data*/
    FL0EM001.XDMCD = FLWREC.XDMCD; /* dimension code*/
  end

  if (FLWREC.FBDBTCD != " ")
    FL0EW00.FL0EWDRF = "Y"; /* request data*/
    FL0EM001.FBDBTCD = FLWREC.FBDBTCD; /* buy type*/
  end

  if (FLWREC.PC2CUXID != " ")
    FL0EW00.FL0EWDRF = "Y"; /* request data*/
    FL0EM001.PC2CUXID = FLWREC.PC2CUXID; /* cust xref*/
  end


  FL0ES01(); /* get buy date*/
end // end FL0E000

// footwear forecasting main menu
Function FL0E001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) obtain necessary data.*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FL0E100(); /* obtain data to display*/

  FL0E200(); /* Format and display the map*/

  FL0E300(); /* Check attention identifier*/

  FL0E400(); /* Reset fields to normal intensity*/

  FL0E500(); /* Verify the entered data*/

  FL0E600(); /* Process valid input request*/


end // end FL0E001

// Obtain the data to display
Function FL0E100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FL0EW00.FL0EWDRF != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end
   /* ------------------------------------------------------------*/
   /* Initialize the trade restriction override flag*/
   /* ------------------------------------------------------------*/

  FL0EW00.FL0EWTR-OVERIDE-FL = "N"; /* initialize the trade*/
                                          /* restriction override fl*/
   /* ------------------------------------------------------------*/
   /* Save reason code.*/
   /* ------------------------------------------------------------*/

  FL0EW01.XFRCD = FL0EM001.XFRCD; /* reason code*/
  FL0EW01.XFRABRV = FL0EM001.XFRABRV; /* reason code abrv*/



  FL0E125(); /* Get style short name*/



   /* ------------------------------------------------------------*/
   /* Clear the row storage area, format the key and obtain the*/
   /* table row to be displayed.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;
                                   /* Clear row storage area for addtl prod*/

  PG2REC.XGPCD = "02"; /* GPC*/
  PG2REC.SY1STNBR = FL0EM001.SY1STNBR; /* Style*/

  if (FL0EM001.SY2CLRID <= " ") /* data not inmap*/
    FL0EM001.SY2CLRID = "00"; /* use default*/
  end

  PG2REC.SY2CLRID = FL0EM001.SY2CLRID; /* Color*/

  if (FL0EM001.XDMCD <= " ") /* data not in map*/
    FL0EM001.XDMCD = "00"; /* use default*/
  end

  PG2REC.XDMCD = FL0EM001.XDMCD; /* Dimension*/

  FL0EW01.SY1STNBR = FL0EM001.SY1STNBR; /* save key*/
  FL0EW01.SY2CLRID = FL0EM001.SY2CLRID; /* fields in*/
  FL0EW01.XDMCD = FL0EM001.XDMCD; /* working storage*/

  FL0E110(); /* Obtain the addtl prod data table row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in working storage area*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code, row found*/
    FL0EW01.SY2CLRAB = PG2REC.SY2CLRAB; /* color abbreviation*/
    FL0EW01.XCNCD = PG2REC.XCNCD; /* construction type*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, try the style development table.*/
    /* ------------------------------------------------------------*/

    set PG4REC empty;
                                   /* Clear row storage area for addtl prod*/

    PG4REC.PG4STNBR = FL0EM001.SY1STNBR; /* Style*/

    if (FL0EM001.SY2CLRID == "00 ") /* default from vsyclr01*/
      FL0EM001.SY2CLRID = "   "; /* use sydvl01 default*/
    end

    if (FL0EM001.XDMCD == "00") /* default from vsyclr01*/
      FL0EM001.XDMCD = "  "; /* use sydvl01 default*/
    end

    FL0EW01.SY1STNBR = FL0EM001.SY1STNBR; /* save key*/
    FL0EW01.SY2CLRID = FL0EM001.SY2CLRID; /* fields in*/
    FL0EW01.XDMCD = FL0EM001.XDMCD; /* working storage*/

    FL0E130(); /* Obtain the addtl prod data table row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code, row found*/
      FL0EW01.SY2CLRAB = "              "; /* color abbreviation*/
      FL0EW01.XCNCD = PG4REC.XCNCD; /* construction type*/

    else

      /* ------------------------------------------------------------*/
       /* Otherwise, move all * because no data was found to display*/
      /* ------------------------------------------------------------*/
      FL0EW01.SY2CLRAB = "**************"; /* color abbreviation*/
      FL0EW01.XCNCD = "***"; /* construction type*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Clear the row storage area, format the key and obtain the*/
   /* table row to be displayed.*/
   /* ------------------------------------------------------------*/

  set FBDREC empty; /* Clear row storage area for flqtb*/

  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.PC2INSEG = "000"; /* spec code*/
  FBDREC.XPGCD = "00"; /* package type code*/
  FBDREC.XUMCD = "01"; /* unit of measure code*/
  FBDREC.FB8BUYDT = FB9REC.FB8BUYDT; /* buy date*/
  FBDREC.FBDBTCD = FL0EM001.FBDBTCD; /* buy type*/
  FBDREC.PC2CUXID = FL0EM001.PC2CUXID; /* cust xref*/
  FBDREC.SY1STNBR = FL0EM001.SY1STNBR; /* Style*/
  FBDREC.FBAMDNBR = FL0EM001.FBAMDNBR; /* model number*/
  FBDREC.SY2CLRID = FL0EM001.SY2CLRID; /* Color*/
  FBDREC.XDMCD = FL0EM001.XDMCD; /* Dimension*/

  if (FL0EM001.FY1FCTYC == "X  ")
    FBDREC.FY1FCTYC = " ";
  else
    FBDREC.FY1FCTYC = FL0EM001.FY1FCTYC; /* factory code*/
  end

  FL0EW01.SY1STNBR = FL0EM001.SY1STNBR; /* save key info*/
  FL0EW01.FBAMDNBR = FL0EM001.FBAMDNBR; /* in working storage*/
  FL0EW01.FBDBTCD = FL0EM001.FBDBTCD;
  FL0EW01.PC2CUXID = FL0EM001.PC2CUXID;
  FL0EW01.FY1FCTYC = FL0EM001.FY1FCTYC; /* factory code*/

  FL0E120(); /* Obtain the flqtb table row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in working storage*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code, row found*/
    FL0EW01.FBDQTB = FBDREC.FBDQTB; /* factory load quantity to buy*/
    FL0EW01.XCTCD = FBDREC.XCTCD; /* country code*/
    FL0EW00.FL0EWDSW = "Y"; /* data found once switch*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, indicate that no data was found to display*/
    /* ------------------------------------------------------------*/

    if (FL0EW00.FL0EWDSW != "Y")
      FLWREC.XXXMODID = "100"; /* Module identification*/
      set FL0EM001.FBAMDNBR cursor, bold; /* highlight, place cursor*/
      set FL0EM001.FY1FCTYC bold; /* highlight*/
      set FL0EM001.SY1STNBR bold; /* Highlight*/
      set FL0EM001.SY2CLRID bold; /* Highlight*/
      set FL0EM001.XDMCD bold; /* Highlight*/
      set FL0EM001.FBDBTCD bold;
      set FL0EM001.PC2CUXID bold;
      FL0EM001.FBDQTB = 0;
      FL0EW01.SY2CLRAB = " "; /* color abbreviation*/
      FL0EW01.XCNCD = " "; /* construction type*/
      FL0EM001.SY1SSTNM = " "; /* short style name*/
      FL0EM001.SY2CLRAB = " "; /* color abbreviation*/
      FL0EM001.XCNCD = " "; /* construction type*/
      set FL0EM001.FL0EMSF1 skip, invisible;
      set FL0EM001.FL0EMSQ1 skip, invisible;
      set FL0EM001.FL0EMSF2 skip, invisible;
      set FL0EM001.FL0EMSQ2 skip, invisible;
      set FL0EM001.FL0EMSF3 skip, invisible;
      set FL0EM001.FL0EMSQ3 skip, invisible;
      set FL0EM001.FL0EMSF4 skip, invisible;
      set FL0EM001.FL0EMSQ4 skip, invisible;
      converseLib.validationFailed(18); /* Indicate no data found*/

    end

    if (FL0EW00.FL0EWDSW != "N"
     && FL0EM001.FBDQTB != 0)
      FL0EW01.FY1FCTYC = " "; /* factory*/
      FL0EW00.FL0EWDRF = "Y"; /* data request switch*/
      FL0EM001.XXXCURDT = 0; /* format map*/
      return; /* return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    FL0EW00.FL0EWDRF = "N"; /* Request for data switch*/
    FL0EM001.XXXCURDT = 0; /* format map*/
  end


end // end FL0E100

// select addtl prod data-vsyclr
Function FL0E110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0EW00.FL0EWDRF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FL0E110

// select tbl row flqtb
Function FL0E120()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the flqtb table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3460" ("S ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FL0EW00.FL0EWSFL = "N"; /* Inititialize multiple sales order fl*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "120"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* If multiple sales order (an -811 occurs) send message and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -811)   /* Multiple sales orders*/

    SQLCA.VAGen_SQLCODE = 0; /* Multiple sales orders*/
    converseLib.validationFailed(437); /* Can't process multiple s.o.*/
    FL0EW00.FL0EWDRF = "N"; /* dont request data*/
    FL0EW00.FL0EWSFL = "Y"; /* Multiple sales order flag*/
    set FL0EM001.SY1STNBR cursor; /* reset cursor*/

    exit stack; /* Exit to display map*/

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FL QTB    ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0EW00.FL0EWDRF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FL0E120

// Get style short name
Function FL0E125()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPRODG.VSYPRD01*/
   /* ---------------------------------------------------------*/


  set PGAREC empty;

  PGAREC.XGPCD = COMMAREA.XGPCD;

  PGAREC.SY1STNBR = FL0EM001.SY1STNBR;

  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FL0EW01.SY1SSTNM = PGAREC.PGASSTNM;
    return;

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

      FL0EW01.SY1SSTNM = "************";
      return;

    else

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "GET SHORT STYLE NAME            ";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end


      return; /* Return to previous process*/

    end

  end



end // end FL0E125

// select addtl prod data-vsydvl
Function FL0E130()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSDVLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0EW00.FL0EWDRF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FL0E130

// format and display the map
Function FL0E200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end

  if (FL0EM001.XXXCURDT == 0) /* map is not formatted*/
    FL0E210(); /* format the map*/
  end

  if (FLWREC.XXXMSGNO != 0) /* error or informational message*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end /* move to map*/
    FL0EM001.XXXMODID = FLWREC.XXXMODID; /* error module name*/
    set FL0EM001 alarm; /* indicate sound alarm*/
  end

  converse FL0EM001 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  FLWREC.XXXMODID = " "; /* module identification*/
  FLWREC.XXXMSGNO = 0; /* message number*/

  COMMAREA.CATOAP = FL0EM001.CATOAP; /* to application*/
  COMMAREA.CAITEM = FL0EM001.CAITEM; /* application data*/
end // end FL0E200

// format map data
Function FL0E210()
   /* ------------------------------------------------------------*/
   /* move data from working storage to map area*/
   /* ------------------------------------------------------------*/

  set FL0EM001 initial;
  FL0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move current date*/

  FL0EM001.CATOAP = COMMAREA.CATOAP; /* to application*/
  FL0EM001.CAITEM = COMMAREA.CAITEM; /* fastpath data*/
  FL0EM001.FBAMDNBR = FL0EW01.FBAMDNBR; /* model number*/
  FL0EM001.SY1STNBR = FL0EW01.SY1STNBR; /* style number*/
  FL0EM001.SY2CLRID = FL0EW01.SY2CLRID; /* color code*/
  FL0EM001.XDMCD = FL0EW01.XDMCD; /* dimension code*/
  FL0EM001.SY1SSTNM = FL0EW01.SY1SSTNM; /* style short name*/
  FL0EM001.SY2CLRAB = FL0EW01.SY2CLRAB; /* color abbreviation*/
  FL0EM001.XCNCD = FL0EW01.XCNCD; /* country code*/
  FL0EM001.FY1FCTYC = FL0EW01.FY1FCTYC; /* from factory*/
  FL0EM001.FBDBTCD = FL0EW01.FBDBTCD; /* buy type code*/
  FL0EM001.PC2CUXID = FL0EW01.PC2CUXID; /* cust xref*/
  FL0EM001.FBDQTB = FL0EW01.FBDQTB; /* quantity to buy*/
  FL0EM001.XFRCD = FL0EW01.XFRCD; /* reason code*/
  FL0EM001.XFRABRV = FL0EW01.XFRABRV; /* reason code abrv*/

  if (FL0EM001.FBDBTCD == " ")
    FL0EM001.FBDBTCD = "STK"; /* default*/
    set FL0EM001.SY1STNBR cursor; /* set cursor at style*/
  else
    set FL0EM001.FL0EMSF1 cursor; /* set cursor at first split*/
  end
end // end FL0E210

// check attention identifier
Function FL0E300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (FL0EM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FLWREC.FBAMDNBR = FL0EM001.FBAMDNBR; /* model number*/
      FLWREC.SY1STNBR = FL0EM001.SY1STNBR; /* style number*/
      FLWREC.SY2CLRID = FL0EM001.SY2CLRID; /* color code*/
      FLWREC.XDMCD = FL0EM001.XDMCD; /* dimension code*/
      FLWREC.FY1FCTYC = FL0EM001.FY1FCTYC; /* factory*/
      FLWREC.FBDBTCD = FL0EM001.FBDBTCD; /* buy type*/
      FLWREC.PC2CUXID = FL0EM001.PC2CUXID; /* cust xref*/
      XSFLS01(); /* Exit to another application*/
      set FL0EM001.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
    else
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FLWREC.XXXMODID = "300"; /* Process name*/
    end

    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pa2
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21)

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0EM001"; /* for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FL0A";
    end

    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FL0B";
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FL0C";
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FL0D";
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FL0K";
    end

    if (converseVar.eventKey is pf20) /* PF20 was pressed*/
      COMMAREA.CATOAP = "FL0H";
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "FL0I";
    end

    if (converseVar.eventKey is pa2) /* PA2 was pressed*/
      COMMAREA.CATOAP = "FL0E"; /* new screen for this appl*/
    end

    set FLWREC empty;
    FLWREC.FBAMDNBR = FL0EM001.FBAMDNBR; /* model number*/
    FLWREC.SY1STNBR = FL0EM001.SY1STNBR; /* style number*/
    FLWREC.SY2CLRID = FL0EM001.SY2CLRID; /* color code*/
    FLWREC.XDMCD = FL0EM001.XDMCD; /* dimension code*/
    FLWREC.FY1FCTYC = FL0EM001.FY1FCTYC; /* factory*/
    FLWREC.FBDBTCD = FL0EM001.FBDBTCD; /* buy type*/
    FLWREC.PC2CUXID = FL0EM001.PC2CUXID; /* cust xref*/
    XSFLS01(); /* transfer to another application*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey not enter)
    converseLib.validationFailed(3); /* invalid key*/
    FLWREC.XXXMODID = "300"; /* program name*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
       /* reset map*/
    end

    exit stack;
  end


end // end FL0E300

// reset highlighted fields
Function FL0E400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FL0EM001.FBAMDNBR initialAttributes; /* factory model number*/
  set FL0EM001.SY1STNBR initialAttributes; /* style number*/
  set FL0EM001.SY2CLRID initialAttributes; /* color code*/
  set FL0EM001.XDMCD initialAttributes; /* dimension code*/
  set FL0EM001.FBDBTCD initialAttributes; /* buy type code*/
  set FL0EM001.PC2CUXID initialAttributes; /* cust xref*/
  set FL0EM001.FY1FCTYC initialAttributes; /* factory code*/
  set FL0EM001.FL0EMSF1 initialAttributes; /* split factory code1*/
  set FL0EM001.FL0EMSQ1 initialAttributes; /* split quantity to buy 1*/
  set FL0EM001.FL0EMSF2 initialAttributes; /* split factory code2*/
  set FL0EM001.FL0EMSQ2 initialAttributes; /* split quantity to buy 2*/
  set FL0EM001.FL0EMSF3 initialAttributes; /* split factory code3*/
  set FL0EM001.FL0EMSQ3 initialAttributes; /* split quantity to buy 3*/
  set FL0EM001.FL0EMSF4 initialAttributes; /* split factory code4*/
  set FL0EM001.FL0EMSQ4 initialAttributes; /* split quantity to buy 4*/
  set FL0EM001.XFRCD initialAttributes; /* factory reason code*/
  set FL0EM001.XFRABRV initialAttributes; /* reason abbreviation*/
  set FL0EM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0EM001.CAITEM initialAttributes; /* Commarea application data*/

  if (FL0EM001.XFRCD == "?")
    FL0E410(); /* pop up window*/
  end
end // end FL0E400

// reason code pop up window
Function FL0E410()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FL0EM001.XXXMODID = "410"; /* Module identification*/
    converseLib.validationFailed(19); /* Indicate pf key not valid*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of factory reason codes*/
   /* ------------------------------------------------------------*/

  if (FL0EM001.XFRCD == "?") /* line list requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "REASON CODE"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXFR01(); /* display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FL0EM001.XFRCD = FL0EW01.XFRCD;
    else
      FL0EM001.XFRCD = XFRTBL.XFRCD[XX0XWPIX];
      FL0EM001.XFRABRV = XFRTBL.XFRABRV[XX0XWPIX];
    end

    set FL0EM001.XFRCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/
  FL0EM001.XXXMODID = "410"; /* Module identification*/
  exit stack; /* Exit to display map*/


end // end FL0E410

// verify data
Function FL0E500()
   /* ------------------------------------------------------------*/
   /* Highlight any invalid application data that was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map at the*/
     /* end of the process*/
   /* ------------------------------------------------------------*/

  if (FL0EM001.CAITEM > " ") /* Application data was entered*/

    set FL0EM001.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
    FLWREC.XXXMODID = "500"; /* Process name*/

  end


  FL0E510(); /* check if key changed*/

   /* ------------------------------------------------------------*/
   /* key was changed and data was changed also.  this is an*/
     /* error*/
   /* ------------------------------------------------------------*/

  if (FL0EW00.FL0EWKYF == "Y") /* key was changed*/

    if (FL0EM001.FL0EMSF1 != FL0EW01.FL0EMSF1 /* split factory 1*/
     || FL0EM001.FL0EMSF2 != FL0EW01.FL0EMSF2 /* split factory 2*/
     || FL0EM001.FL0EMSF3 != FL0EW01.FL0EMSF3 /* split factory 3*/
     || FL0EM001.FL0EMSF4 != FL0EW01.FL0EMSF4 /* split factory 4*/
     || FL0EM001.FL0EMSQ1 != FL0EW01.FL0EMSQ1 /* split quantity 1*/
     || FL0EM001.FL0EMSQ2 != FL0EW01.FL0EMSQ2 /* split quantity 2*/
     || FL0EM001.FL0EMSQ3 != FL0EW01.FL0EMSQ3 /* split quantity 3*/
     || FL0EM001.FL0EMSQ4 != FL0EW01.FL0EMSQ4) /* split quantity 4*/

      converseLib.validationFailed(130);
                                   /* error msg - cannot change both*/
      FLWREC.XXXMODID = "500"; /* Process name*/
      exit stack; /* exit to display map*/
    else

      if (FL0EM001.FY1FCTYC == " ") /* factory not entered*/
        converseLib.validationFailed(8); /* required field*/
        FLWREC.XXXMODID = "500"; /* program id*/
        set FL0EM001.FY1FCTYC cursor, bold;
      end

    end

  end


   /* ------------------------------------------------------------*/
   /* neither key nor data was changed.  in this case, redisplay*/
   /* the map*/
   /* ------------------------------------------------------------*/

  if (FL0EW00.FL0EWKYF == "N") /* key was not changed*/

    if (FL0EM001.FY1FCTYC == " ") /* factory not entered*/
      converseLib.validationFailed(8); /* required field*/
      FLWREC.XXXMODID = "500"; /* program id*/
      set FL0EM001.FY1FCTYC cursor, bold;
    end

    /* IF FL0EM001.FL0EMSF1 EQ FL0EW01.FL0EMSF1;    split factory 1*/
     /* AND FL0EM001.FL0EMSF2 EQ FL0EW01.FL0EMSF2; split factory 2*/
     /* AND FL0EM001.FL0EMSF3 EQ FL0EW01.FL0EMSF3; split factory 3*/
     /* AND FL0EM001.FL0EMSF4 EQ FL0EW01.FL0EMSF4; split factory 4*/
     /* AND FL0EM001.FL0EMSQ1 EQ FL0EW01.FL0EMSQ1; split quantity 1*/
     /* AND FL0EM001.FL0EMSQ2 EQ FL0EW01.FL0EMSQ2; split quantity 2*/
     /* AND FL0EM001.FL0EMSQ3 EQ FL0EW01.FL0EMSQ3; split quantity 3*/
     /* AND FL0EM001.FL0EMSQ4 EQ FL0EW01.FL0EMSQ4; split quantity 4*/
       /* ;*/
       /* EZEFLO                      ; Exit to redisplay map*/
       /* ;*/
     /* ELSE ;*/

    /* ------------------------------------------------------------*/
     /* reason code cannot be spaces, and it must be in a working*/
     /* storage table.  the table element must be active*/
    /* ------------------------------------------------------------*/

    if (FL0EM001.XFRCD in XFRTBL.XFRCD /* entered reason code*/
     && XFRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* in table and active*/
      FL0EM001.XFRABRV = XFRTBL.XFRABRV[sysVar.arrayIndex]; /* save abbreviation*/
    else
      converseLib.validationFailed(10); /* invalid reason code*/
      FLWREC.XXXMODID = "500"; /* program id*/
      set FL0EM001.XFRCD cursor, bold; /* highlight*/
    end

    /* END ;*/

    /* ------------------------------------------------------------*/
     /* check to see if any of the split factories have changed.*/
     /* if they have,reset the trade restriction override flag so*/
     /* the split factories can be checked for trade restrictions.*/
    /* ------------------------------------------------------------*/


    if (FL0EM001.FL0EMSF1 != FL0EW00.FL0EMSF1 /* split factory 1*/
     || FL0EM001.FL0EMSF2 != FL0EW00.FL0EMSF2 /* split factory 2*/
     || FL0EM001.FL0EMSF3 != FL0EW00.FL0EMSF3 /* split factory 3*/
     || FL0EM001.FL0EMSF4 != FL0EW00.FL0EMSF4) /* split factory 4*/

      FL0EW00.FL0EWTR-OVERIDE-FL = "N"; /* set the trade*/
                                               /* restriction override*/
                                               /* flag so each split*/
                                               /* factory will be checked*/
      FL0EW00.FL0EWTR-EXIST-FL = "N"; /* this flag is used to*/
                                               /* indicate that one or*/
                                               /* more split factories*/
                                               /* has a trade restriction.*/

                                     /* initialize fields*/
      FL0EW00.FL0EMSF1 = " "; /* these fields in w.s*/
      FL0EW00.FL0EMSF2 = " "; /* are used just to see*/
      FL0EW00.FL0EMSF3 = " "; /* if any split fctys*/
      FL0EW00.FL0EMSF4 = " "; /* have changed while*/
                                     /* doing a trade restriction overide*/
                                                   /* restriction override*/

    end

    FL0E530(); /* validate factories*/

    if (FL0EW00.FL0EWTR-EXIST-FL == "Y") /* trade restrictions exist on one*/
                                        /* or more split factories*/
      FL0EW00.FL0EWTR-OVERIDE-FL = "Y"; /* set the trade restrict-*/
                                               /* override flag*/

      FL0EW00.FL0EMSF1 = FL0EM001.FL0EMSF1; /* these fields in w.s*/
      FL0EW00.FL0EMSF2 = FL0EM001.FL0EMSF2; /* are used just to see*/
      FL0EW00.FL0EMSF3 = FL0EM001.FL0EMSF3; /* if any split fctys*/
      FL0EW00.FL0EMSF4 = FL0EM001.FL0EMSF4; /* have changed while*/
                                                   /* doing a trade*/
                                                   /* restriction override*/

    end

  end

   /* ------------------------------------------------------------*/
   /* The key was changed. Now edit key fields.  only style nbr*/
   /* and model nbr can be edited.*/
   /* ------------------------------------------------------------*/

  if (FL0EW00.FL0EWKYF == "Y") /* key changed*/
    if (FL0EM001.SY1STNBR == " ") /* error if style number spaces*/

      converseLib.validationFailed(8);
      FLWREC.XXXMODID = "500";
      set FL0EM001.SY1STNBR cursor, bold; /* highlight*/

    end

    if (FL0EM001.FBAMDNBR == 0) /* error if model number is zero*/
      converseLib.validationFailed(8);
      FLWREC.XXXMODID = "500";
      set FL0EM001.FBAMDNBR cursor, bold; /* highlight*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Edit the product to see if it is a Multiple Sales Order.*/
   /* ------------------------------------------------------------*/


  FL0E540(); /* Mulitiple sales order edit ck*/

  if (converseVar.validationMsgNum != 0) /* Errors found*/
    exit stack; /* Exit to redisplay map*/
  end

  FL0EW01.FL0EMSF1 = FL0EM001.FL0EMSF1;
  FL0EW01.FL0EMSQ1 = FL0EM001.FL0EMSQ1;
  FL0EW01.FL0EMSF2 = FL0EM001.FL0EMSF2;
  FL0EW01.FL0EMSQ2 = FL0EM001.FL0EMSQ2;
  FL0EW01.FL0EMSF3 = FL0EM001.FL0EMSF3;
  FL0EW01.FL0EMSQ3 = FL0EM001.FL0EMSQ3;
  FL0EW01.FL0EMSF4 = FL0EM001.FL0EMSF4;
  FL0EW01.FL0EMSQ4 = FL0EM001.FL0EMSQ4;
end // end FL0E500

// determine if key fields chgd
Function FL0E510()
  FL0EW00.FL0EWKYF = "N"; /* initialise to key fields not changed*/

  if (FL0EM001.FY1FCTYC != FL0EW01.FY1FCTYC /* factory code*/
   || FL0EM001.SY1STNBR != FL0EW01.SY1STNBR /* style number*/
   || FL0EM001.FBAMDNBR != FL0EW01.FBAMDNBR /* model number*/
   || FL0EM001.XDMCD != FL0EW01.XDMCD       /* dimension code*/
   || FL0EM001.SY2CLRID != FL0EW01.SY2CLRID /* color code*/
   || FL0EM001.FBDBTCD != FL0EW01.FBDBTCD   /* buy type*/
   || FL0EM001.PC2CUXID != FL0EW01.PC2CUXID) /* cust xref*/

    FL0EW00.FL0EWKYF = "Y"; /* key changed*/
    FL0EW00.FL0EWSFL = "N"; /* reset multiple sales order fl*/

  end


end // end FL0E510

// validate split factories
Function FL0E530()
   /* ------------------------------------------------------------*/
   /* validate split factories and quantities from 4th to 1st*/
   /* if the factory has been entered, the quantity must be gt 0*/
   /* if the quantity has been entered, the factory must be gt 0*/
   /* if the factory is entered, it must be on the factory table*/
   /* the sum of the split quantities must not be greater than*/
   /* the original from factory quantity to buy, there must be no*/
   /* trade restrictions unless the user has requested to override*/
   /* the trade restriction.*/
   /* ------------------------------------------------------------*/

  FL0EW00.FL0EWSQB = FL0EM001.FL0EMSQ4; /* quantity to buy*/
  FL0EW00.FY1FCTYC = FL0EM001.FL0EMSF4; /* factory code*/
  FL0ES02(); /* edit factory*/

  if (FL0EW00.FL0EWFOK == "Y") /* factory ok*/
    /* next sentence*/
  else
    set FL0EM001.FL0EMSF4 cursor, bold; /* highlight*/
    set FL0EM001.FL0EMSQ4 bold; /* highlight*/
  end

  FL0EW00.FL0EWSQB = FL0EM001.FL0EMSQ3; /* quantity to buy*/
  FL0EW00.FY1FCTYC = FL0EM001.FL0EMSF3; /* factory code*/
  FL0ES02(); /* edit factory*/

  if (FL0EW00.FL0EWFOK == "Y") /* factory ok*/
    /* next sentence*/
  else
    set FL0EM001.FL0EMSF3 cursor, bold; /* highlight*/
    set FL0EM001.FL0EMSQ3 bold; /* highlight*/

  end


  FL0EW00.FL0EWSQB = FL0EM001.FL0EMSQ2; /* quantity to buy*/
  FL0EW00.FY1FCTYC = FL0EM001.FL0EMSF2; /* factory code*/
  FL0ES02(); /* edit factory*/

  if (FL0EW00.FL0EWFOK == "Y") /* factory ok*/
    /* next sentence*/
  else
    set FL0EM001.FL0EMSF2 cursor, bold; /* highlight*/
    set FL0EM001.FL0EMSQ2 bold; /* highlight*/
  end

  FL0EW00.FL0EWSQB = FL0EM001.FL0EMSQ1; /* quantity to buy*/
  FL0EW00.FY1FCTYC = FL0EM001.FL0EMSF1; /* factory code*/
  FL0ES02(); /* edit factory*/

  if (FL0EW00.FL0EWFOK == "Y") /* factory ok*/
    /* next sentence*/
  else
    set FL0EM001.FL0EMSF1 cursor, bold; /* highlight*/
    set FL0EM001.FL0EMSQ1 bold; /* highlight*/
  end

   /* ------------------------------------------------------------*/
   /* the sum of the entered quantities may not be greater than*/
   /* the quantity on the database originally for the from fcty*/
   /* ------------------------------------------------------------*/

  FL0EW00.FBDQTB = FL0EM001.FL0EMSQ1 + FL0EM001.FL0EMSQ2; /* add up input*/
  FL0EW00.FBDQTB = FL0EW00.FBDQTB + FL0EM001.FL0EMSQ3; /* quantities*/
  FL0EW00.FBDQTB = FL0EW00.FBDQTB + FL0EM001.FL0EMSQ4;

  if (FL0EM001.FBDQTB > 0)
    if (FL0EM001.FBDQTB < FL0EW00.FBDQTB)

      converseLib.validationFailed(113);
      set FL0EM001.FL0EMSQ1 cursor, bold; /* highlight*/
      FLWREC.XXXMODID = "530"; /* module name*/

    end
  else
    if (FL0EM001.FBDQTB < 0)
      if (FL0EM001.FBDQTB > FL0EW00.FBDQTB)

        converseLib.validationFailed(113);
        set FL0EM001.FL0EMSQ1 cursor, bold; /* highlight*/
        FLWREC.XXXMODID = "530"; /* module name*/

      end
    end
  end
end // end FL0E530

// obtain data to display
Function FL0E540()
   /* ------------------------------------------------------------*/
   /* Check for multiple sales orders.*/
   /* ------------------------------------------------------------*/


  FL0E550(); /* Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Perform prime fetch and load the customer xref and sales*/
   /* order into working storage.*/
   /* ------------------------------------------------------------*/

  FL0EW00.FL0EWCNT = 0;
  FL0E560(); /* Fetch first row*/
  if (FL0EW00.FL0EWCSW == "N") /**/
    FL0EW00.PC2CUXID = FBDREC.PC2CUXID;
    FL0EW00.OP1CUOID = FBDREC.OP1CUOID;
    FL0EW00.OP1NORID = FBDREC.OP1NORID;
    FL0EW00.FL0EMSOF = FBDREC.FY1FCTYC;
    FL0EW00.FL0EWSFL = "N";
  end

   /* ------------------------------------------------------------*/
   /* Fetch and check the style develeopment data for multiple*/
   /* Sales Oders.*/
   /* ------------------------------------------------------------*/

  while (FL0EW00.FL0EWCSW == "N") /* Until end of cursor*/
    FL0E560(); /* Fetch selected rows*/


  end


  FL0E570(); /* Close the selected set cursor*/

  if (FL0EW00.PC2CUXID > " "  /* cust xref code is a nil or drs*/
   && FL0EW00.FL0EWSFL == "Y" /* Product is a multiple sales order*/
  )                           /* AND FL0EW00.FL0EWCNT > 1;      /* Product is a multiple sales order*/

    converseLib.validationFailed(437); /* Cant process multiple sales orders*/

    FL0EW00.FL0EWDRF = "N";
    set FL0EM001.SY1STNBR cursor;

    exit stack;

  end
end // end FL0E540

// select set and open cursor
Function FL0E550()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

   /* MOVE 1 TO FL0EW00.FL0EWIXM;       /* Display line index*/
  FL0EW00.FL0EWCSW = "N"; /* End of cursor switch*/
  set FBDREC empty; /* Clear row storage area*/

  if (FL0EM001.SY2CLRID == " ") /* color code not entered*/
    FL0EM001.SY2CLRID = "00"; /* move default value to map*/
  end

  if (FL0EM001.XDMCD == " ") /* dimension code not entered*/
    FL0EM001.XDMCD = "00"; /* move default value to map*/
  end

  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.FBAMDNBR = FL0EM001.FBAMDNBR; /* model number*/
  FBDREC.SY1STNBR = FL0EM001.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0EM001.SY2CLRID; /* color code*/
  FBDREC.XDMCD = FL0EM001.XDMCD; /* dimension code*/
  FBDREC.FBDBTCD = FL0EM001.FBDBTCD; /* buy type code*/
  FBDREC.PC2CUXID = FL0EM001.PC2CUXID; /* cust xref*/


   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3460" ("S5", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "550"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET 5 OF FLQTB ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0E550

// get screen row
Function FL0E560()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the flqtb table*/
   /* ------------------------------------------------------------*/

  try
    call "IO3460" ("N5", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FBDREC.OP1CUOID == FL0EW00.OP1CUOID /* Cust order nbr equal*/
       && FBDREC.OP1NORID == FL0EW00.OP1NORID) /* Nike order nbr equal*/

        if (FBDREC.FY1FCTYC != FL0EW00.FL0EMSOF) /* Factories are equal*/

          return; /* Return to previous process*/

        else

          FL0EW00.FL0EWSFL = "Y"; /* Multiple sales order*/
          return; /* Return to previous process*/

        end
      else

        FL0EW00.FL0EWSFL = "Y"; /* Multiple sales order*/

        return; /* Return to previous process*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FL0EW00.FL0EWCSW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "560"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT 5 FLQTB ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0E560

// close flqtb cursor
Function FL0E570()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows for flqtb*/
   /* ------------------------------------------------------------*/

  try
    call "IO3460" ("C5", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "570"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE FLQTB 5 SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0E570

// process valid input request
Function FL0E600()
   /* ------------------------------------------------------------*/
   /* if key fields were changed set request for data flag for*/
   /* fl0e100*/
   /* ------------------------------------------------------------*/

  if (FL0EW00.FL0EWKYF == "Y"
   || FL0EW00.FL0EWSFL == "Y") /* multiple sales order fl*/
    FL0EW00.FL0EWDRF = "Y";
    FL0EW00.FL0EWDSW = "N"; /* data found once switch*/
    set FL0EW01 empty;
    return;
  end

   /* ------------------------------------------------------------*/
   /* check to see if merge is executing and causing contention*/
   /* on db2 tables.*/
   /* ------------------------------------------------------------*/

  FL0E605(); /* check for contention*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* this is now the update pass.  the database is being updated*/
   /* based on the factories and quantities entered in the splits*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/

   /* ------------------------------------------------------------*/
   /* load the key data for the audit record.*/
   /* ------------------------------------------------------------*/

  set FL0EW02 empty;

  FL0EW02.FBDMDTYP = "FL1"; /* model type*/
  FL0EW02.FB8BUYDT = FB9REC.FB8BUYDT; /* buy date*/
  FL0EW02.FBAMDNBR = FL0EM001.FBAMDNBR; /* model number*/
  FL0EW02.PC2CUXID = FL0EM001.PC2CUXID; /* cust xref*/
  FL0EW02.SY1STNBR = FL0EM001.SY1STNBR; /* style*/
  FL0EW02.SY2CLRID = FL0EM001.SY2CLRID; /* color*/
  FL0EW02.XDMCD = FL0EM001.XDMCD; /* dimension*/
  FL0EW02.XQACD = "01"; /* quality*/
  FL0EW02.PC2INSEG = FBDREC.PC2INSEG; /* inventory segment code*/
  FL0EW02.XPGCD = "00"; /* package code*/
  FL0EW02.XUMCD = "01"; /* unit of measure*/
  FL0EW02.XFRCD = FL0EM001.XFRCD; /* factory reason cd*/
  FL0EW02.FBDBTCD = FL0EM001.FBDBTCD; /* buy type*/
  FL0EW02.XXXPGMNB = COMMAREA.CACURRAP; /* program number*/
  FL0EW02.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FL0EW02.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  FL0EW02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* setup hhmmss*/






  /* GET FL0E100*/
   /* ------------------------------------------------------------*/
   /* Clear the row storage area, format the key and obtain the*/
   /* table row to be displayed.*/
   /* ------------------------------------------------------------*/

  set FBDREC empty; /* Clear row storage area for flqtb*/

  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.PC2INSEG = "000"; /* spec code*/
  FBDREC.XPGCD = "00"; /* package type code*/
  FBDREC.XUMCD = "01"; /* unit of measure code*/
  FBDREC.FB8BUYDT = FB9REC.FB8BUYDT; /* buy date*/
  FBDREC.FBDBTCD = FL0EM001.FBDBTCD; /* buy type*/
  FBDREC.PC2CUXID = FL0EM001.PC2CUXID; /* cust xref*/
  FBDREC.SY1STNBR = FL0EM001.SY1STNBR; /* Style*/
  FBDREC.FBAMDNBR = FL0EM001.FBAMDNBR; /* model number*/
  FBDREC.SY2CLRID = FL0EM001.SY2CLRID; /* Color*/
  FBDREC.XDMCD = FL0EM001.XDMCD; /* Dimension*/

  if (FL0EM001.FY1FCTYC == "X  ")
    FBDREC.FY1FCTYC = " ";
  else
    FBDREC.FY1FCTYC = FL0EM001.FY1FCTYC; /* factory code*/
  end

  FL0ES08(); /* select vflqtb01 from fcty*/

  if (FL0EW00.FBDQTB == FL0EM001.FBDQTB) /* no quantities left on orig*/
    FL0E640(); /* insert audit old fcty*/
    FL0E610(); /* fcty delete orig*/
  else
    FBDREC.FBDQTB = FBDREC.FBDQTB - FL0EW00.FBDQTB; /* reduce from fcty qtb*/
    FL0E640(); /* insert audit old fcty*/
    FL0E620(); /* by sum of splits, updte*/
  end

  FL0EW00.FL0EWCN = FBDREC.XCTCD; /* save factory*/
  FL0E630(); /* update all 4 split factory quantities*/

   /* ------------------------------------------------------------*/
   /* the program is at this point only if all updates were*/
   /* successful*/
   /* ------------------------------------------------------------*/

  FL0EW00.FL0EWDRF = "Y"; /* request data*/
  set FL0EW01 empty; /* reset working storage*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* commit all changes*/
  FLWREC.XXXMSGNO = 32; /* an info message, not an error*/
end // end FL0E600

// check for merge contention
Function FL0E605()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set FBEREC empty;

  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/

   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        FLWREC.XXXMODID = "605"; /* module identification*/
        exit stack; /* return to process*/
      end
    else


      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/

      FLWREC.XXXMODID = "605"; /* Module identification*/
      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(19); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(01); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end


end // end FL0E605

// delete flqtb row
Function FL0E610()
   /* ------------------------------------------------------------*/
   /* delete the row from the flqtb table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3460" ("D ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100)

      set FL0EM001.FY1FCTYC cursor, bold; /* highlight*/
      set FL0EM001.FBDQTB bold; /* highlight*/
      converseLib.validationFailed(110); /* row not found to delete*/
      FLWREC.XXXMODID = "610"; /* Module identification*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any changes*/
      exit stack; /* Exit to display map*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    FLWREC.XXXMODID = "610"; /* Module identification*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "610"; /* Module identification*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back any changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE FL QTB    ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDMDTYP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FL0E610

// update flqtb row
Function FL0E620()
   /* ------------------------------------------------------------*/
   /* update the row in the flqtb table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3460" ("U ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100)
      set FL0EM001.FY1FCTYC cursor, bold;
      set FL0EM001.FBDQTB bold;
      converseLib.validationFailed(110); /* row not found to update*/
      FLWREC.XXXMODID = "620"; /* module identification*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any changes*/
      exit stack; /* Exit to display map*/
    end

    /* ------------------------------------------------------------*/
     /* If data not available, return an error message to the user.*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      converseLib.validationFailed(19); /* Indicate not available*/
      FLWREC.XXXMODID = "620"; /* Module identification*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(01); /* Indicate system error*/
      FLWREC.XXXMODID = "620"; /* Module identification*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "UPDATE FL QTB    ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBDREC.FBDMDTYP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end


end // end FL0E620

// update split flqtb quantities
Function FL0E630()
   /* ------------------------------------------------------------*/
   /* the same processing is done for all 4 factories entered*/
     /* 1) if the factory has been entered on the screen*/
     /* 2) the audit record is written*/
     /* 3) it is checked to see if its on file*/
     /* 4) if it is, then an update must be formatted and done*/
     /* 5) if it isnt, then an add must be formatted and done*/
     /* 6) if any of the updates fail, the updates that took*/
        /* are rolled back*/
   /* standard error checking is done after each db call*/
   /* ------------------------------------------------------------*/

  if (FL0EM001.FL0EMSF4 != " ") /* factory 4 was entered*/

    if (FL0EM001.FL0EMSF4 == "X  ")
      FL0EW00.FY1FCTYC = " ";
    else
      FL0EW00.FY1FCTYC = FL0EM001.FL0EMSF4; /* factory nbr*/
    end

    FL0EW02.FY1FCTYC = FL0EW00.FY1FCTYC; /* factory cd*/
    FL0EW02.FBDQTB = FL0EM001.FL0EMSQ4; /* qty to buy*/
    FL0E631(); /* insert audit record for new fcty*/

    FL0EW00.FL0EWSQB = FL0EM001.FL0EMSQ4; /* quantity to buy*/
    FL0ES03(); /* update factory*/
  end

  if (FL0EM001.FL0EMSF3 != " ") /* factory 3 was entered*/

    if (FL0EM001.FL0EMSF3 == "X  ")
      FL0EW00.FY1FCTYC = " ";
    else
      FL0EW00.FY1FCTYC = FL0EM001.FL0EMSF3; /* factory nbr*/
    end

    FL0EW02.FY1FCTYC = FL0EW00.FY1FCTYC; /* factory cd*/
    FL0EW02.FBDQTB = FL0EM001.FL0EMSQ3; /* qty to buy*/
    FL0E631(); /* insert audit record for new fcty*/

    FL0EW00.FL0EWSQB = FL0EM001.FL0EMSQ3; /* quantity to buy*/
    FL0ES03(); /* update factory*/
  end

  if (FL0EM001.FL0EMSF2 != " ") /* factory 2 was entered*/

    if (FL0EM001.FL0EMSF2 == "X  ")
      FL0EW00.FY1FCTYC = " ";
    else
      FL0EW00.FY1FCTYC = FL0EM001.FL0EMSF2; /* factory nbr*/
    end

    FL0EW02.FY1FCTYC = FL0EW00.FY1FCTYC; /* factory cd*/
    FL0EW02.FBDQTB = FL0EM001.FL0EMSQ2; /* qty to buy*/
    FL0E631(); /* insert audit record for new fcty*/

    FL0EW00.FL0EWSQB = FL0EM001.FL0EMSQ2; /* quantity to buy*/
    FL0ES03(); /* update factory*/

  end

  if (FL0EM001.FL0EMSF1 != " ") /* factory 1 was entered*/

    if (FL0EM001.FL0EMSF1 == "X  ")
      FL0EW00.FY1FCTYC = " ";
    else
      FL0EW00.FY1FCTYC = FL0EM001.FL0EMSF1; /* factory nbr*/
    end

    FL0EW02.FY1FCTYC = FL0EW00.FY1FCTYC; /* factory cd*/
    FL0EW02.FBDQTB = FL0EM001.FL0EMSQ1; /* qty to buy*/
    FL0E631(); /* insert audit record for new fcty*/

    FL0EW00.FL0EWSQB = FL0EM001.FL0EMSQ1; /* quantity to buy*/
    FL0ES03(); /* update factory*/
  end

end // end FL0E630

// insert audit for new fcty
Function FL0E631()
   /* ------------------------------------------------------------*/
   /* insert the row to dfbuy.vflaud01.*/
   /* ------------------------------------------------------------*/

  try
    call "FL1210" ("A ", SQLCA, FL0EW02) {isNoRefresh = yes, isExternal = yes};
  end /* delete row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    FLWREC.XXXMODID = "631"; /* Module identification*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "631"; /* Module identification*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back any changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSRT AUDIT NEW FCTY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0EW02.FL0EWGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FL0E631

// insert audit for old fcty
Function FL0E640()
  FL0EW02.FY1FCTYC = FL0EM001.FY1FCTYC; /* from factory*/
  FL0EW02.FBDQTB = -1 * FL0EW00.FBDQTB; /* total split qtb*/

   /* ------------------------------------------------------------*/
   /* insert the row to dfbuy.vflaud01.*/
   /* ------------------------------------------------------------*/

  try
    call "FL1210" ("A ", SQLCA, FL0EW02) {isNoRefresh = yes, isExternal = yes};
  end /* delete row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    FLWREC.XXXMODID = "640"; /* Module identification*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "640"; /* Module identification*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back any changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSRT AUDIT OLD FCTY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0EW02.FL0EWGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FL0E640

// get buy date
Function FL0ES01()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful ,return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0ES01

// check if fcty on data base
Function FL0ES02()
  FL0EW00.FL0EWFOK = "Y"; /* initialise to factory ok*/

  if (FL0EW00.FL0EWSQB == 0 /* quantity not entered*/
   && FL0EW00.FY1FCTYC > " ") /* factory entered*/
    FLWREC.XXXMODID = "S02"; /* process number*/
    converseLib.validationFailed(124); /* error*/
    FL0EW00.FL0EWFOK = " "; /* set error sw to not ok*/
    return; /* return to previous process*/
  else

    if (FL0EW00.FL0EWSQB != 0 /* quantity entered*/
     && FL0EW00.FY1FCTYC <= " ") /* factory not entered*/
      converseLib.validationFailed(124); /* error*/
      FLWREC.XXXMODID = "S02"; /* process number*/
      FL0EW00.FL0EWFOK = " "; /* set error sw to not ok*/
      return; /* return to previous process*/
    end

  end

  if (FL0EW00.FY1FCTYC == "X  " /* way to show blank fcty*/
   || FL0EW00.FY1FCTYC == " ")  /* really is no fcty entered*/
    return; /* return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty;
  FY1REC.FY1FCTYC = FL0EW00.FY1FCTYC;
  FY1REC.XGPCD = "02";
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, check for trade restrictions;*/
   /* if not successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FL0EW00.FYBOXCC = FY1REC.XCTCD; /* origin xctcd*/
      FL0EW00.FYBDXCC = FL0EW01.XCTCD; /* dest xctcd*/

      FL0ES05(); /* select se csr for dfcty.vtrdrs01*/

      FL0EW00.FL0EWCSW = "N"; /* cursor switch*/
      FL0EW00.FL0EWTRS = "N"; /* trade restriction switch*/

      while (FL0EW00.FL0EWCSW == "N" /* while not eoc*/
       && FL0EW00.FL0EWTRS == "N") /* and not trade restrictions*/

        FL0ES06(); /* fetch dfcty.vtrds01*/

      end

      FL0ES07(); /* close dfcty.vtrds01*/


   /* ------------------------------------------------------------*/
   /* note: the fl0ew00.fl0etrs fl is used to determine if a trade*/
   /* restriction exists for the split factory being checked.*/
   /* the fl0ew00.fl0etr-exist flag is used to let the application*/
   /* know that there is a trade restriction on one or more of*/
   /* the split factories.*/
   /* ------------------------------------------------------------*/

      if (FL0EW00.FL0EWTRS == "Y" /* trade restrictions exist*/
       && FL0EW00.FL0EWTR-OVERIDE-FL == "N") /* dont override trade*/
                                             /* trade restrictions*/
        FL0EW00.FL0EWTR-EXIST-FL = "Y"; /* a trade restriction exists*/
                                             /* for at least on of the*/
                                             /* split fctys*/
        converseLib.validationFailed(488); /* trade restrictions msg*/
        FLWREC.XXXMODID = "S02"; /* process number*/
        FL0EW00.FL0EWFOK = " "; /* set error sw to not ok*/
      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* factory not found*/
      FL0EW00.FL0EWFOK = " "; /* set error sw to not ok*/
      converseLib.validationFailed(10); /* invalid value*/
      FLWREC.XXXMODID = "S02"; /* process number*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FL0ES02

// update split factories
Function FL0ES03()
   /* ------------------------------------------------------------*/
   /* select the row from the flqtb table to see if update or add*/
   /* ------------------------------------------------------------*/

  FBDREC.FY1FCTYC = FL0EW00.FY1FCTYC;
  try
    call "IO3460" ("S ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

   /* ------------------------------------------------------------*/
   /* If successful, the row will need to be updated*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FL0EW00.FL0EWUDF = "U"; /* update row*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        converseLib.validationFailed(0);
        FL0EW00.FL0EWUDF = "A"; /* add a row*/

      end

    end

  end


  TA1REC.TA1LOC = "SELECT QTB ROW FCTY"; /* in case of error*/

  FL0ES04(); /* standard error checking for split fctys*/

  if (FLWREC.XXXMODID == " ")

    FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
    FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

    if (FL0EW00.FL0EWUDF == "U") /* this is an update*/

      FBDREC.FBDQTB = FBDREC.FBDQTB + FL0EW00.FL0EWSQB; /* add to quantity*/
      try
        call "IO3460" ("U ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
      end /* update row*/

    else

      FBDREC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
      FBDREC.XCTCD = FL0EW00.FL0EWCN; /* country code*/
      FBDREC.FBDQTB = FL0EW00.FL0EWSQB; /* move to quantity*/
      FBDREC.FB-LATE-BK-FL = "N"; /* default flag 'n'o*/
      FBDREC.FB-LATE-BK-FL-MDT = 0; /* default date 0*/
      try
        call "IO3460" ("A ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
      end /* add a  row*/

    end

    FL0EW00.FL0EWGUS = "N"; /* good update sw*/

    if (sysVar.errorCode == "00000000") /* good return*/
      if (SQLCA.VAGen_SQLCODE == 0) /* normal return*/

        FL0EW00.FL0EWGUS = "Y"; /* good update sw*/
        return; /* return to previous process*/
      end

      if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/

        converseLib.validationFailed(20); /* updated since displayed here*/
        FLWREC.XXXMODID = "S03";
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back previous updates*/
        exit stack; /* return to display map*/
      end

    end


    TA1REC.TA1LOC = "ADD UPDT QTB ROW "; /* in case of error*/
    FL0ES04(); /* standard error check for split fctys*/
  end


end // end FL0ES03

// std error chk for split fctys
Function FL0ES04()
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* a good select*/
     || SQLCA.VAGen_SQLCODE == 100) /* a not found*/
      return;
    end

  end

  FLWREC.XXXMODID = "S04"; /* Module identification*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* back out any updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDMDTYP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack;

end // end FL0ES04

// declare csr for dfcty.vtrdrs01
Function FL0ES05()

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FYBREC empty; /* clear ws record*/

  FYBREC.XGPCD = "02"; /* gpc code*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2800" ("S1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VTRDRS01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0ES05

// fetch csr for dfcty.vtrdrs01
Function FL0ES06()

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the flqtb table*/
   /* ------------------------------------------------------------*/

  try
    call "IO2800" ("N1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FL0EW00.FYBOXCC == FYBREC.FYBOXCC /* orig ctry equal*/
       && FL0EW00.FYBDXCC == FYBREC.FYBDXCC) /* dest ctry eqal*/

        FL0EW00.FL0EWTRS = "Y"; /* trade restriction*/

      end
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FL0EW00.FL0EWCSW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VTRDRS01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/




end // end FL0ES06

// close csr for dfcty.vtrdrs01
Function FL0ES07()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows for flqtb*/
   /* ------------------------------------------------------------*/

  try
    call "IO2800" ("C1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "S07"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VTRDRS01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/




end // end FL0ES07

// select unique vflqtb01
Function FL0ES08()
   /* ------------------------------------------------------------*/
   /* select the row from the flqtb table to update*/
   /* ------------------------------------------------------------*/

   /* MOVE FL0EW01.FY1FCTYC TO FBDREC.FY1FCTYC;*/
   /* CALL IO3460 'S ',SQLCA,FBDREC (NOMAPS,NONCSP,REPLY;/* select row*/

   /* ------------------------------------------------------------*/
   /* If successful, the row will need to be updated*/
   /* ------------------------------------------------------------*/

   /* IF EZERT8 EQ '00000000';         /* Call successful*/

    /* IF SQLCA.SQLCODE EQ 0;         /* Normal return code*/

  FL0EW00.FL0EWUDF = "U"; /* update row*/

   /* ELSE;*/

     /* IF SQLCA.SQLCODE EQ 100;     /* row not found*/

       /* MOVE 0 TO EZEMNO;*/
       /* MOVE 'A' TO FL0EW00.FL0EWUDF;/* add a row*/

     /* END;*/

   /* END;*/

   /* END;*/


   /* MOVE 'SELECT QTB ROW FCTY' TO TA1REC.TA1LOC;/* in case of error*/

   /* FL0ES04;                         /* standard error checking*/

   /* IF FLWREC.XXXMODID EQ ' ';*/

    /* MOVE XX0XW01.XX0XWDAT TO FBDREC.ZZZCHGDT;/* change date*/
    /* MOVE XX0XW01.XX0XWTIM TO FBDREC.ZZZCHGTM;/* change time*/


    /* IF EZERT8 EQ '00000000';       /* good return*/
      /* IF SQLCA.SQLCODE EQ 0;       /* normal return*/

        /* EZERTN;                    /* return to previous process*/
      /* END;*/

     /* IF SQLCA.SQLCODE = 100;      /* record not found*/

       /* MOVE 20 TO EZEMNO;         /* updated since displayed here*/
       /* MOVE 'S08' TO FLWREC.XXXMODID;*/
       /* CALL EZEROLLB;             /* roll back previous updates*/
       /* EZEFLO;                    /* return to display map*/
     /* END;*/

   /* END;*/

   /* END;*/
  /* GET FL0E120*/
   /* ------------------------------------------------------------*/
   /* Select the row from the flqtb table to update*/
   /* ------------------------------------------------------------*/

  try
    call "IO3460" ("S ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    else /* Normal return code*/
      if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/

        converseLib.validationFailed(20); /* updated since displayed here*/
        FLWREC.XXXMODID = "S08";
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back previous updates*/
        exit stack; /* return to display map*/
      end

    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "S08"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FL QTB    ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0EW00.FL0EWDRF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FL0ES08

//*** RECORD=FL0EW00 ****
// miscellaneous working storage for fl0e
// ***********************
Record FL0EW00 type basicRecord
  10 FL0EWDRF FL0EWDRF ; 
  10 FL0EWNFF FL0EWNFF ; 
  10 FL0EWKYF FL0EWKYF ; 
  10 FL0EWDSW FL0EWDSW ; 
  10 FL0EWTRS FL0EWTRS ; 
  10 FL0EWCSW FL0EWCSW ; 
  10 FBDQTB FBDQTB ; 
  10 XFRABRV XFRABRV ; 
  10 FL0EWCN FL0EWCN ; 
  10 FL0EWCN1 FL0EWCN1 ; 
  10 FL0EWCN2 FL0EWCN2 ; 
  10 FL0EWCN3 FL0EWCN3 ; 
  10 FL0EWCN4 FL0EWCN4 ; 
  10 FL0EWUDF FL0EWUDF ; 
  10 FL0EWFOK FL0EWFOK ; 
  10 FL0EWGUS FL0EWGUS ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 FL0EWSQB FL0EWSQB ; 
  10 FYBOXCC FYBOXCC ; 
  10 FYBDXCC FYBDXCC ; 
  10 FL0EWSFL FL0EWSFL ; 
  10 PC2CUXID PC2CUXID ; 
  10 FL0EWCNT FL0EWCNT ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 FL0EMSOF FL0EMSOF ; 
  10 FL0EWTR-OVERIDE-FL FL0EWTR-OVERIDE-FL ; 
  10 FL0EWTR-EXIST-FL FL0EWTR-EXIST-FL ; 
  10 FL0EMSF1 FL0EMSF1 ; 
  10 FL0EMSF2 FL0EMSF2 ; 
  10 FL0EMSF3 FL0EMSF3 ; 
  10 FL0EMSF4 FL0EMSF4 ; 
end // end FL0EW00

//*** RECORD=FL0EW01 ****
// Working storage for fl0e - Footwear forcasting
// ***********************
Record FL0EW01 type basicRecord
  10 FBAMDNBR FBAMDNBR ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XCNCD XCNCD ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 FBDBTCD FBDBTCD ; 
  10 PC2CUXID PC2CUXID ; 
  10 FBDQTB FBDQTB ; 
  10 XCTCD XCTCD ; 
  10 FL0EMSF1 FL0EMSF1 ; 
  10 FL0EMSQ1 FL0EMSQ1 ; 
  10 FL0EMSF2 FL0EMSF2 ; 
  10 FL0EMSQ2 FL0EMSQ2 ; 
  10 FL0EMSF3 FL0EMSF3 ; 
  10 FL0EMSQ3 FL0EMSQ3 ; 
  10 FL0EMSF4 FL0EMSF4 ; 
  10 FL0EMSQ4 FL0EMSQ4 ; 
  10 XFRCD XFRCD ; 
  10 XFRABRV XFRABRV ; 
end // end FL0EW01

//*** RECORD=FL0EW02 ****
// ************************************************************
// ************** FACTORY LOAD audit table ********************
// this is the working storage section for the iomod fl1210.
// ************************************************************
// ***********************
Record FL0EW02 type basicRecord
  5 FL0EWGRP FL0EWGRP ; 
    10 FBDMDTYP FBDMDTYP ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC2CUXID PC2CUXID ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 FBDBTCD FBDBTCD ; 
    10 XFRCD XFRCD ; 
    10 FBDQTB FBDQTB ; 
    10 XXXPGMNB XXXPGMNB ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZHHMMSS ZZHHMMSS ; 
    10 XCTCD XCTCD ; 
    10 FL0EWFDT FL0EWFDT ; 
    10 FL0EWTDT FL0EWTDT ; 
end // end FL0EW02

// split factory 1 code
DataItem FL0EMSF1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split factory 1 code
DataItem FL0EMSF2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split factory 1 code
DataItem FL0EMSF3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split factory 1 code
DataItem FL0EMSF4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// multiple sales order factory
DataItem FL0EMSOF char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split quantity to buy 1
DataItem FL0EMSQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// split quantity to buy 1
DataItem FL0EMSQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// split quantity to buy 1
DataItem FL0EMSQ3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// split quantity to buy 1
DataItem FL0EMSQ4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// foreign country code
DataItem FL0EWCN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code1
DataItem FL0EWCN1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code2
DataItem FL0EWCN2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code3
DataItem FL0EWCN3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code4
DataItem FL0EWCN4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// multiple sales order count
DataItem FL0EWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cursor switch
DataItem FL0EWCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data requested switch
DataItem FL0EWDRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data found once switch
DataItem FL0EWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date
DataItem FL0EWFDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory ok switch
DataItem FL0EWFOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem FL0EWGRP char(84)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// good update switch
DataItem FL0EWGUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// check if key data entered sw
DataItem FL0EWKYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split factory entered switch
DataItem FL0EWNFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// multiple sales order fl
DataItem FL0EWSFL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split quantity to buy
DataItem FL0EWSQB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date
DataItem FL0EWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// trade restrictions exist
DataItem FL0EWTR-EXIST-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trade restrictions override fl
DataItem FL0EWTR-OVERIDE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trade restrictions switch
DataItem FL0EWTRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update or add switch
DataItem FL0EWUDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

