package fl0r;

import corpcom2.XX0XW01;
import corpcom3.XPFL001;
import corpcom3.XPTA0P;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXPGMNB;
import fb.common.FB9REC;
import fb.common.FBBREC;
import fb.common.FBEREC;
import ff.common.*;
import fl.common.FLWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FL0R ****
// This application is associated with the Factory Load System.
// 
// It provides a screen for users to create, delete, or copy
// a modified L.R. Summary Schedule.
// 
// The application will submit (via the internal reader) the
// program that performs the requested function. This Program
// id Fl2600 (create, delete, or copy).
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          06/02/89  CNEWMA  New application.
//          01/04/89  JMCLAU  Modified FL0R600 to move the
//                            the delete model number to the
//                            correct field in FL0RW01 Record.
// FB9994   08/10/93  LDELUH  Chg loadlibs for cob2.
// 000000   09/21/93  JMCLAU  CSP 4.1 Conversion. add a smart
//                            jcl submit.
// y2kfix   11/21/97  pharwo  Regenerate for xx0xs01 changes
// *********************
Program FL0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FBBREC FBBREC; // record
  FBEREC FBEREC; // record
  FL0RW00 FL0RW00; // record
  FL0RW01 FL0RW01; // record
  FL0RW02 FL0RW02; // record
  FL0RW03 FL0RW03; // record
  FLWREC FLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0RT01 {deleteAfterUse = yes}; // table
  use FL0RTT1 {deleteAfterUse = yes}; // table
  use FL0RM.FL0RM010, // form
  		FL0RM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FL0RM010 initial; /* M001 input/output*/
    set FL0RW00 empty; /* Working storage*/
    set FL0RW01 empty; /* display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* XPTA0P work record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FL0RW00.FL0RWSIP = "N"; /* initialize switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0R001; /* Converse the main process*/


    FL0R001: FL0R001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0R001; /* Converse the main process*/


  end // end main
end // end FL0R

// Inquire/maintain a table row
Function FL0R001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FL0R100(); /* Obtain the data to display*/

  FL0R200(); /* Format and display the map*/

  FL0R300(); /* Check attention identifier*/

  FL0R400(); /* Reset fields to normal intensity*/

  FL0R500(); /* Verify the entered data*/

  FL0R600(); /* Process valid input request*/


end // end FL0R001

// Obtain the data to display
Function FL0R100()
   /* ------------------------------------------------------------*/
   /* if data not requested, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FL0RW00.FL0RWSIP == "Y" /* schedule in process*/
   || FLWREC.XXXMSGNO != 0    /* error occured*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    return;
  end

  FL0RW00.FL0RWRNA = "N"; /* reset switch*/

   /* ------------------------------------------------------------*/
   /* Select Row - Footwear Buy Program Control Table*/
   /* ------------------------------------------------------------*/

  set FBEREC empty; /* clear record*/

  FBEREC.XXXPGMNB = "FL260D"; /* program name*/

  FL0R110(); /* Select table row*/

   /* ------------------------------------------------------------*/
   /* Select Row - Factory Model Control Table*/
   /* ------------------------------------------------------------*/

  FL0R120(); /* Select table row*/


end // end FL0R100

// Select Table Row - Pgm Cntrl
Function FL0R110()
   /* ------------------------------------------------------------*/
   /* Get Table Row*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FBEREC.FBEDRPS != "Y")
        return;
      else
        converseLib.validationFailed(350); /* 'LR Detail Schedule is being run'*/
        FL0RM010.XXXMODID = "110"; /* module identification*/
        FL0RW00.FL0RWSIP = "Y"; /* set switch*/
        exit stack; /* Return to previous process*/
      end

    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(47); /* 'resources unavailable'*/
        FL0RW00.FL0RWRNA = "Y"; /* resources unavailable switch*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(01); /* 'error - please nofity programming'*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FL0RM010.XXXMODID = "110"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0R110

// Select Table Row - Fcty Cntrl
Function FL0R120()
   /* ------------------------------------------------------------*/
   /* Select Row - Factory Model Control Table*/
   /* ------------------------------------------------------------*/

  set FB9REC empty; /* clear record*/

   /* ------------------------------------------------------------*/
   /* Get Row - Factory Control Table*/
   /* ------------------------------------------------------------*/

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FL0RM010.FB9LMNBR = FB9REC.FB9LSPSN; /* last schedule nbr*/
      FL0RW00.FL0RWCSD = FB9REC.FB9LSPSN; /* create nbr work area*/
      FL0RW00.FL0RWCSD = FL0RW00.FL0RWCSD + .01; /* increment create nbr*/
      FL0RM010.FL0RMCSD = FL0RW00.FL0RWCSD; /* create schedule nbr*/
      FL0RM010.FL0RMCTS = FL0RW00.FL0RWCSD; /* copy to schedule nbr*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FL0RM010.XXXMODID = "120"; /* module identification*/
        converseLib.validationFailed(01); /* 'error, please notify programming'*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(47); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/

        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          converseLib.clearScreen();
           /* Clear screen before display*/

        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FL0RM010.XXXMODID = "120"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0R120

// Format and converse the map
Function FL0R200()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FL0RM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0RM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0RM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If ezemno has been set, it will override xxxmsgno*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum;
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FLWREC.XXXMSGNO != 0) /* Message to display*/
    FL0RM010.XXXMODID = FLWREC.XXXMODID; /* module identification*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end
                                   /* message number moved to ezemno*/
    set FL0RM010 alarm;
  end

  converse FL0RM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FLWREC.XXXMODID = " "; /* Module identification*/
  FL0RM010.XXXMODID = " "; /* Module identification*/
  FLWREC.XXXMSGNO = 0; /* error message number*/
  COMMAREA.CATOAP = FL0RM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0RM010.CAITEM; /* Application data*/


end // end FL0R200

// Check attention identifier
Function FL0R300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FL0RM010 initial; /* clear map*/
    COMMAREA.CATOAP = " "; /* clear to application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    exit stack; /* return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSFLS01();
      set FL0RM010.CATOAP cursor, bold; /* set cursor*/

    else

      converseLib.validationFailed(44); /* 'cannot access application'*/
      FLWREC.XXXMODID = "300"; /* module identification*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF4 is pressed, go to Main Menu*/
   /* If PF5 is pressed, go to Production Menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* pf3 was pressed*/
   || converseVar.eventKey is pf4  /* pf4 was pressed*/
   || converseVar.eventKey is pf5  /* pf5 was pressed*/
   || converseVar.eventKey is pf13 /* pf13 was pressed*/
   || converseVar.eventKey is pf18 /* pf18 was pressed*/
   || converseVar.eventKey is pf20 /* pf20 was pressed*/
   || converseVar.eventKey is pf21) /* pf21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0RM010"; /* APPLICATION FIND CODE*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "FL0M";
    end

    if (converseVar.eventKey is pf13) /* pf12 was pressed*/
      COMMAREA.CATOAP = "FL0N"; /* Priority Selection*/
    end

    if (converseVar.eventKey is pf18) /* pf18 was pressed*/
      COMMAREA.CATOAP = "FL0K"; /* Quantity Adjustments*/
    end

    if (converseVar.eventKey is pf20) /* pf20 was pressed*/
      COMMAREA.CATOAP = "FL0T"; /* Summary Schedule Lists*/
    end

    if (converseVar.eventKey is pf21) /* pf21 was pressed*/
      COMMAREA.CATOAP = "FL0U"; /* Report Requests*/
    end

    XSFLS01();
    exit stack;

  end

  if (converseVar.eventKey not enter) /* enter was not pressed*/
    converseLib.validationFailed(3); /* Indicate PF key not valid*/
    FLWREC.XXXMODID = "300"; /* Process name*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* PA3 was pressed*/
      converseLib.clearScreen();
      
    end

    exit stack;

  end


end // end FL0R300

// Reset highlighted fields
Function FL0R400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FL0RM010.FL0RMCSD initialAttributes; /* create schedule model number*/
  set FL0RM010.FL0RMDSD initialAttributes; /* delete schedule model number*/
  set FL0RM010.FL0RMCFS initialAttributes; /* copy from schedule model number*/
  set FL0RM010.FL0RMCTS initialAttributes; /* copy to schedule model number*/

  FL0RW00.FL0RWIX1 = 1; /* initialize index*/
  while (FL0RW00.FL0RWIX1 <= 3)
    set FL0RM010.FL0RMSEL[FL0RWIX1] initialAttributes; /* selection code*/
    FL0RW00.FL0RWIX1 = FL0RW00.FL0RWIX1 + 1; /* increment index*/
  end

  set FL0RM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0RM010.CAITEM initialAttributes; /* Commarea application data*/


end // end FL0R400

// Verify the entered data
Function FL0R500()
   /* ------------------------------------------------------------*/
   /* Verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* if schedule in process, reset switch*/
   /* ------------------------------------------------------------*/

  if (FL0RW00.FL0RWSIP == "Y" /* schedule in process*/
   || FL0RW00.FL0RWRNA == "Y") /* resources not available*/
    FL0RW00.FL0RWSIP = "N"; /* reset switch*/
    exit stack; /* return to display the map*/
  end

   /* ------------------------------------------------------------*/
   /* If a model number has been entered in the delete or copy*/
   /* fields, ensure that the corresponding selection was made.*/
   /* ------------------------------------------------------------*/

  if (FL0RM010.FL0RMCFS != 0) /* copy from schedule nbr*/
    if (FL0RM010.FL0RMSEL[3] != "S") /* selection not made*/
      FLWREC.XXXMSGNO = 41; /* 's is the only valid code'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0RM010.FL0RMSEL[3] cursor, bold; /* set cursor*/
    end
  end

  if (FL0RM010.FL0RMDSD != 0) /* delete schedule nbr*/
    if (FL0RM010.FL0RMSEL[2] != "S") /* selection not made*/
      FLWREC.XXXMSGNO = 41; /* 's is the only valid code'*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      set FL0RM010.FL0RMSEL[2] cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify all selection codes equal a ' ' or an 'S'.*/
   /* ------------------------------------------------------------*/

  FL0RW00.FL0RWSCT = 0; /* initialize count*/

  FL0RW00.FL0RWIX1 = 3; /* initialize index*/

  while (FL0RW00.FL0RWIX1 > 0) /* number of selections available*/
    if (FL0RM010.FL0RMSEL[FL0RWIX1] == " ") /* selection equal space*/
       /* next sentence*/
    else
      if (FL0RM010.FL0RMSEL[FL0RWIX1] == "S") /* selection equal 'S'*/
        FL0RW00.FL0RWSCT = FL0RW00.FL0RWSCT + 1; /* selection count*/
      else
        FL0RW00.FL0RWSCT = FL0RW00.FL0RWSCT + 1; /* selection count*/
        FLWREC.XXXMSGNO = 41; /* 'S' is only valid code*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        set FL0RM010.FL0RMSEL[FL0RWIX1] cursor, bold; /* set cursor*/
      end
    end
    FL0RW00.FL0RWIX1 = FL0RW00.FL0RWIX1 - 1; /* decrement index*/
  end

   /* ------------------------------------------------------------*/
   /* if more than one selection made, set up error message*/
   /* ------------------------------------------------------------*/

  if (FL0RW00.FL0RWSCT > 1) /* more than one selection made*/
    FLWREC.XXXMSGNO = 73; /* 'more than one selection'*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    FL0RW00.FL0RWIX1 = 3; /* initialize index*/
    while (FL0RW00.FL0RWIX1 > 0)
      if (FL0RM010.FL0RMSEL[FL0RWIX1] == "S") /* selection made*/
        set FL0RM010.FL0RMSEL[FL0RWIX1] cursor, bold; /* set cursor*/
      end
      FL0RW00.FL0RWIX1 = FL0RW00.FL0RWIX1 - 1; /* decrement index*/
    end
  end

  FL0RW00.FL0RWSCT = 0; /* initialize count*/

   /* ------------------------------------------------------------*/
   /* if copy Schedule was selected, ensure it does exist*/
   /* If so, perform copy schedule.*/
   /* ------------------------------------------------------------*/

  if (FL0RM010.FL0RMSEL[3] == "S") /* copy schedule selected*/
    FL0RW00.FL0RWSCT = FL0RW00.FL0RWSCT + 1;
    set FBBREC empty; /* clear row storage area*/
    FBBREC.FBCLRNBR = FL0RM010.FL0RMCFS; /* copy from schedule model*/
    FL0R520(); /* select table row*/
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        set FBBREC empty; /* clear row storage area*/
        FBBREC.FBCLRNBR = FL0RM010.FL0RMCTS; /* cpy to sch nbr*/
        FL0R530(); /* determine if copy to model exists*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
          set FL0RM010.FL0RMCFS cursor, bold; /* set cursor*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if delete Schedule Number was selected, ensure it does*/
   /* exist. If so, perform delete Schedule Number.*/
   /* ------------------------------------------------------------*/

  if (FL0RM010.FL0RMSEL[2] == "S") /* delete Schedule number selected*/
    FL0RW00.FL0RWSCT = FL0RW00.FL0RWSCT + 1;
    set FBBREC empty; /* clear row storage area*/
    FBBREC.FBCLRNBR = FL0RM010.FL0RMDSD; /* delete schedule model number*/
    FL0R520(); /* select table row*/
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        set FL0RM010.FL0RMDSD cursor, bold; /* set cursor*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if create LR Detail Shedule was selected, ensure it doesn't*/
   /* exist. If not, perform create LR Detail Schedule.*/
   /* ------------------------------------------------------------*/

  if (FL0RM010.FL0RMSEL[1] == "S") /* Create Factory LR Detail Schedule*/
    FL0RW00.FL0RWSCT = FL0RW00.FL0RWSCT + 1;
    set FBBREC empty; /* clear row storage area*/
    FBBREC.FBCLRNBR = FL0RM010.FL0RMCSD; /* create schedule model number*/
    FL0R530(); /* select table row*/
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* End of selected set*/
      set FL0RM010.FL0RMCSD cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0
   || FLWREC.XXXMSGNO != 0)
    exit stack;
  end


end // end FL0R500

// Select table row - Fcty Mdl
Function FL0R520()
   /* ------------------------------------------------------------*/
   /* Fetch row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3480" ("S ", SQLCA, FBBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        converseLib.validationFailed(125); /* 'schedule number not found'*/
        FLWREC.XXXMODID = "520"; /* module identification*/
        return; /* return to previous process*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(48); /* 'fatal database error'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "520"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPRM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBBREC.FBBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0R520

// Select table row - Fcty Mdl
Function FL0R530()
   /* ------------------------------------------------------------*/
   /* Fetch row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3480" ("S ", SQLCA, FBBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      converseLib.validationFailed(46); /* 'data base updated by another user'*/
      FLWREC.XXXMODID = "530"; /* module identification*/
      return; /* return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        return; /* return to previous process*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(48); /* 'fatal database error'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "530"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPRM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBBREC.FBBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0R530

// Process valid input request
Function FL0R600()
   /* ------------------------------------------------------------*/
   /* Process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* if no selections were made, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FL0RW00.FL0RWSCT == 0) /* No selections made*/
    return; /* return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* Determine which environment the program is executing in:*/
   /* Development or Production.*/
   /* ------------------------------------------------------------*/

  FL0R605(); /* Determine Region*/

   /* ------------------------------------------------------------*/
   /* Submit Test or Prodution jcl.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Clear out parameters record*/
   /* ------------------------------------------------------------*/

  FL0RW01.TARJCL = 0; /* move zereos to parameters record*/

   /* ------------------------------------------------------------*/
   /* Call subroutine to obtain current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01();

   /* ------------------------------------------------------------*/
   /* if option 1 selected, create schedule*/
   /* ------------------------------------------------------------*/

  if (FL0RM010.FL0RMSEL[1] == "S") /* create schedule selected*/
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL260D"; /* program number*/
    FL0RW00.XXXPGMNB = "FL260D"; /* program number*/
    FL0RW00.FL0RWPNM = "FL2601"; /* Proc name*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEDRPS = "Y"; /* schedule in process flag*/
    FL0RW00.FL0RWSIP = "Y"; /* schedule in process flag*/
    FL0RW01.FL0RWSCH = FL0RM010.FL0RMCSD; /* create schedule nbr*/
    FL0RW01.FL0RWBPF = 1; /* batch process flag*/

    if (TA3REC.TA3RGNID == "03") /* Production Environment*/

      FL0R610(); /* Submit Production job*/

    else

      FL0R620(); /* Submit Test job*/

    end

    FL0RM010.FL0RMSEL[1] = " "; /* clear selection field*/
  end

   /* ------------------------------------------------------------*/
   /* if option 2 selected, delete schedule number*/
   /* ------------------------------------------------------------*/

  if (FL0RM010.FL0RMSEL[2] == "S") /* delete schedule nbr selected*/
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL260D"; /* program number*/
    FL0RW00.XXXPGMNB = "FL260D"; /* program number*/
    FL0RW00.FL0RWPNM = "FL2601"; /* Proc name*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEDRPS = "Y"; /* schedule in process flag*/
    FL0RW00.FL0RWSIP = "Y"; /* schedule in process flag*/
    FL0RW01.FL0RWDSH = FL0RM010.FL0RMDSD; /* delete schedule nbr*/
    FL0RW01.FL0RWBPF = 2; /* batch process flag*/

    if (TA3REC.TA3RGNID == "03") /* Production Environment*/

      FL0R610(); /* Submit Production job*/

    else

      FL0R620(); /* Submit Test job*/

    end

    FL0RM010.FL0RMSEL[2] = " "; /* clear selection field*/
    FL0RM010.FL0RMDSD = 0; /* clear schedule number*/
  end

   /* ------------------------------------------------------------*/
   /* if option 3 selected, copy schedule*/
   /* ------------------------------------------------------------*/

  if (FL0RM010.FL0RMSEL[3] == "S") /* copy schedule selected*/
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL260D"; /* program number*/
    FL0RW00.XXXPGMNB = "FL260D"; /* program number*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEDRPS = "Y"; /* schedule in process flag*/
    FL0RW00.FL0RWSIP = "Y"; /* schedule in process flag*/
    FL0RW01.FL0RWCTS = FL0RM010.FL0RMCTS; /* copy to schedule nbr*/
    FL0RW01.FL0RWCFS = FL0RM010.FL0RMCFS; /* copy from schedule nbr*/
    FL0RW01.FL0RWBPF = 3; /* batch process flag*/
    FL0RW00.FL0RWPNM = "FL2601"; /* Proc name*/

    if (TA3REC.TA3RGNID == "03") /* Production Environment*/

      FL0R610(); /* Submit Production job*/

    else

      FL0R620(); /* Submit Test job*/

    end

    FL0RM010.FL0RMSEL[3] = " "; /* clear selection field*/
    FL0RM010.FL0RMCFS = 0; /* clear schedule number*/
  end


end // end FL0R600

// get region information
Function FL0R605()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

     /* next sentence*/

  else

    FLWREC.XXXMODID = "605"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end


end // end FL0R605

// Process Factory Model
Function FL0R610()
   /* ------------------------------------------------------------*/
   /* Process Factory Schedule - Prod jcl*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* updte Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/

  FL0R612(); /* set pgm cntrl table flag to y*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0RW00.FL0RWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0RW00.FL0RWIXT > 0) /* Until end of table*/

    if (FL0RT01.TARTYPE[FL0RWIXT] == "E") /* Execute statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FL0RW02.TARJCL = FL0RT01.TARJCL[FL0RWIXT]; /* execution JCL*/
      FL0RW02.FL0RWPNM = FL0RW00.FL0RWPNM; /* Proc name*/
      TA6REC.TARJCL[TA6INDEX] = FL0RW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0RT01.TARTYPE[FL0RWIXT]; /* Type*/

    else

      if (FL0RT01.TARTYPE[FL0RWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FL0RW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0RT01.TARTYPE[FL0RWIXT]; /* Type*/

      else

        if (FL0RT01.TARTYPE[FL0RWIXT] == "Z") /* override statement*/

          /* ------------------------------------------------------------*/
           /* Format System Override statement*/
          /* ------------------------------------------------------------*/

          FL0RW03.TARJCL = FL0RT01.TARJCL[FL0RWIXT]; /* JCL*/
          FL0RW03.FL0RWPGM = FL0RW00.XXXPGMNB; /* program*/
          TA6REC.TARJCL[TA6INDEX] = FL0RW03.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0RT01.TARTYPE[FL0RWIXT]; /* Type*/

        else

          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FL0RT01.TARJCL[FL0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0RT01.TARTYPE[FL0RWIXT];

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0RT01.TARJCL[FL0RWIXT] == "/*EOF") /* End of table*/

      FL0RW00.FL0RWIXT = 0; /* Indicate end of table*/

    else

      FL0RW00.FL0RWIXT = FL0RW00.FL0RWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0R614(); /* Submit the JCL*/


end // end FL0R610

// updte pgm cntl lrps sw to Y
Function FL0R612()
   /* ------------------------------------------------------------*/
   /* select row Program Control Table*/
   /* ------------------------------------------------------------*/

  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0RW00.FL0RWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end

  if (sysVar.errorCode == "00000000") /* Call not successful*/

    if (SQLCA.VAGen_SQLCODE != 0 /* or not good return code*/
     && SQLCA.VAGen_SQLCODE != -911) /* data base in use*/
      converseLib.validationFailed(01); /* 'error - please notify programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
    end

  end


  if (sysVar.errorCode != "00000000") /* Call not successful*/
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    FLWREC.XXXMODID = "612"; /* Module identification*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT PGM  CONTROL TABLE ROW ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* update row Program Control Table*/
   /* ------------------------------------------------------------*/

  FBEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  FBEREC.FBEDRPS = "Y"; /* detail lrps flag*/

  try
    call "IO3440" ("U ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      FLWREC.XXXMODID = "612"; /* Module identification*/
      exit stack;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0RW00.FL0RWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "612"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PGM  CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0R612

// Submit Jcl
Function FL0R614()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* screen smg upon batch job compl*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0R616(); /* Delete Row - Program Cntl*/

  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "614"; /* module identification*/

  end

  return; /* Return to previous process*/


end // end FL0R614

// updte pgm cntl lrps sw to N
Function FL0R616()
   /* ------------------------------------------------------------*/
   /* select row Program Control Table*/
   /* ------------------------------------------------------------*/

  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0RW00.FL0RWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end

  if (sysVar.errorCode == "00000000") /* Call not successful*/

    if (SQLCA.VAGen_SQLCODE != 0 /* or not good return code*/
     && SQLCA.VAGen_SQLCODE != -911) /* data base in use*/
      converseLib.validationFailed(01); /* 'error - please notify programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
    end

  end

  if (sysVar.errorCode != "00000000") /* Call not successful*/
    converseLib.validationFailed(01); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    FLWREC.XXXMODID = "616"; /* Module identification*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT PGM  CONTROL TABLE ROW ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* update row Program Control Table*/
   /* ------------------------------------------------------------*/

  FBEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  FBEREC.FBEDRPS = "N"; /* detail lrps flag*/

  try
    call "IO3440" ("U ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      FLWREC.XXXMODID = "616"; /* Module identification*/
      exit stack;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0RW00.FL0RWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "616"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PGM  CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0R616

// Process Factory Model
Function FL0R620()
   /* ------------------------------------------------------------*/
   /* Process Factory Schedule - test jcl*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* updte Table Row - Program Control Table*/
   /* ------------------------------------------------------------*/

  FL0R612(); /* set pgm cntrl table flag to y*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0RW00.FL0RWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0RW00.FL0RWIXT > 0) /* Until end of table*/

    if (FL0RTT1.TARTYPE[FL0RWIXT] == "E") /* Execute statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FL0RW02.TARJCL = FL0RTT1.TARJCL[FL0RWIXT]; /* execution JCL*/
      FL0RW02.FL0RWPNM = FL0RW00.FL0RWPNM; /* Proc name*/
      TA6REC.TARJCL[TA6INDEX] = FL0RW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0RTT1.TARTYPE[FL0RWIXT]; /* Type*/

    else

      if (FL0RTT1.TARTYPE[FL0RWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FL0RW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0RTT1.TARTYPE[FL0RWIXT]; /* Type*/

      else

        if (FL0RTT1.TARTYPE[FL0RWIXT] == "Z") /* override statement*/

          /* ------------------------------------------------------------*/
           /* Format System Override statement*/
          /* ------------------------------------------------------------*/

          FL0RW03.TARJCL = FL0RTT1.TARJCL[FL0RWIXT]; /* JCL*/
          FL0RW03.FL0RWPGM = FL0RW00.XXXPGMNB; /* program*/
          TA6REC.TARJCL[TA6INDEX] = FL0RW03.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0RTT1.TARTYPE[FL0RWIXT]; /* Type*/

        else

          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FL0RTT1.TARJCL[FL0RWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0RTT1.TARTYPE[FL0RWIXT];

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0RTT1.TARJCL[FL0RWIXT] == "/*EOF") /* End of table*/

      FL0RW00.FL0RWIXT = 0; /* Indicate end of table*/

    else

      FL0RW00.FL0RWIXT = FL0RW00.FL0RWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0R614(); /* Submit the JCL*/


end // end FL0R620

//*** RECORD=FL0RW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0RW00 type basicRecord
  10 FL0RWRNA FL0RWRNA ; 
  10 FL0RWSCT FL0RWSCT ; 
  10 FL0RWIX1 FL0RWIX1 ; 
  10 FL0RWIX2 FL0RWIX2 ; 
  10 FL0RWIXT FL0RWIXT ; 
  10 FL0RWSIP FL0RWSIP ; 
  10 FL0RWCSD FL0RWCSD ; 
  10 FL0RWSYM FL0RWSYM ; 
    15 FL0RWSYY FL0RWSYY ; 
    15 FL0RWSMM FL0RWSMM ; 
  10 FL0RWGRG FL0RWGRG ; 
    15 FL0RWMM FL0RWMM ; 
    15 FL0RWDD FL0RWDD ; 
    15 FL0RWYY FL0RWYY ; 
  10 XXXPGMNB XXXPGMNB ; 
  10 FL0RWPNM FL0RWPNM ; 
end // end FL0RW00

//*** RECORD=FL0RW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0RW01 type basicRecord
  10 TARJCL TARJCL ; 
    15 FL0RWSCH FL0RWSCH ; 
    15 FL0RWDSH FL0RWDSH ; 
    15 FL0RWCFS FL0RWCFS ; 
    15 FL0RWCTS FL0RWCTS ; 
    15 FL0RWBPF FL0RWBPF ; 
    15 * char(59) ; 
end // end FL0RW01

//*** RECORD=FL0RW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0RW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 * char(15) ; 
    15 FL0RWPNM FL0RWPNM ; 
    15 * char(59) ; 
end // end FL0RW02

//*** RECORD=FL0RW03 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0RW03 type basicRecord
  10 TARJCL TARJCL ; 
    15 * char(12) ; 
    15 FL0RWPGM FL0RWPGM ; 
    15 * char(62) ; 
end // end FL0RW03

// batch process flag
DataItem FL0RWBPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// copy from schedule model nbr
DataItem FL0RWCFS num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// create schedule model number
DataItem FL0RWCSD num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// copy to schedule model nbr
DataItem FL0RWCTS num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// user entered day
DataItem FL0RWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete schedule model number
DataItem FL0RWDSH num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// gregorian date
DataItem FL0RWGRG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index one for stored fields
DataItem FL0RWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FL0RWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem FL0RWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered month
DataItem FL0RWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Program name
DataItem FL0RWPGM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc name
DataItem FL0RWPNM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resources unavailable
DataItem FL0RWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create schedule model number
DataItem FL0RWSCH num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// selection count
DataItem FL0RWSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// schedule in process switch
DataItem FL0RWSIP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user entered month
DataItem FL0RWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered year/month
DataItem FL0RWSYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered year
DataItem FL0RWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered year
DataItem FL0RWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

