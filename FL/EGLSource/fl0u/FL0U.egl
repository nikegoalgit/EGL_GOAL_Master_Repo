package fl0u;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom3.XPTA0P;
import corpcom4.XSFLS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import fb.common.FB8BUYDT;
import fb.common.FBAMDNBR;
import fb.common.FBAREC;
import ff.common.*;
import fl.common.FLWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARREC;
//*** PROGRAM=FL0U ****
// This application is associated with the Factory Load System.
// 
// It provides a screen for users to select one or more reports
// for a specific schedule number. The jobs to produce the
// reports will be submitted via this application.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/26/89  CNEWMA  New application.
//          07/16/90  jwood   removed ut2rec from t&r list
//          10/02/90  jmclau  added mvs.dsnt.dsnload to test
//                            jcl.
// E#FL125  10/03/90  jalle1  added jcl tables and logic to
//                            submit FL334D - LRPS cleanup.
//          10/04/90  jalle1  added to jcl tables to submit
//                            FL335D - LRPS with no factory/
//                            style report
// f#fl124  10/05/90  jalle1  added logic to support use of
//                            season/year.
// e#fl218  02/18/91  jalle1  removed dtl mapper download from
//                            fl2001.
//                            added new selection for dtl
//                            mapper download - submit fl2002.
//          02/19/91  jalle1  changed season/yr to 2 characters
//                            removed corresponding edit.
// e#fl238  03/01/91  jalle1  removed reports selections from
//                            map.  reformatted job submission
//                            process.
//          08/20/91  jalle1  remove conditional tartype on
//                            s0020 in fl0ut04.
// e#fl337  04/10/92  jmclau  eec trade restrictions
// e#fl000  04/14/92  jmclau  fix bug in fl0ut01 table.
// e#fl000  06/04/92  jalle1  added submit for fl122d.
// e#fl331  08/13/92  jmclau  change title on first selection
//                            by removing reference of special
//                            features to midsole.
// e#fl351  11/05/92  jmclau  modify so 'report as of date' is
//                            not required when requesting the
//                            'assigned restricted lrpf' report
// e#fl357  04/20/93  jmclau  remove  unused reports from fl0u.
// e#00000  07/12/93  jmclau  replace TESTRMS with TESTENC in
//                            the test jcl tables.
// FB9994   08/10/93  LDELUH  Chg loadlibs for cob2.
// 000000   09/24/93  jmclau  CSP 4.1 conversion. Did a rewrite
//                            of the application to get rid of
//                            the logic that processed unused
//                            reports.
// 000000   11/12/93  LDELUH  Remove HT2501 from fl0ut01.
// y2kfix   12/11/97  pharwo  year 2000 compliance changes to
//                            fl0um010-fl0umsdt, fl0u505,
//                            fl0u507, fl0u530, fl0u535..
// FL2026   11/19/98  WROBIN  Add popup window with LRPS totals
//                            in FL0U screen
// *********************
Program FL0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FBAREC FBAREC; // record
  FL0UW00 FL0UW00; // record
  FL0UW01 FL0UW01; // record
  FL0UW02 FL0UW02; // record
  FLWREC FLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  XP0TW01 XP0TW01; // record
  XP0TWIO XP0TWIO; // record
  XP0TWRT XP0TWRT; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0UT01; // table
  use FL0UT04; // table
  use FL0UT05 {deleteAfterUse = yes}; // table
  use FL0UTT1; // table
  use FL0UTT4; // table
  use FL0UTT5 {deleteAfterUse = yes}; // table
  use FL0UM.FL0UM010,  // forms
      FL0UM.XP0TM001,
      FL0UM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FL0UM010 initial; /* M001 input/output*/
    set FL0UW00 empty; /* Working storage*/
    set FL0UW01 empty; /* display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* XPTA0P work record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    if (FLWREC.FBAMDNBR != 0) /* model number present*/
      FL0UM010.FBAMDNBR = FLWREC.FBAMDNBR; /* move model number*/
    else
      FL0UM010.FBAMDNBR = 0;
    end

    FL0UW00.FL0UWMPR = 50; /* maximum JCL lines for primary rpts*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0U001; /* Converse the main process*/


    FL0U001: FL0U001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0U001; /* Converse the main process*/


  end // end main
end // end FL0U

// PROCESS LRPS TOTALs POP-UP
Function FL0U-210()
   /* ------------------------------------------------------------*/
   /* Total the LRPS by month and display.*/
   /* ------------------------------------------------------------*/

  set XP0TW01 empty;

  XP0TWIO.XP0TW-FTWR-EQUIP-FL = "F";
  XP0TWIO.FBAMDNBR = FL0UM010.FBAMDNBR;
  XP0TWIO.XP0TW-MIN-QTY = FL0UM010.FL0UMSQT;
  XP0TWIO.XP0TW-EXCLUDE-SEASONS[1] = FL0UM010.FL0UMSSR[1];
  XP0TWIO.XP0TW-EXCLUDE-SEASONS[2] = FL0UM010.FL0UMSSR[2];
  XP0TWIO.XP0TW-EXCLUDE-SEASONS[3] = FL0UM010.FL0UMSSR[3];
  XP0TWIO.XP0TW-EXCLUDE-SEASONS[4] = FL0UM010.FL0UMSSR[4];
  XP0TWIO.XP0TW-EXCLUDE-SEASONS[5] = FL0UM010.FL0UMSSR[5];
  XP0TWIO.XP0TW-EXCLUDE-SEASONS[6] = FL0UM010.FL0UMSSR[6];
  XP0TWIO.XP0TW-EXCLUDE-SEASONS[7] = FL0UM010.FL0UMSSR[7];
  XP0TWIO.XP0TW-EXCLUDE-SEASONS[8] = FL0UM010.FL0UMSSR[8];

  XP0TW01.XP0TW-POP-UP-DONE = "N";

  XP0T-100(); /* GET INFORMATION FOR POP-UP*/

  if (XP0TW01.XP0TW-POP-UP-DONE == "Y")
    converseLib.clearScreen();
     /* RESET SCREEN*/
    FL0UM010.XXXMODID = "210"; /* module identification*/
    converseLib.validationFailed(45); /* REQUESTED LIST DISPLAYED - CONTINUE*/
                                   /* OR CANCEL*/
  end

  exit stack;


   /* ------------------ End of Process FL0U-210 -----------------*/

end // end FL0U-210

// Inquire/maintain a table row
Function FL0U001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FL0U100(); /* Format and display the map*/

  FL0U200(); /* Check attention identifier*/

  FL0U300(); /* Reset fields to normal intensity*/

  FL0U400(); /* Verify the entered data*/

  FL0U500(); /* Process valid input request*/


end // end FL0U001

// Format and converse the map
Function FL0U100()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FL0UM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0UM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0UM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set FL0UM010 alarm; /* Indicate sound alarm*/
  end



  converse FL0UM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FL0UM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FL0UM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0UM010.CAITEM; /* Application data*/


end // end FL0U100

// Check attention identifier
Function FL0U200()
   /* -----------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FL0UM010 initial; /* clear map*/
    COMMAREA.CATOAP = " "; /* clear to application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    exit stack; /* return to show error msg*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSFLS01();
      set FL0UM010.CATOAP cursor, bold; /* Highlight*/

    else

      converseLib.validationFailed(44); /* 'cannot access application'*/
      FL0UM010.XXXMODID = "200"; /* module identification*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF4 is pressed, go to Main Menu*/
   /* If PF5 is pressed, go to Production Menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* pf3 was pressed*/
   || converseVar.eventKey is pf4  /* pf4 was pressed*/
   || converseVar.eventKey is pf5  /* pf5 was pressed*/
   || converseVar.eventKey is pf6  /* pf6 was pressed*/
   || converseVar.eventKey is pf15 /* pf15 was pressed*/
   || converseVar.eventKey is pf16 /* pf16 was pressed*/
   || converseVar.eventKey is pf18 /* pf18 was pressed*/
   || converseVar.eventKey is pf19 /* pf19 was pressed*/
   || converseVar.eventKey is pf20) /* pf20 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0UM010"; /* APPLICATION FIND CODE*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "FL0M";
    end

    if (converseVar.eventKey is pf6) /* pf6 was pressed*/
      if (FL0UM010.FBAMDNBR == 0)
        set FL0UM010.FBAMDNBR cursor, bold;
        converseLib.validationFailed(44); /* 'cannot access application'*/
        FL0UM010.XXXMODID = "200"; /* module identification*/
        exit stack;
      else
        FL0U-210();
      end
    end

    if (converseVar.eventKey is pf15) /* pf15 was pressed*/
      COMMAREA.CATOAP = "FL0Y"; /* LRPS by country*/
    end

    if (converseVar.eventKey is pf16) /* pf16 was pressed*/
      COMMAREA.CATOAP = "FL0Z"; /* LRPS by factory*/
    end

    if (converseVar.eventKey is pf18) /* pf18 was pressed*/
      COMMAREA.CATOAP = "FL0X"; /* Schedule Qty Adjustments*/
    end

    if (converseVar.eventKey is pf19) /* pf19 was pressed*/
      COMMAREA.CATOAP = "FL0S"; /* Detail Schedule List*/
    end

    if (converseVar.eventKey is pf20) /* pf20 was pressed*/
      COMMAREA.CATOAP = "FL0T"; /* Summary Schedule List*/
    end

    XSFLS01();
    exit stack;

  end

  if (converseVar.eventKey not enter) /* enter was not pressed*/

    converseLib.validationFailed(3); /* Indicate PF key not valid*/
    FL0UM010.XXXMODID = "200"; /* Process name*/
    if (converseVar.eventKey is pa1 /* pa1 was pressed*/
     || converseVar.eventKey is pa3) /* pa3 was pressed*/
      converseLib.clearScreen();
      
    end

    exit stack;

  end


end // end FL0U200

// Reset highlighted fields
Function FL0U300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FL0UM010.FBAMDNBR initialAttributes; /* schedule number*/
  set FL0UM010.FL0UMSDT initialAttributes; /* report as of date*/

  FL0UW00.FL0UWIX1 = 1; /* initialize index*/

  while (FL0UW00.FL0UWIX1 <= 8) /* number of season codes available*/

    set FL0UM010.FL0UMSSR[FL0UWIX1] initialAttributes; /* season code fields*/

    if (FL0UW00.FL0UWIX1 <= 4) /* number of selects available*/

      set FL0UM010.FL0UMSEL[FL0UWIX1] initialAttributes; /* select fields*/

    end

    FL0UW00.FL0UWIX1 = FL0UW00.FL0UWIX1 + 1;

  end

  set FL0UM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0UM010.CAITEM initialAttributes; /* Commarea application data*/


end // end FL0U300

// Verify the entered data
Function FL0U400()
   /* ------------------------------------------------------------*/
   /* Verify all report selection codes equal a ' ' or an 'S'.*/
   /* ------------------------------------------------------------*/

  FL0UW00.FL0UWRSL = "N"; /* reset switch*/

  FL0UW00.FL0UWIX1 = 4; /* initialize index*/

  while (FL0UW00.FL0UWIX1 > 0) /* number of reports available*/
    if (FL0UM010.FL0UMSEL[FL0UWIX1] == " " /* selection equal space*/
     || FL0UM010.FL0UMSEL[FL0UWIX1] == "S") /* selection made*/

       /* next sentence*/

    else
      converseLib.validationFailed(41); /* 'S' is only valid code*/
      FL0UM010.XXXMODID = "400"; /* module identification*/
      set FL0UM010.FL0UMSEL[FL0UWIX1] cursor, bold; /* set cursor*/
    end
    FL0UW00.FL0UWIX1 = FL0UW00.FL0UWIX1 - 1; /* decrement index*/
  end

  FL0UW00.FL0UWIX1 = 4; /* initialize index*/

  while (FL0UW00.FL0UWIX1 > 0) /* number of reports available*/
    if (FL0UM010.FL0UMSEL[FL0UWIX1] > " " /* selection made*/
     && FL0UW00.FL0UWIX1 != 2             /* and not assigned restricted lrpf*/
     && FL0UW00.FL0UWIX1 != 4)            /* and not dtl mapper dwnld*/
      FL0UW00.FL0UWRSL = "Y"; /* report selected*/
    end
    FL0UW00.FL0UWIX1 = FL0UW00.FL0UWIX1 - 1; /* decrement index*/
  end
   /* ------------------------------------------------------------*/
   /* if no reports selected, set cursor on schedule number and*/
   /* display error message.*/
   /* ------------------------------------------------------------*/

  if (FL0UW00.FL0UWRSL == "Y"     /* no reports selected*/
   || FL0UM010.FL0UMSEL[2] != " " /* and not assigned restricted lrpf*/
   || FL0UM010.FL0UMSEL[4] != " ") /* and not dtl mapper dwnld*/
     /* next sentence*/
  else
    converseLib.validationFailed(154); /* 'selection must be made'*/
    FL0UM010.XXXMODID = "400"; /* module identification*/
    set FL0UM010.FBAMDNBR cursor; /* set cursor*/
  end


   /* ------------------------------------------------------------*/
   /* if report as of date entered, verify it's accuracy*/
   /* ------------------------------------------------------------*/

  if (FL0UM010.FBAMDNBR != 0) /* schedule nbr entered*/
    if (FL0UM010.FL0UMSEL[1] == "S"
     || FL0UM010.FL0UMSEL[3] == "S"
     || FL0UM010.FL0UMSEL[4] == "S")
      FL0UW00.FL0UWSDT = FL0UM010.FL0UMSDT; /* date work area*/

      FL0UW00.FL0UWYY = FL0UW00.FL0UWSYY; /* year*/
      FL0UW00.FL0UWMM = FL0UW00.FL0UWSMM; /* month*/
      FL0UW00.FL0UWDD = 01; /* day*/

      set TA2REC empty; /* initialize record*/

      TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
      TA2REC.TA2GRTYP = "A"; /* date format*/
      TA2REC.TA2GRGAN = FL0UW00.FL0UWGRG; /* move date*/
      FL0UW00.FL0UWSVD = FL0UW00.FL0UWGRG; /* save date*/

      FL0U410(); /* validate date*/

    end
  end

    /* ------------------------------------------------------------*/
     /* if a schedule number was not entered, set an error message.*/
    /* ------------------------------------------------------------*/

  if (FL0UW00.FL0UWRSL == "Y" /* reports selected*/
   || FL0UM010.FL0UMSEL[2] == "S") /* or assigned restricted lrpf selected*/
    if (FL0UM010.FBAMDNBR == 0) /* schedule number not present*/
      converseLib.validationFailed(112); /* 'schedule number must entered'*/
      FL0UM010.XXXMODID = "400"; /* module identification*/
      set FL0UM010.FBAMDNBR cursor, bold; /* set cursor*/
    end
  end

    /* ------------------------------------------------------------*/
     /* if a schedule number was entered, Verify it's accuracy.*/
    /* ------------------------------------------------------------*/

  if (FL0UM010.FBAMDNBR != 0) /* schedule number entered*/

    if (FL0UM010.FL0UMSEL[1] == "S"
     || FL0UM010.FL0UMSEL[2] == "S"
     || FL0UM010.FL0UMSEL[3] == "S"
     || FL0UM010.FL0UMSEL[4] == "S")
      FL0U420(); /* select factory model table row*/
    end

  end

    /* ------------------------------------------------------------*/
     /* if model nbr entered and report as of date is four months*/
     /* previous to buy date display error*/
    /* ------------------------------------------------------------*/

  if (FL0UM010.FBAMDNBR != 0) /* schedule number entered*/

    if (FL0UM010.FL0UMSEL[1] == "S"
     || FL0UM010.FL0UMSEL[3] == "S"
     || FL0UM010.FL0UMSEL[4] == "S")
      FL0UW00.FL0UWSMM = FL0UW00.FL0UWSMM + 4; /* add four months*/

      if (FL0UW00.FL0UWSMM > 12) /* if month greater than eight*/
                                 /* subtract 12 from month*/
        FL0UW00.FL0UWSMM = FL0UW00.FL0UWSMM - 12;
        FL0UW00.FL0UWSYY = FL0UW00.FL0UWSYY + 1; /* add 1 to year*/
      end

      FL0UW00.FL0UWYY = FL0UW00.FL0UWSYY; /* year*/
      FL0UW00.FL0UWMM = FL0UW00.FL0UWSMM; /* month*/
      FL0UW00.FL0UWDD = 01; /* day*/

      set TA2REC empty; /* initialize record*/

      TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
      TA2REC.TA2GRTYP = "A"; /* date format*/
      TA2REC.TA2GRGAN = FL0UW00.FL0UWGRG; /* move date*/

      FL0U410(); /* validate date*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (TA2REC.TA2RTNCD == 0)
          FL0UW00.FL0UWCDT = TA2REC.TA2GRGGN;
        end
      end

      if (FL0UW00.FL0UWCDT < FL0UW00.FB8BUYDT)
                     /* 'cannot be four months prior to buy date'*/
        converseLib.validationFailed(155);
        FL0UM010.XXXMODID = "400"; /* module identification*/
        set FL0UM010.FL0UMSDT cursor, bold; /* set cursor*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FL0U400

// Validate start date
Function FL0U410()
   /* ------------------------------------------------------------*/
   /* Determine if Start Date entered is valid. Use subroutine*/
   /* TA0040.*/
   /* ------------------------------------------------------------*/

  FL0UW00.FL0UWYY = FL0UW00.FL0UWSYY; /* year*/
  FL0UW00.FL0UWMM = FL0UW00.FL0UWSMM; /* month*/
  FL0UW00.FL0UWDD = 01; /* day*/

  set TA2REC empty; /* initialize record*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
  TA2REC.TA2GRTYP = "A"; /* date format*/
  TA2REC.TA2GRGAN = FL0UW00.FL0UWGRG; /* move date*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation routine*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA2REC.TA2RTNCD != 0)
      converseLib.validationFailed(17); /* invalid date*/
      FL0UM010.XXXMODID = "410"; /* module identification*/
      set FL0UM010.FL0UMSDT cursor, bold; /* set cursor*/
    end
  end


end // end FL0U410

// Obtain Factory Model data
Function FL0U420()
   /* ------------------------------------------------------------*/
   /* Clear row storage area*/
   /* ------------------------------------------------------------*/

  set FBAREC empty; /* clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format the factory model key*/
   /* ------------------------------------------------------------*/

  FBAREC.FBDMDTYP = "FT1"; /* Model type*/
  FBAREC.FBAMDNBR = FL0UM010.FBAMDNBR; /* Model number*/

   /* ------------------------------------------------------------*/
   /* Fetch row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FL0UW00.FB8BUYDT = FBAREC.FB8BUYDT; /* buy date*/

      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

        converseLib.validationFailed(125); /* schedule number not found*/
        FL0UM010.XXXMODID = "420";
        set FL0UM010.FBAMDNBR cursor, bold; /* set cursor*/
        exit stack; /* Return to display map*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FL0UM010.XXXMODID = "420"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(47); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0UM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0U420

// Process valid input request
Function FL0U500()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

     /* next sentence*/

  else

    FL0UM010.XXXMODID = "500"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* if a report has been selected, submit jcl to product report*/
   /* ------------------------------------------------------------*/

  if (FL0UW00.FL0UWRSL == "Y") /* report selected*/

    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0U507(); /* format production jcl*/
    else
      FL0U505(); /* format development jcl*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if assigned lrpf by restricted status download is selected,*/
   /* submit jcl perform download.*/
   /* ------------------------------------------------------------*/

  if (FL0UM010.FL0UMSEL[2] == "S") /* assigned restricted lrpf*/

    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0U545(); /* format production jcl*/
    else
      FL0U540(); /* format development jcl*/
    end

  end


   /* ------------------------------------------------------------*/
   /* if detail lrps mapper download selected, submit*/
   /* jcl perform download.*/
   /* ------------------------------------------------------------*/

  if (FL0UM010.FL0UMSEL[4] == "S") /* dtl mapper download*/

    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0U535(); /* format production jcl*/
    else
      FL0U530(); /* format development jcl*/
    end

  end

   /* ------------------------------------------------------------*/
   /* reset map if job(s) successfully submitted.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 76) /* job was submitted*/

    FL0UM010.FL0UMSDT = 0; /* report as of date*/
    FL0UM010.FBAMDNBR = 0; /* schedule number*/
    FL0UM010.FL0UMSQT = 0; /* zero select*/
    FL0UW00.FL0UWIX1 = 1; /* initialize index*/
    while (FL0UW00.FL0UWIX1 <= 4)
      FL0UM010.FL0UMSEL[FL0UWIX1] = " "; /* move space to selection*/
      FL0UW00.FL0UWIX1 = FL0UW00.FL0UWIX1 + 1; /* increment index*/
    end
    FL0UW00.FL0UWIX1 = 1; /* initialize index*/
    while (FL0UW00.FL0UWIX1 <= 8)
      FL0UM010.FL0UMSSR[FL0UWIX1] = " "; /* move space to selection*/
      FL0UW00.FL0UWIX1 = FL0UW00.FL0UWIX1 + 1; /* increment index*/
    end

  end


end // end FL0U500

// Process test JCL
Function FL0U505()
   /* ------------------------------------------------------------*/
   /* Process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FL0UW01.FL0UWSCH = FL0UM010.FBAMDNBR; /* schedule number*/
  FL0UW02.FL0UWSCH = FL0UM010.FBAMDNBR; /* schedule number*/

  FL0UW01.FL0UMSQT = FL0UM010.FL0UMSQT; /* select quantity*/
  FL0UW02.FL0UMSQT = FL0UM010.FL0UMSQT; /* select quantity*/

  FL0UW00.FL0UWIX4 = 1;

  while (FL0UW00.FL0UWIX4 < 9)
    FL0UW01.FL0UMSSR[FL0UWIX4] = FL0UM010.FL0UMSSR[FL0UWIX4];
    FL0UW02.FL0UMSSR[FL0UWIX4] = FL0UM010.FL0UMSSR[FL0UWIX4];
    FL0UW00.FL0UWIX4 = FL0UW00.FL0UWIX4 + 1;
  end

  FL0UW00.FL0UWSDT = FL0UM010.FL0UMSDT;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE 19 TO FL0UW01.FL0UWRCC;     /* report as of century*/
   /* MOVE 19 TO FL0UW02.FL0UWRCC;     /* report as of century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (FL0UW00.FL0UWSYY > 60)
    FL0UW01.FL0UWRCC = 19; /* report as of century*/
    FL0UW02.FL0UWRCC = 19; /* report as of century*/
  else
    FL0UW01.FL0UWRCC = 20; /* report as of century*/
    FL0UW02.FL0UWRCC = 20; /* report as of century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  FL0UW01.FL0UWRYY = FL0UW00.FL0UWSYY; /* report as of year*/
  FL0UW02.FL0UWRYY = FL0UW00.FL0UWSYY; /* report as of year*/
  FL0UW01.FL0UWRMM = FL0UW00.FL0UWSMM; /* report as of month*/
  FL0UW02.FL0UWRMM = FL0UW00.FL0UWSMM; /* report as of month*/
  FL0UW01.FL0UWRDD = 01; /* report as of day*/
  FL0UW02.FL0UWRDD = 01; /* report as of day*/
  FL0UW01.FL0UMRP1 = "NONR"; /* report parm for fl324d rpt1*/
  FL0UW01.FL0UMRP2 = "    "; /* report parm for fl324d rpt1*/
  FL0UW02.FL0UMRP1 = "INTL"; /* report parm for fl324d rpt2*/
  FL0UW02.FL0UMRP2 = "INTL"; /* report parm for fl324d rpt2*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0UW00.FL0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0UW00.FL0UWIX2 = 0; /* Initialize index*/
  FL0UW00.FL0UWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0UW00.FL0UWIXT > 0) /* Until end of table*/

    if (FL0UTT1.TARTYPE[FL0UWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/

      FL0UW01.FL0UWTYP = "P"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FL0UW01.FL0UWJCP; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0UW01.FL0UWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
      if (FL0UTT1.TARTYPE[FL0UWIXT] == "A") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        FL0UW02.FL0UWTYP = "A"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = FL0UW02.FL0UWJCP; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0UW02.FL0UWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (FL0UTT1.TARTYPE[FL0UWIXT] == "2" /* LRPS unassigned lrpf*/
         || FL0UTT1.TARTYPE[FL0UWIXT] == "3" /* LRPS unassigned lrpf*/
         || FL0UTT1.TARTYPE[FL0UWIXT] == "4") /* LRPS w/no f/s rpt*/

          /* ------------------------------------------------------------*/
           /* Determine Overrides*/
          /* ------------------------------------------------------------*/

          FL0U510(); /* determine overrides*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          FL0UW01.FL0UWTYP = "C"; /* type*/
          FL0UW00.FL0UWIX3 = FL0UW00.FL0UWIX3 + 1; /* increment index*/
          FL0UW01.FL0UWJCC[FL0UWIX3] = " "; /* clear working strg*/
          FL0UW01.FL0UWJCC[FL0UWIX3] = FL0UTT1.TARJCL[FL0UWIXT];
          FL0UW01.FL0UWCLG[FL0UWIX3] = FL0UW01.FL0UWCND[FL0UWIX3];
          TA6REC.TARJCL[TA6INDEX] = FL0UW01.FL0UWJCC[FL0UWIX3];
          TA6REC.TARTYPE[TA6INDEX] = FL0UW01.FL0UWTYP;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

        else

          /* ----------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* -----------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FL0UTT1.TARJCL[FL0UWIXT];
          TA6REC.TARTYPE[TA6INDEX] = FL0UTT1.TARTYPE[FL0UWIXT];
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0UTT1.TARJCL[FL0UWIXT] == "/*EOF") /* End of table*/
      FL0UW00.FL0UWIXT = 0; /* Indicate end of table*/

    else

      FL0UW00.FL0UWIXT = FL0UW00.FL0UWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0US01(); /* Submit the JCL*/


end // end FL0U505

// Process production jcl
Function FL0U507()
   /* ------------------------------------------------------------*/
   /* Process valid input request*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FL0UW01.FL0UWSCH = FL0UM010.FBAMDNBR; /* schedule number*/
  FL0UW02.FL0UWSCH = FL0UM010.FBAMDNBR; /* schedule number*/
  FL0UW01.FL0UMSQT = FL0UM010.FL0UMSQT; /* select quantity*/
  FL0UW02.FL0UMSQT = FL0UM010.FL0UMSQT; /* select quantity*/
  FL0UW00.FL0UWIX4 = 1;

  while (FL0UW00.FL0UWIX4 < 9)
    FL0UW01.FL0UMSSR[FL0UWIX4] = FL0UM010.FL0UMSSR[FL0UWIX4];
    FL0UW02.FL0UMSSR[FL0UWIX4] = FL0UM010.FL0UMSSR[FL0UWIX4];
    FL0UW00.FL0UWIX4 = FL0UW00.FL0UWIX4 + 1;
  end

  FL0UW00.FL0UWSDT = FL0UM010.FL0UMSDT;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE 19 TO FL0UW01.FL0UWRCC;     /* report as of century*/
   /* MOVE 19 TO FL0UW02.FL0UWRCC;     /* report as of century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (FL0UW00.FL0UWSYY > 60)
    FL0UW01.FL0UWRCC = 19; /* report as of century*/
    FL0UW02.FL0UWRCC = 19; /* report as of century*/
  else
    FL0UW01.FL0UWRCC = 20; /* report as of century*/
    FL0UW02.FL0UWRCC = 20; /* report as of century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  FL0UW01.FL0UWRYY = FL0UW00.FL0UWSYY; /* report as of year*/
  FL0UW02.FL0UWRYY = FL0UW00.FL0UWSYY; /* report as of year*/
  FL0UW01.FL0UWRMM = FL0UW00.FL0UWSMM; /* report as of month*/
  FL0UW02.FL0UWRMM = FL0UW00.FL0UWSMM; /* report as of month*/
  FL0UW01.FL0UWRDD = 01; /* report as of day*/
  FL0UW02.FL0UWRDD = 01; /* report as of day*/
  FL0UW01.FL0UMRP1 = "NONR";
  FL0UW01.FL0UMRP2 = "    ";
  FL0UW02.FL0UMRP1 = "INTL";
  FL0UW02.FL0UMRP2 = "INTL";

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0UW00.FL0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0UW00.FL0UWIX2 = 0; /* Initialize index*/
  FL0UW00.FL0UWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0UW00.FL0UWIXT > 0) /* Until end of table*/


    if (FL0UT01.TARTYPE[FL0UWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/

      FL0UW01.FL0UWTYP = "P"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FL0UW01.FL0UWJCP; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0UW01.FL0UWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      if (FL0UT01.TARTYPE[FL0UWIXT] == "A") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        FL0UW02.FL0UWTYP = "A"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = FL0UW02.FL0UWJCP; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0UW02.FL0UWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (FL0UT01.TARTYPE[FL0UWIXT] == "2" /* LRPS Unassigned LRPF*/
         || FL0UT01.TARTYPE[FL0UWIXT] == "3" /* LRPS Unassigned LRPF*/
         || FL0UT01.TARTYPE[FL0UWIXT] == "4") /* LRPS W/NO F/S RPT*/

          /* ------------------------------------------------------------*/
           /* Determine Overrides*/
          /* ------------------------------------------------------------*/

          FL0U510(); /* determine overrides*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          FL0UW01.FL0UWTYP = "C"; /* type*/
          FL0UW00.FL0UWIX3 = FL0UW00.FL0UWIX3 + 1; /* increment index*/
          FL0UW01.FL0UWJCC[FL0UWIX3] = " "; /* clear working strg*/
          FL0UW01.FL0UWJCC[FL0UWIX3] = FL0UT01.TARJCL[FL0UWIXT];
          FL0UW01.FL0UWCLG[FL0UWIX3] = FL0UW01.FL0UWCND[FL0UWIX3];
          TA6REC.TARJCL[TA6INDEX] = FL0UW01.FL0UWJCC[FL0UWIX3];
          TA6REC.TARTYPE[TA6INDEX] = FL0UW01.FL0UWTYP;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

        else

          /* -----------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* -----------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FL0UT01.TARJCL[FL0UWIXT];
          TA6REC.TARTYPE[TA6INDEX] = FL0UT01.TARTYPE[FL0UWIXT];
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0UT01.TARJCL[FL0UWIXT] == "/*EOF") /* End of table*/
      FL0UW00.FL0UWIXT = 0; /* Indicate end of table*/

    else

      FL0UW00.FL0UWIXT = FL0UW00.FL0UWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0US01(); /* Submit the JCL*/


end // end FL0U507

// Determine overrides
Function FL0U510()
   /* ------------------------------------------------------------*/
   /* Determine Overrides*/
   /* ------------------------------------------------------------*/

  if (FL0UM010.FL0UMSEL[1] == "S") /* lrps unassigned lrpf*/
    FL0UW01.FL0UWCND[1] = "GT)"; /* execute step*/
    FL0UW01.FL0UWCND[2] = "GT)"; /* execute step*/
  else
    FL0UW01.FL0UWCND[1] = "LE)"; /* don't execute*/
    FL0UW01.FL0UWCND[2] = "LE)"; /* execute step*/
  end

  if (FL0UM010.FL0UMSEL[3] == "S") /* lrps w/ no f/s*/
    FL0UW01.FL0UWCND[3] = "GT)"; /* execute step*/
  else
    FL0UW01.FL0UWCND[3] = "LE)"; /* don't execute*/
  end

end // end FL0U510

// Process mapper dwnld test jcl
Function FL0U530()
   /* ------------------------------------------------------------*/
   /* Process valid request to submit detail mapper download.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FL0UW01.FL0UWSCH = FL0UM010.FBAMDNBR; /* schedule number*/
  FL0UW01.FL0UMSQT = FL0UM010.FL0UMSQT; /* select quantity*/
  FL0UW00.FL0UWIX4 = 1;

  while (FL0UW00.FL0UWIX4 < 9)
    FL0UW01.FL0UMSSR[FL0UWIX4] = FL0UM010.FL0UMSSR[FL0UWIX4];
    FL0UW00.FL0UWIX4 = FL0UW00.FL0UWIX4 + 1;
  end

  FL0UW00.FL0UWSDT = FL0UM010.FL0UMSDT;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE 19 TO FL0UW01.FL0UWRCC;     /* report as of century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (FL0UW00.FL0UWSYY > 60)
    FL0UW01.FL0UWRCC = 19; /* report as of century*/
  else
    FL0UW01.FL0UWRCC = 20; /* report as of century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  FL0UW01.FL0UWRYY = FL0UW00.FL0UWSYY; /* report as of year*/
  FL0UW01.FL0UWRMM = FL0UW00.FL0UWSMM; /* report as of month*/
  FL0UW01.FL0UWRDD = 01; /* report as of day*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0UW00.FL0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0UW00.FL0UWIX2 = 0; /* Initialize index*/
  FL0UW00.FL0UWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0UW00.FL0UWIXT > 0) /* Until end of table*/

    if (FL0UTT4.TARTYPE[FL0UWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/

      FL0UW01.FL0UWTYP = "P"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FL0UW01.FL0UWJCP; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0UW01.FL0UWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FL0UTT4.TARJCL[FL0UWIXT];
      TA6REC.TARTYPE[TA6INDEX] = FL0UTT4.TARTYPE[FL0UWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0UTT4.TARJCL[FL0UWIXT] == "/*EOF") /* End of table*/
      FL0UW00.FL0UWIXT = 0; /* Indicate end of table*/

    else

      FL0UW00.FL0UWIXT = FL0UW00.FL0UWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0US02(); /* Submit the JCL*/


end // end FL0U530

// Process mapper dwnld prod jcl
Function FL0U535()
   /* ------------------------------------------------------------*/
   /* Process valid request to submit detail mapper download.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FL0UW01.FL0UWSCH = FL0UM010.FBAMDNBR; /* schedule number*/
  FL0UW01.FL0UMSQT = FL0UM010.FL0UMSQT; /* select quantity*/
  FL0UW00.FL0UWIX4 = 1;

  while (FL0UW00.FL0UWIX4 < 9)
    FL0UW01.FL0UMSSR[FL0UWIX4] = FL0UM010.FL0UMSSR[FL0UWIX4];
    FL0UW00.FL0UWIX4 = FL0UW00.FL0UWIX4 + 1;
  end

  FL0UW00.FL0UWSDT = FL0UM010.FL0UMSDT;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE 19 TO FL0UW01.FL0UWRCC;     /* report as of century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (FL0UW00.FL0UWSYY > 60)
    FL0UW01.FL0UWRCC = 19; /* report as of century*/
  else
    FL0UW01.FL0UWRCC = 20; /* report as of century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  FL0UW01.FL0UWRYY = FL0UW00.FL0UWSYY; /* report as of year*/
  FL0UW01.FL0UWRMM = FL0UW00.FL0UWSMM; /* report as of month*/
  FL0UW01.FL0UWRDD = 01; /* report as of day*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0UW00.FL0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0UW00.FL0UWIX2 = 0; /* Initialize index*/
  FL0UW00.FL0UWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0UW00.FL0UWIXT > 0) /* Until end of table*/

    if (FL0UT04.TARTYPE[FL0UWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/

      FL0UW01.FL0UWTYP = "P"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FL0UW01.FL0UWJCP; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0UW01.FL0UWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FL0UT04.TARJCL[FL0UWIXT];
      TA6REC.TARTYPE[TA6INDEX] = FL0UT04.TARTYPE[FL0UWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0UT04.TARJCL[FL0UWIXT] == "/*EOF") /* End of table*/
      FL0UW00.FL0UWIXT = 0; /* Indicate end of table*/

    else

      FL0UW00.FL0UWIXT = FL0UW00.FL0UWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0US02(); /* Submit the JCL*/


end // end FL0U535

// Process lrpf mapper dwnld test
Function FL0U540()
   /* ------------------------------------------------------------*/
   /* Process valid request to submit assigned lrpf by restricted*/
   /* statis mapper download.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FL0UW01.FL0UWSCH = FL0UM010.FBAMDNBR; /* schedule number*/
  FL0UW01.FL0UMSQT = FL0UM010.FL0UMSQT; /* select quantity*/
  FL0UW00.FL0UWIX4 = 1;

  while (FL0UW00.FL0UWIX4 < 9) /* move seasons*/
    FL0UW01.FL0UMSSR[FL0UWIX4] = FL0UM010.FL0UMSSR[FL0UWIX4];
    FL0UW00.FL0UWIX4 = FL0UW00.FL0UWIX4 + 1;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0UW00.FL0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0UW00.FL0UWIX2 = 0; /* Initialize index*/
  FL0UW00.FL0UWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0UW00.FL0UWIXT > 0) /* Until end of table*/

    if (FL0UTT5.TARTYPE[FL0UWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/

      FL0UW01.FL0UWTYP = "P"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FL0UW01.FL0UWJCP; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0UW01.FL0UWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FL0UTT5.TARJCL[FL0UWIXT];
      TA6REC.TARTYPE[TA6INDEX] = FL0UTT5.TARTYPE[FL0UWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0UTT5.TARJCL[FL0UWIXT] == "/*EOF") /* End of table*/
      FL0UW00.FL0UWIXT = 0; /* Indicate end of table*/

    else

      FL0UW00.FL0UWIXT = FL0UW00.FL0UWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0US02(); /* Submit the JCL*/


end // end FL0U540

// Process lrpf mapper dwnld prod
Function FL0U545()
   /* ------------------------------------------------------------*/
   /* Process valid request to submit assigned lrpf by restricted*/
   /* statis mapper download.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FL0UW01.FL0UWSCH = FL0UM010.FBAMDNBR; /* schedule number*/
  FL0UW01.FL0UMSQT = FL0UM010.FL0UMSQT; /* select quantity*/
  FL0UW00.FL0UWIX4 = 1;

  while (FL0UW00.FL0UWIX4 < 9) /* move seasons*/
    FL0UW01.FL0UMSSR[FL0UWIX4] = FL0UM010.FL0UMSSR[FL0UWIX4];
    FL0UW00.FL0UWIX4 = FL0UW00.FL0UWIX4 + 1;
  end
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0UW00.FL0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0UW00.FL0UWIX2 = 0; /* Initialize index*/
  FL0UW00.FL0UWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0UW00.FL0UWIXT > 0) /* Until end of table*/

    if (FL0UT05.TARTYPE[FL0UWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/

      FL0UW01.FL0UWTYP = "P"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FL0UW01.FL0UWJCP; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0UW01.FL0UWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FL0UT05.TARJCL[FL0UWIXT];
      TA6REC.TARTYPE[TA6INDEX] = FL0UT05.TARTYPE[FL0UWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0UT05.TARJCL[FL0UWIXT] == "/*EOF") /* End of table*/
      FL0UW00.FL0UWIXT = 0; /* Indicate end of table*/

    else

      FL0UW00.FL0UWIXT = FL0UW00.FL0UWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0US02(); /* Submit the JCL*/


end // end FL0U545

// Submit the JCL for execution
Function FL0US01()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* no msgs when batch job done*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0UM010.XXXMODID = "S01"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FL0UM010.XXXMODID = "S01"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FL0US01

// Submit the JCL for execution
Function FL0US02()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* no msgs when batch job done*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0UM010.XXXMODID = "S02"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FL0UM010.XXXMODID = "S02"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FL0US02

// EXECUTE THE LRPS POP-UP
Function XP0T-100()
   /* ***********************************************************/
   /* * XP0T-100 FORMAT AND DISPLAY XP0TM001                    **/
   /* *                                                         **/
   /* *  The purpose of this process is to format and display   **/
   /* *  the pop-up window with the LRPS (Long Range Production **/
   /* *  Schedule) counts by month.                             **/
   /* *                                                         **/
   /* *                                                         **/
   /* *  After performing this process, check the sqlcode and   **/
   /* *  ezertn 8.                                              **/
   /* *                                                         **/
   /* ************************************************************/
   /* * REQUEST #   NAME     DATE    COMMENTS                   **/
   /* * ---------  ------  --------  ---------------------------**/
   /* * FL 2026    WROBIN  11/18/98  CREATED                    **/
   /* *                                                         **/
   /* ************************************************************/


  XP0TW-FL201D-RETURN-CODE = 0;
  XP0T-110(); /* call fl201d to get counts*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

   /* BELOW CHECK IS TO PREVENT DISPLAY OF POP-UP WHEN EITHER THE PARAMETER*/
   /* OR NO DATA WAS EXTRACTED.  THE IOMOD DOES'NT RETURN THE TYPE OF THE*/
   /* ERROR.  HAD TO READ THE MESSAGE TO CONCLUDE THE TYPE OF ERROR.*/

  if (XP0TW-FL201D-RETURN-CODE > 0)
    if (XP0TW-FL201D-ERROR-MSG == 
    "<ERROR> : NO DATA IN FORECAST TABLE        ")
      converseLib.validationFailed(18);
    else
      converseLib.validationFailed(118);
    end
    return;
  end

  XP0TW01.XP0TW-XX1 = 1; /* month index*/
  XP0TW01.XP0TW-POP-UP-DONE = "N";

  while (XP0TW01.XP0TW-POP-UP-DONE == "N")
    XP0T-200(); /* call fl201d to get counts*/
  end

end // end XP0T-100

// OPEN DFCTY.VFYSTY01 CURSOR
Function XP0T-110()
   /* ------------------------------------------------------------*/
   /* call the LRPS totaling program (FL201D)*/
   /* ------------------------------------------------------------*/

  try
    call "FL201D" (XP0TWIO, SQLCA, XP0TWRT) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(37); /* STYLE INVALID*/
      return;
    else
      /* ------------------------------------------------------------*/
       /* If data not available, return  to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/

      converseLib.validationFailed(10);
      TA1REC.TA1LOC = "GET MONTH TOTALS FL201D";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/

      return; /* Exit CALLER*/

    end
  end

end // end XP0T-110

// LRPS TOTALS POP-UP
Function XP0T-200()
   /* ************************************************************/
   /* * XP0T-200 FORMAT AND DISPLAY XP0TM001                    **/
   /* ************************************************************/

  if (converseVar.eventKey is pf3) /* exit*/
    XP0TW01.XP0TW-POP-UP-DONE = "Y";
    return;
  end

   /* setup headings and footings*/

  XP0TM001.XP0TM-HEADER = " LRPS TOTALS BY MONTH";
  /* VE ' SCHED:' TO XP0tm001.XP0TM-SCHED-LABEL;*/
  /* VE XP0TW01.XP0TW-STYLE-MESSAGE TO XP0TM001.XP0TM-SCHED-MESSAGE;*/
  XP0TM001.XP0TM-COLUMN-LABEL = "      PO ID        TOTALS";
  XP0TM001.XP0TM-FOOT = "  PF3:EXIT   ";

  while (XP0TW01.XP0TW-XX1 <= 12)
    XP0TM001.XP0TM-POID[XP0TW-XX1] = XP0TWRT.XP0TW-FL201D-POID[XP0TW-XX1];
    XP0TM001.XP0TM-QTY[XP0TW-XX1] = XP0TWRT.XP0TW-FL201D-QTY[XP0TW-XX1];
    XP0TW01.XP0TW-XX1 = XP0TW01.XP0TW-XX1 + 1;
  end

  converse XP0TM001 ;
end // end XP0T-200

//*** RECORD=FL0UW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0UW00 type basicRecord
  10 FL0UWDNR FL0UWDNR ; 
  10 FL0UWRNA FL0UWRNA ; 
  10 FL0UWRSL FL0UWRSL ; 
  10 FL0UWSRF FL0UWSRF ; 
  10 FL0UWMPR FL0UWMPR ; 
  10 FL0UWIX1 FL0UWIX1 ; 
  10 FL0UWIX2 FL0UWIX2 ; 
  10 FL0UWIX3 FL0UWIX3 ; 
  10 FL0UWIX4 FL0UWIX4 ; 
  10 FL0UWIXT FL0UWIXT ; 
  10 FL0UWLTC FL0UWLTC ; 
  10 FB8BUYDT FB8BUYDT ; 
  10 FL0UWCDT FL0UWCDT ; 
  10 FL0UWSVD FL0UWSVD ; 
  10 FL0UWSDT FL0UWSDT ; 
    15 FL0UWSYY FL0UWSYY ; 
    15 FL0UWSMM FL0UWSMM ; 
  10 FL0UWGRG FL0UWGRG ; 
    15 FL0UWMM FL0UWMM ; 
    15 FL0UWDD FL0UWDD ; 
    15 FL0UWYY FL0UWYY ; 
end // end FL0UW00

//*** RECORD=FL0UW01 ****
// ----------------------------
// Application working storage.
// JCL table lines.
// ----------------------------
// ***********************
Record FL0UW01 type basicRecord
  10 FL0UWJCP FL0UWJCP ; 
    15 FL0UWSCH FL0UWSCH ; 
    15 FL0UWRDT FL0UWRDT ; 
      20 FL0UWRCC FL0UWRCC ; 
      20 FL0UWRYY FL0UWRYY ; 
      20 FL0UWRMM FL0UWRMM ; 
      20 FL0UWRDD FL0UWRDD ; 
    15 FL0UMSQT FL0UMSQT ; 
    15 FL0UMSSR FL0UMSSR [8] ; 
    15 FL0UMRP1 FL0UMRP1 ; 
    15 FL0UMRP2 FL0UMRP2 ; 
    15 * char(34) ; 
  10 FL0UWJCE FL0UWJCE ; 
    15 FL0UWEX1 FL0UWEX1 ; 
    15 FL0UWPNM FL0UWPNM ; 
    15 * char(58) ; 
  10 FL0UWJCC FL0UWJCC [4] ; 
    15 * char(19) ; 
    15 FL0UWCLG FL0UWCLG ; 
    15 * char(58) ; 
  10 FL0UWTYP FL0UWTYP ; 
  10 FL0UWCND FL0UWCND [3] ; 
end // end FL0UW01

//*** RECORD=FL0UW02 ****
// ----------------------------
// Application working storage.
// JCL table lines.
// ----------------------------
// ***********************
Record FL0UW02 type basicRecord
  10 FL0UWJCP FL0UWJCP ; 
    15 FL0UWSCH FL0UWSCH ; 
    15 FL0UWRDT FL0UWRDT ; 
      20 FL0UWRCC FL0UWRCC ; 
      20 FL0UWRYY FL0UWRYY ; 
      20 FL0UWRMM FL0UWRMM ; 
      20 FL0UWRDD FL0UWRDD ; 
    15 FL0UMSQT FL0UMSQT ; 
    15 FL0UMSSR FL0UMSSR [8] ; 
    15 FL0UMRP1 FL0UMRP1 ; 
    15 FL0UMRP2 FL0UMRP2 ; 
    15 * char(34) ; 
  10 FL0UWJCE FL0UWJCE ; 
    15 FL0UWEX1 FL0UWEX1 ; 
    15 FL0UWPNM FL0UWPNM ; 
    15 * char(58) ; 
  10 FL0UWJCC FL0UWJCC [4] ; 
    15 * char(19) ; 
    15 FL0UWCLG FL0UWCLG ; 
    15 * char(58) ; 
  10 FL0UWTYP FL0UWTYP ; 
  10 FL0UWCND FL0UWCND [3] ; 
end // end FL0UW02

//*** RECORD=XP0TW01 ****
// -------------------------------------
// IO-PASS record definition for FL201D
// -------------------------------------
// ***********************
Record XP0TW01 type basicRecord
  10 XP0TW-POP-UP-DONE XP0TW-POP-UP-DONE ; 
  10 XP0TW-XX1 XP0TW-XX1 ; 
end // end XP0TW01

//*** RECORD=XP0TWIO ****
// -------------------------------------
// IO-PASS record definition for FL201D
// -------------------------------------
// ***********************
Record XP0TWIO type basicRecord
  10 XP0TW-WORKING-STORAGE XP0TW-WORKING-STORAGE ; 
    15 XP0TW-FTWR-EQUIP-FL XP0TW-FTWR-EQUIP-FL ; 
    15 FBAMDNBR FBAMDNBR ; 
    15 XP0TW-MIN-QTY XP0TW-MIN-QTY ; 
    15 XP0TW-EXCLUDE-SEASONS XP0TW-EXCLUDE-SEASONS [8] ; 
end // end XP0TWIO

//*** RECORD=XP0TWRT ****
// -----------------------------------------
// Working Storage for FL201D returned data
// -----------------------------------------
// ***********************
Record XP0TWRT type basicRecord
  10 XP0TW-FL201D-RECD XP0TW-FL201D-RECD ; 
    15 XP0TW-FL201D-RETURN-CODE XP0TW-FL201D-RETURN-CODE ; 
    15 XP0TW-MONTHLY-TOTALS XP0TW-MONTHLY-TOTALS ; 
      20 XP0TW-FL201D-VALUES XP0TW-FL201D-VALUES [12] ; 
        25 XP0TW-FL201D-POID XP0TW-FL201D-POID ; 
        25 XP0TW-FL201D-QTY XP0TW-FL201D-QTY ; 
    15 XP0TW-FL201D-ERROR-DBASE XP0TW-FL201D-ERROR-DBASE ; 
    15 XP0TW-FL201D-ERROR-VIEW XP0TW-FL201D-ERROR-VIEW ; 
    15 XP0TW-FL201D-ERROR-KEY XP0TW-FL201D-ERROR-KEY ; 
    15 XP0TW-FL201D-ERROR-MSG XP0TW-FL201D-ERROR-MSG ; 
end // end XP0TWRT

// fl324d report parm1
DataItem FL0UMRP1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl324d report parm2
DataItem FL0UMRP2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection quantity limit
DataItem FL0UMSQT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// selection seasons
DataItem FL0UMSSR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// converted date
DataItem FL0UWCDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statement logic
DataItem FL0UWCLG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition code work area
DataItem FL0UWCND char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report as of day
DataItem FL0UWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request for data switch
DataItem FL0UWDNR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement constants
DataItem FL0UWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Gregorian date
DataItem FL0UWGRG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index one for stored fields
DataItem FL0UWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FL0UWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index three for stored fields
DataItem FL0UWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index four for stored fields
DataItem FL0UWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem FL0UWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statment
DataItem FL0UWJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement
DataItem FL0UWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm JCL statement
DataItem FL0UWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// less than condition override
DataItem FL0UWLTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report as of month
DataItem FL0UWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max jcl lines for primary rpts
DataItem FL0UWMPR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Proc name
DataItem FL0UWPNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report as of century
DataItem FL0UWRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report as of day
DataItem FL0UWRDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report as of date
DataItem FL0UWRDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// report as of month
DataItem FL0UWRMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Resources unavailable
DataItem FL0UWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reports selected switch
DataItem FL0UWRSL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report as of year
DataItem FL0UWRYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory model number
DataItem FL0UWSCH num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Report as of date
DataItem FL0UWSDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report as of month
DataItem FL0UWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// secondary rpts needed flag
DataItem FL0UWSRF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save date
DataItem FL0UWSVD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report as of year
DataItem FL0UWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL statement type
DataItem FL0UWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report as of year
DataItem FL0UWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem XP0TW-EXCLUDE-SEASONS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-FL201D-ERROR-DBASE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-FL201D-ERROR-KEY char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-FL201D-ERROR-MSG char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-FL201D-ERROR-VIEW char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-FL201D-POID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem XP0TW-FL201D-QTY num(12)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem XP0TW-FL201D-RECD char(360)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-FL201D-RETURN-CODE num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem XP0TW-FL201D-VALUES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-FTWR-EQUIP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-MIN-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem XP0TW-MONTHLY-TOTALS char(240)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-POP-UP-DONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-WORKING-STORAGE char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XP0TW-XX1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

