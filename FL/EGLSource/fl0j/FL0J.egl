package fl0j;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom4.XSFLS01;
import corpcom4.XSPF4;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XFRCD;
import corpx1.XFRTBL;
import corpx2.XPGCD;
import corpx2.XQACD;
import fb.common.FB8BUYDT;
import fb.common.FBAMDNBR;
import fb.common.FBDBTCD;
import fb.common.FBDQTB;
import fb.common.FBDREC;
import fb.common.FBEREC;
import ff.common.*;
import fl.common.FLWREC;
import fy.common.FY1FCTYC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PGAREC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRDS;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=FL0J ****
// ************************************************************
// 
//               fl0j - f/l model - update reason codes
//               --------------------------------------
// 
// this will allow inquiry and maintenence of f/l model
// reason codes.
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 05-08-90 cross  Program creation.
// 08/24/90 jalle1 Check for contention due to merge before any
//                 updates made to databases (dhermm request).
// 11/14/90 jalle1 allow for use of style development products.
// 04/11/91 pmainw Get short style name from dprodg.vsyprd01.
// 02/03/92 JMCLAU FL303-enhance application to handle multiple
//                 sales orders.
// 09/15/93 JMCLAU remove pf17 option and change pf16 to point
//                 to fl0k. CSP 4.1 Converson.
// 01/27/95 jalle1 Change S.O. to 9.3 digits.
// y2kfix  11/21/97 pharwo  Regenerate for xx0xs01 changes
// *********************
Program FL0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FBDREC FBDREC; // record
  FBEREC FBEREC; // record
  FL0JW01 FL0JW01; // record
  FL0JW02 FL0JW02; // record
  FLWREC FLWREC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XFRTBL; // table
  use FL0JM.FL0JM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
    ;
    set FL0JW01 empty; /* clear working storage rec1*/
    set FL0JW02 empty; /* clear working storage rec2*/
    set FBDREC empty;
    set PG2REC empty;
    set SQLCA empty;
    ;
    FL0JW01.FL0JWSNM[1] = "FL0JM100"; /* init screens used in this appl*/
    FL0JW01.FL0JWSCN = "FL0JM100"; /* set first screen to display*/
    ;
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Default gpc to footwear if blank.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.XGPCD == "  ")
      COMMAREA.XGPCD = "02";
    end
    ;
    ;
    ;
    ;
    goto FL0J000; /* begin main*/
    ;
    FL0J000: FL0J000();
  end // end main
end // end FL0J

// main flow
Function FL0J000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  FL0JW01.FL0JWPRC = "FL0J000"; /* set current process name*/
  COMMAREA.CACURRAP = "FL0J";
  ;
  FL0JW01.FL0JWEOA = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (FL0JW01.FL0JWEOA == "N") /* while not end-of-aplication*/
    FL0J050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "FL0A"; /* emergency exit only*/
  XSFLS01(); /* exit appl*/
end // end FL0J000

// decide which map to display
Function FL0J050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  FL0JW01.FL0JWPRC = "FL0J050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  FL0JW01.FL0JWSCX = 0; /* screen index*/
  ;
  if (FL0JW01.FL0JWSCN in FL0JW01.FL0JWSNM) /* if current-screen-name is*/
    FL0JW01.FL0JWSCX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = FL0JW01.FL0JWSCN; /* prepare for abend*/
  ;
  FL0JW01.FL0JWBLS = "Y"; /* set build screen flag to 'yes'*/
  FL0JW01.FL0JWEOS = "N"; /* set end-of-screen flag to 'no'*/
  FL0JW01.FL0JWERR = "N"; /* clear error flag*/
  ;
  if (FL0JW01.FL0JWSCX == 1) /* if screen xx0xm100*/
    while (FL0JW01.FL0JWEOS == "N") /* show until user is done*/
      FL0J100();
    end
  else
    TA1REC.TA1MAP = FL0JW01.FL0JWSCN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = FL0JW01.FL0JWSCN;
    FL0J999(); /* abend*/
    XSPF4(); /* exit to main menu*/
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (fl0jweoa ) = 'n'*/
         /* the perform will return to the top of 050 process*/
       /* else*/
         /* the perform will auto return to 000 process*/
  ;
end // end FL0J050

// converse map m100
Function FL0J100()
   /* ************************************************************/
   /* *    process screen m100                                  **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from 050 until the end-of-screen       **/
   /* *     flag (fl0jweos) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  FL0JW01.FL0JWPRC = "FL0J100";
  ;
   /* check if build screen is needed*/
  if (FL0JW01.FL0JWBLS == "Y")
    FL0J101();
    FL0JW01.FL0JWBLS = "N";
  end
  ;
   /* ***********************************************************/
  converse FL0JM100 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  FL0JW01.FL0JWERR = "N";
  ;
  FL0J110(); /* validate pfkeys*/
  ;
  if (FL0JW01.FL0JWERR == "N"
   && FL0JM100 is modified)
    FL0J120(); /* edit entries and update*/
  end
  ;
  if (FL0JW01.FL0JWERR == "N")
    FL0J130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (fl0jweos) is 'n'*/
        /* we go back to top of process 100.*/
     /* if the end-of-screen flag (fl0jweos) is 'y'*/
        /* we return to 050.*/
end // end FL0J100

// build screen
Function FL0J101()
  FL0JW01.FL0JWPRC = "FL0J101";
  ;
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  set FL0JM100 empty;
  FL0JM100.XXXMODID = " "; /* clear err process ind*/
  FL0JM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
  if (FL0JW01.SY1STNBR == " " /* init entry*/
   || FL0JW01.FBAMDNBR == 0)  /* user must enter key fields*/
     /* set up key if special entry options*/
    if (FLWREC.FLWKEY != " ") /* key data passed*/
      FL0JM100.SY1STNBR = FLWREC.SY1STNBR;
      FL0JM100.SY2CLRID = FLWREC.SY2CLRID;
      FL0JM100.XDMCD = FLWREC.XDMCD;
      FL0JM100.FBAMDNBR = FLWREC.FBAMDNBR;
      set FL0JM100.SY1STNBR modified; /* so user may hit enter using init key*/
      set FL0JM100.FBAMDNBR modified; /* and key will seem modified*/
    end
    FL0JW01.FL0JWDX3 = 1;
    while (FL0JW01.FL0JWDX3 < 16)
      FL0JM100.FL0JWDSH[FL0JWDX3] = " ";
      set FL0JM100.OP1NORID[FL0JWDX3] skip, invisible; /* initialize*/
      FL0JW01.FL0JWDX3 = FL0JW01.FL0JWDX3 + 1;
    end
    return;
  end
  ;
   /* fill in all screen fields*/
  ;
  FL0JM100.SY1STNBR = FL0JW01.SY1STNBR;
  FL0JM100.SY2CLRID = FL0JW01.SY2CLRID;
  FL0JM100.XDMCD = FL0JW01.XDMCD;
  FL0JM100.FBAMDNBR = FL0JW01.FBAMDNBR;
  FL0JM100.SY1SSTNM = FL0JW01.SY1SSTNM;
  FL0JM100.SY2CLRDS = FL0JW01.SY2CLRDS;
  ;
   /* initialize nike cust order id map fields*/
  ;
  FL0JW01.FL0JWDX3 = 1;
  while (FL0JW01.FL0JWDX3 < 16)
    FL0JM100.FL0JWDSH[FL0JWDX3] = " ";
    set FL0JM100.OP1NORID[FL0JWDX3] initialAttributes; /* initialize*/
    FL0JW01.FL0JWDX3 = FL0JW01.FL0JWDX3 + 1;
  end
   /* move from ws array to screen*/
  ;
  FL0JW01.FL0JWDX3 = 1;
  while (FL0JW01.FL0JWDX3 < 16)
    FL0JS04();
  end
  FL0JW01.FL0JWDX3 = 15;
  ;
end // end FL0J101

// edit pfkeys
Function FL0J110()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  FL0JW01.FL0JWPRC = "FL0J110";
  ;
  if (FL0JM100.CATOAP != " ") /* if any fastpath data entered*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = FL0JM100.CATOAP;
      COMMAREA.CAITEM = FL0JM100.CAITEM;
      FL0JS99();
      return;
    else
      converseLib.validationFailed(36); /* must use enter on fastpath*/
      FL0JM100.XXXMODID = "110"; /* process id to screen*/
      FL0JW01.FL0JWERR = "Y";
      return;
    end
  else /* option field is blank*/
    if (FL0JM100.CAITEM != " ") /* fastpath item must be blank*/
      converseLib.validationFailed(2);
      FL0JM100.XXXMODID = "110"; /* process id to screen*/
      FL0JW01.FL0JWERR = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (FL0JM100 is modified)
        converseLib.validationFailed(5); /* cannot chg fields on scroll*/
        FL0JM100.XXXMODID = "110"; /* process id to screen*/
        FL0JW01.FL0JWERR = "Y";
        return;
      end
    else
      if (converseVar.eventKey is pf1 /* help*/
       || converseVar.eventKey is pf4 /* goal menu*/
       || converseVar.eventKey is pf5) /* production menu*/
        XSFLS01(); /* exit to help routines*/
        return;
      else
        if (converseVar.eventKey is pa1 /* refresh screen*/
         || converseVar.eventKey is pa2 
         || converseVar.eventKey is pa3)
          COMMAREA.CATOAP = "FL0J"; /* restart appl*/
          XSFLS01();
          return;
        else
          if (converseVar.eventKey is pf3)
            COMMAREA.CATOAP = "FL0A";
            FL0JS99(); /* exit routine*/
            return;
          else
            if (converseVar.eventKey is pf14)
              COMMAREA.CATOAP = "FL0D";
              FL0JS99(); /* exit routine*/
              return;
            else
              if (converseVar.eventKey is pf15)
                COMMAREA.CATOAP = "FL0E";
                FL0JS99(); /* exit routine*/
                return;
              else
                if (converseVar.eventKey is pf16)
                  COMMAREA.CATOAP = "FL0K";
                  FL0JS99(); /* exit routine*/
                  return;
                else
                  COMMAREA.CATOAP = " ";
                  converseLib.validationFailed(3); /* INVALID FUNCTION KEY*/
                  FL0JM100.XXXMODID = "110";
                                 /* process id to screen*/
                  FL0JW01.FL0JWERR = "Y";
                end
              end
            end
          end
        end
      end
    end
  end
end // end FL0J110

// edit entries and update
Function FL0J120()
  FL0JW01.FL0JWPRC = "FL0J120";
  ;
  if (FL0JM100.XXXMODID is modified) /* if contention found earlier*/
    set FL0JM100.XXXMODID initialAttributes; /* reset*/
  end
  ;
   /* **************************************/
   /* edit entries and update*/
   /* **************************************/
  ;
  set FL0JM100.SY1STNBR cursor;
  ;
   /* edit selections - perform edits in reverse sequence*/
  ;
  FL0JW01.FL0JWKER = "N"; /* init key error flag*/
  ;
  if (FL0JM100.SY1STNBR is modified /* if key was changed*/
   || FL0JM100.FBAMDNBR is modified 
   || FL0JM100.SY2CLRID is modified 
   || FL0JM100.XDMCD is modified)  
    FL0J125(); /* Get style short name*/
    FL0JW01.FL0JWDX4 = 16;
    while (FL0JW01.FL0JWDX4 > 1)
      FL0JW01.FL0JWDX4 = FL0JW01.FL0JWDX4 - 1;
      if (FL0JM100.XFRCD[FL0JWDX4] is modified) /* cannot chg reason codes*/
        converseLib.validationFailed(73);
        FL0JM100.XXXMODID = "120";
        FL0JW01.FL0JWERR = "Y";
        return;
      end
    end
  end
  ;
   /* edit model nbr*/
  if (FL0JM100.FBAMDNBR is modified)
    if (FL0JM100.FBAMDNBR == 0)
      set FL0JM100.FBAMDNBR cursor, modified, bold;
      converseLib.validationFailed(8); /* invalid cd*/
      FL0JM100.XXXMODID = "120";
      FL0JW01.FL0JWERR = "Y";
      FL0JW01.FL0JWKER = "Y";
    else
      set FL0JM100.FBAMDNBR normal;
      FL0JW01.FBAMDNBR = FL0JM100.FBAMDNBR;
    end
  end
  ;
   /* edit style*/
  if (FL0JM100.SY1STNBR is modified)
    if (FL0JM100.SY1STNBR == " ")
      set FL0JM100.SY1STNBR cursor, modified, bold;
      converseLib.validationFailed(8); /* invalid cd*/
      FL0JM100.XXXMODID = "120";
      FL0JW01.FL0JWERR = "Y";
      FL0JW01.FL0JWKER = "Y";
    else
      set FL0JM100.SY1STNBR normal;
      FL0JW01.SY1STNBR = FL0JM100.SY1STNBR;
    end
  end
  ;
  ;
  if (FL0JM100.SY1STNBR is modified
   || FL0JM100.FBAMDNBR is modified
   || FL0JM100.SY2CLRID is modified
   || FL0JM100.XDMCD is modified)
    if (FL0JW01.FL0JWKER == "N") /* no err on style or model*/
      FL0JS01(); /* get pg2rec*/
      if (FL0JW01.FL0JWERR == "Y") /* error occurred*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        FL0JM100.SY2CLRDS = PG2REC.SY2CLRDS;
      else
        FL0JS07(); /* get pg4rec*/
        if (FL0JW01.FL0JWERR == "Y") /* error occurred*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE == 0)
          FL0JM100.SY2CLRDS = "                    ";
        else
          FL0JM100.SY2CLRDS = "********************";
        end
      end
      ;
      FL0JW01.SY2CLRID = FL0JM100.SY2CLRID;
      FL0JW01.XDMCD = FL0JM100.XDMCD;
      FL0JW01.SY1SSTNM = FL0JM100.SY1SSTNM;
      FL0JW01.SY2CLRDS = FL0JM100.SY2CLRDS;
      ;
      FL0JS02(); /* build and read cursor*/
      if (FL0JW01.FL0JWERR == "Y") /* error occurred*/
        return;
      end
      if (FL0JW01.FL0JWONE == "Y") /* no line items in cursor*/
        converseLib.validationFailed(18);
        FL0JM100.XXXMODID = "120";
        set FL0JM100.FBAMDNBR cursor, modified, bold;
        FL0JW01.FL0JWERR = "Y"; /* to re-display screen*/
        return;
      else
        FL0JW01.FL0JWERR = "Y"; /* to re-display screen*/
        FL0JW01.FL0JWBLS = "Y";
        return;
      end
    end
  end
  ;
   /* edit reason codes*/
  FL0JW01.FL0JWDX4 = 16;
  while (FL0JW01.FL0JWDX4 > 1)
    FL0JW01.FL0JWDX4 = FL0JW01.FL0JWDX4 - 1;
    if (FL0JM100.XFRCD[FL0JWDX4] is modified)
      if (FL0JM100.FL0JMPID[FL0JWDX4] == " ") /* invalid line for entry*/
        if (FL0JM100.XFRCD[FL0JWDX4] != " ") /* and not blank*/
          set FL0JM100.XFRCD[FL0JWDX4] cursor, modified, bold;
          converseLib.validationFailed(10); /* invalid cd*/
          FL0JM100.XXXMODID = "120";
          FL0JW01.FL0JWERR = "Y";
        else
          set FL0JM100.XFRCD[FL0JWDX4] normal;
        end
      else
        if (FL0JM100.XFRCD[FL0JWDX4] in XFRTBL.XFRCD) /* check valid code*/
          FL0JM100.XFRDESC[FL0JWDX4] = XFRTBL.XFRDESC[sysVar.arrayIndex];
          set FL0JM100.XFRCD[FL0JWDX4] normal;
        else
          set FL0JM100.XFRCD[FL0JWDX4] cursor, modified, bold;
          converseLib.validationFailed(10); /* invalid cd*/
          FL0JM100.XXXMODID = "120";
          FL0JW01.FL0JWERR = "Y";
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* check to see if merge is executing and causing contention*/
   /* on db2 tables.*/
   /* ------------------------------------------------------------*/
  ;
  FL0J121(); /* check for contention*/
  ;
  if (FL0JW01.FL0JWERR == "Y")
    return; /* if edit errors do not update*/
  end
  ;
   /* perform updates as needed*/
  ;
  FL0JW01.FL0JWDX3 = 1; /* start at top of screen*/
  FL0JW01.FL0JWDX4 = FL0JW01.FL0JWDX2 - 15;
  if (FL0JW01.FL0JWDX4 < 1)
    FL0JW01.FL0JWDX4 = 1;
  end
  FL0JW01.FL0JWEND = "N"; /* init end flag*/
  while (FL0JW01.FL0JWDX3 < 16
   && FL0JW01.FL0JWEND == "N")
    FL0JS05(); /* save screen entries to array and db2*/
  end
  if (FL0JW01.FL0JWERR == "N")
    converseLib.validationFailed(32); /* updates completed*/
    FL0JM100.XXXMODID = "120";
  end
  ;
end // end FL0J120

// check for merge contention
Function FL0J121()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty;
  ;
  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        FL0JM100.XXXMODID = "121"; /* module identification*/
        FL0JW01.FL0JWERR = "Y"; /* set error switch*/
        FL0JW01.FL0JWDX3 = 1; /* set index to 1*/
        ;
        while (FL0JW01.FL0JWDX3 < 16 /* until max lines*/
         && FL0JM100.XFRCD[FL0JWDX3] != " ") /* and rsn cd exists*/
          ;
          set FL0JM100.XFRCD[FL0JWDX3] modified; /* set rsn cd modified*/
          FL0JW01.FL0JWDX3 = FL0JW01.FL0JWDX3 + 1; /* inc counter*/
          ;
        end
      end
    else
      ;
      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      FLWREC.XXXMODID = "121"; /* Module identification*/
      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      ;
      FL0J999(); /* abend routine*/
      ;
    end
  end
  ;
  ;
end // end FL0J121

Function FL0J125()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPRODG.VSYPRD01*/
   /* ---------------------------------------------------------*/
  ;
  ;
  set PGAREC empty;
  ;
  PGAREC.XGPCD = COMMAREA.XGPCD;
  ;
  PGAREC.SY1STNBR = FL0JM100.SY1STNBR;
  ;
  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FL0JM100.SY1SSTNM = PGAREC.PGASSTNM;
    return;
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/
      ;
      FL0JM100.SY1SSTNM = "************";
      return;
      ;
    else
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "GET SHORT STYLE NAME            ";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        ;
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
        ;
      else
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end FL0J125

// determine next action
Function FL0J130()
  FL0JW01.FL0JWPRC = "FL0J130";
  ;
   /* **************************************/
   /* determine next action*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    return;
  end
  ;
  if (converseVar.eventKey is pf7)
    if (FL0JW01.FL0JWDX2 <= 16)
      converseLib.validationFailed(6); /* cannot scroll back*/
      FL0JW01.FL0JWERR = "Y";
      FL0JM100.XXXMODID = "130";
    else
      FL0JW01.FL0JWDX2 = FL0JW01.FL0JWDX2 - 30;
      if (FL0JW01.FL0JWDX2 < 1)
        FL0JW01.FL0JWDX2 = 1;
      end
      FL0JW01.FL0JWBLS = "Y";
    end
  end
  ;
  if (converseVar.eventKey is pf8)
    if (FL0JW01.FL0JWDX2 > FL0JW01.FL0JWDX1) /* at bottom of array*/
      converseLib.validationFailed(7); /* cannot scroll forward*/
      FL0JW01.FL0JWERR = "Y";
      FL0JM100.XXXMODID = "130";
    else
      FL0JW01.FL0JWBLS = "Y";
    end
  end
  ;
end // end FL0J130

// abend routine
Function FL0J999()
  ;
       /* abend with negative sqlcode*/
  ;
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
  TA1REC.TA1LOCAT[1] = FL0JW01.FL0JWPRC; /* aborting process*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    converseLib.validationFailed(47);
  else
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* abend module*/
    converseLib.validationFailed(48);
  end
  ;
end // end FL0J999

// select unique from pg2rec
Function FL0JS01()
  FL0JW01.FL0JWPRC = "FL0JS01"; /* set current proc name*/
  ;
  PG2REC.XGPCD = "02";
  PG2REC.SY1STNBR = FL0JM100.SY1STNBR;
  ;
  if (FL0JM100.SY2CLRID == "   ")
    FL0JM100.SY2CLRID = "00 ";
  end
  ;
  if (FL0JM100.XDMCD == "  ")
    FL0JM100.XDMCD = "00";
  end
  ;
  PG2REC.SY2CLRID = FL0JM100.SY2CLRID;
  PG2REC.XDMCD = FL0JM100.XDMCD;
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO3120 "; /* io module*/
    TA1REC.TA1DBASE = "DPRODG"; /* database*/
    TA1REC.TA1TBLVU = "VSYCLR01"; /* table view*/
    FL0JM100.XXXMODID = "S01";
    FL0JW01.FL0JWERR = "Y"; /* set error flag*/
    FL0J999(); /* abend routine*/
  end
  ;
end // end FL0JS01

// declare cursor for fbdrec
Function FL0JS02()
  FL0JW01.FL0JWPRC = "FL0JS02";
  ;
   /* declare and read cursor - store line items to ws*/
  ;
  FBDREC.FBDMDTYP = "FL1";
  FBDREC.FBAMDNBR = FL0JW01.FBAMDNBR;
  FBDREC.SY1STNBR = FL0JW01.SY1STNBR;
  FBDREC.SY2CLRID = FL0JW01.SY2CLRID;
  FBDREC.XDMCD = FL0JW01.XDMCD;
  FBDREC.FY1FCTYC = "*";
  ;
  try
    call "IO3460" ("S1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* fetch and move rows to ws array*/
  ;
  FL0JW01.FL0JWEND = "N";
  FL0JW01.FL0JWONE = "Y";
  while (FL0JW01.FL0JWEND == "N")
    FL0JS03(); /* fetch row from nicrec*/
  end
  FL0JW01.FL0JWDX2 = 1; /* initialize array row on screen index*/
  ;
end // end FL0JS02

// read fbdrec and load array
Function FL0JS03()
  FL0JW01.FL0JWPRC = "FL0JS03"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  try
    call "IO3460" ("N1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (FL0JW01.FL0JWONE == "Y")
      FL0JW01.FL0JWONE = "N";
      FL0JW01.FL0JWDX1 = 0;
      set FL0JW02 empty;
    end
    FL0JW01.FL0JWDX1 = FL0JW01.FL0JWDX1 + 1;
     /* save row to ws*/
    FL0JW02.FB8BUYDT[FL0JWDX1] = FBDREC.FB8BUYDT;
    FL0JW02.FY1FCTYC[FL0JWDX1] = FBDREC.FY1FCTYC;
    FL0JW02.FBDQTB[FL0JWDX1] = FBDREC.FBDQTB;
    FL0JW02.PC2CUXID[FL0JWDX1] = FBDREC.PC2CUXID;
    FL0JW02.OP1PARTN[FL0JWDX1] = FBDREC.OP1PARTN;
    FL0JW02.OP1CUOID[FL0JWDX1] = FBDREC.OP1CUOID;
    FL0JW02.OP1NORID[FL0JWDX1] = FBDREC.OP1NORID;
    FL0JW02.XFRCD[FL0JWDX1] = FBDREC.XFRCD;
    FL0JW02.XQACD[FL0JWDX1] = FBDREC.XQACD;
    FL0JW02.PC2INSEG[FL0JWDX1] = FBDREC.PC2INSEG;
    FL0JW02.XPGCD[FL0JWDX1] = FBDREC.XPGCD;
    FL0JW02.FBDBTCD[FL0JWDX1] = FBDREC.FBDBTCD;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      try
        call "IO3460" ("C1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
      end
      FL0JW01.FL0JWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO3460 "; /* io module*/
      TA1REC.TA1DBASE = "DFBUY"; /* database*/
      TA1REC.TA1TBLVU = "VFLQTB01"; /* table view*/
      FL0JM100.XXXMODID = "S03";
      FL0JW01.FL0JWERR = "Y";
      FL0J999(); /* abend routine*/
      FL0JW01.FL0JWEND = "Y"; /* end loop*/
      return;
    end
  end
  ;
end // end FL0JS03

// move array recs to screen
Function FL0JS04()
  FL0JW01.FL0JWPRC = "FL0JS04";
  ;
   /* move ws array to screen*/
  ;
  if (FL0JW01.FL0JWDX2 <= FL0JW01.FL0JWDX1)
    FL0JW01.FL0JWYMD = FL0JW02.FB8BUYDT[FL0JWDX2];
    FL0JWPID = " ";
     /* format po-id*/
    FL0JW01.FL0JWPMM = FL0JW01.FL0JWMM; /* first move mth to po-id*/
    FL0JW01.FL0JWMM = FL0JW01.FL0JWMM - 2; /* calc mth - 2*/
    if (FL0JW01.FL0JWMM < 1)
                                   /* if in previous year, adjust yy and mm*/
      FL0JW01.FL0JWMM = FL0JW01.FL0JWMM + 12;
      FL0JW01.FL0JWYY = FL0JW01.FL0JWYY - 1;
    end
    FL0JW01.FL0JWPYY = FL0JW01.FL0JWYY; /* move year to po-id*/
    FL0JW01.FL0JWPM2 = FL0JW01.FL0JWMM; /* move month - 2 to po-id*/
    FL0JW01.FL0JWDS1 = "-";
    FL0JW01.FL0JWDS2 = "-";
    FL0JW01.FL0JWDS3 = "-";
    FL0JW01.FL0JWPFC = FL0JW02.FY1FCTYC[FL0JWDX2];
     /* now fill in rest of the fields on the line*/
    FL0JM100.FL0JMPID[FL0JWDX3] = FL0JW01.FL0JWPID;
    FL0JM100.FBDQTB[FL0JWDX3] = FL0JW02.FBDQTB[FL0JWDX2];
    FL0JM100.PC2CUXID[FL0JWDX3] = FL0JW02.PC2CUXID[FL0JWDX2];
    FL0JM100.OP1CUOID[FL0JWDX3] = FL0JW02.OP1CUOID[FL0JWDX2];
    if (FL0JW02.OP1CUOID[FL0JWDX2] > 0) /* Format nike customer id*/
      FL0JM100.FL0JWDSH[FL0JWDX3] = ".";
      FL0JM100.OP1NORID[FL0JWDX3] = FL0JW02.OP1NORID[FL0JWDX2];
    else
      FL0JM100.FL0JWDSH[FL0JWDX3] = " ";
      set FL0JM100.OP1NORID[FL0JWDX3] skip, invisible;
    end
    FL0JM100.XFRCD[FL0JWDX3] = FL0JW02.XFRCD[FL0JWDX2];
    if (FL0JW02.XFRCD[FL0JWDX2] in XFRTBL.XFRCD)
      FL0JM100.XFRDESC[FL0JWDX3] = XFRTBL.XFRDESC[sysVar.arrayIndex];
    end
  else
    FL0JM100.FL0JWDSH[FL0JWDX3] = " ";
    set FL0JM100.OP1NORID[FL0JWDX3] skip, invisible;
  end
  ;
  FL0JW01.FL0JWDX2 = FL0JW01.FL0JWDX2 + 1;
  FL0JW01.FL0JWDX3 = FL0JW01.FL0JWDX3 + 1;
  ;
end // end FL0JS04

// build ws-array from screen
Function FL0JS05()
  FL0JW01.FL0JWPRC = "FL0JS05"; /* set current proc name*/
  ;
  if (FL0JM100.XFRCD[FL0JWDX3] is modified
   && FL0JM100.XFRCD[FL0JWDX3] != " ")
    FL0JW02.XFRCD[FL0JWDX4] = FL0JM100.XFRCD[FL0JWDX3];
    FL0JS06(); /* select and update fbdrec*/
  end
  ;
  FL0JW01.FL0JWDX4 = FL0JW01.FL0JWDX4 + 1;
  FL0JW01.FL0JWDX3 = FL0JW01.FL0JWDX3 + 1;
end // end FL0JS05

// select and update fbdrec
Function FL0JS06()
  FL0JW01.FL0JWPRC = "FL0JS06"; /* set current proc name*/
  ;
   /* select and update fbdrec*/
  ;
   /* set up key for record to update*/
  FBDREC.FBDMDTYP = "FL1";
  FBDREC.FB8BUYDT = FL0JW02.FB8BUYDT[FL0JWDX4];
  FBDREC.FBAMDNBR = FL0JW01.FBAMDNBR;
  FBDREC.FY1FCTYC = FL0JW02.FY1FCTYC[FL0JWDX4];
  FBDREC.PC2CUXID = FL0JW02.PC2CUXID[FL0JWDX4];
  FBDREC.OP1PARTN = FL0JW02.OP1PARTN[FL0JWDX4];
  FBDREC.OP1CUOID = FL0JW02.OP1CUOID[FL0JWDX4];
  FBDREC.OP1NORID = FL0JW02.OP1NORID[FL0JWDX4];
  FBDREC.SY1STNBR = FL0JW01.SY1STNBR;
  FBDREC.SY2CLRID = FL0JW01.SY2CLRID;
  FBDREC.XDMCD = FL0JW01.XDMCD;
  FBDREC.XQACD = FL0JW02.XQACD[FL0JWDX4];
  FBDREC.XPGCD = FL0JW02.XPGCD[FL0JWDX4];
  FBDREC.PC2INSEG = FL0JW02.PC2INSEG[FL0JWDX4];
  FBDREC.FBDBTCD = FL0JW02.FBDBTCD[FL0JWDX4];
  try
    call "IO3460" ("SB", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* select fbdrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* then update fbdrec*/
    FBDREC.XFRCD = FL0JW02.XFRCD[FL0JWDX4];
    XX0XS01(); /* get system date and time*/
    FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    try
      call "IO3460" ("U2", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
    end /* update fbdrec*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        FL0JW01.FL0JWERR = "Y";
        FL0JM100.XXXMODID = "S06";
        converseLib.validationFailed(20); /* row not found*/
        set FL0JM100.XFRCD[FL0JWDX3] cursor, modified, bold;
      else
        TA1REC.TA1LOCAT[2] = "U2     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO3460 "; /* io module*/
        TA1REC.TA1DBASE = "DFBUY "; /* database*/
        TA1REC.TA1TBLVU = "VFLQTB01"; /* table view*/
        FL0JW01.FL0JWERR = "Y";
        FL0JW01.FL0JWEND = "Y"; /* end update loop*/
        FL0J999(); /* abend routine*/
        return;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      FL0JW01.FL0JWERR = "Y";
      FL0JM100.XXXMODID = "S06";
      converseLib.validationFailed(21); /* row not found*/
      set FL0JM100.XFRCD[FL0JWDX3] cursor, modified, bold;
    else
      TA1REC.TA1LOCAT[2] = "SB     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO3460 "; /* io module*/
      TA1REC.TA1DBASE = "DFBUY "; /* database*/
      TA1REC.TA1TBLVU = "VFLQTB01"; /* table view*/
      FL0JM100.XXXMODID = "S06";
      FL0JW01.FL0JWERR = "Y";
      FL0JW01.FL0JWEND = "Y"; /* end update loop*/
      FL0J999(); /* abend routine*/
      return;
    end
  end
  ;
end // end FL0JS06

// select unique from pg4rec
Function FL0JS07()
  FL0JW01.FL0JWPRC = "FL0JS07"; /* set current proc name*/
  ;
  set PG4REC empty;
  ;
  PG4REC.PG4STNBR = FL0JM100.SY1STNBR;
  ;
  if (FL0JM100.SY2CLRID == "00 ")
    FL0JM100.SY2CLRID = "   ";
  end
  ;
  if (FL0JM100.XDMCD == "00")
    FL0JM100.XDMCD = "  ";
  end
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4390 "; /* io module*/
    TA1REC.TA1DBASE = "DPRODG"; /* database*/
    TA1REC.TA1TBLVU = "VSYDVL01"; /* table view*/
    FL0JM100.XXXMODID = "S07";
    FL0JW01.FL0JWERR = "Y"; /* set error flag*/
    FL0J999(); /* abend routine*/
  end
  ;
end // end FL0JS07

// set flwrec for exit
Function FL0JS99()
  FL0JW01.FL0JWPRC = "FL0JS99"; /* set current proc name*/
  ;
   /* set flwrec for exit*/
  ;
  set FLWREC empty;
  FLWREC.SY1STNBR = FL0JW01.SY1STNBR;
  FLWREC.FBAMDNBR = FL0JW01.FBAMDNBR;
  FLWREC.SY2CLRID = FL0JW01.SY2CLRID;
  FLWREC.XDMCD = FL0JW01.XDMCD;
  XSFLS01(); /* transfer to another application*/
  ;
end // end FL0JS99

//*** RECORD=FL0JW01 ****
// this is the main working storage record for fl0j.
// ***********************
Record FL0JW01 type basicRecord
  10 FL0JWKEY FL0JWKEY ; 
    15 SY1STNBR SY1STNBR ; 
    15 FBAMDNBR FBAMDNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRDS SY2CLRDS ; 
  10 FL0JWEOA FL0JWEOA ; 
  10 FL0JWEOS FL0JWEOS ; 
  10 FL0JWPRC FL0JWPRC ; 
  10 FL0JWERR FL0JWERR ; 
  10 FL0JWBLS FL0JWBLS ; 
  10 FL0JWSCX FL0JWSCX ; 
  10 FL0JWSCN FL0JWSCN ; 
  10 FL0JWSNM FL0JWSNM [6] ; 
  10 FL0JWDX1 FL0JWDX1 ; 
  10 FL0JWDX2 FL0JWDX2 ; 
  10 FL0JWDX3 FL0JWDX3 ; 
  10 FL0JWDX4 FL0JWDX4 ; 
  10 FL0JWKER FL0JWKER ; 
  10 FL0JWEND FL0JWEND ; 
  10 FL0JWONE FL0JWONE ; 
  10 FL0JWYMD FL0JWYMD ; 
    15 * char(3) ; 
    15 FL0JWYY FL0JWYY ; 
    15 FL0JWMM FL0JWMM ; 
    15 * char(2) ; 
  10 FL0JWPID FL0JWPID ; 
    15 FL0JWPYY FL0JWPYY ; 
    15 FL0JWDS1 FL0JWDS1 ; 
    15 FL0JWPM2 FL0JWPM2 ; 
    15 FL0JWDS2 FL0JWDS2 ; 
    15 FL0JWPMM FL0JWPMM ; 
    15 FL0JWDS3 FL0JWDS3 ; 
    15 FL0JWPFC FL0JWPFC ; 
  10 FL0JWDSH FL0JWDSH ; 
end // end FL0JW01

//*** RECORD=FL0JW02 ****
// this is the line item array for fl0j
// ***********************
Record FL0JW02 type basicRecord
  10 FB8BUYDT FB8BUYDT [100] ; 
  10 FY1FCTYC FY1FCTYC [100] ; 
  10 FBDQTB FBDQTB [100] ; 
  10 PC2CUXID PC2CUXID [100] ; 
  10 OP1PARTN OP1PARTN [100] ; 
  10 OP1CUOID OP1CUOID [100] ; 
  10 OP1NORID OP1NORID [100] ; 
  10 XFRCD XFRCD [100] ; 
  10 XQACD XQACD [100] ; 
  10 PC2INSEG PC2INSEG [100] ; 
  10 FBDBTCD FBDBTCD [100] ; 
  10 XPGCD XPGCD [100] ; 
end // end FL0JW02

// build screen flag
DataItem FL0JWBLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash field
DataItem FL0JWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash field
DataItem FL0JWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash field
DataItem FL0JWDS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dashes
DataItem FL0JWDSH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max in ws array index
DataItem FL0JWDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last row of array on scrn idx
DataItem FL0JWDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen position index
DataItem FL0JWDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem FL0JWDX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quit flag
DataItem FL0JWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of application flag
DataItem FL0JWEOA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of screen flag
DataItem FL0JWEOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem FL0JWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key error flag
DataItem FL0JWKER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0j key group
DataItem FL0JWKEY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm portion of date
DataItem FL0JWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time flag
DataItem FL0JWONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory cd
DataItem FL0JWPFC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted po-id
DataItem FL0JWPID char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy month - 2
DataItem FL0JWPM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy month
DataItem FL0JWPMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// name of current process
DataItem FL0JWPRC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy year
DataItem FL0JWPYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// name of current screen
DataItem FL0JWSCN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen pointer
DataItem FL0JWSCX num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array of possible screens
DataItem FL0JWSNM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date in ccyymmdd
DataItem FL0JWYMD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy portion of date
DataItem FL0JWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

