package fl0k;

import corpcom2.XCTHREC;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFL001;
import corpcom3.XPTA0P;
import corpcom3.XPXFR01;
import corpcom3.XPXX001;
import corpcom4.XSFLS01;
import corpcom4.XSPG202;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.CU-CO-ID;
import corpcom5.CU-STOR-ID;
import corpcom6.SQLCA;
import corpcom7.XXXPGMNB;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpcom7.ZZ-SETUP-HHMM;
import corpcom7.ZZHHMMSS;
import corpx1.XCTCD;
import corpx1.XDM-DIM-CD;
import corpx1.XDMCD;
import corpx1.XFRCD;
import corpx1.XFRTBL;
import corpx1.XGP-GPC-CD;
import corpx2.XNX-DEPT-ID-XREF;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XXXUSRID;
import corpy2.YSMXGA;
import corpz3.ZZ-CHNG-CNT;
import corpz3.ZZ-CHNG-DT;
import corpz3.ZZ-CHNG-HHMM;
import corpz3.ZZ-SDT;
import corpz3.ZZZSDT;
import fb.common.FB-LATE-BK-FL;
import fb.common.FB-LATE-BK-FL-MDT;
import fb.common.FB8BUYDT;
import fb.common.FB9BTQTY;
import fb.common.FB9REC;
import fb.common.FBAMDNBR;
import fb.common.FBAREC;
import fb.common.FBDBTCD;
import fb.common.FBDMDTYP;
import fb.common.FBDQTB;
import fb.common.FBDREC;
import fb.common.FBDTOQTB;
import fb.common.FBEREC;
import fb.common.FBHREC;
import fb.common.FBIREC;
import fb.common.FBKREC;
import ff.common.*;
import fl.common.FLWREC;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import fy.common.FYBDXCC;
import fy.common.FYBOXCC;
import fy.common.FYBREC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pa.common.PA1REC;
import pa.common.PA4REC;
import pa.common.PACREC;
import pc.common.PC-CU-IN-SEG-CD;
import pc.common.PC-PRDCU-ID;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pc.common.PC2REC;
import pc.common.PC6REC;
import pc.common.PCYREC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PGAREC;
import sy.common.SY-COLR-CD-ID;
import sy.common.SY-STY-NBR;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ww.common.WEU0100;
//*** PROGRAM=FL0K ****
// This application allows a user to inquire on and maintain a
// row in a DB2 table.
// 
// The screen is displayed for the user to enter the key to the
// table row for which data is to be displayed.
// 
// The entered data is verified to be complete and correct.
// The requested table row is selected and the data is
// formatted and displayed to the user.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update was completed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/17/88  USERID  New application.
// 002      06/26/90  rhetri  Set cursor position.
// 003      08/24/90  jalle1  Check for contention due to merge
//                            before updt to dfbuy.vflqtb01
//                            (dhermm request).
// f#fl205  10/11/90  jalle1  check for trade restrictions
//          10/21/90  jalle1  allow for override of country
//                            trade restrictions message.
// 0000000  01/03/91  jalle1  add code to insert rows to
//                            dfbuy.vflaud01 (audit table)
//                            when a transaction is performed.
// 0000000  04/11/91  pmainw  Get short style name from
//                            dprodg.vsyprd01.
// f#00000  09/25/91  jalle1  Add buy date to flwrec when
//                            doing fastpath. if fastpath fails
//                            this will prevent fl0k from
//                            inserting 0 buy dates to flqtb
//                            if an add is performed.
// 0000000  10/08/91  jalle1  oct '91 tbl chgs - default late
//                            bkg fields when inserting to
//                            dfbuy.vflqtb01.
// 0000000  10/17/91  PMAINW  Increase xxxtslen to 625.
// PCF153   12/06/91  JMCLAU  Add code to process Late Bookings
// FL303    02/04/92  JMCLAU  Modify to handle multiple sales
//                            orders.
// FL303    05/07/92  PMAINW  Fix the way op-ord-part-char
//                            is handled for STK.
// FL303    05/11/92  JMCLAU  Fix the way op-nike-ord-id
//                            processes when there are only
//                            forecast qty's and no model qty's
// 0000000  06/12/92  PMAINW  Change fl0kw02.
// FL339    07/01/92  JMCLAU  add reason code to dfbuy.vflaud01
//                            table when writing an audit row.
// FL347    10/19/92  JMCLAU  Add a feature to copy line items
//                            from the Current Buy when adding
//                            a line. In addition, add ability
//                            to scroll current buys.
// FB-305   02/08/93  PMAINW  HANDLE PRE-ADVISE AND EARLY
//                            ORDERS.
// 0000     03/04/93  PMAINW  intialize fl0kw01 after update.
// 0000     04/02/93  PMAINW  rollback db2 on abends.
// FL364    06/25/93  LDELUH  Add logic to include new nil
//                            country buy qty.
// 00000    09/15/93  JMCLAU  Remove pf-16 key.
// 00000    10/12/93  LDELUH  Fix trade restr override logic.
// 00000    11/15/93  LDELUH  Fix stock preadvise logic.
// fb322    11/18/93  LDELUH  Add divert check logic.
// 00000    01/18/94  LDELUH  Fix problem when get invalid s.o.
//                            msg when adding a "PR" to model.
// 00000    01/26/94  JALLE1  Add code to run FL328D as part
//                            of the PF20 process.
// 00000    12/15/94  JALLE1  European changes - add European
//                            buy types.
//          03-03-95  LREIN   Temp get no hit on sumcode euro
//          04-05-95  JALLE1  Remove vsumcd01 when determining
//                            a European order.  Use vprdcu01
//                            instead.
//          02-20-96  rmcafe  modified add line to not require
//                            sales order number for nil record
// FB355    05-30-96  BKEPFO  MODIFY DIVERT LOGIC.
// FB180    10-23-96  RTRAN   Modified to bring the future
//                            orders into the current buy.
// FB1131   11-17-97  RJOGIA  Modified to bring Indirect
//                            Direct into the current buy.
// FB1131   12-11-97  RTRAN   Quick fix FL0K to bring Indirect
//                            Direct into the current buy.
// ------- -------- ------ ----------------------------------
// Y2KFIX  02/02/98 CSAWKI MODIFICATIONS MADE TO: FL0KW00,
//                         FL0K144, FL0K160.
//         03/21/00 SKATHI NSC MODIFICATIONS. TO STOP FOOTWEAR
//                         PRODUCTS FROM GETTING PROCESSED
// *********************
Program FL0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FBAREC FBAREC; // record
  FBDREC FBDREC; // record
  FBEREC FBEREC; // record
  FBHREC FBHREC; // record
  FBIREC FBIREC; // record
  FBKREC FBKREC; // record
  FL0KW00 FL0KW00; // record
  FL0KW01 FL0KW01; // record
  FL0KW02 FL0KW02; // record
  FL0KW03 FL0KW03; // record
  FL0KW08 FL0KW08; // record
  FLWREC FLWREC; // record
  FY1REC FY1REC; // record
  FYBREC FYBREC; // record
  PA1REC PA1REC; // record
  PA4REC PA4REC; // record
  PACREC PACREC; // record
  PC2REC PC2REC; // record
  PC6REC PC6REC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VCBBFC01 VCBBFC01; // record
  WEU0100 WEU0100; // record
  XCTHREC XCTHREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0KTT1 {deleteAfterUse = yes}; // table
  use FL0KT01 {deleteAfterUse = yes}; // table
  use XFRTBL; // table
  use FL0KM.FL0KM010, // form
  		FL0KM.TA0PM001,
  		FL0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FL0KM010 initial; /* M001 input/output*/
    set FL0KW00 empty; /* Working storage*/
    set FL0KW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* temp storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/
    ;
    ;
    ;
    ;
    if (FLWREC.SY1STNBR > " ")
      FL0KM010.SY1STNBR = FLWREC.SY1STNBR; /* style number*/
      FL0KM010.SY2CLRID = FLWREC.SY2CLRID; /* color*/
      FL0KM010.XDMCD = FLWREC.XDMCD; /* dimension*/
      FL0KM010.FBAMDNBR = FLWREC.FBAMDNBR; /* model number*/
      FL0KW00.FL0KWSWF = "Y"; /* Format the map switch*/
      FL0KW00.FL0KWSWR = "Y"; /* Request for data switch*/
    else
      FL0KW00.FL0KWSWF = "N"; /* Format the map switch*/
      FL0KW00.FL0KWSWR = "N"; /* Request for data switch*/
      FL0KW00.FL0KWFRS = "Y"; /* 1st time into appl fl*/
    end
    ;
    FL0KW00.XXXTSPAG = 1; /* to display current page*/
    ;
    COMMAREA.XGPCD = "02"; /* Footwear GPC is hardcoded*/
    ;
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Default gpc to footwear if blank.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.XGPCD == "  ")
      COMMAREA.XGPCD = "02";
    end
    ;
    ;
    FL0KW00.FL0KW-EURO-XREF = "WHS65";
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0K001; /* Converse the main process*/
    ;
    ;
    FL0K001: FL0K001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0K001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FL0K

// Inquire/maintain a table row
Function FL0K001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FL0K100(); /* Obtain the data to display*/
  ;
  FL0K200(); /* Format and display the map*/
  ;
  FL0K300(); /* Check attention identifier*/
  ;
  FL0K400(); /* Reset fields to normal intensity*/
  ;
  FL0K500(); /* Verify the entered data*/
  ;
  FL0K600(); /* Process valid input request*/
  ;
  ;
end // end FL0K001

// Obtain the data to display
Function FL0K100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KW00.FL0KWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    if (FL0KW00.FL0KWSWR != "Y" /* Data was not requested*/
     && FL0KW00.FL0KWFRS == "Y") /* 1st time into applsw*/
      FL0KW00.FL0KWFRS = "N"; /* 1st time into appl*/
      FL0K410(); /* Protect fields*/
      return; /* Return to previous process*/
    end
    ;
    if (converseVar.validationMsgNum != 32) /* Successful update*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  FL0KW00.FL0KWIX1 = 1; /* general index 1*/
  FL0KW00.FL0KWIX2 = 1; /* general index 2*/
  ;
  FL0K105(); /* Purge temporary storage*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FL0KM010.FBAMDNBR = FLWREC.FBAMDNBR; /* Model number*/
  FL0KM010.SY1STNBR = FLWREC.SY1STNBR; /* Style number*/
  FL0KM010.SY2CLRID = FLWREC.SY2CLRID; /* Color identification*/
  FL0KM010.XDMCD = FLWREC.XDMCD; /* Dimension code*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Load a list of European whse and country codes.*/
   /* ------------------------------------------------------------*/
  ;
  FL0K190(); /* Obtain Euro XCT, XWH*/
  ;
  ;
  ;
  ;
  FL0K110(); /* Get buy date from vfmctl01*/
  ;
  ;
  ;
  ;
  FL0K115(); /* Verify model exists*/
  ;
  if (FL0KW00.FL0KWQ == "Y") /* vfymdl01 rows were found*/
    FL0K102(); /* Check for Footwear/Equipment*/
    if (FL0KW00.FL0KW-FTWR-EQMT-FL == "N") /* If Footwear*/
      FL0KW00.FL0KWQ = "N";
    end
  end
  ;
  ;
  if (FL0KW00.FL0KWQ == "Y") /* vfymdl01 rows were found*/
    ;
    ;
    FL0K150(); /* Get Product descriptions*/
    ;
    ;
    FL0KW00.FL0KWFLF = "N"; /* Initialize dfbuy.vflqtb01 eof flag*/
    FL0KW00.FL0KWDNF = "N"; /* Initialize dfbuy.vdnord01 eof flag*/
    FL0KW00.FL0KWFQF = "N"; /* Initialize dfbuy.vfqtbs01 eof flag*/
    FL0KW00.FL0KW-END-EURO-FCST-FL = "N";
    FL0KW00.FL0KW-CBBFC-EOF-FL = "N";
    FL0KW00.FL0KW-POITM-EOF-FL = "N";
    FL0KW00.FL0KW-EO-PAHDR-EOF-FL = "N";
    FL0KW00.FL0KW-EO-PAWRK-EOF-FL = "Y";
    FL0KW00.FL0KW-EO-FYPA-EOF-FL = "Y";
    FL0KW00.FL0KWFLR = "N"; /* Initialize vflqtb01 prime read flag*/
    FL0KW00.FL0KWDNR = "N"; /* Initialize vdnord01 prime read flag*/
    FL0KW00.FL0KWFQR = "N"; /* Initialize vfqtbs01 prime read flag*/
    FL0KW00.FL0KW-CBBFC-PRIME = "N";
    FL0KW00.FL0KW-POITM-PRIME = "N";
    FL0KW00.FL0KW-EO-PAHDR-PRIME = "N";
    while (FL0KW00.FL0KWFQF == "N" /* vfqtbs01*/
     || FL0KW00.FL0KW-END-EURO-FCST-FL == "N"
     || FL0KW00.FL0KWDNF == "N" /* vdnord01*/
     || FL0KW00.FL0KWFLF == "N" /* vflqtb01*/
     || FL0KW00.FL0KW-CBBFC-EOF-FL == "N"
     || FL0KW00.FL0KW-POITM-EOF-FL == "N")
      ;
      FL0KW00.FL0KWIX3 = 1; /* index for the top half of map*/
      ;
      ;
      if (FL0KW00.FL0KWFQF == "N") /* not done processing all vfqtbs01 row*/
        FL0K130(); /* Get vfqtbs01 rows*/
      end
      ;
      if (FL0KW00.FL0KWIX3 <= 7 /* not done processing top of map*/
       && FL0KW00.FL0KW-END-EURO-FCST-FL == "N")
        FL0KS-02-EURO-FCST(); /* Get European forecast*/
      end
      ;
      if (FL0KW00.FL0KWIX3 <= 7 /* not done processing top of map*/
       && FL0KW00.FL0KW-EO-PAHDR-EOF-FL == "N")
        FL0K170(); /* Get eo & pr vpahdr01 rows*/
      end
      ;
      if (FL0KW00.FL0KWIX3 <= 7 /* not done processing top of map*/
       && FL0KW00.FL0KW-POITM-EOF-FL == "N")
        FL0K160(); /* Get vpoitm01 rows*/
      end
      ;
      if (FL0KW00.FL0KWIX3 <= 7 /* not done processing top of map*/
       && FL0KW00.FL0KW-CBBFC-EOF-FL == "N")
        FL0K180(); /* Get vcbbfc01 rows*/
      end
      ;
      ;
      if (FL0KW00.FL0KWIX3 <= 7) /* not done processing top of map*/
        FL0K140(); /* Get vdnord01 rows*/
      end
      ;
      ;
      FL0K120(); /* Get vflqtb01 rows*/
      ;
      ;
      FL0K125(); /* Add page to temp storage*/
      ;
      ;
    end
  end
  ;
  FL0KW00.FL0KWSWR = "N"; /* Reset request for data switch*/
  FL0KW00.FL0KWROS = "N"; /* trade restriction override switch*/
  ;
  ;
  FLWREC.SY1STNBR = FL0KM010.SY1STNBR; /* Style number*/
  FLWREC.SY2CLRID = FL0KM010.SY2CLRID; /* Color identification*/
  FLWREC.XDMCD = FL0KM010.XDMCD; /* Dimension code*/
  ;
  ;
end // end FL0K100

// Check Ftwr/Equip product
Function FL0K102()
   /* ---------------------------- FL0K501 ---------------------------*/
   /* ROUTINE to check if the data is Footwear or Equipment*/
   /* product - Call to IO-MOD EU0100.*/
   /* In this process EU0100 is called twice.  Once to check if the*/
   /* fetched product is Equipment product in the Product Table.  If*/
   /* not, its check for Equipment product in the Development Table.*/
   /* If also not available there it is designated a Footwear Product.*/
   /* ----------------------------------------------------------------*/
  ;
  set WEU0100 empty; /* initialize the passing record*/
  set SQLCA empty; /* initialize sqlca record*/
  ;
  WEU0100.WEU0100-EQUIP-PROD-FL = "N";
  FL0KW00.FL0KW-FTWR-EQMT-FL = "N"; /* Ftwr r Equipment Ind flg*/
  WEU0100.WEU0100-CALLING-APPL = "FL0K";
  WEU0100.SQLCAREC = SQLCA.SQLCAREC;
  ;
  WEU0100.XGPCD = "02"; /* For Footwear/Equip only.*/
  WEU0100.SY1STNBR = FLWREC.SY1STNBR;
  WEU0100.SY2CLRID = FLWREC.SY2CLRID;
  WEU0100.XDMCD = FLWREC.XDMCD;
  WEU0100.WEU0100-TASK = "S "; /* select unique*/
  WEU0100.WEU0100-CALLER-LOCATION = "FL0K102";
  ;
  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* Call EU0100 Rtn to check*/
                                  /* Ftwr or Euip*/
  SQLCA.SQLCAREC = WEU0100.SQLCAREC;
  ;
  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (WEU0100.WEU0100-RETURN-CODE != 0) /* call successful*/
    if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/
    else
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
    end
    ;
    TA1REC.TA1TYPE = "DB2"; /* type of error*/
    TA1REC.TA1LOC = "FL0K102"; /* program location*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
    TA1REC.TA1PGMNO = "EU0100"; /* called program*/
    TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
    TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error handler*/
  end
  ;
  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    if (WEU0100.WEU0100-EQUIP-PROD-FL == "N") /* Not a equipment record*/
      set WEU0100 empty;
      set SQLCA empty;
      WEU0100.WEU0100-CALLING-APPL = "FL0K";
      WEU0100.SQLCAREC = SQLCA.SQLCAREC;
      ;
      WEU0100.XGPCD = "02"; /* For Footwear/Equip only.*/
      WEU0100.SY1STNBR = FLWREC.SY1STNBR;
      WEU0100.SY2CLRID = FLWREC.SY2CLRID;
      WEU0100.XDMCD = FLWREC.XDMCD;
      ;
      WEU0100.WEU0100-TASK = "SD"; /* Check development Equip.*/
      WEU0100.WEU0100-CALLER-LOCATION = "FL0K102";
      ;
      try
        call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
      end /* select dev. equipment*/
      ;
      SQLCA.SQLCAREC = WEU0100.SQLCAREC;
      ;
      TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE;
      TAEREC.SQLCAREC = SQLCA.SQLCAREC;
      ;
      if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
        if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y") /* equipment record*/
          FL0KW00.FL0KW-FTWR-EQMT-FL = "Y"; /* Set flag to Equip*/
        end
      else
        if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
          TA1REC.TA1FUNC = "POST"; /* termination function*/
        else
          TA1REC.TA1FUNC = "RETN"; /* termination function*/
        end
        ;
        TA1REC.TA1TYPE = "DB2"; /* type of error*/
        TA1REC.TA1LOC = "FL0K102"; /* program location*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1PGMNO = "EU0100"; /* called program*/
        TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
        TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error handler*/
      end
      ;
    else
      FL0KW00.FL0KW-FTWR-EQMT-FL = "Y"; /* Set flag to Equip*/
    end
  end
  ;
end // end FL0K102

// Purge any temporary storage
Function FL0K105()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FL0KW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FL0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "105"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K105

// Get vfmctl01 row
Function FL0K110()
  ;
  set FB9REC empty;
  ;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FL0KW00.FB9BTQTY = FB9REC.FB9BTQTY * -1; /* direct ship tolerance*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0K110"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "115";
  ;
  ;
  ;
end // end FL0K110

// select vfymdl01 row
Function FL0K115()
  ;
  set FBAREC empty;
  FBAREC.FBAMDNBR = FL0KM010.FBAMDNBR; /* model number*/
  FBAREC.FBDMDTYP = "FL1"; /* model type*/
  ;
  ;
  ;
  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      FL0KW00.FL0KWQ = "N"; /* model found fl*/
      set FL0KM010.FBAMDNBR cursor, bold; /* highlight model number*/
      converseLib.validationFailed(18); /* no data found*/
      return; /* Return to previous process*/
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0KW00.FL0KWQ = "Y"; /* model found fl*/
      if (FLWREC.FB8BUYDT == 0) /* Buy date not passed*/
        FLWREC.FB8BUYDT = FBAREC.FB8BUYDT; /* Buy date used later*/
      end
      return;
    end
    ;
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "115"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT              ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
  ;
end // end FL0K115

// Get vflqtb01 rows
Function FL0K120()
   /* ------------------------------------------------------------*/
   /* Get vflqtb01 rows*/
   /* ------------------------------------------------------------*/
  ;
  set FBDREC empty;
  if (FL0KW00.FL0KWFLR == "N") /* Prime read not done*/
    FBDREC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
    FBDREC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
    FBDREC.XDMCD = FL0KM010.XDMCD; /* dimension*/
    FBDREC.FBAMDNBR = FL0KM010.FBAMDNBR; /* model number*/
    FBDREC.FBDMDTYP = "FL1"; /* model type*/
    FBDREC.FY1FCTYC = "*"; /* factory code wildcarded*/
    ;
    FL0K122(); /* declare cursor vflqtb01*/
    FL0KW00.FL0KWFLR = "Y"; /* Prime read done*/
    ;
  end
  ;
  FL0KW00.FL0KWIX1 = 1; /* initialize vflqtb01 index*/
  while (SQLCA.VAGen_SQLCODE == 0 /* good return code*/
   && FL0KW00.FL0KWIX1 <= 5)
    ;
    if (FL0KW00.FL0KWFLF == "N") /* vflqtb01 not at eof*/
      ;
      FL0K124(); /* fetch cursor vflqtb01*/
      ;
      if (FL0KW00.FL0KWFLF == "Y") /* vflqtb01 at eof*/
        FL0K126(); /* close cursor vflqtb01*/
      end
      ;
    else
      ;
      FL0K128(); /* Blank out vflqtb01 map row*/
      ;
      ;
    end
  end
  ;
  ;
end // end FL0K120

// declare cursor vflqtb01
Function FL0K122()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3460" ("S1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "122"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
  ;
end // end FL0K122

// fetch next vflqtb01
Function FL0K124()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3460" ("N1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      FL0KW00.FL0KWFLF = "Y"; /* vflqtb01 at eof*/
      SQLCA.VAGen_SQLCODE = 0;
      return; /* Return to previous process*/
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (FL0KW00.FL0KWIX1 <= 5)
        FL0KW01.FL0KWFLQ[FL0KWIX1] = FBDREC.FBDGROUP; /* save vflqtb01 row*/
        FL0KW01.FL0KWPRT[FL0KWIX1] = "N"; /* Protect map row flag*/
        FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1; /* increment index*/
        ;
        if (FBDREC.FBDBTCD == "DRS" /* Accum total qtb*/
         || (FBDREC.FBDBTCD == "STK"
         && FBDREC.PC2CUXID != FL0KW00.FL0KW-EURO-XREF))
          FL0KW00.FL0KWTB = FL0KW00.FL0KWTB + FBDREC.FBDQTB;
        end
        ;
        if (FBDREC.FBDBTCD == "EUR" /* Accum total qtb*/
         || (FBDREC.FBDBTCD == "STK"
         && FBDREC.PC2CUXID == FL0KW00.FL0KW-EURO-XREF))
          FL0KW00.FL0KW-EURO-TOTAL-BUY = FL0KW00.FL0KW-EURO-TOTAL-BUY + FBDREC.FBDQTB;
        end
      else
        return; /* save to temp storage*/
      end
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "124"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
  ;
end // end FL0K124

// Add page to temporary storage
Function FL0K125()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FL0KW01.XXXTSLEN = 878; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FL0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FL0KW01 empty; /* M001 display storage*/
    ;
    FL0KW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    FL0KW00.XXXTSPAG = 1; /* To display the first page*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "125"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K125

// close cursor vflqtb01
Function FL0K126()
  ;
  ;
  try
    call "IO3460" ("C1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "126"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
  ;
end // end FL0K126

// fetch next vflqtb01
Function FL0K128()
   /* ------------------------------------------------------------*/
   /* Blank out bottom part of map (vflqtb01 rows)*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* IF FL0KW00.FL0KWIX1 NE 1;*/
  while (FL0KW00.FL0KWIX1 <= 5)
    set FBDREC empty;
    FL0KW01.FL0KWFLQ[FL0KWIX1] = FBDREC.FBDGROUP; /* blank out row*/
    FL0KW01.FL0KWPRT[FL0KWIX1] = "Y"; /* Protect map row flag*/
    FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1; /* increment index*/
  end
  return; /* Go to save temp storage*/
   /* LSE;*/
   /* IF FL0KW00.TA5TSQIX EQ 0;   /* No temp storage written*/
                               /* and it's the first fetch - eof*/
             /* MOVE 18 TO EZEMNO       ; no data was found*/
     /* SET FL0KW01 EMPTY;        /* clear enternal storage*/
     /* PERFORM FL0K410;          /* Protect fields*/
             /* SET FL0KM010.FBAMDNBR CURSOR,MODIFIED,BRIGHT;*/
             /* SET FL0KM010.SY1STNBR MODIFIED,BRIGHT;*/
     /* EZERTN;*/
   /* END;*/
   /* ND;*/
  ;
end // end FL0K128

// Get vfqtbs01 rows
Function FL0K130()
   /* ------------------------------------------------------------*/
   /* Get vfqtbs01 rows*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FL0KW00.FL0KWFQR == "N") /* prime read on vfqtbs01 not done*/
    ;
    set FBKREC empty;
    FBKREC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
    FBKREC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
    FBKREC.XDMCD = FL0KM010.XDMCD; /* dimension*/
    FBKREC.FB8BUYDT = FLWREC.FB8BUYDT; /* buy date*/
    FBKREC.FB8RCTYP = "B"; /* buy type*/
    ;
    FL0K132(); /* declare cursor vfqtbs01*/
    ;
    FL0K134(); /* prime fetch cursor vfqtbs01*/
    ;
    if (FL0KW00.FL0KWFQF == "Y") /* eof on vfqtbs01*/
      FL0K136(); /* close cursor vfqtbs01*/
    end
    ;
    FL0KW00.FL0KWFQR = "Y"; /* prime read on vfqtbs01 done*/
    ;
  end
  ;
  while (SQLCA.VAGen_SQLCODE == 0 /* good return code*/
   && FL0KW00.FL0KWIX3 <= 7    /* map limit*/
   && FL0KW00.FL0KWFQF == "N") /* not eof on vfqtbs01*/
    ;
    FL0K134(); /* fetch cursor vfqtbs01*/
    ;
    if (FL0KW00.FL0KWFQF == "Y") /* eof on vfqtbs01*/
      FL0K136(); /* close cursor vfqtbs01*/
    end
    ;
  end
  ;
  ;
end // end FL0K130

// declare cursor vfqtbs01
Function FL0K132()
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4740" ("S1", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "132"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.FBKGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0K132

// fetch next vfqtbs01
Function FL0K134()
  ;
  ;
  try
    call "IO4740" ("N1", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (FBKREC.FBKFSAFL == "Y" /* fcst accept fl = 'y'*/
       && FBKREC.FB8RCTYP == "B") /* 'buy' record type*/
        ;
        FL0KW01.FL0KW-PRT2[FL0KWIX3] = "N"; /* Protect map row flag*/
        FL0KW01.PC2CUXID[FL0KWIX3] = " ";
        FL0KW01.OP1CUOID[FL0KWIX3] = 0;
        FL0KW01.OP1NORID[FL0KWIX3] = 0;
        FL0KW01.FY1FCTYC[FL0KWIX3] = " ";
        FL0KW01.FL0KMTYP[FL0KWIX3] = "STK";
        FL0KW01.XFRCD[FL0KWIX3] = " ";
        FL0KW01.XCTCD[FL0KWIX3] = "USA";
        FL0KW00.FBDTOQTB = FL0KW00.FBDTOQTB + FBKREC.FB8FTQTB;
        ;
           /* convert system date to mmddyy*/
        ;
        FL0KW00.FL0KWDAT = FBKREC.ZZZSDT;
        FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
        FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
        FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
        FL0KW01.ZZZSDT[FL0KWIX3] = FL0KW00.FL0KWZDT;
        ;
        ;
        FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1; /* increment map index*/
      end
      return;
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      FL0KW00.FL0KWFQF = "Y"; /* Eof flag for vfqtbs01*/
      SQLCA.VAGen_SQLCODE = 0;
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "134"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.FBKGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0K134

// close cursor vfqtbs01
Function FL0K136()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4740" ("C1", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "136"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.FBKGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0K136

// Get vdnord01 rows
Function FL0K140()
   /* ------------------------------------------------------------*/
   /* Get vdnord01 rows*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KW00.FL0KWDNR == "N") /* prime read on vdnord01 not done*/
    set FBHREC empty;
    FBHREC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
    FBHREC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
    FBHREC.XDMCD = FL0KM010.XDMCD; /* dimension*/
    FBHREC.FBHDSAFL = "Y"; /* direct ship accept flag*/
    /* MOVE '  ' TO FBHREC.XWHCD;        /* warehouse*/
    /* MOVE '1' TO FBHREC.XDSCD;         /* direct ship code*/
    FBHREC.XQACD = "01"; /* quality code*/
    FBHREC.XPGCD = "00"; /* package type code*/
    FBHREC.XUMCD = "01"; /* unit of measure*/
    FBHREC.FB7BUYST = "Y"; /* Future buy status flag*/
    FBHREC.FB8BUYDT = FLWREC.FB8BUYDT; /* buy date*/
    FL0KW00.FL0KW-CHK-DTE = 0; /* INIT CHECK DATE*/
    ;
    FL0K142(); /* declare cursor vdnord01*/
    FL0KW00.FL0KWDNR = "Y"; /* prime read on vdnord01 done*/
  end
  ;
  while (SQLCA.VAGen_SQLCODE == 0 /* good return code*/
   && FL0KW00.FL0KWIX3 <= 7) /* Map limit*/
    ;
    if (FL0KW00.FL0KWDNF == "N") /* Fetch on vdnord01 not eof*/
      ;
      FL0K144(); /* fetch cursor vdnord01*/
      ;
      if (FL0KW00.FL0KWDNF == "Y") /* vdnord01 eof*/
        FL0K146(); /* close cursor vdnord01*/
      end
      ;
    else
      ;
      FL0K148(); /* Load a blank row in temp storage*/
      ;
    end
    ;
  end
  ;
  ;
  while (FL0KW00.FL0KWIX3 <= 7) /* Map limit hasnt been reached*/
    ;
    FL0K148(); /* Load a blank row in temp storage*/
    ;
  end
end // end FL0K140

// declare cursor vdnord01
Function FL0K142()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4640" ("S7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "142"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBHREC.FBHGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0K142

// fetch next vdnord01
Function FL0K144()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4640" ("N7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 &&  /* IF FETCH WORKED OK AND*/
  FL0KW00.FL0KW-CHK-DTE == 0)      /* INITIAL TIME THRU*/
                                 /* CONVERT FB-BUY-DT INTO PO-ID-MO-RNG*/
    FL0KW00.FL0KW-TMP-DT = FBHREC.FB8BUYDT; /* BUY DATE*/
    FL0KW00.FL0KW-CHK-CC = FL0KW00.FL0KW-TMP-CC; /* SET CENTURY*/
    FL0KW00.FL0KW-CHK-YY = FL0KW00.FL0KW-TMP-YY; /* SET YEAR*/
    FL0KW00.FL0KW-CHK-DM = FL0KW00.FL0KW-TMP-MM; /* SET DLV MONTH*/
    FL0KW00.FL0KW-CHK-MM = FL0KW00.FL0KW-TMP-MM - 2; /* SET MFG MONTH*/
    ;
    if (FL0KW00.FL0KW-CHK-MM < 0)
      FL0KW00.FL0KW-CHK-MM = 11;
  /*  */
  /* ************************  Y2K OUT BEGIN **************************/
  /*  */
  /* FL0KW00.FL0KW-CHK-YY = FL0KW00.FL0KW-CHK-YY - 1;*/
  /*  */
  /* ************************  Y2K OUT END   **************************/
  /*  */
  /* ************************  Y2K IN BEGIN  **************************/
  /*  */
      FL0KW00.FL0KW-CHK-CCYY = FL0KW00.FL0KW-CHK-CCYY - 1;
  /*  */
  /* ************************  Y2K IN END    **************************/
  /*  */
    else
      if (FL0KW00.FL0KW-CHK-MM == 0)
        FL0KW00.FL0KW-CHK-MM = 12;
  /*  */
  /* ************************  Y2K OUT BEGIN **************************/
  /*  */
  /* FL0KW00.FL0KW-CHK-YY = FL0KW00.FL0KW-CHK-YY - 1;*/
  /*  */
  /* ************************  Y2K OUT END   **************************/
  /*  */
  /* ************************  Y2K IN BEGIN  **************************/
  /*  */
        FL0KW00.FL0KW-CHK-CCYY = FL0KW00.FL0KW-CHK-CCYY - 1;
  /*  */
  /* ************************  Y2K IN END    **************************/
  /*  */
      end
    end
    FL0KW00.FL0KW-CHK-DTE = FL0KW00.FL0KW-CHK-DT;
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0K147(); /* Check for pre-advise*/
      if (FL0KW00.FL0KW-PRE-ADVISE == "N")
        FL0K149(); /* Check for diverts(OLD)*/
        if (FBIREC.FBI-COUNT == 0) /* No diverts found*/
          FL0KW01.FL0KW-PRT2[FL0KWIX3] = "N";
          FL0KW01.PC2CUXID[FL0KWIX3] = FBHREC.PC2CUXID;
          FL0KW01.OP1CUOID[FL0KWIX3] = FBHREC.OP1CUOID;
          if (FBHREC.OP1CUOID > 0)
            FL0KW01.FL0KWDSH[FL0KWIX3] = ".";
            FL0KW01.OP1NORID[FL0KWIX3] = FBHREC.OP1NORID;
          else
            FL0KW01.FL0KWDSH[FL0KWIX3] = " ";
            FL0KW01.OP1NORID[FL0KWIX3] = 0;
            /* SET FL0KM010.OP1NORID(FL0KWIX3) AUTOSKIP; /* CHECK THIS OUT*/
          end
          FL0KW01.XCTCD[FL0KWIX3] = FBHREC.XCTCD;
          FL0KW01.FY1FCTYC[FL0KWIX3] = " ";
          FL0KW01.XFRCD[FL0KWIX3] = " ";
          FL0KW01.FL0KMQTY[FL0KWIX3] = 0;
          FL0KW00.FL0KWIX1 = 1; /* set index*/
          while (FL0KW00.FL0KWIX1 <= 40) /* acculate 40 sizes*/
            FL0KW01.FL0KMQTY[FL0KWIX3] = FL0KW01.FL0KMQTY[FL0KWIX3]             + FBHREC.FB7QTB[FL0KWIX1];
            FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1; /* increment map index*/
          end
          ;
          if (FBHREC.XDVCD == "02")
            ;
            set PC2REC empty;
            PC2REC.XGPCD = COMMAREA.XGPCD;
            PC2REC.PC2CUXID = FBHREC.PC2CUXID;
            ;
            FL0KS-01-IO3340-S(); /* Select DPRODC.VPRDCU01*/
            ;
            if (PC2REC.PC-PRDCU-APAO-FL == "E") /* If European record*/
              FL0KW01.FL0KMTYP[FL0KWIX3] = "EUR";
              FL0KW00.FL0KW-EUR-QTB = FL0KW00.FL0KW-EUR-QTB +               FL0KW01.FL0KMQTY[FL0KWIX3];
            else
              FL0KW01.FL0KMTYP[FL0KWIX3] = "NIL";
            end
          else
            FL0KW01.FL0KMTYP[FL0KWIX3] = "DRS";
            FL0KW00.FL0KMDNQ = FL0KW00.FL0KMDNQ +             FL0KW01.FL0KMQTY[FL0KWIX3];
          end
          /* convert system date to mmddyy*/
          ;
          FL0KW00.FL0KWDAT = FBHREC.ZZZSDT;
          FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
          FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
          FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
          FL0KW01.ZZZSDT[FL0KWIX3] = FL0KW00.FL0KWZDT;
          ;
          FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1; /* increment map index*/
        end
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      FL0KW00.FL0KWDNF = "Y"; /* Vdnord01 at eof*/
      SQLCA.VAGen_SQLCODE = 0;
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "144"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBHREC.FBHGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0K144

// close cursor vdnord01
Function FL0K146()
  ;
  ;
  try
    call "IO4640" ("C7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "146"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBHREC.FBHGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0K146

// Check for pre-advise
Function FL0K147()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  set PC2REC empty;
  PC2REC.XGPCD = COMMAREA.XGPCD;
  PC2REC.PC2CUXID = FBHREC.PC2CUXID;
  ;
  FL0KS-01-IO3340-S(); /* Select DPRODC.VPRDCU01*/
  ;
  ;
  if (FBHREC.XDVCD != "02"
   || PC2REC.PC-PRDCU-APAO-FL == "E") /* Or euro record*/
    ;
    set FBIREC empty; /* Init FB1510 iomod record*/
    ;
    FBIREC.SY1STNBR = FBHREC.SY1STNBR; /* style nbr*/
    FBIREC.SY2CLRID = FBHREC.SY2CLRID; /* colr id*/
    FBIREC.XDMCD = FBHREC.XDMCD; /* dim code*/
    FL0KW00.FL0KW-PAHDR-BUY-DT = FB9REC.FB8BUYDT;
    FBIREC.PA1BUYMO = FL0KW00.FL0KW-PA-ORD-ADJ-BUY-MO;
    FBIREC.XWHCD = FBHREC.XWHCD; /* whse cd*/
    FBIREC.FBI-COUNT = 0; /* preadvise count*/
    FBIREC.FB8BUYDT = 0; /* buy date*/
    FBIREC.FBI-PENDING-ORD-ADJ-FL = " "; /* oa flag*/
    FBIREC.FBI-CURRENT-DATE = 0; /* current date*/
    FBIREC.FBI-CURRENT-HHMMSS = 0; /* current time*/
    FBIREC.OP1PARTN = FBHREC.OP1PARTN; /* ord partition char*/
    FBIREC.OP1CUOID = FBHREC.OP1CUOID; /* cust ord id*/
    FBIREC.OP1NORID = FBHREC.OP1NORID; /* nike ord id*/
    ;
    ;
    ;
    try
      call "FB1510" ("SE", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
    end /* Select count*/
    ;
    if (sysVar.errorCode == "00000000" /* Successful call*/
     && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
      if (((FBHREC.XDSCD == "1" && FBHREC.XWHCD == " ") || 
      (FBHREC.XDSCD == "2" && FBHREC.XWHCD != " "))
       && FBIREC.FBI-COUNT > 0) /* there are preadvises*/
        FL0KW00.FL0KW-PRE-ADVISE = "Y";
      else
        FL0KW00.FL0KW-PRE-ADVISE = "N";
      end
      return;
    end
    ;
    if (sysVar.errorCode == "00000000" /* Successful call*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
    end
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FL0K147"; /* Process name*/
    TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
    TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
    TA1REC.TA1TBLVU = "        "; /* Table view name*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack;
    ;
  else
    FL0KW00.FL0KW-PRE-ADVISE = "N";
  end
end // end FL0K147

// load a blank fcst row
Function FL0K148()
   /* ------------------------------------------------------------*/
   /* Load a blank forecast row into temp storage.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FL0KW01.FL0KW-PRT2[FL0KWIX3] = "Y"; /* Protect map row flag*/
  FL0KW01.PC2CUXID[FL0KWIX3] = " ";
  FL0KW01.OP1CUOID[FL0KWIX3] = 0;
  FL0KW01.FL0KWDSH[FL0KWIX3] = " ";
  FL0KW01.OP1NORID[FL0KWIX3] = 0;
  FL0KW01.XCTCD[FL0KWIX3] = " ";
  FL0KW01.FY1FCTYC[FL0KWIX3] = " ";
  FL0KW01.XFRCD[FL0KWIX3] = " ";
  FL0KW01.FL0KMQTY[FL0KWIX3] = 0;
  FL0KW01.FL0KMTYP[FL0KWIX3] = " ";
  FL0KW01.ZZZSDT[FL0KWIX3] = 0;
  ;
  ;
  FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1; /* increment map index*/
  ;
  return; /* Return to previous process*/
  ;
end // end FL0K148

// Check for diverts
Function FL0K149()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  set FBIREC empty; /* Init FB1510 iomod record*/
  ;
  FBIREC.SY1STNBR = FBHREC.SY1STNBR; /* style nbr*/
  FBIREC.SY2CLRID = FBHREC.SY2CLRID; /* colr id*/
  FBIREC.XDMCD = FBHREC.XDMCD; /* dim code*/
  FL0KW00.FL0KW-PAHDR-BUY-DT = FB9REC.FB8BUYDT;
  FBIREC.PA1BUYMO = FL0KW00.FL0KW-PA-ORD-ADJ-BUY-MO;
  FBIREC.XWHCD = FBHREC.XWHCD; /* whse cd*/
  FBIREC.OP1PARTN = FBHREC.OP1PARTN; /* ord partition char*/
  FBIREC.OP1CUOID = FBHREC.OP1CUOID; /* cust ord id*/
  FBIREC.OP1NORID = FBHREC.OP1NORID; /* nike ord id*/
  FBIREC.PRDCUID = FBHREC.PC2CUXID; /* PRD CD*/
  FBIREC.PKGTYPCD = FBHREC.XPGCD; /* PKG CD*/
  FBIREC.XQAQALCD = FBHREC.XQACD; /* QUAL CD*/
  FBIREC.XUMUOMCD = FBHREC.XUMCD; /* UOM CD*/
  FBIREC.FBI-DLVRY-DT = FL0KW00.FL0KW-CHK-DTE; /* BUY DATE*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* as well as count of DPRODC.VPOITM01,*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  FL0KW00.FL0KW-OA-COUNT = 0; /* initialize OA counter*/
  FL0KS100(); /* determine OA count*/
  ;
  FL0KW00.FL0KW-PO-COUNT = 0; /* initialize PO counter*/
  FL0KS105(); /* determine PO count*/
  ;
  if (FL0KW00.FL0KW-OA-COUNT > 0 && 
  FL0KW00.FL0KW-PO-COUNT > 0)
    FBIREC.FBI-COUNT = 0;
  else
    if (FL0KW00.FL0KW-OA-COUNT > 0 && 
    FL0KW00.FL0KW-PO-COUNT == 0)
      FBIREC.FBI-COUNT = 1;
    else
      if (FL0KW00.FL0KW-OA-COUNT == 0 && 
      FL0KW00.FL0KW-PO-COUNT > 0)
        FBIREC.FBI-COUNT = 1;
      else
        if (FL0KW00.FL0KW-OA-COUNT == 0 && 
        FL0KW00.FL0KW-PO-COUNT == 0)
          FBIREC.FBI-COUNT = 0;
        end
      end
    end
  end
  ;
  ;
end // end FL0K149

// get style & color descriptions
Function FL0K150()
  ;
  ;
  ;
  FL0K155(); /* Get style short name*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  ;
  PG2REC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
  PG2REC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
  if (FL0KM010.SY2CLRID == "   ") /* if color blank*/
    FL0KM010.SY2CLRID = "00 "; /* set default*/
  end
  if (FL0KM010.XDMCD == "  ") /* if dimension blank*/
    FL0KM010.XDMCD = "00"; /* set default*/
  end
  ;
  PG2REC.SY2CLRID = FL0KM010.SY2CLRID; /* color code*/
  PG2REC.XDMCD = FL0KM010.XDMCD; /* dimension*/
  ;
  XSPG202(); /* Get style & color descriptions*/
  ;
   /* ------------------------------------------------------------*/
   /* if product found, get style name and color abbreviation,*/
   /* else, try style development table.*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* successful fetch*/
    ;
    FL0KM010.SY2CLRAB = PG2REC.SY2CLRAB; /* color abbreviation*/
    ;
  else
    ;
    set PG4REC empty;
    ;
    PG4REC.PG4STNBR = FL0KM010.SY1STNBR; /* style number*/
    if (FL0KM010.SY1STNBR < "1") /* style number is not an in line product*/
      FL0KM010.SY2CLRID = "   "; /* set vsydvl default*/
      FL0KM010.XDMCD = "  "; /* set vsydvl default*/
    end
    ;
    FL0K151(); /* Get style description*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful fetch*/
      ;
      FL0KM010.SY2CLRAB = "             "; /* color abbreviation*/
      ;
    else
      FL0KM010.SY2CLRAB = "*************"; /* color abbreviation*/
    end
  end
end // end FL0K150

// Select row in DPRODG.VSYDVL01
Function FL0K151()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty;
  PG4REC.PG4STNBR = FL0KM010.SY1STNBR; /* style number*/
  ;
   /* ------------------------------------------------------------*/
   /* get the  row to display from the product table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* get row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "151"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4GROUP; /* Table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
end // end FL0K151

// Get style short name
Function FL0K155()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPRODG.VSYPRD01*/
   /* ---------------------------------------------------------*/
  ;
  ;
  set PGAREC empty;
  ;
  PGAREC.XGPCD = COMMAREA.XGPCD;
  ;
  PGAREC.SY1STNBR = FL0KM010.SY1STNBR;
  ;
  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FL0KM010.SY1SSTNM = PGAREC.PGASSTNM;
    return;
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/
      ;
      FL0KM010.SY1SSTNM = "************";
      return;
      ;
    else
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "GET SHORT STYLE NAME            ";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        ;
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
        ;
      else
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end FL0K155

// Get vpoitm01 rows
Function FL0K160()
   /* ------------------------------------------------------------*/
   /* Get vpoitm01 rows*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KW00.FL0KW-POITM-PRIME == "N")
    set PC6REC empty;
    PC6REC.XGPCD = COMMAREA.XGPCD;
    PC6REC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
    FL0KW00.FL0KW-PO-ID-MO-RNG = FB9REC.FB8BUYDT;
    FL0KW00.FL0KW-PO-DELV-MM = FL0KW00.FL0KW-PO-PROD-MM;
    FL0KW00.FL0KW-PO-PROD-MM = FL0KW00.FL0KW-PO-PROD-MM - 2;
    if (FL0KW00.FL0KW-PO-PROD-MM < 1)
      FL0KW00.FL0KW-PO-PROD-MM = FL0KW00.FL0KW-PO-PROD-MM + 12;
  /*  */
  /* ************************  Y2K OUT BEGIN **************************/
  /*  */
  /* FL0KW00.FL0KW-PO-YY = FL0KW00.FL0KW-PO-YY - 1;*/
  /*  */
  /* ************************  Y2K OUT END   **************************/
  /*  */
  /* ************************  Y2K IN BEGIN  **************************/
  /*  */
      FL0KW00.FL0KW-PO-CCYY = FL0KW00.FL0KW-PO-CCYY - 1;
  /*  */
  /* ************************  Y2K IN END    **************************/
  /*  */
    end
    PC6REC.PC3POIDT = FL0KW00.FL0KW-PO-ID-MO-RNG;
    PC6REC.PCFSECD = "*"; /* Season-code*/
    PC6REC.FY1FCTYC = "*"; /* factory*/
    PC6REC.PC4ORTYP = "*"; /* ord typ*/
    PC6REC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
    PC6REC.XDMCD = FL0KM010.XDMCD; /* dimension*/
    PC6REC.XQACD = "01"; /* quality code*/
    PC6REC.XOWCD = "*"; /* Wildcard owner group*/
    PC6REC.XPGCD = "*"; /* Wildcard package*/
    PC6REC.XUMCD = "*"; /* Wildcard unit of measure*/
    PC6REC.XWHCD = "* "; /* warehouse*/
    PC6REC.PC2INSEG = "*"; /* Wildcard spec difference*/
    PC6REC.PC2CUXID = "*"; /* Customer xref ID*/
    PC6REC.PC6ETSDT = -1;
    PC6REC.YMTCD = "*"; /* Mode code*/
    PC6REC.PC6PLAN = -1;
    PC6REC.XDSCD = "*"; /* Direct ship code*/
    PC6REC.YSMXDV = "*";
    PC6REC.PC6STAT = "*"; /* Item status code*/
    FL0K162(); /* declare cursor vpoitm01*/
    FL0KW00.FL0KW-POITM-PRIME = "Y"; /* prime read on vpoitm01 done*/
  end
  ;
  while (SQLCA.VAGen_SQLCODE == 0 /* good return code*/
   && FL0KW00.FL0KWIX3 <= 7    /* Map limit*/
   && FL0KW00.FL0KW-POITM-EOF-FL == "N")
    ;
    FL0K164(); /* fetch cursor vpoitm01*/
    ;
  end
  if (FL0KW00.FL0KW-POITM-EOF-FL == "Y")
    FL0K166(); /* close cursor vpoitm01*/
  end
  ;
end // end FL0K160

// declare cursor VPOITM01
Function FL0K162()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set PCYREC empty;
  PCYREC.PCYFUNC = "S3";
  PCYREC.PCYFRDT = FL0KW00.FL0KW-PO-ID-MO-RNG;
  PCYREC.PCYTODT = FL0KW00.FL0KW-PO-ID-MO-RNG;
  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-POITM-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K162

// fetch next VPOITM01
Function FL0K164()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set PCYREC empty;
  PCYREC.PCYFUNC = "N3";
  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      ;
      FL0K165(); /* ADD EO TO FL0KW01 TABLE*/
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      FL0KW00.FL0KW-POITM-EOF-FL = "Y";
      SQLCA.VAGen_SQLCODE = 0;
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "164"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  FL0KW00.FL0KW-POITM-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
end // end FL0K164

// fetch next VPOITM01
Function FL0K165()
   /* SEARCH FOR EXISTING EO IN WORKING STORAGE*/
   /* IF FOUND, ADD TO IT ELSE MOVE DATA TO THE NEW BUCKET*/
   /* INDEXED BY FL0KWIX3.*/
  ;
  FL0KW00.FL0KWIX4 = 1;
  while (FL0KW00.FL0KWIX4 <= FL0KW00.FL0KWIX3)
    if (PC6REC.FY1FCTYC == FL0KW01.FY1FCTYC[FL0KWIX4]
     && "EO" == FL0KW01.FL0KMTYP[FL0KWIX4])
      FL0KW01.FL0KW-PRT2[FL0KWIX4] = "N";
      FL0KW01.PC2CUXID[FL0KWIX4] = PC6REC.PC2CUXID;
      FL0KW01.OP1CUOID[FL0KWIX4] = PC6REC.OP1CUOID;
      FL0KW01.FL0KWDSH[FL0KWIX4] = " ";
      FL0KW01.OP1NORID[FL0KWIX4] = 0;
          /* SET FL0KM010.OP1NORID(FL0KWIX4) AUTOSKIP; /* CHECK THIS OUT*/
      FL0KW01.XCTCD[FL0KWIX4] = "USA";
      FL0KW01.FY1FCTYC[FL0KWIX4] = PC6REC.FY1FCTYC;
      FL0KW01.XFRCD[FL0KWIX4] = PC6REC.XFRCD;
      FL0KW01.FL0KMQTY[FL0KWIX4] = PC6REC.PC6TORDE + FL0KW01.FL0KMQTY[FL0KWIX4];
      FL0KW01.FL0KMTYP[FL0KWIX4] = "EO ";
         /* convert system date to mmddyy*/
      ;
      FL0KW00.FL0KWDAT = PC6REC.ZZZSDT;
      FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
      FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
      FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
      FL0KW01.ZZZSDT[FL0KWIX4] = FL0KW00.FL0KWZDT;
      return;
    end
    FL0KW00.FL0KWIX4 = FL0KW00.FL0KWIX4 + 1;
                                   /* increment map index*/
  end
  ;
  ;
  ;
  ;
  ;
  ;
  ;
   /* NOT FOUND, MOVE DATA TO THE NEW BUCKET*/
   /* INDEXED BY FL0KWIX3.*/
  ;
  FL0KW01.FL0KW-PRT2[FL0KWIX3] = "N";
  FL0KW01.PC2CUXID[FL0KWIX3] = PC6REC.PC2CUXID;
  FL0KW01.OP1CUOID[FL0KWIX3] = PC6REC.OP1CUOID;
  FL0KW01.FL0KWDSH[FL0KWIX3] = " ";
  FL0KW01.OP1NORID[FL0KWIX3] = 0;
          /* SET FL0KM010.OP1NORID(FL0KWIX3) AUTOSKIP; /* CHECK THIS OUT*/
  FL0KW01.XCTCD[FL0KWIX3] = "USA";
  FL0KW01.FY1FCTYC[FL0KWIX3] = PC6REC.FY1FCTYC;
  FL0KW01.XFRCD[FL0KWIX3] = PC6REC.XFRCD;
  FL0KW01.FL0KMQTY[FL0KWIX3] = PC6REC.PC6TORDE;
  FL0KW01.FL0KMTYP[FL0KWIX3] = "EO ";
         /* convert system date to mmddyy*/
  ;
  FL0KW00.FL0KWDAT = PC6REC.ZZZSDT;
  FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
  FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
  FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
  FL0KW01.ZZZSDT[FL0KWIX3] = FL0KW00.FL0KWZDT;
  ;
  FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1;
                                   /* increment map index*/
  ;
end // end FL0K165

// close cursor VPOITM01
Function FL0K166()
  ;
  set PCYREC empty;
  PCYREC.PCYFUNC = "C3";
  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "166"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-POITM-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K166

// Get eo vpahdr01 rows
Function FL0K170()
   /* ------------------------------------------------------------*/
   /* Get veo-pahdr01 rows*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KW00.FL0KW-EO-PAHDR-PRIME == "N")
    set PA1REC empty;
    PA1REC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
    PA1REC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
    PA1REC.XDMCD = FL0KM010.XDMCD; /* dimension*/
    FL0KW00.FL0KW-PAHDR-BUY-DT = FB9REC.FB8BUYDT;
    PA1REC.PA1BUYMO = FL0KW00.FL0KW-PA-ORD-ADJ-BUY-MO;
    PA1REC.YETCD = "*";
    PA1REC.YESCD = "*";
    FL0K172(); /* declare cursor  eo-pahdr01*/
    FL0KW00.FL0KW-EO-PAHDR-PRIME = "Y"; /**/
  end
  ;
  while (FL0KW00.FL0KWIX3 <= 7 /* Map limit*/
   && FL0KW00.FL0KW-EO-PAHDR-EOF-FL == "N")
    ;
    if (FL0KW00.FL0KW-EO-PAWRK-EOF-FL == "Y"
     && FL0KW00.FL0KW-EO-FYPA-EOF-FL == "Y")
      FL0K174(); /* fetch cursor  eo-pahdr01*/
    end
    if (FL0KW00.FL0KW-EO-PAHDR-EOF-FL == "N"
     && PA1REC.YESCD < "21")
      if (PA1REC.YETCD == "EO"
       || PA1REC.YETCD == "PR")
        if (FL0KW00.FL0KW-EO-PAWRK-EOF-FL == "Y"
         && FL0KW00.FL0KW-EO-FYPA-EOF-FL == "Y")
          FL0KW00.FL0KW-EO-PAWRK-EOF-FL = "N";
          FL0K175(); /* Declare cursor for vpawrk*/
          FL0K176(); /* Fetch cursor for vpawrk*/
          if (FL0KW00.FL0KW-EO-PAWRK-EOF-FL == "N")
   /* move; ;*/
  /* GET PAWRK*/
            FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 - 1; /* increment map index*/
            if (FL0KW00.FL0KWIX3 > 0
             && PACREC.PC2CUXID == FL0KW01.PC2CUXID[FL0KWIX3]
             && PACREC.OP1CUOID == FL0KW01.OP1CUOID[FL0KWIX3]
             && PACREC.OP1NORID == FL0KW01.OP1NORID[FL0KWIX3]
             && PACREC.FY1FCTYC == FL0KW01.FY1FCTYC[FL0KWIX3]
             && PACREC.XFRCD == FL0KW01.XFRCD[FL0KWIX3]
             && PA1REC.YETCD == FL0KW01.FL0KMTYP[FL0KWIX3])
              FL0KW00.FL0KWIX1 = 1; /* set index*/
              while (FL0KW00.FL0KWIX1 <= 40) /* acculate 40 sizes*/
                FL0KW01.FL0KMQTY[FL0KWIX3] = FL0KW01.FL0KMQTY[FL0KWIX3]                 + PACREC.PACADJQT[FL0KWIX1];
                FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1;
                                   /* increment map index*/
              end
              FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1;
                                   /* increment map index*/
            else
              FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1;
                                   /* increment map index*/
              FL0KW01.FL0KW-PRT2[FL0KWIX3] = "N";
              FL0KW01.PC2CUXID[FL0KWIX3] = PACREC.PC2CUXID;
              FL0KW01.OP1CUOID[FL0KWIX3] = PACREC.OP1CUOID;
              if (PACREC.OP1CUOID > 0)
                FL0KW01.FL0KWDSH[FL0KWIX3] = ".";
                FL0KW01.OP1NORID[FL0KWIX3] = PACREC.OP1NORID;
              else
                FL0KW01.FL0KWDSH[FL0KWIX3] = " ";
                FL0KW01.OP1NORID[FL0KWIX3] = 0;
                                  /* SET FL0KM010.OP1NORID(FL0KWIX3)*/
                                   /* AUTOSKIP; /* CHECK THIS OUT*/
              end
              set PC2REC empty;
              PC2REC.XGPCD = COMMAREA.XGPCD;
              PC2REC.PC2CUXID = PACREC.PC2CUXID;
              FL0KS-01-IO3340-S(); /* Select Dprodc.vprdcu01*/
              FL0KW01.XCTCD[FL0KWIX3] = PC2REC.XCTCD;
              /* MOVE 'USA' TO FL0KW01.XCTCD(FL0KWIX3);*/
              FL0KW01.FY1FCTYC[FL0KWIX3] = PACREC.FY1FCTYC;
              FL0KW01.XFRCD[FL0KWIX3] = PACREC.XFRCD;
                                  /* %get fl0k144VE PACREC.PA1TORDE TO*/
                                   /* FL0KW01.FL0KMQTY(FL0KWIX3);*/
              FL0KW01.FL0KMQTY[FL0KWIX3] = 0;
              FL0KW00.FL0KWIX1 = 1; /* set index*/
              while (FL0KW00.FL0KWIX1 <= 40) /* acculate 40 sizes*/
                FL0KW01.FL0KMQTY[FL0KWIX3] = FL0KW01.FL0KMQTY[FL0KWIX3]                 + PACREC.PACADJQT[FL0KWIX1];
                FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1;
                                   /* increment map index*/
              end
              FL0KW01.FL0KMTYP[FL0KWIX3] = PA1REC.YETCD;
          /* convert system date to mmddyy*/
              ;
              FL0KW00.FL0KWDAT = PACREC.ZZZSDT;
              FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
              FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
              FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
              FL0KW01.ZZZSDT[FL0KWIX3] = FL0KW00.FL0KWZDT;
              ;
              FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1;
                                   /* increment map index*/
            end
          else
            FL0K177(); /* close cursor for vpawrk*/
            FL0KW00.FL0KW-EO-FYPA-EOF-FL = "N";
            FL0K178(); /* Declare cursor for vfypa*/
            FL0K179(); /* Fetch cursor for vfypa*/
            if (FL0KW00.FL0KW-EO-FYPA-EOF-FL == "N")
   /* move;   ;*/
  /* GET FYPA*/
              FL0KW01.FL0KW-PRT2[FL0KWIX3] = "N";
              FL0KW01.PC2CUXID[FL0KWIX3] = "     ";
              FL0KW01.OP1CUOID[FL0KWIX3] = 0;
              FL0KW01.FL0KWDSH[FL0KWIX3] = " ";
              FL0KW01.OP1NORID[FL0KWIX3] = 0;
                                  /* SET FL0KM010.OP1NORID(FL0KWIX3)*/
                                   /* AUTOSKIP; /* CHECK THIS OUT*/
              set PC2REC empty;
              PC2REC.XGPCD = COMMAREA.XGPCD;
              PC2REC.PC2CUXID = PACREC.PC2CUXID;
              FL0KS-01-IO3340-S(); /* Select Dprodc.vprdcu01*/
              FL0KW01.XCTCD[FL0KWIX3] = PC2REC.XCTCD;
              /* MOVE 'USA' TO FL0KW01.XCTCD(FL0KWIX3);*/
              FL0KW01.FY1FCTYC[FL0KWIX3] = PA4REC.FY1FCTYC;
              if (PA1REC.YETCD == "EO")
                FL0KW01.XFRCD[FL0KWIX3] = "13";
              end
              if (PA1REC.YETCD == "PR")
                FL0KW01.XFRCD[FL0KWIX3] = "09";
              end
              if (PA1REC.YETCD != "PR"
               && PA1REC.YETCD != "EO")
                FL0KW01.XFRCD[FL0KWIX3] = "  ";
              end
              FL0KW01.FL0KMQTY[FL0KWIX3] = PA4REC.PA4FCTQT;
              FL0KW01.FL0KMTYP[FL0KWIX3] = PA1REC.YETCD;
          /* convert system date to mmddyy*/
              ;
              FL0KW00.FL0KWDAT = PA4REC.ZZZSDT;
              FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
              FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
              FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
              FL0KW01.ZZZSDT[FL0KWIX3] = FL0KW00.FL0KWZDT;
              ;
              FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1;
                                   /* increment map index*/
            else
              FL0K17A(); /* close cursor for vfypa*/
            end
          end
        end
        if (FL0KW00.FL0KW-EO-PAWRK-EOF-FL == "Y"
         && FL0KW00.FL0KW-EO-FYPA-EOF-FL == "N")
          FL0K179(); /* Fetch cursor for vfypa*/
          if (FL0KW00.FL0KW-EO-FYPA-EOF-FL == "N")
   /* move;   ;*/
  /* GET FYPA*/
            FL0KW01.FL0KW-PRT2[FL0KWIX3] = "N";
            FL0KW01.PC2CUXID[FL0KWIX3] = "     ";
            FL0KW01.OP1CUOID[FL0KWIX3] = 0;
            FL0KW01.FL0KWDSH[FL0KWIX3] = " ";
            FL0KW01.OP1NORID[FL0KWIX3] = 0;
                                  /* SET FL0KM010.OP1NORID(FL0KWIX3)*/
                                   /* AUTOSKIP; /* CHECK THIS OUT*/
            set PC2REC empty;
            PC2REC.XGPCD = COMMAREA.XGPCD;
            PC2REC.PC2CUXID = PACREC.PC2CUXID;
            FL0KS-01-IO3340-S(); /* Select Dprodc.vprdcu01*/
            FL0KW01.XCTCD[FL0KWIX3] = PC2REC.XCTCD;
            /* MOVE 'USA' TO FL0KW01.XCTCD(FL0KWIX3);*/
            FL0KW01.FY1FCTYC[FL0KWIX3] = PA4REC.FY1FCTYC;
            if (PA1REC.YETCD == "EO")
              FL0KW01.XFRCD[FL0KWIX3] = "13";
            end
            if (PA1REC.YETCD == "PR")
              FL0KW01.XFRCD[FL0KWIX3] = "09";
            end
            if (PA1REC.YETCD != "PR"
             && PA1REC.YETCD != "EO")
              FL0KW01.XFRCD[FL0KWIX3] = "  ";
            end
            FL0KW01.FL0KMQTY[FL0KWIX3] = PA4REC.PA4FCTQT;
            FL0KW01.FL0KMTYP[FL0KWIX3] = PA1REC.YETCD;
          /* convert system date to mmddyy*/
            ;
            FL0KW00.FL0KWDAT = PA4REC.ZZZSDT;
            FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
            FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
            FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
            FL0KW01.ZZZSDT[FL0KWIX3] = FL0KW00.FL0KWZDT;
            ;
            FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1; /* increment map index*/
          else
            FL0K17A(); /* close cursor for vfypa*/
          end
        end
        if (FL0KW00.FL0KW-EO-PAWRK-EOF-FL == "N"
         && FL0KW00.FL0KW-EO-FYPA-EOF-FL == "Y")
          FL0K176(); /* Fetch cursor for vpawrk*/
          if (FL0KW00.FL0KW-EO-PAWRK-EOF-FL == "N")
   /* move; ;*/
  /* GET PAWRK*/
            FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 - 1; /* increment map index*/
            if (FL0KW00.FL0KWIX3 > 0
             && PACREC.PC2CUXID == FL0KW01.PC2CUXID[FL0KWIX3]
             && PACREC.OP1CUOID == FL0KW01.OP1CUOID[FL0KWIX3]
             && PACREC.OP1NORID == FL0KW01.OP1NORID[FL0KWIX3]
             && PACREC.FY1FCTYC == FL0KW01.FY1FCTYC[FL0KWIX3]
             && PACREC.XFRCD == FL0KW01.XFRCD[FL0KWIX3]
             && PA1REC.YETCD == FL0KW01.FL0KMTYP[FL0KWIX3])
              FL0KW00.FL0KWIX1 = 1; /* set index*/
              while (FL0KW00.FL0KWIX1 <= 40) /* acculate 40 sizes*/
                FL0KW01.FL0KMQTY[FL0KWIX3] = FL0KW01.FL0KMQTY[FL0KWIX3]                 + PACREC.PACADJQT[FL0KWIX1];
                FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1;
                                   /* increment map index*/
              end
              FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1;
                                   /* increment map index*/
            else
              FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1;
                                   /* increment map index*/
              FL0KW01.FL0KW-PRT2[FL0KWIX3] = "N";
              FL0KW01.PC2CUXID[FL0KWIX3] = PACREC.PC2CUXID;
              FL0KW01.OP1CUOID[FL0KWIX3] = PACREC.OP1CUOID;
              if (PACREC.OP1CUOID > 0)
                FL0KW01.FL0KWDSH[FL0KWIX3] = ".";
                FL0KW01.OP1NORID[FL0KWIX3] = PACREC.OP1NORID;
              else
                FL0KW01.FL0KWDSH[FL0KWIX3] = " ";
                FL0KW01.OP1NORID[FL0KWIX3] = 0;
                                  /* SET FL0KM010.OP1NORID(FL0KWIX3)*/
                                   /* AUTOSKIP; /* CHECK THIS OUT*/
              end
              set PC2REC empty;
              PC2REC.XGPCD = COMMAREA.XGPCD;
              PC2REC.PC2CUXID = PACREC.PC2CUXID;
              FL0KS-01-IO3340-S(); /* Select Dprodc.vprdcu01*/
              FL0KW01.XCTCD[FL0KWIX3] = PC2REC.XCTCD;
              /* MOVE 'USA' TO FL0KW01.XCTCD(FL0KWIX3);*/
              FL0KW01.FY1FCTYC[FL0KWIX3] = PACREC.FY1FCTYC;
              FL0KW01.XFRCD[FL0KWIX3] = PACREC.XFRCD;
                                  /* %get fl0k144VE PACREC.PA1TORDE TO*/
                                   /* FL0KW01.FL0KMQTY(FL0KWIX3);*/
              FL0KW01.FL0KMQTY[FL0KWIX3] = 0;
              FL0KW00.FL0KWIX1 = 1; /* set index*/
              while (FL0KW00.FL0KWIX1 <= 40) /* acculate 40 sizes*/
                FL0KW01.FL0KMQTY[FL0KWIX3] = FL0KW01.FL0KMQTY[FL0KWIX3]                 + PACREC.PACADJQT[FL0KWIX1];
                FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1;
                                   /* increment map index*/
              end
              FL0KW01.FL0KMTYP[FL0KWIX3] = PA1REC.YETCD;
          /* convert system date to mmddyy*/
              ;
              FL0KW00.FL0KWDAT = PACREC.ZZZSDT;
              FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
              FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
              FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
              FL0KW01.ZZZSDT[FL0KWIX3] = FL0KW00.FL0KWZDT;
              ;
              FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1;
                                   /* increment map index*/
            end
          else
            FL0K177(); /* close cursor for vpawrk*/
          end
        end
      end
    end
  end
  if (FL0KW00.FL0KW-EO-PAHDR-EOF-FL == "Y")
    FL0K17E(); /* close cursor  eo-pahdr01*/
  end
  ;
end // end FL0K170

// declare cursor VPAHDR01
Function FL0K172()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4830" ("S2", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "172"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-EO-PAHDR-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K172

// fetch next VPAHDR01
Function FL0K174()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4830" ("N2", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      FL0KW00.FL0KW-EO-PAHDR-EOF-FL = "Y";
      SQLCA.VAGen_SQLCODE = 0;
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "174"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-EO-PAHDR-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K174

// Declare cursor vpawrk01
Function FL0K175()
  set PACREC empty;
  PACREC.PA1OANBR = PA1REC.PA1OANBR; /* pa-ord-adj-nbr*/
  PACREC.PACSEVAL = "*"; /* pa-user-proc-ind*/
  PACREC.PACORDTY = "9"; /* pa-ord-typ-ind*/
  PACREC.ZZZSDT = -1; /* setup date*/
  PACREC.ZZZSTM = -1; /* setup time*/
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4950" ("S2", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "175"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/
  TA1REC.TA1TBLKE = PACREC.PACGRP01; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0K175

// fetch next VPAWRK01
Function FL0K176()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4950" ("N2", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      FL0KW00.FL0KW-EO-PAWRK-EOF-FL = "Y";
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "176"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/
  TA1REC.TA1TBLKE = PACREC.PACGRP01; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-EO-PAWRK-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K176

// close cursor VPAWRK01
Function FL0K177()
  ;
  try
    call "IO4950" ("C2", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "177"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/
  TA1REC.TA1TBLKE = PACREC.PACGRP01; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-EO-PAWRK-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K177

// Declare cursor vFYPA001
Function FL0K178()
  set PA4REC empty;
  PA4REC.PA1OANBR = PA1REC.PA1OANBR; /* pa-ord-adj-nbr*/
  PA4REC.YESCD = "*"; /* YES-ADJ-STAT-CD*/
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4810" ("S1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "178"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-EO-FYPA-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K178

// fetch next VFYPA001
Function FL0K179()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4810" ("N1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      FL0KW00.FL0KW-EO-FYPA-EOF-FL = "Y";
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "179"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-EO-FYPA-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K179

// close cursor VFYPA001
Function FL0K17A()
  ;
  try
    call "IO4810" ("C1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "17A"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-EO-FYPA-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K17A

// close cursor VPAHDR01
Function FL0K17E()
  ;
  try
    call "IO4830" ("C2", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "17E"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KW00.FL0KW-EO-PAHDR-EOF-FL = "Y";
  FL0KW00.FL0KWSWR = "N"; /* request for data sw*/
  FL0KW00.FL0KWSWF = "N"; /* map must be formatted*/
  ;
end // end FL0K17E

// Get vcbbfc01 rows
Function FL0K180()
  ;
  ;
  if (FL0KW00.FL0KW-CBBFC-PRIME == "N")
    set VCBBFC01 empty;
    VCBBFC01.SY-STY-NBR = FL0KM010.SY1STNBR; /* style number*/
    VCBBFC01.SY-COLR-CD-ID = FL0KM010.SY2CLRID; /* color*/
    VCBBFC01.XDM-DIM-CD = FL0KM010.XDMCD; /* dimension*/
    VCBBFC01.FB-BUY-DT = FLWREC.FB8BUYDT;
    FL0K182(); /* declare cursor vcbbfc01*/
    FL0KW00.FL0KW-CBBFC-PRIME = "Y"; /* prime read on cbbfc done*/
  end
  ;
  while (FL0KW00.FL0KWIX3 <= 7 /* map limit*/
   && FL0KW00.FL0KW-CBBFC-EOF-FL == "N") /* not eof on cbbfc*/
    ;
    FL0K184(); /* fetch vcbbfc01 row*/
    ;
    if (FL0KW00.FL0KW-CBBFC-EOF-FL == "Y") /* eof on vcbbfc01*/
      FL0K188(); /* close cursor vcbbfc01*/
    end
    ;
  end
  ;
  ;
end // end FL0K180

// Declare cursor vcbbfc01
Function FL0K182()
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6770" ("S1", SQLCA, VCBBFC01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "182"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCBBFC01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCBBFC01.VCBBFC01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end FL0K182

// Fetch next vcbbfc01 row
Function FL0K184()
  ;
  ;
  try
    call "IO6770" ("N1", SQLCA, VCBBFC01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0K185(); /* obtain dest country*/
      if (PC2REC.PC-PRDCU-APAO-FL == "E") /* European destination*/
         /* Next sentence - do not process EURO records*/
      else
        FL0KW01.FL0KW-PRT2[FL0KWIX3] = "N"; /* Protect map row fl*/
        FL0KW01.PC2CUXID[FL0KWIX3] = VCBBFC01.PC-PRDCU-ID;
        FL0KW01.OP1CUOID[FL0KWIX3] = 0;
        FL0KW01.OP1NORID[FL0KWIX3] = 0;
        FL0KW01.FY1FCTYC[FL0KWIX3] = " ";
        FL0KW01.FL0KMTYP[FL0KWIX3] = "BLK";
        FL0KW01.XFRCD[FL0KWIX3] = " ";
        FL0KW01.FL0KMQTY[FL0KWIX3] = 0;
        FL0KW01.XCTCD[FL0KWIX3] = PC2REC.XCTCD;
        FL0K186(); /* sum nil orders*/
        VCBBFC01.FF-SBMT-QTB = VCBBFC01.FF-SBMT-QTB         - FL0KW00.FL0KW-SUM-NIL-ORDER-QTY;
        FL0KW01.FL0KMQTY[FL0KWIX3] = FL0KW01.FL0KMQTY[FL0KWIX3]         + VCBBFC01.FF-SBMT-QTB;
        ;
             /* convert system date to mmddyy*/
        ;
        FL0KW00.FL0KWDAT = VCBBFC01.ZZ-SDT;
        FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
        FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
        FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
        FL0KW01.ZZZSDT[FL0KWIX3] = FL0KW00.FL0KWZDT;
        ;
        ;
        FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1; /* increment map index*/
      end
      ;
      return;
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
        FL0KW00.FL0KW-CBBFC-EOF-FL = "Y"; /* cbbfc eof flag*/
        SQLCA.VAGen_SQLCODE = 0;
        return; /* Return to previous process*/
      end
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "184"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCBBFC01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCBBFC01.VCBBFC01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end FL0K184

// Obtain destination ctry
Function FL0K185()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table row using gpc and cust xref cd*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  set PC2REC empty;
  PC2REC.XGPCD = COMMAREA.XGPCD;
  PC2REC.PC2CUXID = VCBBFC01.PC-PRDCU-ID; /* customer xref*/
  ;
  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0K185"; /* Process name*/
  TA1REC.TA1LOC = "SEL TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "185"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0K185

// Get dnord nil sum'd orders
Function FL0K186()
   /* ---------------------------------------------------------*/
    /* Select a total quantity for nil orders for same*/
    /* customer as on cbbfc selected.*/
   /* ---------------------------------------------------------*/
  ;
  set FBHREC empty;
  ;
  FBHREC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
  FBHREC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
  FBHREC.XDMCD = FL0KM010.XDMCD; /* dimension*/
   /* MOVE '  ' TO FBHREC.XWHCD;       /* warehouse*/
   /* MOVE '1' TO FBHREC.XDSCD;        /* direct ship code*/
  FBHREC.XDVCD = "02"; /* div code*/
  FBHREC.FB8BUYDT = FLWREC.FB8BUYDT; /* buy date*/
  FBHREC.KUCCOID = VCBBFC01.CU-CO-ID; /* Company*/
  ;
  FL0KS-03-IO4640-S4(); /* Select csr on DFBUY.VDNORD01*/
  ;
  ;
  FL0KW00.FL0KW-SUM-NIL-ORDER-QTY = 0;
  FL0KW00.FL0KW-END-DNORD-NIL-FL = "N"; /* Init flag*/
  FL0KS-04-IO4640-N4(); /* Fetch csr on DFBUY.VDNORD01*/
  ;
  while (FL0KW00.FL0KW-END-DNORD-NIL-FL != "Y") /* Get all records*/
    ;
    set PC2REC empty;
    PC2REC.XGPCD = COMMAREA.XGPCD;
    PC2REC.PC2CUXID = FBHREC.PC2CUXID;
    ;
    FL0KS-01-IO3340-S(); /* Select DPRODC.VPRDCU01*/
    ;
    if (PC2REC.PC-PRDCU-APAO-FL == "E") /* If European record*/
       /* Next sentence - do not process European records*/
    else
      FL0KW00.FL0KWIX5 = 1;
      while (FL0KW00.FL0KWIX5 <= 40)
        FL0KW00.FL0KW-SUM-NIL-ORDER-QTY = FL0KW00.FL0KW-SUM-NIL-ORDER-QTY         + FBHREC.FB7QTB[FL0KWIX5]; /* Add size qtys*/
        FL0KW00.FL0KWIX5 = FL0KW00.FL0KWIX5 + 1;
      end
    end
    FL0KS-04-IO4640-N4(); /* Fetch csr on DFBUY.VDNORD01*/
  end
  ;
  FL0KS-05-IO4640-C4(); /* Close csr on DFBUY.VDNORD01*/
  ;
  ;
end // end FL0K186

// Close cursor vcbbfc01
Function FL0K188()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO6770" ("C1", SQLCA, VCBBFC01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "188"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCBBFC01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCBBFC01.VCBBFC01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end FL0K188

// Load European XCT, XWH
Function FL0K190()
   /* ***************************************************************/
   /* Load European XWH codes into working storage array          **/
   /* ***************************************************************/
  ;
  move " " to FL0KW00.FL0KW-EURO-XWHCD[1] for all;
  ;
  ;
   /* ***************************************************************/
   /* Load European XWH codes.*/
   /* ***************************************************************/
  ;
  FL0KW00.FL0KW-END-SUMCD-FL = "N";
  FL0KW00.FL0KWIX5 = 0;
  ;
  set YSMREC empty;
  YSMREC.YSMTBLPF = "XWH"; /* Table prefix*/
  YSMREC.YSMSYSPF = "FB"; /* System prefix*/
  YSMREC.YSMSUMID = 1; /* Sum id*/
  YSMREC.YSMSUMCD = "02"; /* Sum code*/
  YSMREC.YSMSRCVL = "****"; /* Source code*/
  ;
  FL0K191(); /* Declare SUMCD XWH cursor*/
  FL0K192(); /* Fetch SUMCD XWH cursor*/
  ;
  while (FL0KW00.FL0KW-END-SUMCD-FL != "Y") /* Until end of csr*/
    ;
    FL0KW00.FL0KWIX5 = FL0KW00.FL0KWIX5 + 1;
    FL0KW00.FL0KW-EURO-XWHCD[FL0KWIX5] = YSMREC.YSMSRCVL;
    ;
    FL0K192(); /* Fetch SUMCD XWH cursor*/
  end
  ;
  FL0K193(); /* Close SUMCD XWH cursor*/
  ;
  ;
end // end FL0K190

// Declare VSUMCD01 cursor
Function FL0K191()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on DCORP.VSUMCD01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0K191"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE VSUMCD01 CURSOR";
  TA1REC.TA1DBASE = "DCORP.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "191"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0K191

// Fetch VSUMCD01 cursor
Function FL0K192()
   /* ------------------------------------------------------------*/
   /* Fetch the DCORP.VSUMCD01 cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* Expected return codes*/
      FL0KW00.FL0KW-END-SUMCD-FL = "Y";
      return; /* Return to previous process*/
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0K192"; /* Process name*/
  TA1REC.TA1LOC = "FETCH VSUMCD01 CURSOR";
  TA1REC.TA1DBASE = "DCORP.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "192"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0K192

// Close VSUMCD01 cursor
Function FL0K193()
   /* ------------------------------------------------------------*/
   /* Close the DCORP.VSUMCD01 cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0K193"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE VSUMCD01 CURSOR";
  TA1REC.TA1DBASE = "DCORP.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "193"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0K193

// Format and converse the map
Function FL0K200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KW00.FL0KWQ == "Y") /* Model exists*/
    ;
    if (FL0KW00.FL0KWSWF == "Y") /* Map must be formatted*/
      FL0K210(); /* Format the data on the map*/
      FL0KW00.FL0KWSWF = "N"; /* Map must be formatted fl*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FL0KM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FL0KM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0KM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
  ;
  ;
  ;
  FL0KM010.XXXMODID = FLWREC.XXXMODID; /* Module identification*/
  ;
  converse FL0KM010 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.XXXMODID = " "; /* Module identification*/
  FLWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FL0KM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0KM010.CAITEM; /* Application data*/
  ;
  ;
end // end FL0K200

// Format the display data
Function FL0K210()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  if (FL0KW00.XXXTSPAG > FL0KW00.TA5TSQIX) /* last page got deleted*/
    FL0KW00.XXXTSPAG = FL0KW00.TA5TSQIX;
  end
  ;
  ;
  ;
  FL0KM010.FL0KMPG1 = FL0KW00.XXXTSPAG; /* current page nbr*/
  FL0KM010.FL0KMPG2 = FL0KW00.TA5TSQIX; /* last page nbr*/
  ;
  ;
  ;
  if (FL0KW00.TA5TSQIX > 0) /* Page was written*/
    FL0KW01.XXXTSLEN = 878; /* Temporary storage length*/
    ;
    TA5REC.TA5APPID = COMMAREA.CACURRAP;
                                   /* Application identification*/
    TA5REC.TA5TSQIX = FL0KW00.XXXTSPAG; /* Page number*/
    TA5REC.TA5FNCCD = "R"; /* Function code*/
    ;
    try
      call "TA0050" (FL0KW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
    end /* Temporary storage*/
    ;
    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
      ;
      ;
      ;
      ;
      FL0KM010.FBDTOQTB = FL0KW00.FBDTOQTB; /* Total fcst qtb*/
      FL0KM010.FL0KMDNQ = FL0KW00.FL0KMDNQ; /* Total direct ship qty*/
      ;
       /* Calc total stock qty*/
      ;
      FL0KW00.FL0KWSTK = FL0KW00.FBDTOQTB - FL0KM010.FL0KMDNQ;
      if (FL0KW00.FL0KWSTK >= 0)
        FL0KM010.FL0KMSTK = FL0KW00.FL0KWSTK;
      else
        FL0KM010.FL0KMSTK = 0;
      end
      ;
       /* Calc Euro stock qty*/
      ;
      FL0KW00.FL0KW-EURO-STK-QTB = FL0KW00.FL0KW-EURO-FCST-QTB         - FL0KW00.FL0KW-EUR-QTB;
      ;
      /* Put stk qtys into working storage array*/
      ;
      FL0KW00.FL0KWIX1 = 1; /* General index 1*/
      while (FL0KW00.FL0KWIX1 <= 7)
        if (FL0KW01.FL0KMTYP[FL0KWIX1] == "STK")
          ;
          if (FL0KW01.PC2CUXID[FL0KWIX1] == FL0KW00.FL0KW-EURO-XREF)
            FL0KW01.FL0KMQTY[FL0KWIX1] = FL0KW00.FL0KW-EURO-STK-QTB; /* Euro stk qty*/
            FL0KM010.FL0KWDSH[FL0KWIX1] = " ";
            set FL0KM010.OP1NORID[FL0KWIX1] skip, invisible;
          else
            FL0KW01.FL0KMQTY[FL0KWIX1] = FL0KM010.FL0KMSTK; /* Stk qty*/
            FL0KM010.FL0KWDSH[FL0KWIX1] = " ";
            set FL0KM010.OP1NORID[FL0KWIX1] skip, invisible;
          end
        end
        FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1;
      end
      ;
      set FL0KM010.SY1STNBR cursor; /* place cursor*/
      ;
      FL0KW00.FL0KWIX1 = 1; /* General index 1*/
      while (FL0KW00.FL0KWIX1 <= 13)
        if (FL0KW00.FL0KWIX1 >= 8
         && FL0KW00.FL0KWIX1 <= 12)
          FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 - 7; /* Idx for select field*/
          if (FL0KW01.FL0KWPRT[FL0KWIX2] == "N") /* Protect map row flag*/
            FBDREC.FBDGROUP = FL0KW01.FL0KWFLQ[FL0KWIX2];
            FL0KM010.PC2CUXID[FL0KWIX1] = FBDREC.PC2CUXID;
            FL0KM010.OP1CUOID[FL0KWIX1] = FBDREC.OP1CUOID;
            if (FBDREC.FBDBTCD == "STK"
             || FBDREC.FBDBTCD == "BLK")
              FL0KM010.FL0KWDSH[FL0KWIX1] = " ";
              FL0KM010.OP1NORID[FL0KWIX1] = 0;
              FL0KM010.OP1CUOID[FL0KWIX1] = 0;
              set FL0KM010.FL0KWDSH[FL0KWIX1] skip; /* may have been*/
              set FL0KM010.OP1NORID[FL0KWIX1] skip, invisible;
            else
              FL0KM010.FL0KWDSH[FL0KWIX1] = ".";
              FL0KM010.OP1NORID[FL0KWIX1] = FBDREC.OP1NORID;
              set FL0KM010.FL0KWDSH[FL0KWIX1] skip; /* may have been*/
              set FL0KM010.OP1NORID[FL0KWIX1] skip; /* set to dark*/
            end
            FL0KM010.XCTCD[FL0KWIX1] = FBDREC.XCTCD;
            FL0KM010.FY1FCTYC[FL0KWIX1] = FBDREC.FY1FCTYC;
            FL0KM010.FL0KMTYP[FL0KWIX1] = FBDREC.FBDBTCD;
            FL0KM010.XFRCD[FL0KWIX1] = FBDREC.XFRCD;
            FL0KM010.FB-LATE-BK-FL[FL0KWIX1] = FBDREC.FB-LATE-BK-FL;
            FL0KM010.FL0KMQTY[FL0KWIX1] = FBDREC.FBDQTB;
            ;
            ;
               /* convert system date to mmddyy*/
            ;
            FL0KW00.FL0KWDAT = FBDREC.ZZZSDT;
            FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
            FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
            FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
            FL0KM010.ZZZSDT[FL0KWIX1] = FL0KW00.FL0KWZDT;
            ;
            ;
          end
        end
        ;
        if (FL0KW00.FL0KWIX1 <= 7)
          if (FL0KW01.FL0KMTYP[FL0KWIX1] == "DRS"
           || FL0KW01.FL0KMTYP[FL0KWIX1] == "EUR"
           || FL0KW01.FL0KMTYP[FL0KWIX1] == "NIL")
            FL0KM010.FL0KWDSH[FL0KWIX1] = ".";
            set FL0KM010.FL0KWDSH[FL0KWIX1] skip; /* may have been*/
            set FL0KM010.OP1NORID[FL0KWIX1] skip; /* set to dark*/
            if (FL0KW01.FL0KW-PRT2[FL0KWIX1] == "N") /* Protect map row flag*/
              FL0KM010.PC2CUXID[FL0KWIX1] = FL0KW01.PC2CUXID[FL0KWIX1];
              FL0KM010.OP1CUOID[FL0KWIX1] = FL0KW01.OP1CUOID[FL0KWIX1];
              if (FL0KW01.FL0KMTYP[FL0KWIX1] == "STK"
               || FL0KW01.FL0KMTYP[FL0KWIX1] == "BLK")
                FL0KM010.FL0KWDSH[FL0KWIX1] = " ";
                set FL0KM010.FL0KWDSH[FL0KWIX1] skip; /* may have been*/
                set FL0KM010.OP1NORID[FL0KWIX1] skip, invisible;
              else
                FL0KM010.FL0KWDSH[FL0KWIX1] = ".";
                FL0KM010.OP1NORID[FL0KWIX1] = FL0KW01.OP1NORID[FL0KWIX1];
                set FL0KM010.FL0KWDSH[FL0KWIX1] skip; /* may have been*/
                set FL0KM010.OP1NORID[FL0KWIX1] skip; /* set to dark*/
              end
              FL0KM010.XCTCD[FL0KWIX1] = FL0KW01.XCTCD[FL0KWIX1];
              FL0KM010.FY1FCTYC[FL0KWIX1] = FL0KW01.FY1FCTYC[FL0KWIX1];
              FL0KM010.FL0KMTYP[FL0KWIX1] = FL0KW01.FL0KMTYP[FL0KWIX1];
              FL0KM010.XFRCD[FL0KWIX1] = FL0KW01.XFRCD[FL0KWIX1];
              FL0KM010.FL0KMQTY[FL0KWIX1] = FL0KW01.FL0KMQTY[FL0KWIX1];
              ;
              ;
               /* convert system date to mmddyy*/
              ;
              FL0KM010.ZZZSDT[FL0KWIX1] = FL0KW01.ZZZSDT[FL0KWIX1];
              ;
            end
          else
            if (FL0KW01.FL0KW-PRT2[FL0KWIX1] == "N") /* Protect map row flag*/
              FL0KM010.PC2CUXID[FL0KWIX1] = FL0KW01.PC2CUXID[FL0KWIX1];
              FL0KM010.OP1CUOID[FL0KWIX1] = FL0KW01.OP1CUOID[FL0KWIX1];
              if (FL0KW01.FL0KMTYP[FL0KWIX1] == "STK"
               || FL0KW01.FL0KMTYP[FL0KWIX1] == "BLK")
                FL0KM010.FL0KWDSH[FL0KWIX1] = " ";
                FL0KM010.OP1NORID[FL0KWIX1] = 0;
                FL0KM010.OP1CUOID[FL0KWIX1] = 0;
                set FL0KM010.FL0KWDSH[FL0KWIX1] skip; /* may have been*/
                set FL0KM010.OP1NORID[FL0KWIX1] skip, invisible;
              else
                FL0KM010.FL0KWDSH[FL0KWIX1] = ".";
                FL0KM010.OP1NORID[FL0KWIX1] = FL0KW01.OP1NORID[FL0KWIX1];
                set FL0KM010.FL0KWDSH[FL0KWIX1] skip; /* may have been*/
                set FL0KM010.OP1NORID[FL0KWIX1] skip; /* set to dark*/
              end
              FL0KM010.XCTCD[FL0KWIX1] = FL0KW01.XCTCD[FL0KWIX1];
              FL0KM010.FY1FCTYC[FL0KWIX1] = FL0KW01.FY1FCTYC[FL0KWIX1];
              FL0KM010.FL0KMTYP[FL0KWIX1] = FL0KW01.FL0KMTYP[FL0KWIX1];
              FL0KM010.XFRCD[FL0KWIX1] = FL0KW01.XFRCD[FL0KWIX1];
              FL0KM010.FL0KMQTY[FL0KWIX1] = FL0KW01.FL0KMQTY[FL0KWIX1];
              ;
              ;
               /* convert system date to mmddyy*/
              ;
              FL0KM010.ZZZSDT[FL0KWIX1] = FL0KW01.ZZZSDT[FL0KWIX1];
              ;
              ;
            end
          end
        end
        FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1;
      end
      ;
      ;
      ;
      ;
      /* ------------------------------------------------------------*/
       /* save the model buy qtys for reference later*/
       /* (these values are used later to determine audit record*/
        /* values).*/
      /* ------------------------------------------------------------*/
      ;
      FL0KW00.FL0KWIX1 = 8; /* set index to 8*/
      while (FL0KW00.FL0KWIX1 <= 12)
        ;
        FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 - 7;
        FL0KW00.FL0KWPQT[FL0KWIX2] = FL0KM010.FL0KMQTY[FL0KWIX1];
        ;
        FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1;
        ;
      end
      ;
      ;
      ;
      ;
      FL0K410(); /* reset protect flags*/
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/
    ;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    FLWREC.XXXMODID = "210"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M010"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    ;
  end
end // end FL0K210

// validate attn identifier
Function FL0K300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set FLWREC empty;
      FLWREC.SY1STNBR = FL0KM010.SY1STNBR;
      FLWREC.SY2CLRID = FL0KM010.SY2CLRID;
      FLWREC.XDMCD = FL0KM010.XDMCD;
      FLWREC.FBAMDNBR = FL0KM010.FBAMDNBR;
      FLWREC.FB8BUYDT = FBAREC.FB8BUYDT;
      XSFLS01(); /* Exit to another application*/
      FL0KM010.XXXMODID = "300"; /* Process name*/
      set FL0KM010.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
    else
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FL0KM010.XXXMODID = "300"; /* Process name*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf21
   || converseVar.eventKey is pa2)
    ;
    if (converseVar.eventKey is pa2) /* clear screen*/
      COMMAREA.CATOAP = "FL0K"; /* display the blank map*/
    end
    ;
    if (converseVar.eventKey is pf19) /* clear screen*/
      COMMAREA.CATOAP = "FL0K"; /* display the blank map*/
    end
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0KM010"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "FL0A";
    end
    ;
    if (converseVar.eventKey is pf14)
      COMMAREA.CATOAP = "FL0D";
    end
    ;
    if (converseVar.eventKey is pf15)
      COMMAREA.CATOAP = "FL0E";
    end
    ;
    if (converseVar.eventKey is pf21) /* Print F/L Reports*/
      COMMAREA.CATOAP = "FL0I";
    end
    ;
    set FLWREC empty;
    FLWREC.SY1STNBR = FL0KM010.SY1STNBR;
    FLWREC.SY2CLRID = FL0KM010.SY2CLRID;
    FLWREC.XDMCD = FL0KM010.XDMCD;
    FLWREC.FBAMDNBR = FL0KM010.FBAMDNBR;
    XSFLS01(); /* transfer to another application*/
    FL0KW00.FL0KWSWR = "N"; /* dont request data*/
    FL0KW00.FL0KWSWF = "N"; /* format map*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7  /* scroll forward*/
   && converseVar.eventKey not pf8  /* scroll backward*/
   && converseVar.eventKey not pf20 /* nil global updt*/
   && converseVar.eventKey not pf21) /* print*/
    converseLib.validationFailed(3); /* invalid key*/
    FL0KM010.XXXMODID = "300"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
       /* reset map*/
    end
    ;
    exit stack;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* scroll forward*/
    if (FL0KW00.XXXTSPAG >= FL0KW00.TA5TSQIX) /* already on last page*/
      FL0KM010.XXXMODID = "300"; /* process number*/
      converseLib.validationFailed(7); /* no more pages to display*/
      exit stack; /* display the map*/
    else
      FL0KW00.XXXTSPAG = FL0KW00.XXXTSPAG + 1; /* increment page*/
      FL0KW00.FL0KWSWF = "Y"; /* format the map sw*/
      FL0KM010.FL0KMSEL[1] = " "; /* blank out select field*/
      FL0KM010.FL0KMSEL[2] = " "; /* "                    "*/
      FL0KM010.FL0KMSEL[3] = " "; /* "                    "*/
      FL0KM010.FL0KMSEL[4] = " "; /* "                    "*/
      FL0KM010.FL0KMSEL[5] = " "; /* "                    "*/
      FL0KM010.FL0KMSEL[6] = " "; /* "                    "*/
    end
  end
  ;
  if (converseVar.eventKey is pf7) /* scroll backward*/
    if (FL0KW00.XXXTSPAG == 1) /* already on first page*/
      FL0KM010.XXXMODID = "300"; /* process number*/
      converseLib.validationFailed(6); /* no previous pages*/
      exit stack; /* display the map*/
    else
      FL0KW00.XXXTSPAG = FL0KW00.XXXTSPAG - 1; /* decrement page*/
      FL0KW00.FL0KWSWF = "Y"; /* format the map sw*/
      FL0KM010.FL0KMSEL[1] = " "; /* blank out select field*/
      FL0KM010.FL0KMSEL[2] = " "; /* "                    "*/
      FL0KM010.FL0KMSEL[3] = " "; /* "                    "*/
      FL0KM010.FL0KMSEL[4] = " "; /* "                    "*/
      FL0KM010.FL0KMSEL[5] = " "; /* "                    "*/
      FL0KM010.FL0KMSEL[6] = " "; /* "                    "*/
    end
  end
  ;
  if (converseVar.eventKey is enter /* enter pressed*/
   && FL0KW00.FL0KWTRS == "Y")      /* and trade restriction*/
    ;
    FL0KW00.FL0KWROS = "Y"; /* override trade restriction*/
    ;
  end
  ;
  ;
end // end FL0K300

// Reset highlighted fields
Function FL0K400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  FL0K410();
  ;
  ;
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Handle factory reason code pop-up window request*/
   /* ------------------------------------------------------------*/
  ;
  FL0K420();
  ;
  ;
  ;
end // end FL0K400

// Reset highlighted fields
Function FL0K410()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0KM010.FBAMDNBR initialAttributes; /* Model number*/
  set FL0KM010.SY1STNBR initialAttributes; /* Style number*/
  set FL0KM010.SY2CLRID initialAttributes; /* Color identification*/
  set FL0KM010.XDMCD initialAttributes; /* Dimension code*/
  set FL0KM010.CATOAP initialAttributes; /* Option*/
  ;
  FL0KW00.FL0KWIX1 = 1; /* General index 1*/
  while (FL0KW00.FL0KWIX1 <= 13)
    if (FL0KW00.FL0KWIX1 <= 7)
                          /* dfbuy.vfqtbs01 top of map*/
                          /* and dfbuy.vdnord01*/
                          /* the forecast quantities*/
      if (FL0KW01.FL0KW-PRT2[FL0KWIX1] == "N") /* Protect map row flag*/
        set FL0KM010.FL0KMSEL[FL0KWIX1] initialAttributes;
        set FL0KM010.PC2CUXID[FL0KWIX1] skip;
        set FL0KM010.OP1CUOID[FL0KWIX1] skip;
        set FL0KM010.FL0KWDSH[FL0KWIX1] skip;
        if (FL0KM010.FL0KMTYP[FL0KWIX1] == "STK"
         || FL0KM010.FL0KMTYP[FL0KWIX1] == "BLK")
          set FL0KM010.OP1NORID[FL0KWIX1] skip, invisible;
        else
          set FL0KM010.OP1NORID[FL0KWIX1] skip;
        end
        if (FL0KM010.FL0KMTYP[FL0KWIX1] == "EO "
         || FL0KM010.FL0KMTYP[FL0KWIX1] == "PR ")
          if (FL0KM010.OP1CUOID[FL0KWIX1] == 0)
            set FL0KM010.OP1CUOID[FL0KWIX1] protect, invisible;
            set FL0KM010.FL0KWDSH[FL0KWIX1] protect, invisible;
            set FL0KM010.OP1NORID[FL0KWIX1] protect, invisible;
          else
            set FL0KM010.OP1NORID[FL0KWIX1] skip;
          end
        end
        set FL0KM010.XCTCD[FL0KWIX1] skip;
        set FL0KM010.FY1FCTYC[FL0KWIX1] skip;
        set FL0KM010.FL0KMTYP[FL0KWIX1] skip;
        set FL0KM010.XFRCD[FL0KWIX1] skip;
        set FL0KM010.FB-LATE-BK-FL[FL0KWIX1] skip;
        set FL0KM010.FL0KMQTY[FL0KWIX1] skip;
        set FL0KM010.ZZZSDT[FL0KWIX1] skip;
      else
        set FL0KM010.FL0KMSEL[FL0KWIX1] protect, invisible;
        set FL0KM010.PC2CUXID[FL0KWIX1] protect, invisible;
        set FL0KM010.OP1CUOID[FL0KWIX1] protect, invisible;
        set FL0KM010.FL0KWDSH[FL0KWIX1] protect, invisible;
        set FL0KM010.OP1NORID[FL0KWIX1] protect, invisible;
        set FL0KM010.XCTCD[FL0KWIX1] protect, invisible;
        set FL0KM010.FY1FCTYC[FL0KWIX1] protect, invisible;
        set FL0KM010.FL0KMTYP[FL0KWIX1] protect, invisible;
        set FL0KM010.XFRCD[FL0KWIX1] protect, invisible;
        set FL0KM010.FB-LATE-BK-FL[FL0KWIX1] protect, invisible;
        set FL0KM010.FL0KMQTY[FL0KWIX1] protect, invisible;
        set FL0KM010.ZZZSDT[FL0KWIX1] protect, invisible;
        ;
        ;
      end
    else
      FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 - 7;
                                   /* Index for the select field*/
      if (FL0KW00.FL0KWIX1 == 13) /* the 'add' line*/
        set FL0KM010.FL0KMSEL[FL0KWIX1] initialAttributes;
        set FL0KM010.PC2CUXID[FL0KWIX1] initialAttributes;
        set FL0KM010.OP1CUOID[FL0KWIX1] initialAttributes;
        FL0KM010.FL0KWDSH[FL0KWIX1] = ".";
        set FL0KM010.FL0KWDSH[FL0KWIX1] skip;
        set FL0KM010.OP1NORID[FL0KWIX1] initialAttributes;
        set FL0KM010.XCTCD[FL0KWIX1] skip;
        set FL0KM010.FY1FCTYC[FL0KWIX1] initialAttributes;
        set FL0KM010.FL0KMTYP[FL0KWIX1] initialAttributes;
        set FL0KM010.XFRCD[FL0KWIX1] initialAttributes;
        set FL0KM010.FB-LATE-BK-FL[FL0KWIX1] initialAttributes;
        set FL0KM010.FL0KMQTY[FL0KWIX1] initialAttributes;
      else
                          /* fl0kxix1 is between 8 and 12*/
                          /* dfbuy.vflqtb01 bottom of map*/
                          /* the change and delete lines*/
        if (FL0KW01.FL0KWPRT[FL0KWIX2] == "N") /* Protect map row flag*/
          set FL0KM010.FL0KMSEL[FL0KWIX1] initialAttributes;
          set FL0KM010.PC2CUXID[FL0KWIX1] skip;
          set FL0KM010.OP1CUOID[FL0KWIX1] skip;
          if (FL0KM010.FL0KMTYP[FL0KWIX1] != "STK"
           && FL0KM010.FL0KMTYP[FL0KWIX1] != "BLK"
           && FL0KM010.OP1CUOID[FL0KWIX1] > 0)
            FL0KM010.FL0KWDSH[FL0KWIX1] = ".";
            set FL0KM010.FL0KWDSH[FL0KWIX1] skip;
            set FL0KM010.OP1NORID[FL0KWIX1] skip;
          else
            FL0KM010.FL0KWDSH[FL0KWIX1] = " ";
            set FL0KM010.FL0KWDSH[FL0KWIX1] skip;
            set FL0KM010.OP1NORID[FL0KWIX1] skip;
          end
          if (FL0KM010.FL0KMTYP[FL0KWIX1] == "STK"
           || FL0KM010.FL0KMTYP[FL0KWIX1] == "BLK")
            FL0KM010.FL0KWDSH[FL0KWIX1] = " ";
            set FL0KM010.FL0KWDSH[FL0KWIX1] skip, invisible;
            set FL0KM010.OP1NORID[FL0KWIX1] skip, invisible;
          end
          if (FL0KM010.FL0KMTYP[FL0KWIX1] == "EO "
           || FL0KM010.FL0KMTYP[FL0KWIX1] == "PR ")
            if (FL0KM010.OP1CUOID[FL0KWIX1] > 0)
              FL0KM010.FL0KWDSH[FL0KWIX1] = ".";
              set FL0KM010.FL0KWDSH[FL0KWIX1] skip;
              set FL0KM010.OP1NORID[FL0KWIX1] skip;
            else
              FL0KM010.FL0KWDSH[FL0KWIX1] = " ";
              set FL0KM010.OP1CUOID[FL0KWIX1] protect, invisible;
              set FL0KM010.FL0KWDSH[FL0KWIX1] protect, invisible;
              set FL0KM010.OP1NORID[FL0KWIX1] protect, invisible;
            end
          end
          set FL0KM010.XCTCD[FL0KWIX1] skip;
          set FL0KM010.FY1FCTYC[FL0KWIX1] skip;
          set FL0KM010.FL0KMTYP[FL0KWIX1] skip;
          set FL0KM010.XFRCD[FL0KWIX1] initialAttributes;
          set FL0KM010.FB-LATE-BK-FL[FL0KWIX1] initialAttributes;
          set FL0KM010.FL0KMQTY[FL0KWIX1] initialAttributes;
          set FL0KM010.ZZZSDT[FL0KWIX1] initialAttributes;
          ;
        else
          set FL0KM010.FL0KMSEL[FL0KWIX1] protect, invisible;
          set FL0KM010.PC2CUXID[FL0KWIX1] protect, invisible;
          set FL0KM010.OP1CUOID[FL0KWIX1] protect, invisible;
          set FL0KM010.FL0KWDSH[FL0KWIX1] protect, invisible;
          set FL0KM010.OP1NORID[FL0KWIX1] protect, invisible;
          set FL0KM010.XCTCD[FL0KWIX1] protect, invisible;
          set FL0KM010.FY1FCTYC[FL0KWIX1] protect, invisible;
          set FL0KM010.FL0KMTYP[FL0KWIX1] protect, invisible;
          set FL0KM010.XFRCD[FL0KWIX1] protect, invisible;
          set FL0KM010.FB-LATE-BK-FL[FL0KWIX1] protect, invisible;
          set FL0KM010.FL0KMQTY[FL0KWIX1] protect, invisible;
          set FL0KM010.ZZZSDT[FL0KWIX1] protect, invisible;
          ;
          ;
        end
      end
    end
    ;
    FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1;
  end
  ;
  ;
  ;
end // end FL0K410

// Handle pop-up windows
Function FL0K420()
   /* ------------------------------------------------------------*/
   /* First find out if there was a request for pop-up windows*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FL0KW00.FL0KWIX1 = 8; /* General index 1*/
  while (FL0KW00.FL0KWIX1 <= 13)
    ;
    if (FL0KM010.XFRCD[FL0KWIX1] == "?" /* fcty-rsn list requested*/
     || FL0KM010.XFRCD[FL0KWIX1] == "??")
      if (converseVar.eventKey not enter) /* ENTER was not pressed*/
        FLWREC.XXXMODID = "400"; /* Module identification*/
        converseLib.validationFailed(19); /* Indicate PF key not valid*/
        exit stack; /* Exit to display map*/
      end
      FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1;
      FL0KW00.FL0KWIX1 = 13; /* Found pop-up window request*/
    else
      if (FL0KW00.FL0KWIX1 == 13) /* End of map and no request*/
        return;
      end
    end
    ;
    FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of fcty-rsn codes.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "  FACTORY REASON"; /* Heading*/
  ;
  XX0XW02.XX0XWEND = "N"; /* end of request*/
  ;
  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXFR01(); /* Display the list*/
  end
  ;
  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
    ;
    FL0KM010.XFRCD[FL0KWIX2] = "  "; /* Restore prior code*/
  else
    FL0KM010.XFRCD[FL0KWIX2] = XFRTBL.XFRCD[XX0XWPIX]; /* Selected code*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* clear map*/
  set FL0KM010.XFRCD[FL0KWIX2] cursor; /* reset the cursor*/
  exit stack; /* redisplay map*/
end // end FL0K420

// Verify data that was entered
Function FL0K500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FLWREC.XXXMODID = "500"; /* Module identification*/
    set FL0KM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calc fcst errors*/
   /* ------------------------------------------------------------*/
  ;
  FL0KW00.FL0KWFER = FL0KW00.FBDTOQTB - FL0KW00.FL0KWTB; /* Calc fcst error*/
  FL0KW00.FL0KW-EURO-FCST-ERR-QTY = FL0KW00.FL0KW-EURO-FCST-QTB -   FL0KW00.FL0KW-EURO-TOTAL-BUY;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Edit the add line*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KM010.FL0KMSEL[13] == "A")
    FL0KW00.FL0KWFSF = "N"; /* Forecast select flag*/
                                  /* flag used to make sure only one*/
                                  /* forecast cust. order was selected*/
    FL0KW00.FL0KW-SAVE-PR-CUST-ORD-ID = 0;
    FL0KW00.FL0KW-SAVE-PR-NIKE-ORD-ID = 0;
    FL0KW00.FL0KWIX1 = 1;
    while (FL0KW00.FL0KWIX1 <= 7)
      ;
      if (FL0KM010.FL0KMTYP[FL0KWIX1] == "STK"
       && FL0KM010.PC2CUXID[FL0KWIX1] != FL0KW00.FL0KW-EURO-XREF)
        FL0KW00.FL0KW-USA-STK-FL = "Y";
      else
        FL0KW00.FL0KW-USA-STK-FL = "N";
      end
      ;
      if (FL0KM010.FL0KMSEL[FL0KWIX1] == "S" /* Fcst cust order selected*/
       && FL0KW00.FL0KW-USA-STK-FL == "N")  
        if (FL0KW00.FL0KWFSF == "N") /* Fcst cust order hasn't been selected*/
          FL0KM010.PC2CUXID[13] = FL0KM010.PC2CUXID[FL0KWIX1];
          if (FL0KM010.FL0KMTYP[FL0KWIX1] != "STK")
            FL0KM010.OP1NORID[13] = FL0KM010.OP1NORID[FL0KWIX1];
            FL0KM010.OP1CUOID[13] = FL0KM010.OP1CUOID[FL0KWIX1];
          end
          FL0KM010.FL0KMTYP[13] = FL0KM010.FL0KMTYP[FL0KWIX1];
          if (FL0KM010.FL0KMQTY[13] <= 0) /* No qty was entered*/
            FL0KM010.FL0KMQTY[13] = FL0KM010.FL0KMQTY[FL0KWIX1];
          end
          FL0KW00.FL0KWFSF = "Y";
          if (FL0KM010.FL0KMTYP[13] == "PR")
            FL0KW00.FL0KW-SAVE-PR-NIKE-ORD-ID = FL0KM010.OP1NORID[FL0KWIX1];
            FL0KW00.FL0KW-SAVE-PR-CUST-ORD-ID = FL0KM010.OP1CUOID[FL0KWIX1];
          end
        else
          set FL0KM010.FL0KMSEL[FL0KWIX1] cursor, modified, bold;
          converseLib.validationFailed(469); /* More than one s selected from a*/
                               /* forecasted cust buy*/
        end
      else
        if (FL0KM010.FL0KMSEL[FL0KWIX1] == "S"
         && FL0KW00.FL0KW-USA-STK-FL == "Y")
                                  /* Fcst cust order selected*/
          if (FL0KW00.FL0KWFSF == "N")
                                  /* Fcst cust order hasn't been selected*/
            FL0KM010.FL0KMTYP[13] = FL0KM010.FL0KMTYP[FL0KWIX1];
            if (FL0KM010.FL0KMQTY[13] <= 0) /* No qty was entered*/
              FL0KM010.FL0KMQTY[13] = FL0KM010.FL0KMQTY[FL0KWIX1];
            end
            FL0KW00.FL0KWFSF = "Y";
          else
            set FL0KM010.FL0KMSEL[FL0KWIX1] cursor, modified, bold;
            converseLib.validationFailed(469); /* More than one s selected from a*/
                                  /* forecasted cust buy*/
          end
          ;
        else
          ;
          if (FL0KM010.FL0KMSEL[FL0KWIX1] != "S"
           && FL0KM010.FL0KMSEL[FL0KWIX1] != " ")
            set FL0KM010.FL0KMSEL[FL0KWIX1] cursor, modified, bold;
            converseLib.validationFailed(10); /* invalid field*/
          end
          ;
        end
      end
      FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1; /* Increment index 1*/
    end
    ;
    FL0K502(); /* Edit add line*/
    ;
  else
    ;
    if (FL0KM010.FL0KMSEL[13] != "A"
     && FL0KM010.FL0KMSEL[13] != " ")
      set FL0KM010.FL0KMSEL[13] cursor, modified, bold;
      converseLib.validationFailed(10); /* invalid field*/
    end
    ;
    ;
    FL0KW00.FL0KWIX1 = 1;
    while (FL0KW00.FL0KWIX1 <= 7) /* Edit top of map when not doing add*/
      if (FL0KM010.FL0KMSEL[FL0KWIX1] != "S"
       && FL0KM010.FL0KMSEL[FL0KWIX1] != " ")
        set FL0KM010.FL0KMSEL[FL0KWIX1] cursor, modified, bold;
        converseLib.validationFailed(10); /* invalid field*/
      end
      ;
      if (FL0KM010.FL0KMSEL[FL0KWIX1] == "S" /* Selected top of map*/
       && FL0KM010.FL0KMSEL[13] != "A")      /* but didnt add a prod*/
        set FL0KM010.FL0KMSEL[FL0KWIX1] cursor, modified, bold;
        converseLib.validationFailed(470); /* invalid field*/
      end
      ;
      FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1; /* Increment index 1*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Edit the change lines*/
   /* ------------------------------------------------------------*/
  ;
  FL0KW00.FL0KWIX1 = 12; /* General index 1*/
  while (FL0KW00.FL0KWIX1 >= 8)
    FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 - 7; /* Index for the select field*/
                                  /* and temp storage*/
    ;
    if (FL0KM010.FL0KMSEL[FL0KWIX1] == "C")
      if (FL0KM010.FB-LATE-BK-FL[FL0KWIX1] == "Y" /* Edit late booking fl*/
       || FL0KM010.FB-LATE-BK-FL[FL0KWIX1] == "N")
           /* NEXT SENTENCE*/
      else
        FL0KM010.FB-LATE-BK-FL[FL0KWIX1] = "N";
                                  /* Default late bookings*/
      end
      ;
      if (FL0KM010.XFRCD[FL0KWIX1] == "  ") /* blank factory reason code*/
        set FL0KM010.XFRCD[FL0KWIX1] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
      else
        FL0KW00.XFRCD = FL0KM010.XFRCD[FL0KWIX1];
        FL0K510(); /* edit factory reason code*/
        if (FL0KW00.FL0KWFRF == "N") /* valid xfrcd fl*/
          set FL0KM010.XFRCD[FL0KWIX1] cursor, modified, bold;
          converseLib.validationFailed(10); /* invalid field*/
        end
      end
      ;
      ;
      if (FL0KM010.FL0KMQTY[FL0KWIX1] == 0) /* zero qty*/
        FLWREC.XXXMODID = "500";
        set FL0KM010.FL0KMQTY[FL0KWIX1] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
      end
      ;
      ;
       /* Edit for tolerance*/
      FBDREC.FBDGROUP = FL0KW01.FL0KWFLQ[FL0KWIX2];
      ;
      if (FL0KM010.FL0KMTYP[FL0KWIX1] == "STK"
       && FL0KM010.PC2CUXID[FL0KWIX1] != FL0KW00.FL0KW-EURO-XREF)
        FL0KW00.FL0KW-USA-STK-FL = "Y";
      else
        FL0KW00.FL0KW-USA-STK-FL = "N";
      end
      ;
      if (FL0KM010.FL0KMQTY[FL0KWIX1] != FBDREC.FBDQTB) /* qtb changed*/
        ;
        /* Edit USA tolerance*/
        if (FL0KM010.FL0KMTYP[FL0KWIX1] == "DRS" /* direct ship*/
         || FL0KW00.FL0KW-USA-STK-FL == "Y")     /* or USA stock buy*/
           /* Get the net change qty*/
          FL0KW00.FL0KWNET = FBDREC.FBDQTB - FL0KM010.FL0KMQTY[FL0KWIX1];
           /* Combine the net change qty with the forecast error qty*/
          FL0KW00.FL0KWFER = FL0KW00.FL0KWFER + FL0KW00.FL0KWNET;
           /* Check to see if the new forecast error qty is*/
           /* within the acceptable tolerance defined in vfmctl01*/
          if (FL0KW00.FL0KWFER < FL0KW00.FB9BTQTY) /* Below tolerance*/
            if (FL0KW00.FL0KWEP != "Y") /* Not Pending update*/
              set FL0KM010.FL0KMQTY[FL0KWIX1] cursor, modified, bold;
              converseLib.validationFailed(335); /* Below tolerance*/
              FL0KW00.FL0KWEP = "Y"; /* Error, update is pending*/
            else
              FL0KW00.FL0KWEP = "N"; /* Error, update is pending*/
            end
          end
          ;
          if (FL0KW00.FL0KWFER > FB9REC.FB9BTQTY) /* Above tolerance*/
            if (FL0KW00.FL0KWEP != "Y") /* Not Pending update*/
              set FL0KM010.FL0KMQTY[FL0KWIX1] cursor, modified, bold;
              converseLib.validationFailed(336); /* above tolerance*/
              FL0KW00.FL0KWEP = "Y"; /* Error, update is pending*/
            else
              FL0KW00.FL0KWEP = "N"; /* Error, update is pending*/
            end
          end
        else
          ;
          /* Edit EURO tolerance*/
          if (FL0KM010.FL0KMTYP[FL0KWIX1] == "EUR" /* direct ship*/
           || (FL0KM010.FL0KMTYP[FL0KWIX1] == "STK"
           && FL0KW00.FL0KW-USA-STK-FL == "N"))    /* non-usa stock buy*/
             /* Get the net change qty*/
            FL0KW00.FL0KWNET = FBDREC.FBDQTB - FL0KM010.FL0KMQTY[FL0KWIX1];
             /* Combine the net change qty with the forecast error qty*/
            FL0KW00.FL0KW-EURO-FCST-ERR-QTY = FL0KW00.FL0KW-EURO-FCST-ERR-QTY + FL0KW00.FL0KWNET;
             /* Check to see if the new forecast error qty is*/
             /* within the acceptable tolerance defined in vfmctl01*/
            if (FL0KW00.FL0KW-EURO-FCST-ERR-QTY < FL0KW00.FB9BTQTY)
              if (FL0KW00.FL0KWEP != "Y") /* Not Pending update*/
                set FL0KM010.FL0KMQTY[FL0KWIX1] cursor, modified, bold;
                converseLib.validationFailed(335); /* Below tolerance*/
                FL0KW00.FL0KWEP = "Y"; /* Error, update is pending*/
              else
                FL0KW00.FL0KWEP = "N"; /* Error, update is pending*/
              end
            end
            ;
            if (FL0KW00.FL0KW-EURO-FCST-ERR-QTY > FB9REC.FB9BTQTY)
              if (FL0KW00.FL0KWEP != "Y") /* Not Pending update*/
                set FL0KM010.FL0KMQTY[FL0KWIX1] cursor, modified, bold;
                converseLib.validationFailed(336); /* above tolerance*/
                FL0KW00.FL0KWEP = "Y"; /* Error, update is pending*/
              else
                FL0KW00.FL0KWEP = "N"; /* Error, update is pending*/
              end
            end
          end
        end
      end
      ;
      ;
      ;
      if (FL0KM010.XFRCD[FL0KWIX1] != FBDREC.XFRCD
       /* factory reason changed*/
       || FL0KM010.FL0KMQTY[FL0KWIX1] != FBDREC.FBDQTB) /* qtb changed*/
        FL0KW01.FL0KWCHG[FL0KWIX2] = "Y"; /* Data has changed flag*/
        if (FL0KM010.FL0KMSEL[FL0KWIX1] == " ")
          set FL0KM010.FL0KMSEL[FL0KWIX1] cursor, modified, bold;
          converseLib.validationFailed(8); /* Required field - please enter*/
        else
          if (FL0KM010.FL0KMSEL[FL0KWIX1] != "C")
            set FL0KM010.FL0KMSEL[FL0KWIX1] cursor, modified, bold;
            converseLib.validationFailed(10); /* invalid field*/
          end
        end
      end
    end
    ;
    if (FL0KM010.FL0KMSEL[FL0KWIX1] != "C"
     && FL0KM010.FL0KMSEL[FL0KWIX1] != "D"
     && FL0KM010.FL0KMSEL[FL0KWIX1] != " ")
      set FL0KM010.FL0KMSEL[FL0KWIX1] cursor, modified, bold;
      converseLib.validationFailed(10); /* invalid field*/
    end
    ;
    FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 - 1; /* Decrement index 1*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Edit style number*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not pf20) /* not updt job submit*/
    if (FL0KM010.SY1STNBR == "  ") /* blank style*/
      set FL0KM010.SY1STNBR cursor, modified, bold;
      converseLib.validationFailed(8); /* Required field - please enter*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Edit Model number*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KM010.FBAMDNBR == 0) /* zero model number*/
    set FL0KM010.FBAMDNBR cursor, modified, bold;
    converseLib.validationFailed(8); /* Required field - please enter*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If key field changed, determine if any other field changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not pf20) /* not updt job submit*/
    if (converseVar.validationMsgNum == 0)
      if (FL0KM010.SY1STNBR != FLWREC.SY1STNBR /* or style changed*/
       || FL0KM010.SY2CLRID != FLWREC.SY2CLRID /* or color changed*/
       || FL0KM010.XDMCD != FLWREC.XDMCD       /* or dim   changed*/
       || FL0KM010.FBAMDNBR != FLWREC.FBAMDNBR) /* or model number*/
        ;
        FLWREC.SY1STNBR = FL0KM010.SY1STNBR; /* style*/
        FLWREC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
        FLWREC.XDMCD = FL0KM010.XDMCD; /* dim*/
        FLWREC.FBAMDNBR = FL0KM010.FBAMDNBR; /* style*/
        set FL0KM010 initial;
        FL0KW00.TA5TSQIX = 0; /* highest page nbr*/
        FL0KW00.XXXTSPAG = 1; /* to display 1st page*/
        FL0KW00.FL0KWSWR = "Y"; /* request for data sw*/
        FL0KW00.FL0KWSWF = "Y"; /* map must be formatted*/
        FL0KW00.FL0KWQ = "N"; /* vflqtb01 row was found sw*/
        FL0KW00.FBDTOQTB = 0; /* Total fcst qtb*/
        FL0KW00.FL0KMDNQ = 0; /* Total direct ship qty*/
        FL0KW00.FL0KWTB = 0; /* Total buy*/
        FL0KW00.FL0KW-EURO-FCST-QTB = 0; /* Total euro fcst*/
        FL0KW00.FL0KW-EURO-TOTAL-BUY = 0; /* Total euro buy*/
        FL0KW00.FL0KW-EUR-QTB = 0; /* European qty to buy*/
        exit stack;
      end
    end
  end
  ;
  ;
end // end FL0K500

// Edit the add line
Function FL0K502()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Edit the add line*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FL0KM010.FL0KMSEL[13] == "A")
    set FBHREC empty;
    ;
     /* Edit late bookings flag*/
    if (FL0KM010.FB-LATE-BK-FL[13] == "N" /* Edit late booking fl*/
     || FL0KM010.FB-LATE-BK-FL[13] == "Y") /* Edit late booking fl*/
         /* Next Sentence*/
    else
      FL0KM010.FB-LATE-BK-FL[13] = "N"; /* Default late bookings*/
    end
    ;
     /* Edit factory reason code*/
    if (FL0KM010.XFRCD[13] == "  ") /* blank factory reason code*/
      set FL0KM010.XFRCD[13] cursor, modified, bold;
      converseLib.validationFailed(8); /* Required field - please enter*/
    else
      FL0KW00.XFRCD = FL0KM010.XFRCD[13];
      FL0K510(); /* edit factory reason code*/
      if (FL0KW00.FL0KWFRF == "N") /* valid xfrcd fl*/
        set FL0KM010.XFRCD[13] cursor, modified, bold;
        converseLib.validationFailed(10); /* invalid field*/
      end
    end
    ;
     /* Edit factory code*/
    if (FL0KM010.FY1FCTYC[13] == "  ") /* blank factory code*/
      set FL0KM010.FY1FCTYC[13] cursor, modified, bold;
      converseLib.validationFailed(8); /* Required field - please enter*/
    else
      if (FL0KM010.FY1FCTYC[13] == "X  ") /* 'x  ' factory code*/
        FL0KW00.FY1FCTYC = "   ";
      else
        FL0KW00.FY1FCTYC = FL0KM010.FY1FCTYC[13];
        FL0K520(); /* edit factory code*/
        if (FL0KW00.FL0KWFF == "N") /* invalid factory fl*/
          set FL0KM010.FY1FCTYC[13] cursor, modified, bold;
          converseLib.validationFailed(10); /* invalid field*/
        end
      end
    end
    ;
     /* Edit quantity*/
    if (FL0KM010.FL0KMQTY[13] == 0) /* zero qty*/
      set FL0KM010.FL0KMQTY[13] cursor, modified, bold;
      converseLib.validationFailed(8); /* Required field - please enter*/
    end
    ;
    /* ---------------------------*/
     /* Edit for tolerance*/
    /* ---------------------------*/
    ;
    if (FL0KM010.FL0KMTYP[13] == "STK"
     && FL0KM010.PC2CUXID[13] != FL0KW00.FL0KW-EURO-XREF)
      FL0KW00.FL0KW-USA-STK-FL = "Y";
    else
      FL0KW00.FL0KW-USA-STK-FL = "N";
    end
    ;
     /* Edit for USA tolerance*/
    ;
    if (FL0KM010.FL0KMTYP[13] == "DRS" /* direct ship*/
     || FL0KW00.FL0KW-USA-STK-FL == "Y")
       /* Get the net change qty*/
      FL0KW00.FL0KWNET = 0 - FL0KM010.FL0KMQTY[13];
       /* Combine the net change qty with the forecast error qty*/
      FL0KW00.FL0KWFER = FL0KW00.FL0KWFER + FL0KW00.FL0KWNET;
       /* Check to see if the new forecast error qty is*/
       /* within the acceptable tolerance defined in vfmctl01*/
      if (FL0KW00.FL0KWFER < FL0KW00.FB9BTQTY) /* Below tolerance*/
        if (FL0KW00.FL0KWEP != "Y") /* Not Pending update*/
          set FL0KM010.FL0KMQTY[13] cursor, modified, bold;
          converseLib.validationFailed(335); /* Below tolerance*/
          FL0KW00.FL0KWEP = "Y"; /* Error, update is pending*/
        else
          FL0KW00.FL0KWEP = "N"; /* Error, update is pending*/
        end
      end
    else
       /* Edit for Euro tolerance*/
      if (FL0KM010.FL0KMTYP[13] == "EUR" /* Europe order*/
       || (FL0KM010.FL0KMTYP[13] == "STK"
       && FL0KW00.FL0KW-USA-STK-FL != "Y"))
         /* Get the net change qty*/
        FL0KW00.FL0KWNET = 0 - FL0KM010.FL0KMQTY[13];
         /* Combine the net change qty with the forecast error qty*/
        FL0KW00.FL0KW-EURO-FCST-ERR-QTY = FL0KW00.FL0KW-EURO-FCST-ERR-QTY + FL0KW00.FL0KWNET;
         /* Check to see if the new forecast error qty is*/
         /* within the acceptable tolerance defined in vfmctl01*/
        if (FL0KW00.FL0KW-EURO-FCST-ERR-QTY < FL0KW00.FB9BTQTY)
          if (FL0KW00.FL0KWEP != "Y") /* Not Pending update*/
            set FL0KM010.FL0KMQTY[13] cursor, modified, bold;
            converseLib.validationFailed(335); /* Below tolerance*/
            FL0KW00.FL0KWEP = "Y"; /* Error, update is pending*/
          else
            FL0KW00.FL0KWEP = "N"; /* Error, update is pending*/
          end
        end
      end
    end
    ;
    ;
     /* Edit buy type*/
    if (FL0KM010.FL0KMTYP[13] == "  ") /* buy type is blank*/
      set FL0KM010.FL0KMTYP[13] cursor, modified, bold;
      converseLib.validationFailed(8); /* Required field - please enter*/
    else
      if (FL0KM010.FL0KMTYP[13] != "STK" /* valid buy type*/
       && FL0KM010.FL0KMTYP[13] != "NIL" /* valid buy type*/
       && FL0KM010.FL0KMTYP[13] != "DRS" /* valid buy type*/
       && FL0KM010.FL0KMTYP[13] != "EUR" /* valid buy type*/
       && FL0KM010.FL0KMTYP[13] != "EO " /* valid buy type*/
       && FL0KM010.FL0KMTYP[13] != "PR " /* valid buy type*/
       && FL0KM010.FL0KMTYP[13] != "BLK") /* valid buy type*/
        set FL0KM010.FL0KMTYP[13] cursor, modified, bold;
        converseLib.validationFailed(10); /* invalid field*/
      end
    end
    ;
     /* Edit sales order*/
    if (FL0KM010.FL0KMTYP[13] == "DRS" /* direct ship*/
     || FL0KM010.FL0KMTYP[13] == "EUR") /* nike Europe*/
      FL0KWIX1 = 13;
      FL0KWCNT = 0; /* initialize the mso count*/
      FL0KWRCT = 0; /* initialize total record count*/
      FL0KWSOF = "N"; /* initialize the mso flag*/
      FL0KWPSW = "Y"; /* initialize single so switch*/
      FL0K590(); /* edit for multiple sales order*/
      if (FL0KW00.FL0KWSOF == "Y" /* splitting a sales order*/
       && FL0KW00.FL0KWPSW == "N" /* a multiple sales order*/
       && FL0KW00.FL0KWRCT != FL0KW00.FL0KWCNT) /* a multiple sales order*/
        set FL0KM010.OP1NORID[13] cursor, modified, bold;
        set FL0KM010.OP1CUOID[13] cursor, modified, bold;
        converseLib.validationFailed(437); /* multiple sales order msg*/
      end
      FL0K598(); /* edit for valid sales order*/
      if (FL0KM010.OP1NORID[13] <= 0) /* blank nike order id*/
        set FL0KM010.OP1NORID[13] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
      else
        FL0KW00.OP1NORID = FL0KM010.OP1NORID[13];
      end
      if (FL0KM010.OP1CUOID[13] <= 0) /* blank customer order id*/
        set FL0KM010.OP1CUOID[13] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
      else
        FL0KW00.OP1CUOID = FL0KM010.OP1CUOID[13];
      end
    end
    if (FL0KM010.FL0KMTYP[13] == "PR " /* pre-advise*/
     && FL0KM010.OP1NORID[13] > 0)     /* direct ship*/
      FL0KWIX1 = 13;
      FL0KWCNT = 0; /* initialize the mso count*/
      FL0KWRCT = 0; /* initialize total record count*/
      FL0KWSOF = "N"; /* initialize the mso flag*/
      FL0KWPSW = "Y"; /* initialize single so switch*/
      FL0K590(); /* edit for multiple sales order*/
      if (FL0KW00.FL0KWSOF == "Y" /* splitting a sales order*/
       && FL0KW00.FL0KWPSW == "N" /* a multiple sales order*/
       && FL0KW00.FL0KWRCT != FL0KW00.FL0KWCNT) /* a multiple sales order*/
        set FL0KM010.OP1NORID[13] cursor, modified, bold;
        set FL0KM010.OP1CUOID[13] cursor, modified, bold;
        converseLib.validationFailed(437); /* multiple sales order msg*/
      end
      ;
      FL0K598(); /* edit for valid sales order*/
      ;
      if (FL0KM010.OP1NORID[13] <= 0) /* blank nike order id*/
        set FL0KM010.OP1NORID[13] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
      else
        FL0KW00.OP1NORID = FL0KM010.OP1NORID[13];
      end
      ;
      if (FL0KM010.OP1CUOID[13] <= 0) /* blank customer order id*/
        set FL0KM010.OP1CUOID[13] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
      else
        FL0KW00.OP1CUOID = FL0KM010.OP1CUOID[13];
      end
    end
    ;
     /* Edit customer code*/
    if (FL0KM010.FL0KMTYP[13] == "DRS" /* direct ship*/
     || FL0KM010.FL0KMTYP[13] == "NIL" /* nike international*/
     || FL0KM010.FL0KMTYP[13] == "EUR") /* nike Europe*/
      if (FL0KM010.PC2CUXID[13] == "  ") /* blank customer code*/
        set FL0KM010.PC2CUXID[13] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
      else
        FL0KW00.PC2CUXID = FL0KM010.PC2CUXID[13];
        FL0K530(); /* edit customer code*/
        if (FL0KW00.FL0KWCUF == "N") /* valid customer fl*/
          set FL0KM010.PC2CUXID[13] cursor, modified, bold;
          converseLib.validationFailed(10); /* invalid field*/
        end
        FL0KW00.XCTCD = PC2REC.XCTCD; /* save country code*/
        FL0KW00.PC2INSEG = PC2REC.PC2INSEG;
      end
    else
      if (FL0KM010.FL0KMTYP[13] == "PR ") /* pre-advise*/
        if (FL0KM010.PC2CUXID[13] == " ")
          FL0KW00.XCTCD = "USA"; /* save country code*/
          FL0KW00.PC2INSEG = "000";
        else
          set PC2REC empty;
          PC2REC.XGPCD = COMMAREA.XGPCD;
          PC2REC.PC2CUXID = FL0KM010.PC2CUXID[13];
          FL0KS-01-IO3340-S(); /* Select DPRODC.VPRDCU01*/
          FL0KW00.XCTCD = PC2REC.XCTCD; /* Save country code*/
          FL0KW00.PC2INSEG = PC2REC.PC2INSEG;
        end
        ;
        if (FL0KM010.OP1NORID[13] > 0) /* direct ship*/
          if (FL0KM010.PC2CUXID[13] == "  ") /* blank customer code*/
            set FL0KM010.PC2CUXID[13] cursor, modified, bold;
            converseLib.validationFailed(8); /* Required field - please enter*/
          else
            FL0KW00.PC2CUXID = FL0KM010.PC2CUXID[13];
            FL0K530(); /* edit customer code*/
            if (FL0KW00.FL0KWCUF == "N") /* valid customer fl*/
              set FL0KM010.PC2CUXID[13] cursor, modified, bold;
              converseLib.validationFailed(10); /* invalid field*/
            end
            FL0KW00.XCTCD = PC2REC.XCTCD; /* save country code*/
            FL0KW00.PC2INSEG = PC2REC.PC2INSEG;
          end
        end
      else
        if (FL0KM010.FL0KMTYP[13] == "STK") /* stock buy*/
          ;
          if (FL0KM010.PC2CUXID[13] == FL0KW00.FL0KW-EURO-XREF)
            set PC2REC empty;
            PC2REC.XGPCD = COMMAREA.XGPCD;
            PC2REC.PC2CUXID = FL0KM010.PC2CUXID[13];
            FL0KS-01-IO3340-S(); /* Select DPRODC.VPRDCU01*/
            FL0KW00.XCTCD = PC2REC.XCTCD; /* Save country code*/
            FL0KW00.PC2INSEG = PC2REC.PC2INSEG;
          else
            FL0KW00.XCTCD = "USA"; /* save country code*/
            FL0KW00.PC2INSEG = "000";
          end
          ;
          if (FL0KM010.OP1NORID[13] != 0) /* non-blank nike order id*/
            set FL0KM010.OP1NORID[13] cursor, modified, bold;
            converseLib.validationFailed(10); /* invalid field*/
          end
          ;
          if (FL0KM010.OP1CUOID[13] != 0) /* non-blank cust order id*/
            set FL0KM010.OP1CUOID[13] cursor, modified, bold;
            converseLib.validationFailed(10); /* invalid field*/
          end
          ;
          if (FL0KM010.PC2CUXID[13] != "  "
           && FL0KM010.PC2CUXID[13] != FL0KW00.FL0KW-EURO-XREF)
            set FL0KM010.PC2CUXID[13] cursor, modified, bold;
            converseLib.validationFailed(10); /* invalid field*/
          end
        else
          if (FL0KM010.FL0KMTYP[13] == "BLK") /* bulk  buy*/
            if (FL0KM010.PC2CUXID[13] == "  ") /* blank customer code*/
              set FL0KM010.PC2CUXID[13] cursor, modified, bold;
              converseLib.validationFailed(8); /* Required field - please enter*/
            else
              FL0KW00.PC2CUXID = FL0KM010.PC2CUXID[13];
              FL0K530(); /* edit customer code*/
              if (FL0KW00.FL0KWCUF == "N") /* valid customer fl*/
                set FL0KM010.PC2CUXID[13] cursor, modified, bold;
                converseLib.validationFailed(10); /* invalid field*/
              end
              FL0KW00.XCTCD = PC2REC.XCTCD; /* save country code*/
              FL0KW00.PC2INSEG = PC2REC.PC2INSEG;
            end
            if (FL0KM010.OP1NORID[13] != 0) /* non-blank nike order id*/
              set FL0KM010.OP1NORID[13] cursor, modified, bold;
              converseLib.validationFailed(10); /* invalid field*/
            end
            if (FL0KM010.OP1CUOID[13] != 0) /* non-blank cust order id*/
              set FL0KM010.OP1CUOID[13] cursor, modified, bold;
              converseLib.validationFailed(10); /* invalid field*/
            end
          end
        end
      end
    end
    /* ---------------------------*/
    /* edit for trade restrictions*/
    /* ---------------------------*/
    ;
    if (FL0KM010.FL0KMTYP[13] == "NIL" /* If NIL*/
     || FL0KM010.FL0KMTYP[13] == "EUR" /* or EUR*/
     || FL0KM010.FL0KMTYP[13] == "BLK" /* or BLK*/
     || (FL0KM010.FL0KMTYP[13] == "STK"
     && FL0KM010.PC2CUXID[13] == FL0KW00.FL0KW-EURO-XREF))
      if (FL0KW00.FL0KWROS == "N") /* and not trade restrict override*/
        FL0KW00.FYBOXCC = FY1REC.XCTCD; /* origin xctcd*/
        FL0KW00.FYBDXCC = PC2REC.XCTCD; /* dest xctcd*/
      end
    else
      FL0KW00.FYBOXCC = FY1REC.XCTCD; /* origin xctcd*/
      FL0KW00.FYBDXCC = "USA"; /* dest xctcd*/
    end
    ;
    FL0K560(); /* select set csr for dfcty.vtrdrs01*/
    ;
    FL0KW00.FL0KWCSW = "N"; /* csr switch*/
    FL0KW00.FL0KWTRS = "N"; /* trade restriction switch*/
    ;
    while (FL0KW00.FL0KWCSW == "N" /* while not end of csr*/
     && FL0KW00.FL0KWTRS == "N") /* and no trade restriction*/
      ;
      FL0K570(); /* fetch dfcty.vtrdrs01*/
      ;
    end
    ;
    FL0K580(); /* close dfcty.vtrdrs01*/
    ;
    if (FL0KW00.FL0KWTRS == "Y") /* trade restrictions exist*/
      if (FL0KW00.FL0KWROS == "N") /* & not trd rest override*/
        set FL0KM010.FY1FCTYC[13] cursor, modified, bold;
        converseLib.validationFailed(384); /* trade restrictions exist*/
      end
    end
    ;
    ;
    ;
    FL0K540(); /* get summary gender age code*/
    ;
    ;
    ;
    FL0K550(); /* Check for a duplicate record*/
  end
  ;
  ;
  if (FL0KM010.XFRCD[13] != "  "    /* blank factory reason code*/
   || FL0KM010.FY1FCTYC[13] != "  " /* blank factory code*/
   || FL0KM010.FL0KMQTY[13] != 0    /* zero qty*/
   || FL0KM010.FL0KMTYP[13] != "  " /* buy type is blank*/
   || FL0KM010.PC2CUXID[13] != "  " /* blank customer code*/
   || FL0KM010.OP1CUOID[13] != 0    /* blank cust order id*/
   || FL0KM010.OP1NORID[13] != 0)   /* blank nike order id*/
    if (FL0KM010.FL0KMSEL[13] == " ")
      set FL0KM010.FL0KMSEL[13] cursor, modified, bold;
      converseLib.validationFailed(8); /* Required field - please enter*/
    end
    ;
  end
  ;
  if (FL0KM010.FL0KMSEL[13] != "A"
   && FL0KM010.FL0KMSEL[13] != " ")
    set FL0KM010.FL0KMSEL[13] cursor, modified, bold;
    converseLib.validationFailed(10); /* invalid field*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If no data was read in, add is not legal*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KW00.FL0KWQ == "N" /* No model found*/
   && FL0KM010.FL0KMSEL[13] == "A")
    set FL0KM010.FL0KMSEL[13] cursor, modified, bold;
    converseLib.validationFailed(10); /* invalid field*/
  end
  ;
  ;
end // end FL0K502

// Verify factory reason code
Function FL0K510()
  ;
   /* ------------------------------------------------------------*/
   /* Verify the Factory Reason Code*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0KW00.XFRCD in XFRTBL.XFRCD /* Code in table*/
   && XFRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FL0KW00.FL0KWFRF = "Y"; /* valid xfrcd fl*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FL0KW00.FL0KWFRF = "N"; /* valid xfrcd fl*/
    ;
  end
  ;
  ;
end // end FL0K510

// Verify factory code
Function FL0K520()
  ;
   /* ------------------------------------------------------------*/
   /* Verify the Factory Code*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  set FY1REC empty;
  FY1REC.FY1FCTYC = FL0KW00.FY1FCTYC;
  FY1REC.XGPCD = COMMAREA.XGPCD;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL0KW00.FL0KWFF = "Y"; /* valid factory code fl*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* factory not found*/
      FL0KW00.FL0KWFF = "N"; /* valid factory code fl*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "520"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
end // end FL0K520

// Verify customer xref code
Function FL0K530()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table row using gpc and cust xref cd*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  set PC2REC empty;
  PC2REC.XGPCD = COMMAREA.XGPCD;
  PC2REC.PC2CUXID = FL0KW00.PC2CUXID; /* customer xref*/
  ;
  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FL0KW00.FL0KWCUF = "Y"; /* Valid customer flag*/
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FL0KW00.FL0KWCUF = "N"; /* Valid customer flag*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0K530"; /* Process name*/
  TA1REC.TA1LOC = "SEL TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "530"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0K530

// Get summary gender/age code
Function FL0K540()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table from the summary codes table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  set YSMREC empty;
  YSMREC.YSMTBLPF = "XGA"; /* table prefix*/
  YSMREC.YSMSYSPF = "FL"; /* system prefix*/
  YSMREC.YSMSUMID = 1; /* summary code id*/
  YSMREC.YSMSRCVL = PG2REC.XGACD; /* source code value*/
  ;
  try
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FL0KW00.YSMXGA = YSMREC.YSMSUMCD; /* summary gender/age code*/
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FL0KW00.YSMXGA = "  "; /* summary gender/age code*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0K540"; /* Process name*/
  TA1REC.TA1LOC = "SEL TABLE ROW";
  TA1REC.TA1DBASE = "DCORP.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "540"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0K540

// Check for duplicate record
Function FL0K550()
  ;
  ;
  ;
   /* Check for inserting a duplicate record*/
  ;
  ;
  ;
  set FBDREC empty;
  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.FB8BUYDT = FLWREC.FB8BUYDT; /* buy date*/
  FBDREC.FBAMDNBR = FL0KM010.FBAMDNBR; /* model number*/
  ;
  if (FL0KM010.FY1FCTYC[13] == "X  ") /* loading a blank fcty*/
    FBDREC.FY1FCTYC = "   "; /* blank factory code*/
  else
    FBDREC.FY1FCTYC = FL0KM010.FY1FCTYC[13]; /* factory code*/
  end
  ;
  FBDREC.PC2CUXID = FL0KM010.PC2CUXID[13]; /* customer xref*/
  ;
  if (FL0KM010.FL0KMTYP[13] == "DRS" /* direct ship*/
   || FL0KM010.FL0KMTYP[13] == "NIL" /* nike international*/
   || FL0KM010.FL0KMTYP[13] == "EUR") /* nike Europe*/
    FL0KW00.FL0KWCID = FL0KM010.OP1CUOID[13]; /* move last num*/
    FBDREC.OP1PARTN = FL0KW00.FL0KWPCH; /* cust part char*/
  end
  FBDREC.OP1CUOID = FL0KM010.OP1CUOID[13]; /* cust order id*/
  FBDREC.OP1NORID = FL0KM010.OP1NORID[13]; /* nike order id*/
  FBDREC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
  FBDREC.XDMCD = FL0KM010.XDMCD; /* deminsion*/
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.PC2INSEG = FL0KW00.PC2INSEG; /* pc_cu_in_seg_cd*/
  FBDREC.XPGCD = "00"; /* package type code*/
  FBDREC.FBDBTCD = FL0KM010.FL0KMTYP[13];
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the vflqtb01*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3460" ("SB", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found, not a duplicate*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code, duplicate found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Multiple rows (should never happen)*/
      set FL0KM010.FL0KMSEL[13] cursor, modified, bold;
      converseLib.validationFailed(319); /* duplicate row*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "550"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT              ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end FL0K550

// select vtrdrs01 cursor
Function FL0K560()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FYBREC empty; /* clear ws record*/
  ;
  FYBREC.XGPCD = "02"; /* gpc code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2800" ("S1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "560"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VTRDRS01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K560

// fetch vtrdrs01 cursor
Function FL0K570()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the flqtb table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2800" ("N1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FL0KW00.FYBOXCC == FYBREC.FYBOXCC /* orig ctry equal*/
       && FL0KW00.FYBDXCC == FYBREC.FYBDXCC) /* dest ctry eqal*/
        ;
        FL0KW00.FL0KWTRS = "Y"; /* trade restriction*/
        ;
      end
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FL0KW00.FL0KWCSW = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "570"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VTRDRS01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K570

// close vtrdrs01 cursor
Function FL0K580()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows for flqtb*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2800" ("C1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "580"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VTRDRS01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K580

// obtain data to display
Function FL0K590()
   /* ------------------------------------------------------------*/
   /* Multiple sales order edit check*/
   /* ------------------------------------------------------------*/
  ;
  FL0K592(); /* Select set and open cursor*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Perform prime fetch*/
   /* ------------------------------------------------------------*/
  ;
  FL0K594(); /* Fetch first row*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the data until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0KW00.FL0KWCSW == "N") /* Until end of cursor*/
    FL0K594(); /* Fetch selected rows*/
    ;
    ;
  end
  ;
  ;
  FL0K596(); /* Close the selected set cursor*/
  ;
  ;
  ;
  ;
end // end FL0K590

// select set and open cursor
Function FL0K592()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FL0KW00.FL0KWCSW = "N"; /* End of cursor switch*/
  set FBDREC empty; /* Clear row storage area*/
  ;
  if (FL0KM010.SY1STNBR > 1) /* if an in line product*/
    if (FL0KM010.SY2CLRID == " ") /* color code not entered*/
      FL0KM010.SY2CLRID = "00"; /* move default value to map*/
    end
    ;
    if (FL0KM010.XDMCD == " ") /* dimension code not entered*/
      FL0KM010.XDMCD = "00"; /* move default value to map*/
    end
  end
  ;
  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.FBAMDNBR = FL0KM010.FBAMDNBR; /* model number*/
  FBDREC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0KM010.SY2CLRID; /* color code*/
  FBDREC.XDMCD = FL0KM010.XDMCD; /* dimension code*/
  FBDREC.FBDBTCD = FL0KM010.FL0KMTYP[13]; /* buy type code*/
  FBDREC.PC2CUXID = FL0KM010.PC2CUXID[13]; /* cust xref*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("S5", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "592"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET 5 OF FLQTB ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K592

// fetch next mso row
Function FL0K594()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the flqtb table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("N5", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0KW00.FL0KWRCT = FL0KW00.FL0KWRCT + 1; /* total record cnt*/
      if (FL0KM010.OP1CUOID[13] == FBDREC.OP1CUOID /* cust ord id*/
       && FL0KM010.OP1NORID[13] == FBDREC.OP1NORID) /* nike ord id*/
        /* trying to split a multiple so*/
        if (FL0KM010.FY1FCTYC[13] == FBDREC.FY1FCTYC) /* different fctys*/
            /* there is a duplicate row*/
          return; /* Return to previous process*/
        else
          FL0KW00.FL0KWSOF = "Y"; /* trying to split a multiple so*/
          return; /* Return to previous process*/
        end
        ;
      else
        FL0KW00.FL0KWPSW = "N"; /* it is a multiple so*/
        FL0KW00.FL0KWCNT = FL0KW00.FL0KWCNT + 1; /* multiple so cnt*/
        return; /* Return to previous process*/
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FL0KW00.FL0KWCSW = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "594"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT 5 FLQTB ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K594

// close flqtb cursor
Function FL0K596()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows for flqtb*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("C5", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "596"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE FLQTB 5 SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K596

// Check for valid Sales Order
Function FL0K598()
  ;
  ;
  ;
   /* Check for valid sales order number*/
  ;
  ;
  ;
  set FBHREC empty;
  FL0KW00.FL0KWCID = FL0KM010.OP1CUOID[13]; /* move last num*/
  FBHREC.OP1PARTN = FL0KW00.FL0KWPCH; /* cust part char*/
  FBHREC.OP1CUOID = FL0KM010.OP1CUOID[13]; /* cust order id*/
  FBHREC.OP1NORID = FL0KM010.OP1NORID[13]; /* nike order id*/
  FBHREC.PC2CUXID = FL0KM010.PC2CUXID[13]; /* customer xref*/
  FBHREC.FB8BUYDT = FLWREC.FB8BUYDT; /* buy date*/
  FBHREC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
  FBHREC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
  FBHREC.XDMCD = FL0KM010.XDMCD; /* deminsion*/
  FBHREC.XQACD = "01"; /* quality code*/
  FBHREC.XPGCD = "00"; /* package type code*/
  FBHREC.XUMCD = "01"; /* unit of measure code*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the row from the vdnord01*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4640" ("SC", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code, duplicate found*/
      if (FL0KM010.FL0KMTYP[13] == "NIL" /* Invalid nil order*/
       && FBHREC.XDVCD != "02")          /* Division should be 02*/
        set FL0KM010.FL0KMTYP[13] cursor, modified, bold;
        converseLib.validationFailed(450); /* invalid buy type for sales order*/
        return; /* Return to previous process*/
      end
      if (FL0KM010.FL0KMTYP[13] == "DRS" /* Invalid nil order*/
       && FBHREC.XDVCD == "02")          /* Division should not be 02*/
        set FL0KM010.FL0KMTYP[13] cursor, modified, bold;
        converseLib.validationFailed(450); /* invalid buy type for sales order*/
        return; /* Return to previous process*/
      end
      if (FL0KM010.FL0KMTYP[13] == "EUR" /* Invalid nil order*/
       && FBHREC.XDVCD != "02")          /* Division should be 02*/
        set FL0KM010.FL0KMTYP[13] cursor, modified, bold;
        converseLib.validationFailed(450); /* invalid buy type for sales order*/
        return; /* Return to previous process*/
      end
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found, not a duplicate*/
      if (FL0KM010.FL0KMTYP[13] == "PR "
       && FL0KM010.OP1CUOID[13] == FL0KW00.FL0KW-SAVE-PR-CUST-ORD-ID
       && FL0KM010.OP1NORID[13] == FL0KW00.FL0KW-SAVE-PR-NIKE-ORD-ID)
        return;
      else
        set FL0KM010.OP1NORID[13] cursor, modified, bold;
        set FL0KM010.OP1CUOID[13] cursor, modified, bold;
        converseLib.validationFailed(449); /* invalid sales order number*/
        return; /* Return to previous process*/
      end
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "598"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT              ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBHREC.FBHGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
end // end FL0K598

// Process valid input request
Function FL0K600()
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* if edits failed*/
    return; /* return to display the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* check to see if merge is executing and causing contention*/
   /* on db2 tables.*/
   /* ------------------------------------------------------------*/
  ;
  FL0K605(); /* check for contention*/
  ;
  if (converseVar.eventKey is pf20) /* submit update job*/
    ;
    /* ------------------------------------------------------------*/
    /* determine which environment the program is executing in:*/
    /* development or production.*/
    /* ------------------------------------------------------------*/
    ;
    FL0K607(); /* determine region*/
    ;
    /* ------------------------------------------------------------*/
    /* load parameter data into working storage record & submit*/
    /* test or production jcl.*/
    /* ------------------------------------------------------------*/
    ;
    set FL0KW03 empty; /* clear parameters rec*/
    FL0KW03.FL0KW-MDL-NBR = FL0KM010.FBAMDNBR; /* model nbr*/
    FL0KW03.FL0KW-LOCK-TBLS-FL = "N"; /* lock tables flag*/
    ;
    set TA6REC empty; /* init ta6rec*/
    ;
    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* Production region*/
      FL0K608(); /* submit production report*/
    else
      FL0K609(); /* submit test report*/
    end
    ;
    FL0KW00.FL0KWSWF = "Y"; /* format the map*/
    ;
  else
    /* ------------------------------------------------------------*/
    /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/
    ;
    XX0XS01(); /* Obtain date and time*/
    ;
    /* ------------------------------------------------------------*/
    /* Process adds, changes and deletes*/
    /* ------------------------------------------------------------*/
    ;
    FL0KW00.FL0KWUR = "N"; /* update was requested fl*/
    FL0KW00.FL0KWIX1 = 8; /* General index 1*/
    while (FL0KW00.FL0KWIX1 <= 13)
      ;
      if (FL0KM010.FL0KMSEL[FL0KWIX1] == "A") /* Request for add*/
        ;
        FL0KW00.FL0KWUR = "Y"; /* update was requested fl*/
        FL0K640(); /* insert audit row for add*/
        FL0K610(); /* insert vflqtb01 row*/
        ;
      else
        if (FL0KM010.FL0KMSEL[FL0KWIX1] == "C") /* Request for change*/
          ;
          FL0KW00.FL0KWUR = "Y"; /* update was requested fl*/
          ;
          FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 - 7;
         /* OVE FL0KM010.FL0KMQTY(FL0KWIX2) TO FL0KW02.FBDQTB;*/
          FL0KW02.FBDQTB = FL0KM010.FL0KMQTY[FL0KWIX1];
          FL0KW02.FBDQTB = FL0KW02.FBDQTB - FL0KW00.FL0KWPQT[FL0KWIX2];
          if (FL0KW02.FBDQTB != 0) /* insrt audit if qty changed*/
            FL0K650(); /* insert audit row for change*/
          end
          ;
          FL0K620(); /* update vflqtb01 row*/
          ;
        else
          if (FL0KM010.FL0KMSEL[FL0KWIX1] == "D") /* Request for delete*/
            ;
            FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 - 7;
            FL0KW00.FL0KWUR = "Y"; /* update was requested fl*/
            FL0K660(); /* insert audit row for delete*/
            FL0K630(); /* delete vflqtb01 row*/
            ;
          end
        end
      end
      ;
      FL0KW00.FL0KWIX1 = FL0KW00.FL0KWIX1 + 1; /* Increment index 1*/
    end
    ;
    ;
    /* ------------------------------------------------------------*/
    /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0KW00.FL0KWUR == "Y") /* update was requested fl*/
      set FL0KM010 initial;
      set FL0KW01 empty;
      FL0KW00.FL0KWSWR = "Y"; /* request for data sw*/
      FL0KW00.FL0KWSWF = "Y"; /* map must be formatted*/
      FL0KW00.FL0KWQ = "N"; /* vflqtb01 row was found sw*/
      FL0KW00.FL0KWEP = "N"; /* Pending update/tolerance error*/
      FL0KW00.FL0KWROS = "N"; /* restriction override switch*/
      FL0KW00.FL0KWTRS = "N"; /* trade restrictions exist switch*/
      FL0KW00.FBDTOQTB = 0; /* Total fcst qtb*/
      FL0KW00.FL0KMDNQ = 0; /* Total direct ship qty*/
      FL0KW00.FL0KW-EURO-FCST-QTB = 0; /* Euro fcst*/
      FL0KW00.FL0KW-EURO-TOTAL-BUY = 0;
      FL0KW00.FL0KW-EUR-QTB = 0; /* EUR qty to buy*/
      FL0KW00.FL0KWTB = 0; /* vflqtb01 total buy*/
      FL0KW00.TA5TSQIX = 0; /* highest ts page*/
      FLWREC.XXXMODID = "600"; /* Module identification*/
      converseLib.validationFailed(32); /* Table update was completed*/
      ;
      ;
      ;
      /* ------------------------------------------------------------*/
      /* Commit all changes to protected resources.*/
      /* ------------------------------------------------------------*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all changes*/
      ;
    end
  end
  ;
  ;
end // end FL0K600

// check for merge contention
Function FL0K605()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty;
  ;
  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        FLWREC.XXXMODID = "605"; /* module identification*/
        exit stack; /* return to process*/
      end
    else
      ;
      ;
      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      FLWREC.XXXMODID = "605"; /* Module identification*/
      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(01); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end
  ;
  ;
end // end FL0K605

// get region information
Function FL0K607()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  ;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
end // end FL0K607

// Process prod JCL
Function FL0K608()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FL0KW00.FL0KW-JCL-TBL-IX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0KW00.FL0KW-JCL-TBL-IX > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0KT01.TARTYPE[FL0KW-JCL-TBL-IX] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0KW03.FL0KW-PARM;
      TA6REC.TARTYPE[TA6INDEX] = FL0KT01.TARTYPE[FL0KW-JCL-TBL-IX];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0KT01.TARJCL[FL0KW-JCL-TBL-IX]; /* jcl row*/
      TA6REC.TARTYPE[TA6INDEX] = FL0KT01.TARTYPE[FL0KW-JCL-TBL-IX];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0KT01.TARJCL[FL0KW-JCL-TBL-IX] == "/*EOF") /* End of table*/
      ;
      FL0KW00.FL0KW-JCL-TBL-IX = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0KW00.FL0KW-JCL-TBL-IX = FL0KW00.FL0KW-JCL-TBL-IX + 1; /* Incrmt*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FLWREC.XXXMODID = "608"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "608"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K608

// Process test JCL
Function FL0K609()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FL0KW00.FL0KW-JCL-TBL-IX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0KW00.FL0KW-JCL-TBL-IX > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0KTT1.TARTYPE[FL0KW-JCL-TBL-IX] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0KW03.FL0KW-PARM;
      TA6REC.TARTYPE[TA6INDEX] = FL0KTT1.TARTYPE[FL0KW-JCL-TBL-IX];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0KTT1.TARJCL[FL0KW-JCL-TBL-IX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0KTT1.TARTYPE[FL0KW-JCL-TBL-IX];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0KTT1.TARJCL[FL0KW-JCL-TBL-IX] == "/*EOF") /* End of table*/
      ;
      FL0KW00.FL0KW-JCL-TBL-IX = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0KW00.FL0KW-JCL-TBL-IX = FL0KW00.FL0KW-JCL-TBL-IX + 1; /* Incrmt*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FLWREC.XXXMODID = "609"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "609"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K609

// Insert vflqtb01 row
Function FL0K610()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
  set FBDREC empty;
  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.FB8BUYDT = FLWREC.FB8BUYDT; /* buy date*/
  FBDREC.FBAMDNBR = FL0KM010.FBAMDNBR; /* model number*/
  FBDREC.PC2CUXID = FL0KM010.PC2CUXID[13]; /* customer xref*/
  ;
  if (FL0KM010.FL0KMTYP[13] == "DRS" /* direct ship*/
   || FL0KM010.FL0KMTYP[13] == "NIL" /* nike international*/
   || FL0KM010.FL0KMTYP[13] == "EUR") /* nike european*/
    FL0KW00.FL0KWCID = FL0KM010.OP1CUOID[13]; /* getting ord part char*/
                                  /* MOVE FL0KM010.OP1CUOID(13) TO*/
                                   /* FL0KW00.FL0KWCID; /* get the ord part*/
                                   /* char*/
    FBDREC.OP1PARTN = FL0KW00.FL0KWPCH; /* order part character*/
  end
  if (FL0KM010.FL0KMTYP[13] == "PR " /* direct ship pre-advise*/
   && FL0KM010.OP1CUOID[13] > 0)    
    FL0KW00.FL0KWCID = FL0KM010.OP1CUOID[13]; /* getting ord part char*/
                                  /* MOVE FL0KM010.OP1CUOID(13) TO*/
                                   /* FL0KW00.FL0KWCID; /* get the ord part*/
                                   /* char*/
    FBDREC.OP1PARTN = FL0KW00.FL0KWPCH; /* order part character*/
  end
  FBDREC.OP1CUOID = FL0KM010.OP1CUOID[13]; /* cust ord id*/
  FBDREC.OP1NORID = FL0KM010.OP1NORID[13]; /* nike id*/
  FBDREC.OP2LNINB = FBHREC.OP2LNINB; /* line item nbr*/
  FBDREC.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
  FBDREC.XDMCD = FL0KM010.XDMCD; /* deminsion*/
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.PC2INSEG = FL0KW00.PC2INSEG; /* pc_cu_in_seg_cd*/
  FBDREC.XPGCD = "00"; /* package type code*/
  FBDREC.XUMCD = PG2REC.XUMCD; /* unit of measure*/
  FBDREC.XCNCD = PG2REC.XCNCD; /* construction code*/
  FBDREC.YSMXGA = FL0KW00.YSMXGA; /* summary g/a code*/
  FBDREC.FBDBTCD = FL0KM010.FL0KMTYP[13];
  if (FBDREC.OP1CUOID > 0) /* cust ord id*/
    if (FL0KM010.FL0KMTYP[13] == "DRS"  /* direct ship*/
     || FL0KM010.FL0KMTYP[13] == "NIL"  /* nil*/
     || FL0KM010.FL0KMTYP[13] == "EUR"  /* eur*/
     || FL0KM010.FL0KMTYP[13] == "PR "  /* pre-advise*/
     || (FL0KM010.FL0KMTYP[13] == "STK" /* Non-USA stk*/
     && FL0KM010.PC2CUXID[13] == FL0KW00.FL0KW-EURO-XREF))
      FBDREC.XCTCD = FL0KW00.XCTCD; /* Destination country*/
    else
      FBDREC.XCTCD = "USA"; /* Destination country*/
    end /**/
  else
    if (FBDREC.OP1CUOID == 0)
      if (FL0KM010.FL0KMTYP[13] == "EO " /* stock early order*/
       || FL0KM010.FL0KMTYP[13] == "STK" /* stock buy*/
       || FL0KM010.FL0KMTYP[13] == "PR ") /* stock preadvise*/
        ;
        if (FL0KM010.PC2CUXID[13] != " ") /* Xref entered*/
          FBDREC.XCTCD = FL0KW00.XCTCD; /* Destination country*/
        else
          FBDREC.XCTCD = "USA"; /* Destination country*/
        end
      else
        if (FL0KM010.FL0KMTYP[13] == "BLK") /* bulk*/
          FBDREC.XCTCD = FL0KW00.XCTCD; /* Destination country*/
        end /**/
      end /**/
    end /**/
  end /**/
  FBDREC.FY2MFGPC = 0; /* fy_sty_mfg_pct*/
  FBDREC.FBDQTB = FL0KM010.FL0KMQTY[13]; /* factory qtb*/
  FBDREC.FBDTOQTB = FL0KM010.FL0KMQTY[13]; /* total orig qtb*/
  FBDREC.XFRCD = FL0KM010.XFRCD[13]; /* factory reason code*/
  FBDREC.FB-LATE-BK-FL = FL0KM010.FB-LATE-BK-FL[13]; /* Late bking fl*/
  ;
  if (FL0KM010.FB-LATE-BK-FL[13] == "Y") /* Late booking*/
    FBDREC.FB-LATE-BK-FL-MDT = XX0XW01.XX0XWDAT;
  else
    FBDREC.FB-LATE-BK-FL-MDT = 0;
  end
  ;
  if (FL0KM010.FY1FCTYC[13] == "X   ") /* check for blank factory*/
    FBDREC.FY1FCTYC = "    "; /* factory code*/
  else
    FBDREC.FY1FCTYC = FL0KM010.FY1FCTYC[13]; /* factory code*/
  end
  ;
  FBDREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Add the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("A ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FL0KW00.FL0KWSWR = "Y"; /* Request for data switch*/
      ;
      FLWREC.XXXMODID = "610"; /* Module identification*/
      FLWREC.XXXMSGNO = 12; /* Indicate updated by another*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all DB2 changes*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "610"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all DB2 changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K610

// Update vflqtb01 row
Function FL0K620()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
  FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 - 7; /* Calculate index 2*/
  FBDREC.OP1CUOID = FL0KM010.OP1CUOID[FL0KWIX1]; /* cust ord id*/
  FL0KW00.FL0KWCID = FL0KM010.OP1CUOID[FL0KWIX1]; /* get ord part cha*/
  FBDREC.OP1PARTN = FL0KW00.FL0KWPCH; /* ord proc part cha*/
  FBDREC.OP1NORID = FL0KM010.OP1NORID[FL0KWIX1]; /* nike ord id*/
  FBDREC.FBDGROUP = FL0KW01.FL0KWFLQ[FL0KWIX2];
  FBDREC.FBDQTB = FL0KM010.FL0KMQTY[FL0KWIX1]; /* factory qtb*/
  FBDREC.XFRCD = FL0KM010.XFRCD[FL0KWIX1]; /* fcty rsn code*/
  FBDREC.FB-LATE-BK-FL = FL0KM010.FB-LATE-BK-FL[FL0KWIX1]; /* Lt bk f*/
  if (FL0KM010.FB-LATE-BK-FL[FL0KWIX1] == "Y" /* Late booking now*/
   && FL0KW01.FB-LATE-BK-FL[FL0KWIX2] == "N") /* But wasn't a late booking*/
    FBDREC.XFRCD = "40"; /* Its a late bookings now*/
    FBDREC.FB-LATE-BK-FL-MDT = XX0XW01.XX0XWDAT;
  end
  ;
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("U2", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      ;
      FLWREC.XXXMODID = "620"; /* Module identification*/
      FLWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      converseLib.validationFailed(46); /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all DB2 changes*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K620

// Delete vflqtb01 row
Function FL0K630()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  set FBDREC empty;
  ;
  FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 - 7; /* SET 2ND INDEX*/
  ;
  FBDREC.FBDGROUP = FL0KW01.FL0KWFLQ[FL0KWIX2];
  ;
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("D2", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FL0KW00.FL0KWSWR = "Y"; /* Request for data switch*/
      ;
      FLWREC.XXXMODID = "630"; /* Module identification*/
      FLWREC.XXXMSGNO = 12; /* Indicate updated by another*/
      ;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all DB2 changes*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "D2 DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K630

// insert audit rec for add
Function FL0K640()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0KW02 empty;
  ;
  FL0KW02.FBDMDTYP = "FL1"; /* model type*/
  FL0KW02.FB8BUYDT = FLWREC.FB8BUYDT; /* buy date*/
  FL0KW02.FBAMDNBR = FL0KM010.FBAMDNBR; /* model number*/
  ;
  if (FL0KM010.FY1FCTYC[13] == "X   ") /* check for blank factory*/
    FL0KW02.FY1FCTYC = "    "; /* factory code*/
  else
    FL0KW02.FY1FCTYC = FL0KM010.FY1FCTYC[13]; /* factory code*/
  end
  ;
  FL0KW02.PC2CUXID = FL0KM010.PC2CUXID[13]; /* customer xref*/
  FL0KW02.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
  FL0KW02.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
  FL0KW02.XDMCD = FL0KM010.XDMCD; /* deminsion*/
  FL0KW02.XQACD = "01"; /* quality code*/
  FL0KW02.PC2INSEG = FL0KW00.PC2INSEG; /* pc_cu_in_seg_cd*/
  FL0KW02.XPGCD = "00"; /* package type code*/
  FL0KW02.XUMCD = PG2REC.XUMCD; /* unit of measure*/
  FL0KW02.FBDBTCD = FL0KM010.FL0KMTYP[13];
  FL0KW02.FBDQTB = FL0KM010.FL0KMQTY[13]; /* factory qtb*/
  FL0KW02.XFRCD = FL0KM010.XFRCD[13]; /* factory reason cd*/
  FL0KW02.XXXPGMNB = COMMAREA.CACURRAP; /* program number*/
  FL0KW02.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FL0KW02.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FL0KW02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* setup hhmmss*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "FL1210" ("A ", SQLCA, FL0KW02) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSRT AUDIT FOR ADD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0KW02.FL0KWGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K640

// insert audit rec for change
Function FL0K650()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
   /* FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 + 7; /* set 2nd index*/
  ;
  set FL0KW02 empty;
  ;
  FL0KW02.FBDMDTYP = "FL1"; /* model type*/
  FL0KW02.FB8BUYDT = FLWREC.FB8BUYDT; /* buy date*/
  FL0KW02.FBAMDNBR = FL0KM010.FBAMDNBR; /* model number*/
  ;
  if (FL0KM010.FY1FCTYC[FL0KWIX1] == "X   ") /* check for blank factory*/
    FL0KW02.FY1FCTYC = "    "; /* factory code*/
  else
    FL0KW02.FY1FCTYC = FL0KM010.FY1FCTYC[FL0KWIX1]; /* factory code*/
  end
  ;
  FL0KW02.PC2CUXID = FL0KM010.PC2CUXID[FL0KWIX1]; /* customer xref*/
  FL0KW02.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
  FL0KW02.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
  FL0KW02.XDMCD = FL0KM010.XDMCD; /* deminsion*/
  FL0KW02.XQACD = "01"; /* quality code*/
  FL0KW02.PC2INSEG = FL0KW01.PC2INSEG[FL0KWIX2]; /* pc_cu_in_seg_cd*/
  FL0KW02.XPGCD = "00"; /* package type code*/
  FL0KW02.XUMCD = PG2REC.XUMCD; /* unit of measure*/
  FL0KW02.FBDBTCD = FL0KM010.FL0KMTYP[FL0KWIX1]; /* buy type*/
  FL0KW02.FBDQTB = FL0KM010.FL0KMQTY[FL0KWIX1];
  FL0KW02.XFRCD = FL0KM010.XFRCD[FL0KWIX1];
  FL0KW02.FBDQTB = FL0KW02.FBDQTB - FL0KW00.FL0KWPQT[FL0KWIX2];
  FL0KW02.XXXPGMNB = COMMAREA.CACURRAP; /* program number*/
  FL0KW02.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FL0KW02.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FL0KW02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* setup hhmmss*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "FL1210" ("A ", SQLCA, FL0KW02) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "650"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSRT AUDIT FOR ADD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0KW02.FL0KWGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K650

// insert audit rec for delete
Function FL0K660()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
   /* FL0KW00.FL0KWIX2 = FL0KW00.FL0KWIX1 + 7; /* set 2nd index*/
  ;
  set FL0KW02 empty;
  ;
  FL0KW02.FBDMDTYP = "FL1"; /* model type*/
  FL0KW02.FB8BUYDT = FLWREC.FB8BUYDT; /* buy date*/
  FL0KW02.FBAMDNBR = FL0KM010.FBAMDNBR; /* model number*/
  ;
  if (FL0KM010.FY1FCTYC[FL0KWIX1] == "X   ") /* check for blank factory*/
    FL0KW02.FY1FCTYC = "    "; /* factory code*/
  else
    FL0KW02.FY1FCTYC = FL0KM010.FY1FCTYC[FL0KWIX1]; /* factory code*/
  end
  ;
  FL0KW02.PC2CUXID = FL0KM010.PC2CUXID[FL0KWIX1]; /* customer xref*/
  FL0KW02.SY1STNBR = FL0KM010.SY1STNBR; /* style number*/
  FL0KW02.SY2CLRID = FL0KM010.SY2CLRID; /* color*/
  FL0KW02.XDMCD = FL0KM010.XDMCD; /* deminsion*/
  FL0KW02.XQACD = "01"; /* quality code*/
  FL0KW02.PC2INSEG = FL0KW01.PC2INSEG[FL0KWIX2]; /* pc_cu_in_seg_cd*/
  FL0KW02.XPGCD = "00"; /* package type code*/
  FL0KW02.XUMCD = PG2REC.XUMCD; /* unit of measure*/
  FL0KW02.XFRCD = FL0KM010.XFRCD[FL0KWIX1]; /* factory reason cd*/
  FL0KW02.FBDBTCD = FL0KM010.FL0KMTYP[FL0KWIX1]; /* buy type*/
  FL0KW02.FBDQTB = -1 * FL0KM010.FL0KMQTY[FL0KWIX1];
  FL0KW02.XXXPGMNB = COMMAREA.CACURRAP; /* program number*/
  FL0KW02.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FL0KW02.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FL0KW02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* setup hhmmss*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "FL1210" ("A ", SQLCA, FL0KW02) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "660"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSRT AUDIT FOR ADD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0KW02.FL0KWGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0K660

// SELECT 'S' DPRDOC.VPRDCU01
Function FL0KS-01-IO3340-S()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table row using gpc and cust xref cd*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0KS01"; /* Process name*/
  TA1REC.TA1LOC = "SELECT S DPRODC.VPRDCU01";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "S01"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0KS-01-IO3340-S

// Get the European Forecast
Function FL0KS-02-EURO-FCST()
  set VCBBFC01 empty;
  VCBBFC01.XGP-GPC-CD = "02";
  VCBBFC01.SY-STY-NBR = FL0KM010.SY1STNBR;
  VCBBFC01.SY-COLR-CD-ID = FL0KM010.SY2CLRID;
  VCBBFC01.XDM-DIM-CD = FL0KM010.XDMCD;
  VCBBFC01.FB-BUY-DT = FLWREC.FB8BUYDT;
  VCBBFC01.PC-PRDCU-ID = FL0KW00.FL0KW-EURO-XREF;
  ;
  ;
  try
    call "IO6770" ("S ", SQLCA, VCBBFC01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0KW01.FL0KW-PRT2[FL0KWIX3] = "N"; /* Protect map row fl*/
      FL0KW01.PC2CUXID[FL0KWIX3] = VCBBFC01.PC-PRDCU-ID;
      FL0KW01.OP1CUOID[FL0KWIX3] = 0;
      FL0KW01.OP1NORID[FL0KWIX3] = 0;
      FL0KW01.FY1FCTYC[FL0KWIX3] = " ";
      FL0KW01.FL0KMTYP[FL0KWIX3] = "STK";
      FL0KW01.XFRCD[FL0KWIX3] = " ";
      FL0KW01.FL0KMQTY[FL0KWIX3] = 0;
      FL0K185(); /* Select dprodc.vprdcu01*/
      FL0KW01.XCTCD[FL0KWIX3] = PC2REC.XCTCD;
      FL0KW00.FL0KW-EURO-FCST-QTB = VCBBFC01.FF-SBMT-QTB;
      ;
           /* convert system date to mmddyy*/
      ;
      FL0KW00.FL0KWDAT = VCBBFC01.ZZ-SDT;
      FL0KW00.FL0KWZYY = FL0KW00.FL0KWYY;
      FL0KW00.FL0KWZMM = FL0KW00.FL0KWMM;
      FL0KW00.FL0KWZDD = FL0KW00.FL0KWDD;
      FL0KW01.ZZZSDT[FL0KWIX3] = FL0KW00.FL0KWZDT;
      ;
      FL0KW00.FL0KW-END-EURO-FCST-FL = "Y";
      ;
      FL0KW00.FL0KWIX3 = FL0KW00.FL0KWIX3 + 1; /* increment map index*/
      ;
      return;
      ;
    else
      ;
      FL0KW00.FL0KW-END-EURO-FCST-FL = "Y";
      if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
        FL0KW00.FL0KW-EURO-FCST-QTB = 0;
        return; /* Return to previous process*/
      end
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET EUROPEAN FCST   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCBBFC01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCBBFC01.VCBBFC01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end FL0KS-02-EURO-FCST

// Select 'S4' DFBUY.VDNORD01
Function FL0KS-03-IO4640-S4()
   /* *********************************************************/
   /* Declare a curosr on DFBUY.VDNORD01.*/
   /* *********************************************************/
  ;
  try
    call "IO4640" ("S8", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0KS03"; /* Process name*/
  TA1REC.TA1LOC = "SELECT S4 DFBUY.VDNORD01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "S03"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0KS-03-IO4640-S4

// Fetch 'N4' DFBUY.VDNORD01
Function FL0KS-04-IO4640-N4()
   /* *********************************************************/
   /* Declare a curosr on DFBUY.VDNORD01.*/
   /* *********************************************************/
  ;
  try
    call "IO4640" ("N8", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* Expected return codes*/
      FL0KW00.FL0KW-END-DNORD-NIL-FL = "Y"; /* End of csr*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0KS04"; /* Process name*/
  TA1REC.TA1LOC = "FETCH N4 DFBUY.VDNORD01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "S04"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0KS-04-IO4640-N4

// Close 'C4' DFBUY.VDNORD01
Function FL0KS-05-IO4640-C4()
   /* *********************************************************/
   /* Declare a curosr on DFBUY.VDNORD01.*/
   /* *********************************************************/
  ;
  try
    call "IO4640" ("C8", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0KS05"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE C4 DFBUY.VDNORD01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0KM010.XXXMODID = "S05"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0KS-05-IO4640-C4

// determine OA count
Function FL0KS100()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SD", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FL0KW00.FL0KW-OA-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0KS105"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FL0KS100

// determine PO count
Function FL0KS105()
   /* ------------------------------------------------------------*/
   /* Select count in DPRODC.VPOITM01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SP", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FL0KW00.FL0KW-PO-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0KS110"; /* Process name*/
  TA1REC.TA1LOC = "VPOITM01";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FL0KS105

//*** RECORD=FL0KW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0KW00 type basicRecord
  5 * char(114) ; 
    10 FL0KWQ FL0KWQ ; 
    10 FL0KWFRS FL0KWFRS ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FL0KWSWF FL0KWSWF ; 
    10 FL0KWSWR FL0KWSWR ; 
    10 FL0KWTRS FL0KWTRS ; 
    10 FL0KWROS FL0KWROS ; 
    10 FL0KWCSW FL0KWCSW ; 
    10 FL0KWUR FL0KWUR ; 
    10 FL0KWEP FL0KWEP ; 
    10 FL0KWSTK FL0KWSTK ; 
    10 FL0KWTB FL0KWTB ; 
    10 FL0KWFER FL0KWFER ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 FBDTOQTB FBDTOQTB ; 
    10 FL0KWNET FL0KWNET ; 
    10 FL0KMDNQ FL0KMDNQ ; 
    10 XFRCD XFRCD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC2CUXID PC2CUXID ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 XCTCD XCTCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 YSMXGA YSMXGA ; 
    10 FB9BTQTY FB9BTQTY ; 
    10 FL0KWFRF FL0KWFRF ; 
    10 FL0KWFF FL0KWFF ; 
    10 FL0KWCUF FL0KWCUF ; 
    10 FL0KWFSF FL0KWFSF ; 
    10 FL0KWIX1 FL0KWIX1 ; 
    10 FL0KWIX2 FL0KWIX2 ; 
    10 FL0KWIX3 FL0KWIX3 ; 
    10 FL0KWIX4 FL0KWIX4 ; 
    10 FL0KWIX5 FL0KWIX5 ; 
    10 FYBOXCC FYBOXCC ; 
    10 FYBDXCC FYBDXCC ; 
    10 FL0KWPQT FL0KWPQT [5] ; 
  5 FL0KWZDT FL0KWZDT ; 
    10 FL0KWZMM FL0KWZMM ; 
    10 FL0KWZDD FL0KWZDD ; 
    10 FL0KWZYY FL0KWZYY ; 
  5 FL0KWDAT FL0KWDAT ; 
    10 FL0KWCYM FL0KWCYM ; 
      15 FL0KW19 FL0KW19 ; 
      15 FL0KWYY FL0KWYY ; 
      15 FL0KWMM FL0KWMM ; 
      15 FL0KWDD FL0KWDD ; 
  5 FL0KW-PO-ID-MO-RNG FL0KW-PO-ID-MO-RNG ; 
    10 FL0KW-PO-CYM FL0KW-PO-CYM ; 
      15 FL0KW-PO-CCYY FL0KW-PO-CCYY ; 
        20 FL0KW-PO-19 FL0KW-PO-19 ; 
        20 FL0KW-PO-YY FL0KW-PO-YY ; 
      15 FL0KW-PO-PROD-MM FL0KW-PO-PROD-MM ; 
      15 FL0KW-PO-DELV-MM FL0KW-PO-DELV-MM ; 
  5 FL0KW-PAHDR-BUY-DT FL0KW-PAHDR-BUY-DT ; 
    10 * num(1) ; // Current CCYYMM
    10 FL0KW-PA-ORD-ADJ-BUY-MO FL0KW-PA-ORD-ADJ-BUY-MO ; 
    10 * num(2) ; // work record mm
  5 FL0KWCID FL0KWCID ; 
    10 * num(8) ; // filler
    10 FL0KWPCH num(1) ; // op_ord_part_char redefined
  5 FL0KWCNT FL0KWCNT ; 
  5 FL0KWRCT FL0KWRCT ; 
  5 FL0KWSOF FL0KWSOF ; 
  5 FL0KWPSW FL0KWPSW ; 
  5 OP1PARTN OP1PARTN ; 
  5 FL0KWFLF FL0KWFLF ; 
  5 FL0KWDNF FL0KWDNF ; 
  5 FL0KWFQF FL0KWFQF ; 
  5 FL0KW-POITM-EOF-FL FL0KW-POITM-EOF-FL ; 
  5 FL0KW-EO-PAHDR-EOF-FL FL0KW-EO-PAHDR-EOF-FL ; 
  5 FL0KW-EO-PAWRK-EOF-FL FL0KW-EO-PAWRK-EOF-FL ; 
  5 FL0KW-EO-FYPA-EOF-FL FL0KW-EO-FYPA-EOF-FL ; 
  5 FL0KW-CBBFC-EOF-FL FL0KW-CBBFC-EOF-FL ; 
  5 FL0KW-PRE-ADVISE FL0KW-PRE-ADVISE ; 
  5 FL0KWFLR FL0KWFLR ; 
  5 FL0KWDNR FL0KWDNR ; 
  5 FL0KWFQR FL0KWFQR ; 
  5 FL0KW-POITM-PRIME FL0KW-POITM-PRIME ; 
  5 FL0KW-EO-PAHDR-PRIME FL0KW-EO-PAHDR-PRIME ; 
  5 FL0KW-CBBFC-PRIME FL0KW-CBBFC-PRIME ; 
  5 FL0KW-JCL-TBL-IX FL0KW-JCL-TBL-IX ; 
  5 FL0KW-SUM-NIL-ORDER-QTY FL0KW-SUM-NIL-ORDER-QTY ; 
  5 FL0KW-MDL-NBR FL0KW-MDL-NBR ; 
    10 * num(3) ; 
    10 FL0KW-MDL-NBR-TENTHS FL0KW-MDL-NBR-TENTHS ; 
  5 FL0KW-SAVE-PR-CUST-ORD-ID FL0KW-SAVE-PR-CUST-ORD-ID ; 
  5 FL0KW-SAVE-PR-NIKE-ORD-ID FL0KW-SAVE-PR-NIKE-ORD-ID ; 
  5 FL0KW-EURO-XWHCD FL0KW-EURO-XWHCD [10] ; 
  5 FL0KW-EURO-XREF FL0KW-EURO-XREF ; 
  5 FL0KW-END-SUMCD-FL FL0KW-END-SUMCD-FL ; 
  5 FL0KW-END-EURO-FCST-FL FL0KW-END-EURO-FCST-FL ; 
  5 FL0KW-EURO-FCST-QTB FL0KW-EURO-FCST-QTB ; 
  5 FL0KW-EUR-QTB FL0KW-EUR-QTB ; 
  5 FL0KW-EURO-STK-QTB FL0KW-EURO-STK-QTB ; 
  5 FL0KW-END-DNORD-NIL-FL FL0KW-END-DNORD-NIL-FL ; 
  5 FL0KW-USA-STK-FL FL0KW-USA-STK-FL ; 
  5 FL0KW-EURO-FCST-ERR-QTY FL0KW-EURO-FCST-ERR-QTY ; 
  5 FL0KW-EURO-TOTAL-BUY FL0KW-EURO-TOTAL-BUY ; 
  5 FL0KW-OA-COUNT FL0KW-OA-COUNT ; 
  5 FL0KW-PO-COUNT FL0KW-PO-COUNT ; 
  5 FL0KW-TMP-DT FL0KW-TMP-DT ; 
    10 FL0KW-TMP-CC FL0KW-TMP-CC ; 
    10 FL0KW-TMP-YY FL0KW-TMP-YY ; 
    10 FL0KW-TMP-MM FL0KW-TMP-MM ; 
    10 FL0KW-TMP-DD FL0KW-TMP-DD ; 
  5 FL0KW-CHK-DT FL0KW-CHK-DT ; 
    10 FL0KW-CHK-CCYY FL0KW-CHK-CCYY ; 
      15 FL0KW-CHK-CC FL0KW-CHK-CC ; 
      15 FL0KW-CHK-YY FL0KW-CHK-YY ; 
    10 FL0KW-CHK-MM FL0KW-CHK-MM ; 
    10 FL0KW-CHK-DM FL0KW-CHK-DM ; 
  5 FL0KW-CHK-DTE FL0KW-CHK-DTE ; 
  5 FL0KW-FTWR-EQMT-FL FL0KW-FTWR-EQMT-FL ; 
end // end FL0KW00

//*** RECORD=FL0KW01 ****
// ------------------------------------------------------------
// temp storage for vflqtb01, vfqtbs01, and vdnord01
// ------------------------------------------------------------
// ***********************
Record FL0KW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 FL0KWGR2 FL0KWGR2 ; 
    10 FL0KW-PRT2 FL0KW-PRT2 [7] ; 
    10 PC2CUXID PC2CUXID [7] ; 
    10 OP1CUOID OP1CUOID [7] ; 
    10 FL0KWDSH FL0KWDSH [7] ; 
    10 OP1NORID OP1NORID [7] ; 
    10 FL0KMTYP FL0KMTYP [7] ; 
    10 XCTCD XCTCD [7] ; 
    10 FY1FCTYC FY1FCTYC [7] ; 
    10 XFRCD XFRCD [7] ; 
    10 FL0KMQTY FL0KMQTY [7] ; 
    10 ZZZSDT ZZZSDT [7] ; 
    10 * char(1) ; 
  5 FL0KWGR1 FL0KWGR1 ; 
    10 FL0KWPRT FL0KWPRT [5] ; 
    10 FL0KWCHG FL0KWCHG [5] ; 
    10 FL0KWFLQ FL0KWFLQ [5] ; 
      15 * char(41) ; 
      15 PC2INSEG PC2INSEG ; 
      15 * char(32) ; 
      15 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      15 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      15 * char(42) ; 
end // end FL0KW01

//*** RECORD=FL0KW02 ****
// ************************************************************
// ************** FACTORY LOAD audit table ********************
// this is the working storage section for the iomod fl1210.
// ************************************************************
// ***********************
Record FL0KW02 type basicRecord
  5 FL0KWGRP FL0KWGRP ; 
    10 FBDMDTYP FBDMDTYP ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC2CUXID PC2CUXID ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 FBDBTCD FBDBTCD ; 
    10 XFRCD XFRCD ; 
    10 FBDQTB FBDQTB ; 
    10 XXXPGMNB XXXPGMNB ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZHHMMSS ZZHHMMSS ; 
    10 XCTCD XCTCD ; 
    10 FL0KWFDT FL0KWFDT ; 
    10 FL0KWTDT FL0KWTDT ; 
end // end FL0KW02

//*** RECORD=FL0KW03 ****
// ---------------------------------------------------
// Working Storage to hold parm data passed to Fl113d.
// ---------------------------------------------------
// ***********************
Record FL0KW03 type basicRecord
  5 FL0KW-PARM FL0KW-PARM ; 
    10 FL0KW-MDL-NBR FL0KW-MDL-NBR ; 
    10 FL0KW-LOCK-TBLS-FL FL0KW-LOCK-TBLS-FL ; 
    10 * char(74) ; 
end // end FL0KW03

//*** RECORD=FL0KW08 ****
// ***************** io4640  pass record *********************
// 
//   This record contains a function, count, & sum qty to be
//   to be passed to & from io4640.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 06/30/93   ldeluh   New record.
// ***********************
Record FL0KW08 type basicRecord
  5 FL0KW-IO-PASS FL0KW-IO-PASS ; 
    10 FL0KW-IO-TASK FL0KW-IO-TASK ; 
    10 FL0KW-IO-COUNT FL0KW-IO-COUNT ; 
    10 FL0KW-IO-SUM FL0KW-IO-SUM ; 
end // end FL0KW08

//*** RECORD=VCBBFC01 ****
// *************** FOOTWEAR FACTORY LOAD/BUY SYSTEM ***********
// *************** Country Buy Bulk Forecast ******************
// 
// DB2 TABLE VIEW:     VCBBFC01
// 
// COPYLIB MEMBER:     DCL01149
// 
// I/O MODULE:         IOxxxx
// 
// KEY TO DB2 TABLE    xgp-gpc-cd
//                     cu-co-id
//                     cu-stor-id
//                     xnx-dept-id-xref
//                     fb-buy-dt
//                     sy-sty-nbr
//                     sy-colr-cd-id
//                     xdm-dim-cd
// 
// MAINTENANCE LOG:
// 
// CONTROL     DATE    NAME     COMMENT
// --------  --------  ------   -------------------------------
//           06/29/93  LDELUH   NEW RECORD DEFINITION.
// ************************
Record VCBBFC01 type basicRecord
  5 VCBBFC01-GROUP VCBBFC01-GROUP ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 CU-STOR-ID CU-STOR-ID ; 
    10 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF ; 
    10 PC-PRDCU-ID PC-PRDCU-ID ; 
    10 FB-BUY-DT FB-BUY-DT ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 XDM-DIM-CD XDM-DIM-CD ; 
    10 PC-CU-IN-SEG-CD PC-CU-IN-SEG-CD ; 
    10 FF-SBMT-QTB FF-SBMT-QTB ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VCBBFC01

// FB_BUY_DT
DataItem FB-BUY-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total direct ship
DataItem FL0KMDNQ num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FL0KMQTY int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FL0KMTYP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vcbbfc01-eof-fl
DataItem FL0KW-CBBFC-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vcbbfc01-prime-read-fl
DataItem FL0KW-CBBFC-PRIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BUY CHECK CENTURY
DataItem FL0KW-CHK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY CHECK CENTURYYEAR
DataItem FL0KW-CHK-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY CHECK DAY
DataItem FL0KW-CHK-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY CHECK DATE
DataItem FL0KW-CHK-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY CHECK DATE (COMP)
DataItem FL0KW-CHK-DTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY CHECK MONTH
DataItem FL0KW-CHK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY CHECK YEAR
DataItem FL0KW-CHK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of VDNORD NIL csr flag
DataItem FL0KW-END-DNORD-NIL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of European Fcst flag
DataItem FL0KW-END-EURO-FCST-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of Vsumcd tbl flag
DataItem FL0KW-END-SUMCD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// eo vfypa001-eof-fl
DataItem FL0KW-EO-FYPA-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// eo vpahdr01-eof-fl
DataItem FL0KW-EO-PAHDR-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// eo vpahdr01-prime-read-fl
DataItem FL0KW-EO-PAHDR-PRIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// eo vpawrk01-eof-fl
DataItem FL0KW-EO-PAWRK-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// European DRS qtby to buy
DataItem FL0KW-EUR-QTB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Euro Forecast error quantity
DataItem FL0KW-EURO-FCST-ERR-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// European fcst qty to buy
DataItem FL0KW-EURO-FCST-QTB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// European stock qty to buy
DataItem FL0KW-EURO-STK-QTB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total Euro buy from vflqtb01
DataItem FL0KW-EURO-TOTAL-BUY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// European xref (whs65)
DataItem FL0KW-EURO-XREF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// European XWH codes
DataItem FL0KW-EURO-XWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FOOTWEAR EQUIPMENT FLAG
DataItem FL0KW-FTWR-EQMT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iomod count
DataItem FL0KW-IO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FL0KW-IO-PASS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iomod sum qty
DataItem FL0KW-IO-SUM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// iomod function
DataItem FL0KW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl table index
DataItem FL0KW-JCL-TBL-IX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lock tables flag
DataItem FL0KW-LOCK-TBLS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// model number
DataItem FL0KW-MDL-NBR num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// model number tenths
DataItem FL0KW-MDL-NBR-TENTHS num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OA COUNT
DataItem FL0KW-OA-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record 19
DataItem FL0KW-PA-ORD-ADJ-BUY-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yyyymmdd
DataItem FL0KW-PAHDR-BUY-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parm record
DataItem FL0KW-PARM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record 19
DataItem FL0KW-PO-19 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current CCYY
DataItem FL0KW-PO-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO COUNT
DataItem FL0KW-PO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current CCYYMM
DataItem FL0KW-PO-CYM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record mm
DataItem FL0KW-PO-DELV-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yyyymmdd
DataItem FL0KW-PO-ID-MO-RNG num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record dd
DataItem FL0KW-PO-PROD-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yy
DataItem FL0KW-PO-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// vpoitm01-eof-fl
DataItem FL0KW-POITM-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vpoitm01-prime-read-fl
DataItem FL0KW-POITM-PRIME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pre-advise flag
DataItem FL0KW-PRE-ADVISE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Protect top map row fl
DataItem FL0KW-PRT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved preadvise cust ord id
DataItem FL0KW-SAVE-PR-CUST-ORD-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved preadvise nike ord id
DataItem FL0KW-SAVE-PR-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summed nil order qty
DataItem FL0KW-SUM-NIL-ORDER-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY TEMP CENTURY
DataItem FL0KW-TMP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY TEMP DAY
DataItem FL0KW-TMP-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY TEMP DATE
DataItem FL0KW-TMP-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY TEMP MONTH
DataItem FL0KW-TMP-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUY TEMP YEAR
DataItem FL0KW-TMP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// STK order for USA whse flag
DataItem FL0KW-USA-STK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record 19
DataItem FL0KW19 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data has changed
DataItem FL0KWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cust order id
DataItem FL0KWCID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// multiple sales order count
DataItem FL0KWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cursor switch
DataItem FL0KWCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid customer fl
DataItem FL0KWCUF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current CCYYMM
DataItem FL0KWCYM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yyyymmdd
DataItem FL0KWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record dd
DataItem FL0KWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// VDNORD01-EOF-FL
DataItem FL0KWDNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vdnord01-prime-read-fl
DataItem FL0KWDNR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FL0KWDSH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tolerance error/pending updt
DataItem FL0KWEP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date
DataItem FL0KWFDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast error quantity
DataItem FL0KWFER int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Valid factory fl
DataItem FL0KWFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VFLQTB01-EOF-FL
DataItem FL0KWFLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temp storage for vflqtb01
DataItem FL0KWFLQ char(123)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vflqtb01-prime-read-fl
DataItem FL0KWFLR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VFQTBS01-EOF-FL
DataItem FL0KWFQF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vfqtbs01-prime-read-fl
DataItem FL0KWFQR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid factory reason fl
DataItem FL0KWFRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time in to appl fl
DataItem FL0KWFRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast select fl
DataItem FL0KWFSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level item-bottom of map
DataItem FL0KWGR1 char(625)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level item - top of map
DataItem FL0KWGR2 char(253)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem FL0KWGRP char(84)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FL0KWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem FL0KWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 3
DataItem FL0KWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 4
DataItem FL0KWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 5
DataItem FL0KWIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record mm
DataItem FL0KWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// net change in qty
DataItem FL0KWNET int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous quantity
DataItem FL0KWPQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Protect bottom map row fl
DataItem FL0KWPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// single product switch
DataItem FL0KWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vflqtb01 row was found fl
DataItem FL0KWQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total records read count
DataItem FL0KWRCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// override trade restrict sw
DataItem FL0KWROS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// multiple sales order flag
DataItem FL0KWSOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Calculated stock quantity
DataItem FL0KWSTK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FL0KWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FL0KWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total buy from vflqtb01
DataItem FL0KWTB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date
DataItem FL0KWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// trade restriction switch
DataItem FL0KWTRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update was requested fl
DataItem FL0KWUR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record yy
DataItem FL0KWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system dd
DataItem FL0KWZDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system yymmdd
DataItem FL0KWZDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system mm
DataItem FL0KWZMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system yy
DataItem FL0KWZYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// vcbbfc01 group
DataItem VCBBFC01-GROUP char(51)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

