package fl0t;

import corpcom2.XX0XW01;
import corpcom3.XPFL001;
import corpcom3.XPTA0P;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB8BUYDT;
import fb.common.FB9AODT;
import fb.common.FBABDT;
import fb.common.FBASTDFL;
import fb.common.FBBGROUP;
import fb.common.FBBREC;
import fb.common.FBCLRNBR;
import fl.common.FLWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FL0T ****
// This application is part of the factory load system.
// It displays data from the LRPS parameter table,
// by schedule number, for a user-specified month.
// The user may update the standard (schedule) model flag.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  --------------------------
//          05/18/89  JNEWMA  New application.
//          08/10/93  LDELUH  Chg loadlibs for cob2.
//          09/10/93  JMCLAU  CSP4 conversion. Add smart
//                            jcl submit.
// y2kfix   12/12/97  pharwo  year 2000 compliance changes.
// *********************
Program FL0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FBBREC FBBREC; // record
  FL0TW00 FL0TW00; // record
  FL0TW01 FL0TW01; // record
  FLWREC FLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0TT01 {deleteAfterUse = yes}; // table
  use FL0TTT1 {deleteAfterUse = yes}; // table
  use FL0TM.FL0TM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Flow to Application Initialization*/
     /* ------------------------------------------------------------*/
    ;
    ;
    goto FL0T001; /* Application Initialization*/
    ;
    FL0T001: FL0T001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/
    ;
    ;
    goto FL0T002; /* Converse main process*/
    FL0T002: FL0T002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0T002; /* Converse Detail Schedule List*/
    ;
    ;
  end // end main
end // end FL0T

// Special Initialization
Function FL0T001()
   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0TW00 empty; /* Initialize working storage*/
  set FL0TW01 empty; /* Initialize map storage area*/
  set FL0TM001 initial; /* M001 input/output*/
  set SQLCA empty; /* Sql communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set TA2REC empty; /* Initialize date record*/
  set XX0XW01 empty; /* Date/time subroutine parameters*/
  COMMAREA.CAITEM = " "; /* Clear item field*/
  ;
  TA2REC.TA2GRGGN = FLWREC.FB8BUYDT; /* Sending greg date*/
  FL0TS01(); /* Validate date*/
  if (TA2REC.TA2RTNCD == 0) /* If valid date*/
    FL0TW00.FL0TWDTE = FLWREC.FB8BUYDT; /* use date passed in*/
    FL0TW00.FL0TWSWR = "Y"; /* Display data requested*/
  else /* Else*/
    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* MOVE 19000001 TO FL0TW00.FL0TWDTE;*/
    /* /* Initialize map year/month date*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    FL0TW00.FL0TWDTE = 0;
                                   /* Initialize map year/month date*/
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    FL0TW00.FL0TWSWR = "N"; /* No display data requested*/
  end
  FL0TW01.FL0TWMTH = FL0TW00.FL0TWMTH; /* buy year/month*/
  ;
  ;
end // end FL0T001

// Detail Schedule LIst
Function FL0T002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FL0T100(); /* Obtain data to display*/
  ;
  FL0T200(); /* Format and display the map*/
  ;
  FL0T300(); /* Check attention identifier*/
  ;
  FL0T400(); /* Reset fields to normal intensity*/
  ;
  FL0T500(); /* Verify the entered data*/
  ;
  FL0T600(); /* Process valid input request*/
  ;
  ;
end // end FL0T002

// Obtain data to display
Function FL0T100()
   /* ------------------------------------------------------------*/
   /* If Data was not requested of an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0TW00.FL0TWSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* IO to select and open vlrprm01*/
   /* ------------------------------------------------------------*/
  ;
  FL0T110(); /* Open cursor for vlrprm01*/
  ;
   /* ------------------------------------------------------------*/
   /* Get and store each row of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FL0TW00.FL0TWIX1 = 1; /* Initialize index (moves data to map)*/
  ;
  while (FL0TW00.FL0TWDCF != "Y" /* Not end of set*/
   && FL0TW00.FL0TWIX1 <= 10) /* and no more than ten rows retrieved*/
    ;
    FL0T120(); /* Get next vlrprm01 row*/
    ;
    if (FL0TW00.FL0TWDCF != "Y") /* Not end of set*/
      FL0T130(); /* Move buy information*/
      FL0TW00.FL0TWIX1 = FL0TW00.FL0TWIX1 + 1; /* Increment index*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* IO to close vlrprm01 set*/
   /* ------------------------------------------------------------*/
  FL0T140(); /* Close cursor for vlrprm01*/
  ;
  FL0TW00.FL0TWSWR = "N"; /* display data switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If there are no rows in the set display message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0TW00.FL0TWIX1 == 1) /* If index = 1*/
    FL0TM001.XXXMODID = "110"; /* Program number*/
    set FL0TM001.FL0TWMTH bold; /* Highlight schedule date*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FL0T100

// open cursor VFYMDL01
Function FL0T110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/
  ;
  set FBBREC empty; /* clear row storage area*/
  FL0TW00.FL0TWDCF = "N"; /* End of vlrprm01 flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the key with flwrec model type and schedule date*/
   /* ------------------------------------------------------------*/
  ;
  FL0TW00.FL0TWMTH = FL0TW01.FL0TWMTH; /* Buy year/month*/
  FBBREC.FB8BUYDT = FL0TW00.FL0TWDTE; /* Buy date*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3480" ("S1", SQLCA, FBBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FL0TM001.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VLRPRM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0TM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPRM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0TW00.FL0TWCEN; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FL0T110

// Get next VFYMDL01 row
Function FL0T120()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3480" ("N1", SQLCA, FBBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FL0TW00.FL0TWDCF = "Y"; /* Indicate  end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FL0TM001.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0TM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPRM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0TW00.FL0TWCEN; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FL0T120

// Move buy information
Function FL0T130()
   /* ------------------------------------------------------------*/
   /* Move the buy information from the returned record into*/
   /* working storage array before moving to map*/
   /* ------------------------------------------------------------*/
  ;
  FL0TW01.FBBGROUP[FL0TWIX1] = FBBREC.FBBGROUP; /* Rec detail line*/
  if (FBBREC.FBASTDFL == "Y") /* If standard model*/
    FL0TW01.FBASTDFL[FL0TWIX1] = "*"; /* Map model flag = '*'*/
  else /* Else*/
    FL0TW01.FBASTDFL[FL0TWIX1] = " "; /* Map model flag = ' '*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the create date*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* Initialize record*/
  TA2REC.TA2GRGGN = FL0TW01.ZZZSDT[FL0TWIX1]; /* Sending greg date*/
  FL0TS01(); /* Convert create date*/
  if (TA2REC.TA2RTNCD == 0)
    FL0TW01.FL0TWSDT[FL0TWIX1] = TA2REC.TA2GRGAN; /* Create date*/
  else
    FL0TW01.FL0TWSDT[FL0TWIX1] = 0; /* Zero out create date*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the change date*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* Initialize record*/
  TA2REC.TA2GRGGN = FL0TW01.ZZZCHGDT[FL0TWIX1]; /* Sending greg date*/
  FL0TS01(); /* Convert change date*/
  if (TA2REC.TA2RTNCD == 0)
    FL0TW01.FL0TWCHG[FL0TWIX1] = TA2REC.TA2GRGAN; /* Change date*/
  else
    FL0TW01.FL0TWCHG[FL0TWIX1] = 0; /* Zero out change date*/
  end
  ;
end // end FL0T130

// Close VFYMDL01 cursor
Function FL0T140()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3480" ("C1", SQLCA, FBBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FL0TM001.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VLRPRM01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0TM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPRM01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0T140

// Format data & Converse map
Function FL0T200()
   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0TM001.XXXCURDT == 0) /* Map is not formatted*/
    FL0T210(); /* Format the data on the map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FL0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0TM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0TM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/
  ;
  if (FLWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set FL0TM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FL0TM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.XXXMSGNO = 0; /* Message number*/
  FL0TM001.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FL0TM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = FL0TM001.CAITEM; /* Application data*/
  ;
end // end FL0T200

// Format Map data
Function FL0T210()
   /* ------------------------------------------------------------*/
   /* Move map selection criteria data from FL0SW01 display*/
   /* storage record to the map fields.*/
   /* ------------------------------------------------------------*/
  ;
  FL0TM001.FL0TWMTH = FL0TW01.FL0TWMTH; /* Display buy date*/
  ;
   /* ------------------------------------------------------------*/
   /* Move the factory buy detail information to the map*/
   /* ------------------------------------------------------------*/
  ;
  FL0TW00.FL0TWIX1 = 1; /* Initialize index*/
  ;
  while (FL0TW00.FL0TWIX1 <= 10
   && FL0TW01.FBCLRNBR[FL0TWIX1] != 0)
    ;
    FL0TM001.FBCLRNBR[FL0TWIX1] = FL0TW01.FBCLRNBR[FL0TWIX1];
    FL0TM001.ZZZSDT[FL0TWIX1] = FL0TW01.FL0TWSDT[FL0TWIX1];
    FL0TM001.ZZZCHGDT[FL0TWIX1] = FL0TW01.FL0TWCHG[FL0TWIX1];
    FL0TM001.FBASTDFL[FL0TWIX1] = FL0TW01.FBASTDFL[FL0TWIX1];
     /* FL0TM001.FBABDT(FL0TWIX1) = FL0TW01.FBABDT(FL0TWIX1) / 100;*/
    ;
    set FL0TM001.FBASTDFL[FL0TWIX1] normal;
    ;
    FL0TW00.FL0TWIX1 = FL0TW00.FL0TWIX1 + 1;
  end
  ;
end // end FL0T210

// check attention identifiers
Function FL0T300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    set FL0TM001 initial; /* M001 input/output*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FL0TW00.FL0TWMTH = FL0TW01.FL0TWMTH; /* Buy year/month*/
      FLWREC.FB8BUYDT = FL0TW00.FL0TWDTE; /* Buy date*/
      XSFLS01(); /* transfer*/
      set FL0TM001.CATOAP cursor, bold; /* Highlight if bad transfer*/
    else
      FL0TM001.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
    end
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Handle pf-key transfers*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* If PF1 was pressed*/
   || converseVar.eventKey is pf3  /* If PF3 was pressed*/
   || converseVar.eventKey is pf4  /* If PF4 was pressed*/
   || converseVar.eventKey is pf5  /* If PF5 was pressed*/
   || converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* If PF14 was pressed*/
   || converseVar.eventKey is pf18 /* If PF18 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/
    if (converseVar.eventKey is pf1) /* If PF1 was pressed - help*/
      COMMAREA.CAITEM = "FL0TM001"; /* map of calling application*/
    end
    ;
    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "FL0M"; /* will transfer to application FL0M*/
    end
    ;
    if (converseVar.eventKey is pf13) /* If PF13 was pressed*/
      COMMAREA.CATOAP = "FL0X"; /* will transfer to application FL0X*/
    end
    ;
    if (converseVar.eventKey is pf14) /* If PF14 was pressed*/
      COMMAREA.CATOAP = "FL0O"; /* will transfer to application FL0O*/
    end
    ;
    if (converseVar.eventKey is pf18) /* If PF18 was pressed*/
      COMMAREA.CATOAP = "FL0W"; /* will transfer to application FL0W*/
    end
    ;
    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "FL0U"; /* will transfer to application FL0U*/
    end
    FLWREC.FB8BUYDT = FL0TW00.FL0TWDTE; /* Buy date*/
    XSFLS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end
  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf6)  /* fccalc*/
    FL0TM001.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end
  ;
end // end FL0T300

// Reset highlighted fields
Function FL0T400()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0TM001.FL0TWMTH initialAttributes; /* Year/month for buy date*/
  ;
  FL0TW00.FL0TWIX1 = +1; /* Initialize index*/
  ;
  while (FL0TW00.FL0TWIX1 <= 10)
    if (FL0TM001.FBCLRNBR[FL0TWIX1] != 0) /* If detail to display*/
      set FL0TM001.FBASTDFL[FL0TWIX1] normal; /* Standard model indicator*/
    end
    FL0TW00.FL0TWIX1 = FL0TW00.FL0TWIX1 + 1; /* Increment index*/
  end
  ;
  ;
end // end FL0T400

// Verify the entered data
Function FL0T500()
   /* ------------------------------------------------------------*/
   /* Check that CAITEM was not entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    FL0TM001.XXXMODID = "500"; /* Module identification*/
    set FL0TM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify any changes to the detail lines.*/
   /* ------------------------------------------------------------*/
  ;
  FL0T510(); /* Verify changes*/
  ;
   /* ------------------------------------------------------------*/
   /* If date is zeros indicate that date must be entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0TM001.FL0TWMTH == 0 /* If no date entered*/
   && FL0TW00.FL0TWFG1 == "N") /* No detail lines changed*/
    FL0TM001.XXXMODID = "500"; /* Module identification*/
    set FL0TM001.FL0TWMTH cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate that date is required*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any of the key fields changed, determine if any of the*/
   /* modifiable fields were changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0TM001.FL0TWMTH != FL0TW01.FL0TWMTH /* Key field changed*/
   && FL0TW00.FL0TWFG1 == "Y")              /* Detail lines changed*/
    FL0TM001.XXXMODID = "500"; /* Module identification*/
    set FL0TM001.FL0TWMTH cursor, bold; /* Highlight*/
    converseLib.validationFailed(128); /* Cannot update key when data changed*/
  else
    /* ------------------------------------------------------------*/
     /* Verify the map schedule buy date.*/
    /* ------------------------------------------------------------*/
    if (FL0TW00.FL0TWFG1 == "N" /* No detail lines changed*/
     && FL0TM001.FL0TWMTH != 0) /* Map date not equal to zero*/
      set TA2REC empty; /* Initialize record*/
      FL0TW00.FL0TWMTH = FL0TM001.FL0TWMTH; /* Reformat map buy date*/
  /* GET COPYBOOK*/
      /* -----------------------  Y2K OUT BEGIN  ------------------------*/
      /*  */
      /* ...WRAP THESE LINES AROUND CODE TO BE COMMENTED OUT...*/
      /*  */
      /* ------------------------  Y2K OUT END  -------------------------*/
      /* -----------------------  Y2K IN BEGIN  -------------------------*/
      /*  */
      /* PLACE THESE COMMENT LINES AROUND NEW Y2K CODE.*/
      /*  */
      /* ------------------------  Y2K IN END  --------------------------*/
      TA2REC.TA2GRGG = FL0TW00.FL0TWCEN; /* Sending gregory date*/
      TA2REC.TA2GRGG = FL0TW00.FL0TWCEN; /* Sending gregory date*/
      FL0TS01(); /* Verify schedule date*/
      if (TA2REC.TA2RTNCD == 0) /* Valid date*/
        FL0TW01.FL0TWMTH = FL0TM001.FL0TWMTH; /* Year/month*/
        FL0TW00.FL0TWSWR = "Y"; /* Data was requested*/
      else /* Invalid return*/
        set FL0TM001.FL0TWMTH cursor, bold; /* Highlight*/
        FL0TM001.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FL0T500

// Verify the entered data
Function FL0T510()
   /* ------------------------------------------------------------*/
   /* Verify any changes to the detail lines.*/
   /* ------------------------------------------------------------*/
  ;
  FL0TW00.FL0TWFG1 = "N"; /* Init changes found flag*/
  FL0TW00.FL0TWFG2 = "N"; /* Init standard selected flag*/
  FL0TW00.FL0TWIX1 = 10; /* Init loop counter*/
  ;
  while (FL0TW00.FL0TWIX1 >= 1) /* Edit from bottom to top*/
    ;
    /* ------------------------------------------------------------*/
     /* Check that a valid model standard value has been entered.*/
    /* ------------------------------------------------------------*/
    if (FL0TM001.FBASTDFL[FL0TWIX1] != FL0TW01.FBASTDFL[FL0TWIX1])
      FL0TW00.FL0TWFG1 = "Y"; /* Changed detail found*/
      if (FL0TM001.FBASTDFL[FL0TWIX1] != " " /* Must be blank*/
       && FL0TM001.FBASTDFL[FL0TWIX1] != "*") /* or '*'*/
        FL0TM001.XXXMODID = "510"; /* Module identification*/
        set FL0TM001.FBASTDFL[FL0TWIX1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value entered*/
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* Insure that only 1 model is selected as standard.*/
    /* ------------------------------------------------------------*/
    if (FL0TM001.FBASTDFL[FL0TWIX1] == "*") /* If selected as standard*/
      if (FL0TW00.FL0TWFG2 == "Y" /* If standard already selected*/
       && FL0TW00.FL0TWFG1 == "Y") /* and detail changed*/
        FL0TM001.XXXMODID = "510"; /* Module identification*/
        set FL0TM001.FBASTDFL[FL0TWIX1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(126); /* Only 1 may be standard model*/
      else
        FL0TW00.FL0TWFG2 = "Y"; /* Flag standard selected*/
      end
    end
    FL0TW00.FL0TWIX1 = FL0TW00.FL0TWIX1 - 1; /* Decrement loop counter*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Insure that at least 1 model is selected as standard.*/
   /* ------------------------------------------------------------*/
  if (FL0TW00.FL0TWFG2 == "N" /* If no standard selected*/
   && FL0TW00.FL0TWFG1 == "Y" /* and detail changed*/
   && converseVar.validationMsgNum == 0) /* and no errors found*/
    FL0TM001.XXXMODID = "510"; /* Module identification*/
    set FL0TM001.FBASTDFL[1] cursor; /* Cursor at first detail*/
    converseLib.validationFailed(127); /* A standard model must be selected*/
  end
  ;
end // end FL0T510

// Process valid input request
Function FL0T600()
  if (converseVar.eventKey is pf6) /* fccalc*/
    ;
    /* ------------------------------------------------------------*/
     /* determine which environment the program is executing in:*/
     /* development or production.*/
    /* ------------------------------------------------------------*/
    ;
    FL0T610(); /* determine region*/
    ;
    /* ------------------------------------------------------------*/
     /* submit test or production jcl.*/
    /* ------------------------------------------------------------*/
    ;
    set TA6REC empty; /* init ta6rec*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if production environment*/
      FL0T620(); /* submit production report*/
    else
      FL0T630(); /* submit test report*/
    end
    ;
    FL0TW00.FL0TWSWR = "Y"; /* format the map*/
    ;
    ;
    return; /* return to calling process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0TW00.FL0TWFG1 == "Y") /* Detail data changed*/
    ;
    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/
    ;
    XX0XS01(); /* Obtain date and time*/
    ;
    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
    /* ------------------------------------------------------------*/
    ;
    FL0TW00.FL0TWIX1 = 1; /* Initialize counter*/
    while (FL0TW00.FL0TWIX1 <= 10)
      ;
      if (FL0TM001.FBASTDFL[FL0TWIX1] != FL0TW01.FBASTDFL[FL0TWIX1])
        ;
        FL0T640(); /* Update table row*/
        ;
      end
      ;
      FL0TW00.FL0TWIX1 = FL0TW00.FL0TWIX1 + 1;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/
    ;
    FL0TM001.XXXMODID = "600"; /* Module identification*/
    FLWREC.XXXMSGNO = 32; /* Indicate update completed*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the display storage and save key map data.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0TW01 empty; /* M001 display storage*/
  ;
  FL0TW01.FL0TWMTH = FL0TM001.FL0TWMTH; /* Map buy date*/
  ;
   /* ------------------------------------------------------------*/
   /* Clear map input/output area and request data to display.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0TM001 initial; /* M001 input/output*/
  ;
  if (FL0TW01.FL0TWMTH > 0) /* Buy date entered*/
    FL0TW00.FL0TWSWR = "Y"; /* Request for data switch*/
  else
    FL0TW00.FL0TWSWR = "N"; /* Request for data switch*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
end // end FL0T600

// get region information
Function FL0T610()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FL0TM001.XXXMODID = "610"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
  ;
end // end FL0T610

// submit batch application
Function FL0T620()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  FL0TW00.FL0TWTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0TW00.FL0TWTIX > 0) /* Until end of table*/
    ;
    if (FL0TT01.TARTYPE[FL0TWTIX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = FL0TT01.TARTYPE[FL0TWTIX]; /* Type*/
      FL0T621(); /* formats JCL*/
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0TT01.TARJCL[FL0TWTIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0TT01.TARTYPE[FL0TWTIX]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0TT01.TARJCL[FL0TWTIX] == "/*EOF") /* End of table*/
      FL0TW00.FL0TWTIX = 0; /* Indicate end of table*/
    else
      FL0TW00.FL0TWTIX = FL0TW00.FL0TWTIX + 1; /* Increment table index*/
    end
    ;
  end
  ;
  FL0T622(); /* Submit the JCL*/
  FLWREC.XXXMSGNO = 16; /* Info msg, not err*/
  ;
  ;
end // end FL0T620

// format batch jcl
Function FL0T621()
   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/
  ;
   /* this program uses no parms. I'm leaving this routine*/
   /* in just in case we change our minds*/
end // end FL0T621

// submit batch jcl
Function FL0T622()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* no end of job msgs*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(76);
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0TM001.XXXMODID = "622"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FL0TM001.XXXMODID = "622"; /* module identification*/
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0T622

// submit batch application
Function FL0T630()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  FL0TW00.FL0TWTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0TW00.FL0TWTIX > 0) /* Until end of table*/
    ;
    if (FL0TTT1.TARTYPE[FL0TWTIX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = FL0TTT1.TARTYPE[FL0TWTIX]; /* Type*/
      FL0T621(); /* formats JCL*/
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0TTT1.TARJCL[FL0TWTIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0TTT1.TARTYPE[FL0TWTIX]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0TTT1.TARJCL[FL0TWTIX] == "/*EOF") /* End of table*/
      FL0TW00.FL0TWTIX = 0; /* Indicate end of table*/
    else
      FL0TW00.FL0TWTIX = FL0TW00.FL0TWTIX + 1; /* Increment table index*/
    end
    ;
  end
  ;
  FL0T622(); /* Submit the JCL*/
  FLWREC.XXXMSGNO = 16; /* Info msg, not err*/
  ;
  ;
end // end FL0T630

// Update the table row
Function FL0T640()
   /* ------------------------------------------------------------*/
   /* Move the factory buy detail information to the map*/
   /* ------------------------------------------------------------*/
  ;
  FBBREC.FBBGROUP = FL0TW01.FBBGROUP[FL0TWIX1];
  if (FL0TM001.FBASTDFL[FL0TWIX1] == "*") /* If selected as standard model*/
    FBBREC.FBASTDFL = "Y"; /* standard model flag = 'Y'*/
  else
    FBBREC.FBASTDFL = "N"; /* standard model flag = 'N'*/
  end
  FBBREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FBBREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO3480" ("U ", SQLCA, FBBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set FL0TM001 initial; /* M001 input/output*/
      FL0TW00.FL0TWSWR = "Y"; /* Request for data switch*/
      FL0TM001.XXXMODID = "640"; /* Module identification*/
      FLWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      exit stack; /* Exit to display map*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FL0TM001.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0TM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLRPRM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0TW00.FL0TWCEN; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FL0T640

// Validate & convert Greg dates
Function FL0TS01()
   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate & convert dates.*/
   /* ------------------------------------------------------------*/
  ;
  TA2REC.TA2GRTYP = "G"; /* Type*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate and get all greg formats*/
  ;
   /* ------------------------------------------------------------*/
   /* Call TA0040*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/
  ;
   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* No parameter errors*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/
    ;
    FL0TM001.XXXMODID = "S01"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FL0TM001.XXXMODID; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
end // end FL0TS01

//*** RECORD=FL0TW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FL0TW00 type basicRecord
  10 FL0TWDCF FL0TWDCF ; 
  10 FL0TWIX1 FL0TWIX1 ; 
  10 FL0TWTIX FL0TWTIX ; 
  10 FL0TWSWR FL0TWSWR ; 
  10 FL0TWFG1 FL0TWFG1 ; 
  10 FL0TWFG2 FL0TWFG2 ; 
  10 FL0TWDTE FL0TWDTE ; 
    15 * char(1) ; 
    15 FL0TWCEN FL0TWCEN ; 
      20 FL0TWCC char(2) ; 
      20 FL0TWMTH FL0TWMTH ; 
        25 FL0TWYY FL0TWYY ; 
        25 FL0TWMM FL0TWMM ; 
      20 * num(2) ; 
end // end FL0TW00

//*** RECORD=FL0TW01 ****
// *************** FOOTWEAR FACTORY LOAD/BUY SYSTEM ***********
// ****************    FACTORY MODEL PARM TABLE    ************
// 
// DB2 TABLE VIEW:     VLRPRM01
// 
// COPYLIB MEMBER:     N/A
// 
// I/O MODULE:         IO3480
// 
// KEY TO DB2 TABLE    FB8BUYDT
//                     FBCLRNBR
//                     ZZZCHGCT
// 
// MAINTENANCE LOG:
// 
// CONTROL     DATE    NAME     COMMENT
// --------  --------  ------   -------------------------------
//           05/10/89  JMCLAU   NEW RECORD DEFINITION.
// 
// ***********************
Record FL0TW01 type basicRecord
  5 FBBGROUP FBBGROUP [10] ; 
    10 FBCLRNBR FBCLRNBR ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBABDT FBABDT ; 
    10 FBASTDFL FBASTDFL ; 
    10 FB9AODT FB9AODT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
  5 FL0TWGPR FL0TWGPR [10] ; 
    10 FL0TWSDT FL0TWSDT ; 
    10 FL0TWCHG FL0TWCHG ; 
    10 FL0TWMTH FL0TWMTH ; 
end // end FL0TW01

// Buy date as 8 characters
DataItem FL0TWCEN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformatted change date
DataItem FL0TWCHG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor switch
DataItem FL0TWDCF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy date reformatted
DataItem FL0TWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Flag for changes to detail
DataItem FL0TWFG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Flag for standard selected
DataItem FL0TWFG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformatted dates for map
DataItem FL0TWGPR char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for subscripting
DataItem FL0TWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FL0TWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FL0TWMTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// reformatted set up date
DataItem FL0TWSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem FL0TWSWR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for jcl
DataItem FL0TWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FL0TWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

