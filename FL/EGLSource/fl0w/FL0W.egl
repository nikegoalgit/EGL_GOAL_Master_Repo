package fl0w;

import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFL001;
import corpcom3.XPTA0P;
import corpcom3.XPXFR01;
import corpcom3.XPXX001;
import corpcom4.XSFLS01;
import corpcom4.XSPG202;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpcom7.ZZZSTM;
import corpx1.XDMCD;
import corpx1.XFRCD;
import corpx1.XFRTBL;
import corpx1.XGATBL;
import corpx2.XPLCD;
import corpx2.XSECD;
import corpy2.YSMXGA;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB8BUYDT;
import fb.common.FB8DSQTB;
import fb.common.FB8FFCOM;
import fb.common.FB8FTQTB;
import fb.common.FB8MPFL;
import fb.common.FB8REC;
import fb.common.FB8RECTP;
import fb.common.FB8SAPFL;
import fb.common.FB8SKQTB;
import fb.common.FB9BTQTY;
import fb.common.FB9REC;
import fb.common.FBAMDNBR;
import fb.common.FBAREC;
import fb.common.FBDMDTYP;
import fb.common.FBDQTB;
import fb.common.FBDREC;
import fb.common.FBDTOQTB;
import fb.common.FBEREC;
import fl.common.FLWREC;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP2LNINB;
import pa.common.PA1OANBR;
import pc.common.PC2CUXID;
import pc.common.PC2REC;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PGAREC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FL0W ****
// This program is part of the Factory Load system.  A LRPS
// number and style number are passed.  All transactions which
// occurred since that LRPS was created are selected from the
// forecast detail table.  These transactions may be applied
// to the LRPS through this screen.  This application can be
// fastpathed to.  In this case the style number and LRPS
// number must be entered.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/26/90  pmainw  New application.
//          08/16/90  jmclau  add code to get short style name
//                            and move blanks to style/color
//                            abbreviations for style
//                            developement products.
//          08/27/90  jalle1  check for contention due to merge
//                            before update dfbuy.vflqtb01
//                            (dhermm request).
// e#fl234  03/18/91  jalle1  set cursor to style after
//   and                      update.
// e#fl235                    add edit to not allow quantities
//                            to go negative for a factory.
//          04/11/91  jalle1  fix error in key for style
//                            development products.
// e#fl243  04/15/91  jalle1  add ability to adjust blank fctys
//          04/25/91  pmainw  Disable the insert function.
// e#fl214  04/26/91  pmainw  Get short style name from
//                            dprodg.vsyprd01.
// e#fl250  05/24/91  jalle1  pass key data between fl programs
// e#fl310  12/11/91  pmainw  process changes for all products.
//                            This will be a batch submitted
//                            job.
// e#fl337  04/07/92  pmainw  EEC Trade restrictions.
// e#fl313  04/17/92  jmclau  Add gender age and description.
// e#fl333  05/20/92  jmclau  Default the cursor to the style
//                            except when the schedule nbr is
//                            not entered. then set the cursor
//                            to the schedule nbr.
// e#00000  06/03/92  jmclau  fix bug in application by de-
//                            creasing the xxxtslen to 1512
// e#fl342  08/18/92  jmclau  add season code and year to map.
//                            creasing the xxxtslen to 1512
// e#fl???  12/08/92  ldeluh  fixed bug when need to go back
//                            one tsq page to get flqtb row.
//                            It was not re-reading current
//                            tsq page afterwards.
// FB9994   08/10/93  LDELUH  Chg loadlibs for cob2.
//          11/10/93  LDELUH  Nov. table changes.
// fl362-b  12/14/93  LDELUH  Fix error #47 bug in flqtb updt.
// FL1289   10/10/97  AMAND1  DATABASE changes for GPP project
// y2kfix   11/21/97  pharwo  Regenerate for xx0xs01 changes
// *********************
Program FL0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB8REC FB8REC; // record
  FB9REC FB9REC; // record
  FBAREC FBAREC; // record
  FBDREC FBDREC; // record
  FBEREC FBEREC; // record
  FL0WW00 FL0WW00; // record
  FL0WW01 FL0WW01; // record
  FL0WW02 FL0WW02; // record
  FL0WW03 FL0WW03; // record
  FL0WW05 FL0WW05; // record
  FLWREC FLWREC; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0WT01; // table
  use FL0WT02; // table
  use XFRTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use FL0WM.FL0WM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FL0WM010 initial; /* M001 input/output*/
    set FL0WW00 empty; /* Working storage*/
    set FL0WW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* temp storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/
    ;
    ;
    ;
    ;
    if (FLWREC.FBAMDNBR > 0)
      FL0WM010.SY1STNBR = FLWREC.SY1STNBR; /* style number*/
      FL0WM010.SY2CLRID = FLWREC.SY2CLRID; /* color*/
      FL0WM010.XDMCD = FLWREC.XDMCD; /* dimension*/
      FL0WM010.FBAMDNBR = FLWREC.FBAMDNBR; /* model number*/
      FL0WW00.FL0WWSWF = "Y"; /* Format the map switch*/
      FL0WW00.FL0WWSWR = "Y"; /* Request for data switch*/
    else
      FL0WW00.FL0WWSWF = "N"; /* Format the map switch*/
      FL0WW00.FL0WWSWR = "N"; /* Request for data switch*/
      FL0WW00.FL0WWFRS = "Y"; /* 1st time into appl fl*/
    end
    ;
    ;
    FL0WW00.XXXTSPAG = 1; /* To display the first page*/
    ;
    ;
    ;
    ;
    COMMAREA.XGPCD = "02"; /* Footwear GPC is hardcoded*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0W001; /* Converse the main process*/
    ;
    ;
    FL0W001: FL0W001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0W001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FL0W

// Inquire/maintain a table row
Function FL0W001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FL0W100(); /* Obtain the data to display*/
  ;
  FL0W200(); /* Format and display the map*/
  ;
  FL0W300(); /* Check attention identifier*/
  ;
  FL0W400(); /* Reset fields to normal intensity*/
  ;
  FL0W500(); /* Verify the entered data*/
  ;
  FL0W600(); /* Process valid input request*/
  ;
  ;
end // end FL0W001

// Obtain the data to display
Function FL0W100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0WW00.FL0WWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    if (FL0WW00.FL0WWSWR != "Y" /* Data was not requested*/
     && FL0WW00.FL0WWFRS == "Y") /* 1st time into applsw*/
      FL0WW00.FL0WWFRS = "N"; /* 1st time into appl*/
      FL0W410(); /* Protect fields*/
    end
    ;
    if (converseVar.validationMsgNum != 32 /* Successful update*/
     && converseVar.validationMsgNum != 47) /* Data in use*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  FL0WW00.FL0WWIX1 = 1; /* general index 1*/
  FL0WW00.FL0WWIX2 = 1; /* general index 2*/
  ;
  FL0W105(); /* Purge temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FL0WM010.FBAMDNBR = FLWREC.FBAMDNBR; /* Model number*/
  FL0WM010.SY1STNBR = FLWREC.SY1STNBR; /* Style number*/
  FL0WM010.SY2CLRID = FLWREC.SY2CLRID; /* Color identification*/
  FL0WM010.XDMCD = FLWREC.XDMCD; /* Dimension code*/
  ;
  if (FL0WM010.SY1STNBR > "      ") /* handle defaults*/
    if (FL0WM010.SY2CLRID == "   ")
      FL0WM010.SY2CLRID = "00 "; /* Color identification*/
      FLWREC.SY2CLRID = "00 "; /* Color identification*/
    end
    if (FL0WM010.XDMCD == "  ")
      FL0WM010.XDMCD = "00"; /* Dimension code*/
      FLWREC.XDMCD = "00"; /* Dimension code*/
    end
  end
  ;
  FL0WW00.FL0WWQ = "Y"; /* INITIALIZE DATA FOUND FLAG*/
  ;
  ;
  FL0W110(); /* Get buy date from vfmctl01*/
  ;
  ;
  ;
  ;
  FL0W115(); /* Get buy date from vfymdl01*/
  ;
  ;
  ;
  ;
  if (FL0WW00.FL0WWQ == "Y") /* Data was found flag*/
    ;
    FL0W130(); /* Get Product descriptions*/
    ;
    FL0W120(); /* Get vflqtb01 and vffqtb01 rows*/
    ;
  end
  ;
  ;
  FL0WW00.FL0WWSWR = "N"; /* Reset request for data switch*/
  ;
  ;
end // end FL0W100

// Purge any temporary storage
Function FL0W105()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FL0WW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "105"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0W105

// Get vfmctl01 row
Function FL0W110()
  ;
  set FB9REC empty;
  ;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (FLWREC.FB8BUYDT == 0) /* Buy date not passed*/
        FLWREC.FB8BUYDT = FB9REC.FB8BUYDT; /* Buy date used later*/
      end
      FL0WW00.FB9BTQTY = FB9REC.FB9BTQTY * -1; /* direct ship tolerance*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0K115"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0WM010.XXXMODID = "115";
  ;
  ;
  ;
end // end FL0W110

// Get vfymdl01 row
Function FL0W115()
  ;
  ;
  set FBAREC empty;
  ;
  FBAREC.FBAMDNBR = FL0WM010.FBAMDNBR; /* model number*/
  FBAREC.FBDMDTYP = "FT1"; /* model type*/
  ;
  ;
  ;
  ;
  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      ;
         /* convert set-up date to mmddyy*/
         /* MOVE FBAREC.ZZZSDT TO FL0WW00.FL0WWDAT;*/
         /* MOVE FL0WW00.FL0WWYY TO FL0WW00.FL0WWZYY;*/
         /* MOVE FL0WW00.FL0WWMM TO FL0WW00.FL0WWZMM;*/
         /* MOVE FL0WW00.FL0WWDD TO FL0WW00.FL0WWZDD;*/
      /* MOVE FL0WW00.FL0WWZDT TO FL0WM010.FL0WMSDT;Model set-up date*/
      FL0WM010.FL0WMSDT = FBAREC.ZZZSDT; /* Model set-up date*/
      FL0WM010.FL0WMTM = FBAREC.ZZZSTM; /* Model set-up time*/
      ;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(18); /* No data found to display*/
      FL0WW00.FL0WWQ = "N"; /* data found fl*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0W115"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0WM010.XXXMODID = "115";
  ;
  ;
  ;
  ;
end // end FL0W115

// Get vflqtb01 and vffqtb01 rows
Function FL0W120()
   /* ------------------------------------------------------------*/
   /* Get vflqtb01 and vffqtb01 rows using the sub-program*/
   /* FL3200.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0WW02 empty;
  FL0WW02.SY1STNBR = FL0WM010.SY1STNBR; /* style number*/
  FL0WW02.SY2CLRID = FL0WM010.SY2CLRID; /* color*/
  FL0WW02.XDMCD = FL0WM010.XDMCD; /* dimension*/
  FL0WW02.FBAMDNBR = FL0WM010.FBAMDNBR; /* model number*/
  ;
  FL0W122(); /* declare cursor for union*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* good return code*/
    ;
    FL0W124(); /* fetch cursor*/
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* good end*/
    FL0W126(); /* close cursor*/
  end
  ;
end // end FL0W120

// declare cursor for union
Function FL0W122()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "FL3200" ("S1", SQLCA, FL0WW02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "122"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE FOR UNION   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0WW02.FL0WWGR2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
  ;
end // end FL0W122

// fetch next
Function FL0W124()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "FL3200" ("N1", SQLCA, FL0WW02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      if (FL0WW00.FL0WWIX1 != 1)
        while (FL0WW00.FL0WWIX1 <= 12)
          set FL0WW02 empty;
          FL0WW01.FL0WWROW[FL0WWIX1] = FL0WW02.FL0WWGR2; /* blank out row*/
          FL0WW01.FL0WWPRT[FL0WWIX1] = " "; /* Protect map row flag*/
          FL0WW00.FL0WWIX1 = FL0WW00.FL0WWIX1 + 1; /* increment index*/
        end
        FL0W125(); /* save to temp storage*/
      else
        if (FL0WW00.TA5TSQIX == 0) /* No temp storage written*/
                                   /* and it's the first fetch - eof*/
          converseLib.validationFailed(18); /* no data was found*/
          set FL0WW01 empty; /* clear enternal storage*/
          FL0W410(); /* Protect fields*/
          set FL0WM010.FBAMDNBR cursor, modified, bold;
          set FL0WM010.SY1STNBR modified, bold;
          set FL0WM010.SY2CLRID modified, bold;
          set FL0WM010.XDMCD modified, bold;
          return;
        end
      end
      return; /* Return to previous process*/
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL0WW00.FL0WWQ = "Y"; /* vflqtb01 row was found fl*/
      if (FL0WW00.FL0WWIX1 <= 12)
        FL0WW01.FL0WWROW[FL0WWIX1] = FL0WW02.FL0WWGR2; /* save row*/
        if (FL0WW02.FL0WWORG == "FCST")
          FL0WW01.FL0WWPRT[FL0WWIX1] = "N"; /* Protect map row flag*/
        else
          FL0WW01.FL0WWPRT[FL0WWIX1] = "Y"; /* Protect map row flag*/
          FL0WW00.FBDTOQTB = FL0WW00.FBDTOQTB + FL0WW02.FBDQTB; /* accum total qtb*/
        end
        FL0WW00.FL0WWIX1 = FL0WW00.FL0WWIX1 + 1; /* increment index*/
      else
        FL0W125(); /* save to temp storage*/
        FL0WW00.FL0WWIX1 = 1; /* reset index*/
        FL0WW01.FL0WWROW[FL0WWIX1] = FL0WW02.FL0WWGR2; /* save row*/
        if (FL0WW02.FL0WWORG == "FCST")
          FL0WW01.FL0WWPRT[FL0WWIX1] = "N"; /* Protect map row flag*/
        else
          FL0WW01.FL0WWPRT[FL0WWIX1] = "Y"; /* Protect map row flag*/
          FL0WW00.FBDTOQTB = FL0WW00.FBDTOQTB + FL0WW02.FBDQTB; /* accum total qtb*/
        end
        FL0WW00.FL0WWIX1 = FL0WW00.FL0WWIX1 + 1; /* increment index*/
      end
      return;
    end
    ;
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "124"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT - UNION  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0WW02.FL0WWGR2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
  ;
end // end FL0W124

// Add page to temporary storage
Function FL0W125()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FL0WW01.XXXTSLEN = 1512; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FL0WW01 empty; /* M001 display storage*/
    ;
    FL0WW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "125"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0W125

// close cursor
Function FL0W126()
  ;
  ;
  try
    call "FL3200" ("C1", SQLCA, FL0WW02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "126"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET FOR UNION";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0WW02.FL0WWGR2; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
  ;
end // end FL0W126

// get style & color descriptions
Function FL0W130()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  PG2REC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
  PG2REC.SY1STNBR = FL0WM010.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FL0WM010.SY2CLRID; /* color code*/
  PG2REC.XDMCD = FL0WM010.XDMCD; /* dimension code*/
  ;
  XSPG202(); /* Get style & color descriptions*/
  ;
  if (sysVar.errorCode == "00000000") /* call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      ;
      FL0WM010.XGACD = PG2REC.XGACD; /* gender age code*/
      if (PG2REC.XGACD in XGATBL.XGACD) /* get gender age description*/
        FL0WM010.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* gender age desc*/
      else
        FL0WM010.XGADESC = "               ";
      end
      FL0WW00.XSECD = PG2REC.XSECD; /* sesn code*/
      FL0WW00.FL0WSEDT = PG2REC.XSNYR; /* sesn ccyy*/
      FL0WW00.FL0WSEYR = FL0WW00.FL0WSEYY; /* sesn yy*/
      FL0WM010.FL0WWSNS = FL0WW00.FL0WWSNS; /* sesn cd and yr comb*/
      FL0WM010.SY2CLRAB = PG2REC.SY2CLRAB; /* color abbreviation*/
      FL0WM010.SY2RSTNB = PG2REC.SY2RSTNB; /* style root nbr*/
      FL0W134(); /* get style short name*/
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      FL0WM010.SY2CLRAB = " "; /* color abbreviation*/
      FL0WM010.SY2CLRID = "   "; /* Blank out color code*/
      FLWREC.SY2CLRID = "   "; /* Blank out color code*/
      FL0WM010.XDMCD = "  "; /* and dimension*/
      FLWREC.XDMCD = "  "; /* and dimension*/
      ;
      FL0W132(); /* get style dev gender age data*/
      FL0W134(); /* get style short name*/
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0WM010.SY1STNBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
  ;
end // end FL0W130

// get sty-dev descriptions
Function FL0W132()
   /* ------------------------------------------------------------*/
   /* build the key*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty; /* initialise work area*/
  PG4REC.PG4STNBR = FL0WM010.SY1STNBR; /* style number*/
  ;
   /* ------------------------------------------------------------*/
   /* get the  row to display from the style development table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* get row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0WM010.XGACD = PG4REC.XGACD; /* gender age code*/
      if (PG4REC.XGACD in XGATBL.XGACD) /* get xga description*/
        FL0WM010.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
      end
      FL0WW00.XSECD = PG4REC.XSECD; /* sesn code*/
      FL0WW00.FL0WSEDT = PG4REC.XSNYR; /* sesn ccyy*/
      FL0WW00.FL0WSEYR = FL0WW00.FL0WSEYY; /* sesn yy*/
      FL0WM010.FL0WWSNS = FL0WW00.FL0WWSNS; /* sesn cd and yy comb*/
      FL0WM010.SY2CLRAB = "             "; /* color abbrv*/
      FL0WM010.SY2RSTNB = "      "; /* style root nbr*/
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      ;
      FL0WM010.XGACD = "  "; /* gender age code*/
      FL0WM010.FL0WWSNS = "    "; /* sesn cd and yy comb*/
      FL0WM010.XGADESC = "               "; /* gender age description*/
      FL0WM010.SY2CLRAB = "*************"; /* color abbrv*/
      FL0WM010.SY2RSTNB = "******"; /* style root nbr*/
      return;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "132"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET STY-DEV DESC";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0WM010.SY1STNBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0W132

// Get style short name
Function FL0W134()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPRODG.VSYPRD01*/
   /* ---------------------------------------------------------*/
  ;
  ;
  set PGAREC empty;
  ;
  PGAREC.XGPCD = COMMAREA.XGPCD;
  ;
  PGAREC.SY1STNBR = FL0WM010.SY1STNBR;
  ;
  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FL0WM010.SY1SSTNM = PGAREC.PGASSTNM;
    return;
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/
      ;
      FL0WM010.SY1SSTNM = "************";
      return;
      ;
    else
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "GET SHORT STYLE NAME            ";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        ;
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
        ;
      else
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end FL0W134

// Format and converse the map
Function FL0W200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0WW00.TA5TSQIX > 0) /* Temp storage written to*/
    ;
    if (FL0WW00.FL0WWSWF == "Y") /* Map must be formatted*/
      FL0W210(); /* Format the data on the map*/
      FL0WW00.FL0WWSWF = "N"; /* Map must be formatted fl*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FL0WM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FL0WM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0WM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
  FL0WM010.XXXMODID = FLWREC.XXXMODID; /* Module identification*/
  ;
  converse FL0WM010 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FL0WM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0WM010.CAITEM; /* Application data*/
  ;
  ;
end // end FL0W200

// Format the display data
Function FL0W210()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  ;
  if (FL0WW00.XXXTSPAG > FL0WW00.TA5TSQIX) /* last page got deleted*/
    FL0WW00.XXXTSPAG = FL0WW00.TA5TSQIX;
  end
  ;
  ;
  ;
  ;
  FL0WW01.XXXTSLEN = 1512; /* Temporary storage length*/
  ;
  FL0WM010.FBDTOQTB = FL0WW00.FBDTOQTB; /* Total quantity to buy*/
  FL0WM010.FL0WMPG1 = FL0WW00.XXXTSPAG; /* Page number*/
  FL0WM010.FL0WMPG2 = FL0WW00.TA5TSQIX; /* Highest Page number*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FL0WW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    FL0W410(); /* reset protect flags*/
    ;
    ;
    FL0WW00.FL0WWIX1 = 1; /* General index 1*/
    while (FL0WW00.FL0WWIX1 <= 12)
      FL0WW02.FL0WWGR2 = FL0WW01.FL0WWROW[FL0WWIX1];
      FL0WM010.XFRCD[FL0WWIX1] = FL0WW02.XFRCD;
      FL0WM010.FL0WMORG[FL0WWIX1] = FL0WW02.FL0WWORG;
      if (FL0WW02.FL0WWORG == "LRPS") /* Quantity comes from vflqtb01*/
        FL0WM010.FL0WMQTY[FL0WWIX1] = FL0WW02.FBDQTB;
        FL0WM010.FY1FCTYC[FL0WWIX1] = FL0WW02.FY1FCTYC;
        FL0WM010.FL0WMSTA[FL0WWIX1] = "    ";
      end
      if (FL0WW02.FL0WWORG == "FCST") /* Quantity comes from vffqtb01*/
        FL0WM010.FL0WMQTY[FL0WWIX1] = FL0WW02.FB8FTQTB;
        FL0WM010.FY1FCTYC[FL0WWIX1] = "   ";
        FL0WM010.FL0WMSTA[FL0WWIX1] = FL0WW02.FY1FCTYC;
      end
      if (FL0WW02.FL0WWORG == "    ") /* Quantity comes from vffqtb01*/
        FL0WM010.FL0WMSTA[FL0WWIX1] = "    ";
      end
      ;
      ;
         /* convert set-up date to mmddyy*/
      ;
      FL0WW00.FL0WWDAT = FL0WW02.ZZZSDT;
      FL0WW00.FL0WWZYY = FL0WW00.FL0WWYY;
      FL0WW00.FL0WWZMM = FL0WW00.FL0WWMM;
      FL0WW00.FL0WWZDD = FL0WW00.FL0WWDD;
      FL0WM010.ZZZSDT[FL0WWIX1] = FL0WW00.FL0WWZDT;
      ;
      ;
         /* convert buy-dt date to yymm*/
      ;
      FL0WW00.FL0WWDAT = FL0WW02.FB8BUYDT;
      FL0WW00.FL0WWBYY = FL0WW00.FL0WWYY;
      FL0WW00.FL0WWBMM = FL0WW00.FL0WWMM;
      FL0WM010.FB8BUYDT[FL0WWIX1] = FL0WW00.FL0WWBMO;
      ;
      ;
      FL0WW00.FL0WWIX1 = FL0WW00.FL0WWIX1 + 1;
    end
    ;
    ;
    if (converseVar.validationMsgNum == 32) /* update successful*/
      set FL0WM010.SY1STNBR cursor;
    end
    ;
    ;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "210"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0W210

// validate attn identifier
Function FL0W300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0WM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FLWREC empty;
      FLWREC.SY1STNBR = FL0WM010.SY1STNBR;
      FLWREC.SY2CLRID = FL0WM010.SY2CLRID;
      FLWREC.XDMCD = FL0WM010.XDMCD;
      FLWREC.FBAMDNBR = FL0WM010.FBAMDNBR;
      XSFLS01(); /* Exit to another application*/
      FL0WM010.XXXMODID = "300"; /* Process name*/
      set FL0WM010.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
      ;
    else
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FL0WM010.XXXMODID = "300"; /* Process name*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21
   || converseVar.eventKey is pa2)
    ;
    if (converseVar.eventKey is pa2) /* clear screen*/
      COMMAREA.CATOAP = "FL0W"; /* display the blank map*/
    end
    ;
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0WM010"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "FL0M";
    end
    ;
    if (converseVar.eventKey is pf14)
      COMMAREA.CATOAP = "FL0P"; /* move*/
    end
    ;
    if (converseVar.eventKey is pf16)
      COMMAREA.CATOAP = "FL0Q"; /* splt*/
    end
    ;
    if (converseVar.eventKey is pf17)
      COMMAREA.CATOAP = "FL0V"; /* mvsp*/
    end
    ;
    if (converseVar.eventKey is pf19)
      return;
    end
    ;
    if (converseVar.eventKey is pf20)
      COMMAREA.CATOAP = "FL01"; /* moves by style (all colors)*/
    end
    ;
    ;
    if (converseVar.eventKey is pf21)
      COMMAREA.CATOAP = "FL0U"; /* prnt*/
    end
    ;
    set FLWREC empty;
    FLWREC.SY1STNBR = FL0WM010.SY1STNBR;
    FLWREC.SY2CLRID = FL0WM010.SY2CLRID;
    FLWREC.XDMCD = FL0WM010.XDMCD;
    FLWREC.FBAMDNBR = FL0WM010.FBAMDNBR;
    XSFLS01(); /* transfer to another application*/
    FL0WW00.FL0WWSWR = "N"; /* dont request data*/
    FL0WW00.FL0WWSWF = "N"; /* format map*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7 /* scroll forward*/
   && converseVar.eventKey not pf8 /* scroll backward*/
   && converseVar.eventKey not pf14
   && converseVar.eventKey not pf16
   && converseVar.eventKey not pf17
   && converseVar.eventKey not pf21) /* print*/
    converseLib.validationFailed(3); /* invalid key*/
    FL0WM010.XXXMODID = "300"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
       /* reset map*/
    end
    ;
    exit stack;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* scroll forward*/
    if (FL0WW00.XXXTSPAG >= FL0WW00.TA5TSQIX) /* already on last page*/
      FL0WM010.XXXMODID = "300"; /* process number*/
      converseLib.validationFailed(7); /* no more pages to display*/
      exit stack; /* display the map*/
    else
      FL0WW00.XXXTSPAG = FL0WW00.XXXTSPAG + 1; /* increment page*/
      FL0WW00.FL0WWSWF = "Y"; /* format the map sw*/
      FL0WM010.FL0WMSEL[1] = " "; /* blank out select field*/
      FL0WM010.FL0WMSEL[2] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[3] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[4] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[5] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[6] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[7] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[8] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[9] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[10] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[11] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[12] = " "; /* "                    "*/
    end
  end
  ;
  if (converseVar.eventKey is pf7) /* scroll backward*/
    if (FL0WW00.XXXTSPAG == 1) /* already on first page*/
      FL0WM010.XXXMODID = "300"; /* process number*/
      converseLib.validationFailed(6); /* no previous pages*/
      exit stack; /* display the map*/
    else
      FL0WW00.XXXTSPAG = FL0WW00.XXXTSPAG - 1; /* decrement page*/
      FL0WW00.FL0WWSWF = "Y"; /* format the map sw*/
      FL0WM010.FL0WMSEL[1] = " "; /* blank out select field*/
      FL0WM010.FL0WMSEL[2] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[3] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[4] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[5] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[6] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[7] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[8] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[9] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[10] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[11] = " "; /* "                    "*/
      FL0WM010.FL0WMSEL[12] = " "; /* "                    "*/
    end
  end
  ;
end // end FL0W300

// Reset highlighted fields
Function FL0W400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  FL0W410();
  ;
  ;
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Handle factory reason code pop-up window request*/
   /* ------------------------------------------------------------*/
  ;
  FL0W420();
  ;
  ;
  ;
end // end FL0W400

// Reset highlighted fields
Function FL0W410()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0WM010.FBAMDNBR initialAttributes; /* Model number*/
  set FL0WM010.SY1STNBR initialAttributes; /* Style number*/
  set FL0WM010.SY2CLRID initialAttributes; /* Color identification*/
  set FL0WM010.XDMCD initialAttributes; /* Dimension code*/
  set FL0WM010.CATOAP initialAttributes; /* Option*/
  ;
  FL0WW00.FL0WWIX1 = 12; /* General index 1*/
  while (FL0WW00.FL0WWIX1 >= 1)
    ;
    if (FL0WW01.FL0WWPRT[FL0WWIX1] == "N") /* Protect map row flag*/
      set FL0WM010.FL0WMSEL[FL0WWIX1] cursor, initialAttributes;
      set FL0WM010.FB8BUYDT[FL0WWIX1] skip;
      set FL0WM010.FY1FCTYC[FL0WWIX1] initialAttributes;
      set FL0WM010.XFRCD[FL0WWIX1] initialAttributes;
      set FL0WM010.FL0WMQTY[FL0WWIX1] initialAttributes;
      set FL0WM010.ZZZSDT[FL0WWIX1] initialAttributes;
      ;
    else
      if (FL0WW01.FL0WWPRT[FL0WWIX1] == "Y") /* Protect map row flag*/
        set FL0WM010.FL0WMSEL[FL0WWIX1] protect, invisible;
        set FL0WM010.FB8BUYDT[FL0WWIX1] skip;
        set FL0WM010.FY1FCTYC[FL0WWIX1] skip;
        set FL0WM010.XFRCD[FL0WWIX1] protect;
        set FL0WM010.FL0WMQTY[FL0WWIX1] protect;
        set FL0WM010.ZZZSDT[FL0WWIX1] protect;
        ;
      else
        set FL0WM010.FL0WMSEL[FL0WWIX1] protect, invisible;
        set FL0WM010.FB8BUYDT[FL0WWIX1] protect, invisible;
        set FL0WM010.FY1FCTYC[FL0WWIX1] protect, invisible;
        set FL0WM010.XFRCD[FL0WWIX1] protect, invisible;
        set FL0WM010.FL0WMQTY[FL0WWIX1] protect, invisible;
        set FL0WM010.ZZZSDT[FL0WWIX1] protect, invisible;
        ;
        ;
      end
    end
    ;
    FL0WW00.FL0WWIX1 = FL0WW00.FL0WWIX1 - 1;
  end
  ;
  ;
  ;
end // end FL0W410

// Handle pop-up windows
Function FL0W420()
   /* ------------------------------------------------------------*/
   /* First find out if there was a request for pop-up windows*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FL0WW00.FL0WWIX1 = 1; /* General index 1*/
  while (FL0WW00.FL0WWIX1 <= 12)
    ;
    if (FL0WM010.XFRCD[FL0WWIX1] == "?" /* fcty-rsn list requested*/
     || FL0WM010.XFRCD[FL0WWIX1] == "??")
      if (converseVar.eventKey not enter) /* ENTER was not pressed*/
        FLWREC.XXXMODID = "420"; /* Module identification*/
        converseLib.validationFailed(03); /* Indicate PF key not valid*/
        exit stack; /* Exit to display map*/
      end
      FL0WW00.FL0WWIX2 = FL0WW00.FL0WWIX1;
      FL0WW00.FL0WWIX1 = 12; /* Found pop-up window request*/
    else
      if (FL0WW00.FL0WWIX1 == 12) /* End of map and no request*/
        return;
      end
    end
    ;
    FL0WW00.FL0WWIX1 = FL0WW00.FL0WWIX1 + 1;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of fcty-rsn codes.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  XPXX001(); /* window initialization*/
  XX0XW02.XX0XWHDR = "  FACTORY REASON"; /* Heading*/
  ;
  XX0XW02.XX0XWEND = "N"; /* end of request*/
  ;
  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXFR01(); /* Display the list*/
  end
  ;
  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
    ;
    FL0WM010.XFRCD[FL0WWIX2] = "  "; /* Restore prior code*/
  else
    FL0WM010.XFRCD[FL0WWIX2] = XFRTBL.XFRCD[XX0XWPIX]; /* Selected code*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* clear map*/
end // end FL0W420

// Verify data that was entered
Function FL0W500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FLWREC.XXXMODID = "500"; /* Module identification*/
    set FL0WM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If key field changed, set switches and get new data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0WM010.SY1STNBR != FLWREC.SY1STNBR /* or style changed*/
   || FL0WM010.SY2CLRID != FLWREC.SY2CLRID /* or colr*/
   || FL0WM010.XDMCD != FLWREC.XDMCD       /* or dim*/
   || FL0WM010.FBAMDNBR != FLWREC.FBAMDNBR) /* or model number*/
    FLWREC.SY1STNBR = FL0WM010.SY1STNBR; /* style*/
    FLWREC.SY2CLRID = FL0WM010.SY2CLRID; /* color*/
    FLWREC.XDMCD = FL0WM010.XDMCD; /* dim*/
    FLWREC.FBAMDNBR = FL0WM010.FBAMDNBR; /* style*/
    set FL0WM010 initial;
    FL0WW00.FL0WWSWR = "Y"; /* request for data sw*/
    FL0WW00.FL0WWSWF = "Y"; /* map must be formatted*/
    FL0WW00.FL0WWQ = "N"; /* vflqtb01 row was found sw*/
    FL0WW00.FBDTOQTB = 0; /* Initialize total field*/
    FL0WW00.TA5TSQIX = 0; /* highest page number*/
    ;
    ;
    ;
    exit stack;
  end
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Edit the change lines*/
   /* ------------------------------------------------------------*/
  ;
  FL0WW00.FL0WWIX1 = 12; /* General index 1*/
  while (FL0WW00.FL0WWIX1 >= 1)
    ;
    ;
    if (FL0WM010.FL0WMSEL[FL0WWIX1] == "S")
      FL0W540(); /* get summary gender age code*/
    end
    ;
    ;
    FL0WW02.FL0WWGR2 = FL0WW01.FL0WWROW[FL0WWIX1]; /* Group move*/
    ;
    if (FL0WM010.FL0WMSEL[FL0WWIX1] == "S")
      if (FL0WM010.XFRCD[FL0WWIX1] == "  ") /* blank factory reason code*/
        set FL0WM010.XFRCD[FL0WWIX1] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
        FLWREC.XXXMODID = "500"; /* module identification*/
      else
        FL0WW00.XFRCD = FL0WM010.XFRCD[FL0WWIX1];
        FL0W510(); /* edit factory reason code*/
        if (FL0WW00.FL0WWFRF == "N") /* valid xfrcd fl*/
          set FL0WM010.XFRCD[FL0WWIX1] cursor, modified, bold;
          converseLib.validationFailed(10); /* invalid field*/
          FLWREC.XXXMODID = "500"; /* module identification*/
        end
      end
    end
    ;
    ;
    if (FL0WM010.XFRCD[FL0WWIX1] != FL0WW02.XFRCD) /* fcty rsn changed*/
      FL0WW00.XFRCD = FL0WM010.XFRCD[FL0WWIX1];
      FL0W510(); /* edit factory reason code*/
      if (FL0WW00.FL0WWFRF == "N") /* valid xfrcd fl*/
        set FL0WM010.XFRCD[FL0WWIX1] cursor, modified, bold;
        converseLib.validationFailed(10); /* invalid field*/
        FLWREC.XXXMODID = "500"; /* module identification*/
      end
    end
    ;
    ;
    if (FL0WM010.FL0WMSEL[FL0WWIX1] == "S")
      if (FL0WM010.FY1FCTYC[FL0WWIX1] == "  ") /* blank factory code*/
        set FL0WM010.FY1FCTYC[FL0WWIX1] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
        FLWREC.XXXMODID = "500"; /* module identification*/
      else
        FL0WW00.FY1FCTYC = FL0WM010.FY1FCTYC[FL0WWIX1];
        if (FL0WM010.FY1FCTYC[FL0WWIX1] == "X  ")
                                   /* don't edit if blank fcty*/
           /* next sentence*/
        else
          FL0W520(); /* edit factory code*/
          if (FL0WW00.FL0WWFF == "N") /* valid factory fl*/
            set FL0WM010.FY1FCTYC[FL0WWIX1] cursor, modified, bold;
            converseLib.validationFailed(10); /* invalid field*/
            FLWREC.XXXMODID = "500"; /* module identification*/
          end
        end
      end
    end
    ;
    ;
    ;
    if (FL0WM010.FL0WMSEL[FL0WWIX1] == "S")
      ;
      FL0W550(); /* select flqtb record*/
      ;
      FL0WW00.FL0WWQTY = FL0WM010.FL0WMQTY[FL0WWIX1] + FBDREC.FBDQTB;
      if (FL0WW00.FL0WWQTY < 0) /* if new quantity zero*/
        set FL0WM010.FL0WMQTY[FL0WWIX1] modified, bold;
        set FL0WM010.FY1FCTYC[FL0WWIX1] cursor, modified, bold;
        converseLib.validationFailed(399); /* fcty/mo qty cannot be negative*/
        FLWREC.XXXMODID = "500"; /* module identification*/
      end
      ;
    end
    ;
    ;
    if (FL0WM010.FY1FCTYC[FL0WWIX1] != "    " /* fcty changed*/
     && FL0WM010.FL0WMORG[FL0WWIX1] == "FCST") /* forecast*/
      FL0WW00.FY1FCTYC = FL0WM010.FY1FCTYC[FL0WWIX1];
      if (FL0WM010.FY1FCTYC[FL0WWIX1] == "X  ")
         /* next sentence - don't edit blank code*/
      else
        FL0W520(); /* edit factory code*/
        if (FL0WW00.FL0WWFF == "N") /* valid factory fl*/
          set FL0WM010.FY1FCTYC[FL0WWIX1] cursor, modified, bold;
          converseLib.validationFailed(10); /* invalid field*/
        end
      end
    end
    ;
    ;
    ;
    if (FL0WM010.XFRCD[FL0WWIX1] != FL0WW02.XFRCD /* fcty rsn changed*/
     && FL0WM010.FL0WMSEL[FL0WWIX1] == " ")      
      set FL0WM010.FL0WMSEL[FL0WWIX1] cursor, modified, bold;
      converseLib.validationFailed(8); /* Required field - please enter*/
      FLWREC.XXXMODID = "500"; /* module identification*/
    end
    ;
    if (FL0WM010.FY1FCTYC[FL0WWIX1] == "X  " /* blank fcty*/
     && FL0WW02.FY1FCTYC == "   ")           /* and blank fcty*/
       /* next sentence*/
    else
      if (FL0WM010.FY1FCTYC[FL0WWIX1] != "    " /* fcty changed*/
       && FL0WM010.FL0WMORG[FL0WWIX1] == "FCST" /* forecast*/
       && FL0WM010.FL0WMSEL[FL0WWIX1] == " ")  
        set FL0WM010.FL0WMSEL[FL0WWIX1] cursor, modified, bold;
        converseLib.validationFailed(8); /* Required field - please enter*/
        FLWREC.XXXMODID = "500"; /* module identification*/
      end
    end
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    if (FL0WM010.FL0WMSEL[FL0WWIX1] != "S"
     && FL0WM010.FL0WMSEL[FL0WWIX1] != " ")
      set FL0WM010.FL0WMSEL[FL0WWIX1] cursor, modified, bold;
      converseLib.validationFailed(10); /* invalid field*/
      FLWREC.XXXMODID = "500"; /* module identification*/
    end
    ;
    ;
    ;
    ;
    FL0WW00.FL0WWIX1 = FL0WW00.FL0WWIX1 - 1; /* Decrement index 1*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Edit style number*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0WM010.SY1STNBR == "  ") /* blank style*/
    set FL0WM010.SY1STNBR cursor, modified, bold;
    converseLib.validationFailed(8); /* Required field - please enter*/
  end
  ;
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Edit Model number*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0WM010.FBAMDNBR == 0) /* zero model number*/
    set FL0WM010.FBAMDNBR cursor, modified, bold;
    converseLib.validationFailed(8); /* Required field - please enter*/
    FLWREC.XXXMODID = "500"; /* module identification*/
  end
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if factory exists*/
   /* ------------------------------------------------------------*/
  FL0WW00.FL0WWIX1 = 12; /* General index 1*/
  while (FL0WW00.FL0WWIX1 >= 1)
    ;
    if (FL0WM010.FL0WMSEL[FL0WWIX1] == "S") /* Apply changes*/
      FL0WW02.FL0WWGR2 = FL0WW01.FL0WWROW[FL0WWIX1]; /* Group move*/
      FL0W630(); /* select vflqtb01 row*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* Row was found*/
        /* Next sentence*/
        ;
      end
      if (SQLCA.VAGen_SQLCODE == 100) /* Row was not found*/
        ;
        set FL0WM010.FY1FCTYC[FL0WWIX1] cursor, modified, bold;
        converseLib.validationFailed(393);
                                   /* Factory must be on the displayed list*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        ;
      end
    end
    ;
    FL0WW00.FL0WWIX1 = FL0WW00.FL0WWIX1 - 1; /* Decrement index 1*/
  end
  ;
  ;
end // end FL0W500

// Verify factory reason code
Function FL0W510()
  ;
   /* ------------------------------------------------------------*/
   /* Verify the Factory Reason Code*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0WW00.XFRCD in XFRTBL.XFRCD /* Code in table*/
   && XFRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FL0WW00.FL0WWFRF = "Y"; /* valid xfrcd fl*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FL0WW00.FL0WWFRF = "N"; /* valid xfrcd fl*/
    ;
  end
  ;
  ;
end // end FL0W510

// Verify factory code
Function FL0W520()
  ;
   /* ------------------------------------------------------------*/
   /* Verify the Factory Code*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  set FY1REC empty;
  FY1REC.FY1FCTYC = FL0WW00.FY1FCTYC;
  FY1REC.XGPCD = COMMAREA.XGPCD;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL0WW00.FL0WWFF = "Y"; /* valid factory code fl*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* factory not found*/
      FL0WW00.FL0WWFF = "N"; /* valid factory code fl*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "520"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
end // end FL0W520

// Get summary gender/age code
Function FL0W540()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table from the summary codes table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  set YSMREC empty;
  YSMREC.YSMTBLPF = "XGA"; /* table prefix*/
  YSMREC.YSMSYSPF = "FL"; /* system prefix*/
  YSMREC.YSMSUMID = 1; /* summary code id*/
  YSMREC.YSMSRCVL = PG2REC.XGACD; /* source code value*/
  ;
  try
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FL0WW00.YSMXGA = YSMREC.YSMSUMCD; /* summary gender/age code*/
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FL0WW00.YSMXGA = "  "; /* summary gender/age code*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0K540"; /* Process name*/
  TA1REC.TA1LOC = "SEL TABLE ROW";
  TA1REC.TA1DBASE = "DCORP.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0WM010.XXXMODID = "540"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0W540

// Select vflqtb01 row
Function FL0W550()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
  set FBDREC empty;
  ;
  FBDREC.FBDMDTYP = "FT1"; /* model type*/
  FBDREC.FB8BUYDT = FL0WW02.FB8BUYDT; /* buy date*/
  FBDREC.FBAMDNBR = FL0WM010.FBAMDNBR; /* model number*/
  if (FL0WM010.FY1FCTYC[FL0WWIX1] == "X  ")
    FBDREC.FY1FCTYC = "   "; /* move blank factory*/
  else
    FBDREC.FY1FCTYC = FL0WM010.FY1FCTYC[FL0WWIX1]; /* factory code*/
  end
  FBDREC.SY1STNBR = FL0WM010.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0WM010.SY2CLRID; /* color*/
  FBDREC.XDMCD = FL0WM010.XDMCD; /* deminsion*/
  FBDREC.FBDBTCD = "STK"; /* Buy type cd*/
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.PC2INSEG = "000"; /* pc_cu_in_seg_cd*/
  FBDREC.XPGCD = "00"; /* package type code*/
  FBDREC.PC2CUXID = FL0WW02.PC2CUXID; /* customer xref*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("S ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "550"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0W550

// Process valid input request
Function FL0W600()
  if (converseVar.validationMsgNum != 0) /* if edits failed*/
    return; /* return to display the map*/
  end
  ;
  if (converseVar.eventKey is pf19) /* request global update*/
    FL0W650();
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Obtain date and time*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* check for contention due to merge.*/
   /* ------------------------------------------------------------*/
  ;
  FL0W605(); /* check for contention*/
  ;
   /* ------------------------------------------------------------*/
   /* Process adds and changes.  If after return from 620 the*/
   /* page that flqtb was on is not the page that is currently*/
   /* being processed re-obtain the current page from temporary*/
   /* storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FL0WW00.FL0WWUR = "N"; /* update was requested fl*/
  FL0WW00.FL0WWIX1 = 1; /* General index 1*/
  while (FL0WW00.FL0WWIX1 <= 12)
    ;
    if (FL0WM010.FL0WMSEL[FL0WWIX1] == "S") /* Apply changes*/
      FL0WW00.FL0WWUR = "Y"; /* update was requested fl*/
      FL0WW02.FL0WWGR2 = FL0WW01.FL0WWROW[FL0WWIX1]; /* Group move*/
      FL0W630(); /* select vflqtb01 row*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* Row was found*/
        FL0W640(); /* update vffqtb01 mdl-proc-fl*/
        FL0W620(); /* update vflqtb01 row*/
        if (FL0WW00.FL0WWPAG != TA5REC.TA5TSQIX) /* not on correct pg*/
          FL0W660(); /* re-obtain correct page*/
        end
        ;
      end
    end
    ;
    FL0WW00.FL0WWIX1 = FL0WW00.FL0WWIX1 + 1; /* Increment index 1*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FL0WW00.FL0WWUR == "Y") /* update was requested fl*/
    set FL0WM010 initial;
    FL0WW00.FL0WWSWR = "Y"; /* request for data sw*/
    FL0WW00.FL0WWSWF = "Y"; /* map must be formatted*/
    FL0WW00.FL0WWQ = "N"; /* vflqtb01 row was found sw*/
    FL0WW00.FBDTOQTB = 0; /* Total fcst qtb*/
    FL0WW00.FL0WWTB = 0; /* vflqtb01 total buy*/
    FL0WW00.TA5TSQIX = 0; /* Highest page number*/
    FLWREC.XXXMODID = "600"; /* Module identification*/
    converseLib.validationFailed(32); /* Table update was completed*/
    ;
    FL0WW00.FL0WWSWR = "Y"; /* Request for data switch*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* Commit all changes to protected resources.*/
    /* ------------------------------------------------------------*/
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    ;
  end
  ;
  ;
  ;
end // end FL0W600

// check for merge contention
Function FL0W605()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty;
  ;
  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        FLWREC.XXXMODID = "605"; /* module identification*/
        exit stack; /* return to process*/
      end
    else
      ;
      ;
      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      FLWREC.XXXMODID = "605"; /* Module identification*/
      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(19); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(01); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end
  ;
  ;
end // end FL0W605

// Update vflqtb01 row
Function FL0W620()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Get flqtb tsq row. It may be on a previous tsq page.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5TSQIX = 1;
  FL0WW00.FL0W-TSQ-ROW-FOUND-FL = "N";
  while (TA5REC.TA5TSQIX <= FL0WW00.TA5TSQIX
   && FL0WW00.FL0W-TSQ-ROW-FOUND-FL == "N")
    FL0W622(); /* Search tsq page for lrps*/
    if (FL0WW00.FL0W-TSQ-ROW-FOUND-FL == "N")
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    end
  end
  ;
  ;
  FBDREC.FBDQTB = FBDREC.FBDQTB + FL0WM010.FL0WMQTY[FL0WWIX1];
  FBDREC.XFRCD = FL0WM010.XFRCD[FL0WWIX1]; /* factory reason code*/
  ;
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("U ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL0W623(); /* update temp storage*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      ;
      FLWREC.XXXMODID = "620"; /* Module identification*/
      ;
      ;
      converseLib.validationFailed(47); /* Table updated by another user*/
      set FL0WM010 initial;
      FL0WW00.FL0WWSWR = "Y"; /* request for data sw*/
      FL0WW00.FL0WWSWF = "Y"; /* map must be formatted*/
      FL0WW00.FL0WWQ = "N"; /* vflqtb01 row was found sw*/
      FL0WW00.FBDTOQTB = 0; /* Total fcst qtb*/
      FL0WW00.FL0WWTB = 0; /* vflqtb01 total buy*/
      FL0WW00.FL0WWSWR = "Y"; /* Request for data switch*/
      ;
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0W620

// Get vflqtb01 change count
Function FL0W622()
   /* ------------------------------------------------------------*/
   /* Get a page from temporary storage*/
   /* ------------------------------------------------------------*/
  FL0WW01.XXXTSLEN = 1512; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    FL0WW00.FL0WWIX3 = 1; /* General index 1*/
    while (FL0WW00.FL0WWIX3 <= 12
     && FL0WW00.FL0W-TSQ-ROW-FOUND-FL == "N")
      FL0WW03.FL0WWGR3 = FL0WW01.FL0WWROW[FL0WWIX3];
      if (FL0WW03.FL0WWORG == "LRPS") /* Quantity comes from vflqtb01*/
           /* convert buy-dt date to yymm*/
        FL0WW00.FL0WWDAT = FL0WW03.FB8BUYDT;
        FL0WW00.FL0WWBYY = FL0WW00.FL0WWYY;
        FL0WW00.FL0WWBMM = FL0WW00.FL0WWMM;
        if (FL0WW00.FL0WWBMO == FL0WM010.FB8BUYDT[FL0WWIX1]
         && FL0WW03.FY1FCTYC == FL0WM010.FY1FCTYC[FL0WWIX1])
          FL0WW00.FL0W-TSQ-ROW-FOUND-FL = "Y";
          FL0WW03.ZZZCHGCT = FL0WW03.ZZZCHGCT + 1; /* Bump up change count*/
          FL0WW01.FL0WWROW[FL0WWIX3] = FL0WW03.FL0WWGR3;
          ;
        end
      end
      ;
      FL0WW00.FL0WWIX3 = FL0WW00.FL0WWIX3 + 1;
    end
    ;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "622"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0W622

// Update temp storage
Function FL0W623()
   /* ------------------------------------------------------------*/
   /* Get a page from temporary storage*/
   /* ------------------------------------------------------------*/
  FL0WW01.XXXTSLEN = 1512; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "623"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0W623

// Select vflqtb01 row
Function FL0W630()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
  set FBDREC empty;
  ;
  FBDREC.FBDMDTYP = "FT1"; /* model type*/
  FBDREC.FB8BUYDT = FL0WW02.FB8BUYDT; /* buy date*/
  FBDREC.FBAMDNBR = FL0WM010.FBAMDNBR; /* model number*/
  if (FL0WM010.FY1FCTYC[FL0WWIX1] == "X  ") /* blank fcty*/
    FBDREC.FY1FCTYC = "   "; /* fcty code*/
  else
    FBDREC.FY1FCTYC = FL0WM010.FY1FCTYC[FL0WWIX1]; /* factory code*/
  end
  FBDREC.SY1STNBR = FL0WM010.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0WM010.SY2CLRID; /* color*/
  FBDREC.XDMCD = FL0WM010.XDMCD; /* deminsion*/
  FBDREC.FBDBTCD = "STK"; /* Buy type cd*/
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.PC2INSEG = "000"; /* pc_cu_in_seg_cd*/
  FBDREC.XPGCD = "00"; /* package type code*/
  FBDREC.PC2CUXID = FL0WW02.PC2CUXID; /* customer xref*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("S ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return; /* Return to previous process*/
    end
    ;
    ;
    ;
    ;
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0W630

// Update vffqtb01 mdl-proc-fl
Function FL0W640()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ;
  FL0WW00.FL0WWPAG = TA5REC.TA5TSQIX; /* save current page*/
  ;
  set FB8REC empty;
  FB8REC.FB8RECTP = FL0WW02.FB8RECTP;
  FB8REC.PG1SC4CD = FL0WW02.PG1SC4CD;
  FB8REC.XCT-CTRY-CD = FL0WW02.FY1FCTYC;
  FB8REC.SY1STNBR = FL0WW02.SY1STNBR;
  FB8REC.SY2CLRID = FL0WW02.SY2CLRID;
  FB8REC.XDMCD = FL0WW02.XDMCD;
  FB8REC.XPLCD = FL0WW02.XPLCD;
  FB8REC.PA1OANBR = FL0WW02.PA1OANBR;
  FB8REC.FB8BUYDT = FL0WW02.FB8BUYDT;
  FB8REC.FB8FTQTB = FL0WW02.FB8FTQTB;
  FB8REC.FB8SKQTB = FL0WW02.FB8SKQTB;
  FB8REC.FB8DSQTB = FL0WW02.FB8DSQTB;
  FB8REC.FB8SAPFL = FL0WW02.FB8SAPFL;
  FB8REC.FB8FFCOM = FL0WW02.FB8FFCOM;
  FB8REC.FB8MPFL[1] = FL0WW02.FB8MPFL[1];
  FB8REC.FB8MPFL[2] = FL0WW02.FB8MPFL[2];
  FB8REC.FB8MPFL[3] = FL0WW02.FB8MPFL[3];
  FB8REC.FB8MPFL[4] = FL0WW02.FB8MPFL[4];
  FB8REC.FB8MPFL[5] = FL0WW02.FB8MPFL[5];
  FB8REC.FB8MPFL[6] = FL0WW02.FB8MPFL[6];
  FB8REC.FB8MPFL[7] = FL0WW02.FB8MPFL[7];
  FB8REC.FB8MPFL[8] = FL0WW02.FB8MPFL[8];
  FB8REC.FB8MPFL[9] = FL0WW02.FB8MPFL[9];
  FB8REC.FB8MPFL[10] = FL0WW02.FB8MPFL[10];
  FB8REC.ZZZSDT = FL0WW02.ZZZSDT;
  FB8REC.ZZZSTM = FL0WW02.ZZZSTM;
  FB8REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB8REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FB8REC.ZZZCHGCT = FL0WW02.ZZZCHGCT;
  ;
  FL0WW00.FL0WWMDL = FL0WM010.FBAMDNBR; /* Model number*/
  if (FL0WW00.FL0WWTN == .01) /* Model number extention*/
    FB8REC.FB8MPFL[1] = "Y"; /* Turn on model processed flag*/
  end
  if (FL0WW00.FL0WWTN == .02) /* Model number extention*/
    FB8REC.FB8MPFL[2] = "Y"; /* Turn on model processed flag*/
  end
  if (FL0WW00.FL0WWTN == .03) /* Model number extention*/
    FB8REC.FB8MPFL[3] = "Y"; /* Turn on model processed flag*/
  end
  if (FL0WW00.FL0WWTN == .04) /* Model number extention*/
    FB8REC.FB8MPFL[4] = "Y"; /* Turn on model processed flag*/
  end
  if (FL0WW00.FL0WWTN == .05) /* Model number extention*/
    FB8REC.FB8MPFL[5] = "Y"; /* Turn on model processed flag*/
  end
  if (FL0WW00.FL0WWTN == .06) /* Model number extention*/
    FB8REC.FB8MPFL[6] = "Y"; /* Turn on model processed flag*/
  end
  if (FL0WW00.FL0WWTN == .07) /* Model number extention*/
    FB8REC.FB8MPFL[7] = "Y"; /* Turn on model processed flag*/
  end
  if (FL0WW00.FL0WWTN == .08) /* Model number extention*/
    FB8REC.FB8MPFL[8] = "Y"; /* Turn on model processed flag*/
  end
  if (FL0WW00.FL0WWTN == .09) /* Model number extention*/
    FB8REC.FB8MPFL[9] = "Y"; /* Turn on model processed flag*/
  end
  if (FL0WW00.FL0WWTN == .10) /* Model number extention*/
    FB8REC.FB8MPFL[10] = "Y"; /* Turn on model processed flag*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3450" ("U2", SQLCA, FB8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FLWREC.XXXMODID = "640"; /* Module identification*/
      ;
      converseLib.validationFailed(47); /* Table updated by another user*/
      set FL0WM010 initial;
      FL0WW00.FL0WWSWR = "Y"; /* request for data sw*/
      FL0WW00.FL0WWSWF = "Y"; /* map must be formatted*/
      FL0WW00.FL0WWQ = "N"; /* vflqtb01 row was found sw*/
      FL0WW00.FBDTOQTB = 0; /* Total fcst qtb*/
      FL0WW00.FL0WWTB = 0; /* vflqtb01 total buy*/
      FL0WW00.FL0WWSWR = "Y"; /* Request for data switch*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB8REC.FB8GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0W640

// Submit Global update
Function FL0W650()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FL0WM010.XXXMODID = "650"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if a report has been selected, submit jcl to product report*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    FL0W657(); /* format production jcl*/
  else
    FL0W655(); /* format development jcl*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* reset map if job(s) successfully submitted.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 76) /* job was submitted*/
    set FL0WM010 empty;
  end
  ;
  ;
end // end FL0W650

// test jcl
Function FL0W655()
   /* ------------------------------------------------------------*/
   /* Process valid input request*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/
  ;
  FL0WW05.FL0WWSCH = FL0WM010.FBAMDNBR; /* schedule number*/
  FL0WW05.FL0WWLOK = "N"; /* lock tables fl*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0WW00.FL0WWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0WW00.FL0WWIXT > 0) /* Until end of table*/
    ;
    if (FL0WT01.TARTYPE[FL0WWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0WW05.FL0WWJCP; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    else
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0WT01.TARJCL[FL0WWIXT];
      TA6REC.TARTYPE[TA6INDEX] = FL0WT01.TARTYPE[FL0WWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0WT01.TARJCL[FL0WWIXT] == "/*EOF") /* End of table*/
      FL0WW00.FL0WWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0WW00.FL0WWIXT = FL0WW00.FL0WWIXT + 1; /* Increment table index*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0WS01(); /* Submit the JCL*/
  ;
  ;
end // end FL0W655

// production jcl
Function FL0W657()
   /* ------------------------------------------------------------*/
   /* Process valid input request*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/
  ;
  FL0WW05.FL0WWSCH = FL0WM010.FBAMDNBR; /* schedule number*/
  FL0WW05.FL0WWLOK = "N"; /* lock the table flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Determine Overrides*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FL0WW00.FL0WWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0WW00.FL0WWIXT > 0) /* Until end of table*/
    ;
    ;
    if (FL0WT02.TARTYPE[FL0WWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0WW05.FL0WWJCP; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    else
      ;
      ;
      ;
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FL0WT02.TARJCL[FL0WWIXT];
      TA6REC.TARTYPE[TA6INDEX] = FL0WT02.TARTYPE[FL0WWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0WT02.TARJCL[FL0WWIXT] == "/*EOF") /* End of table*/
      FL0WW00.FL0WWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FL0WW00.FL0WWIXT = FL0WW00.FL0WWIXT + 1; /* Increment table index*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  FL0WS01(); /* Submit the JCL*/
  ;
  ;
end // end FL0W657

// Re-obtain current tsq page
Function FL0W660()
   /* ------------------------------------------------------------*/
   /* Get a page from temporary storage*/
   /* ------------------------------------------------------------*/
  FL0WW01.XXXTSLEN = 1512; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
   /* MOVE FL0WW00.TA5TSQIX TO TA5REC.TA5TSQIX;/* saved current page*/
  TA5REC.TA5TSQIX = FL0WW00.FL0WWPAG; /* saved current page*/
  ;
  try
    call "TA0050" (FL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "660"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL0W660

// call taop
Function FL0WS01()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* no msgs when batch job done*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0WM010.XXXMODID = "S01"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FL0WM010.XXXMODID = "S01"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0WS01

//*** RECORD=FL0WW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0WW00 type basicRecord
  5 * char(50) ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FL0WWQ FL0WWQ ; 
    10 FL0WWFRS FL0WWFRS ; 
    10 FL0WWFRF FL0WWFRF ; 
    10 FL0WWFF FL0WWFF ; 
    10 FL0WWSWF FL0WWSWF ; 
    10 FL0WWSWR FL0WWSWR ; 
    10 FL0WWUR FL0WWUR ; 
    10 FL0WWTB FL0WWTB ; 
    10 FL0WWMDL FL0WWMDL ; 
      15 * num(3) ; 
      15 FL0WWTN FL0WWTN ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 FL0WWPAG FL0WWPAG ; 
    10 FBDTOQTB FBDTOQTB ; 
    10 XFRCD XFRCD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 YSMXGA YSMXGA ; 
    10 FB9BTQTY FB9BTQTY ; 
    10 FL0WWIX1 FL0WWIX1 ; 
    10 FL0WWIX2 FL0WWIX2 ; 
    10 FL0WWIX3 FL0WWIX3 ; 
    10 FL0WWIXT FL0WWIXT ; 
  5 FL0WWBMO FL0WWBMO ; 
    10 FL0WWBYY FL0WWBYY ; 
    10 FL0WWBMM FL0WWBMM ; 
  5 FL0WWZDT FL0WWZDT ; 
    10 FL0WWZMM FL0WWZMM ; 
    10 FL0WWZDD FL0WWZDD ; 
    10 FL0WWZYY FL0WWZYY ; 
  5 FL0WWDAT FL0WWDAT ; 
    10 FL0WWCYM FL0WWCYM ; 
      15 FL0WW19 FL0WW19 ; 
      15 FL0WWYY FL0WWYY ; 
      15 FL0WWMM FL0WWMM ; 
      15 FL0WWDD FL0WWDD ; 
  5 FL0WWQTY FL0WWQTY ; 
  5 FL0WSEDT FL0WSEDT ; 
    10 FL0WSECC FL0WSECC ; 
    10 FL0WSEYY FL0WSEYY ; 
  5 FL0WWSNS FL0WWSNS ; 
    10 XSECD XSECD ; 
    10 FL0WSEYR FL0WSEYR ; 
  5 FL0W-TSQ-ROW-FOUND-FL FL0W-TSQ-ROW-FOUND-FL ; 
end // end FL0WW00

//*** RECORD=FL0WW01 ****
// ------------------------
// temp storage for vflqtb01
// ------------------------
// ***********************
Record FL0WW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 FL0WWGR1 FL0WWGR1 ; 
    10 FL0WWPRT FL0WWPRT [12] ; 
    10 FL0WWROW FL0WWROW [12] ; 
end // end FL0WW01

//*** RECORD=FL0WW02 ****
// *************** FOOTWEAR FACTORY LOAD/BUY SYSTEM ***********
// ***************  FORECAST QUANTITY TO BUY TABLE ************
// 
// DB2 TABLE VIEW:     VFFQTB01 and vflqtb01
// 
// COPYLIB MEMBER:     DCL00604 and dcl00606
// 
// I/O MODULE:         fl3200 - used in conjuction with fl0w
// 
// KEY TO DB2 TABLE    FB8RECTP
//                     PG1SC4CD
//                     SY1STNBR
//                     SY2CLRID
//                     XDMCD
//                     FB8BUYDT
// 
// MAINTENANCE LOG:
// 
// CONTROL     DATE    NAME     COMMENT
// --------  --------  ------   -------------------------------
//           04/20/90  pmainw   NEW RECORD DEFINITION.
// 
// ***********************
Record FL0WW02 type basicRecord
  5 FL0WWGR2 FL0WWGR2 ; 
    10 FB8RECTP FB8RECTP ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XPLCD XPLCD ; 
    10 PA1OANBR PA1OANBR ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FB8FTQTB FB8FTQTB ; 
    10 FB8SKQTB FB8SKQTB ; 
    10 FB8DSQTB FB8DSQTB ; 
    10 FB8SAPFL FB8SAPFL ; 
    10 FB8FFCOM FB8FFCOM ; 
    10 FB8MPFL FB8MPFL [10] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 PC2CUXID PC2CUXID ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 FBDMDTYP FBDMDTYP ; 
    10 FBDQTB FBDQTB ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP2LNINB OP2LNINB ; 
    10 OP1NORID OP1NORID ; 
    10 OP1PARTN OP1PARTN ; 
    10 XFRCD XFRCD ; 
    10 FL0WWORG FL0WWORG ; 
end // end FL0WW02

//*** RECORD=FL0WW03 ****
// *************** FOOTWEAR FACTORY LOAD/BUY SYSTEM ***********
// ***************  FORECAST QUANTITY TO BUY TABLE ************
// 
// DB2 TABLE VIEW:     VFFQTB01 and vflqtb01
// 
// COPYLIB MEMBER:     DCL00604 and dcl00606
// 
// I/O MODULE:         fl3200 - used in conjuction with fl0w
// 
// KEY TO DB2 TABLE    FB8RECTP
//                     PG1SC4CD
//                     SY1STNBR
//                     SY2CLRID
//                     XDMCD
//                     FB8BUYDT
// 
// MAINTENANCE LOG:
// 
// CONTROL     DATE    NAME     COMMENT
// --------  --------  ------   -------------------------------
//           04/20/90  pmainw   NEW RECORD DEFINITION.
// 
// ***********************
Record FL0WW03 type basicRecord
  5 FL0WWGR3 FL0WWGR3 ; 
    10 FB8RECTP FB8RECTP ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XPLCD XPLCD ; 
    10 PA1OANBR PA1OANBR ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FB8FTQTB FB8FTQTB ; 
    10 FB8SKQTB FB8SKQTB ; 
    10 FB8DSQTB FB8DSQTB ; 
    10 FB8SAPFL FB8SAPFL ; 
    10 FB8FFCOM FB8FFCOM ; 
    10 FB8MPFL FB8MPFL [10] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 PC2CUXID PC2CUXID ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 FBDMDTYP FBDMDTYP ; 
    10 FBDQTB FBDQTB ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP2LNINB OP2LNINB ; 
    10 OP1NORID OP1NORID ; 
    10 OP1PARTN OP1PARTN ; 
    10 XFRCD XFRCD ; 
    10 FL0WWORG FL0WWORG ; 
end // end FL0WW03

//*** RECORD=FL0WW05 ****
// ----------------------------
// Application working storage.
// JCL table lines.
// ----------------------------
// ***********************
Record FL0WW05 type basicRecord
  10 FL0WWJCP FL0WWJCP ; 
    15 FL0WWSCH FL0WWSCH ; 
    15 FL0WWLOK FL0WWLOK ; 
    15 * char(74) ; 
end // end FL0WW05

// Tsq row found flag
DataItem FL0W-TSQ-ROW-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sesn cc
DataItem FL0WSECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sesn year ccyy
DataItem FL0WSEDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sesn year
DataItem FL0WSEYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sesn yy
DataItem FL0WSEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record 19
DataItem FL0WW19 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FL0WWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy month
DataItem FL0WWBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy year
DataItem FL0WWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current CCYYMM
DataItem FL0WWCYM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record yyyymmdd
DataItem FL0WWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record dd
DataItem FL0WWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Factory found fl
DataItem FL0WWFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory reason found fl
DataItem FL0WWFRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time in to appl fl
DataItem FL0WWFRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level item
DataItem FL0WWGR1 char(1512)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fb3200/fl0w rec group
DataItem FL0WWGR2 char(125)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fb3200/fl0w rec group
DataItem FL0WWGR3 char(125)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FL0WWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem FL0WWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 3
DataItem FL0WWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 3
DataItem FL0WWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parm JCL statement
DataItem FL0WWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lock the tables flag
DataItem FL0WWLOK char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Model number
DataItem FL0WWMDL num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work record mm
DataItem FL0WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Origin of change
DataItem FL0WWORG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save current page
DataItem FL0WWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Protect map row fl
DataItem FL0WWPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vflqtb01 row was found fl
DataItem FL0WWQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work quantity
DataItem FL0WWQTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp storage for vflqtb01
DataItem FL0WWROW char(125)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory model number
DataItem FL0WWSCH num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sesn cd and yy comb
DataItem FL0WWSNS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FL0WWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FL0WWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total buy from vflqtb01
DataItem FL0WWTB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Model number tenths
DataItem FL0WWTN num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update requested fl
DataItem FL0WWUR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record yy
DataItem FL0WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system dd
DataItem FL0WWZDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system yymmdd
DataItem FL0WWZDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system mm
DataItem FL0WWZMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work system yy
DataItem FL0WWZYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

