package fl0q;

import corpcom2.XX0XW01;
import corpcom2.YSMREC;
import corpcom3.XPFL001;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCNCD;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XFRCD;
import corpx1.XGACD;
import corpx1.XGADESC;
import corpx1.XGATBL;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XSECD;
import corpx2.XUMCD;
import corpy2.YSMXGA;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB-LATE-BK-FL;
import fb.common.FB-LATE-BK-FL-MDT;
import fb.common.FB8BUYDT;
import fb.common.FB8FFCOM;
import fb.common.FBAMDNBR;
import fb.common.FBAREC;
import fb.common.FBDBTCD;
import fb.common.FBDGROUP;
import fb.common.FBDMDTYP;
import fb.common.FBDPSFTY;
import fb.common.FBDQTB;
import fb.common.FBDREC;
import fb.common.FBDTOQTB;
import fb.common.FBEREC;
import fl.common.FLWREC;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import fy.common.FY2MFGPC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP2LNINB;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PGAREC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY2RSTNB;
import ta.common.TA1REC;
import ta.common.TA4REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=FL0Q ****
// This application is part of the factory load system.  When a
// schedule number, year/month, style, and from-factory are
// entered, the corresponding buy quantity is displayed.  The
// user may then split the quantity among several factories by
// entering factory codes and quantities.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/05/89   LREIN    Created.
// 08/14/90   jmclau   added code to get style developement
//                     short style name and move blanks into
//                     color abbreviation.
// 08/27/90   jalle1   Check for contention due to merge before
//                     any update to dfbuy.vflqtb01
//                     (dhermm request).
// 11/09/90   jalle1   added code to allow splits from a blank
//                     factory.
// 11/16/90   jalle1   reformmated map and changed code to
//                     allow a total of 13 factories on the
//                     screen.
// 04/12/91   pmainw   Get short style name from
//                     dprodg.vsyprd01.
// 05/24/91   jalle1   pass key data between fl programs.
// 10/08/91   jalle1   add fb-late-bk-fl and fb-late-bk-fl-mdt
//                     to working storage records due to
//                     oct '91 table chgs.
// 03/31/92   jmclau   fl-313 add gndr age cd and description.
// 05/20/92   jmclau   fl-333 Default cursor to style un-
//                     conditionally except when schedule nbr
//                     is blank.
// 05/21/92   jmclau   fl-334 carry split from factory when
//                     using pf11.
// 08/10/92   jmclau   fl-342 add season code and season year.
// 07/14/93   jmclau   fl-354 add 'ADD FACTORY' function.
// y2kfix 12/12/97 pharwo year 2000 compliance changes to
//                     fl0qm001-fb8butdt, fl0q615.
// *********************
Program FL0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FBAREC FBAREC; // record
  FBDREC FBDREC; // record
  FBEREC FBEREC; // record
  FL0QW00 FL0QW00; // record
  FL0QW01 FL0QW01; // record
  FL0QW02 FL0QW02; // record
  FL0QW03 FL0QW03; // record
  FL0QW04 FL0QW04; // record
  FL0QW05 FL0QW05; // record
  FL0QW06 FL0QW06; // record
  FL0QW07 FL0QW07; // record
  FL0QW08 FL0QW08; // record
  FL0QW09 FL0QW09; // record
  FL0QW0A FL0QW0A; // record
  FL0QW0B FL0QW0B; // record
  FL0QW0C FL0QW0C; // record
  FL0QW0D FL0QW0D; // record
  FLWREC FLWREC; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA4REC TA4REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use FL0QM.FL0QM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    set SQLCA empty; /* Initialise sql return area*/
    set FL0QW00 empty; /* Initialise prog working storage*/
    set FL0QW01 empty; /* Initialise display working storage*/
    set FL0QW02 empty; /* Initialise display working storage*/
    set FL0QW03 empty; /* Initialise display working storage*/
    set FL0QW04 empty; /* Initialise display working storage*/
    set FL0QW05 empty; /* Initialise display working storage*/
    set FL0QW06 empty; /* Initialise display working storage*/
    set FL0QW07 empty; /* Initialise display working storage*/
    set FL0QW08 empty; /* Initialise display working storage*/
    set FL0QW09 empty; /* Initialise display working storage*/
    set FL0QW0A empty; /* Initialise display working storage*/
    set FL0QW0B empty; /* Initialise display working storage*/
    set FL0QW0C empty; /* Initialise display working storage*/
    set FL0QW0D empty; /* Initialise display working storage*/
    set FL0QM001 initial; /* Initialise map output area*/
    FL0QW00.FL0QWDRS = "N"; /* move no to data request switch*/
    FL0QW00.FL0QWMCS = "Y"; /* move yes to map clear switch*/
    FL0QW00.FL0QWSHF = "L"; /* display left screen*/
    FL0QW00.FL0QW-ADD-FCTY-FL = "N"; /* initialize add new fcty fl*/
    ;
    if (FLWREC.FBAMDNBR != 0)
      FL0QM001.FBAMDNBR = FLWREC.FBAMDNBR; /* model number*/
      FL0QW00.FL0QWDRS = "Y"; /* move yes to data request switch*/
    end
    ;
    ;
    if (FLWREC.SY1STNBR != " ")
      FL0QM001.SY1STNBR = FLWREC.SY1STNBR; /* style number*/
    end
    ;
    if (FLWREC.SY2CLRID != " ")
      FL0QM001.SY2CLRID = FLWREC.SY2CLRID; /* color code*/
    end
    ;
    if (FLWREC.XDMCD != " ")
      FL0QM001.XDMCD = FLWREC.XDMCD; /* dimension code*/
    end
    ;
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Default gpc to footwear if blank.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.XGPCD == "  ")
      COMMAREA.XGPCD = "02";
    end
    ;
    ;
    ;
    ;
    ;
    goto FL0Q001; /* Converse splits by factory*/
    ;
    ;
    FL0Q001: FL0Q001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the splits by factory process.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0Q001; /* Converse splits by factory process*/
    ;
    ;
  end // end main
end // end FL0Q

// LR detail sched splits main pr
Function FL0Q001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) obtain data to display.*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FL0Q100(); /* Obtain data to display*/
  ;
  FL0Q200(); /* Format and display the map*/
  ;
  FL0Q300(); /* Check attention identifier*/
  ;
  FL0Q400(); /* Reset fields to normal intensity*/
  ;
  FL0Q500(); /* Verify the entered data*/
  ;
  FL0Q600(); /* Process valid input request*/
  ;
  ;
end // end FL0Q001

// Obtain the data to display
Function FL0Q100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWSER != "Y")
    if (FL0QW00.FL0QWDRS != "Y") /* Data was not requested*/
      return; /* Return to previous process*/
    end
    ;
    if (converseVar.validationMsgNum != 0) /* if an error was found*/
      return; /* Return to previous process*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If no data entered, move defaults*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QM001.SY2CLRID <= " ") /* data not in map*/
    FL0QM001.SY2CLRID = "00"; /* use default*/
  end
  ;
  if (FL0QM001.XDMCD <= " ") /* data not in map*/
    FL0QM001.XDMCD = "00"; /* use default*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Save the key information in map display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the row storage area, format the key and obtain the*/
   /* table row to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
                                   /* Clear row storage area for addtl prod*/
  ;
  PG2REC.XGPCD = "02"; /* GPC*/
  PG2REC.SY1STNBR = FL0QM001.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = FL0QM001.SY2CLRID; /* Color*/
  PG2REC.XDMCD = FL0QM001.XDMCD; /* Dimension*/
  FL0QW00.SY1STNBR = FL0QM001.SY1STNBR; /* Style*/
  FL0QW00.SY2CLRID = FL0QM001.SY2CLRID; /* Color*/
  FL0QW00.XDMCD = FL0QM001.XDMCD; /* Dimension*/
  FL0QW00.FBAMDNBR = FL0QM001.FBAMDNBR; /* model number*/
  FL0QW00.FL0QW-ADD-FCTY = FL0QM001.FL0QW-ADD-FCTY; /* New factory*/
  ;
  FL0Q110(); /* Obtain the addtl prod data table row*/
  ;
  ;
  FL0Q120(); /* Obtain the flqtb table row*/
  ;
  ;
  FL0Q130(); /* Get buy dates in case a request is*/
                                   /* made to create a new factory*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check for not data found condition*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FL0QW01.FBDMDTYP[1] == "   ") /* empty ws row*/
    converseLib.validationFailed(18);
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No error was found*/
    FL0QW00.FL0QWDRS = "N"; /* Request for data switch*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If summary error,  display message*/
   /* ------------------------------------------------------------*/
  if (FL0QW00.FL0QWSER == "Y")
    FL0QW00.FL0QWSER = "N";
    converseLib.validationFailed(252);
  end
  ;
end // end FL0Q100

// get add'l product data
Function FL0Q110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0QM001.SY2CLRAB = PG2REC.SY2CLRAB; /* color abbrv*/
      FL0QW00.SY2CLRAB = PG2REC.SY2CLRAB; /* color abbrv*/
      FL0QM001.XGACD = PG2REC.XGACD; /* gender age code*/
      FL0QW00.XGACD = PG2REC.XGACD; /* gender age code*/
      if (PG2REC.XGACD in XGATBL.XGACD) /* get gender age desc*/
        FL0QM001.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* gndr age desc*/
        FL0QW00.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* gndr age desc*/
      end
      FL0QM001.XCNCD = PG2REC.XCNCD; /* construction code*/
      FL0QW00.XCNCD = PG2REC.XCNCD; /* construction code*/
      FL0QW00.XSECD = PG2REC.XSECD; /* season code*/
      FL0QW00.FL0QSEDT = PG2REC.XSNYR; /* season year ccyy*/
      FL0QW00.FL0QSEYR = FL0QW00.FL0QSEYY; /* season yy*/
      FL0QW00.SY2RSTNB = PG2REC.SY2RSTNB; /* root style nbr*/
      FL0Q115(); /* get style short name*/
      FL0QM001.SY1SSTNM = FL0QW00.SY1SSTNM; /* style short name*/
      return; /* Return to previous process*/
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      FL0Q112(); /* get gender age and season cd data*/
      FL0Q115(); /* get style short name*/
      FL0QM001.SY1SSTNM = FL0QW00.SY1SSTNM; /* style short name*/
      FL0QM001.SY2CLRAB = " "; /* color abbrv*/
      FL0QW00.SY2CLRAB = " "; /* color abbrv*/
      FL0QM001.SY2CLRID = "   ";
      FL0QW00.SY2CLRID = "   ";
      FL0QM001.XDMCD = "  ";
      FL0QW00.XDMCD = "  ";
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FL0Q110

// get sty-dev descriptions
Function FL0Q112()
   /* ------------------------------------------------------------*/
   /* build the key*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty; /* initialise work area*/
  PG4REC.PG4STNBR = FL0QM001.SY1STNBR; /* style number*/
  ;
   /* ------------------------------------------------------------*/
   /* get the  row to display from the style development table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* get row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0QM001.XGACD = PG4REC.XGACD; /* gender age code*/
      FL0QW00.XGACD = PG4REC.XGACD; /* gender age code*/
      if (PG4REC.XGACD in XGATBL.XGACD) /* get xga description*/
        FL0QM001.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
        FL0QW00.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
      end
      FL0QM001.XCNCD = PG4REC.XCNCD; /* construction code*/
      FL0QW00.XCNCD = PG4REC.XCNCD; /* construction code*/
      FL0QW00.FL0QSEDT = PG4REC.XSNYR; /* season year ccyy*/
      FL0QW00.FL0QSEYR = FL0QW00.FL0QSEYY; /* season year yy*/
      FL0QW00.XSECD = PG4REC.XSECD; /* season code*/
      FL0QM001.FL0QWSNS = FL0QW00.FL0QWSNS; /* season cd and yr comb*/
      FL0QW00.SY2RSTNB = "      "; /* style root nbr*/
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      ;
      FL0QW00.XGACD = "  "; /* gender age code*/
      FL0QM001.XGACD = "  "; /* gender age code*/
      FL0QW00.FL0QWSNS = "    "; /* season cd and year comb*/
      FL0QM001.FL0QWSNS = "    "; /* season cd and year comb*/
      FL0QM001.XGADESC = "               "; /* gender age desc*/
      FL0QW00.XGADESC = "               "; /* gender age description*/
      FL0QW00.XCNCD = "  "; /* construction code*/
      FL0QM001.XCNCD = "  "; /* construction code*/
      FL0QW00.SY2RSTNB = "******"; /* style root nbr*/
      FL0QM001.SY2RSTNB = "******"; /* style root nbr*/
      return;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "112"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT STYLE DEV DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0QW01.SY1STNBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0Q112

// Get style short name
Function FL0Q115()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPRODG.VSYPRD01*/
   /* ---------------------------------------------------------*/
  ;
  ;
  set PGAREC empty;
  ;
  PGAREC.XGPCD = COMMAREA.XGPCD;
  ;
  PGAREC.SY1STNBR = FL0QM001.SY1STNBR;
  ;
  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FL0QW00.SY1SSTNM = PGAREC.PGASSTNM;
    return;
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/
      ;
      FL0QW00.SY1SSTNM = "************";
      return;
      ;
    else
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "GET SHORT STYLE NAME            ";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        ;
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
        ;
      else
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end FL0Q115

// get flqtb data
Function FL0Q120()
  ;
  ;
  FL0Q122(); /* declare cursor vflqtb01*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    FL0Q124(); /* fetch cursor vflqtb01*/
  end
  ;
  FL0Q128(); /* close cursor vflqtb01*/
end // end FL0Q120

// declare cursor vflqtb01
Function FL0Q122()
  ;
   /* ------------------------------------------------------------*/
   /* Clear the row storage area, format the key and obtain the*/
   /* table row to be displayed for flqtb table*/
   /* ------------------------------------------------------------*/
  ;
  set FBDREC empty; /* Clear row db2 area for flqtb*/
  set FL0QW01 empty; /* Clear row storage area for flqtb*/
  set FL0QW02 empty; /* Clear row storage area for flqtb*/
  set FL0QW03 empty; /* Clear row storage area for flqtb*/
  set FL0QW04 empty; /* Clear row storage area for flqtb*/
  set FL0QW05 empty; /* Clear row storage area for flqtb*/
  set FL0QW06 empty; /* Clear row storage area for flqtb*/
  set FL0QW07 empty; /* Clear row storage area for flqtb*/
  set FL0QW08 empty; /* Clear row storage area for flqtb*/
  set FL0QW09 empty; /* Clear row storage area for flqtb*/
  set FL0QW0A empty; /* Clear row storage area for flqtb*/
  set FL0QW0B empty; /* Clear row storage area for flqtb*/
  set FL0QW0C empty; /* Clear row storage area for flqtb*/
  set FL0QW0D empty; /* Clear row storage area for flqtb*/
  FL0QW00.FL0QWFC1 = "    ";
  FL0QW00.FL0QWFC2 = "    ";
  FL0QW00.FL0QWFC3 = "    ";
  FL0QW00.FL0QWFC4 = "    ";
  FL0QW00.FL0QWFC5 = "    ";
  FL0QW00.FL0QWFC6 = "    ";
  FL0QW00.FL0QWFC7 = "    ";
  FL0QW00.FL0QWFC8 = "    ";
  FL0QW00.FL0QWFC9 = "    ";
  FL0QW00.FL0QWFCA = "    ";
  FL0QW00.FL0QWFCB = "    ";
  FL0QW00.FL0QWFCC = "    ";
  FL0QW00.FL0QWFCD = "    ";
  ;
  FBDREC.FBDMDTYP = "FT1"; /* model type*/
  FBDREC.FBDBTCD = "STK"; /* buy type*/
  FBDREC.SY1STNBR = FL0QM001.SY1STNBR; /* Style*/
  FBDREC.FBAMDNBR = FL0QM001.FBAMDNBR; /* model number*/
  FBDREC.SY2CLRID = FL0QM001.SY2CLRID; /* Color*/
  FBDREC.XDMCD = FL0QM001.XDMCD; /* Dimension*/
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the flqtb table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("S3", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "122"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "S3 - DECLARE CURSOR    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0Q122

// fetch cursor vflqtb01
Function FL0Q124()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the flqtb table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("N3", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL0Q125(); /* Move row to working storage*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Normal end of set*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "124"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "N3 - FETCH NEXT        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0Q124

// move row to working storage
Function FL0Q125()
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW01.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW01.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFC1 = FY1REC.XCTCD;
        FL0QW00.XFR-FCTY-RSN-CD = FBDREC.XFRCD; /* get reason code*/
         /* to use if a new factory is added*/
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW01.FY1FCTYC[1])
        FL0QW01.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW02.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW02.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFC2 = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW02.FY1FCTYC[1])
        FL0QW02.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW03.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW03.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFC3 = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW03.FY1FCTYC[1])
        FL0QW03.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW04.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW04.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFC4 = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW04.FY1FCTYC[1])
        FL0QW04.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW05.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW05.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFC5 = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW05.FY1FCTYC[1])
        FL0QW05.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW06.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW06.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFC6 = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW06.FY1FCTYC[1])
        FL0QW06.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW07.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW07.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFC7 = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW07.FY1FCTYC[1])
        FL0QW07.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW08.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW08.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFC8 = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW08.FY1FCTYC[1])
        FL0QW08.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW09.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW09.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFC9 = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW09.FY1FCTYC[1])
        FL0QW09.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW0A.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW0A.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFCA = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW0A.FY1FCTYC[1])
        FL0QW0A.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW0B.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW0B.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFCB = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW0B.FY1FCTYC[1])
        FL0QW0B.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW0C.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW0C.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFCC = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW0C.FY1FCTYC[1])
        FL0QW0C.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
  ;
  ;
  ;
  ;
  ;
  FL0QW00.FL0QWX1 = 1;
  while (FL0QW00.FL0QWX1 < 13)
    if (FL0QW0D.FBDMDTYP[FL0QWX1] == "   ") /* empty ws row*/
      if (FL0QW00.FL0QWX1 == 1) /* first array element*/
        FL0QW0D.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        FL0Q126(); /* get factory country*/
        FL0QW00.FL0QWFCD = FY1REC.XCTCD;
        return; /* row loaded, return*/
      end
      if (FBDREC.FY1FCTYC == FL0QW0D.FY1FCTYC[1])
        FL0QW0D.FBDGROUP[FL0QWX1] = FBDREC.FBDGROUP;
        return; /* row loaded, return*/
      end
    end
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
  end
end // end FL0Q125

// Verify factory code
Function FL0Q126()
  ;
   /* ------------------------------------------------------------*/
   /* Verify the Factory Code*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  set FY1REC empty;
  FY1REC.FY1FCTYC = FBDREC.FY1FCTYC;
  FY1REC.XGPCD = COMMAREA.XGPCD;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* factory not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "126"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
end // end FL0Q126

// close cursor vflqtb01
Function FL0Q128()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the flqtb table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("C3", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "128"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "C3 - CLOSE CURSOR      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0Q128

// get buy dates
Function FL0Q130()
   /* ------------------------------------------------------------*/
   /* get first buy date*/
   /* ------------------------------------------------------------*/
  ;
  set FBAREC empty; /* initialise record*/
  FBAREC.FBDMDTYP = "FT1"; /* buy type*/
  FBAREC.FBAMDNBR = FL0QM001.FBAMDNBR; /* schedule number*/
  ;
  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful calculate dates, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      /* PERFORM FL0Q131;              /* calculate dates*/
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT BUY DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0Q130

// format and display the map
Function FL0Q200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end
  ;
  if (FL0QW00.FL0QWMCS == "Y") /* map needs to be formatted*/
    FL0Q210(); /* format the map*/
  end
  ;
  if (FLWREC.XXXMSGNO != 0) /* error or informational mes*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end /* move to map*/
    FL0QM001.XXXMODID = FLWREC.XXXMODID; /* error module na*/
    set FL0QM001 alarm; /* indicate sound alarm*/
  end
  ;
  converse FL0QM001 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  FLWREC.XXXMODID = " "; /* module identification*/
  FLWREC.XXXMSGNO = 0; /* message number*/
  ;
  COMMAREA.CATOAP = FL0QM001.CATOAP; /* to application*/
  COMMAREA.CAITEM = FL0QM001.CAITEM; /* application data*/
end // end FL0Q200

// format the map
Function FL0Q210()
   /* ------------------------------------------------------------*/
   /* clear map area and reset map switch*/
   /* ------------------------------------------------------------*/
  ;
  set FL0QM001 initial; /* map io area*/
  FL0QW00.FL0QWMCS = "N"; /* clear map switch*/
  ;
   /* -----------------------------------------------------------*/
   /* move data from working storage to map area*/
   /* -----------------------------------------------------------*/
  ;
  FL0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move current date*/
  ;
  FL0QM001.CATOAP = COMMAREA.CATOAP; /* to application*/
  FL0QM001.CAITEM = COMMAREA.CAITEM; /* fastpath data*/
  FL0QM001.FBAMDNBR = FL0QW00.FBAMDNBR; /* model number*/
  FL0QM001.FY1FCTYC = FL0QW00.FY1FCTYC; /* split from fcty*/
  FL0QM001.SY2CLRID = FL0QW00.SY2CLRID; /* color code*/
  FL0QM001.SY1STNBR = FL0QW00.SY1STNBR; /* style number*/
  FL0QM001.XDMCD = FL0QW00.XDMCD; /* dimension code*/
  FL0QM001.XGACD = FL0QW00.XGACD; /* gender age code*/
  FL0QM001.XGADESC = FL0QW00.XGADESC; /* gender age description*/
  FL0QM001.SY1SSTNM = FL0QW00.SY1SSTNM; /* style short name*/
  FL0QM001.SY2CLRAB = FL0QW00.SY2CLRAB; /* color abbreviation*/
  FL0QM001.FL0QWSNS = FL0QW00.FL0QWSNS; /* season code and year comb*/
  FL0QM001.XCNCD = FL0QW00.XCNCD; /* construction code*/
  FL0QM001.SY2RSTNB = FL0QW00.SY2RSTNB; /* color abbreviation*/
  ;
  ;
   /* -----------------------------------------------------------*/
   /* format leftmost page to display if requested.*/
   /* -----------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWSHF == " " /* first time thru*/
   || FL0QW00.FL0QWSHF == "L") /* display left screen*/
    FL0QW00.FL0QWX1 = 1;
    ;
    while (FL0QW00.FL0QWX1 <= 4)
      ;
      FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX1];
      FL0QW00.FL0QWBDN = FBDREC.FB8BUYDT;
      FL0QW00.FL0QWBDT = FL0QW00.FL0QWBDW;
      FL0QM001.FB8BUYDT[FL0QWX1] = FL0QW00.FL0QWYYM;
      FL0QM001.FL0QMFF1 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ1[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC1 = FL0QW00.FL0QWFC1;
      ;
      FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF2 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ2[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC2 = FL0QW00.FL0QWFC2;
      ;
      FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF3 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ3[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC3 = FL0QW00.FL0QWFC3;
      ;
      FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF4 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ4[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC4 = FL0QW00.FL0QWFC4;
      ;
      FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF5 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ5[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC5 = FL0QW00.FL0QWFC5;
      ;
      FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF6 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ6[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC6 = FL0QW00.FL0QWFC6;
      ;
      FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF7 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ7[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC7 = FL0QW00.FL0QWFC7;
      ;
      FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF8 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ8[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC8 = FL0QW00.FL0QWFC8;
      ;
      FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF9 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ9[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC9 = FL0QW00.FL0QWFC9;
      ;
      FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFA = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQA[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCA = FL0QW00.FL0QWFCA;
      ;
      FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFB = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQB[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCB = FL0QW00.FL0QWFCB;
      ;
      FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFC = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQC[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCC = FL0QW00.FL0QWFCC;
      ;
      FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFD = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQD[FL0QWX1] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCD = FL0QW00.FL0QWFCD;
      ;
      if (FL0QM001.FB8BUYDT[FL0QWX1] == 0)
        set FL0QM001.FL0QMTQ1[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQ2[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQ3[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQ4[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQ5[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQ6[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQ7[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQ8[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQ9[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQA[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQB[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQC[FL0QWX1] protect, invisible;
        set FL0QM001.FL0QMTQD[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFF2 == "    ")
        set FL0QM001.FL0QMTQ2[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFF3 == "    ")
        set FL0QM001.FL0QMTQ3[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFF4 == "    ")
        set FL0QM001.FL0QMTQ4[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFF5 == "    ")
        set FL0QM001.FL0QMTQ5[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFF6 == "    ")
        set FL0QM001.FL0QMTQ6[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFF7 == "    ")
        set FL0QM001.FL0QMTQ7[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFF8 == "    ")
        set FL0QM001.FL0QMTQ8[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFF9 == "    ")
        set FL0QM001.FL0QMTQ9[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFFA == "    ")
        set FL0QM001.FL0QMTQA[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFFB == "    ")
        set FL0QM001.FL0QMTQB[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFFC == "    ")
        set FL0QM001.FL0QMTQC[FL0QWX1] protect, invisible;
      end
      if (FL0QM001.FL0QMFFD == "    ")
        set FL0QM001.FL0QMTQD[FL0QWX1] protect, invisible;
      end
      ;
      ;
      FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1;
      ;
    end
  end
  ;
  ;
   /* -----------------------------------------------------------*/
   /* format middle page to display if requested.*/
   /* -----------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWSHF == "M") /* display middle screen*/
    FL0QW00.FL0QWX1 = 5;
    FL0QW00.FL0QWX2 = 1;
    ;
    while (FL0QW00.FL0QWX1 <= 8)
      ;
      FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX1];
      FL0QW00.FL0QWBDN = FBDREC.FB8BUYDT;
      FL0QW00.FL0QWBDT = FL0QW00.FL0QWBDW;
      FL0QM001.FB8BUYDT[FL0QWX2] = FL0QW00.FL0QWYYM;
      FL0QM001.FL0QMFF1 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ1[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC1 = FL0QW00.FL0QWFC1;
      ;
      FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF2 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ2[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC2 = FL0QW00.FL0QWFC2;
      ;
      FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF3 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ3[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC3 = FL0QW00.FL0QWFC3;
      ;
      FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF4 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ4[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC4 = FL0QW00.FL0QWFC4;
      ;
      FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF5 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ5[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC5 = FL0QW00.FL0QWFC5;
      ;
      FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF6 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ6[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC6 = FL0QW00.FL0QWFC6;
      ;
      FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF7 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ7[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC7 = FL0QW00.FL0QWFC7;
      ;
      FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF8 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ8[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC8 = FL0QW00.FL0QWFC8;
      ;
      FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF9 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ9[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC9 = FL0QW00.FL0QWFC9;
      ;
      FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFA = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQA[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCA = FL0QW00.FL0QWFCA;
      ;
      FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFB = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQB[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCB = FL0QW00.FL0QWFCB;
      ;
      FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFC = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQC[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCC = FL0QW00.FL0QWFCC;
      ;
      FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFD = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQD[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCD = FL0QW00.FL0QWFCD;
      ;
      ;
      ;
      if (FL0QM001.FB8BUYDT[FL0QWX2] == 0)
        set FL0QM001.FL0QMTQ1[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ2[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ3[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ4[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ5[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ6[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ7[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ8[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ9[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQA[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQB[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQC[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQD[FL0QWX2] protect, invisible;
      end
      ;
      if (FL0QM001.FL0QMFF2 == "    ")
        set FL0QM001.FL0QMTQ2[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF3 == "    ")
        set FL0QM001.FL0QMTQ3[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF4 == "    ")
        set FL0QM001.FL0QMTQ4[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF5 == "    ")
        set FL0QM001.FL0QMTQ5[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF6 == "    ")
        set FL0QM001.FL0QMTQ6[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF7 == "    ")
        set FL0QM001.FL0QMTQ7[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF8 == "    ")
        set FL0QM001.FL0QMTQ8[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF9 == "    ")
        set FL0QM001.FL0QMTQ9[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFFA == "    ")
        set FL0QM001.FL0QMTQA[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFFB == "    ")
        set FL0QM001.FL0QMTQB[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFFC == "    ")
        set FL0QM001.FL0QMTQC[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFFD == "    ")
        set FL0QM001.FL0QMTQD[FL0QWX2] protect, invisible;
      end
      ;
      FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1;
      FL0QW00.FL0QWX2 = FL0QW00.FL0QWX2 + 1;
      ;
    end
  end
  ;
  ;
   /* -----------------------------------------------------------*/
   /* format right page to display if requested.*/
   /* -----------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWSHF == "R") /* display fight screen*/
    FL0QW00.FL0QWX1 = 9;
    FL0QW00.FL0QWX2 = 1;
    ;
    while (FL0QW00.FL0QWX1 <= 12)
      ;
      FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX1];
      FL0QW00.FL0QWBDN = FBDREC.FB8BUYDT;
      FL0QW00.FL0QWBDT = FL0QW00.FL0QWBDW;
      FL0QM001.FB8BUYDT[FL0QWX2] = FL0QW00.FL0QWYYM;
      FL0QM001.FL0QMFF1 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ1[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC1 = FL0QW00.FL0QWFC1;
      ;
      FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF2 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ2[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC2 = FL0QW00.FL0QWFC2;
      ;
      FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF3 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ3[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC3 = FL0QW00.FL0QWFC3;
      ;
      FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF4 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ4[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC4 = FL0QW00.FL0QWFC4;
      ;
      FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF5 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ5[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC5 = FL0QW00.FL0QWFC5;
      ;
      FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF6 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ6[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC6 = FL0QW00.FL0QWFC6;
      ;
      FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF7 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ7[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC7 = FL0QW00.FL0QWFC7;
      ;
      FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF8 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ8[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC8 = FL0QW00.FL0QWFC8;
      ;
      FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFF9 = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQ9[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFC9 = FL0QW00.FL0QWFC9;
      ;
      FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFA = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQA[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCA = FL0QW00.FL0QWFCA;
      ;
      FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFB = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQB[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCB = FL0QW00.FL0QWFCB;
      ;
      FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFC = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQC[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCC = FL0QW00.FL0QWFCC;
      ;
      FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX1];
      FL0QM001.FL0QMFFD = FBDREC.FY1FCTYC;
      FL0QM001.FL0QMFQD[FL0QWX2] = FBDREC.FBDQTB;
      FL0QM001.FL0QMFCD = FL0QW00.FL0QWFCD;
      ;
      if (FL0QM001.FB8BUYDT[FL0QWX2] == 0)
        set FL0QM001.FL0QMTQ1[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ2[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ3[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ4[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ5[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ6[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ7[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ8[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQ9[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQA[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQB[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQC[FL0QWX2] protect, invisible;
        set FL0QM001.FL0QMTQD[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF2 == "    ")
        set FL0QM001.FL0QMTQ2[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF3 == "    ")
        set FL0QM001.FL0QMTQ3[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF4 == "    ")
        set FL0QM001.FL0QMTQ4[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF5 == "    ")
        set FL0QM001.FL0QMTQ5[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF6 == "    ")
        set FL0QM001.FL0QMTQ6[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF7 == "    ")
        set FL0QM001.FL0QMTQ7[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF8 == "    ")
        set FL0QM001.FL0QMTQ8[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFF9 == "    ")
        set FL0QM001.FL0QMTQ9[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFFA == "    ")
        set FL0QM001.FL0QMTQA[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFFB == "    ")
        set FL0QM001.FL0QMTQB[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFFC == "    ")
        set FL0QM001.FL0QMTQC[FL0QWX2] protect, invisible;
      end
      if (FL0QM001.FL0QMFFD == "    ")
        set FL0QM001.FL0QMTQD[FL0QWX2] protect, invisible;
      end
      ;
      FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1;
      FL0QW00.FL0QWX2 = FL0QW00.FL0QWX2 + 1;
      ;
    end
  end
  ;
   /* -----------------------------------------------------------*/
   /* move data from working storage to map area*/
   /* -----------------------------------------------------------*/
  ;
  if (FL0QM001.FBAMDNBR == 0) /* mdl nbr blank*/
    ;
    set FL0QM001.FBAMDNBR cursor; /* set cursor*/
  else
    set FL0QM001.SY1STNBR cursor; /* set cursor*/
  end
  ;
  ;
end // end FL0Q210

// Check attention identifier
Function FL0Q300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FL0QW00.FL0QWMCS = "Y"; /* Clear the map fields*/
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* application data*/
    ;
    if (FL0QW00.FL0QWDRS == "Y") /* data was requested*/
      set FL0QW01 empty; /* reset display working storage*/
      FL0QW00.FL0QWDRS = "N"; /* reset request for data sw*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (FL0QM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      ;
      ;
      set FLWREC empty; /* Clear commarea record*/
      ;
      FLWREC.SY1STNBR = FL0QM001.SY1STNBR; /* Style*/
      FLWREC.FBAMDNBR = FL0QM001.FBAMDNBR; /* model number*/
      FLWREC.SY2CLRID = FL0QM001.SY2CLRID; /* Color*/
      FLWREC.XDMCD = FL0QM001.XDMCD; /* Dimension*/
      ;
      ;
      ;
      XSFLS01(); /* Exit to another application*/
      FLWREC.XXXMODID = "300"; /* Process name*/
      set FL0QM001.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
      ;
    else
      ;
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FLWREC.XXXMODID = "300"; /* Process name*/
      ;
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  ;
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf21)
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0QM001"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FL0M";
    end
    ;
    ;
    if (converseVar.eventKey is pf10) /* shift left*/
      if (FL0QW00.FL0QWSHF == "L"
       || FL0QW00.FL0QWSHF == " ")
        converseLib.validationFailed(23); /* shifted left already*/
        return;
      end
      if (FL0QW00.FL0QWSHF == "R") /* if on right screen*/
        FL0QW00.FL0QWSHF = "M"; /* go to middle screen*/
      else
        FL0QW00.FL0QWSHF = "L"; /* go to left screen*/
      end
      FL0QW00.FL0QWMCS = "Y"; /* format map*/
      converseLib.validationFailed(15); /* shift left successful*/
      return;
    end
    ;
    ;
    if (converseVar.eventKey is pf11) /* shift right*/
      if (FL0QW00.FL0QWSHF == "R")
        converseLib.validationFailed(24); /* shifted right already*/
        return;
      end
      if (FL0QW00.FL0QWSHF == "L") /* if on left screen*/
        FL0QW00.FL0QWSHF = "M"; /* go to middle screen*/
      else
        FL0QW00.FL0QWSHF = "R"; /* go to right screen*/
      end
      FL0QW00.FL0QWMCS = "Y"; /* format map*/
      converseLib.validationFailed(14); /* shift right successful*/
      return;
    end
    ;
    if (converseVar.eventKey is pf13)
      COMMAREA.CATOAP = "FL0N";
    end
    ;
    if (converseVar.eventKey is pf14)
      COMMAREA.CATOAP = "FL0O";
    end
    ;
    if (converseVar.eventKey is pf15)
      COMMAREA.CATOAP = "FL0P";
    end
    ;
    if (converseVar.eventKey is pf17)
      COMMAREA.CATOAP = "FL0V";
    end
    ;
    if (converseVar.eventKey is pf18)
      COMMAREA.CATOAP = "FL0W";
    end
    ;
    if (converseVar.eventKey is pf20)
      COMMAREA.CATOAP = "FL01"; /* moves by style (all colors)*/
    end
    ;
    if (converseVar.eventKey is pf21)
      COMMAREA.CATOAP = "FL0U";
    end
    ;
    ;
    ;
    set FLWREC empty; /* Clear commarea record*/
    ;
    FLWREC.SY1STNBR = FL0QM001.SY1STNBR; /* Style*/
    FLWREC.FBAMDNBR = FL0QM001.FBAMDNBR; /* model number*/
    FLWREC.SY2CLRID = FL0QM001.SY2CLRID; /* Color*/
    FLWREC.XDMCD = FL0QM001.XDMCD; /* Dimension*/
    ;
    ;
    ;
    ;
    XSFLS01(); /* transfer to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter)
    ;
    converseLib.validationFailed(3); /* invalid key*/
    FLWREC.XXXMODID = "300"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      ;
      converseLib.clearScreen();
       /* reset map*/
      ;
    end
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end FL0Q300

// Reset highlighted fields
Function FL0Q400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0QM001.FBAMDNBR initialAttributes; /* factory model number*/
  set FL0QM001.SY1STNBR initialAttributes; /* style number*/
  set FL0QM001.SY2CLRID initialAttributes; /* color code*/
  set FL0QM001.XDMCD initialAttributes; /* dimension code*/
  set FL0QM001.FL0QW-ADD-FCTY initialAttributes; /* add new fcty*/
  ;
  ;
  set FL0QM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0QM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end FL0Q400

// Verify the entered data
Function FL0Q500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QM001.CAITEM > " ") /* Application data was entered*/
    ;
    FLWREC.XXXMODID = "500"; /* Module identification*/
    set FL0QM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QM001.FBAMDNBR != FL0QW01.FBAMDNBR /* model number changed*/
   || FL0QM001.SY1STNBR != FL0QW01.SY1STNBR /* style number*/
   || FL0QM001.SY2CLRID != FL0QW01.SY2CLRID /* color code*/
   || FL0QM001.XDMCD != FL0QW01.XDMCD)      /* dimension code*/
    ;
    if (FL0QM001.FY1FCTYC != FL0QW00.FY1FCTYC) /* split to fcty changed*/
      FL0QW00.FY1FCTYC = FL0QM001.FY1FCTYC; /* spilt to fcty*/
    else
      FL0QW00.FY1FCTYC = "  "; /* spilt to fcty*/
    end
    ;
    FL0QW00.FL0QWCKS = "Y"; /* key data changed*/
    ;
  else
    ;
    FL0QW00.FY1FCTYC = FL0QM001.FY1FCTYC; /* spilt to fcty*/
    FL0QW00.FL0QWCKS = "N"; /* key data not changed*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if an update was requested*/
   /* ------------------------------------------------------------*/
  ;
  FL0QW00.FL0QWUDS = "N"; /* update requested flag*/
  FL0QW00.FL0QWX1 = 1;
  ;
  while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
    ;
    if (FL0QM001.FL0QMTQ1[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQ2[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQ3[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQ4[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQ5[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQ6[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQ7[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQ8[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQ9[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQA[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQB[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQC[FL0QWX1] > 0 /* quantity was entered*/
     || FL0QM001.FL0QMTQD[FL0QWX1] > 0) /* quantity was entered*/
      ;
      FL0QW00.FL0QWUDS = "Y"; /* update requested flag*/
      ;
    end
    ;
    FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check update / pfkey error*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* scroll left requested*/
   || converseVar.eventKey is pf11) /* scroll right requested*/
    ;
    if (FL0QW00.FL0QWUDS == "Y" /* update pending*/
     || FL0QW00.FL0QWCKS == "Y" /* or key change*/
     || FL0QW00.FL0QW-ADD-FCTY-FL == "Y") /* new factory added*/
      ;
      if (converseVar.eventKey is pf10)
        if (FL0QW00.FL0QWSHF == "M")
          FL0QW00.FL0QWSHF = "R";
        else
          FL0QW00.FL0QWSHF = "M";
        end
        FL0QW00.FL0QWMCS = "N"; /* do not reformat map*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        converseLib.validationFailed(5); /* cannot update and scroll*/
      else
        if (FL0QW00.FL0QWSHF == "M")
          FL0QW00.FL0QWSHF = "L";
        else
          FL0QW00.FL0QWSHF = "M";
        end
        FL0QW00.FL0QWMCS = "N"; /* do not reformat map*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        converseLib.validationFailed(5); /* cannot update and scroll*/
      end
    end
    exit stack; /* flow to main process*/
     /* more editing is not necessary*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if new factory was added*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QM001.FL0QW-ADD-FCTY != "   ") /* add new factory*/
    ;
    FL0QW00.FL0QW-ADD-FCTY-FL = "Y"; /* new factory added*/
    ;
    FL0Q510(); /* edit new factory code*/
    ;
    FL0Q515(); /* check for duplicate fctys*/
    ;
    if (FL0QW00.FL0QWCKS == "Y" /* key changed*/
     || FL0QW00.FL0QWDCS == "Y") /* data changed*/
      ;
      FLWREC.XXXMODID = "500"; /* module id*/
      converseLib.validationFailed(270); /* error, can't change key,data*/
                                /* when adding a new factory*/
      set FL0QM001.FL0QW-ADD-FCTY cursor, modified, bold;
      exit stack; /* return to display map*/
      ;
    end
    ;
  end
  ;
  ;
   /* -------------------------------------------------------------*/
   /* if no key change, or new factory or update, display message.*/
   /* -------------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWCKS != "Y" /* key not changed*/
   && FL0QW00.FL0QWUDS != "Y" /* update not requested*/
   && FL0QW00.FL0QW-ADD-FCTY-FL != "Y") /* new factory not added*/
    ;
    FLWREC.XXXMODID = "500"; /* module id*/
    converseLib.validationFailed(154); /* no change*/
    exit stack; /* return to display map*/
    ;
  end
  ;
  ;
   /* -------------------------------------------------------------*/
   /* reset add factory flag*/
   /* if there are errors and a new factory is being added*/
   /* -------------------------------------------------------------*/
  ;
  ;
  if (FL0QW00.FL0QW-ADD-FCTY-FL == "Y" /* new factory added*/
   && converseVar.validationMsgNum != 0) /* no change*/
    ;
    FL0QW00.FL0QW-ADD-FCTY-FL = "N"; /* reset add new fcty flag*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check key / update error*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWCKS == "Y" /* key changed*/
   && FL0QW00.FL0QWUDS == "Y") /* update requested*/
    ;
    FLWREC.XXXMODID = "500"; /* module id*/
    converseLib.validationFailed(130); /* error, cant change key and data*/
    exit stack; /* return to display map*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check factory has been entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWUDS == "Y" /* update requested*/
   && FL0QM001.FY1FCTYC == "    ")
    ;
    set FL0QM001.FY1FCTYC cursor, modified, bold;
    FLWREC.XXXMODID = "500"; /* module id*/
    converseLib.validationFailed(120); /* please enter factory code*/
    exit stack; /* return to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check factory entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWUDS == "Y") /* update requested*/
    if (FL0QM001.FY1FCTYC > "    ")
      if (FL0QM001.FY1FCTYC == "X") /* blank factory selected*/
        if (FL0QM001.FL0QMFF1 != "    ") /* and blank not on list*/
          ;
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          converseLib.validationFailed(133); /* must be on the list*/
        end
        ;
      else
        if (FL0QM001.FL0QMFF1 != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFF2 != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFF3 != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFF4 != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFF5 != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFF6 != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFF7 != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFF8 != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFF9 != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFFA != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFFB != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFFC != FL0QM001.FY1FCTYC
         && FL0QM001.FL0QMFFD != FL0QM001.FY1FCTYC)
          ;
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          converseLib.validationFailed(133); /* must be on the list*/
          exit stack; /* return to display map*/
          ;
        end
      end
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check for a factory moving qty to itself*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWUDS == "Y" /* update requested*/
   && FL0QM001.FY1FCTYC > "    ")
    ;
    if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
     && FL0QM001.FL0QMFF1 == "    ")
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ1[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFF1 == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ1[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFF2 == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ2[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFF3 == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ3[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFF4 == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ4[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFF5 == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ5[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFF6 == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ6[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFF7 == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ7[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFF8 == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ8[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFF9 == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQ9[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFFA == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQA[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFFB == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQB[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFFC == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQC[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
    ;
    if (FL0QM001.FL0QMFFD == FL0QM001.FY1FCTYC)
      FL0QW00.FL0QWX1 = 1;
      while (FL0QW00.FL0QWX1 <= 4) /* until the edge of map*/
        if (FL0QM001.FL0QMTQD[FL0QWX1] > 0) /* quantity was entered*/
          converseLib.validationFailed(132); /* can't move quantity to itself*/
          set FL0QM001.FY1FCTYC cursor, modified, bold;
          FLWREC.XXXMODID = "500"; /* module id*/
          exit stack; /* return to display map*/
        end
        FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* next column*/
      end
    end
  end
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
end // end FL0Q500

// Verify factory code
Function FL0Q510()
  ;
   /* ------------------------------------------------------------*/
   /* Verify the Factory Code*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set FY1REC empty;
  FY1REC.FY1FCTYC = FL0QM001.FL0QW-ADD-FCTY;
  if (COMMAREA.XGPCD != "  ")
    FY1REC.XGPCD = COMMAREA.XGPCD;
  else
    FY1REC.XGPCD = "02";
  end
  ;
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* factory not found*/
      FLWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(10); /* invalid factory*/
      set FL0QM001.FL0QW-ADD-FCTY cursor, modified, bold;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "510"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
end // end FL0Q510

// Check duplicate factories
Function FL0Q515()
   /* ------------------------------------------------------------*/
   /* Check for Duplicate Factories*/
   /* ------------------------------------------------------------*/
  ;
  FL0QW00.FL0QWX1 = 1;
  if (FL0QM001.FL0QW-ADD-FCTY == FL0QW01.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW02.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW03.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW04.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW05.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW06.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW07.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW08.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW09.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW0A.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW0B.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW0C.FY1FCTYC[FL0QWX1]
   || FL0QM001.FL0QW-ADD-FCTY == FL0QW0D.FY1FCTYC[FL0QWX1])
    FLWREC.XXXMODID = "515"; /* Module identification*/
    converseLib.validationFailed(319); /* Duplicate factory*/
    set FL0QM001.FL0QW-ADD-FCTY cursor, modified, bold;
    return; /* Return to previous process*/
  end
end // end FL0Q515

// Process valid input request
Function FL0Q600()
   /* ------------------------------------------------------------*/
   /* if key fields were changed set request for data flag*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0QW00.FL0QWCKS == "Y") /* key changed*/
    FL0QW00.FL0QWDRS = "Y"; /* set data request switch to yes*/
    FL0QW00.FL0QWMCS = "Y"; /* clear map*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* check for contention due to merge.*/
   /* ------------------------------------------------------------*/
  ;
  FL0Q605(); /* check for contention*/
  ;
  ;
  XX0XS01(); /* get date and time*/
  ;
   /* if an add was requested*/
  if (FL0QW00.FL0QW-ADD-FCTY-FL == "Y") /* add a new factory*/
    FL0Q615(); /* insert a new factory*/
    return;
  end
  ;
   /* if an update was requested*/
  if (FL0QW00.FL0QWUDS == "Y")
    FL0QW00.FL0QWX1 = 1;
    if (FL0QW00.FL0QWSHF == "L") /* displaying left screen*/
      FL0QW00.FL0QWX2 = 1;
    end
    if (FL0QW00.FL0QWSHF == "M") /* displaying middle screen*/
      FL0QW00.FL0QWX2 = 5;
    end
    if (FL0QW00.FL0QWSHF == "R") /* displaying right screen*/
      FL0QW00.FL0QWX2 = 9;
    end
    ;
    while (FL0QW00.FL0QWX1 <= 4) /* for all months on map*/
      ;
      /* ------------------------------------------------------------*/
       /* If data for first factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQ1[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQ1[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ1[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      ;
      /* ------------------------------------------------------------*/
       /* If data for second factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQ2[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQ2[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ2[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for third factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQ3[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQ3[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ3[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for fourth factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQ4[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQ4[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ4[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for fifth factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQ5[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQ5[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ5[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for sixth factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQ6[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQ6[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ6[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for seventh factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQ7[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQ7[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ7[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for eighth factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQ8[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQ8[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ8[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for ninth factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQ9[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQ9[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQ9[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for tenth factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQA[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQA[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQA[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for eleventh factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQB[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQB[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQB[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for twelvth factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQC[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQC[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0D.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQC[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If data for thirteenth factory changed, update against rest*/
       /* of factories in same month.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0QM001.FL0QMTQD[FL0QWX1] > 0)
        FBDREC.FBDGROUP = FL0QW0D.FBDGROUP[FL0QWX2];
        FBDREC.FBDQTB = FBDREC.FBDQTB + FL0QM001.FL0QMTQD[FL0QWX1];
        FL0Q610(); /* update vflqtb01 table*/
        FL0QW0D.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        if (FL0QM001.FY1FCTYC == FL0QW01.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == "X" /* blank factory selected*/
         && FL0QW01.FY1FCTYC[FL0QWX2] == "    ") /* and blank fcty*/
          FBDREC.FBDGROUP = FL0QW01.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW01.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW02.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW02.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW02.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW03.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW03.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW03.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW04.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW04.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW04.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW05.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW05.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW05.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW06.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW06.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW06.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW07.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW07.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW07.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW08.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW08.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW08.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW09.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW09.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW09.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0A.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0A.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0A.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0B.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0B.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0B.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
        ;
        if (FL0QM001.FY1FCTYC == FL0QW0C.FY1FCTYC[FL0QWX2])
          FBDREC.FBDGROUP = FL0QW0C.FBDGROUP[FL0QWX2];
          FBDREC.FBDQTB = FBDREC.FBDQTB - FL0QM001.FL0QMTQD[FL0QWX1];
          FL0Q610(); /* update vflqtb01 table*/
          FL0QW0C.FBDGROUP[FL0QWX2] = FBDREC.FBDGROUP;
        end
      end
      ;
      FL0QW00.FL0QWX1 = FL0QW00.FL0QWX1 + 1; /* increment index*/
      FL0QW00.FL0QWX2 = FL0QW00.FL0QWX2 + 1; /* increment index*/
      ;
    end
    FL0QW00.FL0QWDRS = "Y"; /* set data request switch to yes*/
    FL0QW00.FL0QWMCS = "Y"; /* clear map*/
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/
    FLWREC.XXXMSGNO = 32; /* an info message, not an error*/
    ;
  end
end // end FL0Q600

// check for merge contention
Function FL0Q605()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty;
  ;
  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        FLWREC.XXXMODID = "605"; /* module identification*/
        exit stack; /* return to process*/
      end
    else
      ;
      ;
      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      FLWREC.XXXMODID = "605"; /* Module identification*/
      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end
  ;
  ;
end // end FL0Q605

// update vflqtb01 row
Function FL0Q610()
   /* ------------------------------------------------------------*/
   /* update the row in the flqtb table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FBDREC.FBDQTB < 0) /* check for negative quantity*/
    FL0QW00.FL0QWSER = "Y"; /* summary error flag*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    exit stack;
    ;
  end
  ;
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  try
    call "IO3460" ("U ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(46);
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return; /* Exit to display map*/
      ;
    end
    ;
    ;
    /* ------------------------------------------------------------*/
     /* If data not available, return an error message to the user.*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(47); /* Indicate not available*/
      FLWREC.XXXMODID = "620"; /* Module identification*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      converseLib.validationFailed(10); /* Indicate system error*/
      FLWREC.XXXMODID = "610"; /* Module identification*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    ;
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "UPDATE FL QTB    ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBDREC.FBDMDTYP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FL0Q610

// Create a new factory
Function FL0Q615()
  ;
  ;
  FBDREC.FBDMDTYP = "FT1";
  FBDREC.FBAMDNBR = FL0QW00.FBAMDNBR;
  FBDREC.SY1STNBR = FL0QW00.SY1STNBR;
  FBDREC.SY2CLRID = FL0QW00.SY2CLRID;
  FBDREC.XDMCD = FL0QW00.XDMCD;
  FBDREC.XCNCD = FL0QW00.XCNCD;
  FBDREC.XFRCD = FL0QW00.XFR-FCTY-RSN-CD;
  ;
  FBDREC.FB8BUYDT = FBAREC.FB8BUYDT;
  FL0QW00.FL0QW-BUY-DT-NUM = FBAREC.FB8BUYDT; /* work date area*/
  FL0QW00.FL0QW-BUY-DT = FL0QW00.FL0QW-BUY-DT-ALPHA;
  FBDREC.FY2MFGPC = 0;
  FBDREC.FBDQTB = 0;
  FBDREC.FBDTOQTB = 0;
  ;
  if (FBDREC.XQACD == " ")
    FBDREC.XQACD = "01"; /* set default*/
  end
  ;
  if (FBDREC.PC2INSEG == " ")
    FBDREC.PC2INSEG = "000";
  end
  ;
  if (FBDREC.XPGCD == " ")
    FBDREC.XPGCD = "00";
  end
  ;
  if (FBDREC.XUMCD == " ")
    FBDREC.XUMCD = "01";
  end
  ;
  if (FBDREC.XCNCD == " ") /* const cd blank*/
    if (PG2REC.SY2CLRAB != " ") /* valid style*/
      FBDREC.XCNCD = PG2REC.XCNCD; /* const cd*/
    else /* (development product)*/
      FBDREC.XCNCD = PG4REC.XCNCD; /* const cd*/
    end
  end
  ;
  if (FBDREC.YSMXGA == " ") /* sum xga blank*/
    if (PG2REC.SY2CLRAB != " ") /* valid style*/
      FL0QW00.XGACD = PG2REC.XGACD; /* gendr age*/
      FL0Q617(); /* get sum xga code*/
    else /* (development product)*/
      FL0QW00.XGACD = PG4REC.XGACD; /* gendr age*/
      FL0Q617(); /* get sum xga code*/
    end
  end
  ;
  FL0QW00.FL0QW-LINE-INX = 1; /* initialise line index*/
  ;
  while (FL0QW00.FL0QW-LINE-INX <= 12) /* for each line*/
    ;
    ;
    FL0Q620(); /* Insert a vflqtb01 row*/
    FL0QW00.FL0QW-BUY-MM = FL0QW00.FL0QW-BUY-MM + 1; /* increment buy date*/
    if (FL0QW00.FL0QW-BUY-MM > 12)
      FL0QW00.FL0QW-BUY-MM = 1;
      FL0QW00.FL0QW-BUY-YY = FL0QW00.FL0QW-BUY-YY + 1; /* increment buy date*/
      /* -------------------  Y2K OUT BEGIN  --------------------*/
      /*  */
      /* IF FL0QW00.FL0QW-BUY-YY EQ 00;*/
      /* MOVE '020' TO FL0QW00.FL0QW-BUY-CC;*/
      /* END;*/
      /*  */
      /* --------------------  Y2K OUT END  ---------------------*/
      /* -------------------  Y2K IN BEGIN  ---------------------*/
      /*  */
      if (FL0QW00.FL0QW-BUY-YY > 60)
        FL0QW00.FL0QW-BUY-CC = "019";
      else
        FL0QW00.FL0QW-BUY-CC = "020";
      end
      /*  */
      /* --------------------  Y2K IN END  ----------------------*/
    end
    ;
    FL0QW00.FL0QW-BUY-DT-ALPHA = FL0QW00.FL0QW-BUY-DT;
    FBDREC.FB8BUYDT = FL0QW00.FL0QW-BUY-DT-NUM;
    ;
    FL0QW00.FL0QW-LINE-INX = FL0QW00.FL0QW-LINE-INX + 1;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* the program is at this point only if all inserts were*/
   /* successful*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* commit all changes*/
  FLWREC.XXXMSGNO = 32; /* an info message, not an error*/
  FL0QW00.FL0QWDRS = "Y"; /* request data switch*/
  FL0QW00.FL0QWMCS = "Y"; /* clear map switch*/
  FL0QW00.FL0QW-ADD-FCTY-FL = "N"; /* reset add new fcty flag*/
end // end FL0Q615

// Get summary gender/age code
Function FL0Q617()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table from the summary codes table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  set YSMREC empty;
  YSMREC.YSMTBLPF = "XGA"; /* table prefix*/
  YSMREC.YSMSYSPF = "FL"; /* system prefix*/
  YSMREC.YSMSUMID = 1; /* summary code id*/
  YSMREC.YSMSRCVL = FL0QW00.XGACD; /* source code value*/
  ;
  try
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FBDREC.YSMXGA = YSMREC.YSMSUMCD; /* summary gender/age code*/
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FBDREC.YSMXGA = "  "; /* summary gender/age code*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0Q617"; /* Process name*/
  TA1REC.TA1LOC = "SEL TABLE ROW";
  TA1REC.TA1DBASE = "DCORP.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FLWREC.XXXMODID = "617"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0Q617

// Insert a vflqtb01 row
Function FL0Q620()
   /* ------------------------------------------------------------*/
   /* move data*/
   /* ------------------------------------------------------------*/
  ;
  FBDREC.FY1FCTYC = FL0QM001.FL0QW-ADD-FCTY; /* factory code*/
  FBDREC.FBDBTCD = "STK"; /* buy type code*/
  FBDREC.XCTCD = "USA"; /* country code*/
  ;
  FBDREC.FBDQTB = 0; /* quantity*/
  FBDREC.FB-LATE-BK-FL = "N"; /* default to 'n'o*/
  FBDREC.FB-LATE-BK-FL-MDT = 0; /* default to 0*/
  FBDREC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  FBDREC.ZZZCHGCT = 0; /* change count*/
  ;
  try
    call "IO3460" ("A ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* a good update*/
      ;
      return; /* return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == -803) /* row already there*/
      ;
      FLWREC.XXXMSGNO = 46; /* error*/
      FLWREC.XXXMODID = 620; /* error module id*/
      FL0QW00.FL0QWDRS = "Y"; /* request data switch*/
      FL0QW00.FL0QWMCS = "Y"; /* clear map switch*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      exit stack; /* return to display map*/
      ;
    end
    ;
  end
  ;
  ;
  FLWREC.XXXMODID = "620"; /* Module identification*/
  TA1REC.TA1LOC = "ADD  QTB ROW FCTY"; /* error description*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back previous updates*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
  ;
  ;
  ;
end // end FL0Q620

Record FL0QW00 type basicRecord
  10 * char(47) ; 
    15 FBAMDNBR FBAMDNBR ; 
    15 FL0QMBDT FL0QMBDT ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XGACD XGACD ; 
    15 XGADESC XGADESC ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 SY2RSTNB SY2RSTNB ; 
    15 XCNCD XCNCD ; 
  10 XFR-FCTY-RSN-CD XFR-FCTY-RSN-CD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 FL0QWBDT FL0QWBDT ; 
    15 FL0QWBCC FL0QWBCC ; 
    15 FL0QWYYM FL0QWYYM ; 
    15 * char(2) ; 
  10 FL0QWBDW FL0QWBDW ; 
    15 FL0QWBDN FL0QWBDN ; 
  10 FL0QWQTB FL0QWQTB ; 
  10 FL0QWSQB FL0QWSQB ; 
  10 FL0QWDRS FL0QWDRS ; 
  10 FL0QWCKS FL0QWCKS ; 
  10 FL0QWDCS FL0QWDCS ; 
  10 FL0QWUDS FL0QWUDS ; 
  10 FL0QWMCS FL0QWMCS ; 
  10 FL0QWSHF FL0QWSHF ; 
  10 FL0QWFC1 FL0QWFC1 [4] ; 
  10 FL0QWFC2 FL0QWFC2 [4] ; 
  10 FL0QWFC3 FL0QWFC3 [4] ; 
  10 FL0QWFC4 FL0QWFC4 [4] ; 
  10 FL0QWFC5 FL0QWFC5 [4] ; 
  10 FL0QWFC6 FL0QWFC6 [4] ; 
  10 FL0QWFC7 FL0QWFC7 [4] ; 
  10 FL0QWFC8 FL0QWFC8 [4] ; 
  10 FL0QWFC9 FL0QWFC9 [4] ; 
  10 FL0QWFCA FL0QWFCA [4] ; 
  10 FL0QWFCB FL0QWFCB [4] ; 
  10 FL0QWFCC FL0QWFCC [4] ; 
  10 FL0QWFCD FL0QWFCD [4] ; 
  10 FL0QWX1 FL0QWX1 ; 
  10 FL0QWX2 FL0QWX2 ; 
  10 FL0QWSER FL0QWSER ; 
  10 FL0QSEDT FL0QSEDT ; 
    15 FL0QSECC FL0QSECC ; 
    15 FL0QSEYY FL0QSEYY ; 
  10 FL0QWSNS FL0QWSNS ; 
    15 XSECD XSECD ; 
    15 FL0QSEYR FL0QSEYR ; 
  10 FL0QW-ADD-FCTY FL0QW-ADD-FCTY ; 
  10 FL0QW-ADD-FCTY-FL FL0QW-ADD-FCTY-FL ; 
  10 FL0QW-BUY-DT-ALPHA FL0QW-BUY-DT-ALPHA ; 
    15 FL0QW-BUY-DT-NUM FL0QW-BUY-DT-NUM ; 
  10 FL0QW-BUY-DT FL0QW-BUY-DT ; 
    15 FL0QW-BUY-CC FL0QW-BUY-CC ; 
    15 FL0QW-BUY-YY FL0QW-BUY-YY ; 
    15 FL0QW-BUY-MM FL0QW-BUY-MM ; 
    15 FL0QW-BUY-DD FL0QW-BUY-DD ; 
  10 FL0QW-LINE-INX FL0QW-LINE-INX ; 
end // end FL0QW00

//*** RECORD=FL0QW01 ****
// ************** FL0QW01                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW01 type basicRecord
  5 FL0QW1GP FL0QW1GP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW01

//*** RECORD=FL0QW02 ****
// ************** FL0QW02                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW02 type basicRecord
  5 FL0QW2GP FL0QW2GP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW02

//*** RECORD=FL0QW03 ****
// ************** FL0QW03                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW03 type basicRecord
  5 FL0QW3GP FL0QW3GP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW03

//*** RECORD=FL0QW04 ****
// ************** FL0QW04                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW04 type basicRecord
  5 FL0QW4GP FL0QW4GP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW04

//*** RECORD=FL0QW05 ****
// ************** FL0QW05                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW05 type basicRecord
  5 FL0QW5GP FL0QW5GP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW05

//*** RECORD=FL0QW06 ****
// ************** FL0QW06                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW06 type basicRecord
  5 FL0QW6GP FL0QW6GP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW06

//*** RECORD=FL0QW07 ****
// ************** FL0QW07                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW07 type basicRecord
  5 FL0QW7GP FL0QW7GP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW07

//*** RECORD=FL0QW08 ****
// ************** FL0QW08                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW08 type basicRecord
  5 FL0QW8GP FL0QW8GP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW08

//*** RECORD=FL0QW09 ****
// ************** FL0QW04                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW09 type basicRecord
  5 FL0QW9GP FL0QW9GP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW09

//*** RECORD=FL0QW0A ****
// ************** FL0QW0A                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW0A type basicRecord
  5 FL0QWAGP FL0QWAGP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW0A

//*** RECORD=FL0QW0B ****
// ************** FL0QW0B                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW0B type basicRecord
  5 FL0QWBGP FL0QWBGP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW0B

//*** RECORD=FL0QW0C ****
// ************** FL0QW0C                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW0C type basicRecord
  5 FL0QWCGP FL0QWCGP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW0C

//*** RECORD=FL0QW0D ****
// ************** FL0QW0D                            **********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage area for  VFLQTB01 row.
// 
// ***********************
Record FL0QW0D type basicRecord
  5 FL0QWDGP FL0QWDGP ; 
    7 FBDGROUP FBDGROUP [12] ; 
      10 FBDMDTYP FBDMDTYP ; 
      10 FB8BUYDT FB8BUYDT ; 
      10 FBAMDNBR FBAMDNBR ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 OP1PARTN OP1PARTN ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP2LNINB OP2LNINB ; 
      10 PC2CUXID PC2CUXID ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 XCNCD XCNCD ; 
      10 YSMXGA YSMXGA ; 
      10 FBDBTCD FBDBTCD ; 
      10 XCTCD XCTCD ; 
      10 FY2MFGPC FY2MFGPC ; 
      10 FBDQTB FBDQTB ; 
      10 FBDTOQTB FBDTOQTB ; 
      10 FBDPSFTY FBDPSFTY ; 
      10 XFRCD XFRCD ; 
      10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
      10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
      10 FB8FFCOM FB8FFCOM ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end FL0QW0D

// buy date yymm
DataItem FL0QMBDT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season century
DataItem FL0QSECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year
DataItem FL0QSEDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season yy
DataItem FL0QSEYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year
DataItem FL0QSEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new factory to add
DataItem FL0QW-ADD-FCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add new factory flag
DataItem FL0QW-ADD-FCTY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0q breakup date century
DataItem FL0QW-BUY-CC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0q breakup date day
DataItem FL0QW-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl0q breakup date
DataItem FL0QW-BUY-DT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0q buy date alpha
DataItem FL0QW-BUY-DT-ALPHA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0q buy date numeric
DataItem FL0QW-BUY-DT-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl0q breakup date month
DataItem FL0QW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl0q breakup date year
DataItem FL0QW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl0q line index
DataItem FL0QW-LINE-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl0qw01 group level
DataItem FL0QW1GP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw02 group level
DataItem FL0QW2GP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw03 group level
DataItem FL0QW3GP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw04 group level
DataItem FL0QW4GP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw05 group level
DataItem FL0QW5GP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw06 group level
DataItem FL0QW6GP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw07 group level
DataItem FL0QW7GP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw08 group level
DataItem FL0QW8GP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw09 group level
DataItem FL0QW9GP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw0a group level
DataItem FL0QWAGP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy century
DataItem FL0QWBCC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split buy date numeric
DataItem FL0QWBDN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// split buy date
DataItem FL0QWBDT char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split buy date work area
DataItem FL0QWBDW char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw0b group level
DataItem FL0QWBGP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw0c group level
DataItem FL0QWCGP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key changed switch
DataItem FL0QWCKS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data changed switch
DataItem FL0QWDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0qw0d group level
DataItem FL0QWDGP char(1476)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem FL0QWDRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFC1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFC2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFC3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFC4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFC5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFC6 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFC7 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFC8 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFC9 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFCA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFCB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFCC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country code
DataItem FL0QWFCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map clear switch
DataItem FL0QWMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity to buy accum
DataItem FL0QWQTB decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summary error flag
DataItem FL0QWSER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shift right & left fl
DataItem FL0QWSHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comb season code and year
DataItem FL0QWSNS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity to buy work area
DataItem FL0QWSQB decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add or update switch
DataItem FL0QWUDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for fl0qw01
DataItem FL0QWX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for fl0qw02
DataItem FL0QWX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date yymm
DataItem FL0QWYYM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XFR-FCTY-RSN-CD
DataItem XFR-FCTY-RSN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

