package fl0d;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFL001;
import corpcom3.XPXFR01;
import corpcom3.XPXX001;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXPGMNB;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpcom7.ZZHHMMSS;
import corpx1.XCNCD;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XFRCD;
import corpx1.XFRTBL;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XXXUSRID;
import corpy2.YSMXGA;
import corpz3.ZZZSDT;
import fb.common.FB8BUYDT;
import fb.common.FBAMDNBR;
import fb.common.FBDBTCD;
import fb.common.FBDMDTYP;
import fb.common.FBDPSFTY;
import fb.common.FBDQTB;
import fb.common.FBDREC;
import fb.common.FBEREC;
import ff.common.*;
import fl.common.FLWREC;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import fy.common.FY4REC;
import fy.common.FYBDXCC;
import fy.common.FYBOXCC;
import fy.common.FYBREC;
import fy.common.FYCREC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pc.common.PCOREC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PG6REC;
import pg.common.PGAREC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FL0D ****
// This application is part of the factory load system.  it
// displays quantities to buy by factory and buy type for a
// specified model number and style.
// 
// The user may move an entire quantity to another factory by
// entering a new factory code and a reason code.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/23/89  lrein   New application.
// 001      06/26/90  rhetri  Set cursor location.
// 002      08/23/90  jalle1  Check for contention due to merge
//                            before any update to
//                            dfbuy.vflqtb01 (DHERMM request).
// fl120    09/27/90  jmclau  set variable cursor setting. put
//                            '*' in factory header of map when
//                            factory header is blank.
// 003      10/02/90  jmclau  add code to move '27' default
//                            reason code to map when reason
//                            code is blank. as blank.
// FL125    10/11/90  jalle1  check for country trade
//                            restrictions.
// 00000    11/12/89  jalle1  add code to allow style develop.
//                            products (and set defaults too).
// 00000    01/02/91  jalle1  add code to update dfbuy.vflaud01
//                            for every factory move.
// 00000    04/11/91  pmainw  get style short name from
//                            dprodg.vsyprd01.
// 00000    10/08/91  jalle1  oct '91 tbl chgs - default new
//                            fbdrec fields when doing insert.
// FL312    01/03/91  JMCLAU  Shorten style number on map from
//                            seven bytes to six bytes.
// FL303    01/28/92  JMCLAU  Enhance f\l system to handle
//                            multiple sales orders.
//          05/07/92  JMCLAU  Change how the op_ord_part_char
//                            is processed for stk.
// 00000    06/12/92  pmainw  change fl0dw02.
// FL339    07/01/92  jmclau  add reason code logic when adding
//                            a row to the dfbuy.vflaud01 table
// FL355    05/21/93  jmclau  Allow NIL override to occur.
//                            a row to the dfbuy.vflaud01 table
// 00000    06/03/93  jmclau  change how the trade restriction
//                            flag is processed in fl0d530.
// FL364    06/09/93  jmclau  allow negative fcty qtb values to
//                            display.
// 00000    09/17/93  jmclau  CSP 4.1 conversion. fix bug so
//                            you can move multiple qtys to a
//                            fcty and still change that move
//                            to fctys' reason code.
// 00000    10/07/93  ldeluh  Fix bug when confirm nil restr
//                            override.  It is not doing updt.
// 00000    12/14/94  jalle1  Changes for Europe - add 'EUR'
//                            buy type.
// y2kfix   11/20/97  pharwo  Regenerate for xx0xs01 changes
// *********************
Program FL0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FBDREC FBDREC; // record
  FBEREC FBEREC; // record
  FL0DW00 FL0DW00; // record
  FL0DW01 FL0DW01; // record
  FL0DW02 FL0DW02; // record
  FLWREC FLWREC; // record
  FY1REC FY1REC; // record
  FY4REC FY4REC; // record
  FYBREC FYBREC; // record
  FYCREC FYCREC; // record
  PCOREC PCOREC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PG6REC PG6REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XFRTBL; // table
  use FL0DM.FL0DM001, // form
  		FL0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FL0DM001 initial; /* map area*/
    set FL0DW00 empty; /* Working storage*/
    set FL0DW01 empty; /* map display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FL0DW00.FL0DWRDS = "N"; /* Request for data switch*/
     /* Trade restriction override fl*/
    FL0DW00.FL0DWTR-OVERIDE-FL = "N";
    if (FLWREC.SY1STNBR > " ") /* style in commarea*/
      FL0DM001.SY1STNBR = FLWREC.SY1STNBR; /* move style nbr to map*/
      FL0DM001.SY2CLRID = FLWREC.SY2CLRID; /* move color code to map*/
      FL0DM001.XDMCD = FLWREC.XDMCD; /* move dimension to map*/
      FL0DW00.FL0DWRDS = "Y"; /* request data*/
    end
    ;
    if (FLWREC.FY1FCTYC > " ") /* factory in commarea*/
      FL0DM001.FL0DMFFY = FLWREC.FY1FCTYC; /* move factory to map*/
      FL0DW00.FL0DWRDS = "Y"; /* request data*/
    end
    ;
    if (FLWREC.FBAMDNBR > 0) /* model number in commarea*/
      FL0DM001.FBAMDNBR = FLWREC.FBAMDNBR; /* move model number to map*/
      FL0DW00.FL0DWRDS = "Y"; /* request data*/
    end
    ;
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Default gpc to footwear if blank.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.XGPCD == "  ")
      COMMAREA.XGPCD = "02";
    end
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0D001; /* Converse the main process*/
    FL0D001: FL0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0D001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FL0D

// factory load model moves
Function FL0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) obtain data to display.*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FL0D100(); /* obtain data to display*/
  ;
  FL0D200(); /* format and display map*/
  ;
  FL0D300(); /* Check attention identifier*/
  ;
  FL0D400(); /* Reset fields to normal intensity*/
  ;
  FL0D500(); /* Verify the entered data*/
  ;
  FL0D600(); /* Process valid input request*/
  ;
  ;
end // end FL0D001

// obtain data to display
Function FL0D100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 18 /* no data found*/
   && FLWREC.XXXMSGNO == 32)             /* previous update ok*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end /* show this message*/
    return; /* Return to previous process*/
  end
  ;
  if (FL0DW00.FL0DWRDS != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end
  ;
  FL0DW00.FL0DWRDS = "N"; /* Request for data switch*/
  FL0DW00.FL0DWTR-OVERIDE-FL = "N"; /* Trade restriction override fl*/
  FL0DW00.XXXTSLEN = 870; /* Temporary storage page length*/
  FL0D110(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the key information in map display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  FL0DW01.FBAMDNBR = FL0DM001.FBAMDNBR; /* model number*/
  FL0DW01.FL0DMFFY = FL0DM001.FL0DMFFY; /* from factory*/
  FL0DW01.SY1STNBR = FL0DM001.SY1STNBR; /* style number*/
  FL0DW01.SY2CLRID = FL0DM001.SY2CLRID; /* color code*/
  FL0DW01.XDMCD = FL0DM001.XDMCD; /* dimension code*/
  FL0DW00.YSMXGA = " ";
  FL0D120(); /* Select set and open cursor*/
  ;
  ;
  ;
  ;
  FL0D125(); /* Get short style name*/
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  while (FL0DW00.FL0DWCSW == "N") /* Until end of cursor*/
    FL0D130(); /* Fetch selected rows*/
    ;
    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0DW00.FL0DWIXM > 15) /* Page is full*/
      FL0D140(); /* Add page to temporary storage*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DW00.FL0DWIXM > 1) /* Page was formatted*/
    FL0D140(); /* Add page to temporary storage*/
  end
  ;
  FL0D150(); /* Close the selected set cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If no pages were formatted try product as style dvlelopment*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FL0D160(); /* select set and open csr*/
    ;
    /* ------------------------------------------------------------*/
     /* Fetch and format the data into pages until end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    while (FL0DW00.FL0DWCSW == "N") /* Until end of cursor*/
      FL0D170(); /* Fetch selected rows*/
      ;
      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0DW00.FL0DWIXM > 15) /* Page is full*/
        FL0D140(); /* Add page to temporary storage*/
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Add any partially formatted last page to the queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0DW00.FL0DWIXM > 1) /* Page was formatted*/
      FL0D140(); /* Add page to temporary storage*/
    end
    ;
    FL0D150(); /* Close the selected set cursor*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DW00.TA5TSQIX == 0) /* No pages formatted*/
    FLWREC.XXXMODID = "100"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    set FL0DM001.FBAMDNBR cursor, bold;
    set FL0DM001.FL0DMFFY bold;
    set FL0DM001.SY1STNBR bold;
    set FL0DM001.SY2CLRID bold;
    set FL0DM001.XDMCD bold;
    ;
      /* IF FLWREC.XXXMSGNO EQ 32      ; last update ok*/
    FL0DW00.XXXTSPAG = 1; /* Desired page number*/
    FL0DW00.FL0DWMCS = "Y"; /* to format map*/
      /* END ;*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (FLWREC.XXXMSGNO == 0) /* No message to display*/
    FL0DW00.XXXTSPAG = 1; /* Desired page number*/
    FL0DW00.FL0DWMCS = "Y"; /* to format map*/
  end
  ;
  ;
end // end FL0D100

// purge temp storage queue
Function FL0D110()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0DW01 empty; /* M001 display storage*/
  ;
  FL0DW00.FL0DWSWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FL0DW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FL0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D110

// select set and open cursor
Function FL0D120()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FL0DW00.FL0DWIXM = 1; /* Display line index*/
  FL0DW00.FL0DWCSW = "N"; /* End of cursor switch*/
  set FBDREC empty; /* Clear row storage area*/
  ;
  if (FL0DM001.SY2CLRID == " ") /* color code not entered*/
    FL0DM001.SY2CLRID = "00"; /* move default value to map*/
  end
  ;
  if (FL0DM001.XDMCD == " ") /* dimension code not entered*/
    FL0DM001.XDMCD = "00"; /* move default value to map*/
  end
  ;
  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.FBAMDNBR = FL0DM001.FBAMDNBR; /* model number*/
  FBDREC.FY1FCTYC = FL0DM001.FL0DMFFY; /* factory code*/
  FBDREC.SY1STNBR = FL0DM001.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0DM001.SY2CLRID; /* color code*/
  FBDREC.XDMCD = FL0DM001.XDMCD; /* dimension code*/
  ;
  if (FBDREC.FY1FCTYC == "X   ") /* blank factory was requested*/
    FBDREC.FY1FCTYC = "    ";
  end
  ;
  ;
  if (FBDREC.FY1FCTYC == "****") /* all factories were requested*/
    FBDREC.FY1FCTYC = "*   "; /* correct for i-o mod*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("S1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF FLQTB ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D120

// Get style short name
Function FL0D125()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPRODG.VSYPRD01*/
   /* ---------------------------------------------------------*/
  ;
  ;
  set PGAREC empty;
  ;
  PGAREC.XGPCD = COMMAREA.XGPCD;
  ;
  PGAREC.SY1STNBR = FL0DM001.SY1STNBR;
  ;
  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FL0DW01.SY1SSTNM = PGAREC.PGASSTNM;
    return;
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/
      ;
      FL0DW01.SY1SSTNM = "************";
      return;
      ;
    else
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "GET SHORT STYLE NAME            ";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        ;
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
        ;
      else
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end FL0D125

// get screen row
Function FL0D130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the flqtb table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("N1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0D131(); /* get additional product data*/
      FL0DW00.FL0DWLRS = " "; /* switch to tell not lrps data*/
      FL0DS01(); /* Save in display storage*/
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FL0DW00.FL0DWCSW = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT FLQTB ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D130

// get additional product data
Function FL0D131()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  PG2REC.XGPCD = "02"; /* gpc code*/
  PG2REC.SY1STNBR = FL0DM001.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FL0DM001.SY2CLRID; /* color code*/
  PG2REC.XDMCD = FL0DM001.XDMCD; /* dimension code*/
  ;
   /* ------------------------------------------------------------*/
   /* get the  row to display from the product table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* get row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL0D135(); /* Get summary G/A*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "131"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
end // end FL0D131

// Get summary gender/age code
Function FL0D135()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table from the summary codes table.*/
   /* ------------------------------------------------------------*/
  ;
  set YSMREC empty;
  YSMREC.YSMTBLPF = "XGA"; /* table prefix*/
  YSMREC.YSMSYSPF = "FL"; /* system prefix*/
  YSMREC.YSMSUMID = 1; /* summary code id*/
  YSMREC.YSMSRCVL = PG2REC.XGACD; /* source code value*/
  ;
  try
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FL0DW00.YSMXGA = YSMREC.YSMSUMCD; /* summary gender/age code*/
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FL0DW00.YSMXGA = "  "; /* summary gender/age code*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0D135"; /* Process name*/
  TA1REC.TA1LOC = "SEL TABLE ROW";
  TA1REC.TA1DBASE = "DCORP.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0DM001.XXXMODID = "135"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0D135

// add to temp storage
Function FL0D140()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FL0DW01.XXXTSLEN = FL0DW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  if (FL0DW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/
    ;
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/
    ;
  end
  ;
  try
    call "TA0050" (FL0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FL0DW01 empty; /* map display storage*/
    ;
    FL0DW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FL0DW00.FL0DWIXM = 1; /* Display line number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D140

// close flqtb cursor
Function FL0D150()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows for flqtb*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("C1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE FLQTB SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D150

// select set and open cursor
Function FL0D160()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FL0DW00.FL0DWIXM = 1; /* Display line index*/
  FL0DW00.FL0DWCSW = "N"; /* End of cursor switch*/
  ;
  if (FL0DM001.SY2CLRID == "00 ") /* syclr01 default*/
    FL0DM001.SY2CLRID = "   "; /* set sydvl01 default*/
  end
  ;
  if (FL0DM001.XDMCD == "00") /* syclr01 default*/
    FL0DM001.XDMCD = "  "; /* set default dimension*/
  end
  ;
  set FBDREC empty; /* Clear row storage area*/
  ;
  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.FBAMDNBR = FL0DM001.FBAMDNBR; /* model number*/
  FBDREC.FY1FCTYC = FL0DM001.FL0DMFFY; /* factory code*/
  FBDREC.SY1STNBR = FL0DM001.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0DM001.SY2CLRID; /* color code*/
  FBDREC.XDMCD = FL0DM001.XDMCD; /* dimension code*/
  ;
  if (FBDREC.FY1FCTYC == "X   ") /* blank factory was requested*/
    FBDREC.FY1FCTYC = "    ";
  end
  ;
  ;
  if (FBDREC.FY1FCTYC == "****") /* all factories were requested*/
    FBDREC.FY1FCTYC = "*   "; /* correct for i-o mod*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("S1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "160"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF FLQTB ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D160

// get screen row
Function FL0D170()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the flqtb table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("N1", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0D171(); /* get additional product data --*/
                            /* vsydvl01*/
      FL0DW00.FL0DWLRS = " "; /* switch to tell not lrps data*/
      FL0DS06(); /* Save in display storage*/
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FL0DW00.FL0DWCSW = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "170"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT FLQTB ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D170

// get additional product data
Function FL0D171()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty;
  PG4REC.PG4STNBR = FL0DM001.SY1STNBR; /* style number*/
  ;
   /* ------------------------------------------------------------*/
   /* get the  row to display from the product table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* get row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL0D172(); /* Get summary XGA cd*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "171"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4GROUP; /* Table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
end // end FL0D171

// Get summary gender/age code
Function FL0D172()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table from the summary codes table.*/
   /* ------------------------------------------------------------*/
  ;
  set YSMREC empty;
  YSMREC.YSMTBLPF = "XGA"; /* table prefix*/
  YSMREC.YSMSYSPF = "FL"; /* system prefix*/
  YSMREC.YSMSUMID = 1; /* summary code id*/
  YSMREC.YSMSRCVL = PG4REC.XGACD; /* source code value*/
  ;
  try
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FL0DW00.YSMXGA = YSMREC.YSMSUMCD; /* summary gender/age code*/
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        ;
        FL0DW00.YSMXGA = "  "; /* summary gender/age code*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0D172"; /* Process name*/
  TA1REC.TA1LOC = "SEL TABLE ROW";
  TA1REC.TA1DBASE = "DCORP.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FL0DM001.XXXMODID = "172"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FL0D172

// format and converse map
Function FL0D200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0  /* No error found*/
   || converseVar.validationMsgNum == 18 /* No data found*/
   || converseVar.validationMsgNum == 32) /* update ok*/
    ;
    if (FL0DW00.FL0DWMCS == "Y") /* Map must be formatted*/
      FL0D210(); /* Format the data on the map*/
    end
    ;
  else
    FLWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FL0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0DM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0DM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FLWREC.XXXMSGNO != 0) /* Message to display*/
    FL0DM001.XXXMODID = FLWREC.XXXMODID; /* Module identification*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end /* Message number*/
    set FL0DM001 alarm; /* Indicate sound alarm*/
  end
  ;
  FL0DW00.FL0DWIXM = 15;
  ;
  while (FL0DW00.FL0DWIXM > 0
   && FL0DM001.XCTCD[FL0DWIXM] == " ")
    set FL0DM001.FL0DMTFY[FL0DWIXM] skip, invisible;
    set FL0DM001.XFRCD[FL0DWIXM] skip, invisible;
    FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM - 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* When the factory header is blank  move the default '*'.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DM001.FL0DMFFY == " ") /* factory header equal to blanks*/
    FL0DM001.FL0DMFFY = "*"; /* factory header default*/
  end
  ;
  converse FL0DM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.XXXMODID = " "; /* Module identification*/
  FLWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CATOAP = FL0DM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0DM001.CAITEM; /* Application data*/
  ;
  ;
end // end FL0D200

// format the display data
Function FL0D210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0DM001 initial; /* Map input/output area*/
  FL0DW00.FL0DWMCS = "N"; /* reset map clear switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FL0DW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0DW00.FL0DWSWU == "Y") /* Current page was changed*/
        ;
        FL0DS02(); /* Update temporary storage page*/
        ;
        FL0DW00.FL0DWSWU = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FL0DW00.XXXTSPAG > FL0DW00.TA5TSQIX) /* Desired greater highest*/
        FL0DW00.XXXTSPAG = FL0DW00.TA5TSQIX; /* Default to highest*/
        ;
      end
      ;
      FL0DS03(); /* Obtain temporary storage page*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FL0DM001.FBAMDNBR = FL0DW01.FBAMDNBR; /* model number*/
  FL0DM001.FL0DMFFY = FL0DW01.FL0DMFFY; /* from factory*/
  FL0DM001.SY1STNBR = FL0DW01.SY1STNBR; /* Style number*/
  FL0DM001.SY2CLRID = FL0DW01.SY2CLRID; /* color codeer*/
  FL0DM001.XDMCD = FL0DW01.XDMCD; /* dimension code*/
  FL0DM001.SY1SSTNM = FL0DW01.SY1SSTNM; /* style short name*/
  FL0DM001.SY2CLRAB = FL0DW01.SY2CLRAB; /* color abbreviation*/
  FL0DM001.XCNCD = FL0DW01.XCNCD; /* construction code*/
  ;
  FL0DW00.FL0DWIXM = 1; /* Initialize line index*/
  ;
  while (FL0DW00.FL0DWIXM <= 15) /* Until screen is full*/
    FL0DM001.XCTCD[FL0DWIXM] = FL0DW01.XCTCD[FL0DWIXM];
    FL0DM001.FY1FCTYC[FL0DWIXM] = FL0DW01.FY1FCTYC[FL0DWIXM];
    FL0DM001.FBDBTCD[FL0DWIXM] = FL0DW01.FBDBTCD[FL0DWIXM];
    FL0DM001.PC2CUXID[FL0DWIXM] = FL0DW01.PC2CUXID[FL0DWIXM];
    FL0DM001.OP1CUOID[FL0DWIXM] = FL0DW01.OP1CUOID[FL0DWIXM];
    if (FL0DW01.OP1CUOID[FL0DWIXM] > 0) /* Format nike order id*/
      FL0DM001.FL0DWDSH[FL0DWIXM] = ".";
      FL0DM001.OP1NORID[FL0DWIXM] = FL0DW01.OP1NORID[FL0DWIXM];
    else
      FL0DM001.FL0DWDSH[FL0DWIXM] = " ";
      set FL0DM001.OP1NORID[FL0DWIXM] skip, invisible;
    end
    ;
    FL0DM001.FBDQTB[FL0DWIXM] = FL0DW01.FBDQTB[FL0DWIXM];
    FL0DM001.FL0DMTFY[FL0DWIXM] = FL0DW01.FL0DMTFY[FL0DWIXM];
    ;
    /* ----------------------------------------------------------*/
     /* when reason codes are blank and there is data move default*/
     /* reason code '27' to reason code field.*/
    /* ----------------------------------------------------------*/
    ;
    if (FL0DW01.FY1FCTYC[FL0DWIXM] > " "
     && FL0DW01.XFRCD[FL0DWIXM] == " ")
      FL0DM001.XFRCD[FL0DWIXM] = "27";
    else
      FL0DM001.XFRCD[FL0DWIXM] = FL0DW01.XFRCD[FL0DWIXM];
    end
    ;
    FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM + 1; /* Increment line index*/
  end
  ;
  if (converseVar.validationMsgNum == 18) /* no data to display*/
    set FL0DM001.FBAMDNBR cursor, bold;
    set FL0DM001.FL0DMFFY bold;
    set FL0DM001.SY1STNBR bold;
    set FL0DM001.SY2CLRID bold;
    set FL0DM001.XDMCD bold;
  else
    if (FL0DW00.FL0DWUDS == "U" /* application updated rows*/
     || FL0DW00.FL0DWUDS == "A") /* application added rows*/
      set FL0DM001.SY1STNBR cursor;
    else
      set FL0DM001.FL0DMTFY[1] cursor;
    end
  end
  ;
  ;
  ;
end // end FL0D210

// Check attention identifier
Function FL0D300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FL0DM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FL0D110(); /* purge temp storage*/
      set FLWREC empty;
      FLWREC.FBAMDNBR = FL0DM001.FBAMDNBR;
      FLWREC.SY1STNBR = FL0DM001.SY1STNBR;
      FLWREC.SY2CLRID = FL0DM001.SY2CLRID;
      FLWREC.XDMCD = FL0DM001.XDMCD;
      ;
      if (FL0DM001.FL0DMFFY != "*")
        FLWREC.FY1FCTYC = FL0DM001.FL0DMFFY;
      end
      ;
      XSFLS01(); /* Exit to another application*/
      FL0DW00.FL0DWRDS = "N"; /* reset request for data sw*/
      set FL0DM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      FLWREC.XXXMODID = "300"; /* Process name*/
      ;
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pa2
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf21)
    ;
    if (converseVar.eventKey is pa2) /* Pa2 was pressed*/
      COMMAREA.CATOAP = "FL0D"; /* reset screen*/
    end
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0DM001"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FL0A";
    end
    ;
    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "FL0B";
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FL0C";
    end
    ;
    if (converseVar.eventKey is pf15) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FL0E";
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FL0K";
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "FL0I";
    end
    ;
    FL0D110(); /* purge temp storage*/
    set FLWREC empty;
    FLWREC.FBAMDNBR = FL0DM001.FBAMDNBR;
    FLWREC.SY1STNBR = FL0DM001.SY1STNBR;
    FLWREC.SY2CLRID = FL0DM001.SY2CLRID;
    FLWREC.XDMCD = FL0DM001.XDMCD;
    ;
    if (FL0DM001.FL0DMFFY != "*")
      FLWREC.FY1FCTYC = FL0DM001.FL0DMFFY;
    end
    ;
    XSFLS01(); /* transfer to another application*/
    FL0DW00.FL0DWRDS = "N"; /* reset request for data switch*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7 /* scroll backward*/
   && converseVar.eventKey not pf8) /* scroll forward*/
    converseLib.validationFailed(3); /* invalid key*/
    FLWREC.XXXMODID = "300"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
       /* reset map*/
    end
    ;
    exit stack;
  end
  ;
  ;
end // end FL0D300

// reset highlighted fields
Function FL0D400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0DM001.FBAMDNBR initialAttributes; /* model number*/
  set FL0DM001.FL0DMFFY initialAttributes; /* from factory*/
  set FL0DM001.SY1STNBR initialAttributes; /* style number*/
  set FL0DM001.SY2CLRID initialAttributes; /* color code*/
  set FL0DM001.XDMCD initialAttributes; /* dimension code*/
  set FL0DM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0DM001.CAITEM initialAttributes; /* Commarea application data*/
  FL0DW00.FL0DWIXM = 1; /* initialise line index*/
  ;
  while (FL0DW00.FL0DWIXM < 16) /* for all lines on screen*/
    set FL0DM001.XCTCD[FL0DWIXM] initialAttributes; /* country code*/
    set FL0DM001.FY1FCTYC[FL0DWIXM] initialAttributes; /* factory code*/
    set FL0DM001.FBDBTCD[FL0DWIXM] initialAttributes; /* buy type*/
    set FL0DM001.PC2CUXID[FL0DWIXM] initialAttributes; /* customer xref*/
    set FL0DM001.FBDQTB[FL0DWIXM] initialAttributes; /* quantity to buy*/
    set FL0DM001.FL0DMTFY[FL0DWIXM] initialAttributes; /* move to factory*/
    set FL0DM001.XFRCD[FL0DWIXM] initialAttributes; /* reason code*/
    FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM + 1;
  end
  ;
  FL0DW00.FL0DWIXM = 1; /* initialise line index*/
  ;
  while (FL0DW00.FL0DWIXM < 16) /* for each screen line*/
    if (FL0DM001.XFRCD[FL0DWIXM] == "?")
      FL0D410(); /* pop up window*/
    end
    ;
    FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM + 1; /* next line*/
  end
  ;
end // end FL0D400

// xfrcd pop up window process
Function FL0D410()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FLWREC.XXXMODID = "410"; /* Module identification*/
    converseLib.validationFailed(19); /* Indicate pf key not valid*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of factory reason codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DM001.XFRCD[FL0DWIXM] == "?") /* line list requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "REASON CODE"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXFR01(); /* display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FL0DM001.XFRCD[FL0DWIXM] = FL0DW01.XFRCD[FL0DWIXM];
    else
      FL0DM001.XFRCD[FL0DWIXM] = XFRTBL.XFRCD[XX0XWPIX];
    end
    ;
    set FL0DM001.XFRCD[FL0DWIXM] cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  FLWREC.XXXMODID = "410"; /* Module identification*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D410

// verify the entered data
Function FL0D500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DM001.CAITEM > " ") /* Application data was entered*/
    FLWREC.XXXMODID = "500"; /* Module identification*/
    set FL0DM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DM001.FBAMDNBR != FL0DW01.FBAMDNBR /* model number changed*/
   || FL0DM001.FL0DMFFY != FL0DW01.FL0DMFFY /* from factory*/
   || FL0DM001.SY1STNBR != FL0DW01.SY1STNBR /* style number*/
   || FL0DM001.SY2CLRID != FL0DW01.SY2CLRID /* color code*/
   || FL0DM001.XDMCD != FL0DW01.XDMCD)      /* dimension code*/
    FL0DW00.FL0DWCKS = "Y"; /* key data changed*/
  else
    FL0DW00.FL0DWCKS = "N"; /* key data not changed*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if data was changed*/
   /* ------------------------------------------------------------*/
  ;
  FL0DW00.FL0DWDCS = "N"; /* data didnt change*/
  FL0DW00.FL0DWIXM = 1; /* first line on screen*/
  ;
  while (FL0DW00.FL0DWIXM <= 15) /* until no more lines on screen*/
    ;
    if (FL0DM001.XFRCD[FL0DWIXM] != FL0DW01.XFRCD[FL0DWIXM])
      FL0DW00.FL0DWDCS = "Y"; /* data did change*/
    end
    ;
    if (FL0DM001.FL0DMTFY[FL0DWIXM] != FL0DW01.FL0DMTFY[FL0DWIXM])
      FL0DW00.FL0DWDCS = "Y"; /* data did change*/
      FL0DW00.FL0DWTR-OVERIDE-FL = "N"; /* reset trade restriction*/
                                  /* override flag*/
    end
    ;
    FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM + 1; /* next line*/
  end
  ;
  if (FL0DW00.FL0DWCKS == "Y") /* Key changed*/
    if (FL0DW00.FL0DWDCS == "Y") /* and data changed*/
      FLWREC.XXXMODID = "500"; /* module id*/
      converseLib.validationFailed(130); /* Can't chg key & data*/
      set FL0DM001.FBAMDNBR cursor; /* cursor to first key field*/
      exit stack; /* return to display map*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    FL0D510(); /* Verify scroll request*/
  else
    ;
    if (FL0DW00.FL0DWCKS == "Y") /* key changed*/
      FL0D520(); /* edit key data*/
    else
      ;
      /* ------------------------------------------------------------*/
       /* otherwise, verify data in the line.*/
      /* ------------------------------------------------------------*/
      ;
      FL0DW00.FL0DWIXM = 15; /* Initialize line index*/
      ;
      while (FL0DW00.FL0DWIXM > 0) /* Until end of lines*/
        FL0D530(); /* edit line data*/
        FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM - 1; /* Decrement line number*/
      end
      ;
    end
    ;
  end
  ;
  FL0DW00.FL0DWIXM = 1;
  ;
  while (FL0DW00.FL0DWIXM < 16)
    FL0DW01.FL0DMTFY[FL0DWIXM] = FL0DM001.FL0DMTFY[FL0DWIXM];
    FL0DW01.XFRCD[FL0DWIXM] = FL0DM001.XFRCD[FL0DWIXM];
    FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FL0D500

// verify scroll request
Function FL0D510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FL0DW00.XXXTSPAG <= 1)      /* and no previous pages*/
    ;
    FLWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FL0DW00.XXXTSPAG >= FL0DW00.TA5TSQIX) /* and no more pages*/
    ;
    FLWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error if data or key was modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DW00.FL0DWCKS == "Y" /* key was changed*/
   || FL0DW00.FL0DWDCS == "Y") /* data was changed*/
    ;
    FLWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(5); /* Modifications not allowed*/
    ;
  end
end // end FL0D510

// edit key data
Function FL0D520()
   /* ------------------------------------------------------------*/
   /* only style number and model number can be edited.*/
   /* 'x  ' is entered to represent a blank factory*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DM001.SY1STNBR <= " ") /* style number spaces*/
    FLWREC.XXXMODID = "520"; /* Module identification*/
    set FL0DM001.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* cannot be spaces*/
  end
  ;
  if (FL0DM001.FL0DMFFY <= " ") /* factory number spaces*/
    FLWREC.XXXMODID = "520"; /* Module identification*/
    set FL0DM001.FL0DMFFY cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* cannot be spaces*/
  end
  ;
  if (FL0DM001.FBAMDNBR <= 0) /* model number spaces*/
    FLWREC.XXXMODID = "520"; /* Module identification*/
    set FL0DM001.FBAMDNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* cannot be spaces*/
  end
  ;
end // end FL0D520

// edit line data
Function FL0D530()
   /* ------------------------------------------------------------*/
   /* if reason code changed from previous and not equal to the*/
   /* default, it must be in the reason code table and active*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DM001.XFRCD[FL0DWIXM] != FL0DW01.XFRCD[FL0DWIXM])
    ;
    if (FL0DM001.XFRCD[FL0DWIXM] != "27") /* not equal to default*/
      ;
      if (FL0DM001.XFRCD[FL0DWIXM] in XFRTBL.XFRCD /* in table*/
       && XFRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
        /* NEXT SENTENCE*/
      else
        FLWREC.XXXMODID = "530"; /* Module identification*/
        set FL0DM001.XFRCD[FL0DWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* not found*/
      end
      ;
    end
    ;
    if (FL0DM001.FL0DMTFY[FL0DWIXM] <= " ") /* reason entered and*/
              /* factory spaces*/
      FLWREC.XXXMODID = "530"; /* Module identification*/
      set FL0DM001.FL0DMTFY[FL0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* cannot be spaces*/
    end
    ;
  end
  ;
  if (FL0DM001.FL0DMTFY[FL0DWIXM] != " "
   && FL0DM001.FL0DMTFY[FL0DWIXM] != "X  ")
    FY1REC.XGPCD = "02"; /* gpc code*/
    FY1REC.XXXSTAT = "A"; /* status*/
    FY1REC.FY1FCTYC = FL0DM001.FL0DMTFY[FL0DWIXM]; /* factory code*/
    FL0D531(); /* get factory*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      set FL0DM001.FL0DMTFY[FL0DWIXM] cursor, bold; /* Highlight*/
      FLWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(10); /* not found*/
    else
      ;
      FL0DW00.FYBOXCC = FY1REC.XCTCD; /* origin xctcd*/
      FL0DW00.FYBDXCC = FL0DM001.XCTCD[FL0DWIXM]; /* dest xctcd*/
      ;
      FL0D532(); /* select set csr for dfcty.vtrdrs01*/
      ;
      FL0DW00.FL0DWCSW = "N"; /* cursor switch*/
      FL0DW00.FL0DWTRS = "N"; /* trade restriction switch*/
      ;
      while (FL0DW00.FL0DWCSW == "N" /* while not end of cursor*/
       && FL0DW00.FL0DWTRS == "N") /* and no trade restriction*/
        ;
        FL0D533(); /* fetch dfcty.vtrds01*/
        ;
      end
      ;
      FL0D534(); /* close selected set csr*/
      ;
      if (FL0DW00.FL0DWTRS == "Y") /* trade restrictions exist*/
        if (FL0DW00.FL0DWTR-OVERIDE-FL == "N") /* no trade restriction*/
                                                /* over-ride*/
          FL0DW00.FL0DWTR-OVERIDE-FL = "Y"; /* no trade restriction*/
          set FL0DM001.FL0DMTFY[FL0DWIXM] cursor, bold; /* Highlight*/
          FLWREC.XXXMODID = "530"; /* Module identification*/
          converseLib.validationFailed(488); /* trade restrictions exist message*/
        else
          set FL0DM001.FL0DMTFY[FL0DWIXM] cursor, bold; /* Highlight*/
        end
        ;
      else
        FL0DW01.XCTCD[FL0DWIXM] = FY1REC.XCTCD; /* save country code*/
      end
      ;
      FL0DW01.XCTCD[FL0DWIXM] = FY1REC.XCTCD; /* save country code*/
      ;
    end
    ;
  end
  ;
end // end FL0D530

// get factory from database
Function FL0D531()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "531"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
end // end FL0D531

// select vtrdrs01 cursor
Function FL0D532()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FYBREC empty; /* clear ws record*/
  ;
  FYBREC.XGPCD = "02"; /* gpc code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2800" ("S1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "532"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VTRDRS01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D532

// fetch vtrdrs01 cursor
Function FL0D533()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the flqtb table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2800" ("N1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FL0DW00.FYBOXCC == FYBREC.FYBOXCC /* orig ctry equal*/
       && FL0DW00.FYBDXCC == FYBREC.FYBDXCC) /* dest ctry eqal*/
        ;
        FL0DW00.FL0DWTRS = "Y"; /* trade restriction*/
        ;
      end
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FL0DW00.FL0DWCSW = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "533"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VTRDRS01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FYBREC.FYBGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D533

// close vtrdrs01 cursor
Function FL0D534()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows for flqtb*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2800" ("C1", SQLCA, FYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "534"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VTRDRS01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDRS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D534

// process valid input request
Function FL0D600()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    FL0DW00.XXXTSPAG = FL0DW00.XXXTSPAG - 1; /* Decrement page number*/
    FL0DW00.FL0DWMCS = "Y"; /* format map switch*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    FL0DW00.XXXTSPAG = FL0DW00.XXXTSPAG + 1; /* Increment page number*/
    FL0DW00.FL0DWMCS = "Y"; /* format map switch*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the key was changed, set request for data switch,*/
   /* and clear map switch*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DW00.FL0DWCKS == "Y") /* key changed*/
    set FL0DW01 empty;
    FL0DW00.FL0DWRDS = "Y"; /* Request for data switch*/
    FL0DW00.FL0DWMCS = "Y"; /* map clear switch*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* check to see if merge is executing and causing contention*/
   /* on db2 tables.*/
   /* ------------------------------------------------------------*/
  ;
  FL0D605(); /* check for contention*/
  ;
   /* ------------------------------------------------------------*/
   /* this is now the update pass.  if a line's data has changed,*/
   /* update display working storage, and update the database*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* get time and date*/
  FL0DW00.FL0DWIXM = 1; /* Initialize line index*/
  ;
  while (FL0DW00.FL0DWIXM <= 15) /* Until end of lines*/
    ;
    if (FL0DM001.FL0DMTFY[FL0DWIXM] != " ")
      FL0D660(); /* obtain data for delete*/
      FL0D640(); /* insert audit rec for delete*/
      ;
      if (FL0DM001.FY1FCTYC[FL0DWIXM] != FL0DM001.FL0DMTFY[FL0DWIXM])
        FL0D610(); /* delete "from" factory*/
      end
      ;
      FL0D620(); /* determine if change or add*/
      FL0D650(); /* insert audit rec for change or add*/
      FL0D630(); /* change or add row*/
    end
    ;
    FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM + 1; /* Increment line index*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* the program is at this point only if all updates were  good*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* commit changes*/
  FL0DW00.FL0DWRDS = "Y"; /* request for data switch*/
  FL0DW00.FL0DWMCS = "Y"; /* map clear switch*/
  FLWREC.XXXMSGNO = 32; /* info message only*/
  FLWREC.XXXMODID = "600"; /* module id*/
end // end FL0D600

// check for merge contention
Function FL0D605()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty;
  ;
  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        FLWREC.XXXMODID = "605"; /* module identification*/
        exit stack; /* return to process*/
      end
    else
      ;
      ;
      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      FLWREC.XXXMODID = "605"; /* Module identification*/
      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(19); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end
  ;
  ;
end // end FL0D605

// delete 'from' factory
Function FL0D610()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBDREC empty;
  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.PC2INSEG = "000"; /* spec code*/
  FBDREC.XPGCD = "00"; /* package type*/
  FBDREC.XUMCD = "01"; /* unit of measure code*/
  FBDREC.FBAMDNBR = FL0DW01.FBAMDNBR; /* model number*/
  FBDREC.SY1STNBR = FL0DW01.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0DW01.SY2CLRID; /* color code*/
  FBDREC.XDMCD = FL0DW01.XDMCD; /* dimension code*/
  ;
  if (FL0DW01.FY1FCTYC[FL0DWIXM] == "X   ") /* blank factory*/
    FBDREC.FY1FCTYC = " ";
  else
    FBDREC.FY1FCTYC = FL0DW01.FY1FCTYC[FL0DWIXM]; /* factory code*/
  end
  ;
  if (FL0DW01.FBDBTCD[FL0DWIXM] == "DRS"
   || FL0DW01.FBDBTCD[FL0DWIXM] == "NIL"
   || FL0DW01.FBDBTCD[FL0DWIXM] == "EUR")
    FBDREC.OP1PARTN = FL0DW01.OP1PARTN[FL0DWIXM]; /* cust part char*/
  end
  FBDREC.OP1CUOID = FL0DW01.OP1CUOID[FL0DWIXM]; /* cust ord xref*/
  FBDREC.OP1NORID = FL0DW01.OP1NORID[FL0DWIXM]; /* customer xref*/
  FBDREC.PC2CUXID = FL0DW01.PC2CUXID[FL0DWIXM]; /* customer xref*/
  FBDREC.FB8BUYDT = FL0DW01.FB8BUYDT[FL0DWIXM]; /* buy date*/
  FBDREC.FBDBTCD = FL0DW01.FBDBTCD[FL0DWIXM]; /* buy type*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("SB", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FLWREC.XXXMODID = "610";
      converseLib.validationFailed(21); /* deleted since last displayed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev changes*/
      exit stack; /* return to calling process*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    FLWREC.XXXMODID = "610"; /* Module identification*/
    TA1REC.TA1LOC = "SELECT QTB ROW FCTY"; /* error description*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back previous updates*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
    TA1REC.TA1LOC = "SELECT UNIQUE-2";
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* delete the row from the flqtb table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("D2", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100)
      FLWREC.XXXMSGNO = 21; /* row not found to delete*/
      FLWREC.XXXMODID = "610"; /* Module identification*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev changes*/
      exit stack; /* Exit to display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    FLWREC.XXXMODID = "610"; /* Module identification*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    FLWREC.XXXMODID = "610"; /* Module identification*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back previous updates*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE FROM FACTORY ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
   /* *****************/
end // end FL0D610

// check for change or add
Function FL0D620()
   /* ------------------------------------------------------------*/
   /* build key for update*/
   /* ------------------------------------------------------------*/
  ;
  set FBDREC empty;
  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.PC2INSEG = "000"; /* spec code*/
  FBDREC.XPGCD = "00"; /* package type*/
  FBDREC.XUMCD = "01"; /* unit of measure code*/
  ;
  FBDREC.FBAMDNBR = FL0DW01.FBAMDNBR; /* model number*/
  FBDREC.SY1STNBR = FL0DW01.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0DW01.SY2CLRID; /* color code*/
  FBDREC.XDMCD = FL0DW01.XDMCD; /* dimension code*/
  if (FL0DW01.FL0DMTFY[FL0DWIXM] != "X  ")
    FBDREC.FY1FCTYC = FL0DW01.FL0DMTFY[FL0DWIXM]; /* factory code*/
  else
    FBDREC.FY1FCTYC = " ";
  end
  ;
  if (FL0DW01.FBDBTCD[FL0DWIXM] == "DRS"
   || FL0DW01.FBDBTCD[FL0DWIXM] == "NIL"
   || FL0DW01.FBDBTCD[FL0DWIXM] == "EUR")
    FBDREC.OP1PARTN = FL0DW01.OP1PARTN[FL0DWIXM]; /* partition char*/
  end
  FBDREC.OP1CUOID = FL0DW01.OP1CUOID[FL0DWIXM]; /* cust order id.*/
  FBDREC.OP1NORID = FL0DW01.OP1NORID[FL0DWIXM]; /* nike order id.*/
  FBDREC.PC2CUXID = FL0DW01.PC2CUXID[FL0DWIXM]; /* customer xref*/
  FBDREC.FB8BUYDT = FL0DW01.FB8BUYDT[FL0DWIXM]; /* buy date*/
  FBDREC.FBDBTCD = FL0DW01.FBDBTCD[FL0DWIXM]; /* buy type*/
  ;
   /* ------------------------------------------------------------*/
   /* determine if add or update*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("SB", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If row found, it is an update, if not found, than an add*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0DW00.FL0DWUDS = "U"; /* update row*/
      return; /* return to calling process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      FL0DW00.FL0DWUDS = "A"; /* add a row*/
      return; /* return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.XXXMODID = "610"; /* Module identification*/
  TA1REC.TA1LOC = "SELECT QTB ROW FCTY"; /* error description*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back previous updates*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  TA1REC.TA1LOC = "SELECT UNIQUE-2";
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack;
  ;
end // end FL0D620

// change or add row
Function FL0D630()
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  ;
  if (FL0DW00.FL0DWUDS == "U") /* this is an update*/
    FBDREC.XFRCD = FL0DM001.XFRCD[FL0DWIXM];
    ;
     /* this check is made to make sure that the fbdrec.fbdqtb*/
     /* isn't added twice when only changing a reason code in the*/
     /* move to fcty and adding other fcty qty's to the move to fcty.*/
    ;
    if (FL0DM001.FY1FCTYC[FL0DWIXM] != FL0DM001.FL0DMTFY[FL0DWIXM])
      FBDREC.FBDQTB = FBDREC.FBDQTB + FL0DM001.FBDQTB[FL0DWIXM];
    end
    ;
    try
      call "IO3460" ("U2", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
    end /* update row*/
    ;
  else
    FBDREC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
    FBDREC.XFRCD = FL0DM001.XFRCD[FL0DWIXM]; /* reason code*/
    if (FL0DM001.XCNCD == "**")
      FBDREC.XCNCD = " "; /* Const cd*/
    else
      FBDREC.XCNCD = FL0DM001.XCNCD; /* Const cd*/
    end
    FBDREC.YSMXGA = FL0DW00.YSMXGA; /* G/A*/
    FBDREC.XCTCD = FL0DM001.XCTCD[FL0DWIXM]; /* country code*/
    FBDREC.FBDQTB = FL0DM001.FBDQTB[FL0DWIXM]; /* move to quantity*/
    FBDREC.FB-LATE-BK-FL = "N"; /* default to 'n'o*/
    FBDREC.FB-LATE-BK-FL-MDT = 0; /* default to 0*/
    try
      call "IO3460" ("A ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
    end /* add a  row*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000") /* good return*/
    ;
    FL0DW00.FL0DWTR-OVERIDE-FL = "N"; /* reset trade restriction*/
                                            /* override flag*/
    if (SQLCA.VAGen_SQLCODE == 0) /* good call*/
      return; /* return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      FLWREC.XXXMSGNO = 20; /* updated since displayed here*/
      FLWREC.XXXMODID = "630";
      FL0DW00.FL0DWMCS = "Y"; /* format map*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back changes already made*/
      exit stack; /* return to display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back changes already made*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back changes already made*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF LRPS ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0D630

// insert audit rec for delete
Function FL0D640()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FL0DW02 empty;
  ;
  FL0DW02.FBDMDTYP = "FL1"; /* model type*/
  FL0DW02.FB8BUYDT = FL0DW01.FB8BUYDT[FL0DWIXM]; /* buy date*/
  FL0DW02.FBAMDNBR = FL0DW01.FBAMDNBR; /* model number*/
  FL0DW02.XFRCD = FL0DM001.XFRCD[FL0DWIXM]; /* factory reason code*/
  FL0DW02.FY1FCTYC = FL0DM001.FY1FCTYC[FL0DWIXM]; /* factory*/
  FL0DW02.PC2CUXID = FL0DW01.PC2CUXID[FL0DWIXM]; /* customer xref*/
  FL0DW02.SY1STNBR = FL0DW01.SY1STNBR; /* style number*/
  FL0DW02.SY2CLRID = FL0DW01.SY2CLRID; /* color code*/
  FL0DW02.XDMCD = FL0DW01.XDMCD; /* dimension code*/
  FL0DW02.XQACD = "01"; /* quality code*/
  FL0DW02.PC2INSEG = FBDREC.PC2INSEG; /* spec code*/
  FL0DW02.XPGCD = "00"; /* package type*/
  FL0DW02.XUMCD = "01"; /* unit of measure code*/
  FL0DW02.FBDBTCD = FL0DW01.FBDBTCD[FL0DWIXM]; /* buy type*/
  FL0DW02.FBDQTB = -1 * FL0DM001.FBDQTB[FL0DWIXM];
  FL0DW02.XXXPGMNB = COMMAREA.CACURRAP; /* program number*/
  FL0DW02.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FL0DW02.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  FL0DW02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* setup hhmmss*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "FL1210" ("A ", SQLCA, FL0DW02) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    FLWREC.XXXMODID = "640"; /* Module identification*/
    TA1REC.TA1LOC = "INSERT AUDIT REC FOR DELETE";
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back previous updates*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFLAUD01"; /* Table view name*/
    TA1REC.TA1TBLKE = FL0DW02.FL0DWGRP; /* Table key*/
    TA1REC.TA1LOC = "ADD";
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  end
  ;
  ;
end // end FL0D640

// insert audit rec for add
Function FL0D650()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FL0DW02 empty;
  ;
  FL0DW02.FBDMDTYP = "FL1"; /* model type*/
  FL0DW02.FB8BUYDT = FL0DW01.FB8BUYDT[FL0DWIXM]; /* buy date*/
  FL0DW02.FBAMDNBR = FL0DW01.FBAMDNBR; /* model number*/
  ;
  if (FL0DW01.FL0DMTFY[FL0DWIXM] == "X   ") /* blank factory*/
    FL0DW02.FY1FCTYC = " ";
  else
    FL0DW02.FY1FCTYC = FL0DW01.FL0DMTFY[FL0DWIXM]; /* factory code*/
  end
  ;
  FL0DW02.PC2CUXID = FL0DW01.PC2CUXID[FL0DWIXM]; /* customer xref*/
  FL0DW02.SY1STNBR = FL0DW01.SY1STNBR; /* style number*/
  FL0DW02.SY2CLRID = FL0DW01.SY2CLRID; /* color code*/
  FL0DW02.XDMCD = FL0DW01.XDMCD; /* dimension code*/
  FL0DW02.XQACD = "01"; /* quality code*/
  FL0DW02.PC2INSEG = FBDREC.PC2INSEG; /* spec code*/
  FL0DW02.XPGCD = "00"; /* package type*/
  FL0DW02.XUMCD = "01"; /* unit of measure code*/
  FL0DW02.FBDBTCD = FL0DW01.FBDBTCD[FL0DWIXM]; /* buy type*/
  FL0DW02.XFRCD = FL0DM001.XFRCD[FL0DWIXM]; /* factory reason cd*/
  FL0DW02.FBDQTB = FL0DM001.FBDQTB[FL0DWIXM]; /* quantity*/
  FL0DW02.XXXPGMNB = COMMAREA.CACURRAP; /* program number*/
  FL0DW02.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FL0DW02.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  FL0DW02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* setup hhmmss*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "FL1210" ("A ", SQLCA, FL0DW02) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    FLWREC.XXXMODID = "650"; /* Module identification*/
    TA1REC.TA1LOC = "INSERT AUDIT REC FOR ADD";
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back previous updates*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFLAUD01"; /* Table view name*/
    TA1REC.TA1TBLKE = FL0DW02.FL0DWGRP; /* Table key*/
    TA1REC.TA1LOC = "ADD";
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  end
  ;
  ;
end // end FL0D650

// obtain data for delete
Function FL0D660()
   /* ------------------------------------------------------------*/
   /* build key for update*/
   /* ------------------------------------------------------------*/
  ;
  set FBDREC empty;
  FBDREC.FBDMDTYP = "FL1"; /* model type*/
  FBDREC.FBAMDNBR = FL0DW01.FBAMDNBR; /* model number*/
  FBDREC.FB8BUYDT = FL0DW01.FB8BUYDT[FL0DWIXM]; /* buy date*/
  if (FL0DW01.FL0DMTFY[FL0DWIXM] != "X  ")
    FBDREC.FY1FCTYC = FL0DW01.FL0DMTFY[FL0DWIXM]; /* factory code*/
  else
    FBDREC.FY1FCTYC = " ";
  end
  FBDREC.SY1STNBR = FL0DW01.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0DW01.SY2CLRID; /* color code*/
  FBDREC.XDMCD = FL0DW01.XDMCD; /* dimension code*/
  FBDREC.FBDBTCD = FL0DW01.FBDBTCD[FL0DWIXM]; /* buy type*/
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.XPGCD = "00"; /* package type*/
  FBDREC.XUMCD = "01"; /* unit of measure code*/
  if (FL0DW01.FBDBTCD[FL0DWIXM] == "DRS"
   || FL0DW01.FBDBTCD[FL0DWIXM] == "NIL"
   || FL0DW01.FBDBTCD[FL0DWIXM] == "EUR")
    FBDREC.OP1PARTN = FL0DW01.OP1PARTN[FL0DWIXM]; /* partition char*/
  end
  FBDREC.OP1CUOID = FL0DW01.OP1CUOID[FL0DWIXM]; /* cust order ident.*/
  FBDREC.OP1NORID = FL0DW01.OP1NORID[FL0DWIXM]; /* nike order ident.*/
  FBDREC.PC2CUXID = FL0DW01.PC2CUXID[FL0DWIXM]; /* customer xref*/
  ;
   /* ------------------------------------------------------------*/
   /* determine if add or update*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("SB", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If row found, it is an update, if not found, than an add*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return; /* return to calling process*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.XXXMODID = "660"; /* Module identification*/
  TA1REC.TA1LOC = "OBTAIN DATA FOR DEL"; /* error description*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back previous updates*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  TA1REC.TA1LOC = "SELECT UNIQUE-2";
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack;
  ;
end // end FL0D660

// save in display storage
Function FL0DS01()
   /* ------------------------------------------------------------*/
   /* If the first line on a page, save the heading information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DW00.FL0DWIXM == 1 /* First line on page*/
   && FL0DW00.FL0DWLRS == " ") /* and not lrps data*/
    FL0DW01.FBAMDNBR = FL0DM001.FBAMDNBR; /* model number*/
    FL0DW01.FL0DMFFY = FL0DM001.FL0DMFFY; /* from factory*/
    FL0DW01.SY1STNBR = FL0DM001.SY1STNBR; /* Style number*/
    FL0DW01.SY2CLRID = FL0DM001.SY2CLRID; /* color code*/
    FL0DW01.XDMCD = FL0DM001.XDMCD; /* dimension code*/
    ;
    ;
    if (PG2REC.SY2CLRAB == " ")
      FL0DW01.SY2CLRAB = "*************";
    else
      FL0DW01.SY2CLRAB = PG2REC.SY2CLRAB; /* color abbrev*/
    end
    ;
    if (PG2REC.XCNCD == " ")
      FL0DW01.XCNCD = "**";
    else
      FL0DW01.XCNCD = PG2REC.XCNCD; /* construction code*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the line to be displayed in the display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  FL0DW01.XCTCD[FL0DWIXM] = FBDREC.XCTCD; /* country code*/
  FL0DW01.FY1FCTYC[FL0DWIXM] = FBDREC.FY1FCTYC; /* factory*/
  FL0DW01.FBDBTCD[FL0DWIXM] = FBDREC.FBDBTCD; /* buy type*/
  FL0DW01.OP1PARTN[FL0DWIXM] = FBDREC.OP1PARTN; /* partition char*/
  FL0DW01.OP1CUOID[FL0DWIXM] = FBDREC.OP1CUOID; /* cust order id*/
  FL0DW01.OP1NORID[FL0DWIXM] = FBDREC.OP1NORID; /* nike order id*/
  FL0DW01.PC2CUXID[FL0DWIXM] = FBDREC.PC2CUXID; /* cust xref*/
  FL0DW01.FBDQTB[FL0DWIXM] = FBDREC.FBDQTB; /* quantity to buy*/
  FL0DW01.FBDPSFTY[FL0DWIXM] = FBDREC.FBDPSFTY; /* prev soln factory*/
  FL0DW01.FB8BUYDT[FL0DWIXM] = FBDREC.FB8BUYDT; /* buy date*/
  ;
   /* IF FBDREC.XFRCD EQ ' ';*/
   /* MOVE '27' TO FL0DW01.XFRCD(FL0DWIXM) ; default rsn cd*/
   /* ELSE ;*/
  FL0DW01.XFRCD[FL0DWIXM] = FBDREC.XFRCD; /* fcty reason code*/
   /* END ;*/
  ;
  FL0DW01.FL0DWUNC[FL0DWIXM] = FL0DW00.FL0DWUNC; /* cost factor*/
  FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM + 1; /* next tsq row*/
  ;
  ;
end // end FL0DS01

// update temporary storage page
Function FL0DS02()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FL0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0DS02

// obtain temporary storage page
Function FL0DS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FL0DW01.XXXTSLEN = FL0DW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FL0DW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FL0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0DS03

// save in display storage
Function FL0DS06()
   /* ------------------------------------------------------------*/
   /* If the first line on a page, save the heading information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0DW00.FL0DWIXM == 1 /* First line on page*/
   && FL0DW00.FL0DWLRS == " ") /* and not lrps data*/
    FL0DW01.FBAMDNBR = FL0DM001.FBAMDNBR; /* model number*/
    FL0DW01.FL0DMFFY = FL0DM001.FL0DMFFY; /* from factory*/
    FL0DW01.SY1STNBR = FL0DM001.SY1STNBR; /* Style number*/
    FL0DW01.SY2CLRID = FL0DM001.SY2CLRID; /* color code*/
    FL0DW01.XDMCD = FL0DM001.XDMCD; /* dimension code*/
    ;
    if (PG4REC.SY1STYNM == " ")
      FL0DW01.SY2CLRAB = "*************";
    else
      FL0DW01.SY2CLRAB = "             ";
    end
    ;
    if (PG4REC.XCNCD == " ")
      FL0DW01.XCNCD = "**";
    else
      FL0DW01.XCNCD = PG4REC.XCNCD; /* construction code*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the line to be displayed in the display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  FL0DW01.XCTCD[FL0DWIXM] = FBDREC.XCTCD; /* country code*/
  FL0DW01.FY1FCTYC[FL0DWIXM] = FBDREC.FY1FCTYC; /* factory*/
  FL0DW01.FBDBTCD[FL0DWIXM] = FBDREC.FBDBTCD; /* buy type*/
  FL0DW01.PC2CUXID[FL0DWIXM] = FBDREC.PC2CUXID; /* cust xref*/
  FL0DW01.FBDQTB[FL0DWIXM] = FBDREC.FBDQTB; /* quantity to buy*/
  FL0DW01.FBDPSFTY[FL0DWIXM] = FBDREC.FBDPSFTY; /* prev soln factory*/
  FL0DW01.FB8BUYDT[FL0DWIXM] = FBDREC.FB8BUYDT; /* buy date*/
  ;
   /* IF FBDREC.XFRCD EQ ' ';*/
   /* MOVE '27' TO FL0DW01.XFRCD(FL0DWIXM) ; default rsn cd*/
   /* ELSE ;*/
  FL0DW01.XFRCD[FL0DWIXM] = FBDREC.XFRCD; /* fcty reason code*/
   /* END ;*/
  ;
  FL0DW01.FL0DWUNC[FL0DWIXM] = FL0DW00.FL0DWUNC; /* cost factor*/
  FL0DW00.FL0DWIXM = FL0DW00.FL0DWIXM + 1; /* next tsq row*/
  ;
  ;
end // end FL0DS06

Record FL0DW00 type basicRecord
  10 * char(18) ; 
    15 FL0DWMDN FL0DWMDN ; 
      20 FBAMDNBR FBAMDNBR ; 
    15 FL0DMFFY FL0DMFFY ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 FL0DWRDS FL0DWRDS ; 
  10 FL0DWDSH FL0DWDSH ; 
  10 FL0DWCSW FL0DWCSW ; 
  10 FL0DWMCS FL0DWMCS ; 
  10 FL0DWSWU FL0DWSWU ; 
  10 FL0DWCKS FL0DWCKS ; 
  10 FL0DWDCS FL0DWDCS ; 
  10 FL0DWLRS FL0DWLRS ; 
  10 FL0DWUDS FL0DWUDS ; 
  10 FL0DWTRS FL0DWTRS ; 
  10 FL0DWIXM FL0DWIXM ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FL0DWSQB FL0DWSQB ; 
  10 FL0DWUNC FL0DWUNC ; 
  10 FL0DWWK1 FL0DWWK1 ; 
  10 FL0DWWK2 FL0DWWK2 ; 
  10 FL0DWBDT FL0DWBDT ; 
    15 * num(2) ; 
    15 FL0DWBYY FL0DWBYY ; 
    15 FL0DWBMM FL0DWBMM ; 
    15 * num(2) ; 
  10 FYBOXCC FYBOXCC ; 
  10 FYBDXCC FYBDXCC ; 
  10 FL0DWTR-OVERIDE-FL FL0DWTR-OVERIDE-FL ; 
  10 YSMXGA YSMXGA ; 
end // end FL0DW00

//*** RECORD=FL0DW01 ****
// display working storage for fl0d - factory load move
// ***********************
Record FL0DW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(870) ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 FL0DMFFY FL0DMFFY ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XCNCD XCNCD ; 
    10 XCTCD XCTCD [15] ; 
    10 FY1FCTYC FY1FCTYC [15] ; 
    10 FBDBTCD FBDBTCD [15] ; 
    10 OP1PARTN OP1PARTN [15] ; 
    10 OP1CUOID OP1CUOID [15] ; 
    10 OP1NORID OP1NORID [15] ; 
    10 PC2CUXID PC2CUXID [15] ; 
    10 FBDQTB FBDQTB [15] ; 
    10 FL0DMTFY FL0DMTFY [15] ; 
    10 XFRCD XFRCD [15] ; 
    10 FL0DMCST FL0DMCST [15] ; 
    10 FBDPSFTY FBDPSFTY [15] ; 
    10 FL0DMLRP FL0DMLRP [15] ; 
    10 FB8BUYDT FB8BUYDT [15] ; 
    10 FL0DWUNC FL0DWUNC [15] ; 
end // end FL0DW01

//*** RECORD=FL0DW02 ****
// ************************************************************
// ************** FACTORY LOAD audit table ********************
// this is the working storage section for the iomod fl1210.
// ************************************************************
// ***********************
Record FL0DW02 type basicRecord
  5 FL0DWGRP FL0DWGRP ; 
    10 FBDMDTYP FBDMDTYP ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC2CUXID PC2CUXID ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 FBDBTCD FBDBTCD ; 
    10 XFRCD XFRCD ; 
    10 FBDQTB FBDQTB ; 
    10 XXXPGMNB XXXPGMNB ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZHHMMSS ZZHHMMSS ; 
    10 XCTCD XCTCD ; 
    10 FL0DWFDT FL0DWFDT ; 
    10 FL0DWTDT FL0DWTDT ; 
end // end FL0DW02

// cost
DataItem FL0DMCST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from factory
DataItem FL0DMFFY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// long range production sched
DataItem FL0DMLRP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// move to factory
DataItem FL0DMTFY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date
DataItem FL0DWBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FL0DWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem FL0DWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed switch
DataItem FL0DWCKS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor switch
DataItem FL0DWCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data changed switch
DataItem FL0DWDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash field
DataItem FL0DWDSH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date
DataItem FL0DWFDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem FL0DWGRP char(84)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display line count
DataItem FL0DWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lrps data switch
DataItem FL0DWLRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map format switch
DataItem FL0DWMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory model number-alpha
DataItem FL0DWMDN char(3)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// request data switch
DataItem FL0DWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp quantity arith field
DataItem FL0DWSQB decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ts queue update switch
DataItem FL0DWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to date
DataItem FL0DWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// trade restriction override fl
DataItem FL0DWTR-OVERIDE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trade restriction switch
DataItem FL0DWTRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update or add switch
DataItem FL0DWUDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unit cost field
DataItem FL0DWUNC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem FL0DWWK1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field
DataItem FL0DWWK2 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

