package fl0i;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom3.XPTA0P;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XFCCD;
import fb.common.FB9REC;
import fb.common.FBAREC;
import fb.common.FBEREC;
import fb.common.FBHREC;
import fb.common.FBMREC;
import ff.common.*;
import fl.common.FLWREC;
import pc.common.PC2CUXID;
import pc.common.PC2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARREC;
//*** PROGRAM=FL0I ****
// This application is associated with the Factory Load System.
// 
// It provides a screen for users to select one or more reports
// for a specific model number. The jobs to produce the reports
// will be submitted via this application.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/21/89  CNEWMA  New application.
//          07/16/90  jwood   removed ut2rec from t&r list
//          08/03/90  mgatre  add fcst qty/buy comments rpt
//          08/08/90  mgatre  add assgnmt xcpt rpt to MAPPER
//                            (fl0i507)
// fb-58    08/28/90  jalle1  add code to jcl tables to exec
//                            fb122d - Nil Not Bought Repts
//          10/18/90  jalle1  add code to jcl tables to exec
//                            fl332d - prog/sty grp rpt by mdl
//          01/02/91  jalle1  add code to jcl tables to exec
//                            fl336d - sty dev w/ 0 qtys rept.
// fl220    01/25/91  jalle1  remove mnth end cleanup from map
// fl218                      add mapper download to map to
//                            allow users to control the mapper
//                            bridge.
//          02/06/91  pmainw  put in parm record for fl1002.
// fl238    04/01/91  jalle1  remove report selections from map
//                            change job submission from fl1001
//                            into several procs.
//          08/05/91  jalle1  comment output cards for bundl
//                            reports in prod jcl table only
//                            (fb31 and fb32).
// fl301    12/02/91  jalle1  display message when merge run
//                            is complete.
// fl303    03/06/92  jmclau  modify to handle multiple sales
//                            orders. changed all references
//                            of fl328d with fl323d including
//                            procs.
// f105     10/08/92  jalle1  add special instruction rpts to
//                            'the merge'.
// fL357    04/20/93  jmclau  darken unused reports.
// FB308    04/30/93  LDELUH  Add edit to look for missing cust
//                            omer xref's before merge can be
//                            run.
// FB308B   05/25/93  JMCLAU  Add fb1251 'update missing in-
//                            ventory codes' job to the map.
//          06/29/93  LDELUH  Chg testrms to testenc.
// FB9994   08/10/93  LDELUH  Chg loadlibs for cob2.
// fl-372   01/20/94  LDELUH  Remove "model with no f/s report"
//                            from screen execution & put in
//                            as part of merge jobstream.
// CCOX     08/15/94  JJUDKI  Route FL38 to laser. Cheryl Hunt
//                            no longer wants a remote copy.
// pg-82    12/15/94  pmainw  Handle twenty product lines
//                            on vfsctl01.
// ecf      01/26/95  JALLE1  Change overrides on FB1601.
// FB-180   11/01/96  KSUMME  Accepting futures into the
//                            current buy.
// FB-573   02/19/97  KSUMME  Accepting futures into the
//                            current buy (for Europe).
// FL2014   07/22/98  AMAND1  Restrict User access to submit
//                            the merge job.
// FL9999   08/13/98  WROBIN  Put back ability to skip auto
//                            variance report that was lost
//                            when a old verion of FL0I was
//                            built for project fl2014.
// FL9999   09/22/98  WROBIN  Temp reset
// FL9999   05/16/00  SKATHI  To comment out the Parm step for
//                            FB1601 in FL1001 Job
// FB8869   11/07/00  RTRAN   CHANGE REMOTE PRINTER RMT172 TO
//                            RMT372 FOR REPORT FB29.
// FB8869   11/13/00  RTRAN   CORRECTED FL0IT02 PROC TO REMOVE
//                            THE OPTION 'O'.
//          12/07/00  GREDDY  CREATED OPTION TO SUBMIT PRE-
//                            MERGE JOB AFTER FLIPPING THE
//                            CALC-FINISH, DRS-FINISH AND
//                            FCTY-LOAD RUN FLAGS TO 'Y'.
//          12/12/00  GREDDY  PROVIDE PRE-MERGE JOB SUBMIT
//                            ACCESS TO CHUNT AND TCASPE.
// *********************
Program FL0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FBAREC FBAREC; // record
  FBEREC FBEREC; // record
  FBHREC FBHREC; // record
  FBMREC FBMREC; // record
  FL0IW00 FL0IW00; // record
  FL0IW01 FL0IW01; // record
  FL0IW02 FL0IW02; // record
  FL0IW03 FL0IW03; // record
  FL0IW04 FL0IW04; // record
  FL0IW05 FL0IW05; // record
  FLWREC FLWREC; // record
  PC2REC PC2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0IT01; // table
  use FL0IT02; // table
  use FL0IT03; // table
  use FL0IT04; // table
  use FL0IT05 {deleteAfterUse = yes}; // table
  use FL0IT06 {deleteAfterUse = yes}; // table
  use FL0IM.FL0IM010, // form
		FL0IM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FL0IM010 initial; /* M001 input/output*/
    set FL0IW00 empty; /* Working storage*/
    set FL0IW01 empty; /* display storage*/
    set FL0IW02 empty; /* display storage*/
    set FL0IW03 empty; /* display storage*/
    set FL0IW04 empty; /* display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* XPTA0P work record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    if (FLWREC.FBAMDNBR != 0) /* model number present*/
      FL0IM010.FBAMDNBR = FLWREC.FBAMDNBR; /* move model number*/
    else
      FL0IM010.FBAMDNBR = 0;
    end

    FL0IM010.FL0IM-MIN-QTY-DFLT = 0; /* set default min-qty*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0I001; /* Converse the main process*/


    FL0I001: FL0I001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0I001; /* Converse the main process*/


  end // end main
end // end FL0I

// Inquire/maintain a table row
Function FL0I001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FL0I100(); /* Format and display the map*/

  FL0I200(); /* Check attention identifier*/

  FL0I300(); /* Reset fields to normal intensity*/

  FL0I400(); /* Verify the entered data*/

  FL0I500(); /* Process valid input request*/


end // end FL0I001

// Format and converse the map
Function FL0I100()
   /* ------------------------------------------------------------*/
   /* Get the date for the last European bridge*/
   /* ------------------------------------------------------------*/

  set FBEREC empty;
  FBEREC.XXXPGMNB = "FB405D"; /* Program nbr*/

  FL0IS-01-IO3440-S(); /* Select DFBUY.VFBPGM01*/

  FL0IM010.XXXLSTDT = FBEREC.XXXLSTDT; /* Last run date*/
  FL0IW00.FL0IW-TIME = FBEREC.XXXLSTTM;
  FL0IW00.FL0IW-HH-DISPLAY = FL0IW00.FL0IW-HH;
  FL0IW00.FL0IW-SEPERATOR = ":";
  FL0IW00.FL0IW-MN-DISPLAY = FL0IW00.FL0IW-MN;
  FL0IM010.FL0IM-TIME = FL0IW00.FL0IW-TIME-DISPLAY;


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FL0IM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0IM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0IM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set FL0IM010 alarm; /* Indicate sound alarm*/
  end





  if (COMMAREA.CAFROMAP == "FL0Y" /* Special features already entered*/
   && FLWREC.FLWCUSP != " ")     
    FL0IW02.FL0IWGRP = FLWREC.FLWCUSP; /* report selections*/
    FL0IM010.FBAMDNBR = FLWREC.FBAMDNBR; /* Model number*/
    FL0IW00.FL0IWIX1 = 1; /* initialize index*/
    while (FL0IW00.FL0IWIX1 <= 15)
      FL0IM010.FL0IMSEL[FL0IWIX1] = FL0IW02.FL0IWSEL[FL0IWIX1];
      FL0IW00.FL0IWIX1 = FL0IW00.FL0IWIX1 + 1; /* increment index*/
    end
  end



   /* ------------------------------------------------------------*/
   /* set all the fl0imsel fields to reports that arent being*/
   /* used anymore to dark autoskip.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAADDFL == "Y")
   /* Move constant value*/
    FL0IM010.FL0IMRG = "CREATE RTA AND MERGED QTB TABLES   ";
  else
    set FL0IM010.FL0IMSEL[12] skip, invisible;
    set FL0IM010.FL0IMRG skip, invisible;
  end
  set FL0IM010.FL0IMSEL[1] skip, invisible;
  set FL0IM010.FL0IMSEL[3] skip, invisible;
  set FL0IM010.FL0IMSEL[4] skip, invisible;
  set FL0IM010.FL0IMSEL[5] skip, invisible;
  set FL0IM010.FL0IMSEL[6] skip, invisible;
  set FL0IM010.FL0IMSEL[7] skip, invisible;
  set FL0IM010.FL0IMSEL[8] skip, invisible;
  set FL0IM010.FL0IMSEL[11] skip, invisible;
  set FL0IM010.FL0IMSEL[13] skip, invisible;



  converse FL0IM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FL0IM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FL0IM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0IM010.CAITEM; /* Application data*/


end // end FL0I100

// Check attention identifier
Function FL0I200()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = "FL0I"; /* selection criteria*/
    XSFLS01();
    FL0IM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFLS01();

    else

      converseLib.validationFailed(36); /* 'exit to application unsuccessful'*/
      FL0IM010.XXXMODID = "200"; /* module identification*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    FL0IM010.XXXMODID = "200"; /* Module identification*/
    set FL0IM010.CATOAP cursor, bold; /* Highlight*/
    converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF4 is pressed, go to Main Menu*/
   /* If PF5 is pressed, go to Production Menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* pf4 was pressed*/
   || converseVar.eventKey is pf5) /* pf5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0IM010"; /* APPLICATION FIND CODE*/
    end

    XSFLS01();
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If PF3 is pressed, go to Factory Load Menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* pf3 was pressed*/

    COMMAREA.CATOAP = "FL0A";
    XSFLS01();
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If PF12 is pressed, go to Priority Selection*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* pf12 was pressed*/

    COMMAREA.CATOAP = "FL0B"; /* Priority Selection*/
    XSFLS01();
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If PF13 is pressed, go to Model Selection*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* pf13 was pressed*/

    COMMAREA.CATOAP = "FL0C"; /* Model Selection*/
    XSFLS01();
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If PF14 is pressed, go to Moves*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* pf14 was pressed*/

    COMMAREA.CATOAP = "FL0D"; /* Moves*/
    XSFLS01();
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If PF15 is pressed, go to Factory Splits*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* pf15 was pressed*/

    COMMAREA.CATOAP = "FL0E"; /* Factory Splits*/
    XSFLS01();
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If PF16 is pressed, go to Order Adjustment Status Maint*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* pf16 was pressed*/

    COMMAREA.CATOAP = "FL0K"; /* Order Adj Status Maint*/
    XSFLS01();
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If PF20 is pressed, go to Inquiry/Std Maint*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* pf20 was pressed*/

    COMMAREA.CATOAP = "FL0H"; /* Inquiry/Std Maint*/
    XSFLS01();
    exit stack;

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FL0IM010.XXXMODID = "200"; /* Process name*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is enter) /* enter was pressed*/
    return;
  end

  converseLib.validationFailed(3); /* Indicate PF key not valid*/
  set FL0IM010.CATOAP cursor, modified, bold; /* Highlight*/
  FL0IM010.XXXMODID = "200"; /* Process name*/


end // end FL0I200

// Reset highlighted fields
Function FL0I300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set FL0IM010.FBAMDNBR initialAttributes; /* model number*/
  set FL0IM010.FL0IM-MIN-QTY-DFLT initialAttributes; /* min defult qty*/


  FL0IW00.FL0IWIX1 = 1; /* set index*/

  while (FL0IW00.FL0IWIX1 <= 16) /* for all selection fields*/
    set FL0IM010.FL0IMSEL[FL0IWIX1] initialAttributes;
    FL0IW00.FL0IWIX1 = FL0IW00.FL0IWIX1 + 1; /* increment*/
  end

   /* ------------------------------------------------------------*/
   /* set all the fl0imsel fields to reports that arent being*/
   /* used anymore to dark autoskip.*/
   /* ------------------------------------------------------------*/

  set FL0IM010.FL0IMSEL[1] skip, invisible;
  set FL0IM010.FL0IMSEL[3] skip, invisible;
  set FL0IM010.FL0IMSEL[4] skip, invisible;
  set FL0IM010.FL0IMSEL[5] skip, invisible;
  set FL0IM010.FL0IMSEL[6] skip, invisible;
  set FL0IM010.FL0IMSEL[7] skip, invisible;
  set FL0IM010.FL0IMSEL[8] skip, invisible;
  set FL0IM010.FL0IMSEL[11] skip, invisible;
  set FL0IM010.FL0IMSEL[13] skip, invisible;

  set FL0IM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0IM010.CAITEM initialAttributes; /* Commarea application data*/


end // end FL0I300

// Verify the entered data
Function FL0I400()
   /* ------------------------------------------------------------*/
   /* Verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verify all report selection codes equal a ' ' or an 'S'.*/
   /* ------------------------------------------------------------*/

  FL0IW00.FL0IWRSL = "N"; /* reset switch*/

   /* GREDDY - 12/07/00 Premerge Job changes - begin*/
   /* MOVE 16 TO FL0IW00.FL0IWIX1;     /* initialize index*/

  FL0IW00.FL0IWIX1 = 17; /* initialize index*/

   /* GREDDY - 12/07/00 Premerge Job changes - end*/

  while (FL0IW00.FL0IWIX1 > 0) /* number of reports available*/

    if (FL0IM010.FL0IMSEL[FL0IWIX1] == " ") /* selection equal space*/
      if (FL0IW00.FL0IWIX1 == 10) /* fcst comments*/
        if (FL0IM010.FL0IMFDT > 0
         || FL0IM010.FL0IMTDT > 0)
          converseLib.validationFailed(365); /* can't enter dates w/o selection*/
          set FL0IM010.FL0IMSEL[FL0IWIX1] cursor, bold; /* set cursor*/
          FL0IM010.XXXMODID = "400"; /* module identification*/
        end
      end
    else
      if (FL0IM010.FL0IMSEL[FL0IWIX1] == "S") /* selection equal 'S'*/
        if (FL0IW00.FL0IWIX1 == 15 /* if not mapper download*/
         || FL0IW00.FL0IWIX1 == 16) /* if not update missing iseg codes*/
             /* NEXT SENTENCE*/
        else
          FL0IW00.FL0IWRSL = "Y"; /* report selected*/
        end

        if (FL0IW00.FL0IWIX1 == 12) /* Create rta and merge tbls*/
          FL0I420(); /* Edit for merge request*/
        end
        if (FL0IW00.FL0IWIX1 == 10) /* Forecast comments*/
          FL0I421(); /* Edit date range*/
        end
   /* GREDDY - 12/07/00 Premerge Job changes - begin*/
        if (FL0IW00.FL0IWIX1 == 17) /* Forecast comments*/
          FL0IW01.FL0IW-USERID = COMMAREA.CAUSERID; /* user id*/
          if (FL0IW01.FL0IW-USERID == "GREDDY"
           || FL0IW01.FL0IW-USERID == "SKATHI"
           || FL0IW01.FL0IW-USERID == "DEMO"
           || FL0IW01.FL0IW-USERID == "RTRAN"
           || FL0IW01.FL0IW-USERID == "CHUNT"
           || FL0IW01.FL0IW-USERID == "TCASPE")
            FL0I425(); /* Edit for Pre-merge request*/
          else
            converseLib.validationFailed(559); /* cannot submit pre-merge*/
            FL0IM010.XXXMODID = "425"; /* module identification*/
            set FL0IM010.FL0IMSEL[FL0IWIX1] cursor, bold; /* set cursor*/
          end
        end
   /* GREDDY - 12/07/00 Premerge Job changes - end*/

      else
        FL0IW00.FL0IWRSL = "Y"; /* report selected*/
        converseLib.validationFailed(41); /* 'S' is only valid code*/
        FL0IM010.XXXMODID = "400"; /* module identification*/
        set FL0IM010.FL0IMSEL[FL0IWIX1] cursor, bold; /* set cursor*/
      end
    end
    FL0IW00.FL0IWIX1 = FL0IW00.FL0IWIX1 - 1; /* decrement index*/
  end

   /* ------------------------------------------------------------*/
   /* if no reports selected, get cursor on model number*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWRSL == "N" /* no reports selected*/
   && converseVar.validationMsgNum != 365
   && FL0IM010.FL0IMSEL[15] != "S") /* and not mapper download*/
    set FL0IM010.FBAMDNBR cursor; /* set cursor*/
  end

   /* ------------------------------------------------------------*/
   /* if a model number was not entered, set an error message.*/
   /* ------------------------------------------------------------*/

  if (FL0IM010.FBAMDNBR == 0) /* model number not present*/
    if (FL0IM010.FL0IMSEL[9] == "S"  /* Fcst vs model varienace rpt*/
     || FL0IM010.FL0IMSEL[2] == "S"  /* Cost impact rpt*/
     || FL0IM010.FL0IMSEL[10] == "S" /* Fcst comments rpt*/
     || FL0IM010.FL0IMSEL[12] == "S" /* Create rta and merged qtb tables*/
     || FL0IM010.FL0IMSEL[14] == "S" /* Final check rpt*/
     || FL0IM010.FL0IMSEL[15] == "S") /* Mapper download*/
      converseLib.validationFailed(61); /* 'model number must entered'*/
      FL0IM010.XXXMODID = "400"; /* module identification*/
      set FL0IM010.FBAMDNBR cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if a model number was entered, Verify it's accuracy.*/
   /* ------------------------------------------------------------*/

  if (FL0IM010.FBAMDNBR != 0) /* model number entered*/
    FL0I410(); /* select factory model table row*/
  end

   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FL0I400

// Obtain Factory Model data
Function FL0I410()
   /* ------------------------------------------------------------*/
   /* Clear row storage area*/
   /* ------------------------------------------------------------*/

  set FBAREC empty; /* clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format the factory model key*/
   /* ------------------------------------------------------------*/

  FBAREC.FBDMDTYP = "FL1"; /* Model type*/
  FBAREC.FBAMDNBR = FL0IM010.FBAMDNBR; /* Model number*/

   /* ------------------------------------------------------------*/
   /* Fetch row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else

      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

        converseLib.validationFailed(79); /* model number not found*/
        FL0IM010.XXXMODID = "410";
        set FL0IM010.FBAMDNBR cursor, bold; /* set cursor*/
        exit stack; /* Return to display map*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FL0IM010.XXXMODID = "410"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(19); /* 'resources unavailable'*/
    FL0IM010.XXXMODID = "410"; /* module identification*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0IM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0I410

// Edit for merge request
Function FL0I420()
  XX0XS01(); /* Get system date and time*/

   /* ------------------------------------------------------------*/
   /* Select Row - Factory Model Control Table*/
   /* ------------------------------------------------------------*/

  set FB9REC empty; /* clear record*/

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, check cutoff date& time*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/


    /* if It's before the model cutoff date, then error*/
    if (XX0XW01.XX0XWDAT < FB9REC.FB9COFDT)
      converseLib.validationFailed(352); /* cannot run until after mdl cutoff*/
      FL0IM010.XXXMODID = "420"; /* module identification*/
      set FL0IM010.FL0IMSEL[FL0IWIX1] cursor, bold; /* set cursor*/
    end
    if (XX0XW01.XX0XWDAT == FB9REC.FB9COFDT /* It's the mdl cutoff dt but*/
     && XX0XW01.XX0XWTIM < FB9REC.FB9COFTM) /* it's befor the cutoff time*/
      converseLib.validationFailed(352); /* cannot run until after mdl cutoff*/
      FL0IM010.XXXMODID = "420"; /* module identification*/
      set FL0IM010.FL0IMSEL[FL0IWIX1] cursor, bold; /* set cursor*/
    end


  else

    /* ------------------------------------------------------------*/
     /* If data not available, return an error message to the user.*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    FLWREC.XXXMODID = "420"; /* Module identification*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT FACTORY CONTROL TABLE ROW ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBCTL01"; /* Table view name*/
    TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


  FL0I422(); /* delcar cursor vfsctl01*/
  while (SQLCA.VAGen_SQLCODE == 0) /* good return code*/
    FL0I424(); /* fetch cursor, check sched-fl*/
  end
  if (SQLCA.VAGen_SQLCODE == 100) /* good end of select set*/
    FL0I426(); /* close cursor vfsctl01*/
  end


   /* Edit for missing customer xref*/
  FL0I428(); /* Check null xref/iseg*/


end // end FL0I420

// Edit Comment rpt date range
Function FL0I421()


   /* ---------------- edit date range ----------------------*/

   /* edits: 1. are they there?*/
          /* 2. are they valid dates?*/
          /* 3. is to date gt or eq from date?*/

  set FL0IM010.FL0IMFDT initialAttributes; /* unhighlight*/
  set FL0IM010.FL0IMTDT initialAttributes; /* unhighlight*/
  FL0IW00.FL0IWFDT = 0; /* clear working storage from date*/
  FL0IW00.FL0IWTDT = 0; /* clear working storage to date*/

  if (FL0IM010.FL0IMFDT == 0)
    converseLib.validationFailed(366); /* from date required*/
    FL0IM010.XXXMODID = "421";
    set FL0IM010.FL0IMFDT cursor, bold;
  else
    if (FL0IM010.FL0IMTDT == 0)
      converseLib.validationFailed(367); /* to date required*/
      FL0IM010.XXXMODID = "421";
      set FL0IM010.FL0IMTDT cursor, bold;
    else
          /* convert mmddyy from map to ccyymmdd*/

      set TA2REC empty; /* clear before use*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* convert mmddyy*/
      TA2REC.TA2GRTYP = "A"; /* to ccyymmdd*/
      TA2REC.TA2GRGA = FL0IM010.FL0IMTDT;

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/

      if (TA2REC.TA2RTNCD != 0)
        FL0IM010.XXXMODID = "421";
        converseLib.validationFailed(366); /* from date is not a valid date*/
        set FL0IM010.FL0IMTDT cursor, bold;
      else
        FL0IW00.FL0IWTDT = TA2REC.TA2GRGGN; /* hold ccyymmdd*/
      end

      set TA2REC empty; /* clear before use*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* convert mmddyy*/
      TA2REC.TA2GRTYP = "A"; /* to ccyymmdd*/
      TA2REC.TA2GRGA = FL0IM010.FL0IMFDT;

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/

      if (TA2REC.TA2RTNCD != 0)
        FL0IM010.XXXMODID = "421";
        converseLib.validationFailed(367); /* to date is not a valid date*/
        set FL0IM010.FL0IMFDT cursor, bold;
      else
        FL0IW00.FL0IWFDT = TA2REC.TA2GRGGN; /* hold ccyymmdd*/
      end
      if (converseVar.validationMsgNum == 0)
        if (FL0IW00.FL0IWFDT > FL0IW00.FL0IWTDT)
          FL0IM010.XXXMODID = "421";
          converseLib.validationFailed(368); /* from date gt to date*/
          set FL0IM010.FL0IMTDT cursor, bold;
        end
      end
    end
  end




end // end FL0I421

// Declar cursor vfsctl01
Function FL0I422()
  set FBMREC empty;

  try
    call "IO4670" ("S1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0I422"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0IM010.XXXMODID = "422";



end // end FL0I422

// Fetch vfsctl01, check sched-fl
Function FL0I424()
  set FBMREC empty;

  try
    call "IO4670" ("N1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/


      /* Check the cal finished flag*/
      if (FBMREC.FBMCFFL != "Y"
       && FBMREC.PG1SC4CD != "99") /* not scheduler '99'*/
        converseLib.validationFailed(353); /* cannot run, calc fnsh not set*/
        FL0IM010.XXXMODID = "424"; /* module identification*/
        set FL0IM010.FL0IMSEL[FL0IWIX1] cursor, bold; /* set cursor*/
      end

      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0I424"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0IM010.XXXMODID = "424";



end // end FL0I424

// Edit for Pre-merge request
Function FL0I425()
   /* Set the flags after verification*/
  FL0I422(); /* declare cursor vfsctl01*/
  while (SQLCA.VAGen_SQLCODE == 0) /* good return code*/
    FL0I427(); /* fetch cursor, Check/Set sched-fl*/
  end
  if (SQLCA.VAGen_SQLCODE == 100) /* good end of select set*/
    FL0I426(); /* close cursor vfsctl01*/
  end


   /* Edit for missing customer xref*/
  FL0I428(); /* Check null xref/iseg*/


end // end FL0I425

// Close cursor vfsctl01
Function FL0I426()

  try
    call "IO4670" ("C1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* "             "*/

      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0I426"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE  SET              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0IM010.XXXMODID = "426";



end // end FL0I426

// Fetch vfsctl01, check sched-fl
Function FL0I427()
   /* This Proc verifies if the footwear DRS and Calc is finished*/
   /* and accordingly sets the DRS finish, Calc finish and Fcty-load*/
   /* flags for all schedulers.*/

  set FBMREC empty;

  try
    call "IO4670" ("N1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      FL0IW00.FSCTL-UPD-FL = "N";

      if (FBMREC.FBMFINFL != "Y"
       || FBMREC.FBMFLRFL != "Y"
       || FBMREC.FBMCFFL != "Y") /* DRS/Calc/FL flags not yet 'Y'*/

        FL0IW00.FSCTL-UPD-FL = "Y"; /* Update of VFSCTL01 reqd*/

        /* Verify and set DRS, Calc and fcty-load finish flags.*/
        FL0IW00.FL0IWIX2 = 1; /* Initialize index*/
        FL0IW00.FDRS-FNSH-FL = "Y"; /* Ftwr line DRS  done*/
        FL0IW00.FCAL-FNSH-FL = "Y"; /* Ftwr line Calc done*/
        FL0IW00.SCHD-COMP-FL = "Y"; /* Scheduler complete flag*/
        while (FL0IW00.FL0IWIX2 <= 20
         && FL0IW00.SCHD-COMP-FL == "Y")
          if (FBMREC.FBMPCD[FL0IWIX2] != " "
           && FBMREC.FBMPCD[FL0IWIX2] != "11") /* Prod line code is Eqmt*/
            if (FBMREC.FBMDSLNF[FL0IWIX2] != "Y") /* Line is finished*/
              FL0IW00.FDRS-FNSH-FL = "N"; /* Ftwr line DRS not done*/
              FL0IW00.SCHD-COMP-FL = "N"; /* Exit Loop*/
            end

            if (FBMREC.FBMPAFL[FL0IWIX2] != "Y") /* Line is finished*/
              FL0IW00.FCAL-FNSH-FL = "N"; /* Ftwr line Calc not done*/
              FL0IW00.SCHD-COMP-FL = "N"; /* Exit Loop*/
            end
          end
          FL0IW00.FL0IWIX2 = FL0IW00.FL0IWIX2 + 1;
        end
      end

      if (FL0IW00.FSCTL-UPD-FL == "Y")
        if (FL0IW00.FDRS-FNSH-FL == "Y"
         && FL0IW00.FCAL-FNSH-FL == "Y")
          FBMREC.FBMFINFL = "Y"; /* DRS done*/
          FBMREC.FBMCFFL = "Y"; /* Calc done*/
          FBMREC.FBMFLRFL = "Y"; /* 'Y' to Fcty-load finish flag*/
          FL0IS03();
        else
          converseLib.validationFailed(558); /* Can't run until DRS/CALC done*/
          FL0IM010.XXXMODID = "427"; /* module identification*/
          set FL0IM010.FL0IMSEL[FL0IWIX1] cursor, bold; /* set cursor*/
        end
      end

      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0I427"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0IM010.XXXMODID = "427";



end // end FL0I427

// Check null xref/iseg
Function FL0I428()

  FL0IW00.FL0IW-END-DNORD-CSR = "N";
  FL0IW00.FL0IW-MISSING-CUSTOMER = "N";

  FL0I4282(); /* Declare dnord csr*/

  while (FL0IW00.FL0IW-END-DNORD-CSR == "N" /* While nulls exist*/
   && FL0IW00.FL0IW-MISSING-CUSTOMER == "N") /* & cust not missing*/
    FL0I4283(); /* Fetch dnord csr*/
    if (FL0IW00.FL0IW-END-DNORD-CSR == "N")
      FL0I4285(); /* Check customer*/
    end
  end

  FL0I4289(); /* Close dnord csr*/

end // end FL0I428

// Declar cursor vdnord01
Function FL0I4282()
  set FBHREC empty;

  FBHREC.XDVCD = "*";
  FBHREC.PC2CUXID = "      ";
  FBHREC.FB8BUYDT = FB9REC.FB8BUYDT;
  FBHREC.FB7BUYST = "Y";

  try
    call "IO4640" ("S6", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0I4282"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0IM010.XXXMODID = "428";



end // end FL0I4282

// Fetch vdnord01 row
Function FL0I4283()
  set FBHREC empty;

  try
    call "IO4640" ("N6", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      FL0IW00.FL0IW-END-DNORD-CSR = "Y";
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0I4283"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0IM010.XXXMODID = "428";



end // end FL0I4283

// Check customer existence
Function FL0I4285()

   /* ------------------------------------------------------------*/
   /* Select Row - Customer Table*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* clear record*/

  PC2REC.XGPCD = "02";
  PC2REC.KUCCOID = FBHREC.KUCCOID;
  PC2REC.KUMSTRID = FBHREC.KUMSTRID;
  PC2REC.XNXCD = FBHREC.XNXCD;

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      FL0IW00.FL0IW-MISSING-CUSTOMER = "Y";
      converseLib.validationFailed(487); /* cannot run until customers exist*/
      FL0IM010.XXXMODID = "428"; /* module identification*/
      set FL0IM010.FL0IMSEL[FL0IWIX1] cursor, bold; /* set cursor*/
    end

  else

    /* ------------------------------------------------------------*/
     /* If data not available, return an error message to the user.*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    FLWREC.XXXMODID = "428"; /* Module identification*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT CUSTOMER TABLE ROW ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC2REC.PC2GROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end



end // end FL0I4285

// Close cursor vdnord01
Function FL0I4289()

  try
    call "IO4640" ("C6", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* "             "*/

      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0I4289"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE  SET              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0IM010.XXXMODID = "428";



end // end FL0I4289

// Process valid input request
Function FL0I500()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0I507(); /* format production jcl*/
    else
      FL0I505(); /* format development jcl*/
    end

    if (FL0IM010.FL0IMSEL[15] == "S") /* mapper download requested*/
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        FL0I557(); /* format production jcl*/
      else
        FL0I555(); /* format development jcl*/
      end
    end

    if (FL0IM010.FL0IMSEL[16] == "S") /* update missing iseg codes*/
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        FL0I562(); /* format production jcl*/
      else
        FL0I560(); /* format development jcl*/
      end
    end
  else

    FL0IM010.XXXMODID = "500"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end

end // end FL0I500

// Process test jcl
Function FL0I505()
   /* ------------------------------------------------------------*/
   /* Process valid input request*/
   /* ------------------------------------------------------------*/


  if (FL0IM010.FL0IMSEL[1] == "S") /* Report by special features*/
    if (COMMAREA.CAFROMAP != "FL0Y" /* Special features already entered*/
     && FLWREC.FLWCUSP == " ")     
      FL0IW00.FL0IWIX1 = 1; /* initialize index*/
      while (FL0IW00.FL0IWIX1 <= 16)
        FL0IW02.FL0IWSEL[FL0IWIX1] = FL0IM010.FL0IMSEL[FL0IWIX1];
        FL0IW00.FL0IWIX1 = FL0IW00.FL0IWIX1 + 1; /* increment index*/
      end
      FLWREC.FLWCUSP = FL0IW02.FL0IWGRP; /* report selections*/
      FLWREC.FBAMDNBR = FL0IM010.FBAMDNBR; /* Model number*/
      COMMAREA.CATOAP = "FL0Y";
                                   /* Goto enter spec-feat/cust xref*/
      XSFLS01(); /* Exit to another application*/
      exit stack; /* Exit to display map*/

    end
  end





   /* ------------------------------------------------------------*/
   /* If no reports were selected, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWRSL == "N") /* no reports selected*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FL0IW01.FL0IWMDN = FL0IM010.FBAMDNBR; /* model number*/
  FL0IW01.FL0IW-MIN-QTY-DFLT = FL0IM010.FL0IM-MIN-QTY-DFLT;
  FL0IW01.FL0IW-USERID = COMMAREA.CAUSERID; /* user id*/
  FL0IW01.FL0IWFDT = FL0IW00.FL0IWFDT; /* from date*/
  FL0IW01.FL0IWTDT = FL0IW00.FL0IWTDT; /* to date*/

   /* ------------------------------------------------------------*/
   /* create all other appropriate jcl*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Determine Overrides*/
   /* ------------------------------------------------------------*/

  FL0I510(); /* determine overrides*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0IW00.FL0IWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0IW00.FL0IWIX2 = 0; /* Initialize index*/
  FL0IW00.FL0IWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0IW00.FL0IWIXT > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/

    if (FL0IT01.TARTYPE[FL0IWIXT] == "P") /* Parameters statement*/

      FL0I520(); /* Format the parameters*/

    else

      if (FL0IT01.TARTYPE[FL0IWIXT] == "C") /* condition statment*/

        /* ------------------------------------------------------------*/
         /* Format condition statements*/
        /* ------------------------------------------------------------*/

        FL0IW01.FL0IWTYP = "C"; /* type*/
        FL0IW00.FL0IWIX3 = FL0IW00.FL0IWIX3 + 1; /* increment index*/
        FL0IW01.FL0IWJCC[FL0IWIX3] = FL0IT01.TARJCL[FL0IWIXT];
        FL0IW01.FL0IWCLG[FL0IWIX3] = FL0IW01.FL0IWCND[FL0IWIX3];
        TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCC[FL0IWIX3];
        TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FL0IT01.TARJCL[FL0IWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0IT01.TARTYPE[FL0IWIXT];

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0IT01.TARJCL[FL0IWIXT] == "/*EOF") /* End of table*/

      FL0IW00.FL0IWIXT = 0; /* Indicate end of table*/

    else

      FL0IW00.FL0IWIXT = FL0IW00.FL0IWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0IS01(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* Selections queued to print*/
    FL0IW00.FL0IWIX1 = 1; /* initialize index*/
    while (FL0IW00.FL0IWIX1 <= 16)
      if (FL0IW00.FL0IWIX1 == 15 /* if not mapper download*/
       || FL0IW00.FL0IWIX1 == 16) /* if not update missing iseg cds*/
        /* NEXT SENTENCE*/
      else
        FL0IM010.FL0IMSEL[FL0IWIX1] = " "; /* move space to selection*/
      end
      FL0IW00.FL0IWIX1 = FL0IW00.FL0IWIX1 + 1; /* increment index*/
    end

    FL0IM010.FL0IMFDT = " "; /* from date*/
    FL0IM010.FL0IMTDT = " "; /* to date*/

    FLWREC.FLWCUSP = " ";


  else

    converseLib.validationFailed(87); /* Error encountered with print request*/

    exit stack;

  end


end // end FL0I505

// Process prod jcl
Function FL0I507()
   /* ------------------------------------------------------------*/
   /* Process valid input request*/
   /* ------------------------------------------------------------*/


  if (FL0IM010.FL0IMSEL[1] == "S") /* Report by special features*/
    if (COMMAREA.CAFROMAP != "FL0Y" /* Special features already entered*/
     && FLWREC.FLWCUSP == " ")     
      FL0IW00.FL0IWIX1 = 1; /* initialize index*/
      while (FL0IW00.FL0IWIX1 <= 16)
        FL0IW02.FL0IWSEL[FL0IWIX1] = FL0IM010.FL0IMSEL[FL0IWIX1];
        FL0IW00.FL0IWIX1 = FL0IW00.FL0IWIX1 + 1; /* increment index*/
      end
      FLWREC.FLWCUSP = FL0IW02.FL0IWGRP; /* report selections*/
      FLWREC.FBAMDNBR = FL0IM010.FBAMDNBR; /* Model number*/
      COMMAREA.CATOAP = "FL0Y";
                                   /* Goto enter spec-feat/cust xref*/
      XSFLS01(); /* Exit to another application*/
      exit stack; /* Exit to display map*/

    end
  end





   /* ------------------------------------------------------------*/
   /* If no reports were selected, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWRSL == "N") /* no reports selected*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FL0IW01.FL0IWMDN = FL0IM010.FBAMDNBR; /* model number*/
  FL0IW01.FL0IW-MIN-QTY-DFLT = FL0IM010.FL0IM-MIN-QTY-DFLT;
  FL0IW01.FL0IW-USERID = COMMAREA.CAUSERID; /* user id*/
  FL0IW01.FL0IWFDT = FL0IW00.FL0IWFDT; /* from date*/
  FL0IW01.FL0IWTDT = FL0IW00.FL0IWTDT; /* to date*/

   /* ------------------------------------------------------------*/
   /* create all other appropriate jcl*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Determine Overrides*/
   /* ------------------------------------------------------------*/

  FL0I510(); /* determine overrides*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0IW00.FL0IWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0IW00.FL0IWIX2 = 0; /* Initialize index*/
  FL0IW00.FL0IWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0IW00.FL0IWIXT > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/

    if (FL0IT02.TARTYPE[FL0IWIXT] == "P") /* Parameters statement*/

      FL0I520(); /* Format the parameters*/

    else

      if (FL0IT02.TARTYPE[FL0IWIXT] == "C") /* condition statment*/

        /* ------------------------------------------------------------*/
         /* Format condition statements*/
        /* ------------------------------------------------------------*/

        FL0IW01.FL0IWTYP = "C"; /* type*/
        FL0IW00.FL0IWIX3 = FL0IW00.FL0IWIX3 + 1; /* increment index*/
        FL0IW01.FL0IWJCC[FL0IWIX3] = FL0IT02.TARJCL[FL0IWIXT];
        FL0IW01.FL0IWCLG[FL0IWIX3] = FL0IW01.FL0IWCND[FL0IWIX3];
        TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCC[FL0IWIX3];
        TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FL0IT02.TARJCL[FL0IWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0IT02.TARTYPE[FL0IWIXT];

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0IT02.TARJCL[FL0IWIXT] == "/*EOF") /* End of table*/

      FL0IW00.FL0IWIXT = 0; /* Indicate end of table*/

    else

      FL0IW00.FL0IWIXT = FL0IW00.FL0IWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0IS01(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* Selections queued to print*/
    FL0IW00.FL0IWIX1 = 1; /* initialize index*/
    while (FL0IW00.FL0IWIX1 <= 16)
      if (FL0IW00.FL0IWIX1 != 15 /* if not mapper download*/
       && FL0IW00.FL0IWIX1 != 16) /* if not update missing iseg cd*/
        FL0IM010.FL0IMSEL[FL0IWIX1] = " "; /* move space to selection*/
      end
      FL0IW00.FL0IWIX1 = FL0IW00.FL0IWIX1 + 1; /* increment index*/
    end

    FL0IM010.FL0IMFDT = " "; /* from date*/
    FL0IM010.FL0IMTDT = " "; /* to date*/

    FLWREC.FLWCUSP = " ";


  else

    converseLib.validationFailed(87); /* Error encountered with print request*/

    exit stack;

  end


end // end FL0I507

// Determine overrides
Function FL0I510()
   /* ------------------------------------------------------------*/
   /* Determine Overrides*/
   /* ------------------------------------------------------------*/

  FL0IW01.FL0IWCND[1] = "LE"; /* do not execute fl1001*/

  if (FL0IM010.FL0IMSEL[1] == "S") /* ctry,fcty,spcl ftre*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[2] = "GT"; /* execute fl1051*/
  else
    FL0IW01.FL0IWCND[2] = "LE"; /* don't execute fl1051*/
  end

  if (FL0IM010.FL0IMSEL[2] == "S") /* cost impact*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[3] = "GT"; /* execute fl1511*/
  else
    FL0IW01.FL0IWCND[3] = "LE"; /* don't execute fl1511*/
  end

  if (FL0IM010.FL0IMSEL[3] == "S") /* prelim po summary*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[4] = "GT"; /* execute fl1601*/
  else
    FL0IW01.FL0IWCND[4] = "LE"; /* don't execute fl1601*/
  end

  if (FL0IM010.FL0IMSEL[4] == "S") /* prelim po detail*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[5] = "GT"; /* execute fl1701*/
  else
    FL0IW01.FL0IWCND[5] = "LE"; /* don't execute fl1701*/
  end

  if (FL0IM010.FL0IMSEL[5] == "S") /* cons type*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[6] = "GT"; /* execute fl1101*/
  else
    FL0IW01.FL0IWCND[6] = "LE"; /* don't execute fl1101*/
  end

  if (FL0IM010.FL0IMSEL[6] == "S") /* assign exception rpt*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[7] = "GT"; /* execute fl1081*/
  else
    FL0IW01.FL0IWCND[7] = "LE"; /* don't execute fl1081*/
  end

  if (FL0IM010.FL0IMSEL[7] == "S") /* gender age*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[8] = "GT"; /* execute fl1121*/
  else
    FL0IW01.FL0IWCND[8] = "LE"; /* don't execute fl1121*/
  end

  if (FL0IM010.FL0IMSEL[8] == "S") /* model w/ no f/s*/
    FL0IW01.FL0IWCND[9] = "GT"; /* execute fl1951*/
  else
    FL0IW01.FL0IWCND[9] = "LE"; /* don't execute fl1951*/
  end

  if (FL0IM010.FL0IMSEL[9] == "S") /* fcst vs model variance*/
    FL0IW01.FL0IWCND[10] = "GT"; /* execute fl3231*/
  else
    FL0IW01.FL0IWCND[10] = "LE"; /* don't execute fl3231*/
  end

  if (FL0IM010.FL0IMSEL[10] == "S") /* fcst comments*/
    FL0IW01.FL0IWCND[11] = "GT"; /* execute fl3301*/
  else
    FL0IW01.FL0IWCND[11] = "LE"; /* don't execute fl3301*/
  end

  if (FL0IM010.FL0IMSEL[11] == "S") /* pgm sty grp rpt*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[12] = "GT"; /* execute fl3321*/
  else
    FL0IW01.FL0IWCND[12] = "LE"; /* don't execute fl3321*/
  end

  if (FL0IM010.FL0IMSEL[12] == "S") /* merge*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[13] = "GT"; /* execute fb1601*/
  else
    FL0IW01.FL0IWCND[13] = "LE"; /* don't execute fb1601*/
  end

  if (FL0IM010.FL0IMSEL[13] == "S") /* sty devl non-zero*/
    FL0IW01.FL0IWCND[1] = "GT"; /* execute fl1001*/
    FL0IW01.FL0IWCND[14] = "GT"; /* execute fl3361*/
  else
    FL0IW01.FL0IWCND[14] = "LE"; /* don't execute fl3361*/
  end

  if (FL0IM010.FL0IMSEL[14] == "S") /* final check*/
    FL0IW01.FL0IWCND[15] = "GT"; /* execute fb2201*/
  else
    FL0IW01.FL0IWCND[15] = "LE"; /* don't execute fb2201*/
  end

  if (FL0IM010.FL0IMSEL[17] == "S") /* final check*/
    FL0IW01.FL0IWCND[16] = "GT"; /* execute fb1602*/
  else
    FL0IW01.FL0IWCND[16] = "LE"; /* don't execute fb1602*/
  end




end // end FL0I510

// Build the input parameter
Function FL0I520()
   /* ------------------------------------------------------------*/
   /* Build the parms for each step that requires a parm.  The*/
   /* following process will format the parms for each proc step*/
   /* according to the format needed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Build the input parameter for program fl100d (proc fl1001).*/
   /* This contains a model number.  Also create a parm comment*/
   /* card.*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWIXT == 59)
    FL0IW01.FL0IWTYP = "P"; /* Type*/
    TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCP; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    FL0IW05.FL0IWASK = "//*"; /* Set parms comment card*/
    FL0IW05.FL0IWGP5 = FL0IW01.FL0IWJCP;
    TA6REC.TARJCL[TA6INDEX] = FL0IW05.FL0IWJC5; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end


   /* ------------------------------------------------------------*/
   /* Build the input parameter for program fl105d (proc fl1051).*/
   /* This contains a mfg cost flag and special feature codes.*/
   /* Also, create parm comment card.*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWIXT == 68)

    FL0IW00.FL0IWIX4 = 1; /* initialize index*/
    while (FL0IW00.FL0IWIX4 <= 21)
      FL0IW03.XFCCD[FL0IWIX4] = FL0IW02.XFCCD[FL0IWIX4];
      FL0IW00.FL0IWIX4 = FL0IW00.FL0IWIX4 + 1; /* increment index*/
    end
    FL0IW03.FL0IWMFG = FL0IW02.FL0IWMFG;

    FL0IW01.FL0IWTYP = "P"; /* Type*/
    TA6REC.TARJCL[TA6INDEX] = FL0IW03.FL0IWGP3; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    FL0IW05.FL0IWASK = "//*"; /* Set parms comment card*/
    FL0IW05.FL0IWGP5 = FL0IW03.FL0IWGP3;
    TA6REC.TARJCL[TA6INDEX] = FL0IW05.FL0IWJC5; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end



   /* ------------------------------------------------------------*/
   /* Build the input parameter for program fl328d (proc fb1601).*/
   /* This contains a model number.*/
   /* Also, create parm comment card.*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWIXT == 148)
    FL0IW01.FL0IWTYP = "P"; /* Type*/
    TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCP; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    FL0IW05.FL0IWASK = "//*"; /* Set parms comment card*/
    FL0IW05.FL0IWGP5 = FL0IW01.FL0IWJCP;
    TA6REC.TARJCL[TA6INDEX] = FL0IW05.FL0IWJC5; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end




   /* ------------------------------------------------------------*/
   /* Build the input parameter for program fl195d (proc fb1601).*/
   /* This contains a model number.*/
   /* Also, create parm comment card.*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWIXT == 151)
    FL0IW01.FL0IWTYP = "P"; /* Type*/
    TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCP; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    FL0IW05.FL0IWASK = "//*"; /* Set parms comment card*/
    FL0IW05.FL0IWGP5 = FL0IW01.FL0IWJCP;
    TA6REC.TARJCL[TA6INDEX] = FL0IW05.FL0IWJC5; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end




   /* -------------------------------------------------------------*/
   /* Build the input parameter for program FL3100 or program FL323D*/
   /* (proc FL3231).*/
   /* This contains a model number and min fcty qtb value.*/
   /* Also, create parm comment card.*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWIXT == 120
   || FL0IW00.FL0IWIXT == 122)
    FL0IW01.FL0IWTYP = "P"; /* Type*/
    TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCP; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    FL0IW05.FL0IWASK = "//*"; /* Set parms comment card*/
    FL0IW05.FL0IWGP5 = FL0IW01.FL0IWJCP;
    TA6REC.TARJCL[TA6INDEX] = FL0IW05.FL0IWJC5; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end



   /* ***** DELETE FOLLOWING WHEN REMOVE FL195D FROM SCREEN *******/
   /* ------------------------------------------------------------*/
   /* Build the input parameter for program fl195d (proc fl1951).*/
   /* This contains a model number.*/
   /* Also, create parm comment card.*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWIXT == 112)
    FL0IW01.FL0IWTYP = "P"; /* Type*/
    TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCP; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    FL0IW05.FL0IWASK = "//*"; /* Set parms comment card*/
    FL0IW05.FL0IWGP5 = FL0IW01.FL0IWJCP;
    TA6REC.TARJCL[TA6INDEX] = FL0IW05.FL0IWJC5; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end


   /* ***** END TO BE DELETED CODE ******/


   /* ------------------------------------------------------------*/
   /* Build the input parameter for program fl330d (proc fl3301).*/
   /* This contains a model number and date range.*/
   /* Also create parm comment card.*/
   /* ------------------------------------------------------------*/

  if (FL0IW00.FL0IWIXT == 130)
    FL0IW01.FL0IWTYP = "P"; /* Type*/
    TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCP; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    FL0IW05.FL0IWASK = "//*"; /* Set parms comment card*/
    FL0IW05.FL0IWGP5 = FL0IW01.FL0IWJCP;
    TA6REC.TARJCL[TA6INDEX] = FL0IW05.FL0IWJC5; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end



   /* ------------------------------------------------------------*/
   /* Build the input parameter for program fl332d (proc fl3321).*/
   /* This contains a model number.*/
   /* Also create parm comment card.*/
   /* ------------------------------------------------------------*/
  if (FL0IW00.FL0IWIXT == 139)
    FL0IW01.FL0IWTYP = "P"; /* Type*/
    TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCP; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FL0IW01.FL0IWTYP; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    FL0IW05.FL0IWASK = "//*"; /* Set parms comment card*/
    FL0IW05.FL0IWGP5 = FL0IW01.FL0IWJCP;
    TA6REC.TARJCL[TA6INDEX] = FL0IW05.FL0IWJC5; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end

end // end FL0I520

// Process test jcl
Function FL0I555()
   /* ------------------------------------------------------------*/
   /* Process valid input request - fl1002 (mapper download)*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0IW00.FL0IWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0IW00.FL0IWIX2 = 0; /* Initialize index*/
  FL0IW00.FL0IWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0IW00.FL0IWIXT > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    if (FL0IT03.TARTYPE[FL0IWIXT] == "P") /* Parameter card*/
      FL0IW01.FL0IWMDN = FL0IM010.FBAMDNBR;
      TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCP;
    else
      TA6REC.TARJCL[TA6INDEX] = FL0IT03.TARJCL[FL0IWIXT]; /* JCL*/
    end
    TA6REC.TARTYPE[TA6INDEX] = FL0IT03.TARTYPE[FL0IWIXT];

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0IT03.TARJCL[FL0IWIXT] == "/*EOF") /* End of table*/

      FL0IW00.FL0IWIXT = 0; /* Indicate end of table*/

    else

      FL0IW00.FL0IWIXT = FL0IW00.FL0IWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0IS02(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* job was submitted*/
    FL0IM010.FL0IMSEL[15] = " "; /* move space to selection*/
    FLWREC.FLWCUSP = " ";


  else

    converseLib.validationFailed(87); /* sorry, we got an error*/

    exit stack;

  end


end // end FL0I555

// Process production jcl
Function FL0I557()
   /* ------------------------------------------------------------*/
   /* Process valid input request - fl1002 (mapper download)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0IW00.FL0IWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  FL0IW00.FL0IWIX2 = 0; /* Initialize index*/
  FL0IW00.FL0IWIX3 = 0; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0IW00.FL0IWIXT > 0) /* Until end of table*/

    if (FL0IT04.TARTYPE[FL0IWIXT] == "P") /* Parameter card*/
      FL0IW01.FL0IWMDN = FL0IM010.FBAMDNBR;
      TA6REC.TARJCL[TA6INDEX] = FL0IW01.FL0IWJCP;
    else
      TA6REC.TARJCL[TA6INDEX] = FL0IT04.TARJCL[FL0IWIXT]; /* JCL*/
    end
    TA6REC.TARTYPE[TA6INDEX] = FL0IT04.TARTYPE[FL0IWIXT];

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0IT04.TARJCL[FL0IWIXT] == "/*EOF") /* End of table*/

      FL0IW00.FL0IWIXT = 0; /* Indicate end of table*/

    else

      FL0IW00.FL0IWIXT = FL0IW00.FL0IWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0IS02(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* job was submitted*/
    FL0IM010.FL0IMSEL[15] = " "; /* move space to selection*/
    FLWREC.FLWCUSP = " ";


  else

    converseLib.validationFailed(87); /* Error encountered with print request*/

    exit stack;

  end


end // end FL0I557

// Process FB1251 test JCL
Function FL0I560()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0IW00.FL0IWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0IW00.FL0IWIXT > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/

    if (FL0IT05.TARTYPE[FL0IWIXT] == "P") /* Parameters statement*/

      TA6REC.TARTYPE[TA6INDEX] = FL0IT05.TARTYPE[FL0IWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FL0IT05.TARJCL[FL0IWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0IT05.TARTYPE[FL0IWIXT];

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0IT05.TARJCL[FL0IWIXT] == "/*EOF") /* End of table*/

      FL0IW00.FL0IWIXT = 0; /* Indicate end of table*/

    else

      FL0IW00.FL0IWIXT = FL0IW00.FL0IWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* submit jcl only*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/
    FL0IM010.FL0IMSEL[16] = " "; /* Move space to updt missing iseg cd*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Ohterwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Return message*/
    FL0IM010.XXXMODID = "560"; /* module identification*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    FL0IM010.XXXMODID = "560"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FL0I560

// Process FB1251 prod JCL
Function FL0I562()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0IW00.FL0IWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0IW00.FL0IWIXT > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/

    if (FL0IT06.TARTYPE[FL0IWIXT] == "P") /* Parameters statement*/

      TA6REC.TARTYPE[TA6INDEX] = FL0IT06.TARTYPE[FL0IWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FL0IT06.TARJCL[FL0IWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0IT06.TARTYPE[FL0IWIXT];

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0IT06.TARJCL[FL0IWIXT] == "/*EOF") /* End of table*/

      FL0IW00.FL0IWIXT = 0; /* Indicate end of table*/

    else

      FL0IW00.FL0IWIXT = FL0IW00.FL0IWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* submit jcl only*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/
    FL0IM010.FL0IMSEL[16] = " "; /* Move space to updt missing iseg cd*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Return message*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    FL0IM010.XXXMODID = "562"; /* module identification*/

  end


  exit stack; /* Exit to display map*/

end // end FL0I562

// Select unique DFBUY.VFBPGM01
Function FL0IS-01-IO3440-S()

  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0IS01"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE DFBUY.VFBPGM01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0IM010.XXXMODID = "S01";



end // end FL0IS-01-IO3440-S

// Submit the JCL for execution
Function FL0IS01()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/

  if (FL0IM010.FL0IMSEL[12] == "S") /* merge selected*/
    TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  else
    TA6REC.TA6MSGSW = "N"; /* set reply swt to no*/
  end

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0IM010.XXXMODID = "S01"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FL0IM010.XXXMODID = "S01"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FL0IS01

// Submit the JCL for execution
Function FL0IS02()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply switch to no*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FL0IM010.XXXMODID = "S01"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FL0IM010.XXXMODID = "S01"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FL0IS02

// Update DFBUY.VFSCTL01 row
Function FL0IS03()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/


  XX0XS01();

  FBMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;



  try
    call "IO4670" ("U ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(20); /* Record updated since last displayed*/
      FL0IM010.XXXMODID = "FL0IS03"; /* module identification*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback if bad return code*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0IS03 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0IM010.XXXMODID = "FL0IS03"; /* module identification*/

end // end FL0IS03

//*** RECORD=FL0IW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0IW00 type basicRecord
  10 FL0IWDNR FL0IWDNR ; 
  10 FL0IWRNA FL0IWRNA ; 
  10 FL0IWRSL FL0IWRSL ; 
  10 FL0IWFDT FL0IWFDT ; 
  10 FL0IWTDT FL0IWTDT ; 
  10 FL0IWIX1 FL0IWIX1 ; 
  10 FL0IWIX2 FL0IWIX2 ; 
  10 FL0IWIX3 FL0IWIX3 ; 
  10 FL0IWIX4 FL0IWIX4 ; 
  10 FL0IWIXT FL0IWIXT ; 
  10 FL0IW-END-DNORD-CSR FL0IW-END-DNORD-CSR ; 
  10 FL0IW-MISSING-CUSTOMER FL0IW-MISSING-CUSTOMER ; 
  10 FL0IW-TIME-DISPLAY FL0IW-TIME-DISPLAY ; 
    15 FL0IW-HH-DISPLAY FL0IW-HH-DISPLAY ; 
    15 FL0IW-SEPERATOR FL0IW-SEPERATOR ; 
    15 FL0IW-MN-DISPLAY FL0IW-MN-DISPLAY ; 
  10 FL0IW-TIME FL0IW-TIME ; 
    15 FL0IW-HH FL0IW-HH ; 
    15 FL0IW-MN FL0IW-MN ; 
  10 FDRS-FNSH-FL FDRS-FNSH-FL ; 
  10 FCAL-FNSH-FL FCAL-FNSH-FL ; 
  10 SCHD-COMP-FL SCHD-COMP-FL ; 
  10 FSCTL-UPD-FL FSCTL-UPD-FL ; 
end // end FL0IW00

//*** RECORD=FL0IW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0IW01 type basicRecord
  10 FL0IWJCP FL0IWJCP ; 
    15 FL0IWMDN FL0IWMDN ; 
    15 FL0IW-MIN-QTY-DFLT FL0IW-MIN-QTY-DFLT ; 
    15 FL0IW-USERID FL0IW-USERID ; 
    15 FL0IWFDT FL0IWFDT ; 
    15 FL0IWTDT FL0IWTDT ; 
    15 * char(52) ; 
  10 FL0IWJCE FL0IWJCE ; 
    15 FL0IWEX1 FL0IWEX1 ; 
    15 FL0IWPNM FL0IWPNM ; 
    15 * char(58) ; 
  10 FL0IWJCC FL0IWJCC [16] ; 
    15 FL0IWCN1 FL0IWCN1 ; 
    15 FL0IWCLG FL0IWCLG ; 
    15 FL0IWCN3 FL0IWCN3 ; 
    15 * char(57) ; 
  10 FL0IWTYP FL0IWTYP ; 
  10 FL0IWCND FL0IWCND [16] ; 
end // end FL0IW01

//*** RECORD=FL0IW02 ****
// ---------------------------------------
// This record is a redfinition
// of a portion of the user commarea
// that is shared by fl0i (print reports)
// and fl0y (enter special features).
// ---------------------------------------
// ***********************
Record FL0IW02 type basicRecord
  5 FL0IWGRP FL0IWGRP ; 
    10 FL0IWMFG FL0IWMFG ; 
    10 FL0IWSEL FL0IWSEL [20] ; 
    10 XFCCD XFCCD [21] ; 
    10 PC2CUXID PC2CUXID [21] ; 
end // end FL0IW02

//*** RECORD=FL0IW03 ****
// ---------------------------------------
// This record is used to pass parms
// to program fl105d.
// ---------------------------------------
// ***********************
Record FL0IW03 type basicRecord
  5 FL0IWGP3 FL0IWGP3 ; 
    10 FL0IWMFG FL0IWMFG ; 
    10 XFCCD XFCCD [21] ; 
    10 * char(37) ; 
end // end FL0IW03

//*** RECORD=FL0IW04 ****
// ---------------------------------------
// This record is used to pass parms
// to program fl106d.
// ---------------------------------------
// ***********************
Record FL0IW04 type basicRecord
  5 FL0IWGP4 FL0IWGP4 ; 
    10 FL0IWMFG FL0IWMFG ; 
    10 PC2CUXID PC2CUXID [7] ; 
    10 * char(44) ; 
end // end FL0IW04

//*** RECORD=FL0IW05 ****
// ---------------------------------------
// This record is used to display parms
// ---------------------------------------
// ***********************
Record FL0IW05 type basicRecord
  5 FL0IWJC5 FL0IWJC5 ; 
    10 FL0IWASK FL0IWASK ; 
    10 FL0IWGP5 FL0IWGP5 ; 
end // end FL0IW05

// Calc finish flag
DataItem FCAL-FNSH-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DRS finish flag
DataItem FDRS-FNSH-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of DNORD csr switch
DataItem FL0IW-END-DNORD-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hour
DataItem FL0IW-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hour display
DataItem FL0IW-HH-DISPLAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minimum default value setting
DataItem FL0IW-MIN-QTY-DFLT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Missing customer switch
DataItem FL0IW-MISSING-CUSTOMER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minute
DataItem FL0IW-MN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minute display
DataItem FL0IW-MN-DISPLAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// :
DataItem FL0IW-SEPERATOR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Time
DataItem FL0IW-TIME num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Time display
DataItem FL0IW-TIME-DISPLAY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id
DataItem FL0IW-USERID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// the literal '//*'
DataItem FL0IWASK char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition statement logic
DataItem FL0IWCLG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition statement constants
DataItem FL0IWCN1 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition statement constants
DataItem FL0IWCN3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition code work area
DataItem FL0IWCND char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem FL0IWDNR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement constants
DataItem FL0IWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date
DataItem FL0IWFDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl0yw03 group level
DataItem FL0IWGP3 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0yw04 group level
DataItem FL0IWGP4 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0yw05 group level
DataItem FL0IWGP5 char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0yw02 group level
DataItem FL0IWGRP char(168)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index one for stored fields
DataItem FL0IWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FL0IWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index three for stored fields
DataItem FL0IWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index four for stored fields
DataItem FL0IWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem FL0IWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parm JCL statement
DataItem FL0IWJC5 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition statment
DataItem FL0IWJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement
DataItem FL0IWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm JCL statement
DataItem FL0IWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory model number
DataItem FL0IWMDN num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Rpt mfg cost flag
DataItem FL0IWMFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc name
DataItem FL0IWPNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resources unavailable
DataItem FL0IWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reports selected switch
DataItem FL0IWRSL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selected rpts from fl0i
DataItem FL0IWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to date
DataItem FL0IWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL statement type
DataItem FL0IWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VFSCTL01 update reqd flag
DataItem FSCTL-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Scheduler complete flag
DataItem SCHD-COMP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

