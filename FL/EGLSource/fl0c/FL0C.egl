package fl0c;

import corpcom2.XX0XW01;
import corpcom3.XPFL001;
import corpcom3.XPTA0P;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import fb.common.FB9LMNBR;
import fb.common.FB9REC;
import fb.common.FBAREC;
import fb.common.FBEREC;
import fb.common.FBMREC;
import fb.common.FBZREC;
import ff.common.*;
import fl.common.FLWREC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FL0C ****
// This application is associated with the Factory Load System.
// 
// It provides a screen for users to create, delete, copy, or
// rerun a factory model.
// 
// The application will submit (via the internal reader) the
// program that performs the requested function. These programs
// are FL1800 (create, delete, or copy) and FL1900 (rerun).
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/11/89  CNEWMA  New application.
//          10/02/90  JMCLAU  Add MVS.DSNT.DSNLOAD to Joblib.
// FL-270   07/26/91  PMAINW  Allow pre-run model even if model
//                            run flags = 'n'.
// FL-360   04/26/93  LDELUH  Add restrictions to model create.
// FL-349   05/11/93  LDELUH  Add default minimum qty field.
// FB9994   08/10/93  LDELUH  Chg loadlibs for cob2.
// pg-82    12/15/94  pmainw  Handle twenty product lines
//                            on vfsctl01.
// y2kfix   11/20/97  pharwo  Regenerate for xx0xs01 changes
// pcf999   01/13/98  jniese  remove second pass option.
// *********************
Program FL0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FBAREC FBAREC; // record
  FBEREC FBEREC; // record
  FBMREC FBMREC; // record
  FBZREC FBZREC; // record
  FL0CW00 FL0CW00; // record
  FL0CW01 FL0CW01; // record
  FL0CW02 FL0CW02; // record
  FL0CW03 FL0CW03; // record
  FLWREC FLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0CT01 {deleteAfterUse = yes}; // table
  use FL0CT03 {deleteAfterUse = yes}; // table
  use FL0CM.FL0CM010, // forms
  		FL0CM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FL0CM010 initial; /* M001 input/output*/
    set FL0CW00 empty; /* Working storage*/
    set FL0CW01 empty; /* display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* XPTA0P work record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    set FL0CM010.FL0CMLIT invisible; /* Pre ren message*/
    set FL0CM010.FL0CMPRF protect, invisible; /* Pre run select*/

    FL0CM010.FL0CM-MIN-QTY-DFLT = 3000; /* Set default qty*/


    FL0CW00.FL0CWMIP = "N"; /* initialize switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0C001; /* Converse the main process*/


    FL0C001: FL0C001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0C001; /* Converse the main process*/


  end // end main
end // end FL0C

// Inquire/maintain a table row
Function FL0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FL0C100(); /* Obtain the data to display*/

  FL0C200(); /* Format and display the map*/

  FL0C300(); /* Check attention identifier*/

  FL0C400(); /* Reset fields to normal intensity*/

  FL0C500(); /* Verify the entered data*/

  FL0C600(); /* Process valid input request*/


end // end FL0C001

// Obtain the data to display
Function FL0C100()
   /* ------------------------------------------------------------*/
   /* if data not requested, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FL0CW00.FL0CWMIP == "Y" /* model in process*/
   || FLWREC.XXXMSGNO != 0    /* error occured*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    return;
  end

  FL0CW00.FL0CWRNA = "N"; /* reset switch*/

   /* ------------------------------------------------------------*/
   /* Select Row - Footwear Buy Program Control Table*/
   /* ------------------------------------------------------------*/

  set FBEREC empty; /* clear record*/

  FBEREC.XXXPGMNB = "FL180D"; /* program name*/

  FL0C110(); /* Select table row*/

   /* ------------------------------------------------------------*/
   /* Select Row - Factory Model Control Table*/
   /* ------------------------------------------------------------*/

  FL0C120(); /* Select table row*/


end // end FL0C100

// Select Table Row - Pgm Cntrl
Function FL0C110()
   /* ------------------------------------------------------------*/
   /* Get Table Row*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (FBEREC.FBEMDLPF == "Y")
        converseLib.validationFailed(72); /* 'model being run at this time*/
        FLWREC.XXXMODID = "110"; /* module identification*/
        FL0CW00.FL0CWMIP = "Y"; /* set switch*/
        set FL0CM010.FL0CMSEL[1] cursor; /* set cursor*/
        exit stack; /* Return to previous process*/
      else
        return;
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0CW00.FL0CWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "110"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0C110

// Select Table Row - Fcty Cntrl
Function FL0C120()
   /* ------------------------------------------------------------*/
   /* Select Row - Factory Model Control Table*/
   /* ------------------------------------------------------------*/

  set FB9REC empty; /* clear record*/

   /* ------------------------------------------------------------*/
   /* Get Row - Factory Control Table*/
   /* ------------------------------------------------------------*/

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FL0CW00.FB9LMNBR = FB9REC.FB9LMNBR;
                                   /* last model number created*/
      FL0CM010.FB9LMNBR = FB9REC.FB9LMNBR; /* last model number created*/
      FL0CW00.FB9LMNBR = FL0CW00.FB9LMNBR + .01; /* increment model number*/
      FL0CW00.FL0CWM2 = FL0CW00.FB9LMNBR; /* mdl nbr hundreths*/
      if (FL0CW00.FL0CWM2 > .10) /* mdl nbr hundreths*/
        converseLib.validationFailed(281); /* Indicate no more model nbrs left*/
        exit stack;
      end
      FL0CM010.FL0CMCMD = FL0CW00.FB9LMNBR; /* create model number*/
      FL0CM010.FL0CMCTM = FL0CW00.FB9LMNBR; /* copy to model number*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "120"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0C120

// Format and converse the map
Function FL0C200()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FL0CM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0CM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0CM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If ezemno has been set, it will override xxxmsgno*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum;
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FLWREC.XXXMSGNO != 0) /* Message to display*/
    FL0CM010.XXXMODID = FLWREC.XXXMODID; /* module identification*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end
                                   /* message number moved to ezemno*/
    set FL0CM010 alarm;
  end

  converse FL0CM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FLWREC.XXXMODID = " "; /* Module identification*/
  FL0CM010.XXXMODID = " "; /* Module identification*/
  FLWREC.XXXMSGNO = 0; /* error message number*/
  COMMAREA.CATOAP = FL0CM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0CM010.CAITEM; /* Application data*/


end // end FL0C200

// Check attention identifier
Function FL0C300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FL0CM010 initial; /* clear map*/
    COMMAREA.CATOAP = " "; /* clear to application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    set FL0CM010.FL0CMLIT invisible; /* pre run literal*/
    set FL0CM010.FL0CMPRF invisible; /* pre run select*/
    exit stack; /* return to show error msg*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSFLS01();
      set FL0CM010.CATOAP cursor, bold; /* Highlight*/

    else

      converseLib.validationFailed(44); /* 'cannot access application'*/
      FLWREC.XXXMODID = "300"; /* module identification*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF4 is pressed, go to Main Menu*/
   /* If PF5 is pressed, go to Production Menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* pf3 was pressed*/
   || converseVar.eventKey is pf4  /* pf4 was pressed*/
   || converseVar.eventKey is pf5  /* pf5 was pressed*/
   || converseVar.eventKey is pf12 /* pf12 was pressed*/
   || converseVar.eventKey is pf14 /* pf14 was pressed*/
   || converseVar.eventKey is pf15 /* pf15 was pressed*/
   || converseVar.eventKey is pf16 /* pf16 was pressed*/
   || converseVar.eventKey is pf20 /* pf20 was pressed*/
   || converseVar.eventKey is pf21) /* pf21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0CM010"; /* APPLICATION FIND CODE*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "FL0A";
    end

    if (converseVar.eventKey is pf12) /* pf12 was pressed*/
      COMMAREA.CATOAP = "FL0B"; /* Priority Selection*/
    end

    if (converseVar.eventKey is pf14) /* pf14 was pressed*/
      COMMAREA.CATOAP = "FL0D"; /* Moves*/
    end

    if (converseVar.eventKey is pf15) /* pf15 was pressed*/
      COMMAREA.CATOAP = "FL0E"; /* Factory Splits*/
    end

    if (converseVar.eventKey is pf16) /* pf16 was pressed*/
      COMMAREA.CATOAP = "FL0K"; /* Order Adj Status Maint*/
    end

    if (converseVar.eventKey is pf20) /* pf20 was pressed*/
      COMMAREA.CATOAP = "FL0H"; /* Inquiry/Std Maint*/
    end

    if (converseVar.eventKey is pf21) /* pf21 was pressed*/
      COMMAREA.CATOAP = "FL0I"; /* Report Requests*/
    end

    XSFLS01();
    exit stack;

  end

  if (converseVar.eventKey not enter) /* enter was not pressed*/

    converseLib.validationFailed(3); /* Indicate PF key not valid*/
    FLWREC.XXXMODID = "300"; /* Process name*/
    if (converseVar.eventKey is pa1 /* pa1 was pressed*/
     || converseVar.eventKey is pa3) /* pa3 was pressed*/
      converseLib.clearScreen();
      
    end

    exit stack;

  end


end // end FL0C300

// Reset highlighted fields
Function FL0C400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FL0CM010.FL0CMCMD initialAttributes; /* create model number*/
  set FL0CM010.FL0CMDMD initialAttributes; /* delete model number*/
  set FL0CM010.FL0CMCFM initialAttributes; /* copy from model number*/
  set FL0CM010.FL0CMCTM initialAttributes; /* copy to model number*/
  set FL0CM010.FL0CMLIT invisible; /* Pre ren message*/
  set FL0CM010.FL0CMPRF protect, invisible; /* Pre run select*/
  set FL0CM010.FL0CM-EXCPTN-QTY initialAttributes;
  set FL0CM010.FL0CM-EXCPTN-SESN[1] initialAttributes;
  set FL0CM010.FL0CM-EXCPTN-SESN[2] initialAttributes;
  set FL0CM010.FL0CM-EXCPTN-SESN[3] initialAttributes;
  set FL0CM010.FL0CM-EXCPTN-SESN[4] initialAttributes;
  set FL0CM010.FL0CM-EXCPTN-SESN[5] initialAttributes;
  set FL0CM010.FL0CM-EXCPTN-SESN[6] initialAttributes;
  set FL0CM010.FL0CM-EXCPTN-SESN[7] initialAttributes;
  set FL0CM010.FL0CM-EXCPTN-SESN[8] initialAttributes;
  set FL0CM010.FL0CM-MIN-QTY-DFLT initialAttributes;

  FL0CW00.FL0CWIX1 = 1; /* initialize index*/
  while (FL0CW00.FL0CWIX1 <= 3)
    set FL0CM010.FL0CMSEL[FL0CWIX1] initialAttributes; /* selection code*/
    FL0CW00.FL0CWIX1 = FL0CW00.FL0CWIX1 + 1; /* increment index*/
  end

  set FL0CM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0CM010.CAITEM initialAttributes; /* Commarea application data*/

  if (FL0CM010.FL0CMSEL[1] == " "
   && FL0CM010.FL0CMSEL[2] == " "
   && FL0CM010.FL0CMSEL[3] == " ")
    set FL0CM010.FL0CMSEL[1] cursor; /* selection code*/
  end
end // end FL0C400

// Verify the entered data
Function FL0C500()
   /* ------------------------------------------------------------*/
   /* Edit Item (if entered)*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* item entered*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    set FL0CM010.CAITEM cursor, bold; /* set cursor*/
    FLWREC.XXXMSGNO = 40; /* 'enter only with Fast Path'*/
  end

   /* ------------------------------------------------------------*/
   /* if model in process, reset switch*/
   /* ------------------------------------------------------------*/

  if (FL0CW00.FL0CWMIP == "Y" /* model in process*/
   || FL0CW00.FL0CWRNA == "Y") /* resources not available*/
    FL0CW00.FL0CWMIP = "N"; /* reset switch*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    FLWREC.XXXMSGNO = 72; /* 'model in process'*/
    exit stack; /* return to display the map*/
  end

   /* ------------------------------------------------------------*/
   /* If a model number has been entered in the delete, copy, or*/
   /* second pass fields, ensure that the corresponding selection*/
   /* was made.*/
   /* ------------------------------------------------------------*/

  if (FL0CM010.FL0CMCFM != 0) /* copy from model nbr*/
    if (FL0CM010.FL0CMSEL[3] != "S") /* selection not made*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      FLWREC.XXXMSGNO = 60; /* 's is the only valid code'*/
      set FL0CM010.FL0CMSEL[3] cursor, bold; /* set cursor*/
    end
  end

  if (FL0CM010.FL0CMDMD != 0) /* delete model nbr*/
    if (FL0CM010.FL0CMSEL[2] != "S") /* selection not made*/
      FLWREC.XXXMODID = "500"; /* module identification*/
      FLWREC.XXXMSGNO = 60; /* 's is the only valid code'*/
      set FL0CM010.FL0CMSEL[2] cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify all selection codes equal a ' ' or an 'S'.*/
   /* ------------------------------------------------------------*/

  FL0CW00.FL0CWSCT = 0; /* initialize count*/

  FL0CW00.FL0CWIX1 = 3; /* initialize index*/

  while (FL0CW00.FL0CWIX1 > 0) /* number of selections available*/
    if (FL0CM010.FL0CMSEL[FL0CWIX1] == " ") /* selection equal space*/
       /* next sentence*/
    else
      if (FL0CM010.FL0CMSEL[FL0CWIX1] == "S") /* selection equal 'S'*/
        FL0CW00.FL0CWSCT = FL0CW00.FL0CWSCT + 1; /* selection count*/
      else
        FL0CW00.FL0CWSCT = FL0CW00.FL0CWSCT + 1; /* selection count*/
        FLWREC.XXXMSGNO = 41; /* 'S' is only valid code*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        set FL0CM010.FL0CMSEL[FL0CWIX1] cursor, bold; /* set cursor*/
      end
    end
    FL0CW00.FL0CWIX1 = FL0CW00.FL0CWIX1 - 1; /* decrement index*/
  end

   /* ------------------------------------------------------------*/
   /* if more than one selection made, set up error message*/
   /* ------------------------------------------------------------*/

  if (FL0CW00.FL0CWSCT > 1) /* more than one selection made*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    FLWREC.XXXMSGNO = 73; /* 'more than one selection'*/
    FL0CW00.FL0CWIX1 = 3; /* initialize index*/
    while (FL0CW00.FL0CWIX1 > 0)
      if (FL0CM010.FL0CMSEL[FL0CWIX1] == "S") /* selection made*/
        set FL0CM010.FL0CMSEL[FL0CWIX1] cursor, bold; /* set cursor*/
      end
      FL0CW00.FL0CWIX1 = FL0CW00.FL0CWIX1 - 1; /* decrement index*/
    end
  end

  FL0CW00.FL0CWSCT = 0; /* reset count*/

   /* ------------------------------------------------------------*/
   /* if copy model was selected, ensure the integer portions*/
   /* of the model numbers are for the same month.*/
   /* ------------------------------------------------------------*/

  if (FL0CM010.FL0CMSEL[3] == "S") /* copy factory model selected*/
    FL0CW00.FL0CWDW1 = FL0CM010.FL0CMCFM; /* Decimal work field 1*/
    FL0CW00.FL0CWDW2 = FL0CM010.FL0CMCTM; /* Decimal work field 2*/
    if (FL0CW00.FL0CWD1I != FL0CW00.FL0CWD2I) /* 2 integer fields*/
      converseLib.validationFailed(10); /* invalid value entered*/
      set FL0CM010.FL0CMCFM cursor, bold; /* from model number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if copy model was selected, ensure it does exist*/
   /* If so, perform copy model.*/
   /* ------------------------------------------------------------*/

  if (FL0CM010.FL0CMSEL[3] == "S") /* copy factory model selected*/
    FL0CW00.FL0CWSCT = FL0CW00.FL0CWSCT + 1; /* increment count*/
    set FBAREC empty; /* clear row storage area*/
    FBAREC.FBDMDTYP = "FL1"; /* Model type*/
    FBAREC.FBAMDNBR = FL0CM010.FL0CMCFM; /* Model number*/
    FL0C510(); /* select table row*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        set FBAREC empty; /* clear row storage area*/
        FBAREC.FBDMDTYP = "FL1"; /* model type*/
        FBAREC.FBAMDNBR = FL0CM010.FL0CMCTM; /* model number*/
        FL0C520(); /* determine if copy to model exists*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
          set FL0CM010.FL0CMCFM cursor, bold; /* set cursor*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if delete model was selected, ensure it does exist*/
   /* If so, perform delete model.*/
   /* ------------------------------------------------------------*/

  if (FL0CM010.FL0CMSEL[2] == "S")
    FL0CW00.FL0CWSCT = FL0CW00.FL0CWSCT + 1; /* increment count*/
  end

   /* ------------------------------------------------------------*/
   /* if create model was selected, ensure it doesn't exist*/
   /* If not, perform create model*/
   /* ------------------------------------------------------------*/
  if (FL0CM010.FL0CMSEL[1] == "S") /* create factory model selected*/
    FL0CS01(); /* Check factory load run flag*/
    FL0CW00.FL0CWSCT = FL0CW00.FL0CWSCT + 1; /* increment count*/
    set FBAREC empty; /* clear row storage area*/
    FBAREC.FBDMDTYP = "FL1"; /* Model type*/
    FBAREC.FBAMDNBR = FL0CM010.FL0CMCMD; /* Model number*/
    FL0C520(); /* select table row*/
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* row not found*/
      set FL0CM010.FL0CMCMD cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0
   || FLWREC.XXXMSGNO != 0)
    exit stack;
  end


end // end FL0C500

// Select table row - Fcty Mdl
Function FL0C510()
   /* ------------------------------------------------------------*/
   /* Fetch row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        converseLib.validationFailed(79); /* 'model number not found'*/
        FLWREC.XXXMODID = "510"; /* module identification*/
        return; /* return to previous process*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(48); /* 'fatal database error'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "510"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0C510

// Select table row - Fcty Mdl
Function FL0C520()
   /* ------------------------------------------------------------*/
   /* Fetch row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      converseLib.validationFailed(46); /* 'data base updated by another user'*/
      set FL0CM010.FL0CMCMD cursor, bold; /* set cursor*/
      FLWREC.XXXMODID = "520"; /* module identification*/
      return; /* return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        return; /* return to previous process*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(48); /* 'fatal database error'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "520"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0C520

// Process valid input request
Function FL0C600()
   /* ------------------------------------------------------------*/
   /* if no selections were made, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FL0CW00.FL0CWSCT == 0) /* no selections were made*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
  else

    FL0CM010.XXXMODID = "600"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end









   /* ------------------------------------------------------------*/
   /* Clear out parameters record*/
   /* ------------------------------------------------------------*/

  FL0CW01.TARJCL = 0; /* move zereos to parameters record*/

   /* ------------------------------------------------------------*/
   /* Call subroutine to obtain current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01();

   /* ------------------------------------------------------------*/
   /* if option 1 selected, create factory model*/
   /* ------------------------------------------------------------*/

  if (FL0CM010.FL0CMSEL[1] == "S") /* create factory model selected*/
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL180D"; /* program number*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEMDLPF = "Y"; /* model in process flag*/
    FL0CW00.FL0CWMIP = "Y"; /* model in process flag*/
    FL0CW01.FL0CWMDL = FL0CM010.FL0CMCMD; /* create model number*/
    FL0CW01.FL0CWBPF = 1; /* batch process flag*/
    FL0CW00.FL0CWPGM = "FL180D"; /* program number*/
    FL0CW00.FL0CWPNM = "FL1801"; /* proc number*/

    if (FL0CM010.FL0CM-MIN-QTY-DFLT == 0)
      FL0CW01.FL0CW-MIN-QTY-DFLT = 3000;
    else
      FL0CW01.FL0CW-MIN-QTY-DFLT = FL0CM010.FL0CM-MIN-QTY-DFLT;
    end

    FL0CW01.FL0CW-EXCPTN-QTY = FL0CM010.FL0CM-EXCPTN-QTY;
    FL0CW00.FL0CW-EXCPTN-IX = 1;
    while (FL0CW00.FL0CW-EXCPTN-IX < 9)
      FL0CW01.FL0CW-EXCPTN-SESN[FL0CW-EXCPTN-IX] = FL0CM010.FL0CM-EXCPTN-SESN[FL0CW-EXCPTN-IX];
      FL0CW00.FL0CW-EXCPTN-IX = FL0CW00.FL0CW-EXCPTN-IX + 1;
    end

    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0C620(); /* format production jcl*/
    else
      FL0C610(); /* format development jcl*/
    end
    FL0CM010.FL0CMSEL[1] = " "; /* selection field*/
  end

   /* ------------------------------------------------------------*/
   /* if option 2 selected, delete factory model*/
   /* ------------------------------------------------------------*/

  if (FL0CM010.FL0CMSEL[2] == "S") /* delete factory model selected*/
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL180D"; /* program number*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEMDLPF = "Y"; /* model in process flag*/
    FL0CW00.FL0CWMIP = "Y"; /* model in process flag*/
    FL0CW01.FL0CWMDL = FL0CM010.FL0CMDMD; /* delete model number*/
    FL0CW01.FL0CWBPF = 2; /* batch process flag*/
    FL0CW00.FL0CWPGM = "FL180D"; /* program number*/
    FL0CW00.FL0CWPNM = "FL1801"; /* proc number*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0C620(); /* format production jcl*/
    else
      FL0C610(); /* format development jcl*/
    end
    FL0CM010.FL0CMSEL[2] = " "; /* selection field*/
    FL0CM010.FL0CMDMD = 0; /* model number*/
  end

   /* ------------------------------------------------------------*/
   /* if option 3 selected, copy factory model*/
   /* ------------------------------------------------------------*/

  if (FL0CM010.FL0CMSEL[3] == "S") /* copy factory model selected*/
    set FBEREC empty; /* initialize record*/
    FBEREC.XXXPGMNB = "FL180D"; /* program number*/
    FBEREC.XXXCMTCT = 0; /* program commit count*/
    FBEREC.FBEMDLPF = "Y"; /* model in process flag*/
    FL0CW00.FL0CWMIP = "Y"; /* model in process flag*/
    FL0CW01.FL0CWMDL = FL0CM010.FL0CMCTM; /* copy to model number*/
    FL0CW01.FL0CWCFM = FL0CM010.FL0CMCFM; /* copy from model number*/
    FL0CW01.FL0CWBPF = 3; /* batch process flag*/
    FL0CW00.FL0CWPGM = "FL180D"; /* program number*/
    FL0CW00.FL0CWPNM = "FL1801"; /* proc number*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FL0C620(); /* format production jcl*/
    else
      FL0C610(); /* format development jcl*/
    end
    FL0CM010.FL0CMSEL[3] = " "; /* selection field*/
    FL0CM010.FL0CMCFM = 0; /* model number*/
  end


end // end FL0C600

// Process Factory Mdl - test jcl
Function FL0C610()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0CW00.FL0CWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.TA6MSGSW = "N"; /* No on-line notify message*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0CW00.FL0CWIXT > 0) /* Until end of table*/

    if (FL0CT01.TARTYPE[FL0CWIXT] == "E") /* Execute statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FL0CW02.TARJCL = FL0CT01.TARJCL[FL0CWIXT]; /* execute jcl*/
      FL0CW02.FL0CWPNM = FL0CW00.FL0CWPNM; /* proc name*/
      TA6REC.TARJCL[TA6INDEX] = FL0CW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0CT01.TARTYPE[FL0CWIXT]; /* Type*/

    else

      if (FL0CT01.TARTYPE[FL0CWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FL0CW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0CT01.TARTYPE[FL0CWIXT]; /* Type*/

      else

        if (FL0CT01.TARTYPE[FL0CWIXT] == "Z") /* override statement*/

          /* ------------------------------------------------------------*/
           /* Format System Override statement*/
          /* ------------------------------------------------------------*/

          FL0CW03.TARJCL = FL0CT01.TARJCL[FL0CWIXT]; /* JCL*/
          FL0CW03.FL0CWPGM = FL0CW00.FL0CWPGM; /* program*/
          TA6REC.TARJCL[TA6INDEX] = FL0CW03.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0CT01.TARTYPE[FL0CWIXT]; /* Type*/

        else


          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FL0CT01.TARJCL[FL0CWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0CT01.TARTYPE[FL0CWIXT];

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0CT01.TARJCL[FL0CWIXT] == "/*EOF") /* End of table*/

      FL0CW00.FL0CWIXT = 0; /* Indicate end of table*/

    else

      FL0CW00.FL0CWIXT = FL0CW00.FL0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0C614(); /* Submit the JCL*/

  if (converseVar.validationMsgNum == 86 /* User cancelled*/
   || converseVar.validationMsgNum == 01) /* System error*/
    FL0CW00.FL0CWMIP = "N"; /* turn off model in process fl*/
    FL0CM010.FL0CMPRF = " "; /* turn off pre run fl*/
    return;
  end

   /* --------------------------------------------------------*/
    /* Update the model in process flag on the VFBPGM01 table*/
   /* --------------------------------------------------------*/

  FBEREC.XXXPGMNB = FL0CW00.FL0CWPGM;


  FL0C110(); /* Select table row- Pgm cntrl*/

  FL0CS02(); /* Update DFBUY.VFBPGM01 row*/



end // end FL0C610

// Submit Jcl for Batch Execution
Function FL0C614()
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* 'Job Successfully Submitted'*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FLWREC.XXXMODID = "614"; /* module identification*/
    return;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FLWREC.XXXMODID = "614"; /* module identification*/
    return;

  end


end // end FL0C614

// Process Factory Mdl - prod jcl
Function FL0C620()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FL0CW00.FL0CWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.TA6MSGSW = "N"; /* No on-line notify message*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0CW00.FL0CWIXT > 0) /* Until end of table*/

    if (FL0CT03.TARTYPE[FL0CWIXT] == "E") /* Execute statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FL0CW02.TARJCL = FL0CT03.TARJCL[FL0CWIXT]; /* execute jcl*/
      FL0CW02.FL0CWPNM = FL0CW00.FL0CWPNM; /* proc name*/
      TA6REC.TARJCL[TA6INDEX] = FL0CW02.TARJCL; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FL0CT03.TARTYPE[FL0CWIXT]; /* Type*/

    else

      if (FL0CT03.TARTYPE[FL0CWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FL0CW01.TARJCL; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FL0CT03.TARTYPE[FL0CWIXT]; /* Type*/

      else

        if (FL0CT03.TARTYPE[FL0CWIXT] == "Z") /* override statement*/

          /* ------------------------------------------------------------*/
           /* Format System Override statement*/
          /* ------------------------------------------------------------*/

          FL0CW03.TARJCL = FL0CT03.TARJCL[FL0CWIXT]; /* JCL*/
          FL0CW03.FL0CWPGM = FL0CW00.FL0CWPGM; /* program*/
          TA6REC.TARJCL[TA6INDEX] = FL0CW03.TARJCL; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0CT03.TARTYPE[FL0CWIXT]; /* Type*/

        else


          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FL0CT03.TARJCL[FL0CWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FL0CT03.TARTYPE[FL0CWIXT];

        end
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FL0CT03.TARJCL[FL0CWIXT] == "/*EOF") /* End of table*/

      FL0CW00.FL0CWIXT = 0; /* Indicate end of table*/

    else

      FL0CW00.FL0CWIXT = FL0CW00.FL0CWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FL0C614(); /* Submit the JCL*/

  if (converseVar.validationMsgNum == 86 /* User cancelled*/
   || converseVar.validationMsgNum == 01) /* System error*/
    FL0CW00.FL0CWMIP = "N"; /* turn off model in process fl*/
    FL0CM010.FL0CMPRF = " "; /* turn off pre run fl*/
    return;
  end

   /* --------------------------------------------------------*/
    /* Update the model in process flag on the VFBPGM01 table*/
   /* --------------------------------------------------------*/

  FBEREC.XXXPGMNB = FL0CW00.FL0CWPGM;


  FL0C110(); /* Select table row- Pgm cntrl*/

  FL0CS02(); /* Update DFBUY.VFBPGM01 row*/



end // end FL0C620

// Check factory load run codes
Function FL0CS01()

   /* ----------------------------------------------------------*/
    /* Do a select count on the factory load run flag*/
   /* ----------------------------------------------------------*/

  set FBZREC empty;
  set FBMREC empty;

  FBZREC.FBZFUNC = "SA";

  FBMREC.FBMFLRFL = "N";

   /* ------------------------------------------------------------*/
   /* A -305 return code indicates the count was a zero.*/
   /* also check the count in fbzrec*/
   /* ------------------------------------------------------------*/

  try
    call "IO4670" (FBZREC, SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (FBZREC.FBZSUM1 != 0) /* some 'n' flags found*/

        if (FL0CM010.FL0CMPRF == "Y") /* Confirm on pre-run*/
          set FL0CM010.FL0CMSEL[1] cursor;
          set FL0CM010.FL0CMLIT invisible; /* pre run literal*/
          set FL0CM010.FL0CMPRF invisible; /* pre run select*/
          return; /* pre run confirmed*/
        end
        if (FL0CM010.FL0CMPRF != "Y") /* no confirm on pre-run*/
          set FL0CM010.FL0CMLIT normal; /* pre run literal*/
          set FL0CM010.FL0CMPRF cursor, normal; /* pre run select*/
          FL0CW00.FL0CWPRF = "Y"; /* pre-runflag set on*/
          converseLib.validationFailed(298);
          exit stack;
        end
      end
      if (FBZREC.FBZSUM1 == 0) /* no 'n' flags found*/
        return;
      end
    end
    if (SQLCA.VAGen_SQLCODE == -305) /* Zero count returned*/
      return;
    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0CS01"; /* Process name*/
  TA1REC.TA1LOC = "COUNT ON FCTY LOAD RUN  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0CM010.XXXMODID = "S01";
  exit stack;
end // end FL0CS01

// Update DFBUY.VFBPGM01 row
Function FL0CS02()

   /* ------------------------------------------------------------*/
   /* UPdate model in process flag*/
   /* ------------------------------------------------------------*/

  FBEREC.FBEMDLPF = "Y"; /* Model in process flag*/

  XX0XS01();

  FBEREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBEREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3440" ("U ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(47); /* 'resources unavailable'*/
    FL0CW00.FL0CWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "FL0CS02"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0CS02

//*** RECORD=FL0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0CW00 type basicRecord
  10 FL0CWRNA FL0CWRNA ; 
  10 FL0CWPRF FL0CWPRF ; 
  10 FL0CWSCT FL0CWSCT ; 
  10 FL0CWIX1 FL0CWIX1 ; 
  10 FL0CWIX2 FL0CWIX2 ; 
  10 FL0CWIXT FL0CWIXT ; 
  10 FL0CWMIP FL0CWMIP ; 
  10 FB9LMNBR FB9LMNBR ; 
  10 FL0CWPGM FL0CWPGM ; 
  10 FL0CWPNM FL0CWPNM ; 
  10 FL0CWM2 FL0CWM2 ; 
  10 FL0CWDW1 FL0CWDW1 ; 
    15 FL0CWD1I FL0CWD1I ; 
    15 FL0CWD1D FL0CWD1D ; 
  10 FL0CWDW2 FL0CWDW2 ; 
    15 FL0CWD2I FL0CWD2I ; 
    15 FL0CWD2D FL0CWD2D ; 
  10 FL0CW-EXCPTN-IX FL0CW-EXCPTN-IX ; 
end // end FL0CW00

//*** RECORD=FL0CW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0CW01 type basicRecord
  10 TARJCL TARJCL ; 
    15 FL0CWMDL FL0CWMDL ; 
    15 FL0CWCFM FL0CWCFM ; 
    15 FL0CWBPF FL0CWBPF ; 
    15 FL0CW-EXCPTN-QTY FL0CW-EXCPTN-QTY ; 
    15 FL0CW-EXCPTN-SESN FL0CW-EXCPTN-SESN [8] ; 
    15 FL0CW-MIN-QTY-DFLT FL0CW-MIN-QTY-DFLT ; 
    15 * char(35) ; 
end // end FL0CW01

//*** RECORD=FL0CW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0CW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 * char(15) ; 
    15 FL0CWPNM FL0CWPNM ; 
    15 * char(59) ; 
end // end FL0CW02

//*** RECORD=FL0CW03 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0CW03 type basicRecord
  10 TARJCL TARJCL ; 
    15 * char(12) ; 
    15 FL0CWPGM FL0CWPGM ; 
    15 * char(62) ; 
end // end FL0CW03

// sesn exception index
DataItem FL0CW-EXCPTN-IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// exception quantity
DataItem FL0CW-EXCPTN-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sesn exception code
DataItem FL0CW-EXCPTN-SESN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product min qty default
DataItem FL0CW-MIN-QTY-DFLT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// batch process flag
DataItem FL0CWBPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// copy from model number
DataItem FL0CWCFM num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// decimal work 1 decimal
DataItem FL0CWD1D num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal work 1 integer
DataItem FL0CWD1I num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal work 2 decimal
DataItem FL0CWD2D num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal work 2 integer
DataItem FL0CWD2I num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal work field 1
DataItem FL0CWDW1 num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal work field 2
DataItem FL0CWDW2 num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index one for stored fields
DataItem FL0CWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FL0CWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem FL0CWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Model nbr hundreths
DataItem FL0CWM2 num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// model number
DataItem FL0CWMDL num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// model in process switch
DataItem FL0CWMIP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program name
DataItem FL0CWPGM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc name
DataItem FL0CWPNM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pre Run Flag
DataItem FL0CWPRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resources unavailable
DataItem FL0CWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection count
DataItem FL0CWSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

