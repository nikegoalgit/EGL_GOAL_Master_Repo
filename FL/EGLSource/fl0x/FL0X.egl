package fl0x;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XFRCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB8BUYDT;
import fb.common.FBABDT;
import fb.common.FBCLRNBR;
import ff.common.*;
import fl.common.FLWREC;
import fy.common.FY1FCTYC;
import ta.common.TA1REC;
import ta.common.TA1TBLKE;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FL0X ****
// This application is part of the footwear long range summary
// schedule system.
// This application display/modifies the forecated buy month
// totals to be made ina country by factory and forecasted buy
// date for a long range production schedule. In addition, the
// the application calculates a total line to be displayed at
// the top detail line of every map.
// The user has the option of using the schedule number display
// ed on the map or of selecting any other valid schedule
// number.
// The user entered a country.  The user has the option of
// specifying one country or all countries to be displayed.
// The user can modify any of the forecast buy month totals
// being made at a factory.  The application will update one
// screen of data at a time.
// The user can scroll right or left and up or down.
// The user may exit to any allowed application via fast path
// or PF keys.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 01/16/90   wdishm   Created.
// 12/28/90   jalle1   fix problem of not rounding 10th month
//                     data to nearest 1000.
// 09/02/93   jmclau   convert to csp 4.1. change some of the
//                     IO Mode calls so they are standard.
// Y2KFIX   03/12/98  ksumme  Y2K MODIFICATIONS MADE TO:
//                     regen to pick up xx0xs01
// *********************
Program FL0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FBCREC FBCREC; // record
  FL0XW00 FL0XW00; // record
  FL0XW01 FL0XW01; // record
  FL0XW02 FL0XW02; // record
  FLWREC FLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use FL0XM.FL0XM010, // form
  		FL0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
    goto FL0X001;
    FL0X001: FL0X001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the schedule quantity adjustments.*/
     /* ------------------------------------------------------------*/

    goto FL0X002; /* Converse schedule qty adjustments*/


    FL0X002: FL0X002();
    goto FL0X002;
  end // end main
end // end FL0X

// Fl0X001 special initialization
Function FL0X001()


   /* ---------------------------------------------------------*/
   /* ---------------------------------------------------------*/
   /* Initialize the work record and the map storage record.*/
   /* Set obtain data flag to yes.*/
   /* ---------------------------------------------------------*/

  set FL0XW00 empty; /* Working storage record*/
  set FL0XW01 empty; /* Map storage for map heading data*/
  set FL0XW02 empty;

  set FL0XM010 empty;

  set SQLCA empty;
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  FL0XW00.FL0XWTSL = 1092; /* Temporary storage page length*/
  FL0XW00.FL0XWMAX = 13; /* Max lines per map page*/
  FL0XW00.FL0XWTSP = 1; /* Temp storage page request*/
  FL0XW00.FL0XWRLI = 1; /* Right left index*/
  FL0XW00.FL0XWIXM = 1; /* Map index*/



end // end FL0X001

// LR summary schedule-qty adj
Function FL0X002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain data to disply*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  FL0X100(); /* Obtain data to display*/

  FL0X200(); /* Format and display the map*/

  FL0X300(); /* Check attention identifier*/

  FL0X400(); /* Reset fields to normal intensity*/

  FL0X500(); /* Verify the entered data*/

  FL0X600(); /* Process valid input request*/

end // end FL0X002

// Obtain data to display
Function FL0X100()



   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FL0XW00.FL0XWRDF != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Error found*/
    return;
  end



  FL0X110(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* Open cursor for DFBUY.VSMYPS01*/
   /* ------------------------------------------------------------*/

  set FBCREC empty; /* Initialize record*/

  FBCREC.FBCLRNBR = FL0XW01.FL0XWSCN;

  if (FL0XW01.FL0XWCTY == "ALL")
    FBCREC.XCTCD = "*";
  else
    FBCREC.XCTCD = FL0XW01.FL0XWCTY;
  end

  FL0X120(); /* Open cursor for DFBUY.VSMYPS01*/

   /* ------------------------------------------------------------*/
   /* Obtain first row--if rows exist process all of the record.*/
   /* ------------------------------------------------------------*/


  FL0X130(); /* Obtain next DFBUY.VSMYPS01 row*/

  if (FL0XW00.FL0XWSCF == "Y") /* If end of cursor on first read*/
    converseLib.validationFailed(18); /* Request processed no data to display*/
    set FL0XM010 initial;
    set FL0XM010.FL0XMSCN cursor;
    return;
  end


  while (FL0XW00.FL0XWSCF == "N") /* While cursor not at end*/

    FL0XW00.FY1FCTYC = FBCREC.FY1FCTYC;
    FL0XW00.FL0XWIX1 = 0; /* Date index*/
    FL0XW00.FL0XWIXT = FL0XW00.FL0XWIXT + 1;

    while (FBCREC.FY1FCTYC == FL0XW00.FY1FCTYC /* While same factory*/
     && FL0XW00.FL0XWSCF == "N")

      FL0X140(); /* Process summary rows*/
      FL0X130(); /* Fetch next DFBUY.VSMYPS01 row*/

    end
    if (FL0XW00.FL0XWIXT == FL0XW00.FL0XWMAX) /* Max lines per page*/
      FL0XS01(); /* Add to temp storage*/
    end

  end

  FL0X150(); /* Close DFBUY.VSMYPS01 cursor*/

  if (FL0XW00.FL0XWIXT != 0) /* Write partial page to temp storage*/

    FL0XS01(); /* Add to temp storage*/

  end


  FL0XW00.FL0XWRDF = "N"; /* Data not requested*/



end // end FL0X100

// Purge temporary storage
Function FL0X110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FL0XW02 empty; /* Map temporary storage page*/
  set TA5REC empty; /* temporary storage record*/


  FL0XW00.TA5TSQIX = 0; /* Highest page number*/
  FL0XW00.FL0XWIXT = 0; /* temporary storage line index*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FL0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FL0XM010.XXXPRCNM = "FL0X110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0XM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0X110

// Open DFBUY.VSMYPS01 cursor
Function FL0X120()


   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VSMYPs01*/
   /* ------------------------------------------------------------*/

  FL0XW00.FL0XWSCF = "N"; /* Set summary cursor to no*/



  try
    call "IO3500" ("S1", SQLCA, FBCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0X120"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSMYPS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0XM010.XXXPRCNM = "FL0X120";
  exit stack;

end // end FL0X120

// fetch DFBUY.VSMYPS01 row
Function FL0X130()


   /* ------------------------------------------------------------*/
   /* Fetch DFBUY.VSMYPS01row.*/
   /* ------------------------------------------------------------*/



  try
    call "IO3500" ("N1", SQLCA, FBCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
        FL0XW00.FL0XWSCF = "Y";
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0X130"; /* Process name*/
  TA1REC.TA1LOC = "FETCH TABLE ROW         ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSMYPS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0XM010.XXXPRCNM = "FL0X130";
  exit stack;

end // end FL0X130

// Process summary rows
Function FL0X140()

   /* ------------------------------------------------------------*/
   /* There will be 12 date rows for each factory (within*/
   /* country).  One temporary storage line will contain the*/
   /* quantities for the 12 dates and a total of all the dates*/
   /* for the factory.  The first line in the map (not included*/
   /* in temporary storage) will show a grand total and totals*/
   /* for each date. The detail quantities are added into the*/
   /* grand total and each date total.*/
   /* ------------------------------------------------------------*/

   /* Set date index up by 1*/

  FL0XW00.FL0XWIX1 = FL0XW00.FL0XWIX1 + 1;



  FL0XW00.FL0XWFDT = FBCREC.FB8BUYDT;
  FL0XW00.FL0XWBYY = FL0XW00.FL0XWFYY;
  FL0XW00.FL0XWBMM = FL0XW00.FL0XWFMM;
  FL0XW01.FL0XWBYM[FL0XWIX1] = FL0XW00.FL0XWBDT;
  FL0XW02.FY1FCTYC[FL0XWIXT] = FBCREC.FY1FCTYC; /* Factory code*/
  FL0XW02.XCTCD[FL0XWIXT] = FBCREC.XCTCD; /* Country code*/


   /* ------------------------------------------------------------*/
   /* Based upon the date index move the row quantity to the*/
   /* appropriate display storage qty field. Also save the*/
   /* record change count for updating.*/
   /* ------------------------------------------------------------*/

  if (FL0XW00.FL0XWIX1 == 1)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQT1[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWCC1[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 2)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQT2[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWCC2[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 3)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQT3[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWCC3[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 4)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQT4[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWCC4[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 5)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQT5[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWCC5[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 6)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQT6[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWCC6[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 7)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQT7[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWCC7[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 8)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQT8[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWCC8[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 9)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQT9[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWCC9[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 10)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQ10[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWC10[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 11)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQ11[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWC11[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end
  if (FL0XW00.FL0XWIX1 == 12)
    FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB;
    FL0XW02.FL0XWQ12[FL0XWIXT] = FL0XW00.FL0XWWF1 / 1000;
    FL0XW02.FL0XWC12[FL0XWIXT] = FBCREC.ZZZCHGCT;
  end

   /* ------------------------------------------------------------*/
   /* Add the row quantity into the total fields.*/
   /* ------------------------------------------------------------*/

  FL0XW00.FL0XWWF1 = FBCREC.FBCFTQTB / 1000;

  FL0XW01.FL0XWTOQ = FL0XW01.FL0XWTOQ + FL0XW00.FL0XWWF1;
  FL0XW01.FL0XWTQY[FL0XWIX1] = FL0XW01.FL0XWTQY[FL0XWIX1] + FL0XWWF1;
  FL0XW02.FL0XWTOT[FL0XWIXT] = FL0XW02.FL0XWTOT[FL0XWIXT] + FL0XWWF1;



end // end FL0X140

// CLose DFBUY.VSMYPS01 cursor
Function FL0X150()


   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VSMYPs01*/
   /* ------------------------------------------------------------*/



  try
    call "IO3500" ("C1", SQLCA, FBCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0X150"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSMYPS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0XM010.XXXPRCNM = "FL0X150";
  exit stack;

end // end FL0X150

// Format and display map 1
Function FL0X200()


  if (converseVar.validationMsgNum != 0)
    set FL0XM010 alarm; /* Indicate sound alarm*/
  end


   /* -----------------------------------------------------------*/
   /* If map is not formatted, format the data to display*/
   /* -----------------------------------------------------------*/


  if (FL0XW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FL0XW00.FL0XWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

      set FL0XM010 initial;

      FL0XS02(); /* Obtain temp storage page*/


    end
    if (FL0XW00.FL0XWRLS == "Y") /* Right or left scroll request*/
      FL0XW00.FL0XWRLS = "N";

      set FL0XM010 initial;

    end
  end


  if (FL0XM010.XXXCURDT == 0) /* Map not formatted*/

    FL0X210(); /* Move header data to the map*/

    FL0X220(); /* Format map 1 detail lines*/

  end

  FL0XM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* -----------------------------------------------------------*/
   /* Position cursor if no errors*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (FL0XM010.FL0XMSCN == 0)
      set FL0XM010.FL0XMSCN cursor;
    else
      if (FL0XM010.FL0XMCTY == " ")
        set FL0XM010.FL0XMCTY cursor;
      else
        set FL0XM010.FL0XMQT1[1] cursor;
      end
    end
  end



  if (FL0XW00.XXXMSGNO != 0) /* Contains informational message*/
    if (FL0XW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FL0XW00.XXXMSGNO);
    end
  end

  FL0XM010.XXXPRCNM = "FL0X"; /* Process number*/

  converse FL0XM010 ;

   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/

  FL0XW00.XXXMSGNO = 0; /* Message number*/
  FL0XM010.XXXPRCNM = "FL0X"; /* Process number*/

end // end FL0X200

// Format map Header data
Function FL0X210()

   /* ------------------------------------------------------------*/
   /* Move map header from fl0xw01 display storage to the map*/
   /* fields.*/
   /* ------------------------------------------------------------*/


  if (FL0XW01.FL0XWSCN != 0)
    FL0XM010.FL0XMSCN = FL0XW01.FL0XWSCN; /* Schedule nbr*/
  end
  if (FL0XW01.FL0XWBYM[1] != 0)
    FL0XM010.FL0XMTOQ = FL0XW01.FL0XWTOQ; /* Total*/
    set FL0XM010.FL0XMTOQ skip;
  end

  FL0XM010.FL0XMCTY = FL0XW01.FL0XWCTY; /* Country code*/

  FL0XW00.FL0XWIX1 = FL0XW00.FL0XWRLI; /* Page right left index*/
  FL0XW00.FL0XWIXM = 1; /* map index*/

  while (FL0XW00.FL0XWIXM <= 8
   && FL0XW00.FL0XWIX1 <= 12)
    if (FL0XW01.FL0XWBYM[FL0XWIX1] != 0)
      FL0XM010.FL0XMFCL[FL0XWIXM] = "FORCST"; /* Forecast literal*/
      FL0XM010.FL0XMBYM[FL0XWIXM] = FL0XW01.FL0XWBYM[FL0XWIX1];
      FL0XM010.FL0XMTQY[FL0XWIXM] = FL0XW01.FL0XWTQY[FL0XWIX1];
      set FL0XM010.FL0XMTQY[FL0XWIXM] skip;
    else
      set FL0XM010.FL0XMBYM[FL0XWIXM] skip, invisible; /* Underline field*/
    end
    FL0XW00.FL0XWIX1 = FL0XW00.FL0XWIX1 + 1;
    FL0XW00.FL0XWIXM = FL0XW00.FL0XWIXM + 1;
  end

  if (FL0XW00.FL0XWIXM <= 8)
    while (FL0XW00.FL0XWIXM <= 8)
      set FL0XM010.FL0XMBYM[FL0XWIXM] skip, invisible; /* Darken underline field*/
      set FL0XM010.FL0XMFCL[FL0XWIXM] skip, invisible;
      FL0XW00.FL0XWIXM = FL0XW00.FL0XWIXM + 1;
    end
  end



end // end FL0X210

// Format map 1 Detail lines
Function FL0X220()

   /* ------------------------------------------------------------*/
   /* Move the data from each temporary storage line in the*/
   /* temp storage record to the map fields.*/
   /* darken and protect quantity fields where there is no*/
   /* data to display.*/
   /* ------------------------------------------------------------*/

  if (FL0XW00.FL0XWRLI == 1) /* Right page*/
    FL0XW00.FL0XWIX2 = 8;
  else
    if (FL0XW00.FL0XWRLI == 9)
      FL0XW00.FL0XWIX2 = 12; /* Left page*/
    end
  end

  FL0XW00.FL0XWIXM = 1; /* Map line index*/

  while (FL0XW00.FL0XWIXM <= FL0XW00.FL0XWMAX /* Max lines per page*/
   && FL0XW02.FY1FCTYC[FL0XWIXM] != " ")


    FL0XM010.FY1FCTYC[FL0XWIXM] = FL0XW02.FY1FCTYC[FL0XWIXM];
    FL0XM010.XCTCD[FL0XWIXM] = FL0XW02.XCTCD[FL0XWIXM];
    FL0XM010.FL0XMTOT[FL0XWIXM] = FL0XW02.FL0XWTOT[FL0XWIXM];
    set FL0XM010.FL0XMTOT[FL0XWIXM] skip;

    FL0XW00.FL0XWIX1 = FL0XW00.FL0XWRLI; /* RIght left index*/

    while (FL0XW00.FL0XWIX1 <= FL0XW00.FL0XWIX2)
      if (FL0XW00.FL0XWIX1 == 1
       || FL0XW00.FL0XWIX1 == 9)
        FL0XM010.FL0XMQT1[FL0XWIXM] = FL0XW02.FL0XWQT1[FL0XWIXM];
        set FL0XM010.FL0XMQT1[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 2
       || FL0XW00.FL0XWIX1 == 10)
        FL0XM010.FL0XMQT2[FL0XWIXM] = FL0XW02.FL0XWQT2[FL0XWIXM];
        set FL0XM010.FL0XMQT2[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 3
       || FL0XW00.FL0XWIX1 == 11)
        FL0XM010.FL0XMQT3[FL0XWIXM] = FL0XW02.FL0XWQT3[FL0XWIXM];
        set FL0XM010.FL0XMQT3[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 4
       || FL0XW00.FL0XWIX1 == 12)
        FL0XM010.FL0XMQT4[FL0XWIXM] = FL0XW02.FL0XWQT4[FL0XWIXM];
        set FL0XM010.FL0XMQT4[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 5)
        FL0XM010.FL0XMQT5[FL0XWIXM] = FL0XW02.FL0XWQT5[FL0XWIXM];
        set FL0XM010.FL0XMQT5[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 6)
        FL0XM010.FL0XMQT6[FL0XWIXM] = FL0XW02.FL0XWQT6[FL0XWIXM];
        set FL0XM010.FL0XMQT6[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 7)
        FL0XM010.FL0XMQT7[FL0XWIXM] = FL0XW02.FL0XWQT7[FL0XWIXM];
        set FL0XM010.FL0XMQT7[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 8)
        FL0XM010.FL0XMQT8[FL0XWIXM] = FL0XW02.FL0XWQT8[FL0XWIXM];
        set FL0XM010.FL0XMQT8[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 9)
        FL0XM010.FL0XMQT1[FL0XWIXM] = FL0XW02.FL0XWQT9[FL0XWIXM];
        set FL0XM010.FL0XMQT1[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 10)
        FL0XM010.FL0XMQT2[FL0XWIXM] = FL0XW02.FL0XWQ10[FL0XWIXM];
        set FL0XM010.FL0XMQT2[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 11)
        FL0XM010.FL0XMQT3[FL0XWIXM] = FL0XW02.FL0XWQ11[FL0XWIXM];
        set FL0XM010.FL0XMQT3[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 12)
        FL0XM010.FL0XMQT4[FL0XWIXM] = FL0XW02.FL0XWQ12[FL0XWIXM];
        set FL0XM010.FL0XMQT4[FL0XWIXM] normal;
      end
      FL0XW00.FL0XWIX1 = FL0XW00.FL0XWIX1 + 1;
    end
    FL0XW00.FL0XWIXM = FL0XW00.FL0XWIXM + 1;
  end




end // end FL0X220

// Check attention ID
Function FL0X300()


   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    FL0XW00.FL0XWRDF = "Y"; /* Request data*/
    FL0XW00.FL0XWQCF = "N";
    converseLib.clearScreen();
     /* Clear the map fields*/
    FL0XM010.XXXPRCNM = "FL0X";
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Validate scroll request if  PF7 or PF8*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* Scroll forward requested*/

    FL0X310(); /* Validate scroll request*/
    return; /* Exit to next process*/

  end


   /* ------------------------------------------------------------*/
   /* Validate scroll request if  PF10 or PF11*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll right requested*/
   || converseVar.eventKey is pf11) /* Scroll left  requested*/

    FL0X320(); /* Validate scroll request*/
    return; /* Exit to next process*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/

  if (FL0XM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FL0X110(); /* Purge temp storage*/

      COMMAREA.CATOAP = FL0XM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FL0XM010.CAITEM; /* TO application key*/
      XSFLS01();
      set FL0XM010.CATOAP cursor, bold;
      exit stack;
    else
      FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* Help screen requested*/

    FL0X110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF3 transfer to Fl0M (LR production schedule menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* menu screen requested*/

    FL0X110(); /* Purge temp storage*/
    set FLWREC empty;
    COMMAREA.CAUSERA = FLWREC.CAUSERA;

    COMMAREA.CATOAP = "FL0M"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0N (Master menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* Menu screen requested*/

    FL0X110(); /* Purge temp storage*/
    set FLWREC empty;
    COMMAREA.CAUSERA = FLWREC.CAUSERA;

    COMMAREA.CATOAP = "MN0N"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF5 transfer to FY0M (Production menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* Menu screen requested*/

    FL0X110(); /* Purge temp storage*/
    set FLWREC empty;
    COMMAREA.CAUSERA = FLWREC.CAUSERA;

    COMMAREA.CATOAP = "FY0M"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Continue processing if following keys are pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Process screen input*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* On PF14 transfer to FL0R(Schedule selection)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Schedule selection*/

    FL0X110(); /* Purge temp storage*/
    set FLWREC empty;
    COMMAREA.CAUSERA = FLWREC.CAUSERA;

    COMMAREA.CATOAP = "FL0R"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF20 transfer to FL0T (Summary schedule list)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* Summary schedule list*/

    FL0X110(); /* Purge temp storage*/
    set FLWREC empty;
    COMMAREA.CAUSERA = FLWREC.CAUSERA;

    COMMAREA.CATOAP = "FL0T"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF21 transfer to FL0U (Report requests)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf21) /* Report requests*/

    FL0X110(); /* Purge temp storage*/
    set FLWREC empty;
    COMMAREA.CAUSERA = FLWREC.CAUSERA;

    COMMAREA.CATOAP = "FL0U"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* Clear screen if PA1 or PA3 and exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa1 /* PA1 pressed*/
   || converseVar.eventKey is pa3) /* PA3 pressed*/
    set FL0XM010 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/


  FL0XM010.XXXPRCNM = "FL0X300";
  converseLib.validationFailed(03); /* PF key not supported on this screen*/
  exit stack;



end // end FL0X300

// Validate scroll request
Function FL0X310()



   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FL0XW00.FL0XWTSP < 2)       /* and no previous pages*/

    FL0XM010.XXXPRCNM = "FL0X131"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/



  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FL0XW00.FL0XWTSP >= FL0XW00.TA5TSQIX) /* and no more pages*/

    FL0XM010.XXXPRCNM = "FL0X310"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end


  if (converseVar.eventKey is pf7 /* Scroll backward request*/
   && FL0XW00.FL0XWTSP == 1)      /* on first page*/

    FL0XM010.XXXPRCNM = "FL0X310"; /* Module identification*/
    converseLib.validationFailed(6); /* No more pages to display*/

  end
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end



end // end FL0X310

// Validate Rig/lft screen rqst
Function FL0X320()



   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that data exists.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/
    if (FL0XW00.FL0XWRLI == 9) /* No more date quantities*/

      FL0XM010.XXXPRCNM = "FL0X320"; /* Module identification*/
      converseLib.validationFailed(24); /* No previous page to display*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that data exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/
    if (FL0XW00.FL0XWRLI == 1) /* No more date quantities*/

      FL0XM010.XXXPRCNM = "FL0X320"; /* Module identification*/
      converseLib.validationFailed(23); /* No previous page to display*/
    end
  end


  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end



end // end FL0X320

// Reset highlighted fields
Function FL0X400()

   /* ----------------------------------------------------*/
   /* Set the country code and schedule number defined*/
   /* either defined or normal.*/
   /* ----------------------------------------------------*/

  set FL0XM010.FL0XMSCN initialAttributes;
  set FL0XM010.FL0XMCTY initialAttributes;

   /* ----------------------------------------------------*/
   /* Set map data quantities normal or defined*/
   /* ----------------------------------------------------*/

  FL0XW00.FL0XWIXM = 1; /* Map line index*/

  while (FL0XW00.FL0XWIXM <= FL0XW00.FL0XWMAX /* Max lines per page*/
   && FL0XW02.FY1FCTYC[FL0XWIXM] != " ")

    FL0XW00.FL0XWIX1 = 1;
    while (FL0XW00.FL0XWIX1 <= 8) /* Max dates per page*/

      if (FL0XW00.FL0XWIX1 == 1)
        set FL0XM010.FL0XMQT1[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 2)
        set FL0XM010.FL0XMQT2[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 3)
        set FL0XM010.FL0XMQT3[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 4)
        set FL0XM010.FL0XMQT4[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 5)
        set FL0XM010.FL0XMQT5[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 6)
        set FL0XM010.FL0XMQT6[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 7)
        set FL0XM010.FL0XMQT7[FL0XWIXM] normal;
      end
      if (FL0XW00.FL0XWIX1 == 8)
        set FL0XM010.FL0XMQT8[FL0XWIXM] normal;
      end
      FL0XW00.FL0XWIX1 = FL0XW00.FL0XWIX1 + 1;
    end
    FL0XW00.FL0XWIXM = FL0XW00.FL0XWIXM + 1;
  end

  if (FL0XM010.FL0XMCTY == "?") /* country code list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FLWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end

  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes*/
   /* ------------------------------------------------------------*/

  if (FL0XM010.FL0XMCTY == "?") /* product type requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CTRY CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FL0XM010.FL0XMCTY = FL0XW01.FL0XWCTY; /* Restore prior code*/
    else
      FL0XM010.FL0XMCTY = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
    end

    set FL0XM010.FL0XMCTY cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FLWREC.XXXMODID = "400"; /* Module identification*/

  exit stack; /* Exit to display map*/





end // end FL0X400

// Verify entered data
Function FL0X500()


  FL0XM010.XXXPRCNM = "FL0X500 ";

   /* ----------------------------------------------------*/
   /* If no key fields have been entered indicate an*/
   /* error and ezeflo to display map.*/
   /* ----------------------------------------------------*/

  if (FL0XM010.FL0XMCTY == " ") /* Schedule nbr*/
    converseLib.validationFailed(08); /* Enter a valid value*/
    set FL0XM010.FL0XMCTY cursor, bold;
    exit stack;
  end

  if (FL0XM010.FL0XMSCN == 0) /* Schedule nbr*/
    converseLib.validationFailed(08); /* Enter a valid value*/
    set FL0XM010.FL0XMSCN cursor, bold;
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* If scrolling was requested and key data was*/
   /* changed--indicate an error.*/
   /* ----------------------------------------------------*/

  FL0XW00.FL0XWKFC = "N"; /* Key fields changed flag*/

  if (FL0XW01.FL0XWSCN != FL0XM010.FL0XMSCN /* Schedule nbrchanged*/
   || FL0XW01.FL0XWCTY != FL0XM010.FL0XMCTY) /* Countrychanged*/
    FL0XW00.FL0XWKFC = "Y"; /* Key fields changed flag*/
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)
    if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
      converseLib.validationFailed(111); /* Displayed data can't change with function*/
      exit stack;
    end
  end

   /* ----------------------------------------------------*/
   /* Determine if any quantity data fields have been*/
   /* changed--if changed and negative it's an error.*/
   /* If enter was pressed and quantity fields and key*/
   /* fields have changed set up error message.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (FL0XW01.FL0XWSCN != FL0XM010.FL0XMSCN /* Schedule nbr*/
     || FL0XW01.FL0XWCTY != FL0XM010.FL0XMCTY) /* Country*/
      FL0XW00.FL0XWKFC = "Y"; /* Key fields changed flag*/
    end
  end


  if (FL0XW00.FL0XWRLI == 1) /* Right page of data*/
    FL0XW00.FL0XWIX2 = 8;
  else
    if (FL0XW00.FL0XWRLI == 9) /* Left page of data*/
      FL0XW00.FL0XWIX2 = 12;
    end
  end

  FL0XW00.FL0XWQCF = "N"; /* Quantity fields changed flag.*/

  FL0XW00.FL0XWIXM = FL0XW00.FL0XWMAX; /* Map line index*/

  while (FL0XW00.FL0XWIXM >= 1) /* Max lines per page*/
    if (FL0XW02.FY1FCTYC[FL0XWIXM] != " ")

      FL0XW00.FL0XWIX1 = FL0XW00.FL0XWIX2; /* RIght left index*/

      while (FL0XW00.FL0XWIX1 >= FL0XW00.FL0XWRLI)
        if (FL0XW00.FL0XWIX1 == 1)
          if (FL0XW02.FL0XWQT1[FL0XWIXM] != FL0XM010.FL0XMQT1[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT1[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT1[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT1[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 2)
          if (FL0XW02.FL0XWQT2[FL0XWIXM] != FL0XM010.FL0XMQT2[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT2[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT2[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT2[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 3)
          if (FL0XW02.FL0XWQT3[FL0XWIXM] != FL0XM010.FL0XMQT3[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT3[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT3[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT3[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 4)
          if (FL0XW02.FL0XWQT4[FL0XWIXM] != FL0XM010.FL0XMQT4[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT4[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT4[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT4[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 5)
          if (FL0XW02.FL0XWQT5[FL0XWIXM] != FL0XM010.FL0XMQT5[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT5[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT5[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT5[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 6)
          if (FL0XW02.FL0XWQT6[FL0XWIXM] != FL0XM010.FL0XMQT6[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT6[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT6[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT6[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 7)
          if (FL0XW02.FL0XWQT7[FL0XWIXM] != FL0XM010.FL0XMQT7[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT7[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT7[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT7[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 8)
          if (FL0XW02.FL0XWQT8[FL0XWIXM] != FL0XM010.FL0XMQT8[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT8[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT8[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT8[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 9)
          if (FL0XW02.FL0XWQT9[FL0XWIXM] != FL0XM010.FL0XMQT1[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT1[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT1[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT1[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 10)
          if (FL0XW02.FL0XWQ10[FL0XWIXM] != FL0XM010.FL0XMQT2[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT2[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT2[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT2[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 11)
          if (FL0XW02.FL0XWQ11[FL0XWIXM] != FL0XM010.FL0XMQT3[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT3[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT3[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT3[FL0XWIXM] cursor, bold;
            end
          end
        end
        if (FL0XW00.FL0XWIX1 == 12)
          if (FL0XW02.FL0XWQ12[FL0XWIXM] != FL0XM010.FL0XMQT4[FL0XWIXM])
            FL0XW00.FL0XWQCF = "Y"; /* Qty field changed flag*/
            if (FL0XM010.FL0XMQT4[FL0XWIXM] < 0)
              converseLib.validationFailed(118); /* Cannot enter a negative number*/
              set FL0XM010.FL0XMQT4[FL0XWIXM] cursor, bold;
            end
            if (FL0XW00.FL0XWKFC == "Y") /* Key fields changed*/
              converseLib.validationFailed(128); /* Can't update if key data changed*/
              set FL0XM010.FL0XMQT4[FL0XWIXM] cursor, bold;
            end
          end
        end
        FL0XW00.FL0XWIX1 = FL0XW00.FL0XWIX1 - 1;
      end
    end
    FL0XW00.FL0XWIXM = FL0XW00.FL0XWIXM - 1;
  end


   /* ----------------------------------------------------*/
   /* If date quantity fields have changed and scrolling key*/
   /* pressed set up error message and ezelflo to*/
   /* display map.*/
   /* ----------------------------------------------------*/


  if (FL0XW00.FL0XWQCF == "Y") /* Quantity fields changed*/
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf10
     || converseVar.eventKey is pf11)
      converseLib.validationFailed(111); /* Displayed data can't change with function*/
      exit stack;
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  FL0XM010.XXXPRCNM = " ";

end // end FL0X500

// Process valid input
Function FL0X600()

   /* ----------------------------------------------------*/
   /* If PF7 or PF8 has been pressed increment or*/
   /* decrement the page requested and return to the*/
   /* calling process.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    FL0XW00.FL0XWTSP = FL0XW00.FL0XWTSP - 1;
    FL0XW00.XXXMSGNO = 13;
    return;
  end

  if (converseVar.eventKey is pf8)
    FL0XW00.XXXMSGNO = 12;
    FL0XW00.FL0XWTSP = FL0XW00.FL0XWTSP + 1;
    return;
  end

   /* ----------------------------------------------------*/
   /* If PF10 or PF11 has been pressed increment or*/
   /* decrement the screen requested and return to the*/
   /* calling process.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll right request*/
    FL0XW00.FL0XWRLI = 1; /* SET INDEX TO SECOND SCREEN*/
    FL0XW00.FL0XWRLS = "Y";
    FL0XW00.XXXMSGNO = 14;
    return;

  end

  if (converseVar.eventKey is pf11) /* Scroll left request*/
    FL0XW00.FL0XWRLI = 9; /* SET INDEX TO SECOND SCREEN*/
    FL0XW00.FL0XWRLS = "Y";
    FL0XW00.XXXMSGNO = 15;
    return;

  end
   /* ------------------------------------------------------------*/
   /* On PF14 transfer to FL0R(Schedule selection)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Schedule selection*/

    FL0X110(); /* Purge temp storage*/
    set FLWREC empty;
    COMMAREA.CAUSERA = FLWREC.CAUSERA;

    COMMAREA.CATOAP = "FL0R"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF20 transfer to FL0T (Summary schedule list)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* Summary schedule list*/

    FL0X110(); /* Purge temp storage*/
    set FLWREC empty;
    COMMAREA.CAUSERA = FLWREC.CAUSERA;

    COMMAREA.CATOAP = "FL0T"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF21 transfer to FL0U (Report requests)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf21) /* Report requests*/

    FL0X110(); /* Purge temp storage*/
    set FLWREC empty;
    COMMAREA.CAUSERA = FLWREC.CAUSERA;

    COMMAREA.CATOAP = "FY0U"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFLS01();
    FL0XM010.XXXPRCNM = "FL0X300"; /* Module identification*/
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* If key fields have changed, turn on request for*/
   /* data flag.*/
   /* ----------------------------------------------------*/

  if (FL0XM010.FL0XMSCN != FL0XW01.FL0XWSCN)
    FL0XW01.FL0XWSCN = FL0XM010.FL0XMSCN;
    FL0XW01.FL0XWCTY = FL0XM010.FL0XMCTY;
    FL0XW00.FL0XWRDF = "Y"; /* Request for data flag*/
    FL0XW00.FL0XWTSP = 1;
    move 0 to FL0XW01.FL0XWBYM[1] for all;
    move 0 to FL0XW01.FL0XWTQY[1] for all;
    FL0XW01.FL0XWTOQ = 0;
    return;
  end

  if (FL0XM010.FL0XMCTY != FL0XW01.FL0XWCTY)
    FL0XW01.FL0XWCTY = FL0XM010.FL0XMCTY;
    FL0XW01.FL0XWSCN = FL0XM010.FL0XMSCN;
    FL0XW00.FL0XWRDF = "Y"; /* Request for data flag*/
    FL0XW00.FL0XWTSP = 1;
    move 0 to FL0XW01.FL0XWBYM[1] for all;
    move 0 to FL0XW01.FL0XWTQY[1] for all;
    FL0XW01.FL0XWTOQ = 0;
    return;
  end


   /* ----------------------------------------------------*/
   /* if enter has been pressed and any of the date*/
   /* quantities have changed--do updates.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is enter
   && FL0XW00.FL0XWQCF == "Y")
    FL0X610(); /* Update changed quantities*/
  end

end // end FL0X600

// Update changed quantities
Function FL0X610()


   /* ------------------------------------------------------------*/
   /* compare each date quantity map field with the one in the*/
   /* temp storage record. For any that have changed, obtain the*/
   /* record (verify that the change count is the same) and do*/
   /* an update.  Set the request data flag to 'y' in order to*/
   /* reload the map after all changed fields have been updated.*/
   /* ------------------------------------------------------------*/

  if (FL0XW00.FL0XWRLI == 1) /* Right page of data*/
    FL0XW00.FL0XWIX2 = 8;
  else
    if (FL0XW00.FL0XWRLI == 9)
      FL0XW00.FL0XWIX2 = 12; /* Left page of data*/
    end
  end

  FL0XW00.FL0XWIXM = 1; /* Map line index*/

  while (FL0XW00.FL0XWIXM <= FL0XW00.FL0XWMAX) /* Max lines per page*/
    if (FL0XW02.FY1FCTYC[FL0XWIXM] != " ")

      FL0XW00.FL0XWIX1 = FL0XW00.FL0XWRLI; /* RIght left index*/

      while (FL0XW00.FL0XWIX1 <= FL0XW00.FL0XWIX2)
        if (FL0XW00.FL0XWIX1 == 1)
          if (FL0XW02.FL0XWQT1[FL0XWIXM] != FL0XM010.FL0XMQT1[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT1[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWCC1[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[FL0XWIX1];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 2)
          if (FL0XW02.FL0XWQT2[FL0XWIXM] != FL0XM010.FL0XMQT2[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT2[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWCC2[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[FL0XWIX1];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 3)
          if (FL0XW02.FL0XWQT3[FL0XWIXM] != FL0XM010.FL0XMQT3[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT3[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWCC3[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[FL0XWIX1];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 4)
          if (FL0XW02.FL0XWQT4[FL0XWIXM] != FL0XM010.FL0XMQT4[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT4[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWCC4[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[FL0XWIX1];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 5)
          if (FL0XW02.FL0XWQT5[FL0XWIXM] != FL0XM010.FL0XMQT5[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT5[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWCC5[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[FL0XWIX1];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 6)
          if (FL0XW02.FL0XWQT6[FL0XWIXM] != FL0XM010.FL0XMQT6[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT6[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWCC6[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[FL0XWIX1];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 7)
          if (FL0XW02.FL0XWQT7[FL0XWIXM] != FL0XM010.FL0XMQT7[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT7[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWCC7[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[FL0XWIX1];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 8)
          if (FL0XW02.FL0XWQT8[FL0XWIXM] != FL0XM010.FL0XMQT8[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT8[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWCC8[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[FL0XWIX1];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 9)
          if (FL0XW02.FL0XWQT9[FL0XWIXM] != FL0XM010.FL0XMQT1[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT1[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWCC9[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[1];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 10)
          if (FL0XW02.FL0XWQ10[FL0XWIXM] != FL0XM010.FL0XMQT2[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT2[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWC10[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[2];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 11)
          if (FL0XW02.FL0XWQ11[FL0XWIXM] != FL0XM010.FL0XMQT3[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT3[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWC11[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[3];
            FL0X611(); /* Update each record*/
          end
        end
        if (FL0XW00.FL0XWIX1 == 12)
          if (FL0XW02.FL0XWQ12[FL0XWIXM] != FL0XM010.FL0XMQT4[FL0XWIXM])
            FL0XW00.FL0XWWF1 = FL0XM010.FL0XMQT4[FL0XWIXM] * 1000;
            FL0XW00.FBCFTQTB = FL0XW00.FL0XWWF1;
            FL0XW00.ZZZCHGCT = FL0XW02.FL0XWC12[FL0XWIXM];
            FL0XW00.FL0XWBYM = FL0XM010.FL0XMBYM[4];
            FL0X611(); /* Update each record*/
          end
        end
        FL0XW00.FL0XWIX1 = FL0XW00.FL0XWIX1 + 1;
      end
    end
    FL0XW00.FL0XWIXM = FL0XW00.FL0XWIXM + 1;
  end

  FL0XW00.XXXMSGNO = 32; /* Update successfully completed*/
  FL0XW00.FL0XWRDF = "Y"; /* Request data flag*/
  move 0 to FL0XW01.FL0XWBYM[1] for all;
  move 0 to FL0XW01.FL0XWTQY[1] for all;
  FL0XW01.FL0XWTOQ = 0;

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();


end // end FL0X610

// Update each record
Function FL0X611()

  set FBCREC empty;
  FBCREC.FBCLRNBR = FL0XW01.FL0XWSCN;
  FBCREC.XCTCD = FL0XW02.XCTCD[FL0XWIXM];
  FBCREC.FY1FCTYC = FL0XW02.FY1FCTYC[FL0XWIXM];
  FBCREC.FB8BUYDT = FL0XW00.FL0XWFDT;

  FL0XS03(); /* Obtain unique DFBUY.VSMYPS01*/

  if (FL0XW00.ZZZCHGCT != FBCREC.ZZZCHGCT)
    FL0XW00.XXXMSGNO = 20; /* Record updated since last displayed*/
    move 0 to FL0XW01.FL0XWBYM[1] for all;
    move 0 to FL0XW01.FL0XWTQY[1] for all;
    FL0XW00.FL0XWRDF = "Y";
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    exit stack;
  end

  FBCREC.FBCFTQTB = FL0XW00.FBCFTQTB;

  FL0XS04(); /* Update DFBUY.VSMYPS01 row*/


end // end FL0X611

// Add page to temp storage
Function FL0XS01()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FL0XW02.FL0XWTSL = FL0XW00.FL0XWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FL0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage areas and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FL0XW02 empty; /* Temp storage record*/

    FL0XW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FL0XW00.FL0XWIXT = 0; /* temp storage line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FL0XM010.XXXPRCNM = "FL0XS01"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0XM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "FL0XM010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FL0XS01

// Obtain temp storage page
Function FL0XS02()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data from temporary storage*/
   /* ------------------------------------------------------------*/

  FL0XW02.FL0XWTSL = FL0XW00.FL0XWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FL0XW00.FL0XWTSP; /* Page number requested*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FL0XW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FL0XM010.XXXPRCNM = "FL0XS02"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0XM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0XS02

// Obtain unique DFBUY.VSMYPS01
Function FL0XS03()


  try
    call "IO3500" ("S ", SQLCA, FBCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FL0XW00.XXXMSGNO = 46;
                                   /* Data has been updated by another user*/
      move 0 to FL0XW01.FL0XWBYM[1] for all;
      move 0 to FL0XW01.FL0XWTQY[1] for all;
      FL0XW01.FL0XWTOQ = 0;
      FL0XW00.FL0XWRDF = "Y"; /* Request data flag*/
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL0XS03"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSMYPS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0XM010.XXXPRCNM = "FL0XS03";
  exit stack;

end // end FL0XS03

// Update DFBUY.VSMYPS01 row
Function FL0XS04()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FBCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;



  try
    call "IO3500" ("U ", SQLCA, FBCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      move 0 to FL0XW01.FL0XWBYM[1] for all;
      move 0 to FL0XW01.FL0XWTQY[1] for all;
      FL0XW01.FL0XWTOQ = 0;
      FL0XW00.XXXMSGNO = 20; /* Record updated since last displayed*/
      FL0XW00.FL0XWRDF = "Y"; /* request data flag*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S04 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSMYPS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL0XM010.XXXPRCNM = "FB01S04"; /* Process name*/

  exit stack;

end // end FL0XS04

//*** RECORD=FBCREC ****
// *************** FOOTWEAR FACTORY LOAD/BUY SYSTEM ***********
// **************** summary prod schedule table    ************
// 
// DB2 TABLE VIEW:     VSMYPS01
// 
// COPYLIB MEMBER:     DCL00610
// 
// I/O MODULE:         IO3500
// 
// KEY TO DB2 TABLE    FBCLRNBR
// 
// 
// MAINTENANCE LOG:
// 
// CONTROL     DATE    NAME     COMMENT
// --------  --------  ------   -------------------------------
//           05/26/89  JMCLAU   NEW RECORD DEFINITION.
//           12/20/90  CHYDE    Chg data item desc to db2 name.
// 
// **********************
Record FBCREC type basicRecord
  5 FBCGROUP FBCGROUP ; 
    10 FBCLRNBR FBCLRNBR ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBABDT FBABDT ; 
    10 XCTCD XCTCD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 FBCFTQTB FBCFTQTB ; 
    10 XFRCD XFRCD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FBCREC

//*** RECORD=FL0XW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FL0XW00 type basicRecord
  5 * char(116) ; 
    10 FL0XWTSL FL0XWTSL ; 
    10 FL0XWRDF FL0XWRDF ; 
    10 FL0XWSCF FL0XWSCF ; 
    10 FL0XWRLS FL0XWRLS ; 
    10 FL0XWQCF FL0XWQCF ; 
    10 FL0XWKFC FL0XWKFC ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FL0XWTSP FL0XWTSP ; 
    10 FBCFTQTB FBCFTQTB ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 FL0XWFDT FL0XWFDT ; 
      15 FL0XWFCT FL0XWFCT ; 
      15 FL0XWBYM FL0XWBYM ; 
        20 FL0XWFYY FL0XWFYY ; 
        20 FL0XWFMM FL0XWFMM ; 
      15 FL0XWFDD FL0XWFDD ; 
    10 FL0XWYMD FL0XWYMD ; 
      15 FL0XWYY FL0XWYY ; 
      15 FL0XWMM FL0XWMM ; 
      15 FL0XWDD FL0XWDD ; 
    10 FL0XWBDT FL0XWBDT ; 
      15 FL0XWBYY FL0XWBYY ; 
      15 FL0XWBMM FL0XWBMM ; 
    10 TA1TBLKE TA1TBLKE ; 
      15 FL0XWKA1 FL0XWKA1 ; 
      15 FL0XWKA2 FL0XWKA2 ; 
      15 FL0XWKA3 FL0XWKA3 ; 
      15 FL0XWKA4 FL0XWKA4 ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 FL0XWIXM FL0XWIXM ; 
    10 FL0XWIX1 FL0XWIX1 ; 
    10 FL0XWIX2 FL0XWIX2 ; 
    10 FL0XWIX3 FL0XWIX3 ; 
    10 FL0XWIXT FL0XWIXT ; 
    10 FL0XWRLI FL0XWRLI ; 
    10 FL0XWMAX FL0XWMAX ; 
    10 * char(1) ; 
    10 FL0XWWF1 FL0XWWF1 ; 
    10 FL0XWWF2 FL0XWWF2 ; 
    10 FL0XWWF3 FL0XWWF3 ; 
    10 XXXMSGNO XXXMSGNO ; 
end // end FL0XW00

//*** RECORD=FL0XW01 ****
// Fl0xm010 map heading storage record
// ***********************
Record FL0XW01 type basicRecord
  10 FL0XWSCN FL0XWSCN ; 
  10 FL0XWCTY FL0XWCTY ; 
  10 FL0XWBYM FL0XWBYM [12] ; 
  10 FL0XWTOQ FL0XWTOQ ; 
  10 FL0XWTQY FL0XWTQY [12] ; 
end // end FL0XW01

//*** RECORD=FL0XW02 ****
// Fl0x temporary storage detail record
// ***********************
Record FL0XW02 type basicRecord
  5 FL0XW02G FL0XW02G ; 
    10 FL0XWTSL FL0XWTSL ; 
    10 FL0XW02R FL0XW02R ; 
      15 XCTCD XCTCD [13] ; 
      15 FY1FCTYC FY1FCTYC [13] ; 
      15 FL0XWTOT FL0XWTOT [13] ; 
      15 FL0XWQT1 FL0XWQT1 [13] ; 
      15 FL0XWQT2 FL0XWQT2 [13] ; 
      15 FL0XWQT3 FL0XWQT3 [13] ; 
      15 FL0XWQT4 FL0XWQT4 [13] ; 
      15 FL0XWQT5 FL0XWQT5 [13] ; 
      15 FL0XWQT6 FL0XWQT6 [13] ; 
      15 FL0XWQT7 FL0XWQT7 [13] ; 
      15 FL0XWQT8 FL0XWQT8 [13] ; 
      15 FL0XWQT9 FL0XWQT9 [13] ; 
      15 FL0XWQ10 FL0XWQ10 [13] ; 
      15 FL0XWQ11 FL0XWQ11 [13] ; 
      15 FL0XWQ12 FL0XWQ12 [13] ; 
      15 FL0XWCC1 FL0XWCC1 [13] ; 
      15 FL0XWCC2 FL0XWCC2 [13] ; 
      15 FL0XWCC3 FL0XWCC3 [13] ; 
      15 FL0XWCC4 FL0XWCC4 [13] ; 
      15 FL0XWCC5 FL0XWCC5 [13] ; 
      15 FL0XWCC6 FL0XWCC6 [13] ; 
      15 FL0XWCC7 FL0XWCC7 [13] ; 
      15 FL0XWCC8 FL0XWCC8 [13] ; 
      15 FL0XWCC9 FL0XWCC9 [13] ; 
      15 FL0XWC10 FL0XWC10 [13] ; 
      15 FL0XWC11 FL0XWC11 [13] ; 
      15 FL0XWC12 FL0XWC12 [13] ; 
end // end FL0XW02

// fb_trgt_qtb
DataItem FBCFTQTB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem FBCGROUP char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FL0XW02G char(1096)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage record
DataItem FL0XW02R char(1092)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date
DataItem FL0XWBDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FL0XWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date yymm
DataItem FL0XWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem FL0XWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count10
DataItem FL0XWC10 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count11
DataItem FL0XWC11 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count12
DataItem FL0XWC12 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count1
DataItem FL0XWCC1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count2
DataItem FL0XWCC2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count3
DataItem FL0XWCC3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count4
DataItem FL0XWCC4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count5
DataItem FL0XWCC5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count6
DataItem FL0XWCC6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count7
DataItem FL0XWCC7 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count8
DataItem FL0XWCC8 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record change count9
DataItem FL0XWCC9 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entered country code
DataItem FL0XWCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DD
DataItem FL0XWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat century
DataItem FL0XWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem FL0XWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem FL0XWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat month
DataItem FL0XWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat year
DataItem FL0XWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 1
DataItem FL0XWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem FL0XWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 3
DataItem FL0XWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FL0XWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage index
DataItem FL0XWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of key char
DataItem FL0XWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem FL0XWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem FL0XWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem FL0XWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key fields changed flag
DataItem FL0XWKFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max lines per map
DataItem FL0XWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM
DataItem FL0XWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 10
DataItem FL0XWQ10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 11
DataItem FL0XWQ11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 12
DataItem FL0XWQ12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Quantity fields changed flag
DataItem FL0XWQCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage quantity 1
DataItem FL0XWQT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 2
DataItem FL0XWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 3
DataItem FL0XWQT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 4
DataItem FL0XWQT4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 5
DataItem FL0XWQT5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 6
DataItem FL0XWQT6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 7
DataItem FL0XWQT7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 8
DataItem FL0XWQT8 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage quantity 9
DataItem FL0XWQT9 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data flag
DataItem FL0XWRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page right left index
DataItem FL0XWRLI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Right/left scroll flag
DataItem FL0XWRLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summary cursor flag
DataItem FL0XWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// entered schedule nbr
DataItem FL0XWSCN num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total quantity
DataItem FL0XWTOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map total field
DataItem FL0XWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date total quantity
DataItem FL0XWTQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage page length
DataItem FL0XWTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Increment and decrement page
DataItem FL0XWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 1
DataItem FL0XWWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 2
DataItem FL0XWWF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 3
DataItem FL0XWWF3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMMDD Date
DataItem FL0XWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FL0XWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

