package fl01;

import corpcom2.XX0XW01;
import corpcom2.YSMREC;
import corpcom3.XPFL001;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCNCD;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XFRCD;
import corpx1.XGACD;
import corpx1.XGADESC;
import corpx1.XGATBL;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpy2.YSMXGA;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB-LATE-BK-FL;
import fb.common.FB-LATE-BK-FL-MDT;
import fb.common.FB8BUYDT;
import fb.common.FB8FFCOM;
import fb.common.FBAMDNBR;
import fb.common.FBAREC;
import fb.common.FBDBTCD;
import fb.common.FBDGROUP;
import fb.common.FBDMDTYP;
import fb.common.FBDPSFTY;
import fb.common.FBDQTB;
import fb.common.FBDREC;
import fb.common.FBDTOQTB;
import fb.common.FBEREC;
import fl.common.FLWREC;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import fy.common.FY2MFGPC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP2LNINB;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PGAREC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY2RSTNB;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FL01 ****
// This application is part of the factory load system.  It
// displays stock quantities to buy by factory and buy month
// for a specified schedule number and style.   All colors
// for the style entered are rolled up into one quantity to
// buy for the style.  The user may move an entire quantity
// (all colors)  to another factory within the same buy
// month by entering a move-from factory and selecting the
// buy month for the move-to factory.
// 
// the user may exit to any allowed application via fast path
// or pf key at any time
// 
//   date      name    description of change
// --------   -----    ----------------------------------------
// 08/31/89   pmainw   created
// 08/31/93   pmainw   Fix invalid data types for CSPV4
//                     conversion.
// y2kfix 12/06/97 pharwo year 2000 changes to map buy-date
//                     as well as changes to fl01111.
// 08/12/99   SKATHI   Map Buy-date field length changed
// *********************
Program FL01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FBAREC FBAREC; // record
  FBDREC FBDREC; // record
  FBEREC FBEREC; // record
  FL01W00 FL01W00; // record
  FL01W01 FL01W01; // record
  FL01W02 FL01W02; // record
  FL01W03 FL01W03; // record
  FL01W04 FL01W04; // record
  FLWREC FLWREC; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use FL01M.FL01M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FL01M001 initial; /* map area*/
    set FL01W00 empty; /* Working storage*/
    set FL01W01 empty; /* map display storage*/
    set FL01W02 empty; /* working storage 2*/
    set FL01W03 empty; /* temp storage page*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temp storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FL01W00.FL01WDRS = "N"; /* Request for data switch*/
    FL01W00.FL01WMCS = "Y"; /* clear and format map switch*/
    FL01W00.FL01WLRS = "L"; /* left or right part of screen switch*/
    FL01W00.FL01W-DELETE-QTY-SW = "N"; /* delete qty switch*/
    FL01W00.FL01W-DEL-OVERRIDE-SW = "N"; /* delete override switch*/
    FL01W00.XXXTSLEN = 4059; /* Temp storage length*/
    ;
    if (FLWREC.FBAMDNBR > 0) /* data in commarea*/
      ;
      FL01W00.FL01WMDN = FLWREC.FBAMDNBR; /* buy dt*/
      FL01W00.SY1STNBR = FLWREC.SY1STNBR; /* style*/
      FL01W00.FL01WDRS = "Y"; /* Request for data switch*/
      ;
      if (FL01W00.SY1STNBR > " ") /* style in commarea*/
        ;
        FL01M001.SY1STNBR = FL01W00.SY1STNBR; /* move style nbr to map*/
        set FL01M001.SY1STNBR cursor;
                                     /* set cursor to style nbr*/
        ;
      end
      ;
      if (FL01W00.FL01WMDA > " ")
                                     /* model number in commarea*/
        ;
        FL01M001.FBAMDNBR = FL01W00.FL01WMDN;
        set FL01M001.FBAMDNBR cursor;
        ;
      end
      ;
    end
    ;
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Default gpc to footwear if blank.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.XGPCD == "  ")
      COMMAREA.XGPCD = "02";
    end
    ;
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL01001; /* Converse the main process*/
    FL01001: FL01001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL01001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FL01

// fl01 main process
Function FL01001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) obtain data to display.*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FL01100(); /* obtain data to display*/
  ;
  FL01200(); /* format and display map*/
  ;
  FL01300(); /* Check attention identifier*/
  ;
  FL01400(); /* Reset fields to normal intensity*/
  ;
  FL01500(); /* Verify the entered data*/
  ;
  FL01600(); /* Process valid input request*/
  ;
  ;
end // end FL01001

// obtain the data to display
Function FL01100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL01W00.FL01WDRS == "Y") /* Data was requested*/
    FL01105(); /* purge temp storage*/
  else
    return; /* Return to previous process*/
  end
  if (converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end
  ;
  ;
  set FL01W01 empty;
  set FL01W02 empty;
  ;
  ;
  FL01W00.FL01WSDS = "N"; /* Initialize style dev switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the key information in map display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  FL01W01.FBAMDNBR = FL01M001.FBAMDNBR; /* model number*/
  FL01W01.SY1STNBR = FL01M001.SY1STNBR; /* style number*/
  FL01W01.FL01M-FROM-FCTY = FL01M001.FL01M-FROM-FCTY; /* from factory*/
  FL01W01.FL01M-NEW-FCTY = FL01M001.FL01M-NEW-FCTY; /* add factory*/
  FL01W01.FL01M-DELETE-FCTY = FL01M001.FL01M-DELETE-FCTY;
                                   /* del factory*/
  ;
  FL01110(); /* get buy dates*/
  FL01126(); /* get style short name*/
  FL01120(); /* get additional product data*/
  FL01130(); /* Select set and open cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the data and load into display ws until end of cursor*/
   /* ------------------------------------------------------------*/
  ;
  set FY1REC empty; /* Initialize factory record*/
  FL01W00.FL01WCTX = 1; /* Initialize cntry index*/
  while (FL01W00.FL01WCSW == "N") /* Until end of cursor*/
    FL01140(); /* Fetch selected rows*/
  end
  ;
  FL01150(); /* Close the selected set cursor*/
  FL01W00.FL01WDRS = "N"; /* Request for data switch*/
  ;
end // end FL01100

// Purge any temporary storage
Function FL01105()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  set TA5REC empty; /* Temp storage parameter record*/
  set FL01W03 empty; /* Temp storage data record*/
  FL01W00.TA5TSQIX = 0; /* Highest page number*/
  FL01W00.FL01W-MAX-TS-PAGES = 0; /* Highest page number*/
  FL01W03.XXXTSLEN = FL01W00.XXXTSLEN; /* Temp storage length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FL01W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "105"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL01105

// get buy dates
Function FL01110()
   /* ------------------------------------------------------------*/
   /* get first buy date*/
   /* ------------------------------------------------------------*/
  ;
  set FBAREC empty; /* initialise record*/
  FBAREC.FBDMDTYP = "FT1"; /* buy type*/
  FBAREC.FBAMDNBR = FL01M001.FBAMDNBR; /* schedule number*/
  ;
  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful calculate dates, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL01111(); /* calculate dates*/
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT BUY DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL01110

// calculate buy date
Function FL01111()
   /* ------------------------------------------------------------*/
   /* convert numeric date ccyymmdd format to yymm format*/
   /* ------------------------------------------------------------*/
  ;
  FL01W00.FL01WDTN = FBAREC.FB8BUYDT; /* move to numeric*/
  FL01W00.FL01WDTB = FL01W00.FL01WDTA; /* move alpha to breakup dt*/
  FL01W00.FL01W-BUY-YEAR = FL01W00.FL01WYRB; /* move year*/
  FL01W00.FL01W-BUY-MONTH = FL01W00.FL01WMOB; /* move month*/
  FL01W00.FL01W-FCTY-INDEX = 1; /* initialise index*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate dates yymm for next 12 months*/
   /* ------------------------------------------------------------*/
  ;
  while (FL01W00.FL01W-FCTY-INDEX <= 12) /* for each month*/
    ;
    FL01W01.FL01W-BUY-DT-YYMM[FL01W-FCTY-INDEX] = FL01W00.FL01W-BUY-DT-YYMM;
                                   /* display ws*/
    ;
    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* IF FL01W00.FL01W-BUY-MONTH EQ 12;/* if december*/
    /* ;*/
    /* MOVE 1 TO FL01W00.FL01W-BUY-MONTH;/* month eq january*/
    /* FL01W00.FL01W-BUY-YEAR = FL01W00.FL01W-BUY-YEAR + 1;*/
    /* /* bump year up 1*/
    /* ;*/
    /* ELSE;*/
    /* ;*/
    /* FL01W00.FL01W-BUY-MONTH = FL01W00.FL01W-BUY-MONTH + 1;*/
    /* /* bump month up 1*/
    /* ;*/
    /* END;*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    if (FL01W00.FL01W-BUY-MONTH == 12) /* if december*/
      ;
      FL01W00.FL01W-BUY-MONTH = 1; /* month eq january*/
      if (FL01W00.FL01W-BUY-YEAR == 99)
        FL01W00.FL01W-BUY-YEAR = 0; /* bump year up 1*/
      else
        FL01W00.FL01W-BUY-YEAR = FL01W00.FL01W-BUY-YEAR + 1;
                                   /* bump year up 1*/
      end
      ;
    else
      ;
      FL01W00.FL01W-BUY-MONTH = FL01W00.FL01W-BUY-MONTH + 1;
                                   /* bump month up 1*/
      ;
    end
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    ;
    FL01W00.FL01W-FCTY-INDEX = FL01W00.FL01W-FCTY-INDEX + 1;
                                   /* increment index*/
    ;
  end
  ;
  ;
end // end FL01111

// get additional product data
Function FL01120()
   /* ------------------------------------------------------------*/
   /* build the key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* initialise work area*/
  PG2REC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
  PG2REC.SY1STNBR = FL01W01.SY1STNBR; /* style number*/
  ;
   /* ------------------------------------------------------------*/
   /* select set for all colors on the  product file*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* get row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      ;
      FL01122(); /* fetch first row*/
      return;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET  PROD DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL01120

// fetch first row
Function FL01122()
  ;
   /* Fetch first row*/
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* get row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL01W01.XGACD = PG2REC.XGACD; /* gender age code*/
      ;
      if (PG2REC.XGACD in XGATBL.XGACD) /* get xgacd description*/
        FL01W01.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
      end
      ;
      ;
      FL01W01.FL01W-SESN-DESC = PG2REC.XSECD;
      FL01W01.FL01W-SESN-YR-CCYY = PG2REC.XSNYR; /* season year ccyy*/
      FL01W01.FL01W-SESN-YR-RNG-YY = FL01W01.FL01W-SESN-YR-YY;
                                   /* season year yy*/
      ;
      ;
      FL01W01.SY2RSTNB = PG2REC.SY2RSTNB; /* style root nbr*/
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      ;
      FL01125(); /* Get sty-dev descriptions*/
      return;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "122"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL01122

// get sty-dev descriptions
Function FL01125()
   /* ------------------------------------------------------------*/
   /* build the key*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty; /* initialise work area*/
  PG4REC.PG4STNBR = FL01W01.SY1STNBR; /* style number*/
  ;
   /* ------------------------------------------------------------*/
   /* get the  row to display from the style development table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* get row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL01W00.FL01WSDS = "Y"; /* Processing a style dev row*/
      FL01W01.XGACD = PG4REC.XGACD; /* gender age code*/
      if (PG4REC.XGACD in XGATBL.XGACD) /* get xga description*/
        FL01W01.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
      end
      ;
      FL01W01.FL01W-SESN-DESC = PG4REC.XSECD;
      FL01W01.FL01W-SESN-YR-CCYY = PG4REC.XSNYR; /* season year ccyy*/
      FL01W01.FL01W-SESN-YR-RNG-YY = FL01W01.FL01W-SESN-YR-YY;
                                   /* season year yy*/
      FL01W01.SY2CLRAB = "             "; /* color abbrv*/
      FL01W01.SY2RSTNB = "      "; /* root style nbr*/
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      ;
      FL01W01.XGACD = "  "; /* gender age code*/
      FL01W01.XGADESC = "               "; /* gender age description*/
      FL01W01.SY2CLRAB = "*************"; /* color abbrv*/
      FL01W01.SY2RSTNB = "******"; /* root style nbr*/
      return;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL01W01.SY1STNBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL01125

// Get style short name
Function FL01126()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPRODG.VSYPRD01*/
   /* ---------------------------------------------------------*/
  ;
  ;
  set PGAREC empty;
  ;
  PGAREC.XGPCD = COMMAREA.XGPCD;
  ;
  PGAREC.SY1STNBR = FL01M001.SY1STNBR;
  ;
  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FL01W01.SY1SSTNM = PGAREC.PGASSTNM;
    return;
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/
      ;
      FL01W01.SY1SSTNM = "************";
      return;
      ;
    else
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "GET SHORT STYLE NAME            ";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        ;
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
        ;
      else
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end FL01126

// select set and open cursor
Function FL01130()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  FL01W00.FL01WCSW = "N"; /* End of cursor switch*/
  set FBDREC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  FBDREC.FBDMDTYP = "FT1"; /* model type*/
  FBDREC.FBAMDNBR = FL01M001.FBAMDNBR; /* model number*/
  FBDREC.FBDBTCD = "STK"; /* buy type code*/
  FBDREC.SY1STNBR = FL01M001.SY1STNBR; /* style number*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("S2", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      FL01W00.FL01WCSW = "Y"; /* set end of cursor*/
      FLWREC.XXXMODID = "130"; /* error module id*/
      converseLib.validationFailed(18); /* no data to display*/
      set FL01M001.FBAMDNBR cursor, bold; /* highlight*/
      set FL01M001.SY1STNBR bold; /* highlight*/
      exit stack; /* return to display map*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF FLQTB ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL01130

// fetch selected rows
Function FL01140()
  FL01W00.FL01W-TS-LINE-INDEX = 1; /* initialise index*/
  ;
  FL01141(); /* get next row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
    ;
    if (FLWREC.XXXMSGNO == 32) /* update successful*/
      ;
      FL01W00.FL01WDRS = "N"; /* don't request data*/
      FL01150(); /* close set cursor*/
      exit stack;
      ;
    else
      ;
      FLWREC.XXXMODID = "140"; /* module name*/
      converseLib.validationFailed(18); /* no data to display*/
      set FL01M001.FBAMDNBR cursor, bold;
      set FL01M001.SY1STNBR bold; /* highlight*/
      exit stack;
      ;
    end
    ;
  else
    ;
    FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX] = FBDREC.FBDGROUP;
                                   /* record group move*/
    FL01W00.FL01WMAX = FL01W00.FL01W-TS-LINE-INDEX;
                                   /* vflqtb01 row count*/
    FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
                                   /* increment index*/
  end
  ;
  FY1REC.FY1FCTYC = "XXXX"; /* to force a lookup on the first*/
                                 /* factory even if blank*/
  ;
  while (FL01W00.FL01WCSW != "Y") /* until end of cursor*/
    FL01141(); /* get next row*/
    FL01143(); /* get country name*/
    if (FL01W00.FL01WCSW != "Y") /* until end of cursor*/
      FL01W00.FL01WMAX = FL01W00.FL01WMAX + 1; /* increment vflqtb01 count*/
      FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX] = FBDREC.FBDGROUP;
                                   /* record group move*/
      FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
                                   /* increment index*/
      if (FL01W00.FL01W-TS-LINE-INDEX > 33) /* rows per temp storage page*/
        FL01144(); /* add page to temp storgae*/
        FL01W00.FL01W-TS-LINE-INDEX = 1; /* start index over*/
      end
    else
      FL01144(); /* add page to temp storgae*/
    end
    ;
    ;
  end
  ;
  ;
end // end FL01140

// get next lrps row
Function FL01141()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the flqtb table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("N2", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FL01W00.FL01WCSW = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "141"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT FLQTB ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL01141

// Get contry name
Function FL01143()
  ;
  ;
  ;
  if (FBDREC.FY1FCTYC != FY1REC.FY1FCTYC)
    FY1REC.FY1FCTYC = FBDREC.FY1FCTYC;
    FY1REC.XGPCD = COMMAREA.XGPCD;
    try
      call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/
    ;
   /* ------------------------------------------------------------*/
    /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000") /* Call successful*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        FL01W02.XCTCD[FL01WCTX] = FY1REC.XCTCD; /* Mfg. xctcd*/
        FL01W00.FL01WCTX = FL01W00.FL01WCTX + 1;
        return; /* Return to previous process*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* factory not found*/
          FL01W02.XCTCD[FL01WCTX] = "    "; /* Mfg. xctcd*/
          FL01W00.FL01WCTX = FL01W00.FL01WCTX + 1;
          return; /* Return to previous process*/
        end
      end
      ;
    end
    ;
   /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FLWREC.XXXMODID = "143"; /* Module identification*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT FACTORY   ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
    TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    return; /* Exit to display map*/
  end
end // end FL01143

// Add page to temporary storage
Function FL01144()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FL01W03.XXXTSLEN = FL01W00.XXXTSLEN; /* Temp storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FL01W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  ;
   /* ------------------------------------------------------------*/
    /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    FL01W00.FL01W-MAX-TS-PAGES = FL01W00.FL01W-MAX-TS-PAGES + 1;
                                                   /* Incement Max TS pages*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "144"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Exit to display map*/
  ;
  ;
end // end FL01144

// close flqtb cursor
Function FL01150()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows for flqtb*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("C2", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE FLQTB SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL01150

// format and display the map
Function FL01200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0 /* No error found*/
   || converseVar.validationMsgNum == 18) /* Or no data to display*/
    ;
    if (FL01W00.FL01WMCS == "Y") /* Map must be formatted*/
      ;
      FL01210(); /* Format the data on the map*/
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    FLWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FL01M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL01M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL01M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FLWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FL01M001.XXXMODID = FLWREC.XXXMODID; /* Module identification*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end /* Message number*/
   /* SET FL01M001 ALARM;             /* Indicate sound alarm*/
    ;
  end
  ;
  ;
  converse FL01M001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.XXXMODID = " "; /* Module identification*/
  FLWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CATOAP = FL01M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL01M001.CAITEM; /* Application data*/
  ;
  ;
end // end FL01200

// format map
Function FL01210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FL01M001 initial; /* Map input/output area*/
  FL01W00.FL01WMCS = "N"; /* reset map clear switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FL01M001.XGACD = FL01W01.XGACD; /* gender age code*/
  FL01M001.XGADESC = FL01W01.XGADESC; /* gender age description*/
  FL01M001.XCNCD = FL01W01.XCNCD; /* construction code*/
  if (FL01W01.FL01W-SESN-DESC != "  ")
    FL01M001.FL01WSNS = FL01W01.FL01WSNS; /* season cd and yr comb*/
  else
    FL01M001.FL01WSNS = "    "; /* season cd and yr comb*/
  end
  ;
  FL01M001.FL01M-FROM-FCTY = FL01W01.FL01M-FROM-FCTY; /* from factory*/
  FL01M001.FBAMDNBR = FL01W01.FBAMDNBR; /* model number*/
  FL01M001.SY1STNBR = FL01W01.SY1STNBR; /* Style number*/
  FL01M001.XGACD = FL01W01.XGACD; /* gender age code*/
  FL01M001.XGADESC = FL01W01.XGADESC; /* gender age description*/
  FL01M001.SY1SSTNM = FL01W01.SY1SSTNM; /* style short name*/
  FL01M001.XCNCD = FL01W01.XCNCD; /* construction code*/
  ;
  if (FL01W00.FL01WLRS == "L") /* formatting left side*/
    FL01W00.FL01W-START-COLUMN = 0; /* start column*/
  else /* formatting right side*/
    FL01W00.FL01W-START-COLUMN = 6; /* start column*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move 6 buy months (in the format YYMM) to the header*/
   /* ------------------------------------------------------------*/
  FL01W00.FL01W-HDR-BUY-DT-INDEX = 1; /* initialise column index*/
  ;
  while (FL01W00.FL01W-HDR-BUY-DT-INDEX <= 6)
    FL01W00.FL01WWIX = FL01W00.FL01W-HDR-BUY-DT-INDEX +     FL01W00.FL01W-START-COLUMN;
    FL01M001.FL01M-BUY-DT-YYMM[FL01W-HDR-BUY-DT-INDEX] = FL01W01.FL01W-BUY-DT-YYMM[FL01WWIX];
    FL01W00.FL01W-HDR-BUY-DT-INDEX = FL01W00.FL01W-HDR-BUY-DT-INDEX + 1;
  end
  ;
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* This is not a typical use of temp storage where there*/
   /* is one page of temp storage per map page.*/
   /* There will never be more than 13 lines of display data,*/
   /* if so the application ignors them.  There may however be*/
   /* a large number of rows stored to produce those lines.*/
   /* Temporary storage is used so that there will be no hard*/
   /* limit to the number of rows stored. (CSP records can only*/
   /* be 32K).*/
   /* ------------------------------------------------------------*/
  FL01W00.FL01W-TS-INDEX = 1; /* Temp storage page LINE COUNT*/
  FL01W00.TA5TSQIX = 1; /* current page number*/
  ;
  while (FL01W00.TA5TSQIX <= FL01W00.FL01W-MAX-TS-PAGES) /* Max pages*/
    FL01225(); /* Read temp storage*/
    FL01W00.FL01W-TS-LINE-INDEX = 1; /* Re-intialize TS line counter*/
    while (FL01W00.FL01W-TS-INDEX <= FL01W00.FL01WMAX /* Until no more rows*/
     && FL01W00.FL01W-TS-LINE-INDEX <= 33) /* end of temp storage page*/
      FL01220(); /* Load quantities to mapp*/
    end
    FL01W00.TA5TSQIX = FL01W00.TA5TSQIX + 1; /* Increment page*/
  end
  ;
  ;
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position*/
   /* ------------------------------------------------------------*/
  ;
  if (FL01M001.FBAMDNBR > 0
   && FL01M001.SY1STNBR > "  ")
    ;
    set FL01M001.SY1STNBR cursor; /* establish csr position*/
    ;
  else
    ;
    set FL01M001.FBAMDNBR cursor; /* establish csr position*/
    ;
  end
  ;
  ;
end // end FL01210

// Load quantities to mapp
Function FL01220()
  ;
    /* Accumulate quantities on the map.  The correct factory*/
    /* must be found first, then the buy month column must be found*/
    /* and then the quantity can be added to the appropriate bucket.*/
  ;
  ;
  ;
  FBDREC.FBDGROUP = FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX];
                                                              /* group move*/
  ;
  ;
       /* ------------------------------------------------------------*/
        /* convert numeric date ccyymmdd format to yymm format*/
       /* ------------------------------------------------------------*/
  FL01W00.FL01WDTN = FBDREC.FB8BUYDT; /* move to numeric*/
  FL01W00.FL01WDTB = FL01W00.FL01WDTA;
                                   /* move alpha to breakup dt*/
  FL01W00.FL01W-BUY-YEAR = FL01W00.FL01WYRB; /* move year*/
  FL01W00.FL01W-BUY-MONTH = FL01W00.FL01WMOB; /* move month*/
  ;
  FL01W00.FL01W-FCTY-INDEX = 1; /* Initialize factory index*/
  if (FL01W00.FL01W-TS-LINE-INDEX == 1
   && FL01W00.TA5TSQIX == 1)
    FL01M001.FY1FCTYC[FL01W-FCTY-INDEX] = FBDREC.FY1FCTYC;
    FL01M001.XCNCD = FBDREC.XCNCD;
  end
  while (FL01W00.FL01W-FCTY-INDEX <= 13) /* Scan all factories on the map*/
    FL01M001.XCTCD[FL01W-FCTY-INDEX] = FL01W02.XCTCD[FL01W-FCTY-INDEX];
    if (FBDREC.FY1FCTYC == FL01M001.FY1FCTYC[FL01W-FCTY-INDEX])
      FL01W00.FL01W-HDR-BUY-DT-INDEX = 1; /* header buy date index*/
      ;
      while (FL01W00.FL01W-HDR-BUY-DT-INDEX <= 6)
        if (FL01W00.FL01WNDT == 
        FL01M001.FL01M-BUY-DT-YYMM[FL01W-HDR-BUY-DT-INDEX])
                                   /* found column*/
    /* the formula for getting the map index for the quantity*/
    /* is as follows:*/
    /* ((factory-index - 1) * 6)+ column-index*/
          ;
          FL01W00.FL01WQIX = FL01W00.FL01W-FCTY-INDEX - 1;
          FL01W00.FL01WQIX = 6 * FL01W00.FL01WQIX +           FL01W00.FL01W-HDR-BUY-DT-INDEX;
          FL01M001.FBDQTB[FL01WQIX] = FL01M001.FBDQTB[FL01WQIX] +           FBDREC.FBDQTB;
        end
        FL01W00.FL01W-HDR-BUY-DT-INDEX = FL01W00.FL01W-HDR-BUY-DT-INDEX + 1;
      end
      FL01W00.FL01W-FCTY-INDEX = 13; /* Done Scanning all factories on the*/
                                   /* map*/
      ;
    else
      if (FL01M001.FY1FCTYC[FL01W-FCTY-INDEX] == "  "
       && FL01W00.FL01W-FCTY-INDEX > 1)
        FL01M001.FY1FCTYC[FL01W-FCTY-INDEX] = FBDREC.FY1FCTYC;
        ;
        FL01W00.FL01W-HDR-BUY-DT-INDEX = 1; /* header buy date index*/
        ;
        while (FL01W00.FL01W-HDR-BUY-DT-INDEX <= 6)
          if (FL01W00.FL01WNDT == 
          FL01M001.FL01M-BUY-DT-YYMM[FL01W-HDR-BUY-DT-INDEX])
                                   /* found column*/
    /* the formula for getting the map index for the quantity*/
    /* is as follows:*/
    /* ((factory-index - 1) * 6)+ column-index*/
            ;
            FL01W00.FL01WQIX = FL01W00.FL01W-FCTY-INDEX - 1;
            FL01W00.FL01WQIX = 6 * FL01W00.FL01WQIX +             FL01W00.FL01W-HDR-BUY-DT-INDEX;
            FL01M001.FBDQTB[FL01WQIX] = FL01M001.FBDQTB[FL01WQIX] +             FBDREC.FBDQTB;
          end
          FL01W00.FL01W-HDR-BUY-DT-INDEX = FL01W00.FL01W-HDR-BUY-DT-INDEX +           1;
        end
        FL01W00.FL01W-FCTY-INDEX = 13; /* Done Scanning all factories on the*/
                                   /* map*/
      end
    end
    ;
    FL01W00.FL01W-FCTY-INDEX = FL01W00.FL01W-FCTY-INDEX + 1;
  end
  FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
  FL01W00.FL01W-TS-INDEX = FL01W00.FL01W-TS-INDEX + 1;
  ;
  ;
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position*/
   /* ------------------------------------------------------------*/
  ;
  if (FL01M001.FBAMDNBR > 0
   && FL01M001.SY1STNBR > "  ")
    ;
    set FL01M001.SY1STNBR cursor; /* establish csr position*/
    ;
  else
    ;
    set FL01M001.FBAMDNBR cursor; /* establish csr position*/
    ;
  end
  ;
  ;
end // end FL01220

// Read temp storage
Function FL01225()
  ;
  ;
  set FL01W03 empty; /* Temp storage record*/
  FL01W03.XXXTSLEN = FL01W00.XXXTSLEN; /* Temp storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FL01W00.TA5TSQIX; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FL01W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FLWREC.XXXMODID = "225"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FL01225

// check attention identifier
Function FL01300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FL01W00.FL01WMCS = "Y"; /* Clear the map fields*/
    FL01W00.FL01W-DELETE-QTY-SW = "N"; /* delete qty switch*/
    FL01W00.FL01W-DEL-OVERRIDE-SW = "N"; /* delete override switch*/
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* application data*/
    FL01W00.FL01WLRS = "L"; /* left side of page*/
    ;
    if (FL01W00.FL01WDRS == "Y") /* data was requested*/
      set FL01W01 empty; /* reset display working storage*/
      FL01W00.FL01WDRS = "N"; /* reset request for data sw*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (FL01M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FLWREC.FBAMDNBR = FL01M001.FBAMDNBR; /* buy dt*/
      FLWREC.SY1STNBR = FL01M001.SY1STNBR; /* style*/
      ;
      XSFLS01(); /* Exit to another application*/
      FLWREC.XXXMODID = "300"; /* Process name*/
      set FL01M001.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
      ;
    else
      ;
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FLWREC.XXXMODID = "300"; /* Process name*/
      ;
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf21)
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0PM001"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FL0M";
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FL0O";
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FL0P";
    end
    ;
    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FL0Q";
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FL0V";
    end
    ;
    if (converseVar.eventKey is pf18) /* PF20 was pressed*/
      COMMAREA.CATOAP = "FL0W";
    end
    ;
    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "FL0U";
    end
    ;
    FLWREC.FBAMDNBR = FL01M001.FBAMDNBR; /* buy dt*/
    FLWREC.SY1STNBR = FL01M001.SY1STNBR; /* style*/
    ;
    XSFLS01(); /* transfer to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf9  /* update*/
   && converseVar.eventKey not pf10 /* scroll left*/
   && converseVar.eventKey not pf11) /* scroll right*/
    ;
    converseLib.validationFailed(3); /* invalid key*/
    FLWREC.XXXMODID = "300"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      ;
      converseLib.clearScreen();
       /* reset map*/
      ;
    end
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end FL01300

// reset highlighted fields
Function FL01400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FL01M001.FBAMDNBR initialAttributes; /* factory model number*/
  set FL01M001.SY1STNBR initialAttributes; /* style number*/
  set FL01M001.FL01M-FROM-FCTY initialAttributes; /* from factory*/
  set FL01M001.FL01M-NEW-FCTY initialAttributes; /* new factory*/
  set FL01M001.FL01M-DELETE-FCTY initialAttributes; /* delete factory*/
  FL01W00.FL01W-FCTY-INDEX = 1; /* initialise index*/
  ;
  while (FL01W00.FL01W-FCTY-INDEX <= 78) /* for each entry*/
    set FL01M001.FL01M-SELECTED[FL01W-FCTY-INDEX] initialAttributes; /* select code*/
    FL01W00.FL01W-FCTY-INDEX = FL01W00.FL01W-FCTY-INDEX + 1;
                                   /* increment index*/
  end
  ;
  FL01W00.FL01W-FCTY-INDEX = 1; /* initialise index*/
  ;
  while (FL01W00.FL01W-FCTY-INDEX < 14) /* for each entry*/
    set FL01M001.FY1FCTYC[FL01W-FCTY-INDEX] initialAttributes; /* factory code*/
    FL01W00.FL01W-FCTY-INDEX = FL01W00.FL01W-FCTY-INDEX + 1;
                                   /* increment index*/
  end
  ;
  set FL01M001.CATOAP initialAttributes; /* Commarea TO application*/
  set FL01M001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end FL01400

// verify the entered data
Function FL01500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL01M001.CAITEM > " ") /* Application data was entered*/
    ;
    FLWREC.XXXMODID = "500"; /* Module identification*/
    set FL01M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FL01M001.FBAMDNBR != FL01W01.FBAMDNBR /* model number changed*/
   || FL01M001.SY1STNBR != FL01W01.SY1STNBR) /* style number*/
    ;
    FL01W00.FL01WCKS = "Y"; /* key data changed*/
    FL01W00.FL01WSDS = "N"; /* Initialize style dev sw*/
    ;
  else
    ;
    FL01W00.FL01WCKS = "N"; /* key data not changed*/
    ;
  end
  ;
  ;
  FL01510(); /* check if data was changed*/
  FL01520(); /* pfkey and data edits*/
  ;
  if (FL01W00.FL01WCKS == "N" /* no key changed*/
   && FL01W00.FL01WDCS == "N") /* no data changed*/
    if (converseVar.eventKey is pf10 /* scroll left*/
     || converseVar.eventKey is pf11) /* scroll right*/
      return;
    end
  end
  ;
  if (FL01W00.FL01WCKS == "Y" /* key changed*/
   && FL01W00.FL01WDCS == "Y") /* data changed*/
    ;
    FLWREC.XXXMODID = "500"; /* module id*/
    converseLib.validationFailed(130); /* error, cant change key and data*/
    set FL01M001.SY1STNBR cursor; /* cursor to first key field*/
    exit stack; /* return to display map*/
    ;
  end
  ;
  ;
  FL01W00.FL01W-DELETE-QTY-SW = "N"; /* delete qty switch*/
  if (FL01M001.FL01M-DELETE-FCTY != "    ") /* If delete fcty is entered*/
    FL01572(); /* verify qtys = 0*/
    if (FL01W00.FL01WCKS == "Y" /* key changed*/
     || FL01W00.FL01WDCS == "Y") /* data changed*/
      ;
      FLWREC.XXXMODID = "500"; /* module id*/
      converseLib.validationFailed(381); /* error, can't change key,data*/
                                  /* when deleting a factory*/
      set FL01M001.FL01M-DELETE-FCTY cursor, modified, bold;
      exit stack; /* return to display map*/
      ;
    end
  end
  ;
  ;
  ;
  ;
  if (FL01M001.FL01M-NEW-FCTY != "    ") /* If new factory is entered*/
    FL01560(); /* edit new factory code*/
    FL01562(); /* check for duplicates*/
    if (FL01W00.FL01WCKS == "Y" /* key changed*/
     || FL01W00.FL01WDCS == "Y") /* data changed*/
      ;
      FLWREC.XXXMODID = "500"; /* module id*/
      converseLib.validationFailed(270); /* error, can't change key,data*/
                                  /* when adding a new factory*/
      set FL01M001.FL01M-NEW-FCTY cursor, modified, bold;
      exit stack; /* return to display map*/
      ;
    end
  end
  ;
  if (FL01M001.FL01M-NEW-FCTY != "    " /* If new factory is entered*/
   && FL01M001.FL01M-FROM-FCTY == "    ") /* and no 'copy from' factory*/
    ;
    FLWREC.XXXMODID = "500"; /* module id*/
    converseLib.validationFailed(120); /* Please enter 'from' factory*/
                                  /* when adding a new factory*/
    set FL01M001.FL01M-FROM-FCTY cursor, modified, bold;
    exit stack; /* return to display map*/
    ;
  end
  ;
  ;
  if (FL01M001.FL01M-NEW-FCTY == "    " /* If new factory not entered*/
   && FL01M001.FL01M-DELETE-FCTY == "    ") /* If delete fcty not entered*/
    if (FL01W00.FL01WCKS == "Y") /* key changed*/
      ;
      FL01530(); /* edit key data*/
      ;
    else
      ;
      FL01540(); /* edit line data*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* determine if trying to delete qtys.  if we are, make sure*/
   /* a warning message is displayed to user and user presses*/
   /* pf9 to continue processing.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL01W00.FL01W-DELETE-QTY-SW == "Y") /* if trying to delete qtys*/
    ;
    if (FL01W00.FL01W-DEL-OVERRIDE-SW == "N") /* delete override switch*/
      FL01W00.FL01W-DEL-OVERRIDE-SW = "Y"; /* set override to yes*/
      converseLib.validationFailed(407); /* delete fcty has qty, pf9 or pa2*/
      set FL01M001.FL01M-DELETE-FCTY cursor, bold; /* highlight*/
      exit stack;
      ;
    else
      ;
      if (converseVar.eventKey not pf9) /* pf9 not pressed to continue*/
        converseLib.validationFailed(407); /* delete fcty has qty, pf9 or pa2*/
        set FL01M001.FL01M-DELETE-FCTY cursor, bold; /* highlight*/
        exit stack;
      end
    end
  else
    if (FL01W00.FL01W-DEL-OVERRIDE-SW == "Y")
      FL01W00.FL01W-DEL-OVERRIDE-SW = "N";
    end
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    ;
    FL01W00.FL01W-DEL-OVERRIDE-SW = "N"; /* delete override switch*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
  ;
  ;
end // end FL01500

// check if data changed
Function FL01510()
  FL01W00.FL01WDCS = "N"; /* data didnt change*/
  ;
  ;
  if (FL01W00.FL01WLRS == "L") /* first six months*/
    FL01W00.FL01W-START-COLUMN = 0; /* start column*/
  else /* second six months*/
    FL01W00.FL01W-START-COLUMN = 6; /* start column*/
  end
  ;
  FL01W00.FL01W-TS-LINE-INDEX = 1; /* first line on screen*/
  ;
  while (FL01W00.FL01W-TS-LINE-INDEX <= 13 /* for each screen line*/
   && FL01W00.FL01WDCS != "Y") /* or until data changed*/
    FL01W00.FL01WHSC = FL01W01.FL01WHSC[FL01W-TS-LINE-INDEX];
    FL01W00.FL01W-HDR-BUY-DT-INDEX = 1;
    ;
    while (FL01W00.FL01W-HDR-BUY-DT-INDEX <= 6 /* for each column*/
     && FL01W00.FL01WDCS != "Y") /* or until data changed*/
      FL01W00.FL01W-FCTY-INDEX = FL01W00.FL01W-TS-LINE-INDEX - 1;
      FL01W00.FL01W-FCTY-INDEX = 6 * FL01W00.FL01W-FCTY-INDEX +       FL01W00.FL01W-HDR-BUY-DT-INDEX;
      FL01W00.FL01WWIX = FL01W00.FL01W-HDR-BUY-DT-INDEX +       FL01W00.FL01W-START-COLUMN;
      ;
      if (FL01M001.FL01M-SELECTED[FL01W-FCTY-INDEX] != 
      FL01W00.FL01M-SELECTED[FL01WWIX])
        FL01W00.FL01WDCS = "Y"; /* data changed*/
      end
      ;
      FL01W00.FL01W-HDR-BUY-DT-INDEX = FL01W00.FL01W-HDR-BUY-DT-INDEX + 1;
    end
    ;
    FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
  end
  ;
  ;
end // end FL01510

// pfkey and data edits
Function FL01520()
  if (converseVar.eventKey is pf10 /* scroll left*/
   && FL01W00.FL01WLRS == "L")     /* already on left*/
    ;
    FLWREC.XXXMODID = "520"; /* module name*/
    converseLib.validationFailed(23); /* error, on left already*/
    exit stack; /* return to display map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf11 /* scroll right*/
   && FL01W00.FL01WLRS == "R")     /* already on right*/
    ;
    FLWREC.XXXMODID = "520"; /* module name*/
    converseLib.validationFailed(24); /* error, on right already*/
    exit stack; /* return to display map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf10 /* scroll left*/
   || converseVar.eventKey is pf11) /* scroll right*/
    ;
    if (FL01W00.FL01WDCS == "Y" /* data changed*/
     || FL01W00.FL01WCKS == "Y") /* key changed*/
      ;
      FLWREC.XXXMODID = "520"; /* module name*/
      converseLib.validationFailed(5); /* error, cant scroll and enter data*/
      exit stack; /* return to display map*/
      ;
    end
    ;
  else /* not a scroll request*/
    ;
    if (FL01W00.FL01WCKS == "N"                             /* key did not change*/
     && FL01W00.FL01WDCS == "N"                             /* data did not change*/
     && FL01M001.FL01M-FROM-FCTY == FL01W01.FL01M-FROM-FCTY /* from fcty*/
     && FL01M001.FL01M-NEW-FCTY == FL01W01.FL01M-NEW-FCTY   /* add  fcty*/
     && FL01M001.FL01M-DELETE-FCTY == FL01W01.FL01M-DELETE-FCTY)
                                   /* nothing happened*/
      exit stack; /* return to display map*/
      ;
    end
    ;
  end
  ;
  ;
end // end FL01520

// edit key data
Function FL01530()
   /* ------------------------------------------------------------*/
   /* only style number and model number can be edited*/
   /* ------------------------------------------------------------*/
  ;
  if (FL01M001.SY1STNBR <= " ") /* style number spaces*/
    FLWREC.XXXMODID = "530"; /* Module identification*/
    set FL01M001.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* cannot be spaces*/
  end
  ;
  if (FL01M001.FBAMDNBR <= 0) /* model number zero*/
    FLWREC.XXXMODID = "530"; /* Module identification*/
    set FL01M001.FBAMDNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* cannot be zero*/
  else
    FL01531(); /* validate schedule number*/
  end
  ;
  if (converseVar.validationMsgNum == 0) /* no errors*/
    FL01W00.FL01WLRS = "L"; /* format left side of screen*/
  end
end // end FL01530

// validate schedule number
Function FL01531()
   /* ------------------------------------------------------------*/
   /* get row for schedule number*/
   /* ------------------------------------------------------------*/
  ;
  set FBAREC empty; /* initialise record*/
  FBAREC.FBDMDTYP = "FT1"; /* buy type*/
  FBAREC.FBAMDNBR = FL01M001.FBAMDNBR; /* schedule number*/
  ;
  try
    call "IO3470" ("S ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      FLWREC.XXXMODID = "531"; /* module name*/
      converseLib.validationFailed(125); /* schedule not found*/
      set FL01M001.FBAMDNBR cursor, bold; /* highlight*/
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "531"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT BUY DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBAREC.FBAGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL01531

// edit entered data
Function FL01540()
  ;
  FL01W00.FL01WSHS = "N"; /* select test switch*/
  FL01W00.FL01W-HDR-BUY-DT-INDEX = 6; /* column index*/
  ;
  while (FL01W00.FL01W-HDR-BUY-DT-INDEX > 0) /* for each column*/
    FL01W00.FL01W-TS-LINE-INDEX = 13; /* line index*/
    FL01W00.FL01WSCN = 0; /* select counter*/
    ;
    while (FL01W00.FL01W-TS-LINE-INDEX > 0) /* for each line within a column*/
      FL01W00.FL01W-FCTY-INDEX = FL01W00.FL01W-TS-LINE-INDEX - 1;
      FL01W00.FL01W-FCTY-INDEX = 6 * FL01W00.FL01W-FCTY-INDEX +       FL01W00.FL01W-HDR-BUY-DT-INDEX;
      ;
      if (FL01M001.FL01M-SELECTED[FL01W-FCTY-INDEX] != " ")
                                                        /* data was entered*/
        ;
        if (FL01M001.FL01M-SELECTED[FL01W-FCTY-INDEX] != "S") /* not s*/
          FLWREC.XXXMODID = "540"; /* error module name*/
          converseLib.validationFailed(41); /* must be s*/
          set FL01M001.FL01M-SELECTED[FL01W-FCTY-INDEX] cursor, bold;
                                                               /* highlight*/
        else /* s was entered*/
          FL01W00.FL01WSHS = "Y"; /* select test switch*/
          FL01W00.FL01WSCN = FL01W00.FL01WSCN + 1; /* increment s by mo cnt*/
          FL01W00.FL01WWIX = FL01W00.FL01W-HDR-BUY-DT-INDEX +           FL01W00.FL01W-START-COLUMN;
          ;
          FL01542(); /* Check for other fcty selected*/
          ;
          if (FL01W00.FL01WSCN > 1) /* more than 1 s in month*/
            FL01W00.FL01WSCN = FL01W00.FL01WSCN - 1;
            FLWREC.XXXMODID = "540"; /* error module name*/
            converseLib.validationFailed(131); /* err msg more than 1 select*/
            set FL01M001.FL01M-SELECTED[FL01W-FCTY-INDEX] cursor, bold;
          end
          ;
          if (FL01M001.FY1FCTYC[FL01W-TS-LINE-INDEX] == 
          FL01M001.FL01M-FROM-FCTY)
            FLWREC.XXXMODID = "540"; /* error module name*/
            converseLib.validationFailed(132); /* selected from from fcty*/
            set FL01M001.FL01M-SELECTED[FL01W-FCTY-INDEX] cursor, bold;
          end
          ;
          if (FL01M001.FY1FCTYC[FL01W-TS-LINE-INDEX] == " "
           && FL01M001.FL01M-FROM-FCTY == "X   ")
            FLWREC.XXXMODID = "540"; /* error module name*/
            converseLib.validationFailed(132); /* selected from from fcty*/
            set FL01M001.FL01M-SELECTED[FL01W-FCTY-INDEX] cursor, bold;
          end
          ;
        end
        ;
      end
      ;
      FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX - 1;
                                                           /* previous line*/
      ;
    end
    ;
    FL01W00.FL01W-HDR-BUY-DT-INDEX = FL01W00.FL01W-HDR-BUY-DT-INDEX - 1;
                                                         /* previous column*/
  end
  ;
  FL01W00.FL01W-TS-LINE-INDEX = 13; /* line index*/
  FL01W00.FL01WMSW = "N"; /* no match*/
  ;
  while (FL01W00.FL01W-TS-LINE-INDEX > 0 /* for each line*/
   && FL01W00.FL01WMSW != "Y") /* or until match*/
    ;
    if (FL01M001.FL01M-FROM-FCTY == FL01M001.FY1FCTYC[FL01W-TS-LINE-INDEX])
      FL01W00.FL01WMSW = "Y"; /* a match*/
    end
    ;
    if (FL01M001.FL01M-FROM-FCTY == "X   "
     && FL01M001.FY1FCTYC[FL01W-TS-LINE-INDEX] == "    ")
      FL01W00.FL01WMSW = "Y"; /* a match*/
    end
    ;
    FL01W00.FL01W-TS-LINE-INDEX = FL01W-TS-LINE-INDEX - 1;
                                                         /* decrement index*/
  end
  ;
  if (FL01W00.FL01WMSW == "N") /* error, no match of fcty*/
    FLWREC.XXXMODID = "540"; /* error module name*/
    converseLib.validationFailed(133); /* no match msg*/
    set FL01M001.FL01M-FROM-FCTY cursor, bold;
  end
  ;
  if (FL01W00.FL01WSHS == "N"       /* nothing selected*/
   && converseVar.eventKey not pf10 /* not scroll left*/
   && converseVar.eventKey not pf11) /* not scroll right*/
    FLWREC.XXXMODID = "540"; /* error module name*/
    converseLib.validationFailed(154); /* must make a select code*/
  end
  ;
  if (FL01M001.FL01M-FROM-FCTY == " "
   && FL01W00.FL01WCKS == "N"
   && converseVar.eventKey is enter)
    converseLib.validationFailed(8);
    set FL01M001.FL01M-FROM-FCTY cursor, bold;
    FLWREC.XXXMODID = "540";
  end
  ;
end // end FL01540

// CHECK FOR OTHER FCTY SELECTED
Function FL01542()
  ;
  ;
   /* check for the error condition of selecting more than one factory*/
  ;
  ;
  ;
  ;
  FL01W00.FL01WIX1 = 6; /* column index*/
  ;
  while (FL01W00.FL01WIX1 > 0) /* for each column*/
    FL01W00.FL01WIX3 = 13; /* line index*/
    ;
    while (FL01W00.FL01WIX3 > 0) /* for each line within a column*/
      FL01W00.FL01WIX2 = FL01W00.FL01WIX3 - 1;
      FL01W00.FL01WIX2 = 6 * FL01W00.FL01WIX2 + FL01W00.FL01WIX1;
      ;
      if (FL01M001.FL01M-SELECTED[FL01WIX2] == "S" /* not s*/
       && FL01W00.FL01WIX3 != FL01W00.FL01W-TS-LINE-INDEX)
                                   /* not selecting currently*/
                                  /* SELECTED FACTORY*/
        FLWREC.XXXMODID = "542"; /* error module name*/
        converseLib.validationFailed(464); /* can't select 2 from fctys*/
        set FL01M001.FL01M-SELECTED[FL01W-FCTY-INDEX] cursor, bold;
      end
      ;
      FL01W00.FL01WIX3 = FL01W00.FL01WIX3 - 1; /* previous line*/
      ;
    end
    ;
    FL01W00.FL01WIX1 = FL01W00.FL01WIX1 - 1; /* previous column*/
  end
  ;
end // end FL01542

// Verify factory code
Function FL01560()
  ;
   /* ------------------------------------------------------------*/
   /* Verify the Factory Code*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  set FY1REC empty;
  FY1REC.FY1FCTYC = FL01M001.FL01M-NEW-FCTY;
  if (COMMAREA.XGPCD != "  ")
    FY1REC.XGPCD = COMMAREA.XGPCD;
  else
    FY1REC.XGPCD = "02";
  end
  ;
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* factory not found*/
      converseLib.validationFailed(10); /* invalid factory*/
      set FL01M001.FL01M-NEW-FCTY cursor, modified, bold;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "560"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
end // end FL01560

// Check for duplicates
Function FL01562()
  ;
  FL01W00.FL01W-TS-LINE-INDEX = 1; /* initialise line index*/
  ;
  while (FL01W00.FL01W-TS-LINE-INDEX <= 13) /* for each line*/
    ;
    if (FL01M001.FL01M-NEW-FCTY == FL01M001.FY1FCTYC[FL01W-TS-LINE-INDEX])
      converseLib.validationFailed(319); /* Duplicate factory*/
      set FL01M001.FL01M-NEW-FCTY cursor, modified, bold;
      return; /* Return to previous process*/
    end
    ;
    FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
  end
  ;
end // end FL01562

// check delete quantities
Function FL01572()
   /* ------------------------------------------------------------*/
   /* verify factory exists in detail list and that all qtys = 0.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[1]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[2]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[3]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[4]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[5]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[6]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[7]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[8]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[9]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[10]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[11]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[12]
   && FL01M001.FL01M-DELETE-FCTY != FL01M001.FY1FCTYC[13])
    converseLib.validationFailed(383); /* factory not on list*/
    set FL01M001.FL01M-DELETE-FCTY cursor, modified, bold;
    return; /* Return to previous process*/
  end
  ;
  ;
  ;
  ;
  ;
    /* First the current page must be saved.*/
    /* Next the 'delete fcty' is found and checked for qty ^=0*/
    /* Finally the current page is reset*/
  ;
  FL01W00.FL01WPSV = FL01W00.TA5TSQIX; /* current page number*/
  ;
  FL01W00.FL01W-TS-INDEX = 1; /* Temp storage page LINE COUNT*/
  FL01W00.TA5TSQIX = 1; /* current page number*/
  ;
  while (FL01W00.TA5TSQIX <= FL01W00.FL01W-MAX-TS-PAGES) /* Max pages*/
    FL01225(); /* Read temp storage*/
    FL01W00.FL01W-TS-LINE-INDEX = 1; /* Re-intialize TS line counter*/
    while (FL01W00.FL01W-TS-INDEX <= FL01W00.FL01WMAX /* Until no more rows*/
     && FL01W00.FL01W-TS-LINE-INDEX <= 33) /* end of temp storage page*/
      ;
      FBDREC.FBDGROUP = FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX];
                                   /* group move*/
      if (FBDREC.FY1FCTYC == FL01M001.FL01M-DELETE-FCTY
       && FL01M001.FL01M-DELETE-FCTY != "    "
       && FBDREC.FBDQTB != 0)
        FL01W00.FL01W-DELETE-QTY-SW = "Y";
      end
      ;
      FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
      ;
    end
    FL01W00.TA5TSQIX = FL01W00.TA5TSQIX + 1; /* Increment page*/
  end
  ;
  FL01W00.TA5TSQIX = FL01W00.FL01WPSV; /* current page number*/
                                   /* group move*/
end // end FL01572

// process valid input request
Function FL01600()
   /* ------------------------------------------------------------*/
   /* if key fields were changed set request for data flag*/
   /* ------------------------------------------------------------*/
  ;
  if (FL01W00.FL01WCKS == "Y") /* key changed*/
    FL01W00.FL01WDRS = "Y"; /* set data request switch to yes*/
    FL01W00.FL01WMCS = "Y"; /* clear map*/
    FL01W00.FL01WSDS = "N"; /* reinitialise style dev switch*/
    set FL01W01 empty; /* reinitialise display working storage*/
    return; /* return to performing process*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* if scroll request, set switch appropriately*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* scroll left request*/
    FL01W00.FL01WLRS = "L"; /* format first six months*/
    FL01W00.FL01WMCS = "Y"; /* clear map*/
    FLWREC.XXXMODID = "600"; /* msg module name*/
    FLWREC.XXXMSGNO = 15; /* info message*/
    return; /* return to previous process*/
  end
  ;
  if (converseVar.eventKey is pf11) /* scroll right request*/
    FL01W00.FL01WLRS = "R"; /* format second six months*/
    FL01W00.FL01WMCS = "Y"; /* clear map*/
    FLWREC.XXXMODID = "600"; /* msg module name*/
    FLWREC.XXXMSGNO = 14; /* info message*/
    return; /* return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* check for contention to db2 tables due to merge.*/
   /* ------------------------------------------------------------*/
  ;
  FL01605(); /* check for merge contention*/
  ;
   /* ------------------------------------------------------------*/
   /* this is now the update pass. 'from' factory quantities are*/
   /* saved to be able to update the 'to' factories with them.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* get date and time*/
  ;
  ;
  ;
  if (FL01M001.FL01M-NEW-FCTY == "    ") /* Move from existing fcty*/
    FL01610(); /* Move factory quantities*/
  end
  ;
  if (FL01M001.FL01M-NEW-FCTY != "    ") /* Create a new factory*/
    FL01650(); /* Insert factory rows*/
  end
  ;
  if (FL01M001.FL01M-DELETE-FCTY != "    ") /* Create a new factory*/
    FL01670(); /* Delete factory rows*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* the program is at this point only if all updates were*/
   /* successful*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* commit all changes*/
  FLWREC.XXXMSGNO = 32; /* an info message, not an error*/
  FL01W00.FL01WDRS = "Y"; /* request data switch*/
  FL01W00.FL01WMCS = "Y"; /* clear map switch*/
  FL01W00.FL01W-DEL-OVERRIDE-SW = "N"; /* ; delete override switch*/
end // end FL01600

// check for merge contention
Function FL01605()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty;
  ;
  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        FLWREC.XXXMODID = "605"; /* module identification*/
        exit stack; /* return to process*/
      end
    else
      ;
      ;
      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      FLWREC.XXXMODID = "605"; /* Module identification*/
      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(19); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end
  ;
  ;
end // end FL01605

// move factory quantities
Function FL01610()
  FL01W00.FL01W-TS-INDEX = 1; /* Temp storage page LINE COUNT*/
  FL01W00.TA5TSQIX = 1; /* current page number*/
  ;
  while (FL01W00.TA5TSQIX <= FL01W00.FL01W-MAX-TS-PAGES) /* Max pages*/
    FL01225(); /* Read temp storage*/
    FL01W00.FL01W-TS-LINE-INDEX = 1; /* Re-intialize TS line counter*/
    while (FL01W00.FL01W-TS-INDEX <= FL01W00.FL01WMAX /* Until no more rows*/
     && FL01W00.FL01W-TS-LINE-INDEX <= 33) /* end of temp storage page*/
      ;
      FBDREC.FBDGROUP = FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX];
                                                              /* group move*/
      if (FBDREC.FY1FCTYC == FL01M001.FL01M-FROM-FCTY)
       /* ------------------------------------------------------------*/
        /* convert numeric date ccyymmdd format to yymm format*/
       /* ------------------------------------------------------------*/
        FL01W00.FL01WDTN = FBDREC.FB8BUYDT; /* move to numeric*/
        FL01W00.FL01WDTB = FL01W00.FL01WDTA;
                                   /* move alpha to breakup dt*/
        FL01W00.FL01W-BUY-YEAR = FL01W00.FL01WYRB; /* move year*/
        FL01W00.FL01W-BUY-MONTH = FL01W00.FL01WMOB; /* move month*/
        ;
        FL01W00.FL01W-FCTY-INDEX = 1; /* Initialize factory index*/
        while (FL01W00.FL01W-FCTY-INDEX <= 13)
                                           /* Scan all factories on the map*/
          FL01W00.FL01W-HDR-BUY-DT-INDEX = 1; /* header buy date index*/
          ;
          while (FL01W00.FL01W-HDR-BUY-DT-INDEX <= 6)
            if (FL01W00.FL01WNDT == 
            FL01M001.FL01M-BUY-DT-YYMM[FL01W-HDR-BUY-DT-INDEX])
                                   /* found column*/
    /* the formula for getting the map index for the quantity*/
    /* is as follows:*/
    /* ((factory-index - 1) * 6)+ column-index*/
              ;
              FL01W00.FL01WQIX = FL01W00.FL01W-FCTY-INDEX - 1;
              FL01W00.FL01WQIX = 6 * FL01W00.FL01WQIX +               FL01W00.FL01W-HDR-BUY-DT-INDEX;
              if (FL01M001.FL01M-SELECTED[FL01WQIX] == "S")
                ;
                FL01W00.FL01WFUS = "N"; /* Factory updated switch*/
                FL01630(); /* Find/update the 'to' factory*/
                if (FL01W00.FL01WFUS == "N") /* Factory not updated*/
                  FBDREC.FY1FCTYC = FL01W00.FL01WFCT;
                                   /* factory save*/
                  FL01652(); /* Insert new row.*/
                                  /* The 'To' factory did not have*/
                                  /* this color/dimension*/
                  FBDREC.FBDGROUP = FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX];
                                   /* group move to reset factory*/
                end
                FBDREC.FBDQTB = 0; /* zero out qty to buy*/
                FL01631(); /* update 'from' factory*/
                FL01W00.FL01W-HDR-BUY-DT-INDEX = 7;
                FL01W00.FL01W-FCTY-INDEX = 13;
                                      /* Done Scanning all factories on the*/
                                   /* map*/
              end
            end
            FL01W00.FL01W-HDR-BUY-DT-INDEX = FL01W00.FL01W-HDR-BUY-DT-INDEX             + 1;
          end
          ;
          FL01W00.FL01W-FCTY-INDEX = FL01W00.FL01W-FCTY-INDEX + 1;
        end
        ;
      end
      ;
      FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
      FL01W00.FL01W-TS-INDEX = FL01W00.FL01W-TS-INDEX + 1;
      ;
    end
    FL01W00.TA5TSQIX = FL01W00.TA5TSQIX + 1; /* Increment page*/
  end
  ;
  ;
  ;
  ;
  ;
   /* Now, after all the updates and inserts are complete, a final*/
   /* step is to insure that there are sets of 12 buy months for*/
   /* each style, color, dimension and factory.  Where gaps exists*/
   /* because of inserts of new color/dimesion rows, fill those gaps*/
   /* with vflqtb01 rows that have zero quantities.*/
  ;
  ;
  FL01W00.FL01W-TS-INDEX = 1; /* Temp storage page LINE COUNT*/
  FL01W00.TA5TSQIX = 1; /* current page number*/
  ;
  while (FL01W00.TA5TSQIX <= FL01W00.FL01W-MAX-TS-PAGES) /* Max pages*/
    FL01225(); /* Read temp storage*/
    FL01W00.FL01W-TS-LINE-INDEX = 1; /* Re-intialize TS line counter*/
    while (FL01W00.FL01W-TS-INDEX <= FL01W00.FL01WMAX /* Until no more rows*/
     && FL01W00.FL01W-TS-LINE-INDEX <= 33) /* end of temp storage page*/
      ;
      FBDREC.FBDGROUP = FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX];
                                                              /* group move*/
      if (FBDREC.FY1FCTYC == FL01M001.FL01M-FROM-FCTY)
        ;
        FL01W00.FL01W-FCTY-INDEX = 1; /* Initialize factory index*/
        while (FL01W00.FL01W-FCTY-INDEX <= 13)
                                           /* Scan all factories on the map*/
          FL01W00.FL01W-HDR-BUY-DT-INDEX = 1; /* header buy date index*/
          ;
          while (FL01W00.FL01W-HDR-BUY-DT-INDEX <= 6)
    /* the formula for getting the map index for the quantity*/
    /* is as follows:*/
    /* ((factory-index - 1) * 6)+ column-index*/
            ;
            FL01W00.FL01WQIX = FL01W00.FL01W-FCTY-INDEX - 1;
            FL01W00.FL01WQIX = 6 * FL01W00.FL01WQIX +             FL01W00.FL01W-HDR-BUY-DT-INDEX;
            if (FL01M001.FL01M-SELECTED[FL01WQIX] == "S")
              FBDREC.FY1FCTYC = FL01M001.FY1FCTYC[FL01W-FCTY-INDEX];
              ;
              FL01639(); /* Select unique*/
              ;
              if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
                FBDREC.FBDQTB = 0; /* zero out qty to buy*/
                FL01652(); /* Insert new row.*/
                                  /* The 'To' factory did not have*/
                                  /* this color/dimension*/
              end
              ;
              FL01W00.FL01W-HDR-BUY-DT-INDEX = 7;
              FL01W00.FL01W-FCTY-INDEX = 13;
                                      /* Done Scanning all factories on the*/
                                   /* map*/
            end
            FL01W00.FL01W-HDR-BUY-DT-INDEX = FL01W00.FL01W-HDR-BUY-DT-INDEX             + 1;
          end
          ;
          FL01W00.FL01W-FCTY-INDEX = FL01W00.FL01W-FCTY-INDEX + 1;
        end
        ;
      end
      ;
      FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
      FL01W00.FL01W-TS-INDEX = FL01W00.FL01W-TS-INDEX + 1;
      ;
    end
    FL01W00.TA5TSQIX = FL01W00.TA5TSQIX + 1; /* Increment page*/
  end
  ;
  ;
  ;
end // end FL01610

// Find the 'to' factory
Function FL01630()
  ;
    /* First the current page and current row index must be saved.*/
    /* These will be pointing to the current 'From' factory row.*/
    /* Also save key fields of the 'from' row.*/
    /* Next the 'To' row is found and updated.*/
    /* Finally the current 'From' factory row is reset so that the*/
    /* next row will be sequentially processed.*/
  ;
  FL01W00.FL01WPSV = FL01W00.TA5TSQIX; /* current page number*/
  FL01W00.FL01WDSV = FL01W00.FL01W-TS-LINE-INDEX;
                                                 /* Temp storage row number*/
  FL01W00.FL01WTSV = FL01W00.FL01W-TS-INDEX;
                                                 /* Temp storage row number*/
  FL01W04.FBDGROUP = FBDREC.FBDGROUP; /* group move*/
  ;
  ;
  FL01W00.FL01W-TS-INDEX = 1; /* Temp storage page LINE COUNT*/
  FL01W00.TA5TSQIX = 1; /* current page number*/
  ;
  while (FL01W00.TA5TSQIX <= FL01W00.FL01W-MAX-TS-PAGES) /* Max pages*/
    FL01225(); /* Read temp storage*/
    FL01W00.FL01W-TS-LINE-INDEX = 1; /* Re-intialize TS line counter*/
    while (FL01W00.FL01W-TS-INDEX <= FL01W00.FL01WMAX /* Until no more rows*/
     && FL01W00.FL01W-TS-LINE-INDEX <= 33) /* end of temp storage page*/
      ;
      FBDREC.FBDGROUP = FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX];
                                                              /* group move*/
      FL01W00.FL01W-FCTY-INDEX = 1; /* Initialize factory index*/
      while (FL01W00.FL01W-FCTY-INDEX <= 13) /* Scan all factories on the map*/
        if (FBDREC.FY1FCTYC == FL01M001.FY1FCTYC[FL01W-FCTY-INDEX])
          FL01W00.FL01W-HDR-BUY-DT-INDEX = 1; /* header buy date index*/
          while (FL01W00.FL01W-HDR-BUY-DT-INDEX <= 6)
    /* the formula for getting the map index for the quantity*/
    /* is as follows:*/
    /* ((factory-index - 1) * 6)+ column-index*/
            ;
            FL01W00.FL01WQIX = FL01W00.FL01W-FCTY-INDEX - 1;
            FL01W00.FL01WQIX = 6 * FL01W00.FL01WQIX +             FL01W00.FL01W-HDR-BUY-DT-INDEX;
            ;
            if (FBDREC.FB8BUYDT == FL01W04.FB8BUYDT
             /* buy date is equal*/
             && FL01M001.FL01M-SELECTED[FL01WQIX] == "S") /* selected*/
              FL01W00.FL01WFCT = FL01M001.FY1FCTYC[FL01W-FCTY-INDEX];
                                   /* factory save*/
              if (FBDREC.SY2CLRID == FL01W04.SY2CLRID /* color*/
               && FBDREC.XDMCD == FL01W04.XDMCD)      /* dimension*/
                FBDREC.FBDQTB = FBDREC.FBDQTB + FL01W04.FBDQTB;
                FL01631(); /* update vflqtb01*/
                FL01W00.FL01WFUS = "Y"; /* Factory updated*/
                FL01W00.FL01W-HDR-BUY-DT-INDEX = 6;
                FL01W00.FL01W-FCTY-INDEX = 13;
                                      /* Done Scanning all factories on the*/
                                   /* map*/
                FL01W00.FL01W-TS-LINE-INDEX = 33;
                                   /* done with all lines on page*/
                FL01W00.TA5TSQIX = FL01W00.FL01W-MAX-TS-PAGES; /* Done  with all pages*/
              end
            end
            FL01W00.FL01W-HDR-BUY-DT-INDEX = FL01W00.FL01W-HDR-BUY-DT-INDEX             + 1;
          end
        end
        FL01W00.FL01W-FCTY-INDEX = FL01W00.FL01W-FCTY-INDEX + 1;
        ;
        ;
      end
      ;
      ;
      FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
      FL01W00.FL01W-TS-INDEX = FL01W00.FL01W-TS-INDEX + 1;
      ;
    end
    FL01W00.TA5TSQIX = FL01W00.TA5TSQIX + 1; /* Increment page*/
  end
  ;
  ;
  ;
  ;
  FL01W00.TA5TSQIX = FL01W00.FL01WPSV; /* current page number*/
  FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01WDSV; /* Temp storage row number*/
  FL01W00.FL01W-TS-INDEX = FL01W00.FL01WTSV; /* Temp storage row number*/
  FL01225(); /* Read temp storage*/
  FBDREC.FBDGROUP = FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX];
                                                              /* group move*/
  ;
  ;
  ;
end // end FL01630

// update factory row
Function FL01631()
  ;
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  ;
  ;
  ;
  try
    call "IO3460" ("U ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* a good update*/
      ;
      return; /* return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      FLWREC.XXXMSGNO = 46; /* error*/
      FLWREC.XXXMODID = "631"; /* error module id*/
      FL01W00.FL01WDRS = "Y"; /* request data switch*/
      FL01W00.FL01WMCS = "Y"; /* clear map switch*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      exit stack; /* return to display map*/
      ;
    end
    ;
  end
  ;
  ;
  FLWREC.XXXMODID = "631"; /* Module identification*/
  TA1REC.TA1LOC = "UPDATE QTB ROW   "; /* error description*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back previous updates*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FL01631

// select factory row
Function FL01639()
  ;
  try
    call "IO3460" ("S ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* row already there*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* return to calling process*/
      ;
    end
  end
  ;
  FLWREC.XXXMODID = "639"; /* Module identification*/
  TA1REC.TA1LOC = "READ QTB ROW FCTY"; /* error description*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back previous updates*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FL01639

// Add new factories
Function FL01650()
   /* Sequentially process working storage.  If the factory read is*/
   /* equal to the 'from' factory, move the 'new' factory into*/
   /* the record and insert it.*/
  ;
  ;
  FL01W00.FL01W-TS-INDEX = 1; /* Temp storage page LINE COUNT*/
  FL01W00.TA5TSQIX = 1; /* current page number*/
  ;
  while (FL01W00.TA5TSQIX <= FL01W00.FL01W-MAX-TS-PAGES) /* Max pages*/
    FL01225(); /* Read temp storage*/
    FL01W00.FL01W-TS-LINE-INDEX = 1; /* Re-intialize TS line counter*/
    while (FL01W00.FL01W-TS-INDEX <= FL01W00.FL01WMAX /* Until no more rows*/
     && FL01W00.FL01W-TS-LINE-INDEX <= 33) /* end of temp storage page*/
      FBDREC.FBDGROUP = FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX];
                                                              /* group move*/
      if (FBDREC.FY1FCTYC == FL01M001.FL01M-FROM-FCTY)
        FBDREC.FY1FCTYC = FL01M001.FL01M-NEW-FCTY;
        FL01639(); /* Select unique*/
        ;
        if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
          FBDREC.FBDQTB = 0; /* zero out qty to buy*/
          FL01652(); /* Insert new row.*/
                                  /* The 'To' factory did not have*/
                                  /* this color/dimension*/
        else
          if (SQLCA.VAGen_SQLCODE == 0) /* row has been added since*/
                                  /* data was obtained.*/
            FLWREC.XXXMSGNO = 46; /* updt by another user*/
            FLWREC.XXXMODID = "650"; /* error module id*/
            FL01W00.FL01WDRS = "Y"; /* request data switch*/
            FL01W00.FL01WMCS = "Y"; /* clear map switch*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback();
            exit stack; /* return to display map*/
            ;
          end
          ;
        end
        ;
      end
      ;
      FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
      FL01W00.FL01W-TS-INDEX = FL01W00.FL01W-TS-INDEX + 1;
      ;
    end
    FL01W00.TA5TSQIX = FL01W00.TA5TSQIX + 1; /* Increment page*/
  end
  ;
  ;
  ;
end // end FL01650

// Insert a vflqtb01 row
Function FL01652()
  ;
  FBDREC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  FBDREC.ZZZCHGCT = 0; /* change count*/
  ;
  try
    call "IO3460" ("A ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* a good update*/
      ;
      return; /* return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  FLWREC.XXXMODID = "652"; /* Module identification*/
  TA1REC.TA1LOC = "ADD  QTB ROW FCTY"; /* error description*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back previous updates*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
  ;
  ;
  ;
end // end FL01652

// delete factory rows
Function FL01670()
   /* Sequentially process working storage.  If the factory read is*/
   /* equal to the 'delete' factory, delete the row.*/
  ;
  ;
  FL01W00.FL01W-TS-INDEX = 1; /* Temp storage page LINE COUNT*/
  FL01W00.TA5TSQIX = 1; /* current page number*/
  ;
  while (FL01W00.TA5TSQIX <= FL01W00.FL01W-MAX-TS-PAGES) /* Max pages*/
    FL01225(); /* Read temp storage*/
    FL01W00.FL01W-TS-LINE-INDEX = 1; /* Re-intialize TS line counter*/
    while (FL01W00.FL01W-TS-INDEX <= FL01W00.FL01WMAX /* Until no more rows*/
     && FL01W00.FL01W-TS-LINE-INDEX <= 33) /* end of temp storage page*/
      FBDREC.FBDGROUP = FL01W03.FL01WFBD[FL01W-TS-LINE-INDEX];
                                   /* group move*/
      if (FBDREC.FY1FCTYC == FL01M001.FL01M-DELETE-FCTY)
        FL01672(); /* Delete vflqtb01 row*/
      end
      ;
      FL01W00.FL01W-TS-LINE-INDEX = FL01W00.FL01W-TS-LINE-INDEX + 1;
      FL01W00.FL01W-TS-INDEX = FL01W00.FL01W-TS-INDEX + 1;
      ;
    end
    FL01W00.TA5TSQIX = FL01W00.TA5TSQIX + 1; /* Increment page*/
  end
  ;
  ;
  ;
end // end FL01670

// Delete a vflqtb01 row
Function FL01672()
  ;
  ;
  try
    call "IO3460" ("D ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* a good update*/
      ;
      return; /* return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      FLWREC.XXXMSGNO = 46; /* updated by another user*/
      FLWREC.XXXMODID = "672"; /* error module id*/
      FL01W00.FL01WDRS = "Y"; /* request data switch*/
      FL01W00.FL01WMCS = "Y"; /* clear map switch*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      exit stack; /* return to display map*/
      ;
    end
    ;
  end
  ;
  ;
  FLWREC.XXXMODID = "672"; /* Module identification*/
  TA1REC.TA1LOC = "DEL  QTB ROW FCTY"; /* error description*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back previous updates*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
  ;
  ;
  ;
end // end FL01672

Record FL01W00 type basicRecord
  10 FL01WDRS FL01WDRS ; 
  10 FL01WMCS FL01WMCS ; 
  10 FL01WLRS FL01WLRS ; 
  10 FL01WCSW FL01WCSW ; 
  10 FL01WCKS FL01WCKS ; 
  10 FL01WDCS FL01WDCS ; 
  10 FL01W-DEL-OVERRIDE-SW FL01W-DEL-OVERRIDE-SW ; 
  10 FL01WMSW FL01WMSW ; 
  10 FL01WSHS FL01WSHS ; 
  10 FL01WFUS FL01WFUS ; 
  10 FL01WFCT FL01WFCT ; 
  10 FL01W-DELETE-QTY-SW FL01W-DELETE-QTY-SW ; 
  10 FL01WIX1 FL01WIX1 ; 
  10 FL01WIX2 FL01WIX2 ; 
  10 FL01WIX3 FL01WIX3 ; 
  10 FL01W-FCTY-INDEX FL01W-FCTY-INDEX ; 
  10 FL01WCTX FL01WCTX ; 
  10 FL01WWIX FL01WWIX ; 
  10 FL01W-TS-LINE-INDEX FL01W-TS-LINE-INDEX ; 
  10 FL01WQIX FL01WQIX ; 
  10 FL01W-HDR-BUY-DT-INDEX FL01W-HDR-BUY-DT-INDEX ; 
  10 FL01W-START-COLUMN FL01W-START-COLUMN ; 
  10 FL01W-TS-INDEX FL01W-TS-INDEX ; 
  10 FL01WKEY FL01WKEY ; 
    15 FL01WMDA FL01WMDA ; 
      20 FL01WMDN FL01WMDN ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
  10 FL01WDTA FL01WDTA ; 
    15 FL01WDTN FL01WDTN ; 
  10 FL01WDTB FL01WDTB ; 
    15 FL01WCCB FL01WCCB ; 
    15 FL01WYRB FL01WYRB ; 
    15 FL01WMOB FL01WMOB ; 
    15 * num(2) ; 
  10 FL01W-BUY-DT-YYMM FL01W-BUY-DT-YYMM ; 
    13 FL01WNDT FL01WNDT ; 
      15 FL01W-BUY-YEAR FL01W-BUY-YEAR ; 
      15 FL01W-BUY-MONTH FL01W-BUY-MONTH ; 
  10 FL01WSCT FL01WSCT ; 
  10 FL01WSFY FL01WSFY ; 
  10 FL01W-QTB-ARRAY FL01W-QTB-ARRAY ; 
    15 FL01WHQT FL01WHQT [12] ; 
  10 FL01WSCN FL01WSCN ; 
  10 FL01WHSC FL01WHSC ; 
    15 FL01M-SELECTED FL01M-SELECTED [13] ; 
  10 XGACD XGACD ; 
  10 FL01WSDS FL01WSDS ; 
  10 FL01WMAX FL01WMAX ; 
  10 FL01W-MAX-TS-PAGES FL01W-MAX-TS-PAGES ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FL01WPSV FL01WPSV ; 
  10 FL01WDSV FL01WDSV ; 
  10 FL01WTSV FL01WTSV ; 
end // end FL01W00

//*** RECORD=FL01W01 ****
// Working storage for TSXX - Transportation Prototype
// ***********************
Record FL01W01 type basicRecord
  10 FBAMDNBR FBAMDNBR ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XGACD XGACD ; 
  10 XGADESC XGADESC ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 SY2RSTNB SY2RSTNB ; 
  10 XCNCD XCNCD ; 
  10 FL01WSNS FL01WSNS ; 
    15 FL01W-SESN-DESC FL01W-SESN-DESC ; 
    15 FL01W-SESN-YR-RNG-YY FL01W-SESN-YR-RNG-YY ; 
  10 FL01W-SESN-YR-CCYY FL01W-SESN-YR-CCYY ; 
    15 FL01W-SESN-YR-CC num(2) ; // season yr cc
    15 FL01W-SESN-YR-YY num(2) ; // season yr yy
  10 FL01M-FROM-FCTY FL01M-FROM-FCTY ; 
  10 FL01M-NEW-FCTY FL01M-NEW-FCTY ; 
  10 FL01M-DELETE-FCTY FL01M-DELETE-FCTY ; 
  10 FL01W-BUY-DT-YYMM FL01W-BUY-DT-YYMM [12] ; 
  10 XCTCD XCTCD [13] ; 
  10 FY1FCTYC FY1FCTYC [13] ; 
  10 FL01WHQX FL01WHQX [13] ; 
  10 FL01WHSC FL01WHSC [13] ; 
end // end FL01W01

//*** RECORD=FL01W02 ****
// Working storage for fl0p - Manufacturing country codes
// ***********************
Record FL01W02 type basicRecord
  10 XCTCD XCTCD [13] ; 
  10 FL01WDES FL01WDES [13] ; 
end // end FL01W02

//*** RECORD=FL01W03 ****
// Working storage to save FBDREC.
// ***********************
Record FL01W03 type basicRecord
  10 FL01WGR3 FL01WGR3 ; 
    15 XXXTSLEN XXXTSLEN ; 
    15 FL01WFBD FL01WFBD [33] ; 
end // end FL01W03

//*** RECORD=FL01W04 ****
// *************** FOOTWEAR FACTORY LOAD/BUY SYSTEM ***********
// ************** FACTORY LOAD QUANTITY TO BUY TABLE **********
// 
// working storage save area for dfbuy.vflqtb01 row.
// 
// 
// MAINTENANCE LOG:
// 
// CONTROL      DATE    NAME     COMMENT
// --------  ---------  -------  ------------------------------
// FL-340    08-21-92   pmainwcreated.
// ***********************
Record FL01W04 type basicRecord
  5 FBDGROUP FBDGROUP ; 
    10 FBDMDTYP FBDMDTYP ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2LNINB OP2LNINB ; 
    10 PC2CUXID PC2CUXID ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XCNCD XCNCD ; 
    10 YSMXGA YSMXGA ; 
    10 FBDBTCD FBDBTCD ; 
    10 XCTCD XCTCD ; 
    10 FY2MFGPC FY2MFGPC ; 
    10 FBDQTB FBDQTB ; 
    10 FBDTOQTB FBDTOQTB ; 
    10 FBDPSFTY FBDPSFTY ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 FB8FFCOM FB8FFCOM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FL01W04

// factory to be deleted
DataItem FL01M-DELETE-FCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from factory
DataItem FL01M-FROM-FCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory to be added
DataItem FL01M-NEW-FCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl0p factory select code
DataItem FL01M-SELECTED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date yymm
DataItem FL01W-BUY-DT-YYMM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl01 buy month
DataItem FL01W-BUY-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 buy year
DataItem FL01W-BUY-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete override switch
DataItem FL01W-DEL-OVERRIDE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete qty switch
DataItem FL01W-DELETE-QTY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl01 entry index
DataItem FL01W-FCTY-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 column index
DataItem FL01W-HDR-BUY-DT-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Maximum number of TS pages
DataItem FL01W-MAX-TS-PAGES num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity to buy array
DataItem FL01W-QTB-ARRAY char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season
DataItem FL01W-SESN-DESC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season yr range
DataItem FL01W-SESN-YR-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Season year range yy
DataItem FL01W-SESN-YR-RNG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 start column
DataItem FL01W-START-COLUMN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage index
DataItem FL01W-TS-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 line index
DataItem FL01W-TS-LINE-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 breakup date century
DataItem FL01WCCB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key changed switch
DataItem FL01WCKS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor switch
DataItem FL01WCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Country code index
DataItem FL01WCTX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed switch
DataItem FL01WDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data exists switch
DataItem FL01WDES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem FL01WDRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current vflqtb01 row index
DataItem FL01WDSV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 buy date alpha
DataItem FL01WDTA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl01 breakup date
DataItem FL01WDTB char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl01 buy date numeric
DataItem FL01WDTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XCT-CTRY-CD
DataItem FL01WFBD char(123)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory save
DataItem FL01WFCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory updated switch
DataItem FL01WFUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FL01WGR3 char(4063)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity to buy
DataItem FL01WHQT decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity to buy
DataItem FL01WHQX char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory select code array
DataItem FL01WHSC char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GENERAL INDEX 1
DataItem FL01WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GENERAL INDEX 2
DataItem FL01WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GENERAL INDEX 3
DataItem FL01WIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 row key
DataItem FL01WKEY char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// left or right part of scrn sw
DataItem FL01WLRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum vflqtb01 rows read in
DataItem FL01WMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clear map switch
DataItem FL01WMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alpha model number
DataItem FL01WMDA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric display model number
DataItem FL01WMDN num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 breakup date month
DataItem FL01WMOB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 match switch
DataItem FL01WMSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date yymm numeric
DataItem FL01WNDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current page save
DataItem FL01WPSV num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity index
DataItem FL01WQIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select counter
DataItem FL01WSCN decimal(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save country code
DataItem FL01WSCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style developemnt switch
DataItem FL01WSDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save factory code
DataItem FL01WSFY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fl01 select test switch
DataItem FL01WSHS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season desc
DataItem FL01WSNS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current totalline counter
DataItem FL01WTSV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 work index
DataItem FL01WWIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fl01 breakup date year
DataItem FL01WYRB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

