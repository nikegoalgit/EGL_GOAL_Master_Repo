package fl02;

import corpcom1.CACHGFL;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XFRCD;
import corpx1.XFRTBL;
import corpx2.XWHCD;
import corpz3.ZZZCHGCT;
import fb.common.FB-LATE-BK-FL;
import fb.common.FB-LATE-BK-FL-MDT;
import fb.common.FB7QTB;
import fb.common.FB7REC;
import fb.common.FB8FTQTB;
import fb.common.FB9REC;
import fb.common.FBDBTCD;
import ff.common.*;
import fl.common.FLWREC;
import fy.common.FY1REC;
import fy.common.FY3REC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pc.common.PC2CUXID;
import pc.common.PC3REC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PGAREC;
import sy.common.SY1SSTNM;
import sy.common.SY2CLRAB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FL02 ****
// This application obtains a product then displays a list
// of factories for that product.  The user can select one
// & enter a factory to move it to.  The user may scroll
// forward or back to view all from factories obtained.
// 
// The user may select a displayed factory & press ENTER to
// move it to the entered to factory or exit to any allowed
// application via Fast Path.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//  FB303   12/14/92  LDELUH  New application.
//          01/27/95  JALLE1  Change S.O. to 9.3 digits.
//          02/10/95  JALLE1  Darken S.O. when = 0.
// y2kfix   11/20/97  pharwo  regenerate for xx0xs01 changes
// *********************
Program FL02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB7REC FB7REC; // record
  FB9REC FB9REC; // record
  FL02W00 FL02W00; // record
  FL02W01 FL02W01; // record
  FL02W03 FL02W03; // record
  FLWREC FLWREC; // record
  FY1REC FY1REC; // record
  FY3REC FY3REC; // record
  PC3REC PC3REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XFRTBL; // table
  use FL02M.FL02M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FL02M001 initial; /* M001 input/output*/
    set FL02W00 empty; /* Working storage*/
    set FL02W01 empty; /* M001 display storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date & time convert parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA6REC empty; /* Print subroutine parameters*/

    FL02W00.FL02W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    FL02W00.FL02W-REQUEST-DATA-SW = "N"; /* Request for data switch*/
    FL02W00.CACHGFL = "N"; /* Set data not obtained*/

    if (FLWREC.SY1STNBR != "    ")
      FL02W00.FL02W-REQUEST-DATA-SW = "Y"; /* Request data*/
    end

    COMMAREA.XGPCD = "02";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL02001; /* Converse the main process*/


    FL02001: FL02001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL02001; /* Converse the main process*/


  end // end main
end // end FL02

// Main process to display a map
Function FL02001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FL02100(); /* Obtain the data to display*/

  FL02200(); /* Format and display the map*/

  FL02300(); /* Check attention identifier*/

  FL02400(); /* Reset fields to normal intensity*/

  FL02500(); /* Verify the entered data*/

  FL02600(); /* Process valid input request*/


end // end FL02001

// Obtain the data to display
Function FL02100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FL02W00.FL02W-REQUEST-DATA-SW == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    return; /* Return to previous process*/
  end

  FL02W00.CACHGFL = "N"; /* Set data not obtained*/

   /* ------------------------------------------------------------*/
   /* Obtain data & build temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FL02110(); /* Build up the temporary storage*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FL02W00.TA5TSQIX == 0) /* No pages formatted*/
    FLWREC.XXXMODID = "100"; /* Module identification*/
    FLWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    return; /* Exit to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FLWREC.XXXMSGNO == 0) /* No message to display*/
    FL02W00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FL02W00.FL02W-REQUEST-DATA-SW = "N";
                                   /* Request for data switch "off"*/
  FL02W00.CACHGFL = "Y"; /* Set data obtained*/


end // end FL02100

// Build temp storage queue
Function FL02110()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FL02W00.XXXTSLEN = 660; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FL02111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* If short style name not obtained then get it & color abr.*/
   /* ------------------------------------------------------------*/

  if (FL02W00.SY1SSTNM == "   ") /* short style name spaces*/
    set PGAREC empty;
    PGAREC.SY1STNBR = FLWREC.SY1STNBR;
    FL02S10(); /* get short style name*/
    set PG2REC empty; /* Clear row storage area*/
    PG2REC.SY1STNBR = FLWREC.SY1STNBR;
    if (FLWREC.SY2CLRID == "   ")
      FLWREC.SY2CLRID = "00 ";
    end
    if (FLWREC.XDMCD == "  ")
      FLWREC.XDMCD = "00";
    end
    PG2REC.SY2CLRID = FLWREC.SY2CLRID;
    PG2REC.XDMCD = FLWREC.XDMCD;
    FL02S15(); /* Obtain SYCLR row*/
        /* ------------------------------------------------------------*/
         /* If not found it is a style devel so set color abrv to "*".*/
        /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
      FL02W00.SY2CLRAB = PG2REC.SY2CLRAB; /* Color abrv*/
    else
      if (FLWREC.SY2CLRID == "00 ")
        FLWREC.SY2CLRID = "   ";
      end
      if (FLWREC.XDMCD == "00")
        FLWREC.XDMCD = "  ";
      end
      FL02W00.SY2CLRAB = "**********"; /* Color abrv*/
    end
  end

   /* ------------------------------------------------------------*/
    /* Obtain current buy date.*/
   /* ------------------------------------------------------------*/

  FL02112(); /* Get curr buy date*/

   /* ------------------------------------------------------------*/
    /* Check to make sure that autoload has not yet run.*/
   /* ------------------------------------------------------------*/

  FL02113(); /* Check for autoload*/

   /* ------------------------------------------------------------*/
    /* Obtain & format FB7REC rows into temporary storage area.*/
   /* ------------------------------------------------------------*/

  FL02114(); /* Open MFBUY csr*/
  FL02W00.FL02W-END-MFBUY-SW = "N"; /* Init end csr sw*/

   /* ------------------------------------------------------------*/
    /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  while (FL02W00.FL02W-END-MFBUY-SW == "N") /* Until end of cursor*/
    FL02115(); /* Fetch selected FB7REC row*/
     /* ------------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
     /* ------------------------------------------------------------*/
    if (FL02W00.FL02WMIX > 15) /* Page is full*/
      FL02117(); /* Add page to temporary storage*/
    end
  end
   /* ------------------------------------------------------------*/
    /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (FL02W00.FL02WMIX > 1) /* Page was formatted*/
    FL02117(); /* Add page to temporary storage*/
  end
   /* ------------------------------------------------------------*/
    /* Close the cursor for the selected FB7REC set.*/
   /* ------------------------------------------------------------*/
  FL02118(); /* Close FB7REC cursor*/


end // end FL02110

// Purge any temporary storage
Function FL02111()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FL02W01 empty; /* M001 display storage*/

  FL02W00.FL02W-UPDATE-TSQ-SW = "N";
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FL02W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FL02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FLWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02111

// Get current buy date
Function FL02112()


  set FB9REC empty;

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FL02112"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL02M001.XXXMODID = "112";

  FL02W00.FL02W-REQUEST-DATA-SW = "N"; /* request for data flag*/

  exit stack;


end // end FL02112

// Check for autoload
Function FL02113()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PC3REC empty;
  FL02W00.FL02W-WORK-CCYYMMDD = FB9REC.FB8BUYDT;
  PC3REC.PC3BUYMO = FL02W-WORK-CCYYMM; /* Buy month*/
  PC3REC.XGPCD = "02"; /* XGP-GPC-CD*/
  PC3REC.PC3ENTBY = "PC1102"; /* entered by id*/

  set FL02W03 empty;
  FL02W03.FL02W-FUNC = "SD"; /* Function code*/


  try
    call "IO3270" (FL02W03, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* GOOD RETURN*/

    if (FL02W03.FL02W-AUTOLOAD-CNT != 0) /* If autoload ran*/

      FLWREC.XXXMODID = "113"; /* Module identification*/
      converseLib.validationFailed(476); /* Indicate autoload has run*/
      exit stack; /**/

    else

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "113 SEL COUNT DPRODC.VPOHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "M001"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3GROUP; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02113

// Select & open FB7REC cursor
Function FL02114()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FB7REC empty; /* Clear row storage area*/

  FB7REC.SY1STNBR = FLWREC.SY1STNBR; /* Style*/
  FB7REC.SY2CLRID = FLWREC.SY2CLRID; /* Color*/
  FB7REC.XDMCD = FLWREC.XDMCD; /* Dimension*/
  FB7REC.FB8BUYDT = FB9REC.FB8BUYDT; /* Curr buy dt*/
  FB7REC.XWHCD = "*"; /* Warehouse*/
  FB7REC.PC2CUXID = "*"; /* Cust xref*/
  FB7REC.FB7RTADT = -1; /* RTA DATE*/

   /* ------------------------------------------------------------*/
   /* Select the requested rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("S1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL02W00.FL02WMIX = 1; /* Initialize display index*/
      FL02W00.FL02W-END-MFBUY-SW = "N";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN MFBUY LIST FOR STY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB7REC.SY1STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02114

// Fetch next FB7REC row
Function FL02115()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("N1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL02116(); /* Save in display storage*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FL02W00.FL02W-END-MFBUY-SW = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FB7REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02115

// Save data in display storage
Function FL02116()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  FL02W01.FL02W-FR-FY-FCTY-CD[FL02WMIX] = FB7REC.FY1FCTYC;
  FL02W01.FBDBTCD[FL02WMIX] = FB7REC.FBDBTCD;
  FL02W01.PC2CUXID[FL02WMIX] = FB7REC.PC2CUXID;
  FL02W01.XWHCD[FL02WMIX] = FB7REC.XWHCD;
  FL02W01.OP1PARTN[FL02WMIX] = FB7REC.OP1PARTN;
  FL02W01.OP1CUOID[FL02WMIX] = FB7REC.OP1CUOID;
  FL02W01.OP1NORID[FL02WMIX] = FB7REC.OP1NORID;
  FL02W01.FL02W-RTA-CCYYMMDD[FL02WMIX] = FB7REC.FB7RTADT;
  FL02W00.FL02W-WORK-CCYYMMDD = FB7REC.FB7RTADT;
  FL02W00.FL02W-WORK-RTA-YEAR = FL02W00.FL02W-WORK-YEAR;
  FL02W00.FL02W-WORK-RTA-MONTH = FL02W00.FL02W-WORK-MONTH;
  FL02W00.FL02W-WORK-RTA-DAY = FL02W00.FL02W-WORK-DAY;
  FL02W01.FL02W-RTA-MMDDYY[FL02WMIX] = FL02W00.FL02W-WORK-RTA-MMDDYY;

  FL02W01.FL02W-BUY-QTY[FL02WMIX] = 0;
  FL02W00.FL02WSIX = 1; /* Init size index*/
  while (FL02W00.FL02WSIX <= 40) /* Until no more sizes*/
    FL02W01.FL02W-BUY-QTY[FL02WMIX] = FL02W01.FL02W-BUY-QTY[FL02WMIX] +     FB7REC.FB7QTB[FL02WSIX];
    FL02W00.FL02WSIX = FL02W00.FL02WSIX + 1; /* Increment size index*/
  end

  FL02W01.XFRCD[FL02WMIX] = "20"; /* Default rsn code*/
  FL02W01.ZZZCHGCT[FL02WMIX] = FB7REC.ZZZCHGCT; /* Chg count*/

  FL02W00.FL02WMIX = FL02W00.FL02WMIX + 1; /* Increment display index*/


end // end FL02116

// Add page to temp storage
Function FL02117()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FL02W01.XXXTSLEN = FL02W00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FL02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set FL02W01 empty; /* M001 display storage*/
    FL02W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FL02W00.FL02WMIX = 1; /* Map line number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FLWREC.XXXMODID = "117"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02117

// Close FB7REC cursor
Function FL02118()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("C1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FLWREC.XXXMODID = "118"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FB7REC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02118

// Format and converse the map
Function FL02200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FL02W00.FL02W-REQUEST-DATA-SW == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0)   /* or no error found*/
    if (FL02W00.FL02W-FORMAT-MAP-SW == "Y") /* map must be formatted*/
      FL02210(); /* Format the data on the map*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Protect S.O. data if = 0.*/
   /* ------------------------------------------------------------*/

  FL02W00.FL02WMIX = 1;
  while (FL02W00.FL02WMIX <= 15)
    if (FL02M001.OP1CUOID[FL02WMIX] == 0
     && FL02M001.OP1NORID[FL02WMIX] == 0)
      set FL02M001.OP1CUOID[FL02WMIX] invisible, skip;
      set FL02M001.FL02M-SO-NBR-PERIOD[FL02WMIX] invisible, skip;
      set FL02M001.OP1NORID[FL02WMIX] invisible, skip;
    end
    FL02W00.FL02WMIX = FL02W00.FL02WMIX + 1;
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH and map*/
   /* information.*/
   /* ------------------------------------------------------------*/

  FL02M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FL02M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL02M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FLWREC.XXXMSGNO != 0) /* Message to display*/

    FL02M001.XXXMODID = FLWREC.XXXMODID; /* Module identification*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end /* Message number*/

    set FL02M001 alarm; /* Indicate sound alarm*/

  end

  converse FL02M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FLWREC.XXXMODID = "   "; /* Module identification*/
  FLWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FL02M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL02M001.CAITEM; /* Application data*/


end // end FL02200

// Format the display data
Function FL02210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FL02M001 initial; /* M001 input/output area*/

  FL02W00.FL02W-FORMAT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FL02W00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FL02W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (FL02W00.FL02W-UPDATE-TSQ-SW == "Y") /* Current page was changed*/
        FL02211(); /* Update temporary storage page*/
        FL02W00.FL02W-UPDATE-TSQ-SW = "N"; /* Reset update switch*/
      end
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (FL02W00.XXXTSPAG > FL02W00.TA5TSQIX) /* Desired greater highest*/
        FL02W00.XXXTSPAG = FL02W00.TA5TSQIX; /* Default to highest*/
      end
      FL02212(); /* Obtain temporary storage page*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FL02M001.SY1STNBR = FLWREC.SY1STNBR; /* style number*/
  FL02M001.SY2CLRID = FLWREC.SY2CLRID; /* color code*/
  FL02M001.XDMCD = FLWREC.XDMCD; /* dimension*/
  FL02M001.SY1SSTNM = FL02W00.SY1SSTNM; /* style short name*/
  FL02M001.SY2CLRAB = FL02W00.SY2CLRAB; /* color abbrev*/

  FL02W00.FL02WMIX = 1; /* Initialize line index*/

  while (FL02W00.FL02WMIX <= 15 /* Until screen is full*/
   && FL02W01.FL02W-FR-FY-FCTY-CD[FL02WMIX] > " ") /* or end of data*/
    if (FL02W00.FL02WMIX == 1) /* First select field*/
      set FL02M001.FL02M-SEL[FL02WMIX] cursor, normal; /* Position cursor*/
      set FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] normal; /* Unprotect*/
      set FL02M001.XFRCD[FL02WMIX] normal; /* Unprotect*/
    else
      set FL02M001.FL02M-SEL[FL02WMIX] normal; /* Unprotect*/
      set FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] normal; /* Unprotect*/
      set FL02M001.XFRCD[FL02WMIX] normal; /* Unprotect*/
    end
    FL02M001.FL02M-FR-FY-FCTY-CD[FL02WMIX] = FL02W01.FL02W-FR-FY-FCTY-CD[FL02WMIX]; /* from factory cd*/
    FL02M001.FBDBTCD[FL02WMIX] = FL02W01.FBDBTCD[FL02WMIX]; /* buy type*/
    FL02M001.PC2CUXID[FL02WMIX] = FL02W01.PC2CUXID[FL02WMIX]; /* cust xref*/
    FL02M001.XWHCD[FL02WMIX] = FL02W01.XWHCD[FL02WMIX]; /* warehouse code*/
    FL02M001.OP1CUOID[FL02WMIX] = FL02W01.OP1CUOID[FL02WMIX]; /* cust ord id*/
    FL02M001.FL02M-SO-NBR-PERIOD[FL02WMIX] = ".";
    FL02M001.OP1NORID[FL02WMIX] = FL02W01.OP1NORID[FL02WMIX]; /* nike ord id*/
    FL02M001.FL02M-RTA-MMDDYY[FL02WMIX] = FL02W01.FL02W-RTA-MMDDYY[FL02WMIX]; /* rta mmddyy*/
    FL02M001.FL02M-BUY-QTY[FL02WMIX] = FL02W01.FL02W-BUY-QTY[FL02WMIX]; /* buy qty*/
    FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] = FL02W01.FL02W-TO-FY-FCTY-CD[FL02WMIX]; /* to factory cd*/
    FL02M001.XFRCD[FL02WMIX] = FL02W01.XFRCD[FL02WMIX]; /* xfer reason cd*/
    FL02W00.FL02WMIX = FL02W00.FL02WMIX + 1; /* Increment line index*/
  end


end // end FL02210

// Update temporary storage page
Function FL02211()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FL02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FLWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02211

// Read temporary storage page
Function FL02212()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FL02W01.XXXTSLEN = FL02W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FL02W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FL02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FLWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02212

// Check attention identifier
Function FL02300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FL02W00.FL02W-REQUEST-DATA-SW == "Y") /* Request for data*/
      set FL02W01 empty; /* M001 display storage*/
    end
    FL02W00.FL02W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    FL02W00.FL02W-REQUEST-DATA-SW = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FL02M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FL02111(); /* Purge temporary storage*/
      XSFLS01(); /* Exit to another application*/
      set FL02M001.CATOAP cursor, bold; /* Highlight*/
      FL02W00.FL02W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
      FL02W00.FL02W-REQUEST-DATA-SW = "N"; /* Request for data switch*/
    else
      FLWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL02M001"; /* Application find code*/
    end
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FL0A"; /* TO application*/
    end
    FL02111(); /* Purge temporary storage*/
    XSFLS01(); /* Exit to another application*/
    FL02W00.FL02W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    FL02W00.FL02W-REQUEST-DATA-SW = "N"; /* Request for data switch*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7
   && converseVar.eventKey not pf8)
    FLWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end


end // end FL02300

// Reset highlighted fields
Function FL02400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FL02M001.SY1STNBR initialAttributes;
  set FL02M001.SY2CLRID initialAttributes;
  set FL02M001.XDMCD initialAttributes;
  set FL02M001.OP1CUOID initialAttributes;
  set FL02M001.FL02M-SO-NBR-PERIOD initialAttributes;
  set FL02M001.OP1NORID initialAttributes;

  FL02W00.FL02WMIX = 1; /* Initialize line index*/

  while (FL02W00.FL02WMIX <= 15 /* Until end of lines*/
   && FL02M001.FL02M-FR-FY-FCTY-CD[FL02WMIX] > " ") /* or end disp*/
    set FL02M001.FL02M-SEL[FL02WMIX] normal; /* Reset select flag*/
    set FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] normal;
    set FL02M001.XFRCD[FL02WMIX] normal;
    FL02W00.FL02WMIX = FL02W00.FL02WMIX + 1; /* Incr line ix*/
  end

  set FL02M001.CATOAP initialAttributes; /* TO application*/
  set FL02M001.CAITEM initialAttributes; /* Application data*/


end // end FL02400

// Verify the entered data
Function FL02500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FL02M001.CAITEM > " ") /* Application data was entered*/
    FLWREC.XXXMODID = "500"; /* Module identification*/
    set FL02M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    FL02510(); /* Verify scroll request*/
  else
    /* ------------------------------------------------------------*/
     /* If it is not a scroll request & the search key was*/
     /* changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    if (FL02M001.SY1STNBR != FLWREC.SY1STNBR /* If style changed*/
     || FL02M001.SY2CLRID != FLWREC.SY2CLRID /* or color changed*/
     || FL02M001.XDMCD != FLWREC.XDMCD       /* or dim changed*/
     || FL02W00.CACHGFL == "N")              /* or data not obtained*/
      FL02520(); /* Verify the key fields*/
    else
      /* ------------------------------------------------------------*/
       /* Otherwise, if page was formatted, verify data in the line.*/
      /* ------------------------------------------------------------*/
      if (FL02W00.TA5TSQIX > 0 /* Page was formatted*/
       || FL02W00.CACHGFL == "Y")
        FL02W00.FL02W-SELECT-SW = "N"; /* Initialize select switch*/
        FL02W00.FL02WMIX = 15; /* Initialize line index*/
        while (FL02W00.FL02WMIX > 0) /* Until end of lines*/
          FL02530(); /* Verify data in the line*/
          FL02W00.FL02WMIX = FL02W00.FL02WMIX - 1;
                                   /* Decrement line number*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FL02500

// Verify scroll request
Function FL02510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FL02W00.XXXTSPAG < 2)       /* and no previous pages*/
    FLWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FL02W00.XXXTSPAG >= FL02W00.TA5TSQIX) /* and no more pages*/
    FLWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FL02W00.FL02WMIX = 15; /* Initialize line index*/

  while (FL02W00.FL02WMIX > 0) /* Until end of lines*/
    if (FL02M001.FL02M-SEL[FL02WMIX] > " ") /* Selection entered*/
      FLWREC.XXXMODID = "510"; /* Module identification*/
      set FL02M001.FL02M-SEL[FL02WMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FL02W00.FL02WMIX = FL02W00.FL02WMIX - 1;
                                   /* Decrement line number*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FL02M001.SY1STNBR != FLWREC.SY1STNBR) /* Style changed*/
    FLWREC.XXXMODID = "510"; /* Module identification*/
    set FL02M001.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FL02M001.SY2CLRID != FLWREC.SY2CLRID) /* Color changed*/
    FLWREC.XXXMODID = "510"; /* Module identification*/
    set FL02M001.SY2CLRID cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FL02M001.XDMCD != FLWREC.XDMCD) /* Dim changed*/
    FLWREC.XXXMODID = "510"; /* Module identification*/
    set FL02M001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end


end // end FL02510

// Verify the key fields
Function FL02520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered since selections*/
   /* are not allowed when key fields are changed.*/
   /* ------------------------------------------------------------*/

  FL02W00.FL02WMIX = 15; /* Initialize line index*/

  while (FL02W00.FL02WMIX > 0) /* Until end of lines*/
    if (FL02M001.FL02M-SEL[FL02WMIX] > " ") /* Selection entered*/
      FLWREC.XXXMODID = "520"; /* Module identification*/
      set FL02M001.FL02M-SEL[FL02WMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FL02W00.FL02WMIX = FL02W00.FL02WMIX - 1; /* Decrement line number*/
  end

   /* ------------------------------------------------------------*/
   /* Verify that style was entered.  Key fields are not allowed*/
   /* to be spaces or zeros.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (FL02M001.SY1STNBR == " ") /* Style not entered*/
      FLWREC.XXXMODID = "520"; /* Module identification*/
      set FL02M001.SY1STNBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If product was entered verify that it is valid.*/
   /* ------------------------------------------------------------*/

  if (FL02M001.SY1STNBR > " ") /* Style was entered*/
    set PGAREC empty;
    PGAREC.SY1STNBR = FL02M001.SY1STNBR;
    FL02S10(); /* Get short style name*/
    set PG2REC empty; /* Clear row storage area*/
    PG2REC.SY1STNBR = FL02M001.SY1STNBR;
    if (FL02M001.SY2CLRID == "   ")
      FL02M001.SY2CLRID = "00 ";
    end
    if (FL02M001.XDMCD == "  ")
      FL02M001.XDMCD = "00";
    end
    PG2REC.SY2CLRID = FL02M001.SY2CLRID;
    PG2REC.XDMCD = FL02M001.XDMCD;
    FL02S15(); /* Obtain SYCLR row*/
        /* ------------------------------------------------------------*/
         /* If not found try SYDVL*/
        /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
      FL02W00.SY2CLRAB = PG2REC.SY2CLRAB; /* Color abrv*/
    else
      set PG4REC empty; /* Clear row storage area*/
      PG4REC.PG4STNBR = FL02M001.SY1STNBR;
      if (FL02M001.SY2CLRID == "00 ")
        FL02M001.SY2CLRID = "   ";
      end
      if (FL02M001.XDMCD == "00")
        FL02M001.XDMCD = "  ";
      end
      FL02S20(); /* Obtain SYDVL row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/
        FL02W00.SY2CLRAB = "**********"; /* Color abrv*/
      else
        FL02W00.SY2CLRAB = "            "; /* Color abrv*/
        FLWREC.XXXMODID = "520"; /* Module identification*/
        set FL02M001.SY1STNBR cursor, bold; /* Highlight*/
        set FL02M001.SY2CLRID bold; /* Highlight*/
        set FL02M001.XDMCD bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    end
  else
    FL02W00.SY2CLRAB = " "; /* Clear color abrv*/
  end


end // end FL02520

// Verify data in the line
Function FL02530()

   /* ------------------------------------------------------------*/
   /* If xfer reason code was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FL02M001.FL02M-SEL[FL02WMIX] == "S")
    if (FL02M001.XFRCD[FL02WMIX] != FL02W01.XFRCD[FL02WMIX]
     && FL02M001.XFRCD[FL02WMIX] > " ") /* Xfer rsn cd entered*/
      if (FL02M001.XFRCD[FL02WMIX] in XFRTBL.XFRCD /* Code in table*/
       && XFRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        /* next sentence*/
      else
       /* ------------------------------------------------------------*/
        /* If not found or inactive, indicate invalid.*/
       /* ------------------------------------------------------------*/
        FLWREC.XXXMODID = "530"; /* Module identification*/
        set FL02M001.XFRCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If to factory was entered verify the code & that it is*/
   /* valid for the style/color/dim.*/
   /* ------------------------------------------------------------*/
  if (FL02M001.FL02M-SEL[FL02WMIX] == "S")
    if (FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX]
     != FL02W01.FL02W-TO-FY-FCTY-CD[FL02WMIX])
      if (FL02M001.FL02M-FR-FY-FCTY-CD[FL02WMIX] == 
      FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX])
        FLWREC.XXXMODID = "530"; /* Module identification*/
        set FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] cursor, bold;
        converseLib.validationFailed(397); /* TO & FROM cannot be eq*/
      else
        if (FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] > " ") /* To fcty entered*/
          FL02532(); /* Verify fcty code*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Code is valid*/
            FL02534(); /* Verify valid for style*/
            if (SQLCA.VAGen_SQLCODE != 0) /* Invalid for style*/
              FLWREC.XXXMODID = "530"; /* Module identification*/
              set FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] cursor, bold;
              converseLib.validationFailed(279); /* Indicate invalid for style*/
            end
          else /* Code not valid*/
            FLWREC.XXXMODID = "530"; /* Module identification*/
            set FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] cursor, bold;
            converseLib.validationFailed(10); /* Indicate invalid*/
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Make sure xfrcd & to factory were entered if a selection*/
   /* was made.*/
   /* ------------------------------------------------------------*/

  if (FL02M001.FL02M-SEL[FL02WMIX] == "S")
    if (FL02M001.XFRCD[FL02WMIX] == "  ")
      FLWREC.XXXMODID = "530"; /* Module identification*/
      set FL02M001.XFRCD[FL02WMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end

    if (FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] == "    ")
      FLWREC.XXXMODID = "530"; /* Module identification*/
      set FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] cursor, bold; /**/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Make sure only 's' was used for selecting.*/
   /* ------------------------------------------------------------*/

  if (FL02M001.FL02M-SEL[FL02WMIX] > " ") /* Selection entered*/
    if (FL02M001.FL02M-SEL[FL02WMIX] == "S")
      FL02W00.FL02W-SELECT-SW = "Y";
    else
      FLWREC.XXXMODID = "530"; /* Module identification*/
      set FL02M001.FL02M-SEL[FL02WMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Only 's' allowed*/
    end
  else /* Selection not entered*/
    if (FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] != "    ")
      FLWREC.XXXMODID = "530"; /* Module identification*/
      set FL02M001.FL02M-SEL[FL02WMIX] cursor, bold; /* Highlight*/
      set FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX] bold;
      converseLib.validationFailed(41); /* Only 's' allowed*/
    end
  end


end // end FL02530

// Edit to factory code
Function FL02532()

   /* ------------------------------------------------------------*/
   /* Select the unique row from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty;
  FY1REC.FY1FCTYC = FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX];
  FY1REC.XGPCD = "02";
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* if successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "532"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02532

// Validate factory for product
Function FL02534()
   /* ------------------------------------------------------------*/
   /* Build key*/
   /* ------------------------------------------------------------*/

  set FY3REC empty;
  FY3REC.XGPCD = "02";
  FY3REC.FY1FCTYC = FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX];
  FY3REC.SY1STNBR = FL02M001.SY1STNBR;
  FY3REC.SY2CLRID = FL02M001.SY2CLRID;
  FY3REC.XDMCD = FL02M001.XDMCD;
  FY3REC.XQACD = "01";
  FY3REC.PC2INSEG = "000";
  FY3REC.XPGCD = "00";
  FY3REC.XUMCD = "01";

   /* ------------------------------------------------------------*/
    /* these comments are wrapped around this puppy because*/
    /* the table for fy3rec has blank for season & 0 for range.*/
   /* ------------------------------------------------------------*/
  FY3REC.XSECD = " ";
  FY3REC.XSNYR = 0;
   /* ------------------------------------------------------------*/
    /* these comments are wrapped around this puppy because*/
    /* the table for fy3rec has blank for season & 0 for range.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2990" ("S ", SQLCA, FY3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FL02M001.XXXMODID = "534"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL02M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY3REC.FY3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/


end // end FL02534

// Process valid input request
Function FL02600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FL02W00.FL02W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FL system commarea.*/
   /* ------------------------------------------------------------*/

  if (FL02M001.SY1STNBR != FLWREC.SY1STNBR /* If style changed*/
   || FL02M001.SY2CLRID != FLWREC.SY2CLRID /* or color changed*/
   || FL02M001.XDMCD != FLWREC.XDMCD)      /* or dim changed*/
    FLWREC.SY1STNBR = FL02M001.SY1STNBR;
    FLWREC.SY2CLRID = FL02M001.SY2CLRID;
    FLWREC.XDMCD = FL02M001.XDMCD;

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (FLWREC.SY1STNBR != " ") /* Style entered*/
      FL02111(); /* Purge any temp storage*/
      FL02W00.FL02W-REQUEST-DATA-SW = "Y"; /* Request for data switch*/
    end
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    FL02W00.XXXTSPAG = FL02W00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    FL02W00.XXXTSPAG = FL02W00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* ENTER was requested so perform updates.*/
   /* ------------------------------------------------------------*/

  if (FL02W00.FL02W-SELECT-SW == "Y") /* If selections were made*/
    XX0XS01(); /* get time and date*/
    FL02W00.FL02WMIX = 1; /* Initialize line index*/
    while (FL02W00.FL02WMIX <= 15) /* Until end of lines*/
      FL02W01.FL02W-TO-FY-FCTY-CD[FL02WMIX] = FL02M001.FL02M-TO-FY-FCTY-CD[FL02WMIX];
      FL02W01.XFRCD[FL02WMIX] = FL02M001.XFRCD[FL02WMIX];
      if (FL02M001.FL02M-SEL[FL02WMIX] == "S")
        FL02610(); /* Get "from" mfbuy*/
        FL02620(); /* check for existing "to" mfbuy*/
        if (SQLCA.VAGen_SQLCODE == 0) /* "to" mfbuy already exists*/
          if (FL02W01.FBDBTCD[FL02WMIX] == FB7REC.FBDBTCD) /* same buy type*/
            FL02640(); /* update existing "to" mfbuy*/
            FL02650(); /* Delete old "from" mfbuy*/
          else
            FL02610(); /* Get "from" mfbuy*/
            FL02650(); /* Delete old "from" mfbuy*/
            FL02660(); /* Re-insert with "to" factory*/
          end
        else /* "to" mfbuy not exist*/
          FL02610(); /* Get "from" mfbuy*/
          FL02650(); /* Delete old "from" mfbuy*/
          FL02660(); /* Re-insert with "to" factory*/
        end
      end
      FL02W00.FL02WMIX = FL02W00.FL02WMIX + 1; /* Increment line index*/
    end

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit changes*/
    FL02W00.FL02W-REQUEST-DATA-SW = "Y"; /* request for data switch*/
    FLWREC.XXXMSGNO = 32; /* info message only*/
    FLWREC.XXXMODID = "600"; /* module id*/
  end


end // end FL02600

// Get "from" MFBUY
Function FL02610()

   /* ------------------------------------------------------------*/
   /* Select the unique row from the table.*/
   /* ------------------------------------------------------------*/

  set FB7REC empty;
  FB7REC.FY1FCTYC = FL02W01.FL02W-FR-FY-FCTY-CD[FL02WMIX];
  FB7REC.OP1PARTN = FL02W01.OP1PARTN[FL02WMIX];
  FB7REC.OP1CUOID = FL02W01.OP1CUOID[FL02WMIX];
  FB7REC.OP1NORID = FL02W01.OP1NORID[FL02WMIX];
  FB7REC.SY1STNBR = FL02M001.SY1STNBR;
  FB7REC.SY2CLRID = FL02M001.SY2CLRID;
  FB7REC.XDMCD = FL02M001.XDMCD;
  FB7REC.FB8BUYDT = FB9REC.FB8BUYDT;
  FB7REC.XWHCD = FL02W01.XWHCD[FL02WMIX];
  FB7REC.PC2CUXID = FL02W01.PC2CUXID[FL02WMIX];
  FB7REC.FB7RTADT = FL02W01.FL02W-RTA-CCYYMMDD[FL02WMIX];
  try
    call "IO3490" ("SB", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* if successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FL02W00.FB-LATE-BK-FL = FB7REC.FB-LATE-BK-FL;
      FL02W00.FB-LATE-BK-FL-MDT = FB7REC.FB-LATE-BK-FL-MDT;
      FL02W00.FB8FTQTB = FB7REC.FB8FTQTB;
      FL02W00.FL02WSIX = 1; /* Init size index*/
      while (FL02W00.FL02WSIX <= 40)
        FL02W00.FB7QTB[FL02WSIX] = FB7REC.FB7QTB[FL02WSIX];
        FL02W00.FL02WSIX = FL02W00.FL02WSIX + 1; /* Increment index*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE MFBUY ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB7REC.SY1STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02610

// Check "to" fcty MFBUY exist
Function FL02620()

   /* ------------------------------------------------------------*/
   /* Select the unique row from the table.*/
   /* ------------------------------------------------------------*/

  set FB7REC empty;
  FB7REC.FY1FCTYC = FL02W01.FL02W-TO-FY-FCTY-CD[FL02WMIX];
  FB7REC.OP1PARTN = FL02W01.OP1PARTN[FL02WMIX];
  FB7REC.OP1CUOID = FL02W01.OP1CUOID[FL02WMIX];
  FB7REC.OP1NORID = FL02W01.OP1NORID[FL02WMIX];
  FB7REC.SY1STNBR = FL02M001.SY1STNBR;
  FB7REC.SY2CLRID = FL02M001.SY2CLRID;
  FB7REC.XDMCD = FL02M001.XDMCD;
  FB7REC.FB8BUYDT = FB9REC.FB8BUYDT;
  FB7REC.XWHCD = FL02W01.XWHCD[FL02WMIX];
  FB7REC.PC2CUXID = FL02W01.PC2CUXID[FL02WMIX];
  FB7REC.FB7RTADT = FL02W01.FL02W-RTA-CCYYMMDD[FL02WMIX];
  try
    call "IO3490" ("SB", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* if successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE MFBUY ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB7REC.SY1STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02620

// Updt existing "to" MFBUY
Function FL02640()
  FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

  FB7REC.XFRCD = FL02W01.XFRCD[FL02WMIX];

  FL02W00.FL02WSIX = 1; /* Init size index*/
  while (FL02W00.FL02WSIX <= 40)
    FB7REC.FB7QTB[FL02WSIX] = FB7REC.FB7QTB[FL02WSIX]     + FL02W00.FB7QTB[FL02WSIX];
    FL02W00.FL02WSIX = FL02W00.FL02WSIX + 1; /* Increment sz index*/
  end

  if (FL02W00.FB-LATE-BK-FL == "Y")
    FB7REC.FB-LATE-BK-FL = FL02W00.FB-LATE-BK-FL;
    FB7REC.FB-LATE-BK-FL-MDT = FL02W00.FB-LATE-BK-FL-MDT;
  end

  try
    call "IO3490" ("U2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

  if (sysVar.errorCode == "00000000") /* good return*/

    if (SQLCA.VAGen_SQLCODE == 0) /* good call*/
      return; /* return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      FLWREC.XXXMSGNO = 20; /* updated since displayed here*/
      FLWREC.XXXMODID = "640";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back changes already made*/
      exit stack; /* return to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "640"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back changes already made*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back changes already made*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE MFBUY ROW       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB7REC.FB7GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02640

// Delete old "from" MFBUY
Function FL02650()

   /* ------------------------------------------------------------*/
   /* Delete the unique row from the table.*/
   /* ------------------------------------------------------------*/

  FB7REC.FY1FCTYC = FL02W01.FL02W-FR-FY-FCTY-CD[FL02WMIX];
  try
    call "IO3490" ("D2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* if successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "650"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE UNIQUE MFBUY ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB7REC.SY1STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02650

// Re-insert with "to" fcty
Function FL02660()

   /* ------------------------------------------------------------*/
   /* Add row to the table.*/
   /* ------------------------------------------------------------*/

  FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FB7REC.ZZZCHGCT = FB7REC.ZZZCHGDT + 1; /* Change count*/
  FB7REC.FY1FCTYC = FL02W01.FL02W-TO-FY-FCTY-CD[FL02WMIX];
  FB7REC.XFRCD = FL02W01.XFRCD[FL02WMIX];
  try
    call "IO3490" ("A ", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* if successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "660"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD MFBUY ROW       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB7REC.SY1STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL02660

// Get short style name
Function FL02S10()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPRODG.VSYPRD01*/
   /* ---------------------------------------------------------*/

  PGAREC.XGPCD = COMMAREA.XGPCD;

  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FL02W00.SY1SSTNM = PGAREC.PGASSTNM;
    return;

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

      FL02W00.SY1SSTNM = "************";
      return;

    else

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "GET SHORT STYLE NAME            ";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      return; /* Return to previous process*/

    end

  end


end // end FL02S10

// Get SYCLR data
Function FL02S15()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = COMMAREA.XGPCD; /* gpc code*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL02W00.FL02W-REQUEST-DATA-SW = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FL02S15

// Get SYDVL data
Function FL02S20()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FLWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSDVLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FL02W00.FL02W-REQUEST-DATA-SW = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FL02S20

//*** RECORD=FL02W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL02W00 type basicRecord
  10 FL02WMIX FL02WMIX ; 
  10 FL02WWIX FL02WWIX ; 
  10 FL02WSIX FL02WSIX ; 
  10 FL02W-FORMAT-MAP-SW FL02W-FORMAT-MAP-SW ; 
  10 FL02W-REQUEST-DATA-SW FL02W-REQUEST-DATA-SW ; 
  10 FL02W-END-MFBUY-SW FL02W-END-MFBUY-SW ; 
  10 FL02W-UPDATE-TSQ-SW FL02W-UPDATE-TSQ-SW ; 
  10 FL02W-SELECT-SW FL02W-SELECT-SW ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 CACHGFL CACHGFL ; 
  10 FL02W-WORK-CCYYMMDD FL02W-WORK-CCYYMMDD ; 
    15 FL02W-WORK-CCYYMM FL02W-WORK-CCYYMM ; 
      20 FL02W-WORK-CENTURY FL02W-WORK-CENTURY ; 
      20 FL02W-WORK-YEAR FL02W-WORK-YEAR ; 
      20 FL02W-WORK-MONTH FL02W-WORK-MONTH ; 
    15 FL02W-WORK-DAY FL02W-WORK-DAY ; 
  10 FL02W-WORK-RTA-MMDDYY FL02W-WORK-RTA-MMDDYY ; 
    15 FL02W-WORK-RTA-MONTH FL02W-WORK-RTA-MONTH ; 
    15 FL02W-WORK-RTA-DAY FL02W-WORK-RTA-DAY ; 
    15 FL02W-WORK-RTA-YEAR FL02W-WORK-RTA-YEAR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 FB7QTB FB7QTB [40] ; 
  10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
  10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
  10 FB8FTQTB FB8FTQTB ; 
end // end FL02W00

//*** RECORD=FL02W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FL02W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(660) ; 
    10 FL02W-SEL FL02W-SEL [15] ; 
    10 FL02W-FR-FY-FCTY-CD FL02W-FR-FY-FCTY-CD [15] ; 
    10 FBDBTCD FBDBTCD [15] ; 
    10 PC2CUXID PC2CUXID [15] ; 
    10 XWHCD XWHCD [15] ; 
    10 OP1PARTN OP1PARTN [15] ; 
    10 OP1CUOID OP1CUOID [15] ; 
    10 OP1NORID OP1NORID [15] ; 
    10 FL02W-RTA-MMDDYY FL02W-RTA-MMDDYY [15] ; 
    10 FL02W-RTA-CCYYMMDD FL02W-RTA-CCYYMMDD [15] ; 
    10 FL02W-BUY-QTY FL02W-BUY-QTY [15] ; 
    10 FL02W-TO-FY-FCTY-CD FL02W-TO-FY-FCTY-CD [15] ; 
    10 XFRCD XFRCD [15] ; 
    10 ZZZCHGCT ZZZCHGCT [15] ; 
end // end FL02W01

//*** RECORD=FL02W03 ****
// This work area is the first argument that is passed in the
// CALL statement for module IO3270.
// It contains the function to be performed and one general
// use summary count field.  The count field is used in
// conjunction with the select count function.
// 
// 
//   DATE       NAME      COMMENT
// --------    ------     -------------------------------------
// 12/29/92    LDELUH     Initial record creation.
// ***********************
Record FL02W03 type basicRecord
  10 FL02W-FUNC FL02W-FUNC ; 
  10 FL02W-AUTOLOAD-CNT FL02W-AUTOLOAD-CNT ; 
end // end FL02W03

// Autoload count
DataItem FL02W-AUTOLOAD-CNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy quantity
DataItem FL02W-BUY-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor switch
DataItem FL02W-END-MFBUY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FL02W-FORMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from factory code
DataItem FL02W-FR-FY-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// I/O module function
DataItem FL02W-FUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FL02W-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rta ccyymmdd
DataItem FL02W-RTA-CCYYMMDD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rta mmddyy
DataItem FL02W-RTA-MMDDYY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection indicator
DataItem FL02W-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select switch
DataItem FL02W-SELECT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to factory code
DataItem FL02W-TO-FY-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update TSQ switch
DataItem FL02W-UPDATE-TSQ-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work ccyymm
DataItem FL02W-WORK-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyymmdd
DataItem FL02W-WORK-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FL02W-WORK-CENTURY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem FL02W-WORK-DAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FL02W-WORK-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work rta day
DataItem FL02W-WORK-RTA-DAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work rta mmddyy
DataItem FL02W-WORK-RTA-MMDDYY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work rta month
DataItem FL02W-WORK-RTA-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work rta year
DataItem FL02W-WORK-RTA-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FL02W-WORK-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map lines index
DataItem FL02WMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// size index
DataItem FL02WSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem FL02WWIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

