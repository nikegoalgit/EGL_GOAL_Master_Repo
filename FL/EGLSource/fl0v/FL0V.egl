package fl0v;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom4.XSFLS01;
import corpcom4.XSPG202;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XGATBL;
import fb.common.FB8BUYDT;
import fb.common.FB9REC;
import fb.common.FBAMDNBR;
import fb.common.FBDGROUP;
import fb.common.FBDQTB;
import fb.common.FBDREC;
import fb.common.FBEREC;
import ff.common.*;
import fl.common.FLWREC;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PGAREC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=FL0V ****
// This application displays stock quantities to buy according
// to buy month for a specified schedule number, factory, and
// product.
// 
// twelve buy months will be displayed with the user-entered
// buy month in the middle column. The user may move the quant-
// ity for the entered buy month to different buy months by
// entering adjustment quantities after the move-to buy months.
// 
// The quanitity remaining for the move-from buy month must
// also be entered if it is not zero. All entered quantities
// must add up to the original quantity.
// 
// If an update to the Quantity To Buy Table is requested,
// the data is verified and , if correct, the update is per-
// formed.
// 
// The user may exit to any allowed application, via Fast Path
// or PF key.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          06/11/89  CNEWMA  New application.
//          08/14/90  jmclau  added code to get short style
//                            name and move blanks to color
//                            abbreviation for style
//                            developement styles.
//          08/27/90  jalle1  Check for contention due to merge
//                            before any update to
//                            dfbuy.vflqtb01 (dhermm request).
// f#fl203  10/15/90  jalle1  edit fcty instead of fcty/style.
// fl-214   04/17/91  pmainw  get style short name from
//                            dprodg.vsyprd01.
// e#fl250  05/23/91  jalle1  pass key info when transferring
//                            between fl applications.
//          08/22/91  jalle1  delete pg4rec from record list.
// FL313    04/01/92  jmclau  add gender age and gender age
//                            description.
// FL333    05/20/92  jmclau  default cursor to style number
//                            except when there isn't a
//                            schedule number. then defaults
//                            to schedule number.
// y2kfix   11/21/97  pharwo  Regenerate for xx0xs01 changes
// *********************
Program FL0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FBDREC FBDREC; // record
  FBEREC FBEREC; // record
  FL0VW00 FL0VW00; // record
  FL0VW01 FL0VW01; // record
  FL0VW02 FL0VW02; // record
  FL0VW03 FL0VW03; // record
  FLWREC FLWREC; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use FL0VM.FL0VM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FL0VM010 initial; /* M001 input/output*/
    set FL0VW00 empty; /* working storage*/
    set FL0VW01 empty; /* working storage*/
    set FL0VW02 empty; /* working storage*/
    set FL0VW03 empty; /* working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
     /* ------------------------------------------------------------*/
     /* If key is available in flwrec, move fields to map.*/
     /* ------------------------------------------------------------*/
    ;
    if (FLWREC.FBAMDNBR != 0) /* schedule nbr not zeroes*/
      FL0VM010.FBAMDNBR = FLWREC.FBAMDNBR; /* schedule number*/
      FL0VW03.FBAMDNBR = FLWREC.FBAMDNBR; /* schedule number*/
      FL0VM010.FY1FCTYC = FLWREC.FY1FCTYC; /* factory code*/
      FL0VW03.FY1FCTYC = FLWREC.FY1FCTYC; /* factory code*/
      FL0VM010.SY1STNBR = FLWREC.SY1STNBR; /* style number*/
      FL0VW03.SY1STNBR = FLWREC.SY1STNBR; /* style number*/
      FL0VM010.SY2CLRID = FLWREC.SY2CLRID; /* color number*/
      FL0VW03.SY2CLRID = FLWREC.SY2CLRID; /* color number*/
      FL0VM010.XDMCD = FLWREC.XDMCD; /* dimension code*/
      FL0VW03.XDMCD = FLWREC.XDMCD; /* dimension code*/
    end
    ;
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Default gpc to footwear if blank.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.XGPCD == "  ")
      COMMAREA.XGPCD = "02";
    end
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0V001; /* Converse the main process*/
    ;
    ;
    FL0V001: FL0V001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0V001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FL0V

// Inquire/maintain a table row
Function FL0V001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FL0V100(); /* Obtain the data to display*/
  ;
  FL0V200(); /* Format and display the map*/
  ;
  FL0V300(); /* Check attention identifier*/
  ;
  FL0V400(); /* Reset fields to normal intensity*/
  ;
  FL0V500(); /* Verify the entered data*/
  ;
  FL0V600(); /* Process valid input request*/
  ;
  ;
end // end FL0V001

// Obtain the data to display
Function FL0V100()
   /* ------------------------------------------------------------*/
   /* if data not requested, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VW00.FL0VWDRQ != "Y" /* data not requested*/
   || FLWREC.XXXMSGNO != 0    /* error occured*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    if (converseVar.validationMsgNum != 32) /* not sucessful update*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain Buy Date*/
   /* ------------------------------------------------------------*/
  ;
   /* PERFORM FL0V110                 ; get table row*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain additional product data*/
   /* ------------------------------------------------------------*/
  ;
  FL0V120(); /* get table row*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain Quantity to Buy data*/
   /* ------------------------------------------------------------*/
  ;
  FL0V130(); /* Select table rows*/
  ;
   /* ------------------------------------------------------------*/
   /* Format data in working storage*/
   /* ------------------------------------------------------------*/
  ;
  FL0V140(); /* Format data in working storage*/
  ;
  ;
end // end FL0V100

// Obtain additional product data
Function FL0V120()
   /* ------------------------------------------------------------*/
   /* clear row storage area*/
   /* format key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  ;
  PG2REC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
  PG2REC.SY1STNBR = FL0VM010.SY1STNBR; /* style number*/
  ;
  if (FL0VM010.SY2CLRID != "   ") /* color id not spaces*/
    PG2REC.SY2CLRID = FL0VM010.SY2CLRID; /* color id*/
  else
    PG2REC.SY2CLRID = "00 "; /* color id*/
    FL0VM010.SY2CLRID = "00 "; /* color id*/
  end
  ;
  if (FL0VM010.XDMCD != "  ") /* dimension code not spaces*/
    PG2REC.XDMCD = FL0VM010.XDMCD; /* dimension code*/
  else
    PG2REC.XDMCD = "00"; /* dimension code*/
    FL0VM010.XDMCD = "00"; /* dimension code*/
  end
  ;
  XSPG202();
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL0VM010.SY2CLRAB = PG2REC.SY2CLRAB; /* color desc*/
      FL0VM010.SY2RSTNB = PG2REC.SY2RSTNB; /* style root nbr*/
      FL0VM010.XGACD = PG2REC.XGACD; /* gender age*/
      if (PG2REC.XGACD in XGATBL.XGACD) /* get gender age description*/
        FL0VM010.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
      else
        FL0VM010.XGADESC = "               ";
      end
      FL0V125(); /* get style short name*/
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        ;
        FL0V122(); /* get gender age data*/
        FL0VM010.SY2CLRAB = "  "; /* color desc*/
        PG2REC.SY2CLRID = "   "; /* color id*/
        FL0VM010.SY2CLRID = "   "; /* color id*/
        PG2REC.XDMCD = "  "; /* dimension code*/
        FL0VM010.XDMCD = "  "; /* dimension code*/
        FL0V125(); /* get style short name*/
        return;
      end
    end
  end
  ;
  ;
end // end FL0V120

// get sty-dev descriptions
Function FL0V122()
   /* ------------------------------------------------------------*/
   /* build the key*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty; /* initialise work area*/
  PG4REC.PG4STNBR = FL0VM010.SY1STNBR; /* style number*/
  ;
   /* ------------------------------------------------------------*/
   /* get the  row to display from the style development table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* get row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0VM010.XGACD = PG4REC.XGACD; /* gender age code*/
      if (PG4REC.XGACD in XGATBL.XGACD) /* get xga description*/
        FL0VM010.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
      else
        FL0VM010.XGADESC = "               ";
      end
      FL0VM010.SY2CLRAB = "             "; /* color abbrv*/
      FL0VM010.SY2RSTNB = "      "; /* root style nbr*/
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      ;
      FL0VM010.XGACD = "  "; /* gender age code*/
      FL0VM010.XGADESC = "               "; /* gender age description*/
      FL0VM010.SY2RSTNB = "******"; /* root style nbr*/
      return;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FLWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ADDL PROD DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0VM010.SY1STNBR; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0V122

// Get style short name
Function FL0V125()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPRODG.VSYPRD01*/
   /* ---------------------------------------------------------*/
  ;
  ;
  set PGAREC empty;
  ;
  PGAREC.XGPCD = COMMAREA.XGPCD;
  ;
  PGAREC.SY1STNBR = FL0VM010.SY1STNBR;
  ;
  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FL0VM010.SY1SSTNM = PGAREC.PGASSTNM;
    return;
    ;
  else
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/
      ;
      FL0VM010.SY1SSTNM = "************";
      return;
      ;
    else
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "GET SHORT STYLE NAME            ";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
        ;
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/
        ;
      else
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end FL0V125

// Obtain Quantity to Buy data
Function FL0V130()
   /* ------------------------------------------------------------*/
   /* Select Set cursor - Quantity to Buy Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0V132(); /* select set cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Get Next Row - Quantity to Buy Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWIX1 = 1; /* initialize index*/
  ;
  while (FL0VW00.FL0VWERF != "Y") /* until end of rows*/
    FL0V134(); /* Get next row*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close cursor - Quantity to Buy Table*/
   /* ------------------------------------------------------------*/
  ;
  FL0V136(); /* Close cursor*/
  ;
  if (FL0VW00.FL0VWRCT == 0) /* no rows found*/
    FLWREC.XXXMODID = "130"; /* module identification*/
    converseLib.validationFailed(18); /* no record found*/
    FL0VW00.FL0VWIX1 = 1; /* initialize index*/
    ;
    while (FL0VW00.FL0VWIX1 <= 12)
      FL0VM010.FL0VMPYM[FL0VWIX1] = 0; /* previous year/month*/
      FL0VM010.FL0VMMYM[FL0VWIX1] = 0; /* move from year/month*/
      FL0VM010.FL0VMFYM[FL0VWIX1] = 0; /* future year/month*/
      FL0VM010.FL0VMCQT[FL0VWIX1] = 0; /* current quantity*/
      FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1; /* increment index*/
    end
    exit stack;
  end
  ;
  ;
end // end FL0V130

// Select Set Cursor
Function FL0V132()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/
  ;
  set FBDREC empty; /* clear row storage area*/
  FL0VW00.FL0VWERF = "N"; /* End of VFLQTB01 flag*/
  FL0VW00.FL0VWRCT = 0; /* Row count*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the key*/
   /* ------------------------------------------------------------*/
  ;
  FBDREC.FBDMDTYP = "FT1"; /* Model type*/
   /* MOVE FL0VW00.FB8BUYDT TO FBDREC.FB8BUYDT; buy date*/
  FBDREC.FB8BUYDT = 0; /* buy date*/
  FBDREC.FBAMDNBR = FL0VM010.FBAMDNBR; /* schedule number*/
  FBDREC.FY1FCTYC = FL0VM010.FY1FCTYC; /* FACTORY cODE;*/
  FBDREC.SY1STNBR = FL0VM010.SY1STNBR; /* style number*/
  ;
  if (FBDREC.FY1FCTYC == "X   ")
    FBDREC.FY1FCTYC = " ";
  end
  ;
  FBDREC.SY2CLRID = FL0VM010.SY2CLRID; /* color id*/
  ;
  FBDREC.XDMCD = FL0VM010.XDMCD; /* dimension code*/
  ;
  FBDREC.XQACD = "01"; /* quality code*/
  FBDREC.PC2INSEG = "000"; /* spec code*/
  FBDREC.XPGCD = "00"; /* package type*/
  FBDREC.XUMCD = "01"; /* unit of measure code*/
  FBDREC.FBDBTCD = "STK"; /* Buy type*/
  ;
   /* ------------------------------------------------------------*/
   /* Select Set cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("S4", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    FL0VW00.FL0VWERF = "Y"; /* set switch*/
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(48); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "132"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0V132

// Get next Row
Function FL0V134()
   /* ------------------------------------------------------------*/
   /* Select row - Factory Load Qty to Buy Table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("N4", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0VW00.FL0VWRCT = FL0VW00.FL0VWRCT + 1; /* increment row count*/
      FL0VW01.FBDGROUP[FL0VWIX1] = FBDREC.FBDGROUP; /* record group*/
      FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1;
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FL0VW00.FL0VWERF = "Y"; /* indicate end of rows*/
        return; /* Return to previous process*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(48); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "134"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0V134

// Close Cursor
Function FL0V136()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("C4", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "136"; /* Module identification*/
  converseLib.validationFailed(48); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0V136

// Format data
Function FL0V140()
   /* ------------------------------------------------------------*/
   /* Clear working storage areas*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWIX1 = 1; /* initialize index*/
  ;
  while (FL0VW00.FL0VWIX1 <= 12)
    FL0VW02.FL0VWPYM[FL0VWIX1] = 0; /* previous year/month*/
    FL0VW02.FL0VWMYM[FL0VWIX1] = 0; /* move from year/month*/
    FL0VW02.FL0VWFYM[FL0VWIX1] = 0; /* future year/month*/
    FL0VW02.FL0VWCQT[FL0VWIX1] = 0; /* current quantity*/
    FL0VW02.FL0VWAQT[FL0VWIX1] = 0; /* adjustment quantity*/
    FL0VW02.FL0VWMQT[FL0VWIX1] = 0; /* move from quantity*/
    FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1; /* increment index*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* convert buy dates*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWIX1 = 1; /* initialize index*/
  ;
  while (FL0VW00.FL0VWIX1 <= 12)
    FBDREC.FBDGROUP = FL0VW01.FBDGROUP[FL0VWIX1]; /* move saved row*/
    FL0VW00.FL0VWCNV = FBDREC.FB8BUYDT; /* date work area*/
    FL0VW01.FL0VWCDT[FL0VWIX1] = FL0VW00.FL0VWCDT; /* converted date*/
    FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1; /* increment index*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format buy dates in working storage*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWIX1 = 1; /* initialize index*/
  ;
  while (FL0VW00.FL0VWIX1 <= 12
   && FL0VW00.FL0VWIX1 <= FL0VWRCT)
    FBDREC.FBDGROUP = FL0VW01.FBDGROUP[FL0VWIX1]; /* move saved row*/
    if (FL0VW01.FL0VWCDT[FL0VWIX1] < FL0VM010.FL0VMQYM)
      FL0VW02.FL0VWPYM[FL0VWIX1] = FL0VW01.FL0VWCDT[FL0VWIX1];
    else
      if (FL0VW01.FL0VWCDT[FL0VWIX1] == FL0VM010.FL0VMQYM)
        FL0VW02.FL0VWMYM[FL0VWIX1] = FL0VW01.FL0VWCDT[FL0VWIX1];
        FL0VW00.FL0VWSIN = FL0VW00.FL0VWIX1; /* save index*/
        FL0VW00.FL0VWMQT = FBDREC.FBDQTB; /* save qty*/
      else
        if (FL0VW01.FL0VWCDT[FL0VWIX1] > FL0VM010.FL0VMQYM)
          FL0VW02.FL0VWFYM[FL0VWIX1] = FL0VW01.FL0VWCDT[FL0VWIX1];
        end
      end
    end
    FL0VW02.FL0VWCQT[FL0VWIX1] = FBDREC.FBDQTB;
    FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1; /* increment index*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format buy dates and current quantities on Map*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWIX1 = 1; /* initialize index*/
  ;
  while (FL0VW00.FL0VWIX1 <= 12)
    if (FL0VW02.FL0VWPYM[FL0VWIX1] != 0)
      FL0VM010.FL0VMPYM[FL0VWIX1] = FL0VW02.FL0VWPYM[FL0VWIX1];
    else
      if (FL0VW02.FL0VWMYM[FL0VWIX1] != 0)
        FL0VM010.FL0VMMYM[FL0VWIX1] = FL0VW02.FL0VWMYM[FL0VWIX1];
        set FL0VM010.FL0VMAQT[FL0VWIX1] protect, invisible; /* set cursor*/
        set FL0VM010.FL0VMMQT[FL0VWIX1] cursor, normal; /* set cursor*/
      else
        if (FL0VW02.FL0VWFYM[FL0VWIX1] != 0)
          FL0VM010.FL0VMFYM[FL0VWIX1] = FL0VW02.FL0VWFYM[FL0VWIX1];
        end
      end
    end
    FL0VM010.FL0VMCQT[FL0VWIX1] = FL0VW02.FL0VWCQT[FL0VWIX1];
    FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1; /* increment index*/
  end
  ;
  ;
end // end FL0V140

// Format and converse the map
Function FL0V200()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FL0VM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0VM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0VM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If ezemno has been set, it will override xxxmsgno*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FLWREC.XXXMSGNO != 0) /* Message to display*/
    FL0VM010.XXXMODID = FLWREC.XXXMODID; /* module identification*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end
                                   /* message number moved to ezemno*/
    set FL0VM010 alarm;
  end
  ;
  FL0VW00.FL0VWIX1 = 12;
  ;
  while (FL0VW00.FL0VWIX1 > FL0VW00.FL0VWRCT)
    set FL0VMCQT[FL0VWIX1] skip, invisible;
    set FL0VMAQT[FL0VWIX1] skip, invisible;
    set FL0VMMQT[FL0VWIX1] skip, invisible;
    FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 - 1;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* establish cursor position*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0
   || converseVar.validationMsgNum == 32) /* update successful*/
    ;
    if (FL0VM010.FBAMDNBR == 0) /* not mdl nbr*/
      set FL0VM010.FBAMDNBR cursor; /* set cursor*/
    else
      set FL0VM010.SY1STNBR cursor; /* set cursor*/
    end
  end
  ;
  ;
  converse FL0VM010 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.XXXMODID = " "; /* Module identification*/
  FL0VM010.XXXMODID = " "; /* Module identification*/
  FLWREC.XXXMSGNO = 0; /* error message number*/
  COMMAREA.CATOAP = FL0VM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0VM010.CAITEM; /* Application data*/
  ;
  ;
end // end FL0V200

// Check attention identifier
Function FL0V300()
   /* ------------------------------------------------------------*/
    /* reset request for data switch*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWDRQ = "Y"; /* reset data request switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FL0VM010 initial; /* clear map*/
    FL0VW00.FL0VWDRQ = "N"; /* data not requested*/
    COMMAREA.CATOAP = " "; /* clear to application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    exit stack; /* return to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FLWREC empty;
      FLWREC.FBAMDNBR = FL0VM010.FBAMDNBR; /* buy dt*/
      FLWREC.SY1STNBR = FL0VM010.SY1STNBR; /* style*/
      FLWREC.SY2CLRID = FL0VM010.SY2CLRID; /* color*/
      FLWREC.XDMCD = FL0VM010.XDMCD; /* dimension*/
      ;
      XSFLS01();
      set FL0VM010.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      converseLib.validationFailed(44); /* 'cannot access application'*/
      FLWREC.XXXMODID = "300"; /* module identification*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF4 is pressed, go to Main Menu*/
   /* If PF5 is pressed, go to Production Menu*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* pf3 was pressed*/
   || converseVar.eventKey is pf4  /* pf4 was pressed*/
   || converseVar.eventKey is pf5  /* pf5 was pressed*/
   || converseVar.eventKey is pf13 /* pf12 was pressed*/
   || converseVar.eventKey is pf14 /* pf14 was pressed*/
   || converseVar.eventKey is pf15 /* pf15 was pressed*/
   || converseVar.eventKey is pf16 /* pf16 was pressed*/
   || converseVar.eventKey is pf18 /* pf18 was pressed*/
   || converseVar.eventKey is pf19 /* pf19 was pressed*/
   || converseVar.eventKey is pf20 /* pf20 was pressed*/
   || converseVar.eventKey is pf21) /* pf21 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0VM010"; /* APPLICATION FIND CODE*/
    end
    ;
    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "FL0M";
    end
    ;
    if (converseVar.eventKey is pf13) /* pf13 was pressed*/
      COMMAREA.CATOAP = "FL0N"; /* priority Selection*/
    end
    ;
    if (converseVar.eventKey is pf14) /* pf14 was pressed*/
      COMMAREA.CATOAP = "FL0O"; /* print request*/
    end
    ;
    if (converseVar.eventKey is pf15) /* pf15 was pressed*/
      COMMAREA.CATOAP = "FL0P"; /* moves*/
    end
    ;
    if (converseVar.eventKey is pf16) /* pf16 was pressed*/
      COMMAREA.CATOAP = "FL0Q"; /* factory splits*/
    end
    ;
    if (converseVar.eventKey is pf18) /* pf18 was pressed*/
      COMMAREA.CATOAP = "FL0W"; /* purchase adjustments*/
    end
    ;
    if (converseVar.eventKey is pf19) /* pf19 was pressed*/
      COMMAREA.CATOAP = "FL0S"; /* detail schedule list*/
    end
    ;
    if (converseVar.eventKey is pf20)
      COMMAREA.CATOAP = "FL01"; /* moves by style (all colors)*/
    end
    ;
    ;
    if (converseVar.eventKey is pf21) /* pf21 was pressed*/
      COMMAREA.CATOAP = "FL0U"; /* Report Requests*/
    end
    ;
    set FLWREC empty;
    FLWREC.FBAMDNBR = FL0VM010.FBAMDNBR; /* buy dt*/
    FLWREC.SY1STNBR = FL0VM010.SY1STNBR; /* style*/
    FLWREC.SY2CLRID = FL0VM010.SY2CLRID; /* color*/
    FLWREC.XDMCD = FL0VM010.XDMCD; /* dimension*/
    ;
    XSFLS01();
    exit stack;
    ;
  end
  ;
  if (converseVar.eventKey not enter) /* enter was not pressed*/
    ;
    converseLib.validationFailed(3); /* Indicate PF key not valid*/
    FLWREC.XXXMODID = "300"; /* Process name*/
    if (converseVar.eventKey is pa1 /* pa1 was pressed*/
     || converseVar.eventKey is pa3) /* pa3 was pressed*/
      converseLib.clearScreen();
      
    end
    ;
    exit stack;
    ;
  end
  ;
  ;
end // end FL0V300

// Reset highlighted fields
Function FL0V400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0VM010.FBAMDNBR initialAttributes; /* schedule number*/
  set FL0VM010.FY1FCTYC initialAttributes; /* factory code*/
  set FL0VM010.FL0VMQYM initialAttributes; /* move from year/month*/
  set FL0VM010.FBDQTB initialAttributes; /* qty to buy*/
  ;
  set FL0VM010.SY1STNBR initialAttributes; /* style number*/
  set FL0VM010.SY2CLRID initialAttributes; /* color id*/
  set FL0VM010.XDMCD initialAttributes; /* dimension code*/
  set FL0VM010.SY1SSTNM initialAttributes; /* style name*/
  set FL0VM010.SY2CLRAB initialAttributes; /* color abbreviation*/
  ;
  FL0VW00.FL0VWIX1 = 1; /* initialize index*/
  ;
  while (FL0VW00.FL0VWIX1 <= 12)
    set FL0VM010.FL0VMPYM[FL0VWIX1] initialAttributes; /* previous year/month*/
    set FL0VM010.FL0VMMYM[FL0VWIX1] initialAttributes; /* move from year/month*/
    set FL0VM010.FL0VMFYM[FL0VWIX1] initialAttributes; /* future year/month*/
    set FL0VM010.FL0VMCQT[FL0VWIX1] initialAttributes; /* current qty*/
    set FL0VM010.FL0VMAQT[FL0VWIX1] normal; /* adjustment qty*/
    if (FL0VM010.FL0VMMYM[FL0VWIX1] != 0)
      set FL0VM010.FL0VMMQT[FL0VWIX1] normal; /* move from qty*/
    else
      set FL0VM010.FL0VMMQT[FL0VWIX1] initialAttributes;
    end
    FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1; /* increment index*/
  end
  ;
  set FL0VM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0VM010.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end FL0V400

// Verify the entered data
Function FL0V500()
   /* ------------------------------------------------------------*/
   /* Edit Item (if entered)*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* item entered*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    set FL0VM010.CAITEM cursor, bold; /* set cursor*/
    FLWREC.XXXMSGNO = 40; /* 'enter only with Fast Path'*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Reset modified fields flags*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWKMF = "N"; /* reset key modified flag*/
  FL0VW00.FL0VWNKM = "N"; /* reset non-key modified flag*/
  ;
   /* ------------------------------------------------------------*/
   /* if Key fields were modified, set flag.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VM010.FBAMDNBR != FL0VW03.FBAMDNBR /* schedule number modified*/
   || FL0VM010.FY1FCTYC != FL0VW03.FY1FCTYC /* factory code modified*/
   || FL0VM010.FL0VMQYM != FL0VW03.FL0VWQYM /* move from year/month*/
   || FL0VM010.FBDQTB != FL0VW03.FBDQTB     /* move from qty*/
   || FL0VM010.SY1STNBR != FL0VW03.SY1STNBR /* style number*/
   || FL0VM010.SY2CLRID != FL0VW03.SY2CLRID /* color id*/
   || FL0VM010.XDMCD != FL0VW03.XDMCD)      /* dimension code*/
    FL0VW00.FL0VWKMF = "Y"; /* set key fields modified flag*/
    if (FL0VM010.SY2CLRID == "   ")
      FL0VW03.SY2CLRID = "00 ";
    end
    if (FL0VW03.XDMCD == "  ")
      FL0VW03.XDMCD = "00";
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If non-key fields were modified, set flag.*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWIX1 = 1; /* initialize index*/
  ;
  while (FL0VW00.FL0VWIX1 <= 12)
    if (FL0VM010.FL0VMAQT[FL0VWIX1] != FL0VW03.FL0VWAQT[FL0VWIX1])
      FL0VW00.FL0VWNKM = "Y"; /* set non-key modified flag*/
    end
    FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1; /* increment index*/
  end
  ;
  if (FL0VW00.FL0VWSIN != 0) /* move/from qty saved*/
    ;
    if (FL0VM010.FL0VMMQT[FL0VWSIN] != FL0VW03.FL0VWMQT)
      FL0VW00.FL0VWNKM = "Y"; /* set non-key modified flag*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if Key fields were modified and non-key fields were changed*/
   /* set up error message indicating that fields cannot be*/
   /* changed if key has been modified.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VW00.FL0VWKMF == "Y" /* key fields modified*/
   && FL0VW00.FL0VWNKM == "Y") /* non-key fields modified*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    FLWREC.XXXMSGNO = 128; /* 'data may not be changed if key*/
                                   /* changed'*/
    ;
    FL0VW00.FL0VWIX1 = 12; /* initialize index*/
    ;
    while (FL0VW00.FL0VWIX1 > 0)
      if (FL0VM010.FL0VMAQT[FL0VWIX1] != FL0VW03.FL0VWAQT[FL0VWIX1])
        set FL0VM010.FL0VMAQT[FL0VWIX1] cursor, bold; /* set cursor*/
      end
      FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 - 1; /* decrement index*/
    end
    ;
    if (FL0VW00.FL0VWSIN != 0) /* move/from qty saved*/
      if (FL0VM010.FL0VMMQT[FL0VWSIN] != FL0VW03.FL0VWMQT)
        set FL0VM010.FL0VMMQT[FL0VWSIN] cursor, bold; /* set cursor*/
      end
      ;
    end
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no fields were changed, exit to redisplay map.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VW00.FL0VWKMF == "N" /* key fields not modified*/
   && FL0VW00.FL0VWNKM == "N") /* non-key fields not modified*/
    exit stack; /* exit to redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If key field entered or changed, edit key.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VW00.FL0VWKMF == "Y") /* key fields modified*/
    FL0V510(); /* edit key fields*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Edit Quantity data*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VW00.FL0VWNKM == "Y") /* non-key fields modified (quantities)*/
    FL0V520(); /* Edit Qty data*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* Otherwise, save key fields in working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0
   || FLWREC.XXXMSGNO != 0)
    FL0VW00.FL0VWDRQ = "N"; /* data not requested*/
    exit stack;
  else
    FL0VW03.FBAMDNBR = FL0VM010.FBAMDNBR; /* schedule number*/
    FL0VW03.FY1FCTYC = FL0VM010.FY1FCTYC; /* factory code modified*/
    FL0VW03.FL0VWQYM = FL0VM010.FL0VMQYM; /* move from year/month*/
    FL0VW03.FBDQTB = FL0VM010.FBDQTB; /* move from qty*/
    FL0VW03.SY1STNBR = FL0VM010.SY1STNBR; /* style number*/
    FL0VW03.SY2CLRID = FL0VM010.SY2CLRID; /* color identification*/
    FL0VW03.XDMCD = FL0VM010.XDMCD; /* color identification*/
  end
  ;
  ;
end // end FL0V500

// Edit Key Fields
Function FL0V510()
   /* ------------------------------------------------------------*/
   /* If style number blank, display error message*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VM010.SY1STNBR == " ") /* style number blank*/
    FLWREC.XXXMODID = "510"; /* module identification*/
    FLWREC.XXXMSGNO = 81; /* 'style number must be entered'*/
    set FL0VM010.SY1STNBR cursor, bold; /* set cursor*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate move/from date*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VM010.FL0VMQYM == 0) /* move from year/month equal zeroes*/
    FLWREC.XXXMODID = "510"; /* module identification*/
    FLWREC.XXXMSGNO = 08; /* 'invalid date'*/
    set FL0VM010.FL0VMQYM cursor, bold; /* set cursor*/
  else
    FL0VW00.FL0VWSYM = FL0VM010.FL0VMQYM; /* date work area*/
    FL0VW00.FL0VWYY = FL0VW00.FL0VWSYY; /* year*/
    FL0VW00.FL0VWMM = FL0VW00.FL0VWSMM; /* month*/
    FL0VW00.FL0VWDD = 01; /* day*/
    ;
    set TA2REC empty; /* initialize record*/
    ;
    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
    TA2REC.TA2GRTYP = "A"; /* date format*/
    TA2REC.TA2GRGAN = FL0VW00.FL0VWGRG; /* move date*/
    ;
    FL0V512(); /* validate date*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If factory code blank, display error message*/
   /* else, verify against dfcty.vfcty001 table.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VM010.FY1FCTYC == "  ") /* factory code balnk*/
    FLWREC.XXXMODID = "510"; /* module identification*/
    FLWREC.XXXMSGNO = 120; /* 'factory code must be entered'*/
    set FL0VM010.FY1FCTYC cursor, bold; /* set cursor*/
  else
    FL0V513(); /* validate fcty code*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If schedule number is zeroes, display error message*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VM010.FBAMDNBR == 0) /* schedule number zeroes*/
    FLWREC.XXXMODID = "510"; /* module identification*/
    FLWREC.XXXMSGNO = 112; /* 'schedule number not entered'*/
    set FL0VM010.FBAMDNBR cursor, bold; /* set cursor*/
  end
  ;
  ;
end // end FL0V510

// Validate Buy Date
Function FL0V512()
   /* ------------------------------------------------------------*/
   /* Determine if date entered is valid. Use subroutine*/
   /* TA0040.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation routine*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA2REC.TA2RTNCD != 0)
      FLWREC.XXXMSGNO = 17; /* invalid date*/
      FLWREC.XXXMODID = "512"; /* module identification*/
      set FL0VM010.FL0VMQYM cursor, bold; /* set cursor*/
    end
  end
  ;
  ;
end // end FL0V512

// Verify factory code
Function FL0V513()
  ;
   /* ------------------------------------------------------------*/
   /* Verify the Factory Code*/
   /* ------------------------------------------------------------*/
  ;
  set FY1REC empty;
  FY1REC.FY1FCTYC = FL0VM010.FY1FCTYC;
  if (COMMAREA.XGPCD != "  ")
    FY1REC.XGPCD = COMMAREA.XGPCD;
  else
    FY1REC.XGPCD = "02";
  end
  ;
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* factory not found*/
      converseLib.validationFailed(10); /* invalid factory*/
      set FL0VM010.FY1FCTYC cursor, bold; /* highlight*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FLWREC.XXXMODID = "513"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
end // end FL0V513

// Edit Quantity data
Function FL0V520()
  FL0VW00.FL0VWSYM = FL0VM010.FL0VMQYM; /* date work area*/
  FL0VW00.FL0VWYY = FL0VW00.FL0VWSYY; /* year*/
  FL0VW00.FL0VWMM = FL0VW00.FL0VWSMM; /* month*/
  FL0VW00.FL0VWDD = 01; /* day*/
  ;
  set TA2REC empty; /* initialize record*/
  ;
  TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
  TA2REC.TA2GRTYP = "A"; /* date format*/
  TA2REC.TA2GRGAN = FL0VW00.FL0VWGRG; /* move date*/
  ;
  FL0V512(); /* validate date*/
   /* ------------------------------------------------------------*/
   /* Convert Buy date*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA2REC.TA2RTNCD == 0)
      FL0VW00.FL0VWBDM = TA2REC.TA2GRGE; /* yymmdd work area*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize Qty total field*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWTQT = 0; /* initialize qty*/
  ;
   /* ------------------------------------------------------------*/
   /* Determine Qty total*/
   /* ------------------------------------------------------------*/
  ;
  FL0VW00.FL0VWIX1 = 12; /* initialize index*/
  ;
  while (FL0VW00.FL0VWIX1 > 0)
    if (FL0VM010.FL0VMAQT[FL0VWIX1] != FL0VW03.FL0VWAQT[FL0VWIX1])
      if (FL0VM010.FL0VMPYM[FL0VWIX1] != 0)
             /* IF FL0VM010.FL0VMPYM(FL0VWIX1) LE FL0VWBYM;*/
               /* MOVE 148 TO FLWREC.XXXMSGNO    ;'cannot adjust qty '*/
               /* MOVE '520' TO FLWREC.XXXMODID  ;module identification*/
               /* SET FL0VM010.FL0VMAQT(FL0VWIX1)CURSOR,BRIGHT;set curs*/
             /* END ;*/
      else
        if (FL0VM010.FL0VMFYM[FL0VWIX1] != 0)
          if (FL0VM010.FL0VMFYM[FL0VWIX1] <= FL0VWBYM)
            FLWREC.XXXMSGNO = 148; /* 'cannot adjust qty '*/
            FLWREC.XXXMODID = "520"; /* module identification*/
            set FL0VM010.FL0VMAQT[FL0VWIX1] cursor, bold; /* set cursor*/
          end
        end
      end
      FL0VW00.FL0VWTQT = FL0VW00.FL0VWTQT + FL0VM010.FL0VMAQT[FL0VWIX1];
    end
    FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 - 1; /* decrement index*/
  end
  ;
  if (FL0VM010.FL0VMMQT[FL0VWSIN] != FL0VW03.FL0VWMQT)
    FL0VW00.FL0VWTQT = FL0VW00.FL0VWTQT + FL0VM010.FL0VMMQT[FL0VWSIN];
  end
  ;
   /* ------------------------------------------------------------*/
   /* If total adjustment quantities do not equal the move from*/
   /* quantity, display error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VW00.FL0VWTQT != FL0VW00.FL0VWMQT) /* qtys do not equal*/
    FLWREC.XXXMSGNO = 140; /* 'qtys must equal'*/
    FLWREC.XXXMODID = "520"; /* module identification*/
    FL0VW00.FL0VWIX1 = 1;
    ;
    while (FL0VW00.FL0VWIX1 <= 12)
      ;
      if (FL0VM010.FL0VMMYM[FL0VWIX1] != 0)
        set FL0VM010.FL0VMAQT[FL0VWIX1] skip, invisible;
        FL0VW00.FL0VWIX1 = 12;
      end
      ;
      FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1;
    end
    ;
    FL0VW00.FL0VWIX1 = 12; /* initialize index*/
    ;
    while (FL0VW00.FL0VWIX1 > 0)
      if (FL0VM010.FL0VMAQT[FL0VWIX1] != FL0VW03.FL0VWAQT[FL0VWIX1])
        set FL0VM010.FL0VMAQT[FL0VWIX1] cursor, bold; /* set cursor*/
      end
      FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 - 1; /* decrement index*/
    end
    ;
    if (FL0VM010.FL0VMMQT[FL0VWSIN] != FL0VW03.FL0VWMQT)
      set FL0VM010.FL0VMMQT[FL0VWSIN] cursor, bold; /* set cursor*/
    end
    ;
  end
  ;
  ;
end // end FL0V520

// Process valid input request
Function FL0V600()
   /* ------------------------------------------------------------*/
   /* If an error has occured, redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (FLWREC.XXXMSGNO != 0 /* error occured*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    exit stack; /* redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* save key fields in commarea*/
   /* ------------------------------------------------------------*/
  ;
  FLWREC.FBAMDNBR = FL0VM010.FBAMDNBR; /* schedule nbr*/
  FLWREC.FY1FCTYC = FL0VM010.FY1FCTYC; /* factory code*/
  FLWREC.SY1STNBR = FL0VM010.SY1STNBR; /* style number*/
  FLWREC.SY2CLRID = FL0VM010.SY2CLRID; /* color id*/
  FLWREC.XDMCD = FL0VM010.XDMCD; /* dimension code*/
  FL0VW00.FL0VWBYM = FL0VM010.FL0VMQYM;
  ;
   /* ------------------------------------------------------------*/
   /* If key fields were modified, return to re-display data*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0VW00.FL0VWKMF == "Y") /* key fields modified*/
    set FL0VW01 empty;
    set FL0VW02 empty;
    set FL0VM010 initial;
    FL0VM010.FL0VMQYM = FL0VW00.FL0VWBYM; /* buy date*/
    FL0VM010.FBAMDNBR = FLWREC.FBAMDNBR; /* schedule nbr*/
    FL0VM010.FY1FCTYC = FLWREC.FY1FCTYC; /* factory code*/
    FL0VM010.SY1STNBR = FLWREC.SY1STNBR; /* style number*/
    FL0VM010.SY2CLRID = FLWREC.SY2CLRID; /* color id*/
    FL0VM010.XDMCD = FLWREC.XDMCD; /* dimension code*/
    FL0VW00.FL0VWDRQ = "Y"; /* set data requested switch*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* check for contention due to merge.*/
   /* ------------------------------------------------------------*/
  ;
  FL0V605(); /* check for contention*/
  ;
   /* ------------------------------------------------------------*/
   /* if non-key fields were modified, update modified fields*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
  FL0VW00.FL0VWIX1 = 1; /* initialize index*/
  ;
  while (FL0VW00.FL0VWIX1 <= 12
   && FL0VW00.FL0VWIX1 <= FL0VW00.FL0VWRCT)
    ;
    /* ------------------------------------------------------------*/
     /* If Adjustment Qty entered*/
    /* ------------------------------------------------------------*/
    ;
    if (FL0VM010.FL0VMAQT[FL0VWIX1] != FL0VW03.FL0VWAQT[FL0VWIX1])
         /* AND FL0VM010.FL0VMCQT(FL0VWIX1) GT 0;*/
      ;
      FBDREC.FBDGROUP = FL0VW01.FBDGROUP[FL0VWIX1]; /* move saved record*/
         /* MOVE FL0VW03.FBAMDNBR TO FBDREC.FBAMDNBR; schedule nbr*/
         /* MOVE FL0VW03.FY1FCTYC TO FBDREC.FY1FCTYC; factory code*/
         /* MOVE FL0VW03.SY1STNBR TO FBDREC.SY1STNBR; style number*/
         /* MOVE FL0VW03.SY2CLRID TO FBDREC.SY2CLRID; color id*/
         /* MOVE FL0VW03.XDMCD TO FBDREC.XDMCD ; dimension code*/
      if (FBDREC.FY1FCTYC == "X ")
        FBDREC.FY1FCTYC = " ";
      end
      ;
       /* current qty + adjustment qty = new current qty*/
      FBDREC.FBDQTB = FBDREC.FBDQTB + FL0VM010.FL0VMAQT[FL0VWIX1];
      ;
      FL0V610(); /* Update table row*/
      FL0VM010.FL0VMAQT[FL0VWIX1] = 0; /* clear adj qty*/
      ;
    end
    ;
    FL0VW00.FL0VWIX1 = FL0VW00.FL0VWIX1 + 1; /* increment index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Update table row for move from month*/
   /* ------------------------------------------------------------*/
  ;
  FBDREC.FBDGROUP = FL0VW01.FBDGROUP[FL0VWSIN]; /* move saved record*/
  FBDREC.FBAMDNBR = FL0VW03.FBAMDNBR; /* schedule nbr*/
  FBDREC.FY1FCTYC = FL0VW03.FY1FCTYC; /* factory code*/
  FBDREC.SY1STNBR = FL0VW03.SY1STNBR; /* style number*/
  FBDREC.SY2CLRID = FL0VW03.SY2CLRID; /* color id*/
  FBDREC.XDMCD = FL0VW03.XDMCD; /* dimension code*/
  ;
   /* current qty = move from qty*/
  FBDREC.FBDQTB = FL0VM010.FL0VMMQT[FL0VWSIN];
  ;
  FL0V610(); /* Update Table Row*/
  ;
  FL0VM010.FL0VMMQT[FL0VWSIN] = 0; /* clear move from qty*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the data base add, update, or delete was*/
   /* successful.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(32); /* indicate update was successful*/
  ;
  FL0VW00.FL0VWDRQ = "Y"; /* data requested*/
  ;
   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/
  ;
  ;
end // end FL0V600

// check for merge contention
Function FL0V605()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty;
  ;
  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        FLWREC.XXXMODID = "605"; /* module identification*/
        exit stack; /* return to process*/
      end
    else
      ;
      ;
      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      FLWREC.XXXMODID = "605"; /* Module identification*/
      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end
  ;
  ;
end // end FL0V605

// Update the table row
Function FL0V610()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
  if (FBDREC.FY1FCTYC == "X ")
    FBDREC.FY1FCTYC = "  ";
  end
  ;
  FBDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FBDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Update Factory Control Table Row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3460" ("U ", SQLCA, FBDREC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* database updated by another user*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes made by user*/
        FLWREC.XXXMODID = "610"; /* Module identification*/
        converseLib.validationFailed(46); /* 'database updated by another user'*/
        exit stack; /* Exit to display map*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    converseLib.validationFailed(19); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(48); /* error, notify progamming staff*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "610"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFLQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBDREC.FBDGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0V610

//*** RECORD=FL0VW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0VW00 type basicRecord
  10 FL0VWIX1 FL0VWIX1 ; 
  10 FL0VWIX2 FL0VWIX2 ; 
  10 FL0VWSIN FL0VWSIN ; 
  10 FL0VWMQT FL0VWMQT ; 
  10 FL0VWWQT FL0VWWQT ; 
  10 FL0VWTQT FL0VWTQT ; 
  10 FL0VWDRQ FL0VWDRQ ; 
  10 FL0VWERF FL0VWERF ; 
  10 FL0VWKMF FL0VWKMF ; 
  10 FL0VWNKM FL0VWNKM ; 
  10 FL0VWQFM FL0VWQFM ; 
  10 FL0VWBDM FL0VWBDM ; 
    15 FL0VWBYM FL0VWBYM ; 
      20 FL0VWBYY FL0VWBYY ; 
      20 FL0VWBMM FL0VWBMM ; 
    15 FL0VWBDD FL0VWBDD ; 
  10 FB8BUYDT FB8BUYDT ; 
  10 FL0VWRCT FL0VWRCT ; 
  10 FL0VWSYM FL0VWSYM ; 
    15 FL0VWSYY FL0VWSYY ; 
    15 FL0VWSMM FL0VWSMM ; 
  10 FL0VWGRG FL0VWGRG ; 
    15 FL0VWMM FL0VWMM ; 
    15 FL0VWDD FL0VWDD ; 
    15 FL0VWYY FL0VWYY ; 
  10 FL0VWCNV FL0VWCNV ; 
    15 * num(3) ; 
    15 FL0VWCDT FL0VWCDT ; 
    15 * num(2) ; 
end // end FL0VW00

//*** RECORD=FL0VW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0VW01 type basicRecord
  10 FBDGROUP FBDGROUP [12] ; 
  10 FL0VWCDT FL0VWCDT [12] ; 
  10 FB8BUYDT FB8BUYDT ; 
end // end FL0VW01

//*** RECORD=FL0VW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0VW02 type basicRecord
  10 FL0VWDL FL0VWDL [12] ; 
    15 FL0VWPYM FL0VWPYM ; 
    15 FL0VWMYM FL0VWMYM ; 
    15 FL0VWFYM FL0VWFYM ; 
    15 FL0VWCQT FL0VWCQT ; 
    15 FL0VWAQT FL0VWAQT ; 
    15 FL0VWMQT FL0VWMQT ; 
end // end FL0VW02

//*** RECORD=FL0VW03 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0VW03 type basicRecord
  10 FBAMDNBR FBAMDNBR ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 FL0VWQYM FL0VWQYM ; 
  10 FBDQTB FBDQTB ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 FL0VWMQT FL0VWMQT ; 
  10 FL0VWAQT FL0VWAQT [12] ; 
  10 FBDGROUP FBDGROUP ; 
end // end FL0VW03

// adjustment qty
DataItem FL0VWAQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd work area
DataItem FL0VWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date yymmdd work area
DataItem FL0VWBDM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm work area
DataItem FL0VWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year/month
DataItem FL0VWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy work area
DataItem FL0VWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted buy date
DataItem FL0VWCDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion date
DataItem FL0VWCNV num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current qty
DataItem FL0VWCQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered day
DataItem FL0VWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display lines
DataItem FL0VWDL char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data request flag
DataItem FL0VWDRQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of rows flag
DataItem FL0VWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// future year/month
DataItem FL0VWFYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gregorian date
DataItem FL0VWGRG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index one for stored fields
DataItem FL0VWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FL0VWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key field modified flag
DataItem FL0VWKMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user entered month
DataItem FL0VWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// move from qty
DataItem FL0VWMQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// move from year/month
DataItem FL0VWMYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// non-key field modified flag
DataItem FL0VWNKM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous year/month
DataItem FL0VWPYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity field modified flag
DataItem FL0VWQFM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user entered year/month
DataItem FL0VWQYM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row count
DataItem FL0VWRCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save 'move from' index
DataItem FL0VWSIN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered month
DataItem FL0VWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered year/month
DataItem FL0VWSYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered year
DataItem FL0VWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty
DataItem FL0VWTQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty work field
DataItem FL0VWWQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered year
DataItem FL0VWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

