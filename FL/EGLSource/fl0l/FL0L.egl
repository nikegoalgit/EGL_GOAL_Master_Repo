package fl0l;

import corpcom2.XCTHREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom3.XPTA0P;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import fb.common.FB9COFDT;
import fb.common.FB9COFTM;
import fb.common.FB9REC;
import ff.common.*;
import fl.common.FLWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FL0L ****
// This application displays and updates the cut off date and
// time in the Factory Model Control Table. It also displays
// the priority list and report as of date. (the latter two
// items cannot be updated.).
// 
// The user may exit to any allowed application, via Fast Path
// or PF key.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          06/27/89  CNEWMA  New application.
//          06/21/91  jalle1  add timing edits to cutoff
//                            date changes.
//          12/14/94  jalle1  European changes - export data
//                            to Europe if cutoff date/time
//                            are changed.
// y2kfix   12/06/97  pharwo  year 2000 changes to fl0l500 and
//                            fl0lm010 - fl0lmbyd.
// *********************
Program FL0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FL0LW00 FL0LW00; // record
  FLWREC FLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0LT01 {deleteAfterUse = yes}; // table
  use FL0LTT1 {deleteAfterUse = yes}; // table
  use FL0LM.FL0LM010, // form
  		FL0LM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FL0LM010 initial; /* M010 input/output*/
    set FL0LW00 empty; /* working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FL0LW00.FL0LWDRF = "Y"; /* set data request flag*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0L001; /* Converse the main process*/


    FL0L001: FL0L001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FL0L001; /* Converse the main process*/


  end // end main
end // end FL0L

// Inquire/maintain a table row
Function FL0L001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FL0L100(); /* Obtain the data to display*/

  FL0L200(); /* Format and display the map*/

  FL0L300(); /* Check attention identifier*/

  FL0L400(); /* Reset fields to normal intensity*/

  FL0L500(); /* Verify the entered data*/

  FL0L600(); /* Process valid input request*/


end // end FL0L001

// Obtain the data to display
Function FL0L100()
   /* ------------------------------------------------------------*/
   /* if data not requested or an error occurred, return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FL0LW00.FL0LWDRF == "N" /* data not requested*/
   || FLWREC.XXXMSGNO != 0    /* error occured*/
   || converseVar.validationMsgNum != 0) /* error occured*/

    if (converseVar.validationMsgNum == 32 /* successful update*/
     || FLWREC.XXXMSGNO == 32)             /* successful update*/
       /* next sentence*/
    else
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Select row - Factory Control Table*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
  set FB9REC empty; /* initialize record*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FL0LW00.FB9COFDT = FB9REC.FB9COFDT; /* cut off date*/
      FL0LW00.FL0LWDDT = FB9REC.FB8BUYDT;
      FL0LM010.FL0LMBYD = FL0LW00.FL0LWBYD;
      set TA2REC empty; /* initialize record*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
      TA2REC.TA2GRTYP = "G"; /* date format*/
      TA2REC.TA2GRGGN = FL0LW00.FB9COFDT; /* move date*/
      FL0L110(); /* validate date*/
      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (TA2REC.TA2RTNCD == 0)
          FL0LW00.FL0LWCNV = TA2REC.TA2GRGB; /* converted date*/
          FL0LM010.FL0LMCDT = FL0LW00.FL0LWCNV; /* map date*/
        else
          set FL0LM010.FL0LMCDT cursor, bold; /* set cursor*/
        end
      end

      FL0LM010.FB9COFTM = FB9REC.FB9COFTM; /* cut off time*/
      FL0LW00.FB9COFTM = FB9REC.FB9COFTM; /* cut off time*/
      FL0LM010.FB9PSPRY = FB9REC.FB9PSPRY; /* previous solution*/
      FL0LM010.FB9CSPRY = FB9REC.FB9CSPRY; /* cheapest source*/
      FL0LM010.FB9LRPRY = FB9REC.FB9LRPRY;
                                   /* long range prod schedule*/
      FL0LM010.FB9AODT = FB9REC.FB9AODT; /* report as of date*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FLWREC.XXXMODID = "100"; /* module identification*/
        converseLib.validationFailed(01); /* no record found*/
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    FL0LW00.FL0LWRNA = "Y"; /* row not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FLWREC.XXXMODID = "100"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0L100

// convert dates
Function FL0L110()
   /* ------------------------------------------------------------*/
   /* Validate date using subroutine TA0040*/
   /* ------------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation routine*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA2REC.TA2RTNCD != 0)
      FLWREC.XXXMSGNO = 17; /* invalid date*/
      FLWREC.XXXMODID = "110"; /* module identification*/
    end
  end


end // end FL0L110

// Format and converse the map
Function FL0L200()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FL0LM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0LM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0LM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If ezemno has been set, it will override xxxmsgno*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    FLWREC.XXXMSGNO = converseVar.validationMsgNum;
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FLWREC.XXXMSGNO != 0) /* Message to display*/
    FL0LM010.XXXMODID = FLWREC.XXXMODID; /* module identification*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end
                                   /* message number moved to ezemno*/
    set FL0LM010 alarm;
  end

  converse FL0LM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FLWREC.XXXMODID = " "; /* Module identification*/
  FL0LM010.XXXMODID = " "; /* Module identification*/
  FLWREC.XXXMSGNO = 0; /* error message number*/
  COMMAREA.CATOAP = FL0LM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0LM010.CAITEM; /* Application data*/


end // end FL0L200

// Check attention identifier
Function FL0L300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FL0LM010 initial; /* clear map*/
    COMMAREA.CATOAP = " "; /* clear to application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    exit stack; /* return to show error msg*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSFLS01();
      set FL0LM010.CATOAP cursor, bold; /* Highlight*/

    else

      converseLib.validationFailed(44); /* 'cannot access application'*/
      FLWREC.XXXMODID = "300"; /* module identification*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF4 is pressed, go to Main Menu*/
   /* If PF5 is pressed, go to Production Menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* pf3 was pressed*/
   || converseVar.eventKey is pf4  /* pf4 was pressed*/
   || converseVar.eventKey is pf5  /* pf5 was pressed*/
   || converseVar.eventKey is pf12 /* pf12 was pressed*/
   || converseVar.eventKey is pf13) /* pf13 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0LM010"; /* APPLICATION FIND CODE*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "FY0M";
    end

    if (converseVar.eventKey is pf12) /* pf12 was pressed*/
      COMMAREA.CATOAP = "FL0A"; /* model menu*/
    end

    if (converseVar.eventKey is pf13) /* pf14 was pressed*/
      COMMAREA.CATOAP = "FL0M"; /* lrps menu*/
    end

    XSFLS01();
    exit stack;

  end

  if (converseVar.eventKey not enter) /* enter was not pressed*/

    converseLib.validationFailed(3); /* Indicate PF key not valid*/
    FLWREC.XXXMODID = "300"; /* Process name*/
    if (converseVar.eventKey is pa1 /* pa1 was pressed*/
     || converseVar.eventKey is pa3) /* pa3 was pressed*/
      converseLib.clearScreen();
      
    end

    exit stack;

  end


end // end FL0L300

// Reset highlighted fields
Function FL0L400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FL0LM010.FL0LMCDT initialAttributes; /* cut off date*/
  set FL0LM010.FB9COFTM initialAttributes; /* cut off time*/

  set FL0LM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0LM010.CAITEM initialAttributes; /* Commarea application data*/


end // end FL0L400

// Verify the entered data
Function FL0L500()
   /* ------------------------------------------------------------*/
   /* If no fields modified, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FL0LM010.FL0LMCDT == FL0LW00.FL0LWCNV /* cut off date*/
   && FL0LM010.FB9COFTM == FL0LW00.FB9COFTM) /* cut off time*/
    if (FL0LW00.FL0LWRNA == "Y")
      FL0LW00.FL0LWDRF = "Y"; /* data requested*/
    else
      FL0LW00.FL0LWDRF = "N"; /* data not requested*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FLWREC.XXXMODID = "500"; /* Module identification*/
    set FL0LM010.CAITEM cursor, bold; /* Highlight*/
    FLWREC.XXXMSGNO = 40; /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* check cutoff date validity.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* initialize record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
  TA2REC.TA2GRTYP = "B"; /* date format*/
  TA2REC.TA2GRGB = FL0LM010.FL0LMCDT; /* move date*/

  FL0L110(); /* validate date*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA2REC.TA2RTNCD == 0)
      FL0LW00.FL0LWCNN = TA2REC.TA2GRGGN; /* converted numeric date*/
    else
      set FL0LM010.FL0LMCDT cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* validate time.*/
   /* ------------------------------------------------------------*/

  FL0LW00.FL0LWTMW = FL0LM010.FB9COFTM; /* time work area*/
  if (FL0LW00.FL0LWTMH < 1 /* hour entered lt one*/
   || FL0LW00.FL0LWTMH > 24) /* hour entered gt 24*/
    FLWREC.XXXMSGNO = 137; /* 'enter from 1 to 24'*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    set FL0LM010.FB9COFTM cursor, bold; /* set cursor*/
  end

  if (FL0LW00.FL0LWTMM < 0 /* minutes entered lt zero*/
   || FL0LW00.FL0LWTMM > 59) /* minutes entered gt 59*/
    FLWREC.XXXMSGNO = 138; /* 'enter from 1 to 59'*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    set FL0LM010.FB9COFTM cursor, bold; /* set cursor*/
  end




  if (FLWREC.XXXMSGNO != 0) /* if error has occurred*/
    exit stack; /* return to display map*/
  end

   /* ------------------------------------------------------------*/
   /* can't change cutoff date and time after they have occured.*/
   /* example:  if cutoff date and time is 19910820 12:00, error*/
                /* if changed after, like 19910824 13:00.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date and time - exactly*/

  XX0XW01.XX0XWMIN = XX0XW01.XX0XWMIN + 30;

  if (XX0XW01.XX0XWMIN > 60)
    XX0XW01.XX0XWMIN = XX0XW01.XX0XWMIN - 60;
    XX0XW01.XX0XWHR = XX0XW01.XX0XWHR + 1;
  end

  XX0XW01.XX0XWHR = XX0XW01.XX0XWHR + 9;

  if (XX0XW01.XX0XWHR > 24)
    XX0XW01.XX0XWHR = XX0XW01.XX0XWHR - 24;
    XX0XW01.XX0XWDD = XX0XW01.XX0XWDD + 1;

    if (XX0XW01.XX0XWDD > 31)
      XX0XW01.XX0XWDD = XX0XW01.XX0XWDD - 31;
      XX0XW01.XX0XWMM = XX0XW01.XX0XWMM + 1;

      if (XX0XW01.XX0XWMM > 12)
        XX0XW01.XX0XWMM = XX0XW01.XX0XWMM - 12;
        /* -------------------  Y2K OUT BEGIN  --------------------*/
        /*  */
        /* XX0XW01.XX0XWYY = XX0XW01.XX0XWYY + 1;*/
        /*  */
        /* --------------------  Y2K OUT END  ---------------------*/
        /* -------------------  Y2K IN BEGIN  ---------------------*/
        /*  */
        if (XX0XW01.XX0XWYY == 99)
          XX0XW01.XX0XWYY = 0;
          XX0XW01.XX0XW19 = XX0XW01.XX0XW19 + 1;
        else
          XX0XW01.XX0XWYY = XX0XW01.XX0XWYY + 1;
        end
        /*  */
        /* --------------------  Y2K IN END  ----------------------*/
      end

    end

  end

  if (XX0XW01.XX0XWDAT > FB9REC.FB9COFDT) /* current dt > cutoff dt*/
    FLWREC.XXXMSGNO = 504; /* cutoff date not 9.5 hrs > current dt*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    set FL0LM010.FL0LMCDT cursor, bold; /* set cursor*/
    set FL0LM010.FB9COFTM bold; /* set cursor*/
  else
    if (XX0XW01.XX0XWDAT == FB9REC.FB9COFDT) /* current dt = cutoff dt*/
      if (XX0XW01.XX0XWTIM > FB9REC.FB9COFTM) /* current tm > cutoff tm*/
        FLWREC.XXXMSGNO = 504; /* cutoff date not 9.5 hrs > current dt*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        set FL0LM010.FL0LMCDT cursor, bold; /* set cursor*/
        set FL0LM010.FB9COFTM bold; /* set cursor*/
      end
    end
  end



  if (FLWREC.XXXMSGNO != 0) /* if error has occurred*/
    exit stack; /* return to display map*/
  end

   /* ------------------------------------------------------------*/
   /* can't change cutoff date and time to a past date/time.*/
   /* example:  if current date and time is 19910820 12:00, can't*/
                /* set date/time to 19910815 1:00.*/
   /* ------------------------------------------------------------*/


  if (XX0XW01.XX0XWDAT > FL0LW00.FL0LWCNN) /* current dt > new cutoff*/
    FLWREC.XXXMSGNO = 505; /* new cutoff not 9.5 hrs > current dt*/
    FLWREC.XXXMODID = "500"; /* module identification*/
    set FL0LM010.FL0LMCDT cursor, bold; /* set cursor*/
    set FL0LM010.FB9COFTM bold; /* set cursor*/
  else
    if (XX0XW01.XX0XWDAT == FL0LW00.FL0LWCNN) /* current dt = new cutoff*/
      if (XX0XW01.XX0XWTIM > FL0LM010.FB9COFTM) /* current tm > new cutoff*/
        FLWREC.XXXMSGNO = 505; /* new cutoff not 9.5 hrs > current dt*/
        FLWREC.XXXMODID = "500"; /* module identification*/
        set FL0LM010.FL0LMCDT cursor, bold; /* set cursor*/
        set FL0LM010.FB9COFTM bold; /* set cursor*/
      end
    end
  end


end // end FL0L500

// Process valid input request
Function FL0L600()
   /* ------------------------------------------------------------*/
   /* If an error has occured, redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (FLWREC.XXXMSGNO != 0 /* error occured*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    exit stack; /* redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* If no fields modified, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FL0LM010.FL0LMCDT == FL0LW00.FL0LWCNV /* cut off date*/
   && FL0LM010.FB9COFTM == FL0LW00.FB9COFTM) /* cut off time*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* obtain current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01();


   /* ------------------------------------------------------------*/
   /* update table row*/
   /* ------------------------------------------------------------*/

  FL0L610(); /* Update table row*/

   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(32); /* indicate update was successful*/


   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/


   /* ------------------------------------------------------------*/
   /* Send updates to other MVS regions (ex: EURD)*/
   /* ------------------------------------------------------------*/

  FL0L620(); /* Send updates to other regions*/



  FL0LW00.FL0LWDRF = "Y"; /* request data*/


end // end FL0L600

// Update the table row
Function FL0L610()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  FB9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  if (FL0LM010.FL0LMCDT != FL0LW00.FL0LWCNV) /* field modified*/
    FB9REC.FB9COFDT = FL0LW00.FL0LWCNN; /* cut off date*/
  end

  if (FL0LM010.FB9COFTM != FL0LW00.FB9COFTM) /* field modified*/
    FB9REC.FB9COFTM = FL0LM010.FB9COFTM; /* cut off time*/
  end

   /* ------------------------------------------------------------*/
   /* Update Factory Control Table Row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3650" ("U ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FL0LW00.FB9COFDT = FL0LW00.FL0LWCNN; /* cut off date*/
      FL0LW00.FB9COFTM = FL0LM010.FB9COFTM; /* cut off time*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* Normal return code*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes made by user*/
        converseLib.validationFailed(46); /* 'data updated by another appl'*/
        FLWREC.XXXMODID = "610"; /* module identification*/
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    FL0LW00.FL0LWDRF = "N"; /* data not requested*/
    FB9REC.ZZZCHGCT = FB9REC.ZZZCHGCT - 1; /* decrement change count*/
    converseLib.validationFailed(47); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(48); /* 'fatal data base error'*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FLWREC.XXXMODID = "610"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FLWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0L610

// Format JCL for FL4001
Function FL0L620()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  FL0LW00.FL0LW-TBL-IDX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/


   /* ------------------------------------------------------------*/
   /* Get region information.*/
   /* ------------------------------------------------------------*/

  set XCTHREC empty;

  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};


   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FL0LW00.FL0LW-TBL-IDX > 0) /* Until end of table*/

    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* Production region*/

      TA6REC.TARJCL[TA6INDEX] = FL0LT01.TARJCL[FL0LW-TBL-IDX];
      TA6REC.TARTYPE[TA6INDEX] = FL0LT01.TARTYPE[FL0LW-TBL-IDX];

      /* --------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* --------------------------------------------------*/

      if (FL0LT01.TARJCL[FL0LW-TBL-IDX] == "/*EOF") /* End of table*/
        FL0LW00.FL0LW-TBL-IDX = 0; /* Indicate end of table*/
      else
        FL0LW00.FL0LW-TBL-IDX = FL0LW00.FL0LW-TBL-IDX + 1;
      end

    else /* Format test jcl*/

      TA6REC.TARJCL[TA6INDEX] = FL0LTT1.TARJCL[FL0LW-TBL-IDX];
      TA6REC.TARTYPE[TA6INDEX] = FL0LTT1.TARTYPE[FL0LW-TBL-IDX];

      /* -----------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* -----------------------------------------------------*/

      if (FL0LTT1.TARJCL[FL0LW-TBL-IDX] == "/*EOF") /* End of table*/
        FL0LW00.FL0LW-TBL-IDX = 0; /* Indicate end of table*/
      else
        FL0LW00.FL0LW-TBL-IDX = FL0LW00.FL0LW-TBL-IDX + 1;
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
  end

  if (TA6REC.TA6RTNCD == "0") /* good return from previous submit*/
    TA6REC.TA6RTNCD = " ";
  end

  TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* set reply set to no*/


  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    FLWREC.XXXMODID = "620";

  end

  exit stack; /* Exit to display map*/


end // end FL0L620

//*** RECORD=FL0LW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0LW00 type basicRecord
  10 FL0LWDRF FL0LWDRF ; 
  10 FL0LWRNA FL0LWRNA ; 
  10 FL0LWTMW FL0LWTMW ; 
    15 FL0LWTMH FL0LWTMH ; 
    15 FL0LWTMM FL0LWTMM ; 
  10 FB9COFDT FB9COFDT ; 
  10 FB9COFTM FB9COFTM ; 
  10 FL0LWCNV FL0LWCNV ; 
  10 FL0LWCNN FL0LWCNN ; 
  10 FL0LWDDT FL0LWDDT ; 
    15 FL0LWDCC FL0LWDCC ; 
    15 FL0LWBYD FL0LWBYD ; 
      20 FL0LWDYY FL0LWDYY ; 
      20 FL0LWDMM FL0LWDMM ; 
    15 FL0LWDDD FL0LWDDD ; 
  10 FL0LW-TBL-IDX FL0LW-TBL-IDX ; 
end // end FL0LW00

// Table index
DataItem FL0LW-TBL-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date
DataItem FL0LWBYD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted numeric date
DataItem FL0LWCNN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// converted display date
DataItem FL0LWCNV char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem FL0LWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem FL0LWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// database date
DataItem FL0LWDDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FL0LWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data flag
DataItem FL0LWDRF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem FL0LWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Resources not available switch
DataItem FL0LWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user entered hour
DataItem FL0LWTMH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered minutes
DataItem FL0LWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user entered time
DataItem FL0LWTMW num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

