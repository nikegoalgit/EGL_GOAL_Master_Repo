package fl0b;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFL001;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import fb.common.FB9CSPRY;
import fb.common.FB9LRPRY;
import fb.common.FB9PSPRY;
import fb.common.FB9REC;
import fl.common.FLWREC;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=FL0B ****
// This application displays and updates a priority list in the
// Factory Control Table.
// 
// If an update is requested, the data is verified and the
// update performed.
// 
// The user may exit to any allowed application, via Fast Path
// or PF key.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/20/89  CNEWMA  New application.
//  00000   09/22/83  JMCLAU  CSP 4.1 conversion.
// y2kfix   11/20/97  pharwo  Regenerate for xx0xs01 changes
// *********************
Program FL0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  FL0BW00 FL0BW00; // record
  FLWREC FLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0BM.FL0BM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FL0BM010 initial; /* M001 input/output*/
    set FL0BW00 empty; /* working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0B001; /* Converse the main process*/
    ;
    ;
    FL0B001: FL0B001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FL0B001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FL0B

// Inquire/maintain a table row
Function FL0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FL0B100(); /* Obtain the data to display*/
  ;
  FL0B200(); /* Format and display the map*/
  ;
  FL0B300(); /* Check attention identifier*/
  ;
  FL0B400(); /* Reset fields to normal intensity*/
  ;
  FL0B500(); /* Verify the entered data*/
  ;
  FL0B600(); /* Process valid input request*/
  ;
  ;
end // end FL0B001

// Obtain the data to display
Function FL0B100()
   /* ------------------------------------------------------------*/
   /* if data not requested, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0BW00.FL0BWDNR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    return;
  end
  ;
  FL0BW00.FL0BWRNA = "N"; /* reset switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Select row - Factory Control Table*/
   /* ------------------------------------------------------------*/
  ;
  set FB9REC empty; /* initialize record*/
  ;
   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FL0BM010.FB9CSPRY = FB9REC.FB9CSPRY; /* cheapest source*/
      FL0BM010.FB9PSPRY = FB9REC.FB9PSPRY; /* previous solution*/
      FL0BM010.FB9LRPRY = FB9REC.FB9LRPRY;
                                   /* long range prod schedule*/
      FL0BW00.FB9CSPRY = FB9REC.FB9CSPRY; /* cheapest source*/
      FL0BW00.FB9PSPRY = FB9REC.FB9PSPRY; /* previous solution*/
      FL0BW00.FB9LRPRY = FB9REC.FB9LRPRY; /* long range prod schedule*/
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FL0BM010.XXXMODID = "100"; /* module identification*/
        converseLib.validationFailed(43); /* no record found*/
        exit stack;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    FL0BW00.FL0BWRNA = "Y"; /* set switch*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  FL0BM010.XXXMODID = "100"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY CONTROL TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0BM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0B100

// Format and converse the map
Function FL0B200()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FL0BM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0BM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0BM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    ;
    set FL0BM010 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FL0BM010 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FL0BM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FL0BM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FL0BM010.CAITEM; /* Application data*/
  ;
  ;
end // end FL0B200

// Check attention identifier
Function FL0B300()
   /* ------------------------------------------------------------*/
    /* reset request for data switch*/
   /* ------------------------------------------------------------*/
  ;
  FL0BW00.FL0BWDNR = "Y"; /* reset switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0BM010.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = FL0BM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FL0BM010.CAITEM; /* Application data*/
      ;
      XSFLS01(); /* Exit to another application*/
      FL0BM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/
      exit stack;
      ;
    else
      ;
      converseLib.validationFailed(44); /* Indicate invalid application*/
      ;
    end
    ;
    set FL0BM010.CATOAP cursor, modified, bold; /* Highlight*/
    ;
    FL0BM010.XXXMODID = "300"; /* Process name*/
    converseLib.validationFailed(44); /* Indicate invalid application*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    COMMAREA.CATOAP = "FL0B"; /* selection criteria*/
    XSFLS01();
    FL0BM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF4 is pressed, go to Main Menu*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* pf4 was pressed*/
   || converseVar.eventKey is pf5) /* pf5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FL0BM010"; /* APPLICATION FIND CODE*/
    end
    ;
    XSFLS01();
    exit stack;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF3 is pressed, go to Factory Load Menu*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    ;
    COMMAREA.CATOAP = "FL0A"; /* Factory Load Menu*/
    XSFLS01();
    exit stack; /* return to show error msg*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF13 is pressed, go to Create/Delete/Copy Model*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    ;
    COMMAREA.CATOAP = "FL0C"; /* Create/Delete/Copy Model*/
    XSFLS01();
    FL0BM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF20 is pressed, go to F/L Model Inquiry/Std Mnt*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf20) /* PF20 was pressed*/
    ;
    COMMAREA.CATOAP = "FL0H"; /* Model Inquiry*/
    XSFLS01();
    FL0BM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If PF21 is pressed, go to Report Requests*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    ;
    COMMAREA.CATOAP = "FL0I"; /* Report Requests*/
    XSFLS01();
    FL0BM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
    ;
  end
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FL0BM010.XXXMODID = "300"; /* Process name*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is enter) /* enter was pressed*/
    return;
  end
  ;
  converseLib.validationFailed(3); /* Indicate PF key not valid*/
  set FL0BM010.CATOAP cursor, modified, bold; /* Highlight*/
  FL0BM010.XXXMODID = "300"; /* Process name*/
  exit stack;
  ;
  ;
end // end FL0B300

// Reset highlighted fields
Function FL0B400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FL0BM010.FB9CSPRY initialAttributes; /* Cheapest Source code*/
  set FL0BM010.FB9PSPRY initialAttributes; /* Previous Solution code*/
  set FL0BM010.FB9LRPRY initialAttributes; /* Long Range Production Schedule code*/
  ;
  set FL0BM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FL0BM010.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end FL0B400

// Verify the entered data
Function FL0B500()
   /* ------------------------------------------------------------*/
   /* If no fields modified, return to map*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0BM010.FB9CSPRY == FL0BW00.FB9CSPRY /* cheapest source*/
   && FL0BM010.FB9PSPRY == FL0BW00.FB9PSPRY /* previous solution*/
   && FL0BM010.FB9LRPRY == FL0BW00.FB9LRPRY) /* long range prod schedule*/
    if (FL0BW00.FL0BWRNA == "Y")
      FL0BW00.FL0BWDNR = "Y"; /* data requested*/
    else
      FL0BW00.FL0BWDNR = "N"; /* data not requested*/
    end
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FL0BM010.XXXMODID = "500"; /* Module identification*/
    set FL0BM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if Previous Solution is equal Long Range Production*/
   /* Schedule code, or cheapest source, set up error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0BM010.FB9PSPRY == FL0BM010.FB9LRPRY)
    converseLib.validationFailed(107); /* codes cannot be equal*/
    FL0BM010.XXXMODID = "500"; /* module identification*/
    FL0BW00.FL0BWDNR = "N"; /* data not requested*/
    ;
    set FL0BM010.FB9PSPRY cursor, bold; /* set cursor*/
    set FL0BM010.FB9LRPRY cursor, bold; /* set cursor*/
    ;
  end
  ;
  if (FL0BM010.FB9PSPRY == FL0BM010.FB9CSPRY)
    converseLib.validationFailed(107); /* codes cannot be equal*/
    FL0BM010.XXXMODID = "500"; /* module identification*/
    FL0BW00.FL0BWDNR = "N"; /* data not requested*/
    ;
    set FL0BM010.FB9PSPRY cursor, bold; /* set cursor*/
    set FL0BM010.FB9CSPRY cursor, bold; /* set cursor*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if Cheapest Source code equals the Previous Solution*/
   /* code or the Long Range Production Schedule code,*/
   /* set up error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0BM010.FB9CSPRY == FL0BM010.FB9PSPRY)
    converseLib.validationFailed(107); /* codes cannot be equal*/
    FL0BM010.XXXMODID = "500"; /* module identification*/
    FL0BW00.FL0BWDNR = "N"; /* data not requested*/
    ;
    set FL0BM010.FB9CSPRY cursor, bold; /* set cursor*/
    set FL0BM010.FB9PSPRY cursor, bold; /* set cursor*/
    ;
  end
  ;
  if (FL0BM010.FB9CSPRY == FL0BM010.FB9LRPRY)
    converseLib.validationFailed(107); /* codes cannot be equal*/
    FL0BM010.XXXMODID = "500"; /* module identification*/
    FL0BW00.FL0BWDNR = "N"; /* data not requested*/
    ;
    set FL0BM010.FB9CSPRY cursor, bold; /* set cursor*/
    set FL0BM010.FB9LRPRY cursor, bold; /* set cursor*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if Long Range Production Schedule code has been modified,*/
   /* verify it is 1-3.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0BM010.FB9LRPRY != FL0BW00.FB9LRPRY) /* field modified*/
    if (FL0BM010.FB9LRPRY < 4
     && FL0BM010.FB9LRPRY > 0)
       /* next sentence*/
    else
      converseLib.validationFailed(105); /* 'enter a number 1 thru 3'*/
      FL0BM010.XXXMODID = "500"; /* module identification*/
      FL0BW00.FL0BWDNR = "N"; /* data not requested*/
      set FL0BM010.FB9LRPRY cursor, bold; /* set cursor*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if Previous Solution code has been modified, verify*/
   /* it is 1-3.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0BM010.FB9PSPRY != FL0BW00.FB9PSPRY) /* field modified*/
    if (FL0BM010.FB9PSPRY < 4
     && FL0BM010.FB9PSPRY > 0)
       /* next sentence*/
    else
      converseLib.validationFailed(105); /* 'enter a number 1 thru 3'*/
      FL0BM010.XXXMODID = "500"; /* module identification*/
      FL0BW00.FL0BWDNR = "N"; /* data not requested*/
      set FL0BM010.FB9PSPRY cursor, bold; /* set cursor*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if Cheapest Source code has been modified, verify*/
   /* it is 1-3.*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0BM010.FB9CSPRY != FL0BW00.FB9CSPRY) /* field modified*/
    if (FL0BM010.FB9CSPRY < 4
     && FL0BM010.FB9CSPRY > 0)
       /* next sentence*/
    else
      converseLib.validationFailed(105); /* 'enter a number 1 thru 3'*/
      FL0BM010.XXXMODID = "500"; /* module identification*/
      FL0BW00.FL0BWDNR = "N"; /* data not requested*/
      set FL0BM010.FB9CSPRY cursor, bold; /* set cursor*/
    end
  end
  ;
  ;
end // end FL0B500

// Process valid input request
Function FL0B600()
   /* ------------------------------------------------------------*/
   /* If an error has occured, redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* error occured*/
    exit stack; /* redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no fields modified, return to previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (FL0BM010.FB9CSPRY == FL0BW00.FB9CSPRY /* cheapest source*/
   && FL0BM010.FB9PSPRY == FL0BW00.FB9PSPRY /* previuos solution*/
   && FL0BM010.FB9LRPRY == FL0BW00.FB9LRPRY) /* long range prod schedule*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* update modified fields*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
  FL0B610(); /* Update table row*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(32); /* indicate update was successful*/
  ;
   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/
  FL0BW00.FB9CSPRY = FL0BM010.FB9CSPRY; /* cheapest source*/
  FL0BW00.FB9PSPRY = FL0BM010.FB9PSPRY; /* previuos solution*/
  FL0BW00.FB9LRPRY = FL0BM010.FB9LRPRY; /* long range prod schedule*/
  ;
  ;
end // end FL0B600

// Update the table row
Function FL0B610()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
  FB9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  if (FL0BM010.FB9CSPRY != FL0BW00.FB9CSPRY) /* field modified*/
    FB9REC.FB9CSPRY = FL0BM010.FB9CSPRY;
  end
  ;
  if (FL0BM010.FB9PSPRY != FL0BW00.FB9PSPRY) /* field modified*/
    FB9REC.FB9PSPRY = FL0BM010.FB9PSPRY;
  end
  ;
  if (FL0BM010.FB9LRPRY != FL0BW00.FB9LRPRY) /* field modified*/
    FB9REC.FB9LRPRY = FL0BM010.FB9LRPRY;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Update Factory Control Table Row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3650" ("U ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* database updated by another user*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes made by user*/
        FL0BM010.XXXMODID = "610"; /* Module identification*/
        converseLib.validationFailed(46); /* 'database updated by another user'*/
        exit stack; /* Exit to display map*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    FL0BW00.FL0BWDNR = "N"; /* data not requested*/
    FB9REC.ZZZCHGCT = FB9REC.ZZZCHGCT - 1; /* decrement change count*/
    converseLib.validationFailed(47); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(48); /* 'fatal data base error'*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FL0BM010.XXXMODID = "610"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0BM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB9REC.FB9GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FL0B610

//*** RECORD=FL0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FL0BW00 type basicRecord
  10 FL0BWDNR FL0BWDNR ; 
  10 FL0BWRNA FL0BWRNA ; 
  10 FB9CSPRY FB9CSPRY ; 
  10 FB9PSPRY FB9PSPRY ; 
  10 FB9LRPRY FB9LRPRY ; 
end // end FL0BW00

// Request for data switch
DataItem FL0BWDNR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resources not available switch
DataItem FL0BWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

