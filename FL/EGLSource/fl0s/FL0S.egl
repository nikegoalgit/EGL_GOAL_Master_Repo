package fl0s;

import corpcom2.XX0XW01;
import corpcom3.XPFL001;
import corpcom4.XSFLS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.ZZZSTM;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB8BUYDT;
import fb.common.FB9AODT;
import fb.common.FB9CSPRY;
import fb.common.FB9LRPRY;
import fb.common.FB9PSPRY;
import fb.common.FBABDT;
import fb.common.FBAGROUP;
import fb.common.FBAMDNBR;
import fb.common.FBAREC;
import fb.common.FBASTDFL;
import fb.common.FBDMDTYP;
import ff.common.*;
import fl.common.FLWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=FL0S ****
// This application is part of the factory load system.
// It displays data from the factory model parameter table,
// by schedule number, for a user-specified month.
// The user may update the standard model flag.
// 
// control   DATE      NAME   DESCRIPTION OF CHANGE
// ------- --------   ------  --------------------------
//         04/24/89   JNEWMA  New application.
//         08/29/90   JMCLAU  MODIFIED CODE TO GET THE
//                            LONG RANGE PRODUCTION SCHEDULE
//                            PRIORITY INSTEAD OF THE PREVIOUS
//                            SOLUTION PRIORITY.
// y2kfix  12/12/97   pharwo  year 2000 compliance changes to
//                            fl0sm001-zzzsdt, -zzzchgdt,
//                            -fl0swmth and fl0s001
// FL2041  04/14/99   SKATHI  Y2K Bug fix in schedule date
//                            verification
//                            Impacted objects-FL0SW00, FL0S500
// *********************
Program FL0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FBAREC FBAREC; // record
  FL0SW00 FL0SW00; // record
  FL0SW01 FL0SW01; // record
  FLWREC FLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FL0SM.FL0SM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFL001: XPFL001();
     /* ------------------------------------------------------------*/
     /* Flow to Application Initialization*/
     /* ------------------------------------------------------------*/


    goto FL0S001; /* Application Initialization*/

    FL0S001: FL0S001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/


    goto FL0S002; /* Converse main process*/
    FL0S002: FL0S002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/

    goto FL0S002; /* Converse Detail Schedule List*/


  end // end main
end // end FL0S

// Special Initialization
Function FL0S001()
   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/

  set FL0SW00 empty; /* Initialize working storage*/
  set FL0SW01 empty; /* Initialize map storage area*/
  set FL0SM001 initial; /* M001 input/output*/
  set SQLCA empty; /* Sql communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set TA2REC empty; /* Initialize date record*/
  set XX0XW01 empty; /* Date/time subroutine parameters*/
  COMMAREA.CAITEM = " "; /* Clear item field*/

  TA2REC.TA2GRGGN = FLWREC.FB8BUYDT; /* Sending greg date*/
  FL0SS01(); /* Validate date*/
  if (TA2REC.TA2RTNCD == 0) /* If valid date*/
    FL0SW00.FL0SWDTE = FLWREC.FB8BUYDT; /* use date passed in*/
    FL0SW00.FL0SWSWR = "Y"; /* Display data requested*/
  else /* Else*/
    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
    /* MOVE 19000001 TO FL0SW00.FL0SWDTE;*/
    /* /* Initialize map year/month date*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    FL0SW00.FL0SWDTE = 0;
                                   /* Initialize map year/month date*/
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    FL0SW00.FL0SWSWR = "N"; /* No display data requested*/
  end
  FL0SW01.FL0SWMTH = FL0SW00.FL0SWMTH; /* Buy year/month*/


end // end FL0S001

// Detail Schedule LIst
Function FL0S002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FL0S100(); /* Obtain data to display*/

  FL0S200(); /* Format and display the map*/

  FL0S300(); /* Check attention identifier*/

  FL0S400(); /* Reset fields to normal intensity*/

  FL0S500(); /* Verify the entered data*/

  FL0S600(); /* Process valid input request*/


end // end FL0S002

// Obtain data to display
Function FL0S100()
   /* ------------------------------------------------------------*/
   /* If Data was not requested of an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FL0SW00.FL0SWSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* IO to select and open VFYMDL01*/
   /* ------------------------------------------------------------*/

  FL0S110(); /* Open cursor for VFYMDL01*/

   /* ------------------------------------------------------------*/
   /* Fetch the first VFYMDL01 row*/
   /* ------------------------------------------------------------*/

  FL0S120(); /* Get first VFYMDL01 row*/

   /* ------------------------------------------------------------*/
   /* If there are no rows in the set display message.*/
   /* ------------------------------------------------------------*/

  if (FL0SW00.FL0SWDCF == "Y") /* end of cursor on first fetch*/
    FL0SM001.XXXMODID = "110"; /* Program number*/
    set FL0SM001.FL0SWMTH bold; /* Highlight schedule date*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Get and store each row of data to display.*/
   /* ------------------------------------------------------------*/

  FL0SW00.FL0SWIX1 = 1; /* Initialize index (moves data to map)*/

  while (FL0SW00.FL0SWDCF != "Y" /* Not end of set*/
   && FL0SW00.FL0SWIX1 <= 10) /* and no more than ten rows retrieved*/

    FL0S130(); /* Move buy information*/
    FL0S120(); /* Get next VFYMDL01 row*/
    FL0SW00.FL0SWIX1 = FL0SW00.FL0SWIX1 + 1; /* Increment index*/

  end


   /* ------------------------------------------------------------*/
   /* IO to close VFYMDL01 set*/
   /* ------------------------------------------------------------*/
  FL0S140(); /* Close cursor for VFYMDL01*/

  FL0SW00.FL0SWSWR = "N"; /* display data switch*/

end // end FL0S100

// open cursor VFYMDL01
Function FL0S110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set FBAREC empty; /* clear row storage area*/
  FL0SW00.FL0SWDCF = "N"; /* End of VFYMDL01 flag*/


   /* ------------------------------------------------------------*/
   /* Format the key with flwrec model type and schedule date*/
   /* ------------------------------------------------------------*/

  FBAREC.FBDMDTYP = "FT1"; /* Model type*/
  FL0SW00.FL0SWMTH = FL0SW01.FL0SWMTH; /* Reformat buy date*/
  FBAREC.FB8BUYDT = FL0SW00.FL0SWDTE; /* Buy date*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3470" ("S1", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FL0SM001.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VFYMDL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0SM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0SW00.FL0SWCEN; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FL0S110

// Get next VFYMDL01 row
Function FL0S120()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3470" ("N1", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FL0SW00.FL0SWDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FL0SM001.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0SM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0SW00.FL0SWCEN; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FL0S120

// Move buy information
Function FL0S130()
   /* ------------------------------------------------------------*/
   /* Move the buy information from the returned record into*/
   /* working storage array before moving to map*/
   /* ------------------------------------------------------------*/

  FL0SW01.FBAGROUP[FL0SWIX1] = FBAREC.FBAGROUP; /* Rec detail line*/
  if (FBAREC.FBASTDFL == "Y") /* If standard model*/
    FL0SW01.FBASTDFL[FL0SWIX1] = "*"; /* Map model flag = '*'*/
  else /* Else*/
    FL0SW01.FBASTDFL[FL0SWIX1] = " "; /* Map model flag = ' '*/
  end

   /* ------------------------------------------------------------*/
   /* Format the create date*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* Initialize record*/
  TA2REC.TA2GRGGN = FL0SW01.ZZZSDT[FL0SWIX1]; /* Sending greg date*/
  FL0SS01(); /* Convert create date*/
  if (TA2REC.TA2RTNCD == 0)
    FL0SW01.FL0SWSDT[FL0SWIX1] = TA2REC.TA2GRGAN; /* Create date*/
  else
    FL0SW01.FL0SWSDT[FL0SWIX1] = 0; /* Zero out create date*/
  end

   /* ------------------------------------------------------------*/
   /* Format the change date*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* Initialize record*/
  TA2REC.TA2GRGGN = FL0SW01.ZZZCHGDT[FL0SWIX1]; /* Sending greg date*/
  FL0SS01(); /* Convert change date*/
  if (TA2REC.TA2RTNCD == 0)
    FL0SW01.FL0SWCHG[FL0SWIX1] = TA2REC.TA2GRGAN; /* Change date*/
  else
    FL0SW01.FL0SWCHG[FL0SWIX1] = 0; /* Zero out change date*/
  end

end // end FL0S130

// Close VFYMDL01 cursor
Function FL0S140()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3470" ("C1", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FL0SM001.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VFYMDL01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0SM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FL0S140

// Format data & Converse map
Function FL0S200()
   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (FL0SM001.XXXCURDT == 0) /* Map is not formatted*/
    FL0S210(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FL0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FL0SM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FL0SM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  if (FLWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (FLWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FLWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set FL0SM001 alarm; /* Indicate sound alarm*/
  end

  converse FL0SM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  FLWREC.XXXMSGNO = 0; /* Message number*/
  FL0SM001.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FL0SM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = FL0SM001.CAITEM; /* Application data*/

end // end FL0S200

// Format Map data
Function FL0S210()
   /* ------------------------------------------------------------*/
   /* Move map selection criteria data from FL0SW01 display*/
   /* storage record to the map fields.*/
   /* ------------------------------------------------------------*/

  FL0SM001.FL0SWMTH = FL0SW01.FL0SWMTH; /* Display buy date*/

   /* ------------------------------------------------------------*/
   /* Move the factory buy detail information to the map*/
   /* ------------------------------------------------------------*/

  FL0SW00.FL0SWIX1 = 1; /* Initialize index*/

  while (FL0SW00.FL0SWIX1 <= 10
   && FL0SW01.FBAMDNBR[FL0SWIX1] != 0)

    FL0SM001.FBAMDNBR[FL0SWIX1] = FL0SW01.FBAMDNBR[FL0SWIX1];
    FL0SM001.ZZZSDT[FL0SWIX1] = FL0SW01.FL0SWSDT[FL0SWIX1];
    FL0SM001.ZZZCHGDT[FL0SWIX1] = FL0SW01.FL0SWCHG[FL0SWIX1];
    FL0SM001.FBASTDFL[FL0SWIX1] = FL0SW01.FBASTDFL[FL0SWIX1];
    FL0SM001.FB9LRPRY[FL0SWIX1] = FL0SW01.FB9LRPRY[FL0SWIX1];
    FL0SM001.FB9CSPRY[FL0SWIX1] = FL0SW01.FB9CSPRY[FL0SWIX1];

    set FL0SM001.FBASTDFL[FL0SWIX1] normal;

    FL0SW00.FL0SWIX1 = FL0SW00.FL0SWIX1 + 1;
  end

end // end FL0S210

// check attention identifiers
Function FL0S300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    set FL0SM001 initial; /* M001 input/output*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FL0SW00.FL0SWMTH = FL0SW01.FL0SWMTH; /* Buy year/month*/
      FLWREC.FB8BUYDT = FL0SW00.FL0SWDTE; /* Buy date*/
      XSFLS01(); /* transfer*/
      set FL0SM001.CATOAP cursor, bold; /* Highlight if bad transfer*/
    else
      FL0SM001.XXXMODID = "300"; /* Module identification*/
      set FL0SM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle pf-key transfers*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* If PF1 was pressed*/
   || converseVar.eventKey is pf4  /* If PF4 was pressed*/
   || converseVar.eventKey is pf5  /* If PF5 was pressed*/
   || converseVar.eventKey is pf3  /* If PF3 was pressed*/
   || converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* If PF14 was pressed*/
   || converseVar.eventKey is pf18 /* If PF18 was pressed*/
   || converseVar.eventKey is pf20 /* If PF20 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/
    if (converseVar.eventKey is pf1) /* If PF1 was pressed - help*/
      COMMAREA.CAITEM = "FL0SM001"; /* map of calling application*/
    end

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "FL0M"; /* will transfer to application FL0M*/
    end

    if (converseVar.eventKey is pf13) /* If PF13 was pressed*/
      COMMAREA.CATOAP = "FL0X"; /* will transfer to application FL0X*/
    end

    if (converseVar.eventKey is pf14) /* If PF14 was pressed*/
      COMMAREA.CATOAP = "FL0O"; /* will transfer to application FL0O*/
    end

    if (converseVar.eventKey is pf18) /* If PF18 was pressed*/
      COMMAREA.CATOAP = "FL0W"; /* will transfer to application FL0W*/
    end

    if (converseVar.eventKey is pf20) /* If PF20 was pressed*/
      COMMAREA.CATOAP = "FL0T"; /* will transfer to application FL0T*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "FL0U"; /* will transfer to application FL0U*/
    end
    FL0SW00.FL0SWMTH = FL0SW01.FL0SWMTH; /* Buy year/month*/
    FLWREC.FB8BUYDT = FL0SW00.FL0SWDTE; /* Buy date*/
    XSFLS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end
  if (converseVar.eventKey not enter) /* If invalid PF or PA key pressed*/
    FL0SM001.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end FL0S300

// Reset highlighted fields
Function FL0S400()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set FL0SM001.FL0SWMTH initialAttributes; /* Year/month for buy date*/

  FL0SW00.FL0SWIX1 = +1; /* Initialize index*/

  while (FL0SW00.FL0SWIX1 <= 10)
    if (FL0SM001.FBAMDNBR[FL0SWIX1] != 0) /* If detail to display*/
      set FL0SM001.FBASTDFL[FL0SWIX1] normal; /* Standard model indicator*/
    end
    FL0SW00.FL0SWIX1 = FL0SW00.FL0SWIX1 + 1; /* Increment index*/
  end


end // end FL0S400

// Verify the entered data
Function FL0S500()
   /* ------------------------------------------------------------*/
   /* Check that CAITEM was not entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    FL0SM001.XXXMODID = "500"; /* Module identification*/
    set FL0SM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Verify any changes to the detail lines.*/
   /* ------------------------------------------------------------*/

  FL0S510(); /* Verify changes*/

   /* ------------------------------------------------------------*/
   /* If date is zeros indicate that date must be entered.*/
   /* ------------------------------------------------------------*/

  if (FL0SM001.FL0SWMTH == 0 /* If no date entered*/
   && FL0SW00.FL0SWFG1 == "N") /* No detail lines changed*/
    FL0SM001.XXXMODID = "500"; /* Module identification*/
    set FL0SM001.FL0SWMTH cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate that date is required*/
  end

   /* ------------------------------------------------------------*/
   /* If any of the key fields changed, determine if any of the*/
   /* modifiable fields were changed.*/
   /* ------------------------------------------------------------*/

  if (FL0SM001.FL0SWMTH != FL0SW01.FL0SWMTH /* Key field changed*/
   && FL0SW00.FL0SWFG1 == "Y")              /* Detail lines changed*/
    FL0SM001.XXXMODID = "500"; /* Module identification*/
    set FL0SM001.FL0SWMTH cursor, bold; /* Highlight*/
    converseLib.validationFailed(128); /* Cannot update key when data changed*/
  else
    /* ------------------------------------------------------------*/
     /* Verify the map schedule buy date.*/
     /* INSERTED Y2K CENTURY FIXING LOGIC. SKATHI. 04/13/99*/
    /* ------------------------------------------------------------*/
    if (FL0SW00.FL0SWFG1 == "N" /* No detail lines changed*/
     && FL0SM001.FL0SWMTH != 0) /* Map date not equal to zero*/
      set TA2REC empty; /* Initialize record*/
      FL0SW00.FL0SWMTH = FL0SM001.FL0SWMTH; /* Reformat map buy date*/
      /* Insertion begins. SKathi.*/
      FL0SW00.FL0SWDD = 01; /* Set 01 for day*/
      if (FL0SW00.FL0SWYR > 60)
        FL0SW00.FL0SWCC = 19; /* Get century*/
      else
        FL0SW00.FL0SWCC = 20; /* Get century*/
      end
      /* Insertion Ends. SKathi.*/
      TA2REC.TA2GRGG = FL0SW00.FL0SWCEN; /* Sending gregory date*/
      FL0SS01(); /* Verify schedule date*/
      if (TA2REC.TA2RTNCD == 0) /* Valid date*/
        FL0SW00.FL0SWSWR = "Y"; /* Data was requested*/
      else /* Invalid return*/
        set FL0SM001.FL0SWMTH cursor, bold; /* Highlight*/
        FL0SM001.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end FL0S500

// Verify the entered data
Function FL0S510()
   /* ------------------------------------------------------------*/
   /* Verify any changes to the detail lines.*/
   /* ------------------------------------------------------------*/

  FL0SW00.FL0SWFG1 = "N"; /* Init changes found flag*/
  FL0SW00.FL0SWFG2 = "N"; /* Init standard selected flag*/
  FL0SW00.FL0SWIX1 = 10; /* Init loop counter*/

  while (FL0SW00.FL0SWIX1 >= 1) /* Edit from bottom to top*/

    /* ------------------------------------------------------------*/
     /* Check that a valid model standard value has been entered.*/
    /* ------------------------------------------------------------*/
    if (FL0SM001.FBASTDFL[FL0SWIX1] != FL0SW01.FBASTDFL[FL0SWIX1])
      FL0SW00.FL0SWFG1 = "Y"; /* Changed detail found*/
      if (FL0SM001.FBASTDFL[FL0SWIX1] != " " /* Must be blank*/
       && FL0SM001.FBASTDFL[FL0SWIX1] != "*") /* or '*'*/
        FL0SM001.XXXMODID = "510"; /* Module identification*/
        set FL0SM001.FBASTDFL[FL0SWIX1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value entered*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Insure that only 1 model is selected as standard.*/
    /* ------------------------------------------------------------*/
    if (FL0SM001.FBASTDFL[FL0SWIX1] == "*") /* If selected as standard*/
      if (FL0SW00.FL0SWFG2 == "Y" /* If standard already selected*/
       && FL0SW00.FL0SWFG1 == "Y") /* and detail changed*/
        FL0SM001.XXXMODID = "510"; /* Module identification*/
        set FL0SM001.FBASTDFL[FL0SWIX1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(126); /* Only 1 may be standard model*/
      else
        FL0SW00.FL0SWFG2 = "Y"; /* Flag standard selected*/
      end
    end
    FL0SW00.FL0SWIX1 = FL0SW00.FL0SWIX1 - 1; /* Decrement loop counter*/
  end

   /* ------------------------------------------------------------*/
   /* Insure that at least 1 model is selected as standard.*/
   /* ------------------------------------------------------------*/
  if (FL0SW00.FL0SWFG2 == "N" /* If no standard selected*/
   && FL0SW00.FL0SWFG1 == "Y" /* and detail changed*/
   && converseVar.validationMsgNum == 0) /* and no errors found*/
    FL0SM001.XXXMODID = "510"; /* Module identification*/
    set FL0SM001.FBASTDFL[1] cursor; /* Cursor at first detail*/
    converseLib.validationFailed(127); /* A standard model must be selected*/
  end

end // end FL0S510

// Process valid input request
Function FL0S600()
   /* ------------------------------------------------------------*/
   /* If any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/

  if (FL0SW00.FL0SWFG1 == "Y") /* Detail data changed*/

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
    /* ------------------------------------------------------------*/

    FL0SW00.FL0SWIX1 = 1; /* Initialize counter*/
    while (FL0SW00.FL0SWIX1 <= 10)

      if (FL0SM001.FBASTDFL[FL0SWIX1] != FL0SW01.FBASTDFL[FL0SWIX1])

        FL0S610(); /* Update table row*/

      end

      FL0SW00.FL0SWIX1 = FL0SW00.FL0SWIX1 + 1;
    end

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/

    FL0SM001.XXXMODID = "600"; /* Module identification*/
    FLWREC.XXXMSGNO = 32; /* Indicate update completed*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize the display storage and save key map data.*/
   /* ------------------------------------------------------------*/

  set FL0SW01 empty; /* M001 display storage*/

  FL0SW01.FL0SWMTH = FL0SM001.FL0SWMTH; /* Map buy date*/

   /* ------------------------------------------------------------*/
   /* Clear map input/output area and request data to display.*/
   /* ------------------------------------------------------------*/

  set FL0SM001 initial; /* M001 input/output*/

  if (FL0SW01.FL0SWMTH > 0) /* Buy date entered*/
    FL0SW00.FL0SWSWR = "Y"; /* Request for data switch*/
  else
    FL0SW00.FL0SWSWR = "N"; /* Request for data switch*/
  end

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

end // end FL0S600

// Update the table row
Function FL0S610()
   /* ------------------------------------------------------------*/
   /* Move the factory buy detail information to the map*/
   /* ------------------------------------------------------------*/

  FBAREC.FBAGROUP = FL0SW01.FBAGROUP[FL0SWIX1];
  if (FL0SM001.FBASTDFL[FL0SWIX1] == "*") /* If selected as standard model*/
    FBAREC.FBASTDFL = "Y"; /* standard model flag = 'Y'*/
  else
    FBAREC.FBASTDFL = "N"; /* standard model flag = 'N'*/
  end
  FBAREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FBAREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO3470" ("U ", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set FL0SM001 initial; /* M001 input/output*/
      FL0SW00.FL0SWSWR = "Y"; /* Request for data switch*/
      FL0SM001.XXXMODID = "610"; /* Module identification*/
      FLWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FL0SM001.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FL0SM001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FL0SW00.FL0SWCEN; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FL0S610

// Validate & convert Greg dates
Function FL0SS01()
   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate & convert dates.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2GRTYP = "G"; /* Type*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate and get all greg formats*/

   /* ------------------------------------------------------------*/
   /* Call TA0040*/
   /* ------------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/

    FL0SM001.XXXMODID = "S01"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FL0SM001.XXXMODID; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

end // end FL0SS01

//*** RECORD=FL0SW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FL0SW00 type basicRecord
  10 FL0SWDCF FL0SWDCF ; 
  10 FL0SWIX1 FL0SWIX1 ; 
  10 FL0SWSWR FL0SWSWR ; 
  10 FL0SWFG1 FL0SWFG1 ; 
  10 FL0SWFG2 FL0SWFG2 ; 
  10 FL0SWDTE FL0SWDTE ; 
    15 * char(1) ; 
    15 FL0SWCEN FL0SWCEN ; 
      20 FL0SWCC FL0SWCC ; 
      20 FL0SWMTH FL0SWMTH ; 
        25 FL0SWYR FL0SWYR ; 
        25 FL0SWMO FL0SWMO ; 
      20 FL0SWDD FL0SWDD ; 
end // end FL0SW00

//*** RECORD=FL0SW01 ****
// Working storage for FL0SM001 map detail lines
// ***********************
Record FL0SW01 type basicRecord
  5 FBAGROUP FBAGROUP [10] ; 
    10 FBDMDTYP FBDMDTYP ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBAMDNBR FBAMDNBR ; 
    10 FBASTDFL FBASTDFL ; 
    10 FB9CSPRY FB9CSPRY ; 
    10 FB9PSPRY FB9PSPRY ; 
    10 FB9LRPRY FB9LRPRY ; 
    10 FB9AODT FB9AODT ; 
    10 FBABDT FBABDT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
  5 FL0SWGRP FL0SWGRP ; 
    10 FL0SWSDT FL0SWSDT [10] ; 
    10 FL0SWCHG FL0SWCHG [10] ; 
    10 FL0SWMTH FL0SWMTH ; 
end // end FL0SW01

DataItem FL0SWCC char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Buy date as 8 characters
DataItem FL0SWCEN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformatted change date
DataItem FL0SWCHG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor switch
DataItem FL0SWDCF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FL0SWDD char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Buy date reformatted
DataItem FL0SWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Flag for changes to detail
DataItem FL0SWFG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Flag for standard selected
DataItem FL0SWFG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformatted dates for map
DataItem FL0SWGRP char(84)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for subscripting
DataItem FL0SWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FL0SWMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FL0SWMTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// reformatted set up date
DataItem FL0SWSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem FL0SWSWR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FL0SWYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

