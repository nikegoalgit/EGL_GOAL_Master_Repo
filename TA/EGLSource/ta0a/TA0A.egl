package ta0a;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import mn.common.*;
import ta.common.*;
//*** PROGRAM=TA0A ****
// ************************************************************
// **   purpose for ta0a                                    ***
// ***                                                      ***
// ***  this application is used by application support to  ***
// ***  verify the following csp sub-programs:              ***
// ***                                                      ***
// ***  ta0020 - test "db2" errors                          ***
// ***  ta0020 - test "appl errors                          ***
// ***  ta0020 - test "vsam errors                          ***
// ***  ta0040 - test date routine (calander)               ***
// ***  ta0050 - test read/write temp storage queue (csp only)*
// ***  xc0910 - test Theater of Operations (on-line)       ***
// ***  ta0100 - test work date INTERNATIONAL WORKING DATES ***
// ***  ta0190 - test work date routine (6-day work week)   ***
// ***  ta0230 - test pass CICS EIB info into a csp appl    ***
// ***  ta0290 - test work date routine (5-day work week)   ***
// ***  taxxxx - verify "numeric notation" on mvseurd lpar  ***
// ***  code37 - screen display of ta0at (code page 037 chars)
// ***  ta0800 - xdrtbl/theater of operations prod reg cd xref
// ***                                                      ***
// ***  ta0a uses the following records:                    ***
// ***  taerec -                                            ***
// ***  ta1rec -                                            ***
// ***  ta2rec -                                            ***
// ***  ta8rec -                                            ***
// ***  ta9rec -                                            ***
// ************************************************************
// ***                                                      ***
// ***  all testing can be done in CMD CICS region          ***
// ***                                                      ***
// ************************************************************
// ************************************************************
// **   maintenance log for ta0a                            ***
// ***                                                      ***
// ***  --date--  userid  description                       ***
// ***  10/24/89  vcowan  orginal specs                     ***
// ***  12/06/90  vcowan  added appl prolog info            ***
// ***  02/22/91  vcowan  move source code to prodmsl       ***
// ***                    ta0a is only used in CMT region   ***
// ***                    by bill kooistra to test on-line  ***
// ***                    TA sub-routines                   ***
// ***  03/13/91  vcowan  add logic to test ta0230          ***
// ***  11/22/93  vcowan  add logic to test ta0100          ***
// ***  01/28/94  vcowan  ta0230 display:  add language code***
// ***  04/06/94  vcowan  taxxxx display:  numeric notation ***
// ***  05/31/94  vcowan  code page 37 display using ta0at  ***
// ***  06/21/94  vcowan  xdrtbl/theater of operations prod ***
// ***                    development region code xref for
// ***                    Carol Heartlein, Chuck Ellis, Michael
// ***                    Halstead
// ***  07/25/94  vcowan  correct field attr for mn0mm-sel-opt*
// ***  10/12/94  vcowan  Test new maintenance on csp ver 4  *
// ***  12/20/94  vcowan  add opt 17, MN0T security check using
// ***                    XCTTBL (system prefix/country code)
// ***                    requested by FF & FG Systems(mvseurd)
// ***                    by Judy Juch & Mary Walker.
// ***  05/21/95  vcowan  accept sql error codes on ta0am002 *
// ***  09/08/95  vcowan  add opt 18, MN0V security check using
// ***                    system prefix/2-char user-defined id.
// ***                    requested by SY Systems (all LPARS)
// ***                    by Michael Halsted (global product)
// ***  12/28/95  vcowan  add xx0xs01; get system date/time
// ***  04/15/96  vcowan  install into production w/xx0xs01
// ***  09/16/96  vcowan  de-install test for TA0070 ...
// ***                    replace with: on-line call from CSP
// ***                    to XC0910 options for On-line testing
// ***  05/14/97  vcowan  Add logic to test all options of pgm-
// ***                    ta0040 ... verify if 2000 valid date
// ***  10/24/97  vcowan  test apt/abb turnover process on
// ***                    mvsdevl ... needed by ken peck
// ***  12/22/97  vcowan  add logic for ta0040 testing for
// ***                    gregreg & gregjul date formats
// ***  12/30/97  vcowan  add logic for ta0230 to display db2
// ***                    subsystem: ref ta3db2ss
// ***  06/25/98  vcowan  re-install into all lpars
// ***  11/12/98  vcowan  generalized ta0a1000 & ta0a1100
// ***                    to test ta0190, ta6190 & ta7190
// ***                    &  test ta0290, ta6290 & ta7290
// ***  05/10/99  vcowan  testing ... verify values for
// ***                    EZEDTEL & EZEDTELC
// ***  12/14/99  vcowan  add europe date displays for ta0040
// ***                    ... ref ta0a400 & ta0am005
// ***  12/20/99  vcowan  add daysdiff option for ta0040
// ***                    add julgreg  option for ta0040
// ***                    ... ref ta0a400 & ta0am005
// ***  12/30/99  vcowan  fix: allow getdate option to utilize
// ***                    days-to-add option
// ***
// ***  01/04/00  vcowan  recompile with member dates = year
// ***                    2000... note csp export show that all
// ***                    members had dates in the future
// ************************************************************
// ************************************************************
// *********************
Program TA0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = TA0AW01, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA; // record
  MNTREC MNTREC; // record
  MNVREC MNVREC; // record
  SQLCA SQLCA; // record
  TA0AW01 TA0AW01 ; // record
  TA0AW05 TA0AW05; // record
  TA0AW09 TA0AW09; // record
  TA0AW13 TA0AW13; // record
  TA0AW15 TA0AW15; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA2REC01 TA2REC01 { redefines = TA2REC } ; // record
  TA3REC TA3REC; // record
  TA8REC TA8REC; // record
  TA9REC TA9REC; // record
  TABREC TABREC; // record
  TAEREC TAEREC; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TA0AT {deleteAfterUse = yes}; // table
  use TA0AM.TA0AM001,  // forms
      TA0AM.TA0AM002, 
      TA0AM.TA0AM003, 
      TA0AM.TA0AM004, 
      TA0AM.TA0AM005, 
      TA0AM.TA0AM006, 
      TA0AM.TA0AM008, 
      TA0AM.TA0AM009, 
      TA0AM.TA0AM010, 
      TA0AM.TA0AM011, 
      TA0AM.TA0AM012, 
      TA0AM.TA0AM013, 
      TA0AM.TA0AM014, 
      TA0AM.TA0AM015, 
      TA0AM.TA0AM016, 
      TA0AM.TA0AM017, 
      TA0AM.TA0AM018
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TA0A001: TA0A001();
    goto TA0A001;
  end // end main
end // end TA0A

Function TA0A001()
  set TA0AM001 empty; /* clear ta0am001 map*/
  set COMMAREA empty; /* clear ta0am001 map*/
  set TA0AM017 initial; /* initialize ta0am017 map*/

  TA0AM001.TA0AMDTE = VGVar.currentGregorianDate; /* initialize date*/
  TA0A010(); /* converse ta0am001 map*/

  while (TA0AM001.TA0AMOPT == 1) /* option = '1', test ta0020 'db2 '*/
                                   /* errors*/
    TA0A100(); /* converse ta0am002 map*/
  end
  while (TA0AM001.TA0AMOPT == 2) /* option = '2', test ta0020 'appl'*/
                                   /* errors*/
    TA0A200(); /* converse ta0am003 map*/
  end
  while (TA0AM001.TA0AMOPT == 3) /* option = '3', test ta0020 'vsam'*/
                                   /* errors*/
    TA0A300(); /* converse ta0am004 map*/
  end
  while (TA0AM001.TA0AMOPT == 4) /* if option = '4'*/
    TA0A400();
                                   /* test ta0040 date routine calander*/
  end
  if (TA0AM001.TA0AMOPT == 5) /* if option = '5'*/
    TA0A500(); /* test ta0050 read/write temp storage*/
  end
  while (TA0AM001.TA0AMOPT == 6) /* if option = '6'*/
    TA0A600(); /* test xc0910 PEMF Theater of Ops*/
  end
  while (TA0AM001.TA0AMOPT == 7) /* option = '7', test ta0190 6-day work*/
                                   /* week*/
    TA0A700(); /* converse ta0am008 map*/
  end
  while (TA0AM001.TA0AMOPT == 8) /* if option = '8'*/
    TA0A800(); /* test ta0230 pass CICS EIB info*/
  end
  while (TA0AM001.TA0AMOPT == 9) /* option = '9', test ta0290 6-day work*/
                                   /* week*/
    TA0A900(); /* converse ta0am010 map*/
  end
  while (TA0AM001.TA0AMOPT == 10) /* option =  10. test ta7190 5-day work*/
                                   /* week*/
    TA0A1000(); /* converse ta0am011 map*/
  end
  while (TA0AM001.TA0AMOPT == 11) /* option = 11.  test ta7290 6-day work*/
                                   /* week*/
    TA0A1100(); /* converse ta0am012 map*/
  end
  while (TA0AM001.TA0AMOPT == 13) /* option = 13.  test ta0100 internat'l*/
                                   /* working date routines*/
    TA0A1300(); /* converse ta0am013 map*/
  end
  while (TA0AM001.TA0AMOPT == 14) /* option = 14.  test taxxxx numeric*/
                                   /* notation for mvseurd lpar*/
    TA0A1400(); /* converse ta0am014 map*/
  end
  while (TA0AM001.TA0AMOPT == 15) /* option = 15.  code page 37 data*/
    set TA0AW15 empty; /* screen display*/
    TA0A1500(); /* converse ta0am015 map*/
  end
  while (TA0AM001.TA0AMOPT == 16) /* option = 16.  xdrtbl/xcthrec xref*/
    TA0A1600(); /* converse ta0am016 map*/
  end
  while (TA0AM001.TA0AMOPT == 17) /* option = 17.  test Mn0T scty check*/
    TA0A1700(); /* converse ta0am017 map*/
  end
  while (TA0AM001.TA0AMOPT == 18) /* option = 18.  test Mn0V scty check*/
    TA0A1800(); /* converse ta0am018 map*/
  end


end // end TA0A001

Function TA0A010()

  XX0XS01(); /* get system date & time*/
  TA0AM001.TA0AM-DATE-CCYYMMDD = XX0XW01.XX0XWDAT; /* system date*/
  TA0AM001.TA0AM-TIME-HHMMSS = XX0XW01.XX0XWZTM; /* system time*/

  TA0AM001.TA0AM-EZEDTEL = VGVar.currentGregorianDate; /* ezedtel  ccyymmdd*/
  TA0AM001.TA0AM-EZEDTELC = VGVar.currentFormattedGregorianDate; /* ezedtelc  ccyy/mm/dd*/

  converse TA0AM001 ;
  if (converseVar.eventKey is pf3)
    exit program;
  end
  if (TA0AM001.TA0AMOPT == 1
   || TA0AM001.TA0AMOPT == 2
   || TA0AM001.TA0AMOPT == 3
   || TA0AM001.TA0AMOPT == 4
   || TA0AM001.TA0AMOPT == 5
   || TA0AM001.TA0AMOPT == 6
   || TA0AM001.TA0AMOPT == 7
   || TA0AM001.TA0AMOPT == 8
   || TA0AM001.TA0AMOPT == 9
   || TA0AM001.TA0AMOPT == 10
   || TA0AM001.TA0AMOPT == 11
   || TA0AM001.TA0AMOPT == 13
   || TA0AM001.TA0AMOPT == 14
   || TA0AM001.TA0AMOPT == 15
   || TA0AM001.TA0AMOPT == 16
   || TA0AM001.TA0AMOPT == 17
   || TA0AM001.TA0AMOPT == 18)
  else
    TA0AM001.TA0AMAPE = "PLEASE ENTER VALID OPTION (1 THRU 11 OR 13 THRU 18)";
    TA0A010();
  end

  if (TA0AM001.TA0AMOPT == 5)
    TA0AM001.TA0AMAPE = "OPTION UN-AVAILABLE AS OF DATE";
    TA0A010();
  end


end // end TA0A010

Function TA0A100()
  converse TA0AM002 ;

       /* map ta0am002 - ta0020 test DB2 sub menu*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

  set SQLCA empty; /* clear SQLCA REC*/
  set TAEREC empty; /* clear taerec*/
  set TA1REC empty; /* clear ta1rec*/

  TA1REC.TA1TYPE = "DB2 "; /* errdiag error type*/

  if (TA0AM002.TA1FUNC == "    ") /* errdiag termination missing*/
    TA1REC.TA1FUNC = "RETN"; /* errdiag termination*/
  else
    TA1REC.TA1FUNC = TA0AM002.TA1FUNC; /* errdiag termination*/
  end

  if (TA0AM002.TA1PGMNM == "        ") /* pgm name missing*/
    TA1REC.TA1PGMAP = "TA0A"; /* appl name*/
    TA1REC.TA1PGMNO = "100 ";
                                   /* process number - leave blank*/
  else
    TA1REC.TA1PGMNM = TA0AM002.TA1PGMNM;
  end

  if (TA1REC.TA1LOC == "                               ") /* loc blank*/
    TA1REC.TA1LOC = "TEST OF TA0AM002";
  else
    TA1REC.TA1LOC = TA0AM002.TA1LOC;
  end

  TA1REC.TA1DBASE = "DXXXXXX"; /* data base name*/
  TA1REC.TA1TBLVU = "VXXXXXX"; /* table view name*/
  TA1REC.TA1TBLKE = "XXXXXXX = TABLE KEY"; /* table key*/
  TA1REC.TA1MAPAP = "TA0A"; /* map application*/
  TA1REC.TA1MAPNO = "M002"; /* map number*/

  SQLCA.VAGen_SQLCODE = TA0AM002.TA0AMSCD; /* SQLCA CODE from map*/

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* pass SQLCA info*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

  set TA0AM002 initial; /* clear map ta0am002*/

  TA0AM002.TA1FUNC = TA1REC.TA1FUNC; /* errdiag termination*/
   /* MOVE TA1REC.TA1PGMAP TO TA0AM002.TA1PGMAP;   appl name*/
  TA0AM002.TA1PGMNM = TA1REC.TA1PGMNM; /* process number*/
  TA0AM002.TA1LOC = TA1REC.TA1LOC; /* pgm location*/

  TA0AM002.TA0AMSCD = SQLCA.VAGen_SQLCODE; /* SQLCA CODE from map*/
   /* mOVE TA1REC.TA1DBASE TO TA0AM002.TA1DBASE;   data base name*/
   /* MOVE TA1REC.TA1TBLVU TO TA0AM002.TA1TBLVU;   table view name*/
   /* MOVE TA1REC.TA1TBLKE TO TA0AM002.TA1TBLKE;   table key*/
   /* MOVE TA1REC.TA1MAPAP TO TA0AM002.TA1MAPAP;   map application*/
   /* MOVE TA1REC.TA1MAPNO TO TA0AM002.TA1MAPN0;   map number*/
  TA0AM002.TA0AMAPE = "CALL TO TA0020 COMPLETED";
end // end TA0A100

Function TA0A1000()

   /* -------------------------------------------------------------*/
    /* call theater of operations - xc0910*/
   /* -------------------------------------------------------------*/
  set XCTHREC empty;
  try
    call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* good return from call*/
    TA0AM011.TA0AM-XC0910-ERRMSG = "CALL TO XC0910 SUCCESSFUL     ";
  else
    TA0AM011.TA0AM-XC0910-ERRMSG = "CALL TO XC0910 NOT SUCCESSFUL ";
    return;
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "US      ")
    TA0AM011.TA0AM-PGM-NAME = "TA0190";
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "ASIA    ")
    TA0AM011.TA0AM-PGM-NAME = "TA6190";
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "EUROPE  ")
    TA0AM011.TA0AM-PGM-NAME = "TA7190";
  end


  converse TA0AM011 ;

       /* map ta0am011 - TA0190 6-day work week sub-menu - mvsdevl*/
       /* map ta0am011 - TA6190 6-day work week sub-menu - mvsasia*/
       /* map ta0am011 - TA7190 6-day work week sub-menu - mvseurd*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

  set TA9REC empty; /* clear ta9rec*/

  TA9REC.TA9BEGDT = TA0AM011.TA9BEGDT; /* BEGINNING DATE*/
  TA9REC.TA9ENDDT = TA0AM011.TA9ENDDT; /* ending    DATE*/
  TA9REC.TA9OFSET = TA0AM011.TA9OFSET; /* days offset*/

   /* -------------------------------------------------------------*/
    /* call date routine depending on lpar location*/
   /* -------------------------------------------------------------*/

  if (XCTHREC.XCTH-THEATER-LOCATION == "US      ")
    call "TA0290" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* 5-day work week sub-program*/
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "ASIA    ")
    call "TA6290" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* 5-day work week sub-program*/
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "EUROPE  ")
    call "TA7290" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* 5-day work week sub-program*/
  end

  if (XCTHREC.XCTH-THEATER-LOCATION != "US      "
   && XCTHREC.XCTH-THEATER-LOCATION != "ASIA    "
   && XCTHREC.XCTH-THEATER-LOCATION != "EUROPE  ")
    TA0AM012.TA0AMAEM = "THEATER-LOCATION NOT = US, ASIA, EUROPE";
  end

  set TA0AM011 initial; /* clear map ta0am011*/

  TA0AM011.TA9BEGDT = TA9REC.TA9BEGDT; /* BEGINNING DATE*/
  TA0AM011.TA9ENDDT = TA9REC.TA9ENDDT; /* ending    DATE*/
  TA0AM011.TA9OFSET = TA9REC.TA9OFSET; /* days offset*/

  TA0AM011.TA9RTNFL = TA9REC.TA9RTNFL; /* rtn flag*/
  if (TA9REC.TA9RTNFL == 0)
    TA0AM011.TA0AM8EM = "GOOD RETURN, NO ERRORS                  ";
  end

  if (TA9REC.TA9RTNFL == 9)
    TA0AM011.TA0AM8EM = "INVALID EIBCALEN PASSED                 ";
  end

  if (TA9REC.TA9RTNFL == 8)
    TA0AM011.TA0AM8EM = "DATE OR OFFSET NOT NUMERIC, BGN DATE = 0";
  end

  if (TA9REC.TA9RTNFL == 7)
    TA0AM011.TA0AM8EM = "INVALID OPTION(S) PASSED                ";
  end

  if (TA9REC.TA9RTNFL == 6)
    TA0AM011.TA0AM8EM = "A PASSED DATE IS NOT A VALID DATE       ";
  end

  if (TA9REC.TA9RTNFL == 5)
    TA0AM011.TA0AM8EM = "DATE OR CALC DATE OUTSIDE PGM RANGE     ";
  end

  if (TA9REC.TA9RTNFL == 4)
    TA0AM011.TA0AM8EM = "ERROR 4 NOT CURRENTLY USED BY PGM TA7190";
  end

  if (TA9REC.TA9RTNFL == 3)
    TA0AM011.TA0AM8EM = "INVALID WORK DATE                       ";
  end

  if (TA9REC.TA9RTNFL == 2)
    TA0AM011.TA0AM8EM = "DATE OR CALC DATE OUTSIDE TABLE RANGE   ";
  end

  if (TA9REC.TA9RTNFL == 1)
    TA0AM011.TA0AM8EM = "ERROR 1 NOT CURRENTLY USED BY PGM TA7190";
  end

  TA0AM011.TA9RTNDT = TA9REC.TA9RTNDT; /* rtn date*/
  TA0AM011.TA9DTDIF = TA9REC.TA9DTDIF; /* days difference*/


end // end TA0A1000

Function TA0A1100()

   /* -------------------------------------------------------------*/
    /* call theater of operations - xc0910*/
   /* -------------------------------------------------------------*/
  set XCTHREC empty;
  try
    call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* good return from call*/
    TA0AM012.TA0AM-XC0910-ERRMSG = "CALL TO XC0910 TO XC0910 SUCCESSFUL     ";
  else
    TA0AM012.TA0AM-XC0910-ERRMSG = "CALL TO XC0910 TO XC0910 NOT SUCCESSFUL ";
    return;
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "US      ")
    TA0AM012.TA0AM-PGM-NAME = "TA0290";
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "ASIA    ")
    TA0AM012.TA0AM-PGM-NAME = "TA6290";
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "EUROPE  ")
    TA0AM012.TA0AM-PGM-NAME = "TA7290";
  end


  converse TA0AM012 ;

       /* map ta0am012 - TA0290 5-day work week sub-menu - mvsdevl*/
       /* map ta0am012 - TA6290 5-day work week sub-menu - mvsasia*/
       /* map ta0am012 - TA7290 5-day work week sub-menu - mvseurd*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end
  set TA9REC empty; /* clear ta9rec*/

  TA9REC.TA9BEGDT = TA0AM012.TA9BEGDT; /* BEGINNING DATE*/
  TA9REC.TA9ENDDT = TA0AM012.TA9ENDDT; /* ending    DATE*/
  TA9REC.TA9OFSET = TA0AM012.TA9OFSET; /* days offset*/

   /* -------------------------------------------------------------*/
    /* call date routine depending on lpar location*/
   /* -------------------------------------------------------------*/

  if (XCTHREC.XCTH-THEATER-LOCATION == "US      ")
    call "TA0290" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* 5-day work week sub-program*/
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "ASIA    ")
    call "TA6290" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* 5-day work week sub-program*/
  end

  if (XCTHREC.XCTH-THEATER-LOCATION == "EUROPE  ")
    call "TA7290" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* 5-day work week sub-program*/
  end

  if (XCTHREC.XCTH-THEATER-LOCATION != "US      "
   && XCTHREC.XCTH-THEATER-LOCATION != "ASIA    "
   && XCTHREC.XCTH-THEATER-LOCATION != "EUROPE  ")
    TA0AM012.TA0AMAEM = "THEATER-LOCATION NOT = US, ASIA, EUROPE";
  end

  set TA0AM012 initial; /* clear map ta0am012*/

  TA0AM012.TA9BEGDT = TA9REC.TA9BEGDT; /* BEGINNING DATE*/
  TA0AM012.TA9ENDDT = TA9REC.TA9ENDDT; /* ending    DATE*/
  TA0AM012.TA9OFSET = TA9REC.TA9OFSET; /* days offset*/

  TA0AM012.TA9RTNFL = TA9REC.TA9RTNFL; /* rtn flag*/
  if (TA9REC.TA9RTNFL == 0)
    TA0AM012.TA0AMAEM = "GOOD RETRUN, NO ERRORS                  ";
  end

  if (TA9REC.TA9RTNFL == 9)
    TA0AM012.TA0AMAEM = "INVALID EIBCALEN PASSED                 ";
  end

  if (TA9REC.TA9RTNFL == 8)
    TA0AM012.TA0AMAEM = "DATE OR OFFSET NOT NUMERIC, BGN DATE = 0";
  end

  if (TA9REC.TA9RTNFL == 7)
    TA0AM012.TA0AMAEM = "INVALID OPTION(S) PASSED                ";
  end

  if (TA9REC.TA9RTNFL == 6)
    TA0AM012.TA0AMAEM = "A PASSED DATE IS NOT A VALID DATE       ";
  end

  if (TA9REC.TA9RTNFL == 5)
    TA0AM012.TA0AMAEM = "DATE OR CALC DATE OUTSIDE PGM RANGE     ";
  end

  if (TA9REC.TA9RTNFL == 4)
    TA0AM012.TA0AMAEM = "ERROR 4 NOT CURRENTLY USED BY PGM TA0190";
  end

  if (TA9REC.TA9RTNFL == 3)
    TA0AM012.TA0AMAEM = "INVALID WORK DATE                       ";
  end

  if (TA9REC.TA9RTNFL == 2)
    TA0AM012.TA0AMAEM = "DATE OR CALC DATE OUTSIDE TABLE RANGE   ";
  end

  if (TA9REC.TA9RTNFL == 1)
    TA0AM012.TA0AMAEM = "ERROR 1 NOT CURRENTLY USED BY PGM TA0190";
  end

  TA0AM012.TA9RTNDT = TA9REC.TA9RTNDT; /* rtn date*/
  TA0AM012.TA9DTDIF = TA9REC.TA9DTDIF; /* days difference*/
end // end TA0A1100

Function TA0A1300()
  converse TA0AM013 ;

    /* map ta0am013 - ta0100 international working date sub-menu*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

  set TA8REC empty; /* clear ta8rec*/

  TA8REC.TA8-OPTION = TA0AM013.TA8-OPTION; /* OPTION*/
  TA8REC.TA8-HOLIDAY-TYPE = TA0AM013.TA8-HOLIDAY-TYPE; /* HOL TYPE*/
  TA8REC.TA8-COUNTRY = TA0AM013.TA8-COUNTRY; /* COUNTRY CODE*/
  TA8REC.TA8-WORKWEEK = TA0AM013.TA8-WORKWEEK; /* WORKWEEK CODE*/

  TA8REC.TA8-BEG-DATE = TA0AM013.TA8-BEG-DATE; /* BEGINNING DATE*/
  TA8REC.TA8-END-DATE = TA0AM013.TA8-END-DATE; /* ending    DATE*/
  TA8REC.TA8-OFFSET = TA0AM013.TA8-OFFSET; /* days offset*/

  call "TA0100" (TA8REC) {isNoRefresh = yes, isExternal = yes}; /* INTERNATIONAL WORKING DATE*/

  set TA0AM013 initial; /* clear map ta0am013*/

  TA0AM013.TA8-OPTION = TA8REC.TA8-OPTION; /* OPTION*/
  TA0AM013.TA8-HOLIDAY-TYPE = TA8REC.TA8-HOLIDAY-TYPE; /* HOL TYPE*/
  TA0AM013.TA8-COUNTRY = TA8REC.TA8-COUNTRY; /* COUNTRY CODE*/
   /* WORKWEEK CODE*/
  TA0AM013.TA8-WORKWEEK = TA8REC.TA8-WORKWEEK;
  TA0AM013.TA8-BEG-DATE = TA8REC.TA8-BEG-DATE; /* BEGINNING DATE*/
  TA0AM013.TA8-END-DATE = TA8REC.TA8-END-DATE; /* ending    DATE*/
  TA0AM013.TA8-OFFSET = TA8REC.TA8-OFFSET; /* days offset*/

  TA0AM013.TA8-RETURN-DATE = TA8REC.TA8-RETURN-DATE; /* RETURN DATE*/
  TA0AM013.TA8-DAYS-DIFF = TA8REC.TA8-DAYS-DIFF; /* DAYS DIFF*/

  TA0AM013.TA8-RETURN-CODE = TA8REC.TA8-RETURN-CODE; /* rtn flag*/
  TA0AM013.TA8-LOCATION = TA8REC.TA8-LOCATION; /* rtn flag*/

  if (TA8REC.TA8-RETURN-CODE == 0)
    TA0AM013.TA8-MESSAGE1 = "**** GOOD RETURN **** ";
  else
    TA0AM013.TA8-MESSAGE1 = TA8REC.TA8-MESSAGE1;
    TA0AM013.TA8-MESSAGE2 = TA8REC.TA8-MESSAGE2;
  end

  TA0AW13.TA8-GROUP = TA8REC.TA8-GROUP; /* display record*/


end // end TA0A1300

Function TA0A1400()
  converse TA0AM014 ;

       /* map ta0am009 - ta0230 test eib routine*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

   /* ----------------------------------------**/
    /* get info from screen                  **/
   /* ----------------------------------------**/

  set TA3REC empty; /* clear ta3rec*/
  TA3REC.TA3OPTN = "ALLFLDS"; /* option*/

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain "allflds" info*/

  set TA0AM014 initial; /* clear map ta0am014*/

  TA0AM014.TA3APLID = TA3REC.TA3APLID; /* cics reg nbr*/

  TA0AM014.TA0AM-NUM-DSPLY-9V4 = 123456789.4321;

  TA0AM014.TA0AM-NUM-DSPLY-15V2 = 1122334455667788.99;

  TA0AM014.TA0AM-NUM-DSPLY-S7V2 = -9876543.1234;

  if (sysVar.errorCode != "00000000") /* Call was not successful*/
    TA0AM14E = "CALL TO TA0230 WAS NOT SUCCESSFUL  ";
  else
    TA0AM14E = "                                   ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0999)       /* return code = 999*/
    TA0AM014.TA0AM14E = "INVALID OPTION                       ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0299)       /* return code = 299*/
    TA0AM014.TA0AM14E = "ERROR FROM THE ASSIGN STATEMENT      ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0300)       /* return code = 300*/
    TA0AM014.TA0AM14E = "INVALID USERID -- ERR RTN FROM UT0200";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0410)       /* return code = 410*/
    TA0AM014.TA0AM14E = "INVALID REMOTE ID (PREFIX)           ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0420)       /* return code = 420*/
    TA0AM014.TA0AM14E = "INVALID RMTPRTID--ERR RTN FROM XC0100";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0599)       /* return code = 599*/
    TA0AM014.TA0AM14E = "CICS APPLID NOT IN CASE CONSTRUCT    ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0699)       /* return code = 699*/
    TA0AM014.TA0AM14E = "MSG REGION  NOT IN CASE CONSTRUCT    ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 1010)       /* return code = 1010*/
    TA0AM014.TA0AM14E = "ERROR IN PROGRAM ENTRY LOGIC         ";
  end


  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0)          /* zero return code*/
    set TA0AW09 empty; /* clear ta0aw09*/
    TA0AM014.TA0AM14E = "GOOD RETURN                          ";
  end



        /* ******* end of source code ********/
end // end TA0A1400

Function TA0A1500()

       /* map ta0am015 - code page 037 data from ta0at*/


  set TA0AM015 initial; /* clear map ta0am15*/

  TA0AS-DSPLY-X40-7F();
  converse TA0AM015 ;

  TA0A1510();

       /* check pf3 key*/

  if (converseVar.eventKey is pf3) /* pf3 EQ exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end


        /* ******* end of source code ********/


end // end TA0A1500

Function TA0A1510()

       /* map ta0am015 - code page 037 data from ta0at*/


  set TA0AM015 initial; /* clear map ta0am15*/

  TA0AS-DSPLY-X80-BF();

  converse TA0AM015 ;

  TA0A1520();

       /* check pf3 key*/

  if (converseVar.eventKey is pf3) /* pf3 EQ exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

        /* ******* end of source code ********/


end // end TA0A1510

Function TA0A1520()

       /* map ta0am015 - code page 037 data from ta0at*/


  set TA0AM015 initial; /* clear map ta0am15*/

  TA0AS-DSPLY-XC0-FE();

  converse TA0AM015 ;

       /* check pf3 key*/

  if (converseVar.eventKey is pf3) /* pf3 EQ exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

        /* ******* end of source code ********/


end // end TA0A1520

Function TA0A1600()
  converse TA0AM016 ;

       /* map ta0am009 - ta0230 test eib routine*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

   /* ----------------------------------------**/
    /* get info from screen                  **/
   /* ----------------------------------------**/

  set TABREC empty; /* clear ta3rec*/

  try
    call "TA0800" (TABREC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain "allflds" info*/

  set TA0AM014 initial; /* clear map ta0am014*/

  TA0AM016.XCTH-THEATER-RUNTYPE = TABREC.XCTH-THEATER-RUNTYPE;
  TA0AM016.XCTH-THEATER-LOCATION = TABREC.XCTH-THEATER-LOCATION;
  TA0AM016.XCTH-THEATER-RESERVED = TABREC.XCTH-THEATER-RESERVED;

  TA0AM016.XDR-PROD-REG-CD = TABREC.XDR-PROD-REG-CD;
  TA0AM016.XDR-PROD-REG-DESC = TABREC.XDR-PROD-REG-DESC;
  TA0AM016.XDR-PROD-REG-SDESC = TABREC.XDR-PROD-REG-SDESC;
  TA0AM016.XXX-STAT = TABREC.XXX-STAT;

  SQLCA.SQLCAREC = TABREC.SQLCAREC;
  TA0AM016.TA0AM-TAB-RTN-CD-DSPLY = TABREC.TAB-RTN-CD;
  TA0AM016.TA0AM-SQLCODE-DSPLY = SQLCA.VAGen_SQLCODE;
  TA0AM016.TA0AM-SQLERRM-DSPLY = SQLCA.SQLERRM;

  if (sysVar.errorCode != "00000000") /* Call was not successful*/
    TA0AM16E = "CALL TO TA0800 WAS NOT SUCCESSFUL  ";
  else
    TA0AM16E = "CALL TO TA0800 WAS SUCCESSFUL      ";
  end

        /* ******* end of source code ********/


end // end TA0A1600

Function TA0A1700()


  set MNTREC empty; /* clear ta3rec*/

  converse TA0AM017 ;

       /* map ta0am017 - test subpgm MN0T*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

   /* ----------------------------------------**/
    /* get info from screen                  **/
   /* ----------------------------------------**/


  MNTREC.XXX-SYS-PFX = TA0AM017.XXX-SYS-PFX; /* get sys pfx from map*/
  MNTREC.XCTCD = TA0AM017.XCTCD; /* get ctry cd from map*/
  COMMAREA.CAUSERID = TA0AM017.XXX-USER-ID; /* get USERID from map*/

  try
    call "MN0T" (COMMAREA, MNTREC) {isNoRefresh = yes};
  end /**/

   /* move following items to map*/

  TA0AM017.MNT-RTN-CODE = MNTREC.MNT-RTN-CODE; /* mnt rtn code*/
  TA0AM017.MNT-RTN-ERR-MSG = MNTREC.MNT-RTN-ERR-MSG;
                                   /* mnt err msg*/

  TA0AM017.XCT-ISO-CTRY-CD = MNTREC.XCT-ISO-CTRY-CD; /* iso ctry cd*/
  TA0AM017.MN1APPL = MNTREC.MN1APPL; /* goal scty appl*/

  TA0AM017.MN3ADDFL = MNTREC.MN3ADDFL; /* goal add flag*/
  TA0AM017.MN3ADDTB = MNTREC.MN3ADDTB; /* goal add sub-flags*/
  TA0AM017.MN3CHGFL = MNTREC.MN3CHGFL; /* goal add flag*/
  TA0AM017.MN3CHGTB = MNTREC.MN3CHGTB; /* goal add sub-flags*/
  TA0AM017.MN3DELFL = MNTREC.MN3DELFL; /* goal add flag*/
  TA0AM017.MN3DELTB = MNTREC.MN3DELTB; /* goal add sub-flags*/
  TA0AM017.MN3INQFL = MNTREC.MN3INQFL; /* goal add flag*/
  TA0AM017.MN3INQTB = MNTREC.MN3INQTB; /* goal add sub-flags*/

  if (sysVar.errorCode != "00000000") /* Call was not successful*/
    TA0AM17E = "CALL TO MN0T WAS NOT SUCCESSFUL  ";
  else
    TA0AM17E = "CALL TO MN0T WAS SUCCESSFUL      ";
  end

        /* ******* end of source code ********/


end // end TA0A1700

Function TA0A1800()


  set MNVREC empty; /* clear mnvrec*/

  converse TA0AM018 ;

       /* map ta0am018 - test subpgm mn0v*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

   /* ----------------------------------------**/
    /* get info from screen                  **/
   /* ----------------------------------------**/


  MNVREC.MNV-SEL-OPT = TA0AM018.MNV-SEL-OPT; /* get mnv-sel-opt*/
  MNVREC.XXX-SYS-PFX = TA0AM018.XXX-SYS-PFX; /* get sys pfx from map*/
  MNVREC.MNV-GOAL-SCTY-SUF-TRAN-CD = TA0AM018.MNV-GOAL-SCTY-SUF-TRAN-CD; /* goal scty suf tran cd*/
  COMMAREA.CAUSERID = TA0AM018.XXX-USER-ID; /* get USERID from map*/

  try
    call "MN0V" (COMMAREA, MNVREC) {isNoRefresh = yes};
  end /**/

   /* move following items to map*/

  TA0AM018.MNV-RTN-CODE = MNVREC.MNV-RTN-CODE; /* mnv rtn code*/
  TA0AM018.MNV-RTN-ERR-MSG = MNVREC.MNV-RTN-ERR-MSG;
                                   /* mnv err msg*/

  TA0AM018.MN1APPL = MNVREC.MN1APPL; /* goal scty appl*/

  TA0AM018.MN3ADDFL = MNVREC.MN3ADDFL; /* goal add flag*/
  TA0AM018.MN3ADDTB = MNVREC.MN3ADDTB; /* goal add sub-flags*/
  TA0AM018.MN3CHGFL = MNVREC.MN3CHGFL; /* goal add flag*/
  TA0AM018.MN3CHGTB = MNVREC.MN3CHGTB; /* goal add sub-flags*/
  TA0AM018.MN3DELFL = MNVREC.MN3DELFL; /* goal add flag*/
  TA0AM018.MN3DELTB = MNVREC.MN3DELTB; /* goal add sub-flags*/
  TA0AM018.MN3INQFL = MNVREC.MN3INQFL; /* goal add flag*/
  TA0AM018.MN3INQTB = MNVREC.MN3INQTB; /* goal add sub-flags*/

  if (sysVar.errorCode != "00000000") /* Call was not successful*/
    TA0AM18E = "CALL TO MN0V WAS NOT SUCCESSFUL  ";
  else
    TA0AM18E = "CALL TO MN0V WAS SUCCESSFUL      ";
  end

        /* ******* end of source code ********/


end // end TA0A1800

Function TA0A200()
  converse TA0AM003 ;

       /* map ta0am003 - ta0020 test APPL sub-menu*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end
  set TAEREC empty; /* clear taerec*/
  set TA1REC empty; /* clear ta1rec*/
  TA1REC.TA1TYPE = "APPL"; /* errdiag error type*/

  if (TA0AM003.TA1FUNC == "    ") /* errdiag termination missing*/
    TA1REC.TA1FUNC = "RETN"; /* errdiag termination*/
  else
    TA1REC.TA1FUNC = TA0AM003.TA1FUNC; /* errdiag termination*/
  end

  if (TA0AM003.TA1PGMNM == "        ") /* pgm name missing*/
    TA1REC.TA1PGMAP = "PGMX"; /* appl name*/
    TA1REC.TA1PGMNO = "    ";
                                   /* process number - leave blank*/
  else
    TA1REC.TA1PGMNM = TA0AM003.TA1PGMNM;
  end

  if (TA1REC.TA1LOC == "                                 ") /* loc blank*/
    TA1REC.TA1LOC = "TEST OF TA0AM003";
  else
    TA1REC.TA1LOC = TA0AM003.TA1LOC;
  end

  TA1REC.TA1MAPAP = "TA0A"; /* map application*/
  TA1REC.TA1MAPNO = "M003"; /* map nunber*/

  if (TA0AM003.TA0AMDS1 == "                            " /* error desc.*/
   && TA0AM003.TA0AMDS1 == "                            ")
    TAEREC.TAEDESC2 = "ANY MESSAGE CAN APPEAR HERE";
  else
    TAEREC.TAEDESC1 = TA0AM003.TA0AMDS1;
    TAEREC.TAEDESC2 = TA0AM003.TA0AMDS2;
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

  set TA0AM003 initial; /* clear map ta0am002*/

  TA0AM003.TA1FUNC = TA1REC.TA1FUNC; /* errdiag termination*/
  TA0AM003.TA1PGMNM = TA1REC.TA1PGMNM; /* process number*/
  TA0AM003.TA1LOC = TA1REC.TA1LOC; /* pgm location*/
  TA0AM003.TA0AMDS1 = TAEREC.TAEDESC1; /* error desc#1*/
  TA0AM003.TA0AMDS2 = TAEREC.TAEDESC2; /* error desc#2*/
  TA0AM003.TA0AMAPE = "CALL TO TA0020 COMPLETED";
end // end TA0A200

Function TA0A300()
  converse TA0AM004 ;

       /* map ta0am004 - ta0020 test VSAM sub-menu*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0"; /* exit routine*/
    return; /* exit routine*/
  end
                                 /* ;*/
  set TAEREC empty; /* clear taerec*/
  set TA1REC empty; /* clear ta1rec*/
                                 /* ;*/
  TA1REC.TA1TYPE = "VSAM"; /* errdiag termination*/
  if (TA0AM004.TA1FUNC == "    ") /* errdiag termination missing*/
    TA1REC.TA1FUNC = "RETN"; /* errdiag termination*/
  else
    TA1REC.TA1FUNC = TA0AM004.TA1FUNC; /* errdiag termination*/
  end

  if (TA0AM004.TA1PGMNM == "        ") /* pgm name missing*/
    TA1REC.TA1PGMAP = "TA0A"; /* appl name*/
    TA1REC.TA1PGMNO = "300 ";
                                   /* process number - leave blank*/
  else
    TA1REC.TA1PGMNM = TA0AM004.TA1PGMNM;
  end

  if (TA1REC.TA1LOC == "                               ") /* loc blank*/
    TA1REC.TA1LOC = "TEST OF TA0AM004";
  else
    TA1REC.TA1LOC = TA0AM004.TA1LOC;
  end

  set TA0AW01 empty; /* clear ta0amw01 work record*/
  TA0AW01.TA0AWVFN = TA0AM004.TA0AMVFN; /* vsam file name*/
  TA0AW01.TA0AWVIO = TA0AM004.TA0AMVIO; /* vsam i-o verb*/
  TA0AW01.TA0AWVSC = TA0AM004.TA0AMVSC; /* vsam status code*/
  TA0AW01.TA0AWVKY = TA0AM004.TA0AMVKY; /* vsam key*/
  TAEREC.TAEDESC1 = TA0AW01.TA0AWVXX; /* MOVE PARAMS TO TAEREC*/
                                 /* ;*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/
                                 /* ;*/
  set TA0AM004 initial; /* clear map ta0am004*/
                                 /* ;*/
  TA0AM004.TA1FUNC = TA1REC.TA1FUNC; /* errdiag termination*/
  TA0AM004.TA1PGMNM = TA1REC.TA1PGMNM; /* process number*/
  TA0AM004.TA1LOC = TA1REC.TA1LOC; /* pgm location*/
                                 /* ;*/
  TA0AM004.TA0AMVFN = TA0AW01.TA0AWVFN; /* vsam file name*/
  TA0AM004.TA0AMVIO = TA0AW01.TA0AWVIO; /* vsam i-o verb*/
  TA0AM004.TA0AMVSC = TA0AW01.TA0AWVSC; /* vsam status code*/
  TA0AM004.TA0AMVKY = TA0AW01.TA0AWVKY; /* vsam key*/
                                 /* ;*/
  TA0AM004.TA0AMAPE = "CALL TO TA0020 COMPLETED";
end // end TA0A300

Function TA0A400()


  TA0AM005.TA0AMMDT = VGVar.currentGregorianDate; /* move systems dated to map*/

  converse TA0AM005 ;

       /* map ta0am005 - ta0040 test date routine calander*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

  set TA2REC empty; /* clear ta2rec*/

  TA2REC.TA2DTOPT = TA0AM005.TA2DTOPT; /* option*/
  TA2REC.TA2GRTYP = TA0AM005.TA2GRTYP; /* type option*/

  if (TA2REC.TA2DTOPT == "JULGREG ") /* =option ='daysdiff'*/
    TA2REC.TA2JULN = TA0AM005.TA0AM-GREG-DATE; /* julian date value*/
    TA0AW05.TA0AW-GREG-DATE = TA0AM005.TA0AM-GREG-DATE; /* date value*/
  end

    /* IF TA2REC.TA2GRTYP ^= ' ';       /* IF GREG OPT NOT = SPACES*/
    /* END;*/

  TA2REC.TA2DYAOD = TA0AM005.TA0AM-DAYS-TO-ADD;
  TA0AW05.TA0AW-DAYS-TO-ADD = TA0AM005.TA0AM-DAYS-TO-ADD;
  TA0AW05.TA0AW-GREG-DATE = TA0AM005.TA0AM-GREG-DATE; /* greg date*/

  if (TA2REC.TA2GRTYP == "A") /* date = mmddyy*/
    TA2REC.TA2GRGA = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "B") /* date = mm/dd/yy*/
    TA2REC.TA2GRGB = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "C") /* date = mmddccyy*/
    TA2REC.TA2GRGC = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "D") /* date = mm/dd/ccyy*/
    TA2REC.TA2GRGD = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "E") /* date = yymmdd*/
    TA2REC.TA2GRGE = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "F") /* date = yy/mm/dd*/
    TA2REC.TA2GROF = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "G") /* date = ccyymmdd*/
    TA2REC.TA2GRGG = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "H") /* date = ccyy/mm/dd*/
    TA2REC.TA2GRGH = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "I") /* date = ddmmyy*/
    TA2REC01.TA2-GREG-DDMMYY = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "J") /* date = dd.mm.yy*/
    TA2REC01.TA2-GREG-DDMMYY-DISPLAY = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "K") /* date = ddmmccyy*/
    TA2REC01.TA2-GREG-DDMMCCYY = TA0AM005.TA0AM-GREG-DATE;
  end
  if (TA2REC.TA2GRTYP == "L") /* date = ddmmccyy*/
    TA2REC01.TA2-GREG-DDMMCCYY-DISPLAY = TA0AM005.TA0AM-GREG-DATE;
  end

  if (TA2REC.TA2DTOPT == "DAYSDIFF") /* =option ='daysdiff'*/
    TA2REC.TA2DBDF = TA0AM005.TA2DBDF; /* from date value*/
    TA2REC.TA2DBDT = TA0AM005.TA2DBDT; /* to date value*/
    TA0AW05.TA0AW-GREG-DATE = " "; /* greg date*/
  end

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* common date checking/convert pgm*/

  set TA0AM005 initial; /* clear map ta0am005*/


  if (TA2REC.TA2RTNCD != 0) /* if bad date*/
    TA0AM005.TA0AMAPE = "INVALID DATE RETURNED BY TA0040";
    if (TA2REC.TA2RTNCD == 0111) /* if bad julian date*/
      TA0AM005.TA0AMAPE = "RC=0111; INVALID JULIAN DATE   ";
    end
    if (TA2REC.TA2RTNCD == 0222) /* if bad julian date*/
      TA0AM005.TA0AMAPE = "RC=0222; INVALID GREGORIAN DATE";
    end
    if (TA2REC.TA2RTNCD == 0333) /* if bad julian date*/
      TA0AM005.TA0AMAPE = "RC=0333; INVALID CENTURY       ";
    end
    if (TA2REC.TA2RTNCD == 0888) /* if bad julian date*/
      TA0AM005.TA0AMAPE = "RC=0888; INVALID GREGORIAN TYPE";
    end
    if (TA2REC.TA2RTNCD == 0999) /* if bad julian date*/
      TA0AM005.TA0AMAPE = "RC=0999; INVALID OPTION        ";
    end
    if (TA2REC.TA2RTNCD == 1010) /* if bad julian date*/
      TA0AM005.TA0AMAPE = "RC=1010; BAD COMMAREA, LENGTH<0";
    end
  end

  if (TA2REC.TA2RTNCD == 0) /* if good date*/
    TA0AM005.TA0AMAPE = "RETURN CODE = 0                ";
  end
  TA0AM005.TA2DTOPT = TA2REC.TA2DTOPT; /* option*/
  TA0AM005.TA2GRTYP = TA2REC.TA2GRTYP; /* type option*/
  TA0AM005.TA0AM-GREG-DATE = TA0AW05.TA0AW-GREG-DATE; /* greg date*/
  TA0AM005.TA0AM-DAYS-TO-ADD = TA0AW05.TA0AW-DAYS-TO-ADD;
  TA0AM005.TA0AM-TA2DYAOD = TA2REC.TA2DYAOD; /* ta2rec days to add*/
  TA0AM005.TA2CENT = TA2REC.TA2CENT; /* century*/
  TA0AM005.TA2DYWK = TA2REC.TA2DYWK; /* day of week*/
  TA0AM005.TA2TIMED = TA2REC.TA2TIMED; /* time-of-day*/
  TA0AM005.TA2JULN = TA2REC.TA2JULN; /* julian-date*/
  TA0AM005.TA2GRGA = TA2REC.TA2GRGA; /* greg-mmddyy*/
  TA0AM005.TA2GRGB = TA2REC.TA2GRGB; /* greg-mmddyy-displ*/
  TA0AM005.TA2GRGC = TA2REC.TA2GRGC; /* greg-mmddccyy*/
  TA0AM005.TA2GRGD = TA2REC.TA2GRGD; /* greg-mmddccyy-displ*/
  TA0AM005.TA2GRGE = TA2REC.TA2GRGE; /* greg-yymmdd*/
  TA0AM005.TA2GROF = TA2REC.TA2GROF; /* greg-yymmdd-displ*/
  TA0AM005.TA2GRGG = TA2REC.TA2GRGG; /* greg-ccyymmdd*/
  TA0AM005.TA2GRGH = TA2REC.TA2GRGH; /* greg-ccyymmdd-displ*/
  TA0AM005.TA2LITDT = TA2REC.TA2LITDT; /* litereal date*/
  TA0AM005.TA2ERMSG = TA2REC.TA2ERMSG; /* error-message*/

  if (TA2REC.TA2DTOPT == "DAYSDIFF") /* =option ='daysdiff'*/
    TA0AM005.TA2DBDF = TA2REC.TA2DBDF; /* daysdiff value*/
    TA0AM005.TA2DBDT = TA2REC.TA2DBDT; /* daysdiff value*/
    TA0AM005.TA2DBDD = TA2REC.TA2DBDD; /* daysdiff value*/
  else

    TA0AM005.TA2-EUR-LITERAL-DATE = TA2REC01.TA2-EUR-LITERAL-DATE;
    TA0AM005.TA2-GREG-DDMMCCYY = TA2REC01.TA2-GREG-DDMMCCYY;
    TA0AM005.TA2-GREG-DDMMCCYY-DISPLAY = TA2REC01.TA2-GREG-DDMMCCYY-DISPLAY;
    TA0AM005.TA2-GREG-DDMMYY = TA2REC01.TA2-GREG-DDMMYY;
    TA0AM005.TA2-GREG-DDMMYY-DISPLAY = TA2REC01.TA2-GREG-DDMMYY-DISPLAY;

    TA0AM005.TA0AM-TA2-EUR-DATE-FORMATS = TA2REC01.TA2-EUR-DATE-FORMATS;
  end


end // end TA0A400

Function TA0A500()
end // end TA0A500

Function TA0A600()
  converse TA0AM006 ;

       /* map ta0am009 - ta0230 test eib routine*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

   /* ----------------------------------------**/
    /* get info from screen                  **/
   /* ----------------------------------------**/

  set TA0AM006 initial; /* clear map ta0am006*/

   /* ----------------------------------------------------------------------*/
   /* MN0MS-INIT-XCTHREC ...*/
      /* get theater of operations information & move info to COMMAREA*/

      /* get theater of operations information*/
      /* get "runtype"  (which MVS CICS) info:  'test' or 'prod'*/
      /* get "location" (which MVS LPAR) info 'us', 'europe' or 'asia'*/
      /* get "division" if us, then ' '. 'apparel, 'footwear'*/
      /* if europe or asia, then ' '*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  try
    call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  end

  TA0AM006.TA0AM-XC0910-RTN-CD = sysVar.errorCode; /* rtn cd on map*/

  if (sysVar.errorCode == "00000000") /* good retrun from call*/
    TA0AM06E = "CALL TO XC0910 WAS SUCCESSFUL      ";
  else
    TA0AM06E = "CALL TO XC0910 WAS NOT SUCCESSFUL  ";
    return;
  end

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "  ") /* CALL TO XC0910 FAILED*/
    TA0AM06E = "INVALID DATA FROM XC0910 CALL  ";
  else
    TA0AM006.XCTH-THEATER-RUNTYPE = XCTHREC.XCTH-THEATER-RUNTYPE; /* RUNTYPE TO ta0am006*/
    TA0AM006.XCTH-THEATER-LOCATION = XCTHREC.XCTH-THEATER-LOCATION; /* LOCATION TO ta0am006*/
    TA0AM006.XCTH-THEATER-DIVISION = XCTHREC.XCTH-THEATER-DIVISION; /* LOCATION TO ta0am006*/
  end
        /* ******* end of source code ********/

end // end TA0A600

Function TA0A700()
  converse TA0AM008 ;

       /* map ta0am008 - ta0190 test 6-day work week sub-menu*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

  set TA9REC empty; /* clear ta9rec*/

  TA9REC.TA9BEGDT = TA0AM008.TA9BEGDT; /* BEGINNING DATE*/
  TA9REC.TA9ENDDT = TA0AM008.TA9ENDDT; /* ending    DATE*/
  TA9REC.TA9OFSET = TA0AM008.TA9OFSET; /* days offset*/

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* 6-day work week sub-program*/

  set TA0AM008 initial; /* clear map ta0am008*/

  TA0AM008.TA9BEGDT = TA9REC.TA9BEGDT; /* BEGINNING DATE*/
  TA0AM008.TA9ENDDT = TA9REC.TA9ENDDT; /* ending    DATE*/
  TA0AM008.TA9OFSET = TA9REC.TA9OFSET; /* days offset*/

  TA0AM008.TA9RTNFL = TA9REC.TA9RTNFL; /* rtn flag*/
  if (TA9REC.TA9RTNFL == 0)
    TA0AM008.TA0AM8EM = "GOOD RETURN, NO ERRORS                  ";
  end

  if (TA9REC.TA9RTNFL == 9)
    TA0AM008.TA0AM8EM = "INVALID EIBCALEN PASSED                 ";
  end

  if (TA9REC.TA9RTNFL == 8)
    TA0AM008.TA0AM8EM = "DATE OR OFFSET NOT NUMERIC, BGN DATE = 0";
  end

  if (TA9REC.TA9RTNFL == 7)
    TA0AM008.TA0AM8EM = "INVALID OPTION(S) PASSED                ";
  end

  if (TA9REC.TA9RTNFL == 6)
    TA0AM008.TA0AM8EM = "A PASSED DATE IS NOT A VALID DATE       ";
  end

  if (TA9REC.TA9RTNFL == 5)
    TA0AM008.TA0AM8EM = "DATE OR CALC DATE OUTSIDE PGM RANGE     ";
  end

  if (TA9REC.TA9RTNFL == 4)
    TA0AM008.TA0AM8EM = "ERROR 4 NOT CURRENTLY USED BY PGM TA0190";
  end

  if (TA9REC.TA9RTNFL == 3)
    TA0AM008.TA0AM8EM = "INVALID WORK DATE                       ";
  end

  if (TA9REC.TA9RTNFL == 2)
    TA0AM008.TA0AM8EM = "DATE OR CALC DATE OUTSIDE TABLE RANGE   ";
  end

  if (TA9REC.TA9RTNFL == 1)
    TA0AM008.TA0AM8EM = "ERROR 1 NOT CURRENTLY USED BY PGM TA0190";
  end

  TA0AM008.TA9RTNDT = TA9REC.TA9RTNDT; /* rtn date*/
  TA0AM008.TA9DTDIF = TA9REC.TA9DTDIF; /* days difference*/
end // end TA0A700

Function TA0A800()
  converse TA0AM009 ;

       /* map ta0am009 - ta0230 test eib routine*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

   /* ----------------------------------------**/
    /* get info from screen                  **/
   /* ----------------------------------------**/

  set TA3REC empty; /* clear ta3rec*/
  TA3REC.TA3OPTN = TA0AM009.TA3OPTN; /* option*/
  if (TA0AM009.TA3OPTN == "NAMEONLY")
    TA3REC.TA3USRID = TA0AM009.TA3USRID;
  end


  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user info*/

  set TA0AM009 initial; /* clear map ta0am009*/

  TA0AM009.TA3RTNCD = TA3REC.TA3RTNCD;
  TA0AM009.TA3OPTN = TA3REC.TA3OPTN;
  TA0AM009.TA3USRID = TA3REC.TA3USRID;


  if (sysVar.errorCode != "00000000") /* Call was not successful*/
    TA0AM9EM = "CALL TO TA0230 WAS NOT SUCCESSFUL  ";
  else
    TA0AM9EM = "                                   ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0999)       /* return code = 999*/
    TA0AM009.TA0AM9EM = "INVALID OPTION                       ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0299)       /* return code = 299*/
    TA0AM009.TA0AM9EM = "ERROR FROM THE ASSIGN STATEMENT      ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0300)       /* return code = 300*/
    TA0AM009.TA0AM9EM = "INVALID USERID -- ERR RTN FROM UT0200";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0410)       /* return code = 410*/
    TA0AM009.TA0AM9EM = "INVALID REMOTE ID (PREFIX)           ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0420)       /* return code = 420*/
    TA0AM009.TA0AM9EM = "INVALID RMTPRTID--ERR RTN FROM XC0100";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0599)       /* return code = 599*/
    TA0AM009.TA0AM9EM = "CICS APPLID NOT IN CASE CONSTRUCT    ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0699)       /* return code = 699*/
    TA0AM009.TA0AM9EM = "MSG REGION  NOT IN CASE CONSTRUCT    ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 1010)       /* return code = 1010*/
    TA0AM009.TA0AM9EM = "ERROR IN PROGRAM ENTRY LOGIC         ";
  end


  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA3REC.TA3RTNCD == 0)          /* zero return code*/
    set TA0AW09 empty; /* clear ta0aw09*/
    TA0AM009.TA0AM9EM = "GOOD RETURN                          ";
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA0AM009.TA3OPTN == "EIBINFO ")
    TA0AW09.TA0AW9H1 = "   TRANID  TERMID  POSN OF";
    TA0AW09.TA0AW9H2 = " CURSOR                   ";
    TA0AW09.TA0AW9H3 = "                          ";
    TA0AM009.TA0AM9HA = TA0AW09.TA0AW9HD;
    TA0AW09.TA3EIBRN = TA3REC.TA3EIBRN;
    TA0AW09.TA3EIBRM = TA3REC.TA3EIBRM;
    TA0AW09.TA3EIBPS = TA3REC.TA3EIBPS;
    TA0AM009.TA0AM9DA = TA0AW09.TA0AW9EI;
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA0AM009.TA3OPTN == "ASSIGN  ")
    TA0AW09.TA0AW9H1 = "   APPLID  SYSTEM ID   MSG";
    TA0AW09.TA0AW9H2 = " REG ID (TOR)   DB2 SUBSYS";
    TA0AW09.TA0AW9H3 = "                          ";
    TA0AM009.TA0AM9HA = TA0AW09.TA0AW9HD;
    TA0AW09.TA3APLID = TA3REC.TA3APLID;
    TA0AW09.TA3SYSID = TA3REC.TA3SYSID;
    TA0AW09.TA3MSGID = TA3REC.TA3MSGID;
    TA0AW09.TA3DB2SS = TA3REC.TA3DB2SS;
    TA0AM009.TA0AM9DA = TA0AW09.TA0AW9AS;
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA0AM009.TA3OPTN == "USERID  ")
    TA0AW09.TA0AW9H1 = "   USERID                 ";
    TA0AW09.TA0AW9H2 = "                          ";
    TA0AW09.TA0AW9H3 = "           LANG CODE      ";
    TA0AM009.TA0AM9HA = TA0AW09.TA0AW9HD;
    TA0AW09.TA3USRID = TA3REC.TA3USRID;
    TA0AW09.ZFL-LANG-CD = TA3REC.ZFL-LANG-CD;
    TA0AM009.TA0AM9DA = TA0AW09.TA0AW9NO;
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA0AM009.TA3OPTN == "USRNAME ")
    TA0AW09.TA0AW9H1 = "   USERID    USER NAME    ";
    TA0AW09.TA0AW9H2 = "                          ";
    TA0AW09.TA0AW9H3 = "           LANG CODE      ";
    TA0AM009.TA0AM9HA = TA0AW09.TA0AW9HD;
    TA0AW09.TA3USRID = TA3REC.TA3USRID;
    TA0AW09.ZFL-LANG-CD = TA3REC.ZFL-LANG-CD;
    TA0AW09.XURUSRNM = TA3REC.XURUSRNM;
    TA0AM009.TA0AM9DA = TA0AW09.TA0AW9NO;
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA0AM009.TA3OPTN == "NAMEONLY")
    TA0AW09.TA0AW9H1 = "   USERID    USER NAME    ";
    TA0AW09.TA0AW9H2 = "                          ";
    TA0AW09.TA0AW9H3 = "                          ";
    TA0AM009.TA0AM9HA = TA0AW09.TA0AW9HD;
    TA0AW09.TA3USRID = TA3REC.TA3USRID;
    TA0AW09.XURUSRNM = TA3REC.XURUSRNM;
    TA0AM009.TA0AM9DA = TA0AW09.TA0AW9NO;
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA0AM009.TA3OPTN == "RMTPTR  ")
    TA0AW09.TA0AW9H1 = "   RMTPRT(XC0100)  RMTPRTI";
    TA0AW09.TA0AW9H2 = "D                         ";
    TA0AW09.TA0AW9H3 = "                          ";
    TA0AM009.TA0AM9HA = TA0AW09.TA0AW9HD;
    TA0AW09.TA3PRTR1 = TA3REC.TA3PRTR1;
    TA0AW09.TA3PRTR2 = TA3REC.TA3PRTR2;
    TA0AM009.TA0AM9DA = TA0AW09.TA0AW9RM;
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA0AM009.TA3OPTN == "CICSNBR ")
    TA0AW09.TA0AW9H1 = "   TRANID  TERMID  POSN OF";
    TA0AW09.TA0AW9H2 = " CURSOR  CICS MSG#  CICS U";
    TA0AW09.TA0AW9H3 = "TIL#                       ";
    TA0AM009.TA0AM9HA = TA0AW09.TA0AW9HD;
    TA0AW09.TA3EIBRN = TA3REC.TA3EIBRN;
    TA0AW09.TA3EIBRM = TA3REC.TA3EIBRM;
    TA0AW09.TA3EIBPS = TA3REC.TA3EIBPS;
    TA0AW09.TA3NBMSG = TA3REC.TA3NBMSG;
    TA0AW09.TA3NBUTL = TA3REC.TA3NBUTL;
    TA0AM009.TA0AM9DA = TA0AW09.TA0AW9EI;

    TA0AW09.TA0AW9H1 = "   APPLID  SYSTEM ID   MSG";
    TA0AW09.TA0AW9H2 = " REG ID (TOR)   DB2 SUBSYS";
    TA0AW09.TA0AW9H3 = "                          ";
    TA0AM009.TA0AM9HB = TA0AW09.TA0AW9HD;
    TA0AW09.TA3APLID = TA3REC.TA3APLID;
    TA0AW09.TA3SYSID = TA3REC.TA3SYSID;
    TA0AW09.TA3MSGID = TA3REC.TA3MSGID;
    TA0AW09.TA3DB2SS = TA3REC.TA3DB2SS;
    TA0AM009.TA0AM9DB = TA0AW09.TA0AW9AS;
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA0AM009.TA3OPTN == "RPTDIST ")
    TA0AW09.TA0AW9H1 = "   USERID    USER NAME    ";
    TA0AW09.TA0AW9H2 = "                          ";
    TA0AW09.TA0AW9H3 = "                          ";
    TA0AM009.TA0AM9HA = TA0AW09.TA0AW9HD;
    TA0AW09.TA3USRID = TA3REC.TA3USRID;
    TA0AW09.XURUSRNM = TA3REC.XURUSRNM;
    TA0AM009.TA0AM9DA = TA0AW09.TA0AW9NO;

    TA0AW09.TA0AW9H1 = "   RMTPRT(XC0100)  RMTPRTI";
    TA0AW09.TA0AW9H2 = "D                         ";
    TA0AW09.TA0AW9H3 = "                          ";
    TA0AM009.TA0AM9HB = TA0AW09.TA0AW9HD;
    TA0AW09.TA3PRTR1 = TA3REC.TA3PRTR1;
    TA0AW09.TA3PRTR2 = TA3REC.TA3PRTR2;
    TA0AM009.TA0AM9DB = TA0AW09.TA0AW9RM;
  end

  if (sysVar.errorCode == "00000000" /* Call was successful*/
   && TA0AM009.TA3OPTN == "ALLFLDS ")
    TA0AW09.TA0AW9H1 = "   USERID    USER NAME    ";
    TA0AW09.TA0AW9H2 = "          RMTPRT(XC0100)  ";
    TA0AW09.TA0AW9H3 = "RMTPRTID   LANG CODE      ";
    TA0AM009.TA0AM9HA = TA0AW09.TA0AW9HD;
    TA0AW09.TA3USRID = TA3REC.TA3USRID;
    TA0AW09.ZFL-LANG-CD = TA3REC.ZFL-LANG-CD;
    TA0AW09.XURUSRNM = TA3REC.XURUSRNM;
    TA0AW09.TA3PRTR1 = TA3REC.TA3PRTR1;
    TA0AW09.TA3PRTR2 = TA3REC.TA3PRTR2;
    TA0AW09.TA0AW9RD = TA0AW09.TA0AW9RM;
    TA0AM009.TA0AM9DA = TA0AW09.TA0AW9NO;

    TA0AW09.TA0AW9H1 = "   TRANID  TERMID  POSN OF";
    TA0AW09.TA0AW9H2 = " CURSOR  CICS MSG#  CICS U";
    TA0AW09.TA0AW9H3 = "TIL#                       ";
    TA0AM009.TA0AM9HB = TA0AW09.TA0AW9HD;
    TA0AW09.TA3EIBRN = TA3REC.TA3EIBRN;
    TA0AW09.TA3EIBRM = TA3REC.TA3EIBRM;
    TA0AW09.TA3EIBPS = TA3REC.TA3EIBPS;
    TA0AW09.TA3NBMSG = TA3REC.TA3NBMSG;
    TA0AW09.TA3NBUTL = TA3REC.TA3NBUTL;
    TA0AM009.TA0AM9DB = TA0AW09.TA0AW9EI;

    TA0AW09.TA0AW9H1 = "   APPLID  SYSTEM ID   MSG";
    TA0AW09.TA0AW9H2 = " REG ID (TOR)   DB2 SUBSYS";
    TA0AW09.TA0AW9H3 = "                          ";
    TA0AM009.TA0AM9HC = TA0AW09.TA0AW9HD;
    TA0AW09.TA3APLID = TA3REC.TA3APLID;
    TA0AW09.TA3SYSID = TA3REC.TA3SYSID;
    TA0AW09.TA3MSGID = TA3REC.TA3MSGID;
    TA0AW09.TA3DB2SS = TA3REC.TA3DB2SS;
    TA0AM009.TA0AM9DC = TA0AW09.TA0AW9AS;
  end


        /* ******* end of source code ********/
end // end TA0A800

Function TA0A900()
  converse TA0AM010 ;

       /* map ta0am010 - ta0290 5-day work week sub-menu*/

  if (converseVar.eventKey is pf3) /* pf3 = exit*/
    TA0AM001.TA0AMOPT = "0";
    return; /* exit routine*/
  end

  set TA9REC empty; /* clear ta9rec*/

  TA9REC.TA9BEGDT = TA0AM010.TA9BEGDT; /* BEGINNING DATE*/
  TA9REC.TA9ENDDT = TA0AM010.TA9ENDDT; /* ending    DATE*/
  TA9REC.TA9OFSET = TA0AM010.TA9OFSET; /* days offset*/

  call "TA0290" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* 5-day work week sub-program*/

  set TA0AM010 initial; /* clear map ta0am010*/

  TA0AM010.TA9BEGDT = TA9REC.TA9BEGDT; /* BEGINNING DATE*/
  TA0AM010.TA9ENDDT = TA9REC.TA9ENDDT; /* ending    DATE*/
  TA0AM010.TA9OFSET = TA9REC.TA9OFSET; /* days offset*/

  TA0AM010.TA9RTNFL = TA9REC.TA9RTNFL; /* rtn flag*/
  if (TA9REC.TA9RTNFL == 0)
    TA0AM010.TA0AMAEM = "GOOD RETURN, NO ERRORS                  ";
  end

  if (TA9REC.TA9RTNFL == 9)
    TA0AM010.TA0AMAEM = "INVALID EIBCALEN PASSED                 ";
  end

  if (TA9REC.TA9RTNFL == 8)
    TA0AM010.TA0AMAEM = "DATE OR OFFSET NOT NUMERIC, BGN DATE = 0";
  end

  if (TA9REC.TA9RTNFL == 7)
    TA0AM010.TA0AMAEM = "INVALID OPTION(S) PASSED                ";
  end

  if (TA9REC.TA9RTNFL == 6)
    TA0AM010.TA0AMAEM = "A PASSED DATE IS NOT A VALID DATE       ";
  end

  if (TA9REC.TA9RTNFL == 5)
    TA0AM010.TA0AMAEM = "DATE OR CALC DATE OUTSIDE PGM RANGE     ";
  end

  if (TA9REC.TA9RTNFL == 4)
    TA0AM010.TA0AMAEM = "ERROR 4 NOT CURRENTLY USED BY PGM TA0190";
  end

  if (TA9REC.TA9RTNFL == 3)
    TA0AM010.TA0AMAEM = "INVALID WORK DATE                       ";
  end

  if (TA9REC.TA9RTNFL == 2)
    TA0AM010.TA0AMAEM = "DATE OR CALC DATE OUTSIDE TABLE RANGE   ";
  end

  if (TA9REC.TA9RTNFL == 1)
    TA0AM010.TA0AMAEM = "ERROR 1 NOT CURRENTLY USED BY PGM TA0190";
  end

  TA0AM010.TA9RTNDT = TA9REC.TA9RTNDT; /* rtn date*/
  TA0AM010.TA9DTDIF = TA9REC.TA9DTDIF; /* days difference*/
end // end TA0A900

// display x'40' thru x'7F'
Function TA0AS-DSPLY-X40-7F()

   /* ------------------------------------------------------------*/
   /* TA0FS-dsply-x40-7F ......... on ta0am015*/
   /* ------------------------------------------------------------*/
  TA0AW-LN-IDX = 1; /* set ln-idx to 1*/

  TA0AW-HEX-IDX1 = 3; /* index for x'40' chars*/
  TA0AW-HEX-IDX2 = 19; /* index for x'50' chars*/
  TA0AW-HEX-IDX3 = 35; /* index for x'60' chars*/
  TA0AW-HEX-IDX4 = 51; /* index for x'70' chars*/

  while (TA0AW15.TA0AW-LN-IDX != 17)
                                   /* if not end of hex values*/
    TA0AW15.TA0AW-DSPLY-LN = " ";
                                   /* clear workarea*/
    TA0AW15.TA0AW-DEC-DSPLY1 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX1]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY1 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX1]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY1 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX1]; /* char value*/

    TA0AW15.TA0AW-DEC-DSPLY2 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX2]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY2 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX2]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY2 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX2]; /* char value*/

    TA0AW15.TA0AW-DEC-DSPLY3 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX3]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY3 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX3]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY3 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX3]; /* char value*/

    TA0AW15.TA0AW-DEC-DSPLY4 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX4]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY4 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX4]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY4 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX4]; /* char value*/

    TA0AM015.TA0AM-DSPLY-LN[TA0AW-LN-IDX] = TA0AW15.TA0AW-DSPLY-LN; /* move info to map*/

    TA0AW15.TA0AW-HEX-IDX1 = TA0AW15.TA0AW-HEX-IDX1 + 1;
    TA0AW15.TA0AW-HEX-IDX2 = TA0AW15.TA0AW-HEX-IDX2 + 1;
    TA0AW15.TA0AW-HEX-IDX3 = TA0AW15.TA0AW-HEX-IDX3 + 1;
    TA0AW15.TA0AW-HEX-IDX4 = TA0AW15.TA0AW-HEX-IDX4 + 1;

    TA0AW15.TA0AW-LN-IDX = TA0AW15.TA0AW-LN-IDX + 1;
                                   /* increment index*/
  end


end // end TA0AS-DSPLY-X40-7F

// display x'40' thru x'7F'
Function TA0AS-DSPLY-X80-BF()

   /* ------------------------------------------------------------*/
   /* TA0FS-dsply-x80-bF ......... on ta0am015*/
   /* ------------------------------------------------------------*/
  TA0AW-LN-IDX = 1; /* set ln-idx to 1*/

  TA0AW-HEX-IDX1 = 67; /* index for x'40' chars*/
  TA0AW-HEX-IDX2 = 83; /* index for x'50' chars*/
  TA0AW-HEX-IDX3 = 99; /* index for x'60' chars*/
  TA0AW-HEX-IDX4 = 115; /* index for x'70' chars*/

  while (TA0AW15.TA0AW-LN-IDX != 17)
                                   /* if not end of hex values*/
    TA0AW15.TA0AW-DSPLY-LN = " ";
                                   /* clear workarea*/
    TA0AW15.TA0AW-DEC-DSPLY1 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX1]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY1 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX1]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY1 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX1]; /* char value*/

    TA0AW15.TA0AW-DEC-DSPLY2 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX2]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY2 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX2]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY2 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX2]; /* char value*/

    TA0AW15.TA0AW-DEC-DSPLY3 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX3]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY3 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX3]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY3 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX3]; /* char value*/

    TA0AW15.TA0AW-DEC-DSPLY4 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX4]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY4 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX4]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY4 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX4]; /* char value*/

    TA0AM015.TA0AM-DSPLY-LN[TA0AW-LN-IDX] = TA0AW15.TA0AW-DSPLY-LN; /* move info to map*/

    TA0AW15.TA0AW-HEX-IDX1 = TA0AW15.TA0AW-HEX-IDX1 + 1;
    TA0AW15.TA0AW-HEX-IDX2 = TA0AW15.TA0AW-HEX-IDX2 + 1;
    TA0AW15.TA0AW-HEX-IDX3 = TA0AW15.TA0AW-HEX-IDX3 + 1;
    TA0AW15.TA0AW-HEX-IDX4 = TA0AW15.TA0AW-HEX-IDX4 + 1;

    TA0AW15.TA0AW-LN-IDX = TA0AW15.TA0AW-LN-IDX + 1;
                                   /* increment index*/
  end


end // end TA0AS-DSPLY-X80-BF

// display x'40' thru x'7F'
Function TA0AS-DSPLY-XC0-FE()

   /* ------------------------------------------------------------*/
   /* TA0FS-dsply-x40-7F ......... on ta0am015*/
   /* ------------------------------------------------------------*/
  TA0AW-LN-IDX = 1; /* set ln-idx to 1*/

  TA0AW-HEX-IDX1 = 131; /* index for x'40' chars*/
  TA0AW-HEX-IDX2 = 147; /* index for x'50' chars*/
  TA0AW-HEX-IDX3 = 163; /* index for x'60' chars*/
  TA0AW-HEX-IDX4 = 179; /* index for x'70' chars*/

  while (TA0AW15.TA0AW-LN-IDX != 17)
                                   /* if not end of hex values*/
    TA0AW15.TA0AW-DSPLY-LN = " ";
                                   /* clear work area*/
    TA0AW15.TA0AW-DEC-DSPLY1 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX1]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY1 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX1]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY1 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX1]; /* char value*/

    TA0AW15.TA0AW-DEC-DSPLY2 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX2]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY2 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX2]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY2 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX2]; /* char value*/

    TA0AW15.TA0AW-DEC-DSPLY3 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX3]; /* decimal value*/
    TA0AW15.TA0AW-HEX-DSPLY3 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX3]; /* hex value*/
    TA0AW15.TA0AW-CHAR-DSPLY3 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX3]; /* char value*/

    if (TA0AW15.TA0AW-LN-IDX < 16)
      TA0AW15.TA0AW-DEC-DSPLY4 = TA0AT.TA0AT-DEC-VALUE[TA0AW-HEX-IDX4]; /* decimal value*/
      TA0AW15.TA0AW-HEX-DSPLY4 = TA0AT.TA0AT-HEX-VALUE[TA0AW-HEX-IDX4]; /* hex value*/
      TA0AW15.TA0AW-CHAR-DSPLY4 = TA0AT.TA0AT-CD-PG-37-CHAR[TA0AW-HEX-IDX4]; /* char value*/
    end

    TA0AM015.TA0AM-DSPLY-LN[TA0AW-LN-IDX] = TA0AW15.TA0AW-DSPLY-LN; /* move info to map*/

    TA0AW15.TA0AW-HEX-IDX1 = TA0AW15.TA0AW-HEX-IDX1 + 1;
    TA0AW15.TA0AW-HEX-IDX2 = TA0AW15.TA0AW-HEX-IDX2 + 1;
    TA0AW15.TA0AW-HEX-IDX3 = TA0AW15.TA0AW-HEX-IDX3 + 1;

    if (TA0AW15.TA0AW-LN-IDX < 16)
      TA0AW15.TA0AW-HEX-IDX4 = TA0AW15.TA0AW-HEX-IDX4 + 1;
    end

    TA0AW15.TA0AW-LN-IDX = TA0AW15.TA0AW-LN-IDX + 1;
                                   /* increment index*/
  end


end // end TA0AS-DSPLY-XC0-FE

Record TA0AW01 type basicRecord
  5 TA0AWVXX TA0AWVXX ; 
    10 TA0AWVFN TA0AWVFN ; 
    10 TA0AWVIO TA0AWVIO ; 
    10 TA0AWVSC TA0AWVSC ; 
    10 TA0AWVKY TA0AWVKY ; 
end // end TA0AW01

//*** RECORD=TA0AW05 ****
// work record for ta0am009 detail line display
//    3-14-91   vcowan  orig definition
// ***********************
Record TA0AW05 type basicRecord
  10 TA0AW-GREG-DATE TA0AW-GREG-DATE ; 
  10 TA0AW-DAYS-TO-ADD TA0AW-DAYS-TO-ADD ; 
end // end TA0AW05

//*** RECORD=TA0AW09 ****
// work record for ta0am009 detail line display
//    3-14-91   vcowan  orig definition
// ***********************
Record TA0AW09 type basicRecord
  10 TA0AW9HD TA0AW9HD ; 
    20 TA0AW9H1 TA0AW9H1 ; 
    20 TA0AW9H2 TA0AW9H2 ; 
    20 TA0AW9H3 TA0AW9H3 ; 
  10 TA0AW9NO TA0AW9NO ; 
    20 TA3USRID TA3USRID ; 
    20 * char(2) ; 
    20 XURUSRNM XURUSRNM ; 
    20 TA0AW9RD TA0AW9RD ; 
    20 * char(3) ; 
    20 ZFL-LANG-CD ZFL-LANG-CD ; 
    20 * char(13) ; 
  10 TA0AW9EI TA0AW9EI ; 
    20 * char(3) ; 
    20 TA3EIBRN TA3EIBRN ; 
    20 * char(4) ; 
    20 TA3EIBRM TA3EIBRM ; 
    20 * char(8) ; 
    20 TA3EIBPS TA3EIBPS ; 
    20 * char(10) ; 
    20 TA3NBMSG TA3NBMSG ; 
    20 * char(9) ; 
    20 TA3NBUTL TA3NBUTL ; 
    20 * char(28) ; 
  10 TA0AW9AS TA0AW9AS ; 
    20 * char(3) ; 
    20 TA3APLID TA3APLID ; 
    20 * char(2) ; 
    20 TA3SYSID TA3SYSID ; 
    20 * char(4) ; 
    20 TA3MSGID TA3MSGID ; 
    20 * char(13) ; 
    20 TA3DB2SS TA3DB2SS ; 
    20 * char(28) ; 
  10 TA0AW9RM TA0AW9RM ; 
    20 * char(5) ; 
    20 TA3PRTR1 TA3PRTR1 ; 
    20 * char(8) ; 
    20 TA3PRTR2 TA3PRTR2 ; 
    20 * char(52) ; 
end // end TA0AW09

//*** RECORD=TA0AW13 ****
// work record for ta0am009 detail line display
//    3-14-91   vcowan  orig definition
// ***********************
Record TA0AW13 type basicRecord
  10 TA8-GROUP TA8-GROUP ; 
end // end TA0AW13

//*** RECORD=TA0AW15 ****
// work record for ta0am009 detail line display
//    3-14-91   vcowan  orig definition
// ***********************
Record TA0AW15 type basicRecord
  5 TA0AW-LN-IDX TA0AW-LN-IDX ; 
  5 TA0AW-HEX-IDX1 TA0AW-HEX-IDX1 ; 
  5 TA0AW-HEX-IDX2 TA0AW-HEX-IDX2 ; 
  5 TA0AW-HEX-IDX3 TA0AW-HEX-IDX3 ; 
  5 TA0AW-HEX-IDX4 TA0AW-HEX-IDX4 ; 
  5 TA0AW-DSPLY-LN TA0AW-DSPLY-LN ; 
    10 * char(2) ; // filler
    10 TA0AW-DEC-DSPLY1 TA0AW-DEC-DSPLY1 ; 
    10 * char(3) ; // filler
    10 TA0AW-HEX-DSPLY1 TA0AW-HEX-DSPLY1 ; 
    10 * char(4) ; // filler
    10 TA0AW-CHAR-DSPLY1 TA0AW-CHAR-DSPLY1 ; 
    10 * char(6) ; // filler
    10 TA0AW-DEC-DSPLY2 TA0AW-DEC-DSPLY2 ; 
    10 * char(3) ; // filler
    10 TA0AW-HEX-DSPLY2 TA0AW-HEX-DSPLY2 ; 
    10 * char(4) ; // filler
    10 TA0AW-CHAR-DSPLY2 TA0AW-CHAR-DSPLY2 ; 
    10 * char(6) ; // filler
    10 TA0AW-DEC-DSPLY3 TA0AW-DEC-DSPLY3 ; 
    10 * char(3) ; // filler
    10 TA0AW-HEX-DSPLY3 TA0AW-HEX-DSPLY3 ; 
    10 * char(4) ; // filler
    10 TA0AW-CHAR-DSPLY3 TA0AW-CHAR-DSPLY3 ; 
    10 * char(6) ; // filler
    10 TA0AW-DEC-DSPLY4 TA0AW-DEC-DSPLY4 ; 
    10 * char(3) ; // filler
    10 TA0AW-HEX-DSPLY4 TA0AW-HEX-DSPLY4 ; 
    10 * char(3) ; // filler
    10 TA0AW-CHAR-DSPLY4 TA0AW-CHAR-DSPLY4 ; 
    10 * char(2) ; // filler
end // end TA0AW15

// display char value
DataItem TA0AW-CHAR-DSPLY1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display char value
DataItem TA0AW-CHAR-DSPLY2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display char value
DataItem TA0AW-CHAR-DSPLY3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display char value
DataItem TA0AW-CHAR-DSPLY4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta0aw05 days-to-add     9(03)
DataItem TA0AW-DAYS-TO-ADD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display decimal value
DataItem TA0AW-DEC-DSPLY1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display decimal value
DataItem TA0AW-DEC-DSPLY2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display decimal value
DataItem TA0AW-DEC-DSPLY3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display decimal value
DataItem TA0AW-DEC-DSPLY4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display line on ta0am015
DataItem TA0AW-DSPLY-LN char(73)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta0aw05 ta0aw-greg-date x(10)
DataItem TA0AW-GREG-DATE char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display hex value
DataItem TA0AW-HEX-DSPLY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display hex value
DataItem TA0AW-HEX-DSPLY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display hex value
DataItem TA0AW-HEX-DSPLY3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display hex value
DataItem TA0AW-HEX-DSPLY4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta0aw-hex-idx1
DataItem TA0AW-HEX-IDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta0aw-hex-idx2
DataItem TA0AW-HEX-IDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta0aw-hex-idx3
DataItem TA0AW-HEX-IDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta0aw-hex-idx4
DataItem TA0AW-HEX-IDX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta0aw-ln-idx
DataItem TA0AW-LN-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ASSIGN  display line
DataItem TA0AW9AS char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EIBINFO display line
DataItem TA0AW9EI char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen hdr line part 1
DataItem TA0AW9H1 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen hdr line part 2
DataItem TA0AW9H2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen hdr line part 3
DataItem TA0AW9H3 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta0aw09 hdr line workarea
DataItem TA0AW9HD char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NAMEONLY  display line
DataItem TA0AW9NO char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rmtprt for RPTDIST info
DataItem TA0AW9RD char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RMTPRT  display line
DataItem TA0AW9RM char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta0020 vsam filename
DataItem TA0AWVFN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta0020 vsam I-O verb
DataItem TA0AWVIO char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta0020 vsam rec key info
DataItem TA0AWVKY char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta0020 vsam status code
DataItem TA0AWVSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta0020 vsam params
DataItem TA0AWVXX char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

