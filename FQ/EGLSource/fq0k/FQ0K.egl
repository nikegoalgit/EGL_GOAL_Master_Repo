package fq0k;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fq.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=FQ0K ****
// This application allows a user to inquire and maintain rows
// in the trailer id DB2 table, DFQUAL.VDFTRL01.
// 
// There is only one screen displayed, showing one table row
// that user may inq/update trailer id row.
// After changing the data, ENTER must be pressed
// update the data base.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/15/93  SDIFLE  New application.
//          03/24/97  rmcafe  modified to allow whse 04
//                            processing as well as whse 07.
//          03/20/98  HBASKA  Included the logic in FQ0K151 for
//                            validating the userid against
//                            warehouse code
// *********************
Program FQ0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FQ00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FQ0KW00 FQ0KW00; // record
  FQ0KW01 FQ0KW01; // record
  FQWREC FQWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VDFTRL01 VDFTRL01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use FQ0KM.FQ0KM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFQ001: XPFQ001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FQ0KM001 initial; /* M001 input/output*/
    set FQ0KW00 empty; /* Working storage*/
    set FQ0KW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FQ0KW00.FQ0KWMAP = "1"; /* Map to be displayed switch*/
    FQ0KW00.FQ0KWSWF = "Y"; /* Format the map switch*/
    FQ0KW00.FQ0KWSWR = "Y"; /* Request for data switch*/
    FQ0KW00.FQ0KWASW = "N"; /* Add function request switch (PF18)*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ0K001; /* Converse the main process*/


    FQ0K001: FQ0K001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ0K001; /* Converse the main process*/


  end // end main
end // end FQ0K

// Main process to display a map
Function FQ0K001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Display the first map.*/
   /* 2) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FQ0KW00.FQ0KWMAP == "1") /* Map 1 was requested*/
    FQ0K100(); /* Display map 1*/
  else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
    FQWREC.XXXMODID = "001"; /* Module identification*/
    FQWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
    TA1REC.TA1MAPNO = FQ0KW00.FQ0KWMAP; /* Map number*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

    COMMAREA.CATOAP = "FQ0M"; /* TO application*/
    XSFQS01(); /* Exit to another application*/
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  end


end // end FQ0K001

// Main process to display map1
Function FQ0K100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FQ0K110(); /* Obtain the data to display*/

  FQ0K120(); /* Format and display the map*/

  FQ0K130(); /* Check attention identifier*/

  FQ0K140(); /* Reset fields to normal intensity*/

  FQ0K150(); /* Verify the entered data*/

  FQ0K160(); /* Process valid input request*/


end // end FQ0K100

// Obtain the data to display
Function FQ0K110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0KW00.FQ0KWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage.*/
   /* ------------------------------------------------------------*/
  set FQ0KW01 empty; /* M001 display storage*/
   /* ------------------------------------------------------------*/
   /* display the trailer id for the whse.*/
   /* ------------------------------------------------------------*/
  FQ0KS01(); /* select the open tailer id*/

   /* ------------------------------------------------------------*/
   /* Save MAP1 display storage.*/
   /* ------------------------------------------------------------*/

  FQWREC.XGPCD = VDFTRL01.XGPCD;
  FQ0KW01.XGPCD = VDFTRL01.XGPCD;
  FQ0KW01.XWHCD = VDFTRL01.XWHCD;
  FQ0KW01.FQ0JWTID = VDFTRL01.FQ0JWTID;
  FQ0KW01.FQ0KWTST = VDFTRL01.FQ0KWTST;
  FQ0KW01.ZZZCHGDT = VDFTRL01.ZZZCHGDT;
  FQ0KW01.ZZZCHGTM = VDFTRL01.ZZZCHGTM;
  FQ0KW01.ZZZCHGCT = VDFTRL01.ZZZCHGCT;

  FQ0KM001.XWHCD = VDFTRL01.XWHCD;
  FQ0KM001.FQ0KMTID = VDFTRL01.FQ0JWTID;
  FQ0KM001.FQ0KMTRST = VDFTRL01.FQ0KWTST;

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FQ0KW00.FQ0KWSWR = "N"; /* Request for data switch*/
   /* E 'N' TO FQ0KW00.FQ0KWASW;*/
   /* E 'Y' TO FQ0KW00.FQ0KWSWF;*/


end // end FQ0K110

// Format and converse the map
Function FQ0K120()
   /* ------------------------------------------------------------*/
   /* If error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* If error found*/

    FQWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  if (FQ0KW00.FQ0KWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FQ0KW00.FQ0KWSWF == "Y") /* Map must be formatted*/
      FQ0K121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQ0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FQ0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FQ0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FQWREC.XXXMSGNO != 0) /* Message to display*/

      if (FQWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FQWREC.XXXMSGNO);
      end /* Message number*/
    else
      FQ0KM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FQ0KM001.XXXMODID = FQWREC.XXXMODID; /* Module identification*/

    set FQ0KM001 alarm; /* Indicate sound alarm*/

  end

  converse FQ0KM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQWREC.XXXMODID = " "; /* Module identification*/
  FQWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FQ0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FQ0KM001.CAITEM; /* Application data*/


end // end FQ0K120

// Format the display data
Function FQ0K121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FQ0KM001 initial; /* m001 input/output area*/

  FQ0KW00.FQ0KWSWF = "N"; /* Format the map switch*/

   /* MOVE FQ0KW01.XWHCD TO FQ0KM001.XWHCD;       /* whse code*/
   /* MOVE FQ0KW01.FQ0JWTID TO FQ0KM001.FQ0KMTID;    /* tailer id*/
   /* MOVE FQ0KW01.FQ0KWTST TO FQ0KM001.FQ0KMTRST;   /* trailer status*/

  set FQ0KM001.XWHCD cursor, normal; /* Place cursor on whse code*/
   /* SET FQ0KM001.FQ0KMTRST CURSOR,NORMAL;  /* Place cursor on status*/

end // end FQ0K121

// Check attention identifier
Function FQ0K130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FQ0KW00.FQ0KWSWR == "Y") /* Request for data switch*/
      set FQ0KW01 empty;
    end

    FQ0KW00.FQ0KWSWR = "N"; /* Data request switch*/
    FQ0KW00.FQ0KWSWF = "Y"; /* Map formatted switch*/
    FQWREC.FQWMODSW = "N"; /* Modified data exit switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FQ0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFQS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* If transfer failed, return to first map.*/
      /* ------------------------------------------------------------*/
      set FQ0KM001.CATOAP cursor, bold; /* Highlight*/

    else
      converseLib.validationFailed(18); /* Indicate PF key not valid*/
      FQWREC.XXXMODID = "130"; /* Process name*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf5 /* PF5 was pressed*/
   || converseVar.eventKey is pf6) /* PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "MN0MM001"; /* Master menu*/
    end

    if (converseVar.eventKey is pf3 /* PF3 was pressed*/
     || converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* Ftwr quality menu*/
    end


    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "FQ0I"; /* def return entry application*/
    end

    XSFQS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, return to first map.*/
    /* ------------------------------------------------------------*/
    set FQ0KM001.CATOAP cursor, bold; /* Highlight*/
    FQ0KW00.FQ0KWMAP = "1"; /* Indicate map 1*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6) 

    FQWREC.XXXMODID = "130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FQ0K130

// Reset highlighted fields
Function FQ0K140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/
  set FQ0KM001.FQ0KMTRST initialAttributes; /* trailer status*/
  set FQ0KM001.XWHCD initialAttributes; /* whse code*/

  set FQ0KM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FQ0KM001.CAITEM initialAttributes; /* Commarea application data*/


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

   /* SET FQ0KM001 PAGE;                /* Clear screen before display*/

   /* MOVE '140' TO FQWREC.XXXMODID;    /* Module identification*/
   /* MOVE 25 TO EZEMNO;                /* Indicate press ENTER*/

   /* EZEFLO;                   /* Exit to display map*/


end // end FQ0K140

// Verify data that was entered
Function FQ0K150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CAITEM > " ") /* Application data entered*/

    FQWREC.XXXMODID = "150"; /* Module identification*/
    set FQ0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If the trailer status was changed, verify.*/
   /* ------------------------------------------------------------*/
  if (FQ0KM001.XWHCD != FQ0KW01.XWHCD)

  else
    if (FQ0KM001.FQ0KMTRST != FQ0KW01.FQ0KWTST) /**/

      FQ0K151(); /* Verify status code*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0K150

// Verify status code
Function FQ0K151()
   /* ------------------------------------------------------------*/
   /* Status must be  'C'(open/close).*/
   /* ------------------------------------------------------------*/

  if (FQ0KM001.FQ0KMTRST != "C")
    /* ------------------------------------------------------------*/
     /* If not valid, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    FQWREC.XXXMODID = "151"; /* Module identification*/
    set FQ0KM001.FQ0KMTRST cursor, bold; /* Highlight*/
    converseLib.validationFailed(75); /* Indiicate invalid or missing*/
  else
    if (COMMAREA.XWHCD != FQ0KM001.XWHCD) /* Validate user against WH*/
      FQWREC.XXXMODID = "151"; /* module id*/
      set FQ0KM001.XWHCD cursor, bold; /* Highlight Warehouse*/
      converseLib.validationFailed(89); /* user not authorized*/
    end
  end


end // end FQ0K151

// Process valid input request
Function FQ0K160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must not be formatted to display.*/
   /* ------------------------------------------------------------*/

  if (FQ0KM001.XWHCD != FQ0KW01.XWHCD)
    FQ0KW00.FQ0KWSWR = "Y"; /* Format the map switch*/
    set FQ0KM001.FQ0KMTRST cursor, bold; /* Place the cursor at status*/
  end

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/
  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Only update of the trailer status allowed.*/
   /* ------------------------------------------------------------*/
  if (FQ0KM001.FQ0KMTRST != FQ0KW01.FQ0KWTST /* if trailer status changed*/
   && FQ0KM001.FQ0KMTRST == "C"              /* from open to close*/
   && FQ0KM001.XWHCD == FQ0KW01.XWHCD)       /* Warehouse code unchanged*/

    /* ------------------------------------------------------------*/
     /* Update the row.*/
    /* ------------------------------------------------------------*/
    FQ0K161(); /* Update VDFTRL01*/

    /* ------------------------------------------------------------*/
     /* Update temporary storage.*/
    /* ------------------------------------------------------------*/
    /* E FQ0KM001.XWHCD TO FQ0KW01.XWHCD;*/
    /* E FQREC.XGPCD TO FQ0KW01.XGPCD;*/
    /* E FQ0KM001.FQ0KMTID TO FQ0KW01.TRLRID;*/
    FQ0KW01.FQ0KWTST = FQ0KM001.FQ0KMTRST;
    FQ0KW01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    FQ0KW01.ZZZCHGTM = XX0XW01.XX0XWTIM;

    /* ------------------------------------------------------------*/
     /* Increment the next trailer id by 1 and*/
     /* Create the next trailer row with a default status of 'O'.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0)
      FQ0K162(); /* insert VDFTRL01 row*/
    end

    /* ------------------------------------------------------------*/
     /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/
    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit all changes*/

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/
    FQWREC.XXXMODID = "160"; /* Module identification*/
    FQWREC.XXXMSGNO = 21; /* Indicate update completed*/

  end


end // end FQ0K160

// Update VDFTRK01 row
Function FQ0K161()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VDFTRL01 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format the modified data from the map in the table row,*/
   /* and the rest of data from map storage.*/
   /* ------------------------------------------------------------*/

  VDFTRL01.XGPCD = FQ0KW01.XGPCD;
  VDFTRL01.XWHCD = FQ0KW01.XWHCD; /* whse code*/
  VDFTRL01.FQ0JWTID = FQ0KM001.FQ0KMTID; /* trailer id*/
  VDFTRL01.FQ0KWTST = FQ0KM001.FQ0KMTRST;

  VDFTRL01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VDFTRL01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
   /* E FQ0KW01.ZZZCHGDT TO VDFTRL01.ZZZCHGDT;        /* Change date*/
   /* E FQ0KW01.ZZZCHGTM TO VDFTRL01.ZZZCHGTM;        /* Change time*/
  VDFTRL01.ZZZCHGCT = FQ0KW01.ZZZCHGCT; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO6690" ("U ", SQLCA, VDFTRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row not found, indicate the data was updated by another.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        FQ0KW00.FQ0KWMAP = "1"; /* Map number*/
        FQ0KW00.FQ0KWSWR = "Y"; /* Request data switch*/
        FQ0KW00.FQ0KWSWF = "Y"; /* Format map switch*/

        FQWREC.XXXMODID = "161"; /* Module identification*/
        FQWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFTRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VDFTRL01.VDFTRL01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0K161

// Add VDFTRL01 row
Function FQ0K162()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VDFTRL01 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/
   /* create the next trailer row*/
   /* ------------------------------------------------------------*/

  VDFTRL01.XGPCD = FQ0KW01.XGPCD; /* gpc  code*/
  VDFTRL01.XWHCD = FQ0KW01.XWHCD; /* whse code*/

  FQ0KW01.FQ0JWTID = FQ0KW01.FQ0JWTID + 1; /* increment to next num*/
  if (FQ0KW01.FQ0JWTID > 9998) /* re init trailer id number*/
    FQ0KW01.FQ0JWTID = 1;
  end

  VDFTRL01.FQ0JWTID = FQ0KW01.FQ0JWTID; /* trailer id*/

  VDFTRL01.FQ0KWTST = "O"; /* trailer status*/
  FQ0KW01.FQ0KWTST = "O";
   /* E XX0XW01.XX0XWDAT TO FQ0KW01.ZZZCHGDT;  /* Change date*/
   /* E XX0XW01.XX0XWTIM TO FQ0KW01.ZZZCHGTM;  /* Change time*/
  VDFTRL01.ZZZCHGDT = FQ0KW01.ZZZCHGDT; /* Change date*/
  VDFTRL01.ZZZCHGTM = FQ0KW01.ZZZCHGTM; /* Change time*/
  VDFTRL01.ZZZCHGCT = 0; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Insert VDFTRL01 row*/
   /* ------------------------------------------------------------*/
  try
    call "IO6690" ("A ", SQLCA, VDFTRL01) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FQ0KM001.FQ0KMTID = FQ0KW01.FQ0JWTID;
      FQ0KM001.FQ0KMTRST = FQ0KW01.FQ0KWTST;
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFTRL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VDFTRL01.VDFTRL01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0K162

// Select VTRALR01
Function FQ0KS01()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VDFTRL01 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  VDFTRL01.XGPCD = "02"; /* GPC*/
  VDFTRL01.XWHCD = FQ0KM001.XWHCD; /* whse code*/
  VDFTRL01.FQ0KWTST = "O"; /* trailer status*/

   /* ------------------------------------------------------------*/
   /* Select VTRALR01*/
   /* ------------------------------------------------------------*/
  try
    call "IO6690" ("S ", SQLCA, VDFTRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL"; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFTRL01"; /* Table view name*/
  TA1REC.TA1PGMAP = VDFTRL01.VDFTRL01-KEY; /* Program application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0KS01

//*** RECORD=FQ0KW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FQ0KW00 type basicRecord
  10 FQ0KWIXM FQ0KWIXM ; 
  10 FQ0KWIX2 FQ0KWIX2 ; 
  10 FQ0KWPNT FQ0KWPNT ; 
  10 FQ0KWCNT FQ0KWCNT ; 
  10 FQ0KWDT num(9) ; // work date field
    15 FQ0KWDT3 num(3) ; // work date field(first 3 digit)
    15 FQ0KWDT6 num(6) ; // work date field(next  6 digit)
  10 FQ0KWEOC FQ0KWEOC ; 
  10 * char(1) ; 
  10 FQ0KWSWF FQ0KWSWF ; 
  10 FQ0KWSWR FQ0KWSWR ; 
  10 FQ0KWSWU FQ0KWSWU ; 
  10 FQ0KWASW FQ0KWASW ; 
  10 FQ0KWDSW FQ0KWDSW ; 
  10 FQ0KWMAP FQ0KWMAP ; 
  10 * char(1) ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end FQ0KW00

//*** RECORD=FQ0KW01 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record FQ0KW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(17) ; 
    10 XWHCD XWHCD ; 
    10 XGPCD XGPCD ; 
    10 FQ0JWTID FQ0JWTID ; 
    10 FQ0KWTST FQ0KWTST ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FQ0KW01

// Add function request switch
DataItem FQ0KWASW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count for modified data
DataItem FQ0KWCNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data found switch
DataItem FQ0KWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FQ0KWEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ0KWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ0KWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem FQ0KWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pointer
DataItem FQ0KWPNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FQ0KWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FQ0KWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FQ0KWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

