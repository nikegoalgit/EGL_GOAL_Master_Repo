package fq05;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fq.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=FQ05 ****
// This application allows users to view each month in a range
// of dates, with quantities and a ratio of defects for the
// total booking/received quantity.
// 
// The user must enter 'FACTORY', 'DEFECT', and 'STYLE'.
// 'COLOR', 'DIMENSION', 'PO MONTH RANGE', and 'DIVISION'
// will default if left blank.  The program will obtain a
// list of all the months in the date range, the quantity of
// defects for each month, and will calculate each month's
// ratio of the total booking/received quantity.
// 
// He may exit any to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      05/20/91  RHETRI  New application.
//          12/05/91  RHETRI  Chg rcv'd amt to on-order amt
//          06/24/93  MHUYNH  Regen due to change to XSFQS05
// y2kproj  12-03-97  oricha  y2k modifications:  regen to pick
//                            up xx0xs01 changes & to pick up
//                            xsfqs05 century calc changes.
// *********************
Program FQ05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FQ00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FQ05W00 FQ05W00; // record
  FQ05W01 FQ05W01; // record
  FQ2REC FQ2REC; // record
  FQ6REC FQ6REC; // record
  FQAREC FQAREC; // record
  FQWREC FQWREC; // record
  FQZREC FQZREC; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YDCREC YDCREC; // record
  YDFREC YDFREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use XDVTBL; // table
  use YDCTBL; // table
  use YDFTBL; // table
  use FQ05M.FQ05M001,  // forms
      FQ05M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFQ001: XPFQ001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    set FQ05M001 initial; /* M001 input/output*/
    set FQ05W00 empty; /* Working storage*/
    set FQ05W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/

    FQ05W00.FQ05WSWF = "Y"; /* Format the map flag*/
    FQ05W00.FQ05WSWR = "N"; /* data not requested*/

     /* ------------------------------------------------------------*/
     /* If defect code passed, but name missing - obtain it.*/
     /* ------------------------------------------------------------*/
    if (FQWREC.YDFCD > " " /* if defect exists*/
     && FQWREC.YDFDESC == " ") /* and defect name missing*/

      YDFREC.YDFCD = FQWREC.YDFCD; /* Format key*/
      YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
      if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
        FQWREC.YDFDESC = YDFTBL.YDFDESC[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* If complete key is present, request data. (Defaults exist.)*/
     /* ------------------------------------------------------------*/
    if (FQWREC.FY1PFYCD > " " /* If origin factory exists*/
     && FQWREC.SY1STNBR > " " /* and style number exists*/
     && FQWREC.YDFCD > " ")   /* and defect exists*/

      FQ05W00.FQ05WSWR = "Y"; /* Request data*/

    end

    FQ05W00.FQ05MBDT = FQWREC.FQ1IDBDT; /* Beg date*/
    FQ05W00.FQ05MEDT = FQWREC.FQ1IDXDT; /* End date*/

     /* ------------------------------------------------------------*/
     /* Flow to check for default dates.*/
     /* ------------------------------------------------------------*/
    goto FQ05000; /* Check for default dates*/


    FQ05000: FQ05000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ05001; /* Converse the main process*/


    FQ05001: FQ05001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ05001; /* Converse the main process*/


  end // end main
end // end FQ05

// Check for default dates
Function FQ05000()
   /* ------------------------------------------------------------*/
   /* If date range is missing, call date routine for defaults.*/
   /* ------------------------------------------------------------*/
  if (FQWREC.FQ1IDBDT == 0 /* If begin date is missing*/
   || FQWREC.FQ1IDXDT == 0) /* Or end date is missing*/

    /* ------------------------------------------------------------*/
     /* Clear copybook.*/
    /* ------------------------------------------------------------*/
    set FQZREC empty; /* clear date edit record*/

    FQZREC.FQZBEGRG = FQWREC.FQ1IDBDT; /* Beg date*/
    FQZREC.FQZENDRG = FQWREC.FQ1IDXDT; /* end date*/

    /* ------------------------------------------------------------*/
     /* Edit range.  Send YYMMMM - receive back CCYYMMMM.*/
    /* ------------------------------------------------------------*/
    XSFQS05(); /* Common date edit routine*/

    /* ------------------------------------------------------------*/
     /* Move dates into FQWREC.*/
    /* ------------------------------------------------------------*/
    FQWREC.FQ1IDBDT = FQZREC.FQZBCYMM; /* Begin date*/
    FQWREC.FQ1IDXDT = FQZREC.FQZECYMM; /* End date*/

    FQ05W00.FQ05MBDT = FQZREC.FQZBCYMM; /* Begin date*/
    FQ05W00.FQ05MEDT = FQZREC.FQZECYMM; /* End date*/

  end


end // end FQ05000

// Main process to display a map
Function FQ05001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FQ05100(); /* Obtain the data to display*/

  FQ05200(); /* Format and display the map*/

  FQ05300(); /* Check attention identifier*/

  FQ05400(); /* Reset fields to normal intensity*/

  FQ05500(); /* Verify the entered data*/

  FQ05600(); /* Process valid input request*/


end // end FQ05001

// Obtain the data to display
Function FQ05100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ05W00.FQ05WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* --------------------------------------------------------*/
   /* Clear working storage fields.*/
   /* --------------------------------------------------------*/
  set FQ05W01 empty; /* clear field*/

   /* --------------------------------------------------------*/
   /* Obtain dates for display.*/
   /* --------------------------------------------------------*/
  FQ05110(); /* Obtain dates*/

   /* ----------------------------------------------------------*/
   /* Loop through dates to obtain quantities for each.*/
   /* ----------------------------------------------------------*/
  FQ05W00.FQ05WDSW = "N"; /* Data found switch*/
  FQ05W00.FQ05WIXM = 1; /* Set counter*/
  while (FQ05W00.FQ05WIXM <= FQ05W00.FQ05WNBR) /* If counter LE nbr mos*/

    FQ05120(); /* Select DFDTL*/

    if (FQ2REC.FQ2DEFQT > 0) /* If amount found*/

      /* ----------------------------------------------------------*/
       /* Save data for display.*/
      /* ----------------------------------------------------------*/
      FQ05W01.FQ2DEFQT[FQ05WIXM] = FQ2REC.FQ2DEFQT; /* Defect qty*/

      /* ----------------------------------------------------------*/
       /* Add quantity to total.*/
      /* ----------------------------------------------------------*/
      FQ05W01.FQ05WQTT = FQ05W01.FQ05WQTT + FQ2REC.FQ2DEFQT;

    end
    /* ----------------------------------------------------------*/
     /* Add to counter.*/
    /* ----------------------------------------------------------*/
    FQ05W00.FQ05WIXM = FQ05W00.FQ05WIXM + 1; /* Add to counter*/

  end

   /* ---------------------------------------------------------*/
   /* Select summed POSUM for defect grand total.*/
   /* ---------------------------------------------------------*/
  FQ05130(); /* Select summed POSUM*/

   /* ---------------------------------------------------------*/
   /* Calculate the percents.*/
   /* ---------------------------------------------------------*/
  FQ05140(); /* Calculate percents*/

   /* ------------------------------------------------------------*/
   /* If no data to display, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (FQ05W00.FQ05WDSW == "N") /* No data formatted*/

    FQWREC.XXXMODID = "100"; /* Module identification*/
    converseLib.validationFailed(17); /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FQ05W00.FQ05WSWR = "N"; /* Request for data switch*/


end // end FQ05100

// Check for defect code keys
Function FQ05110()
   /* ------------------------------------------------------------*/
   /* Initialize record for calls to date routine.*/
   /* ------------------------------------------------------------*/
  set FQZREC empty; /* clear date edit record*/

  FQZREC.FQZBEGRG = FQWREC.FQ1IDBDT; /* Beg date*/
  FQZREC.FQZENDRG = FQWREC.FQ1IDXDT; /* end date*/
  FQZREC.FQZCHK24 = "Y"; /* Switch for range*/

   /* ------------------------------------------------------------*/
   /* Edit range.  Send YYMMMM - receive back CCYYMMMM.*/
   /* ------------------------------------------------------------*/
  XSFQS05(); /* Common date edit routine*/

   /* ------------------------------------------------------------*/
   /* Load dates into array.*/
   /* ------------------------------------------------------------*/

  FQ05W00.FQ05WIXM = 1; /* Initialize line index*/
  FQ05W00.FQ05WNBR = FQZREC.FQZNUMMO; /* Number of months*/

  while (FQ05W00.FQ05WIXM <= FQ05W00.FQ05WNBR /* while count LE # mos*/
   && FQ05W00.FQ05WIXM <= 24) /* and LE max months*/

    FQ05W01.FQ05WHDR[FQ05WIXM] = FQZREC.FQZIMMMM[FQ05WIXM];
                                   /* Heading*/
    FQ05W00.FQZINDMO[FQ05WIXM] = FQZREC.FQZINDMO[FQ05WIXM]; /* Calls*/

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    FQ05W00.FQ05WIXM = FQ05W00.FQ05WIXM + 1; /* Increment line index*/

  end


end // end FQ05110

// Select DFDTL
Function FQ05120()
   /* ------------------------------------------------------------*/
   /* Clear copybooks.*/
   /* ------------------------------------------------------------*/
  set FQAREC empty; /* Clear copybook*/
  set FQ2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format fqAREC.*/
   /* ------------------------------------------------------------*/
  FQAREC.FQAFUNCD = "SZ"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  FQ2REC.SY1STNBR = FQWREC.SY1STNBR; /* style*/
  FQ2REC.SY2CLRID = FQWREC.SY2CLRID; /* color*/
  FQ2REC.XDMCD = FQWREC.XDMCD; /* dim*/
  FQ2REC.FY1PFYCD = FQWREC.FY1PFYCD; /* fcty origin*/
  FQ2REC.XDVCD = FQWREC.XDVCD; /* division code*/
  FQ2REC.YDFCD = FQWREC.YDFCD; /* defect code*/

  FQ2REC.PC3POIDT = FQ05W00.FQZINDMO[FQ05WIXM]; /* Month*/

   /* ------------------------------------------------------------*/
   /* Select DFDTL.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5840" (FQAREC, SQLCA, FQ2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/

      if (FQ2REC.FQ2DEFQT > 0) /* If an amount found*/
        FQ05W00.FQ05WDSW = "Y"; /* Data found switch*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set FQ05M001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFDTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FQ2REC.FQ2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ05120

// Select Summed POSUM
Function FQ05130()
   /* ------------------------------------------------------------*/
   /* Clear copybooks.*/
   /* ------------------------------------------------------------*/
  set FQAREC empty; /* Clear copybook*/
  set FQ6REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format fqAREC.*/
   /* ------------------------------------------------------------*/
  FQAREC.FQAFUNCD = "SS"; /* Function code*/
  FQAREC.FQ1IDBDT = FQWREC.FQ1IDBDT; /* beg date*/
  FQAREC.FQ1IDXDT = FQWREC.FQ1IDXDT; /* ebd date*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  FQ6REC.SY1STNBR = FQWREC.SY1STNBR; /* style*/
  FQ6REC.SY2CLRID = FQWREC.SY2CLRID; /* color*/
  FQ6REC.XDMCD = FQWREC.XDMCD; /* dim*/
  FQ6REC.FY1FCTYC = FQWREC.FY1PFYCD; /* fcty*/
  FQ6REC.XDVCD = FQWREC.XDVCD; /* division code*/

   /* ------------------------------------------------------------*/
   /* Select summed POSUM.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5930" (FQAREC, SQLCA, FQ6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* If normal return code*/

    /* ------------------------------------------------------------*/
     /* Save the data for display.*/
    /* ------------------------------------------------------------*/
    FQ05W01.FQ05WTOT = FQ6REC.FQ6ORDQT; /* save amount*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set FQ05M001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUMMED";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSUM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FQ6REC.FQ6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ05130

// Calculate percents
Function FQ05140()
   /* ------------------------------------------------------------*/
   /* If the total is greater than zero, calculate ratios.*/
   /* ------------------------------------------------------------*/
  if (FQ05W01.FQ05WTOT > 0 /* If total greater than zero*/
   && FQ05W00.FQ05WDSW == "Y") /* and data was found*/

    /* ------------------------------------------------------------*/
     /* Calculate the ratio each line is of the total production.*/
    /* ------------------------------------------------------------*/
    FQ05W00.FQ05WIXM = 1; /* Initialize line index*/

    while (FQ05W00.FQ05WIXM <= 24) /* Until screen is full*/

      if (FQ05W01.FQ2DEFQT[FQ05WIXM] > 0) /* If amt GT 0*/
        /* ------------------------------------------------------------*/
         /* Divide line quantity by total production for ratio total.*/
        /* ------------------------------------------------------------*/
        FQ05W00.FQ05WFDA = mathLib.round(FQ05W01.FQ2DEFQT[FQ05WIXM] / FQ05W01.FQ05WTOT, -mathLib.decimals(FQ05W00.FQ05WFDA));

        /* ------------------------------------------------------------*/
         /* Multiply by 100 to get nnn.nn format.*/
        /* ------------------------------------------------------------*/
        FQ05W00.FQ05WFDA = FQ05W00.FQ05WFDA * 100; /* Times 100*/

        /* ------------------------------------------------------------*/
         /* Save ratio in storage.*/
        /* ------------------------------------------------------------*/
        FQ05W01.FQ05WPCT[FQ05WIXM] = FQ05W00.FQ05WFDA; /* percent*/

      end
      /* ------------------------------------------------------------*/
       /* Add to counter.*/
      /* ------------------------------------------------------------*/
      FQ05W00.FQ05WIXM = FQ05W00.FQ05WIXM + 1; /* Add to counter*/

    end

    /* ------------------------------------------------------------*/
     /* Divide tot def qty by total tot prdctn for ratio total.*/
    /* ------------------------------------------------------------*/
    FQ05W00.FQ05WFDA = mathLib.round(FQ05W01.FQ05WQTT / FQ05W01.FQ05WTOT, -mathLib.decimals(FQ05W00.FQ05WFDA));

    /* ------------------------------------------------------------*/
     /* Multiply by 100 to get nnn.nnn format.*/
    /* ------------------------------------------------------------*/
    FQ05W00.FQ05WFDA = FQ05W00.FQ05WFDA * 100; /* Times 100*/

    /* ------------------------------------------------------------*/
     /* Save total ratio.*/
    /* ------------------------------------------------------------*/
    FQ05W01.FQ05WPTT = FQ05W00.FQ05WFDA; /* Total ratio*/

  end


end // end FQ05140

// Format and converse the map
Function FQ05200()
   /* ------------------------------------------------------------*/
   /* If no error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* If error found*/

    FQWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  if (FQ05W00.FQ05WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FQ05W00.FQ05WSWF == "Y") /* Map must be formatted*/
      FQ05210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQ05M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FQ05M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FQ05M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FQWREC.XXXMSGNO != 0) /* Message to display*/

      if (FQWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FQWREC.XXXMSGNO);
      end /* Message number*/
    else
      FQ05M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FQ05M001.XXXMODID = FQWREC.XXXMODID; /* Module identification*/

    set FQ05M001 alarm; /* Indicate sound alarm*/

  end

  converse FQ05M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQWREC.XXXMODID = " "; /* Module identification*/
  FQWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* message text*/

  COMMAREA.CATOAP = FQ05M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FQ05M001.CAITEM; /* Application data*/


end // end FQ05200

// Load map fields
Function FQ05210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  set FQ05M001 initial;

  FQ05W00.FQ05WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format key data in the map.*/
   /* ------------------------------------------------------------*/
  FQ05M001.FY1PFYCD = FQWREC.FY1PFYCD; /* origin factory*/
  FQ05M001.SY1STNBR = FQWREC.SY1STNBR; /* style nbr*/
  FQ05M001.SY2CLRID = FQWREC.SY2CLRID; /* color id*/
  FQ05M001.XDMCD = FQWREC.XDMCD; /* dimension*/
  FQ05M001.XDVCD = FQWREC.XDVCD; /* division*/

  FQ05M001.FQ05MBDT = FQ05W00.FQ05MBYM; /* beg date*/
  FQ05M001.FQ05MEDT = FQ05W00.FQ05MEYM; /* end date*/

  FQ05M001.YDFCD = FQWREC.YDFCD; /* Defect code*/
  FQ05M001.YDFDESC = FQWREC.YDFDESC; /* Defect name*/

  FQ05M001.FQ05WTOT = FQ05W01.FQ05WTOT; /* Grand total*/

   /* ------------------------------------------------------------*/
   /* If no data was found, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ05W00.FQ05WDSW == "N") /* If no data found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  FQ05W00.FQ05WIXM = 1; /* Initialize line index*/

  while (FQ05W00.FQ05WIXM <= FQ05W00.FQ05WNBR /* while count LE # mos*/
   && FQ05W00.FQ05WIXM <= 24) /* and LE max months*/

    FQ05M001.FQ05WHDR[FQ05WIXM] = FQ05W01.FQ05WHDR[FQ05WIXM]; /* MO*/
    FQ05M001.FQ2DEFQT[FQ05WIXM] = FQ05W01.FQ2DEFQT[FQ05WIXM]; /* QTY*/
    FQ05M001.FQ05WPCT[FQ05WIXM] = FQ05W01.FQ05WPCT[FQ05WIXM]; /* %*/

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    FQ05W00.FQ05WIXM = FQ05W00.FQ05WIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Format the labels and totals.*/
   /* ------------------------------------------------------------*/
  FQ05211(); /* Format labels & totals*/


end // end FQ05210

// Format labels based on range
Function FQ05211()
   /* ------------------------------------------------------------*/
   /* Format the labels depending on range length.*/
   /* ------------------------------------------------------------*/
  if (FQ05W00.FQ05WNBR > 0) /* If months GT zero*/

    if (FQ05W00.FQ05WNBR <= 6) /* If 6 or less months*/
      set FQ05M001.FQ05MMTH[1] skip; /* make visable*/
      set FQ05M001.FQ05MQNM[1] skip; /* make visable*/
      set FQ05M001.FQ05MPNM[1] skip; /* make visable*/

    else
      if (FQ05W00.FQ05WNBR <= 12) /* If 12 or less months*/
        set FQ05M001.FQ05MMTH[1] skip; /* make visable*/
        set FQ05M001.FQ05MQNM[1] skip; /* make visable*/
        set FQ05M001.FQ05MPNM[1] skip; /* make visable*/
        set FQ05M001.FQ05MMTH[2] skip; /* make visable*/
        set FQ05M001.FQ05MQNM[2] skip; /* make visable*/
        set FQ05M001.FQ05MPNM[2] skip; /* make visable*/

      else
        if (FQ05W00.FQ05WNBR <= 18) /* If 18 or less months*/
          set FQ05M001.FQ05MMTH[1] skip; /* make visable*/
          set FQ05M001.FQ05MQNM[1] skip; /* make visable*/
          set FQ05M001.FQ05MPNM[1] skip; /* make visable*/
          set FQ05M001.FQ05MMTH[2] skip; /* make visable*/
          set FQ05M001.FQ05MQNM[2] skip; /* make visable*/
          set FQ05M001.FQ05MPNM[2] skip; /* make visable*/
          set FQ05M001.FQ05MMTH[3] skip; /* make visable*/
          set FQ05M001.FQ05MQNM[3] skip; /* make visable*/
          set FQ05M001.FQ05MPNM[3] skip; /* make visable*/

        else
          set FQ05M001.FQ05MMTH[1] skip; /* make visable*/
          set FQ05M001.FQ05MQNM[1] skip; /* make visable*/
          set FQ05M001.FQ05MPNM[1] skip; /* make visable*/
          set FQ05M001.FQ05MMTH[2] skip; /* make visable*/
          set FQ05M001.FQ05MQNM[2] skip; /* make visable*/
          set FQ05M001.FQ05MPNM[2] skip; /* make visable*/
          set FQ05M001.FQ05MMTH[3] skip; /* make visable*/
          set FQ05M001.FQ05MQNM[3] skip; /* make visable*/
          set FQ05M001.FQ05MPNM[3] skip; /* make visable*/
          set FQ05M001.FQ05MMTH[4] skip; /* make visable*/
          set FQ05M001.FQ05MQNM[4] skip; /* make visable*/
          set FQ05M001.FQ05MPNM[4] skip; /* make visable*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Format the totals depending on range length.*/
    /* ------------------------------------------------------------*/
    if (FQ05W00.FQ05WNBR == 6) /* If six months*/

      FQ05M001.FQ05MTNM[1] = "TOTAL"; /* Title name*/
      FQ05M001.FQ05WQTT[1] = FQ05W01.FQ05WQTT; /* QTY*/
      FQ05M001.FQ05WPTT[1] = FQ05W01.FQ05WPTT; /* Percent*/

    else
      if (FQ05W00.FQ05WNBR == 12) /* If 12 months*/

        FQ05M001.FQ05MTNM[2] = "TOTAL"; /* Title name*/
        FQ05M001.FQ05WQTT[2] = FQ05W01.FQ05WQTT; /* QTY*/
        FQ05M001.FQ05WPTT[2] = FQ05W01.FQ05WPTT; /* Percent*/

      else
        if (FQ05W00.FQ05WNBR == 18) /* If 18 months*/

          FQ05M001.FQ05MTNM[3] = "TOTAL"; /* Title name*/
          FQ05M001.FQ05WQTT[3] = FQ05W01.FQ05WQTT; /* QTY*/
          FQ05M001.FQ05WPTT[3] = FQ05W01.FQ05WPTT; /* Percent*/

        else
          if (FQ05W00.FQ05WNBR == 24) /* If 24 months*/

            FQ05M001.FQ05MTNM[4] = "TOTAL"; /* Title name*/
            FQ05M001.FQ05WQTT[4] = FQ05W01.FQ05WQTT; /* QTY*/
            FQ05M001.FQ05WPTT[4] = FQ05W01.FQ05WPTT; /* Percent*/

          else

            FQ05M001.FQ05WHDR[FQ05WIXM] = "TOTAL"; /* Titles*/
            FQ05M001.FQ2DEFQT[FQ05WIXM] = FQ05W01.FQ05WQTT; /* QTY*/
            FQ05M001.FQ05WPCT[FQ05WIXM] = FQ05W01.FQ05WPTT;
                                   /* Percent*/

          end
        end
      end
    end
  end


end // end FQ05211

// Check attention identifier
Function FQ05300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FQ05W00.FQ05WSWR == "Y") /* Request for data switch*/
      set FQ05W01 empty;
    end

    FQ05W00.FQ05WSWF = "Y"; /* Format the map switch*/
    FQ05W00.FQ05WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FQ05M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFQS01(); /* Exit to another application*/

      set FQ05M001.CATOAP cursor, bold; /* Highlight*/

    else
      converseLib.validationFailed(18); /* Indicate PF key not valid*/
      FQWREC.XXXMODID = "300"; /* Process name*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf4 /* PF4 was pressed*/
   || converseVar.eventKey is pf5 /* PF5 was pressed*/
   || converseVar.eventKey is pf13) /* PF13 was pressed*/
    /* OR EZEAID IS PF15             ; PF15 was pressed*/
    /* OR EZEAID IS PF16             ; PF16 was pressed*/
    /* OR EZEAID IS PF17             ; PF17 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FQ05M001"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FQ04"; /* Set to Nature Def Percent Sum*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FQ0B"; /* Set to Nature Def Cat Sum*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FQ0D"; /* Set to customer screen*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FQ0E"; /* Set to customer ratio screen*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FQ0F"; /* Set to warehouse screen*/
    end

    XSFQS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* and PF9 was not pressed*/

    FQWREC.XXXMODID = "300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FQ05300

// Reset highlighted fields
Function FQ05400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/
  set FQ05M001.CATOAP initialAttributes; /* TO application*/
  set FQ05M001.CAITEM initialAttributes; /* Application data*/

  set FQ05M001.SY1STNBR initialAttributes; /* style nbr*/
  set FQ05M001.SY2CLRID initialAttributes; /* color id*/
  set FQ05M001.XDMCD initialAttributes; /* dimension*/
  set FQ05M001.XDVCD initialAttributes; /* division*/
  set FQ05M001.FY1PFYCD initialAttributes; /* origin factory*/

  set FQ05M001.FQ05MBDT initialAttributes; /* beg date*/
  set FQ05M001.FQ05MEDT initialAttributes; /* end date*/
  set FQ05M001.YDFCD initialAttributes; /* defect code*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.XDVCD == "?" /* division list requested*/
   || FQ05M001.YDFCD == "?") /* defect list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FQWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(24); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/
    end

  else
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of division codes.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.XDVCD == "?") /* division list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DIVISION CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDV01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FQ05M001.XDVCD = FQWREC.XDVCD; /* Restore prior code*/
    else

      FQ05M001.XDVCD = XDVTBL.XDVCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ05M001.XDVCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of defect codes.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.YDFCD == "?") /* defect list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DEFECT CODES"; /* Heading*/
    XX0XW02.XGPCD = FQWREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYDF01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FQ05M001.YDFCD = FQWREC.YDFCD; /* Restore prior code*/
    else

      FQ05M001.YDFCD = YDFTBL.YDFCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ05M001.YDFCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FQWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(25); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FQ05400

// Verify the entered data
Function FQ05500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FQ05M001.CAITEM > " ") /* Application data was entered*/

    FQWREC.XXXMODID = "500"; /* Module identification*/
    set FQ05M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, verify the key fields.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.SY1STNBR != FQWREC.SY1STNBR  /* Style*/
   || FQ05M001.SY2CLRID != FQWREC.SY2CLRID  /* Color*/
   || FQ05M001.XDMCD != FQWREC.XDMCD        /* Dimension*/
   || FQ05M001.XDVCD != FQWREC.XDVCD        /* Division*/
   || FQ05M001.FQ05MBDT != FQ05W00.FQ05MBYM /* Beg date*/
   || FQ05M001.FQ05MEDT != FQ05W00.FQ05MEYM /* End date*/
   || FQ05M001.YDFCD != FQWREC.YDFCD        /* Defect code*/
   || FQ05M001.FY1PFYCD != FQWREC.FY1PFYCD  /* Origin factory*/
                                            
   || FQ05M001.SY1STNBR == " "              /* Style*/
   || FQ05M001.SY2CLRID == " "              /* Color*/
   || FQ05M001.XDMCD == " "                 /* Dimension*/
   || FQ05M001.XDVCD == " "                 /* Division*/
   || FQ05M001.FQ05MBDT == 0                /* Beg date*/
   || FQ05M001.FQ05MEDT == 0                /* End date*/
   || FQ05M001.YDFCD == " "                 /* Defect*/
   || FQ05M001.FY1PFYCD == " ")             /* Origin factory*/

    FQ05510(); /* Verify style/color/dim*/
    FQ05520(); /* Verify division*/
    FQ05530(); /* Verify dates*/
    FQ05540(); /* Verify defect code*/
    FQ05550(); /* Verify factory*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ05500

// Verify style/color/dim
Function FQ05510()
   /* ------------------------------------------------------------*/
    /* If missing, default dimension.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.XDMCD == " ") /* If dim missing*/
    FQ05M001.XDMCD = "00"; /* Default to '00'*/
  end

   /* ------------------------------------------------------------*/
    /* If missing, default color.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.SY2CLRID == " ") /* If color missing*/
    FQ05M001.SY2CLRID = "00"; /* Default to '00'*/
  end

   /* ------------------------------------------------------------*/
    /* Verify style/color/dimension.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.SY1STNBR != " " /* Style*/
   || FQ05M001.SY2CLRID != " ") /* Color*/

    /* ------------------------------------------------------------*/
     /* Select SYCLR.*/
    /* ------------------------------------------------------------*/
    FQ05511(); /* Select SYCLR*/

    /* ------------------------------------------------------------*/
     /* If row was not found, indicate error.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE != 0) /* If row was found*/

      set FQ05M001.SY1STNBR cursor, bold; /* Highlight*/
      set FQ05M001.SY2CLRID bold; /* Highlight*/
      set FQ05M001.XDMCD bold; /* Highlight*/
      converseLib.validationFailed(33); /* Indicate data missing or invalid*/
      FQWREC.XXXMODID = "510"; /* Module identification*/

    end
  else

    set FQ05M001.SY1STNBR cursor, bold; /* Highlight*/
    set FQ05M001.SY2CLRID bold; /* Highlight*/
    set FQ05M001.XDMCD bold; /* Highlight*/
    converseLib.validationFailed(33); /* Indicate data missing or invalid*/
    FQWREC.XXXMODID = "510"; /* Module identification*/

  end


end // end FQ05510

// Select SYCLR
Function FQ05511()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  PG2REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = FQ05M001.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FQ05M001.SY2CLRID; /* Color ID*/
  PG2REC.XDMCD = FQ05M001.XDMCD; /* Dimension*/

   /* ------------------------------------------------------------*/
   /* Select SYCLR.*/
   /* ------------------------------------------------------------*/
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not fqailable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "511"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not fqailable*/

    converseLib.validationFailed(2); /* Indicate not fqailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ05511

// Verify division
Function FQ05520()
   /* ------------------------------------------------------------*/
   /* Verify division code.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.XDVCD == " ") /* If division missing*/
    FQ05M001.XDVCD = "*"; /* Default to wildcard*/
  end

  if (FQ05M001.XDVCD == "*") /* If division wildcarded*/
    return; /* Return to previous prcess*/
  end

  if (FQ05M001.XDVCD != " ") /* If division entered*/

    if (FQ05M001.XDVCD in XDVTBL.XDVCD /* If division in table*/
     && XDVTBL.XXXSTAT == "A")         /* and code active*/

       /* next sentence*/
    else

      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      set FQ05M001.XDVCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(31); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "540"; /* Module identification*/

    end
  else

    set FQ05M001.XDVCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate missing or invalid*/
    FQWREC.XXXMODID = "540"; /* Module identification*/

  end


end // end FQ05520

// Verify dates
Function FQ05530()
   /* ------------------------------------------------------------*/
   /* Initialize record for calls to date routine.*/
   /* ------------------------------------------------------------*/
  set FQZREC empty; /* clear date edit record*/

  FQZREC.FQZBEGRG = FQ05M001.FQ05MBDT; /* Beg date*/
  FQZREC.FQZENDRG = FQ05M001.FQ05MEDT; /* end date*/
  FQZREC.FQZCHK24 = "Y"; /* Switch for range*/
  FQZREC.FQZNUMYR = 2; /* Number of years*/

   /* ------------------------------------------------------------*/
   /* Edit range.  Send YYMMMM - receive back CCYYMMMM.*/
   /* ------------------------------------------------------------*/
  XSFQS05(); /* Common date edit routine*/

   /* ------------------------------------------------------------*/
   /* Check return codes for ending date.*/
   /* ------------------------------------------------------------*/
  if (FQZREC.FQZENDRC == 0) /* end date was valid*/
    FQ05M001.FQ05MEDT = FQZREC.FQZENDRG; /* End date*/

  else
    set FQ05M001.FQ05MEDT cursor, bold; /* Highlight*/
    FQWREC.XXXMODID = "530"; /* module identification*/

    if (FQZREC.FQZENDRC == 1) /* End date was invalid*/
      converseLib.validationFailed(34); /* Indicate invalid*/

    else
      converseLib.validationFailed(27); /* Indicate out of range*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Check return codes for beginning date.*/
   /* ------------------------------------------------------------*/
  if (FQZREC.FQZBEGRC == 0) /* Beg date was valid*/
    FQ05M001.FQ05MBDT = FQZREC.FQZBEGRG; /* Begin date*/

  else
    FQWREC.XXXMODID = "530"; /* module identification*/
    set FQ05M001.FQ05MBDT cursor, bold; /* Highlight*/

    if (FQZREC.FQZBEGRC == 1) /* Beg date was invalid*/
      converseLib.validationFailed(34); /* Indicate invalid*/

    else
      converseLib.validationFailed(27); /* Indicate out of range*/

    end
  end


end // end FQ05530

// Verify defect code
Function FQ05540()
   /* ------------------------------------------------------------*/
   /* Verify defect code.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.YDFCD != " ") /* If defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ05M001.YDFCD; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT == "A")

      FQ05M001.YDFDESC = YDFTBL.YDFDESC[sysVar.arrayIndex]; /* Save def name*/

      /* ------------------------------------------------------------*/
       /* Change the defect information in FQWREC.*/
      /* ------------------------------------------------------------*/
      FQ05541(); /* Change defect info in FQWREC*/

    else

      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      FQWREC.YDFDESC = " "; /* Defect code name*/
      set FQ05M001.YDFCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "540"; /* Module identification*/

    end

  else
    FQWREC.YDFDESC = " "; /* Defect code name*/
    set FQ05M001.YDFCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(32); /* Indicate missing or invalid*/
    FQWREC.XXXMODID = "540"; /* Module identification*/

  end


end // end FQ05540

// Update FQWREC defect info
Function FQ05541()
   /* ------------------------------------------------------------*/
   /* Change the defect information in FQWREC.*/
   /* ------------------------------------------------------------*/
  FQWREC.FQWBDFCT = " "; /* Clear beg dfct range*/
  FQWREC.FQWEDFCT = " "; /* Clear End dfct range*/

  FQWREC.YDCCD = YDFTBL.YDCCD[sysVar.arrayIndex]; /* Save category*/

   /* ------------------------------------------------------------*/
   /* Obtain category description.*/
   /* ------------------------------------------------------------*/
  YDCREC.XGPCD = FQWREC.XGPCD; /* Format key*/
  YDCREC.YDCCD = FQWREC.YDCCD; /* Format key*/

  if (YDCREC.YDCKEY in YDCTBL.YDCKEY)

    FQWREC.YDCDESC = YDCTBL.YDCDESC[sysVar.arrayIndex]; /* Save cat name*/
  end


end // end FQ05541

// Verify factory
Function FQ05550()
   /* ------------------------------------------------------------*/
   /* Verify factory code.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.FY1PFYCD != " ") /* If factory entered*/

    /* ------------------------------------------------------------*/
     /* Select FCTY.*/
    /* ------------------------------------------------------------*/
    FQ05551(); /* Select FCTY*/

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE != 0) /* If row not found*/

      set FQ05M001.FY1PFYCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(3); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "550"; /* Module identification*/
    end

  else

    set FQ05M001.FY1PFYCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(3); /* Indicate missing or invalid*/
    FQWREC.XXXMODID = "550"; /* Module identification*/
  end


end // end FQ05550

// Select FCTY
Function FQ05551()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FY1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  FY1REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  FY1REC.FY1FCTYC = FQ05M001.FY1PFYCD; /* Factory*/

   /* ------------------------------------------------------------*/
   /* Select FCTY.*/
   /* ------------------------------------------------------------*/
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not fqailable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "551"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not fqailable*/

    converseLib.validationFailed(2); /* Indicate not fqailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ05551

// Process valid input request
Function FQ05600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  FQ05W00.FQ05WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/
  if (FQ05M001.FY1PFYCD != FQWREC.FY1PFYCD  /* or factory changed*/
   || FQ05M001.FQ05MBDT != FQ05W00.FQ05MBYM /* or beg date changed*/
   || FQ05M001.FQ05MEDT != FQ05W00.FQ05MEYM /* or end date changed*/
   || FQ05M001.YDFCD != FQWREC.YDFCD        /* or defect changed*/
   || FQ05M001.SY1STNBR != FQWREC.SY1STNBR  /* or style nbr*/
   || FQ05M001.SY2CLRID != FQWREC.SY2CLRID  /* or color id*/
   || FQ05M001.XDMCD != FQWREC.XDMCD        /* or dimension*/
   || FQ05M001.XDVCD != FQWREC.XDVCD)       /* or division*/

    /* ------------------------------------------------------------*/
     /* Save data.*/
    /* ------------------------------------------------------------*/
    FQWREC.FY1PFYCD = FQ05M001.FY1PFYCD; /* origin factory*/
    FQWREC.SY1STNBR = FQ05M001.SY1STNBR; /* style nbr*/
    FQWREC.SY2CLRID = FQ05M001.SY2CLRID; /* color id*/
    FQWREC.XDMCD = FQ05M001.XDMCD; /* dimension*/
    FQWREC.XDVCD = FQ05M001.XDVCD; /* division*/
    FQWREC.YDFCD = FQ05M001.YDFCD; /* defect code*/
    FQWREC.YDFDESC = FQ05M001.YDFDESC; /* defect name*/

    FQWREC.FQ1IDBDT = FQZREC.FQZBCYMM; /* beg date*/
    FQWREC.FQ1IDXDT = FQZREC.FQZECYMM; /* end date*/

    FQ05W00.FQ05MBDT = FQZREC.FQZBCYMM; /* beg date*/
    FQ05W00.FQ05MEDT = FQZREC.FQZECYMM; /* end date*/

    FQ05W00.FQ05WSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If PF9 was pressed, transfer to print screen.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9) /* If PF9 was pressed*/

    /* ------------------------------------------------------------*/
     /* Transfer control to FQ0G.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "FQ0G"; /* TO application*/
    XSFQS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If the request failed, display the returned error message.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = " "; /* TO application*/

    exit stack; /* Exit to display map*/

  end


end // end FQ05600

//*** RECORD=FQ05W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FQ05W00 type basicRecord
  10 FQ05WIXM FQ05WIXM ; 
  10 FQ05WIX2 FQ05WIX2 ; 
  10 FQ05WFDA FQ05WFDA ; 
  10 FQ05WFDB FQ05WFDB ; 
  10 FQ05WNBR FQ05WNBR ; 
  10 * char(1) ; 
  10 FQ05WEOC FQ05WEOC ; 
  10 FQ05WSWF FQ05WSWF ; 
  10 FQ05WSWR FQ05WSWR ; 
  10 FQ05WDSW FQ05WDSW ; 
  10 * char(1) ; 
  10 FQZINDMO FQZINDMO [24] ; 
  10 FQ05MBDT FQ05MBDT ; 
    15 * num(3) ; 
    15 FQ05MBYM FQ05MBYM ; 
  10 * char(1) ; 
  10 FQ05MEDT FQ05MEDT ; 
    15 * num(3) ; 
    15 FQ05MEYM FQ05MEYM ; 
end // end FQ05W00

//*** RECORD=FQ05W01 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record FQ05W01 type basicRecord
  5 FQ05WHDR FQ05WHDR [24] ; 
  5 FQ2DEFQT FQ2DEFQT [24] ; 
  5 FQ05WPCT FQ05WPCT [24] ; 
  5 FQ05WQTT FQ05WQTT ; 
  5 FQ05WPTT FQ05WPTT ; 
  5 FQ05WTOT FQ05WTOT ; 
end // end FQ05W01

// Beg range date
DataItem FQ05MBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Beg YYMMMM
DataItem FQ05MBYM num(6)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// End range date
DataItem FQ05MEDT num(9)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// End YYMMMM
DataItem FQ05MEYM num(6)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Data found switch
DataItem FQ05WDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FQ05WEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work field
DataItem FQ05WFDA bin(18,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work field
DataItem FQ05WFDB bin(18,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Date headings
DataItem FQ05WHDR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem FQ05WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ05WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months in range
DataItem FQ05WNBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// percentage of total for key
DataItem FQ05WPCT num(7,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total defect percents
DataItem FQ05WPTT num(7,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total defect quantity
DataItem FQ05WQTT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FQ05WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FQ05WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total prdctn quantity
DataItem FQ05WTOT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

