package fq0j;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fq.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=FQ0J ****
// This application allows a user to inquire and maintain rows
// in the inspector hold DB2 table, DFQUAL.VINSPH01.
// 
// There are two different screens that may be displayed.
// The first screen will display all the rows in the table.
// When a row is selected on this screen, the second screen is
// displayed, showing only information for that table row.
// The user may update the non-key fields.
// After changing the data, ENTER must be pressed
// update the data base.
// 
// After entering the first screen, the user may press PF18
// and the second screen will appear with no data.  User may
// fill in the information for a row, press ENTER, and add the
// row to the data base.
// 
// When the user exits the second screen (via PF3 key) the
// the first screen is redisplayed, indicating with a "v"
// that the row was viewed/updated.
// 
// The user may scroll forward and backward to view all the
// rows by pressing PF7 and PF8.  He may exit to any allowed
// application, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/02/93  SDIFLE  New application.
//          06/24/93  MHUYNH  Regen due to change to XSFQS05
//          06/25/93  MHUYNH  Changed FQ0JM002 add function
// FQ#053   02/02/94  RCHINI  Changed FQ0JM002 add function
//                            to not clear the screen after a
//                            successful add.  Added a marker
//                            to the first reason line to
//                            indicate the 1st 30 bytes of
//                            information.  Changed FQ0J to not
//                            require color and dimension.  A
//                            hold can be added at the style
//                            level now.
// FQF111   09/18/97  ATANU   Introduce the Warehouse Code into
//                            the application.
// y2kproj  12-08-97  oricha  y2k modifications:  logic adjust-
//                            ed for century calcs in fq0j261,
//                            fq0j262, fq0j263, fq0js24j,
//                            fq0jw02; maps m001 & m002 zero
//                            fill in field fq0jmpo; also regen
//                            for xsfqs05 changes.
// FQF115   04-15-98  hbaska  Modified FQ0J260 & FQ0J263 to fix
//                            the deletion problem.
//          06-09-00  RGOMAT  FQ PROJECT
// *********************
Program FQ0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FQ00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FQ0JW00 FQ0JW00; // record
  FQ0JW01 FQ0JW01; // record
  FQ0JW02 FQ0JW02; // record
  FQ0JW03 FQ0JW03; // record
  FQWREC FQWREC; // record
  FQYREC FQYREC; // record
  FQZREC FQZREC; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VINSPH02 VINSPH02; // record
  XDMREC XDMREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YDFREC YDFREC; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use YDFTBL; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use FQ0JM.FQ0JM001,  // forms
      FQ0JM.FQ0JM002, 
      FQ0JM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFQ001: XPFQ001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FQ0JM001 initial; /* M001 input/output*/
    set FQ0JM002 initial; /* M002 input/output*/
    set FQ0JW00 empty; /* Working storage*/
    set FQ0JW01 empty; /* M001 display storage*/
    set FQ0JW02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FQ0JW00.FQ0JWMAP = "1"; /* Map to be displayed switch*/
    FQ0JW00.FQ0JWSWF = "Y"; /* Format the map switch*/
    FQ0JW00.FQ0JWSWR = "Y"; /* Request for data switch*/
    FQ0JW00.FQ0JWASW = "N"; /* Add function request switch (PF18)*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ0J001; /* Converse the main process*/


    FQ0J001: FQ0J001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ0J001; /* Converse the main process*/


  end // end main
end // end FQ0J

// converse ydftbl pop-up window
Function FQ0J-10000()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/

      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XPCTBL.XPCCD[XX0XWCT1] != "999") /* Or end of data*/

        if (XPCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XPCTBL.XPCCD[XX0XWCT1] == XX0XW02.XPCCD /* GPC code*/
           || XX0XW02.XPCCD == " ")                   /* If not entered, O.K.*/

            XX0XM001.XX0XMCD[XX0XWCT2] = XPCTBL.XPCCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XPCTBL.XPCDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Array*/

            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end

            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Add to screen idx*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end

      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/

      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XPCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XPCTBL.XPCCD[XX0XWCT1] == XX0XW02.XPCCD
           || XX0XW02.XPCCD == " ")

            XX0XM001.XX0XMCD[XX0XWCT2] = XPCTBL.XPCCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XPCTBL.XPCDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
          end
        end

        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XPCTBL.XPCCD[XX0XWCT1] == "999") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end FQ0J-10000

// Main process to display a map
Function FQ0J001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FQ0JW00.FQ0JWMAP == "1") /* Map 1 was requested*/
    FQ0J100(); /* Display map 1*/
  else

    if (FQ0JW00.FQ0JWMAP == "2") /* Map 2 was requested*/
      FQ0J200(); /* Display map 2*/
    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      FQWREC.XXXMODID = "001"; /* Module identification*/
      FQWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FQ0JW00.FQ0JWMAP; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "FQ0M"; /* TO application*/
      XSFQS01(); /* Exit to another application*/
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    end
  end


end // end FQ0J001

// List the rows in the table
Function FQ0J100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FQ0J110(); /* Obtain the data to display*/

  FQ0J120(); /* Format and display the map*/

  FQ0J130(); /* Check attention identifier*/

  FQ0J140(); /* Reset fields to normal intensity*/

  FQ0J150(); /* Verify the entered data*/

  FQ0J160(); /* Process valid input request*/


end // end FQ0J100

// Obtain the data to display
Function FQ0J110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0JW00.FQ0JWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* as of 04/27/93  -  storage size is 2829*/
   /* ------------------------------------------------------------*/
  FQ0JW00.XXXTSLEN = 3000; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO == 0) /* No message to display*/
    FQ0JW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  FQ0JS01(); /* Purge any temporary storage*/

   /* --------------------------------------------------------*/
   /* Open DFQUAL.VINSPH02*/
   /* --------------------------------------------------------*/
   /* !!!!   build the key for IO module*/
   /* style,color,dim : values*/
   /* def-cd, fcty, poid : **/
   /* --------------------------------------------------------*/

  FQ0J111(); /* Open VINSPH02 cursor*/

   /* ----------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ----------------------------------------------------------*/
  while (FQ0JW00.FQ0JWEOC == "N") /* Until end of cursor*/

    FQ0J112(); /* Fetch VINSPH02*/

    if (FQ0JW00.FQ0JWEOC == "N") /* If not end-of-cursor*/

      /* ----------------------------------------------------------*/
       /* Save data for display.*/
      /* ----------------------------------------------------------*/
      FQ0J113(); /* Save data*/

      /* ---------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ---------------------------------------------------------*/
      if (FQ0JW00.FQ0JWIXM > 16) /* Page is full*/
        FQ0J114(); /* Add page to temporary storage*/
      end

    end
  end

   /* ----------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ----------------------------------------------------*/
  if (FQ0JW00.FQ0JWIXM > 1) /* Page was formatted*/
    FQ0J114(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close VINSPH02 cursor*/
   /* ------------------------------------------------------------*/
  FQ0J115(); /* Close VINSPH02*/

   /* ------------------------------------------------------------*/
   /* If no pages formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FQ0JW00.TA5TSQIX == 0) /* No pages formatted*/

    FQWREC.XXXMODID = "110"; /* Module identification*/
    converseLib.validationFailed(17); /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FQ0JW00.FQ0JWSWR = "N"; /* Request for data switch*/


end // end FQ0J110

// Open DFQUAL.VINSPH02
Function FQ0J111()
   /* ------------------------------------------------------------*/
   /* Clear copybook.  NOTE: there is no key for this call.*/
   /* ------------------------------------------------------------*/
  set VINSPH02 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Open VINSPH02*/
   /* ------------------------------------------------------------*/

  VINSPH02.SY1STNBR = "*"; /* wild card on style*/
  try
    call "VINSPH02" ("S1", SQLCA, VINSPH02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, init switches & return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FQ0JWEOC = "N"; /* End of cursor switch*/
    FQ0JW00.FQ0JWIXM = 1; /* Display line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set FQ0JM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSPH02"; /* Table view name*/
  TA1REC.TA1TBLKE = VINSPH02.VINSPH02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0J111

// Fetch DFQUAL.VINSPH01
Function FQ0J112()
   /* ------------------------------------------------------------*/
   /* Fetch VINSPH02.*/
   /* ------------------------------------------------------------*/
  try
    call "VINSPH02" ("N1", SQLCA, VINSPH02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Or row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        FQ0JW00.FQ0JWEOC = "Y"; /* Indicate end of cursor*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VINSPH02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VINSPH02.VINSPH02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0J112

// Save data for display
Function FQ0J113()
   /* ------------------------------------------------------------*/
   /* Save the data for display.*/
   /* ------------------------------------------------------------*/

  FQWREC.XGPCD = VINSPH02.XGPCD; /* gpc cd*/
   /* TCS change begin*/
  FQ0JW01.XPCCD[FQ0JWIXM] = VINSPH02.XPCCD; /* Prod cat code*/
   /* TCS change End*/
  FQ0JW01.XWHCD[FQ0JWIXM] = VINSPH02.XWHCD; /* waerhouse*/
  FQ0JW01.SY1STNBR[FQ0JWIXM] = VINSPH02.SY1STNBR; /* Style*/
  FQ0JW01.SY2CLRID[FQ0JWIXM] = VINSPH02.SY2CLRID; /* Color*/
  FQ0JW01.XDMCD[FQ0JWIXM] = VINSPH02.XDMCD; /* Dim*/
  FQ0JW01.YDFCD[FQ0JWIXM] = VINSPH02.YDFCD; /* Defect*/
  FQ0JW01.FY1FCTYC[FQ0JWIXM] = VINSPH02.FY1FCTYC; /* Factory*/

  FQ0JW01.FQWPOIDN9 = VINSPH02.PC-PO-ID-MO-RNG;
  FQ0JW01.FQWPCPOID[FQ0JWIXM] = FQ0JW01.FQWPOIDN6; /* poid(6 digit)*/

   /* TCS change begin*/
  FQ0JW01.FQ0XSECD[FQ0JWIXM] = VINSPH02.FQ0XSECD; /* season code*/
  FQ0JW01.FQ0XSEYR[FQ0JWIXM] = VINSPH02.FQ0XSEYR; /* season code*/
   /* TCS change End*/
  FQ0JW01.XXXUSER[FQ0JWIXM] = VINSPH02.XXXUSER; /* inspector id*/
  FQ0JW01.XXXSTAT[FQ0JWIXM] = VINSPH02.XXXSTAT; /* Status*/
  FQ0JW01.FQ0JWRESN1[FQ0JWIXM] = VINSPH02.FQ0JWRESN1; /* hold reason 1*/
  FQ0JW01.FQ0JWRESN2[FQ0JWIXM] = VINSPH02.FQ0JWRESN2; /* hold reason 2*/
  FQ0JW01.ZZZSDT[FQ0JWIXM] = VINSPH02.ZZZSDT; /* Setup date*/
  FQ0JW01.ZZZCHGDT[FQ0JWIXM] = VINSPH02.ZZZCHGDT; /* Change date*/
  FQ0JW01.ZZZCHGTM[FQ0JWIXM] = VINSPH02.ZZZCHGTM; /* Change time*/
  FQ0JW01.ZZZCHGCT[FQ0JWIXM] = VINSPH02.ZZZCHGCT; /* Change counte*/

   /* ------------------------------------------------------------*/
   /* Add to line counter.*/
   /* ------------------------------------------------------------*/
  FQ0JW00.FQ0JWIXM = FQ0JW00.FQ0JWIXM + 1; /* Increment line index*/


end // end FQ0J113

// Add page to temporary storage
Function FQ0J114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FQ0JW01.XXXTSLEN = FQ0JW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FQ0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    FQ0JW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Reset to 0*/
    FQ0JW00.FQ0JWIXM = 1; /* Reset to 1*/
    set FQ0JW01 empty; /* M001 display storage*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0J114

// Close DFQUAL.VINSPH01
Function FQ0J115()
   /* ------------------------------------------------------------*/
   /* Close VINSPH02.*/
   /* ------------------------------------------------------------*/
  try
    call "VINSPH02" ("C1", SQLCA, VINSPH02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSPH02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0J115

// Format and converse the map
Function FQ0J120()
   /* ------------------------------------------------------------*/
   /* If error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* If error found*/

    FQWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  if (FQ0JW00.FQ0JWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FQ0JW00.FQ0JWSWF == "Y") /* Map must be formatted*/
      FQ0J121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQ0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FQ0JM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FQ0JM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FQWREC.XXXMSGNO != 0) /* Message to display*/

      if (FQWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FQWREC.XXXMSGNO);
      end /* Message number*/
    else
      FQ0JM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FQ0JM001.XXXMODID = FQWREC.XXXMODID; /* Module identification*/

    set FQ0JM001 alarm; /* Indicate sound alarm*/

  end

  converse FQ0JM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQWREC.XXXMODID = " "; /* Module identification*/
  FQWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FQ0JM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FQ0JM001.CAITEM; /* Application data*/


end // end FQ0J120

// Format the display data
Function FQ0J121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FQ0JM001 initial;

  FQ0JW00.FQ0JWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FQ0JW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FQ0JW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (FQ0JW00.FQ0JWSWU == "Y") /* Current page was changed*/

        FQ0JS02(); /* Update temporary storage page*/

        FQ0JW00.FQ0JWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (FQ0JW00.XXXTSPAG > FQ0JW00.TA5TSQIX) /* Desired greater highest*/
        FQ0JW00.XXXTSPAG = FQ0JW00.TA5TSQIX; /* Default to highest*/
      end

      FQ0JS03(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    FQ0JM001.XXXTSPAG = FQ0JW00.XXXTSPAG; /* Current page*/
    FQ0JM001.TA5TSQIX = FQ0JW00.TA5TSQIX; /* Highest page*/
    set FQ0JM001.XXXLITPG skip; /* "PAGE" literal*/
    set FQ0JM001.XXXLITOF skip; /* "OF" literal*/

  end
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (FQ0JW01.XXXSTAT[1] > " ") /* If data exists*/
    set FQ0JM001.FQ0JMSEL[1] cursor, normal; /* Position cursor*/
  end

  FQ0JW00.FQ0JWIXM = 1; /* Initialize line index*/

  while (FQ0JW00.FQ0JWIXM <= 16 /* Until screen is full*/
   && FQ0JW01.XXXSTAT[FQ0JWIXM] > " ") /* and data exists*/

    FQ0JM001.FQ0JMSEL[FQ0JWIXM] = FQ0JW01.FQ0JWSEL[FQ0JWIXM];
    FQ0JM001.XWHCD[FQ0JWIXM] = FQ0JW01.XWHCD[FQ0JWIXM];
   /* TCS change begin*/
    FQ0JM001.XPCCD[FQ0JWIXM] = FQ0JW01.XPCCD[FQ0JWIXM];
   /* TCS change end*/
    FQ0JM001.SY1STNBR[FQ0JWIXM] = FQ0JW01.SY1STNBR[FQ0JWIXM];
    FQ0JM001.SY2CLRID[FQ0JWIXM] = FQ0JW01.SY2CLRID[FQ0JWIXM];
    FQ0JM001.XDMCD[FQ0JWIXM] = FQ0JW01.XDMCD[FQ0JWIXM];
    FQ0JM001.YDFCD[FQ0JWIXM] = FQ0JW01.YDFCD[FQ0JWIXM];
    FQ0JM001.FY1FCTYC[FQ0JWIXM] = FQ0JW01.FY1FCTYC[FQ0JWIXM];
    FQ0JM001.FQ0JMPO[FQ0JWIXM] = FQ0JW01.FQWPCPOID[FQ0JWIXM];
   /* TCS change begin*/
    FQ0JM001.FQ0XSECD[FQ0JWIXM] = FQ0JW01.FQ0XSECD[FQ0JWIXM];
    FQ0JM001.FQ0XSEYR[FQ0JWIXM] = FQ0JW01.FQ0XSEYR[FQ0JWIXM];
   /* TCS change end*/
    FQ0JM001.FQ0JMRES[FQ0JWIXM] = FQ0JW01.FQ0JWRESN1[FQ0JWIXM];
    FQ0JM001.XXXSTAT[FQ0JWIXM] = FQ0JW01.XXXSTAT[FQ0JWIXM];

    /* ------------------------------------------------------------*/
     /* Make line visable.*/
    /* ------------------------------------------------------------*/
    set FQ0JM001.FQ0JMSEL[FQ0JWIXM] normal; /* Make visable*/

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    FQ0JW00.FQ0JWIXM = FQ0JW00.FQ0JWIXM + 1; /* Increment line index*/

  end


end // end FQ0J121

// Check attention identifier
Function FQ0J130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FQ0JW00.FQ0JWSWR == "Y") /* Request for data switch*/
      set FQ0JW01 empty;
    end

    FQ0JW00.FQ0JWSWF = "Y"; /* Format the map switch*/
    FQ0JW00.FQ0JWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FQ0JM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FQ0JS01(); /* Purge any temporary storage*/

      XSFQS01(); /* Exit to another application*/

      set FQ0JM001.CATOAP cursor, bold; /* Highlight*/

    else
      FQWREC.XXXMSGNO = 18; /* Indicate PF key not valid*/
      FQWREC.XXXMODID = "130"; /* Process name*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   /* R EZEAID IS PF4;               /* PF4 was pressed*/
   || converseVar.eventKey is pf5 /* PF5 was pressed*/
   || converseVar.eventKey is pf6) /* PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FQ0JM001"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* Set to ?????? application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* FQ menu application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "FQ0I"; /* Defective return entry*/
      COMMAREA.CAITEM = "FQ0IM002"; /* Move in map name for help*/
    end

    FQ0JS01(); /* Purge any temporary storage*/

    XSFQS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf18  
   && converseVar.eventKey not pf19)

    FQWREC.XXXMODID = "130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FQ0J130

// Reset highlighted fields
Function FQ0J140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FQ0JM001.CATOAP initialAttributes; /* TO application*/
  set FQ0JM001.CAITEM initialAttributes; /* Application data*/

  FQ0JW00.FQ0JWIXM = 1; /* Initialize line index*/

  while (FQ0JW00.FQ0JWIXM <= 16 /* Until end of lines*/
   && FQ0JM001.XXXSTAT[FQ0JWIXM] > " ") /* and data exists*/

    set FQ0JM001.FQ0JMSEL[FQ0JWIXM] normal; /* Reset select flag*/

    FQ0JW00.FQ0JWIXM = FQ0JW00.FQ0JWIXM + 1; /* Increment line index*/

  end


end // end FQ0J140

// Verify the entered data
Function FQ0J150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FQ0JM001.CAITEM > " ") /* Application data was entered*/

    FQWREC.XXXMODID = "150"; /* Module identification*/
    set FQ0JM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to delete was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* delete  request*/

    FQ0J153(); /* Verify  delete request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FQ0J151(); /* Verify scroll/add request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/

    FQ0JW00.FQ0JWIXM = 16; /* Initialize line index*/

    while (FQ0JW00.FQ0JWIXM > 0) /* Until end of lines*/

      FQ0J152(); /* Verify data in the line*/

      FQ0JW00.FQ0JWIXM = FQ0JW00.FQ0JWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0J150

// Verify scroll request
Function FQ0J151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FQ0JW00.XXXTSPAG < 2)       /* and no previous pages*/

    FQWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(13); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FQ0JW00.XXXTSPAG >= FQ0JW00.TA5TSQIX) /* and no more pages*/

    FQWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(14); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FQ0JW00.FQ0JWIXM = 16; /* Initialize line index*/

  while (FQ0JW00.FQ0JWIXM > 0) /* Until end of lines*/

    if (FQ0JM001.FQ0JMSEL[FQ0JWIXM] != " " /* If selection was made*/
     && FQ0JM001.FQ0JMSEL[FQ0JWIXM] != "V") /* and line not reviewed*/

      FQWREC.XXXMODID = "151"; /* Module identification*/
      set FQ0JM001.FQ0JMSEL[FQ0JWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(9); /* Indicate data may not change*/

    end

    FQ0JW00.FQ0JWIXM = FQ0JW00.FQ0JWIXM - 1; /* Decrement line number*/

  end


end // end FQ0J151

// Verify selection
Function FQ0J152()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FQ0JM001.FQ0JMSEL[FQ0JWIXM] > " ") /* Selection was entered*/

    if (FQ0JM001.FQ0JMSEL[FQ0JWIXM] != "S" /* Valid selection character*/
     && FQ0JM001.FQ0JMSEL[FQ0JWIXM] != "V") /* Valid reviewed character*/

      FQWREC.XXXMODID = "152"; /* Module identification*/
      set FQ0JM001.FQ0JMSEL[FQ0JWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(12); /* Indicate only "S" may be used*/

    else

      if (FQ0JM001.FQ0JMSEL[FQ0JWIXM] != "V") /* If not reviewed*/
        /* ------------------------------------------------------------*/
         /* Verify that no other selection was made at the same time.*/
        /* ------------------------------------------------------------*/
        FQ0JW00.FQ0JWIX2 = FQ0JW00.FQ0JWIXM - 1; /* Set counter*/

        while (FQ0JW00.FQ0JWIX2 > 0) /* While counter greater than 0*/
          if (FQ0JM001.FQ0JMSEL[FQ0JWIX2] == "S") /* Another selection made*/

            FQWREC.XXXMODID = "152"; /* Module identification*/
            set FQ0JM001.FQ0JMSEL[FQ0JWIXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(8); /* More than one selection*/
          end

          FQ0JW00.FQ0JWIX2 = FQ0JW00.FQ0JWIX2 - 1; /* Decrement counter*/
        end

      end
    end
  end


end // end FQ0J152

// Verify selection for delete
Function FQ0J153()
   /* ------------------------------------------------------------*/
   /* If pf19 is pressed, user must make a selection.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf19) /* delete function requested*/
    if ("S" in FQ0JM001.FQ0JMSEL) /* There is a S*/

           /* NEXT SENTENCE*/

    else
      FQWREC.XXXMODID = "153"; /* Module identification*/
      set FQ0JM001.FQ0JMSEL[1] cursor, bold; /* Highlight*/
      converseLib.validationFailed(66); /* Must make a selection*/
    end

  end

end // end FQ0J153

// Process valid input request
Function FQ0J160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  FQ0JW00.FQ0JWSWF = "Y"; /* Format the map switch*/
  FQ0JW00.FQ0JWLSW = "N"; /* Init delete function switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    set FQ0JM001 initial;
    FQ0JW00.XXXTSPAG = FQ0JW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    set FQ0JM001 initial;
    FQ0JW00.XXXTSPAG = FQ0JW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If line selected, set switches for MAP2 and update temp*/
   /* storage.  EZETST contains pointer for selected line.*/
   /* ------------------------------------------------------------*/
  if ("S" in FQ0JM001.FQ0JMSEL) /* Line was selected*/

    FQ0JW00.FQ0JWMAP = "2"; /* Map to be displayed switch*/
    FQ0JW00.FQ0JWSWR = "Y"; /* Request for data switch*/
    FQ0JW00.FQ0JWASW = "N"; /* Add function request switch*/

    FQ0JW01.FQ0JWSEL[sysVar.arrayIndex] = "V"; /* Move 'v' for reviewed*/

  end

   /* ------------------------------------------------------------*/
   /* If PF18 was pressed, set add function request switch on.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf18) /* If PF18 was pressed*/

    FQ0JW00.FQ0JWMAP = "2"; /* Map to be displayed switch*/
    FQ0JW00.FQ0JWSWR = "N"; /* Request for data switch*/
    FQ0JW00.FQ0JWASW = "Y"; /* Add function request switch*/

  end


   /* ------------------------------------------------------------*/
   /* If PF19 was pressed, set delete function request switch on.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf19) /* If PF18 was pressed*/

    FQ0JW00.FQ0JWMAP = "2"; /* Map to be displayed switch*/
    FQ0JW00.FQ0JWSWR = "Y"; /* Request for data switch*/
    FQ0JW00.FQ0JWLSW = "Y"; /* Del function request switch*/
    FQ0JW00.FQ0JWASW = "N"; /* Add function request switch*/

  end

end // end FQ0J160

// Main process to display map2
Function FQ0J200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FQ0J210(); /* Obtain the data to display*/

  FQ0J220(); /* Format and display the map*/

  FQ0J230(); /* Check attention identifier*/

  FQ0J240(); /* Reset fields to normal intensity*/

  FQ0J250(); /* Verify the entered data*/

  FQ0J260(); /* Process valid input request*/


end // end FQ0J200

// Obtain the data to display
Function FQ0J210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0JW00.FQ0JWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage.*/
   /* ------------------------------------------------------------*/
  set FQ0JW02 empty; /* M002 display storage*/

   /* ------------------------------------------------------------*/
   /* Save MAP1 display storage in MAP2 storage area.*/
   /* ------------------------------------------------------------*/

  if (FQ0JW00.FQ0JWASW == "N") /* Add function not requested*/
    FQ0JW02.XWHCD = FQ0JW01.XWHCD[sysVar.arrayIndex]; /* Warehouse Code*/
   /* TCS change begin*/
    FQ0JW02.XPCCD = FQ0JW01.XPCCD[sysVar.arrayIndex]; /* Pord cat code*/
   /* TCS change end*/
    FQ0JW02.SY1STNBR = FQ0JW01.SY1STNBR[sysVar.arrayIndex]; /* Style number*/
    FQ0JW02.SY2CLRID = FQ0JW01.SY2CLRID[sysVar.arrayIndex]; /* Color id*/
    FQ0JW02.XDMCD = FQ0JW01.XDMCD[sysVar.arrayIndex]; /* Dimension code*/
    FQ0JW02.YDFCD = FQ0JW01.YDFCD[sysVar.arrayIndex]; /* Defective code*/
    FQ0JW02.FY1FCTYC = FQ0JW01.FY1FCTYC[sysVar.arrayIndex]; /* Factory code*/
    FQ0JW02.FQWPCPOID = FQ0JW01.FQWPCPOID[sysVar.arrayIndex]; /* POID*/
   /* TCS change begin*/
    FQ0JW02.FQ0XSECD = FQ0JW01.FQ0XSECD[sysVar.arrayIndex]; /* season code*/
    FQ0JW02.FQ0XSEYR = FQ0JW01.FQ0XSEYR[sysVar.arrayIndex]; /* season code*/
   /* TCS change end*/
    FQ0JW02.FQ0JWRESN1 = FQ0JW01.FQ0JWRESN1[sysVar.arrayIndex]; /* Hold reason 1*/
    FQ0JW02.FQ0JWRESN2 = FQ0JW01.FQ0JWRESN2[sysVar.arrayIndex]; /* Hold reason 2*/
    FQ0JW02.XXXSTAT = FQ0JW01.XXXSTAT[sysVar.arrayIndex]; /* Status*/
    FQ0JW02.ZZZSDT = FQ0JW01.ZZZSDT[sysVar.arrayIndex]; /* Setup date*/
    FQ0JW02.ZZZCHGDT = FQ0JW01.ZZZCHGDT[sysVar.arrayIndex]; /* Change date*/
    FQ0JW02.ZZZCHGTM = FQ0JW01.ZZZCHGTM[sysVar.arrayIndex]; /* Change time*/
    FQ0JW02.XXXUSER = FQ0JW01.XXXUSER[sysVar.arrayIndex]; /* inspector id*/


    FQ0JW00.FQ0JWPNT = sysVar.arrayIndex; /* Save pointer*/

    /* ------------------------------------------------------------*/
     /* Obtain descriptions.*/
    /* ------------------------------------------------------------*/
    FQ0J211(); /* Obtain descriptions*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FQ0JW00.FQ0JWSWR = "N"; /* Request for data switch*/


end // end FQ0J210

// Obtain descriptions
Function FQ0J211()
   /* ------------------------------------------------------------*/
   /* Obtain factory name.*/
   /* ------------------------------------------------------------*/
  if (FQ0JW02.FY1FCTYC != " ") /* If factory entered*/

    /* ------------------------------------------------------------*/
     /* Select FCTY.*/
    /* ------------------------------------------------------------*/
    FQ0JS21(); /* Select FCTY*/

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
      FQ0JW02.FY1FCTSN = FY1REC.FY1FCTSN; /* Factory name*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain defective name.*/
   /* ------------------------------------------------------------*/
  if (FQ0JW02.YDFCD != " ") /* If defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ0JW02.YDFCD; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
      FQ0JW02.YDFDESC = YDFTBL.YDFDESC[sysVar.arrayIndex];
    end

  end

   /* ------------------------------------------------------------*/
    /* Obtain style/color/dimension descriptions.*/
   /* ------------------------------------------------------------*/
  if (FQ0JW02.SY1STNBR != " ") /* Style*/

    /* ------------------------------------------------------------*/
     /* Select SYCLR.*/
    /* ------------------------------------------------------------*/
    FQ0JS22(); /* Select SYCLR*/

    /* ------------------------------------------------------------*/
     /* If row was found, obtain descriptions.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row was found*/

      FQ0JW02.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
      FQ0JW02.SY2CLRAB = PG2REC.SY2CLRAB; /* Color description*/

      XDMREC.XDMCD = PG2REC.XDMCD;
      if (XDMREC.XDMCD in XDMTBL.XDMCD)
        FQ0JW02.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
      end

    end
  end


end // end FQ0J211

// Format and converse the map
Function FQ0J220()
   /* ----------------------------------------------------*/
   /* If an error was found, format data to be displayed.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/

    FQWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FQ0JW00.FQ0JWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FQ0JW00.FQ0JWSWF == "Y") /* Map must be formatted*/
      FQ0J221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQ0JM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FQ0JM002.CATOAP = COMMAREA.CATOAP; /* To application*/
  FQ0JM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FQWREC.XXXMSGNO != 0) /* Message to display*/

      if (FQWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FQWREC.XXXMSGNO);
      end /* Message number*/
    else
      FQ0JM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FQ0JM002.XXXMODID = FQWREC.XXXMODID; /* Module identification*/

    set FQ0JM002 alarm; /* Indicate sound alarm*/

  end


  converse FQ0JM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQWREC.XXXMODID = " "; /* Module identification*/
  FQWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FQ0JM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FQ0JM002.CAITEM; /* Application data*/


end // end FQ0J220

// Format the display data
Function FQ0J221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FQ0JM002 initial; /* m002 input/output area*/

  FQ0JW00.FQ0JWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* format the data from storage.*/
   /* ------------------------------------------------------------*/

  FQ0JM002.XWHCD = FQ0JW02.XWHCD; /* Warehouse Code*/
   /* TCS change begin*/
  FQ0JM002.XPCCD = FQ0JW02.XPCCD; /* Prod cat code*/
   /* TCS change end*/
  FQ0JM002.SY1STNBR = FQ0JW02.SY1STNBR; /* Style number*/
  FQ0JM002.SY1SSTNM = FQ0JW02.SY1SSTNM; /* Style name*/
  FQ0JM002.SY2CLRID = FQ0JW02.SY2CLRID; /* Color identification*/
  FQ0JM002.SY2CLRAB = FQ0JW02.SY2CLRAB; /* Color description*/
  FQ0JM002.XDMCD = FQ0JW02.XDMCD; /* Dimension code*/
  FQ0JM002.XDMABRV = FQ0JW02.XDMABRV; /* Dimension name*/
  FQ0JM002.YDFCD = FQ0JW02.YDFCD; /* Defective code*/
  FQ0JM002.YDFDESC = FQ0JW02.YDFDESC; /* Defect name*/
  FQ0JM002.FY1FCTYC = FQ0JW02.FY1FCTYC; /* Factory code*/
  FQ0JM002.FY1FCTSN = FQ0JW02.FY1FCTSN; /* Factory name*/
  FQ0JM002.FQ0JMPO = FQ0JW02.FQWPCPOID; /* Poid*/
   /* TCS change begin*/
  FQ0JM002.FQ0XSECD = FQ0JW02.FQ0XSECD; /* SEASON CODE*/
  FQ0JM002.FQ0XSEYR = FQ0JW02.FQ0XSEYR; /* SEASON year*/
   /* TCS change end*/

  FQ0JM002.FQ0JM-RESN1-CHAR31 = FQ0JW02.FQ0JW-RESN1-CHAR31;
  FQ0JM002.FQ0JM-RESN1-CHAR29 = FQ0JW02.FQ0JW-RESN1-CHAR29;

  FQ0JM002.FQ0JMRS2 = FQ0JW02.FQ0JWRESN2; /* hold reason 2*/
  FQ0JM002.XXXSTAT = FQ0JW02.XXXSTAT; /* row status*/
  FQ0JM002.ZZZSDT = FQ0JW02.ZZZSDT; /* Setup date*/
  FQ0JM002.ZZZCHGDT = FQ0JW02.ZZZCHGDT; /* Change date*/
  FQ0JM002.ZZZCHGTM = FQ0JW02.ZZZCHGTM; /* Change time*/
  FQ0JM002.XXXUSER = FQ0JW02.XXXUSER; /* Inspector id*/

  if (FQ0JW00.FQ0JWLSW == "Y") /* delete requested*/
    FQ0JM002.FQ0JMFUN = "DELETE";
    FQWREC.XXXMODID = "221";
    converseLib.validationFailed(65);
    set FQ0JM002.CATOAP cursor;
    set FQ0JM002.XWHCD skip;
    set FQ0JM002.XPCCD skip;
    set FQ0JM002.SY1STNBR skip;
    set FQ0JM002.SY2CLRID skip;
    set FQ0JM002.XDMCD skip;
    set FQ0JM002.YDFCD skip;
    set FQ0JM002.FY1FCTYC skip;
    set FQ0JM002.FQ0XSECD skip;
    set FQ0JM002.FQ0XSEYR skip;
    set FQ0JM002.FQ0JMPO skip;
    set FQ0JM002.FQ0JM-RESN1-CHAR31 skip;
    set FQ0JM002.FQ0JM-RESN1-CHAR29 skip;
    set FQ0JM002.FQ0JMRS2 skip;
  else
    FQ0JM002.FQ0JMFUN = "UPDATE";
  end

   /* ------------------------------------------------------------*/
   /* If using add function, make fields enterable.*/
   /* ------------------------------------------------------------*/
  if (FQ0JW00.FQ0JWASW == "Y") /* If add function was requested*/

    XX0XS01(); /* Obtain date and time*/

    set FQ0JM002.XWHCD cursor, normal; /* Warehouse Code*/
    set FQ0JM002.XPCCD normal; /* Prod cat code*/
    set FQ0JM002.SY1STNBR normal; /* Style number*/
    set FQ0JM002.SY2CLRID normal; /* Color identification*/
    set FQ0JM002.XDMCD normal; /* Dimension code*/
    set FQ0JM002.YDFCD normal; /* Defective code*/
    set FQ0JM002.FY1FCTYC normal; /* Factory code*/
    set FQ0JM002.FQ0XSECD normal; /* Season code*/
    set FQ0JM002.FQ0XSEYR normal; /* Season Year*/
    set FQ0JM002.FQ0JMPO normal; /* Beginning date*/
    FQ0JW02.XXXSTAT = "A"; /* Default status to 'active'*/
    FQ0JM002.XXXSTAT = "A"; /* Default status to 'a'*/
    FQ0JM002.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
    FQ0JM002.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    FQ0JM002.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    FQ0JM002.XXXUSER = COMMAREA.CAUSERID; /* Inspector id*/
    set FQ0JM002.FQ0JM-RESN1-CHAR31 normal; /* reason for hold comnt 1*/
    set FQ0JM002.FQ0JM-RESN1-CHAR29 normal; /* reason for hold comnt 1*/
    set FQ0JM002.FQ0JMRS2 normal; /* reason for hold comnt 2*/
    FQ0JM002.FQ0JMFUN = "ADD";

  end


end // end FQ0J221

// Check attention identifier
Function FQ0J230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FQ0JW00.FQ0JWSWR == "Y") /* Request for data switch*/
      set FQ0JW02 empty;
    end

    FQ0JW00.FQ0JWSWR = "N"; /* Data request switch*/
    FQ0JW00.FQ0JWSWF = "Y"; /* Map formatted switch*/
    FQWREC.FQWMODSW = "N"; /* Modified data exit switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FQ0JM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FQ0JS01(); /* Purge any temporary storage*/

      XSFQS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* If transfer failed, return to first map.*/
      /* ------------------------------------------------------------*/
      set FQ0JM002.CATOAP cursor, bold; /* Highlight*/

    else
      converseLib.validationFailed(18); /* Indicate PF key not valid*/
      FQWREC.XXXMODID = "230"; /* Process name*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf4 /* PF4 was pressed*/
   || converseVar.eventKey is pf5) /* PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FQ0JM002"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      /* IF FQ0JW00.FQ0JWASW EQ 'Y';   /* If add function performed*/

      FQ0JW00.FQ0JWSWR = "Y"; /* Data request switch*/
      set FQ0JW02 empty;
      set FQ0JM002 empty;

      /* END;*/

      FQ0JW00.FQ0JWMAP = "1"; /* Indicate map 1*/
      FQ0JW00.FQ0JWSWF = "Y"; /* Map formatted switch*/

      exit stack; /* Exit to redisplay map*/

    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* Set to factory application*/
    end


    FQ0JS01(); /* Purge any temporary storage*/

    XSFQS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, return to first map.*/
    /* ------------------------------------------------------------*/
    set FQ0JM001.CATOAP cursor, bold; /* Highlight*/
    FQ0JW00.FQ0JWMAP = "1"; /* Indicate map 1*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FQWREC.XXXMODID = "230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FQ0J230

// Reset highlighted fields
Function FQ0J240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  if (FQ0JW00.FQ0JWASW == "Y") /* If add function was requested*/

    set FQ0JM002.XWHCD cursor, normal; /* Warehouse Code*/
    /* TCS CHANGE BEGIN*/
    set FQ0JM002.XPCCD normal; /* Prod cat cd*/
    /* TCS CHANGE END*/
    set FQ0JM002.SY1STNBR normal; /* Style number*/
    set FQ0JM002.SY2CLRID normal; /* Color identification*/
    set FQ0JM002.XDMCD normal; /* Dimension code*/
    set FQ0JM002.YDFCD normal; /* Defective code*/
    set FQ0JM002.FY1FCTYC normal; /* Factory code*/
    set FQ0JM002.FQ0XSECD normal; /* Season code*/
    set FQ0JM002.FQ0XSEYR normal; /* Season Year*/
    set FQ0JM002.FQ0JMPO normal; /* Poid*/
    set FQ0JM002.FQ0JM-RESN1-CHAR31 normal; /* hold reason 1*/
    set FQ0JM002.FQ0JM-RESN1-CHAR29 normal; /* hold reason 1*/
    set FQ0JM002.FQ0JMRS2 normal; /* hold reason 2*/

    return;

  end

  set FQ0JM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FQ0JM002.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.YDFCD == "?" || FQ0JM002.XPCCD == "?") /* defect list request*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FQWREC.XXXMODID = "240"; /* Module identification*/
      converseLib.validationFailed(24); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/
    end

  else
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of defect codes.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.YDFCD == "?") /* defect list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DEFECT CODES"; /* Heading*/
    XX0XW02.XGPCD = FQWREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYDF01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FQ0JM002.YDFCD = FQWREC.YDFCD; /* Restore prior code*/
    else

      FQ0JM002.YDFCD = YDFTBL.YDFCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ0JM002.YDFCD cursor; /* Establish cursor position*/

  end
   /* TCS CHANGE BEGIN*/
  if (FQ0JM002.XPCCD == "?") /* defect list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODCAT CODE"; /* Heading*/
    XX0XW02.XPCCD = FQWREC.XPCCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      FQ0J-10000(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FQ0JM002.XPCCD = FQWREC.XPCCD; /* Restore prior code*/
    else

      FQ0JM002.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ0JM002.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FQWREC.XXXMODID = "240"; /* Module identification*/
  converseLib.validationFailed(25); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/

end // end FQ0J240

// Verify data that was entered
Function FQ0J250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CAITEM > " ") /* Application data entered*/

    FQWREC.XXXMODID = "250"; /* Module identification*/
    set FQ0JM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify all enterable fields for add/update*/
   /* ------------------------------------------------------------*/
  if (FQ0JW00.FQ0JWLSW != "Y") /* If add*/

    FQ0J251(); /* Verify key*/

    FQ0J252(); /* Verify warehouse/sty/clr/dim*/

    /* TCS change begin*/
    if (FQ0JM002.XPCCD != " ") /* If prod cat code entered*/
      FQ0J259(); /* Verify prod cat code*/
    end
    /* TCS change end*/

    if (FQ0JM002.YDFCD != " ")
      FQ0J253(); /* Verify defect*/
    end

    if (FQ0JM002.FY1FCTYC != " ")
      FQ0J254(); /* Verify factory*/
    end

    if (FQ0JM002.FQ0JMPO != 0)
      FQ0J255(); /* Verify poid*/
    end

    FQ0J270(); /* Verify season cd and year*/

    FQ0J256(); /* Verify hold reason*/
    FQ0J251(); /* Verify key*/

    if (FQ0JW00.FQ0JWASW == "Y")
      FQ0J257(); /* Verify duplicate*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Check for duplicate is performed in FQ0J260 after deletion*/
   /* of old row, otherwise it will be flagged as dup always.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0J250

// Verify key
Function FQ0J251()
   /* ------------------------------------------------------------*/
    /* Verify enough of a key has been entered.*/
   /* ------------------------------------------------------------*/

  if (FQ0JM002.SY1STNBR == " " /* Style*/
   && FQ0JM002.XPCCD == " "    /* Prod cat code*/
   && FQ0JM002.YDFCD == " "    /* Defect*/
   && FQ0JM002.FY1FCTYC == " " /* Factory*/
   && FQ0JM002.FQ0JMPO == 0)   /* poid*/

    set FQ0JM002.XWHCD cursor, bold; /* Highlight*/
    set FQ0JM002.SY1STNBR bold; /* Highlight*/
    set FQ0JM002.YDFCD bold; /* Highlight*/
    set FQ0JM002.FY1FCTYC bold; /* Highlight*/
    set FQ0JM002.FQ0JMPO bold; /* Highlight*/

    converseLib.validationFailed(63); /* Indicate ONE must be entered*/
    FQWREC.XXXMODID = "251"; /* Module identification*/

    exit stack; /* Return to display map*/

  end

end // end FQ0J251

// Verify xwh/style/color/dim
Function FQ0J252()
   /* ------------------------------------------------------------*/
   /* If style was entered and warehouse is not, error.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.SY1STNBR != " " /* If style entered*/
   && FQ0JM002.XWHCD == " ")   /* warehouse not entered*/

    converseLib.validationFailed(88); /* Indicate error*/
    FQWREC.XXXMODID = "252"; /* Module identification*/
    set FQ0JM002.XWHCD cursor, bold; /* Highlight*/
  else
    /* ------------------------------------------------------------*/
     /* Validate the Warehouse code from VSUMCD01 TABLE*/
    /* ------------------------------------------------------------*/

    FQ0J258();

  end

   /* ------------------------------------------------------------*/
    /* If missing, default dimension.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.SY1STNBR != " " /* If style entered*/
   && FQ0JM002.XDMCD == " ")   /* and dim missing*/

    FQ0JM002.XDMCD = "  "; /* Default to spaces*/
  else
    /* ------------------------------------------------------------*/
     /* If dimension was entered and style was not, error.*/
    /* ------------------------------------------------------------*/
    if (FQ0JM002.SY1STNBR == " " /* If style not entered*/
     && FQ0JM002.XDMCD != " ")   /* and dim entered*/

      converseLib.validationFailed(74); /* Indicate error*/
      FQWREC.XXXMODID = "252"; /* Module identification*/
      set FQ0JM002.SY1STNBR cursor, bold; /* Highlight*/
    end
  end

   /* ------------------------------------------------------------*/
    /* If missing, default color.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.SY1STNBR != " " /* If style entered*/
   && FQ0JM002.SY2CLRID == " ")
    FQ0JM002.SY2CLRID = "   "; /* Default to spaces*/
  else
    /* ------------------------------------------------------------*/
     /* If color was entered and style was not, error.*/
    /* ------------------------------------------------------------*/
    if (FQ0JM002.SY1STNBR == " " /* If style not entered*/
     && FQ0JM002.SY2CLRID != " ") /**/

      converseLib.validationFailed(74); /* Indicate error*/
      FQWREC.XXXMODID = "252"; /* Module identification*/
      set FQ0JM002.SY1STNBR cursor, bold; /* Highlight*/
    end
  end


   /* ------------------------------------------------------------*/
    /* Verify style/color/dimension.*/
   /* ------------------------------------------------------------*/

  if (FQ0JM002.SY1STNBR != " ") /* Style*/

    /* ------------------------------------------------------------*/
     /* Select SYCLR.*/
    /* ------------------------------------------------------------*/
    FQ0JS22(); /* Select SYCLR*/

    /* ------------------------------------------------------------*/
     /* If row was found, obtain descriptions.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row was found*/

      FQ0JM002.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
      FQ0JM002.SY2CLRAB = PG2REC.SY2CLRAB; /* Color description*/

      XDMREC.XDMCD = PG2REC.XDMCD;
      if (XDMREC.XDMCD in XDMTBL.XDMCD)
        FQ0JM002.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
      end

      /* ELSE;*/
      /* SET FQ0JM002.SY1STNBR CURSOR,BRIGHT; /* Highlight*/
      /* SET FQ0JM002.SY2CLRID BRIGHT;        /* Highlight*/
      /* SET FQ0JM002.XDMCD BRIGHT;    /* Highlight*/
      /* MOVE 33 TO EZEMNO;            /* Indicate data missing or invalid*/
      /* MOVE '252' TO FQWREC.XXXMODID;       /* Module identification*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end



end // end FQ0J252

// Verify defect code
Function FQ0J253()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of defect codes.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.YDFCD == "?") /* defect list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DEFECT CODES"; /* Heading*/
    XX0XW02.XGPCD = FQWREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYDF01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FQ0JM002.YDFCD = FQWREC.YDFCD; /* Restore prior code*/
    else
      FQ0JM002.YDFCD = YDFTBL.YDFCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ0JM002.YDFCD cursor; /* Establish cursor position*/
    /* ------------------------------------------------------------*/
     /* Indicate that the requested lists have been displayed and*/
     /* that ENTER must be pressed to process any changes.*/
    /* ------------------------------------------------------------*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    FQWREC.XXXMODID = "240"; /* Module identification*/
    converseLib.validationFailed(25); /* Indicate press ENTER*/

  else
   /* ------------------------------------------------------------*/
   /* Verify defective code.*/
   /* ------------------------------------------------------------*/
    if (FQ0JM002.YDFCD != " ") /* If defect code entered*/

      YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
      YDFREC.YDFCD = FQ0JM002.YDFCD; /* Format key*/

      if (YDFREC.YDFKEY in YDFTBL.YDFKEY
       && YDFTBL.XXXSTAT[sysVar.arrayIndex] == "A")

        FQ0JM002.YDFDESC = YDFTBL.YDFDESC[sysVar.arrayIndex]; /* Defect name*/
      else
        /* ------------------------------------------------------------*/
         /* If not found, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/
        set FQ0JM002.YDFCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(32); /* Indicate missing or invalid*/
        FQWREC.XXXMODID = "253"; /* Module identification*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end FQ0J253

// Verify factory
Function FQ0J254()
   /* ------------------------------------------------------------*/
   /* Verify factory code.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.FY1FCTYC != " ") /* If factory entered*/

    /* ------------------------------------------------------------*/
     /* Select FCTY.*/
    /* ------------------------------------------------------------*/
    FQ0JS21(); /* Select FCTY*/

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
      FQ0JM002.FY1FCTSN = FY1REC.FY1FCTSN; /* Factory name*/

    else

      set FQ0JM002.FY1FCTYC cursor, bold; /* Highlight*/
      converseLib.validationFailed(30); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "254"; /* Module identification*/

      exit stack;

    end

  end


end // end FQ0J254

// Verify poid
Function FQ0J255()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FQZREC empty; /* clear date edit record*/

   /* ------------------------------------------------------------*/
   /* If no date was entered, skip the edit.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.FQ0JMPO == 0) /* Poid*/
    return; /* Return to previous process*/

  end

  if (FQ0JM002.SY1STNBR == " ") /* Poid without style*/
    FQWREC.XXXMODID = "255"; /* module identification*/
    set FQ0JM002.SY1STNBR cursor, bold; /* Highlight*/
    set FQ0JM002.SY2CLRID bold; /* Highlight*/
    set FQ0JM002.XDMCD bold; /* Highlight*/
    converseLib.validationFailed(79); /* Indicate invalid*/
  end

   /* ------------------------------------------------------------*/
   /* Format keys for call to date routine.*/
   /* ------------------------------------------------------------*/
  FQZREC.FQZBEGRG = FQ0JM002.FQ0JMPO; /* use begin date field*/
  FQZREC.FQZNUMYR = 99; /* Number of years*/

   /* ------------------------------------------------------------*/
   /* Edit range.  Send YYMMMM - receive back CCYYMMMM.*/
   /* ------------------------------------------------------------*/
  XSFQS05(); /* Common date edit routine*/

   /* ------------------------------------------------------------*/
   /* If a beginning date was entered, check return.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.FQ0JMPO != 0) /* poid*/
    if (FQZREC.FQZBEGRC == 0) /* poid was valid*/
      FQ0JM002.FQ0JMPO = FQZREC.FQZBEGRG; /* poid (yymmmm)*/
   /* MOVE FQZREC.FQZBCYMM TO FQ0JW02.PCPOIDB9;   /* returned(ccyymmmm)*/

    else
      FQWREC.XXXMODID = "255"; /* module identification*/
      set FQ0JM002.FQ0JMPO cursor, bold; /* Highlight*/

      if (FQZREC.FQZBEGRC == 1) /* date was invalid*/
        converseLib.validationFailed(34); /* Indicate invalid*/
   /* ELSE;*/
   /* MOVE 27 TO EZEMNO;          /* Indicate out of range*/
      end
    end

  else
    FQZREC.FQZBEGRG = 0; /* Sending begin date*/
    FQZREC.FQZBCYMM = 0; /* Returned begin date*/
   /* OVE 0 TO FQ0JW02.PCPOIDB9;     /* poid in db format*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0J255

// Verify reason for holding
Function FQ0J256()
   /* ------------------------------------------------------------*/
    /* Verify reason for holding*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.FQ0JM-RESN1-CHAR31 == " ") /* If comment is missing*/

    /* ------------------------------------------------------------*/
     /* If not entered, indicate error.*/
    /* ------------------------------------------------------------*/
    FQWREC.XXXMODID = "256"; /* Module identification*/
    set FQ0JM002.FQ0JM-RESN1-CHAR31 cursor, bold; /* Highlight*/
    set FQ0JM002.FQ0JM-RESN1-CHAR29 bold; /* Highlight*/
    set FQ0JM002.FQ0JMRS2 bold; /* Highlight*/
    converseLib.validationFailed(76); /* Indicate invalid or missing*/

    exit stack;

  end


end // end FQ0J256

// Check duplicate
Function FQ0J257()
   /* ------------------------------------------------------------*/
   /* Verify that row not alreay on the data base.*/
   /* ------------------------------------------------------------*/

  FQ0JW02.FQYCNT1 = 0;
  FQYREC.FQYFUNC = "SB";

  FQ0JS24(); /* Select VINSPH02 (SB option)*/
  FQ0JW02.FQYCNT1 = FQYREC.FQYCNT1;

   /* --------------------------------------------------------------*/
   /* If row was found, indicate that user need to update, not add*/
   /* --------------------------------------------------------------*/
  if (FQ0JW02.FQYCNT1 > 0) /* If row(s) was found*/

    set FQ0JM002.XWHCD cursor;
    /* ET FQ0JM002.SY1STNBR CURSOR;*/
    /* ET FQ0JM002.SY2CLRID BRIGHT;*/
    /* ET FQ0JM002.YDFCD BRIGHT;*/
    /* ET FQ0JM002.FY1FCTYC BRIGHT;*/
    /* ET FQ0JM002.FQ0JMPO BRIGHT;*/

    converseLib.validationFailed(64); /* Row exists. update it, not add.*/
    FQWREC.XXXMODID = "257"; /* Module identification*/

    exit stack; /* Return to display map*/

  end

end // end FQ0J257

// Verify warehouse code
Function FQ0J258()
   /* -----------------------------------------------------------------*/
   /* Veridy the warehouse code from VSUMCD01 table.*/
   /* -----------------------------------------------------------------*/

  set YSMREC empty;
  YSMREC.YSMTBLPF = "XWH"; /* Table prefix*/
  YSMREC.YSMSYSPF = "FB"; /* System prefix*/
  YSMREC.YSMSUMID = 1; /* Sum id*/
  YSMREC.YSMSRCVL = FQ0JM002.XWHCD; /* Warehouse code to verify*/

  try
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Expected return codes*/
      converseLib.validationFailed(88); /* Indicate error*/
      FQWREC.XXXMODID = "253"; /* Module identification*/
      set FQ0JM002.XWHCD cursor, bold; /* Highlight*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        if (YSMREC.XXXSTAT != "A") /* Check for active warehouse.*/
          converseLib.validationFailed(88); /* Indicate error*/
          FQWREC.XXXMODID = "253"; /* Module identification*/
          set FQ0JM002.XWHCD cursor, bold; /* Highlight*/
        end
        return;
      end
    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FQ0J258"; /* Process name*/
  TA1REC.TA1LOC = "VERIFY WAREHOUSE CODE";
  TA1REC.TA1DBASE = "DCORP.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FQ0JM001.XXXMODID = "253"; /* Process name*/

  exit stack;


end // end FQ0J258

// Verify prod category code
Function FQ0J259()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of defect codes.*/
   /* ------------------------------------------------------------*/
  if (FQ0JM002.XPCCD == "?") /* defect list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODCAT CODE"; /* Heading*/
    XX0XW02.XPCCD = FQWREC.XPCCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      FQ0J-10000(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FQ0JM002.XPCCD = FQWREC.XPCCD; /* Restore prior code*/
    else
      FQ0JM002.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ0JM002.XPCCD cursor; /* Establish cursor position*/
    /* ------------------------------------------------------------*/
     /* Indicate that the requested lists have been displayed and*/
     /* that ENTER must be pressed to process any changes.*/
    /* ------------------------------------------------------------*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    FQWREC.XXXMODID = "240"; /* Module identification*/
    converseLib.validationFailed(25); /* Indicate press ENTER*/

  end
    /* ------------------------------------------------------------*/
    /* Verify PRODUCT CAT CODE*/
    /* ------------------------------------------------------------*/
  if (FQ0JM002.XPCCD != " ") /* If Product cat code entered*/
    if (FQ0JM002.SY1STNBR == " " /* And style/color/dim not entered*/
     && FQ0JM002.SY2CLRID == " " 
     && FQ0JM002.XDMCD == " ")  

      XPCREC.XGPCD = FQWREC.XGPCD; /* Format key*/
      XPCREC.XPCCD = FQ0JM002.XPCCD; /* Format key*/

      if (XPCREC.XPCKEY in XPCTBL.XPCKEY
       && XPCTBL.XXXSTAT == "A")

        /* next sentence*/
      else
        /* ------------------------------------------------------------*/
         /* If not found, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/
        set FQ0JM002.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(38); /* Indicate missing or invalid*/
        FQWREC.XXXMODID = "259"; /* Module identification*/

      end
    else /* Style/colr/dim entered*/

      FQ0JS26(); /* Select from DPROD.VCOLOR02*/

      if (SQLCA.VAGen_SQLCODE == 0
       && FQ0JM002.XPCCD == SYCREC.XPCCD)
         /* next sentence*/
      else /* ------------------------------------------------------------*/
         /* If not found, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/
        set FQ0JM002.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(93); /* Indicate missing or invalid*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end FQ0J259

// Process valid input request
Function FQ0J260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  FQ0JW00.FQ0JWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/
  XX0XS01(); /* Obtain date and time*/

      /* move the map reason code 1 to work area*/

  FQ0JW03.FQ0JW-RESN1-CHAR31 = FQ0JM002.FQ0JM-RESN1-CHAR31;
  FQ0JW03.FQ0JW-RESN1-CHAR29 = FQ0JM002.FQ0JM-RESN1-CHAR29;

   /* ------------------------------------------------------------*/
   /* If adding a row for PF18(add function)*/
   /* ------------------------------------------------------------*/
  if (FQ0JW00.FQ0JWASW == "Y")
    FQ0J261(); /* insert VINSPH02 row*/
    FQWREC.XXXMODID = "260";
    FQWREC.XXXMSGNO = 61; /* Indicate add completed*/
  else

    /* ------------------------------------------------------------*/
    /* If updating a row, (i.e. any data chnaged, including keys)*/
    /* need to delete old row and insert a new row*/
    /* because we are allowing key fields change.*/
    /* ------------------------------------------------------------*/
    if (FQ0JM002.XWHCD != FQ0JW02.XWHCD
     || FQ0JM002.XPCCD != FQ0JW02.XPCCD
     || FQ0JM002.SY1STNBR != FQ0JW02.SY1STNBR
     || FQ0JM002.SY2CLRID != FQ0JW02.SY2CLRID
     || FQ0JM002.XDMCD != FQ0JW02.XDMCD
     || FQ0JM002.YDFCD != FQ0JW02.YDFCD
     || FQ0JM002.FY1FCTYC != FQ0JW02.FY1FCTYC
     || FQ0JM002.FQ0XSECD != FQ0JW02.FQ0XSECD
     || FQ0JM002.FQ0XSEYR != FQ0JW02.FQ0XSEYR
     || FQ0JM002.FQ0JMPO != FQ0JW02.FQWPCPOID
     || FQ0JW03.FQ0JWRESN1 != FQ0JW02.FQ0JWRESN1
     || FQ0JM002.FQ0JMRS2 != FQ0JW02.FQ0JWRESN2)

      /* ------------------------------------------------------------*/
      /* delete old VINSPH02 row using FQ0JW02 data.*/
      /* ------------------------------------------------------------*/
      FQ0J262();
      /* ------------------------------------------------------------*/
      /* insert new VINSPH02 row using FQ0JM002 data.*/
      /* ------------------------------------------------------------*/
      FQ0J267(); /* check duplicate*/
      FQ0J261();
      FQWREC.XXXMODID = "260";
      FQWREC.XXXMSGNO = 21; /* Indicate update completed*/
       /* MOVE 'N' TO FQ0JW00.FQ0JWLSW;   /* Init the del funct switch*/

      /* ----------------------------------------------------------------*/
      /* Update temporary storage.(only for map002)*/
      /* ----------------------------------------------------------------*/

      FQ0JW02.XWHCD = FQ0JM002.XWHCD;
      FQ0JW02.XPCCD = FQ0JM002.XPCCD;
      FQ0JW02.SY1STNBR = FQ0JM002.SY1STNBR;
      FQ0JW02.SY2CLRID = FQ0JM002.SY2CLRID;
      FQ0JW02.XDMCD = FQ0JM002.XDMCD;
      FQ0JW02.YDFCD = FQ0JM002.YDFCD;
      FQ0JW02.FY1FCTYC = FQ0JM002.FY1FCTYC;
      FQ0JW02.FQ0XSECD = FQ0JM002.FQ0XSECD;
      FQ0JW02.FQ0XSEYR = FQ0JM002.FQ0XSEYR;
      FQ0JW02.FQWPCPOID = FQ0JM002.FQ0JMPO;
      FQ0JW02.FQ0JWRESN1 = FQ0JW03.FQ0JWRESN1;
      FQ0JW02.FQ0JWRESN2 = FQ0JM002.FQ0JMRS2;
      FQ0JW02.XXXSTAT = FQ0JM002.XXXSTAT;
      FQ0JW02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
      FQ0JW02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
      FQ0JW02.XXXUSER = COMMAREA.CAUSERID; /* User ID*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If deleting a row for PF19 (delete function)*/
   /* ------------------------------------------------------------*/

  if (FQ0JW00.FQ0JWLSW == "Y")
    FQ0J263(); /* delete VINSPH02 row*/
    /* MOVE '260' TO FQWREC.XXXMODID;*/
    /* MOVE 62 TO FQWREC.XXXMSGNO;    /* Indicate delete completed*/
    /* MOVE 'N' TO FQ0JW00.FQ0JWLSW;   /* Init the delete funct switch*/
  end

   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/
  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/


   /* ------------------------------------------------------------*/
     /* ----------------------------------------------------------------*/
      /* Update temporary storage.(not for m001. we display all in m001)*/
     /* ----------------------------------------------------------------*/
   /* MOVE FQ0JM002.XWHCD TO FQ0JW01.XWHCD(FQ0JWPNT);*/
   /* MOVE FQ0JM002.SY1STNBR TO FQ0JW01.SY1STNBR(FQ0JWPNT);*/
   /* MOVE FQ0JM002.SY2CLRID TO FQ0JW01.SY2CLRID(FQ0JWPNT);*/
   /* MOVE FQ0JM002.XDMCD TO FQ0JW01.XDMCD(FQ0JWPNT);*/
   /* MOVE FQ0JM002.YDFCD TO FQ0JW01.YDFCD(FQ0JWPNT);*/
   /* MOVE FQ0JM002.FY1FCTYC TO FQ0JW01.FY1FCTYC(FQ0JWPNT);*/
   /* MOVE FQ0JM002.FQ0JMPO TO FQ0JW01.PCPOID(FQ0JWPNT);*/
   /* MOVE FQ0JW03.FQ0JWRESN1 TO FQ0JW01.HOLDRESN1(FQ0JWPNT);*/
   /* MOVE FQ0JM002.FQ0JMRS2 TO FQ0JW01.HOLDRESN2(FQ0JWPNT);*/
   /* MOVE FQ0JM002.XXXSTAT TO FQ0JW01.XXXSTAT;*/
   /* MOVE XX0XW01.XX0XWDAT TO FQ0JW01.ZZZCHGDT(FQ0JWPNT);    /* Chg date*/
   /* MOVE XX0XW01.XX0XWTIM TO FQ0JW01.ZZZCHGTM(FQ0JWPNT);    /* Chg time*/
   /* MOVE COMMAREA.CAUSERID TO FQ0JW01.XXXUSER(FQ0JWPNT);  /* User ID*/
end // end FQ0J260

// Add VINSPH01 row for pf18
Function FQ0J261()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VINSPH02 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/
  VINSPH02.XGPCD = FQWREC.XGPCD;
  FQ0JW02.XGPCD = FQWREC.XGPCD;
  VINSPH02.XWHCD = FQ0JM002.XWHCD; /* Warehouse Code*/
  FQ0JW02.XWHCD = FQ0JM002.XWHCD; /* Warehouse Code*/
   /* TCS change begin*/
  VINSPH02.XPCCD = FQ0JM002.XPCCD; /* Prod cat code*/
  FQ0JW02.XPCCD = FQ0JM002.XPCCD; /* Prod cat code*/
   /* TCS change end*/
  VINSPH02.SY1STNBR = FQ0JM002.SY1STNBR; /* Style number*/
  FQ0JW02.SY1STNBR = FQ0JM002.SY1STNBR; /* Style number*/
  VINSPH02.SY2CLRID = FQ0JM002.SY2CLRID; /* Color id*/
  FQ0JW02.SY2CLRID = FQ0JM002.SY2CLRID; /* Color id*/
  VINSPH02.XDMCD = FQ0JM002.XDMCD; /* Dimension*/
  FQ0JW02.XDMCD = FQ0JM002.XDMCD; /* Dimension*/
  VINSPH02.YDFCD = FQ0JM002.YDFCD; /* Defective code*/
  FQ0JW02.YDFCD = FQ0JM002.YDFCD; /* Defective code*/
  VINSPH02.FY1FCTYC = FQ0JM002.FY1FCTYC; /* Factory code*/
  FQ0JW02.FY1FCTYC = FQ0JM002.FY1FCTYC; /* Factory code*/
   /* TCS change begin*/
  VINSPH02.FQ0XSECD = FQ0JM002.FQ0XSECD; /* season code*/
  FQ0JW02.FQ0XSECD = FQ0JM002.FQ0XSECD; /* season code*/
  VINSPH02.FQ0XSEYR = FQ0JM002.FQ0XSEYR; /* season year*/
  FQ0JW02.FQ0XSEYR = FQ0JM002.FQ0XSEYR; /* season year*/
   /* TCS change end*/

  if (FQ0JM002.FQ0JMPO == 0)
    VINSPH02.PC-PO-ID-MO-RNG = 0;
    FQ0JW02.FQWPCPOID = 0;
  else
    FQ0JW02.FQWPOIDN6 = FQ0JW02.FQWPCPOID;
    /* ------------------ y2k out begin ----------------*/
    /* MOVE 19 TO FQ0JW02.FQWPOIDN3;*/
    /* ------------------ y2k out end ------------------*/
    /* ------------------ y2k in  begin ----------------*/
    if (FQ0JW02.FQWPOIDYY > 60)
      FQ0JW02.FQWPOIDN3 = 19;
    else
      FQ0JW02.FQWPOIDN3 = 20;
    end
    /* ------------------ y2k in end -------------------*/
    FQ0JW02.PC-PO-ID-MO-RNG = FQ0JW02.FQWPOIDN9;
    VINSPH02.PC-PO-ID-MO-RNG = FQ0JW02.PC-PO-ID-MO-RNG;
  end

  VINSPH02.FQ0JWRESN1 = FQ0JW03.FQ0JWRESN1; /* hold reason cmnt 1*/
  FQ0JW02.FQ0JWRESN1 = FQ0JW03.FQ0JWRESN1; /* hold reason cmnt 1*/
  VINSPH02.FQ0JWRESN2 = FQ0JM002.FQ0JMRS2; /* hold reason cmnt 2*/
  FQ0JW02.FQ0JWRESN2 = FQ0JM002.FQ0JMRS2; /* hold reason cmnt 2*/
  VINSPH02.XXXSTAT = FQ0JM002.XXXSTAT; /* Status*/
  FQ0JW02.XXXSTAT = FQ0JM002.XXXSTAT; /* Status*/

  if (FQ0JW00.FQ0JWASW == "Y") /* If using add function*/
    VINSPH02.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  else /* If using update function*/
    VINSPH02.ZZZSDT = FQ0JW02.ZZZSDT; /* Setup date*/
  end

  VINSPH02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VINSPH02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VINSPH02.XXXUSER = COMMAREA.CAUSERID; /* User ID*/

   /* ------------------------------------------------------------*/
   /* Insert VINSPH02 row*/
   /* ------------------------------------------------------------*/
  try
    call "VINSPH02" ("A ", SQLCA, VINSPH02) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "261"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSPH02"; /* Table view name*/
  TA1REC.TA1TBLKE = VINSPH02.VINSPH02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0J261

// Del old VINSPH01 (for update)
Function FQ0J262()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VINSPH02 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/
  VINSPH02.XGPCD = "02";
  VINSPH02.XWHCD = FQ0JW02.XWHCD; /* Warehouse Code*/
   /* TCS change begin*/
  VINSPH02.XPCCD = FQ0JW02.XPCCD; /* prod cat code*/
   /* TCS change end*/
  VINSPH02.SY1STNBR = FQ0JW02.SY1STNBR; /* Style number*/
  VINSPH02.SY2CLRID = FQ0JW02.SY2CLRID; /* Color id*/
  VINSPH02.XDMCD = FQ0JW02.XDMCD; /* Dimension*/
  VINSPH02.YDFCD = FQ0JW02.YDFCD; /* Defective code*/
  VINSPH02.FY1FCTYC = FQ0JW02.FY1FCTYC; /* Factory code*/
   /* TCS change begin*/
  VINSPH02.FQ0XSECD = FQ0JW02.FQ0XSECD; /* Season code*/
  VINSPH02.FQ0XSEYR = FQ0JW02.FQ0XSEYR; /* Season year*/
   /* TCS change end*/

  if (FQ0JW02.FQWPCPOID == 0)
    VINSPH02.PC-PO-ID-MO-RNG = 0;
  else
    /* ---------------- y2k out begin --------------*/
    /* MOVE 19 TO FQ0JW02.FQWPOIDN3;*/
    /* ---------------- y2k out end ----------------*/
    /* ---------------- y2k in  begin --------------*/
    if (FQ0JW02.FQWPOIDYY > 60)
      FQ0JW02.FQWPOIDN3 = 19;
    else
      FQ0JW02.FQWPOIDN3 = 20;
    end
    /* ---------------- y2k in end -----------------*/
    FQ0JW02.FQWPOIDN6 = FQ0JW02.FQWPCPOID;
    FQ0JW02.PC-PO-ID-MO-RNG = FQ0JW02.FQWPOIDN9;
    VINSPH02.PC-PO-ID-MO-RNG = FQ0JW02.PC-PO-ID-MO-RNG;
  end

   /* ------------------------------------------------------------*/
   /* Delete the old row in the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VINSPH02" ("D ", SQLCA, VINSPH02) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row not found, indicate the data was updated by another.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        FQ0JW00.FQ0JWMAP = "1"; /* Map number*/
        FQ0JW00.FQ0JWSWR = "Y"; /* Request data switch*/
        FQ0JW00.FQ0JWSWF = "Y"; /* Format map switch*/

        FQWREC.XXXMODID = "263"; /* Module identification*/
        FQWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "263"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSPH02"; /* Table view name*/
  TA1REC.TA1TBLKE = VINSPH02.VINSPH02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0J262

// Del  VINSPH01 (for PF19)
Function FQ0J263()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VINSPH02 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/
  VINSPH02.XGPCD = "02";
  VINSPH02.XWHCD = FQ0JM002.XWHCD; /* Warehouse Code*/
   /* TCS change begin*/
  VINSPH02.XPCCD = FQ0JM002.XPCCD; /* Prod cat code*/
   /* TCS change end*/
  VINSPH02.SY1STNBR = FQ0JM002.SY1STNBR; /* Style number*/
  VINSPH02.SY2CLRID = FQ0JM002.SY2CLRID; /* Color id*/
  VINSPH02.XDMCD = FQ0JM002.XDMCD; /* Dimension*/
  VINSPH02.YDFCD = FQ0JM002.YDFCD; /* Defective code*/
  VINSPH02.FY1FCTYC = FQ0JM002.FY1FCTYC; /* Factory code*/
   /* TCS change begin*/
  VINSPH02.FQ0XSECD = FQ0JM002.FQ0XSECD; /* Season code*/
  VINSPH02.FQ0XSEYR = FQ0JM002.FQ0XSEYR; /* Season code*/
   /* TCS change end*/

  if (FQ0JM002.FQ0JMPO == 0)
    VINSPH02.PC-PO-ID-MO-RNG = 0;
  else
    FQ0JW02.FQWPOIDN6 = FQ0JW02.FQWPCPOID;
    /* --------------- y2k out begin ---------------*/
    /* MOVE 19 TO FQ0JW02.FQWPOIDN3;*/
    /* --------------- y2k out end -----------------*/
    /* --------------- y2k in  begin ---------------*/
    if (FQ0JW02.FQWPOIDYY > 60)
      FQ0JW02.FQWPOIDN3 = 19;
    else
      FQ0JW02.FQWPOIDN3 = 20;
    end
    /* --------------- y2k in end ------------------*/
    FQ0JW02.FQWPCPOID = FQ0JM002.FQ0JMPO;
    FQ0JW02.FQWPOIDN6 = FQ0JM002.FQ0JMPO;
    FQ0JW02.PC-PO-ID-MO-RNG = FQ0JW02.FQWPOIDN9;
    VINSPH02.PC-PO-ID-MO-RNG = FQ0JW02.PC-PO-ID-MO-RNG;
  end

   /* ------------------------------------------------------------*/
   /* Delete the old row in the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VINSPH02" ("D ", SQLCA, VINSPH02) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row not found, indicate the data was updated by another.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        FQ0JW00.FQ0JWMAP = "1"; /* Map number*/
        FQ0JW00.FQ0JWSWR = "Y"; /* Request data switch*/
        FQ0JW00.FQ0JWSWF = "Y"; /* Format map switch*/

        FQWREC.XXXMODID = "263"; /* Module identification*/
        FQWREC.XXXMSGNO = 20; /* Indicate updated by another*/
        set FQ0JW02 empty;
        set FQ0JM002 initial;

      else

        FQWREC.XXXMODID = "263";
        FQWREC.XXXMSGNO = 62; /* Indicate delete completed*/

      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "263"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSPH02"; /* Table view name*/
  TA1REC.TA1TBLKE = VINSPH02.VINSPH02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0J263

// Check duplicate
Function FQ0J267()
   /* ------------------------------------------------------------*/
   /* Verify that row not alreay on the data base.*/
   /* ------------------------------------------------------------*/

  FQ0JW02.FQYCNT1 = 0;
  FQYREC.FQYFUNC = "SB";

  FQ0JS24(); /* Select VINSPH02 (SB option)*/
  FQ0JW02.FQYCNT1 = FQYREC.FQYCNT1;

   /* --------------------------------------------------------------*/
   /* If row was found, indicate that user need to update, not add*/
   /* --------------------------------------------------------------*/
  if (FQ0JW02.FQYCNT1 > 0) /* If row(s) was found*/

    set FQ0JM002.CATOAP cursor, bold;
    converseLib.validationFailed(64); /* Row exists. update it, not add.*/
    FQWREC.XXXMODID = "267"; /* Module identification*/

    exit stack; /* Return to display map*/

  end

end // end FQ0J267

// validate season cd and year
Function FQ0J270()
   /* ------------------------------------------------------------*/
   /* Validate If Both Season Code And Season Year Are Entered*/
   /* If Yes Validate Against The DPROD.VCOLOR02 Table*/
   /* ------------------------------------------------------------*/

  if (FQ0JM002.FQ0XSECD == " " && FQ0JM002.FQ0XSEYR == 0)
    /* Next sentence*/
  else
    if ((FQ0JM002.FQ0XSECD != " " && FQ0JM002.FQ0XSEYR == 0)
     || (FQ0JM002.FQ0XSECD == " " && FQ0JM002.FQ0XSEYR != 0))

      set FQ0JM002.FQ0XSECD cursor, bold; /* Highlight*/
      set FQ0JM002.FQ0XSEYR cursor, bold; /* Highlight*/
      converseLib.validationFailed(91); /* Both season and year required*/

    else

      FQ0JS25(); /* Validate Season Code And Year*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end FQ0J270

// Purge any temporary storage
Function FQ0JS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FQ0JW01 empty; /* M001 display storage*/

  FQ0JW00.FQ0JWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FQ0JW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FQ0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* System error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0JS01

// Update storage page
Function FQ0JS02()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  FQ0JW01.XXXTSLEN = FQ0JW00.XXXTSLEN; /* page length*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FQ0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0JS02

// Read temporary storage page
Function FQ0JS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FQ0JW01.XXXTSLEN = FQ0JW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FQ0JW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FQ0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0JS03

// Select FCTY
Function FQ0JS21()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FY1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  FY1REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  FY1REC.FY1FCTYC = FQ0JM002.FY1FCTYC; /* Factory*/

   /* ------------------------------------------------------------*/
   /* Select FCTY.*/
   /* ------------------------------------------------------------*/
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not ffqilable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not ffqilable*/

    converseLib.validationFailed(2); /* Indicate not ffqilable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0JS21

// Select SYCLR
Function FQ0JS22()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  PG2REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
   /* E '02'         TO PG2REC.XGPCD;           /* GPC code*/
  PG2REC.SY1STNBR = FQ0JM002.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FQ0JM002.SY2CLRID; /* Color ID*/
  PG2REC.XDMCD = FQ0JM002.XDMCD; /* Dimension*/

   /* ------------------------------------------------------------*/
   /* Select SYCLR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not found, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0JS22

// Sel VINSPH01 w/ blank as valid
Function FQ0JS24()
   /* ------------------------------------------------------------*/
   /* Clearing of copybook and building a key was done in*/
   /* FQ0J0250 for ADD.*/
   /* ------------------------------------------------------------*/
   /* Select VINSPH02*/
   /* ------------------------------------------------------------*/
  set VINSPH02 empty;
   /* MOVE 'SC' TO FQYREC.FQYFUNC;*/
  FQYREC.FQYCNT1 = 0;
  VINSPH02.XGPCD = "02"; /* GPC*/
  VINSPH02.XWHCD = FQ0JM002.XWHCD; /* warehouse code*/
   /* TCS change begin*/
  VINSPH02.XPCCD = FQ0JM002.XPCCD; /* Prod cat code*/
   /* TCS change end*/
  VINSPH02.SY1STNBR = FQ0JM002.SY1STNBR; /* style*/
  VINSPH02.SY2CLRID = FQ0JM002.SY2CLRID; /* color*/
  VINSPH02.XDMCD = FQ0JM002.XDMCD; /* dim*/
  VINSPH02.YDFCD = FQ0JM002.YDFCD; /* defect code*/
  VINSPH02.FY1FCTYC = FQ0JM002.FY1FCTYC; /* factory*/
   /* TCS change begin*/
  VINSPH02.FQ0XSECD = FQ0JM002.FQ0XSECD; /* Season code*/
  VINSPH02.FQ0XSEYR = FQ0JM002.FQ0XSEYR; /* Season year*/
   /* TCS change end*/

  if (FQ0JM002.FQ0JMPO == 0)
    VINSPH02.PC-PO-ID-MO-RNG = 0;
  else
    FQ0JW02.FQWPCPOID = FQ0JM002.FQ0JMPO;
    FQ0JW02.FQWPOIDN6 = FQ0JW02.FQWPCPOID;
    /* ---------------- y2k out begin ---------------*/
    /* MOVE 19 TO FQ0JW02.FQWPOIDN3;*/
    /* ---------------- y2k out end -----------------*/
    /* ---------------- y2k in  begin ---------------*/
    if (FQ0JW02.FQWPOIDYY > 60)
      FQ0JW02.FQWPOIDN3 = 19;
    else
      FQ0JW02.FQWPOIDN3 = 20;
    end
    /* ---------------- y2k in end ------------------*/
    FQ0JW02.PC-PO-ID-MO-RNG = FQ0JW02.FQWPOIDN9;
    VINSPH02.PC-PO-ID-MO-RNG = FQ0JW02.PC-PO-ID-MO-RNG;
  end

   /* ------------------------------------------------------------*/
   /* Select VINSPH02 with 2nd unique option.*/
   /* ------------------------------------------------------------*/
  try
    call "VINSPH02" (FQYREC, SQLCA, VINSPH02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* Null return*/
      return;
    end

    /* F SQLCA.SQLCODE EQ -305;       /* Null return*/
    /* MOVE 0 TO FQYREC.FQYCNT1;     /* zero to count*/
     /* EZERTN;*/
    /* ND;*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL"; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSPH02"; /* Table view name*/
  TA1REC.TA1PGMAP = VINSPH02.VINSPH02-KEY; /* Program application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0JS24

// Select from DPROD.VCOLOR02
Function FQ0JS25()
   /* ------------------------------------------------------------*/
   /* Validate Season Code And Season Year*/
   /* ------------------------------------------------------------*/


  if (FQ0JM002.FQ0XSECD in XSETBL.XSECD) /* Validate In Season Code Table*/
                                  /* Do Nothing*/
  else

    set FQ0JM002.FQ0XSECD cursor, bold; /* Highlight*/
    converseLib.validationFailed(92); /* Invalid season/year*/

  end

  if (FQ0JM002.FQ0XSECD in XSNTBL.XSECD &&  /* Validate In Season Year Table*/
  FQ0JM002.FQ0XSEYR in XSNTBL.XSNYR)       

  else

    set FQ0JM002.FQ0XSEYR cursor, bold; /* Highlight*/
    converseLib.validationFailed(92); /* Invalid season/year*/

  end
  if (FQ0JM002.SY1STNBR != " "
   && FQ0JM002.SY2CLRID != " "
   && FQ0JM002.XDMCD != " ")

    FQ0JS26(); /* Call DPROD.VCOLOR02*/
    if (SQLCA.VAGen_SQLCODE == 0)

      if (SYCREC.XSECD != FQ0JM002.FQ0XSECD /* Validate With Fetched Value*/
       || SYCREC.XSNYR != FQ0JM002.FQ0XSEYR)

        converseLib.validationFailed(92); /* Invalid season/year*/

      end

    end

  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end FQ0JS25

// Select from DPROD.VCOLOR02
Function FQ0JS26()
   /* ------------------------------------------------------------*/
   /* Call IOMOD IO0560 for Validating Season Year And Code*/
   /* ------------------------------------------------------------*/

  SYCREC.SY1STNBR = FQ0JM002.SY1STNBR;
  SYCREC.SY2CLRID = FQ0JM002.SY2CLRID;
  SYCREC.XDMCD = FQ0JM002.XDMCD;
  SYCREC.XGPCD = FQWREC.XGPCD;

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select VCOLOR02*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If Row Found*/

    /* next sentence*/

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

      FQWREC.XXXMODID = "S26"; /* Module identification*/
      converseLib.validationFailed(94); /* Indicate system error*/
    else
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        converseLib.validationFailed(2); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else

        converseLib.validationFailed(1); /* Indicate system error*/
      end

    end

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
    TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

  FQWREC.XXXMODID = "270"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
end // end FQ0JS26

//*** RECORD=FQ0JW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FQ0JW00 type basicRecord
  10 FQ0JWIXM FQ0JWIXM ; 
  10 FQ0JWIX2 FQ0JWIX2 ; 
  10 FQ0JWPNT FQ0JWPNT ; 
  10 FQ0JWCNT FQ0JWCNT ; 
  10 FQ0JWDT num(9) ; // work date field
    15 FQ0JWDT3 num(3) ; // work date field(first 3 digit)
    15 FQ0JWDT6 num(6) ; // work date field(next  6 digit)
  10 FQ0JWEOC FQ0JWEOC ; 
  10 * char(1) ; 
  10 FQ0JWSWF FQ0JWSWF ; 
  10 FQ0JWSWR FQ0JWSWR ; 
  10 FQ0JWSWU FQ0JWSWU ; 
  10 FQ0JWASW FQ0JWASW ; 
  10 FQ0JWLSW FQ0JWLSW ; 
  10 FQ0JWDSW FQ0JWDSW ; 
  10 FQ0JWMAP FQ0JWMAP ; 
  10 * char(1) ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end FQ0JW00

//*** RECORD=FQ0JW01 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record FQ0JW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(2797) ; 
    10 FQWPOIDN9 FQWPOIDN9 ; 
      15 FQWPOIDN3 FQWPOIDN3 ; 
      15 FQWPOIDN6 FQWPOIDN6 ; 
    10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
    10 FQ0JWSEL FQ0JWSEL [16] ; 
    10 XWHCD XWHCD [16] ; 
    10 SY1STNBR SY1STNBR [16] ; 
    10 SY2CLRID SY2CLRID [16] ; 
    10 XDMCD XDMCD [16] ; 
    10 YDFCD YDFCD [16] ; 
    10 FY1FCTYC FY1FCTYC [16] ; 
    10 XPCCD XPCCD [16] ; 
    10 FQ0XSECD FQ0XSECD [16] ; 
    10 FQ0XSEYR FQ0XSEYR [16] ; 
    10 FQWPCPOID FQWPCPOID [16] ; 
    10 XXXSTAT XXXSTAT [16] ; 
    10 FQ0JWRESN1 FQ0JWRESN1 [16] ; 
    10 FQ0JWRESN2 FQ0JWRESN2 [16] ; 
    10 XXXUSER XXXUSER [16] ; 
    10 ZZZSDT ZZZSDT [16] ; 
    10 ZZZCHGDT ZZZCHGDT [16] ; 
    10 ZZZCHGTM ZZZCHGTM [16] ; 
    10 ZZZCHGCT ZZZCHGCT [16] ; 
end // end FQ0JW01

//*** RECORD=FQ0JW02 ****
// ------------------------
// Map 011 display storage.
// ------------------------
// ***********************
Record FQ0JW02 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 XGPCD XGPCD ; 
  10 XWHCD XWHCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XDMCD XDMCD ; 
  10 XDMABRV XDMABRV ; 
  10 YDFCD YDFCD ; 
  10 YDFDESC YDFDESC ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 XPCCD XPCCD ; 
  10 FQ0XSECD FQ0XSECD ; 
  10 FQ0XSEYR FQ0XSEYR ; 
  10 FQWPCPOID FQWPCPOID ; 
  10 FQWPOIDN9 FQWPOIDN9 ; 
    15 FQWPOIDN3 FQWPOIDN3 ; 
    15 FQWPOIDN6 FQWPOIDN6 ; 
      20 FQWPOIDYY FQWPOIDYY ; 
      20 FQWPOIDMM FQWPOIDMM ; 
  10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
  10 XXXSTAT XXXSTAT ; 
  10 FQ0JWRESN1 FQ0JWRESN1 ; 
    15 FQ0JW-RESN1-CHAR31 FQ0JW-RESN1-CHAR31 ; 
    15 FQ0JW-RESN1-CHAR29 FQ0JW-RESN1-CHAR29 ; 
  10 FQ0JWRESN2 FQ0JWRESN2 ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 XXXUSER XXXUSER ; 
  10 FQYCNT1 FQYCNT1 ; 
  10 FQ0JWIXT FQ0JWIXT ; 
  10 FQ0JWFLG FQ0JWFLG ; 
end // end FQ0JW02

//*** RECORD=FQ0JW03 ****
// ------------------------
// Map 011 display storage.
// ------------------------
// ***********************
Record FQ0JW03 type basicRecord
  10 FQ0JWRESN1 FQ0JWRESN1 ; 
    15 FQ0JW-RESN1-CHAR31 FQ0JW-RESN1-CHAR31 ; 
    15 FQ0JW-RESN1-CHAR29 FQ0JW-RESN1-CHAR29 ; 
end // end FQ0JW03

// second 30 char comment 1
DataItem FQ0JW-RESN1-CHAR29 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first 30 char comment 1
DataItem FQ0JW-RESN1-CHAR31 char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add function request switch
DataItem FQ0JWASW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count for modified data
DataItem FQ0JWCNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data found switch
DataItem FQ0JWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FQ0JWEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table check flag
DataItem FQ0JWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ0JWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ0JWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// table check counter
DataItem FQ0JWIXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Del function request switch
DataItem FQ0JWLSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem FQ0JWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pointer
DataItem FQ0JWPNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem FQ0JWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FQ0JWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FQ0JWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FQ0JWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

