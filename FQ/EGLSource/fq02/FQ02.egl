package fq02;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fq.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=FQ02 ****
// This application allows users to view a list of defects,
// descriptions, quantities, and percent of total defects for
// a particular set of parameters.
// 
// The user must enter 'FACTORY', 'DEFECT RANGE', 'DIVISION',
// 'STYLE', and 'COLOR'.  Both 'PO MONTH RANGE' and 'DIMENSION'
// will default if left blank.  The program will obtain a list
// of defects, their quantities, descriptions, and will also
// calculate the percent each defect is of the total defects
// for the key.
// 
// The user may select a particular defect and be transfered
// to FQ03, NATURE DEFECT PERCENT DETAIL.  There he will be
// able to see more details concerning a defect.
// 
// The user may scroll forward and backward to view all the
// categories by pressing PF7 and PF8.  He may exit any to any
// allowed application, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      05/13/91  RHETRI  New application.
//          06/24/93  MHUYNH  Regen due to change to XSFQS05
// y2kproj  12-03-97  oricha  y2k modifications:  regen to pick
//                            up xx0xs01 changes & to pick up
//                            xsfqs05 century calc changes.
// *********************
Program FQ02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FQ00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FQ02W00 FQ02W00; // record
  FQ02W01 FQ02W01; // record
  FQ2REC FQ2REC; // record
  FQAREC FQAREC; // record
  FQWREC FQWREC; // record
  FQZREC FQZREC; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YDCREC YDCREC; // record
  YDFREC YDFREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use XDVTBL; // table
  use YDFTBL; // table
  use YDCTBL; // table
  use FQ02M.FQ02M001,  // forms
      FQ02M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFQ001: XPFQ001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    set FQ02M001 initial; /* M001 input/output*/
    set FQ02W00 empty; /* Working storage*/
    set FQ02W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/

    FQ02W00.FQ02WSWF = "Y"; /* Format the map flag*/
    FQ02W00.FQ02WSWR = "N"; /* data not requested*/

     /* ------------------------------------------------------------*/
     /* If defect code passed, but name missing - obtain it.*/
     /* ------------------------------------------------------------*/
    if (FQWREC.YDFCD > " " /* if defect exists*/
     && FQWREC.YDFDESC == " ") /* and defect name missing*/

      YDFREC.YDFCD = FQWREC.YDFCD; /* Format key*/
      YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
      if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
        FQWREC.YDFDESC = YDFTBL.YDFDESC[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* If complete key is present, request data. (Defaults exist.)*/
     /* ------------------------------------------------------------*/
    if (FQWREC.FY1PFYCD > " " /* If origin factory exists*/
     && FQWREC.SY1STNBR > " ") /* and style number exists*/

      if (FQWREC.YDCCD > " ") /* If defect category exists*/
        FQ02W00.FQ02WSWR = "Y"; /* Request data*/
      else
        if (FQWREC.FQWBDFCT > " " /* If beg defect code*/
         && FQWREC.FQWEDFCT > " ") /* and end defect code*/
          FQ02W00.FQ02WSWR = "Y"; /* Request data*/
        end
      end
    end

    FQ02W00.FQ02MBDT = FQWREC.FQ1IDBDT; /* Beg date*/
    FQ02W00.FQ02MEDT = FQWREC.FQ1IDXDT; /* End date*/

     /* ------------------------------------------------------------*/
     /* Flow to check for default dates.*/
     /* ------------------------------------------------------------*/
    goto FQ02000; /* Check for default dates*/


    FQ02000: FQ02000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ02001; /* Converse the main process*/


    FQ02001: FQ02001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ02001; /* Converse the main process*/


  end // end main
end // end FQ02

// Check for default dates
Function FQ02000()
   /* ------------------------------------------------------------*/
   /* If date range is missing, call date routine for defaults.*/
   /* ------------------------------------------------------------*/
  if (FQWREC.FQ1IDBDT == 0 /* If begin date is missing*/
   || FQWREC.FQ1IDXDT == 0) /* Or end date is missing*/

    /* ------------------------------------------------------------*/
     /* Clear copybook.*/
    /* ------------------------------------------------------------*/
    set FQZREC empty; /* clear date edit record*/

    FQZREC.FQZBEGRG = FQWREC.FQ1IDBDT; /* Beg date*/
    FQZREC.FQZENDRG = FQWREC.FQ1IDXDT; /* end date*/

    /* ------------------------------------------------------------*/
     /* Edit range.  Send YYMMMM - receive back CCYYMMMM.*/
    /* ------------------------------------------------------------*/
    XSFQS05(); /* Common date edit routine*/

    /* ------------------------------------------------------------*/
     /* Move dates into FQWREC.*/
    /* ------------------------------------------------------------*/
    FQWREC.FQ1IDBDT = FQZREC.FQZBCYMM; /* Begin date*/
    FQWREC.FQ1IDXDT = FQZREC.FQZECYMM; /* End date*/

    FQ02W00.FQ02MBDT = FQZREC.FQZBCYMM; /* Begin date*/
    FQ02W00.FQ02MEDT = FQZREC.FQZECYMM; /* End date*/

  else

    FQ02W00.FQ02MBDT = FQWREC.FQ1IDBDT; /* Beg date*/
    FQ02W00.FQ02MEDT = FQWREC.FQ1IDXDT; /* End date*/

  end


end // end FQ02000

// Main process to display a map
Function FQ02001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FQ02100(); /* Obtain the data to display*/

  FQ02200(); /* Format and display the map*/

  FQ02300(); /* Check attention identifier*/

  FQ02400(); /* Reset fields to normal intensity*/

  FQ02500(); /* Verify the entered data*/

  FQ02600(); /* Process valid input request*/


end // end FQ02001

// Obtain the data to display
Function FQ02100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ02W00.FQ02WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  FQ02W00.XXXTSLEN = 770; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  FQ02S01(); /* Purge temporary storage*/

   /* --------------------------------------------------------*/
   /* Check for defect range codes or defect category code.*/
   /* --------------------------------------------------------*/
  FQ02110(); /* Check for defect codes*/

   /* --------------------------------------------------------*/
   /* Open DFDTL.*/
   /* --------------------------------------------------------*/
  FQ02120(); /* Open DFDTL*/

   /* ----------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ----------------------------------------------------------*/
  while (FQ02W00.FQ02WEOC == "N") /* Until end of cursor*/

    FQ02130(); /* Fetch DFDTL*/

    if (FQ02W00.FQ02WEOC == "N") /* If row found*/

      /* ----------------------------------------------------------*/
       /* Save data for display.*/
      /* ----------------------------------------------------------*/
      FQ02140(); /* Save data*/

      /* ----------------------------------------------------------*/
       /* Add quantity to grand total.*/
      /* ----------------------------------------------------------*/
      FQ02W00.FQ02WTOT = FQ02W00.FQ02WTOT + FQ2REC.FQ2DEFQT;

      /* ---------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ---------------------------------------------------------*/
      if (FQ02W00.FQ02WIXM > 13) /* Page is full*/
        FQ02150(); /* Add page to temporary storage*/
      end

    end
  end

   /* ----------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ----------------------------------------------------*/
  if (FQ02W00.FQ02WIXM > 1) /* If line count greater than 1*/

    FQ02150(); /* Add page to temp storage*/

  end

   /* ------------------------------------------------------------*/
   /* Close DFDTL*/
   /* ------------------------------------------------------------*/
  FQ02160(); /* Close DFDTL*/

   /* ------------------------------------------------------------*/
   /* If no data to display, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (FQ02W00.TA5TSQIX == 0) /* No pages formatted*/

    FQWREC.XXXMODID = "110"; /* Module identification*/
    converseLib.validationFailed(17); /* No data was found to display*/

    return; /* Return to previous process*/

  else

    /* ---------------------------------------------------------*/
     /* Select summed DFDTL for defect grand total.*/
    /* ---------------------------------------------------------*/
    FQ02170(); /* Select summed DFDTL*/

  end

   /* ---------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ---------------------------------------------------------*/

  if (FQWREC.XXXMSGNO == 0) /* No message to display*/
    FQ02W00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FQ02W00.FQ02WSWR = "N"; /* Request for data switch*/


end // end FQ02100

// Check for defect code keys
Function FQ02110()
   /* ------------------------------------------------------------*/
   /* If defect range is missing, use category to determine the*/
   /* range.*/
   /* ------------------------------------------------------------*/
  if (FQWREC.FQWBDFCT == " " /* If beg defect missing*/
   || FQWREC.FQWEDFCT == " ") /* or end defect missing*/

    /* ------------------------------------------------------------*/
     /* Determine the beginning and ending defect code for a part-*/
     /* icular defect category.*/
    /* ------------------------------------------------------------*/
    if (FQWREC.YDCCD in YDFTBL.YDCCD) /* If cat on dfct table*/
      FQ02W00.FQ02WIX2 = sysVar.arrayIndex; /* save position*/
      FQWREC.FQWBDFCT = YDFTBL.YDFCD[FQ02WIX2]; /* begin defect*/

      while (YDFTBL.YDCCD[FQ02WIX2] == FQWREC.YDCCD) /* If cat EQ cat*/
        FQWREC.FQWEDFCT = YDFTBL.YDFCD[FQ02WIX2]; /* end defect*/

        FQ02W00.FQ02WIX2 = FQ02W00.FQ02WIX2 + 1; /* add 1 to counter*/
      end

    end
  end


end // end FQ02110

// Open DFDTL
Function FQ02120()
   /* ------------------------------------------------------------*/
   /* Clear copybooks.*/
   /* ------------------------------------------------------------*/
  set FQAREC empty; /* Clear copybook*/
  set FQ2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format fqAREC.*/
   /* ------------------------------------------------------------*/
  FQAREC.FQAFUNCD = "S2"; /* Function code*/
  FQAREC.FQ1IDBDT = FQWREC.FQ1IDBDT; /* beg date*/
  FQAREC.FQ1IDXDT = FQWREC.FQ1IDXDT; /* ebd date*/
  FQAREC.FQWBDFCT = FQWREC.FQWBDFCT; /* beg defect*/
  FQAREC.FQWEDFCT = FQWREC.FQWEDFCT; /* end defect*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  FQ2REC.SY1STNBR = FQWREC.SY1STNBR; /* style*/
  FQ2REC.SY2CLRID = FQWREC.SY2CLRID; /* color*/
  FQ2REC.XDMCD = FQWREC.XDMCD; /* dim*/
  FQ2REC.FY1PFYCD = FQWREC.FY1PFYCD; /* fcty origin*/
  FQ2REC.XDVCD = FQWREC.XDVCD; /* division code*/

   /* ------------------------------------------------------------*/
   /* Open DFDTL.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5840" (FQAREC, SQLCA, FQ2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, init switches & return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FQ02WEOC = "N"; /* End of cursor switch*/
    FQ02W00.FQ02WIXM = 1; /* Display line index*/
    FQ02W00.FQ02WTOT = 0; /* total defects*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set FQ02M001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFDTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FQ2REC.FQ2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ02120

// Fetch DFDTL
Function FQ02130()
   /* ------------------------------------------------------------*/
   /* Format FQAREC.*/
   /* ------------------------------------------------------------*/
  FQAREC.FQAFUNCD = "N2"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Fetch DFDTL.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5840" (FQAREC, SQLCA, FQ2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Or row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        FQ02W00.FQ02WEOC = "Y"; /* Indicate end of cursor*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFDTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FQ2REC.FQ2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ02130

// Save data
Function FQ02140()
   /* ------------------------------------------------------------*/
   /* Obtain defect description.*/
   /* ------------------------------------------------------------*/

  if (FQ2REC.YDFCD in YDFTBL.YDFCD)
    FQ02W01.YDFDESC[FQ02WIXM] = YDFTBL.YDFDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* Save the data for display.*/
   /* ------------------------------------------------------------*/
  FQ02W01.YDFCD[FQ02WIXM] = FQ2REC.YDFCD; /* Defect category*/
  FQ02W01.FQ2DEFQT[FQ02WIXM] = FQ2REC.FQ2DEFQT; /* Defect quantity*/

   /* ------------------------------------------------------------*/
   /* Add to line counter.*/
   /* ------------------------------------------------------------*/
  FQ02W00.FQ02WIXM = FQ02W00.FQ02WIXM + 1; /* Increment line index*/


end // end FQ02140

// Add page to temporary storage
Function FQ02150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FQ02W01.XXXTSLEN = FQ02W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FQ02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    FQ02W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Reset to 0*/
    FQ02W00.FQ02WIXM = 1; /* Reset to 1*/
    set FQ02W01 empty; /* M001 display storage*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ02150

// Close DFDTL
Function FQ02160()
   /* ------------------------------------------------------------*/
   /* Format fqAREC.*/
   /* ------------------------------------------------------------*/
  FQAREC.FQAFUNCD = "C2"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Close DFDTL.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5840" (FQAREC, SQLCA, FQ2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFDTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ02160

// Select summed DFDTL
Function FQ02170()
   /* ------------------------------------------------------------*/
   /* Clear copybooks.*/
   /* ------------------------------------------------------------*/
  set FQAREC empty; /* Clear copybook*/
  set FQ2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format fqAREC.*/
   /* ------------------------------------------------------------*/
  FQAREC.FQAFUNCD = "SS"; /* Function code*/
  FQAREC.FQ1IDBDT = FQWREC.FQ1IDBDT; /* beg date*/
  FQAREC.FQ1IDXDT = FQWREC.FQ1IDXDT; /* ebd date*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  FQ2REC.SY1STNBR = FQWREC.SY1STNBR; /* style*/
  FQ2REC.SY2CLRID = FQWREC.SY2CLRID; /* color*/
  FQ2REC.XDMCD = FQWREC.XDMCD; /* dim*/
  FQ2REC.FY1PFYCD = FQWREC.FY1PFYCD; /* fcty origin*/
  FQ2REC.XDVCD = FQWREC.XDVCD; /* division code*/
  FQ2REC.YDCCD = "*"; /* Defect cat code*/

   /* ------------------------------------------------------------*/
   /* Select summed DFDTL.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5840" (FQAREC, SQLCA, FQ2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If normal return code*/

      /* ------------------------------------------------------------*/
       /* Save the data for display.*/
      /* ------------------------------------------------------------*/
      FQ02W00.FQ02WGTT = FQ2REC.FQ2DEFQT; /* save amount*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "170"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set FQ02M001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUMMED";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFDTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FQ2REC.FQ2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ02170

// Format and converse the map
Function FQ02200()
   /* ------------------------------------------------------------*/
   /* If no error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* If error found*/

    FQWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  if (FQ02W00.FQ02WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FQ02W00.FQ02WSWF == "Y") /* Map must be formatted*/
      FQ02210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQ02M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FQ02M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FQ02M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FQWREC.XXXMSGNO != 0) /* Message to display*/

      if (FQWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FQWREC.XXXMSGNO);
      end /* Message number*/
    else
      FQ02M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FQ02M001.XXXMODID = FQWREC.XXXMODID; /* Module identification*/

    set FQ02M001 alarm; /* Indicate sound alarm*/

  end

  converse FQ02M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQWREC.XXXMODID = " "; /* Module identification*/
  FQWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* message text*/

  COMMAREA.CATOAP = FQ02M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FQ02M001.CAITEM; /* Application data*/


end // end FQ02200

// Load map fields
Function FQ02210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FQ02M001 initial;

  FQ02W00.FQ02WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FQ02W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FQ02W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (FQ02W00.XXXTSPAG > FQ02W00.TA5TSQIX) /* Desired greater highest*/
        FQ02W00.XXXTSPAG = FQ02W00.TA5TSQIX; /* Default to highest*/
      end

      FQ02S02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    FQ02M001.XXXTSPAG = FQ02W00.XXXTSPAG; /* Current page*/
    FQ02M001.TA5TSQIX = FQ02W00.TA5TSQIX; /* Highest page*/

    set FQ02M001.XXXLITPG skip; /* "PAGE" literal*/
    set FQ02M001.XXXLITOF skip; /* "OF" literal*/
    set FQ02M001.XXXTSPAG skip; /* current page*/
    set FQ02M001.TA5TSQIX skip; /* max page*/

  end

   /* ------------------------------------------------------------*/
   /* Format key data in the map.*/
   /* ------------------------------------------------------------*/

  FQ02M001.FY1PFYCD = FQWREC.FY1PFYCD; /* origin factory*/
  FQ02M001.SY1STNBR = FQWREC.SY1STNBR; /* style nbr*/
  FQ02M001.SY2CLRID = FQWREC.SY2CLRID; /* color id*/
  FQ02M001.XDMCD = FQWREC.XDMCD; /* dimension*/
  FQ02M001.XDVCD = FQWREC.XDVCD; /* or division*/

  FQ02M001.FQ02MBDT = FQ02W00.FQ02MBYM; /* beg date*/
  FQ02M001.FQ02MEDT = FQ02W00.FQ02MEYM; /* end date*/

  FQ02M001.FQ02MBDF = FQWREC.FQWBDFCT; /* beg defect*/
  FQ02M001.FQ02MEDF = FQWREC.FQWEDFCT; /* end defect*/
  FQ02M001.YDCDESC = FQWREC.YDCDESC; /* def cat name*/

   /* ------------------------------------------------------------*/
   /* If data exists, make fields visable, calc %s, & set cursor.*/
   /* ------------------------------------------------------------*/
  if (FQ02W01.YDFCD[1] > " ") /* If data exists*/

    set FQ02M001.FQ02MHDR skip; /* make visable*/
    FQ02M001.FQ02WTOT = FQ02W00.FQ02WTOT; /* Total*/
    FQ02M001.FQ02WGTT = FQ02W00.FQ02WGTT; /* Grand Total*/

    FQ02211(); /* Calculate percents*/

    set FQ02M001.FQ02MSEL[1] cursor, normal; /* Position cursor*/
  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FQ02W00.FQ02WIXM = 1; /* Initialize line index*/

  while (FQ02W00.FQ02WIXM <= 13 /* Until screen is full*/
   && FQ02W01.YDFCD[FQ02WIXM] > " ") /* and data exists*/

    FQ02M001.FQ02MSEL[FQ02WIXM] = FQ02W01.FQ02MSEL[FQ02WIXM];
    FQ02M001.YDFCD[FQ02WIXM] = FQ02W01.YDFCD[FQ02WIXM];
    FQ02M001.YDFDESC[FQ02WIXM] = FQ02W01.YDFDESC[FQ02WIXM];
    FQ02M001.FQ2DEFQT[FQ02WIXM] = FQ02W01.FQ2DEFQT[FQ02WIXM];
    FQ02M001.FQ02WPCT[FQ02WIXM] = FQ02W01.FQ02WPCT[FQ02WIXM];
    FQ02M001.FQ02WPC2[FQ02WIXM] = FQ02W01.FQ02WPC2[FQ02WIXM];

    /* ------------------------------------------------------------*/
     /* Make line visable.*/
    /* ------------------------------------------------------------*/
    set FQ02M001.FQ02MSEL[FQ02WIXM] normal; /* Make visable*/

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    FQ02W00.FQ02WIXM = FQ02W00.FQ02WIXM + 1; /* Increment line index*/

  end


end // end FQ02210

// Calculate percents
Function FQ02211()
   /* ------------------------------------------------------------*/
   /* If the total is greater than zero, calculate percents.*/
   /* ------------------------------------------------------------*/
  if (FQ02W00.FQ02WTOT > 0) /* If total greater than zero*/

    /* ------------------------------------------------------------*/
     /* Calculate the percent each line is of the total defects.*/
    /* ------------------------------------------------------------*/
    FQ02W00.FQ02WIXM = 1; /* Initialize line index*/

    while (FQ02W00.FQ02WIXM <= 13 /* Until screen is full*/
     && FQ02W01.YDFCD[FQ02WIXM] > " ") /* and data exists*/

      /* ------------------------------------------------------------*/
       /* Divide line quantity by total defects for defect percent*/
       /* Multiply by 100 to get nnn.nn format.*/
       /* Save percent in storage.*/
      /* ------------------------------------------------------------*/
      FQ02W00.FQ02WFDA = mathLib.round(FQ02W01.FQ2DEFQT[FQ02WIXM] / FQ02W00.FQ02WTOT, -mathLib.decimals(FQ02W00.FQ02WFDA));

      FQ02W00.FQ02WFDA = FQ02W00.FQ02WFDA * 100; /* Times 100*/

      FQ02W01.FQ02WPCT[FQ02WIXM] = FQ02W00.FQ02WFDA; /* percent*/

      /* ------------------------------------------------------------*/
       /* Divide line quantity by total category for category percent*/
       /* Multiply by 100 to get nnn.nn format.*/
       /* Save percent in storage.*/
      /* ------------------------------------------------------------*/
      FQ02W00.FQ02WFDA = mathLib.round(FQ02W01.FQ2DEFQT[FQ02WIXM] / FQ02W00.FQ02WGTT, -mathLib.decimals(FQ02W00.FQ02WFDA));

      FQ02W00.FQ02WFDA = FQ02W00.FQ02WFDA * 100; /* Times 100*/

      FQ02W01.FQ02WPC2[FQ02WIXM] = FQ02W00.FQ02WFDA; /* percent*/

      /* ------------------------------------------------------------*/
       /* Add to counter.*/
      /* ------------------------------------------------------------*/
      FQ02W00.FQ02WIXM = FQ02W00.FQ02WIXM + 1; /* Add to counter*/

    end
  end


end // end FQ02211

// Check attention identifier
Function FQ02300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FQ02W00.FQ02WSWR == "Y") /* Request for data switch*/
      set FQ02W01 empty;
    end

    FQ02W00.FQ02WSWF = "Y"; /* Format the map switch*/
    FQ02W00.FQ02WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FQ02M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FQ02S01(); /* Purge any temporary storage*/

      XSFQS01(); /* Exit to another application*/

      set FQ02M001.CATOAP cursor, bold; /* Highlight*/

    else
      converseLib.validationFailed(18); /* Indicate PF key not valid*/
      FQWREC.XXXMODID = "300"; /* Process name*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf4 /* PF4 was pressed*/
   || converseVar.eventKey is pf5 /* PF5 was pressed*/
   || converseVar.eventKey is pf14) /* PF14 was pressed*/
    /* OR EZEAID IS PF15             ; PF15 was pressed*/
    /* OR EZEAID IS PF16             ; PF16 was pressed*/
    /* OR EZEAID IS PF17             ; PF17 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FQ02M001"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FQ0B"; /* Set to factory application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FQ0C"; /* Set to factory ratio*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FQ0D"; /* Set to customer screen*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FQ0E"; /* Set to customer ratio screen*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FQ0F"; /* Set to warehouse screen*/
    end

    FQ02S01(); /* Purge any temporary storage*/

    XSFQS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9)  /* and PF9 was not pressed*/

    FQWREC.XXXMODID = "300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FQ02300

// Reset highlighted fields
Function FQ02400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/
  set FQ02M001.CATOAP initialAttributes; /* TO application*/
  set FQ02M001.CAITEM initialAttributes; /* Application data*/

  set FQ02M001.SY1STNBR initialAttributes; /* style nbr*/
  set FQ02M001.SY2CLRID initialAttributes; /* color id*/
  set FQ02M001.XDMCD initialAttributes; /* dimension*/
  set FQ02M001.XDVCD initialAttributes; /* division*/
  set FQ02M001.FY1PFYCD initialAttributes; /* origin factory*/

  set FQ02M001.FQ02MBDT initialAttributes; /* beg date*/
  set FQ02M001.FQ02MEDT initialAttributes; /* end date*/

  set FQ02M001.FQ02MBDF initialAttributes; /* beg defect*/
  set FQ02M001.FQ02MEDF initialAttributes; /* end defect*/

   /* ------------------------------------------------------------*/
   /* Loop through lines, setting lines with data visable.*/
   /* ------------------------------------------------------------*/
  FQ02W00.FQ02WIXM = 1; /* Initialize line index*/

  while (FQ02W00.FQ02WIXM <= 13 /* Until end of lines*/
   && FQ02W01.YDFCD[FQ02WIXM] > " ") /* and data exists*/

    set FQ02M001.FQ02MSEL[FQ02WIXM] normal; /* Reset select flag*/

    FQ02W00.FQ02WIXM = FQ02W00.FQ02WIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.XDVCD == "?"    /* division list requested*/
   || FQ02M001.FQ02MBDF == "?" /* defect list requested*/
   || FQ02M001.FQ02MEDF == "?") /* defect list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FQWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(24); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/
    end

  else
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of division codes.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.XDVCD == "?") /* division list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DIVISION CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDV01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FQ02M001.XDVCD = FQWREC.XDVCD; /* Restore prior code*/
    else

      FQ02M001.XDVCD = XDVTBL.XDVCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ02M001.XDVCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of defect codes.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.FQ02MBDF == "?") /* defect list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DEFECT CODES"; /* Heading*/
    XX0XW02.XGPCD = FQWREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYDF01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FQ02M001.FQ02MBDF = FQWREC.YDFCD; /* Restore prior code*/
    else

      FQ02M001.FQ02MBDF = YDFTBL.YDFCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ02M001.FQ02MBDF cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of defect codes.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.FQ02MEDF == "?") /* defect list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DEFECT CODES"; /* Heading*/
    XX0XW02.XGPCD = FQWREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYDF01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FQ02M001.FQ02MEDF = FQWREC.YDFCD; /* Restore prior code*/
    else

      FQ02M001.FQ02MEDF = YDFTBL.YDFCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ02M001.FQ02MEDF cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FQWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(25); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FQ02400

// Verify the entered data
Function FQ02500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FQ02M001.CAITEM > " ") /* Application data was entered*/

    FQWREC.XXXMODID = "150"; /* Module identification*/
    set FQ02M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FQ02510(); /* Verify scroll/add request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/

    FQ02W00.FQ02WIXM = 13; /* Initialize line index*/

    while (FQ02W00.FQ02WIXM > 0) /* Until end of lines*/

      FQ02520(); /* Verify data in the line*/

      FQ02W00.FQ02WIXM = FQ02W00.FQ02WIXM - 1; /* Decrement line number*/

    end

    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    if (FQ02M001.SY1STNBR != FQWREC.SY1STNBR  /* Style*/
     || FQ02M001.SY2CLRID != FQWREC.SY2CLRID  /* Color*/
     || FQ02M001.XDMCD != FQWREC.XDMCD        /* Dimension*/
     || FQ02M001.XDVCD != FQWREC.XDVCD        /* Division*/
     || FQ02M001.FQ02MBDT != FQ02W00.FQ02MBYM /* Beg date*/
     || FQ02M001.FQ02MEDT != FQ02W00.FQ02MEYM /* End date*/
     || FQ02M001.FQ02MBDF != FQWREC.FQWBDFCT  /* Beg defect*/
     || FQ02M001.FQ02MEDF != FQWREC.FQWEDFCT  /* End defect*/
     || FQ02M001.FY1PFYCD != FQWREC.FY1PFYCD  /* Origin factory*/
                                              
     || FQ02M001.SY1STNBR == " "              /* Style*/
     || FQ02M001.SY2CLRID == " "              /* Color*/
     || FQ02M001.XDMCD == " "                 /* Dimension*/
     || FQ02M001.XDVCD == " "                 /* Division*/
     || FQ02M001.FQ02MBDT == 0                /* Beg date*/
     || FQ02M001.FQ02MEDT == 0                /* End date*/
     || FQ02M001.FQ02MBDF == 0                /* Beg defect*/
     || FQ02M001.FQ02MEDF == 0                /* End defect*/
     || FQ02M001.FY1PFYCD == " ")             /* Origin factory*/

      FQ02530(); /* Verify style/color/dim*/
      FQ02540(); /* Verify division*/
      FQ02550(); /* Verify dates*/
      FQ02560(); /* Verify defect codes*/
      FQ02570(); /* Verify factory*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ02500

// Verify scroll
Function FQ02510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FQ02W00.XXXTSPAG < 2)       /* and no previous pages*/

    FQWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(13); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FQ02W00.XXXTSPAG >= FQ02W00.TA5TSQIX) /* and no more pages*/

    FQWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(14); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FQ02W00.FQ02WIXM = 13; /* Initialize line index*/

  while (FQ02W00.FQ02WIXM > 0) /* Until end of lines*/

    if (FQ02M001.FQ02MSEL[FQ02WIXM] != " " /* If selection was made*/
     && FQ02M001.FQ02MSEL[FQ02WIXM] != "V") /* and line not reviewed*/

      FQWREC.XXXMODID = "510"; /* Module identification*/
      set FQ02M001.FQ02MSEL[FQ02WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(9); /* Indicate data may not change*/

    end

    FQ02W00.FQ02WIXM = FQ02W00.FQ02WIXM - 1; /* Decrement line number*/

  end


end // end FQ02510

// Verify selection
Function FQ02520()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FQ02M001.FQ02MSEL[FQ02WIXM] > " ") /* Selection was entered*/

    if (FQ02M001.FQ02MSEL[FQ02WIXM] != "S") /* Valid selection character*/

      FQWREC.XXXMODID = "520"; /* Module identification*/
      set FQ02M001.FQ02MSEL[FQ02WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(12); /* Indicate only "S" may be used*/

    else
      /* ------------------------------------------------------------*/
       /* Verify that no other selection was made at the same time.*/
      /* ------------------------------------------------------------*/
      FQ02W00.FQ02WIX2 = FQ02W00.FQ02WIXM - 1; /* Set counter*/

      while (FQ02W00.FQ02WIX2 > 0) /* While counter greater than 0*/
        if (FQ02M001.FQ02MSEL[FQ02WIX2] == "S") /* Another selection made*/

          FQWREC.XXXMODID = "520"; /* Module identification*/
          set FQ02M001.FQ02MSEL[FQ02WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(8); /* More than one selection*/
        end

        FQ02W00.FQ02WIX2 = FQ02W00.FQ02WIX2 - 1; /* Decrement counter*/
      end

    end
  end


end // end FQ02520

// Verify style/color/dim
Function FQ02530()
   /* ------------------------------------------------------------*/
    /* If missing, default dimension.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.XDMCD == " ") /* If dim missing*/
    FQ02M001.XDMCD = "00"; /* Default to '00'*/
  end

   /* ------------------------------------------------------------*/
    /* If missing, default color.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.SY2CLRID == " ") /* If color missing*/
    FQ02M001.SY2CLRID = "00"; /* Default to '00'*/
  end

   /* ------------------------------------------------------------*/
    /* Verify style/color/dimension.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.SY1STNBR != " ") /* Style*/

    /* ------------------------------------------------------------*/
     /* Select SYCLR.*/
    /* ------------------------------------------------------------*/
    FQ02531(); /* Select SYCLR*/

    /* ------------------------------------------------------------*/
     /* If row was not found, indicate error.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE != 0) /* If row was found*/

      set FQ02M001.SY1STNBR cursor, bold; /* Highlight*/
      set FQ02M001.SY2CLRID bold; /* Highlight*/
      set FQ02M001.XDMCD bold; /* Highlight*/
      converseLib.validationFailed(33); /* Indicate data missing or invalid*/
      FQWREC.XXXMODID = "530"; /* Module identification*/

    end
  else

    set FQ02M001.SY1STNBR cursor, bold; /* Highlight*/
    set FQ02M001.SY2CLRID bold; /* Highlight*/
    set FQ02M001.XDMCD bold; /* Highlight*/
    converseLib.validationFailed(33); /* Indicate data missing or invalid*/
    FQWREC.XXXMODID = "530"; /* Module identification*/

  end


end // end FQ02530

// Select SYCLR
Function FQ02531()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  PG2REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = FQ02M001.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FQ02M001.SY2CLRID; /* Color ID*/
  PG2REC.XDMCD = FQ02M001.XDMCD; /* Dimension*/

   /* ------------------------------------------------------------*/
   /* Select SYCLR.*/
   /* ------------------------------------------------------------*/
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not fqailable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "531"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not fqailable*/

    converseLib.validationFailed(2); /* Indicate not fqailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ02531

// Verify division
Function FQ02540()
   /* ------------------------------------------------------------*/
   /* Verify division code.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.XDVCD == " ") /* If division missing*/
    FQ02M001.XDVCD = "*"; /* Default to wildcard*/
  end

  if (FQ02M001.XDVCD == "*") /* If division wildcarded*/
    return; /* Return to previous process*/
  end

  if (FQ02M001.XDVCD != " ") /* If division entered*/

    if (FQ02M001.XDVCD in XDVTBL.XDVCD /* If division in table*/
     && XDVTBL.XXXSTAT == "A")         /* and code active*/

       /* next sentence*/
    else

      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      set FQ02M001.XDVCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(31); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "540"; /* Module identification*/

    end
  else

    set FQ02M001.XDVCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate missing or invalid*/
    FQWREC.XXXMODID = "540"; /* Module identification*/

  end


end // end FQ02540

// Verify dates
Function FQ02550()
   /* ------------------------------------------------------------*/
   /* Initialize record for calls to date routine.*/
   /* ------------------------------------------------------------*/
  set FQZREC empty; /* clear date edit record*/

  FQZREC.FQZBEGRG = FQ02M001.FQ02MBDT; /* Beg date*/
  FQZREC.FQZENDRG = FQ02M001.FQ02MEDT; /* end date*/
  FQZREC.FQZCHK24 = "Y"; /* Switch for range*/
  FQZREC.FQZNUMYR = 2; /* Number of years*/

   /* ------------------------------------------------------------*/
   /* Edit range.  Send YYMMMM - receive back CCYYMMMM.*/
   /* ------------------------------------------------------------*/
  XSFQS05(); /* Common date edit routine*/

   /* ------------------------------------------------------------*/
   /* Check return codes for ending date.*/
   /* ------------------------------------------------------------*/
  if (FQZREC.FQZENDRC == 0) /* end date was valid*/
    FQ02M001.FQ02MEDT = FQZREC.FQZENDRG; /* End date*/

  else
    set FQ02M001.FQ02MEDT cursor, bold; /* Highlight*/
    FQWREC.XXXMODID = "550"; /* module identification*/

    if (FQZREC.FQZENDRC == 1) /* End date was invalid*/
      converseLib.validationFailed(34); /* Indicate invalid*/

    else
      converseLib.validationFailed(27); /* Indicate out of range*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Check return codes for beginning date.*/
   /* ------------------------------------------------------------*/
  if (FQZREC.FQZBEGRC == 0) /* Beg date was valid*/
    FQ02M001.FQ02MBDT = FQZREC.FQZBEGRG; /* Begin date*/

  else
    FQWREC.XXXMODID = "550"; /* module identification*/
    set FQ02M001.FQ02MBDT cursor, bold; /* Highlight*/

    if (FQZREC.FQZBEGRC == 1) /* Beg date was invalid*/
      converseLib.validationFailed(34); /* Indicate invalid*/

    else
      converseLib.validationFailed(27); /* Indicate out of range*/

    end
  end


end // end FQ02550

// Verify defective code range
Function FQ02560()
   /* ------------------------------------------------------------*/
   /* Verify end defective code.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.FQ02MEDF != " ") /* If end defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ02M001.FQ02MEDF; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT == "A")

      FQWREC.YDCCD = YDFTBL.YDCCD[sysVar.arrayIndex]; /* Save category*/

    else

      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      set FQ02M001.FQ02MEDF cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "560"; /* Module identification*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify beginning defective code.*/
   /* ------------------------------------------------------------*/

  if (FQ02M001.FQ02MBDF != " ") /* If begin defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ02M001.FQ02MBDF; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT == "A")

       /* next sentence*/
    else

      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      set FQ02M001.FQ02MBDF cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "560"; /* Module identification*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Check for either defect range or defect category.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.FQ02MBDF == " " /* If begin defect code missing*/
   && FQWREC.YDCCD == " ")     /* and defect category missing*/

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    set FQ02M001.FQ02MBDF cursor, bold; /* Highlight*/
    set FQ02M001.FQ02MEDF bold; /* Highlight*/
    FQWREC.YDCDESC = " "; /* Def cat name*/
    converseLib.validationFailed(29); /* Indicate missing or invalid*/
    FQWREC.XXXMODID = "560"; /* Module identification*/
  else

    /* ------------------------------------------------------------*/
     /* Obtain category description.*/
    /* ------------------------------------------------------------*/
    YDCREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDCREC.YDCCD = FQWREC.YDCCD; /* Format key*/

    if (YDCREC.YDCKEY in YDCTBL.YDCKEY)
      FQ02M001.YDCDESC = YDCTBL.YDCDESC[sysVar.arrayIndex]; /* Save cat name*/

    end
  end


end // end FQ02560

// Verify factory
Function FQ02570()
   /* ------------------------------------------------------------*/
   /* Verify factory code.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.FY1PFYCD != " ") /* If factory entered*/

    /* ------------------------------------------------------------*/
     /* Select FCTY.*/
    /* ------------------------------------------------------------*/
    FQ02571(); /* Select FCTY*/

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE != 0) /* If row not found*/

      set FQ02M001.FY1PFYCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(30); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "570"; /* Module identification*/
    end

  else

    set FQ02M001.FY1PFYCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(30); /* Indicate missing or invalid*/
    FQWREC.XXXMODID = "570"; /* Module identification*/
  end


end // end FQ02570

// Select FCTY
Function FQ02571()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FY1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  FY1REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  FY1REC.FY1FCTYC = FQ02M001.FY1PFYCD; /* Factory*/

   /* ------------------------------------------------------------*/
   /* Select FCTY.*/
   /* ------------------------------------------------------------*/
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not fqailable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "571"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not fqailable*/

    converseLib.validationFailed(2); /* Indicate not fqailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ02571

// Process valid input request
Function FQ02600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  FQ02W00.FQ02WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    set FQ02M001 initial;
    FQ02W00.XXXTSPAG = FQ02W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    set FQ02M001 initial;
    FQ02W00.XXXTSPAG = FQ02W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/
  if (FQ02M001.FY1PFYCD != FQWREC.FY1PFYCD  /* or factory changed*/
   || FQ02M001.FQ02MBDT != FQ02W00.FQ02MBYM /* or beg date changed*/
   || FQ02M001.FQ02MEDT != FQ02W00.FQ02MEYM /* or end date changed*/
   || FQ02M001.FQ02MBDF != FQWREC.FQWBDFCT  /* or beg defect changed*/
   || FQ02M001.FQ02MEDF != FQWREC.FQWEDFCT  /* or end defect changed*/
   || FQ02M001.SY1STNBR != FQWREC.SY1STNBR  /* or style nbr*/
   || FQ02M001.SY2CLRID != FQWREC.SY2CLRID  /* or color id*/
   || FQ02M001.XDMCD != FQWREC.XDMCD        /* or dimension*/
   || FQ02M001.XDVCD != FQWREC.XDVCD)       /* or division*/

    /* ------------------------------------------------------------*/
     /* Save data.*/
    /* ------------------------------------------------------------*/
    FQWREC.FY1PFYCD = FQ02M001.FY1PFYCD; /* origin factory*/
    FQWREC.SY1STNBR = FQ02M001.SY1STNBR; /* style nbr*/
    FQWREC.SY2CLRID = FQ02M001.SY2CLRID; /* color id*/
    FQWREC.XDMCD = FQ02M001.XDMCD; /* dimension*/
    FQWREC.XDVCD = FQ02M001.XDVCD; /* division*/

    FQWREC.FQWBDFCT = FQ02M001.FQ02MBDF; /* Beg defect*/
    FQWREC.FQWEDFCT = FQ02M001.FQ02MEDF; /* End defect*/
    FQWREC.YDCDESC = FQ02M001.YDCDESC; /* Defect cat desc*/

    FQWREC.FQ1IDBDT = FQZREC.FQZBCYMM; /* beg date*/
    FQWREC.FQ1IDXDT = FQZREC.FQZECYMM; /* end date*/

    FQ02W00.FQ02MBDT = FQZREC.FQZBCYMM; /* beg date*/
    FQ02W00.FQ02MEDT = FQZREC.FQZECYMM; /* end date*/

    FQ02W00.FQ02WSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If PF9 was pressed, transfer to print screen.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9) /* If PF9 was pressed*/

    /* ------------------------------------------------------------*/
     /* Transfer to FQ0G.*/
    /* ------------------------------------------------------------*/
    COMMAREA.CATOAP = "FQ0G"; /* TO application*/

    FQ02610(); /* Transfer to FQ0G*/

  end

   /* ------------------------------------------------------------*/
   /* If line was selected, transfer to FQ03.*/
   /* ------------------------------------------------------------*/
  if ("S" in FQ02M001.FQ02MSEL) /* Style selected*/

    COMMAREA.CATOAP = "FQ03"; /* TO application*/
    FQWREC.YDFCD = FQ02M001.YDFCD[sysVar.arrayIndex]; /* Defect code*/
    FQWREC.YDFDESC = FQ02M001.YDFDESC[sysVar.arrayIndex]; /* Defect name*/

    FQ02610(); /* Transfer to FQ03*/

  end


end // end FQ02600

// Transfer to another appl
Function FQ02610()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage.*/
   /* ------------------------------------------------------------*/
  FQ02S01(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Transfer to another application.*/
   /* ------------------------------------------------------------*/
  XSFQS01(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/
  COMMAREA.CATOAP = " "; /* TO application*/

  exit stack; /* Exit to display map*/


end // end FQ02610

// Purge any temporary storage
Function FQ02S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FQ02W01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FQ02W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FQ02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* System error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ02S01

// Read temporary storage page
Function FQ02S02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FQ02W01.XXXTSLEN = FQ02W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FQ02W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FQ02W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ02S02

//*** RECORD=FQ02W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FQ02W00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * char(1) ; 
  10 FQ02WIXM FQ02WIXM ; 
  10 FQ02WIX2 FQ02WIX2 ; 
  10 FQ02WFDA FQ02WFDA ; 
  10 * char(1) ; 
  10 FQ02WEOC FQ02WEOC ; 
  10 FQ02WSWF FQ02WSWF ; 
  10 FQ02WSWR FQ02WSWR ; 
  10 FQ02WDSW FQ02WDSW ; 
  10 * char(1) ; 
  10 FQ02WTOT FQ02WTOT ; 
  10 FQ02WGTT FQ02WGTT ; 
  10 FQ02MBDT FQ02MBDT ; 
    15 * num(3) ; 
    15 FQ02MBYM FQ02MBYM ; 
  10 * char(1) ; 
  10 FQ02MEDT FQ02MEDT ; 
    15 * num(3) ; 
    15 FQ02MEYM FQ02MEYM ; 
end // end FQ02W00

//*** RECORD=FQ02W01 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record FQ02W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(868) ; 
    10 FQ02MSEL FQ02MSEL [14] ; 
    10 YDFCD YDFCD [14] ; 
    10 YDFDESC YDFDESC [14] ; 
    10 FQ2DEFQT FQ2DEFQT [14] ; 
    10 FQ02WPCT FQ02WPCT [14] ; 
    10 FQ02WPC2 FQ02WPC2 [14] ; 
  5 FQ02WTOT FQ02WTOT ; 
end // end FQ02W01

// Beg range date
DataItem FQ02MBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Beg YYMMMM
DataItem FQ02MBYM num(6)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// End range date
DataItem FQ02MEDT num(9)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// End YYMMMM
DataItem FQ02MEYM num(6)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Selection
DataItem FQ02MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data found switch
DataItem FQ02WDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FQ02WEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work field for percent
DataItem FQ02WFDA bin(18,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Grand total defect qty
DataItem FQ02WGTT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ02WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ02WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ02WPC2 num(7,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// percentage of total for key
DataItem FQ02WPCT num(7,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FQ02WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FQ02WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total defect quantity
DataItem FQ02WTOT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

