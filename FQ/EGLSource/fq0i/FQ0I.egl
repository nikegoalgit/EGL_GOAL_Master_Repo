package fq0i;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fq.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=FQ0I ****
// This application allows a user to inquire and maintain rows
// in the defective return DB2 table, DFQUAL.VDFRTN02.
// 
// There are two different screens that may be displayed.
// The first screen will display all the rows in the table.
// When a row is selected on this screen, the second screen is
// displayed, showing detailed information for that table row.
// This is INQUIRY only and update is not allowed.
// 
// From the 1st screen, the user may press PF18 and the 2nd
// screen will appear with no data.  User may fill in the
// information for a row, press ENTER, and add the row to
// the data base.
// 
// When the user exits the second screen (via PF3 key) the
// the first screen is redisplayed, indicating with a "v"
// that the row was viewed/updated.
// 
// From the ADD/INQUIRY (2nd screen), the user may press PF6
// to go to inspector-hold summary screen(FQ0I) to display
// all the products that are currently 'ON-HOLD'.
// 
// The user may scroll forward and backward to view all the
// rows by pressing PF7 and PF8.  He may exit to any allowed
// application, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/21/93  SDIFLE  New application.
//          06/23/93  MHUYNH  Changed date editing to accept
//                            promo products.
// FQ#053   02/01/94  RCHINI  Reset the carton number to spaces
//                            when entered as all zeros after a
//                            successful update.
// FQ#000   07/19/95  MSMIT2  ADD SECONDARY RETURN CODE & DESC.
//          08/12/96  KBRADS  CHANGED FCTY-CD FROM 2 TO 3
//                            CHARACTERS ON THE FQ0IM002.
//          11/11/96  KBRADS  Add default of the duty drawback
//                            extract flag. Set to 'Y'.
//          12/09/96  KBRADS  Replaced DCLGEN IO6680 with
//                            VDFRTN02.
// y2kproj  12-08-97  oricha  y2k modifications:  logic adjust-
//                            ed for century calcs in FQ0I259
//                            FQ0I261, FQ0IS25, FQ0IS26,
//                            FQ0IW02; maps m001 & m002 zero
//                            fill in field FQ0IMPO; also regen
//                            for xx0xs01 & xsfqs05 changes.
// *********************
Program FQ0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FQ00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FQ0IW00 FQ0IW00; // record
  FQ0IW01 FQ0IW01; // record
  FQ0IW02 FQ0IW02; // record
  FQVREC FQVREC; // record
  FQWREC FQWREC; // record
  FQYREC FQYREC; // record
  FQZREC FQZREC; // record
  FY1REC FY1REC; // record
  PC6REC PC6REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VBARCD01 VBARCD01; // record
  VDFRTN02 VDFRTN02; // record
  VDFTRL01 VDFTRL01; // record
  VINSPH01 VINSPH01; // record
  XDMREC XDMREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YDDREC YDDREC; // record
  YDFREC YDFREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use YDFTBL; // table
  use YDDTBL; // table
  use FQ0IM.FQ0IM001,  // forms
      FQ0IM.FQ0IM002, 
      FQ0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFQ001: XPFQ001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FQ0IM001 initial; /* M001 input/output*/
    set FQ0IM002 initial; /* M002 input/output*/
    set FQ0IW00 empty; /* Working storage*/
    set FQ0IW01 empty; /* M001 display storage*/
    set FQWREC empty; /* M002 display storage*/
    set FQYREC empty; /* M002 display storage*/
    set FQZREC empty; /* M002 display storage*/
    set SYPREC empty; /* size id/size desc translate*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Date/time subroutine parameters*/

    if (COMMAREA.CAITEM != " ")
      FQ0IW00.FQ0IWMAP = "2"; /* Map to be displayed switch*/
      FQ0IW00.FQ0IWSWR = "N"; /* bypass Request for data switch*/
                                        /* to re-display original data*/
    else
      set FQ0IW02 empty; /* M002 display storage*/
      FQ0IW00.FQ0IWMAP = "1"; /* Map to be displayed switch*/
      FQ0IW00.FQ0IWSWR = "Y"; /* Request for data switch*/
    end

    FQ0IW00.FQ0IWSWF = "Y"; /* Format the map switch*/
    FQ0IW00.FQ0IWASW = "N"; /* Add function request switch (PF18)*/
    FQ0IW00.FQ0IW-BAR-CODE-SCAN = "N"; /* DEFAULT TO MANUAL ENTRY*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ0I001; /* Converse the main process*/


    FQ0I001: FQ0I001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ0I001; /* Converse the main process*/


  end // end main
end // end FQ0I

// VERIFY BAR CODE
Function FQ0I-25001()
   /* ------------------------------------------------------------------*/
   /* VERIFY THE BAR CODE*/
   /* ------------------------------------------------------------------*/

  if (FQ0IM002.PC-BAR-CD-SEQ-NBR == FQ0IW02.PC-BAR-CD-SEQ-NBR)
     /* IF BAR CODE UNCHANGED BUT ALT KEY CHANGED, CLEAR OUT*/
     /* BAR CODE INFO.*/
    if (FQ0IM002.SY1STNBR != FQ0IW02.SY1STNBR
     || FQ0IM002.SY2CLRID != FQ0IW02.SY2CLRID
     || FQ0IM002.XDMCD != FQ0IW02.XDMCD
     || FQ0IM002.FQ0IMPO != FQ0IW02.FQWPOIDN6
     || FQ0IM002.FY1FCTYC != FQ0IW02.FY1FCTYC
     || FQ0IM002.SY-SZ-ID-DESC != FQ0IW02.SY-SZ-ID-DESC)
      FQ0IM002.PC-BAR-CD-SEQ-NBR = 0;
      FQ0IW02.PC-BAR-CD-SEQ-NBR = 0;
    end
    return;
  end

  set VBARCD01 empty;

  VBARCD01.PC-BAR-CD-SEQ-NBR = FQ0IM002.PC-BAR-CD-SEQ-NBR;
  FQ0IW02.PC-BAR-CD-SEQ-NBR = FQ0IM002.PC-BAR-CD-SEQ-NBR;

  FQ0IS-36-VBARCD01S(); /* READ BAR CODE*/

   /* IF BAR CODE INVALID, CLEAR OUT MAP AND WORKING STORAGE*/

  if (SQLCA.VAGen_SQLCODE != 0)
    set FQ0IM002 initial; /* CLEAR OUT MAP*/
    FQ0IM002.PC-BAR-CD-SEQ-NBR = FQ0IW02.PC-BAR-CD-SEQ-NBR;
    FQ0IW00.FQ0IWSWF = "Y"; /* FORMAT MAP*/
    FQ0IM002.FQ0IMCTN = FQ0IW02.FQ-CRTN-ID;
    FQ0IM002.FQ0IMTID = FQ0IW02.FQ-TRLR-ID;
    FQ0IM002.FQ0IMINS = FQ0IW02.XXXUSER;
    FQWREC.XXXMODID = "2501";
    converseLib.validationFailed(86); /* BAR CODE INVALID*/
    set FQ0IM002.PC-BAR-CD-SEQ-NBR bold;
    set FQ0IM002.SY1STNBR cursor;
    return;
  end

  FQ0IM002.SY1STNBR = VBARCD01.SY1STNBR;
  FQ0IW02.SY1STNBR = VBARCD01.SY1STNBR;
  FQ0IM002.SY2CLRID = VBARCD01.SY2CLRID;
  FQ0IW02.SY2CLRID = VBARCD01.SY2CLRID;
  FQ0IM002.XDMCD = VBARCD01.XDMCD;
  FQ0IW02.XDMCD = VBARCD01.XDMCD;
  FQ0IW01.FQWPOIDN9 = VBARCD01.PC3POIDT;
  FQ0IM002.FQ0IMPO = FQ0IW01.FQWPOIDN6;
  FQ0IW02.FQWPCPOID = FQ0IW01.FQWPOIDN6;
  FQ0IM002.FY1FCTYC = VBARCD01.FY1FCTYC;
  FQ0IW02.FY1FCTYC = VBARCD01.FY1FCTYC;

   /* TRANSLATE THE SIZE ID INTO THE SIZE DESCRIPTION*/

  set SYPREC empty;

  SYPREC.SYPFC = "IE";
  SYPREC.SY5SZID[1] = VBARCD01.SY5SZID;
  SYPREC.SYPCMPSW = "C";
  SYPREC.XGPCD = "02";
  SYPREC.SY1STNBR = VBARCD01.SY1STNBR;
  SYPREC.SY2CLRID = VBARCD01.SY2CLRID;
  SYPREC.XDMCD = VBARCD01.XDMCD;
  SYPREC.XQACD = "**";

  FQ0IS35(); /* GET SIZE DESCRIPTION*/

  if (SYPREC.SYPRC == 10)
    FQWREC.XXXMODID = "250";
    converseLib.validationFailed(12); /* NOT ON DATABASE MESSAGE*/
    return;
  end

  if (SYPREC.SYPRC == 12)
    FQWREC.XXXMODID = "250";
    converseLib.validationFailed(85); /* BAD SIZE DESCRIPTION*/
    return;
  end

  FQ0IM002.SY-SZ-ID-DESC = SYPREC.SY4IDDSC;
  FQ0IW02.SY-SZ-ID-DESC = SYPREC.SY4IDDSC;

end // end FQ0I-25001

// Main process to display a map
Function FQ0I001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FQ0IW00.FQ0IWMAP == "1") /* Map 1 was requested*/
    FQ0I100(); /* Display map 1*/
  else

    if (FQ0IW00.FQ0IWMAP == "2") /* Map 2 was requested*/
      FQ0I200(); /* Display map 2*/
    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      FQWREC.XXXMODID = "001"; /* Module identification*/
      FQWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FQ0IW00.FQ0IWMAP; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "FQ0M"; /* TO application*/
      XSFQS01(); /* Exit to another application*/
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    end
  end


end // end FQ0I001

// List the rows in the table
Function FQ0I100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FQ0I110(); /* Obtain the data to display*/

  FQ0I120(); /* Format and display the map*/

  FQ0I130(); /* Check attention identifier*/

  FQ0I140(); /* Reset fields to normal intensity*/

  FQ0I150(); /* Verify the entered data*/

  FQ0I160(); /* Process valid input request*/


end // end FQ0I100

// Obtain the data to display
Function FQ0I110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW00.FQ0IWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* as of 05/06. w01 length is 743*/
   /* ------------------------------------------------------------*/
  FQ0IW00.XXXTSLEN = 1000; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO == 0) /* No message to display*/
    FQ0IW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  FQ0IS01(); /* Purge any temporary storage*/


  set VDFRTN02 empty; /* Clear def return record*/
  set FQ0IM001 initial; /* Clear map fq0im001*/
  FQ0IW00.FQ0IWSWR = "N";
  FQ0IW00.FQ0IWCNT = 0;

   /* ------------------------------------------------------------*/
   /* load key fields.*/
   /* (fqwrec fields are updated in 120, 152)*/
   /* ------------------------------------------------------------*/
  FQ0IM001.FQ0IMSTY = FQWREC.SY1STNBR;
  FQ0IM001.FQ0IMCLR = FQWREC.SY2CLRID;
  FQ0IM001.FQ0IMDIM = FQWREC.XDMCD;

  if (FQ0IM001.FQ0IMSTY == " "
   && FQ0IM001.FQ0IMCLR == "00")
    FQ0IM001.FQ0IMCLR = " ";
    FQ0IM001.FQ0IMDIM = " ";
  end

   /* ------------------------------------------------------------*/
   /* If input style/color/dim exists,*/
   /* Validate style/color/dim entered on m001 which is used*/
   /* as selection criteria.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM001.FQ0IMSTY != " "
   && FQ0IM001.FQ0IMCLR != " "
   && FQ0IM001.FQ0IMDIM != " ")

    FQ0IS22(); /* select style*/

    if (SQLCA.VAGen_SQLCODE == 0)
      VDFRTN02.SY1STNBR = FQ0IM001.FQ0IMSTY; /* build key w/input*/
      VDFRTN02.SY2CLRID = FQ0IM001.FQ0IMCLR;
      VDFRTN02.XDMCD = FQ0IM001.FQ0IMDIM;

    else
      FQWREC.XXXMODID = "110";
      converseLib.validationFailed(77); /* invalid. blank to disp all*/
      set FQ0IM001.FQ0IMSTY cursor, bold;
      set FQ0IM001.FQ0IMCLR bold;
      set FQ0IM001.FQ0IMDIM bold;
      exit stack;
    end

  else
    VDFRTN02.SY1STNBR = "*"; /* wild card for selection*/
    VDFRTN02.SY2CLRID = "*";
    VDFRTN02.XDMCD = "*";
  end

   /* --------------------------------------------------------*/
   /* Open VDFTRN01 cursor*/
   /* --------------------------------------------------------*/
  if (FQ0IM001.FQ0IMSTY != " "
   && FQ0IM001.FQ0IMCLR != " "
   && FQ0IM001.FQ0IMDIM != " ")
    FQ0I111(); /* Open VDFRTN02*/
  else
    FQ0I116(); /* Open VDFRTN02*/
  end

   /* ----------------------------------------------------------*/
   /* Get current open trailer id.*/
   /* ----------------------------------------------------------*/

  FQ0IS29(); /* select open trailer*/

   /* ----------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* Compare trailer id with current one and save only*/
   /* returns that matches open tailer id.*/
   /* ----------------------------------------------------------*/
  while (FQ0IW00.FQ0IWEOC == "N") /* Until end of cursor*/

    if (FQ0IM001.FQ0IMSTY != " "
     && FQ0IM001.FQ0IMCLR != " "
     && FQ0IM001.FQ0IMDIM != " ")
      FQ0I112(); /* Fetch a row*/
    else
      FQ0I117(); /* Fetch a row*/
    end

    if (FQ0IW00.FQ0IWEOC == "N") /* If not end-of-cursor*/

      if (VDFRTN02.FQ-TRLR-ID == VDFTRL01.FQ0JWTID)
        FQ0IW00.FQ0IWCNT = FQ0IW00.FQ0IWCNT + 1; /* Row count*/
        FQ0I113(); /* Save data*/
      end

      /* ---------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ---------------------------------------------------------*/
      if (FQ0IW00.FQ0IWIXM > 10) /* Page is full*/
        FQ0I114(); /* Add page to temporary storage*/
      end

    end
  end

   /* ----------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ----------------------------------------------------*/
  if (FQ0IW00.FQ0IWIXM > 1) /* Page was formatted*/
    FQ0I114(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close VDFRTN02*/
   /* ------------------------------------------------------------*/
  if (FQ0IM001.FQ0IMSTY != " "
   && FQ0IM001.FQ0IMCLR != " "
   && FQ0IM001.FQ0IMDIM != " ")
    FQ0I115(); /* Close VDFRTN02 cursor*/
  else
    FQ0I118(); /* Close VDFRTN02 cursor*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FQ0IW00.TA5TSQIX == 0) /* No pages formatted*/

    FQWREC.XXXMODID = "110"; /* Module identification*/
    converseLib.validationFailed(17); /* No data was found to display*/
    FQ0IM001.FQ0IMTID = VDFTRL01.FQ0JWTID; /* trailer id*/
    FQ0IM001.FQ0IMINS = COMMAREA.CAUSERID; /* inspector*/
    FQ0IM001.FQ0IMUNT = 0; /* total units*/
    set FQ0IM001.FQ0IMSTY cursor;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FQ0IW00.FQ0IWSWR = "N"; /* Request for data switch*/

end // end FQ0I110

// Open DFQUAL.VDFRTN02
Function FQ0I111()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
   /* VDFRTN02 EMPTY;               /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time to be used as part of*/
   /* the selection criteria.*/
   /* ------------------------------------------------------------*/
  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Build key.*/
   /* (display all : inspector, today's date, open trailer)*/
   /* (by style    : style, inspector, today, open trailer)*/
   /* ------------------------------------------------------------*/
  VDFRTN02.XGPCD = "02";
  VDFRTN02.ZZZSDT = XX0XW01.XX0XWDAT; /* today as set up date*/
  VDFRTN02.XXXUSER = COMMAREA.CAUSERID; /* User ID = inspector*/

   /* MOVE -1 TO VDFRTN02.ZZZsdt;                /* wild card for date*/
   /* ------------------------------------------------------------*/
   /* Open VDFRTN02*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("S1", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, init switches & return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FQ0IWEOC = "N"; /* End of cursor switch*/
    FQ0IW00.FQ0IWIXM = 1; /* Display line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set FQ0IM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* Table view name*/
  TA1REC.TA1TBLKE = VDFRTN02.VDFRTN02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0I111

// Fetch DFQUAL.VDFRTN02 row
Function FQ0I112()
   /* ------------------------------------------------------------*/
   /* Fetch VDFRTN02*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("N1", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Or row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        FQ0IW00.FQ0IWEOC = "Y"; /* Indicate end of cursor*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VDFRTN02.VDFRTN02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0I112

// Save data for display
Function FQ0I113()
   /* ------------------------------------------------------------*/
   /* Save the data for display.*/
   /* ------------------------------------------------------------*/

  if (FQ0IW00.FQ0IWIXM == 1) /* save these only for 1st rec*/
    FQWREC.XGPCD = VDFRTN02.XGPCD;
  end

  FQ0IW01.XDVCD[FQ0IWIXM] = VDFRTN02.XDVCD; /* div id*/
  FQ0IW01.SY1STNBR[FQ0IWIXM] = VDFRTN02.SY1STNBR;
  FQ0IW01.SY2CLRID[FQ0IWIXM] = VDFRTN02.SY2CLRID;
  FQ0IW01.XDMCD[FQ0IWIXM] = VDFRTN02.XDMCD;
  FQ0IW01.XBCCD[FQ0IWIXM] = VDFRTN02.XBCCD; /* brand code*/
  FQ0IW01.FQ-TRLR-ID[FQ0IWIXM] = VDFRTN02.FQ-TRLR-ID; /* trailer id*/
  FQ0IW01.FQWSEQN4[FQ0IWIXM] = VDFRTN02.FQ-DEF-SEQ-NBR; /* seq number*/
  FQ0IW01.FY1FCTYC[FQ0IWIXM] = VDFRTN02.FY1FCTYC; /* Factory*/

  FQ0IW01.PC-PO-ID-MO-RNG = VDFRTN02.PC-PO-ID-MO-RNG;
  FQ0IW01.FQWPOIDN9 = FQ0IW01.PC-PO-ID-MO-RNG;
  FQ0IW01.FQWPCPOID[FQ0IWIXM] = FQ0IW01.FQWPOIDN6; /* poid (yymmmm)*/

  FQ0IW01.YDFCD[FQ0IWIXM] = VDFRTN02.YDFCD; /* def code*/
  FQ0IW01.YDF-DEF-CD1[FQ0IWIXM] = VDFRTN02.YDF-DEF-CD1;
                                                            /* alt def cd 1*/
  FQ0IW01.YDF-DEF-CD2[FQ0IWIXM] = VDFRTN02.YDF-DEF-CD2;
  FQ0IW01.YDF-DEF-CD3[FQ0IWIXM] = VDFRTN02.YDF-DEF-CD3;
  FQ0IW01.FQ-CRTN-ID[FQ0IWIXM] = VDFRTN02.FQ-CRTN-ID; /* carton id*/
  FQ0IS33(); /* translate size id to size description*/
  FQ0IW01.SY-SZ-ID-DESC[FQ0IWIXM] = SYPREC.SY4IDDSC;
                                                               /* size desc*/
  FQ0IW01.ZZZSDT[FQ0IWIXM] = VDFRTN02.ZZZSDT;
  FQ0IW01.ZZZCHGDT[FQ0IWIXM] = VDFRTN02.ZZZCHGDT; /* Change date*/
  FQ0IW01.ZZZCHGTM[FQ0IWIXM] = VDFRTN02.ZZZCHGTM; /* Change time*/
  FQ0IW01.XXXUSER[FQ0IWIXM] = VDFRTN02.XXXUSER; /* User ID*/

   /* ------------------------------------------------------------*/
   /* Add to line counter.*/
   /* ------------------------------------------------------------*/
  FQ0IW00.FQ0IWIXM = FQ0IW00.FQ0IWIXM + 1; /* Increment line index*/


end // end FQ0I113

// Add page to temporary storage
Function FQ0I114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FQ0IW01.XXXTSLEN = FQ0IW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FQ0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    FQ0IW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Reset to 0*/
    FQ0IW00.FQ0IWIXM = 1; /* Reset to 1*/
    set FQ0IW01 empty; /* M001 display storage*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0I114

// Close DFQUAL.VDFRTN02
Function FQ0I115()
   /* ------------------------------------------------------------*/
   /* Close VDFRTN02*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("C1", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0I115

// Open DFQUAL.VDFRTN02
Function FQ0I116()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time to be used as part of*/
   /* the selection criteria.*/
   /* ------------------------------------------------------------*/
  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* Build key.*/
   /* (display all : inspector, today's date, open trailer)*/
   /* (by style    : style, inspector, today, open trailer)*/
   /* ------------------------------------------------------------*/
  VDFRTN02.ZZZSDT = XX0XW01.XX0XWDAT; /* today as set up date*/
  VDFRTN02.XXXUSER = COMMAREA.CAUSERID; /* User ID = inspector*/

   /* ------------------------------------------------------------*/
   /* Open VDFRTN02*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("S3", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* Select  set*/

   /* ------------------------------------------------------------*/
   /* If successful, init switches & return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FQ0IWEOC = "N"; /* End of cursor switch*/
    FQ0IW00.FQ0IWIXM = 1; /* Display line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "116"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set FQ0IM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* Table view name*/
  TA1REC.TA1TBLKE = VDFRTN02.VDFRTN02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0I116

// Fetch DFQUAL.VDFRTN02 row
Function FQ0I117()
   /* ------------------------------------------------------------*/
   /* Fetch VDFRTN02*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("N3", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Or row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        FQ0IW00.FQ0IWEOC = "Y"; /* Indicate end of cursor*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "117"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VDFRTN02.VDFRTN02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0I117

// Close DFQUAL.VDFRTN02
Function FQ0I118()
   /* ------------------------------------------------------------*/
   /* Close VDFRTN02*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("C3", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "118"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0I118

// Format and converse the map
Function FQ0I120()
   /* ------------------------------------------------------------*/
   /* If error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* If error found*/

    FQWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW00.FQ0IWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FQ0IW00.FQ0IWSWF == "Y") /* Map must be formatted*/
      FQ0I121(); /* Format the data on the map*/
      set FQ0IM001.FQ0IMSTY cursor, normal; /* set cursor on input style*/
      set FQ0IM001.FQ0IMCLR normal;
      set FQ0IM001.FQ0IMDIM normal;
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQ0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FQ0IM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FQ0IM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FQWREC.XXXMSGNO != 0) /* Message to display*/

      if (FQWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FQWREC.XXXMSGNO);
      end /* Message number*/
    else
      FQ0IM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FQ0IM001.XXXMODID = FQWREC.XXXMODID; /* Module identification*/

   /* ET FQ0IM001 ALARM;             /* Indicate sound alarm*/

  end

  converse FQ0IM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQWREC.XXXMODID = " "; /* Module identification*/
  FQWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FQ0IM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FQ0IM001.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* update fqwrec to be used for selection criteria.*/
   /* ------------------------------------------------------------*/

  FQWREC.SY1STNBR = FQ0IM001.FQ0IMSTY;
  FQWREC.SY2CLRID = FQ0IM001.FQ0IMCLR;
  FQWREC.XDMCD = FQ0IM001.FQ0IMDIM;

end // end FQ0I120

// Format the display data
Function FQ0I121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FQ0IM001 initial;

  FQ0IW00.FQ0IWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FQ0IW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FQ0IW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (FQ0IW00.FQ0IWSWU == "Y") /* Current page was changed*/

        FQ0IS02(); /* Update temporary storage page*/

        FQ0IW00.FQ0IWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (FQ0IW00.XXXTSPAG > FQ0IW00.TA5TSQIX) /* Desired greater highest*/
        FQ0IW00.XXXTSPAG = FQ0IW00.TA5TSQIX; /* Default to highest*/
      end

      FQ0IS03(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    FQ0IM001.XXXTSPAG = FQ0IW00.XXXTSPAG; /* Current page*/
    FQ0IM001.TA5TSQIX = FQ0IW00.TA5TSQIX; /* Highest page*/
   /* ET FQ0IM001.XXXLITPG AUTOSKIP;/* "PAGE" literal*/
   /* ET FQ0IM001.XXXLITOF AUTOSKIP;/* "OF" literal*/

  end
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (FQ0IW01.XXXSTAT[1] > " ") /* If data exists*/
    set FQ0IM001.FQ0IMSEL[1] cursor, normal; /* Position cursor*/
  end

  FQ0IW00.FQ0IWIXM = 1; /* Initialize line index*/

  while (FQ0IW00.FQ0IWIXM <= 10) /* Until screen is full*/

    if (FQ0IW00.FQ0IWIXM == 1)
      FQ0IM001.FQ0IMTID = FQ0IW01.FQ-TRLR-ID[1];
      FQ0IM001.FQ0IMINS = FQ0IW01.XXXUSER[1];
      FQ0IM001.FQ0IMUNT = FQ0IW00.FQ0IWCNT;
      FQ0IM001.FQ0IMSTY = FQWREC.SY1STNBR;
      FQ0IM001.FQ0IMCLR = FQWREC.SY2CLRID;
      FQ0IM001.FQ0IMDIM = FQWREC.XDMCD;

      if (FQ0IM001.FQ0IMSTY == " "
       && FQ0IM001.FQ0IMCLR == "00"
       && FQ0IM001.FQ0IMDIM == "00")
        FQ0IM001.FQ0IMCLR = " ";
        FQ0IM001.FQ0IMDIM = " ";
      end
    end

    FQ0IM001.SY1STNBR[FQ0IWIXM] = FQ0IW01.SY1STNBR[FQ0IWIXM];
    FQ0IM001.SY2CLRID[FQ0IWIXM] = FQ0IW01.SY2CLRID[FQ0IWIXM];
    FQ0IM001.XDMCD[FQ0IWIXM] = FQ0IW01.XDMCD[FQ0IWIXM];
    FQ0IM001.FQ0IMSEL[FQ0IWIXM] = FQ0IW01.FQ0IWSEL[FQ0IWIXM];
    FQ0IM001.FQ0IMSEQ[FQ0IWIXM] = FQ0IW01.FQWSEQN4[FQ0IWIXM];
    FQ0IM001.FQ0IMPO[FQ0IWIXM] = FQ0IW01.FQWPCPOID[FQ0IWIXM];
    FQ0IM001.FY1FCTYC[FQ0IWIXM] = FQ0IW01.FY1FCTYC[FQ0IWIXM];
    FQ0IM001.YDFCD[FQ0IWIXM] = FQ0IW01.YDFCD[FQ0IWIXM];
    FQ0IM001.FQ0IMDF1[FQ0IWIXM] = FQ0IW01.YDF-DEF-CD1[FQ0IWIXM];
    FQ0IM001.FQ0IMDF2[FQ0IWIXM] = FQ0IW01.YDF-DEF-CD2[FQ0IWIXM];
    FQ0IM001.FQ0IMDF3[FQ0IWIXM] = FQ0IW01.YDF-DEF-CD3[FQ0IWIXM];
    FQ0IM001.FQ0IMCTN[FQ0IWIXM] = FQ0IW01.FQ-CRTN-ID[FQ0IWIXM];
    FQ0IM001.SY-SZ-ID-DESC[FQ0IWIXM] = FQ0IW01.SY-SZ-ID-DESC[FQ0IWIXM];

    /* ------------------------------------------------------------*/
     /* Make line visible.*/
    /* ------------------------------------------------------------*/
    set FQ0IM001.FQ0IMSEL[FQ0IWIXM] normal; /* Make visible*/

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    FQ0IW00.FQ0IWIXM = FQ0IW00.FQ0IWIXM + 1; /* Increment line index*/

  end


end // end FQ0I121

// Check attention identifier
Function FQ0I130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FQ0IW00.FQ0IWSWR == "Y") /* Request for data switch*/
      set FQ0IW01 empty;
    end

    FQ0IW00.FQ0IWSWF = "Y"; /* Format the map switch*/
    FQ0IW00.FQ0IWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FQ0IS01(); /* Purge any temporary storage*/

      XSFQS01(); /* Exit to another application*/

      set FQ0IM001.CATOAP cursor, bold; /* Highlight*/

    else
      FQWREC.XXXMSGNO = 18; /* Indicate PF key not valid*/
      FQWREC.XXXMODID = "130"; /* Process name*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf5) /* PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FQ0AM001"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* Set to factory application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* Set to factory application*/
    end

    FQ0IS01(); /* Purge any temporary storage*/

    XSFQS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf15  /* AND PF15 NOT PRESSED*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/

    FQWREC.XXXMODID = "130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FQ0I130

// Reset highlighted fields
Function FQ0I140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FQ0IM001.CATOAP initialAttributes; /* TO application*/
  set FQ0IM001.CAITEM initialAttributes; /* Application data*/

  FQ0IW00.FQ0IWIXM = 1; /* Initialize line index*/

  while (FQ0IW00.FQ0IWIXM <= 10) /* Until end of lines*/

    set FQ0IM001.FQ0IMSEL[FQ0IWIXM] normal; /* Reset select flag*/

    FQ0IW00.FQ0IWIXM = FQ0IW00.FQ0IWIXM + 1; /* Increment line index*/

  end


end // end FQ0I140

// Verify the entered data
Function FQ0I150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM001.CAITEM > " ") /* Application data was entered*/

    FQWREC.XXXMODID = "150"; /* Module identification*/
    set FQ0IM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FQ0I151(); /* Verify scroll request*/

  else

    FQ0I152(); /* verify changed data from map001*/

  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end FQ0I150

// Verify scroll request
Function FQ0I151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FQ0IW00.XXXTSPAG < 2)       /* and no previous pages*/

    FQWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(13); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FQ0IW00.XXXTSPAG >= FQ0IW00.TA5TSQIX) /* and no more pages*/

    FQWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(14); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FQ0IW00.FQ0IWIXM = 10; /* Initialize line index*/

  while (FQ0IW00.FQ0IWIXM > 0) /* Until end of lines*/

    if (FQ0IM001.FQ0IMSEL[FQ0IWIXM] != " " /* If selection was made*/
     && FQ0IM001.FQ0IMSEL[FQ0IWIXM] != "V") /* and line not reviewed*/

      FQWREC.XXXMODID = "151"; /* Module identification*/
      set FQ0IM001.FQ0IMSEL[FQ0IWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(9); /* Indicate data may not change*/

    end

    FQ0IW00.FQ0IWIXM = FQ0IW00.FQ0IWIXM - 1; /* Decrement line number*/

  end


end // end FQ0I151

// Verify selection
Function FQ0I152()
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    return; /* Exit to display map*/
  end

  if (FQ0IM001.FQ0IMSTY != " "
   || FQ0IM001.FQ0IMCLR != " "
   || FQ0IM001.FQ0IMDIM != " ")

    FQ0IS22(); /* Verify style*/

    if (SQLCA.VAGen_SQLCODE == 0)
      FQ0IW00.FQ0IWSWR = "Y"; /* Request for data switch*/
      FQWREC.SY1STNBR = FQ0IM001.FQ0IMSTY;
      FQWREC.SY2CLRID = FQ0IM001.FQ0IMCLR;
      FQWREC.XDMCD = FQ0IM001.FQ0IMDIM;
      return; /* Return to previous process*/
    else
      FQWREC.XXXMODID = "152";
      converseLib.validationFailed(77); /* invalid style. blank out to*/
      set FQ0IM001.FQ0IMSTY cursor; /* disply all*/
      exit stack;
    end

  end

    /* ------------------------------------------------------------*/
     /* Otherwise, verify data( S for select )in the line.*/
    /* ------------------------------------------------------------*/

  FQ0IW00.FQ0IWIXM = 10; /* Initialize line index*/

  while (FQ0IW00.FQ0IWIXM > 0) /* Until end of lines*/

    FQ0I153(); /* Verify data in the line*/

    FQ0IW00.FQ0IWIXM = FQ0IW00.FQ0IWIXM - 1; /* Decrement line number*/

  end

end // end FQ0I152

// Verify selection
Function FQ0I153()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM001.FQ0IMSEL[FQ0IWIXM] > " ") /* Selection was entered*/

    if (FQ0IM001.FQ0IMSEL[FQ0IWIXM] != "S" /* Valid selection character*/
     && FQ0IM001.FQ0IMSEL[FQ0IWIXM] != "V") /* Valid reviewed character*/

      FQWREC.XXXMODID = "152"; /* Module identification*/
      set FQ0IM001.FQ0IMSEL[FQ0IWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(12); /* Indicate only "S" may be used*/

    else

      if (FQ0IM001.FQ0IMSEL[FQ0IWIXM] != "V") /* If not reviewed*/
        /* ------------------------------------------------------------*/
         /* Verify that no other selection was made at the same time.*/
        /* ------------------------------------------------------------*/
        FQ0IW00.FQ0IWIX2 = FQ0IW00.FQ0IWIXM - 1; /* Set counter*/

        while (FQ0IW00.FQ0IWIX2 > 0) /* While counter greater than 0*/
          if (FQ0IM001.FQ0IMSEL[FQ0IWIX2] == "S") /* Another selection made*/

            FQWREC.XXXMODID = "152"; /* Module identification*/
            set FQ0IM001.FQ0IMSEL[FQ0IWIXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(8); /* More than one selection*/
          end

          FQ0IW00.FQ0IWIX2 = FQ0IW00.FQ0IWIX2 - 1; /* Decrement counter*/
        end

      end
    end
  end


end // end FQ0I153

// Process valid input request
Function FQ0I160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  FQ0IW00.FQ0IWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    set FQ0IM001 initial;
    FQ0IW00.XXXTSPAG = FQ0IW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    set FQ0IM001 initial;
    FQ0IW00.XXXTSPAG = FQ0IW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------------*/
   /* If enter & line selected, set switches for MAP2 and update*/
   /* temp storage.  EZETST contains pointer for selected line.*/
   /* otherwise, re-display map001 with new selection criteria(style).*/
   /* ------------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* If enter*/
    if ("S" in FQ0IM001.FQ0IMSEL)

      FQ0IW00.FQ0IWMAP = "2"; /* Map to be displayed switch*/
      FQ0IW00.FQ0IWSWR = "Y"; /* Request for data switch*/
      FQ0IW00.FQ0IWASW = "N"; /* Add function request switch*/
      FQ0IW01.FQ0IWSEL[sysVar.arrayIndex] = "V"; /* Move 'v' for reviewed*/
    else
      FQ0IW00.FQ0IWMAP = "1"; /* Map to be displayed switch*/
      FQ0IW00.FQ0IWASW = "N"; /* Add function request switch*/
      FQ0IW00.FQ0IWSWR = "Y"; /* Request for data switch*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF15 was pressed, set BAR CODE ADD FUNCTION REQUEST ON.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf15) /* If PF18 was pressed*/

    FQ0IW00.FQ0IWMAP = "2"; /* Map to be displayed switch*/
    FQ0IW00.FQ0IWASW = "Y"; /* Add function request switch*/
    FQ0IW00.FQ0IWSWR = "N"; /* Request for data switch*/
    FQ0IW00.FQ0IW-BAR-CODE-SCAN = "Y";

  end

   /* ------------------------------------------------------------*/
   /* If PF18 was pressed, set add function request switch on.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf18) /* If PF18 was pressed*/

    FQ0IW00.FQ0IWMAP = "2"; /* Map to be displayed switch*/
    FQ0IW00.FQ0IWASW = "Y"; /* Add function request switch*/
    FQ0IW00.FQ0IWSWR = "N"; /* Request for data switch*/

  end

end // end FQ0I160

// Main process to display map2
Function FQ0I200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FQ0I210(); /* Obtain the data to display*/

  FQ0I220(); /* Format and display the map*/

  FQ0I230(); /* Check attention identifier*/

  FQ0I240(); /* Reset fields to normal intensity*/

  FQ0I250(); /* Verify the entered data*/

  FQ0I260(); /* Process valid input request*/


end // end FQ0I200

// Obtain the data to display
Function FQ0I210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW00.FQ0IWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage.*/
   /* ------------------------------------------------------------*/
  set FQ0IW02 empty; /* M002 display storage*/
   /* E 'N' TO FQ0IW02.FQ-HOLD-FL;*/

   /* ------------------------------------------------------------*/
   /* Save MAP1 display storage in MAP2 storage area.*/
   /* ------------------------------------------------------------*/

  if (FQ0IW00.FQ0IWASW == "N") /* Not add function*/
    FQ0IW02.SY1STNBR = FQ0IW01.SY1STNBR[sysVar.arrayIndex]; /* Style*/
    FQ0IW02.SY2CLRID = FQ0IW01.SY2CLRID[sysVar.arrayIndex]; /* Color*/
    FQ0IW02.XDMCD = FQ0IW01.XDMCD[sysVar.arrayIndex]; /* Dim*/
    FQ0IW02.XDVCD = FQ0IW01.XDVCD[sysVar.arrayIndex]; /* Div cd*/
    FQ0IW02.XBCCD = FQ0IW01.XBCCD[sysVar.arrayIndex]; /* brand code*/
    FQ0IW02.FQ-TRLR-ID = FQ0IW01.FQ-TRLR-ID[sysVar.arrayIndex]; /* trailer id*/
    FQ0IW02.FQ0IWINSP = FQ0IW01.XXXUSER[sysVar.arrayIndex]; /* inspector*/
    FQ0IW02.FQWSEQN4 = FQ0IW01.FQWSEQN4[sysVar.arrayIndex]; /* def prod seq*/
    FQ0IW02.FQWPCPOID = FQ0IW01.FQWPCPOID[sysVar.arrayIndex]; /* poid*/
    FQ0IW02.YDFCD = FQ0IW01.YDFCD[sysVar.arrayIndex]; /* Def-code*/
    FQ0IW02.FY1FCTYC = FQ0IW01.FY1FCTYC[sysVar.arrayIndex]; /* Fcty code*/
    FQ0IW02.YDF-DEF-CD1 = FQ0IW01.YDF-DEF-CD1[sysVar.arrayIndex]; /* alt defcd 1*/
    FQ0IW02.YDF-DEF-CD2 = FQ0IW01.YDF-DEF-CD2[sysVar.arrayIndex]; /* alt defcd 2*/
    FQ0IW02.YDF-DEF-CD3 = FQ0IW01.YDF-DEF-CD3[sysVar.arrayIndex]; /* alt defcd 3*/
    FQ0IW02.FQ-CRTN-ID = FQ0IW01.FQ-CRTN-ID[sysVar.arrayIndex]; /* carton id*/
    FQ0IW02.SY-SZ-ID-DESC = FQ0IW01.SY-SZ-ID-DESC[sysVar.arrayIndex]; /* size*/
    FQ0IW02.ZZZSDT = FQ0IW01.ZZZSDT[sysVar.arrayIndex]; /* Setup date*/
    FQ0IW02.ZZZCHGDT = FQ0IW01.ZZZCHGDT[sysVar.arrayIndex]; /* Chg date*/
    FQ0IW02.ZZZCHGTM = FQ0IW01.ZZZCHGTM[sysVar.arrayIndex]; /* Chg time*/
    FQ0IW02.XXXUSER = FQ0IW01.XXXUSER[sysVar.arrayIndex]; /* User ID*/

    FQ0IW00.FQ0IWPNT = sysVar.arrayIndex; /* Save pointer*/

    /* ------------------------------------------------------------*/
     /* Obtain descriptions.*/
    /* ------------------------------------------------------------*/
    FQ0I211(); /* Obtain descriptions*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FQ0IW00.FQ0IWSWR = "N"; /* Request for data switch*/


end // end FQ0I210

// Obtain descriptions
Function FQ0I211()
   /* ------------------------------------------------------------*/
   /* Obtain secondary return code description.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW02.YDF-DEF-CD1 != " ") /* If defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ0IW02.YDF-DEF-CD1;

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
      FQ0IW02.FQ0IW-YDF-DEF-DESC1 = YDFTBL.YDFDESC[sysVar.arrayIndex];
    end

  end

   /* ------------------------------------------------------------*/
   /* Obtain alternate return code descriptions.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW02.YDF-DEF-CD2 != " ") /* If defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ0IW02.YDF-DEF-CD2;

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
      FQ0IW02.FQ0IW-YDF-DEF-DESC2 = YDFTBL.YDFDESC[sysVar.arrayIndex];
    end

  end
  if (FQ0IW02.YDF-DEF-CD3 != " ") /* If defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ0IW02.YDF-DEF-CD3;

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
      FQ0IW02.FQ0IW-YDF-DEF-DESC3 = YDFTBL.YDFDESC[sysVar.arrayIndex];
    end

  end

   /* ------------------------------------------------------------*/
   /* Obtain defective name.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW02.YDFCD != " ") /* If defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ0IW02.YDFCD; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
      FQ0IW02.YDFDESC = YDFTBL.YDFDESC[sysVar.arrayIndex];
    end

  end

   /* ------------------------------------------------------------*/
    /* Obtain style/color/dimension descriptions.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW02.SY1STNBR != " ") /* Style*/

    /* ------------------------------------------------------------*/
     /* Select SYCLR.*/
    /* ------------------------------------------------------------*/
    FQ0IS23(); /* Select SYCLR*/

    /* ------------------------------------------------------------*/
     /* If row was found, obtain descriptions.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row was found*/

      FQ0IW02.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
   /* MOVE PG2REC.SY2CLRAB TO FQ0IW02.SY2CLRAB; /* Color description*/

    end
  end


end // end FQ0I211

// Format and converse the map
Function FQ0I220()
   /* ----------------------------------------------------*/
   /* If an error was found, format data to be displayed.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/

    if (FQ0IW00.FQ0IW-BAR-CODE-SCAN == "Y"
     && converseVar.validationMsgNum == 87)
       /* NEXT SENTENCE*/
    else
      FQWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FQ0IW00.FQ0IWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FQ0IW00.FQ0IWSWF == "Y") /* Map must be formatted*/
      FQ0I221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQ0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FQ0IM002.CATOAP = COMMAREA.CATOAP; /* To application*/
  FQ0IM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FQWREC.XXXMSGNO != 0) /* Message to display*/
      if (FQWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FQWREC.XXXMSGNO);
      end /* Message number*/
    else
      FQ0IM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end
    FQ0IM002.XXXMODID = FQWREC.XXXMODID; /* Module identification*/

  end


  converse FQ0IM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQWREC.XXXMODID = " "; /* Module identification*/
  FQWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FQ0IM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FQ0IM002.CAITEM; /* Application data*/


end // end FQ0I220

// Format the display data
Function FQ0I221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FQ0IM002 initial; /* m002 input/output area*/

  FQ0IW00.FQ0IWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If transfered back from FQ0J, re-display the original data.*/
   /* Set up the correct attributes and cursor position according*/
   /* to the function(add/inq) before transfer from FQ0I to FQ0J.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CAITEM == "FQ0IM002")
    FQ0I222(); /* display map from fqwrec*/
    COMMAREA.CAITEM = " "; /* init the CAITEM field*/

  else
    /* -----------------------------------------------------------*/
     /* If regular inquriy funtion,  format the data from storage.*/
    /* -----------------------------------------------------------*/
    if (FQ0IW00.FQ0IWASW == "N") /* If not using add function*/

      FQ0I223(); /* format from storage*/
    else
      /* ------------------------------------------------------------*/
       /* If reqular add function, make fields enterable.*/
      /* ------------------------------------------------------------*/
      if (FQ0IW00.FQ0IWASW == "Y") /* If add function was requested*/
        FQ0I224(); /* set up screen & attr for add*/
      end
    end
  end

end // end FQ0I221

// Display data from FQWREC
Function FQ0I222()
   /* ------------------------------------------------------------*/
   /* Set up the correct attributes and cursor position according*/
   /* to the function before transfer from FQ0I to FQ0J.*/
   /* ------------------------------------------------------------*/
  FQWREC.CAUSERA = COMMAREA.CAUSERA;

   /* ------------------------------------------------------------*/
   /* When coming back from other application, commarea.causera*/
   /* portion is moved back to fqwrec.*/
   /* If style/color/dim is wildcarded, default to spaces.*/
   /* Otherwise they have real values that were saved.*/
   /* ------------------------------------------------------------*/
  if (FQWREC.SY1STNBR == "******") /* If style wildcarded*/
    FQWREC.SY1STNBR = "  "; /* Default to space*/
  else
    FQ0IM002.SY1STNBR = FQWREC.SY1STNBR;
  end

  if (FQWREC.SY2CLRID == "***") /* or color wildcarded*/
    FQWREC.SY2CLRID = " "; /* Default to spaces*/
  else
    FQ0IM002.SY2CLRID = FQWREC.SY2CLRID;
  end

  if (FQWREC.XDMCD == "**") /* or dimension wildcarded*/
    FQWREC.XDMCD = " "; /* Default to spaces*/
  else
    FQ0IM002.XDMCD = FQWREC.XDMCD;
  end

  if (FQ0IM002.SY1STNBR == " "
   && FQ0IM002.SY2CLRID == "00"
   && FQ0IM002.XDMCD == "00")
    FQ0IM002.SY2CLRID = " ";
    FQ0IM002.XDMCD = " ";
  end


  if (FQWREC.XDVCD == " " /* If dimension missing*/
   || FQWREC.XDVCD == "* ") /* or dimension wildcarded*/
    FQWREC.XDVCD = " "; /* Default to '00'*/
  else
    FQ0IM002.XDVCD = FQWREC.XDVCD;
  end

  FQ0IM002.SY1SSTNM = FQWREC.SY1SSTNM; /* Style name*/
  FQ0IM002.XDVCD = FQWREC.XDVCD;
  FQ0IM002.XBCCD = FQWREC.XBCCD;
   /* OVE FQWREC.FQWSEQN4 TO FQ0IM002.FQ0IMSEQ;       /* seq number*/
  FQ0IM002.FQ0IMPO = FQWREC.FQWPCPOID;
  FQ0IM002.FY1FCTYC = FQWREC.FY1FCTYC;
  FQ0IM002.FQ0IMCTN = FQWREC.FQ-CRTN-ID;
  FQ0IM002.SY-SZ-ID-DESC = FQWREC.SY-SZ-ID-DESC; /* size desc*/
  FQ0IM002.YDFCD = FQWREC.YDFCD; /* Defective code*/
  FQ0IM002.YDFDESC = FQWREC.YDFDESC; /* Def code desc*/
  FQ0IM002.FQ0IMDF1 = FQWREC.YDF-DEF-CD1;

   /* DETERMINE SECONDARY DEFECT CODE DESCRIPTION*/

  if (FQWREC.YDF-DEF-CD1 != " ")
    YDFREC.XGPCD = FQWREC.XGPCD;
    YDFREC.YDFCD = FQWREC.YDF-DEF-CD1;
    if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
      FQ0IM002.FQ0IM-YDF-DEF-DESC1 = YDFTBL.YDCCD[sysVar.arrayIndex];
    end
  end

  FQ0IM002.FQ0IMDF2 = FQWREC.YDF-DEF-CD2;

   /* DETERMINE 3RD DEFECT CODE DESCRIPTION*/

  if (FQWREC.YDF-DEF-CD2 != " ")
    YDFREC.XGPCD = FQWREC.XGPCD;
    YDFREC.YDFCD = FQWREC.YDF-DEF-CD2;
    if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
      FQ0IM002.FQ0IM-YDF-DEF-DESC2 = YDFTBL.YDCCD[sysVar.arrayIndex];
    end
  end

  FQ0IM002.FQ0IMDF3 = FQWREC.YDF-DEF-CD3;

   /* DETERMINE 4TH DEFECT CODE DESCRIPTION*/

  if (FQWREC.YDF-DEF-CD3 != " ")
    YDFREC.XGPCD = FQWREC.XGPCD;
    YDFREC.YDFCD = FQWREC.YDF-DEF-CD3;
    if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
      FQ0IM002.FQ0IM-YDF-DEF-DESC3 = YDFTBL.YDCCD[sysVar.arrayIndex];
    end
  end

  FQ0IM002.FQ0IMTID = FQWREC.FQ-TRLR-ID;
  FQ0IM002.FQ0IMINS = FQWREC.XXXUSER; /* inspector id*/

  if (FQWREC.FQWWASW == "Y") /* if it was add, unprotect fields*/
    FQ0IM002.FQ0IMFUN = "ADD"; /* add function*/
    FQ0IW00.FQ0IWASW = FQWREC.FQWWASW; /* re-establish function*/

    if (FQ0IW00.FQ0IW-BAR-CODE-SCAN == "Y")
      set FQ0IM002.FQ0IM-BAR-CD-LBL skip;
      set FQ0IM002.PC-BAR-CD-SEQ-NBR cursor, normal;
      set FQ0IM002.SY1STNBR normal;
    else
      set FQ0IM002.FQ0IM-BAR-CD-LBL skip, invisible;
      set FQ0IM002.PC-BAR-CD-SEQ-NBR skip, invisible;
      set FQ0IM002.SY1STNBR cursor, normal;
    end

    set FQ0IM002.SY2CLRID normal; /* Color*/
    set FQ0IM002.XDMCD normal; /* Dim*/
    set FQ0IM002.YDFCD normal; /* Def code*/
    set FQ0IM002.FQ0IMDF1 normal; /* alt def cd 1*/
    set FQ0IM002.FQ0IMDF2 initialAttributes; /* alt def cd 1*/
    set FQ0IM002.FQ0IMDF3 initialAttributes; /* alt def cd 3*/
    set FQ0IM002.FQ0IMPO normal; /* poid*/
    set FQ0IM002.FY1FCTYC normal; /* fcty cd*/
    set FQ0IM002.FQ0IMCTN normal; /* carton id*/
    set FQ0IM002.SY-SZ-ID-DESC normal; /* size desc*/

    if (FQWREC.FQWWHDFL == "Y") /* if it was insp-hold*/
      set FQ0IM002.FQ0IMLT1 normal; /* display labels and data*/
      set FQ0IM002.FQ0IMLT1 skip;
      set FQ0IM002.FQ0IMCTN cursor; /* PUT CURSOR ON CARTON FIELD*/
      FQ0IW02.FQ-HOLD-FL = FQWREC.FQWWHDFL; /* re-establish hold fl*/
      converseLib.validationFailed(67);
    end

    if (FQWREC.XDVCD != " "
     && FQWREC.XBCCD != " ")
      set FQ0IM002.FQ0IMLT3 normal; /* display labels and data*/
      set FQ0IM002.FQ0IMLT4 normal;
      set FQ0IM002.FQ0IMLT3 skip;
      set FQ0IM002.FQ0IMLT4 skip;
    end

  else
    /* --------------------------------------------------------*/
     /* If Inquiry, protect these fields.*/
    /* --------------------------------------------------------*/
    FQ0IM002.FQ0IMFUN = "INQUIRY";
    set FQ0IM002.CATOAP cursor; /* fields and cursor on bottom fld.*/
    set FQ0IM002.FQ0IM-BAR-CD-LBL skip, invisible;
    set FQ0IM002.PC-BAR-CD-SEQ-NBR skip, invisible;
    set FQ0IM002.SY1STNBR skip; /* Style number*/
    set FQ0IM002.SY2CLRID skip; /* Color*/
    set FQ0IM002.XDMCD skip; /* Dim*/
    set FQ0IM002.YDFCD skip; /* Def code*/
    set FQ0IM002.FQ0IMPO skip; /* poid*/
    set FQ0IM002.FY1FCTYC skip; /* fcty cd*/
    set FQ0IM002.FQ0IMDF1 skip; /* alt def cd 1*/
    set FQ0IM002.FQ0IMDF2 skip, invisible; /* alt def cd 2*/
    set FQ0IM002.FQ0IMDF3 skip, invisible; /* alt def cd 3*/
    set FQ0IM002.FQ0IMCTN skip; /* carton id*/
    set FQ0IM002.SY-SZ-ID-DESC skip; /* size desc*/

    set FQ0IM002.FQ0IMLT3 normal; /* dark to normal on div & brand*/
    set FQ0IM002.FQ0IMLT4 normal;
    set FQ0IM002.FQ0IMLT3 skip; /* skip the label*/
    set FQ0IM002.FQ0IMLT4 skip;

  end

end // end FQ0I222

// Display data from storage
Function FQ0I223()
   /* ------------------------------------------------------------*/
   /* If normal inquriy, format the data from storage.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW00.FQ0IWASW == "N") /* If not using add function*/

    FQ0IM002.SY1STNBR = FQ0IW02.SY1STNBR; /* Style number*/
    FQ0IM002.SY1SSTNM = FQ0IW02.SY1SSTNM; /* Style name*/
    FQ0IM002.SY2CLRID = FQ0IW02.SY2CLRID; /* Color id*/
    FQ0IM002.XDMCD = FQ0IW02.XDMCD; /* Dimension code*/
    FQ0IM002.XDVCD = FQ0IW02.XDVCD;
    FQ0IM002.XBCCD = FQ0IW02.XBCCD;
    /* OVE FQ0IW02.FQWSEQN4 TO FQ0IM002.FQ0IMSEQ;       /* seq number*/

    FQ0IM002.FQ0IMTID = FQ0IW02.FQ-TRLR-ID;
    FQ0IM002.FQ0IMINS = FQ0IW02.XXXUSER; /* inspector id*/

    FQ0IM002.YDFCD = FQ0IW02.YDFCD; /* Defective code*/
    FQ0IM002.YDFDESC = FQ0IW02.YDFDESC; /* Def code desc*/
    FQ0IM002.FQ0IMDF1 = FQ0IW02.YDF-DEF-CD1;
    FQ0IM002.FQ0IM-YDF-DEF-DESC1 = FQ0IW02.FQ0IW-YDF-DEF-DESC1;
    FQ0IM002.FQ0IMDF2 = FQ0IW02.YDF-DEF-CD2;
    FQ0IM002.FQ0IM-YDF-DEF-DESC2 = FQ0IW02.FQ0IW-YDF-DEF-DESC2;
    FQ0IM002.FQ0IMDF3 = FQ0IW02.YDF-DEF-CD3;
    FQ0IM002.FQ0IM-YDF-DEF-DESC3 = FQ0IW02.FQ0IW-YDF-DEF-DESC3;

    FQ0IM002.FQ0IMPO = FQ0IW02.FQWPCPOID;
    FQ0IM002.FY1FCTYC = FQ0IW02.FY1FCTYC;
    FQ0IM002.FQ0IMCTN = FQ0IW02.FQ-CRTN-ID;
    FQ0IM002.SY-SZ-ID-DESC = FQ0IW02.SY-SZ-ID-DESC; /* size desc*/
    FQ0IM002.FQ0IMFUN = "INQUIRY";

    /* ------------------------------------------------------------*/
     /* If Inquiry, protect these fields.*/
    /* ------------------------------------------------------------*/

    set FQ0IM002.FQ0IM-BAR-CD-LBL skip, invisible;
    set FQ0IM002.PC-BAR-CD-SEQ-NBR skip, invisible;
    set FQ0IM002.SY1STNBR skip; /* Style number*/
    set FQ0IM002.SY2CLRID skip; /* Color*/
    set FQ0IM002.XDMCD skip; /* Dim*/
    set FQ0IM002.YDFCD skip; /* Def code*/
    set FQ0IM002.FQ0IMPO skip; /* poid*/
    set FQ0IM002.FY1FCTYC skip; /* fcty cd*/
    set FQ0IM002.FQ0IMDF1 skip; /* alt def cd 1*/
    set FQ0IM002.FQ0IMDF2 skip, invisible; /* alt def cd 2*/
    set FQ0IM002.FQ0IMDF3 skip, invisible; /* alt def cd 3*/
    set FQ0IM002.FQ0IMCTN skip; /* carton id*/
    set FQ0IM002.SY-SZ-ID-DESC skip; /* size desc*/

    /* ----------------------------------------------------------*/
     /* Make these labels visible.*/
    /* ----------------------------------------------------------*/

    set FQ0IM002.FQ0IMLT3 normal; /* dark to normal on div & brand*/
    set FQ0IM002.FQ0IMLT4 normal;
    set FQ0IM002.FQ0IMLT3 skip; /* skip the labels*/
    set FQ0IM002.FQ0IMLT4 skip;

    set FQ0IM002.CATOAP cursor;

  end

end // end FQ0I223

// Format screen for initial add
Function FQ0I224()
   /* ------------------------------------------------------------*/
   /* If normal add function, make fields enterable.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW00.FQ0IWASW == "Y") /* If add function was requested*/

    if (FQ0IW00.FQ0IW-BAR-CODE-SCAN == "Y")
      set FQ0IM002.FQ0IM-BAR-CD-LBL skip;
      set FQ0IM002.PC-BAR-CD-SEQ-NBR cursor, normal;
      set FQ0IM002.SY1STNBR normal;
    else
      set FQ0IM002.FQ0IM-BAR-CD-LBL skip, invisible;
      set FQ0IM002.PC-BAR-CD-SEQ-NBR skip, invisible;
      set FQ0IM002.SY1STNBR cursor, normal;
    end

    set FQ0IM002.SY2CLRID normal; /* Color*/
    set FQ0IM002.XDMCD normal; /* Dim*/
    set FQ0IM002.YDFCD normal; /* Def code*/
    set FQ0IM002.FQ0IMDF1 normal; /* alt def cd 1*/
    set FQ0IM002.FQ0IMDF2 initialAttributes; /* alt def cd 2*/
    set FQ0IM002.FQ0IMDF3 initialAttributes; /* alt def cd 3*/

    set FQ0IM002.FQ0IMPO normal; /* poid*/
    set FQ0IM002.FY1FCTYC normal; /* fcty cd*/
    set FQ0IM002.FQ0IMCTN normal; /* carton id*/
    set FQ0IM002.SY-SZ-ID-DESC normal; /* size desc*/
   /* ET FQ0IM002.FQ0IMLT1 NORMAL;*/
   /* ET FQ0IM002.FQ0IMLT1 AUTOSKIP;        /* dark to normal on div & brand*/

    FQ0IM002.FQ0IMFUN = "ADD"; /* add function*/
    /* OVE 01 TO FQ0IM002.FQ0IMSEQ;          /* display default seq #*/
    FQ0IM002.FQ0IMINS = COMMAREA.CAUSERID; /* inspector=logid*/
    FQ0IS29(); /* get current open trailer id*/
    FQ0IM002.FQ0IMTID = VDFTRL01.FQ0JWTID; /* disp current trlr id*/
    FQ0IM002.FQ0IMCTN = FQ0IW00.FQ-CRTN-ID; /* disp carton id*/

  end

end // end FQ0I224

// Check attention identifier
Function FQ0I230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FQ0IW00.FQ0IWSWR == "Y") /* Request for data switch*/
      set FQ0IW02 empty;
    end

    FQ0IW00.FQ0IWSWR = "N"; /* Data request switch*/
    FQ0IW00.FQ0IWSWF = "Y"; /* Map formatted switch*/
    FQWREC.FQWMODSW = "N"; /* Modified data exit switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FQ0IS01(); /* Purge any temporary storage*/

      XSFQS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* If transfer failed, return to first map.*/
      /* ------------------------------------------------------------*/
      set FQ0IM002.CATOAP cursor, bold; /* Highlight*/

    else
      converseLib.validationFailed(18); /* Indicate PF key not valid*/
      FQWREC.XXXMODID = "230"; /* Process name*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* PF3 was pressed*/
   || converseVar.eventKey is pf5  /* PF5 was pressed*/
   || converseVar.eventKey is pf6  /* PF6 was pressed*/
   || converseVar.eventKey is pf15 /* PF15 was pressed*/
   || converseVar.eventKey is pf16) /* PF16 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FQ0IM002"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      if (FQ0IW00.FQ0IWASW == "Y") /* If add function performed*/
        FQ0IW00.FQ0IWSWR = "Y"; /* Data request switch*/
      end

      FQ0IW00.FQ0IWMAP = "1"; /* Indicate map 1*/
      FQ0IW00.FQ0IWSWF = "Y"; /* Map formatted switch*/

      exit stack; /* Exit to redisplay map*/

    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* Set to factory application*/
    end


    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "FQ0J"; /* Set to inspector hold appl*/
      FQ0I231(); /* save map data in fqwrec &move*/
                                           /* to commarea to re-display*/
                                           /* when comes back from FQ0J.*/
    end

    if (converseVar.eventKey is pf15) /* PF15 read Bar Code mode*/
      FQ0IW00.FQ0IW-BAR-CODE-SCAN = "Y";
      return;
    end

    if (converseVar.eventKey is pf16) /* PF15 read Bar Code mode*/
      FQ0IW00.FQ0IW-BAR-CODE-SCAN = "N";
      return;
    end

    FQ0IS01(); /* Purge any temporary storage*/

    XSFQS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, return to first map.*/
    /* ------------------------------------------------------------*/
    set FQ0IM001.CATOAP cursor, bold; /* Highlight*/
    FQ0IW00.FQ0IWMAP = "1"; /* Indicate map 1*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FQWREC.XXXMODID = "230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FQ0I230

// Save map data to re-display
Function FQ0I231()
   /* ------------------------------------------------------------------*/
   /* Save the current map data in fqwrec and then in commarea.causera.*/
   /* After transferred back from FQ0J, it will be used to re-display*/
   /* the same data onto map again.*/
   /* -----------------------------------------------------------------*/

  FQWREC.SY1STNBR = FQ0IM002.SY1STNBR;
  FQWREC.SY1SSTNM = FQ0IM002.SY1SSTNM;
  FQWREC.SY2CLRID = FQ0IM002.SY2CLRID;
  FQWREC.XDMCD = FQ0IM002.XDMCD;
  FQWREC.XDVCD = FQ0IM002.XDVCD;
  FQWREC.XBCCD = FQ0IM002.XBCCD;
   /* OVE FQ0IM002.FQ0IMSEQ TO FQWREC.FQWSEQN4;*/
  FQWREC.FQWPCPOID = FQ0IM002.FQ0IMPO;
  FQWREC.FY1FCTYC = FQ0IM002.FY1FCTYC;
  FQWREC.FQ-CRTN-ID = FQ0IM002.FQ0IMCTN;
  FQWREC.SY-SZ-ID-DESC = FQ0IM002.SY-SZ-ID-DESC;

  FQ0IS-37-YDFCD(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS;*/
  FQWREC.YDFCD = FQ0IW02.YDFCD;
  FQWREC.YDFDESC = FQ0IM002.YDFDESC;

  FQ0IS-38-YDFCD-2(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS;*/
  FQWREC.YDF-DEF-CD1 = FQ0IW02.YDF-DEF-CD1;

  FQ0IS-39-YDFCD-3(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS;*/
  FQWREC.YDF-DEF-CD2 = FQ0IW02.YDF-DEF-CD2;

  FQ0IS-40-YDFCD-4(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS;*/
  FQWREC.YDF-DEF-CD3 = FQ0IW02.YDF-DEF-CD3;

  FQWREC.FQ-TRLR-ID = FQ0IM002.FQ0IMTID;
  FQWREC.XXXUSER = FQ0IM002.FQ0IMINS;

  if (FQ0IW00.FQ0IWASW == "Y") /* save the current function flag*/
    FQWREC.FQWWASW = "Y";
  else
    FQWREC.FQWWASW = "N";
  end

  if (FQ0IW02.FQ-HOLD-FL == "Y") /* save the current hold flag*/
    FQWREC.FQWWHDFL = "Y";
  else
    FQWREC.FQWWHDFL = "N";
  end

  COMMAREA.CAUSERA = FQWREC.CAUSERA;
end // end FQ0I231

// Reset highlighted fields
Function FQ0I240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  if (FQ0IW00.FQ0IWASW == "Y") /* If add function was requested*/

    if (FQ0IW00.FQ0IW-BAR-CODE-SCAN == "Y")
      set FQ0IM002.FQ0IM-BAR-CD-LBL skip;
      set FQ0IM002.PC-BAR-CD-SEQ-NBR cursor, normal;
      set FQ0IM002.SY1STNBR normal;
    else
      set FQ0IM002.FQ0IM-BAR-CD-LBL skip, invisible;
      set FQ0IM002.PC-BAR-CD-SEQ-NBR skip, invisible;
      set FQ0IM002.SY1STNBR cursor, normal;
    end

    set FQ0IM002.SY2CLRID normal;
    set FQ0IM002.XDMCD normal;
    set FQ0IM002.YDFCD normal; /* Defective code*/
    set FQ0IM002.FQ0IMDF1 normal;
    set FQ0IM002.FQ0IMDF2 initialAttributes;
    set FQ0IM002.FQ0IMDF3 initialAttributes;
    set FQ0IM002.FQ0IMPO normal; /* poid*/
    set FQ0IM002.FY1FCTYC normal; /* Factory code*/
    set FQ0IM002.FQ0IMCTN normal; /* carton id*/
    set FQ0IM002.SY-SZ-ID-DESC normal; /* size description*/

  end

  set FQ0IM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FQ0IM002.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0IM002.YDFCD == "?" /* defect list requested*/
  )                        
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FQWREC.XXXMODID = "240"; /* Module identification*/
      converseLib.validationFailed(24); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/
    end

  else
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of defect codes.*/
   /* ------------------------------------------------------------*/
  if (FQ0IM002.YDFCD == "?") /* defect list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DEFECT CODES"; /* Heading*/
    XX0XW02.XGPCD = FQWREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYDF01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FQ0IM002.YDFCD = FQWREC.YDFCD; /* Restore prior code*/
    else

      FQ0IM002.YDFCD = YDFTBL.YDFCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ0IM002.YDFCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FQWREC.XXXMODID = "240"; /* Module identification*/
  converseLib.validationFailed(25); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FQ0I240

// Verify data that was entered
Function FQ0I250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CAITEM > " ") /* Application data entered*/

    FQWREC.XXXMODID = "250"; /* Module identification*/
    set FQ0IM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* IF BAR CODE SCAN MODE REQUESTED, SKIP EDIT CHECKS AND DISPLAY*/
   /* MAP WITH CURSOR ON BAR CODE FIELD.*/

  if (converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    return;
  end

   /* ------------------------------------------------------------*/
   /* If add function is being used, check if required fields are*/
   /* entered, and verify all entered fields.*/
   /* ------------------------------------------------------------*/

  if (FQ0IW00.FQ0IWASW == "Y") /* If row being added*/

    if (FQ0IM002.PC-BAR-CD-SEQ-NBR != 0)
      FQ0I-25001(); /* VERIFY BAR CODE*/
    end

    if (converseVar.validationMsgNum != 86) /* BAR CODE INVALID*/
      FQ0I251(); /* Verify required fields*/
      FQ0I252(); /* Verify sty/clr/dim*/
      FQ0I254(); /* Verify poid*/
      FQ0I255(); /* Verify factory code*/
      FQ0I259(); /* Verify sty/poid/fcty  combo*/
      FQ0I253(); /* Verify primary defect code*/
      FQ0I258(); /* Verify alternate defect codes*/

      if (FQ0IW02.FQ-HOLD-FL != "Y")

        FQ0IW02.FQYCNT1 = 0;
        FQ0IW02.FQ-HOLD-FL = "N";
        FQ0IS25(); /* Is product 'inspector hold'?*/
        FQ0IW02.FQYCNT1 = FQYREC.FQYCNT1;

        if (FQ0IW02.FQYCNT1 > 0)
         /* 8/18/95: ALLOW CARTON TO REMAIN ON INSPECTOR HOLD*/
              /* MOVE ' ' TO FQ0IM002.FQ0IMCTN;/* blank out carton id*/
              /* MOVE ' ' TO FQ0IW02.FQ-CRTN-ID;/* space to storage field*/
          FQ0IW02.FQ-HOLD-FL = "Y";
          FQWREC.FQWWHDFL = "Y";
          set FQ0IM002.CATOAP cursor;
          converseLib.validationFailed(67); /* Indicate it is inspector hold prod*/
          FQWREC.XXXMODID = "250"; /* Module identification*/
          set FQ0IM002.FQ0IMLT1 normal; /* display extra message 1*/
          set FQ0IM002.FQ0IMLT1 skip; /* display extra message 1*/
          set FQ0IM002.FQ0IMCTN cursor; /* PUT CURSOR ON CARTON FIELD*/
          FQ0IW02.FQ-CRTN-ID = FQ0IM002.FQ0IMCTN;
          FQ0IW00.FQ-CRTN-ID = FQ0IM002.FQ0IMCTN;

        else
          FQ0I256(); /* X-edit size desc & carton id*/
        end
      end

      FQ0I257(); /* if dup exists, determine next seq#*/
      set FQ0IM002.FQ0IMLT3 normal;
      set FQ0IM002.FQ0IMLT4 normal;

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0I250

// Verify required flds for ADD
Function FQ0I251()
   /* ------------------------------------------------------------*/
   /* Check to see if required fields has been entered for ADD*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.SY1STNBR == " " /* Style*/
   && FQ0IM002.YDFCD == " "    /* Defect*/
   && FQ0IM002.FQ0IMPO == 0    /* poid*/
   && FQ0IM002.FY1FCTYC == " " /* Factory*/
   && FQ0IM002.FQ0IMCTN == " " /* carton id*/
   && FQ0IM002.SY-SZ-ID-DESC == " ") /* size desc*/

    if (FQ0IW00.FQ0IW-BAR-CODE-SCAN == "Y")
      set FQ0IM002.PC-BAR-CD-SEQ-NBR cursor, bold;
      set FQ0IM002.SY1STNBR bold;
    else
      set FQ0IM002.SY1STNBR cursor, bold; /* Highlight*/
    end

    set FQ0IM002.YDFCD bold;
    set FQ0IM002.FQ0IMPO bold;
    set FQ0IM002.FY1FCTYC bold;
    set FQ0IM002.FQ0IMCTN bold;
    set FQ0IM002.SY-SZ-ID-DESC bold;

    converseLib.validationFailed(72); /* Indicate these fields are required*/
    FQWREC.XXXMODID = "251"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0I251

// Verify style/color/dim
Function FQ0I252()
   /* ------------------------------------------------------------*/
    /* If missing, default dimension.*/
   /* ------------------------------------------------------------*/
  if (FQ0IM002.SY1STNBR != " " /* If style entered*/
   && FQ0IM002.XDMCD == " ")   /* and dim missing*/

    FQ0IM002.XDMCD = "00"; /* Default to '00'*/
  else
    /* ------------------------------------------------------------*/
     /* If dimension was entered and style was not, error.*/
    /* ------------------------------------------------------------*/
    if (FQ0IM002.SY1STNBR == " " /* If style not entered*/
     && FQ0IM002.XDMCD != " ")   /* and dim entered*/

      converseLib.validationFailed(74); /* Indicate error*/
      FQWREC.XXXMODID = "252"; /* Module identification*/
      set FQ0IM002.SY1STNBR cursor, bold; /* Highlight*/
    end
  end

   /* ------------------------------------------------------------*/
    /* If missing, default color.*/
   /* ------------------------------------------------------------*/
  if (FQ0IM002.SY1STNBR != " " /* If style entered*/
   && FQ0IM002.SY2CLRID == " ") /* and color missing*/
    FQ0IM002.SY2CLRID = "00";
  else
    /* ------------------------------------------------------------*/
     /* If color was entered and style was not, error.*/
    /* ------------------------------------------------------------*/
    if (FQ0IM002.SY1STNBR == " " /* If style not entered*/
     && FQ0IM002.SY2CLRID != " ") /* and color missing*/

      converseLib.validationFailed(74); /* Indicate error*/
      FQWREC.XXXMODID = "252"; /* Module identification*/
      set FQ0IM002.SY1STNBR cursor, bold; /* Highlight*/
    end
  end


   /* ------------------------------------------------------------*/
    /* Verify style/color/dimension.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.SY1STNBR != " ") /* Style*/
    /* ------------------------------------------------------------*/
     /* Select SYCLR.*/
    /* ------------------------------------------------------------*/
    FQ0IS24(); /* Select SYCLR*/

    /* ------------------------------------------------------------*/
     /* If row was found, obtain descriptions.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row was found*/

      FQ0IM002.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
      FQ0IM002.XDMCD = PG2REC.XDMCD;
   /* MOVE PG2REC.SY2CLRAB TO FQ0IM002.SY2CLRAB; /* Color description*/
   /* MOVE PG2REC.XDMCD TO XDMREC.XDMCD;*/
   /* RETR XDMREC.XDMCD XDMTBL.XDMCD FQ0IM002.XDMABRV XDMABRV;*/

      FQ0IM002.XDVCD = PG2REC.XDVCD1;
      FQ0IW02.XDVCD = PG2REC.XDVCD1; /* save div id*/

      FQ0IM002.XBCCD = PG2REC.XBCCD;
      FQ0IW02.XBCCD = PG2REC.XBCCD; /* save brand code*/

    else
      set FQ0IM002.SY1STNBR cursor, bold; /* Highlight*/
      set FQ0IM002.SY2CLRID bold; /* Highlight*/
      set FQ0IM002.XDMCD bold; /* Highlight*/
      converseLib.validationFailed(33); /* Indicate data missing or invalid*/
      FQWREC.XXXMODID = "252"; /* Module identification*/

    end
  else
    set FQ0IM002.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(33); /* Indicate data missing or invalid*/
    FQWREC.XXXMODID = "252"; /* Module identification*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0I252

// Verify primary def cd
Function FQ0I253()
   /* ------------------------------------------------------------*/
   /* Verify primary defective code.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.YDFCD != " ") /* If defect code entered*/
    FQ0IW00.FQ0IW-DEFECT-TYPED-INVALID = "N";
    YDFREC.XGPCD = "02"; /* Format key*/
    FQ0IS-37-YDFCD(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
    YDFREC.YDFCD = FQ0IW02.YDFCD; /* Format key*/

    if (FQ0IW00.FQ0IW-DEFECT-TYPED-INVALID == "N"
     && YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FQ0IM002.YDFDESC = YDFTBL.YDFDESC[sysVar.arrayIndex]; /* Defect name*/

    else
      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      set FQ0IM002.YDFCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "253"; /* Module identification*/

    end
  else
    FQWREC.XXXMODID = "253"; /* Module identification*/
    if (FQ0IW00.FQ0IW-BAR-CODE-SCAN == "Y")
      converseLib.validationFailed(87); /* Indicate missing or invalid*/
      set FQ0IM002.YDFCD cursor;
    else
      converseLib.validationFailed(32); /* Indicate missing or invalid*/
      set FQ0IM002.YDFCD cursor, bold; /* Highlight*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    set FQ0IM002.FQ0IMLT3 normal;
    set FQ0IM002.FQ0IMLT4 normal;
    set FQ0IM002.FQ0IMLT3 skip;
    set FQ0IM002.FQ0IMLT4 skip;
  end

   /* ------------------------------------------------------------*/
   /* Verify SECONDARY DEFECTIVE CODE.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.FQ0IMDF1 != " ") /* If defect code entered*/
    FQ0IW00.FQ0IW-DEFECT-TYPED-INVALID = "N";
    YDFREC.XGPCD = "02"; /* Format key*/
    FQ0IS-38-YDFCD-2(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
    YDFREC.YDFCD = FQ0IW02.YDF-DEF-CD1; /* Format key*/

    if (FQ0IW00.FQ0IW-DEFECT-TYPED-INVALID == "N"
     && YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FQ0IM002.FQ0IM-YDF-DEF-DESC1 = YDFTBL.YDFDESC[sysVar.arrayIndex];

    else
      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      set FQ0IM002.FQ0IMDF1 cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "253"; /* Module identification*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify THIRD DEFECTIVE CODE.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.FQ0IMDF2 != " ") /* If defect code entered*/
    FQ0IW00.FQ0IW-DEFECT-TYPED-INVALID = "N";
    YDFREC.XGPCD = "02"; /* Format key*/
    FQ0IS-39-YDFCD-3(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
    YDFREC.YDFCD = FQ0IW02.YDF-DEF-CD2; /* Format key*/

    if (FQ0IW00.FQ0IW-DEFECT-TYPED-INVALID == "N"
     && YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FQ0IM002.FQ0IM-YDF-DEF-DESC2 = YDFTBL.YDFDESC[sysVar.arrayIndex];

    else
      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      set FQ0IM002.FQ0IMDF2 cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "253"; /* Module identification*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify FOURTH DEFECTIVE CODE.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.FQ0IMDF3 != " ") /* If defect code entered*/
    FQ0IW00.FQ0IW-DEFECT-TYPED-INVALID = "N";
    YDFREC.XGPCD = "02"; /* Format key*/
    FQ0IS-40-YDFCD-4(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
    YDFREC.YDFCD = FQ0IW02.YDF-DEF-CD3; /* Format key*/

    if (FQ0IW00.FQ0IW-DEFECT-TYPED-INVALID == "N"
     && YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FQ0IM002.FQ0IM-YDF-DEF-DESC3 = YDFTBL.YDFDESC[sysVar.arrayIndex];

    else
      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      set FQ0IM002.FQ0IMDF3 cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "253"; /* Module identification*/

    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    set FQ0IM002.FQ0IMLT3 normal;
    set FQ0IM002.FQ0IMLT4 normal;
    set FQ0IM002.FQ0IMLT3 skip;
    set FQ0IM002.FQ0IMLT4 skip;
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0I253

// Verify poid
Function FQ0I254()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FQZREC empty; /* clear date edit record*/

   /* ------------------------------------------------------------*/
   /* Format keys for call to date routine.*/
   /* ------------------------------------------------------------*/
  FQZREC.FQZBEGRG = FQ0IM002.FQ0IMPO; /* use begin date field*/
  FQZREC.FQZNUMYR = 99; /* Number of years*/

   /* ------------------------------------------------------------*/
   /* Edit range.  Send YYMMMM - receive back CCYYMMMM.*/
   /* ------------------------------------------------------------*/
  XSFQS05(); /* Common date edit routine*/

   /* ------------------------------------------------------------*/
   /* If a poid is entered, check return.*/
   /* ------------------------------------------------------------*/
  if (FQ0IM002.FQ0IMPO != 0) /* poid range*/
    if (FQZREC.FQZBEGRC == 0) /* Beg date was valid*/
      FQ0IM002.FQ0IMPO = FQZREC.FQZBEGRG; /* Begin date*/
      FQ0IW02.PC-PO-ID-MO-RNG = FQZREC.FQZBCYMM; /* returned(ccyymmmm)*/

    else
      FQWREC.XXXMODID = "254"; /* module identification*/
      set FQ0IM002.FQ0IMPO cursor, bold; /* Highlight*/
      converseLib.validationFailed(34); /* Indicate invalid*/
    end

  else
    FQWREC.XXXMODID = "254"; /* module identification*/
    set FQ0IM002.FQ0IMPO cursor, bold; /* Highlight*/
    converseLib.validationFailed(34); /* Indicate invalid*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    set FQ0IM002.FQ0IMLT3 normal;
    set FQ0IM002.FQ0IMLT4 normal;
    set FQ0IM002.FQ0IMLT3 skip;
    set FQ0IM002.FQ0IMLT4 skip;
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0I254

// Verify factory
Function FQ0I255()
   /* ------------------------------------------------------------*/
   /* Verify factory code.*/
   /* ------------------------------------------------------------*/
  if (FQ0IM002.FY1FCTYC != " ") /* If factory entered*/
    /* ------------------------------------------------------------*/
     /* Select FCTY.*/
    /* ------------------------------------------------------------*/
    FQ0IS21(); /* Select FCTY*/

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
      /* MOVE FY1REC.FY1FCTSN TO FQ0IM002.FY1FCTSN; /* Factory name*/
      /* next sentence*/
    else
      set FQ0IM002.FY1FCTYC cursor, bold; /* Highlight*/
      converseLib.validationFailed(30); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "255"; /* Module identification*/
    end
  else
    set FQ0IM002.FY1FCTYC cursor, bold; /* Highlight*/
    converseLib.validationFailed(30); /* Indicate missing or invalid*/
    FQWREC.XXXMODID = "255"; /* Module identification*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    set FQ0IM002.FQ0IMLT3 normal;
    set FQ0IM002.FQ0IMLT4 normal;
    set FQ0IM002.FQ0IMLT3 skip;
    set FQ0IM002.FQ0IMLT4 skip;
  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0I255

// Edit size desc & carton id
Function FQ0I256()
   /* ------------------------------------------------------------*/
   /* Edit size desc and carton id.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.SY-SZ-ID-DESC == " ")
    set FQ0IM002.SY-SZ-ID-DESC cursor, bold; /* Highlight*/
    converseLib.validationFailed(84); /* NEED SIZE desc*/
    FQWREC.XXXMODID = "256"; /* Module identification*/
  else
    FQ0IS34();
    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      set FQ0IM002.SY-SZ-ID-DESC cursor, bold; /* Highlight*/
    end
  end

  if (FQ0IM002.FQ0IMCTN == " ")
    set FQ0IM002.FQ0IMCTN cursor, bold;
    converseLib.validationFailed(69); /* NEED CARTON ID*/
    FQWREC.XXXMODID = "256";
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    set FQ0IM002.FQ0IMLT3 normal;
    set FQ0IM002.FQ0IMLT4 normal;
    set FQ0IM002.FQ0IMLT3 skip;
    set FQ0IM002.FQ0IMLT4 skip;
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0I256

// Check dup & get next seq #
Function FQ0I257()
   /* ------------------------------------------------------------*/
   /* Check to see if a duplicate exists in the data base*/
   /* and determine the next sequence number by increment by 1.*/
   /* ------------------------------------------------------------*/
  FQ0IW02.FQ-DEF-SEQ-NBR = 0;

  FQ0IS26(); /* Open VDFRTN02 curors(S2)*/

   /* ----------------------------------------------------------*/
   /* Fetch and get the sequence number.*/
   /* ----------------------------------------------------------*/
  while (FQ0IW00.FQ0IWEOC == "N") /* Until end of cursor*/

    FQ0IS27(); /* Fetch a row*/

    if (FQ0IW00.FQ0IWEOC == "N") /* If not end-of-cursor*/
      FQ0IW02.FQ-DEF-SEQ-NBR = VDFRTN02.FQ-DEF-SEQ-NBR;
    end
  end

  FQ0IW02.FQ-DEF-SEQ-NBR = FQ0IW02.FQ-DEF-SEQ-NBR + 1;

   /* ------------------------------------------------------------*/
   /* Close VDFRTN02*/
   /* ------------------------------------------------------------*/
  FQ0IS28(); /* Close VDFRTN02 cursor*/

end // end FQ0I257

// Verify alternate def codes
Function FQ0I258()
   /* ------------------------------------------------------------*/
   /* Make sure that previous alt codes are entered.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.FQ0IMDF1 == " ")
    if (FQ0IM002.FQ0IMDF2 != " ")
      set FQ0IM002.FQ0IMDF1 cursor, bold;
      converseLib.validationFailed(80); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "258"; /* Module identification*/
    else
      if (FQ0IM002.FQ0IMDF3 != " ")
        set FQ0IM002.FQ0IMDF1 cursor, bold;
        converseLib.validationFailed(80); /* Indicate missing or invalid*/
        FQWREC.XXXMODID = "258"; /* Module identification*/
      end
    end
  else
    if (FQ0IM002.FQ0IMDF2 == " ")
      if (FQ0IM002.FQ0IMDF3 != " ")
        set FQ0IM002.FQ0IMDF2 cursor, bold;
        converseLib.validationFailed(81); /* Indicate missing or invalid*/
        FQWREC.XXXMODID = "258"; /* Module identification*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify alternate defective codes.*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.FQ0IMDF1 != " ")
    YDFREC.XGPCD = "02";
    FQ0IS-38-YDFCD-2(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
    YDFREC.YDFCD = FQ0IW02.YDF-DEF-CD1; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT == "A")

      /* next sentence*/
    else
      set FQ0IM002.FQ0IMDF1 cursor, bold;
      converseLib.validationFailed(78); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "258"; /* Module identification*/

    end
  end


  if (FQ0IM002.FQ0IMDF2 != " ")
    YDFREC.XGPCD = "02";
    FQ0IS-39-YDFCD-3(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
    YDFREC.YDFCD = FQ0IW02.YDF-DEF-CD2; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT == "A")

      /* next sentence*/
    else
      set FQ0IM002.FQ0IMDF2 cursor, bold;
      converseLib.validationFailed(78); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "258"; /* Module identification*/

    end
  end

  if (FQ0IM002.FQ0IMDF3 != " ")
    YDFREC.XGPCD = "02";
    FQ0IS-40-YDFCD-4(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
    YDFREC.YDFCD = FQ0IW02.YDF-DEF-CD3; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT == "A")

      /* next sentence*/
    else
      set FQ0IM002.FQ0IMDF3 cursor, bold;
      converseLib.validationFailed(78); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "258"; /* Module identification*/

    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    set FQ0IM002.FQ0IMLT3 normal;
    set FQ0IM002.FQ0IMLT4 normal;
    set FQ0IM002.FQ0IMLT3 skip;
    set FQ0IM002.FQ0IMLT4 skip;
  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0I258

// validate sty/poid/fcty combo
Function FQ0I259()
   /* ------------------------------------------------------------------*/
   /* Validate style/color/factory/poid combination. (cloned kl0ys55)*/
   /* ------------------------------------------------------------------*/
   /* -----------------------------------------------------------------*/
   /* set up fqvrec fields to pass.*/
   /* set up pc6rec fields for call to database.*/
   /* -----------------------------------------------------------------*/
  set FQVREC empty;

   /* --------------------- y2k out begin ----------------*/
   /* MOVE 19 TO FQ0IW02.FQWPOIDN3;*/
   /* --------------------- y2k out end ------------------*/

  FQ0IW02.FQWPOIDN6 = FQ0IM002.FQ0IMPO;

   /* --------------------- y2k in begin -----------------*/
  if (FQ0IW02.FQWPOIDYY > 60)
    FQ0IW02.FQWPOIDN3 = 19;
  else
    FQ0IW02.FQWPOIDN3 = 20;
  end
   /* --------------------- y2k in end -------------------*/

  FQVREC.FQVWDT1 = FQ0IW02.FQWPOIDN9;
  FQVREC.FQVWDT2 = FQ0IW02.FQWPOIDN9;

  FQVREC.FQVFUNC = "S3";

   /* E FQ0IW02.PC-PO-ID-MO-RNG TO PC6REC.PC3POIDT;*/
  PC6REC.XGPCD = "02"; /* gpc field*/
  PC6REC.SY1STNBR = FQ0IM002.SY1STNBR; /* and style field*/
  PC6REC.SY2CLRID = FQ0IM002.SY2CLRID; /* and color field*/
  PC6REC.FY1FCTYC = FQ0IM002.FY1FCTYC; /* and fcty cd field*/
  PC6REC.XDMCD = "*"; /* to validate po/fcty combo*/
  PC6REC.PCFSECD = "*";
  PC6REC.PC4ORTYP = "*";
  PC6REC.XQACD = "*";
  PC6REC.XOWCD = "*";
  PC6REC.XPGCD = "*";
  PC6REC.XUMCD = "*";
  PC6REC.XWHCD = "*";
  PC6REC.PC2INSEG = "*";
  PC6REC.PC2CUXID = "*";
  PC6REC.PC6ETSDT = -1;
  PC6REC.YMTCD = "*";
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";
  PC6REC.PC6STAT = "*";

  FQ0IS30(); /* set cursor w/S3 for IO3310*/

  FQ0IS31();

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    set FQ0IM002.SY1STNBR cursor, bold;
    set FQ0IM002.SY2CLRID bold;
    set FQ0IM002.FQ0IMPO bold;
    set FQ0IM002.FY1FCTYC bold;
    converseLib.validationFailed(82); /* not in PO system. val failed*/
    FQWREC.XXXMODID = "259"; /* Module identification*/
  end

  FQ0IS32(); /* close the cursor*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    set FQ0IM002.FQ0IMLT3 normal;
    set FQ0IM002.FQ0IMLT4 normal;
    set FQ0IM002.FQ0IMLT3 skip;
    set FQ0IM002.FQ0IMLT4 skip;
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end FQ0I259

// Process valid input request
Function FQ0I260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  FQ0IW00.FQ0IWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/
  XX0XS01(); /* Obtain date and time*/

  if (converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    return;
  end

   /* ------------------------------------------------------------*/
   /* if adding a row.*/
   /* ------------------------------------------------------------*/
  if (FQ0IW00.FQ0IWASW == "Y") /* If adding row*/

    FQ0I261(); /* Insert VDFRTN02 row*/
    /* ------------------------------------------------------------*/
     /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/
    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit all changes*/
    /* ------------------------------------------------------------*/
     /* Indicate that the add was successfully completed.*/
    /* ------------------------------------------------------------*/
    FQWREC.XXXMODID = "260"; /* Module identification*/
    FQWREC.XXXMSGNO = 61; /* Indicate add completed*/
    FQ0IW02.FQ-HOLD-FL = "N";

  end
    /* ---------------------------------------------------------*/
     /* Update temporary storage.*/
    /* ---------------------------------------------------------*/

   /* CLEAR OUT BAR CODE NUMBER*/

  FQ0IW02.PC-BAR-CD-SEQ-NBR = 0;

  FQ0IW02.SY1STNBR = FQ0IM002.SY1STNBR;
  FQ0IW02.SY1SSTNM = FQ0IM002.SY1SSTNM;
  FQ0IW02.SY2CLRID = FQ0IM002.SY2CLRID;
  FQ0IW02.XDMCD = FQ0IM002.XDMCD;
  FQ0IW02.XDVCD = FQ0IM002.XDVCD;
  FQ0IW02.XBCCD = FQ0IM002.XBCCD;
    /* OVE FQ0IM002.FQ0IMSEQ TO FQ0IW02.FQWSEQN4;*/

  FQ0IW02.FQ-TRLR-ID = FQ0IM002.FQ0IMTID;
  FQ0IW02.XXXUSER = FQ0IM002.FQ0IMINS;

  FQ0IS-37-YDFCD(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
  FQ0IW02.YDFDESC = FQ0IM002.YDFDESC;

  FQ0IS-38-YDFCD-2(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
  FQ0IW02.FQ0IW-YDF-DEF-DESC1 = FQ0IM002.FQ0IM-YDF-DEF-DESC1;

  FQ0IS-39-YDFCD-3(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
  FQ0IW02.FQ0IW-YDF-DEF-DESC2 = FQ0IM002.FQ0IM-YDF-DEF-DESC2;

  FQ0IS-40-YDFCD-4(); /* TRANSLATE MAP DEF CODE TO THREE CHARACTERS*/
  FQ0IW02.FQ0IW-YDF-DEF-DESC3 = FQ0IM002.FQ0IM-YDF-DEF-DESC3;

  FQ0IW02.FQWPCPOID = FQ0IM002.FQ0IMPO;
  FQ0IW02.FY1FCTYC = FQ0IM002.FY1FCTYC;

   /* 08/21/95: DON'T CLEAR OUT THE CARTON NUMBER AFTER INSPECTOR HOLD*/

  if (FQ0IM002.FQ0IMCTN == "000") /* if all zeros were entered*/
    if (FQWREC.FQWWHDFL != "Y")
      FQ0IW02.FQ-CRTN-ID = " "; /* set carton nbr to blanks*/
      FQ0IW00.FQ-CRTN-ID = " "; /* set carton nbr to blanks*/
    end
  else
    if (FQWREC.FQWWHDFL == "Y"
     && FQ0IM002.FQ0IMCTN == " ")
      return;
    end
    FQ0IW02.FQ-CRTN-ID = FQ0IM002.FQ0IMCTN;
    FQ0IW00.FQ-CRTN-ID = FQ0IM002.FQ0IMCTN;
  end

  FQ0IW02.SY-SZ-ID-DESC = FQ0IM002.SY-SZ-ID-DESC;


end // end FQ0I260

// Add VDFRTN02 row(for PF18)
Function FQ0I261()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VDFRTN02 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/
  VDFRTN02.XGPCD = "02"; /* gpc cd*/
  VDFRTN02.XDVCD = FQ0IM002.XDVCD;
  VDFRTN02.XBCCD = FQ0IM002.XBCCD;

  VDFRTN02.SY1STNBR = FQ0IM002.SY1STNBR; /* Style*/
  VDFRTN02.SY2CLRID = FQ0IM002.SY2CLRID; /* Color*/
  VDFRTN02.XDMCD = FQ0IM002.XDMCD; /* Dim*/
  VDFRTN02.FY1FCTYC = FQ0IM002.FY1FCTYC; /* fcty code*/

  if (FQ0IM002.FQ0IMPO == 0)
    VDFRTN02.PC-PO-ID-MO-RNG = 0;
  else
    FQ0IW02.FQWPCPOID = FQ0IM002.FQ0IMPO;
    FQ0IW02.FQWPOIDN6 = FQ0IW02.FQWPCPOID;
    /* ----------------- y2k out begin --------------*/
    /* MOVE 19 TO FQ0IW02.FQWPOIDN3;*/
    /* ----------------- y2k out end ----------------*/
    /* ----------------- y2k in begin ---------------*/
    if (FQ0IW02.FQWPOIDYY > 60)
      FQ0IW02.FQWPOIDN3 = 19;
    else
      FQ0IW02.FQWPOIDN3 = 20;
    end
    /* ----------------- y2k in end -----------------*/
    FQ0IW02.PC-PO-ID-MO-RNG = FQ0IW02.FQWPOIDN9;
    VDFRTN02.PC-PO-ID-MO-RNG = FQ0IW02.PC-PO-ID-MO-RNG;
  end

  FQ0IS-37-YDFCD(); /* TRANSLATE MAP DEF CODE TO THREE*/
                                   /* CHARACTERS*/
  VDFRTN02.YDFCD = FQ0IW02.YDFCD; /* Defe code*/

  VDFRTN02.FQ-DEF-SEQ-NBR = FQ0IW02.FQ-DEF-SEQ-NBR;

  FQ0IS-38-YDFCD-2(); /* TRANSLATE MAP DEF CODE TO THREE*/
                                   /* CHARACTERS*/
  VDFRTN02.YDF-DEF-CD1 = FQ0IW02.YDF-DEF-CD1; /* alt def cd 1*/

  FQ0IS-39-YDFCD-3(); /* TRANSLATE MAP DEF CODE TO THREE*/
                                   /* CHARACTERS*/
  VDFRTN02.YDF-DEF-CD2 = FQ0IW02.YDF-DEF-CD2; /* alt def cd 2*/

  FQ0IS-40-YDFCD-4(); /* TRANSLATE MAP DEF CODE TO THREE*/
                                   /* CHARACTERS*/
  VDFRTN02.YDF-DEF-CD3 = FQ0IW02.YDF-DEF-CD3; /* alt def cd 3*/

  VDFRTN02.FQ-DEF-QTY = 1; /* defective qty (default=1)*/
  VDFRTN02.FQ-TRLR-ID = FQ0IM002.FQ0IMTID; /* trailer id*/
  VDFRTN02.FQ-CRTN-ID = FQ0IM002.FQ0IMCTN; /* carton id*/
  FQ0IS34();
  VDFRTN02.SY-SZ-ID = SYPREC.SY5SZID; /* size id*/
  VDFRTN02.FQ-HOLD-FL = FQ0IW02.FQ-HOLD-FL;
  VDFRTN02.CL-MEMO-BUS-MO = 0; /* claim bus month*/
  VDFRTN02.FQ-DEF-EXTRC-FL = 0; /* extracted date*/
  VDFRTN02.ZZZCHGCT = 0; /* Change count*/
  VDFRTN02.FQ-DEF-EXTRC-DT = "Y"; /* flag to be extracted*/
  VDFRTN02.XXXSTAT = "A"; /* flag to be extracted*/
  VDFRTN02.FQ-DTY-EXTRC-FL = "Y"; /* duty drawback ext flag*/
  VDFRTN02.XXXUSER = COMMAREA.CAUSERID; /* User ID*/
  VDFRTN02.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  VDFRTN02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VDFRTN02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* E 'N' TO FQ0IW02.FQ-HOLD-FL;*/

   /* ------------------------------------------------------------*/
   /* Insert VDFRTN02 row*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("A ", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "261"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* Table view name*/
  TA1REC.TA1TBLKE = VDFRTN02.VDFRTN02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0I261

// SELECT 'S' DPRODC.VBARCD01
Function FQ0IS-36-VBARCD01S()
   /* ------------------------------------------------------------*/
   /* Select 's' DPRODC.VBARCD01*/
   /* ------------------------------------------------------------*/

  try
    call "VBARCD01" ("S ", SQLCA, VBARCD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "S36"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT \"S\" DPRODC.VBARCD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBARCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VBARCD01.VBARCD01-GROUP; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS-36-VBARCD01S

// TRANSLATE YDFCD TO 3 CHAR
Function FQ0IS-37-YDFCD()
   /* ------------------------------------------------------------*/
   /* TRANSLATE MAP YDFCD TO THREE CHARACTERS                    -*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.YDFCD == " ")
    return;
  end

  FQ0IW02.FQ0IW-MAP-BAR-DEFECT-XXXX = FQ0IM002.YDFCD;
  FQ0IW02.FQ0IW-MAP-DEFECT-XXXX = FQ0IM002.YDFCD;

  if (FQ0IW02.FQ0IW-MAP-BAR-DEFECT-X == "0")
    FQ0IW02.YDFCD = FQ0IW02.FQ0IW-MAP-BAR-DEFECT-XXX;
  else
      /* IF THE DEFECT CODE WAS TYPED IN, IT MUST BE 3*/
      /* CHARACTERS LONG.*/
    if (FQ0IW02.FQ0IW-MAP-DEFECT-LAST-CHAR == " ")
      FQ0IW02.YDFCD = FQ0IW02.FQ0IW-MAP-DEFECT-XXX;
    else
      FQ0IW00.FQ0IW-DEFECT-TYPED-INVALID = "Y";
    end
  end

end // end FQ0IS-37-YDFCD

// TRANSLATE YDF-DEF-CD1 TO 3 CHA
Function FQ0IS-38-YDFCD-2()
   /* ------------------------------------------------------------*/
   /* TRANSLATE MAP YDF-DEF-CD1 TO THREE CHARACTERS              -*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.FQ0IMDF1 == " ")
    return;
  end

  FQ0IW02.FQ0IW-MAP-BAR-DEFECT-XXXX = FQ0IM002.FQ0IMDF1;
  FQ0IW02.FQ0IW-MAP-DEFECT-XXXX = FQ0IM002.FQ0IMDF1;

  if (FQ0IW02.FQ0IW-MAP-BAR-DEFECT-X == "0")
    FQ0IW02.YDF-DEF-CD1 = FQ0IW02.FQ0IW-MAP-BAR-DEFECT-XXX;
  else
    FQ0IW02.YDF-DEF-CD1 = FQ0IW02.FQ0IW-MAP-DEFECT-XXX;
  end

end // end FQ0IS-38-YDFCD-2

// TRANSLATE YDF-DEF-CD2 TO 3 CHA
Function FQ0IS-39-YDFCD-3()
   /* ------------------------------------------------------------*/
   /* TRANSLATE MAP YDF-DEF-CD2 TO THREE CHARACTERS              -*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.FQ0IMDF2 == " ")
    return;
  end

  FQ0IW02.FQ0IW-MAP-BAR-DEFECT-XXXX = FQ0IM002.FQ0IMDF2;
  FQ0IW02.FQ0IW-MAP-DEFECT-XXXX = FQ0IM002.FQ0IMDF2;

  if (FQ0IW02.FQ0IW-MAP-BAR-DEFECT-X == "0")
    FQ0IW02.YDF-DEF-CD2 = FQ0IW02.FQ0IW-MAP-BAR-DEFECT-XXX;
  else
    FQ0IW02.YDF-DEF-CD2 = FQ0IW02.FQ0IW-MAP-DEFECT-XXX;
  end

end // end FQ0IS-39-YDFCD-3

// TRANSLATE YDF-DEF-CD3 TO 3 CHA
Function FQ0IS-40-YDFCD-4()
   /* ------------------------------------------------------------*/
   /* TRANSLATE MAP YDF-DEF-CD3 TO THREE CHARACTERS              -*/
   /* ------------------------------------------------------------*/

  if (FQ0IM002.FQ0IMDF3 == " ")
    return;
  end

  FQ0IW02.FQ0IW-MAP-BAR-DEFECT-XXXX = FQ0IM002.FQ0IMDF3;
  FQ0IW02.FQ0IW-MAP-DEFECT-XXXX = FQ0IM002.FQ0IMDF3;

  if (FQ0IW02.FQ0IW-MAP-BAR-DEFECT-X == "0")
    FQ0IW02.YDF-DEF-CD3 = FQ0IW02.FQ0IW-MAP-BAR-DEFECT-XXX;
  else
    FQ0IW02.YDF-DEF-CD3 = FQ0IW02.FQ0IW-MAP-DEFECT-XXX;
  end

end // end FQ0IS-40-YDFCD-4

// Purge any temporary storage
Function FQ0IS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FQ0IW01 empty; /* M001 display storage*/

  FQ0IW00.FQ0IWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FQ0IW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FQ0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* System error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS01

// Update storage page
Function FQ0IS02()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  FQ0IW01.XXXTSLEN = FQ0IW00.XXXTSLEN; /* page length*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FQ0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS02

// Read temporary storage page
Function FQ0IS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FQ0IW01.XXXTSLEN = FQ0IW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FQ0IW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FQ0IW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS03

// Select FCTY
Function FQ0IS21()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FY1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
   /* E FQWREC.XGPCD TO FY1REC.XGPCD;              /* GPC code*/
  FY1REC.XGPCD = "02"; /* GPC code*/
  FY1REC.FY1FCTYC = FQ0IM002.FY1FCTYC; /* Factory*/

   /* ------------------------------------------------------------*/
   /* Select FCTY.*/
   /* ------------------------------------------------------------*/
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not ffqilable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not ffqilable*/

    converseLib.validationFailed(2); /* Indicate not ffqilable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS21

// Select SYCLR for map 1
Function FQ0IS22()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
   /* E FQWREC.XGPCD TO PG2REC.XGPCD;       /* GPC code*/
  PG2REC.XGPCD = "02"; /* GPC code*/
  PG2REC.SY1STNBR = FQ0IM001.FQ0IMSTY; /* Style number*/
  PG2REC.SY2CLRID = FQ0IM001.FQ0IMCLR; /* Color ID*/
  PG2REC.XDMCD = FQ0IM001.FQ0IMDIM; /* Dim*/

   /* ------------------------------------------------------------*/
   /* Select SYCLR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not ffqilable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS22

// Select SYCLR for map 2
Function FQ0IS23()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  PG2REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = FQ0IW02.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FQ0IW02.SY2CLRID; /* Color ID*/
  PG2REC.XDMCD = FQ0IW02.XDMCD; /* Dim*/
   /* E '00' TO PG2REC.XDMCD;                /* Dimension*/

   /* ------------------------------------------------------------*/
   /* Select SYCLR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not ffqilable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS23

// Select SYCLR for map 2
Function FQ0IS24()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  PG2REC.XGPCD = "02"; /* GPC code*/
  PG2REC.SY1STNBR = FQ0IM002.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FQ0IM002.SY2CLRID; /* Color ID*/
  PG2REC.XDMCD = FQ0IM002.XDMCD; /* Dim*/

   /* ------------------------------------------------------------*/
   /* Select SYCLR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not ffqilable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS24

// Select VINSPH01 (SB) option
Function FQ0IS25()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VINSPH01 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  FQYREC.FQYFUNC = "SB";
  FQYREC.FQYCNT1 = 0;

  VINSPH01.XGPCD = "02"; /* GPC*/
  VINSPH01.SY1STNBR = FQ0IM002.SY1STNBR; /* style*/
  VINSPH01.SY2CLRID = FQ0IM002.SY2CLRID; /* color*/
  VINSPH01.XDMCD = FQ0IM002.XDMCD; /* dim*/
  VINSPH01.YDFCD = FQ0IM002.YDFCD; /* defect code*/
  VINSPH01.FY1FCTYC = FQ0IM002.FY1FCTYC; /* factory*/
   /*  */
  if (FQ0IM002.FQ0IMPO == 0)
    VINSPH01.PC-PO-ID-MO-RNG = 0;
  else
    FQ0IW02.FQWPCPOID = FQ0IM002.FQ0IMPO;
    FQ0IW02.FQWPOIDN6 = FQ0IW02.FQWPCPOID;
    /* ----------------- y2k out begin ----------------*/
    /* MOVE 19 TO FQ0IW02.FQWPOIDN3;*/
    /* ----------------- y2k out end ------------------*/
    /* ----------------- y2k in  begin ----------------*/
    if (FQ0IW02.FQWPOIDYY > 60)
      FQ0IW02.FQWPOIDN3 = 19;
    else
      FQ0IW02.FQWPOIDN3 = 20;
    end
    /* ----------------- y2k in end -------------------*/
    FQ0IW02.PC-PO-ID-MO-RNG = FQ0IW02.FQWPOIDN9;
    VINSPH01.PC-PO-ID-MO-RNG = FQ0IW02.PC-PO-ID-MO-RNG;
  end
   /*  */

   /* ------------------------------------------------------------*/
   /* Select VINSPH01 with 2nd unique option.*/
   /* ------------------------------------------------------------*/
  try
    call "IO6670" (FQYREC, SQLCA, VINSPH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* Null return*/
      return;
    end

    /* F SQLCA.SQLCODE EQ -305;       /* Null return*/
    /* MOVE 0 TO FQYREC.FQYCNT1;     /* zero to count*/
    /* *EZERTN;*/
    /* ND;*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQAUL"; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSPH01"; /* Table view name*/
  TA1REC.TA1PGMAP = VINSPH01.VINSPH01-KEY; /* Program application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS25

// Open VDFRTN02 cursor(s2)
Function FQ0IS26()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VDFRTN02 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format the key to open a cursor to get the seq #.*/
   /* ------------------------------------------------------------*/
   /* E FQWREC.XGPCD TO VDFRTN02.XGPCD;           /* GPC*/
  VDFRTN02.XGPCD = "02"; /* GPC*/
  VDFRTN02.XDVCD = FQ0IW02.XDVCD;
  VDFRTN02.SY1STNBR = FQ0IM002.SY1STNBR; /* style*/
  VDFRTN02.SY2CLRID = FQ0IM002.SY2CLRID; /* color*/
  VDFRTN02.XDMCD = FQ0IM002.XDMCD; /* dim*/

  FQ0IS-37-YDFCD(); /* TRANSLATE MAP DEF CODE TO THREE*/
                                   /* CHARACTERS*/
  VDFRTN02.YDFCD = FQ0IW02.YDFCD; /* defect*/

  VDFRTN02.FQ-TRLR-ID = FQ0IM002.FQ0IMTID;

  FQ0IS-38-YDFCD-2(); /* TRANSLATE MAP DEF CODE TO THREE*/
                                   /* CHARACTERS*/
  VDFRTN02.YDF-DEF-CD1 = FQ0IW02.YDF-DEF-CD1; /* alt def cd 1*/

  FQ0IS-39-YDFCD-3(); /* TRANSLATE MAP DEF CODE TO THREE*/
                                   /* CHARACTERS*/
  VDFRTN02.YDF-DEF-CD2 = FQ0IW02.YDF-DEF-CD2; /* alt def cd 2*/

  FQ0IS-40-YDFCD-4(); /* TRANSLATE MAP DEF CODE TO THREE*/
                                   /* CHARACTERS*/
  VDFRTN02.YDF-DEF-CD3 = FQ0IW02.YDF-DEF-CD3; /* alt def cd 3*/
   /*  */
  FQ0IW02.FQWPCPOID = FQ0IM002.FQ0IMPO;
  FQ0IW02.FQWPOIDN6 = FQ0IW02.FQWPCPOID;

   /* ---------------- y2k out begin ---------------*/
   /* MOVE 19 TO FQ0IW02.FQWPOIDN3;*/
   /* ---------------- y2k out end -----------------*/

   /* ---------------- y2k in  begin ---------------*/
  if (FQ0IW02.FQWPOIDYY > 60)
    FQ0IW02.FQWPOIDN3 = 19;
  else
    FQ0IW02.FQWPOIDN3 = 20;
  end
   /* ---------------- y2k in end ------------------*/

  FQ0IW02.PC-PO-ID-MO-RNG = FQ0IW02.FQWPOIDN9;
  VDFRTN02.PC-PO-ID-MO-RNG = FQ0IW02.PC-PO-ID-MO-RNG;
   /*  */
  VDFRTN02.FY1FCTYC = FQ0IM002.FY1FCTYC; /* factory*/
  VDFRTN02.FQ-CRTN-ID = FQ0IM002.FQ0IMCTN; /* carton id*/
   /* fq0is*/
   /* OVE FQ0IM002.SY-SZ-ID-DESC TO VDFRTN02.SY-SZ-ID-DESC;   /* duty code*/

   /* ------------------------------------------------------------*/
   /* Open VDFRTN02*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("S2", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* Select  set*/

   /* ------------------------------------------------------------*/
   /* If successful, init switches & return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      FQ0IWEOC = "N";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        FQ0IWEOC = "Y";
      end
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROWS FOR CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL"; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* Table view name*/
  TA1REC.TA1PGMAP = VDFRTN02.VDFRTN02-KEY; /* Program application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FQ0IS26

// fetch VDFRTN02 row (n2)
Function FQ0IS27()
   /* ------------------------------------------------------------*/
   /* Fetch VDFRTN02*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("N2", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* fetch table row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Or row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        FQ0IW00.FQ0IWEOC = "Y"; /* Indicate end of cursor*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "S27"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VDFRTN02.VDFRTN02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS27

// Close VDFRTN02 cursor(c2)
Function FQ0IS28()
   /* ------------------------------------------------------------*/
   /* Close VDFRTN02*/
   /* ------------------------------------------------------------*/
  try
    call "VDFRTN02" ("C2", SQLCA, VDFRTN02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "S28"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFRTN02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FQ0IS28

// Select VTRALR01
Function FQ0IS29()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set VDFTRL01 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  VDFTRL01.XGPCD = "02"; /* GPC*/
  VDFTRL01.XWHCD = "07"; /* whse code*/
  VDFTRL01.FQ0KWTST = "O"; /* trailer status*/

   /* ------------------------------------------------------------*/
   /* Select VTRALR01*/
   /* ------------------------------------------------------------*/
  try
    call "IO6690" ("S ", SQLCA, VDFTRL01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S29"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQAUL"; /* Data base name*/
  TA1REC.TA1TBLVU = "VDFTRL01"; /* Table view name*/
  TA1REC.TA1PGMAP = VDFTRL01.VDFTRL01-KEY; /* Program application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS29

// Set Cursor - PC6REC(vpoitm01)
Function FQ0IS30()
   /* ------------------------------------------------------------*/
   /* Open VPOITM01*/
   /* ------------------------------------------------------------*/
   /* dprodc.vpoitm01*/
  call "IO3310" (FQVREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
   /* ------------------------------------------------------------*/
   /* If successful, init switches & return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROWS FOR CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1PGMAP = PC6REC.PC6KEY; /* Program application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FQ0IS30

// Fetch vpoitm01 row to validate
Function FQ0IS31()
   /* ------------------------------------------------------------*/
   /* Fetch dprodc.vpoitm01 row.*/
   /* ------------------------------------------------------------*/
  call "IO3310" ("N3", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* dprodc.vpoitm01*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Or row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = PC6REC.SY1STNBR; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FQ0IS31

// close set pc6rec
Function FQ0IS32()
   /* ------------------------------------------------------------*/
   /* Close Vpoitm01 cursor*/
   /* ------------------------------------------------------------*/

  call "IO3310" ("C3", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* dprodc.vpoitm01*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "S32"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FQ0IS32

// obtain sizes for prod (sy1120)
Function FQ0IS33()
   /* ************************************************************/
   /* *** call sy1120 to translate size ID to size description****/
   /* ************************************************************/

   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set SYPREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  SYPREC.SYPFC = "IE";
  SYPREC.SY5SZID[1] = VDFRTN02.SY-SZ-ID;
  SYPREC.SYPCMPSW = "C";
  SYPREC.XGPCD = "02";
  SYPREC.SY1STNBR = VDFRTN02.SY1STNBR;
  SYPREC.SY2CLRID = VDFRTN02.SY2CLRID;
  SYPREC.XDMCD = VDFRTN02.XDMCD;
  SYPREC.XQACD = "**";

   /* ------------------------------------------------------------*/
   /* obtain size information*/
   /* ------------------------------------------------------------*/
  FQ0IS35(); /* <---- CALL SY1120 FOR SIZE ID xlate*/

   /* ------------------------------------------------------------*/
   /* indicate error condition*/
   /* ------------------------------------------------------------*/
  if (SYPREC.SYPRC == 10)
    FQWREC.XXXMODID = "S33";
    converseLib.validationFailed(0012); /* <--- not on db msg*/
    return;
  end
  if (SYPREC.SYPRC == 02)
    FQWREC.XXXMODID = "S33";
    converseLib.validationFailed(0085); /* <--- bad sz desc*/
    return;
  end

end // end FQ0IS33

// obtain sizes for prod (sy1120)
Function FQ0IS34()
   /* ************************************************************/
   /* *** call sy1120 to translate size desc to size code     ****/
   /* ************************************************************/

   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set SYPREC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  SYPREC.SYPFC = "EI";
  SYPREC.SY4IDDSC[1] = FQ0IM002.SY-SZ-ID-DESC;
  SYPREC.SYPCMPSW = "C";
  SYPREC.XGPCD = "02";
  SYPREC.SY1STNBR = FQ0IM002.SY1STNBR;
  SYPREC.SY2CLRID = FQ0IM002.SY2CLRID;
  SYPREC.XDMCD = FQ0IM002.XDMCD;
  SYPREC.XQACD = "**";

   /* ------------------------------------------------------------*/
   /* obtain size information*/
   /* ------------------------------------------------------------*/
  FQ0IS35(); /* <---- CALL SY1120 FOR SIZE ID xlate*/

   /* ------------------------------------------------------------*/
   /* indicate error condition*/
   /* ------------------------------------------------------------*/
  if (SYPREC.SYPRC == 10)
    FQWREC.XXXMODID = "S34";
    converseLib.validationFailed(0012); /* <--- not on db msg*/
    return;
  end
  if (SYPREC.SYPRC == 02)
    FQWREC.XXXMODID = "S34";
    converseLib.validationFailed(0085); /* <--- not valid sz desc*/
    return;
  end


end // end FQ0IS34

// inquiry : sz xlate : 0
Function FQ0IS35()
   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1120                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

   /* ------------------------------------------------------------*/
   /* Select size information.*/
   /* ------------------------------------------------------------*/
  call "SY1120" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == 02
   || SYPREC.SYPRC == 10)

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S35"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SYPREC.SYPRC == 9)             /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0IS35

//*** RECORD=FQ0IW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FQ0IW00 type basicRecord
  10 FQ0IWIXM FQ0IWIXM ; 
  10 FQ0IWIX2 FQ0IWIX2 ; 
  10 FQ0IWPNT FQ0IWPNT ; 
  10 FQ0IWCNT FQ0IWCNT ; 
  10 FQ0IWEOC FQ0IWEOC ; 
  10 * char(1) ; 
  10 FQ0IWSWF FQ0IWSWF ; 
  10 FQ0IWSWR FQ0IWSWR ; 
  10 FQ0IWSWU FQ0IWSWU ; 
  10 FQ0IWASW FQ0IWASW ; 
  10 FQ0IWDSW FQ0IWDSW ; 
  10 FQ0IWMAP FQ0IWMAP ; 
  10 FQ-CRTN-ID FQ-CRTN-ID ; 
  10 * char(1) ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FQ0IW-BAR-CODE-SCAN FQ0IW-BAR-CODE-SCAN ; 
  10 FQ0IW-DEFECT-TYPED-INVALID FQ0IW-DEFECT-TYPED-INVALID ; 
end // end FQ0IW00

//*** RECORD=FQ0IW01 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record FQ0IW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(773) ; 
    10 FQ0IWINSP FQ0IWINSP ; 
    10 FQWPOIDN9 FQWPOIDN9 ; 
      15 FQWPOIDN3 FQWPOIDN3 ; 
      15 FQWPOIDN6 FQWPOIDN6 ; 
    10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
    10 FQ-DEF-SEQ-NBR FQ-DEF-SEQ-NBR ; 
    10 FQ0IWSEL FQ0IWSEL [10] ; 
    10 FQWSEQN4 FQWSEQN4 [10] ; 
    10 SY1STNBR SY1STNBR [10] ; 
    10 SY2CLRID SY2CLRID [10] ; 
    10 XBCCD XBCCD [10] ; 
    10 XDVCD XDVCD [10] ; 
    10 XDMCD XDMCD [10] ; 
    10 FQ-TRLR-ID FQ-TRLR-ID [10] ; 
    10 FQWPCPOID FQWPCPOID [10] ; 
    10 FY1FCTYC FY1FCTYC [10] ; 
    10 YDFCD YDFCD [10] ; 
    10 YDF-DEF-CD1 YDF-DEF-CD1 [10] ; 
    10 YDF-DEF-CD2 YDF-DEF-CD2 [10] ; 
    10 YDF-DEF-CD3 YDF-DEF-CD3 [10] ; 
    10 FQ-CRTN-ID FQ-CRTN-ID [10] ; 
    10 SY-SZ-ID-DESC SY-SZ-ID-DESC [10] ; 
    10 XXXSTAT XXXSTAT [10] ; 
    10 XXXUSER XXXUSER [10] ; 
    10 ZZZSDT ZZZSDT [10] ; 
    10 ZZZCHGDT ZZZCHGDT [10] ; 
    10 ZZZCHGTM ZZZCHGTM [10] ; 
    10 ZZZCHGCT ZZZCHGCT [10] ; 
end // end FQ0IW01

//*** RECORD=FQ0IW02 ****
// ------------------------
// FQ0I - return detail map002 display storage
// ------------------------
// y2kproj   12-08-97   oricha  y2k modifications: added fields
//                              fqwpoidyy, fqwpoidmm.
// ***********************
Record FQ0IW02 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XDVCD XDVCD ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 FQWPCPOID FQWPCPOID ; 
  10 FQWPOIDN9 FQWPOIDN9 ; 
    15 FQWPOIDN3 FQWPOIDN3 ; 
    15 FQWPOIDN6 FQWPOIDN6 ; 
      20 FQWPOIDYY FQWPOIDYY ; 
      20 FQWPOIDMM FQWPOIDMM ; 
  10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
  10 YDFCD YDFCD ; 
  10 YDFDESC YDFDESC ; 
  10 FQ-DEF-SEQ-NBR FQ-DEF-SEQ-NBR ; 
  10 FQWSEQN4 FQWSEQN4 ; 
  10 YDF-DEF-CD1 YDF-DEF-CD1 ; 
  10 FQ0IW-YDF-DEF-DESC1 FQ0IW-YDF-DEF-DESC1 ; 
  10 YDF-DEF-CD2 YDF-DEF-CD2 ; 
  10 FQ0IW-YDF-DEF-DESC2 FQ0IW-YDF-DEF-DESC2 ; 
  10 YDF-DEF-CD3 YDF-DEF-CD3 ; 
  10 FQ0IW-YDF-DEF-DESC3 FQ0IW-YDF-DEF-DESC3 ; 
  10 XBCCD XBCCD ; 
  10 FQ-DEF-QTY FQ-DEF-QTY ; 
  10 FQ-TRLR-ID FQ-TRLR-ID ; 
  10 FQ-CRTN-ID FQ-CRTN-ID ; 
  10 FQ-HOLD-FL FQ-HOLD-FL ; 
  10 SY-SZ-ID-DESC SY-SZ-ID-DESC ; 
  10 CL-MEMO-BUS-MO CL-MEMO-BUS-MO ; 
  10 FQ-DEF-EXTRC-DT FQ-DEF-EXTRC-DT ; 
  10 FQ-DEF-EXTRC-FL FQ-DEF-EXTRC-FL ; 
  10 FQ0IWINSP FQ0IWINSP ; 
  10 ZZZSDT ZZZSDT ; 
  10 XXXSTAT XXXSTAT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 XXXUSER XXXUSER ; 
  10 FQYCNT1 FQYCNT1 ; 
  10 PC-BAR-CD-SEQ-NBR PC-BAR-CD-SEQ-NBR ; 
  10 FQ0IW-MAP-BAR-DEFECT-XXXX FQ0IW-MAP-BAR-DEFECT-XXXX ; 
    15 FQ0IW-MAP-BAR-DEFECT-X FQ0IW-MAP-BAR-DEFECT-X ; 
    15 FQ0IW-MAP-BAR-DEFECT-XXX FQ0IW-MAP-BAR-DEFECT-XXX ; 
  10 FQ0IW-MAP-DEFECT-XXXX FQ0IW-MAP-DEFECT-XXXX ; 
    15 FQ0IW-MAP-DEFECT-XXX FQ0IW-MAP-DEFECT-XXX ; 
    15 FQ0IW-MAP-DEFECT-LAST-CHAR char(1) ; 
end // end FQ0IW02

//*** RECORD=FQVREC ****
// IO3310:
// pass PO Number Date to iomod.
// 06-14-90 CHELLM Created record.
// **********************
Record FQVREC type basicRecord
  10 FQVFUNC FQVFUNC ; 
  10 FQVCNT1 FQVCNT1 ; 
  10 FQVWDT1 FQVWDT1 ; 
  10 FQVWDT2 FQVWDT2 ; 
end // end FQVREC

//*** RECORD=VDFRTN02 ****
// **************** DEFECTIVE RETURN TABLE ********************
// 
// DB2 TABLE:              DFQUAL.VDFRTN02
// 
// COPYLIB MEMBER          DCL01140
// 
// I/O MODULE              IO6680
// 
// KEY TO DB2 TABLE        XGPCD,
//                         XDVCD,
//                         SY1STNBR,
//                         SY2CLRID,
//                         XDMCD,
//                         FY1FCTYC,
//                         PC-POID,
//                         YDFCD,
//                         SEQ-NBR,
//                         ALTDF1,
//                         ALTDF2,
//                         ALTDF3,
//                         XBCCD,
//                         DEFQTY,
//                         TRLRID,
//                         CRTNID,
//                         HOLDFL,
//                         YDDCD,
//                         SY-SZ-ID,
//                         MEMOBUSMO,
//                         EXTRCFL,
//                         EXTRCDT,
//                         FQ-DTY-EXTR-FL,
//                         XXXUSER,
//                         ZZZSDT,
//                         ZZZCHGDT,
//                         ZZZCHGTM,
//                         ZZZCHGCT
// 
// MAINTENANCE LOG:
// 
//   DATE     NAME        DESCRIPTION OF CHANGE
// --------  --------    -------------------------------------
// 11/11/96  KBRADS      NEW RECORD
// ************************
Record VDFRTN02 type basicRecord
  5 VDFRTN02-GROUP VDFRTN02-GROUP ; 
    10 VDFRTN02-KEY VDFRTN02-KEY ; 
      15 XGPCD XGPCD ; 
      15 XDVCD XDVCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
      15 YDFCD YDFCD ; 
    10 FQ-DEF-SEQ-NBR FQ-DEF-SEQ-NBR ; 
    10 YDF-DEF-CD1 YDF-DEF-CD1 ; 
    10 YDF-DEF-CD2 YDF-DEF-CD2 ; 
    10 YDF-DEF-CD3 YDF-DEF-CD3 ; 
    10 XBCCD XBCCD ; 
    10 FQ-DEF-QTY FQ-DEF-QTY ; 
    10 FQ-TRLR-ID FQ-TRLR-ID ; 
    10 FQ-CRTN-ID FQ-CRTN-ID ; 
    10 FQ-HOLD-FL FQ-HOLD-FL ; 
    10 YDDCD YDDCD ; 
    10 SY-SZ-ID SY-SZ-ID ; 
    10 CL-MEMO-BUS-MO CL-MEMO-BUS-MO ; 
    10 FQ-DEF-EXTRC-DT FQ-DEF-EXTRC-DT ; 
    10 FQ-DEF-EXTRC-FL FQ-DEF-EXTRC-FL ; 
    10 FQ-DTY-EXTRC-FL FQ-DTY-EXTRC-FL ; 
    10 XXXUSER XXXUSER ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VDFRTN02

//*** RECORD=VINSPH01 ****
// ********* DEFECTIVE PRODUCT INSPECTOR HOLD TABLE  **********
// 
// DB2 TABLE:              DFQUAL.VINSPH01
// 
// COPYLIB MEMBER          DCL01139
// 
// I/O MODULE              IO6670
// 
// KEY TO DB2 TABLE        XGPCD,
//                         SY1STNBR,
//                         SY2CLRID,
//                         XDMCD,
//                         YDFCD,
//                         FY1FCTYC,
//                         PCPOID,
//                         HOLDCMT1,
//                         HOLDCMT2,
//                         XXXUSERID,
//                         XXXSTAT,
//                         ZZZSDT,
//                         ZZZCHGDT,
//                         ZZZCHGTM,
//                         ZZZCHGCT
// 
// MAINTENANCE LOG:
// 
//   DATE     NAME        DESCRIPTION OF CHANGE
// --------  --------    -------------------------------------
// 04/14/93  SDIFLE      NEW RECORD
// ************************
Record VINSPH01 type basicRecord
  5 VINSPH01-GROUP VINSPH01-GROUP ; 
    10 VINSPH01-KEY VINSPH01-KEY ; 
      15 XGPCD XGPCD ; 
      15 XWHCD XWHCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 YDFCD YDFCD ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
    10 FQ0JWRESN1 FQ0JWRESN1 ; 
    10 FQ0JWRESN2 FQ0JWRESN2 ; 
    10 XXXUSER XXXUSER ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VINSPH01

//*** RECORD=YDDREC ****
// ******************* DEFECTIVE CODE TABLE *******************
// 
// DB2 TABLE VIEW:       DCORP.VYDF0001
// 
// DCLGEN MEMBER:        DCL00???
// 
// CSP TABLE NAME:       YDFTBL
// 
// KEY TO TABLE:          DB2          CSP
//                       -----        ------
//                       YDFCD        YDFKEY
//                       XGPCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          04/15/91  RHETRI  New record.
// **********************
Record YDDREC type basicRecord
  10 YDDKEY YDDKEY ; 
    15 YDDCD YDDCD ; 
  10 YDDDESC YDDDESC ; 
  10 XXXSTAT XXXSTAT ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end YDDREC

// claim memo bus mo
DataItem CL-MEMO-BUS-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to be extracted flag
DataItem FQ-DEF-EXTRC-DT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// extracted date
DataItem FQ-DEF-EXTRC-FL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// defective return quantity
DataItem FQ-DEF-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// def return seq #(binary)
DataItem FQ-DEF-SEQ-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dty dwbk ext flag
DataItem FQ-DTY-EXTRC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inspector hold flag
DataItem FQ-HOLD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-BAR-CODE-SCAN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-DEFECT-TYPED-INVALID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-MAP-BAR-DEFECT-X char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-MAP-BAR-DEFECT-XXX char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-MAP-BAR-DEFECT-XXXX char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-MAP-DEFECT-XXX char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-MAP-DEFECT-XXXX char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-YDF-DEF-DESC1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-YDF-DEF-DESC2 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FQ0IW-YDF-DEF-DESC3 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add function request switch
DataItem FQ0IWASW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count for modified data
DataItem FQ0IWCNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data found switch
DataItem FQ0IWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FQ0IWEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inspector id
DataItem FQ0IWINSP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ0IWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ0IWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem FQ0IWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pointer
DataItem FQ0IWPNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem FQ0IWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FQ0IWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FQ0IWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FQ0IWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter for db item
DataItem FQVCNT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql selection
DataItem FQVFUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO Number Date
DataItem FQVWDT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO Number Date
DataItem FQVWDT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FQ1REC GROUP LEVEL
DataItem VDFRTN02-GROUP char(86)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key
DataItem VDFRTN02-KEY char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FQ1REC GROUP LEVEL
DataItem VINSPH01-GROUP char(167)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key
DataItem VINSPH01-KEY char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YDF KEY (DEFCD/GPC)
DataItem YDDKEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

