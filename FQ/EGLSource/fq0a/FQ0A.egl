package fq0a;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fq.common.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=FQ0A ****
// This application allows a user to inquire and maintain rows
// in the defective exclusion DB2 table, DFQUAL.VDEFEX01.
// 
// There are two different screens that may be displayed.
// The first screen will display all the rows in the table.
// When a row is selected on this screen, the second screen is
// displayed, showing only information for that table row.
// The user may update the status for this row from active to
// inactive.  After changing the status, ENTER must be pressed
// update the data base.
// 
// After entering the first screen, the user may press PF18
// and the second screen will appear with no data.  He may
// fill in the information for a row, press ENTER, and add the
// row to the data base.
// 
// When the user exits the second screen (via PF3 key) the
// the first screen is redisplayed, indicating with a "v"
// that the row was viewed.
// 
// The user may scroll forward and backward to view all the
// rows by pressing PF7 and PF8.  He may exit to any allowed
// application, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/01/91  MHUYNH  New application.
//          06/24/93  MHUYNH  Regen due to change to XSFQS05
// y2kproj  12-5-97   oricha  y2k modifications:  regen to pick
//                            up xx0xs01 changes & xsfqs05
//                            century calc changes; also fixed
//                            m001 & m002 to zero fill dates.
// bmusti   22-dec-99          chnages in fq0a256.
// *********************
Program FQ0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FQ00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FQ0AW00 FQ0AW00; // record
  FQ0AW01 FQ0AW01; // record
  FQ0AW02 FQ0AW02; // record
  FQ1REC FQ1REC; // record
  FQWREC FQWREC; // record
  FQZREC FQZREC; // record
  FY1REC FY1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XDMREC XDMREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YDFREC YDFREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use YDFTBL; // table
  use FQ0AM.FQ0AM001,  // forms
      FQ0AM.FQ0AM002, 
      FQ0AM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFQ001: XPFQ001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FQ0AM001 initial; /* M001 input/output*/
    set FQ0AM002 initial; /* M002 input/output*/
    set FQ0AW00 empty; /* Working storage*/
    set FQ0AW01 empty; /* M001 display storage*/
    set FQ0AW02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FQ0AW00.FQ0AWMAP = "1"; /* Map to be displayed switch*/
    FQ0AW00.FQ0AWSWF = "Y"; /* Format the map switch*/
    FQ0AW00.FQ0AWSWR = "Y"; /* Request for data switch*/
    FQ0AW00.FQ0AWASW = "N"; /* Add function request switch (PF18)*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ0A001; /* Converse the main process*/


    FQ0A001: FQ0A001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FQ0A001; /* Converse the main process*/


  end // end main
end // end FQ0A

// Main process to display a map
Function FQ0A001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FQ0AW00.FQ0AWMAP == "1") /* Map 1 was requested*/
    FQ0A100(); /* Display map 1*/
  else

    if (FQ0AW00.FQ0AWMAP == "2") /* Map 2 was requested*/
      FQ0A200(); /* Display map 2*/
    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      FQWREC.XXXMODID = "001"; /* Module identification*/
      FQWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FQ0AW00.FQ0AWMAP; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "FQ0M"; /* TO application*/
      XSFQS01(); /* Exit to another application*/
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    end
  end


end // end FQ0A001

// List the rows in the table
Function FQ0A100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FQ0A110(); /* Obtain the data to display*/

  FQ0A120(); /* Format and display the map*/

  FQ0A130(); /* Check attention identifier*/

  FQ0A140(); /* Reset fields to normal intensity*/

  FQ0A150(); /* Verify the entered data*/

  FQ0A160(); /* Process valid input request*/


end // end FQ0A100

// Obtain the data to display
Function FQ0A110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW00.FQ0AWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  FQ0AW00.XXXTSLEN = 1456; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO == 0) /* No message to display*/
    FQ0AW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  FQ0AS01(); /* Purge any temporary storage*/

   /* --------------------------------------------------------*/
   /* Open DEFEX.*/
   /* --------------------------------------------------------*/
  FQ0A111(); /* Open DEFEX*/

   /* ----------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ----------------------------------------------------------*/
  while (FQ0AW00.FQ0AWEOC == "N") /* Until end of cursor*/

    FQ0A112(); /* Fetch DEFEX*/

    if (FQ0AW00.FQ0AWEOC == "N") /* If not end-of-cursor*/

      /* ----------------------------------------------------------*/
       /* Save data for display.*/
      /* ----------------------------------------------------------*/
      FQ0A113(); /* Save data*/

      /* ---------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ---------------------------------------------------------*/
      if (FQ0AW00.FQ0AWIXM > 16) /* Page is full*/
        FQ0A114(); /* Add page to temporary storage*/
      end

    end
  end

   /* ----------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ----------------------------------------------------*/
  if (FQ0AW00.FQ0AWIXM > 1) /* Page was formatted*/
    FQ0A114(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close DEFEX*/
   /* ------------------------------------------------------------*/
  FQ0A115(); /* Close DEFEX*/

   /* ------------------------------------------------------------*/
   /* If no pages formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FQ0AW00.TA5TSQIX == 0) /* No pages formatted*/

    FQWREC.XXXMODID = "110"; /* Module identification*/
    converseLib.validationFailed(17); /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FQ0AW00.FQ0AWSWR = "N"; /* Request for data switch*/


end // end FQ0A110

// Open DFQUAL.VDEFEX01
Function FQ0A111()
   /* ------------------------------------------------------------*/
   /* Clear copybook.  NOTE: there is no key for this call.*/
   /* ------------------------------------------------------------*/
  set FQ1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Open DEFEX.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5540" ("S1", SQLCA, FQ1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, init switches & return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FQ0AWEOC = "N"; /* End of cursor switch*/
    FQ0AW00.FQ0AWIXM = 1; /* Display line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set FQ0AM001 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDEFEX01"; /* Table view name*/
  TA1REC.TA1TBLKE = FQ1REC.FQ1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0A111

// Fetch DFQUAL.VDEFEX01
Function FQ0A112()
   /* ------------------------------------------------------------*/
   /* Fetch DEFEX.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5540" ("N1", SQLCA, FQ1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Or row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        FQ0AW00.FQ0AWEOC = "Y"; /* Indicate end of cursor*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VDEFEX01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = FQ1REC.FQ1KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0A112

// Save data for display
Function FQ0A113()
   /* ------------------------------------------------------------*/
   /* Save the data for display.*/
   /* ------------------------------------------------------------*/

  FQ0AW01.SY1STNBR[FQ0AWIXM] = FQ1REC.SY1STNBR; /* Style*/
  FQ0AW01.SY2CLRID[FQ0AWIXM] = FQ1REC.SY2CLRID; /* Color*/
  FQ0AW01.XDMCD[FQ0AWIXM] = FQ1REC.XDMCD; /* Dim*/
  FQ0AW01.YDFCD[FQ0AWIXM] = FQ1REC.YDFCD; /* Defect*/
  FQ0AW01.FY1FCTYC[FQ0AWIXM] = FQ1REC.FY1FCTYC; /* Factory*/
  FQ0AW01.FQ1IDBDT[FQ0AWIXM] = FQ1REC.FQ1IDBDT; /* Beg month*/
  FQ0AW01.FQ1IDXDT[FQ0AWIXM] = FQ1REC.FQ1IDXDT; /* End month*/
  FQ0AW01.FQ1XDFPC[FQ0AWIXM] = FQ1REC.FQ1XDFPC; /* Percent*/
  FQ0AW01.FQ1COMNT[FQ0AWIXM] = FQ1REC.FQ1COMNT; /* Comment*/
  FQ0AW01.XXXSTAT[FQ0AWIXM] = FQ1REC.XXXSTAT; /* Status*/
  FQ0AW01.ZZZSDT[FQ0AWIXM] = FQ1REC.ZZZSDT; /* Setup date*/
  FQ0AW01.ZZZCHGDT[FQ0AWIXM] = FQ1REC.ZZZCHGDT; /* Change date*/
  FQ0AW01.ZZZCHGTM[FQ0AWIXM] = FQ1REC.ZZZCHGTM; /* Change time*/
  FQ0AW01.XXXUSER[FQ0AWIXM] = FQ1REC.XXXUSER; /* User ID*/

   /* ------------------------------------------------------------*/
   /* Add to line counter.*/
   /* ------------------------------------------------------------*/
  FQ0AW00.FQ0AWIXM = FQ0AW00.FQ0AWIXM + 1; /* Increment line index*/


end // end FQ0A113

// Add page to temporary storage
Function FQ0A114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FQ0AW01.XXXTSLEN = FQ0AW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FQ0AW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    FQ0AW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Reset to 0*/
    FQ0AW00.FQ0AWIXM = 1; /* Reset to 1*/
    set FQ0AW01 empty; /* M001 display storage*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0A114

// Close DFQUAL.VDEFEX01
Function FQ0A115()
   /* ------------------------------------------------------------*/
   /* Close DEFEX.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5540" ("C1", SQLCA, FQ1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFQUAL   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDEFEX01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0A115

// Format and converse the map
Function FQ0A120()
   /* ------------------------------------------------------------*/
   /* If error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* If error found*/

    FQWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW00.FQ0AWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FQ0AW00.FQ0AWSWF == "Y") /* Map must be formatted*/
      FQ0A121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQ0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FQ0AM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FQ0AM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FQWREC.XXXMSGNO != 0) /* Message to display*/

      if (FQWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FQWREC.XXXMSGNO);
      end /* Message number*/
    else
      FQ0AM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FQ0AM001.XXXMODID = FQWREC.XXXMODID; /* Module identification*/

    set FQ0AM001 alarm; /* Indicate sound alarm*/

  end

  converse FQ0AM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQWREC.XXXMODID = " "; /* Module identification*/
  FQWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FQ0AM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FQ0AM001.CAITEM; /* Application data*/


end // end FQ0A120

// Format the display data
Function FQ0A121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FQ0AM001 initial;

  FQ0AW00.FQ0AWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FQ0AW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FQ0AW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (FQ0AW00.FQ0AWSWU == "Y") /* Current page was changed*/

        FQ0AS02(); /* Update temporary storage page*/

        FQ0AW00.FQ0AWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (FQ0AW00.XXXTSPAG > FQ0AW00.TA5TSQIX) /* Desired greater highest*/
        FQ0AW00.XXXTSPAG = FQ0AW00.TA5TSQIX; /* Default to highest*/
      end

      FQ0AS03(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    FQ0AM001.XXXTSPAG = FQ0AW00.XXXTSPAG; /* Current page*/
    FQ0AM001.TA5TSQIX = FQ0AW00.TA5TSQIX; /* Highest page*/
    set FQ0AM001.XXXLITPG skip; /* "PAGE" literal*/
    set FQ0AM001.XXXLITOF skip; /* "OF" literal*/

  end
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (FQ0AW01.XXXSTAT[1] > " ") /* If data exists*/
    set FQ0AM001.FQ0AMSEL[1] cursor, normal; /* Position cursor*/
  end

  FQ0AW00.FQ0AWIXM = 1; /* Initialize line index*/

  while (FQ0AW00.FQ0AWIXM <= 16 /* Until screen is full*/
   && FQ0AW01.XXXSTAT[FQ0AWIXM] > " ") /* and data exists*/

    FQ0AM001.FQ0AMSEL[FQ0AWIXM] = FQ0AW01.FQ0AWSEL[FQ0AWIXM];
    FQ0AM001.SY1STNBR[FQ0AWIXM] = FQ0AW01.SY1STNBR[FQ0AWIXM];
    FQ0AM001.SY2CLRID[FQ0AWIXM] = FQ0AW01.SY2CLRID[FQ0AWIXM];
    FQ0AM001.XDMCD[FQ0AWIXM] = FQ0AW01.XDMCD[FQ0AWIXM];
    FQ0AM001.YDFCD[FQ0AWIXM] = FQ0AW01.YDFCD[FQ0AWIXM];
    FQ0AM001.FY1FCTYC[FQ0AWIXM] = FQ0AW01.FY1FCTYC[FQ0AWIXM];
    FQ0AM001.FQ1IDBDT[FQ0AWIXM] = FQ0AW01.FQ1IDBDT[FQ0AWIXM];
    FQ0AM001.FQ0AMXDT[FQ0AWIXM] = FQ0AW01.FQ1IDXDT[FQ0AWIXM];
    FQ0AM001.FQ1XDFPC[FQ0AWIXM] = FQ0AW01.FQ1XDFPC[FQ0AWIXM];
    FQ0AM001.FQ1COMNT[FQ0AWIXM] = FQ0AW01.FQ1COMNT[FQ0AWIXM];
    FQ0AM001.XXXSTAT[FQ0AWIXM] = FQ0AW01.XXXSTAT[FQ0AWIXM];

    /* ------------------------------------------------------------*/
     /* Make line visable.*/
    /* ------------------------------------------------------------*/
    set FQ0AM001.FQ0AMSEL[FQ0AWIXM] normal; /* Make visable*/
    set FQ0AM001.FQ0AMDAS[FQ0AWIXM] skip; /* Make visable*/

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    FQ0AW00.FQ0AWIXM = FQ0AW00.FQ0AWIXM + 1; /* Increment line index*/

  end


end // end FQ0A121

// Check attention identifier
Function FQ0A130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FQ0AW00.FQ0AWSWR == "Y") /* Request for data switch*/
      set FQ0AW01 empty;
    end

    FQ0AW00.FQ0AWSWF = "Y"; /* Format the map switch*/
    FQ0AW00.FQ0AWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FQ0AM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FQ0AS01(); /* Purge any temporary storage*/

      XSFQS01(); /* Exit to another application*/

      set FQ0AM001.CATOAP cursor, bold; /* Highlight*/

    else
      FQWREC.XXXMSGNO = 18; /* Indicate PF key not valid*/
      FQWREC.XXXMODID = "130"; /* Process name*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* PF3 was pressed*/
   || converseVar.eventKey is pf4  /* PF4 was pressed*/
   || converseVar.eventKey is pf5  /* PF5 was pressed*/
   || converseVar.eventKey is pf13 /* PF13 was pressed*/
   || converseVar.eventKey is pf14 /* PF14 was pressed*/
   || converseVar.eventKey is pf15 /* PF15 was pressed*/
   || converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17) /* PF17 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FQ0AM001"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* Set to factory application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* Set to factory application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FQ0B"; /* Set to warehouse screen*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FQ0C"; /* Set to factory screen*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FQ0D"; /* Set to warehouse ratio scn*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "FQ0E"; /* Set to customer ratio screen*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FQ0F"; /* Set to warehouse*/
    end

    FQ0AS01(); /* Purge any temporary storage*/

    XSFQS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/

    FQWREC.XXXMODID = "130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FQ0A130

// Reset highlighted fields
Function FQ0A140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FQ0AM001.CATOAP initialAttributes; /* TO application*/
  set FQ0AM001.CAITEM initialAttributes; /* Application data*/

  FQ0AW00.FQ0AWIXM = 1; /* Initialize line index*/

  while (FQ0AW00.FQ0AWIXM <= 16 /* Until end of lines*/
   && FQ0AM001.XXXSTAT[FQ0AWIXM] > " ") /* and data exists*/

    set FQ0AM001.FQ0AMSEL[FQ0AWIXM] normal; /* Reset select flag*/

    FQ0AW00.FQ0AWIXM = FQ0AW00.FQ0AWIXM + 1; /* Increment line index*/

  end


end // end FQ0A140

// Verify the entered data
Function FQ0A150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FQ0AM001.CAITEM > " ") /* Application data was entered*/

    FQWREC.XXXMODID = "150"; /* Module identification*/
    set FQ0AM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FQ0A151(); /* Verify scroll/add request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/

    FQ0AW00.FQ0AWIXM = 16; /* Initialize line index*/

    while (FQ0AW00.FQ0AWIXM > 0) /* Until end of lines*/

      FQ0A152(); /* Verify data in the line*/

      FQ0AW00.FQ0AWIXM = FQ0AW00.FQ0AWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0A150

// Verify scroll request
Function FQ0A151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FQ0AW00.XXXTSPAG < 2)       /* and no previous pages*/

    FQWREC.XXXMODID = "FQ0A151"; /* Module identification*/
    converseLib.validationFailed(13); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FQ0AW00.XXXTSPAG >= FQ0AW00.TA5TSQIX) /* and no more pages*/

    FQWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(14); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FQ0AW00.FQ0AWIXM = 16; /* Initialize line index*/

  while (FQ0AW00.FQ0AWIXM > 0) /* Until end of lines*/

    if (FQ0AM001.FQ0AMSEL[FQ0AWIXM] != " " /* If selection was made*/
     && FQ0AM001.FQ0AMSEL[FQ0AWIXM] != "V") /* and line not reviewed*/

      FQWREC.XXXMODID = "151"; /* Module identification*/
      set FQ0AM001.FQ0AMSEL[FQ0AWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(9); /* Indicate data may not change*/

    end

    FQ0AW00.FQ0AWIXM = FQ0AW00.FQ0AWIXM - 1; /* Decrement line number*/

  end


end // end FQ0A151

// Verify selection
Function FQ0A152()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FQ0AM001.FQ0AMSEL[FQ0AWIXM] > " ") /* Selection was entered*/

    if (FQ0AM001.FQ0AMSEL[FQ0AWIXM] != "S" /* Valid selection character*/
     && FQ0AM001.FQ0AMSEL[FQ0AWIXM] != "V") /* Valid reviewed character*/

      FQWREC.XXXMODID = "152"; /* Module identification*/
      set FQ0AM001.FQ0AMSEL[FQ0AWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(12); /* Indicate only "S" may be used*/

    else

      if (FQ0AM001.FQ0AMSEL[FQ0AWIXM] != "V") /* If not reviewed*/
        /* ------------------------------------------------------------*/
         /* Verify that no other selection was made at the same time.*/
        /* ------------------------------------------------------------*/
        FQ0AW00.FQ0AWIX2 = FQ0AW00.FQ0AWIXM - 1; /* Set counter*/

        while (FQ0AW00.FQ0AWIX2 > 0) /* While counter greater than 0*/
          if (FQ0AM001.FQ0AMSEL[FQ0AWIX2] == "S") /* Another selection made*/

            FQWREC.XXXMODID = "152"; /* Module identification*/
            set FQ0AM001.FQ0AMSEL[FQ0AWIXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(8); /* More than one selection*/
          end

          FQ0AW00.FQ0AWIX2 = FQ0AW00.FQ0AWIX2 - 1; /* Decrement counter*/
        end

      end
    end
  end


end // end FQ0A152

// Process valid input request
Function FQ0A160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  FQ0AW00.FQ0AWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    set FQ0AM001 initial;
    FQ0AW00.XXXTSPAG = FQ0AW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    set FQ0AM001 initial;
    FQ0AW00.XXXTSPAG = FQ0AW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If line selected, set switches for MAP2 and update temp*/
   /* storage.  EZETST contains pointer for selected line.*/
   /* ------------------------------------------------------------*/
  if ("S" in FQ0AM001.FQ0AMSEL) /* Line was selected*/

    FQ0AW00.FQ0AWMAP = "2"; /* Map to be displayed switch*/
    FQ0AW00.FQ0AWSWR = "Y"; /* Request for data switch*/
    FQ0AW00.FQ0AWASW = "N"; /* Add function request switch*/

    FQ0AW01.FQ0AWSEL[sysVar.arrayIndex] = "V"; /* Move 'v' for reviewed*/

  end

   /* ------------------------------------------------------------*/
   /* If PF18 was pressed, set add function request switch on.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf18) /* If PF18 was pressed*/

    FQ0AW00.FQ0AWMAP = "2"; /* Map to be displayed switch*/
    FQ0AW00.FQ0AWASW = "Y"; /* Add function request switch*/
    FQ0AW00.FQ0AWSWR = "N"; /* Request for data switch*/

  end


end // end FQ0A160

// Main process to display map2
Function FQ0A200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FQ0A210(); /* Obtain the data to display*/

  FQ0A220(); /* Format and display the map*/

  FQ0A230(); /* Check attention identifier*/

  FQ0A240(); /* Reset fields to normal intensity*/

  FQ0A250(); /* Verify the entered data*/

  FQ0A260(); /* Process valid input request*/


end // end FQ0A200

// Obtain the data to display
Function FQ0A210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW00.FQ0AWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage.*/
   /* ------------------------------------------------------------*/
  set FQ0AW02 empty; /* M002 display storage*/

   /* ------------------------------------------------------------*/
   /* Save MAP1 display storage in MAP2 storage area.*/
   /* ------------------------------------------------------------*/

  if (FQ0AW00.FQ0AWASW == "N") /* Add function not requested*/
    FQ0AW02.SY1STNBR = FQ0AW01.SY1STNBR[sysVar.arrayIndex]; /* Style number*/
    FQ0AW02.SY2CLRID = FQ0AW01.SY2CLRID[sysVar.arrayIndex]; /* Color id*/
    FQ0AW02.XDMCD = FQ0AW01.XDMCD[sysVar.arrayIndex]; /* Dimension code*/
    FQ0AW02.YDFCD = FQ0AW01.YDFCD[sysVar.arrayIndex]; /* Defective code*/
    FQ0AW02.FY1FCTYC = FQ0AW01.FY1FCTYC[sysVar.arrayIndex]; /* Factory code*/
    FQ0AW02.FQ1IDBDT = FQ0AW01.FQ1IDBDT[sysVar.arrayIndex]; /* Beginning date*/
    FQ0AW02.FQ1IDXDT = FQ0AW01.FQ1IDXDT[sysVar.arrayIndex]; /* Ending date*/
    FQ0AW02.FQ1XDFPC = FQ0AW01.FQ1XDFPC[sysVar.arrayIndex]; /* Percent*/
    FQ0AW02.FQ1COMNT = FQ0AW01.FQ1COMNT[sysVar.arrayIndex]; /* Comment*/
    FQ0AW02.XXXSTAT = FQ0AW01.XXXSTAT[sysVar.arrayIndex]; /* Status*/
    FQ0AW02.ZZZSDT = FQ0AW01.ZZZSDT[sysVar.arrayIndex]; /* Setup date*/
    FQ0AW02.ZZZCHGDT = FQ0AW01.ZZZCHGDT[sysVar.arrayIndex]; /* Change date*/
    FQ0AW02.ZZZCHGTM = FQ0AW01.ZZZCHGTM[sysVar.arrayIndex]; /* Change time*/
    FQ0AW02.XXXUSER = FQ0AW01.XXXUSER[sysVar.arrayIndex]; /* User ID*/

    FQ0AW00.FQ0AWPNT = sysVar.arrayIndex; /* Save pointer*/

    /* ------------------------------------------------------------*/
     /* Obtain descriptions.*/
    /* ------------------------------------------------------------*/
    FQ0A211(); /* Obtain descriptions*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FQ0AW00.FQ0AWSWR = "N"; /* Request for data switch*/


end // end FQ0A210

// Obtain descriptions
Function FQ0A211()
   /* ------------------------------------------------------------*/
   /* Obtain factory name.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW02.FY1FCTYC != " ") /* If factory entered*/

    /* ------------------------------------------------------------*/
     /* Select FCTY.*/
    /* ------------------------------------------------------------*/
    FQ0AS21(); /* Select FCTY*/

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
      FQ0AW02.FY1FCTSN = FY1REC.FY1FCTSN; /* Factory name*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain defective name.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW02.YDFCD != " ") /* If defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ0AW02.YDFCD; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY)
      FQ0AW02.YDFDESC = YDFTBL.YDFDESC[sysVar.arrayIndex];
    end

  end

   /* ------------------------------------------------------------*/
    /* Obtain style/color/dimension descriptions.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW02.SY1STNBR != " ") /* Style*/

    /* ------------------------------------------------------------*/
     /* Select SYCLR.*/
    /* ------------------------------------------------------------*/
    FQ0AS22(); /* Select SYCLR*/

    /* ------------------------------------------------------------*/
     /* If row was found, obtain descriptions.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row was found*/

      FQ0AW02.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
      FQ0AW02.SY2CLRAB = PG2REC.SY2CLRAB; /* Color description*/

      XDMREC.XDMCD = PG2REC.XDMCD;
      if (XDMREC.XDMCD in XDMTBL.XDMCD)
        FQ0AW02.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
      end

    end
  end


end // end FQ0A211

// Format and converse the map
Function FQ0A220()
   /* ----------------------------------------------------*/
   /* If an error was found, format data to be displayed.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error found*/

    FQWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FQ0AW00.FQ0AWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FQ0AW00.FQ0AWSWF == "Y") /* Map must be formatted*/
      FQ0A221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQ0AM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FQ0AM002.CATOAP = COMMAREA.CATOAP; /* To application*/
  FQ0AM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FQWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FQWREC.XXXMSGNO != 0) /* Message to display*/

      if (FQWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FQWREC.XXXMSGNO);
      end /* Message number*/
    else
      FQ0AM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FQ0AM002.XXXMODID = FQWREC.XXXMODID; /* Module identification*/

    set FQ0AM002 alarm; /* Indicate sound alarm*/

  end


  converse FQ0AM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FQWREC.XXXMODID = " "; /* Module identification*/
  FQWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FQ0AM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FQ0AM002.CAITEM; /* Application data*/


end // end FQ0A220

// Format the display data
Function FQ0A221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FQ0AM002 initial; /* m002 input/output area*/

  FQ0AW00.FQ0AWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If updating, format the data from storage.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW00.FQ0AWASW == "N") /* If not using add function*/

    FQ0AM002.SY1STNBR = FQ0AW02.SY1STNBR; /* Style number*/
    FQ0AM002.SY1SSTNM = FQ0AW02.SY1SSTNM; /* Style name*/
    FQ0AM002.SY2CLRID = FQ0AW02.SY2CLRID; /* Color identification*/
    FQ0AM002.SY2CLRAB = FQ0AW02.SY2CLRAB; /* Color description*/
    FQ0AM002.XDMCD = FQ0AW02.XDMCD; /* Dimension code*/
    FQ0AM002.XDMABRV = FQ0AW02.XDMABRV; /* Dimension name*/
    FQ0AM002.YDFCD = FQ0AW02.YDFCD; /* Defective code*/
    FQ0AM002.YDFDESC = FQ0AW02.YDFDESC; /* Defect name*/
    FQ0AM002.FY1FCTYC = FQ0AW02.FY1FCTYC; /* Factory code*/
    FQ0AM002.FY1FCTSN = FQ0AW02.FY1FCTSN; /* Factory name*/
    FQ0AM002.FQ0AMBDT = FQ0AW02.FQ1IDBDT; /* Beginning date*/
    FQ0AM002.FQ0AMEDT = FQ0AW02.FQ1IDXDT; /* Ending date*/
    FQ0AM002.FQ1XDFPC = FQ0AW02.FQ1XDFPC; /* Percent*/
    FQ0AM002.FQ1COMNT = FQ0AW02.FQ1COMNT; /* Comment*/
    FQ0AM002.XXXSTAT = FQ0AW02.XXXSTAT; /* Defect code status*/
    FQ0AM002.ZZZSDT = FQ0AW02.ZZZSDT; /* Setup date*/
    FQ0AM002.ZZZCHGDT = FQ0AW02.ZZZCHGDT; /* Change date*/
    FQ0AM002.ZZZCHGTM = FQ0AW02.ZZZCHGTM; /* Change time*/
    FQ0AM002.XXXUSER = FQ0AW02.XXXUSER; /* User ID*/

    if (FQ0AM002.XXXSTAT == "A") /* If status is active*/
      set FQ0AM002.FQ0AMLG4 skip; /* Status legend*/
      set FQ0AM002.XXXSTAT cursor, normal; /* Place cursor on status*/
    else
      set FQ0AM002.CATOAP cursor; /* Place cursor*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If using add function, make fields enterable.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW00.FQ0AWASW == "Y") /* If add function was requested*/

    set FQ0AM002.SY1STNBR cursor, normal; /* Style number*/
    set FQ0AM002.SY2CLRID normal; /* Color identification*/
    set FQ0AM002.XDMCD normal; /* Dimension code*/
    set FQ0AM002.YDFCD normal; /* Defective code*/
    set FQ0AM002.FY1FCTYC normal; /* Factory code*/
    set FQ0AM002.FQ0AMBDT normal; /* Beginning date*/
    set FQ0AM002.FQ0AMEDT normal; /* Ending date*/
    set FQ0AM002.FQ0AMLG1 skip; /* Date legend 1*/
    set FQ0AM002.FQ0AMLG2 skip; /* Date legend 2*/
    set FQ0AM002.FQ0AMLG3 skip; /* Date legend 3*/
    FQ0AM002.XXXSTAT = "A"; /* Default status to 'active'*/
    FQ0AW02.XXXSTAT = "A"; /* Default status to 'active'*/
    set FQ0AM002.FQ1XDFPC normal; /* Percent*/
    set FQ0AM002.FQ1COMNT normal; /* Comment*/
    set FQ0AM002.FQ0AMADD skip; /* Add title*/

  end


end // end FQ0A221

// Check attention identifier
Function FQ0A230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FQ0AW00.FQ0AWSWR == "Y") /* Request for data switch*/
      set FQ0AW02 empty;
    end

    FQ0AW00.FQ0AWSWR = "N"; /* Data request switch*/
    FQ0AW00.FQ0AWSWF = "Y"; /* Map formatted switch*/
    FQWREC.FQWMODSW = "N"; /* Modified data exit switch*/

    COMMAREA.CATOAP = " "; /* Fast path to application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FQ0AM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FQ0AS01(); /* Purge any temporary storage*/

      XSFQS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* If transfer failed, return to first map.*/
      /* ------------------------------------------------------------*/
      set FQ0AM002.CATOAP cursor, bold; /* Highlight*/

    else
      converseLib.validationFailed(18); /* Indicate PF key not valid*/
      FQWREC.XXXMODID = "230"; /* Process name*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* PF3 was pressed*/
   || converseVar.eventKey is pf4  /* PF4 was pressed*/
   || converseVar.eventKey is pf5  /* PF5 was pressed*/
   || converseVar.eventKey is pf13 /* PF13 was pressed*/
   || converseVar.eventKey is pf14) /* PF14 was pressed*/
     /* OR EZEAID IS PF15             ; PF15 was pressed*/
     /* OR EZEAID IS PF16             ; PF16 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FQ0AM002"; /* Move in map name for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      if (FQ0AW00.FQ0AWASW == "Y") /* If add function performed*/
        FQ0AW00.FQ0AWSWR = "Y"; /* Data request switch*/
      end

      FQ0AW00.FQ0AWMAP = "1"; /* Indicate map 1*/
      FQ0AW00.FQ0AWSWF = "Y"; /* Map formatted switch*/

      exit stack; /* Exit to redisplay map*/

    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "FQ0M"; /* Set to factory application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FQ0B"; /* Set to warehouse screen*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FQ0C"; /* Set to factory screen*/
    end

     /* IF EZEAID IS PF15             ; PF15 was pressed*/
    /* MOVE 'FQ0D' TO COMMAREA.CATOAP     ; Set to whse ratio scn*/
     /* END ;*/

     /* IF EZEAID IS PF16             ; PF16 was pressed*/
    /* MOVE 'FQ0E' TO COMMAREA.CATOAP     ; Set to cust ratio scn*/
     /* END ;*/

    FQ0AS01(); /* Purge any temporary storage*/

    XSFQS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, return to first map.*/
    /* ------------------------------------------------------------*/
    set FQ0AM001.CATOAP cursor, bold; /* Highlight*/
    FQ0AW00.FQ0AWMAP = "1"; /* Indicate map 1*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FQWREC.XXXMODID = "230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FQ0A230

// Reset highlighted fields
Function FQ0A240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  if (FQ0AW00.FQ0AWASW == "Y") /* If add function was requested*/

    set FQ0AM002.SY1STNBR cursor, normal; /* Style number*/
    set FQ0AM002.SY2CLRID normal; /* Color identification*/
    set FQ0AM002.XDMCD normal; /* Dimension code*/
    set FQ0AM002.YDFCD normal; /* Defective code*/
    set FQ0AM002.FY1FCTYC normal; /* Factory code*/
    set FQ0AM002.FQ0AMBDT normal; /* Beginning date*/
    set FQ0AM002.FQ0AMEDT normal; /* Ending date*/
    set FQ0AM002.FQ1COMNT normal; /* Comment*/
    set FQ0AM002.FQ1XDFPC normal; /* Percent*/

  end

  set FQ0AM002.XXXSTAT initialAttributes; /* Defect code status*/

  set FQ0AM002.CATOAP initialAttributes; /* Commarea TO application*/
  set FQ0AM002.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.YDFCD == "?") /* defect list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FQWREC.XXXMODID = "240"; /* Module identification*/
      converseLib.validationFailed(24); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/
    end

  else
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of defect codes.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.YDFCD == "?") /* defect list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "DEFECT CODES"; /* Heading*/
    XX0XW02.XGPCD = FQWREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYDF01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FQ0AM002.YDFCD = FQWREC.YDFCD; /* Restore prior code*/
    else

      FQ0AM002.YDFCD = YDFTBL.YDFCD[XX0XWPIX]; /* Selected code*/
    end

    set FQ0AM002.YDFCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FQWREC.XXXMODID = "240"; /* Module identification*/
  converseLib.validationFailed(25); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FQ0A240

// Verify data that was entered
Function FQ0A250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CAITEM > " ") /* Application data entered*/

    FQWREC.XXXMODID = "250"; /* Module identification*/
    set FQ0AM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If add function is being used, verify comment.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW00.FQ0AWASW == "Y") /* If row being added*/

    FQ0A251(); /* Verify comment*/
  end

   /* ------------------------------------------------------------*/
   /* If the status was changed, verify.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.XXXSTAT != FQ0AW02.XXXSTAT /* Status*/
   || FQ0AM002.XXXSTAT == " ")            /* Status*/

    FQ0A252(); /* Verify status code*/

  end

   /* ------------------------------------------------------------*/
   /* If add function is being used, verify remaining fields.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW00.FQ0AWASW == "Y") /* If row being added*/

    FQ0A253(); /* Verify percent*/
    FQ0A254(); /* Verify dates*/
    FQ0A255(); /* Verify factory*/
    FQ0A256(); /* Verify defect*/
    FQ0A257(); /* Verify sty/clr/dim*/

  end

   /* ------------------------------------------------------------*/
   /* Check if enough of the key has been entered.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW00.FQ0AWASW == "Y") /* If row being added*/

    FQ0A258(); /* Verify key*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FQ0A250

// Verify comment
Function FQ0A251()
   /* ------------------------------------------------------------*/
    /* Verify Comment.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.FQ1COMNT == " ") /* If comment is missing*/

    /* ------------------------------------------------------------*/
     /* If not valid, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    FQWREC.XXXMODID = "251"; /* Module identification*/
    set FQ0AM002.FQ1COMNT cursor, bold; /* Highlight*/
    converseLib.validationFailed(3); /* Indicate invalid or missing*/

  end


end // end FQ0A251

// Verify status code
Function FQ0A252()
   /* ------------------------------------------------------------*/
   /* If add was requested, status must be 'A'.*/
   /* ------------------------------------------------------------*/
  if (FQ0AW00.FQ0AWASW == "Y") /* If adding row*/

    if (FQ0AM002.XXXSTAT != "A") /* and status not equal 'A'*/
      /* ------------------------------------------------------------*/
       /* If not valid, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      FQWREC.XXXMODID = "252"; /* Module identification*/
      set FQ0AM002.XXXSTAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(3); /* Indiicate invalid or missing*/
    end

  else
    /* ------------------------------------------------------------*/
     /* Else, you are updating and status must be 'I'.*/
    /* ------------------------------------------------------------*/

    if (FQ0AM002.XXXSTAT != "I") /* If status not equal 'i'*/
      /* ------------------------------------------------------------*/
       /* If not valid, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      FQWREC.XXXMODID = "252"; /* Module identification*/
      set FQ0AM002.XXXSTAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(3); /* Indiicate invalid or missing*/
    else
      /* ------------------------------------------------------------*/
       /* Save status for MAP1.*/
      /* ------------------------------------------------------------*/
      FQ0AW01.XXXSTAT[FQ0AWPNT] = FQ0AM002.XXXSTAT; /* MAP1*/
    end

  end


end // end FQ0A252

// Verify percent
Function FQ0A253()
   /* ------------------------------------------------------------*/
    /* If percent is missing, default to 100 percent.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.FQ1XDFPC == 0) /* If percent is missing*/
    FQ0AM002.FQ1XDFPC = 100; /* Default to 100*/
  end

   /* ------------------------------------------------------------*/
    /* Verify Percent of exclusion.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.FQ1XDFPC > 100) /* or percent greater than 100*/

    /* ------------------------------------------------------------*/
     /* If not valid, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    FQWREC.XXXMODID = "253"; /* Module identification*/
    set FQ0AM002.FQ1XDFPC cursor, bold; /* Highlight*/
    converseLib.validationFailed(49); /* Indicate invalid or missing*/

  end


end // end FQ0A253

// Verify dates
Function FQ0A254()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FQZREC empty; /* clear date edit record*/

   /* ------------------------------------------------------------*/
   /* If no date was entered, skip the edit.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.FQ0AMBDT == 0 /* Beg date*/
   && FQ0AM002.FQ0AMEDT == 0) /* End date*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Format keys for call to date routine.*/
   /* ------------------------------------------------------------*/
  FQZREC.FQZBEGRG = FQ0AM002.FQ0AMBDT; /* Beg date*/
  FQZREC.FQZENDRG = FQ0AM002.FQ0AMEDT; /* End date*/
  FQZREC.FQZNUMYR = 99; /* Number of years*/

   /* ------------------------------------------------------------*/
   /* Edit range.  Send YYMMMM - receive back CCYYMMMM.*/
   /* ------------------------------------------------------------*/
  XSFQS05(); /* Common date edit routine*/

   /* ------------------------------------------------------------*/
   /* If a ending date was entered, check return.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.FQ0AMEDT != 0) /* End date*/
    if (FQZREC.FQZENDRC == 0) /* end date was valid*/
      FQ0AM002.FQ0AMEDT = FQZREC.FQZENDRG; /* End date*/

    else
      set FQ0AM002.FQ0AMEDT cursor, bold; /* Highlight*/
      FQWREC.XXXMODID = "254"; /* module identification*/

      if (FQZREC.FQZENDRC == 1) /* End date was invalid*/
        converseLib.validationFailed(34); /* Indicate invalid*/

      else
        converseLib.validationFailed(27); /* Indicate out of range*/
      end
    end

  else
    FQZREC.FQZECYMM = 0; /* End date*/
  end

   /* ------------------------------------------------------------*/
   /* If a beginning date was entered, check return.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.FQ0AMBDT != 0) /* Begin date*/
    if (FQZREC.FQZBEGRC == 0) /* Beg date was valid*/
      FQ0AM002.FQ0AMBDT = FQZREC.FQZBEGRG; /* Begin date*/

    else
      FQWREC.XXXMODID = "254"; /* module identification*/
      set FQ0AM002.FQ0AMBDT cursor, bold; /* Highlight*/

      if (FQZREC.FQZBEGRC == 1) /* Beg date was invalid*/
        converseLib.validationFailed(34); /* Indicate invalid*/

      else
        converseLib.validationFailed(27); /* Indicate out of range*/
        set FQ0AM002.FQ0AMEDT bold; /* Highlight*/
      end
    end

  else
    FQZREC.FQZBCYMM = 0; /* Begin date*/
  end


end // end FQ0A254

// Verify factory
Function FQ0A255()
   /* ------------------------------------------------------------*/
   /* Verify factory code.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.FY1FCTYC != " ") /* If factory entered*/

    /* ------------------------------------------------------------*/
     /* Select FCTY.*/
    /* ------------------------------------------------------------*/
    FQ0AS23(); /* Select FCTY*/

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
      FQ0AM002.FY1FCTSN = FY1REC.FY1FCTSN; /* Factory name*/

    else

      set FQ0AM002.FY1FCTYC cursor, bold; /* Highlight*/
      converseLib.validationFailed(30); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "255"; /* Module identification*/
    end

  end


end // end FQ0A255

// Verify defect
Function FQ0A256()
   /* ------------------------------------------------------------*/
   /* Verify defective code.*/
   /* ------------------------------------------------------------*/

  if (FQ0AM002.YDFCD != " ") /* If defect code entered*/
    YDFREC.XGPCD = FQWREC.XGPCD; /* Format key*/
    YDFREC.YDFCD = FQ0AM002.YDFCD; /* Format key*/

    if (YDFREC.YDFKEY in YDFTBL.YDFKEY
     && YDFTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FQ0AM002.YDFDESC = YDFTBL.YDFDESC[sysVar.arrayIndex]; /* Defect name*/

    else

      /* ------------------------------------------------------------*/
       /* If not found, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/
      set FQ0AM002.YDFCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Indicate missing or invalid*/
      FQWREC.XXXMODID = "256"; /* Module identification*/

    end
  end


end // end FQ0A256

// Verify style/color/dim
Function FQ0A257()
   /* ------------------------------------------------------------*/
    /* If missing, default dimension.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.SY1STNBR != " " /* If style entered*/
   && FQ0AM002.XDMCD == " ")   /* and dim missing*/

    FQ0AM002.XDMCD = "00"; /* Default to '00'*/
  else
    /* ------------------------------------------------------------*/
     /* If dimension was entered and style was not, error.*/
    /* ------------------------------------------------------------*/
    if (FQ0AM002.SY1STNBR == " " /* If style not entered*/
     && FQ0AM002.XDMCD != " ")   /* and dim entered*/

      converseLib.validationFailed(48); /* Indicate error*/
      FQWREC.XXXMODID = "257"; /* Module identification*/
      set FQ0AM002.XDMCD cursor, bold; /* Highlight*/
    end
  end

   /* ------------------------------------------------------------*/
    /* If missing, default color.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.SY1STNBR != " " /* If style entered*/
   && FQ0AM002.SY2CLRID == " ") /* and color missing*/
    FQ0AM002.SY2CLRID = "00"; /* Default to '00'*/
  end

   /* ------------------------------------------------------------*/
    /* Verify style/color/dimension.*/
   /* ------------------------------------------------------------*/

  if (FQ0AM002.SY1STNBR != " " /* Style*/
   || FQ0AM002.SY2CLRID != " ") /* Color*/

    /* ------------------------------------------------------------*/
     /* Select SYCLR.*/
    /* ------------------------------------------------------------*/
    FQ0AS24(); /* Select SYCLR*/

    /* ------------------------------------------------------------*/
     /* If row was found, obtain descriptions.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If row was found*/

      FQ0AM002.SY1SSTNM = PG2REC.SY1SSTNM; /* Style name*/
      FQ0AM002.SY2CLRAB = PG2REC.SY2CLRAB; /* Color description*/

      XDMREC.XDMCD = PG2REC.XDMCD;
      if (XDMREC.XDMCD in XDMTBL.XDMCD)
        FQ0AM002.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
      end

    else
      set FQ0AM002.SY1STNBR cursor, bold; /* Highlight*/
      set FQ0AM002.SY2CLRID bold; /* Highlight*/
      set FQ0AM002.XDMCD bold; /* Highlight*/
      converseLib.validationFailed(33); /* Indicate data missing or invalid*/
      FQWREC.XXXMODID = "257"; /* Module identification*/

    end
  end


end // end FQ0A257

// Verify key
Function FQ0A258()
   /* ------------------------------------------------------------*/
    /* Verify enough of a key has been entered.*/
   /* ------------------------------------------------------------*/

  if (FQ0AM002.SY1STNBR == " " /* Style*/
   && FQ0AM002.YDFCD == " "    /* Defect*/
   && FQ0AM002.FY1FCTYC == " ") /* Factory*/

    set FQ0AM002.SY1STNBR cursor, bold; /* Highlight*/
    set FQ0AM002.YDFCD bold; /* Highlight*/
    set FQ0AM002.FY1FCTYC bold; /* Highlight*/

    converseLib.validationFailed(22); /* Indicate one must be entered*/
    FQWREC.XXXMODID = "258"; /* Module identification*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that row not alreay on the data base.*/
   /* ------------------------------------------------------------*/

  FQ0AS25(); /* Select DEFEX*/

   /* ------------------------------------------------------------*/
   /* If row was found, indicate error.*/
   /* ------------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If row was found*/

    set FQ0AM002.SY1STNBR cursor, bold; /* Highlight*/
    set FQ0AM002.SY2CLRID bold; /* Highlight*/
    set FQ0AM002.XDMCD bold; /* Highlight*/
    set FQ0AM002.YDFCD bold; /* Highlight*/
    set FQ0AM002.FY1FCTYC bold; /* Highlight*/
    set FQ0AM002.FQ0AMBDT bold; /* Highlight*/
    set FQ0AM002.FQ0AMEDT bold; /* Highlight*/

    converseLib.validationFailed(19); /* Indicate row exists*/
    FQWREC.XXXMODID = "258"; /* Module identification*/

    exit stack; /* Return to display map*/

  end


end // end FQ0A258

// Process valid input request
Function FQ0A260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  FQ0AW00.FQ0AWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Check for add or update.*/
   /* ------------------------------------------------------------*/
  if (FQ0AM002.XXXSTAT != FQ0AW02.XXXSTAT /* If status changed*/
   || FQ0AW00.FQ0AWASW == "Y")            /* or adding row*/

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/
    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* If add was requested, insert row.*/
    /* ------------------------------------------------------------*/
    if (FQ0AW00.FQ0AWASW == "Y") /* If adding row*/

      FQ0A261(); /* Insert DEFEX*/
    else

      /* ------------------------------------------------------------*/
       /* Update DEFEX.*/
      /* ------------------------------------------------------------*/
      FQ0A262(); /* Update DEFEX*/

      /* ------------------------------------------------------------*/
       /* Update temporary storage.*/
      /* ------------------------------------------------------------*/
      FQ0AW01.XXXSTAT[FQ0AWPNT] = FQ0AM002.XXXSTAT; /* save status*/
      FQ0AW01.ZZZCHGDT[FQ0AWPNT] = XX0XW01.XX0XWDAT; /* Change date*/
      FQ0AW01.ZZZCHGTM[FQ0AWPNT] = XX0XW01.XX0XWTIM; /* Change time*/
      FQ0AW01.XXXUSER[FQ0AWPNT] = COMMAREA.CAUSERID; /* User ID*/

      FQ0AW02.XXXSTAT = FQ0AM002.XXXSTAT; /* save status*/
      FQ0AW02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
      FQ0AW02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
      FQ0AW02.XXXUSER = COMMAREA.CAUSERID; /* User ID*/

    end

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/
    FQWREC.XXXMODID = "260"; /* Module identification*/
    FQWREC.XXXMSGNO = 21; /* Indicate update completed*/

    /* ------------------------------------------------------------*/
     /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/
    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit all changes*/

  end


end // end FQ0A260

// Add DEFEX
Function FQ0A261()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FQ1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format copybook.*/
   /* ------------------------------------------------------------*/
  FQ1REC.XGPCD = FQWREC.XGPCD;
  FQ1REC.SY1STNBR = FQ0AM002.SY1STNBR; /* Style number*/
  FQ1REC.SY2CLRID = FQ0AM002.SY2CLRID; /* Color id*/
  FQ1REC.XDMCD = FQ0AM002.XDMCD; /* Dimension*/
  FQ1REC.YDFCD = FQ0AM002.YDFCD; /* Defective code*/
  FQ1REC.FY1FCTYC = FQ0AM002.FY1FCTYC; /* Factory code*/
  FQ1REC.FQ1IDBDT = FQZREC.FQZBEGRG; /* Begin date*/
  FQ1REC.FQ1IDXDT = FQZREC.FQZENDRG; /* End date*/
  FQ1REC.FQ1XDFPC = FQ0AM002.FQ1XDFPC; /* Percent*/
  FQ1REC.FQ1COMNT = FQ0AM002.FQ1COMNT; /* Comment*/
  FQ1REC.XXXSTAT = FQ0AM002.XXXSTAT; /* Status*/
  FQ1REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FQ1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FQ1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FQ1REC.XXXUSER = COMMAREA.CAUSERID; /* User ID*/

   /* ------------------------------------------------------------*/
   /* Insert DEFEX.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5540" ("A ", SQLCA, FQ1REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "261"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDEFEX01"; /* Table view name*/
  TA1REC.TA1TBLKE = FQ1REC.FQ1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0A261

// Update DEFEX
Function FQ0A262()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FQ1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  FQ1REC.XGPCD = FQWREC.XGPCD;
  FQ1REC.SY1STNBR = FQ0AM002.SY1STNBR; /* Style number*/
  FQ1REC.SY2CLRID = FQ0AM002.SY2CLRID; /* Color id*/
  FQ1REC.XDMCD = FQ0AM002.XDMCD; /* Dimension*/
  FQ1REC.YDFCD = FQ0AM002.YDFCD; /* Defective code*/
  FQ1REC.FY1FCTYC = FQ0AM002.FY1FCTYC; /* Factory code*/
  FQ1REC.FQ1IDBDT = FQ0AW01.FQ1IDBDT[FQ0AWPNT]; /* Begin date*/
  FQ1REC.FQ1IDXDT = FQ0AW01.FQ1IDXDT[FQ0AWPNT]; /* End date*/
  FQ1REC.FQ1XDFPC = FQ0AM002.FQ1XDFPC; /* Percent*/
  FQ1REC.XXXSTAT = FQ0AM002.XXXSTAT; /* Status*/
  FQ1REC.FQ1COMNT = FQ0AM002.FQ1COMNT; /* Comment*/

  FQ1REC.XXXUSER = COMMAREA.CAUSERID; /* User ID*/
  FQ1REC.ZZZSDT = FQ0AW02.ZZZSDT; /* Setup date*/
  FQ1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FQ1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5540" ("U ", SQLCA, FQ1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row not found, indicate the data was updated by another.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        FQ0AW00.FQ0AWMAP = "1"; /* Map number*/
        FQ0AW00.FQ0AWSWR = "Y"; /* Request data switch*/
        FQ0AW00.FQ0AWSWF = "Y"; /* Format map switch*/

        FQWREC.XXXMODID = "262"; /* Module identification*/
        FQWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FQWREC.XXXMODID = "262"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDEFEX01"; /* Table view name*/
  TA1REC.TA1TBLKE = FQ1REC.FQ1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0A262

// Purge any temporary storage
Function FQ0AS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FQ0AW01 empty; /* M001 display storage*/

  FQ0AW00.FQ0AWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FQ0AW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FQ0AW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(1); /* System error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0AS01

// Update storage page
Function FQ0AS02()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  FQ0AW01.XXXTSLEN = FQ0AW00.XXXTSLEN; /* page length*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FQ0AW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0AS02

// Read temporary storage page
Function FQ0AS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FQ0AW01.XXXTSLEN = FQ0AW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FQ0AW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FQ0AW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FQWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0AS03

// Select FCTY
Function FQ0AS21()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FY1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  FY1REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  FY1REC.FY1FCTYC = FQ0AW02.FY1FCTYC; /* Factory*/

   /* ------------------------------------------------------------*/
   /* Select FCTY.*/
   /* ------------------------------------------------------------*/
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not ffqilable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not ffqilable*/

    converseLib.validationFailed(2); /* Indicate not ffqilable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0AS21

// Select SYCLR
Function FQ0AS22()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  PG2REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = FQ0AW02.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FQ0AW02.SY2CLRID; /* Color ID*/
  PG2REC.XDMCD = FQ0AW02.XDMCD; /* Dimension*/

   /* ------------------------------------------------------------*/
   /* Select SYCLR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not ffqilable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0AS22

// Select FCTY
Function FQ0AS23()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FY1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  FY1REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  FY1REC.FY1FCTYC = FQ0AM002.FY1FCTYC; /* Factory*/

   /* ------------------------------------------------------------*/
   /* Select FCTY.*/
   /* ------------------------------------------------------------*/
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not ffqilable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not ffqilable*/

    converseLib.validationFailed(2); /* Indicate not ffqilable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0AS23

// Select SYCLR
Function FQ0AS24()
   /* ------------------------------------------------------------*/
    /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Copybook*/

   /* ------------------------------------------------------------*/
    /* Format key.*/
   /* ------------------------------------------------------------*/
  PG2REC.XGPCD = FQWREC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = FQ0AM002.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FQ0AM002.SY2CLRID; /* Color ID*/
  PG2REC.XDMCD = FQ0AM002.XDMCD; /* Dimension*/

   /* ------------------------------------------------------------*/
   /* Select SYCLR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not ffqilable, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0AS24

// Select DEFEX
Function FQ0AS25()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  set FQ1REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  FQ1REC.XGPCD = FQWREC.XGPCD; /* GPC*/
  FQ1REC.SY1STNBR = FQ0AM002.SY1STNBR; /* style*/
  FQ1REC.SY2CLRID = FQ0AM002.SY2CLRID; /* color*/
  FQ1REC.XDMCD = FQ0AM002.XDMCD; /* dim*/
  FQ1REC.YDFCD = FQ0AM002.YDFCD; /* defect*/
  FQ1REC.FY1FCTYC = FQ0AM002.FY1FCTYC; /* factory*/
  FQ1REC.FQ1IDBDT = FQ0AM002.FQ0AMBDT; /* beg range date*/
  FQ1REC.FQ1IDXDT = FQ0AM002.FQ0AMEDT; /* end range date*/
  FQ1REC.XXXSTAT = "A"; /* status*/

   /* ------------------------------------------------------------*/
   /* Select DEFEX.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5540" ("S ", SQLCA, FQ1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FQWREC.XXXMODID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FQWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY"; /* Data base name*/
  TA1REC.TA1TBLVU = "VDEFEX01"; /* Table view name*/
  TA1REC.TA1PGMAP = FQ1REC.FQ1KEY; /* Program application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FQ0AS25

//*** RECORD=FQ0AW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FQ0AW00 type basicRecord
  10 FQ0AWIXM FQ0AWIXM ; 
  10 FQ0AWIX2 FQ0AWIX2 ; 
  10 FQ0AWPNT FQ0AWPNT ; 
  10 FQ0AWCNT FQ0AWCNT ; 
  10 FQ0AWEOC FQ0AWEOC ; 
  10 * char(1) ; 
  10 FQ0AWSWF FQ0AWSWF ; 
  10 FQ0AWSWR FQ0AWSWR ; 
  10 FQ0AWSWU FQ0AWSWU ; 
  10 FQ0AWASW FQ0AWASW ; 
  10 FQ0AWDSW FQ0AWDSW ; 
  10 FQ0AWMAP FQ0AWMAP ; 
  10 * char(1) ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end FQ0AW00

//*** RECORD=FQ0AW01 ****
// ------------------------
// Map 010 display storage.
// ------------------------
// ***********************
Record FQ0AW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1456) ; 
    10 FQ0AWSEL FQ0AWSEL [16] ; 
    10 SY1STNBR SY1STNBR [16] ; 
    10 SY2CLRID SY2CLRID [16] ; 
    10 XDMCD XDMCD [16] ; 
    10 YDFCD YDFCD [16] ; 
    10 FY1FCTYC FY1FCTYC [16] ; 
    10 FQ1IDBDT FQ1IDBDT [16] ; 
    10 FQ1IDXDT FQ1IDXDT [16] ; 
    10 FQ1XDFPC FQ1XDFPC [16] ; 
    10 FQ1COMNT FQ1COMNT [16] ; 
    10 XXXSTAT XXXSTAT [16] ; 
    10 XXXUSER XXXUSER [16] ; 
    10 ZZZSDT ZZZSDT [16] ; 
    10 ZZZCHGDT ZZZCHGDT [16] ; 
    10 ZZZCHGTM ZZZCHGTM [16] ; 
    10 ZZZCHGCT ZZZCHGCT [16] ; 
end // end FQ0AW01

//*** RECORD=FQ0AW02 ****
// ------------------------
// Map 011 display storage.
// ------------------------
// ***********************
Record FQ0AW02 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XDMCD XDMCD ; 
  10 XDMABRV XDMABRV ; 
  10 YDFCD YDFCD ; 
  10 YDFDESC YDFDESC ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 FQ1IDBDT FQ1IDBDT ; 
  10 FQ1IDXDT FQ1IDXDT ; 
  10 FQ1XDFPC FQ1XDFPC ; 
  10 FQ1COMNT FQ1COMNT ; 
  10 XXXSTAT XXXSTAT ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 XXXUSER XXXUSER ; 
end // end FQ0AW02

// Add function request switch
DataItem FQ0AWASW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count for modified data
DataItem FQ0AWCNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data found switch
DataItem FQ0AWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FQ0AWEOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ0AWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FQ0AWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem FQ0AWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pointer
DataItem FQ0AWPNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem FQ0AWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FQ0AWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FQ0AWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FQ0AWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

