package nc0c;

import corpcom2.XX0XW01;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import nc.common.NCWREC;
import ni.common.NIFTXT;
import ni.common.NISLTXTC;
import ni.common.NISPTXRS;
import nl.common.NLXREC;
import ta.common.TA1REC;
import vv.common.VPRTXT01;
//*** PROGRAM=NC0C ****
// ************************************************************
// 
//          NC0C - NIL L/C PROFORMA TEXT MAINTENANCE
//          ----------------------------------------
// 
// This application allows the user to add, change, rearrange
// or delete proforma text.
// 
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 06-11-91 sazare creation
// 01-22-92 jshann added logic for entry from NI0U for proforma
//                 specific lc terms maintance
// 03-05-92 jshann corrected edit logic for proforma
// 10-15-92 jjudki include new nlxrec.
// 03-09-94 kshaw  march db changes.
// 01-29-98 MBURLE Y2KFIX: regenerated for latest
//                         version of XX0XS01.
// *********************
Program NC0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NC0CW01 NC0CW01; // record
  NCWREC NCWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VPRTXT01 VPRTXT01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use NC0CM.NC0CM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NC0C000: NC0C000();
    exit program;
  end // end main
end // end NC0C

// Main flow
Function NC0C000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0C000";
  ;
  NC0C001(); /* initialize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-application*/
    NC0C050(); /* process the application screen(s)*/
  end
  ;
  exit program;
end // end NC0C000

// Initialize Application
Function NC0C001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NC0C001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  ;
  ;
  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NCWREC empty; /* clear out the "common" working*/
                                   /* storage*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  ;
  NC0CSS1(); /* Security for NC0C*/
  ;
  XX0XS01(); /* Format date and time for adds (zz's)*/
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXCSCRN = "NC0CM100"; /* first header*/
  ;
  NLXREC.NLXSNAME[1] = "NC0CM100";
                                   /* init screens used in this applic.*/
  ;
   /* *******************/
   /* Check passed data*/
   /* *******************/
  ;
  if (COMMAREA.CAITEM > " ") /* If customer number passed*/
    XPNL004(); /* Validate caitem numeric*/
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
       /* next sentence                 Leave cust blank in map*/
    else
      NC0CM100.KUCCOID = NLXREC.NLXNUM8A; /* Move item to map cust*/
    end
  else
    if (COMMAREA.CAFROMAP == "NI0U")
      NCWREC.NCWGROUP = COMMAREA.CAUSERA;
      NC0CM100.KUCCOID = NCWREC.KUCCOID;
    end
  end
end // end NC0C001

// Decide which map to display
Function NC0C050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0C050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen xx0xm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NC0C100();
    end
  else
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of nl0%050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/
  ;
end // end NC0C050

// Converse map M100
Function NC0C100()
   /* ************************************************************/
   /* *    process screen NC0CM100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from NC0C050 until the end-of-screen   **/
   /* *     flag (NLXEOSFL) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0C100";
  ;
  if (NLXREC.NLXERRF == "N") /* If no errors*/
    NC0CW01.NC0CWLCK = "N"; /* Set data base lock flag to no*/
  end
  ;
  if (NLXREC.NLXBLDSC == "Y") /* If screen to be rebuilt*/
    NC0C101(); /* Refresh cust info for map*/
    NLXREC.NLXBLDSC = "N";
  end
  ;
  if (NC0CW01.NC0CWPAG == "Y") /* If page of text to be changed*/
    NC0C102(); /* Load a page of text to map*/
    NC0CW01.NC0CWPAG = "N";
  end
  ;
   /* ***********************************************************/
  converse NC0CM100 ;
   /* ***********************************************************/
  ;
  NC0CM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  if (NCWREC.NIQPROID < 1)
    set NC0CM100.KUCCOID normal;
  end
  set NC0CM100.CATOAP normal;
  set NC0CM100.CAITEM normal;
  ;
  NC0C110(); /* Check attention identifier*/
  ;
  if (NC0CM100.KUCCOID <= 0              /* If customer id is blank*/
   || NC0CM100.KUCCOID != NCWREC.KUCCOID /* or changed*/
   || NC0CW01.NC0CWLCK == "Y")           /* or data base lock occurred*/
    if (NLXREC.NLXERRF == "N") /* and no errors*/
      NLXREC.NLXEOSF = "Y"; /* Try to build screen again*/
      return;
    end
  end
  ;
  if (NLXREC.NLXERRF == "N") /* If no errors*/
    if (NCWREC.NIQPROID == 0
     && NC0CW01.NC0CWINQ == "N") /* and user is not inquiry only*/
      NC0C120(); /* Edit entered option*/
    else
      if (NCWREC.NIQPROID > 1)
        NC0C120(); /* Edit entered option*/
      end
    end
  end
  ;
  if (NLXREC.NLXERRF == "N") /* If no errors*/
    NC0C130(); /* Determine next action...*/
  end
  ;
end // end NC0C100

// Refresh Cust Info for Map
Function NC0C101()
  NLXREC.NLXCPROC = "NC0C101";
  ;
  NC0CW01.KUCCOID = NC0CM100.KUCCOID;
  converseLib.clearScreen();
  set NC0CM100 initial;
  NC0CM100.KUCCOID = NC0CW01.KUCCOID;
  ;
  NCWREC.KUCCOID = 0; /* Clear out stored cust id*/
  ;
   /* ***************************/
   /* Load generic header fields*/
   /* ***************************/
  ;
  NC0CM100.XXXPRCNM = "NC0C100";
  NC0CM100.XXXMAPNM = "NI0CM100";
  NC0CM100.XXXRVNBR = "00"; /* revision nbr*/
  NC0CM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* ****************************/
   /* Load customer header fields*/
   /* ****************************/
  ;
  NC0CW01.NC0CWPAG = "N"; /* Init text data displ flag to no*/
  ;
  if (COMMAREA.CAFROMAP == "NI0U"
   && NCWREC.NIQPROID > 0)
    NC0CS-LOAD-PRO-TXT(); /* load the proforma specific lc text*/
  else
    NC0CM100.NC0CM-100-EXPIRY-LIT = " Expiry Days:";
    NC0CM100.NC0CM-100-DUE-DAY-LIT = "Due Days:";
    NC0CM-100-PF3-LIT = "3:NIL Mn";
    if (NC0CM100.KUCCOID == 0) /* If cust is blank*/
      converseLib.validationFailed(182); /* Customer id is required*/
    else /* Else*/
      KUCREC.KUCCOID = NC0CM100.KUCCOID; /* Build key*/
      if (NC0CM100.KUCCOID <= 3) /* Gendral default headings (for all*/
                                   /* cust)*/
        NCWREC.KUCCOID = NC0CM100.KUCCOID;
        NC0CM100.KUCCONM = "GENERAL DEFAULT HEADINGS";
        set NC0CM100.NC0CWEXP skip;
                                   /* Expiry/due days not applicable*/
        set NC0CM100.NC0CWDUE skip;
        if (KUCREC.KUCCOID == 1) /* English heading*/
          NC0CM100.XCTDESC = "ENGLISH";
        else
          if (KUCREC.KUCCOID == 2) /* French heading*/
            NC0CM100.XCTDESC = "FRENCH";
          else /* Spanish heading*/
            NC0CM100.XCTDESC = "SPANISH";
          end
        end
        NC0CSLT();
                                   /* Load text lines into array*/
        if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occured*/
          NC0CW01.NC0CWLCK = "Y"; /* Indicate lock*/
        else /* Else*/
          NC0CW01.NC0CWPAG = "Y"; /* Display text data*/
        end
      else /* ** Specific customer*/
        NC0CSIC(); /* Select unique - kucrec*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If cust found*/
          NCWREC.KUCCOID = KUCREC.KUCCOID; /* Store cust id*/
          NC0CM100.KUCCONM = KUCREC.KUCCONM; /* Cust name to map*/
          if (KUCREC.XCTCD in XCTTBL.XCTCD)
            NC0CM100.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
          end
                                   /* Ctry->map*/
          NC0CSLT();
                                   /* Load text lns into array*/
          if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occured*/
            NC0CW01.NC0CWLCK = "Y"; /* Indicate lock*/
          else /* Else*/
            NC0CW01.NC0CWPAG = "Y"; /* Display text data*/
          end
        else /* Else*/
          if (SQLCA.VAGen_SQLCODE == 100) /* If cust not found*/
            converseLib.validationFailed(13); /* Invalid cust number*/
            set NC0CM100.KUCCOID bold;
          else /* Else*/
            NC0CW01.NC0CWLCK = "Y"; /* Indicate lock*/
          end
        end
      end
    end
  end
  ;
  if (NC0CW01.NC0CWPAG == "N") /* If text data NOT to be displayed*/
    NC0CSPT(); /* Protect map text lines*/
  end
end // end NC0C101

// Load scrn of text from array
Function NC0C102()
  ;
  NLXREC.NLXCPROC = "NC0C102";
  ;
  NC0CW01.NC0CWSCX = 0; /* Init screen index*/
  ;
  while (NC0CW01.NC0CWSCX < 14) /* Do until 14 screen lines are filled*/
    NC0CW01.NC0CWSCX = NC0CW01.NC0CWSCX + 1; /* Accum screen index*/
    NC0CM100.NISPTXRS[NC0CWSCX] = NC0CW01.NISPTXRS[NC0CWARX]; /* Seq*/
    NC0CM100.NISLTXTC[NC0CWSCX] = NC0CW01.NISLTXTC[NC0CWARX]; /* Type*/
    NC0CM100.NIFTXT[NC0CWSCX] = NC0CW01.NIFTXT[NC0CWARX]; /* Text*/
    NC0CW01.NC0CWARX = NC0CW01.NC0CWARX + 1; /* Accum array index*/
  end
  ;
  if (NC0CW01.NC0CWINQ == "Y") /* If inquiry only user*/
    NC0CSPT(); /* Protect text fields*/
  else
    if (NCWREC.NIQPROID > 0)
      set NC0CM100.NISPTXRS[1] cursor;
    end
  end
  ;
   /* set array index to point to topmost record on screen*/
  NC0CW01.NC0CWARX = NC0CW01.NC0CWARX - NC0CW01.NC0CWSCX;
end // end NC0C102

// Edit PFkeys
Function NC0C110()
  ;
  NLXREC.NLXCPROC = "NC0C110";
  ;
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NC0CM100.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = NC0CM100.CATOAP;
    COMMAREA.CAITEM = NC0CM100.CAITEM;
    COMMAREA.CAUSERA = NCWREC.NCWGROUP;
    XPNL002();
    set NC0CM100.CATOAP cursor, bold;
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is pf1)
    XSNLS01(); /* Invoke help*/
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CAUSERA = " ";
      if (COMMAREA.CAFROMAP == "NI0U"
       && NCWREC.NIQPROID > 0)
        COMMAREA.CATOAP = "NI0U"; /* Go to NIL main menu*/
        COMMAREA.CAUSERA = NCWREC.NCWGROUP;
      else
        COMMAREA.CATOAP = "NL0A"; /* Go to NIL main menu*/
      end
      XPNL002();
      return;
    else
      if (converseVar.eventKey is pf4)
        XSPF4(); /* Go to GOAL main menu*/
      else
        if (NC0CW01.NC0CWLCK == "Y"
         && converseVar.eventKey not enter)
          converseLib.validationFailed(206); /* Press enter to retry access of data base*/
          NLXREC.NLXERRF = "Y";
        end
        if (converseVar.eventKey is enter
         || converseVar.eventKey is pf7
         || converseVar.eventKey is pf8
         || converseVar.eventKey is pf12)
           /* next sentence*/
        else
          if (converseVar.eventKey is pa1
           || converseVar.eventKey is pa2
           || converseVar.eventKey is pa3)
            converseLib.clearScreen();
            
            converseLib.validationFailed(36); /* caused loss of keyed data-rekey chgs*/
            NLXREC.NLXERRF = "Y";
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* Invalid function key*/
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    end
  end
end // end NC0C110

// Edit NC0CM100 Fields
Function NC0C120()
  ;
  NLXREC.NLXCPROC = "NC0C120";
  ;
   /* *********************************************************/
   /* Clear any previous error indication on enterable fields*/
   /* *********************************************************/
  ;
  set NC0CM100.NISPTXRS[1] cursor; /* Set cursor on seq#*/
  ;
  if (NC0CM100.KUCCOID >= 4 /* If specific customer*/
   && NCWREC.NIQPROID == 0) /* Not from proforma maintenance*/
    set NC0CM100.NC0CWEXP normal; /* Set expiry days to normal intensity*/
    set NC0CM100.NC0CWDUE normal; /* Set due days to normal intensity*/
  end /* (Fields are n/a for general text)*/
  ;
  NC0CW01.NC0CWW1X = NC0CW01.NC0CWSCX; /* Set to bottom screen line*/
  ;
  while (NC0CW01.NC0CWW1X > 0) /* Do for each text line*/
    set NC0CM100.NISPTXRS[NC0CWW1X] normal; /* Seq#*/
    set NC0CM100.NISLTXTC[NC0CWW1X] normal; /* Type*/
    set NC0CM100.NIFTXT[NC0CWW1X] normal; /* Text*/
    if (NC0CW01.NC0CWINQ == "Y")
      set NC0CM100.NISPTXRS[NC0CWW1X] skip; /* Seq#*/
      set NC0CM100.NISLTXTC[NC0CWW1X] skip; /* Type*/
      if (NC0CM100.NISLTXTC[NC0CWW1X] > " ")
        set NC0CM100.NIFTXT[NC0CWW1X] cursor, normal;
      else
        set NC0CM100.NIFTXT[NC0CWW1X] skip; /* Text*/
      end
    end
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X - 1; /* (NI0SWSCX = bottom line#)*/
  end
  ;
   /* ************************************/
   /* Validate text lines from bottom up*/
   /* ************************************/
  ;
  NC0CW01.NC0CWW1X = NC0CW01.NC0CWSCX; /* Set to bottom screen line*/
  ;
  while (NC0CW01.NC0CWW1X > 0) /* Do for each text line*/
    if (NC0CM100.NISLTXTC[NC0CWW1X] == " " /* If type AND text are blank*/
     && NC0CM100.NIFTXT[NC0CWW1X] == " ") 
                                  /* Next sentence*/
    else /* Else*/
      if (NC0CM100.NISLTXTC[NC0CWW1X] != " ") /* If type is not blank*/
        if (NC0CM100.KUCCOID >= 4 /* If specific customer*/
         && NCWREC.NIQPROID == 0)
          NC0CSES(); /* Edit specific cust type/text*/
        else
          if (NCWREC.NIQPROID == 0)
            NC0CSEG(); /* Edit general cust type/text*/
          end
        end
      end
      if (NC0CM100.NISPTXRS[NC0CWW1X] == 0) /* If seq# is not specifed*/
        NLXREC.NLXERRF = "Y"; /* Indicate error*/
        converseLib.validationFailed(221); /* Enter seq where text to be placed*/
        set NC0CM100.NISPTXRS[NC0CWW1X] cursor, bold;
      else /* Seq# IS specified*/
        NC0CSED(); /* Check for dup seq #*/
      end
    end
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X - 1;
  end
end // end NC0C120

// Determine next action
Function NC0C130()
  ;
  NLXREC.NLXCPROC = "NC0C130";
  ;
  if (converseVar.eventKey is pf8) /* *Page Forward**/
     /* Calculate difference between current rec and last rec*/
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWACT - NC0CW01.NC0CWARX;
    if (NC0CW01.NC0CWW1X >= 14) /* If at least 1 page to go*/
      NC0CW01.NC0CWPAG = "Y"; /* Load page of text array*/
      NC0CSMT(); /* Move map text to array*/
      NC0CW01.NC0CWARX = NC0CW01.NC0CWARX + 14; /* Point to next page*/
    else
      converseLib.validationFailed(30);
                                   /* Bottom of file--no scrolling possible*/
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf7) /* *Page Back**/
    if (NC0CW01.NC0CWARX > 1) /* If not at top of array*/
      NC0CW01.NC0CWPAG = "Y"; /* Load page of text array*/
      NC0CSMT(); /* Move map text to array*/
      NC0CW01.NC0CWARX = NC0CW01.NC0CWARX - 14; /* Point to prev page*/
    else
      converseLib.validationFailed(29); /* Top of file--no scrolling possible*/
    end
    return;
  end
  ;
  if (NC0CW01.NC0CWINQ == "Y" /* If inquiry only*/
   && NCWREC.NIQPROID == 0)   /* and not proforma maintenance*/
    converseLib.validationFailed(191); /* User id set up for inquiry only*/
    return; /* Get out*/
  end
  ;
  if (converseVar.eventKey not enter /* *Invalid PF key**/
   && converseVar.eventKey not pf12)
    converseLib.validationFailed(2); /* Invalid PA/PF key for this appl*/
    return;
  end
  ;
   /* ************************/
      /* R e s e q u e n c e*/
   /* ************************/
  ;
  NC0CSMT(); /* Move map text to array*/
  NC0CSST(); /* Sort text array*/
  NC0CSRT(); /* Re-number text array*/
  NC0CSBL(); /* Determine # of blank lines*/
  ;
  NC0CW01.NC0CWPAG = "Y"; /* Load page of text array*/
  NC0CW01.NC0CWARX = 1; /* Redisplay screen at top of array*/
  ;
   /* ******************************************/
      /* Update Letter of Credit Proforma Text*/
   /* ******************************************/
  ;
  if (converseVar.eventKey is enter) /* *Update**/
    ;
    NC0CSDT(); /* Delete all text for customer*/
    if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
      return; /* Get out*/
    end
    ;
    if (NCWREC.NIQPROID == 0)
      NC0CSAT(); /* Add due and expire  for customer*/
      if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* reset data base*/
        return; /* Get out*/
      end
    end
    NC0CS-ADD-LC-TEXT(); /* text from array for customer*/
    if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* reset data base*/
      return; /* Get out*/
    end
    ;
    converseLib.validationFailed(229); /* Proforma text has been updated*/
  end
   /* *************************************************************/
end // end NC0C130

// insert proforma lc text
Function NC0CS-ADD-LC-TEXT()
  NLXREC.NLXCPROC = "NC0CS-ADD-LC-TEXT";
   /* *** Prepare for possible abend ****/
  TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
  TA1REC.TA1LOCAT[3] = "IO5820 "; /* io module*/
  TA1REC.TA1DBASE = "DNILO"; /* database*/
  TA1REC.TA1TBLVU = "VPRTXT01"; /* table view*/
  ;
   /* *** Format ZZ Audit Fields ****/
  VPRTXT01.ZZZSDT = XX0XW01.XX0XWDAT; /* ZZ Status date*/
  VPRTXT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ZZ Change date*/
  VPRTXT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ZZ Change time*/
  ;
   /* ***   E n t e r e d   T e x t   L i n e s  ****/
  NC0CW01.NC0CWW1X = 1;
  ;
  while (NC0CW01.NC0CWW1X <= NC0CW01.NC0CWSCT) /* For each text line*/
    VPRTXT01.NISPTXRS = NC0CW01.NISPTXRS[NC0CWW1X]; /* Seq#*/
    VPRTXT01.NISLTXTC = NC0CW01.NISLTXTC[NC0CWW1X]; /* Type*/
    VPRTXT01.NIFTXT = NC0CW01.NIFTXT[NC0CWW1X]; /* Text*/
    ;
    call "IO5820" ("A ", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Insert Proforma Text*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      XPNL005(); /* abend routine*/
      return;
    end
    ;
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X + 1;
  end
end // end NC0CS-ADD-LC-TEXT

// Load proforma specific lc text
Function NC0CS-LOAD-PRO-TXT()
  NLXREC.NLXCPROC = "NC0CS-LOAD-PRO-TXT";
  ;
  set NC0CM100.KUCCOID skip;
  NC0CM-100-EXPIRY-LIT = "Proforma Nbr:";
  NC0CM-100-PF3-LIT = "3:Return";
  NC0CM100.NIQPROID = NCWREC.NIQPROID;
  set NC0CM100.NC0CM-100-DUE-DAY-LIT invisible, skip;
  set NC0CM100.NC0CWEXP invisible, skip;
  set NC0CM100.NC0CWDUE invisible, skip;
  ;
   /* **********************************************************/
   /* Load proforma lc text maintenance generic header fields*/
   /* **********************************************************/
  ;
  ;
   /* ****************************/
   /* Load customer header fields*/
   /* ****************************/
  ;
  NC0CW01.NC0CWPAG = "N"; /* Init text data displ flag to no*/
  ;
  KUCREC.KUCCOID = NC0CM100.KUCCOID; /* Build key*/
  NC0CSIC(); /* Select unique - kucrec*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If cust found*/
    NCWREC.KUCCOID = KUCREC.KUCCOID; /* Store cust id*/
    NC0CM100.KUCCONM = KUCREC.KUCCONM; /* Cust name to map*/
    if (KUCREC.XCTCD in XCTTBL.XCTCD)
      NC0CM100.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    NC0CS-SEL-PRO-LC(); /* load proforma specific text into*/
                                   /* array*/
    if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occured*/
      NC0CW01.NC0CWLCK = "Y"; /* Indicate lock*/
    else /* Else*/
      NC0CW01.NC0CWPAG = "Y"; /* Display text data*/
    end
  else /* Else*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If cust not found*/
      converseLib.validationFailed(13); /* Invalid cust number*/
      set NC0CM100.KUCCOID bold;
    else /* Else*/
      NC0CW01.NC0CWLCK = "Y"; /* Indicate lock*/
    end
  end
  ;
end // end NC0CS-LOAD-PRO-TXT

// select and load pro lc to arr.
Function NC0CS-SEL-PRO-LC()
  NLXREC.NLXCPROC = "NC0CSLOAD-PRO-LC";
  ;
  NC0CW01.NC0CWW1X = 0; /* Init work index*/
  while (NC0CW01.NC0CWW1X < 98) /* For each array item*/
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X + 1;
    NC0CW01.NISPTXRS[NC0CWW1X] = 0; /* Zero out sequence#*/
    NC0CW01.NISLTXTC[NC0CWW1X] = " "; /* Blank out type*/
    NC0CW01.NIFTXT[NC0CWW1X] = " "; /* Blank out text*/
  end
  NC0CW01.NC0CWARX = 1; /* Initialize array index*/
  NC0CW01.NC0CWACT = 0; /* Initialize array count*/
  ;
  NC0CW01.NC0CWNM9 = NCWREC.KUCCOID; /* Load cust id in case of abend*/
  TA1REC.TA1TBLKE = NC0CW01.NC0CWNM9;
  ;
   /* *****************************/
     /* Open Proforma Text cursor*/
   /* *****************************/
  ;
  set VPRTXT01 empty;
  VPRTXT01.KUCCOID = NCWREC.KUCCOID; /* Cust id (build key)*/
  VPRTXT01.NIQPROID = NCWREC.NIQPROID; /* Prof id*/
  VPRTXT01.NISPTXTC = "L"; /* Prof txt typ*/
  ;
  call "IO5820" ("S1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Select l.o.c. text*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* If hard error*/
    TA1REC.TA1LOCAT[2] = "S1     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO "; /* Database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* Table view*/
    XPNL005(); /* Perform abend routine*/
    return;
  end
  ;
   /* **************************************/
     /* Read through Proforma Text records*/
   /* **************************************/
  ;
  NLXREC.NLXEOFF = "N"; /* Init end of file flag*/
  ;
  while (NLXREC.NLXEOFF == "N") /* While more l.o.c. text recs*/
    call "IO5820" ("N1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Fetch l.o.c. text rec*/
    if (SQLCA.VAGen_SQLCODE != 0)
      NLXREC.NLXEOFF = "Y"; /* End of file - get out of loop*/
    end
    ;
    if (NLXREC.NLXEOFF == "N") /* if not end of file*/
      if (VPRTXT01.NISPTXRS == 0) /* if expiry/due days amt rec*/
        NC0CW01.NC0CWC72 = VPRTXT01.NIFTXT; /* Move to w/s*/
        if (VPRTXT01.NISLTXTC == "E") /* If expiry days amt*/
          NC0CM100.NC0CWEXP = NC0CW01.NC0CWNM3; /* -->Map exp days*/
        else /* Else (due days amt)*/
          NC0CM100.NC0CWDUE = NC0CW01.NC0CWNM3; /* -->Map due days*/
        end
      else
        NC0CW01.NC0CWACT = NC0CW01.NC0CWACT + 1; /* Increment l.o.c txt cnt*/
        /* *** Format array row ****/
        NC0CW01.NISPTXRS[NC0CWACT] = VPRTXT01.NISPTXRS;
                                                            /* Txt rec seq#*/
        NC0CW01.NISLTXTC[NC0CWACT] = VPRTXT01.NISLTXTC;
                                                            /* LOCr txt ind*/
        NC0CW01.NIFTXT[NC0CWACT] = VPRTXT01.NIFTXT; /* Invoice text*/
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If end of file*/
    call "IO5820" ("C1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
    if (NC0CW01.NC0CWACT == 0) /* If returned set is empty*/
      converseLib.validationFailed(216); /* No l.o.c. text found for cust*/
    end
    NC0CW01.NC0CWSCT = NC0CW01.NC0CWACT; /* Array count-->Sort count*/
    if (NC0CW01.NC0CWINQ == "N") /* If not an inquiry user*/
      NC0CSBL(); /* Determine # of blank lines*/
    end
    return;
  end
  ;
  TA1REC.TA1LOCAT[2] = "N1     "; /* Database action*/
  TA1REC.TA1LOCAT[3] = "IO5820 "; /* IO module*/
  TA1REC.TA1DBASE = "DNILO"; /* Database*/
  TA1REC.TA1TBLVU = "VPRTXT01"; /* Table view*/
  XPNL005(); /* Abend routine for hard error*/
end // end NC0CS-SEL-PRO-LC

// Add Text from Array for Cust
Function NC0CSAT()
  NLXREC.NLXCPROC = "NC0CSAT";
  ;
   /* *** Prepare for possible abend ****/
  TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
  TA1REC.TA1LOCAT[3] = "IO5820 "; /* io module*/
  TA1REC.TA1DBASE = "DNILO"; /* database*/
  TA1REC.TA1TBLVU = "VPRTXT01"; /* table view*/
  ;
   /* *** Format ZZ Audit Fields ****/
  VPRTXT01.ZZZSDT = XX0XW01.XX0XWDAT; /* ZZ Status date*/
  VPRTXT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ZZ Change date*/
  VPRTXT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ZZ Change time*/
  ;
   /* ***   D u e   D a y s   ****/
  if (NC0CM100.NC0CWDUE > 0) /* If due days indicated on screen*/
    VPRTXT01.NISPTXRS = 0; /* Sequence#*/
    VPRTXT01.NISLTXTC = "D"; /* Due days*/
    NC0CW01.NC0CWNM3 = NC0CM100.NC0CWDUE;
    VPRTXT01.NIFTXT = NC0CW01.NC0CWC72; /* Text (#days)*/
    ;
    call "IO5820" ("A ", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Insert Proforma Text*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      XPNL005(); /* abend routine*/
      return;
    end
  end
  ;
   /* ***   E x p i r y   D a y s   ****/
  if (NC0CM100.NC0CWEXP > 0) /* If expiry days indicated on screen*/
    VPRTXT01.NISPTXRS = 0; /* Sequence#*/
    VPRTXT01.NISLTXTC = "E"; /* Expiry days*/
    NC0CW01.NC0CWNM3 = NC0CM100.NC0CWEXP;
    VPRTXT01.NIFTXT = NC0CW01.NC0CWC72; /* Text (#days)*/
    ;
    call "IO5820" ("A ", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Insert Proforma Text*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      XPNL005(); /* abend routine*/
      return;
    end
  end
end // end NC0CSAT

// Determine # of Blank Lines
Function NC0CSBL()
  NLXREC.NLXCPROC = "NC0CSBL";
  ;
  if (NC0CW01.NC0CWSCT == 98) /* If max text lines already exist*/
    converseLib.validationFailed(217); /* Max amt of text lines; no adding*/
    return;
  end
  ;
  NC0CW01.NC0CWW1X = 0; /* Init work idx*/
  NC0CW01.NC0CWEOL = "N"; /* Init end of loop flag*/
  ;
  while (NC0CW01.NC0CWEOL == "N") /* Do until end of array*/
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X + 14; /* Incr idx a pg of lns*/
    if (NC0CW01.NC0CWSCT < NC0CW01.NC0CWW1X) /* If #lines<page n*/
      NC0CW01.NC0CWACT = NC0CW01.NC0CWW1X; /* Add blank lines*/
                                                /* to make full page*/
      NC0CW01.NC0CWEOL = "Y"; /* Force end of loop*/
    end
  end
end // end NC0CSBL

// Delete All Text for Customer
Function NC0CSDT()
  NLXREC.NLXCPROC = "NC0CSDT";
  ;
  VPRTXT01.KUCCOID = NC0CM100.KUCCOID; /* Current customer*/
  VPRTXT01.NIQPROID = NCWREC.NIQPROID;
  VPRTXT01.NISPTXTC = "L"; /* Text type indicator (L=LOC)*/
  VPRTXT01.NISPTXRS = -1; /* Sequence# (all)*/
  VPRTXT01.NISLTXTC = "*"; /* Locr txt ind (all)*/
  ;
  call "IO5820" ("D ", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Delete Proforma Text*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0CSDT

// Edit for Duplicate Sequence No
Function NC0CSED()
  NLXREC.NLXCPROC = "NC0CSED";
  ;
   /* Check non-displayed lines BEFORE those which are displayed*/
  NC0CW01.NC0CWW2X = 1; /* Init work index*/
  while (NC0CW01.NC0CWW2X < NC0CW01.NC0CWARX)
    if (NC0CW01.NISPTXRS[NC0CWW2X] == NC0CM100.NISPTXRS[NC0CWW1X])
      NLXREC.NLXERRF = "Y"; /* Indicate error*/
      converseLib.validationFailed(222); /* Seq number is not unique*/
      set NC0CM100.NISPTXRS[NC0CWW1X] cursor, bold;
      return; /* Get out - duplicate found*/
    end
    NC0CW01.NC0CWW2X = NC0CW01.NC0CWW2X + 1;
  end
  ;
   /* Check non-displayed lines AFTER those which are displayed*/
  NC0CW01.NC0CWW2X = NC0CW01.NC0CWW2X + 14;
  while (NC0CW01.NC0CWW2X <= NC0CW01.NC0CWACT)
    if (NC0CW01.NISPTXRS[NC0CWW2X] == NC0CM100.NISPTXRS[NC0CWW1X])
      NLXREC.NLXERRF = "Y"; /* Indicate error*/
      converseLib.validationFailed(222); /* Seq number is not unique*/
      set NC0CM100.NISPTXRS[NC0CWW1X] cursor, bold;
      return; /* Get out - duplicate found*/
    end
    NC0CW01.NC0CWW2X = NC0CW01.NC0CWW2X + 1;
  end
  ;
   /* Check lines on map itself (other than line being checked)*/
  NC0CW01.NC0CWW2X = 1;
  while (NC0CW01.NC0CWW2X <= NC0CW01.NC0CWSCX)
    if (NC0CM100.NISPTXRS[NC0CWW2X] == NC0CM100.NISPTXRS[NC0CWW1X]
     && NC0CW01.NC0CWW2X != NC0CW01.NC0CWW1X)
      NLXREC.NLXERRF = "Y"; /* Indicate error*/
      converseLib.validationFailed(222); /* Seq number is not unique*/
      set NC0CM100.NISPTXRS[NC0CWW1X] cursor, bold;
      return; /* Get out - duplicate found*/
    end
    NC0CW01.NC0CWW2X = NC0CW01.NC0CWW2X + 1;
  end
end // end NC0CSED

// Edit General Cust Type/Text
Function NC0CSEG()
  NLXREC.NLXCPROC = "NC0CSEG";
  ;
  if (NC0CM100.NISLTXTC[NC0CWW1X] == "D" /* If type is due text*/
   || NC0CM100.NISLTXTC[NC0CWW1X] == "E") /* or expiry text*/
    if (NC0CM100.NIFTXT[NC0CWW1X] == " ") /* & text is blank...*/
      NLXREC.NLXERRF = "Y"; /* Indicate error*/
      converseLib.validationFailed(226); /* Text must NOT be blank w/type*/
      set NC0CM100.NIFTXT[NC0CWW1X] cursor, bold;
    end
    return;
  end
  ;
  if (NC0CM100.NISLTXTC[NC0CWW1X] == "B") /* If type is blank line*/
    if (NC0CM100.NIFTXT[NC0CWW1X] != " ") /* & text is NOT blank...*/
      NLXREC.NLXERRF = "Y"; /* Indicate error*/
      converseLib.validationFailed(227); /* Text MUST be blank w/type*/
      set NC0CM100.NIFTXT[NC0CWW1X] cursor, bold;
    end
    return;
  end
  ;
  NLXREC.NLXERRF = "Y"; /* Indicate error*/
  converseLib.validationFailed(228); /* Text type must be blank,'b','d','e'*/
  set NC0CM100.NISLTXTC[NC0CWW1X] cursor, bold;
end // end NC0CSEG

// Edit Specific Cust Type/Text
Function NC0CSES()
  NLXREC.NLXCPROC = "NC0CSES";
  ;
  if (NC0CM100.NISLTXTC[NC0CWW1X] == "I" /* If type is inco*/
   || NC0CM100.NISLTXTC[NC0CWW1X] == "S") /* If type is inco*/
    if (NC0CM100.NIFTXT[NC0CWW1X] == " ") /* & text is blank...*/
      NLXREC.NLXERRF = "Y"; /* Indicate error*/
      converseLib.validationFailed(226); /* Text must NOT be blank w/type i*/
      set NC0CM100.NIFTXT[NC0CWW1X] cursor, bold;
    end
    return;
  end
  ;
  if (NC0CM100.NISLTXTC[NC0CWW1X] == "B") /* If type is blank line*/
    if (NC0CM100.NIFTXT[NC0CWW1X] != " ") /* & text is NOT blank...*/
      NLXREC.NLXERRF = "Y"; /* Indicate error*/
      converseLib.validationFailed(227); /* Text MUST be blank w/type b*/
      set NC0CM100.NIFTXT[NC0CWW1X] cursor, bold;
    end
    return;
  end
  ;
  NLXREC.NLXERRF = "Y"; /* Indicate error*/
  converseLib.validationFailed(218); /* Text type must be blank,'b' or 'i'*/
  set NC0CM100.NISLTXTC[NC0CWW1X] cursor, bold;
end // end NC0CSES

// Inquire KUCREC
Function NC0CSIC()
  ;
  NLXREC.NLXCPROC = "NC0CSIC";
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NC0CSIC

// Load Text Data
Function NC0CSLT()
  ;
  NLXREC.NLXCPROC = "NC0CSLT";
  ;
  NC0CW01.NC0CWW1X = 0; /* Init work index*/
  while (NC0CW01.NC0CWW1X < 98) /* For each array item*/
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X + 1;
    NC0CW01.NISPTXRS[NC0CWW1X] = 0; /* Zero out sequence#*/
    NC0CW01.NISLTXTC[NC0CWW1X] = " "; /* Blank out type*/
    NC0CW01.NIFTXT[NC0CWW1X] = " "; /* Blank out text*/
  end
  NC0CW01.NC0CWARX = 1; /* Initialize array index*/
  NC0CW01.NC0CWACT = 0; /* Initialize array count*/
  ;
  NC0CW01.NC0CWNM9 = NCWREC.KUCCOID; /* Load cust id in case of abend*/
  TA1REC.TA1TBLKE = NC0CW01.NC0CWNM9;
  ;
   /* *****************************/
     /* Open Proforma Text cursor*/
   /* *****************************/
  ;
  set VPRTXT01 empty;
  VPRTXT01.KUCCOID = NCWREC.KUCCOID; /* Cust id (build key)*/
  VPRTXT01.NIQPROID = 0; /* Prof id*/
  VPRTXT01.NISPTXTC = "L"; /* Prof txt typ*/
  ;
  call "IO5820" ("S1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Select l.o.c. text*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* If hard error*/
    TA1REC.TA1LOCAT[2] = "S1     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO "; /* Database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* Table view*/
    XPNL005(); /* Perform abend routine*/
    return;
  end
  ;
   /* **************************************/
     /* Read through Proforma Text records*/
   /* **************************************/
  ;
  NLXREC.NLXEOFF = "N"; /* Init end of file flag*/
  ;
  while (NLXREC.NLXEOFF == "N") /* While more l.o.c. text recs*/
    call "IO5820" ("N1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Fetch l.o.c. text rec*/
    if (SQLCA.VAGen_SQLCODE != 0)
      NLXREC.NLXEOFF = "Y"; /* End of file - get out of loop*/
    end
    ;
    if (NLXREC.NLXEOFF == "N") /* if not end of file*/
      if (VPRTXT01.NISPTXRS == 0) /* if expiry/due days amt rec*/
        NC0CW01.NC0CWC72 = VPRTXT01.NIFTXT; /* Move to w/s*/
        if (VPRTXT01.NISLTXTC == "E") /* If expiry days amt*/
          NC0CM100.NC0CWEXP = NC0CW01.NC0CWNM3; /* -->Map exp days*/
        else /* Else (due days amt)*/
          NC0CM100.NC0CWDUE = NC0CW01.NC0CWNM3; /* -->Map due days*/
        end
      else
        NC0CW01.NC0CWACT = NC0CW01.NC0CWACT + 1; /* Increment l.o.c txt cnt*/
        /* *** Format array row ****/
        NC0CW01.NISPTXRS[NC0CWACT] = VPRTXT01.NISPTXRS;
                                                            /* Txt rec seq#*/
        NC0CW01.NISLTXTC[NC0CWACT] = VPRTXT01.NISLTXTC;
                                                            /* LOCr txt ind*/
        NC0CW01.NIFTXT[NC0CWACT] = VPRTXT01.NIFTXT; /* Invoice text*/
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If end of file*/
    call "IO5820" ("C1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
    if (NC0CW01.NC0CWACT == 0) /* If returned set is empty*/
      converseLib.validationFailed(216); /* No l.o.c. text found for cust*/
    end
    NC0CW01.NC0CWSCT = NC0CW01.NC0CWACT; /* Array count-->Sort count*/
    if (NC0CW01.NC0CWINQ == "N") /* If not an inquiry user*/
      NC0CSBL(); /* Determine # of blank lines*/
    end
    return;
  end
  ;
  TA1REC.TA1LOCAT[2] = "N1     "; /* Database action*/
  TA1REC.TA1LOCAT[3] = "IO5820 "; /* IO module*/
  TA1REC.TA1DBASE = "DNILO"; /* Database*/
  TA1REC.TA1TBLVU = "VPRTXT01"; /* Table view*/
  XPNL005(); /* Abend routine for hard error*/
end // end NC0CSLT

// Move Map Text to Array
Function NC0CSMT()
  NLXREC.NLXCPROC = "NC0CSMT";
  ;
  NC0CW01.NC0CWW1X = 1; /* Init work index 1*/
  NC0CW01.NC0CWW2X = NC0CW01.NC0CWARX; /* Init work index 2*/
  while (NC0CW01.NC0CWW1X < 15) /* Move ea map line back to array*/
    NC0CW01.NISPTXRS[NC0CWW2X] = NC0CM100.NISPTXRS[NC0CWW1X];
    NC0CW01.NISLTXTC[NC0CWW2X] = NC0CM100.NISLTXTC[NC0CWW1X];
    NC0CW01.NIFTXT[NC0CWW2X] = NC0CM100.NIFTXT[NC0CWW1X];
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X + 1; /* Accum indeces*/
    NC0CW01.NC0CWW2X = NC0CW01.NC0CWW2X + 1;
  end
end // end NC0CSMT

// Protect Map Text Fields
Function NC0CSPT()
  NLXREC.NLXCPROC = "NC0CSPT";
  ;
  NC0CW01.NC0CWW1X = 0; /* Init work index*/
  ;
  if (NCWREC.NIQPROID == 0)
    set NC0CM100.NC0CWEXP skip; /* Protect expiry days*/
    set NC0CM100.NC0CWDUE skip; /* Protect due days*/
  else
    set NC0CM100.NC0CWEXP invisible, skip; /* Protect expiry days*/
    set NC0CM100.NC0CWDUE invisible, skip; /* Protect due days*/
  end
  ;
  while (NC0CW01.NC0CWW1X < 14) /* For each text line, protect:*/
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X + 1;
    set NC0CM100.NISPTXRS[NC0CWW1X] skip; /* Sequence number*/
    set NC0CM100.NISLTXTC[NC0CWW1X] skip; /* Type*/
    if (NCWREC.NIQPROID == 0)
      set NC0CM100.NIFTXT[NC0CWW1X] skip; /* Text*/
    else
      if (NC0CM100.NISLTXTC[NC0CWW1X] == " ") /* if spaces protect*/
        set NC0CM100.NIFTXT[NC0CWW1X] skip; /* Text*/
      else
        set NC0CM100.NIFTXT[NC0CWW1X] normal; /* Text*/
      end
    end
  end
  NC0CW01.NC0CWW1X = 0; /* Init work index*/
  set NC0CM100.KUCCOID cursor; /* Set cursor on cust id*/
  ;
   /* if proforma lc term maintenance set cursor on changable line*/
  ;
  if (NCWREC.NIQPROID > 0)
    while (NC0CW01.NC0CWW1X < 14) /* For each text line, protect:*/
      NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X + 1;
      if (NC0CM100.NISLTXTC[NC0CWW1X] > " ")
        set NC0CM100.NIFTXT[NC0CWW1X] cursor; /* Text*/
        NC0CW01.NC0CWW1X = 15;
      end
      if (NC0CW01.NC0CWW1X == 14)
        set NC0CM100.CATOAP cursor;
      end
    end
  end
  ;
end // end NC0CSPT

// Renumber Text Array
Function NC0CSRT()
  NLXREC.NLXCPROC = "NC0CSRT";
  ;
   /* ********* Clear out array ************/
  NC0CW01.NC0CWW1X = 0; /* Init work index*/
  while (NC0CW01.NC0CWW1X < 98) /* For each array item*/
    NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X + 1;
    NC0CW01.NISPTXRS[NC0CWW1X] = 0; /* Zero out sequence#*/
    NC0CW01.NISLTXTC[NC0CWW1X] = " "; /* Blank out type*/
    NC0CW01.NIFTXT[NC0CWW1X] = " "; /* Blank out text*/
  end
  ;
  NC0CW01.NC0CWARX = 0; /* Init array index*/
  NC0CW01.NC0CWNSQ = 0; /* Init new sequence#*/
  ;
  while (NC0CW01.NC0CWARX < NC0CW01.NC0CWSCT) /* For each sorted rec*/
    NC0CW01.NC0CWARX = NC0CW01.NC0CWARX + 1; /* Accum array index*/
    NC0CW01.NC0CWNSQ = NC0CW01.NC0CWNSQ + 10; /* Accum new sequence#*/
    NC0CW01.NISPTXRS[NC0CWARX] = NC0CW01.NC0CWNSQ;
                                   /* new seq->array*/
    NC0CW01.NISLTXTC[NC0CWARX] = NC0CW01.NC0CWSTY[NC0CWARX];
                                   /* typ-> "*/
    NC0CW01.NIFTXT[NC0CWARX] = NC0CW01.NC0CWSTX[NC0CWARX];
                                   /* txt-> "*/
  end
end // end NC0CSRT

// Security Level 1 - NC0C
Function NC0CSS1()
   /* ****** this sets security for fields in group1*/
  ;
  NLXREC.NLXCPROC = "NC0CSS1";
  ;
   /* ***************************************************/
   /* Determine if user is 'Inquiry only'...*/
   /* ***************************************************/
  ;
  NC0CW01.NC0CWINQ = "N"; /* Prepare for security check*/
  if (COMMAREA.CAADDFL == "N" /* If user can't add*/
   || COMMAREA.CACHGFL == "N" /* or user can't change*/
   || COMMAREA.CADELFL == "N") /* or user can't delete*/
    NC0CW01.NC0CWINQ = "Y"; /* User is inquiry only*/
  end
end // end NC0CSS1

// Sort Text Array
Function NC0CSST()
  NLXREC.NLXCPROC = "NC0CSST";
  ;
  NC0CW01.NC0CWSCT = 0; /* Init sort count*/
  while (NC0CW01.NC0CWSCT < 98) /* For each sort array item*/
    NC0CW01.NC0CWSCT = NC0CW01.NC0CWSCT + 1;
    NC0CW01.NC0CWSSQ[NC0CWSCT] = 0; /* Zero out sequence#*/
    NC0CW01.NC0CWSTY[NC0CWSCT] = " "; /* Blank out type*/
    NC0CW01.NC0CWSTX[NC0CWSCT] = " "; /* Blank out text*/
  end
  ;
  NC0CW01.NC0CWARX = 0; /* Initialize array index*/
  NC0CW01.NC0CWSCT = 0; /* Initialize sort count*/
  ;
  while (NC0CW01.NC0CWARX < NC0CW01.NC0CWACT) /* For each text array rec*/
    NC0CW01.NC0CWARX = NC0CW01.NC0CWARX + 1;
    if (NC0CW01.NIFTXT[NC0CWARX] != " " /* If type or text present*/
     || NC0CW01.NISLTXTC[NC0CWARX] != " ")
                                   /* (if not, pass over line)*/
      NC0CW01.NC0CWCMP = NC0CW01.NC0CWTAR[NC0CWARX];
                                   /* ->Compare area*/
      NC0CW01.NC0CWW1X = 1; /* Init work(sort) index*/
      while (NC0CW01.NC0CWW1X <= NC0CW01.NC0CWSCT) /* For each sorted rec*/
        if (NC0CW01.NC0CWCSQ < NC0CWSSQ[NC0CWW1X]) /* If cmp seq < sort seq*/
          NC0CW01.NC0CWSAV = NC0CW01.NC0CWCMP;
                                   /* Compare->save area*/
          NC0CWCMP = NC0CW01.NC0CWSAR[NC0CWW1X];
                                   /* Sort->compare area*/
          NC0CWSAR[NC0CWW1X] = NC0CW01.NC0CWSAV; /* Save->sort rec*/
        end
        NC0CW01.NC0CWW1X = NC0CW01.NC0CWW1X + 1; /* Accum sort index*/
      end
      NC0CW01.NC0CWSCT = NC0CW01.NC0CWSCT + 1; /* Accum sort count*/
      NC0CWSAR[NC0CWW1X] = NC0CW01.NC0CWCMP; /* Compare->last sort rec*/
    end
  end
end // end NC0CSST

//*** RECORD=NC0CW01 ****
// This is the main working storage record for NC0C
// ***********************
Record NC0CW01 type basicRecord
  5 NC0CWINQ NC0CWINQ ; 
  5 NC0CWPAG NC0CWPAG ; 
  5 NC0CWLCK NC0CWLCK ; 
  5 NC0CWEOL NC0CWEOL ; 
  5 NC0CWACT NC0CWACT ; 
  5 NC0CWSCT NC0CWSCT ; 
  5 NC0CWARX NC0CWARX ; 
  5 NC0CWSCX NC0CWSCX ; 
  5 NC0CWW1X NC0CWW1X ; 
  5 NC0CWW2X NC0CWW2X ; 
  5 NC0CWNM9 NC0CWNM9 ; 
  5 NC0CWNSQ NC0CWNSQ ; 
  5 KUCCOID KUCCOID ; 
  5 * char(1) ; 
  5 NC0CWC72 NC0CWC72 ; 
    10 NC0CWNM3 NC0CWNM3 ; 
    10 * char(69) ; 
  5 NC0CWCMP NC0CWCMP ; 
    10 NC0CWCSQ NC0CWCSQ ; 
    10 * char(73) ; 
  5 NC0CWSAV NC0CWSAV ; 
  5 * char(1) ; 
  5 NC0CWTAR NC0CWTAR [98] ; 
    10 NISPTXRS NISPTXRS ; 
    10 NISLTXTC NISLTXTC ; 
    10 NIFTXT NIFTXT ; 
  5 * char(1) ; 
  5 NC0CWSAR NC0CWSAR [98] ; 
    10 NC0CWSSQ NC0CWSSQ ; 
    10 NC0CWSTY NC0CWSTY ; 
    10 NC0CWSTX NC0CWSTX ; 
end // end NC0CW01

// Array count
DataItem NC0CWACT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index
DataItem NC0CWARX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Char 72 work field
DataItem NC0CWC72 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Compare area
DataItem NC0CWCMP char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Compare NL_PRO_TXT_REC_SEQ
DataItem NC0CWCSQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of loop (y/n)
DataItem NC0CWEOL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry only user(y/n)
DataItem NC0CWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data base lock (y/n)
DataItem NC0CWLCK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Numeric 3 work field
DataItem NC0CWNM3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric 9 work field
DataItem NC0CWNM9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New NL_PRO_TXT_REC_SEQ
DataItem NC0CWNSQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order array page load (y/n)
DataItem NC0CWPAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Text sort array
DataItem NC0CWSAR char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save area
DataItem NC0CWSAV char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sort count
DataItem NC0CWSCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem NC0CWSCX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sort NL_PRO_TXT_REC_SEQ
DataItem NC0CWSSQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sort nl-ivc-txt
DataItem NC0CWSTX char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sort NL_PRO_LOCR_TXTIND
DataItem NC0CWSTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Text array
DataItem NC0CWTAR char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work index 1
DataItem NC0CWW1X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work index 2
DataItem NC0CWW2X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

