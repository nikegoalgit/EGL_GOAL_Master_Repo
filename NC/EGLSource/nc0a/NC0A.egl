package nc0a;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL001;
import corpcom3.XPNL002;
import corpcom3.XPNL003;
import corpcom3.XPNL005;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom3.XPZIT01;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XOSTBL;
import corpx1.XPTTBL;
import corpx1.XSTTBL;
import corpz3.ZITTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ku.common.KUCREC;
import ku.common.KULREC;
import nc.common.NCALCIID;
import nc.common.NCWREC;
import nl.common.*;
import op.common.OP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VLADDR01;
import vv.common.VLCHDR01;
import vv.common.VLCORD01;
import vv.common.VLCZIT01;
import vv.common.VNLCTL01;
//*** PROGRAM=NC0A ****
// ************************************************************
// 
//               nc0a - Letters of Credit Maintenance
//               ------------------------------------
// 
// General program explanation and notes:
// 
// This program allows the user to perform add, change and
// delete Letters of Credit for International Distributors.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 06-20-89 tgriff Program creation.
// 01-26-90 jjohns Allow multiple L/Cs for an order.
// 03-28-90 jjohns Relate non L/C orders in process 220.
// 04-04-90 jjohns Change GL names to those in GLAREC.
// 08-13-90 jbaker Increase allowable incoterms to 12 from 7.
// 09-12-90 jshann Protected ZITDESC.
// 02-11-91 jshann DB2 CHANGES NO MORE DCUST.VBLGRP01
// 11-09-93 jjudki nov db changes.
// 03-09-94 kshaw  mar db changes.
// 01-29-98 MBURLE Y2KFIX: regenerated for latest
//                         version of XX0XS01.
// *********************
Program NC0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  NC0AW01 NC0AW01; // record
  NC0AW02 NC0AW02; // record
  NC0AW03 NC0AW03; // record
  NC0AW04 NC0AW04; // record
  NCWREC NCWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VLADDR01 VLADDR01; // record
  VLCCOM01 VLCCOM01; // record
  VLCHDR01 VLCHDR01; // record
  VLCORD01 VLCORD01; // record
  VLCZIT01 VLCZIT01; // record
  VNLCTL01 VNLCTL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use ZITTBL {deleteAfterUse = yes}; // table
  use NC0AM.NC0AM100,  // forms
      NC0AM.NC0AM200, 
      NC0AM.NC0AM300,
      NC0AM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NC0A000: NC0A000();
    exit program;
  end // end main
end // end NC0A

// Main flow
Function NC0A000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0A000";
  ;
  NC0A001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NC0A050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NC0A000

// Initialize application
Function NC0A001()
  ;
  NLXREC.NLXCPROC = "NC0A001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
  set NC0AW01 empty; /* clear working storage rec1*/
  NC0AW01.NC0AWADM = "N"; /* set add-mode to 'no'*/
  NC0AW01.NC0AWAPF = "N"; /* set function key during add off*/
  NC0AW01.NC0AWTPM = "N"; /* set Tol% modified during add off*/
  NC0AW01.NC0AWERF = "N"; /* set error warning flag*/
  NC0AW01.NC0AWMGF = "N"; /* set display message flag*/
  NC0AW01.NC0AWLIX = 1; /* set low-index to 1*/
  set SQLCA empty;
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
   /* TEMP001;*/
  ;
  set NLXREC empty; /* clear common working storage*/
  ;
  NC0ASS0(); /* check field level security*/
  ;
   /* ***********************************/
   /* Initialize all potential records.*/
   /* ***********************************/
   /* SET KUAREC EMPTY;*/
  set KUCREC empty;
  set KULREC empty;
  set VLCHDR01 empty;
  set VLCZIT01 empty;
  set VLCORD01 empty;
  set VLCCOM01 empty;
  set VLADDR01 empty;
  set VNLCTL01 empty;
  set OP1REC empty;
   /* ****************************/
   /* Clear Related Orders Array*/
   /* ****************************/
  set NC0AW02 empty;
   /* ****************************/
   /* Clear Inco Terms Array*/
   /* ****************************/
  set NC0AW03 empty;
  ;
  NLXREC.NLXSNAME[1] = "NC0AM100"; /* init screens used in this appl*/
  NLXREC.NLXSNAME[2] = "NC0AM200";
  NLXREC.NLXSNAME[3] = "NC0AM300";
  ;
  NLXREC.NLXCSCRN = "NC0AM100"; /* set first screen to display*/
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/
  ;
   /* The following code is commented out until*/
   /* a way is designed to handle orders that are related*/
   /* to more than one LC. 2-2-90*/
  ;
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    ;
     /* PERFORM XPNL004               ; Validate caitem numeric*/
    ;
     /* IF NLXREC.NLXERRF EQ 'Y'      ; If error in 'item'*/
    NC0AW01.NC0AWORW = 0; /* Clear work area for key*/
     /* ELSE ;*/
       /* MOVE NLXREC.NLXNUM8A TO NC0AW01.NC0AWORW; Load key*/
     /* END ;*/
    ;
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
     /* NC0AS54                       ; Lookup Order #, L/C Header*/
  end
   /* **************************************************/
   /* Was this application entered via a function key?*/
   /* **************************************************/
  if (COMMAREA.CAUSERA != " ") /* Does user area contain data?*/
    NCWREC.NCWGROUP = COMMAREA.CAUSERA; /* Yes, load out*/
    NC0AS56(); /* Lookup L/C Header*/
  end
end // end NC0A001

// decide which map to display
Function NC0A050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0A050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  if (NC0AW01.NC0AWAPF != "Y") /* Function key during 'add'?*/
    NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  else
    NC0AW01.NC0AWAPF = "N";
  end
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  NC0AW01.NC0AWSMS = "N"; /* clear screen modified switch*/
  NC0AW01.NC0AWEXT = 0; /* clear pf key exit warning switch*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen xx0xm100*/
    NC0AW01.NC0AWSMS = "N"; /* Screen modified flag off*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NC0A100();
    end
  else
    NC0AW01.NC0AWSMS = "N"; /* clear screen modified switch*/
    NLXREC.NLXEOSF = "N";
    if (NLXREC.NLXSCRNX == 2) /* if screen xx0xm200*/
      while (NLXREC.NLXEOSF == "N") /* show until user is done*/
        NC0A200();
      end
    else
      NC0AW01.NC0AWSMS = "N"; /* clear screen modified sw*/
      NLXREC.NLXEOSF = "N";
      if (NLXREC.NLXSCRNX == 3) /* if screen xx0xm300*/
        while (NLXREC.NLXEOSF == "N") /* show until user is done*/
          NC0A300();
        end
      else
        TA1REC.TA1MAP = NLXREC.NLXCSCRN;
        TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
        TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
        XPNL005(); /* abend*/
      end
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of nl0%050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/
  ;
end // end NC0A050

// Converse map m100
Function NC0A100()
   /* ************************************************************/
   /* *    process screen nc0am100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nc0a050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0A100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NC0A101(); /* Perform i/o, load map fields*/
    NLXREC.NLXBLDSC = "N";
  end
  ;
    /* This code is temporary until a way is designed to handle*/
    /* orders that are assigned to more than one LC.*/
  set NC0AM100.OP1CUOID skip;
  ;
   /* ***********************************************************/
  converse NC0AM100 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N"; /* Clear any previous error*/
  NC0AW01.NC0AWKCH = "N"; /* Set Key-change switch to edit mode*/
  NC0AW01.NC0AWKMD = "N"; /* init keys modified switch*/
  ;
  NC0A110(); /* validate pfkeys*/
   /* **********************************************************/
   /* If no pf key errors and screen has been changed, edit...*/
   /* **********************************************************/
  if (NLXREC.NLXERRF == "N") /* No PF key error detected*/
     /* AND EZEAID NOT PF5            ; Delete not requested*/
    if (NC0AM100 is modified
     || NC0AW01.NC0AWADM == "Y") /* in add mode*/
      NC0A120(); /* Examine keys or edit*/
    end
  end
   /* **********************************************/
   /* Edits complete, decide what to do next...*/
   /* **********************************************/
  if (NLXREC.NLXERRF == "N") /* No PF key error detected*/
    NC0A130(); /* Determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process nc0a100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to nc0a050.*/
end // end NC0A100

// Build screen
Function NC0A101()
   /* **************************************/
   /* Build screen nc0am100*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A101";
   /* ***************************************/
   /* If this is the first pass, don't load*/
   /* ***************************************/
  if (NC0AM100.NCALCRID == " "
   && NC0AM100.OP1CUOID == 0
   && NC0AM100.KUCCOID == 0)
    set NC0AM100 empty;
    NC0AM100.XXXERRID = "NC0AM";
    NC0AM100.XXXMAPNM = "NC0AM100";
    NC0AM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
    return;
  end
  ;
  set NC0AM100 empty; /* Clear screen*/
  ;
  NC0AM100.XXXERRID = "NC0AM"; /* Now, rebuild it*/
  NC0AM100.XXXMAPNM = "NC0AM100";
  NC0AM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
   /* SET NC0AM100.KUCCOID CURSOR;*/
  ;
  NC0AW01.NC0AWFCT = 0; /* set fetch-count to zero*/
  NC0AW01.NC0AWOCT = 0; /* set order-count to zero*/
  ;
   /* do not allow chg to l/c if allow ivc = 'y'*/
     /* if = 'n' - need to reset from possibl prev l/c*/
  if (NC0AW01.NC0AWINQ != "Y") /* not inq only user*/
    if (VLCHDR01.NCAAIVCF == "Y") /* allow invoicing*/
      NC0ASS1(); /* set all fields to askip*/
    else
      NC0ASS2(); /* set all fields to normal*/
    end
  end
  ;
  if (NLXREC.NLXERRF != "Y")
    /* **************************************************/
     /* The remainder of this module operates under the*/
     /* assumption that valid key selections have been*/
     /* made and verified in nc0a120, nc0as54 or nc0as56*/
    /* **************************************************/
    /* **************************************/
     /* Load all ncarec fields to nc0am100*/
    /* **************************************/
    ;
    if (NC0AW01.NC0AWADM == "N" /* In 'change' mode*/
     && converseVar.eventKey not pf5) /* Delete not requested*/
      VLCZIT01.NCALCIID = VLCHDR01.NCALCIID;
      VLCORD01.NCALCIID = VLCHDR01.NCALCIID;
      VLCCOM01.NCALCIID = VLCHDR01.NCALCIID;
      NC0AM100.NCALCRID = VLCHDR01.NCALCRID;
      NC0AM100.NCAAIVCF = VLCHDR01.NCAAIVCF;
      NC0AM100.NCALCCLF = VLCHDR01.NCALCCLF;
      NC0AM100.XXXUSRID = VLCHDR01.XXXUSRID;
      ;
       /* Format the L/C Received date*/
      ;
      if (VLCHDR01.NCALCRDT != 0)
        NC0AW01.NC0AWRDT = VLCHDR01.NCALCRDT;
        NLXREC.XXXWCYMD = VLCHDR01.NCALCRDT;
        XPNL003(); /* Unpack date routine*/
        NC0AM100.NCALCRDT = NLXREC.XXXFLDT;
        NC0AW01.NC0AWMRD = NLXREC.XXXFLDT; /* Save map format*/
      else
        NC0AW01.NC0AWMRD = " ";
        NC0AW01.NC0AWRDT = 0;
      end
      ;
      NC0AM100.NCALCAMT = VLCHDR01.NCALCAMT;
      NC0AW01.NC0AWPCT = VLCHDR01.NCALTPCT;
      NC0AM100.NCALTPCT = NC0AW01.NC0AWPC2;
      ;
       /* Format the Expiration date*/
      ;
      if (VLCHDR01.NCALCXDT != 0)
        NC0AW01.NC0AWXDT = VLCHDR01.NCALCXDT;
        NLXREC.XXXWCYMD = VLCHDR01.NCALCXDT;
        XPNL003(); /* Unpack date routine*/
        NC0AM100.NCALCXDT = NLXREC.XXXFLDT;
        NC0AW01.NC0AWMXD = NLXREC.XXXFLDT; /* Save map format*/
      else
        NC0AW01.NC0AWMXD = " ";
        NC0AW01.NC0AWXDT = 0;
      end
      ;
      NC0AM100.NCALCXPL = VLCHDR01.NCALCXPL;
      ;
       /* Format the Latest ship date*/
      ;
      if (VLCHDR01.OP1DSADT != 0)
        NC0AW01.NC0AWADT = VLCHDR01.OP1DSADT;
        NLXREC.XXXWCYMD = VLCHDR01.OP1DSADT;
        XPNL003(); /* Unpack date routine*/
        NC0AM100.OP1DSADT = NLXREC.XXXFLDT;
        NC0AW01.NC0AWMAD = NLXREC.XXXFLDT; /* Save map format*/
      else
        NC0AW01.NC0AWMAD = " ";
        NC0AW01.NC0AWADT = 0;
      end
      ;
       /* Format the L/C Revised date*/
      ;
      if (VLCHDR01.NCALCADT != 0)
        NLXREC.XXXWCYMD = VLCHDR01.NCALCADT;
        XPNL003(); /* Unpack date routine*/
        NC0AM100.NCALCADT = NLXREC.XXXFLDT;
      end
      ;
      NC0AM100.XXXUSRID = VLCHDR01.XXXUSRID;
      NC0AM100.NCALCIBK = VLCHDR01.NCALCIBK;
      NC0AM100.NCALCIBL = VLCHDR01.NCALCIBL;
      NC0AM300.NCALCQTY = VLCHDR01.NCALCQTY;
      ;
      NC0AM100.KUCCOID = VLCHDR01.KUCCOID;
      NC0AM100.NCALCRID = VLCHDR01.NCALCRID;
      KUCREC.KUCCOID = VLCHDR01.KUCCOID;
      ;
      NC0AS08(); /* Select unique - kucrec*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        NC0AM100.KUCCONM = KUCREC.KUCCONM; /* Load map field*/
        if (KUCREC.XCTCD in XCTTBL.XCTCD)
          NC0AM100.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
        end
      end
      /* *********************/
       /* Lookup Long Address*/
      /* *********************/
      VLADDR01.NLATYPIN = "L"; /* Build key for Long Address*/
      VLADDR01.NLABSIND = "B";
      VLADDR01.NLAONECH = " ";
      VLADDR01.NLAINTGR = 0;
      VLADDR01.NLASINT1 = VLCORD01.NCALCIID;
      VLADDR01.NLASINT2 = 0;
      VLADDR01.NLAADRID = 0;
      ;
      NC0AS09(); /* Read Long address*/
      ;
      NC0AM100.NLAADDR1 = VLADDR01.XXX-ADDR1; /* Load map fields*/
      NC0AM100.NLAADDR2 = VLADDR01.XXX-ADDR2;
      NC0AM100.NLAADDR3 = VLADDR01.XXX-ADDR3;
      NC0AM100.NLAADDR4 = VLADDR01.XXX-ADDR4;
      NC0AM100.NLAADDR5 = VLADDR01.XXX-ADDR5;
      NC0AM100.NLAADDR6 = VLADDR01.XXX-ADDR6;
      NC0AM100.XSTCD = VLADDR01.XSTCD;
      NC0AM100.XXXZIP = VLADDR01.XXXZIP;
      NC0AM100.XCTCD = VLADDR01.XCTCD;
      ;
      /* **************************************/
       /* Load Related Orders Array*/
      /* **************************************/
      /* *****************************************/
       /* Read Orders Xref by Internal L/C number*/
      /* *****************************************/
      ;
      NC0AS05(); /* Open xref cursor 2*/
      ;
      NC0AW01.NC0AWFCT = 1;
      NC0AW01.NC0AWCOS = "Y"; /* Set 'cursor open' switch*/
      while (NC0AW01.NC0AWFCT < 65
       && NC0AW01.NC0AWCOS == "Y")
        ;
        NC0AS06(); /* Load xref cursor 2*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0
         && NC0AW01.NC0AWCOS == "Y")
          NC0AW02.NC0AWCUO[NC0AWFCT] = VLCORD01.OP1CUOID;
          NC0AW02.NC0AWNOR[NC0AWFCT] = VLCORD01.OP1NORID;
          NC0AW02.NC0AWOCF[NC0AWFCT] = " ";
          NC0AW01.NC0AWMAX = NC0AW01.NC0AWFCT;
          NC0AW01.NC0AWFCT = NC0AW01.NC0AWFCT + 1;
        end
      end
      NC0AM100.OP1CUOID = NC0AW02.NC0AWCUO[NC0AWMAX];
      ;
    else /* In 'add' mode*/
      if (converseVar.eventKey not pf5) /* Delete has not been requested*/
        ;
        NC0AM100.XXXUSRID = COMMAREA.CAUSERID;
        ;
        XX0XS01();
        NC0AW01.NC0AWCDT = XX0XW01.XX0XWDAT;
        NLXREC.XXXWCYMD = XX0XW01.XX0XWDAT;
        XPNL003();
        NC0AM100.NCALCADT = NLXREC.XXXFLDT;
        NC0AM100.NCALCCLF = "N";
        NC0AM100.NCAAIVCF = "N";
        ;
        /* ********************************************/
         /* Lookup Customer name during 'add' (default)*/
        /* ********************************************/
        NC0AM100.KUCCONM = KUCREC.KUCCONM; /* Load map fields*/
        NC0AM100.KUCCOID = KUCREC.KUCCOID;
        if (KUCREC.XCTCD in XCTTBL.XCTCD)
          NC0AM100.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
        end
         /* BILL GROUP TABLE DEINSTALLED 7 FEB 91 USE VCMPNY01*/
             /* MOVE KUCREC.KUCCOID TO KUAREC.KUCCOID*/
             /* MOVE KUCREC.KUCBLID TO KUAREC.KUABLID;*/
        ;
        /* NC0AS10                   ;Select unique - KUAREC*/
        ;
        /* *********************/
         /* Lookup Long Address*/
        /* *********************/
        VLADDR01.NLATYPIN = "C"; /* Build key for Long Address*/
        VLADDR01.NLABSIND = " ";
        VLADDR01.NLAONECH = " ";
        VLADDR01.NLAINTGR = KUCREC.KUCCOID;
        VLADDR01.NLASINT1 = 0;
        VLADDR01.NLASINT2 = 0;
        /* MOVE KUAREC.KUAADRID TO NLAREC.NLAADRID;*/
        VLADDR01.NLAADRID = KUCREC.KUCBLAID;
        ;
        NC0AS09(); /* Read Long address*/
        ;
        NC0AM100.NLAADDR1 = VLADDR01.XXX-ADDR1; /* Load map fields*/
        NC0AM100.NLAADDR2 = VLADDR01.XXX-ADDR2;
        NC0AM100.NLAADDR3 = VLADDR01.XXX-ADDR3;
        NC0AM100.NLAADDR4 = VLADDR01.XXX-ADDR4;
        NC0AM100.NLAADDR5 = VLADDR01.XXX-ADDR5;
        NC0AM100.NLAADDR6 = VLADDR01.XXX-ADDR6;
        NC0AM100.XCTCD = VLADDR01.XCTCD;
      end
    end
  end
end // end NC0A101

// Edit pfkeys
Function NC0A110()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NC0A110";
  ;
  if (NC0AM100.NCAAIVCF is modified
   || NC0AM100.NCALCCLF is modified
   || NC0AM100.NCALCRDT is modified
   || NC0AM100.NCALCAMT is modified
   || NC0AM100.NCALTPCT is modified
   || NC0AM100.NCALCXDT is modified
   || NC0AM100.NCALCXPL is modified
   || NC0AM100.OP1DSADT is modified
   || NC0AM100.NCALCADT is modified
   || NC0AM100.NCALCIBK is modified
   || NC0AM100.NCALCIBL is modified
   || NC0AM100.NLAADDR1 is modified
   || NC0AM100.NLAADDR2 is modified
   || NC0AM100.NLAADDR3 is modified
   || NC0AM100.NLAADDR4 is modified
   || NC0AM100.NLAADDR5 is modified
   || NC0AM100.NLAADDR6 is modified
   || NC0AM100.XCTCD is modified
   || NC0AM100.XSTCD is modified
   || NC0AM100.XXXZIP is modified)
    NC0AW01.NC0AWSMS = "Y";
  end
  ;
   /* **************************************/
   /* Check for exiting without updates...*/
   /* **************************************/
  if (NC0AW01.NC0AWINQ != "Y") /* Check update users only*/
    if (NC0AW01.NC0AWADM == "N") /* If in 'change' mode*/
      if (NC0AW01.NC0AWSMS == "Y" /* Screen has been changed*/
       || converseVar.eventKey is pf5) /* Delete requested*/
        ;
        if (converseVar.eventKey is pf3  /* NIL Menu requested*/
         || converseVar.eventKey is pf4  /* Master Menu requested*/
         || converseVar.eventKey is pf5  /* Delete requested*/
         || converseVar.eventKey is pf13 /* Remaining Balance app requested*/
         || converseVar.eventKey is pf15 /* Covering Statements screen requested*/
         || NC0AM100.CATOAP != " ")     
          NC0AS80(); /* Warn user about loss of updates*/
          if (NC0AW01.NC0AWEXT != 0)
            return;
          end
        end
      end
    else /* In 'add-mode'*/
      if (converseVar.eventKey is pf3  /* NIL Menu requested*/
       || converseVar.eventKey is pf4  /* Master Menu requested*/
       || converseVar.eventKey is pf13 /* Remaining Balance app requested*/
       || converseVar.eventKey is pf15 /* Covering Statements screen requested*/
       || NC0AM100.CATOAP != " ")     
        NC0AS80(); /* Warn user about loss of updates*/
        if (NC0AW01.NC0AWEXT != 0)
          return;
        end
      end
    end
  end
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NC0AM100.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = NC0AM100.CATOAP;
    COMMAREA.CAITEM = NC0AM100.CAITEM;
    COMMAREA.CAUSERA = NCWREC.NCWGROUP;
    XPNL002();
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf5
         && NC0AW01.NC0AWADM == "N")
          if (NC0AW01.NC0AWINQ == "Y") /* inq only user*/
            converseLib.validationFailed(46); /* cannot delete*/
            NLXREC.NLXERRF = "Y";
          end
        else
          if (converseVar.eventKey is pf4)
            if (NLXREC.NLXERRF != "Y")
              COMMAREA.CAUSERA = " ";
              XSPF4();
            end
          else
            if (converseVar.eventKey is pf3)
              if (NLXREC.NLXERRF != "Y")
                COMMAREA.CATOAP = "NL0A";
                COMMAREA.CAUSERA = " ";
                XPNL002();
                return;
              end
            else
              if (converseVar.eventKey is pf13)
                NCWREC.KUCCOID = NC0AM100.KUCCOID;
                NCWREC.NCALCRID = NC0AM100.NCALCRID;
                COMMAREA.CAUSERA = NCWREC.NCWGROUP;
                COMMAREA.CATOAP = "NC0B";
                XPNL002();
                return;
              else
                if (converseVar.eventKey is pf15
                 && NC0AW01.NC0AWADM != "Y")
                  NLXREC.NLXBLDSC = "Y";
                  NLXREC.NLXEOSF = "Y";
                  NLXREC.NLXERRF = "Y";
                  NLXREC.NLXCSCRN = "NC0AM300"; /* Covering stmts*/
                  return;
                else
                  ;
                  COMMAREA.CATOAP = " ";
                  converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                  NLXREC.NLXERRF = "Y";
                end
              end
            end
          end
        end
      end
    end
  end
end // end NC0A110

// Edit nc0am100 fields / i-o
Function NC0A120()
   /* **************************************/
   /* Edit nc0am100 entries and perform i/o*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A120";
  ;
  set NC0AM100.NCALCRID normal;
  set NC0AM100.KUCCOID normal;
  set NC0AM100.OP1CUOID normal;
  ;
  if (NC0AM100.KUCCOID is modified /* Examine key fields*/
   || NC0AM100.NCALCRID is modified
   || NC0AM100.OP1CUOID is modified)
    NC0AW01.NC0AWKMD = "Y"; /* Set key modified on*/
  end
   /* *****************************************/
   /* If the key fields are empty, don't edit*/
   /* *****************************************/
  if (NC0AM100.NCALCRID == " "
   && NC0AM100.OP1CUOID == 0
   && NC0AM100.KUCCOID == 0)
    set NC0AM100.KUCCOID cursor, normal;
    set NC0AM100.NCALCRID normal;
    set NC0AM100.OP1CUOID normal;
    set NC0AM100.NCALCAMT normal;
    set NC0AM100.NCALCRDT normal;
    set NC0AM100.NCALTPCT normal;
    set NC0AM100.NCALCXDT normal;
    set NC0AM100.NCALCIBK normal;
    set NC0AM100.NCALCIBL normal;
    set NC0AM100.NLAADDR1 normal;
    NLXREC.NLXERRF = "Y";
    NC0AW01.NC0AWADM = "N"; /* Clear add-mode switch*/
    NLXREC.NLXBLDSC = "Y";
    return;
  end
  ;
   /* They changed their 'minds'*/
  ;
  if (NC0AW01.NC0AWADM == "Y"
   && NC0AM100.KUCCOID is modified)
    NC0AW01.NC0AWADM = "N";
    set NC0AM100.NCALCRID normal;
    set NC0AM100.NCALCAMT normal;
    set NC0AM100.NCALCRDT normal;
    set NC0AM100.NCALTPCT normal;
    set NC0AM100.NCALCXDT normal;
    set NC0AM100.NCALCIBK normal;
    set NC0AM100.NCALCIBL normal;
    set NC0AM100.NLAADDR1 normal;
  end
   /* *****************************************/
   /* Check for changes in Order Number field*/
   /* *****************************************/
  if (NC0AM100.OP1CUOID is modified) /* Order number was changed this pass*/
    /* NOTE:  OP1CUOID has been made askip for screen 100  (2-2-90)*/
           /* before the converse in process 100*/
           /* until a way is designed to handle orders that*/
           /* are on multiple invoices. At that time the following*/
           /* line of code checking nc0awkmd can be reactivated.*/
     /* OR NC0AW01.NC0AWKMD EQ 'Y';*/
    if (NC0AM100.OP1CUOID != 0) /* To a non-zero value*/
      if (NC0AW01.NC0AWADM == "Y") /* During 'add'*/
        set NC0AM100.OP1CUOID cursor, modified, bold;
        converseLib.validationFailed(91); /* Order number invalid during 'add'*/
        NLXREC.NLXERRF = "Y";
        return;
      else /* Order number given...*/
        set NC0AM100.OP1CUOID normal;
        set NC0AM100.KUCCOID normal;
        set NC0AM100.NCALCRID normal;
        VLCORD01.OP1CUOID = NC0AM100.OP1CUOID; /* Load key*/
        ;
        /* *****************************/
         /* Read Orders Xref by Order #*/
        /* *****************************/
        NC0AW01.NC0AWCOS = "Y"; /* Set cursor open switch on*/
        ;
        NC0AS02(); /* Open Xref cursor 1*/
        ;
        NC0AS03();
                                   /* Load Xref cursor 1 to get internal id*/
        ;
        if (NC0AW01.NC0AWCOS == "Y") /* If cursor still open*/
          NC0AS04(); /* Close cursor*/
          NC0AW01.NC0AWKCH = "Y"; /* Keys have changed*/
          VLCHDR01.KUCCOID = VLCORD01.KUCCOID;
          VLCHDR01.NCALCRID = VLCORD01.NCALCRID;
          NC0AS01(); /* Select unique - ncarec*/
          if (SQLCA.VAGen_SQLCODE != 0)
            TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
            TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
            TA1REC.TA1DBASE = "DNILO"; /* database*/
            TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
            XPNL005(); /* abend routine*/
          end
        else
          set NC0AM100.OP1CUOID cursor, modified, bold;
          converseLib.validationFailed(14); /* Could not find Order number*/
          NLXREC.NLXERRF = "Y";
          return;
        end
      end
    end
  end
  ;
   /* ********************************************/
   /* Check for changes in Customer Number field*/
   /* ********************************************/
  if (NC0AM100.KUCCOID is modified /* Customer number changed this pass*/
   || NC0AW01.NC0AWKMD == "Y")    
    if (NC0AM100.KUCCOID != 0) /* to a non-zero value*/
      if (NC0AW01.NC0AWADM != "Y") /* Not in 'add-mode' yet*/
        if (NC0AM100.NCALCRID == " " /* And L/C id is spaces*/
         && NC0AW01.NC0AWINQ != "Y") /* NOT Inquiry only*/
          ;
          NC0AS53(); /* Lookup customer during 'add'*/
          ;
          return;
        else
          ;
           /* Both L/C and Customer number have been given*/
          ;
          VLCHDR01.KUCCOID = NC0AM100.KUCCOID; /* Build key*/
          VLCHDR01.NCALCRID = NC0AM100.NCALCRID;
          NC0AS01(); /* Select unique - ncarec*/
          if (SQLCA.VAGen_SQLCODE == 0)
            set NC0AM100.KUCCOID normal;
            set NC0AM100.NCALCRID normal;
            set NC0AM100.OP1CUOID normal;
            NC0AW01.NC0AWKCH = "Y"; /* Key changed*/
            return;
          else
            set NC0AM100.NCALCRID cursor, modified, bold;
            converseLib.validationFailed(06); /* Letter of Credit nrf during 'change'*/
            NLXREC.NLXERRF = "Y";
            return;
          end
        end
      else
        if (NC0AM100.KUCCOID is modified /* Cust changed*/
         && NC0AW01.NC0AWINQ != "Y")     /* Not Inquiry only*/
          ;
          NC0AS53(); /* Lookup customer during 'add'*/
          ;
          set NC0AM100.NCALCAMT normal;
          set NC0AM100.NCALCRDT normal;
          set NC0AM100.NCALTPCT normal;
          set NC0AM100.NCALCXDT normal;
          set NC0AM100.NCALCIBK normal;
          set NC0AM100.NCALCIBL normal;
          set NC0AM100.NLAADDR1 normal;
        end
      end
    end
  end
   /* ********************************************/
   /* Check for changes in L/C Number field*/
   /* ********************************************/
  if (NC0AM100.NCALCRID is modified /* If L/C changed this pass*/
   || NC0AW01.NC0AWKMD == "Y")      /* or some other part of key*/
    if (NC0AM100.NCALCRID != " ") /* If L/C not spaces*/
      if (NC0AM100.KUCCOID != 0)
        VLCHDR01.KUCCOID = NC0AM100.KUCCOID;
        VLCHDR01.NCALCRID = NC0AM100.NCALCRID;
        ;
        NC0AS01(); /* Select unique - ncarec*/
        ;
        if (NC0AW01.NC0AWADM == "Y")
          if (SQLCA.VAGen_SQLCODE == 0)
            set NC0AM100.NCALCRID cursor, modified, bold;
            converseLib.validationFailed(56); /* L/C already exists during 'add'*/
            NLXREC.NLXERRF = "Y";
            return;
          end
        else
          ;
           /* Both L/C and Customer number have been given*/
          ;
          if (SQLCA.VAGen_SQLCODE == 0)
            set NC0AM100.NCALCRID normal;
            set NC0AM100.KUCCOID normal;
            set NC0AM100.OP1CUOID normal;
            NC0AW01.NC0AWKCH = "Y"; /* Keys have changed...*/
            KUCREC.KUCCOID = NC0AM100.KUCCOID;
            VLCZIT01.NCALCIID = VLCHDR01.NCALCIID;
            VLCORD01.NCALCIID = VLCHDR01.NCALCIID;
            VLCCOM01.NCALCIID = VLCHDR01.NCALCIID;
            NC0AM100.NCAAIVCF = VLCHDR01.NCAAIVCF;
            set NC0AM100.NCAAIVCF cursor;
            return;
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* L/C Header not found*/
              set NC0AM100.NCALCRID cursor, modified, bold;
              converseLib.validationFailed(06); /* L/C nrf during 'change'*/
              NLXREC.NLXERRF = "Y";
              return;
            end
          end
        end
      else
        set NC0AM100.KUCCOID cursor, modified, bold;
        converseLib.validationFailed(13); /* Blank Customer number invalid*/
        NLXREC.NLXERRF = "Y";
        return;
      end
    else
      if (NC0AM100.OP1CUOID == " ")
        set NC0AM100.NCALCRID cursor, modified, bold;
        converseLib.validationFailed(62); /* Blank L/C invalid*/
        NLXREC.NLXERRF = "Y";
        return;
      end
    end
  end
   /* *********************************************************/
   /* if key values have changed, exit...else...continue edit*/
   /* *********************************************************/
  if (NC0AW01.NC0AWKCH == "Y")
    set NC0AW02 empty;
    set NC0AW03 empty;
    set NC0AW04 empty;
    NC0AW01.NC0AWUCF = "N"; /* Set update flag off*/
    return;
  end
   /* ***********************************************************/
   /* Key values have not changed, edit fields in reverse order*/
   /* ***********************************************************/
  if (NC0AM100.NCALTPCT is modified)
    NC0AW01.NC0AWTPM = "Y";
  end
  ;
   /* ************************************************************/
   /* Has the user requested a pop-up window for country codes?*/
   /* ************************************************************/
  if (NC0AM100.XCTCD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND != "Y")
      XPXCT01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NC0AM100.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
    end
    converseLib.clearScreen();
    
    set NC0AM100.XCTCD cursor;
  end
   /* ************************************/
   /* Valid country code must be present*/
   /* ************************************/
  if (NC0AW01.NC0AWADM == "Y" /* If during add-mode*/
   || NC0AM100.XCTCD != VLADDR01.XCTCD) /* or country code has changed*/
    if (NC0AM100.XCTCD != "?") /* pop-up NOT requested*/
      ;
      if (NC0AM100.XCTCD in XCTTBL.XCTCD) /* Valid selection made?*/
        set NC0AM100.XCTCD normal; /* Yes, clear previous error*/
      else
        set NC0AM100.XCTCD cursor, modified, bold; /* Indicate error*/
        converseLib.validationFailed(57); /* Invalid country code given*/
        NLXREC.NLXERRF = "Y";
      end
    end
  end
   /* ********************************************/
   /* ********************************************/
   /* If Country is USA, state/zip must be valid*/
   /* ********************************************/
  if (NC0AM100.XCTCD == "USA") /* Country is USA*/
    if (NC0AM100.XSTCD != " ") /* State abbr non-blank*/
      if (NC0AM100.XSTCD in XSTTBL.XSTCD)
        set NC0AM100.XSTCD normal;
      else
        set NC0AM100.XSTCD cursor, modified, bold;
        converseLib.validationFailed(101); /* Invalid state abbreviation*/
        NLXREC.NLXERRF = "Y";
      end
    else
      set NC0AM100.XSTCD cursor, modified, bold;
      converseLib.validationFailed(100); /* Required field*/
      NLXREC.NLXERRF = "Y";
    end
    if (NC0AM100.XXXZIP == " ")
      set NC0AM100.XXXZIP cursor, modified, bold;
      converseLib.validationFailed(100); /* Required field*/
      NLXREC.NLXERRF = "Y";
    else
      set NC0AM100.XXXZIP normal;
    end
  end
   /* ****************************/
   /* A Long Address is required*/
   /* ****************************/
  if (NC0AM100.NLAADDR1 != VLADDR01.XXX-ADDR1 /* long address changed*/
   || NC0AM100.NLAADDR2 != VLADDR01.XXX-ADDR2 
   || NC0AM100.NLAADDR3 != VLADDR01.XXX-ADDR3 
   || NC0AM100.NLAADDR4 != VLADDR01.XXX-ADDR4 
   || NC0AM100.NLAADDR5 != VLADDR01.XXX-ADDR5 
   || NC0AM100.NLAADDR6 != VLADDR01.XXX-ADDR6 
   || NC0AM100.XCTCD != VLADDR01.XCTCD        
   || NC0AM100.XSTCD != VLADDR01.XSTCD        
   || NC0AM100.XXXZIP != VLADDR01.XXXZIP      
   || NC0AW01.NC0AWADM == "Y")                /* OR in add mode*/
    NC0AW01.NC0AWSMS = "Y"; /* Set 'screen modified' on*/
    if (NC0AM100.NLAADDR1 == " " /* All of long address is blank*/
     && NC0AM100.NLAADDR2 == " " 
     && NC0AM100.NLAADDR3 == " " 
     && NC0AM100.NLAADDR4 == " " 
     && NC0AM100.NLAADDR5 == " " 
     && NC0AM100.NLAADDR6 == " ")
      set NC0AM100.NLAADDR1 cursor, modified, bold;
      converseLib.validationFailed(100); /* required field*/
      NLXREC.NLXERRF = "Y";
    else /* Values exist*/
      NC0AS41(); /* bottom justify address*/
      set NC0AM100.NLAADDR1 normal;
    end
  end
   /* **********************************/
   /* L/C Issue Bank place is required*/
   /* **********************************/
  if (NC0AM100.NCALCIBL == " ") /* Bank location is blank*/
    if (NC0AW01.NC0AWADM == "Y") /* If adding*/
      set NC0AM100.NCALCIBL cursor, modified, bold;
      converseLib.validationFailed(34); /* entry required during 'add'*/
      NLXREC.NLXERRF = "Y";
    else
      set NC0AM100.NCALCIBL cursor, modified, bold;
      converseLib.validationFailed(78); /* L/C bank location may not be blank*/
      NLXREC.NLXERRF = "Y";
    end
  else
    set NC0AM100.NCALCIBL normal; /* Clear previous error*/
    if (NC0AW01.NC0AWADM == "N")
      if (NC0AM100.NCALCIBL != " "
       && NC0AM100.NCALCIBL != VLCHDR01.NCALCIBL) /* Changed...*/
        NC0AW01.NC0AWSMS = "Y"; /* Set screen modified 'on'*/
      end
    end
  end
   /* *********************************/
   /* L/C Issue Bank name is required*/
   /* *********************************/
  if (NC0AM100.NCALCIBK == " ") /* Bank name is blank*/
    if (NC0AW01.NC0AWADM == "Y") /* If adding*/
      set NC0AM100.NCALCIBK cursor, modified, bold;
      converseLib.validationFailed(34); /* entry required during 'add'*/
      NLXREC.NLXERRF = "Y";
    else
      set NC0AM100.NCALCIBK cursor, modified, bold;
      converseLib.validationFailed(79); /* L/C bank name may not be blank*/
      NLXREC.NLXERRF = "Y";
    end
  else
    set NC0AM100.NCALCIBK normal; /* Clear previous error*/
    if (NC0AW01.NC0AWADM == "N")
      if (NC0AM100.NCALCIBK != " "
       && NC0AM100.NCALCIBK != VLCHDR01.NCALCIBK) /* Changed...*/
        NC0AW01.NC0AWSMS = "Y"; /* Set screen modified 'on'*/
      end
    end
  end
   /* *******************************/
   /* L/C Date revised is auto-fill*/
   /* *******************************/
  XX0XS01(); /* Get system date*/
  ;
  NLXREC.XXXWCYMD = XX0XW01.XX0XWDAT;
  XPNL003();
  NC0AM100.NCALCADT = NLXREC.XXXFLDT;
  NC0AW01.NC0AWCDT = XX0XW01.XX0XWDAT;
   /* *****************************/
   /* L/C Revised by is auto-fill*/
   /* *****************************/
  NC0AM100.XXXUSRID = COMMAREA.CAUSERID;
   /* ******************************/
   /* Edit the Latest Ship date*/
   /* ******************************/
  NC0AW01.NC0AWDER = "N"; /* Set date error flag off*/
  if (NC0AM100.OP1DSADT != NC0AW01.NC0AWMAD) /* If Latest Ship date changed*/
    if (NC0AM100.OP1DSADT != " ") /* to a non-spaces value*/
      NLXREC.NLXVALDT = "Y";
      NLXREC.XXXED8C = NC0AM100.OP1DSADT;
      XPNL001(); /* Perform date edit*/
      if (NLXREC.NLXVALDT == "N")
        set NC0AM100.OP1DSADT cursor, modified, bold;
        converseLib.validationFailed(5); /* invalid date*/
        NLXREC.NLXERRF = "Y";
        NC0AW01.NC0AWDER = "Y"; /* Set date error flag on*/
      else
        NC0AW01.NC0AWSMS = "Y"; /* Set Screen Modified switch*/
        set NC0AM100.OP1DSADT normal;
        NC0AM100.OP1DSADT = NLXREC.XXXFLDT; /* Save new date*/
        NC0AW01.NC0AWADT = NLXREC.XXXWCYMD;
      end
    else
      NC0AW01.NC0AWADT = NC0AM100.OP1DSADT;
      NC0AW01.NC0AWSMS = "Y"; /* Set Screen Modified switch on*/
    end
  end
   /* *******************************************/
   /* Edit the L/C Expiration date during 'add'*/
   /* *******************************************/
  if (NC0AW01.NC0AWADM == "Y") /* If this is an 'add'*/
    if (NC0AM100.NCALCXDT == " ") /* and no date was entered*/
      set NC0AM100.NCALCXDT cursor, modified, bold;
      converseLib.validationFailed(34); /* Field required during 'add'*/
      NLXREC.NLXERRF = "Y";
    else
      set NC0AM100.NCALCXDT normal;
    end
  end
   /* ******************************/
   /* Edit the L/C Expiration date*/
   /* ******************************/
  if (NC0AM100.NCALCXDT != NC0AW01.NC0AWMXD /* Expr date changed*/
   && NC0AM100.NCALCXDT != " ")             /* to a non-spaces value*/
    NLXREC.NLXVALDT = "Y"; /* Prepare/perform date edit*/
    NLXREC.XXXED8C = NC0AM100.NCALCXDT;
    XPNL001(); /* Perform date edit*/
    if (NLXREC.NLXVALDT == "N")
      set NC0AM100.NCALCXDT cursor, modified, bold;
      converseLib.validationFailed(5); /* invalid date*/
      NLXREC.NLXERRF = "Y";
      NC0AW01.NC0AWDER = "Y"; /* Set date error flag on*/
    else
      NC0AW01.NC0AWSMS = "Y"; /* Set Screen Modified switch on*/
      set NC0AM100.NCALCXDT normal; /* Good date given*/
      NC0AM100.NCALCXDT = NLXREC.XXXFLDT; /* Load map field*/
      NC0AW01.NC0AWXDT = NLXREC.XXXWCYMD;
    end
  end
   /* ******************************/
   /* Edit the Tolerance percentage*/
   /* *******************************/
  if (NC0AM100.NCALTPCT == 0  /* If Tol. % is 0*/
   && NC0AW01.NC0AWTPM == "N" /* No change detected*/
   && NC0AW01.NC0AWADM == "Y") /* During 'add'*/
    set NC0AM100.NCALTPCT cursor, bold;
    NC0AM100.VAGen_EZEMSG = "TOLERANCE % MAY BE 0 ONLY IF ENTERED";
    /* MOVE 34 TO EZEMNO;*/
    NLXREC.NLXERRF = "Y";
  else
    set NC0AM100.NCALTPCT normal;
  end
   /* *****************************/
   /* Edit the L/C amount in US $*/
   /* *****************************/
  if (NC0AW01.NC0AWADM == "Y") /* During 'add'*/
    if (NC0AM100.NCALCAMT <= 0) /* No L/C Amount given*/
      set NC0AM100.NCALCAMT cursor, modified, bold;
      converseLib.validationFailed(34); /* Field required during 'add'*/
      NLXREC.NLXERRF = "Y";
    else
      set NC0AM100.NCALCAMT normal;
    end
  else /* Has L/C amount changed?*/
    if (NC0AM100.NCALCAMT <= 0) /* Bad L/C Amount given*/
      set NC0AM100.NCALCAMT cursor, modified, bold;
      converseLib.validationFailed(77); /* L/C amount may not be 0 or less*/
      NLXREC.NLXERRF = "Y";
    end
    if (NC0AM100.NCALCAMT > 0
     && NC0AM100.NCALCAMT != VLCHDR01.NCALCAMT)
      NC0AW01.NC0AWSMS = "Y"; /* Set screen modified switch on*/
      set NC0AM100.NCALCAMT normal;
    end
  end
   /* *******************************************/
   /* Edit the L/C Received date during 'add'*/
   /* *******************************************/
  if (NC0AW01.NC0AWADM == "Y") /* If this is an 'add'*/
    if (NC0AM100.NCALCRDT == " ") /* and no date was entered*/
      set NC0AM100.NCALCRDT cursor, modified, bold;
      converseLib.validationFailed(34); /* Field required during 'add'*/
      NLXREC.NLXERRF = "Y";
      NC0AW01.NC0AWDER = "Y"; /* Set date error flag on*/
    else
      set NC0AM100.NCALCRDT normal;
    end
  end
   /* ******************************/
   /* Edit the L/C Date Received*/
   /* ****************************/
  if (NC0AM100.NCALCRDT != NC0AW01.NC0AWMRD) /* The Received date changed*/
    NLXREC.NLXVALDT = "Y"; /* Prepare/perform date edit*/
    NLXREC.XXXED8C = NC0AM100.NCALCRDT;
    XPNL001(); /* Perform date edit*/
    if (NLXREC.NLXVALDT == "N")
      set NC0AM100.NCALCRDT cursor, modified, bold;
      converseLib.validationFailed(5); /* invalid date*/
      NLXREC.NLXERRF = "Y";
      NC0AW01.NC0AWDER = "Y"; /* Set date error flag on*/
    else
      NC0AW01.NC0AWSMS = "Y"; /* Set Screen Modified switch on*/
      set NC0AM100.NCALCRDT normal; /* Good date given*/
      NC0AM100.NCALCRDT = NLXREC.XXXFLDT; /* Load map field*/
      NC0AW01.NC0AWRDT = NLXREC.XXXWCYMD; /* Save new date*/
    end
  end
   /* *********************************************/
   /* Reasonability check on relationship of dates*/
   /* *********************************************/
  if (NC0AW01.NC0AWDER != "Y") /* If no date errors*/
    if (NC0AW01.NC0AWXDT != 0 /* All 3 dates have non-0 values*/
     && NC0AW01.NC0AWADT != 0 
     && NC0AW01.NC0AWRDT != 0)
      if (NC0AW01.NC0AWXDT >= NC0AW01.NC0AWADT /* Check relationship*/
       && NC0AW01.NC0AWADT >= NC0AW01.NC0AWRDT)
        set NC0AM100.NCALCXDT normal;
        set NC0AM100.OP1DSADT normal;
        set NC0AM100.NCALCRDT normal;
      else
        converseLib.validationFailed(80);
        NLXREC.NLXERRF = "Y";
        set NC0AM100.NCALCRDT cursor, modified, bold;
        set NC0AM100.NCALCXDT modified, bold;
        set NC0AM100.OP1DSADT modified, bold;
      end
    end
  end
  if (NC0AW01.NC0AWDER != "Y") /* If no date errors*/
    if (NC0AW01.NC0AWXDT != 0 /* Last shipment date is 0*/
     && NC0AW01.NC0AWADT == 0 
     && NC0AW01.NC0AWRDT != 0)
      if (NC0AW01.NC0AWXDT >= NC0AW01.NC0AWRDT) /* Check relationship*/
        set NC0AM100.NCALCXDT normal;
        set NC0AM100.OP1DSADT normal;
        set NC0AM100.NCALCRDT normal;
      else
        converseLib.validationFailed(80);
        NLXREC.NLXERRF = "Y";
        set NC0AM100.NCALCRDT cursor, modified, bold;
        set NC0AM100.NCALCXDT modified, bold;
        set NC0AM100.OP1DSADT modified, bold;
      end
    end
  end
   /* **************************/
   /* Edit the L/C Closed Flag*/
   /* **************************/
   /* note: in add mode ncarec.ncalcclf = ' '*/
   /* - so will seem chngd*/
  if (NC0AM100.NCALCCLF != VLCHDR01.NCALCCLF) /* The L/C Closed flag changed*/
    if (NC0AM100.NCALCCLF != "Y" /* to something other than a 'y' or 'n'*/
     && NC0AM100.NCALCCLF != "N")
      set NC0AM100.NCALCCLF cursor, modified, bold;
      converseLib.validationFailed(7); /* invalid y/n*/
      NLXREC.NLXERRF = "Y";
    else
      NC0AW01.NC0AWSMS = "Y"; /* Set Screen Modified switch on*/
      if (COMMAREA.CACLVL[1] == "Y") /* only set normal for cred mgr*/
        set NC0AM100.NCALCCLF normal;
      end
    end
  else
    if (NC0AW01.NC0AWADM == "Y") /* During 'add'*/
      NC0AM100.NCALCCLF = "N"; /* Give default value*/
    end
  end
   /* *******************************/
   /* Edit the Allow Invoicing Flag*/
   /* *******************************/
   /* note: in add mode ncarec.ncaaivcf = ' '*/
   /* - so will seem chngd*/
  if (NC0AM100.NCAAIVCF != VLCHDR01.NCAAIVCF)
                                           /* Allow invoicing flag changed?*/
    NC0AW01.NC0AWSMS = "Y"; /* Set Screen Modified switch on*/
    if (NC0AM100.NCAAIVCF == "Y") /* valid values are 'y'...*/
      if (COMMAREA.CACLVL[1] == "Y") /* only set normal for cred mgr*/
        set NC0AM100.NCAAIVCF normal;
      end
      ;
      /* ****** if pgm is changed and any fields are set *******/
      /* ****** normal later in this process -           *******/
      /* ****** the askips set in ss1 will be negated   ********/
      ;
      NC0ASS1(); /* set fields to askip, since invcing now allowed*/
    else
      if (NC0AM100.NCAAIVCF == "N") /* ... and 'n'*/
        if (COMMAREA.CACLVL[1] == "Y") /* only set normal for cred mgr*/
          set NC0AM100.NCAAIVCF normal;
        end
        if (NC0AW01.NC0AWADM != "Y") /* do not perform if in add mode*/
          NC0ASS2(); /* set fields to normal, since ivc fl back to 'n'*/
        end
      else
        set NC0AM100.NCAAIVCF cursor, modified, bold;
        converseLib.validationFailed(7); /* invalid y/n*/
        NLXREC.NLXERRF = "Y";
      end
    end
  else
    if (NC0AW01.NC0AWADM == "Y") /* During 'add'*/
      NC0AM100.NCAAIVCF = "N"; /* Give default value*/
    end
  end
   /* *************************************/
   /* All edits performed, how did we do?*/
   /* *************************************/
  if (NLXREC.NLXERRF == "Y")
    return; /* if edit errors do not update*/
  else
    set NC0AM100.KUCCOID cursor;
    if (NC0AW01.NC0AWSMS == "Y") /* Screen Modified switch on?*/
      if (NC0AW01.NC0AWADM == "N") /* During 'change'*/
        NC0A170(); /* Perform udpates*/
      end
    end
  end
   /* ****************************************/
   /* NOTE: All 'adds' are done in NC0A380!!*/
   /* ****************************************/
  if (NC0AM100.NCALCRID == " ")
    set NC0AM100.NCALCRID cursor, modified, bold;
    converseLib.validationFailed(34);
    NLXREC.NLXERRF = "Y";
  end
end // end NC0A120

// determine next action
Function NC0A130()
   /* **************************************/
   /* Determine next action from 1st screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A130";
  ;
  if (converseVar.eventKey is enter)
    if (NC0AW01.NC0AWKCH != "Y")
      if (NC0AW01.NC0AWKMD == "N" /* keys were NOT modified*/
       || NC0AW01.NC0AWADM == "Y") /* or in 'add' mode*/
        NC0AW01.NC0AWOSN = 1;
        NC0AW01.NC0AWORX = 1;
        NC0AW01.NC0AWFCT = 0;
        NLXREC.NLXEOSF = "Y";
        NLXREC.NLXCSCRN = "NC0AM200";
        return;
      end
    else
      NLXREC.NLXBLDSC = "Y";
    end
  end
   /* ***************************************/
   /* Set up and execute 'delete all' logic*/
   /* ***************************************/
  if (converseVar.eventKey is pf5
   && NC0AW01.NC0AWINQ != "Y")
    if (VLCHDR01.NCAIVCCF != "Y")
      VLCHDR01.KUCCOID = NC0AM100.KUCCOID;
      ;
      NC0AS52(); /* Delete all routine*/
      ;
      set NC0AW02 empty;
      set NC0AW03 empty;
      set NC0AW04 empty;
      NLXREC.NLXEOSF = "Y";
      NLXREC.NLXCSCRN = "NC0AM100";
      return;
    else
      converseLib.validationFailed(55); /* Delete invalid when inv. cut flag = 'n'*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
   /* ************************************************/
   /* Request for skip to Covering Statements screen*/
   /* ************************************************/
  if (converseVar.eventKey is pf15)
    if (NC0AW01.NC0AWADM != "Y")
      NLXREC.NLXEOSF = "Y";
      NLXREC.NLXCSCRN = "NC0AM300";
      return;
    end
  end
  ;
end // end NC0A130

// Edit nc0am100 fields / i-o
Function NC0A170()
   /* **************************************/
   /* Perform nc0am100 updates*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A170";
  ;
  if (NC0AW01.NC0AWSMS == "Y") /* ; If Screen Modified Switch on*/
    NC0AS50(); /* Perform NCAREC update*/
  end
  ;
  if (NC0AM100.NLAADDR1 != VLADDR01.XXX-ADDR1
   || NC0AM100.NLAADDR2 != VLADDR01.XXX-ADDR2
   || NC0AM100.NLAADDR3 != VLADDR01.XXX-ADDR3
   || NC0AM100.NLAADDR4 != VLADDR01.XXX-ADDR4
   || NC0AM100.NLAADDR5 != VLADDR01.XXX-ADDR5
   || NC0AM100.NLAADDR6 != VLADDR01.XXX-ADDR6
   || NC0AM100.XCTCD != VLADDR01.XCTCD
   || NC0AM100.XSTCD != VLADDR01.XSTCD
   || NC0AM100.XXXZIP != VLADDR01.XXXZIP)
    NC0AS51(); /* perform NLAREC update*/
  end
  ;
  NLXREC.NLXEOSF = "Y"; /* Stop displaying nc0am100*/
  NLXREC.NLXCSCRN = "NC0AM200"; /* Set up for second screen*/
end // end NC0A170

// converse map m200
Function NC0A200()
   /* ************************************************************/
   /* *    Process screen nc0am200                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nc0a050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0A200";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NC0A201();
    NLXREC.NLXBLDSC = "N";
  end
   /* ***********************************************************/
  converse NC0AM200 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NC0A210(); /* validate pfkeys*/
  ;
  if (NLXREC.NLXERRF == "N") /* No errors in PF keys*/
    if (NC0AM200 is modified
     || NC0AW01.NC0AWADM == "Y") /* in add mode*/
      NC0A220(); /* Edit screen 1 entries*/
    end
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NC0A230(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process nc0a200.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to nc0a050.*/
end // end NC0A200

// Build Related Orders screen(s)
Function NC0A201()
   /* **************************************/
   /* Build screen nc0am200*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A201";
  ;
  set NC0AM200 empty;
  ;
   /* do not do below!!  already done in 220!!*/
   /* MOVE 1 TO NC0AW01.NC0AWIDX;*/
   /* WHILE NC0AW01.NC0AWIDX LE 28;*/
    /* SET NC0AM200.OP1CUOID(NC0AWIDX) NORMAL;*/
    /* NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;*/
   /* END ;*/
  ;
  NC0AM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NC0AM200.XXXERRID = "NC0AM";
  NC0AM200.XXXMAPNM = "NC0AM200";
  ;
  NC0AM200.NCALCRID = NC0AM100.NCALCRID; /* L/C external id*/
  NC0AM200.KUCCOID = NC0AM100.KUCCOID; /* Company (Customer) id*/
  NC0AM200.KUCCONM = NC0AM100.KUCCONM; /* Company (customer) name*/
  NC0AM200.XCTDESC = NC0AM100.XCTDESC; /* Country name*/
  ;
   /* ****************************************/
   /* Read orders by Internal L/C identifier*/
   /* ****************************************/
  if (NC0AW01.NC0AWADM != "Y")
    if (NC0AW01.NC0AWFCT == 0)
      NC0AW01.NC0AWLIX = 1; /* Set array low index*/
      NC0AW01.NC0AWORX = 1; /* Clear order index*/
      set NC0AW02 empty; /* Clear Order array*/
      NC0AW01.NC0AWCOS = "Y"; /* Set cursor open switch on*/
      VLCORD01.NCALCIID = VLCHDR01.NCALCIID;
      ;
      NC0AS05(); /* Open Xref cursor 2*/
      ;
      NC0AW01.NC0AWFCT = 1;
      while (NC0AW01.NC0AWFCT < 65
       && NC0AW01.NC0AWCOS == "Y")
        ;
        NC0AS06(); /* Load Xref cursor 2*/
        ;
        if (NC0AW01.NC0AWCOS == "Y")
          NC0AW02.NC0AWCUO[NC0AWFCT] = VLCORD01.OP1CUOID;
          NC0AW02.NC0AWNOR[NC0AWFCT] = VLCORD01.OP1NORID;
          NC0AW02.NC0AWOCF[NC0AWFCT] = " ";
          NC0AW01.NC0AWMAX = NC0AW01.NC0AWFCT;
          NC0AW01.NC0AWFCT = NC0AW01.NC0AWFCT + 1;
        end
      end
    end
    /* ***********************************************/
    /* Load Order Status Descriptions to W/S Array...*/
    /* ***********************************************/
    NC0AW01.NC0AWIDX = 1;
    while (NC0AW02.NC0AWCUO[NC0AWIDX] != 0
     || NC0AW02.NC0AWOCF[NC0AWIDX] == "D")
      OP1REC.OP1CUOID = NC0AW02.NC0AWCUO[NC0AWIDX];
      OP1REC.OP1NORID = NC0AW02.NC0AWNOR[NC0AWIDX];
      NC0AWORD = NC0AW02.NC0AWCUO[NC0AWIDX];
      OP1REC.OP1PARTN = NC0AWPTN;
      NC0AS12(); /* Select unique - op1rec*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OP1REC.XOSCD in XOSTBL.XOSCD)
          NC0AWOST[NC0AWIDX] = XOSTBL.XOSDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          NC0AWOST[NC0AWIDX] = "UNKNOWN ORDER STATUS";
        end
      else
        if (NC0AW02.NC0AWOCF[NC0AWIDX] != "D")
          NC0AWOST[NC0AWIDX] = "ORDER NUMBER NOT FOUND";
        else
          NC0AW02.NC0AWOST[NC0AWIDX] = "** ORDER DELETED **";
        end
      end
      NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
    end
  end
   /* *************************************/
   /* Load Order numbers / statuses to map*/
   /* *************************************/
  NC0AW01.NC0AWSCX = 1; /* Scan map from 1st entry*/
  NC0AW01.NC0AWORX = NC0AW01.NC0AWLIX; /* Scan array from current entry*/
  while (NC0AW01.NC0AWSCX <= 28)
    if (NC0AW02.NC0AWCUO[NC0AWORX] != 0
     || NC0AW02.NC0AWOCF[NC0AWORX] == "D")
      NC0AM200.OP1CUOID[NC0AWSCX] = NC0AW02.NC0AWCUO[NC0AWORX];
      NC0AM200.OP1NORID[NC0AWSCX] = NC0AW02.NC0AWNOR[NC0AWORX];
      NC0AM200.XOSDESC[NC0AWSCX] = NC0AW02.NC0AWOST[NC0AWORX];
      NC0AW01.NC0AWOCT = NC0AW01.NC0AWORX;
      if (NC0AW02.NC0AWOCF[NC0AWORX] != "D")
        NC0AM100.OP1CUOID = NC0AW02.NC0AWCUO[NC0AWORX];
        NC0AM300.OP1CUOID = NC0AW02.NC0AWCUO[NC0AWORX];
      end
    end
    NC0AW01.NC0AWORX = NC0AW01.NC0AWORX + 1;
    NC0AW01.NC0AWSCX = NC0AW01.NC0AWSCX + 1;
  end
  if (NC0AW02.NC0AWCUO[NC0AWORX] != 0) /* Are there more?*/
    converseLib.validationFailed(60);
  end
  NC0AW01.NC0AWORX = NC0AW01.NC0AWORX - 1;
  NC0AW01.NC0AWSCX = 28;
  if (NC0AM200.OP1CUOID[NC0AWSCX] != 0)
    NC0AW01.NC0AWSCF = "Y";
  end
end // end NC0A201

// edit pfkeys
Function NC0A210()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NC0A210";
  ;
  if (NC0AM200 is modified)
    NC0AW01.NC0AWSMS = "Y";
  end
  ;
   /* **************************************/
   /* Check for exiting without updates...*/
   /* **************************************/
  if (NC0AW01.NC0AWINQ != "Y") /* Check update users only*/
    if (NC0AW01.NC0AWADM == "N") /* If in 'change' mode*/
      if (NC0AW01.NC0AWSMS == "Y") /* Screen has been changed*/
        if (converseVar.eventKey is pf3  /* NIL Menu requested*/
         || converseVar.eventKey is pf4  /* Master Menu requested*/
         || converseVar.eventKey is pf13 /* Remaining Balance app requested*/
         || converseVar.eventKey is pf17 /* Base Info screen requested*/
         || NC0AM200.CATOAP != " ")     
          NC0AS81(); /* Warn user about loss of updates*/
          if (NC0AW01.NC0AWEXT != 0)
            return;
          end
        end
      end
    else /* In 'add-mode'*/
      if (converseVar.eventKey is pf3  /* NIL Menu requested*/
       || converseVar.eventKey is pf4  /* Master Menu requested*/
       || converseVar.eventKey is pf13 /* Remaining Balance app requested*/
       || NC0AM200.CATOAP != " ")     
        NC0AS81(); /* Warn user about loss of updates*/
        if (NC0AW01.NC0AWEXT != 0)
          return;
        end
      end
    end
  end
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NC0AM200.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    if (NLXREC.NLXERRF != "Y")
      COMMAREA.CATOAP = NC0AM200.CATOAP;
      COMMAREA.CAITEM = NC0AM200.CAITEM;
      COMMAREA.CAUSERA = NCWREC.NCWGROUP;
      XPNL002();
      return;
    end
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf4)
          if (NLXREC.NLXERRF != "Y")
            XSPF4();
          end
        else
          if (converseVar.eventKey is pf3)
            if (NLXREC.NLXERRF != "Y")
              COMMAREA.CATOAP = "NL0A";
              XPNL002();
              return;
            end
          else
            if (converseVar.eventKey is pf13)
              if (NLXREC.NLXERRF != "Y")
                NCWREC.KUCCOID = NC0AM200.KUCCOID;
                NCWREC.NCALCRID = NC0AM200.NCALCRID;
                COMMAREA.CAUSERA = NCWREC.NCWGROUP;
                COMMAREA.CATOAP = "NC0B";
                XPNL002();
                return;
              end
            else
              if (converseVar.eventKey is pf17)
                NLXREC.NLXEOSF = "Y";
                NLXREC.NLXCSCRN = "NC0AM100"; /* Base Info*/
                NLXREC.NLXERRF = "Y";
                if (NC0AW01.NC0AWADM == "Y")
                  NC0AW01.NC0AWAPF = "Y";
                end
                return;
              else
                COMMAREA.CATOAP = " ";
                converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                NLXREC.NLXERRF = "Y";
              end
            end
          end
        end
      end
    end
  end
end // end NC0A210

// Edit Related Orders
Function NC0A220()
   /* ***********************/
   /* Edit nc0am200 entries*/
   /* ***********************/
  ;
  NLXREC.NLXCPROC = "NC0A220";
  NLXREC.NLXERRF = "N"; /* Set error flag off*/
  NC0AW01.NC0AWMAX = 0; /* Clear max entries counter*/
  ;
   /* *************************************/
   /* Clear any previous error indication*/
   /* *************************************/
  NC0AW01.NC0AWIDX = 1;
  while (NC0AW01.NC0AWIDX <= 28)
    set NC0AM200.OP1CUOID[NC0AWIDX] normal;
    NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
  end
  ;
  set NC0AM200.OP1CUOID cursor;
   /* ******************************************/
   /* Check for new Order numbers during 'add'*/
   /* ******************************************/
  if (NC0AW01.NC0AWADM == "Y") /* Add mode...*/
    NC0AW01.NC0AWIDX = 28; /* Set max entries this screen*/
    while (NC0AW01.NC0AWIDX > 0) /* Edit in reverse order*/
      if (NC0AM200.OP1CUOID[NC0AWIDX] != 0) /* A non-zero value is present*/
             /* IF NC0AM200.OP1CUOID(NC0AWIDX) IS MODIFIED; and it was*/
        OP1REC.OP1CUOID = NC0AM200.OP1CUOID[NC0AWIDX]; /* Load key*/
        OP1REC.OP1NORID = NC0AM200.OP1NORID[NC0AWIDX];
        NC0AWORD = NC0AM200.OP1CUOID[NC0AWIDX];
        OP1REC.OP1PARTN = NC0AW01.NC0AWPTN;
        ;
        NC0AS12(); /* Read Order file*/
        ;
        if (SQLCA.VAGen_SQLCODE != 0) /* Order not found*/
          set NC0AM200.OP1CUOID[NC0AWIDX] cursor, modified, bold;
          converseLib.validationFailed(14); /* Order number nrf during 'add'*/
          NLXREC.NLXERRF = "Y"; /* Set error flag on*/
          return;
        else /* Order was found*/
          ;
          if (OP1REC.KUCCOID != KUCREC.KUCCOID) /* Right customer?*/
            set NC0AM200.OP1CUOID[NC0AWIDX] cursor, modified, bold;
            converseLib.validationFailed(35); /* Order invalid - no cust match*/
            NLXREC.NLXERRF = "Y"; /* Set error flag on*/
            return;
            ;
          else /* Payment terms compatible?*/
            if (OP1REC.XPTCD in XPTTBL.XPTCD)
              if (XPTTBL.XPTLCFL[sysVar.arrayIndex] != "Y")
                set NC0AM200.OP1CUOID[NC0AWIDX] cursor, modified, bold;
      /* MOVE 72 TO EZEMNO ; Order invalid - pmt terms incompat*/
               /* MOVE 'Y' TO NLXREC.NLXERRF; Set error flag on*/
              end
              VLCORD01.OP1CUOID = NC0AM200.OP1CUOID[NC0AWIDX];
              VLCORD01.OP1NORID = NC0AM200.OP1NORID[NC0AWIDX];
              NC0AWORD = NC0AM200.OP1CUOID[NC0AWIDX];
              VLCORD01.OP1PARTN = NC0AW01.NC0AWPTN;
              ;
                           /* NC0AS13           ; Read Xref*/
              NC0AS58(); /* Read Xref*/
              ;
                                  /* IF SQLCA.SQLCODE = 0  ;order exists*/
                                   /* on an l/c*/
              if (NC0AW01.NC0AWONE == "N") /* Found*/
                set NC0AM200.OP1CUOID[NC0AWIDX] cursor, modified, bold;
                NC0AW01.NC0AWMGF = "Y"; /* display msg flag*/
              else
                set NC0AM200.OP1CUOID[NC0AWIDX] normal;
              end
              ;
              NC0AS39(); /* Find duplicates on this screen*/
              ;
            else
              set NC0AM200.OP1CUOID[NC0AWIDX] cursor, modified, bold;
              converseLib.validationFailed(39); /* Invalid pmt terms*/
              NLXREC.NLXERRF = "Y"; /* Set error flag on*/
            end
          end
        end
             /* END ;*/
      end
      NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX - 1;
    end
    if (NC0AW01.NC0AWMGF == "Y") /* display msg flag*/
      if (NC0AW01.NC0AWERF == "N")
        converseLib.validationFailed(54); /* Order number already exists*/
        NLXREC.NLXERRF = "Y"; /* Set error flag on*/
        NC0AW01.NC0AWERF = "Y"; /* Set error flag on*/
      else
        NLXREC.NLXERRF = "N";
        NC0AW01.NC0AWERF = "N"; /* error flag*/
        NC0AW01.NC0AWMGF = "N"; /* display msg flag*/
      end
    else
      NC0AW01.NC0AWMGF = "N"; /* display msg flag*/
    end
  end
  ;
   /* ***********************************************************/
   /* Related orders edited during 'add', did they pass?*/
   /* ***********************************************************/
  if (NC0AW01.NC0AWADM == "Y") /* Add mode*/
    if (NLXREC.NLXERRF != "Y") /* Is the error flag off?*/
      NC0AW01.NC0AWIDX = 1;
      NC0AW01.NC0AWORX = NC0AW01.NC0AWLIX; /* Get low index*/
      NC0AW01.NC0AWSMS = "N";
      while (NC0AW01.NC0AWIDX < 29) /* Unload screen to arr*/
        if (NC0AM200.OP1CUOID[NC0AWIDX] != 0)
          NC0AW01.NC0AWSMS = "Y";
          NC0AWCUO[NC0AWORX] = NC0AM200.OP1CUOID[NC0AWIDX];
          NC0AWNOR[NC0AWORX] = NC0AM200.OP1NORID[NC0AWIDX];
          NC0AW01.NC0AWMAX = NC0AW01.NC0AWIDX;
        end
        NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
        NC0AW01.NC0AWORX = NC0AW01.NC0AWORX + 1;
      end
      if (NC0AW01.NC0AWSMS == "N") /* No Order present*/
        if (converseVar.eventKey not pf3
         && converseVar.eventKey not pf4
         && converseVar.eventKey not pf13
         && converseVar.eventKey not pf17)
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(66); /* At least one order must be present*/
          return;
        end
      end
      /* ***************************/
       /* Check if screen is filled*/
      /* ***************************/
      NC0AW01.NC0AWIDX = 1;
      NC0AW01.NC0AWSCF = "Y"; /* Set screen filled flag on*/
      while (NC0AW01.NC0AWIDX < 29)
        if (NC0AM200.OP1CUOID[NC0AWIDX] == 0) /* Empty Order number?*/
          NC0AW01.NC0AWSCF = "N"; /* Set Screen Filled flag off*/
        end
        NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
      end
      NC0AW01.NC0AWIDX = 28;
    end
  else
    /* **************************************/
     /* Perform nc0am200 edits during 'change'*/
    /* **************************************/
    ;
    NC0AW01.NC0AWSCX = 28; /* Set max screen entry*/
    NC0AW01.NC0AWORX = NC0AW01.NC0AWLIX; /* Get low array value*/
    NC0AW01.NC0AWORX = NC0AW01.NC0AWORX + 27; /* Add 27 for reverse edit*/
    if (NC0AW01.NC0AWORX > 64) /* Editing screen 3?*/
      NC0AW01.NC0AWORX = 64; /* Adjust for*/
      NC0AW01.NC0AWSCX = 8; /* Partial third screen...*/
    end
    ;
    while (NC0AW01.NC0AWSCX > 0) /* Compare map vs array values*/
      if (NC0AM200.OP1CUOID[NC0AWSCX] != NC0AW02.NC0AWCUO[NC0AWORX]
       || NC0AM200.OP1NORID[NC0AWSCX] != NC0AW02.NC0AWNOR[NC0AWORX])
        if (NC0AM200.OP1CUOID[NC0AWSCX] == 0 /* Delete is being requested*/
         && NC0AM200.OP1NORID[NC0AWSCX] == 0)
          set NC0AM200.OP1CUOID[NC0AWSCX] normal;
        else
          ;
           /* Not deleteing, replacing?*/
          ;
          OP1REC.OP1CUOID = NC0AM200.OP1CUOID[NC0AWSCX]; /* Build*/
          OP1REC.OP1NORID = NC0AM200.OP1NORID[NC0AWSCX]; /* key*/
          NC0AWORD = NC0AM200.OP1CUOID[NC0AWSCX];
          OP1REC.OP1PARTN = NC0AW01.NC0AWPTN;
          ;
          NC0AS12(); /* Read Orders*/
          ;
          if (SQLCA.VAGen_SQLCODE != 0) /* Order not found*/
            set NC0AM200.OP1CUOID[NC0AWSCX] cursor, modified, bold;
            converseLib.validationFailed(14); /* Order number nrf during 'add'*/
            NLXREC.NLXERRF = "Y"; /* Set error flag on*/
          else /* Order found*/
            ;
            set NC0AM200.OP1CUOID[NC0AWSCX] normal;
            if (OP1REC.KUCCOID != KUCREC.KUCCOID) /* Right Customer?*/
              set NC0AM200.OP1CUOID[NC0AWSCX] cursor, modified, bold;
              converseLib.validationFailed(35); /* Order invalid - no cust match*/
              NLXREC.NLXERRF = "Y"; /* Set error flag on*/
              ;
            else /* Payment terms compatible?*/
              if (OP1REC.XPTCD in XPTTBL.XPTCD)
                if (XPTTBL.XPTLCFL[sysVar.arrayIndex] != "Y")
                  set NC0AM200.OP1CUOID[NC0AWSCX] cursor, modified, bold;
         /* MOVE 72 TO EZEMNO; Order invalid - pmt terms incompat*/
                 /* MOVE 'Y' TO NLXREC.NLXERRF; Set error flag on*/
                end
                VLCORD01.OP1CUOID = NC0AM200.OP1CUOID[NC0AWSCX];
                                   /* Build*/
                VLCORD01.OP1NORID = NC0AM200.OP1NORID[NC0AWSCX];
                                                                     /* key*/
                NC0AW01.NC0AWORD = NC0AM200.OP1CUOID[NC0AWSCX];
                VLCORD01.OP1PARTN = NC0AW01.NC0AWPTN;
                ;
                               /* NC0AS13         ;Read Xref*/
                NC0AS58(); /* Read Xref*/
                ;
                               /* IF SQLCA.SQLCODE EQ 0  ; Found*/
                if (NC0AW01.NC0AWONE == "N") /* Found*/
                  ;
               /* IF NCCREC.NCALCRID EQ NCAREC.NCALCRID; Same L/C*/
                  if (NC0AW01.NC0AWSAM == "Y") /* Found*/
                    ;
                    set NC0AM200.OP1CUOID[NC0AWSCX] cursor, modified, bold;
                    converseLib.validationFailed(67); /* Order already exists this L/C*/
                    NLXREC.NLXERRF = "Y"; /* Set error flag on*/
                    ;
                  else /* Found on another L/C*/
                    if (NC0AW01.NC0AWERF == "N")
                      set NC0AM200.OP1CUOID[NC0AWSCX] cursor, modified, bold;
                      converseLib.validationFailed(54); /* Order number already exists*/
                      NLXREC.NLXERRF = "Y"; /* Set error flag on*/
                      NC0AW01.NC0AWERF = "Y"; /* Set error flag on*/
                    else
                      NLXREC.NLXERRF = "N";
                      NC0AW01.NC0AWERF = "N"; /* Set error flag on*/
                    end
                  end
                else
                  set NC0AM200.OP1CUOID[NC0AWSCX] normal;
                end
                ;
                NC0AS38(); /* Check screen for duplicates*/
                ;
              else
                set NC0AM200.OP1CUOID[NC0AWSCX] cursor, modified, bold;
                converseLib.validationFailed(39); /* Invalid pmt terms*/
                NLXREC.NLXERRF = "Y"; /* Set error flag on*/
              end
            end
          end
        end
      end
      NC0AW01.NC0AWSCX = NC0AW01.NC0AWSCX - 1;
      NC0AW01.NC0AWORX = NC0AW01.NC0AWORX - 1;
    end
  end
  ;
   /* edit for at least one order exists...*/
     /* either on the screen or in the non-viewing part of array*/
  if (NC0AW01.NC0AWADM != "Y" /* already checked if in add mode*/
   && NLXREC.NLXERRF != "Y")  /* no need to check if other errors*/
    NC0AS40();
  end
  ;
   /* ************************************/
   /* If no errors are detected, proceed*/
   /* ************************************/
  if (NC0AM200 is modified) /* Changes were made*/
    if (NLXREC.NLXERRF != "Y") /* Without errors*/
      if (NC0AW01.NC0AWADM == "N")
        NC0A270(); /* Perform update logic, necessary i/o*/
      end
    end
  end
end // end NC0A220

// determine next action
Function NC0A230()
   /* ************************************************/
   /* Determine next action on Related Orders screen*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NC0A230";
  ;
   /* *******************************************************/
   /* Prepare for a subsequent screen of orders during 'add'*/
   /* *******************************************************/
  if (converseVar.eventKey is enter) /* Enter has been pressed*/
    if (NC0AW01.NC0AWADM == "Y") /* In 'add' mode*/
      if (NC0AW01.NC0AWSCF == "Y") /* Screen filled*/
        if (NC0AW01.NC0AWLIX < 57) /* Low index at max?*/
          NC0AW01.NC0AWLIX = NC0AW01.NC0AWLIX + 28;
          set NC0AM200 empty;
          NLXREC.NLXBLDSC = "Y";
          return;
        else /* Max entries reached*/
          NLXREC.NLXEOSF = "Y";
          NLXREC.NLXCSCRN = "NC0AM300"; /* Covering Statement screen*/
          return;
        end
      else /* Screen not full*/
        NLXREC.NLXEOSF = "Y";
        NLXREC.NLXCSCRN = "NC0AM300"; /* Covering Statement screen*/
        return;
      end
    else /* Not in add mode*/
      NLXREC.NLXEOSF = "Y";
      NLXREC.NLXCSCRN = "NC0AM300"; /* Covering Statement screen*/
      return;
    end
  end
   /* ********************************************/
   /* Reverse requested on Related Orders screen*/
   /* ********************************************/
  if (converseVar.eventKey is pf7) /* pf7 has been pressed*/
    if (NC0AW01.NC0AWADM != "Y") /* In 'change' mode*/
      if (NC0AW01.NC0AWLIX == 1) /* Still on screen 1*/
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(29); /* No reverse from top-of-file*/
        return;
      else
        if (NC0AW01.NC0AWLIX == 29) /* On screen 2*/
          NLXREC.NLXBLDSC = "Y"; /* Set rebuild screen flag*/
          NC0AW01.NC0AWLIX = NC0AW01.NC0AWLIX - 28;
          return;
        else
          if (NC0AW01.NC0AWLIX == 57)
            NLXREC.NLXBLDSC = "Y";
            NC0AW01.NC0AWLIX = NC0AW01.NC0AWLIX - 28;
            return;
          end
        end
      end
    end
  end
  ;
   /* ***************************************************/
   /* Forward scroll requested on Related Orders screen*/
   /* ***************************************************/
  if (converseVar.eventKey is pf8) /* pf8 has been pressed*/
    if (NC0AW01.NC0AWADM != "Y") /* In 'change' mode*/
      if (NC0AW01.NC0AWSCF != "Y") /* Screen not filled*/
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(30); /* bottom-of-file, forward disallowed*/
        return;
      else /* At least one screen is filled*/
        if (NC0AW01.NC0AWLIX == 1)
          NC0AW01.NC0AWLIX = NC0AW01.NC0AWLIX + 28;
          NLXREC.NLXBLDSC = "Y";
          return;
        else
          if (NC0AW01.NC0AWLIX == 29)
            NC0AW01.NC0AWLIX = NC0AW01.NC0AWLIX + 28;
            if (NC0AW01.NC0AWLIX > NC0AW01.NC0AWMAX) /* Scroll past array*/
              NC0AW01.NC0AWLIX = NC0AW01.NC0AWLIX - 28; /* Reset low index*/
              NLXREC.NLXERRF = "Y";
              converseLib.validationFailed(30); /* No further scrolling possible*/
            else
              NLXREC.NLXBLDSC = "Y";
              return;
            end
          else
            if (NC0AW01.NC0AWLIX == 57)
              NLXREC.NLXERRF = "Y";
              converseLib.validationFailed(30); /* No further scrolling possible*/
              return;
            end
          end
        end
      end
    end
  end
  ;
   /* ************************************/
   /* Base Information screen requested*/
   /* ************************************/
  if (converseVar.eventKey is pf17)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NC0AM100"; /* Base info screen*/
    return;
  end
  ;
end // end NC0A230

// Update Related Orders
Function NC0A270()
   /* **************************************/
   /* Perform nc0am200 updates - screen 1*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A270";
  ;
  NC0AW01.NC0AWSCX = 28; /* Set maximum screen index*/
  NC0AW01.NC0AWORX = NC0AW01.NC0AWLIX; /* Get low array value*/
  NC0AW01.NC0AWORX = NC0AW01.NC0AWORX + 27; /* Add 27 to reverse edits*/
  if (NC0AW01.NC0AWORX > 64) /* If on screen 3*/
    NC0AW01.NC0AWORX = 64; /* Adjust to*/
    NC0AW01.NC0AWSCX = 8; /* screen 3 maximums*/
  end
  ;
  while (NC0AW01.NC0AWSCX > 0) /* Compare map vs array values*/
    ;
    if (NC0AM200.OP1CUOID[NC0AWSCX] != NC0AW02.NC0AWCUO[NC0AWORX]
     || NC0AM200.OP1NORID[NC0AWSCX] != NC0AW02.NC0AWNOR[NC0AWORX])
      ;
      if (NC0AM200.OP1CUOID[NC0AWSCX] == 0 /* Delete is being requested*/
       && NC0AM200.OP1NORID[NC0AWSCX] == 0)
        ;
        VLCORD01.OP1CUOID = NC0AW02.NC0AWCUO[NC0AWORX]; /* Build key*/
        VLCORD01.OP1NORID = NC0AW02.NC0AWNOR[NC0AWORX];
        NC0AW01.NC0AWORD = NC0AW02.NC0AWCUO[NC0AWORX];
        VLCORD01.OP1PARTN = NC0AW01.NC0AWPTN;
        VLCORD01.NCALCIID = VLCHDR01.NCALCIID;
        ;
        NC0AS14(); /* Delete*/
        ;
        NC0AW02.NC0AWCUO[NC0AWORX] = 0; /* Remove from w/s array*/
        NC0AW02.NC0AWNOR[NC0AWORX] = 0;
        NC0AW02.NC0AWOCF[NC0AWORX] = "D"; /* Indicate 'deleted'*/
      else
        ;
         /* Not deleteing, replacing?*/
        ;
        OP1REC.OP1CUOID = NC0AM200.OP1CUOID[NC0AWSCX]; /* Build*/
        OP1REC.OP1NORID = NC0AM200.OP1NORID[NC0AWSCX]; /* key*/
        NC0AWORD = NC0AM200.OP1CUOID[NC0AWSCX];
        OP1REC.OP1PARTN = NC0AW01.NC0AWPTN;
        ;
         /* Replacement Order OK, write it...*/
        ;
        VLCORD01.NCALCRID = VLCHDR01.NCALCRID;
        VLCORD01.NCALCIID = VLCHDR01.NCALCIID;
        VLCORD01.KUCCOID = NC0AM100.KUCCOID;
        VLCORD01.OP1CUOID = NC0AM200.OP1CUOID[NC0AWSCX];
        VLCORD01.OP1NORID = NC0AM200.OP1NORID[NC0AWSCX];
        NC0AW01.NC0AWORD = NC0AM200.OP1CUOID[NC0AWSCX];
        VLCORD01.OP1PARTN = NC0AW01.NC0AWPTN;
        ;
        XX0XS01(); /* Get current system date & time*/
        VLCORD01.ZZZSDT = XX0XW01.XX0XWDAT;
        ;
        NC0AS15(); /* Add Xref*/
        ;
        /* Was an order replaced?  If so, delete original*/
        ;
        if (NC0AW02.NC0AWCUO[NC0AWORX] != 0) /* Order present before?*/
          VLCORD01.OP1CUOID = NC0AW02.NC0AWCUO[NC0AWORX];
          VLCORD01.OP1NORID = NC0AW02.NC0AWNOR[NC0AWORX];
          NC0AW01.NC0AWORD = NC0AW02.NC0AWCUO[NC0AWORX];
          VLCORD01.OP1PARTN = NC0AW01.NC0AWPTN;
          VLCORD01.NCALCIID = VLCHDR01.NCALCIID;
          ;
          NC0AS14(); /* Delete unique nccrec*/
          ;
        end
        NC0AWCUO[NC0AWORX] = NC0AM200.OP1CUOID[NC0AWSCX];
        NC0AWNOR[NC0AWORX] = NC0AM200.OP1NORID[NC0AWSCX];
      end
    end
    NC0AW01.NC0AWSCX = NC0AW01.NC0AWSCX - 1;
    NC0AW01.NC0AWORX = NC0AW01.NC0AWORX - 1;
  end
   /* *****************************************/
   /* Check if ncarec has been updated yet...*/
   /* *****************************************/
  if (NC0AW01.NC0AWUCF != "Y") /* Has L/C Header been updated yet?*/
    VLCHDR01.NCALCRID = NC0AM100.NCALCRID; /* Build*/
    VLCHDR01.KUCCOID = NC0AM100.KUCCOID; /* key*/
    XX0XS01(); /* Get current date*/
    VLCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VLCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    VLCHDR01.NCALCADT = XX0XW01.XX0XWDAT;
    VLCHDR01.XXXUSRID = COMMAREA.CAUSERID;
    ;
    NC0AS16(); /* Update L/C Header*/
    ;
    NC0AW01.NC0AWUCF = "Y"; /* Set 'update' flag*/
  end
end // end NC0A270

// Converse map m300
Function NC0A300()
   /* ************************************************************/
   /* *    process screen nc0am300                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nc0a050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0A300";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NC0A301();
                                   /* Determine security level, prot fields*/
    NLXREC.NLXBLDSC = "N";
  end
  ;
   /* ***********************************************************/
  converse NC0AM300 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NC0A310(); /* validate pfkeys*/
  ;
  if (NLXREC.NLXERRF == "N")
    if (NC0AM300 is modified
     || NC0AW01.NC0AWADM == "Y") /* in add mode*/
      NC0A320(); /* edit entries and perform i/o*/
    end
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NC0A330(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process nc0a100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to nc0a050.*/
end // end NC0A300

// Build screen
Function NC0A301()
   /* **************************************/
   /* Build screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A301";
  ;
  set NC0AM300 empty;
  ;
  NC0AM300.XXXERRID = "NC0AM";
  NC0AM300.XXXMAPNM = "NC0AM300";
  NC0AM300.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
  NC0AM300.NCALCRID = NC0AM100.NCALCRID; /* L/C external id*/
  NC0AM300.KUCCOID = NC0AM100.KUCCOID; /* Company (Customer) id*/
  NC0AM300.KUCCONM = NC0AM100.KUCCONM; /* Company (customer) name*/
  ;
   /* *****************************************/
   /* Read Orders Xref by Internal L/C number*/
   /* *****************************************/
  ;
  NC0AS05(); /* Open xref cursor 2*/
  ;
  NC0AW01.NC0AWFCT = 1;
  NC0AW01.NC0AWCOS = "Y"; /* Set 'cursor open' switch*/
  while (NC0AW01.NC0AWFCT < 65
   && NC0AW01.NC0AWCOS == "Y")
    ;
    NC0AS06(); /* Load xref cursor 2*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     && NC0AW01.NC0AWCOS == "Y")
      NC0AM300.OP1CUOID = VLCORD01.OP1CUOID;
    end
  end
  ;
  NC0AM300.XCTDESC = NC0AM100.XCTDESC; /* Country name*/
  ;
   /* ************************/
   /* Clear Inco Terms array*/
   /* ************************/
  set NC0AW03 empty;
  ;
  if (NC0AW01.NC0AWADM == "N")
    NC0AM300.NCALCQTY = VLCHDR01.NCALCQTY;
    /* ****************************/
     /* Open cursor for Inco Terms*/
    /* ****************************/
    NC0AS17(); /* Open cursor - ncbrec*/
    /* ****************************/
     /* Fetch all rows Inco Terms*/
    /* ****************************/
    VLCZIT01.NCALCIID = VLCHDR01.NCALCIID;
    NC0AW01.NC0AWCOS = "Y";
    NC0AW01.NC0AWCIX = 1;
    while (NC0AW01.NC0AWCIX < 13 /* JAB 8/13/90 increased to 13 from 8*/
     && NC0AW01.NC0AWCOS == "Y")
      NC0AS18(); /* Load cursor - ncbrec*/
      if (NC0AW01.NC0AWCOS == "Y") /* If cursor still open...*/
        NC0AW03.NC0AWCCT[NC0AWCIX] = VLCZIT01.ZZZCHGCT;
        NC0AW03.NC0AWCTC[NC0AWCIX] = VLCZIT01.XCTCD;
        if (VLCZIT01.XCTCD in XCTTBL.XCTCD)
          NC0AM300.NC0AMICD = XCTTBL.XCTDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex != 0)
          NC0AW03.NC0AWICD[NC0AWCIX] = NC0AM300.NC0AMICD;
        end
        ;
        NC0AW03.NC0AWZCD[NC0AWCIX] = VLCZIT01.ZITCD;
        if (VLCZIT01.ZITCD in ZITTBL.ZITCD)
          NC0AM300.ZITDESC = ZITTBL.ZITDESC[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex != 0)
          NC0AW03.NC0AWZDS[NC0AWCIX] = NC0AM300.ZITDESC;
        end
        ;
        NC0AW03.NC0AWITL[NC0AWCIX] = VLCZIT01.NCBLCINL;
      end
      NC0AW01.NC0AWCIX = NC0AW01.NC0AWCIX + 1;
    end
    /* ****************************************/
     /* Are there more than 1 Inco terms code?*/
    /* ****************************************/
    NC0AW01.NC0AWCIX = 2;
    if (NC0AW03.NC0AWCTC[NC0AWCIX] != " ")
      converseLib.validationFailed(61); /* More than 1 Inco term encountered*/
    end
    ;
    NC0AW01.NC0AWCIX = 1;
    NC0AM300.XCTCD = NC0AW03.NC0AWCTC[NC0AWCIX];
    NC0AM300.NC0AMICD = NC0AW03.NC0AWICD[NC0AWCIX];
    NC0AM300.ZITCD = NC0AW03.NC0AWZCD[NC0AWCIX];
    NC0AM300.ZITDESC = NC0AW03.NC0AWZDS[NC0AWCIX];
    NC0AM300.NCBLCINL = NC0AW03.NC0AWITL[NC0AWCIX];
    ;
    set NC0AW04 empty;
    ;
    /* **********************/
     /* Open Comments Cursor*/
    /* **********************/
    NC0AS20(); /* Open Comments cursor*/
    ;
    NC0AW01.NC0AWCOS = "Y"; /* Set cursor switch open*/
    NC0AW01.NC0AWIDX = 1;
    ;
    NC0AS21(); /* Load comments cursor*/
    if (NC0AW01.NC0AWCOS == "Y") /* Something found*/
      if (VLCCOM01.NCDCMSEQ == 1) /* Short comment?*/
        NC0AM300.NC0AMCSH = VLCCOM01.NCDCOMNT;
        NC0AW04.NC0AWCOM[NC0AWIDX] = VLCCOM01.NCDCOMNT;
        NC0AW04.NC0AWCCT[NC0AWIDX] = VLCCOM01.ZZZCHGCT;
      else
        NC0AM300.NC0AMCSH = " ";
        NC0AW04.NC0AWCOM[NC0AWIDX] = " ";
        NC0AW04.NC0AWCCT[NC0AWIDX] = 0;
        NC0AW04.NC0AWCOM[NCDCMSEQ] = VLCCOM01.NCDCOMNT;
        NC0AW04.NC0AWCCT[NCDCMSEQ] = VLCCOM01.ZZZCHGCT;
        NC0AW01.NC0AWIDX = VLCCOM01.NCDCMSEQ;
        NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX - 1; /* Get screen position*/
        NC0AM300.NCDCOMNT[NC0AWIDX] = VLCCOM01.NCDCOMNT;
      end
    else
      NC0AM300.NC0AMCSH = " ";
      NC0AW04.NC0AWCOM[NC0AWIDX] = " ";
      NC0AW04.NC0AWCCT[NC0AWIDX] = 0;
    end
    /* **************************/
     /* Fetch remaining Comments*/
    /* **************************/
    while (NC0AW01.NC0AWCOS == "Y")
      NC0AS21(); /* Load cursor - ncdrec*/
      if (NC0AW01.NC0AWCOS == "Y") /* Cursor still open*/
        NC0AW04.NC0AWCOM[NCDCMSEQ] = VLCCOM01.NCDCOMNT;
        NC0AW04.NC0AWCCT[NCDCMSEQ] = VLCCOM01.ZZZCHGCT;
        NC0AW01.NC0AWIDX = VLCCOM01.NCDCMSEQ;
        NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX - 1; /* Get screen position*/
        NC0AM300.NCDCOMNT[NC0AWIDX] = VLCCOM01.NCDCOMNT;
      end
    end
  else /* We're in add-mode*/
    NC0AW01.NC0AWCIX = 1;
    return;
  end
end // end NC0A301

// Edit pfkeys
Function NC0A310()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  if (NC0AM300 is modified)
    NC0AW01.NC0AWSMS = "Y";
  end
  ;
  NLXREC.NLXCPROC = "NC0A310";
  ;
   /* **************************************/
   /* Check for exiting without updates...*/
   /* **************************************/
  if (NC0AW01.NC0AWINQ != "Y") /* Check update users only*/
    if (NC0AW01.NC0AWADM == "N") /* If in 'change' mode*/
      if (NC0AW01.NC0AWSMS == "Y") /* Screen has been changed*/
        if (converseVar.eventKey is pf3  /* NIL Menu requested*/
         || converseVar.eventKey is pf4  /* Master Menu requested*/
         || converseVar.eventKey is pf13 /* Remaining Balance app requested*/
         || converseVar.eventKey is pf17 /* Base Info screen requested*/
         || converseVar.eventKey is pf19 /* Related Orders screen requested*/
         || NC0AM200.CATOAP != " ")     
          NC0AS82(); /* Warn user about loss of updates*/
          if (NC0AW01.NC0AWEXT != 0)
            return;
          end
        end
      end
    else /* In 'add-mode'*/
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pf4
       || converseVar.eventKey is pf13
       || NC0AM300.CATOAP != " ")
        NC0AS82(); /* Warn user about loss of updates*/
        if (NC0AW01.NC0AWEXT != 0)
          return;
        end
      end
    end
  end
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NC0AM300.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    if (NLXREC.NLXERRF != "Y")
      COMMAREA.CATOAP = NC0AM300.CATOAP;
      COMMAREA.CAITEM = NC0AM300.CAITEM;
      COMMAREA.CAUSERA = NCWREC.NCWGROUP;
      XPNL002();
      return;
    end
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf4)
          if (NLXREC.NLXERRF != "Y")
            XSPF4();
          end
        else
          if (converseVar.eventKey is pf3)
            if (NLXREC.NLXERRF != "Y")
              COMMAREA.CATOAP = "NL0A";
              XPNL002();
              return;
            end
          else
            if (converseVar.eventKey is pf13)
              if (NLXREC.NLXERRF != "Y")
                NCWREC.KUCCOID = NC0AM300.KUCCOID;
                NCWREC.NCALCRID = NC0AM300.NCALCRID;
                COMMAREA.CAUSERA = NCWREC.NCWGROUP;
                COMMAREA.CATOAP = "NC0B";
                XPNL002();
                return;
              end
            else
              if (converseVar.eventKey is pf17)
                NLXREC.NLXERRF = "Y";
                NLXREC.NLXEOSF = "Y";
                NLXREC.NLXCSCRN = "NC0AM100"; /* Base Info screen*/
                NC0AW01.NC0AWEXT = 0; /* Clear Exit flag*/
                NC0AW01.NC0AWAPF = "Y";
                return;
              else
                ;
                if (converseVar.eventKey is pf19) /* Same function key?*/
                  NLXREC.NLXERRF = "Y";
                  NLXREC.NLXEOSF = "Y";
                  NLXREC.NLXCSCRN = "NC0AM200";
                  NC0AW01.NC0AWEXT = 0; /* Clear Exit flag*/
                  NC0AW01.NC0AWAPF = "Y";
                  return;
                else
                  COMMAREA.CATOAP = " ";
                  converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                  NLXREC.NLXERRF = "Y";
                end
              end
            end
          end
        end
      end
    end
  end
end // end NC0A310

// Edit nc0am300 entries
Function NC0A320()
   /* **************************************/
   /* Edit nc0am300 entries and perform i/o*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A320";
  set NC0AM300.NCALCQTY cursor;
  ;
   /* ************************************************************/
   /* Has the user requested a pop-up window for country codes?*/
   /* ************************************************************/
  if (NC0AM300.XCTCD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXCT01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NC0AM300.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
    end
    if (NC0AM300.ZITCD != "?")
      converseLib.clearScreen();
      
      set NC0AM300.XCTCD cursor;
    end
  end
   /* ********************************************************/
   /* Has the user requested a pop-up window for Inco terms?*/
   /* ********************************************************/
  if (NC0AM300.ZITCD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPZIT01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NC0AM300.ZITCD = ZITTBL.ZITCD[XX0XWPIX];
    end
    converseLib.clearScreen();
    
    set NC0AM300.ZITCD cursor;
  end
   /* ******************************/
   /* Edit fields in reverse order*/
   /* ************************************************/
   /* Edit the Covering Statement (1 line mandatory)*/
   /* ************************************************/
  if (NC0AM300.NC0AMCSH == " ") /* Short covering statement is spaces*/
    NC0AW01.NC0AWIDX = 13; /* Set array max*/
    NLXREC.NLXERRF = "Y"; /* Reverse logic - set error switch on*/
    while (NC0AW01.NC0AWIDX >= 1 /* Loop thru screen array*/
     && NLXREC.NLXERRF == "Y")
      if (NC0AM300.NCDCOMNT[NC0AWIDX] != " ") /* Something is present*/
        set NC0AM300.NC0AMCSH normal;
        NLXREC.NLXERRF = "N"; /* Turn error switch off*/
      end
      NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX - 1; /* Decrement subscript*/
    end
    if (NLXREC.NLXERRF == "Y") /* All fields empty?*/
      converseLib.validationFailed(75); /* Covering statement must be present*/
      set NC0AM300.NC0AMCSH cursor, modified, bold;
    end
  else
    set NC0AM300.NC0AMCSH normal;
  end
   /* ********************************************/
   /* Determine if change in Covering Statements*/
   /* ********************************************/
  NC0AW01.NC0AWIDX = 1;
  if (NC0AW04.NC0AWCOM[NC0AWIDX] != NC0AM300.NC0AMCSH)
    NC0AW01.NC0AWSMS = "Y";
  end
  ;
  NC0AW01.NC0AWSCX = 1;
  NC0AW01.NC0AWIDX = 2;
  while (NC0AW01.NC0AWIDX <= 14)
    if (NC0AW04.NC0AWCOM[NC0AWIDX] != NC0AM300.NCDCOMNT[NC0AWSCX])
      NC0AW01.NC0AWSMS = "Y";
    end
    NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
    NC0AW01.NC0AWSCX = NC0AW01.NC0AWSCX + 1;
  end
   /* **********************************/
   /* Edit Inco term fields as a group*/
   /* **********************************/
  if (NC0AM300.XCTCD != NC0AW03.NC0AWCTC[NC0AWCIX]
   || NC0AM300.ZITCD != NC0AW03.NC0AWZCD[NC0AWCIX]
   || NC0AM300.NCBLCINL != NC0AW03.NC0AWITL[NC0AWCIX])
    if (NC0AM300.XCTCD == " "
     || NC0AM300.ZITCD == " "
     || NC0AM300.NCBLCINL == " ") /* If ANY Incoterms flds are blank*/
      if (NC0AM300.XCTCD == " "
       && NC0AM300.ZITCD == " "
       && NC0AM300.NCBLCINL == " ")
                                   /* If ALL Incoterms flds are blank*/
        NC0AW01.NC0AWSMS = "Y"; /* Set 'screen modified' switch*/
        set NC0AM300.XCTCD normal;
        set NC0AM300.ZITCD normal;
        set NC0AM300.NCBLCINL normal;
      else
        converseLib.validationFailed(76);
                                   /* All/none of incoterms must be present*/
        NLXREC.NLXERRF = "Y"; /* Set error switch on*/
        if (NC0AM300.XCTCD == " ")
          set NC0AM300.XCTCD cursor, modified, bold;
        end
        ;
        if (NC0AM300.ZITCD == " ")
          set NC0AM300.ZITCD cursor, modified, bold;
        end
        ;
        if (NC0AM300.NCBLCINL == " ")
          set NC0AM300.NCBLCINL cursor, modified, bold;
        end
        ;
      end
    else
      set NC0AM300.XCTCD normal;
      set NC0AM300.ZITCD normal;
      set NC0AM300.NCBLCINL normal;
    end
  else
    set NC0AM300.XCTCD normal;
    set NC0AM300.ZITCD normal;
    set NC0AM300.NCBLCINL normal;
  end
   /* ***************************************/
   /* Check if Incoterm location has changed*/
   /* ****************************************/
  if (NC0AM300.NCBLCINL != NC0AW03.NC0AWITL[NC0AWCIX])
    NC0AW01.NC0AWSMS = "Y";
  end
   /* ******************************************/
   /* If supplied, the Inco Term must be valid*/
   /* ******************************************/
  if (NC0AM300.ZITCD != " ") /* Non-spaces value given*/
    if (NC0AM300.ZITCD != NC0AW03.NC0AWZCD[NC0AWCIX]) /* value changed...*/
      if (NC0AM300.ZITCD in ZITTBL.ZITCD)
        NC0AM300.ZITDESC = ZITTBL.ZITDESC[sysVar.arrayIndex];
      end /* Do table lookup*/
      if (sysVar.arrayIndex == 0) /* Was Incoterm found in table?*/
        set NC0AM300.ZITCD cursor, modified, bold;
        converseLib.validationFailed(58); /* Inco Term n/f in table*/
        NLXREC.NLXERRF = "Y";
      else
        NC0AW01.NC0AWSMS = "Y"; /* Set 'screen modified' switch*/
        set NC0AM300.ZITCD normal;
      end
    end
  end
   /* ************************************************************/
   /* If supplied, the Inco Term country of origin must be valid*/
   /* ************************************************************/
  if (NC0AM300.XCTCD != NC0AW03.NC0AWCTC[NC0AWCIX])
    if (NC0AM300.XCTCD != "  ") /* To a non-spaces value*/
      if (NC0AM300.XCTCD in XCTTBL.XCTCD)
        NC0AM300.NC0AMICD = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        set NC0AM300.XCTCD cursor, modified, bold;
        converseLib.validationFailed(57); /* Inco Term country not found in table*/
        NLXREC.NLXERRF = "Y";
      else
        set NC0AM300.XCTCD normal;
        NC0AW01.NC0AWSMS = "Y"; /* Set 'screen modified' switch on*/
      end
    end
  end
   /* ******************************************/
   /* Check for errors, if clean - perform i/o*/
   /* ******************************************/
  if (NLXREC.NLXERRF == "Y")
    return; /* if edit errors do not update*/
  end
                                   /* ; No errors detected*/
  if (NC0AW01.NC0AWADM == "N" /* If not in 'add' mode*/
   && NC0AW01.NC0AWSMS == "Y")
    NC0A370(); /* Perform nc0am300 updates*/
    return;
  else /* In 'add' mode*/
    if (NC0AW01.NC0AWADM == "Y")
      if (converseVar.eventKey is enter)
        if (NC0AM300.XCTCD != " ")
          NC0AW03.NC0AWCTC[NC0AWCIX] = NC0AM300.XCTCD;
          NC0AW03.NC0AWZCD[NC0AWCIX] = NC0AM300.ZITCD;
          NC0AW03.NC0AWITL[NC0AWCIX] = NC0AM300.NCBLCINL;
          NC0AW03.NC0AWZDS[NC0AWCIX] = NC0AM300.ZITDESC;
          NC0AW03.NC0AWICD[NC0AWCIX] = NC0AM300.NC0AMICD;
        end
        NC0A380(); /* Perform all adds*/
        return;
      end
    end
    if (converseVar.eventKey is pf8)
      if (NC0AM300.XCTCD != " ")
        NC0AW03.NC0AWCTC[NC0AWCIX] = NC0AM300.XCTCD;
        NC0AW03.NC0AWZCD[NC0AWCIX] = NC0AM300.ZITCD;
        NC0AW03.NC0AWITL[NC0AWCIX] = NC0AM300.NCBLCINL;
        NC0AW03.NC0AWZDS[NC0AWCIX] = NC0AM300.ZITDESC;
        NC0AW03.NC0AWICD[NC0AWCIX] = NC0AM300.NC0AMICD;
        return;
      end
    end
  end
end // end NC0A320

// determine next action
Function NC0A330()
   /* ****************************************************/
   /* Determine next action on Covering Statement screen*/
   /* ****************************************************/
  ;
  NLXREC.NLXCPROC = "NC0A330";
  ;
  if (converseVar.eventKey is enter) /* Enter has been pressed*/
    if (NLXREC.NLXERRF != "Y") /* No errors detected*/
      NC0AW01.NC0AWOCT = 0; /* Set Order count to 0*/
      NC0AW01.NC0AWADM = "N"; /* Set add-mode to 'N'*/
      NLXREC.NLXBLDSC = "Y"; /* Set build-new-screen flag on*/
      NLXREC.NLXEOSF = "Y"; /* Set end-of-screen flag*/
      NLXREC.NLXCSCRN = "NC0AM100"; /* Base Info screen*/
      return;
    end
  end
  ;
   /* ************************/
   /* Scroll Backward Routine*/
   /* ************************/
  if (converseVar.eventKey is pf7) /* Reverse requested*/
    if (NC0AW01.NC0AWCIX > 1)
      if (NC0AM300.XCTCD != " ")
        converseLib.validationFailed(61); /* More incoterms exist*/
      end
      NC0AW01.NC0AWCIX = NC0AW01.NC0AWCIX - 1;
      NC0AM300.XCTCD = NC0AW03.NC0AWCTC[NC0AWCIX];
      NC0AM300.NC0AMICD = NC0AW03.NC0AWICD[NC0AWCIX];
      NC0AM300.ZITCD = NC0AW03.NC0AWZCD[NC0AWCIX];
      NC0AM300.ZITDESC = NC0AW03.NC0AWZDS[NC0AWCIX];
      NC0AM300.NCBLCINL = NC0AW03.NC0AWITL[NC0AWCIX];
      return;
    else
      converseLib.validationFailed(29);
                                   /* No reverse scrolling from top-of-file*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
   /* ************************/
   /* Scroll Forward Routine*/
   /* ************************/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    if (NC0AW01.NC0AWCIX < 12) /* Array maximum not yet reached*/
      if (NC0AW03.NC0AWCTC[NC0AWCIX] != " ") /* Array entries not exhausted*/
        NC0AW01.NC0AWCIX = NC0AW01.NC0AWCIX + 1;
        set NC0AM300.XCTCD cursor;
        if (NC0AW03.NC0AWCTC[NC0AWCIX] != " ")
          NC0AM300.XCTCD = NC0AW03.NC0AWCTC[NC0AWCIX];
          NC0AM300.NC0AMICD = NC0AW03.NC0AWICD[NC0AWCIX];
          NC0AM300.ZITCD = NC0AW03.NC0AWZCD[NC0AWCIX];
          NC0AM300.ZITDESC = NC0AW03.NC0AWZDS[NC0AWCIX];
          NC0AM300.NCBLCINL = NC0AW03.NC0AWITL[NC0AWCIX];
          ;
           /* Determine if there are more Incoterms present*/
          ;
          if (NC0AW01.NC0AWCIX < 12) /* jab 8/13/90 increased to 12 from 7*/
            NC0AW01.NC0AWCIX = NC0AW01.NC0AWCIX + 1;
            if (NC0AW03.NC0AWCTC[NC0AWCIX] != " ")
              converseLib.validationFailed(61);
            end
            NC0AW01.NC0AWCIX = NC0AW01.NC0AWCIX - 1;
          end
          return;
        else
          NC0AM300.XCTCD = " ";
          NC0AM300.NC0AMICD = " ";
          NC0AM300.ZITCD = " ";
          NC0AM300.ZITDESC = " ";
          NC0AM300.NCBLCINL = " ";
          return;
        end
      else
        converseLib.validationFailed(30); /* No forward scrolling with blank on screen*/
        NLXREC.NLXERRF = "Y";
        return;
      end
    else
      converseLib.validationFailed(30); /* No forward scrolling from bottom-of-file*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf19)
    NC0AW01.NC0AWOCT = 0;
    NC0AW01.NC0AWFCT = 0; /* Re-read Related Orders re-entering*/
    NC0AW01.NC0AWORX = 1;
    NLXREC.NLXBLDSC = "Y";
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NC0AM200"; /* Related Orders screen*/
    return;
  end
end // end NC0A330

// Update screen 3 related recs
Function NC0A370()
   /* **************************************/
   /* Update records related to screen 3*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A370";
  ;
  XX0XS01(); /* Get current system date & time*/
  VLCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VLCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VLCHDR01.XXXUSRID = COMMAREA.CAUSERID;
  ;
   /* ***************************************/
   /* Load all fields (1) to L/C Header*/
   /* ***************************************/
  if (NC0AM300.NCALCQTY != VLCHDR01.NCALCQTY) /* Unit quantity changed?*/
    VLCHDR01.NCALCQTY = NC0AM300.NCALCQTY;
    NC0AS16(); /* Update ncarec*/
    ;
  end
   /* *************************************************/
   /* Process udpates to NIL L/C Inco Terms Countries*/
   /* *************************************************/
  NC0AW01.NC0AWZID = "N"; /* Set incoterm delete switch off*/
  if (NC0AM300.XCTCD != NC0AW03.NC0AWCTC[NC0AWCIX])
    if (NC0AM300.XCTCD != " ") /* Country code is given*/
      /* ************************/
       /* Does it already exist?*/
      /* ************************/
      VLCZIT01.NCALCIID = VLCHDR01.NCALCIID; /* Build key*/
      VLCZIT01.XCTCD = NC0AM300.XCTCD;
      ;
      NC0AS23(); /* Select unique - ncbrec*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* Doesn't exist yet*/
        /* **************/
         /* Add to table*/
        /* **************/
        VLCZIT01.ZITCD = NC0AM300.ZITCD; /* Load fields*/
        VLCZIT01.NCBLCINL = NC0AM300.NCBLCINL;
        VLCZIT01.ZZZSDT = XX0XW01.XX0XWDAT;
        ;
        NC0AS24(); /* Add unique - ncbrec*/
        ;
      else
        if (SQLCA.VAGen_SQLCODE == 0)
          converseLib.validationFailed(59); /* Inco term country already exists*/
          NLXREC.NLXERRF = "Y";
          return;
        end
      end
    else
      ;
       /* Delete is being requested on Inco Terms*/
      ;
      VLCZIT01.XCTCD = NC0AW03.NC0AWCTC[NC0AWCIX]; /* Build key*/
      VLCZIT01.NCALCIID = VLCHDR01.NCALCIID;
      ;
      NC0AS25(); /* Delete unique Incoterms*/
      ;
      NC0AS57(); /* Reload Incoterms array*/
      ;
      if (NC0AW01.NC0AWCIX > 1 /* Adjust array index only*/
       && converseVar.eventKey is pf8) /* if scrolling forward*/
        NC0AW01.NC0AWCIX = NC0AW01.NC0AWCIX - 1;
      end
    end
  end
   /* *********************************************/
   /* Check if the country code has been replaced*/
   /* *********************************************/
  if (NC0AM300.XCTCD != NC0AW03.NC0AWCTC[NC0AWCIX] /* Country changed*/
   && NC0AW01.NC0AWZID != "Y"                      /* Not deleteing*/
   && NC0AM300.XCTCD != " "                        /* Non-spaces country given*/
   && NC0AW03.NC0AWCTC[NC0AWCIX] != " ")           /* One already existed*/
    VLCZIT01.NCALCIID = VLCHDR01.NCALCIID;
    VLCZIT01.XCTCD = NC0AW03.NC0AWCTC[NC0AWCIX];
    ;
    NC0AS25(); /* Delete unique - ncbrec*/
    ;
  end
   /* **************************************/
   /* If a key change was made, load array*/
   /* **************************************/
  if (NC0AM300.XCTCD != NC0AW03.NC0AWCTC[NC0AWCIX]
   && NC0AM300.XCTCD != " "
   && NC0AW01.NC0AWZID != "Y")
    NC0AW03.NC0AWCTC[NC0AWCIX] = NC0AM300.XCTCD;
    NC0AW03.NC0AWZCD[NC0AWCIX] = NC0AM300.ZITCD;
    NC0AW03.NC0AWITL[NC0AWCIX] = NC0AM300.NCBLCINL;
  end
   /* ********************************************/
   /* Check for changes other than key on ncbrec*/
   /* ********************************************/
  if (NC0AM300.XCTCD == NC0AW03.NC0AWCTC[NC0AWCIX]) /* Same country code*/
    if (NC0AM300.ZITCD != NC0AW03.NC0AWZCD[NC0AWCIX] /* Changed Incoterm*/
     || NC0AM300.NCBLCINL != NC0AW03.NC0AWITL[NC0AWCIX]) /* or location*/
      VLCZIT01.NCALCIID = VLCHDR01.NCALCIID;
      VLCZIT01.XCTCD = NC0AM300.XCTCD;
      VLCZIT01.ZITCD = NC0AM300.ZITCD;
      VLCZIT01.NCBLCINL = NC0AM300.NCBLCINL;
      VLCZIT01.ZZZCHGCT = NC0AW03.NC0AWCCT[NC0AWCIX];
      VLCZIT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VLCZIT01.ZZZCHGTM = XX0XW01.XX0XWTIM;
      ;
      NC0AS26(); /* Update unique - ncbrec*/
      ;
      NC0AW03.NC0AWCCT[NC0AWCIX] = VLCZIT01.ZZZCHGCT;
      NC0AW03.NC0AWZCD[NC0AWCIX] = VLCZIT01.ZITCD;
      NC0AW03.NC0AWITL[NC0AWCIX] = VLCZIT01.NCBLCINL;
    end
  end
   /* ********************************************/
   /* Update comment lines that may have changed*/
   /* ********************************************/
   /* Note: This routine is intended to maintenance*/
   /* the Covering Statements table so that there*/
   /* will be no trailing rows containing spaces only.*/
   /* ***************************************************/
  NC0AW01.NC0AWCSW = "N"; /* Set Cov/Stmt write switch off*/
  NC0AW01.NC0AWSCX = 13; /* Load screen index*/
  NC0AW01.NC0AWIDX = 14; /* Load w/s array index*/
  while (NC0AW01.NC0AWSCX > 0) /* Loop thru comments*/
    if (NC0AM300.NCDCOMNT[NC0AWSCX] != NC0AW04.NC0AWCOM[NC0AWIDX]
     /* Changed?*/
     || NC0AW01.NC0AWCSW == "Y") /* or non-blank line found*/
      VLCCOM01.NCALCIID = VLCHDR01.NCALCIID; /* Build key*/
      VLCCOM01.NCDCMSEQ = NC0AW01.NC0AWIDX;
      /* ********************************/
       /* Did this comment exist before?*/
      /* ********************************/
      ;
      NC0AS35(); /* Select unique - ncdrec*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0 /* If Comment existed...*/
       && NC0AM300.NCDCOMNT[NC0AWSCX] != " ") /* and still does*/
        if (VLCCOM01.NCDCOMNT != NC0AM300.NCDCOMNT[NC0AWSCX])
          NC0AW01.NC0AWCSW = "Y"; /* Set non-blank found switch*/
          VLCCOM01.NCDCOMNT = NC0AM300.NCDCOMNT[NC0AWSCX]; /* Load*/
          VLCCOM01.ZZZCHGCT = NC0AW04.NC0AWCCT[NC0AWIDX]; /* fields*/
          VLCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
          VLCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
          ;
          NC0AS36(); /* Update unique - ncdrec*/
          ;
        end
      else
        if (SQLCA.VAGen_SQLCODE == 0 /* If Comment existed...*/
         && NC0AM300.NCDCOMNT[NC0AWSCX] == " ") /* and is now spaces*/
          if (NC0AW01.NC0AWCSW == "N") /* and is a trailing space*/
            ;
            NC0AS32(); /* Delete existing comment*/
            ;
          else
            ;
            if (VLCCOM01.NCDCOMNT != NC0AM300.NCDCOMNT[NC0AWSCX])
              VLCCOM01.NCDCOMNT = NC0AM300.NCDCOMNT[NC0AWSCX]; /* Load*/
              VLCCOM01.ZZZCHGCT = NC0AW04.NC0AWCCT[NC0AWIDX];
                                                                  /* fields*/
              VLCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
              VLCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
              NC0AS36(); /* Update unique - ncdrec*/
              ;
            end
          end
        else
          /* **********************************/
           /* If comment was not found, add it*/
          /* **********************************/
          if (SQLCA.VAGen_SQLCODE == 100) /* If comment was not found*/
            VLCCOM01.NCDCOMNT = NC0AM300.NCDCOMNT[NC0AWSCX];
            VLCCOM01.ZZZSDT = XX0XW01.XX0XWDAT;
            NC0AW01.NC0AWCSW = "Y";
            ;
            NC0AS28(); /* Add unique - ncdrec*/
            ;
          end
        end
      end
    end
    if (NC0AM300.NCDCOMNT[NC0AWSCX] != " ") /* unchanged, non-spaces*/
      NC0AW01.NC0AWCSW = "Y"; /* set write switch on*/
    else
      if (NC0AW01.NC0AWCSW == "N")
        VLCCOM01.NCALCIID = VLCHDR01.NCALCIID; /* Build key*/
        VLCCOM01.NCDCMSEQ = NC0AW01.NC0AWIDX;
        ;
        NC0AS35(); /* Select unique - ncdrec*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0) /* If Comment existed...*/
          ;
          NC0AS32(); /* Delete existing comment*/
          ;
        end
      end
    end
    NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX - 1;
    NC0AW01.NC0AWSCX = NC0AW01.NC0AWSCX - 1;
  end
   /* *********************************/
   /* Process the Short Comment field*/
   /* *********************************/
  ;
  NC0AW01.NC0AWIDX = 1;
  if (NC0AM300.NC0AMCSH != NC0AW04.NC0AWCOM[NC0AWIDX] /* Comment changed?*/
   || NC0AW01.NC0AWCSW == "Y")                        /* or write switch is on*/
    VLCCOM01.NCDCMSEQ = 1; /* Build key*/
    VLCCOM01.NCALCIID = VLCHDR01.NCALCIID;
    NC0AS35(); /* Select unique - ncdrec*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      if (VLCCOM01.NCDCOMNT != NC0AM300.NC0AMCSH)
        VLCCOM01.NCDCMSEQ = 1;
        VLCCOM01.ZZZCHGCT = NC0AW04.NC0AWCCT[NC0AWIDX];
        VLCCOM01.NCDCOMNT = NC0AM300.NC0AMCSH;
        VLCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
        VLCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
        ;
        NC0AS36(); /* Update unique - ncdrec*/
        ;
      end
    else
      /* ****************************************/
       /* Short Comment record not found, add it*/
      /* ****************************************/
      VLCCOM01.ZZZSDT = XX0XW01.XX0XWDAT;
      VLCCOM01.NCDCOMNT = NC0AM300.NC0AMCSH;
      ;
      NC0AS28(); /* Add unique - ncdrec*/
      ;
    end
  end
   /* ************************************/
   /* If no errors are detected, proceed*/
   /* ************************************/
  if (NLXREC.NLXERRF != "Y")
    /* *****************************************/
     /* Check if ncarec has been updated yet...*/
    /* *****************************************/
    if (NC0AW01.NC0AWUCF != "Y")
      VLCHDR01.NCALCRID = NC0AM100.NCALCRID;
      VLCHDR01.KUCCOID = NC0AM100.KUCCOID;
      XX0XS01();
      VLCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VLCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
      VLCHDR01.NCALCADT = XX0XW01.XX0XWDAT;
      VLCHDR01.XXXUSRID = COMMAREA.CAUSERID;
      ;
      NC0AS16(); /* Update unique - ncarec*/
      ;
      NC0AW01.NC0AWUCF = "Y";
    end
  end
end // end NC0A370

// Write all L/C records
Function NC0A380()
   /* **************************************/
   /* Write all Letter of Credit records*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0A380";
   /* ******************************/
   /* Get the next internal L/C id*/
   /* ******************************/
  ;
  NC0AS37(); /* Update - ncbrec*/
  ;
   /* *************************************/
   /* Load all fields to main L/C DB, add*/
   /* *************************************/
  VLCHDR01.NCALCRID = NC0AM100.NCALCRID;
  VLCHDR01.NCALCIID = VNLCTL01.NLBNXLCI;
  VLCHDR01.NCAAIVCF = NC0AM100.NCAAIVCF;
  VLCHDR01.NCAIVCCF = "N";
  VLCHDR01.NCALCCLF = NC0AM100.NCALCCLF;
  ;
  VLCHDR01.NCALCRDT = NC0AW01.NC0AWRDT;
  ;
  VLCHDR01.NCALCAMT = NC0AM100.NCALCAMT;
  ;
  NC0AW01.NC0AWPC2 = NC0AM100.NCALTPCT;
  NC0AW01.NC0AWPC1 = 0;
  VLCHDR01.NCALTPCT = NC0AW01.NC0AWPCT;
  ;
  VLCHDR01.NCALCXDT = NC0AW01.NC0AWXDT;
  ;
  VLCHDR01.NCALCXPL = NC0AM100.NCALCXPL;
  ;
  VLCHDR01.OP1DSADT = NC0AW01.NC0AWADT;
  ;
  VLCHDR01.XXXUSRID = COMMAREA.CAUSERID;
  ;
  VLCHDR01.NCALCADT = NC0AW01.NC0AWCDT;
  ;
  VLCHDR01.NCALCIBK = NC0AM100.NCALCIBK;
  VLCHDR01.NCALCIBL = NC0AM100.NCALCIBL;
  VLCHDR01.NCALCQTY = NC0AM300.NCALCQTY; /* !!!*/
  ;
  XX0XS01();
  VLCHDR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VLCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VLCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  NC0AS27(); /* Add L/C Header*/
  ;
  ;
   /* ***************************************/
   /* Load all fields to NIL L/C Inco Terms*/
   /* ***************************************/
  VLCZIT01.NCALCIID = VLCHDR01.NCALCIID;
  NC0AW01.NC0AWCIX = 1;
  while (NC0AW01.NC0AWCIX < 13) /* jab 8/13/90 increased to 13 from 8*/
    if (NC0AW03.NC0AWCTC[NC0AWCIX] != " ")
      VLCZIT01.XCTCD = NC0AW03.NC0AWCTC[NC0AWCIX];
      VLCZIT01.ZITCD = NC0AW03.NC0AWZCD[NC0AWCIX];
      VLCZIT01.NCBLCINL = NC0AW03.NC0AWITL[NC0AWCIX];
      VLCZIT01.ZZZSDT = XX0XW01.XX0XWDAT;
      VLCZIT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VLCZIT01.ZZZCHGTM = XX0XW01.XX0XWTIM;
      ;
      NC0AS24(); /* Add unique ncbrec*/
      ;
    end
    NC0AW01.NC0AWCIX = NC0AW01.NC0AWCIX + 1;
  end
  ;
   /* ***************************************/
   /* Load all fields to NIL L/C Orders Xref*/
   /* ***************************************/
  VLCORD01.NCALCRID = NC0AM100.NCALCRID; /* Set up xref key*/
  VLCORD01.NCALCIID = VLCHDR01.NCALCIID;
  VLCORD01.KUCCOID = NC0AM100.KUCCOID;
  VLCORD01.ZZZSDT = XX0XW01.XX0XWDAT;
  VLCORD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VLCORD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  NC0AW01.NC0AWIDX = 1; /* Unload array*/
  while (NC0AW01.NC0AWIDX < 65)
    if (NC0AW02.NC0AWCUO[NC0AWIDX] != 0)
      VLCORD01.OP1CUOID = NC0AW02.NC0AWCUO[NC0AWIDX];
      VLCORD01.OP1NORID = NC0AW02.NC0AWNOR[NC0AWIDX];
      NC0AW01.NC0AWORD = NC0AW02.NC0AWCUO[NC0AWIDX];
      VLCORD01.OP1PARTN = NC0AW01.NC0AWPTN;
      NC0AS15(); /* Add unique - nccrec*/
      if (NC0AW02.NC0AWCUO[NC0AWIDX] > NC0AM100.OP1CUOID)
                                   /* Get highest order #*/
        NC0AM100.OP1CUOID = NC0AW02.NC0AWCUO[NC0AWIDX];
      end
    end
    NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
  end
  ;
   /* *****************************************/
   /* Write the Covering Statements if present*/
   /* *****************************************/
  NC0AW01.NC0AWSCX = 13; /* Reverse process array*/
  NC0AW01.NC0AWCSW = "N"; /* Set Cov/Stmt write switch off*/
  VLCCOM01.ZZZSDT = XX0XW01.XX0XWDAT;
  VLCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VLCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VLCCOM01.NCALCIID = VLCHDR01.NCALCIID; /* Build key*/
  while (NC0AW01.NC0AWSCX > 0)
    if (NC0AM300.NCDCOMNT[NC0AWSCX] != " ") /* Comment is non-spaces*/
      NC0AW01.NC0AWCSW = "Y";
    end
    if (NC0AW01.NC0AWCSW == "Y")
      VLCCOM01.NCDCMSEQ = NC0AW01.NC0AWSCX; /* Build key*/
      VLCCOM01.NCDCMSEQ = VLCCOM01.NCDCMSEQ + 1;
      VLCCOM01.NCDCOMNT = NC0AM300.NCDCOMNT[NC0AWSCX];
      ;
      NC0AS28(); /* Add unique - ncdrec*/
      ;
    end
    NC0AW01.NC0AWSCX = NC0AW01.NC0AWSCX - 1;
  end
  ;
   /* ***************************************/
   /* Write the Short Comment if present*/
   /* ***************************************/
  ;
  if (NC0AM300.NC0AMCSH != " " /* If Short Comment non-spaces*/
   || NC0AW01.NC0AWCSW == "Y")
    VLCCOM01.NCALCIID = VLCHDR01.NCALCIID; /* Build key*/
    VLCCOM01.NCDCMSEQ = 1;
    VLCCOM01.NCDCOMNT = NC0AM300.NC0AMCSH;
    VLCCOM01.ZZZSDT = XX0XW01.XX0XWDAT;
    VLCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VLCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    ;
    NC0AS28(); /* Add unique - ncdrec*/
    ;
  end
   /* ***************************************/
   /* Load all fields to NIL Long Address*/
   /* ***************************************/
  ;
  VLADDR01.NLATYPIN = "L"; /* Build Long Address key*/
  VLADDR01.NLABSIND = "B";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = 0;
  VLADDR01.NLASINT1 = VNLCTL01.NLBNXLCI;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = 0;
  VLADDR01.XXX-ADDR1 = NC0AM100.NLAADDR1; /* Load fields*/
  VLADDR01.XXX-ADDR2 = NC0AM100.NLAADDR2;
  VLADDR01.XXX-ADDR3 = NC0AM100.NLAADDR3;
  VLADDR01.XXX-ADDR4 = NC0AM100.NLAADDR4;
  VLADDR01.XXX-ADDR5 = NC0AM100.NLAADDR5;
  VLADDR01.XXX-ADDR6 = NC0AM100.NLAADDR6;
  VLADDR01.XCTCD = NC0AM100.XCTCD;
  VLADDR01.XSTCD = NC0AM100.XSTCD;
  VLADDR01.XXXZIP = NC0AM100.XXXZIP;
  VLADDR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VLADDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VLADDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  NC0AS29(); /* Add Long address*/
  ;
  NC0AW01.NC0AWTPM = "N"; /* Set Tol% modified during add off*/
  set NC0AM100.KUCCOID cursor;
end // end NC0A380

// Select Unique from NCAREC
Function NC0AS01()
   /* ************************/
   /* NCAREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS01";
  ;
  call "IO4260" ("S ", SQLCA, VLCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Read L/C Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS01

// Open cursor 1 - NCCREC
Function NC0AS02()
   /* ************************/
   /* NCCREC - Open cursor 1*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS02";
  ;
  call "IO4270" ("S1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Open xref cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS02

// Load/close cursor - NCCREC
Function NC0AS03()
   /* ************************/
   /* NCCREC - Load Cursor 1*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS03";
  ;
  call "IO4270" ("N1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Load Xref cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (NC0AW01.NC0AWONE == "Y")
      NC0AW01.NC0AWONE = "N";
    end
    if (VLCORD01.NCALCIID == VLCHDR01.NCALCIID)
      NC0AW01.NC0AWSAM = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      ;
      /* ************************/
       /* NCCREC - Close cursor 1*/
      /* ************************/
      NC0AS04();
      NC0AW01.NC0AWCOS = "N"; /* Set cursor switch off*/
    else
      NC0AW01.NC0AWOID = VLCORD01.OP1CUOID;
      NC0AW01.NC0AWNID = VLCORD01.OP1NORID;
      TA1REC.TA1TBLKE = NC0AW01.NC0AWCKE; /* database key*/
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
      XPNL005(); /* abend routine*/
      ;
    end
  end
end // end NC0AS03

// Close cursor - NCCREC
Function NC0AS04()
   /* ************************/
   /* NCCREC - Close cursor 1*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS04";
  ;
  call "IO4270" ("C1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Close Xref cursor 1*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS04

// Open cursor 2 - NCCREC
Function NC0AS05()
   /* ************************/
   /* NCCREC - Open cursor 2*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS05";
  ;
  call "IO4270" ("S2", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Open Xref cursor 2*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S2     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS05

// Load cursor 2 - NCCREC
Function NC0AS06()
   /* ************************/
   /* NCCREC - Load Cursor 2*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS06";
  ;
  call "IO4270" ("N2", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Load Xref cursor 2*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Successful read*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* Record not found*/
      TA1REC.TA1LOCAT[2] = "N2     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
      XPNL005(); /* abend routine*/
    else
      /* ************************/
       /* NCCREC - Close cursor 2*/
      /* ************************/
      NC0AW01.NC0AWCOS = "N"; /* Set cursor switch off*/
      ;
      call "IO4270" ("C2", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Close Xref cursor 2*/
      ;
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "C2     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NC0AS06

// Select Unique - KUCREC
Function NC0AS08()
   /* ************************/
   /* KUCREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS08";
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS08

// Select Unique from NLAREC
Function NC0AS09()
   /* ************************/
   /* NLAREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS09";
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Read Long Address*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS09

// Select Unique from OP1REC
Function NC0AS12()
   /* ************************/
   /* OP1REC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS12";
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Read Order record*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS12

// Delete Unique from NCCREC
Function NC0AS14()
   /* ************************/
   /* NCCREC - Delete Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS14";
  ;
  call "IO4270" ("D1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Delete unique Xref*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "D1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS14

// Add unique to NCCREC
Function NC0AS15()
   /* ************************/
   /* NCCREC - Add Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS15";
  ;
  call "IO4270" ("A ", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Add Xref*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS15

// Update Unique on NCAREC
Function NC0AS16()
   /* ************************/
   /* NCAREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS16";
  ;
  call "IO4260" ("U ", SQLCA, VLCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Update L/C Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS16

// Open cursor - NCBREC
Function NC0AS17()
   /* ************************/
   /* NCBREC - Open cursor*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS17";
  ;
  call "IO4290" ("S1", SQLCA, VLCZIT01) {isNoRefresh = yes, isExternal = yes}; /* Open Incoterms cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4290 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCZIT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS17

// Load cursor - NCBREC
Function NC0AS18()
   /* ************************/
   /* NCBREC - Load Cursor*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS18";
  ;
  call "IO4290" ("N1", SQLCA, VLCZIT01) {isNoRefresh = yes, isExternal = yes}; /* Load Incoterms cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4290 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VLCZIT01"; /* table view*/
      XPNL005(); /* abend routine*/
    else
      /* ************************/
       /* NCBREC - Close cursor 1*/
      /* ************************/
      ;
      call "IO4290" ("C1", SQLCA, VLCZIT01) {isNoRefresh = yes, isExternal = yes};
                                                    /* Close Incoterms curs*/
      ;
      NC0AW01.NC0AWCOS = "N"; /* Set cursor switch off*/
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4290 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VLCZIT01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NC0AS18

// Open cursor - NCDREC
Function NC0AS20()
   /* ************************/
   /* NCDREC - Open cursor*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS20";
  ;
  call "IO4280" ("S1", SQLCA, VLCCOM01) {isNoRefresh = yes, isExternal = yes}; /* Open comment cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4280 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS20

// Load cursor - NCDREC
Function NC0AS21()
   /* ************************/
   /* NCDREC - Load Cursor 1*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS21";
  ;
  call "IO4280" ("N1", SQLCA, VLCCOM01) {isNoRefresh = yes, isExternal = yes}; /* Load comment cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4280 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VLCCOM01"; /* table view*/
      XPNL005(); /* abend routine*/
    else
      /* ************************/
       /* NCDREC - Close cursor 1*/
      /* ************************/
      NC0AW01.NC0AWCOS = "N";
      ;
      call "IO4280" ("C1", SQLCA, VLCCOM01) {isNoRefresh = yes, isExternal = yes}; /* Close Comments curs*/
      ;
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4280 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VLCCOM01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NC0AS21

// Select Unique from NCBREC
Function NC0AS23()
   /* ************************/
   /* NCBREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS23";
  ;
  call "IO4290" ("S ", SQLCA, VLCZIT01) {isNoRefresh = yes, isExternal = yes}; /* Select unique Incoterms*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4290 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCZIT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS23

// Add unique to NCBREC
Function NC0AS24()
   /* ************************/
   /* NCBREC - Add Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS24";
  ;
  call "IO4290" ("A ", SQLCA, VLCZIT01) {isNoRefresh = yes, isExternal = yes}; /* Add Inco terms*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4290 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCZIT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS24

// Delete Unique from NCBREC
Function NC0AS25()
   /* **************************************/
   /* NCBREC - Delete unique -or- wildcard*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0AS25";
  ;
  call "IO4290" ("D ", SQLCA, VLCZIT01) {isNoRefresh = yes, isExternal = yes}; /* Delete Incoterms*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4290 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCZIT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS25

// Update Unique on NCBREC
Function NC0AS26()
   /* ************************/
   /* NCBREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS26";
  ;
  call "IO4290" ("U ", SQLCA, VLCZIT01) {isNoRefresh = yes, isExternal = yes}; /* Update Incoterms*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4290 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCZIT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS26

// Add unique to NCAREC
Function NC0AS27()
   /* ************************/
   /* NCAREC - Add Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS27";
  ;
  call "IO4260" ("A ", SQLCA, VLCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Add L/C Header*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS27

// Add unique to NCDREC
Function NC0AS28()
   /* ************************/
   /* NCDREC - Add Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS28";
  ;
  call "IO4280" ("A ", SQLCA, VLCCOM01) {isNoRefresh = yes, isExternal = yes}; /* Add Comments*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4280 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS28

// Add unique to NLAREC
Function NC0AS29()
   /* ************************/
   /* NLAREC - Add Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS29";
  ;
  call "IO4410" ("A ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Add Long Address*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS29

// Delete Unique from NCAREC
Function NC0AS30()
   /* ************************/
   /* NCAREC - Delete Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS30";
  ;
  call "IO4260" ("D ", SQLCA, VLCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Delete unique L/C Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS30

// Delete Wildcard from NCCREC
Function NC0AS31()
   /* ************************/
   /* NCCREC - Delete Wildcard*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS31";
  ;
  call "IO4270" ("D2", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Delete wildcard Xref*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D2     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS31

// Delete Unique from NCDREC
Function NC0AS32()
   /* ************************/
   /* NCDREC - Delete Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS32";
  ;
  call "IO4280" ("D ", SQLCA, VLCCOM01) {isNoRefresh = yes, isExternal = yes}; /* Delete unique Comment*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4280 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS32

// Delete Unique from NLAREC
Function NC0AS33()
   /* ************************/
   /* NLAREC - Delete Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS33";
  ;
  call "IO4410" ("D ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Delete unique Long Addr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS33

// Update Unique on NLAREC
Function NC0AS34()
   /* ************************/
   /* NLAREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS34";
  ;
  call "IO4410" ("U ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Update Long Addr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS34

// Select Unique from NCDREC
Function NC0AS35()
   /* ************************/
   /* NCDREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS35";
  ;
  call "IO4280" ("S ", SQLCA, VLCCOM01) {isNoRefresh = yes, isExternal = yes}; /* Read Comments*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4280 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS35

// Update Unique on NCDREC
Function NC0AS36()
   /* ************************/
   /* NCDREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS36";
  ;
  call "IO4280" ("U ", SQLCA, VLCCOM01) {isNoRefresh = yes, isExternal = yes}; /* Update Comments*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4280 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS36

// Update Unique on NLBREC
Function NC0AS37()
   /* ************************/
   /* NLBREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS37";
  ;
  call "IO4300" ("U1", SQLCA, VNLCTL01) {isNoRefresh = yes, isExternal = yes}; /* Update L/C Control*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4300 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNLCTL01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0AS37

// Find duplicates in W/S array
Function NC0AS38()
   /* ****************************************/
   /* Find duplicate Order numbers on Screen*/
   /* ****************************************/
  ;
  NLXREC.NLXCPROC = "NC0AS38";
  ;
  NC0AW01.NC0AWDDX = 1;
  ;
  while (NC0AW01.NC0AWDDX != 0
   && NC0AW01.NC0AWDDX < 29)
    if (NC0AM200.OP1CUOID[NC0AWSCX] in NC0AM200.OP1CUOID from NC0AWDDX)
      if (NC0AM200.OP1NORID[NC0AWSCX] == NC0AM200.OP1NORID[sysVar.arrayIndex])
        if (sysVar.arrayIndex != NC0AW01.NC0AWORX)
          set NC0AM200.OP1CUOID[NC0AWSCX] cursor, modified, bold;
          converseLib.validationFailed(67); /* Order # already exists on this L/C*/
          NLXREC.NLXERRF = "Y";
          NC0AW01.NC0AWDDX = 0;
        else
          NC0AW01.NC0AWDDX = sysVar.arrayIndex;
          NC0AW01.NC0AWDDX = NC0AW01.NC0AWDDX + 1;
        end
      else
        NC0AW01.NC0AWDDX = NC0AW01.NC0AWDDX + 1;
      end
    else
      NC0AW01.NC0AWDDX = sysVar.arrayIndex;
    end
  end
end // end NC0AS38

// Find duplicate orders (add)
Function NC0AS39()
   /* ****************************************/
   /* Find duplicate Orders on screen(add)*/
   /* ****************************************/
  ;
  NLXREC.NLXCPROC = "NC0AS39";
  ;
  NC0AW01.NC0AWDDX = 1;
  ;
  while (NC0AW01.NC0AWDDX != 0
   && NC0AW01.NC0AWDDX < 29)
    if (NC0AM200.OP1CUOID[NC0AWIDX] in NC0AM200.OP1CUOID from NC0AWDDX)
      if (NC0AM200.OP1NORID[NC0AWIDX] == NC0AM200.OP1NORID[sysVar.arrayIndex])
        if (sysVar.arrayIndex != NC0AW01.NC0AWIDX)
          set NC0AM200.OP1CUOID[NC0AWIDX] cursor, modified, bold;
          converseLib.validationFailed(67); /* Order # already exists on this L/C*/
          NLXREC.NLXERRF = "Y";
          NC0AW01.NC0AWDDX = 0;
        else
          NC0AW01.NC0AWDDX = sysVar.arrayIndex;
          NC0AW01.NC0AWDDX = NC0AW01.NC0AWDDX + 1;
        end
      else
        NC0AW01.NC0AWDDX = NC0AW01.NC0AWDDX + 1;
      end
    else
      NC0AW01.NC0AWDDX = sysVar.arrayIndex;
    end
  end
end // end NC0AS39

// edit for at least 1 order
Function NC0AS40()
  NLXREC.NLXCPROC = "NC0AS40";
  ;
   /* ****************************************/
   /* edit to make sure at least one order exists*/
   /* ****************************************/
  ;
  NC0AW01.NC0AWIDX = 1;
  NC0AW01.NC0AWSMS = "N";
  while (NC0AW01.NC0AWIDX < 29) /* check entire screen*/
    if (NC0AM200.OP1CUOID[NC0AWIDX] != 0)
      NC0AW01.NC0AWSMS = "Y";
    end
    NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
  end
  ;
  if (NC0AW01.NC0AWSMS == "N") /* No Order present on screen*/
    if (NC0AW01.NC0AWLIX == 1) /* user on first screen of orders*/
      NC0AW01.NC0AWIDX = 29;
      while (NC0AW01.NC0AWIDX < 65) /* check rest of array*/
        if (NC0AW02.NC0AWCUO[NC0AWIDX] != 0)
          NC0AW01.NC0AWSMS = "Y";
        end
        NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
      end
      if (NC0AW01.NC0AWSMS == "N") /* No Orders anywhere*/
        set NC0AM200.OP1CUOID[1] cursor, modified, bold;
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(66); /* At least one order must be present*/
      end
    end
    if (NC0AW01.NC0AWLIX == 29) /* user on second screen of orders*/
      NC0AW01.NC0AWIDX = 1;
      while (NC0AW01.NC0AWIDX < 29) /* check first part of array*/
        if (NC0AW02.NC0AWCUO[NC0AWIDX] != 0)
          NC0AW01.NC0AWSMS = "Y";
        end
        NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
      end
      if (NC0AW01.NC0AWSMS == "N") /* still no orders found*/
        NC0AW01.NC0AWIDX = 57;
        while (NC0AW01.NC0AWIDX < 65) /* check last part of array*/
          if (NC0AW02.NC0AWCUO[NC0AWIDX] != 0)
            NC0AW01.NC0AWSMS = "Y";
          end
          NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
        end
        if (NC0AW01.NC0AWSMS == "N") /* No Order present anywhere*/
          set NC0AM200.OP1CUOID[1] cursor, modified, bold;
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(66); /* At least one order must be present*/
        end
      end
    end
    if (NC0AW01.NC0AWLIX == 57) /* user on third screen of orders*/
      NC0AW01.NC0AWIDX = 1;
      while (NC0AW01.NC0AWIDX < 57) /* check rest of array*/
        if (NC0AW02.NC0AWCUO[NC0AWIDX] != 0)
          NC0AW01.NC0AWSMS = "Y";
        end
        NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
      end
      if (NC0AW01.NC0AWSMS == "N") /* No Orders anywhere*/
        set NC0AM200.OP1CUOID[1] cursor, modified, bold;
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(66); /* At least one order must be present*/
      end
    end
  end
  ;
end // end NC0AS40

// bottom justify address
Function NC0AS41()
  NLXREC.NLXCPROC = "NC0AS41";
  ;
   /* ****************************************/
   /* bottom justify address as needed*/
   /* ****************************************/
  ;
  if (NC0AM100.NLAADDR2 == " ") /* if addr line 2 blank*/
    NC0AM100.NLAADDR2 = NC0AM100.NLAADDR1; /* move addr1 to addr2*/
    NC0AM100.NLAADDR1 = " "; /* blank out addr1*/
  end /* end of "if" statement*/
  if (NC0AM100.NLAADDR3 == " ") /* if addr line 3 blank*/
    NC0AM100.NLAADDR3 = NC0AM100.NLAADDR2; /* move addr2 to addr3*/
    NC0AM100.NLAADDR2 = NC0AM100.NLAADDR1; /* move addr1 to addr2*/
    NC0AM100.NLAADDR1 = " "; /* blank out addr1*/
  end /* end of "if" statement*/
  if (NC0AM100.NLAADDR4 == " ") /* if addr line 4 blank*/
    NC0AM100.NLAADDR4 = NC0AM100.NLAADDR3; /* move addr3 to addr4*/
    NC0AM100.NLAADDR3 = NC0AM100.NLAADDR2; /* move addr2 to addr3*/
    NC0AM100.NLAADDR2 = NC0AM100.NLAADDR1; /* move addr1 to addr2*/
    NC0AM100.NLAADDR1 = " "; /* blank out addr1*/
  end /* end of "if" statement*/
  if (NC0AM100.NLAADDR5 == " ") /* etc, etc*/
    NC0AM100.NLAADDR5 = NC0AM100.NLAADDR4;
    NC0AM100.NLAADDR4 = NC0AM100.NLAADDR3;
    NC0AM100.NLAADDR3 = NC0AM100.NLAADDR2;
    NC0AM100.NLAADDR2 = NC0AM100.NLAADDR1;
    NC0AM100.NLAADDR1 = " ";
  end
  if (NC0AM100.NLAADDR6 == " ")
    NC0AM100.NLAADDR6 = NC0AM100.NLAADDR5;
    NC0AM100.NLAADDR5 = NC0AM100.NLAADDR4;
    NC0AM100.NLAADDR4 = NC0AM100.NLAADDR3;
    NC0AM100.NLAADDR3 = NC0AM100.NLAADDR2;
    NC0AM100.NLAADDR2 = NC0AM100.NLAADDR1;
    NC0AM100.NLAADDR1 = " ";
  end
  ;
end // end NC0AS41

// Perform NCAREC updates
Function NC0AS50()
   /* ************************/
   /* Perform NCAREC updates*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS50";
  ;
  if (NC0AM100.NCAAIVCF != VLCHDR01.NCAAIVCF)
                                   /* If Invoicing Closed flag changed*/
    VLCHDR01.NCAAIVCF = NC0AM100.NCAAIVCF;
  end
  if (NC0AM100.NCALCCLF != VLCHDR01.NCALCCLF) /* If L/C Closed flag changed*/
    VLCHDR01.NCALCCLF = NC0AM100.NCALCCLF;
  end
  if (NC0AW01.NC0AWRDT != VLCHDR01.NCALCRDT) /* If L/C Received date changed*/
    VLCHDR01.NCALCRDT = NC0AW01.NC0AWRDT;
  end
  if (NC0AM100.NCALCAMT != VLCHDR01.NCALCAMT) /* If L/C Amount changed*/
    VLCHDR01.NCALCAMT = NC0AM100.NCALCAMT;
  end
  if (NC0AM100.NCALTPCT != VLCHDR01.NCALTPCT) /* If Tolerance % changed*/
    NC0AW01.NC0AWPC1 = 0;
    NC0AW01.NC0AWPC2 = NC0AM100.NCALTPCT;
    VLCHDR01.NCALTPCT = NC0AW01.NC0AWPCT;
  end
  if (NC0AW01.NC0AWXDT != VLCHDR01.NCALCXDT) /* If ExpirDt changed*/
    VLCHDR01.NCALCXDT = NC0AW01.NC0AWXDT;
  end
  if (NC0AM100.NCALCXPL != VLCHDR01.NCALCXPL) /* If Expir place changed*/
    VLCHDR01.NCALCXPL = NC0AM100.NCALCXPL;
  end
  if (NC0AW01.NC0AWADT != VLCHDR01.OP1DSADT)
                                   /* If dont-ship-after date changed*/
    VLCHDR01.OP1DSADT = NC0AW01.NC0AWADT;
  end
  ;
  if (NC0AM100.NCALCIBK != VLCHDR01.NCALCIBK) /* If L/C Bank changed*/
    VLCHDR01.NCALCIBK = NC0AM100.NCALCIBK;
  end
  if (NC0AM100.NCALCIBL != VLCHDR01.NCALCIBL) /* If L/C Bank location changed*/
    VLCHDR01.NCALCIBL = NC0AM100.NCALCIBL;
  end
  ;
  XX0XS01(); /* Get current system time & date*/
  VLCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VLCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VLCHDR01.NCALCADT = XX0XW01.XX0XWDAT; /* Load L/C changed date*/
  VLCHDR01.XXXUSRID = COMMAREA.CAUSERID; /* Load L/C changed by user*/
  ;
  NC0AS16(); /* Update unique - ncarec*/
  ;
  NC0AW01.NC0AWUCF = "Y"; /* Set update complete flag on*/
end // end NC0AS50

// Perform NLAREC Updates
Function NC0AS51()
   /* ************************/
   /* Perform NLAREC updates*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0AS51";
  ;
   /* ********************************************/
   /* Prepare for and update Long Address record*/
   /* ********************************************/
  VLADDR01.NLATYPIN = "L";
  VLADDR01.NLABSIND = "B";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = 0;
  VLADDR01.NLASINT1 = VLCHDR01.NCALCIID;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = 0;
  ;
  if (NC0AM100.NLAADDR1 != VLADDR01.XXX-ADDR1) /* If addr line 1 changed*/
    VLADDR01.XXX-ADDR1 = NC0AM100.NLAADDR1;
  end
  ;
  if (NC0AM100.NLAADDR2 != VLADDR01.XXX-ADDR2) /* If addr line 2 changed*/
    VLADDR01.XXX-ADDR2 = NC0AM100.NLAADDR2;
  end
  ;
  if (NC0AM100.NLAADDR3 != VLADDR01.XXX-ADDR3) /* If addr line 3 changed*/
    VLADDR01.XXX-ADDR3 = NC0AM100.NLAADDR3;
  end
  ;
  if (NC0AM100.NLAADDR4 != VLADDR01.XXX-ADDR4) /* If addr line 4 changed*/
    VLADDR01.XXX-ADDR4 = NC0AM100.NLAADDR4;
  end
  ;
  if (NC0AM100.NLAADDR5 != VLADDR01.XXX-ADDR5) /* If addr line 5 changed*/
    VLADDR01.XXX-ADDR5 = NC0AM100.NLAADDR5;
  end
  ;
  if (NC0AM100.NLAADDR6 != VLADDR01.XXX-ADDR6) /* If addr line 6 changed*/
    VLADDR01.XXX-ADDR6 = NC0AM100.NLAADDR6;
  end
  ;
  if (NC0AM100.XCTCD != VLADDR01.XCTCD) /* If country code changed*/
    VLADDR01.XCTCD = NC0AM100.XCTCD;
  end
  ;
  if (NC0AM100.XSTCD != VLADDR01.XSTCD) /* If state abbr changed*/
    VLADDR01.XSTCD = NC0AM100.XSTCD;
  end
  ;
  if (NC0AM100.XXXZIP != VLADDR01.XXXZIP) /* If country code changed*/
    VLADDR01.XXXZIP = NC0AM100.XXXZIP;
  end
  ;
  XX0XS01(); /* Get current date & time*/
  VLADDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VLADDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  NC0AS34(); /* Update unique - nlarec*/
  ;
end // end NC0AS51

// Perform delete all function
Function NC0AS52()
   /* *******************************/
   /* Perform 'Delete all' function*/
   /* *******************************/
  ;
  NLXREC.NLXCPROC = "NC0AS52";
  ;
   /* ***************************************/
   /* Set up and execute 'delete all' logic*/
   /* ***************************************/
  VLCHDR01.KUCCOID = NC0AM100.KUCCOID;
  ;
  NC0AS30(); /* Delete unique - ncarec*/
  ;
   /* ***************************/
   /* Delete the L/C Inco Terms*/
   /* ***************************/
  VLCZIT01.NCALCIID = VLCHDR01.NCALCIID;
  VLCZIT01.XCTCD = "****"; /* Wild card delete*/
  ;
  NC0AS25(); /* Delete wildcard - ncbrec*/
  ;
   /* ******************************/
   /* Delete the Orders - L/C xref*/
   /* ******************************/
  VLCORD01.NCALCIID = VLCHDR01.NCALCIID;
  ;
  NC0AS31(); /* Delete wildcard - nccrec*/
  ;
   /* ***************************************/
   /* Delete the NIL L/C Comments*/
   /* ***************************************/
  VLCCOM01.NCALCIID = VLCHDR01.NCALCIID;
  VLCCOM01.NCDCMSEQ = 1;
  while (VLCCOM01.NCDCMSEQ < 15)
    ;
    NC0AS32(); /* Delete unique - ncdrec*/
    ;
    VLCCOM01.NCDCMSEQ = VLCCOM01.NCDCMSEQ + 1;
  end
   /* ************************/
   /* Delete Long Address*/
   /* ************************/
  ;
  VLADDR01.NLATYPIN = "L";
  VLADDR01.NLABSIND = "B";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = 0;
  VLADDR01.NLASINT1 = VLCHDR01.NCALCIID;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = 0;
  ;
  NC0AS33(); /* Delete unique - nlarec*/
  ;
end // end NC0AS52

// Lookup customer during 'add'
Function NC0AS53()
   /* ******************************/
   /* Lookup Customer during 'add'*/
   /* ******************************/
  ;
  NLXREC.NLXCPROC = "NC0AS53";
  ;
  KUCREC.KUCCOID = NC0AM100.KUCCOID; /* Load Customer key*/
  ;
  NC0AS08(); /* Read Customer record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Customer found*/
    ;
    if (KUCREC.XAUCD == "31" /* Account class MUST*/
     || KUCREC.XAUCD == "32" /* be 31, 32 or 33*/
     || KUCREC.XAUCD == "33") /* for NIL Customers*/
      ;
      if (KUCREC.XXXSTAT == "A") /* Customer MUST be active*/
        ;
        NC0AW01.NC0AWKCH = "Y"; /* 'Key' changed*/
        NC0AW01.NC0AWADM = "Y"; /* Puts us in 'add' mode*/
        NC0AM100.NCALCCLF = "N"; /* Default 'add' value*/
        NC0AM100.NCAAIVCF = "N"; /* Default 'add' value*/
        set NC0AW02 empty;
        set NC0AW03 empty;
        set NC0AW04 empty;
        set VLCHDR01 empty;
        set VLCZIT01 empty;
        set VLCORD01 empty;
        set VLCCOM01 empty;
        set NC0AM100.NCALCRID cursor, normal;
        return;
      else
        set NC0AM100.KUCCOID cursor, modified, bold;
        converseLib.validationFailed(13); /* Customer Inactive*/
        NLXREC.NLXERRF = "Y";
        return;
      end
    else
      set NC0AM100.KUCCOID cursor, modified, bold;
      converseLib.validationFailed(13); /* Invalid Account class*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  else
    set NC0AM100.KUCCOID cursor, modified, bold;
    converseLib.validationFailed(13); /* Customer number nrf during 'add'*/
    NLXREC.NLXERRF = "Y";
    return;
  end
end // end NC0AS53

// Lookup L/C Header
Function NC0AS56()
   /* **************************************/
   /* Function key entry, lookup L/C Header*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0AS56";
  ;
  NC0AW01.NC0AWADM = "N";
  ;
   /* ********************************/
   /* Load NCWREC data to key fields*/
   /* ********************************/
  VLCHDR01.NCALCRID = NCWREC.NCALCRID; /* Load key*/
  VLCHDR01.KUCCOID = NCWREC.KUCCOID;
  ;
  NC0AS01(); /* Select unique - ncarec*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
     /* next sentence*/
  else
    NC0AM100.NCALCRID = VLCHDR01.NCALCRID;
    NC0AM100.KUCCOID = VLCHDR01.KUCCOID;
  end
end // end NC0AS56

// Re-load ZIT array after delete
Function NC0AS57()
   /* ************************/
   /* Clear Inco Terms array*/
   /* ************************/
  set NC0AW03 empty;
  NC0AW01.NC0AWZID = "Y"; /* Set incoterms delete switch on*/
  ;
   /* ****************************/
   /* Open cursor for Inco Terms*/
   /* ****************************/
  NC0AS17(); /* Open cursor - ncbrec*/
   /* ****************************/
   /* Fetch all rows Inco Terms*/
   /* ****************************/
  VLCZIT01.NCALCIID = VLCHDR01.NCALCIID;
  NC0AW01.NC0AWCOS = "Y";
  NC0AW01.NC0AWIDX = 1;
   /* WHILE NC0AW01.NC0AWIDX LT 8;*/
  while (NC0AW01.NC0AWIDX < 13 /* There now exists upto 12 incoterms*/
   && NC0AW01.NC0AWCOS == "Y")
    NC0AS18(); /* Load cursor - ncbrec*/
    if (NC0AW01.NC0AWCOS == "Y") /* If cursor still open...*/
      NC0AW03.NC0AWCCT[NC0AWIDX] = VLCZIT01.ZZZCHGCT;
      NC0AW03.NC0AWCTC[NC0AWIDX] = VLCZIT01.XCTCD;
      if (VLCZIT01.XCTCD in XCTTBL.XCTCD)
        NC0AM300.NC0AMICD = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex != 0)
        NC0AW03.NC0AWICD[NC0AWIDX] = NC0AM300.NC0AMICD;
      end
      ;
      NC0AW03.NC0AWZCD[NC0AWIDX] = VLCZIT01.ZITCD;
      if (VLCZIT01.ZITCD in ZITTBL.ZITCD)
        NC0AM300.ZITDESC = ZITTBL.ZITDESC[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex != 0)
        NC0AW03.NC0AWZDS[NC0AWIDX] = NC0AM300.ZITDESC;
      end
      ;
      NC0AW03.NC0AWITL[NC0AWIDX] = VLCZIT01.NCBLCINL;
    end
    NC0AW01.NC0AWIDX = NC0AW01.NC0AWIDX + 1;
  end
  NC0AM300.XCTCD = NC0AW03.NC0AWCTC[NC0AWCIX];
  NC0AM300.NC0AMICD = NC0AW03.NC0AWICD[NC0AWCIX];
  NC0AM300.ZITCD = NC0AW03.NC0AWZCD[NC0AWCIX];
  NC0AM300.ZITDESC = NC0AW03.NC0AWZDS[NC0AWCIX];
  NC0AM300.NCBLCINL = NC0AW03.NC0AWITL[NC0AWCIX];
  ;
end // end NC0AS57

// get all l/cs attached to order
Function NC0AS58()
  ;
  NLXREC.NLXCPROC = "NC0AS58";
  ;
  ;
   /* check for lc on order*/
  NC0AS02(); /* select scan-1 on lc/order xref*/
  ;
  ;
  NC0AW01.NC0AWCOS = "Y";
  NC0AW01.NC0AWONE = "Y";
  NC0AW01.NC0AWSAM = "N";
  ;
   /* fetch nccrec rows*/
  while (NC0AW01.NC0AWCOS == "Y")
    NC0AS03(); /* fetch row from lc/order xref*/
  end
  ;
  ;
  ;
end // end NC0AS58

// Check for exit w/o updates
Function NC0AS80()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NC0AS80";
  ;
   /* **************************************/
   /* Check for exiting without updates...*/
   /* **************************************/
  if (converseVar.eventKey is pf3) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 3)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 3; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf4) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 4)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 4; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (converseVar.eventKey is pf5) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 5)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 5; /* Exit changed...*/
      /* MOVE 'WARNING - ABT TO DLT - PF5 TO CONFRM' NC0AM100.EZEMSG;*/
      converseLib.validationFailed(99); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf13) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 13)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 13; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf15) /* Same function key?*/
    if (NC0AW01.NC0AWADM != "Y")
      if (NC0AW01.NC0AWEXT == 15)
        NC0AW01.NC0AWEXT = 0;
        return;
      else
        NC0AW01.NC0AWEXT = 15; /* Exit changed...*/
        converseLib.validationFailed(53); /* Warn user about lost updates*/
        NLXREC.NLXERRF = "Y";
      end
    else
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is enter) /* Enter key pressed*/
    if (NC0AW01.NC0AWEXT == 99)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      if (NC0AM100.CATOAP != " ")
        NC0AW01.NC0AWEXT = 99; /* Exit changed...*/
        converseLib.validationFailed(53); /* Warn user about lost updates*/
        NLXREC.NLXERRF = "Y";
      end
    end
  end
end // end NC0AS80

// Check for exit w/o updates(2)
Function NC0AS81()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NC0AS81";
  ;
   /* **************************************/
   /* Check for exiting without updates...*/
   /* **************************************/
  if (converseVar.eventKey is pf3) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 3)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 3; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf4) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 4)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 4; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf13) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 13)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 13; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf17) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 17)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 17; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is enter) /* Same function?*/
    if (NC0AM200.CATOAP != " ")
      if (NC0AW01.NC0AWEXT == 99)
        NC0AW01.NC0AWEXT = 0;
        return;
      end
    else
      NC0AW01.NC0AWEXT = 99; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
end // end NC0AS81

// Check for exit w/o updates(3)
Function NC0AS82()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NC0AS82";
  ;
   /* **************************************/
   /* Check for exiting without updates...*/
   /* **************************************/
  if (converseVar.eventKey is pf3) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 3)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 3; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf4) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 4)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 4; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf13) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 13)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 13; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf17) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 17)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 17; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (converseVar.eventKey is pf19) /* Same function key?*/
    if (NC0AW01.NC0AWEXT == 19)
      NC0AW01.NC0AWEXT = 0;
      return;
    else
      NC0AW01.NC0AWEXT = 19; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is enter) /* Same function?*/
    if (NC0AM200.CATOAP != " ")
      if (NC0AW01.NC0AWEXT == 99)
        NC0AW01.NC0AWEXT = 0;
        return;
      else
        NC0AW01.NC0AWEXT = 99; /* Exit changed...*/
        converseLib.validationFailed(53); /* Warn user about lost updates*/
        NLXREC.NLXERRF = "Y";
      end
    end
  end
end // end NC0AS82

// check field security
Function NC0ASS0()
   /* ********        check security             *********/
  ;
  NLXREC.NLXCPROC = "NC0ASS0";
  ;
  NC0AW01.NC0AWINQ = "N"; /* prepare for security check*/
  if (COMMAREA.CACHGFL == "N") /* user can't change*/
    NC0AW01.NC0AWINQ = "Y"; /* user is inquiry only*/
    NC0ASS1(); /* set fields to askip*/
    set NC0AM100.NCAAIVCF skip;
    set NC0AM100.NCALCCLF skip;
  else
    if (COMMAREA.CACLVL[1] == "N") /* does not have Cred mgr security*/
      set NC0AM100.NCAAIVCF skip;
      set NC0AM100.NCALCCLF skip;
    end
  end
  ;
end // end NC0ASS0

// set fields to askip
Function NC0ASS1()
  NLXREC.NLXCPROC = "NC0ASS1";
  ;
   /* **********************************************/
   /* set m100 fields autoskip*/
   /* **********************************************/
  set NC0AM100.NCALCRDT skip;
  set NC0AM100.NCALCAMT skip;
  set NC0AM100.NCALTPCT skip;
  set NC0AM100.NCALCXDT skip;
  set NC0AM100.NCALCXPL skip;
  set NC0AM100.OP1DSADT skip;
  set NC0AM100.XXXUSRID skip;
  set NC0AM100.NCALCADT skip;
  set NC0AM100.NCALCIBK skip;
  set NC0AM100.NCALCIBL skip;
  set NC0AM100.NLAADDR1 skip;
  set NC0AM100.NLAADDR2 skip;
  set NC0AM100.NLAADDR3 skip;
  set NC0AM100.NLAADDR4 skip;
  set NC0AM100.NLAADDR5 skip;
  set NC0AM100.XCTCD skip;
  set NC0AM100.XSTCD skip;
  set NC0AM100.XXXZIP skip;
  set NC0AM100.NLAADDR6 skip;
   /* **********************************************/
   /* set m200 fields*/
   /* **********************************************/
  set NC0AM200.OP1CUOID[1] skip;
  set NC0AM200.OP1NORID[1] skip;
  set NC0AM200.OP1CUOID[2] skip;
  set NC0AM200.OP1NORID[2] skip;
  set NC0AM200.OP1CUOID[3] skip;
  set NC0AM200.OP1NORID[3] skip;
  set NC0AM200.OP1CUOID[4] skip;
  set NC0AM200.OP1NORID[4] skip;
  set NC0AM200.OP1CUOID[5] skip;
  set NC0AM200.OP1NORID[5] skip;
  set NC0AM200.OP1CUOID[6] skip;
  set NC0AM200.OP1NORID[6] skip;
  set NC0AM200.OP1CUOID[7] skip;
  set NC0AM200.OP1NORID[7] skip;
  set NC0AM200.OP1CUOID[8] skip;
  set NC0AM200.OP1NORID[8] skip;
  set NC0AM200.OP1CUOID[9] skip;
  set NC0AM200.OP1NORID[9] skip;
  set NC0AM200.OP1CUOID[10] skip;
  set NC0AM200.OP1NORID[10] skip;
  set NC0AM200.OP1CUOID[11] skip;
  set NC0AM200.OP1NORID[11] skip;
  set NC0AM200.OP1CUOID[12] skip;
  set NC0AM200.OP1NORID[12] skip;
  set NC0AM200.OP1CUOID[13] skip;
  set NC0AM200.OP1NORID[13] skip;
  set NC0AM200.OP1CUOID[14] skip;
  set NC0AM200.OP1NORID[14] skip;
  set NC0AM200.OP1CUOID[15] skip;
  set NC0AM200.OP1NORID[15] skip;
  set NC0AM200.OP1CUOID[16] skip;
  set NC0AM200.OP1NORID[16] skip;
  set NC0AM200.OP1CUOID[17] skip;
  set NC0AM200.OP1NORID[17] skip;
  set NC0AM200.OP1CUOID[18] skip;
  set NC0AM200.OP1NORID[18] skip;
  set NC0AM200.OP1CUOID[19] skip;
  set NC0AM200.OP1NORID[19] skip;
  set NC0AM200.OP1CUOID[20] skip;
  set NC0AM200.OP1NORID[20] skip;
  set NC0AM200.OP1CUOID[21] skip;
  set NC0AM200.OP1NORID[21] skip;
  set NC0AM200.OP1CUOID[22] skip;
  set NC0AM200.OP1NORID[22] skip;
  set NC0AM200.OP1CUOID[23] skip;
  set NC0AM200.OP1NORID[23] skip;
  set NC0AM200.OP1CUOID[24] skip;
  set NC0AM200.OP1NORID[24] skip;
  set NC0AM200.OP1CUOID[25] skip;
  set NC0AM200.OP1NORID[25] skip;
  set NC0AM200.OP1CUOID[26] skip;
  set NC0AM200.OP1NORID[26] skip;
  set NC0AM200.OP1CUOID[27] skip;
  set NC0AM200.OP1NORID[27] skip;
  set NC0AM200.OP1CUOID[28] skip;
  set NC0AM200.OP1NORID[28] skip;
   /* **********************************************/
   /* set m300 fields*/
   /* **********************************************/
  set NC0AM300.NCALCQTY skip;
  set NC0AM300.XCTCD skip;
  set NC0AM300.ZITCD skip;
  set NC0AM300.ZITDESC skip;
  set NC0AM300.NCBLCINL skip;
  set NC0AM300.NC0AMCSH skip;
  set NC0AM300.NCDCOMNT[1] skip;
  set NC0AM300.NCDCOMNT[2] skip;
  set NC0AM300.NCDCOMNT[3] skip;
  set NC0AM300.NCDCOMNT[4] skip;
  set NC0AM300.NCDCOMNT[5] skip;
  set NC0AM300.NCDCOMNT[6] skip;
  set NC0AM300.NCDCOMNT[7] skip;
  set NC0AM300.NCDCOMNT[8] skip;
  set NC0AM300.NCDCOMNT[9] skip;
  set NC0AM300.NCDCOMNT[10] skip;
  set NC0AM300.NCDCOMNT[11] skip;
  set NC0AM300.NCDCOMNT[12] skip;
  set NC0AM300.NCDCOMNT[13] skip;
end // end NC0ASS1

// set fields to normal on ivc fl
Function NC0ASS2()
   /* reset fields to normal if allow ivc flag chg to 'n'*/
  ;
  NLXREC.NLXCPROC = "NC0ASS2";
  ;
   /* **********************************************/
   /* set m100 fields normal*/
   /* **********************************************/
  set NC0AM100.NCALCRDT normal;
  set NC0AM100.NCALCAMT normal;
  set NC0AM100.NCALTPCT normal;
  set NC0AM100.NCALCXDT normal;
  set NC0AM100.NCALCXPL normal;
  set NC0AM100.OP1DSADT normal;
   /* SET NC0AM100.XXXUSRID NORMAL;*/
   /* SET NC0AM100.NCALCADT NORMAL;*/
  set NC0AM100.NCALCIBK normal;
  set NC0AM100.NCALCIBL normal;
  set NC0AM100.NLAADDR1 normal;
  set NC0AM100.NLAADDR2 normal;
  set NC0AM100.NLAADDR3 normal;
  set NC0AM100.NLAADDR4 normal;
  set NC0AM100.NLAADDR5 normal;
  set NC0AM100.XCTCD normal;
  set NC0AM100.XSTCD normal;
  set NC0AM100.XXXZIP normal;
  set NC0AM100.NLAADDR6 normal;
   /* **********************************************/
   /* set m200 fields*/
   /* **********************************************/
  set NC0AM200.OP1CUOID[1] normal;
  set NC0AM200.OP1NORID[1] normal;
  set NC0AM200.OP1CUOID[2] normal;
  set NC0AM200.OP1NORID[2] normal;
  set NC0AM200.OP1CUOID[3] normal;
  set NC0AM200.OP1NORID[3] normal;
  set NC0AM200.OP1CUOID[4] normal;
  set NC0AM200.OP1NORID[4] normal;
  set NC0AM200.OP1CUOID[5] normal;
  set NC0AM200.OP1NORID[5] normal;
  set NC0AM200.OP1CUOID[6] normal;
  set NC0AM200.OP1NORID[6] normal;
  set NC0AM200.OP1CUOID[7] normal;
  set NC0AM200.OP1NORID[7] normal;
  set NC0AM200.OP1CUOID[8] normal;
  set NC0AM200.OP1NORID[8] normal;
  set NC0AM200.OP1CUOID[9] normal;
  set NC0AM200.OP1NORID[9] normal;
  set NC0AM200.OP1CUOID[10] normal;
  set NC0AM200.OP1NORID[10] normal;
  set NC0AM200.OP1CUOID[11] normal;
  set NC0AM200.OP1NORID[11] normal;
  set NC0AM200.OP1CUOID[12] normal;
  set NC0AM200.OP1NORID[12] normal;
  set NC0AM200.OP1CUOID[13] normal;
  set NC0AM200.OP1NORID[13] normal;
  set NC0AM200.OP1CUOID[14] normal;
  set NC0AM200.OP1NORID[14] normal;
  set NC0AM200.OP1CUOID[15] normal;
  set NC0AM200.OP1NORID[15] normal;
  set NC0AM200.OP1CUOID[16] normal;
  set NC0AM200.OP1NORID[16] normal;
  set NC0AM200.OP1CUOID[17] normal;
  set NC0AM200.OP1NORID[17] normal;
  set NC0AM200.OP1CUOID[18] normal;
  set NC0AM200.OP1NORID[18] normal;
  set NC0AM200.OP1CUOID[19] normal;
  set NC0AM200.OP1NORID[19] normal;
  set NC0AM200.OP1CUOID[20] normal;
  set NC0AM200.OP1NORID[20] normal;
  set NC0AM200.OP1CUOID[21] normal;
  set NC0AM200.OP1NORID[21] normal;
  set NC0AM200.OP1CUOID[22] normal;
  set NC0AM200.OP1NORID[22] normal;
  set NC0AM200.OP1CUOID[23] normal;
  set NC0AM200.OP1NORID[23] normal;
  set NC0AM200.OP1CUOID[24] normal;
  set NC0AM200.OP1NORID[24] normal;
  set NC0AM200.OP1CUOID[25] normal;
  set NC0AM200.OP1NORID[25] normal;
  set NC0AM200.OP1CUOID[26] normal;
  set NC0AM200.OP1NORID[26] normal;
  set NC0AM200.OP1CUOID[27] normal;
  set NC0AM200.OP1NORID[27] normal;
  set NC0AM200.OP1CUOID[28] normal;
  set NC0AM200.OP1NORID[28] normal;
   /* **********************************************/
   /* set m300 fields*/
   /* **********************************************/
  set NC0AM300.NCALCQTY normal;
  set NC0AM300.XCTCD normal;
  set NC0AM300.ZITCD normal;
   /* SET NC0AM300.ZITDESC NORMAL;*/
  set NC0AM300.NCBLCINL normal;
  set NC0AM300.NC0AMCSH normal;
  set NC0AM300.NCDCOMNT[1] normal;
  set NC0AM300.NCDCOMNT[2] normal;
  set NC0AM300.NCDCOMNT[3] normal;
  set NC0AM300.NCDCOMNT[4] normal;
  set NC0AM300.NCDCOMNT[5] normal;
  set NC0AM300.NCDCOMNT[6] normal;
  set NC0AM300.NCDCOMNT[7] normal;
  set NC0AM300.NCDCOMNT[8] normal;
  set NC0AM300.NCDCOMNT[9] normal;
  set NC0AM300.NCDCOMNT[10] normal;
  set NC0AM300.NCDCOMNT[11] normal;
  set NC0AM300.NCDCOMNT[12] normal;
  set NC0AM300.NCDCOMNT[13] normal;
end // end NC0ASS2

//*** RECORD=NC0AW01 ****
// This is the main working storage record for nc0a.
// ***********************
Record NC0AW01 type basicRecord
  5 NC0AWADM NC0AWADM ; 
  5 NC0AWKCH NC0AWKCH ; 
  5 NC0AWKMD NC0AWKMD ; 
  5 NC0AWINQ NC0AWINQ ; 
  5 NC0AWAPF NC0AWAPF ; 
  5 NC0AWFCT NC0AWFCT ; 
  5 NC0AWIDX NC0AWIDX ; 
  5 NC0AWSCX NC0AWSCX ; 
  5 NC0AWLIX NC0AWLIX ; 
  5 NC0AWORX NC0AWORX ; 
  5 NC0AWDDX NC0AWDDX ; 
  5 NC0AWMAX NC0AWMAX ; 
  5 NC0AWORD NC0AWORD ; 
    10 NC0AWFIL NC0AWFIL ; 
    10 NC0AWPTN NC0AWPTN ; 
  5 NC0AWPCT NC0AWPCT ; 
    10 NC0AWPC1 NC0AWPC1 ; 
    10 NC0AWPC2 NC0AWPC2 ; 
  5 NC0AWTPM NC0AWTPM ; 
  5 NC0AWOSN NC0AWOSN ; 
  5 NC0AWOCT NC0AWOCT ; 
  5 NC0AWXDT NC0AWXDT ; 
  5 NC0AWMXD NC0AWMXD ; 
  5 NC0AWADT NC0AWADT ; 
  5 NC0AWMAD NC0AWMAD ; 
  5 NC0AWCDT NC0AWCDT ; 
  5 NC0AWRDT NC0AWRDT ; 
  5 NC0AWMRD NC0AWMRD ; 
  5 NC0AWCOS NC0AWCOS ; 
  5 NC0AWSMS NC0AWSMS ; 
  5 NC0AWDER NC0AWDER ; 
  5 NC0AWCSW NC0AWCSW ; 
  5 NC0AWSCF NC0AWSCF ; 
  5 NC0AWZID NC0AWZID ; 
  5 NC0AWCIX NC0AWCIX ; 
  5 NC0AWUCF NC0AWUCF ; 
  5 NC0AWEXT NC0AWEXT ; 
  5 NC0AWORW NC0AWORW ; 
    10 NC0AWOBY NC0AWOBY [8] ; 
  5 NC0AWSUB NC0AWSUB ; 
  5 NC0AWOSB NC0AWOSB ; 
  5 NC0AWERF NC0AWERF ; 
  5 NC0AWMGF NC0AWMGF ; 
  5 NC0AWONE NC0AWONE ; 
  5 NC0AWSAM NC0AWSAM ; 
  5 NC0AWCKE NC0AWCKE ; 
    10 NC0AWOID NC0AWOID ; 
    10 NC0AWNID NC0AWNID ; 
end // end NC0AW01

//*** RECORD=NC0AW02 ****
// Related Orders Array
// ***********************
Record NC0AW02 type basicRecord
  5 NC0AWCUO NC0AWCUO [64] ; 
  5 NC0AWNOR NC0AWNOR [64] ; 
  5 NC0AWOCF NC0AWOCF [64] ; 
  5 NC0AWOST NC0AWOST [64] ; 
end // end NC0AW02

//*** RECORD=NC0AW03 ****
// This is the working storage array for the Inco terms array.
// ***********************
Record NC0AW03 type basicRecord
  5 NC0AWCTC NC0AWCTC [12] ; 
  5 NC0AWICD NC0AWICD [12] ; 
  5 NC0AWZCD NC0AWZCD [12] ; 
  5 NC0AWZDS NC0AWZDS [12] ; 
  5 NC0AWITL NC0AWITL [12] ; 
  5 NC0AWCCT NC0AWCCT [12] ; 
end // end NC0AW03

Record NC0AW04 type basicRecord
  5 NC0AWCOM NC0AWCOM [14] ; 
  5 NC0AWCCT NC0AWCCT [14] ; 
end // end NC0AW04

//*** RECORD=VLCCOM01 ****
// ********** Letter of Credit Comments Table *****************
// 
// DB2 Table:           DNILO.VLCCOM01
// 
// Copylib Member:      DCL00690
// 
// I/O Mod:             IO4280
// 
// Key to DB2 Table:    NCALCIID
//                      NCDCMSEQ
// 
// Date Created:        06/21/89
// 
// Maintenance Log:
//   Date    Init.   Comment
// --------  -----   ---------------------------------------
// 06-21-89   crr    Initial record creation
// 
// ************************
Record VLCCOM01 type basicRecord
  5 NCDGROUP NCDGROUP ; 
    10 NCALCIID NCALCIID ; 
    10 NCDCMSEQ NCDCMSEQ ; 
    10 NCDCOMNT NCDCOMNT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VLCCOM01

// Add mode switch  (y = add)
DataItem NC0AWADM char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Last shipment date
DataItem NC0AWADT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Function key xfer during add
DataItem NC0AWAPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change count array
DataItem NC0AWCCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// L/C Revised date
DataItem NC0AWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Country codes index
DataItem NC0AWCIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nccrec display key
DataItem NC0AWCKE char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Covering statement lines
DataItem NC0AWCOM char(69)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'Cursor' open switch
DataItem NC0AWCOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cov/Stmt write switch
DataItem NC0AWCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Country code array
DataItem NC0AWCTC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer Order # array
DataItem NC0AWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Duplicate Orders Index
DataItem NC0AWDDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date error switch
DataItem NC0AWDER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error message flag
DataItem NC0AWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF exit switch(contains PFK#)
DataItem NC0AWEXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fetch count      (1-64)
DataItem NC0AWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Discard portion of Order #
DataItem NC0AWFIL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inco country desc array
DataItem NC0AWICD char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S Index
DataItem NC0AWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inquiry only user(y/n)
DataItem NC0AWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inco term location array
DataItem NC0AWITL char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key(s) changed   (y/n)
DataItem NC0AWKCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key(s) modified  (y/n)
DataItem NC0AWKMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Low array index  (1,29,57)
DataItem NC0AWLIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last shipment date - map
DataItem NC0AWMAD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum related order index
DataItem NC0AWMAX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display error flag
DataItem NC0AWMGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// L/C Received date - map
DataItem NC0AWMRD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Expiration date - map
DataItem NC0AWMXD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem NC0AWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Nike Suborder # array
DataItem NC0AWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order number byte array
DataItem NC0AWOBY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order change flag
DataItem NC0AWOCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orders displayed count
DataItem NC0AWOCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem NC0AWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time flag
DataItem NC0AWONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S order number
DataItem NC0AWORD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order number array
DataItem NC0AWORW num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Orders Array Index
DataItem NC0AWORX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order number subscript
DataItem NC0AWOSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order screen number
DataItem NC0AWOSN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Status array
DataItem NC0AWOST char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Always zeros
DataItem NC0AWPC1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Usable tolerance percentage
DataItem NC0AWPC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tolerance percentage
DataItem NC0AWPCT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order partition number
DataItem NC0AWPTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// L/C Received date
DataItem NC0AWRDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order on same LC flag
DataItem NC0AWSAM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen filled      (y = yes)
DataItem NC0AWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Index     (1-28)
DataItem NC0AWSCX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen Modified Switch
DataItem NC0AWSMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working subscript
DataItem NC0AWSUB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tol. % modified switch (y/n)
DataItem NC0AWTPM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update completed flag - ncarec
DataItem NC0AWUCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Expiration date
DataItem NC0AWXDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inco terms array
DataItem NC0AWZCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inco term desc array
DataItem NC0AWZDS char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Incoterms delete switch
DataItem NC0AWZID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-locr-comnt-seq
DataItem NCDCMSEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-locr-comnt
DataItem NCDCOMNT char(72)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem NCDGROUP char(88)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

