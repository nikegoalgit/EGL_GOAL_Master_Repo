package nc0b;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL001;
import corpcom3.XPNL002;
import corpcom3.XPNL003;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import ku.common.KUCREC;
import nc.common.NCWREC;
import nl.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VLCHDR01;
import vv.common.VPIHDR01;
//*** PROGRAM=NC0B ****
// ************************************************************
// 
//               nc0b - Letters of Credit Remaining Balance
//               ------------------------------------
// 
// General program explanation and notes:
// 
// This program allows the user inquiry and change
// capability on L/C Banked date in the Invoice Header
// table and L/C Closed flag in the L/C Header table.
// 
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 08-02-89 tgriff Program creation.
// 12-12-89 jjohns Screen out voids and credits in process 101.
// 01-10-90 jjohns Add zero edit on screen totals.
// 02-23-90 jjohns Update change date and time when bank date
//                 added or deleted in 170.
// 03-30-90 jjohns Add leading sign edit to screen summary
//                 fields.  Do not display any remaing qty
//                 when there is no qty on the LC.
// 03-11-91 SAZARE ADD DISCREPANCY FLAG TO SCREEN
// 03-08-94 kshaw  mar db changes.
// 01-29-98 MBURLE Y2KFIX: regenerated for latest
//                         version of XX0XS01.
// *********************
Program NC0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NC0BW01 NC0BW01; // record
  NC0BW02 NC0BW02; // record
  NCWREC NCWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VLCHDR01 VLCHDR01; // record
  VPIHDR01 VPIHDR01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use NC0BM.NC0BM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NC0B000: NC0B000();
    exit program;
  end // end main
end // end NC0B

// Main flow
Function NC0B000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0B000";
  ;
  NC0B001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NC0B050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
end // end NC0B000

// Initialize application
Function NC0B001()
   /* ************************/
   /* Initialize application*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0B001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
   /* ***********************************/
   /* Initialize all potential records.*/
   /* ***********************************/
  set KUCREC empty;
  set NC0BW01 empty; /* clear working storage rec1*/
  set VLCHDR01 empty;
  set NCWREC empty;
  set VPIHDR01 empty;
  set NLXREC empty; /* clear common working storage*/
  set SQLCA empty;
  ;
  NC0BW01.NC0BWLIX = 1; /* set low-index to 1*/
  NC0BW01.NC0BWIRS = "N"; /* set 'invoices read' flag off*/
  ;
   /* TEMP001*/
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  NC0BSS0(); /* check field level security*/
  ;
   /* **********************/
   /* Clear Invoices Array*/
   /* **********************/
  set NC0BW02 empty;
  ;
  NLXREC.NLXSNAME[1] = "NC0BM100"; /* init screen used in this appl*/
  ;
  NLXREC.NLXCSCRN = "NC0BM100"; /* set first screen to display*/
  ;
   /* ***************************************************/
   /* Note: This appl may NOT be entered via 'fastpath'*/
   /* ***************************************************/
  if (COMMAREA.CAITEM != " ")
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = "NL0A";
    XPNL002();
    return;
  end
   /* **************************************************/
   /* Was this application entered via a function key?*/
   /* **************************************************/
  if (COMMAREA.CAUSERA != " ") /* Does user area contain data?*/
    NCWREC.NCWGROUP = COMMAREA.CAUSERA; /* Yes, load out*/
    NC0BS56(); /* Lookup L/C Header*/
  end
end // end NC0B001

// decide which map to display
Function NC0B050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0B050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen xx0xm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NC0B100();
    end
  else
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of nl0%050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/
  ;
end // end NC0B050

// Converse map m100
Function NC0B100()
   /* ************************************************************/
   /* *    process screen nc0bm100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nc0b050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NC0B100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NC0B101(); /* Perform i/o, load map fields*/
    NLXREC.NLXBLDSC = "N";
  end
  ;
   /* ***********************************************************/
  converse NC0BM100 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  NC0BW01.NC0BWKCH = "N";
  ;
  NC0B110(); /* validate pfkeys*/
   /* **********************************************************/
   /* If no pf key errors and screen has been changed, edit...*/
   /* **********************************************************/
  if (NLXREC.NLXERRF == "N"
   && NC0BM100 is modified)
    NC0B120(); /* edit entries and perform i/o*/
  end
   /* **********************************************/
   /* Edits complete, decide what to do next...*/
   /* **********************************************/
  if (NLXREC.NLXERRF == "N")
    NC0B130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process nc0b100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to nc0b050.*/
end // end NC0B100

// Build screen
Function NC0B101()
   /* **************************************/
   /* Build screen nc0bm100*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0B101";
   /* ***************************************/
   /* If this is the first pass, don't load*/
   /* ***************************************/
  if (NC0BM100.NCALCRID == " "
   && NC0BM100.KUCCOID == 0)
    return;
  end
  ;
  set NC0BM100 empty; /* Discard all screen variables*/
  ;
  NC0BM100.XXXERRID = "NC0BM100";
  NC0BM100.XXXMAPNM = "NC0BM";
  NC0BM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
  NC0BW01.NC0BWFCT = 0; /* set fetch-count to zero*/
  ;
  set NC0BM100.NCALCRID cursor, normal;
  set NC0BM100.KUCCOID normal;
   /* **************************************************/
   /* The remainder of this module operates under the*/
   /* assumption that valid key selections have been*/
   /* made and verified in nc0b120 or nc0b001*/
   /* **************************************************/
   /* **************************************/
   /* Load all ncarec fields to nc0bm100*/
   /* **************************************/
  ;
  VPIHDR01.NCALCIID = VLCHDR01.NCALCIID;
  NC0BM100.NCALCRID = VLCHDR01.NCALCRID;
  NC0BM100.NCALCCLF = VLCHDR01.NCALCCLF;
  NC0BM100.KUCCOID = VLCHDR01.KUCCOID;
  NC0BM100.NCALCQTY = VLCHDR01.NCALCQTY;
  ;
  NC0BM100.NCALCAMT = VLCHDR01.NCALCAMT;
  NC0BW01.NC0BWPCT = VLCHDR01.NCALTPCT;
  NC0BM100.NCALTPCT = NC0BW01.NC0BWPC2;
  ;
   /* Format the L/C Expiration date*/
  ;
  if (VLCHDR01.NCALCXDT != 0)
    NLXREC.XXXWCYMD = VLCHDR01.NCALCXDT;
    XPNL003(); /* Unpack date routine*/
    NC0BM100.NCALCXDT = NLXREC.XXXFLDT;
  else
    NC0BM100.NCALCXDT = " ";
  end
  ;
  KUCREC.KUCCOID = VLCHDR01.KUCCOID;
  ;
  NC0BS06(); /* Select unique - KUCREC*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    NC0BM100.KUCCONM = KUCREC.KUCCONM;
    if (KUCREC.XCTCD in XCTTBL.XCTCD)
      NC0BM100.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
  end
  ;
  NC0BM100.NC0BMTAM = VLCHDR01.NCALCAMT * NC0BW01.NC0BWPCT;
   /* *********************/
   /* Load Invoices Array*/
   /* *********************/
   /* This switch is used to build the array just one timefor each*/
   /* new key that has been entered.*/
  if (NC0BW01.NC0BWIRS == "N") /* Have invoices been read yet?*/
    /* Load total fields*/
    NC0BW01.NC0BWIRA = VLCHDR01.NCALCAMT; /* Invoiced remaining amt*/
    NC0BW01.NC0BWIRQ = VLCHDR01.NCALCQTY; /* Invoiced remaining qty*/
    NC0BW01.NC0BWBRA = VLCHDR01.NCALCAMT; /* Banked remaining amt*/
    NC0BW01.NC0BWBRQ = VLCHDR01.NCALCQTY; /* Banked remaining qty*/
    /* **************************************/
     /* Read Invoices by Internal L/C number*/
    /* **************************************/
    ;
    set NC0BW02 empty;
    ;
    VPIHDR01.NCALCIID = VLCHDR01.NCALCIID;
    ;
    NC0BS02(); /* Open Invs cursor 1*/
    ;
     /* handle database busy*/
    if (SQLCA.VAGen_SQLCODE == -911)
      NC0BW01.NC0BWCOS = "N"; /* Skip fetch loop*/
    else
      NC0BW01.NC0BWCOS = "Y"; /* Set cursor open switch on*/
    end
    ;
    NC0BW01.NC0BWFCT = 1; /* Set Fetch-count to 1*/
    NC0BW01.NC0BWLIX = 1; /* Set low index*/
    ;
    while (NC0BW01.NC0BWFCT < 100 /* Load up to 99 invoices*/
     && NC0BW01.NC0BWCOS == "Y")
      ;
      NC0BS03(); /* Load Invs cursor 1*/
      ;
      if (NC0BW01.NC0BWCOS == "Y") /* If cursor still open*/
        if (VPIHDR01.ZISCD == "AC" /* invoice active*/
         || VPIHDR01.ZISCD == "RI") /* reissued*/
          NC0BW02.NC0BWINV[NC0BWFCT] = VPIHDR01.NIDIVCID; /* Load*/
          NC0BW02.NC0BWCUO[NC0BWFCT] = VPIHDR01.OP1CUOID; /* Array*/
          NC0BW02.NC0BWNOR[NC0BWFCT] = VPIHDR01.OP1NORID; /* Fields*/
          if (VPIHDR01.NIELCDFL == " ")
            NC0BW02.NC0BWDFL[NC0BWFCT] = "N";
          else
            NC0BW02.NC0BWDFL[NC0BWFCT] = VPIHDR01.NIELCDFL;
          end
          ;
           /* Format the Invoice Date*/
          ;
          if (VPIHDR01.NIAIVCDT != 0)
            NLXREC.XXXWCYMD = VPIHDR01.NIAIVCDT;
            XPNL003(); /* Unpack date routine*/
            NC0BW02.NC0BWIDT[NC0BWFCT] = NLXREC.XXXFLDT;
          else
            NC0BW02.NC0BWIDT[NC0BWFCT] = " ";
          end
          ;
          NC0BW02.NC0BWIUQ[NC0BWFCT] = VPIHDR01.NIETUNIT;
          NC0BW02.NC0BWIAM[NC0BWFCT] = VPIHDR01.NIAIVAMT;
          NC0BW02.NC0BWBDT[NC0BWFCT] = VPIHDR01.NIELCBDT;
          ;
           /* Accumulate Amounts and Units*/
          ;
          NC0BW01.NC0BWIRA = NC0BW01.NC0BWIRA - VPIHDR01.NIAIVAMT;
          if (VLCHDR01.NCALCQTY != 0) /* no summary if no qty on LC*/
            NC0BW01.NC0BWIRQ = NC0BW01.NC0BWIRQ - VPIHDR01.NIETUNIT;
          end
          ;
          if (VPIHDR01.NIELCBDT != 0) /* If Banked date present...*/
            NC0BW01.NC0BWBRA = NC0BW01.NC0BWBRA - VPIHDR01.NIAIVAMT;
            if (VLCHDR01.NCALCQTY != 0) /* no summary if no qty on LC*/
              NC0BW01.NC0BWBRQ = NC0BW01.NC0BWBRQ - VPIHDR01.NIETUNIT;
            end
          end
          NC0BW01.NC0BWMAX = NC0BW01.NC0BWFCT;
          NC0BW01.NC0BWFCT = NC0BW01.NC0BWFCT + 1;
        end
      end
    end
    NC0BW01.NC0BWIRS = "Y"; /* Set Invoices Read Switch*/
    if (NC0BW01.NC0BWFCT > 99)
      NC0BM100.VAGen_EZEMSG = "MORE THAN 99 INVOICES - EXPAND TABLE!!";
      NLXREC.NLXERRF = "Y";
    end
  end
   /* ***************************/
   /* Load screen from array...*/
   /* ***************************/
  if (NC0BW01.NC0BWLIX < 90 /* not End-of-array?*/
   && NC0BW02.NC0BWINV[NC0BWLIX] != 0) /* and something to show*/
    NC0BW01.NC0BWIDX = NC0BW01.NC0BWLIX; /* Set array index*/
    NC0BW01.NC0BWSCX = 1; /* Set screen index*/
    while (NC0BW01.NC0BWSCX < 10) /* Screen not full yet*/
      if (NC0BW02.NC0BWINV[NC0BWIDX] != 0) /* Invoice present in array*/
        NC0BM100.NIDIVCID[NC0BWSCX] = NC0BW02.NC0BWINV[NC0BWIDX];
        NC0BW01.NC0BWCUO = NC0BW02.NC0BWCUO[NC0BWIDX];
        NC0BW01.NC0BWNOR = NC0BW02.NC0BWNOR[NC0BWIDX];
        NC0BM100.NC0BMORD[NC0BWSCX] = NC0BW01.NC0BWORD;
        NC0BM100.NIAIVCDT[NC0BWSCX] = NC0BW02.NC0BWIDT[NC0BWIDX];
        NC0BM100.NIETUNIT[NC0BWSCX] = NC0BW02.NC0BWIUQ[NC0BWIDX];
        NC0BM100.NIAIVAMT[NC0BWSCX] = NC0BW02.NC0BWIAM[NC0BWIDX];
        NC0BM100.NIELCDFL[NC0BWSCX] = NC0BW02.NC0BWDFL[NC0BWIDX];
        ;
        NLXREC.XXXWCYMD = NC0BW02.NC0BWBDT[NC0BWIDX];
        XPNL003();
        NC0BM100.NIELCBDT[NC0BWSCX] = NLXREC.XXXFLDT;
        ;
      else
        NC0BW01.NC0BWIEN = "Y"; /* End of invoices reached*/
      end
      NC0BW01.NC0BWSCX = NC0BW01.NC0BWSCX + 1; /* Increment indices...*/
      NC0BW01.NC0BWIDX = NC0BW01.NC0BWIDX + 1;
    end
    NC0BW01.NC0BWSCF = "N";
    NC0BW01.NC0BWSCX = 9;
    if (NC0BM100.NIDIVCID[NC0BWSCX] != 0)
      NC0BW01.NC0BWSCF = "Y"; /* Set screen full flag on*/
    end
  end
  ;
  NC0BM100.NC0BMIRA = NC0BW01.NC0BWIRA; /* Load Summary*/
  NC0BM100.NC0BMIRQ = NC0BW01.NC0BWIRQ; /* Fields to screen*/
  NC0BM100.NC0BMBRA = NC0BW01.NC0BWBRA;
  NC0BM100.NC0BMBRQ = NC0BW01.NC0BWBRQ;
  ;
end // end NC0B101

// Edit pfkeys
Function NC0B110()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NC0B110";
  ;
   /* **************************************/
   /* Check for exiting without updates...*/
   /* **************************************/
  if (NC0BW01.NC0BWINQ != "Y") /* Check update users only*/
    if (NC0BM100 is modified) /* Screen has been changed*/
      if (converseVar.eventKey is pf3  /* NIL Menu requested*/
       || converseVar.eventKey is pf4  /* Master Menu requested*/
       || converseVar.eventKey is pf17 /* L/C app requested*/
       || NC0BM100.CATOAP != " ")     
        NC0BS07(); /* Warn user about loss of updates*/
      end
    end
  end
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NC0BM100.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = NC0BM100.CATOAP;
    COMMAREA.CAITEM = NC0BM100.CAITEM;
    COMMAREA.CAUSERA = NCWREC.NCWGROUP;
    XPNL002();
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf4)
          if (NLXREC.NLXERRF != "Y")
            XSPF4();
          end
        else
          if (converseVar.eventKey is pf3)
            if (NLXREC.NLXERRF != "Y")
              COMMAREA.CATOAP = "NL0A";
              COMMAREA.CAUSERA = " ";
              XPNL002();
              return;
            end
          else
            if (converseVar.eventKey is pf17)
              if (NLXREC.NLXERRF != "Y")
                NCWREC.NCALCRID = NC0BM100.NCALCRID;
                NCWREC.KUCCOID = NC0BM100.KUCCOID;
                COMMAREA.CAUSERA = NCWREC.NCWGROUP;
                COMMAREA.CATOAP = "NC0A";
                XPNL002();
                return;
              end
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              NLXREC.NLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end NC0B110

// Edit nc0bm100 fields
Function NC0B120()
   /* ***********************/
   /* Edit nc0bm100 entries*/
   /* ***********************/
  ;
  NLXREC.NLXCPROC = "NC0B120";
  ;
  set NC0BM100.NCALCRID cursor, normal;
  set NC0BM100.KUCCOID normal;
   /* *****************************************/
   /* If the key fields are empty, don't edit*/
   /* *****************************************/
  if (NC0BM100.NCALCRID == " "
   && NC0BM100.KUCCOID == 0)
    NLXREC.NLXERRF = "Y";
  end
   /* ************************************/
   /* Has either key field been changed?*/
   /* ************************************/
  if (NC0BM100.KUCCOID is modified /* Customer changed*/
   || NC0BM100.NCALCRID is modified) /* or L/C changed*/
    ;
     /* One of the components of the key has changed*/
    ;
    VLCHDR01.KUCCOID = NC0BM100.KUCCOID; /* Load key*/
    VLCHDR01.NCALCRID = NC0BM100.NCALCRID;
    ;
    NC0BS01(); /* Select unique - ncarec*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      NC0BW01.NC0BWKCH = "Y"; /* 'Key' changed*/
      NC0BW01.NC0BWIRS = "N"; /* set flag to read invoices*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set NC0BM100.NCALCRID cursor, modified, bold;
        converseLib.validationFailed(06); /* Letter of Credit nrf during 'change'*/
        NLXREC.NLXERRF = "Y";
        return;
      else /* Non-zero/Non-100 SQL code*/
                                   /* encountered!*/
        TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
   /* *********************************************************/
   /* if key values have changed, exit...else...continue edit*/
   /* *********************************************************/
  if (NC0BW01.NC0BWKCH == "Y")
    return;
  end
   /* ***********************************************************/
   /* Key values have not changed, edit fields in reverse order*/
   /* ***********************************************************/
   /* **************************/
   /* Edit the L/C Closed Flag*/
   /* **************************/
  if (NC0BM100.NCALCCLF is modified)
    if (NC0BM100.NCALCCLF != "Y"
     && NC0BM100.NCALCCLF != "N")
      converseLib.validationFailed(57);
      NLXREC.NLXERRF = "Y";
    end
  end
   /* ******************************************************/
   /* Edit the DISCREPANCY FLAG AND Banked date (if given)*/
   /* ******************************************************/
  NC0BW01.NC0BWIDX = NC0BW01.NC0BWLIX; /* Get low index*/
  NC0BW01.NC0BWIDX = NC0BW01.NC0BWIDX + 8; /* Position at bottom*/
  NC0BW01.NC0BWSCX = 9; /* To edit in reverse order*/
  ;
  while (NC0BW01.NC0BWSCX > 0) /* On this screen*/
    if (NC0BM100.NIDIVCID[NC0BWSCX] != 0) /* Invoice present*/
      if (NC0BM100.NIELCDFL[NC0BWSCX] is modified) /* The DSCRY flag changed*/
        if (NC0BM100.NIELCDFL[NC0BWSCX] != "Y"
         /* to other than a 'y' or 'n'*/
         && NC0BM100.NIELCDFL[NC0BWSCX] != "N")
          set NC0BM100.NIELCDFL[NC0BWSCX] cursor, modified, bold;
          converseLib.validationFailed(7); /* invalid y/n*/
          NLXREC.NLXERRF = "Y";
        else
          set NC0BM100.NIELCDFL[NC0BWSCX] normal;
          NC0BW02.NC0BWDFL[NC0BWSCX] = NC0BM100.NIELCDFL[NC0BWSCX];
        end
      end
      if (NC0BM100.NIELCBDT[NC0BWSCX] is modified /* Banked date changed*/
       && NC0BM100.NIELCBDT[NC0BWSCX] != " ")     /* to a non-spaces value*/
        ;
        NLXREC.NLXVALDT = "Y"; /* Prepare/perform date edit*/
        NLXREC.XXXED8C = NC0BM100.NIELCBDT[NC0BWSCX];
        XPNL001();
        if (NLXREC.NLXVALDT == "N")
          set NC0BM100.NIELCBDT[NC0BWSCX] cursor, modified, bold;
          converseLib.validationFailed(5); /* invalid date*/
          NLXREC.NLXERRF = "Y";
        else
          NC0BM100.NIELCBDT[NC0BWSCX] = NLXREC.XXXFLDT;
          set NC0BM100.NIELCBDT[NC0BWSCX] normal; /* Good date given*/
          NC0BW02.NC0BWBDT[NC0BWIDX] = NLXREC.XXXWCYMD;
          NC0BW01.NC0BWBRA = NC0BW01.NC0BWBRA - NC0BW02.NC0BWIAM[NC0BWIDX];
          if (VLCHDR01.NCALCQTY != 0)
            NC0BW01.NC0BWBRQ = NC0BW01.NC0BWBRQ - NC0BW02.NC0BWIUQ[NC0BWIDX];
          end
        end
      else
        if (NC0BM100.NIELCBDT[NC0BWSCX] is modified /* Banked date changed*/
         && NC0BM100.NIELCBDT[NC0BWSCX] == " ")     /* to spaces*/
          NC0BM100.NIELCBDT[NC0BWSCX] = "00-00-00";
          set NC0BM100.NIELCBDT[NC0BWSCX] normal; /* Good date given*/
          if (NC0BW02.NC0BWBDT[NC0BWIDX] != 0)
            NC0BW02.NC0BWBDT[NC0BWIDX] = 0;
            NC0BW01.NC0BWBRA = NC0BW01.NC0BWBRA + NC0BW02.NC0BWIAM[NC0BWIDX];
            if (VLCHDR01.NCALCQTY != 0)
              NC0BW01.NC0BWBRQ = NC0BW01.NC0BWBRQ + NC0BW02.NC0BWIUQ[NC0BWIDX];
            end
          end
        end
      end
    end
    NC0BW01.NC0BWSCX = NC0BW01.NC0BWSCX - 1;
    NC0BW01.NC0BWIDX = NC0BW01.NC0BWIDX - 1;
  end
   /* **************************/
   /* Edit the L/C Closed Flag*/
   /* **************************/
  if (NC0BM100.NCALCCLF is modified) /* The L/C Closed flag changed*/
    if (NC0BM100.NCALCCLF != "Y" /* to something other than a 'y' or 'n'*/
     && NC0BM100.NCALCCLF != "N")
      set NC0BM100.NCALCCLF cursor, modified, bold;
      converseLib.validationFailed(7); /* invalid y/n*/
      NLXREC.NLXERRF = "Y";
    else
      set NC0BM100.NCALCCLF normal;
    end
  end
   /* *************************************/
   /* All edits performed, how did we do?*/
   /* *************************************/
  if (NLXREC.NLXERRF == "Y")
    return; /* if edit errors do not update*/
  else
    if (NC0BM100 is modified) /* If ANYTHING was changed*/
      NC0B170(); /* Perform udpates*/
    end
  end
end // end NC0B120

// determine next action
Function NC0B130()
   /* **************************************/
   /* Determine next action from 1st screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0B130";
  ;
  if (converseVar.eventKey is enter)
    if (NC0BW01.NC0BWKCH != "Y")
      NC0BW01.NC0BWFCT = 0;
      NLXREC.NLXEOSF = "Y";
      NLXREC.NLXCSCRN = "NC0BM100";
      return;
    else
      NLXREC.NLXBLDSC = "Y";
    end
  end
   /* ************************************************/
   /* Request for exit to Letter of Credit application*/
   /* ************************************************/
  if (converseVar.eventKey is pf17) /* L/C application requested*/
    return;
  end
  ;
   /* ***********************************************/
   /* Reverse requested on Remaining Balance screen*/
   /* ***********************************************/
  if (converseVar.eventKey is pf7) /* pf7 has been pressed*/
    if (NC0BW01.NC0BWLIX == 1) /* Still on screen 1*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(29); /* No reverse from top-of-file*/
      return;
    else
      NLXREC.NLXBLDSC = "Y"; /* Set rebuild screen flag*/
      NC0BW01.NC0BWLIX = NC0BW01.NC0BWLIX - 9;
      return;
    end
  end
  ;
   /* ***************************************************/
   /* Forward scroll requested on Related Orders screen*/
   /* ***************************************************/
  if (converseVar.eventKey is pf8) /* pf8 has been pressed*/
    if (NC0BW01.NC0BWSCF != "Y") /* Screen not filled*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(30); /* bottom-of-file, forward disallowed*/
      return;
    else /* At least one screen is filled*/
      if (NC0BW01.NC0BWLIX < 81)
        NC0BW01.NC0BWLIX = NC0BW01.NC0BWLIX + 9;
        if (NC0BW01.NC0BWLIX > NC0BW01.NC0BWMAX) /* Scroll past array*/
          NC0BW01.NC0BWLIX = NC0BW01.NC0BWLIX - 9; /* Reset low index*/
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(30); /* No further scrolling possible*/
        else
          NLXREC.NLXBLDSC = "Y";
          return;
        end
      else
        if (NC0BW01.NC0BWLIX == 57)
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(30); /* No further scrolling possible*/
          return;
        end
      end
    end
  end
end // end NC0B130

// Edit nc0am100 fields / i-o
Function NC0B170()
   /* **************************************/
   /* Perform nc0bm100 updates*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0B170";
  ;
  if (NC0BM100.NCALCCLF is modified)
    VLCHDR01.NCALCCLF = NC0BM100.NCALCCLF;
  end
  ;
  XX0XS01(); /* Get current system time & date*/
  VLCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VLCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VLCHDR01.NCALCADT = XX0XW01.XX0XWDAT;
  VLCHDR01.XXXUSRID = COMMAREA.CAUSERID;
  ;
  NC0BS05(); /* Update unique - ncarec*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
   /* ********************************************************/
   /* Update the DISCREPANCY FLAG AND banked date (if given)*/
   /* ********************************************************/
  NC0BW01.NC0BWIDX = NC0BW01.NC0BWLIX; /* Get low index*/
  NC0BW01.NC0BWSCX = 1; /* To edit in reverse order*/
  ;
  while (NC0BW01.NC0BWSCX < 10 /* On this screen*/
   && NC0BM100.NIDIVCID[NC0BWSCX] != 0) /* Invoice present*/
    ;
    if (NC0BM100.NIELCBDT[NC0BWSCX] is modified /* Banked date changed*/
     || NC0BM100.NIELCDFL[NC0BWSCX] is modified)
                                   /* OR DESCRPNCY FLAG CHGED*/
      VPIHDR01.NIDIVCID = NC0BW02.NC0BWINV[NC0BWIDX]; /* build key*/
      NC0BS09(); /* read p/i hdr to be updated*/
      if (NC0BM100.NIELCBDT[NC0BWSCX] != " ") /* to a non-spaces value*/
        VPIHDR01.NIELCBDT = NC0BW02.NC0BWBDT[NC0BWIDX];
        NC0BM100.NC0BMBRA = NC0BM100.NC0BMBRA + NC0BW02.NC0BWIAM[NC0BWIDX];
        NC0BM100.NC0BMBRQ = NC0BM100.NC0BMBRQ + NC0BW02.NC0BWIUQ[NC0BWIDX];
        ;
      else /* Banked date changed to spaces*/
        ;
        VPIHDR01.NIELCBDT = 0; /* Decrement map totals*/
        NC0BM100.NC0BMBRA = NC0BM100.NC0BMBRA - NC0BW02.NC0BWIAM[NC0BWIDX];
        NC0BM100.NC0BMBRQ = NC0BM100.NC0BMBRQ - NC0BW02.NC0BWIUQ[NC0BWIDX];
      end
      ;
      VPIHDR01.NIELCDFL = NC0BW02.NC0BWDFL[NC0BWIDX];
      VPIHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VPIHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
      NC0BS04(); /* Update unique - NIEREC*/
      ;
    end
    NC0BW01.NC0BWSCX = NC0BW01.NC0BWSCX + 1;
    NC0BW01.NC0BWIDX = NC0BW01.NC0BWIDX + 1;
  end
end // end NC0B170

// Select Unique from NCAREC
Function NC0BS01()
   /* ************************/
   /* NCAREC - Select Unique*/
   /* ************************/
  ;
  call "IO4260" ("S ", SQLCA, VLCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Read L/C Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0BS01

// Open cursor 1 - NIEREC
Function NC0BS02()
   /* ************************/
   /* NIEREC - Open cursor 3*/
   /* ************************/
  ;
  call "IO4470" ("S3", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Open Invs curs*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0BS02

// Load cursor 1 - NIEREC
Function NC0BS03()
   /* ************************/
   /* NIEREC - Load Cursor 3*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0BS03";
  ;
  call "IO4470" ("N3", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Load cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "N3     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
      XPNL005(); /* abend routine*/
      if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
        NC0BW01.NC0BWCOS = "N"; /* end fetch loop*/
      end
    else
      NC0BW01.NC0BWCOS = "N"; /* Set cursor switch*/
      /* ************************/
       /* NIEREC - Close cursor 1*/
      /* ************************/
      ;
      call "IO4470" ("C3", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Close curs*/
      ;
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "C3     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NC0BS03

// Update unique - NIEREC
Function NC0BS04()
   /* ************************/
   /* NIEREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0BS04";
  ;
  call "IO4470" ("U ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Update P/I Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0BS04

// Update Unique on NCAREC
Function NC0BS05()
   /* ************************/
   /* NCAREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0BS05";
  ;
  call "IO4260" ("U ", SQLCA, VLCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Update L/C Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0BS05

// Select Unique from KUCREC
Function NC0BS06()
   /* ************************/
   /* KUCREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0BS06";
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0BS06

// Check for exit w/o updates
Function NC0BS07()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NC0BS07";
  ;
   /* **************************************/
   /* Check for exiting without updates...*/
   /* **************************************/
  if (converseVar.eventKey is pf3) /* Same function key?*/
    if (NC0BW01.NC0BWEXT == 3)
      return;
    else
      NC0BW01.NC0BWEXT = 3; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is pf4) /* Same function key?*/
    if (NC0BW01.NC0BWEXT == 4)
      return;
    else
      NC0BW01.NC0BWEXT = 4; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (converseVar.eventKey is pf17) /* Same function key?*/
    if (NC0BW01.NC0BWEXT == 17)
      return;
    else
      NC0BW01.NC0BWEXT = 17; /* Exit changed...*/
      converseLib.validationFailed(53); /* Warn user about lost updates*/
      NLXREC.NLXERRF = "Y";
    end
  end
  if (converseVar.eventKey is enter) /* Enter key pressed*/
    if (NC0BM100.CATOAP != " ")
      if (NC0BW01.NC0BWEXT == 99) /* Same function?*/
        return;
      else
        NC0BW01.NC0BWEXT = 99; /* Exit changed...*/
        converseLib.validationFailed(53); /* Warn user about lost updates*/
        NLXREC.NLXERRF = "Y";
      end
    else
      NC0BW01.NC0BWEXT = 0;
    end
  end
end // end NC0BS07

// select unique - NIEREC
Function NC0BS09()
   /* ************************/
   /* NIEREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NC0BS09";
  ;
  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Read P/I Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NC0BS09

// Lookup L/C Header
Function NC0BS56()
   /* **************************************/
   /* Function key entry, lookup L/C Header*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NC0BS56";
  ;
   /* ********************************/
   /* Load NCWREC data to key fields*/
   /* ********************************/
  VLCHDR01.NCALCRID = NCWREC.NCALCRID; /* Load key*/
  VLCHDR01.KUCCOID = NCWREC.KUCCOID;
  ;
  NC0BS01(); /* Select unique - ncarec*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    set NC0BM100.NCALCRID cursor, modified, bold;
    NLXREC.NLXERRF = "Y";
  else
    NC0BM100.NCALCRID = VLCHDR01.NCALCRID;
    NC0BM100.KUCCOID = VLCHDR01.KUCCOID;
  end
end // end NC0BS56

// check field security
Function NC0BSS0()
   /* ********        check field security             *********/
  ;
  NLXREC.NLXCPROC = "NC0BSS0";
  ;
  if (COMMAREA.CACLVL[1] == "N")
    NC0BSS1(); /* group 1*/
  end
  ;
end // end NC0BSS0

// security for fields in group1
Function NC0BSS1()
   /* ****** this sets security for fields in group1*/
  ;
  NLXREC.NLXCPROC = "NC0BSS1";
  ;
   /* ***************************************************/
   /* Determine if user is 'Inquiry only'...*/
   /* ***************************************************/
  ;
  NC0BW01.NC0BWINQ = "N"; /* prepare for security check*/
  if (COMMAREA.CACHGFL == "N") /* user can't change*/
    if (COMMAREA.CAADDFL == "N") /* user can't add*/
      NC0BW01.NC0BWINQ = "Y"; /* user is inquiry only*/
    end
  end
   /* **********************************************/
   /* If user is inquiry only, autoskip all fields*/
   /* **********************************************/
  if (NC0BW01.NC0BWINQ == "Y")
    set NC0BM100.NCALCCLF skip;
    set NC0BM100.NIELCBDT[1] skip;
    set NC0BM100.NIELCBDT[2] skip;
    set NC0BM100.NIELCBDT[3] skip;
    set NC0BM100.NIELCBDT[4] skip;
    set NC0BM100.NIELCBDT[5] skip;
    set NC0BM100.NIELCBDT[6] skip;
    set NC0BM100.NIELCBDT[7] skip;
    set NC0BM100.NIELCBDT[8] skip;
    set NC0BM100.NIELCBDT[9] skip;
  end
end // end NC0BSS1

//*** RECORD=NC0BW01 ****
// This is the main working storage record for nc0b.
// ***********************
Record NC0BW01 type basicRecord
  5 NC0BWKCH NC0BWKCH ; 
  5 NC0BWCOS NC0BWCOS ; 
  5 NC0BWINQ NC0BWINQ ; 
  5 NC0BWFCT NC0BWFCT ; 
  5 NC0BWIDX NC0BWIDX ; 
  5 NC0BWSCX NC0BWSCX ; 
  5 NC0BWLIX NC0BWLIX ; 
  5 NC0BWMAX NC0BWMAX ; 
  5 NC0BWIEN NC0BWIEN ; 
  5 NC0BWORD NC0BWORD ; 
    10 NC0BWCUO NC0BWCUO ; 
      15 NC0BWFIL NC0BWFIL ; 
      15 NC0BWPTN NC0BWPTN ; 
    10 NC0BWNOR NC0BWNOR ; 
  5 NC0BWPCT NC0BWPCT ; 
    10 NC0BWPC1 NC0BWPC1 ; 
    10 NC0BWPC2 NC0BWPC2 ; 
  5 NC0BWSCF NC0BWSCF ; 
  5 NC0BWEXT NC0BWEXT ; 
  5 NC0BWIRS NC0BWIRS ; 
  5 NC0BWIRA NC0BWIRA ; 
  5 NC0BWIRQ NC0BWIRQ ; 
  5 NC0BWBRA NC0BWBRA ; 
  5 NC0BWBRQ NC0BWBRQ ; 
end // end NC0BW01

//*** RECORD=NC0BW02 ****
// This is the working storage array for the Inco terms array.
// ***********************
Record NC0BW02 type basicRecord
  5 NC0BWINV NC0BWINV [99] ; 
  5 NC0BWCUO NC0BWCUO [99] ; 
  5 NC0BWNOR NC0BWNOR [99] ; 
  5 NC0BWIDT NC0BWIDT [99] ; 
  5 NC0BWIUQ NC0BWIUQ [99] ; 
  5 NC0BWIAM NC0BWIAM [99] ; 
  5 NC0BWBDT NC0BWBDT [99] ; 
  5 NC0BWDFL NC0BWDFL [99] ; 
end // end NC0BW02

// Banked date (before maint)
DataItem NC0BWBDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Banked Remaining Amount
DataItem NC0BWBRA num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Banked Remaining Quantity
DataItem NC0BWBRQ num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor Open Switch (y/n)
DataItem NC0BWCOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer Order # array
DataItem NC0BWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DISCREPANCY FLAG
DataItem NC0BWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF exit switch(contains PFK#)
DataItem NC0BWEXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fetch count      (1-9999)
DataItem NC0BWFCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Discard portion of Order #
DataItem NC0BWFIL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoice Amount
DataItem NC0BWIAM num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoice date array
DataItem NC0BWIDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S Index
DataItem NC0BWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoices end reached
DataItem NC0BWIEN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry only user(y = yes)
DataItem NC0BWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invoice Number array
DataItem NC0BWINV num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoiced Remaining Amount
DataItem NC0BWIRA num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoiced Remaining Quantity
DataItem NC0BWIRQ num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoices read switch
DataItem NC0BWIRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invoice Unit Quantity
DataItem NC0BWIUQ num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key(s) changes   (y = yes)
DataItem NC0BWKCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Low index (1,10,19,28...99)
DataItem NC0BWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Maximum related order index
DataItem NC0BWMAX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Nike Suborder # array
DataItem NC0BWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W/S order number
DataItem NC0BWORD num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Always zeros
DataItem NC0BWPC1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Usable tolerance percentage
DataItem NC0BWPC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Tolerance percentage
DataItem NC0BWPCT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order partition number
DataItem NC0BWPTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen filled      (y = yes)
DataItem NC0BWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Index     (1-28)
DataItem NC0BWSCX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

