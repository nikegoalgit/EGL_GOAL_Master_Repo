package ky0p;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0P ****
// ************************************************************
// 
//             CYCLE COUNT
//           REPORT REQUESTS
//           ===============
// 
// ************************************************************
// 
// OVERVIEW: This application will update, add or delete the
//           batch processing parameter(s) related to the
//           changed, selected or de-selected report.
// 
//           notes:
//             1) selection values are only 's' & blank
//             2) freq/tol rpt selected by entering 1 or more
//                location ranges (max of 9)
//             3) line no. used w/ loc rng acn be > 9 but
//                would then have gaps in sequential no.s
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  02/15/88  Ward Jones  created
// 00  03/13/89  jwood       added noncsp option to calls
// 00  03/13/89  jwood       added xssegtr logic
// 00  07/31/91  scleme      convert CY0P to KY0P
// 
// ************************************************************
// ************************************************************
// *********************
Program KY0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0PW01 KY0PW01; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XARTBL {deleteAfterUse = yes}; // table
  use KY0PM.KY0PM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0P110: KY0P110();


     /* ************************************************************/
     /* *** if error: display key screen                        ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0P120; /* <=== display key screen*/
    end

     /* ************************************************************/
     /* *** since no errors, ky0nsh1 was successful             ****/
     /* *** therefore, go directly to ky0n140 for updates       ****/
     /* ************************************************************/

    CYWREC.XXXLOCID = "140 ";
    goto KY0P140; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0P120: KY0P120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0P120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0P110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0P120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "140 ";
      goto KY0P140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0P120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0P140: KY0P140();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0P140; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0P110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      if (CYWREC.CYWSKYSW == "N")
        goto KY0P120; /* <=== re-display key screen*/
      end
      goto KY0P140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (CYWREC.CYWSKYSW == "N")
      CYWREC.XXXLOCID = "140 ";
      goto KY0P140; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "120 ";
      goto KY0P120; /* <=== setup for new input*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0P140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0P

// one time initializations
Function KY0P110()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard setting of segmented trans id              ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0PM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set XZZREC empty; /* common parm record*/
  set CYVREC empty; /* common io mod pass fields*/
  set CYWREC empty; /* common working storage fields*/
  set KY0PW01 empty; /* appl. working storage area*/
  set SL4REC empty; /* s.l. area/zone record*/
  set SL5REC empty; /* s.l. location record*/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/15/88  W. Jones      created                ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "00";

  CYWREC.XXXMAPNM = "KY0PM110";
  CYWREC.XXXTITLE = "CYCLE COUNT REPORT REQUEST";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0P"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0P110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0PM110"; /* TA0020 current map name*/
  TA1REC.TA1MAP = "KY0PM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0PM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0PM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0PM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0PM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0PM110.KY0PMSTR = 9;
  KY0PM110.KY0PMSKP = 80;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  CYWREC.CYWLINPP = 9;

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0PM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0PM110.XWHCD cursor;
  end

   /* ************************************************************/
   /* *** attempt to setup screen                             ****/
   /* *** note: will detect missing whse                      ****/
   /* ************************************************************/

  KY0PSH1();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0P110

// converse & control key entry
Function KY0P120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  set KY0PM110.KY0PMSCH skip, invisible;
  set KY0PM110.KY0PMPIC skip, invisible;
  set KY0PM110.KY0PMAUD skip, invisible;
  set KY0PM110.KY0PMSTR skip, invisible;
  set KY0PM110.KY0PMSKP skip, invisible;

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    set KY0PM110.XARCD[CYWIDX01] skip, invisible;
    set KY0PM110.SL4ZONE[CYWIDX01] skip, invisible;
    set KY0PM110.KY0PMFLC[CYWIDX01] skip, invisible;
    set KY0PM110.KY0PMTLC[CYWIDX01] skip, invisible;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0PM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0PM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0PM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0PM110.CATOAP;
    COMMAREA.CAITEM = KY0PM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0PM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSEXSW = "N";
  KY0PM110.VAGen_EZEMSG = " ";
  set KY0PM110.CATOAP initialAttributes;
  set KY0PM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0PM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set KY0PM110.KY0PMSCH initialAttributes;
  set KY0PM110.KY0PMPIC initialAttributes;
  set KY0PM110.KY0PMAUD initialAttributes;
  set KY0PM110.KY0PMSTR initialAttributes;
  set KY0PM110.KY0PMSKP initialAttributes;

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    set KY0PM110.XARCD[CYWIDX01] initialAttributes;
    set KY0PM110.SL4ZONE[CYWIDX01] initialAttributes;
    set KY0PM110.KY0PMFLC[CYWIDX01] initialAttributes;
    set KY0PM110.KY0PMTLC[CYWIDX01] initialAttributes;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0PM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0PM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0PSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

   /* ** none at this time ***/

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120P";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0P120

// converse & control data entry
Function KY0P140()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "Y")
     /* ** next sentence ***/
  else
    set KY0PM110.KY0PMSCH cursor;
  end

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0PM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0PM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140A";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140B";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140C";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** IF PF5: GO TO STOCK LOCATE MAIN MENU                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140D";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0PM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0PM110.CATOAP;
    COMMAREA.CAITEM = KY0PM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140E";
    CYWREC.CYWMSGNO = 0;
    KY0PM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0PM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  KY0PM110.VAGen_EZEMSG = " ";
  CYWREC.XXXLOCID = "140 ";
  set KY0PM110.CATOAP initialAttributes;
  set KY0PM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set KY0PM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s depending on function   ****/
   /* ************************************************************/

  set KY0PM110.KY0PMSCH initialAttributes;
  set KY0PM110.KY0PMPIC initialAttributes;
  set KY0PM110.KY0PMAUD initialAttributes;
  set KY0PM110.KY0PMSTR initialAttributes;
  set KY0PM110.KY0PMSKP initialAttributes;

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    set KY0PM110.XARCD[CYWIDX01] initialAttributes;
    set KY0PM110.SL4ZONE[CYWIDX01] initialAttributes;
    set KY0PM110.KY0PMFLC[CYWIDX01] initialAttributes;
    set KY0PM110.KY0PMTLC[CYWIDX01] initialAttributes;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0PM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0PM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* *** note: reset attr.s part of edit loop                ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0PSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0PSF1(); /* <=== save key values*/
      KY0PST1(); /* <=== reset screen (empty)*/
      KY0PSH1(); /* <=== enter processing*/
      exit stack;
    end
    KY0PSR1(); /* <=== data edits*/
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    KY0PSU1(); /* <=== updates*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      KY0PST1(); /* <=== reset screen (empty)*/
      exit stack; /* <=== severe error will display ta0020 map*/
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    KY0PSQ1(); /* <=== reset screen (clear)*/
    CYWREC.CYWMSGNO = 0020; /* <--- successful*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "140P";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0P140

// zone & location edits
Function KY0PS1R()


   /* ************************************************************/
   /* *** setup error if zone missing & exit                  ****/
   /* ************************************************************/

  if (KY0PM110.SL4ZONE[CYWIDX01] > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1RA";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0PM110.SL4ZONE[CYWIDX01] cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** verify the area/zone combination entered are valid  ****/
   /* *** for this warehouse.                                 ****/
   /* ************************************************************/

  SL4REC.XARCD = KY0PM110.XARCD[CYWIDX01];
  SL4REC.SL4ZONE = KY0PM110.SL4ZONE[CYWIDX01];

  TA1REC.TA1LOCAT[2] = "KY0PS1R ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSL4I0(); /* <=== obtain zone record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0PM110.XARCD[CYWIDX01] bold;
    set KY0PM110.SL4ZONE[CYWIDX01] cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S1RB";
      CYWREC.CYWMSGNO = 0038; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1RC";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      CYWREC.XXXLOCID = "S1RD";
      CYWREC.CYWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1RE";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** both locations must be present                      ****/
   /* ************************************************************/

  if (KY0PM110.KY0PMTLC[CYWIDX01] > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1RF";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0PM110.KY0PMTLC[CYWIDX01] cursor, bold;
    return;
  end

  if (KY0PM110.KY0PMFLC[CYWIDX01] > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1RG";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0PM110.KY0PMFLC[CYWIDX01] cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** from location can not be greater than to location   ****/
   /* ************************************************************/

  if (KY0PM110.KY0PMFLC[CYWIDX01] > KY0PM110.KY0PMTLC[CYWIDX01])
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1RH";
    CYWREC.CYWMSGNO = 0028; /* <--- beg > end msg*/
    set KY0PM110.KY0PMFLC[CYWIDX01] cursor, bold;
    set KY0PM110.KY0PMTLC[CYWIDX01] bold;
    return;
  end

   /* ************************************************************/
   /* *** verify to area/zone/location entered is valid       ****/
   /* *** for this warehouse.                                 ****/
   /* ************************************************************/

  SL5REC.XARCD = KY0PM110.XARCD[CYWIDX01];
  SL5REC.SL4ZONE = KY0PM110.SL4ZONE[CYWIDX01];
  SL5REC.SL5LOCTN = KY0PM110.KY0PMTLC[CYWIDX01];

  TA1REC.TA1LOCAT[2] = "KY0PS1R ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSL5I0(); /* <=== obtain location record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0PM110.XARCD[CYWIDX01] bold;
    set KY0PM110.SL4ZONE[CYWIDX01] bold;
    set KY0PM110.KY0PMTLC[CYWIDX01] cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S1RI";
      CYWREC.CYWMSGNO = 0038; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1RJ";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      CYWREC.XXXLOCID = "S1RK";
      CYWREC.CYWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1RL";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** verify from area/zone/location entered is valid     ****/
   /* *** for this warehouse.                                 ****/
   /* ************************************************************/

  SL5REC.XARCD = KY0PM110.XARCD[CYWIDX01];
  SL5REC.SL4ZONE = KY0PM110.SL4ZONE[CYWIDX01];
  SL5REC.SL5LOCTN = KY0PM110.KY0PMFLC[CYWIDX01];

  TA1REC.TA1LOCAT[2] = "KY0PS1R ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSL5I0(); /* <=== obtain location record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0PM110.XARCD[CYWIDX01] bold;
    set KY0PM110.SL4ZONE[CYWIDX01] bold;
    set KY0PM110.KY0PMFLC[CYWIDX01] cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S1RM";
      CYWREC.CYWMSGNO = 0038; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1RN";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      CYWREC.XXXLOCID = "S1RO";
      CYWREC.CYWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1RP";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PS1R

// key missing input edits
Function KY0PSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0PM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0PM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSA1

// same key edits
Function KY0PSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0PM110.XWHCD != KY0PW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSB1

// key field edits
Function KY0PSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0PM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0PM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      KY0PM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1A";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0PM110.XWHCD cursor, bold;
    end
  else
    KY0PM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1B";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0PM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSC1

// key relational edits
Function KY0PSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSD1

// key obtain table data
Function KY0PSE1()


   /* ************************************************************/
   /* *** make one time table accesses for data               ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed here                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain each of the existing parms for display       ****/
   /* *** note: not fnd is ok = not selected today            ****/
   /* ************************************************************/

  set XZZREC empty;

  XZZREC.XZZ2CHR1 = KY0PM110.XWHCD;
  CYWREC.CYWCTR01 = KY0PM110.XWHCD;
  XZZREC.XZZQRYRN = CYWREC.CYWCTR01;

   /* ************************************************************/
   /* *** obtain cy5500 = sched.d vs actual cnt by loc rpt parm***/
   /* ************************************************************/

  XZZREC.XZZQRYID = "CY5500  ";

  XSXZZI0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KY0PM110.KY0PMSCH = "S";
    KY0PW01.KY0PWSCH = "S";
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== ok return code*/
      KY0PM110.KY0PMSCH = " ";
      KY0PW01.KY0PWSCH = " ";
    else
      CYWREC.CYWERRSW = "Y";
      set KY0PM110.KY0PMSCH cursor, bold;
      if (SQLCA.VAGen_SQLCODE == -911)
        CYWREC.XXXLOCID = "SE1A";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      CYWREC.XXXLOCID = "SE1B";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** obtain cy6000 = pick zone cnt sheet ctl log parm    ****/
   /* ************************************************************/

  XZZREC.XZZQRYID = "CY6000  ";

  XSXZZI0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KY0PM110.KY0PMPIC = "S";
    KY0PW01.KY0PWPIC = "S";
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== ok return code*/
      KY0PM110.KY0PMPIC = " ";
      KY0PW01.KY0PWPIC = " ";
    else
      CYWREC.CYWERRSW = "Y";
      set KY0PM110.KY0PMPIC cursor, bold;
      if (SQLCA.VAGen_SQLCODE == -911)
        CYWREC.XXXLOCID = "SE1C";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      CYWREC.XXXLOCID = "SE1D";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** obtain cy6100 = audit random locations rpt parm     ****/
   /* ************************************************************/

  XZZREC.XZZQRYID = "CY6100  ";

  XSXZZI0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KY0PM110.KY0PMAUD = "S";
    KY0PW01.KY0PWAUD = "S";
    KY0PM110.KY0PMSTR = XZZREC.XZZSINT1;
    KY0PW01.KY0PWSTR = XZZREC.XZZSINT1;
    KY0PM110.KY0PMSKP = XZZREC.XZZSINT2;
    KY0PW01.KY0PWSKP = XZZREC.XZZSINT2;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== ok return code*/
      KY0PM110.KY0PMAUD = " ";
      KY0PW01.KY0PWAUD = " ";
      KY0PW01.KY0PWSTR = 0;
      KY0PM110.KY0PMSTR = 9;
      KY0PW01.KY0PWSKP = 0;
      KY0PM110.KY0PMSKP = 80;
    else
      CYWREC.CYWERRSW = "Y";
      set KY0PM110.KY0PMAUD cursor, bold;
      if (SQLCA.VAGen_SQLCODE == -911)
        CYWREC.XXXLOCID = "SE1E";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      CYWREC.XXXLOCID = "SE1F";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** obtain cy5100 = freq./tolerance rpt parms           ****/
   /* ************************************************************/

  XZZREC.XZZQRYID = "CY5100  ";

  XSXZZS1(); /* <=== select set*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== ok return code*/
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      set KY0PM110.XARCD[1] cursor, bold;
      if (SQLCA.VAGen_SQLCODE == -911)
        CYWREC.XXXLOCID = "SE1G";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      CYWREC.XXXLOCID = "SE1H";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** setup all ranges in ws & on map                     ****/
   /* *** note: also save line no.s for update/delete & add   ****/
   /* ************************************************************/

  KY0PW01.KY0PWMLN = 0;
  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (SQLCA.VAGen_SQLCODE == 0)
      KY0PW01.KY0PWMLN = XZZREC.XZZQRYLN;
      KY0PW01.XZZQRYLN[CYWIDX01] = XZZREC.XZZQRYLN;
      KY0PM110.XARCD[CYWIDX01] = XZZREC.XZZ2CHR2;
      KY0PW01.XARCD[CYWIDX01] = XZZREC.XZZ2CHR2;
      KY0PW01.XZZ3CHR1 = XZZREC.XZZ3CHR1;
      KY0PM110.SL4ZONE[CYWIDX01] = KY0PW01.KY0PWWZN;
      KY0PW01.SL4ZONE[CYWIDX01] = KY0PW01.KY0PWWZN;
      KY0PM110.KY0PMFLC[CYWIDX01] = XZZREC.XZZ6CHR;
      KY0PW01.KY0PWFLC[CYWIDX01] = XZZREC.XZZ6CHR;
      KY0PW01.XZZ8CHR = XZZREC.XZZ8CHR;
      KY0PM110.KY0PMTLC[CYWIDX01] = KY0PW01.KY0PWWLC;
      KY0PW01.KY0PWTLC[CYWIDX01] = KY0PW01.KY0PWWLC;
      XSXZZF1(); /* <=== fetch next row*/
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        KY0PW01.XZZQRYLN[CYWIDX01] = 0;
        KY0PM110.XARCD[CYWIDX01] = " ";
        KY0PW01.XARCD[CYWIDX01] = " ";
        KY0PM110.SL4ZONE[CYWIDX01] = " ";
        KY0PW01.SL4ZONE[CYWIDX01] = " ";
        KY0PM110.KY0PMFLC[CYWIDX01] = " ";
        KY0PW01.KY0PWFLC[CYWIDX01] = " ";
        KY0PM110.KY0PMTLC[CYWIDX01] = " ";
        KY0PW01.KY0PWTLC[CYWIDX01] = " ";
      else
        CYWREC.CYWERRSW = "Y";
        set KY0PM110.XARCD[CYWIDX01] cursor, bold;
        if (SQLCA.VAGen_SQLCODE == -911)
          CYWREC.XXXLOCID = "SE1I";
          CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        CYWREC.XXXLOCID = "SE1J";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSE1

// save current key value(s)
Function KY0PSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* *** and in cyxrec to pass to other appl.s               ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0PM110.XWHCD;

  KY0PW01.XWHCD = KY0PM110.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSF1

// setup map key fields
Function KY0PSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  KY0PM110.XWHCD = KY0PW01.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSG1

// ENTER processing
Function KY0PSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0PSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  KY0PSC1(); /* <=== field edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  KY0PSD1(); /* <=== relational edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  KY0PSE1(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0PSF1(); /* <=== save current key value(s)*/
    KY0PST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  KY0PSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSH1

// reset screen (clear)
Function KY0PSQ1()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values/defaults  ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0PM110 initial; /* resets entire screen*/

  KY0PSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0PM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0PM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0PM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0PM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0PW01 empty; /* appl. working storage area*/

  set KY0PM110.XWHCD cursor;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSQ1

// data edits
Function KY0PSR1()


   /* ************************************************************/
   /* *** perform loop bottom to top for cursor positioning   ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = CYWREC.CYWLINPP;
  CYWREC.XWHCD = KY0PM110.XWHCD;
  SL4REC.XWHCD = KY0PM110.XWHCD;
  SL5REC.XWHCD = KY0PM110.XWHCD;
  CYWREC.XWHCD = KY0PM110.XWHCD;

  while (CYWREC.CYWIDX01 >= 1)
    if (KY0PM110.XARCD[CYWIDX01] > " "
     || KY0PM110.SL4ZONE[CYWIDX01] > " "
     || KY0PM110.KY0PMFLC[CYWIDX01] > " "
     || KY0PM110.KY0PMTLC[CYWIDX01] > " ")
      if (KY0PM110.XARCD[CYWIDX01] > " ")
         /* ************************************************************/
         /* *** if area code in tbl & active: continue              ****/
         /* *** note: area tbl key = whse + area                    ****/
         /* ************************************************************/
        CYWREC.CYWTBLCD = KY0PM110.XARCD[CYWIDX01];
        if (CYWREC.CYWTBLKY in XARTBL.XARKEY)
          KY0PS1R(); /* <=== zone & range edits*/
        else
          CYWREC.CYWERRSW = "Y";
          CYWREC.XXXLOCID = "SR1A";
          CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
          set KY0PM110.XARCD[CYWIDX01] cursor, bold;
        end
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SR1B";
        CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
        set KY0PM110.XARCD[CYWIDX01] cursor, bold;
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** selection codes must be either: 's' or blank        ****/
   /* ************************************************************/

  if (KY0PM110.KY0PMAUD == " "
   || KY0PM110.KY0PMAUD == "S")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SR1C";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0PM110.KY0PMAUD cursor, bold;
  end

  if (KY0PM110.KY0PMPIC == " "
   || KY0PM110.KY0PMPIC == "S")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SR1D";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0PM110.KY0PMPIC cursor, bold;
  end

  if (KY0PM110.KY0PMSCH == " "
   || KY0PM110.KY0PMSCH == "S")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SR1E";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0PM110.KY0PMSCH cursor, bold;
  end

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** if audit selected, both start & skip must > 0       ****/
   /* ************************************************************/

  if (KY0PM110.KY0PMAUD == "S")
    if (KY0PM110.KY0PMSKP > 0)
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SR1F";
      CYWREC.CYWMSGNO = 0009; /* <--- missing fld msg*/
      set KY0PM110.KY0PMSKP cursor, bold;
    end
    if (KY0PM110.KY0PMSTR > 0)
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SR1G";
      CYWREC.CYWMSGNO = 0009; /* <--- missing fld msg*/
      set KY0PM110.KY0PMSTR cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSR1

// reset screen (empty)
Function KY0PST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0PM110 empty; /* resets entire screen*/

  KY0PSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0PM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0PM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0PM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0PM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0PW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PST1

// updates
Function KY0PSU1()


   /* ************************************************************/
   /* *** process each rpt selection/location range           ****/
   /* ************************************************************/

  set XZZREC empty;

  XZZREC.XZZ2CHR1 = KY0PM110.XWHCD;
  CYWREC.CYWCTR01 = KY0PM110.XWHCD;
  XZZREC.XZZQRYRN = CYWREC.CYWCTR01;

   /* ************************************************************/
   /* *** for rpt selection flds:                             ****/
   /* *** note: flds may only be blank or 's'                 ****/
   /* *** if the related ws fld is equal to                   ****/
   /* ***   the map fld,  do nothing & continue               ****/
   /* *** if the related ws fld is not blank and              ****/
   /* ***   the map fld is blank(erased),  delete parm row    ****/
   /* *** if the related ws fld is blank and                  ****/
   /* ***   the map fld is not blank,  add parm row           ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** update cy5500 = sched.d vs actual cnt by loc rpt parm***/
   /* ************************************************************/

  if (KY0PW01.KY0PWSCH == KY0PM110.KY0PMSCH)
     /* ** next sentence ***/
  else
    XZZREC.XZZQRYID = "CY5500  ";
    if (KY0PW01.KY0PWSCH > " ")
      XSXZZD0(); /* <=== delete parm row*/
    else
      XSXZZA0(); /* <=== add parm row*/
    end
  end

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** update cy6000 = pick zone cnt sheet ctl log parm    ****/
   /* ************************************************************/

  if (KY0PW01.KY0PWPIC == KY0PM110.KY0PMPIC)
     /* ** next sentence ***/
  else
    XZZREC.XZZQRYID = "CY6000  ";
    if (KY0PW01.KY0PWPIC > " ")
      XSXZZD0(); /* <=== delete parm row*/
    else
      XSXZZA0(); /* <=== add parm row*/
    end
  end

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** update cy6100 = audit random locations rpt parm     ****/
   /* ************************************************************/

  if (KY0PM110.KY0PMAUD == "S")
    if (KY0PW01.KY0PWAUD == " ")
      XZZREC.XZZQRYID = "CY6100  ";
      XZZREC.XZZSINT1 = KY0PM110.KY0PMSTR;
      XZZREC.XZZSINT2 = KY0PM110.KY0PMSKP;
      XSXZZA0(); /* <=== add parm row*/
    else
      if (KY0PW01.KY0PWSTR != KY0PM110.KY0PMSTR
       || KY0PW01.KY0PWSKP != KY0PM110.KY0PMSKP)
        XZZREC.XZZQRYID = "CY6100  ";
        XZZREC.XZZSINT1 = KY0PM110.KY0PMSTR;
        XZZREC.XZZSINT2 = KY0PM110.KY0PMSKP;
        XSXZZR0(); /* <=== update parm row*/
      else
         /* ** next sentence ***/
      end
    end
  else
    if (KY0PW01.KY0PWAUD == " ")
       /* ** next sentence ***/
    else
      XZZREC.XZZQRYID = "CY6100  ";
      XSXZZD0(); /* <=== delete parm row*/
    end
  end

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** for rpt range flds:                                 ****/
   /* *** if the related range ws flds are all equal to       ****/
   /* ***   the map range flds,  do nothing & continue        ****/
   /* ***   if the related range ws flds are not blank and    ****/
   /* ***     the map flds are blank(erased),  delete parm row****/
   /* ***   else                                              ****/
   /* ***     the map range flds are changed,  update parm row****/
   /* *** else                                                ****/
   /* ***   the map flds are not blank,  add parm row         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** update cy5100 = freq./tolerance rpt parms by line   ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0PW01.XARCD[CYWIDX01] == KY0PM110.XARCD[CYWIDX01]
     && KY0PW01.SL4ZONE[CYWIDX01] == KY0PM110.SL4ZONE[CYWIDX01]
     && KY0PW01.KY0PWFLC[CYWIDX01] == KY0PM110.KY0PMFLC[CYWIDX01]
     && KY0PW01.KY0PWTLC[CYWIDX01] == KY0PM110.KY0PMTLC[CYWIDX01])
       /* ** next sentence ***/
    else
      XZZREC.XZZQRYID = "CY5100  ";
      if (KY0PW01.XARCD[CYWIDX01] > " ")
        XZZREC.XZZQRYLN = KY0PW01.XZZQRYLN[CYWIDX01];
        if (KY0PM110.XARCD[CYWIDX01] == " ")
          XSXZZD0(); /* <=== delete parm row*/
        else
          XZZREC.XZZ2CHR2 = KY0PM110.XARCD[CYWIDX01];
          KY0PW01.KY0PWWZN = KY0PM110.SL4ZONE[CYWIDX01];
          XZZREC.XZZ3CHR1 = KY0PW01.XZZ3CHR1;
          XZZREC.XZZ6CHR = KY0PM110.KY0PMFLC[CYWIDX01];
          KY0PW01.KY0PWWLC = KY0PM110.KY0PMTLC[CYWIDX01];
          XZZREC.XZZ8CHR = KY0PW01.XZZ8CHR;
          XSXZZR0(); /* <=== replace parm row*/
        end
      else
        KY0PW01.KY0PWMLN = KY0PW01.KY0PWMLN + 1;
        XZZREC.XZZQRYLN = KY0PW01.KY0PWMLN;
        XZZREC.XZZ2CHR2 = KY0PM110.XARCD[CYWIDX01];
        KY0PW01.KY0PWWZN = KY0PM110.SL4ZONE[CYWIDX01];
        XZZREC.XZZ3CHR1 = KY0PW01.XZZ3CHR1;
        XZZREC.XZZ6CHR = KY0PM110.KY0PMFLC[CYWIDX01];
        KY0PW01.KY0PWWLC = KY0PM110.KY0PMTLC[CYWIDX01];
        XZZREC.XZZ8CHR = KY0PW01.XZZ8CHR;
        XSXZZA0(); /* <=== add parm row*/
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0PSU1

// fetch : qmf parm row : 1
Function XSXZZF1()


   /* ************************************************************/
   /* *** select next row from:  qmf parm row                 ****/
   /* *** using the std module:  IO1000                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  call "IO1000" ("SN", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSXZZF1 ";
  TA1REC.TA1LOCAT[1] = "IO1000  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DCORP   ";
  TA1REC.TA1TBLVU = "VPARM101";
  TA1REC.TA1TBLKE = XZZREC.XZZKEYGP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSXZZF1

// upd : qmf parm row : 0
Function XSXZZR0()


   /* ************************************************************/
   /* *** replace row in:  qmf parm row                       ****/
   /* *** using the std module:  IO1000                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* *** note: since io1000 does not have a replace function ****/
   /* ***       first deleted & then add the new data         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete unique row                                   ****/
   /* ************************************************************/

  XSXZZD0(); /* <=== delete unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous delete successful)             ****/
   /* *** note: IO sgrp sets up zzz family (data & time)      ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  XSXZZA0(); /* <=== insert unique row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSXZZR0

// select set : qmf parm rows : 1
Function XSXZZS1()


   /* ************************************************************/
   /* *** select set from:  qmf parm row                      ****/
   /* *** using the std module:  IO1000                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none found                                 ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* *** note: perform first fetch in order to be able to    ****/
   /* ***       test the select set return code for +100      ****/
   /* ************************************************************/

  call "IO1000" ("SS", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSXZZS1 ";
    TA1REC.TA1LOCAT[1] = "IO1000  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DCORP   ";
    TA1REC.TA1TBLVU = "VPARM101";
    TA1REC.TA1TBLKE = XZZREC.XZZKEYGP;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** perform first fetch                                 ****/
   /* ************************************************************/

  XSXZZF1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSXZZS1

//*** RECORD=KY0PW01 ****
// ************************************************************
// 
//           CYCLE COUNT DOCUMENT VERIFICATION
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-09-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0PW01 type basicRecord
  10 KY0PWLK1 KY0PWLK1 ; 
    15 XWHCD XWHCD ; 
  10 KY0PWSTR KY0PWSTR ; 
  10 KY0PWSKP KY0PWSKP ; 
  10 KY0PWMLN KY0PWMLN ; 
  10 XZZ3CHR1 XZZ3CHR1 ; 
    15 KY0PWWZN KY0PWWZN ; 
    15 * char(1) ; 
  10 XZZ8CHR XZZ8CHR ; 
    15 KY0PWWLC KY0PWWLC ; 
    15 * char(2) ; 
  10 KY0PWSCH KY0PWSCH ; 
  10 KY0PWPIC KY0PWPIC ; 
  10 KY0PWAUD KY0PWAUD ; 
  10 XARCD XARCD [9] ; 
  10 SL4ZONE SL4ZONE [9] ; 
  10 KY0PWFLC KY0PWFLC [9] ; 
  10 KY0PWTLC KY0PWTLC [9] ; 
  10 XZZQRYLN XZZQRYLN [9] ; 
end // end KY0PW01

// select audit random loc rpt
DataItem KY0PWAUD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from location
DataItem KY0PWFLC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem KY0PWLK1 char(2)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// maximum query line number
DataItem KY0PWMLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select pick zone ctl log
DataItem KY0PWPIC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select sched vs actual rpt
DataItem KY0PWSCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of locs to skip selecting
DataItem KY0PWSKP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nbr locs to skip before start
DataItem KY0PWSTR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to location
DataItem KY0PWTLC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-loc-cd
DataItem KY0PWWLC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-zone-cd
DataItem KY0PWWZN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

