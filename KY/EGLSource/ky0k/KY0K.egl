package ky0k;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=KY0K ****
// ************************************************************
// 
//           CYCLE COUNT
//           RECONCILE COUNT WITH PICK SCHEDULES
//           ===================================
// 
// ************************************************************
// 
// OVERVIEW: This application is used to list all previously
//           selected pick schedule numbers (and de-select by
//           erasing the selection indicator).
//           Each selection can also be viewed with size data.
//           And additional pick schedule numbers may be added
//           to the cc selected adjustment db via a separate
//           add screen.
// 
//           notes:
//             1) PF12 must be used to make any changes (erases
//                or adds) to the db.  If the application is
//                exited prior to a PF12, none of the changes
//                will be saved.
//             2) PF12 will automatically restart the appl.
//                with the last keys as the passed keys.
//             3) PF12 on the add screen will clear the screen
//                so that more pick schedule numbers may be
//                added.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  01/25/88  W. Jones    Created
// 01  09/13/88  W. Jones    reset scrn if fast path error
// 01  03/13/89  jwood       added noncsp option to calls
// 01  03/13/89  jwood       added xssegtr logic
// 02  02/12/91  wtate       changed xsdcd to pc2inseg and
//                            xsacd to xegcd for table changes
// 03  07/31/91  scleme      convert CY0K to KY0K
// 00  06/19/92  Ryonke      Changed due to table structure
//                           changes.
// 00  12/01/92  jcampb      table structure changes
// ************************************************************
// ************************************************************
// *********************
Program KY0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CY1REC CY1REC; // record
  CY2REC CY2REC; // record
  CY4REC CY4REC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  CYXREC CYXREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0KW01 KY0KW01; // record
  KY0KW02 KY0KW02; // record
  KY0KWD1 KY0KWD1; // record
  KY0KWL1 KY0KWL1; // record
  KY0KWS1 KY0KWS1; // record
  KY0KWX1 KY0KWX1; // record
  PKNREC PKNREC; // record
  SQLCA SQLCA; // record
  SR1REC SR1REC; // record
  SRBREC SRBREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use KY0KM.KY0KM110,  // forms
      KY0KM.KY0KM115, 
      KY0KM.KY0KM121, 
      KY0KM.KY0KM122, 
      KY0KM.KY0KM126, 
      KY0KM.KY0KM129
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0K110: KY0K110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0K120; /* <=== converse map*/
    end

    CYWREC.XXXLOCID = "140 "; /* error id location id*/
    goto KY0K140; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0K120: KY0K120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0K120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0K110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0K120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6)
      CYWREC.XXXLOCID = "140 ";
      goto KY0K140; /* <=== converse map*/
    end

    if (converseVar.eventKey is pf9)
      goto KY0K210; /* <=== go to add level*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0K120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0K140: KY0K140();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0K140; /* <=== re-fresh this screen*/
    end

     /* ***********************************************************/
     /* *** if PA2: restart appl. regardless of status         ****/
     /* ***********************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0K110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      if (CYWREC.CYWSKYSW == "N")
        goto KY0K120; /* <=== re-display key screen*/
      end
      goto KY0K140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (CYWREC.CYWSKYSW == "N")
      goto KY0K140; /* <=== re-display data scrn*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* *** note: not going to 120 re: able to re-edit          ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6)
      CYWREC.XXXLOCID = "140 ";
      goto KY0K140; /* <=== setup for new input*/
    end


    if (converseVar.eventKey is pf12)
      CYWREC.XXXLOCID = "140 ";
      goto KY0K110; /* <=== re-start this function*/
    end


    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto KY0K140; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf9)
      goto KY0K210; /* <=== go to add level*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0K140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0K210: KY0K210();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0K220; /* <=== converse map*/
    end

    CYWREC.XXXLOCID = "240 "; /* error id location id*/
    goto KY0K240; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0K220: KY0K220();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0K220; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0K210; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0K220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6)
      CYWREC.XXXLOCID = "240 ";
      goto KY0K240; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0K220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0K240: KY0K240();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0K240; /* <=== re-fresh this screen*/
    end

     /* ***********************************************************/
     /* *** if PA2: restart appl. regardless of status         ****/
     /* ***********************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0K210; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      if (CYWREC.CYWSKYSW == "N")
        goto KY0K220; /* <=== re-display key screen*/
      end
      goto KY0K240; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (CYWREC.CYWSKYSW == "N")
      goto KY0K240; /* <=== re-display data scrn*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* *** note: not going to 120 re: able to re-edit          ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf12)
      CYWREC.XXXLOCID = "240 ";
      goto KY0K240; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf17)
      goto KY0K110; /* <=== restart the application*/
    end
     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0K240; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0K

// one time initializations
Function KY0K110()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard setting of segmented transaction id        ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0KM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO != 20)
    set CYWREC empty; /* common working storage fields*/
  end
  set CYVREC empty; /* common IO module pass record*/
  set KY0KWL1 empty; /* detail line layout*/
  set KY0KWD1 empty; /* detail tsq page layout*/
  set KY0KWS1 empty; /* summary tsq page layout*/
  set KY0KW01 empty; /* appl. working storage area*/
  set CY1REC empty; /* cyc cnt doc/loc hdr record*/
  set CY2REC empty; /* cyc cnt doc/prod itm record*/
  set CY4REC empty; /* cyc cnt sel.d adj.s record*/
  set PKNREC empty; /* style/color record*/
  set SYPREC empty; /* size desc. record*/
  set SR1REC empty; /* ship recon hdr record*/
  set SRBREC empty; /* ship recon itm record*/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set TA5REC empty; /* TA0050 record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/25/88  W. Jones      created                ****/
   /* ***  01  09/13/88  W. Jones      reset scrn if fast     ****/
   /* ***                              path error             ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "01";

  CYWREC.XXXMAPNM = "KY0KM110";
  CYWREC.XXXTITLE = "RECONCILE COUNT WITH PICK SCHEDULES";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0K"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0K110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0KM110"; /* TA0020 current map name*/
  TA1REC.TA1MAP = "KY0KM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWSEXSW = "N"; /* special exit switch*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0KM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0KM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0KM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0KM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0KSE9(); /* <=== userarea entry processing*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  CYWREC.CYWSUMQU = "CYSK"; /* sum tsq id*/
  CYWREC.CYWLASPF = "E"; /* last pf key (enter or pf6)*/
  KY0KWS1.KY0KWLTH = 060; /* sum tsq length (12 x 5)*/
  CYWREC.CYWLINPP = 12; /* total lines of data per page*/

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0KM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0KM110.XWHCD cursor;
  end

   /* ************************************************************/
   /* *** attempt to obtain first time table data             ****/
   /* ************************************************************/

  KY0KSH1();

  if (CYWREC.CYWERRSW == "Y")
    KY0KSN2(); /* <=== display blank map*/
    exit stack;
  end

  KY0KM110.SL2CASE = "**N/A***";

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0K110

// converse & control key entry
Function KY0K120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  KY0KM110.SL2CASE = " ";

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0KM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0KM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0KM110.CATOAP > " ")
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = KY0KM110.CATOAP;
    COMMAREA.CAITEM = KY0KM110.CAITEM;
    XSEXIT();
    KY0KST1(); /* <=== reset scrn*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0KM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSEXSW = "N";
  CYWREC.CYWSKYSW = "Y";
  KY0KM110.VAGen_EZEMSG = " ";
  set KY0KM110.CATOAP initialAttributes;
  set KY0KM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0KM110.XWHCD initialAttributes;
  set KY0KM110.IN5TRDCD initialAttributes;
  set KY0KM110.KY0KMDOC initialAttributes;
  set KY0KM110.KY0KMSUB initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** note: select & reconcile flds attr.s reset as part  ****/
   /* ***       of each page display                          ****/
   /* ************************************************************/

  KY0KM110.SL2CASE = "**N/A***";

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0KM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0KM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0KSH1(); /* <=== enter processing*/
    exit stack;
  end

  if (converseVar.eventKey is pf6)
    KY0KSI1(); /* <=== pf6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf9) /* <=== add ps sel.d adj.s*/
    exit stack;
  end

  if (converseVar.eventKey is pf13)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120G";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0H";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120H";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120I";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120J";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120K";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120L";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120M";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0K120

// display lf sum line
Function KY0K121()


   /* ************************************************************/
   /* *** display left sum line with sel & rec flds reset     ****/
   /* ************************************************************/

  KY0KM110.XMCYMSEL[CYWIDX01] = " ";
  KY0KM110.KY0KMREC[CYWIDX01] = KY0KWS1.KY0KWREC[CYWIDX01];
  KY0KM121.KY0KMSCH = KY0KWS1.PK1PKSCH[CYWIDX01];

  set KY0KM110.XMCYMSEL[CYWIDX01] initialAttributes;
  set KY0KM110.KY0KMREC[CYWIDX01] initialAttributes;


  display KY0KM121 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end KY0K121

// display lf det line
Function KY0K122()


   /* ************************************************************/
   /* *** display left det line with sel & rec flds askip,dark****/
   /* ************************************************************/

  KY0KM110.XMCYMSEL[CYWIDX01] = " ";
  KY0KM110.KY0KMREC[CYWIDX01] = " ";

  set KY0KM110.XMCYMSEL[CYWIDX01] skip, invisible;
  set KY0KM110.KY0KMREC[CYWIDX01] skip, invisible;

  KY0KWL1.KY0KWLIN = KY0KWD1.KY0KWLIN[CYWIDX01];

  CYWREC.CYWCTR01 = 1;
  while (CYWREC.CYWCTR01 <= 4)
    KY0KM122.SY4IDDSC[CYWCTR01] = KY0KWL1.SY4IDDSC[CYWCTR01];
    KY0KM122.KY0KMQTY[CYWCTR01] = KY0KWL1.KY0KWQTY[CYWCTR01];
    CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
  end


  display KY0KM122 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end KY0K122

// disp lf sum line for det map
Function KY0K125()


   /* ************************************************************/
   /* *** display left sum line with sel & rec flds reset     ****/
   /* *** for the lf det map                                  ****/
   /* ************************************************************/

  KY0KM110.XMCYMSEL[1] = " ";
  KY0KM110.KY0KMREC[1] = KY0KWS1.KY0KWREC[CYWDETIX];
  KY0KM121.KY0KMSCH = KY0KWS1.PK1PKSCH[CYWDETIX];

  set KY0KM110.XMCYMSEL[1] initialAttributes;
  set KY0KM110.KY0KMREC[1] initialAttributes;


  display KY0KM121 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end KY0K125

// display det line hdg
Function KY0K126()


   /* ************************************************************/
   /* *** display a heading with sel & rec flds askip,dark ****/
   /* ************************************************************/

  set KY0KM110.XMCYMSEL[2] skip, invisible;
  set KY0KM110.KY0KMREC[2] skip, invisible;


  display KY0KM126 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end KY0K126

// display blank line
Function KY0K129()


   /* ************************************************************/
   /* *** display a blank line with sel & rec flds askip,dark ****/
   /* ************************************************************/

  set KY0KM110.XMCYMSEL[CYWIDX01] skip, invisible;
  set KY0KM110.KY0KMREC[CYWIDX01] skip, invisible;


  display KY0KM129 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end KY0K129

// converse & control data entry
Function KY0K140()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "N")
    set KY0KM110.XMCYMSEL[1] cursor;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0KM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0KM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140A";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140B";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140C";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** IF PF5: GO TO CYCLE COUNT MAIN MENU                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140D";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0KM110.CATOAP > " ")
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = KY0KM110.CATOAP;
    COMMAREA.CAITEM = KY0KM110.CAITEM;
    XSEXIT();
    KY0KST1(); /* <=== reset scrn*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140E";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0KM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSEXSW = "N";
  CYWREC.CYWSKYSW = "Y";
  KY0KM110.VAGen_EZEMSG = " ";
  CYWREC.XXXLOCID = "140 ";
  set KY0KM110.CATOAP initialAttributes;
  set KY0KM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set KY0KM110.XWHCD initialAttributes;
  set KY0KM110.IN5TRDCD initialAttributes;
  set KY0KM110.KY0KMDOC initialAttributes;
  set KY0KM110.KY0KMSUB initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s depending on function   ****/
   /* *** note: sel & rec fld attr.s reset in map display     ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0KM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0KM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER, make sure still same key                  ****/
   /* ***           check for selection input                 ****/
   /* ***           if no selection input, setup use PF12 msg ****/
   /* *** note: check for a selection in reverse order to use ****/
   /* ***       only the 1st entered & erase others entered   ****/
   /* *** note: the saved sum line no. is needed to update    ****/
   /* ***       sum tsq when on det & going to sum            ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0KSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0KSF1(); /* <=== save key values*/
      KY0KST1(); /* <=== reset map (empty)*/
      KY0KSH1(); /* <=== enter processing*/
      exit stack;
    end
    KY0KW01.KY0KWLNO = 0;
    CYWREC.CYWIDX01 = CYWREC.CYWLINPP;
    while (CYWREC.CYWIDX01 >= 1)
      if (KY0KM110.XMCYMSEL[CYWIDX01] > " ")
        KY0KW01.KY0KWLNO = CYWREC.CYWIDX01;
        KY0KM110.XMCYMSEL[CYWIDX01] = " ";
      end
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
    end
    if (KY0KW01.KY0KWLNO > 0)
      if (CYWREC.CYWLASPF == "E")
        KY0KSUE(); /* tsq update for last pfkey=enter*/
        CYWREC.CYWDETIX = KY0KW01.KY0KWLNO;
        CYWREC.CYWLASPF = "6";
        KY0KSP1(); /* <=== setup lf det map*/
        exit stack;
      else
        KY0KSU6(); /* tsq update for last pfkey=pf6*/
        CYWREC.CYWDETIX = 1;
        CYWREC.CYWLASPF = "E";
        KY0KSO1(); /* <=== setup lf sum map*/
        exit stack;
      end
    else
      if (CYWREC.CYWLASPF == "E")
        KY0KSUE(); /* tsq update for last pfkey=enter*/
        CYWREC.XXXLOCID = "140N";
        CYWREC.CYWMSGNO = 0080; /* <--- use pf12 msg*/
        exit stack;
      else
        KY0KSU6(); /* tsq update for last pfkey=pf6*/
        CYWREC.CYWDETIX = 1;
        CYWREC.CYWLASPF = "E";
        KY0KSO1(); /* <=== setup lf sum map*/
        exit stack;
      end
    end
  end

   /* ************************************************************/
   /* *** if PF6,   make sure still same key                  ****/
   /* ***           check for selection input                 ****/
   /* ***           if no selection input, setup use PF12 msg ****/
   /* *** note: check for a selection in reverse order to use ****/
   /* ***       only the 1st entered & erase others entered   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    KY0KSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0KSF1(); /* <=== save key values*/
      KY0KST1(); /* <=== reset map (empty)*/
      KY0KSI1(); /* <=== pf6 processing*/
      exit stack;
    end
    KY0KW01.KY0KWLNO = 0;
    CYWREC.CYWIDX01 = CYWREC.CYWLINPP;
    while (CYWREC.CYWIDX01 >= 1)
      if (KY0KM110.XMCYMSEL[CYWIDX01] > " ")
        KY0KW01.KY0KWLNO = CYWREC.CYWIDX01;
        KY0KM110.XMCYMSEL[CYWIDX01] = " ";
      end
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
    end
    if (KY0KW01.KY0KWLNO > 0)
      if (CYWREC.CYWLASPF == "E")
        KY0KSUE(); /* tsq update for last pfkey=enter*/
        CYWREC.CYWDETIX = KY0KW01.KY0KWLNO;
        CYWREC.CYWLASPF = "6";
        KY0KSP1(); /* <=== setup lf det map*/
        exit stack;
      else
        KY0KSU6(); /* tsq update for last pfkey=pf6*/
        CYWREC.CYWDETIX = 1;
        CYWREC.CYWLASPF = "E";
        KY0KSO1(); /* <=== setup lf sum map*/
        exit stack;
      end
    else
      if (CYWREC.CYWLASPF == "6")
        KY0KSU6(); /* tsq update for last pfkey=pf6*/
        CYWREC.XXXLOCID = "140O";
        CYWREC.CYWMSGNO = 0080; /* <--- use pf12 msg*/
        exit stack;
      else
        KY0KSUE(); /* tsq update for last pfkey=enter*/
        CYWREC.CYWDETIX = 1;
        CYWREC.CYWLASPF = "6";
        KY0KSP1(); /* <=== setup lf det map*/
        exit stack;
      end
    end
  end

   /* ************************************************************/
   /* *** if PF7, scroll backwards (key changes not allowed)  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    CYWREC.CYWIDX01 = CYWREC.CYWLINPP;
    while (CYWREC.CYWIDX01 >= 1)
      if (KY0KM110.XMCYMSEL[CYWIDX01] > " ")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "140P";
        CYWREC.CYWMSGNO = 0084; /* <--- sel can't be enterd*/
        set KY0KM110.XMCYMSEL[CYWIDX01] cursor, bold;
      end
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
    end
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    KY0KSJ1(); /* pf7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8, scroll forwards (key changes not allowed)   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    CYWREC.CYWIDX01 = CYWREC.CYWLINPP;
    while (CYWREC.CYWIDX01 >= 1)
      if (KY0KM110.XMCYMSEL[CYWIDX01] > " ")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "140Q";
        CYWREC.CYWMSGNO = 0084; /* <--- sel can't be enterd*/
        set KY0KM110.XMCYMSEL[CYWIDX01] cursor, bold;
      end
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
    end
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    KY0KSK1(); /* pf8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF9, go to add pick schedule sel.d adj.s level   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf9)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12, make sure same key                         ****/
   /* ***          save any tsq changes                       ****/
   /* ***          use entire tsq to update database by       ****/
   /* ***          deleting all db2 rows & adding only        ****/
   /* ***          those still selected in the tsq            ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    CYWREC.CYWIDX01 = CYWREC.CYWLINPP;
    while (CYWREC.CYWIDX01 >= 1)
      if (KY0KM110.XMCYMSEL[CYWIDX01] > " ")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "140R";
        CYWREC.CYWMSGNO = 0084; /* <--- sel can't be enterd*/
        set KY0KM110.XMCYMSEL[CYWIDX01] cursor, bold;
      end
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
    end
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    KY0KSB1(); /* same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "140S";
      CYWREC.CYWMSGNO = 0073; /* <--- no key changes allowed*/
      exit stack;
    end
    if (CYWREC.CYWLASPF == "E")
      KY0KSUE(); /* tsq update for last pfkey=enter*/
    else
      KY0KSU6(); /* tsq update for last pfkey=pf6*/
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    KY0KSU9(); /* <=== update database*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSEXSW == "Y")
        exit stack;
      end
      KY0KST1(); /* <=== reset screen (empty)*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    CYWREC.CYWMSGNO = 0020; /* <--- trans. complete msg*/
     /* ************************************************************/
     /* *** note: ky0ksq1 not used re: able to re-edit immediately**/
     /* *** note: also succesful flow will stay in the 140 level****/
     /* ***       with the current map data still the same      ****/
     /* ************************************************************/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** purge the tsq                                       ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0H";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140H";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140I";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140J";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140K";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    XSCYSPQ(); /* <=== purge tsq(s)*/
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140L";
    CYWREC.CYWMSGNO = 0;
    KY0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "140M";
  CYWREC.CYWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0K140

// one time initializations
Function KY0K210()



   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0KM115 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set KY0KW02 empty; /* 2nd level work stg*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/25/88  W. Jones      created                ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "00";

  CYWREC.XXXMAPNM = "KY0KM115";
  CYWREC.XXXTITLE = "ADD RECONCILE PICK SCHEDULES";

  CYWREC.CYWTALOC = "KY0K115 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0KM115"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWSEXSW = "N"; /* special exit switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0KM115.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0KM115.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0KM115.XXXTITLE = CYWREC.XXXTITLE;
  KY0KM115.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0KSE8(); /* <=== userarea entry processing*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  CYWREC.CYWLINPP = 12; /* total lines of data per page*/

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0KM115.XWHCD = COMMAREA.XWHCD;
  else
    set KY0KM115.XWHCD cursor;
  end

   /* ************************************************************/
   /* *** attempt to obtain first time table data             ****/
   /* ************************************************************/

  KY0KSH2();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0K210

// converse & control key entry
Function KY0K220()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  set KY0KM115.SL2CASE skip, invisible;

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    set KY0KM115.KY0KMSCH[CYWIDX01] skip, invisible;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0KM115.XXXERRID = CYWREC.XXXERRID;


  converse KY0KM115 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220A";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220B";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220C";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220D";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0KM115.CATOAP > " ")
    COMMAREA.CATOAP = KY0KM115.CATOAP;
    COMMAREA.CAITEM = KY0KM115.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220E";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0KM115.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  KY0KM115.VAGen_EZEMSG = " ";
  set KY0KM115.CATOAP initialAttributes;
  set KY0KM115.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0KM115.XWHCD initialAttributes;
  set KY0KM115.IN5TRDCD initialAttributes;
  set KY0KM115.KY0KMDOC initialAttributes;
  set KY0KM115.KY0KMSUB initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** note: select & reconcile flds attr.s reset as part  ****/
   /* ***       of each page display                          ****/
   /* ************************************************************/

  set KY0KM115.SL2CASE initialAttributes;

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    set KY0KM115.KY0KMSCH[CYWIDX01] initialAttributes;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0KM115.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0KM115.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0KSH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220G";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "KY0H";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220H";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220I";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220J";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220K";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "220L";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "220M";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0K220

// converse & control data entry
Function KY0K240()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "N")
    set KY0KM115.KY0KMSCH[1] cursor;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0KM115.XXXERRID = CYWREC.XXXERRID;


  converse KY0KM115 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240A";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0F";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240B";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240C";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** IF PF5: GO TO CYCLE COUNT MAIN MENU                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240D";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0KM115.CATOAP > " ")
    COMMAREA.CATOAP = KY0KM115.CATOAP;
    COMMAREA.CAITEM = KY0KM115.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240E";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0KM115.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWSEXSW = "N";
  CYWREC.CYWERRSW = "N";
  KY0KM115.VAGen_EZEMSG = " ";
  CYWREC.XXXLOCID = "240 ";
  set KY0KM115.CATOAP initialAttributes;
  set KY0KM115.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set KY0KM115.XWHCD initialAttributes;
  set KY0KM115.IN5TRDCD initialAttributes;
  set KY0KM115.KY0KMDOC initialAttributes;
  set KY0KM115.KY0KMSUB initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s depending on function   ****/
   /* *** note: sel & rec fld attr.s reset in map display     ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    set KY0KM115.KY0KMSCH[CYWIDX01] initialAttributes;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0KM115.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0KM115.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER, make sure still same key                  ****/
   /* ***           setup use pf12 msg                        ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0KSB2(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0KSH2(); /* <=== enter processing*/
      exit stack;
    end
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240N";
    CYWREC.CYWMSGNO = 0080; /* <--- use pf12 msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12, make sure same key                         ****/
   /* ***          update database                            ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    KY0KSB2(); /* same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "240S";
      CYWREC.CYWMSGNO = 0073; /* <--- no key changes allowed*/
      exit stack;
    end
    KY0KSR2(); /* data fld edits*/
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    KY0KSU8(); /* <=== update database*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSEXSW == "Y")
        exit stack;
      end
      KY0KST2(); /* <=== reset screen (empty)*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    CYWREC.CYWMSGNO = 0020; /* <--- trans. complete msg*/
    KY0KSQ2(); /* <=== reset screen (clear)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** purge the tsq                                       ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240G";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "KY0H";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240H";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "KY0I";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240I";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240J";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "240L";
    CYWREC.CYWMSGNO = 0;
    KY0KM115.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "240M";
  CYWREC.CYWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0K240

// inquiry : style desc
Function KY0KS-SEL-VPKSTY01()
   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  io1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "KY0KS-SEL-VPKSTY01";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KS-SEL-VPKSTY01

// Inquiry : valid sizes
Function KY0KS-SIZE-CONVERT()
  /* GET ky0kS-SIZE-CONVERT*/

   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call SY1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "KY0KS-SIZE-CONVERT";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KS-SIZE-CONVERT

// display doc hdr data
Function KY0KS1E()


   /* ************************************************************/
   /* *** obtain the doc. hdr/location record for display     ****/
   /* ************************************************************/

  CY1REC.XWHCD = KY0KM110.XWHCD;
  CY1REC.IN5TRDCD = KY0KM110.IN5TRDCD;
  CY1REC.IN5TRDOC = KY0KM110.KY0KMDOC;

  TA1REC.TA1LOCAT[2] = "KY0KS1E ";

  XSCY1I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0KM110.IN5TRDCD bold;
    set KY0KM110.KY0KMDOC cursor, bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S1EA";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move all doc. hdr/location data to screen           ****/
   /* ************************************************************/

  KY0KM110.XARCD = CY1REC.XARCD;
  KY0KM110.SL4ZONE = CY1REC.SL4ZONE;
  KY0KM110.SL5LOCTN = CY1REC.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KS1E

// setup blank lf det map
Function KY0KS1N()


   /* ************************************************************/
   /* *** setup blank left detail map                         ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = CYWREC.CYWDETIX;

  KY0K125(); /* <=== display lf sum line for det map*/
  KY0K126(); /* <=== display lf det hdg line*/

  CYWREC.CYWIDX01 = 3;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    KY0K129(); /* <=== display blank line*/
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KS1N

// accumulate ps sz qty's
Function KY0KS1P()


   /* ************************************************************/
   /* *** obtain all ship item rows with this product & ps    ****/
   /* *** determine if any of the ten row locations match     ****/
   /* *** this document's location in order to                ****/
   /* *** accumulate the related size qty in working storage  ****/
   /* *** indexed by the size id                              ****/
   /* *** note: if no matches, spec exit sw will stay = y     ****/
   /* *** note: sum ps line no. in cywdetix                   ****/
   /* ************************************************************/

  SRBREC.XWHCD = KY0KM110.XWHCD;

  SRBREC.PK1PKSCH = KY0KWS1.PK1PKSCH[CYWDETIX];

  SRBREC.XGPCD = CY2REC.XGPCD;
  SRBREC.SY1STNBR = CY2REC.SY1STNBR;
  SRBREC.SY2CLRID = CY2REC.SY2CLRID;
  SRBREC.XDMCD = CY2REC.XDMCD;
  SRBREC.XQACD = CY2REC.XQACD;
  SRBREC.PC2INSEG = CY2REC.PC2INSEG;
  SRBREC.XEGCD = "000";
  SRBREC.XPGCD = CY2REC.XPGCD;
  SRBREC.XUMCD = CY2REC.XUMCD;
  SRBREC.XOWCD = CY2REC.XOWCD;

  TA1REC.TA1LOCAT[2] = "KY0KS1P ";

  XSSRBS1(); /* <=== all ship rec items/prod*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      return;
    end
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1PA";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1PB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  set KY0KWX1 empty; /* size data accumulation area*/

  while (SQLCA.VAGen_SQLCODE == 0)
    CYWREC.CYWCTR01 = 1; /* line's fld index*/
    while (CYWREC.CYWCTR01 <= 10)
      if (SRBREC.XARCD[CYWCTR01] == CY1REC.XARCD
       && SRBREC.SL4ZONE[CYWCTR01] == CY1REC.SL4ZONE
       && SRBREC.SL5LOCTN[CYWCTR01] == CY1REC.SL5LOCTN)
        CYWREC.CYWIX = SRBREC.SY5SZID[CYWCTR01];
        CYWREC.CYWWKINT = SRBREC.SR3QTYSH[CYWCTR01];
        KY0KWX1.KY0KWQTY[CYWIX] = KY0KWX1.KY0KWQTY[CYWIX] + CYWREC.CYWWKINT;
        CYWREC.CYWFTMSW = "N";
      end
      CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
    end
    XSSRBF1(); /* <=== fetch next row*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KS1P

// add sel.d adj.
Function KY0KS2A()


   /* ************************************************************/
   /* *** add this pick schedule nbr                          ****/
   /* *** note: rest of the key had been setup prev.ly        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** detect duplicate selected adjustment record         ****/
   /* ************************************************************/

  CY4REC.XWHCD = KY0KM115.XWHCD;
  CY4REC.IN5TRDCD = KY0KM115.IN5TRDCD;
  CY4REC.IN5TRDOC = KY0KM115.KY0KMDOC;
  CY4REC.IN5TRSUB = KY0KM115.KY0KMSUB;
  CY4REC.YSACD = "PS";
  CY4REC.SL2CASE = "        ";
  CY4REC.CY4ADJNO = KY0KM115.KY0KMSCH[CYWIDX01];

  TA1REC.TA1LOCAT[2] = "KY0KS2A ";

  XSCY4I0(); /* <=== select unique*/

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ** next sentence ***/
  else
    set KY0KM115.KY0KMSCH[CYWIDX01] cursor, bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == 0)
      CYWREC.CYWSEXSW = "Y";
      CYWREC.XXXLOCID = "S2AA";
      CYWREC.CYWMSGNO = 0045; /* <--- duplicate msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.CYWSEXSW = "Y";
      CYWREC.XXXLOCID = "S2AB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S2AC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** add selected adjustment record                      ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0KS2A ";

  XSCY4A0(); /* <=== add row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0KM115.KY0KMSCH[CYWIDX01] cursor, bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.CYWSEXSW = "Y";
      CYWREC.XXXLOCID = "S2AD";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S2AE";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KS2A

// display doc itm data
Function KY0KS2E()


   /* ************************************************************/
   /* *** obtain the doc. item/product record for display     ****/
   /* ************************************************************/

  CY2REC.XWHCD = KY0KM110.XWHCD;
  CY2REC.IN5TRDCD = KY0KM110.IN5TRDCD;
  CY2REC.IN5TRDOC = KY0KM110.KY0KMDOC;
  CY2REC.IN5TRSUB = KY0KM110.KY0KMSUB;

  TA1REC.TA1LOCAT[2] = "KY0KS2E ";

  XSCY2I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0KM110.IN5TRDCD bold;
    set KY0KM110.KY0KMDOC cursor, bold;
    set KY0KM110.KY0KMSUB bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S2EA";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S2EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S2EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if status is NOT open, setup not open error         ****/
   /* ************************************************************/

  if (CY2REC.YDUCD != "01")
    set KY0KM110.IN5TRDCD bold;
    set KY0KM110.KY0KMDOC cursor, bold;
    set KY0KM110.KY0KMSUB bold;
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S2ED";
    CYWREC.CYWMSGNO = 0034; /* <--- not open msg*/
    return;
  end

   /* ************************************************************/
   /* *** move all doc. item/product data to screen           ****/
   /* ************************************************************/

  KY0KM110.XGPCD = CY2REC.XGPCD;
  KY0KM110.SY1STNBR = CY2REC.SY1STNBR;
  KY0KM110.SY2CLRID = CY2REC.SY2CLRID;
  KY0KM110.XDMCD = CY2REC.XDMCD;
  KY0KM110.XQACD = CY2REC.XQACD;
  KY0KM110.PC2INSEG = CY2REC.PC2INSEG;
  KY0KM110.XSLCD = CY2REC.XSLCD;
  KY0KM110.XPGCD = CY2REC.XPGCD;
  KY0KM110.XUMCD = CY2REC.XUMCD;
  KY0KM110.XOWCD = CY2REC.XOWCD;

   /* ************************************************************/
   /* *** use color 2 row to get style & color desc.s         ****/
   /* ************************************************************/

  PKNREC.XGPCD = CY2REC.XGPCD;
  PKNREC.SY1STNBR = CY2REC.SY1STNBR;
  PKNREC.SY2CLRID = CY2REC.SY2CLRID;
  PKNREC.XDMCD = CY2REC.XDMCD;

  TA1REC.TA1LOCAT[2] = "KY0KS2E ";

  KY0KS-SEL-VPKSTY01(); /* <=== style/color (2) inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KY0KM110.SY1SSTNM = PKNREC.SY1SSTNM;
    KY0KM110.SY2CLRAB = PKNREC.SY2CLRAB;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KY0KM110.SY1SSTNM = "************";
      KY0KM110.SY2CLRAB = "*************";
    else
      CYWREC.CYWERRSW = "Y";
      set KY0KM110.XGPCD bold;
      set KY0KM110.SY1STNBR cursor, bold;
      set KY0KM110.SY2CLRID bold;
      set KY0KM110.XDMCD bold;
      CYWREC.XXXLOCID = "S2EE";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** obtain all valid sizes for this product for display ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.XGPCD = CY2REC.XGPCD;
  SYPREC.SY1STNBR = CY2REC.SY1STNBR;
  SYPREC.SY2CLRID = CY2REC.SY2CLRID;
  SYPREC.XDMCD = CY2REC.XDMCD;
  SYPREC.XQACD = "**";

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  TA1REC.TA1LOCAT[2] = "KY0KS2E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  KY0KS-SIZE-CONVERT(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == +10)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0KM110.XGPCD bold;
    set KY0KM110.SY1STNBR cursor, bold;
    set KY0KM110.SY2CLRID bold;
    set KY0KM110.XDMCD bold;
    if (SYPREC.SYPRC == +9)
      CYWREC.XXXLOCID = "S2EF";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S2EG";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KS2E

// validate pick sched no.
Function KY0KS2V()


   /* ************************************************************/
   /* *** pick schedule nbr must be in ship rec hdr db        ****/
   /* ************************************************************/

  SR1REC.XWHCD = KY0KM115.XWHCD;
  SR1REC.PK1PKSCH = KY0KM115.KY0KMSCH[CYWIDX01];

  TA1REC.TA1LOCAT[2] = "KY0KS2V ";

  XSSR1I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    set KY0KM115.KY0KMSCH[CYWIDX01] cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S2VA";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S2VB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S2VC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KS2V

// obtain all sel
Function KY0KS4E()


   /* ************************************************************/
   /* *** obtain all selected pick schedule adj.s             ****/
   /* ************************************************************/

  CY4REC.XWHCD = KY0KM110.XWHCD;
  CY4REC.IN5TRDCD = KY0KM110.IN5TRDCD;
  CY4REC.IN5TRPRT = CY1REC.IN5TRPRT;
  CY4REC.IN5TRDOC = KY0KM110.KY0KMDOC;
  CY4REC.IN5TRSUB = KY0KM110.KY0KMSUB;
  CY4REC.YSACD = "PS";
  CY4REC.SL2CASE = "        ";

  TA1REC.TA1LOCAT[2] = "KY0KS4E ";

  XSCY4S1(); /* <=== select set*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0KM110.IN5TRDCD bold;
    set KY0KM110.KY0KMDOC bold;
    set KY0KM110.KY0KMSUB cursor, bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.CYWSEXSW = "Y";
      CYWREC.XXXLOCID = "S4EA";
      CYWREC.CYWMSGNO = 0025; /* <--- no data msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S4EB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S4EC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KS4E

// key missing input edits
Function KY0KSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0KM110.KY0KMSUB > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0KM110.KY0KMSUB cursor, bold;
  end

  if (KY0KM110.KY0KMDOC > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1B";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0KM110.KY0KMDOC cursor, bold;
  end

  if (KY0KM110.IN5TRDCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1C";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0KM110.IN5TRDCD cursor, bold;
  end

  if (KY0KM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1D";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0KM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSA1

// missing fld edits
Function KY0KSA2()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0KM115.KY0KMSUB > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA2A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0KM115.KY0KMSUB cursor, bold;
  end

  if (KY0KM115.KY0KMDOC > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA2B";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0KM115.KY0KMDOC cursor, bold;
  end

  if (KY0KM115.IN5TRDCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA2C";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0KM115.IN5TRDCD cursor, bold;
  end

  if (KY0KM115.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA2D";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0KM115.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSA2

// obtain doc hdr
Function KY0KSAE()


   /* ************************************************************/
   /* *** obtain the doc. hdr/location record for display     ****/
   /* ************************************************************/

  CY1REC.XWHCD = KY0KM115.XWHCD;
  CY1REC.IN5TRDCD = KY0KM115.IN5TRDCD;
  CY1REC.IN5TRDOC = KY0KM115.KY0KMDOC;

  TA1REC.TA1LOCAT[2] = "KY0KSAE ";

  XSCY1I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0KM115.IN5TRDCD bold;
    set KY0KM115.KY0KMDOC cursor, bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "SAEA";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SAEB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SAEC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move all doc. hdr/location data to screen           ****/
   /* ************************************************************/

  KY0KM115.XARCD = CY1REC.XARCD;
  KY0KM115.SL4ZONE = CY1REC.SL4ZONE;
  KY0KM115.SL5LOCTN = CY1REC.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSAE

// same key edits
Function KY0KSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0KM110.XWHCD != KY0KW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0KM110.IN5TRDCD != KY0KW01.IN5TRDCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0KM110.KY0KMDOC != KY0KW01.KY0KWDOC)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0KM110.KY0KMSUB != KY0KW01.KY0KWSUB)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSB1

// same key edits
Function KY0KSB2()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0KM115.XWHCD != KY0KW02.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0KM115.IN5TRDCD != KY0KW02.IN5TRDCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0KM115.KY0KMDOC != KY0KW02.KY0KWDOC)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0KM115.KY0KMSUB != KY0KW02.KY0KWSUB)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSB2

// obtain doc itm
Function KY0KSBE()


   /* ************************************************************/
   /* *** obtain the doc. item/product record for display     ****/
   /* ************************************************************/

  CY2REC.XWHCD = KY0KM115.XWHCD;
  CY2REC.IN5TRDCD = KY0KM115.IN5TRDCD;
  CY2REC.IN5TRDOC = KY0KM115.KY0KMDOC;
  CY2REC.IN5TRSUB = KY0KM115.KY0KMSUB;

  TA1REC.TA1LOCAT[2] = "KY0KSBE ";

  XSCY2I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0KM115.IN5TRDCD bold;
    set KY0KM115.KY0KMDOC cursor, bold;
    set KY0KM115.KY0KMSUB bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "SBEA";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SBEB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SBEC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if status is NOT open, setup not open error         ****/
   /* ************************************************************/

  if (CY2REC.YDUCD != "01")
    set KY0KM115.IN5TRDCD bold;
    set KY0KM115.KY0KMDOC cursor, bold;
    set KY0KM115.KY0KMSUB bold;
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SBED";
    CYWREC.CYWMSGNO = 0034; /* <--- not open msg*/
    return;
  end

   /* ************************************************************/
   /* *** move all doc. item/product data to screen           ****/
   /* ************************************************************/

  KY0KM115.XGPCD = CY2REC.XGPCD;
  KY0KM115.SY1STNBR = CY2REC.SY1STNBR;
  KY0KM115.SY2CLRID = CY2REC.SY2CLRID;
  KY0KM115.XDMCD = CY2REC.XDMCD;
  KY0KM115.XQACD = CY2REC.XQACD;
  KY0KM115.PC2INSEG = CY2REC.PC2INSEG;
  KY0KM115.XSLCD = CY2REC.XSLCD;
  KY0KM115.XPGCD = CY2REC.XPGCD;
  KY0KM115.XUMCD = CY2REC.XUMCD;
  KY0KM115.XOWCD = CY2REC.XOWCD;

   /* ************************************************************/
   /* *** use color 2 row to get style & color desc.s         ****/
   /* ************************************************************/

  PKNREC.XGPCD = CY2REC.XGPCD;
  PKNREC.SY1STNBR = CY2REC.SY1STNBR;
  PKNREC.SY2CLRID = CY2REC.SY2CLRID;
  PKNREC.XDMCD = CY2REC.XDMCD;

  TA1REC.TA1LOCAT[2] = "KY0KSBE ";

  KY0KS-SEL-VPKSTY01(); /* <=== style/color (2) inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KY0KM115.SY1SSTNM = PKNREC.SY1SSTNM;
    KY0KM115.SY2CLRAB = PKNREC.SY2CLRAB;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KY0KM115.SY1SSTNM = "************";
      KY0KM115.SY2CLRAB = "*************";
    else
      CYWREC.CYWERRSW = "Y";
      set KY0KM115.XGPCD bold;
      set KY0KM115.SY1STNBR cursor, bold;
      set KY0KM115.SY2CLRID bold;
      set KY0KM115.XDMCD bold;
      CYWREC.XXXLOCID = "SBEE";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSBE

// key field edits
Function KY0KSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** doc. code must be a 'c' or 'm'                      ****/
   /* ************************************************************/

  if (KY0KM110.IN5TRDCD == "C"
   || KY0KM110.IN5TRDCD == "M")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1A";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0KM110.IN5TRDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0KM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0KM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      KY0KM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1B";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0KM110.XWHCD cursor, bold;
    end
  else
    KY0KM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1C";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0KM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSC1

// fld edits
Function KY0KSC2()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** doc. code must be a 'c' or 'm'                      ****/
   /* ************************************************************/

  if (KY0KM115.IN5TRDCD == "C"
   || KY0KM115.IN5TRDCD == "M")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC2A";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0KM115.IN5TRDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0KM115.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0KM115.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      KY0KM115.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC2B";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0KM115.XWHCD cursor, bold;
    end
  else
    KY0KM115.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC2C";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0KM115.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSC2

// key relational edits
Function KY0KSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSD1

// relational fld edits
Function KY0KSD2()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSD2

// key obtain table data
Function KY0KSE1()


   /* ************************************************************/
   /* *** make one time table accesses for data               ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed here                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain the doc. hdr/location record for display     ****/
   /* ************************************************************/

  KY0KS1E(); /* <=== setup hdr data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** obtain the doc. item/product record for display     ****/
   /* ************************************************************/

  KY0KS2E(); /* <=== setup item data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** obtain all pick schedule nbrs prev.ly selected      ****/
   /* ************************************************************/

  KY0KS4E(); /* <=== obtain all ps sel adj.s*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSE1

// obtain data
Function KY0KSE2()


   /* ************************************************************/
   /* *** make one time table accesses for data               ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed here                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain the doc. hdr/location record for display     ****/
   /* ************************************************************/

  KY0KSAE(); /* <=== setup hdr data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** obtain the doc. item/product record for display     ****/
   /* ************************************************************/

  KY0KSBE(); /* <=== setup item data*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSE2

// userarea entry processing
Function KY0KSE8()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the CYXREC working storage layout                ****/
   /* *** otherwise, setup map default values                 ****/
   /* *** note: make sure data is from related map            ****/
   /* *** note: do not move blanks to causera                 ****/
   /* ************************************************************/

  CYXREC.CYXUSERA = COMMAREA.CAUSERA;

  if (CYXREC.CYXFRMAP == "KY0GM110"
   || CYXREC.CYXFRMAP == "KY0HM110"
   || CYXREC.CYXFRMAP == "KY0IM110"
   || CYXREC.CYXFRMAP == "KY0JM110"
   || CYXREC.CYXFRMAP == "KY0KM110"
   || CYXREC.CYXFRMAP == "KY0LM110"
   || CYXREC.CYXFRMAP == "KY0NM110")
    KY0KM115.IN5TRDCD = CYXREC.IN5TRDCD;
    KY0KM115.KY0KMDOC = CYXREC.IN5TRDOC;
    KY0KM115.KY0KMSUB = CYXREC.IN5TRSUB;
    return;
  end

  KY0KM115.IN5TRDCD = "C";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSE8

// userarea entry processing
Function KY0KSE9()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the CYXREC working storage layout                ****/
   /* *** otherwise, setup map default values                 ****/
   /* *** note: make sure data is from related map            ****/
   /* *** note: do not move blanks to causera                 ****/
   /* ************************************************************/

  CYXREC.CYXUSERA = COMMAREA.CAUSERA;

  if (CYXREC.CYXFRMAP == "KY0GM110"
   || CYXREC.CYXFRMAP == "KY0HM110"
   || CYXREC.CYXFRMAP == "KY0IM110"
   || CYXREC.CYXFRMAP == "KY0JM110"
   || CYXREC.CYXFRMAP == "KY0KM110"
   || CYXREC.CYXFRMAP == "KY0LM110"
   || CYXREC.CYXFRMAP == "KY0NM110")
    KY0KM110.IN5TRDCD = CYXREC.IN5TRDCD;
    KY0KM110.KY0KMDOC = CYXREC.IN5TRDOC;
    KY0KM110.KY0KMSUB = CYXREC.IN5TRSUB;
    return;
  end

  KY0KM110.IN5TRDCD = "C";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSE9

// save current key value(s)
Function KY0KSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* *** and in cyxrec to pass to other appl.s               ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0KM110.XWHCD;

  KY0KW01.XWHCD = KY0KM110.XWHCD;
  KY0KW01.IN5TRDCD = KY0KM110.IN5TRDCD;
  KY0KW01.KY0KWDOC = KY0KM110.KY0KMDOC;
  KY0KW01.KY0KWSUB = KY0KM110.KY0KMSUB;

  KY0KSX9(); /* <=== userarea exit processing*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSF1

// save keys
Function KY0KSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* *** and in cyxrec to pass to other appl.s               ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0KM115.XWHCD;

  KY0KW02.XWHCD = KY0KM115.XWHCD;
  KY0KW02.IN5TRDCD = KY0KM115.IN5TRDCD;
  KY0KW02.KY0KWDOC = KY0KM115.KY0KMDOC;
  KY0KW02.KY0KWSUB = KY0KM115.KY0KMSUB;

  KY0KSX8(); /* <=== userarea exit processing*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSF2

// setup map key fields
Function KY0KSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  KY0KM110.XWHCD = KY0KW01.XWHCD;

  KY0KM110.IN5TRDCD = KY0KW01.IN5TRDCD;
  KY0KM110.KY0KMDOC = KY0KW01.KY0KWDOC;
  KY0KM110.KY0KMSUB = KY0KW01.KY0KWSUB;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSG1

// restore keys
Function KY0KSG2()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  KY0KM115.XWHCD = KY0KW02.XWHCD;

  KY0KM115.IN5TRDCD = KY0KW02.IN5TRDCD;
  KY0KM115.KY0KMDOC = KY0KW02.KY0KWDOC;
  KY0KM115.KY0KMSUB = KY0KW02.KY0KWSUB;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSG2

// ENTER processing
Function KY0KSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0KSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: perform field edits                      ****/
   /* *** note: same key edits not performed at this time     ****/
   /* ************************************************************/

  KY0KSC1(); /* <=== fld edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: perform relationsl fld edits             ****/
   /* ************************************************************/

  KY0KSD1(); /* <=== relational fld edits*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KSF1(); /* <=== save current key value(s)*/
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  KY0KSE1(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KSF1(); /* <=== save current key value(s)*/
    if (CYWREC.CYWSEXSW == "N")
      KY0KST1(); /* <=== reset screen (empty)*/
    end
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  KY0KSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** no errors: build summary tsq                        ****/
   /* ************************************************************/

  KY0KSS1(); /* build tsq(s)*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save last pfkey as ENTER  and            ****/
   /* ***            move data to map for display for 1st pg  ****/
   /* ************************************************************/

  CYWREC.CYWLASPF = "E";

  CYWREC.CYWSUMIX = 1;

  KY0KSU1(); /* <=== read sum tsq record*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

  CYWREC.CYWDETIX = 1;
  KY0KSO1(); /* <=== setup lf sum map*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSH1

// enter processing
Function KY0KSH2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0KSA2(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: perform field edits                      ****/
   /* *** note: same key edits not performed at this time     ****/
   /* ************************************************************/

  KY0KSC2(); /* <=== fld edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: perform relationsl fld edits             ****/
   /* ************************************************************/

  KY0KSD2(); /* <=== relational fld edits*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KSF2(); /* <=== save current key value(s)*/
    KY0KST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  KY0KSE2(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KSF2(); /* <=== save current key value(s)*/
    KY0KST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  KY0KSF2(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSH2

// PF6 processing
Function KY0KSI1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0KSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: perform field edits                      ****/
   /* *** note: same key edits not performed at this time     ****/
   /* ************************************************************/

  KY0KSC1(); /* <=== fld edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: perform relationsl fld edits             ****/
   /* ************************************************************/

  KY0KSD1(); /* <=== relational fld edits*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KSF1(); /* <=== save current key value(s)*/
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  KY0KSE1(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KSF1(); /* <=== save current key value(s)*/
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  KY0KSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** no errors: build summary tsq                        ****/
   /* ************************************************************/

  KY0KSS1(); /* build tsq(s)*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save PF6 as the last pfkey  and          ****/
   /* ***            move data to map for display of 1st pg   ****/
   /* ************************************************************/

  CYWREC.CYWLASPF = "6";

  CYWREC.CYWSUMIX = 1;

  KY0KSU1(); /* <=== read sum tsq record*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

  CYWREC.CYWDETIX = 1;
  KY0KSP1(); /* <=== setup lf det map*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSI1

// PF7 processing
Function KY0KSJ1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* ************************************************************/

  KY0KSA1(); /* <=== check for missing data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0KSB1(); /* <=== same key edits*/

  if (CYWREC.CYWSKYSW == "N")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SJ1A";
    CYWREC.CYWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (CYWREC.CYWLASPF == "E")
    if (CYWREC.CYWSUMIX == 1)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SJ1B";
      CYWREC.CYWMSGNO = 0007; /* <--- top of data*/
      return;
    end
    KY0KSUE(); /* <=== upd tsq if last pf = e*/
    CYWREC.CYWSUMIX = CYWREC.CYWSUMIX - 1;
    KY0KSU1(); /* <=== read sum tsq*/
    CYWREC.CYWDETIX = 1;
    KY0KSO1(); /* <=== setup sum scrn*/
  else
    if (CYWREC.CYWDETIX == 1)
      if (CYWREC.CYWSUMIX == 1)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SJ1C";
        CYWREC.CYWMSGNO = 0007; /* <--- top of data*/
        return;
      end
      KY0KSU6(); /* <=== upd tsq if last pf = 6*/
      CYWREC.CYWSUMIX = CYWREC.CYWSUMIX - 1;
      KY0KSU1(); /* <=== read sum tsq*/
      CYWREC.CYWDETIX = CYWREC.CYWLINPP;
      KY0KSP1(); /* <=== setup det scrn*/
    else
      KY0KSU6(); /* <=== upd tsq if last pf = 6*/
      CYWREC.CYWDETIX = CYWREC.CYWDETIX - 1;
      KY0KSP1(); /* <=== setup det scrn*/
    end
  end

  if (CYWREC.CYWERRSW == "N")
    CYWREC.XXXLOCID = "SJ1D";
    CYWREC.CYWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0KSJ1

// PF8 processing
Function KY0KSK1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* ************************************************************/

  KY0KSA1(); /* <=== check for missing data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0KSB1(); /* <=== same key edits*/

  if (CYWREC.CYWSKYSW == "N")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SK1A";
    CYWREC.CYWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** increment the next relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (CYWREC.CYWLASPF == "E")
    if (CYWREC.CYWSUMIX == CYWREC.CYWSMAXR)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SK1B";
      CYWREC.CYWMSGNO = 0008; /* <--- bot of data*/
      return;
    end
    KY0KSUE(); /* <=== upd tsq if last pf = e*/
    CYWREC.CYWSUMIX = CYWREC.CYWSUMIX + 1;
    KY0KSU1(); /* <=== read sum tsq*/
    CYWREC.CYWDETIX = 1;
    KY0KSO1(); /* <=== setup sum scrn*/
  else
    if (CYWREC.CYWDETIX == CYWREC.CYWLINPP)
      if (CYWREC.CYWSUMIX == CYWREC.CYWSMAXR)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SK1C";
        CYWREC.CYWMSGNO = 0008; /* <--- bot of data*/
        return;
      end
      KY0KSU6(); /* <=== upd tsq if last pf = 6*/
      CYWREC.CYWSUMIX = CYWREC.CYWSUMIX + 1;
      KY0KSU1(); /* <=== read sum tsq*/
      CYWREC.CYWDETIX = 1;
      KY0KSP1(); /* <=== setup det scrn*/
    else
      CYWREC.CYWIX = CYWREC.CYWDETIX + 1;
      if (KY0KWS1.PK1PKSCH[CYWIX] == 0)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SK1E";
        CYWREC.CYWMSGNO = 0008; /* <--- bot of data*/
        return;
      end
      KY0KSU6(); /* <=== upd tsq if last pf = 6*/
      CYWREC.CYWDETIX = CYWREC.CYWDETIX + 1;
      KY0KSP1(); /* <=== setup det scrn*/
    end
  end

  if (CYWREC.CYWERRSW == "N")
    CYWREC.XXXLOCID = "SK1D";
    CYWREC.CYWMSGNO = 0013;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSK1

// setup blank map
Function KY0KSN2()


   /* ************************************************************/
   /* *** display blank lines until the page is full          ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    KY0K129(); /* <=== display blank line*/
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSN2

// setup lf sum map
Function KY0KSO1()


   /* ************************************************************/
   /* *** setup the left summary map data using tsq data      ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0KWS1.KY0KWREC[CYWIDX01] != " ")
      KY0K121(); /* <=== display lf sum line*/
    else
      KY0K129(); /* <=== display if blank line*/
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0KSO1

// setup lf det map
Function KY0KSP1()


   /* ************************************************************/
   /* *** setup the left detail map data using the saved      ****/
   /* *** selected (or 1st) sum line's values (w/line no.)    ****/
   /* *** note: all size data will be accumulated in a 40     ****/
   /* ***       occurs working storage area and then this     ****/
   /* ***       data will be condensed into the det ws area   ****/
   /* ***       before displaying any det lines               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** accumulate pick schedule size data                  ****/
   /* *** note: use first time switch to detect no data       ****/
   /* ************************************************************/

  CYWREC.CYWFTMSW = "Y";

  KY0KS1P(); /* <=== accumulate ps size data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0KST1(); /* <=== reset screen (empty)*/
    return;
  end

  if (CYWREC.CYWFTMSW == "Y")
    KY0KS1N(); /* <=== setup blank det map*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SP1A";
    CYWREC.CYWMSGNO = 0025; /* <--- no data msg*/
    return;
  end

   /* ************************************************************/
   /* *** condense the 40 occurs into the detail page ws      ****/
   /* *** note: 1st 2 lines = sum & det hdg lines             ****/
   /* ************************************************************/

  CYWREC.CYWIX = 1; /* 1-40 occurs index*/
  CYWREC.CYWIDX01 = 3; /* det tsq line index*/
  CYWREC.CYWCTR01 = 1; /* line's fld index*/

  while (CYWREC.CYWIX <= 40)
    if (KY0KWX1.KY0KWQTY[CYWIX] > 0)
      if (CYWREC.CYWCTR01 > 4)
        KY0KWD1.KY0KWRTY[CYWIDX01] = "D";
        KY0KWD1.KY0KWLIN[CYWIDX01] = KY0KWL1.KY0KWLIN;
        CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
        CYWREC.CYWCTR01 = 1;
      end
      if (SYPREC.SY4IDDSC[CYWIX] > " ")
        KY0KWL1.SY4IDDSC[CYWCTR01] = SYPREC.SY4IDDSC[CYWIX];
      else
        KY0KWL1.SY4IDDSC[CYWCTR01] = "*****";
      end
      KY0KWL1.KY0KWQTY[CYWCTR01] = KY0KWX1.KY0KWQTY[CYWIX];
      CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
    end
    CYWREC.CYWIX = CYWREC.CYWIX + 1;
  end

   /* ************************************************************/
   /* *** make any left over line flds blank/zero & save      ****/
   /* ************************************************************/

  while (CYWREC.CYWCTR01 <= 4)
    KY0KWL1.SY4IDDSC[CYWCTR01] = " ";
    KY0KWL1.KY0KWQTY[CYWCTR01] = 0;
    CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
  end

  KY0KWD1.KY0KWRTY[CYWIDX01] = "D";
  KY0KWD1.KY0KWLIN[CYWIDX01] = KY0KWL1.KY0KWLIN;
  CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;

   /* ************************************************************/
   /* *** make any extra lines 'b' (blank) type               ****/
   /* ************************************************************/

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    KY0KWD1.KY0KWRTY[CYWIDX01] = "B";
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** display each detail ws line                         ****/
   /* ************************************************************/

  KY0K125(); /* <=== display lf sum line for det map*/
  KY0K126(); /* <=== display lf det hdg line*/

  CYWREC.CYWIDX01 = 3;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0KWD1.KY0KWRTY[CYWIDX01] == "D")
      KY0K122(); /* <=== display lf det line*/
    else
      if (KY0KWD1.KY0KWRTY[CYWIDX01] == "B")
        KY0K129(); /* <=== display blank line*/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SP1B";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSP1

// reset scrn if ok
Function KY0KSQ2()


   /* ************************************************************/
   /* *** just reset (zero) the input pick schedule flds      ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    KY0KM115.KY0KMSCH[CYWIDX01] = 0;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSQ2

// data fld edits
Function KY0KSR2()


   /* ************************************************************/
   /* *** validate each enterd pick schedule nbr              ****/
   /* *** note: use first time sw to detect no entries        ****/
   /* ************************************************************/

  CYWREC.CYWFTMSW = "Y";

   /* ************************************************************/
   /* *** if pick schedule > 0, it must be in ship rec hdr    ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = CYWREC.CYWLINPP;

  while (CYWREC.CYWIDX01 >= 1)
    if (KY0KM115.KY0KMSCH[CYWIDX01] > 0)
      CYWREC.CYWFTMSW = "N";
      KY0KS2V(); /* <=== validate pick sched no.*/
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** if no error & still first time (=y)                 ****/
   /* *** setup missing fld error 0n 1st fld                  ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  if (CYWREC.CYWFTMSW == "Y")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SR2A";
    CYWREC.CYWMSGNO = 0009; /* <--- required field msg*/
    set KY0KM115.KY0KMSCH[1] cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSR2

// setup sum & det queues
Function KY0KSS1()


   /* ************************************************************/
   /* *** setup the summary tsq only                          ****/
   /* *** note: detail screen will be setup as needed         ****/
   /* ************************************************************/

  XSCYSPQ(); /* <=== purge tsq(s)*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** while there are selected pick schedules, build tsq  ****/
   /* ************************************************************/

  CYWREC.CYWSUMLX = 0; /* <--- last used sum pg line*/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (CYWREC.CYWSUMLX > CYWREC.CYWLINPP)
      KY0KSW1(); /* <=== add sum tsq record*/
      CYWREC.CYWSUMLX = 0;
    end
    if (CY4REC.CY4ADJNO in KY0KWS1.PK1PKSCH from 1)
       /* next sentence*/
    else
      CYWREC.CYWSUMLX = CYWREC.CYWSUMLX + 1;
      KY0KWS1.KY0KWREC[CYWSUMLX] = "X";
      KY0KWS1.PK1PKSCH[CYWSUMLX] = CY4REC.CY4ADJNO;
    end
    XSCY4F1(); /* <=== fetch next pk adj*/
  end

  CYWREC.CYWSUMLX = CYWREC.CYWSUMLX + 1;

  while (CYWREC.CYWSUMLX <= CYWREC.CYWLINPP)
    KY0KWS1.KY0KWREC[CYWSUMLX] = " ";
    KY0KWS1.PK1PKSCH[CYWSUMLX] = 0;
    CYWREC.CYWSUMLX = CYWREC.CYWSUMLX + 1;
  end

  KY0KSW1(); /* <=== add sum tsq record*/

  CYWREC.CYWSMAXR = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSS1

// reset screen (empty)
Function KY0KST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0KM110 empty; /* resets entire screen*/

  KY0KSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0KM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0KM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0KM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0KM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0KW01 empty; /* appl. working storage area*/

  KY0KSN2(); /* <=== display blank map*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KST1

// reset scrn if error
Function KY0KST2()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0KM115 empty; /* resets entire screen*/

  KY0KSG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0KM115.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0KM115.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0KM115.XXXTITLE = CYWREC.XXXTITLE;
  KY0KM115.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0KW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KST2

// read sum tsq record
Function KY0KSU1()


   /* ********************************************************/
   /* *** obtain summary tsq record for previously setup  ****/
   /* *** summary tsq relative record number              ****/
   /* ********************************************************/

  TA5REC.TA5TSQIX = CYWREC.CYWSUMIX;
  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (KY0KWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SU1A";
    CYWREC.CYWMSGNO = 0061; /* <--- severe tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSU1

// tsq upd if last pf = 6
Function KY0KSU6()


   /* ************************************************************/
   /* *** for the first line only:                            ****/
   /* *** if the map & ws are different,                      ****/
   /* ***   move the map value to the ws fld & update         ****/
   /* ************************************************************/

  if (KY0KM110.KY0KMREC[1] == KY0KWS1.KY0KWREC[CYWDETIX])
    return;
  end

   /* ********************************************************/
   /* *** update summary tsq record currently in ws by    ****/
   /* *** summary tsq relative record number              ****/
   /* ********************************************************/

  KY0KWS1.KY0KWREC[CYWDETIX] = KY0KM110.KY0KMREC[1];

  TA5REC.TA5TSQIX = CYWREC.CYWSUMIX;
  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5FNCCD = "U";

  call "TA0050" (KY0KWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SUEA";
    CYWREC.CYWMSGNO = 0061; /* <--- severe tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSU6

// update database
Function KY0KSU8()


   /* ************************************************************/
   /* *** to add to the selected adjustments database:        ****/
   /* *** add a ps selected adj. if the ps nbr > 0            ****/
   /* *** note: duplicates are checked for separately         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** add a ps selected adj. if the ps nbr > 0            ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0KM115.KY0KMSCH[CYWIDX01] > 0)
    /* ************************************************************/
    /* *** obtain all ship item rows with this product & ps    ****/
    /* *** determine if any of the ten row locations match     ****/
    /* *** this document's location in order to                ****/
    /* *** accumulate the related size qty in working storage  ****/
    /* *** indexed by the size id                              ****/
    /* *** note: if no matches, spec exit sw will stay = y     ****/
    /* *** note: sum ps line no. in cywdetix                   ****/
    /* ************************************************************/

      SRBREC.XWHCD = KY0KM115.XWHCD;
      SRBREC.PK1PKSCH = KY0KM115.KY0KMSCH[CYWIDX01];
      SRBREC.XGPCD = KY0KM115.XGPCD;
      SRBREC.SY1STNBR = KY0KM115.SY1STNBR;
      SRBREC.SY2CLRID = KY0KM115.SY2CLRID;
      SRBREC.XDMCD = KY0KM115.XDMCD;
      SRBREC.XQACD = KY0KM115.XQACD;
      SRBREC.PC2INSEG = KY0KM115.PC2INSEG;
      SRBREC.XEGCD = "000";
      SRBREC.XPGCD = KY0KM115.XPGCD;
      SRBREC.XUMCD = KY0KM115.XUMCD;
      SRBREC.XOWCD = KY0KM115.XOWCD;

      TA1REC.TA1LOCAT[2] = "KY0KSU8 ";

      XSSRBS1(); /* <=== all ship rec items/prod*/

      if (SQLCA.VAGen_SQLCODE == 0)
      /* ** next sentence ***/
      else
        if (SQLCA.VAGen_SQLCODE == +100)
          /* next sentence*/
        end
        CYWREC.CYWERRSW = "Y";
        if (SQLCA.VAGen_SQLCODE == -911)
          CYWREC.XXXLOCID = "SU8A";
          CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        CYWREC.XXXLOCID = "SU8B";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end

      move 0 to KY0KW01.KY0KW-SR3QTYSH[1] for 40;
      while (SQLCA.VAGen_SQLCODE == 0)
        CYWREC.CYWCTR01 = 1; /* line's fld index*/
        while (CYWREC.CYWCTR01 <= 10)
          if (SRBREC.XARCD[CYWCTR01] == KY0KM115.XARCD
           && SRBREC.SL4ZONE[CYWCTR01] == KY0KM115.SL4ZONE
           && SRBREC.SL5LOCTN[CYWCTR01] == KY0KM115.SL5LOCTN)
            KY0KW01.KY0KWIXF = SRBREC.SY5SZID[CYWCTR01];
            KY0KW-SR3QTYSH[KY0KWIXF] = KY0KW-SR3QTYSH[KY0KWIXF] +             SRBREC.SR3QTYSH[CYWCTR01];
          end
          CYWREC.CYWCTR01 = CYWREC.CYWCTR01 + 1;
        end
        XSSRBF1(); /* <=== fetch next row*/
      end
      KY0KW01.KY0KWIXF = 1;
      while (KY0KW01.KY0KWIXF <= 40)
        if (KY0KW-SR3QTYSH[KY0KWIXF] > 0)
          CY4REC.SY5SZID = KY0KW01.KY0KWIXF;
          CY4REC.CY-CNT-ADJ-QTY = KY0KW-SR3QTYSH[KY0KWIXF];
          KY0KS2A(); /* <=== add whse/ps row*/
        end
        KY0KW01.KY0KWIXF = KY0KW01.KY0KWIXF + 1;
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSU8

// update database
Function KY0KSU9()


   /* ************************************************************/
   /* *** to update the selected adjustments database:        ****/
   /* *** delete all ps selected adjustments for this whse    ****/
   /* *** for each tsq record:                                ****/
   /* *** add a ps selected adj. if the rec fld is not blank  ****/
   /* *** note: the cy4rec has been setup prev.ly             ****/
   /* ************************************************************/

  CYWREC.CYWSEXSW = "N";

   /* ************************************************************/
   /* *** delete all ps selected adjustments for this whse    ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0KSU9 ";


   /* ************************************************************/
   /* *** for each tsq record:                                ****/
   /* *** add a ps selected adj. if the rec fld is not blank  ****/
   /* *** note: save current sum index nbr in ws              ****/
   /* ************************************************************/

  KY0KW01.KY0KWMIX = CYWREC.CYWSUMIX;

  CYWREC.CYWSUMIX = 1;

  while (CYWREC.CYWSUMIX <= CYWREC.CYWSMAXR)
    KY0KSU1(); /* <=== read sum tsq record*/
    CYWREC.CYWIDX01 = 1;
    while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
      if (KY0KWS1.KY0KWREC[CYWIDX01] == " "
       && KY0KWS1.PK1PKSCH[CYWIDX01] > 0)
        CY4REC.YSACD = "PS";
        CY4REC.CY4ADJNO = KY0KWS1.PK1PKSCH[CYWIDX01];
        XSCY4D1(); /* <=== delete un-sel whse/ps adj.s*/
        if (SQLCA.VAGen_SQLCODE == 0)
          KY0KWS1.PK1PKSCH[CYWIDX01] = 0;
        end
      end
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
    end
    CYWREC.CYWIDX01 = 1;
    KY0KW01.KY0KWIXF = 1;
    KY0KW01.KY0KWIXT = 1;
    while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
      if (KY0KWS1.PK1PKSCH[KY0KWIXT] == 0)
        KY0KW01.KY0KWIXF = CYWREC.CYWIDX01 + 1;
        if (KY0KW01.KY0KWIXF <= CYWREC.CYWLINPP)
          KY0KWS1.KY0KWREC[KY0KWIXT] = KY0KWS1.KY0KWREC[KY0KWIXF];
          KY0KWS1.PK1PKSCH[KY0KWIXT] = KY0KWS1.PK1PKSCH[KY0KWIXF];
          KY0KWS1.KY0KWREC[KY0KWIXF] = " ";
          KY0KWS1.PK1PKSCH[KY0KWIXF] = 0;
        end
      end
      if (KY0KWS1.PK1PKSCH[CYWIDX01] != 0)
        KY0KW01.KY0KWIXT = KY0KW01.KY0KWIXT + 1;
      end
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
    end
    /* ********************************************************/
    /* *** update summary tsq record currently in ws by    ****/
    /* *** summary tsq relative record number              ****/
    /* ********************************************************/
    TA5REC.TA5TSQIX = CYWREC.CYWSUMIX;
    TA5REC.TA5APPID = CYWREC.CYWSUMQU;
    TA5REC.TA5FNCCD = "U";
    call "TA0050" (KY0KWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SUEA";
      CYWREC.CYWMSGNO = 0061; /* <--- severe tsq error msg*/
      return;
    end
    CYWREC.CYWSUMIX = CYWREC.CYWSUMIX + 1;
  end

   /* ************************************************************/
   /* *** cywsumix was saved in ky0kwmix                      ****/
   /* *** cywdetix is still setup                             ****/
   /* *** and the related map is still setup                  ****/
   /* ************************************************************/

  CYWREC.CYWSUMIX = KY0KW01.KY0KWMIX;

  KY0KSU1(); /* <=== read sum tsq record*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSU9

// tsq upd if last pf = e
Function KY0KSUE()


   /* ************************************************************/
   /* *** for each line:                                      ****/
   /* *** if the map & ws are different,                      ****/
   /* ***   move the map value to the ws fld                  ****/
   /* *** note: use the first time switch to determine        ****/
   /* ***       if this tsq record needs to be updated        ****/
   /* ************************************************************/

  CYWREC.CYWFTMSW = "Y";

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0KM110.KY0KMREC[CYWIDX01] == KY0KWS1.KY0KWREC[CYWIDX01])
       /* ** next sentence ***/
    else
      KY0KWS1.KY0KWREC[CYWIDX01] = KY0KM110.KY0KMREC[CYWIDX01];
      CYWREC.CYWFTMSW = "N";
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

  if (CYWREC.CYWFTMSW == "Y")
    return;
  end

   /* ********************************************************/
   /* *** update summary tsq record currently in ws by    ****/
   /* *** summary tsq relative record number              ****/
   /* ********************************************************/

  TA5REC.TA5TSQIX = CYWREC.CYWSUMIX;
  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5FNCCD = "U";

  call "TA0050" (KY0KWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SUEA";
    CYWREC.CYWMSGNO = 0061; /* <--- severe tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSUE

// add sum tsq record
Function KY0KSW1()


   /* ********************************************************/
   /* *** add next summary tsq record                     ****/
   /* ********************************************************/

  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (KY0KWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SW1A";
    CYWREC.CYWMSGNO = 0061; /* <--- severe tsq error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSW1

// userarea exit processing
Function KY0KSX8()


   /* ************************************************************/
   /* *** move this map's name and key flds to cyxrec and     ****/
   /* *** then move cyxrec to the commarea' user area fld     ****/
   /* ************************************************************/

  CYXREC.CYXFRMAP = "KY0KM110";

  CYXREC.IN5TRDCD = KY0KM115.IN5TRDCD;
  CYXREC.IN5TRDOC = KY0KM115.KY0KMDOC;
  CYXREC.IN5TRSUB = KY0KM115.KY0KMSUB;

  COMMAREA.CAUSERA = CYXREC.CYXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSX8

// userarea exit processing
Function KY0KSX9()


   /* ************************************************************/
   /* *** move this map's name and key flds to cyxrec and     ****/
   /* *** then move cyxrec to the commarea' user area fld     ****/
   /* ************************************************************/

  CYXREC.CYXFRMAP = "KY0KM110";

  CYXREC.IN5TRDCD = KY0KM110.IN5TRDCD;
  CYXREC.IN5TRDOC = KY0KM110.KY0KMDOC;
  CYXREC.IN5TRSUB = KY0KM110.KY0KMSUB;

  COMMAREA.CAUSERA = CYXREC.CYXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0KSX9

// inquiry : ship rec hdr : 0
Function XSSR1I0()


   /* ************************************************************/
   /* *** select unique row from:  ship rec hdr               ****/
   /* *** using the std module:  IO0790                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSR1I0 ";
  TA1REC.TA1LOCAT[1] = "IO0790  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSHIP   ";
  TA1REC.TA1TBLVU = "VSRHDR01";
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSR1I0

// close : ship rec item : 1
Function XSSRBC1()


   /* ************************************************************/
   /* *** close select set of:  ship rec item                 ****/
   /* *** using the std module:  IO2520                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  call "IO2520" ("CS", SQLCA, SRBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSRBC1 ";
  TA1REC.TA1LOCAT[1] = "IO2520  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSHIP   ";
  TA1REC.TA1TBLVU = "VSRITM01";
  TA1REC.TA1TBLKE = SRBREC.SRBKEYS;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSRBC1

// fetch : ship rec item : 1
Function XSSRBF1()


   /* ************************************************************/
   /* *** fetch next row from:  ship rec item                 ****/
   /* *** using the std module:  IO2520                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "IO2520" ("SN", SQLCA, SRBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSRBC1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSRBF1 ";
  TA1REC.TA1LOCAT[1] = "IO2520  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSHIP   ";
  TA1REC.TA1TBLVU = "VSRITM01";
  TA1REC.TA1TBLKE = SRBREC.SRBKEYS;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSRBF1

// setinq : ship rec item : 1
Function XSSRBS1()


   /* ************************************************************/
   /* *** select set of rows from:  ship rec item             ****/
   /* *** using the std module:  IO2520                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* ************************************************************/

  call "IO2520" ("SS", SQLCA, SRBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSRBS1 ";
    TA1REC.TA1LOCAT[1] = "IO2520  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSHIP   ";
    TA1REC.TA1TBLVU = "VSRITM01";
    TA1REC.TA1TBLKE = SRBREC.SRBKEYS;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSRBF1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSRBS1

//*** RECORD=KY0KW01 ****
// ************************************************************
// 
//           CYCLE COUNT
//           RECONCILE PICK SCHEDULES
//           ========================
//           application working storage
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-25-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0KW01 type basicRecord
  10 KY0KWLK1 KY0KWLK1 ; 
    15 XWHCD XWHCD ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 KY0KWDOC KY0KWDOC ; 
    15 KY0KWSUB KY0KWSUB ; 
  10 KY0KWLNO KY0KWLNO ; 
  10 KY0KWMIX KY0KWMIX ; 
  10 KY0KWIXT KY0KWIXT ; 
  10 KY0KWIXF KY0KWIXF ; 
  10 KY0KW-SR3QTYSH KY0KW-SR3QTYSH [40] ; 
end // end KY0KW01

//*** RECORD=KY0KW02 ****
// ************************************************************
// 
//           CYCLE COUNT
//           RECONCILE PICK SCHEDULES
//           ========================
//           application working storage
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-25-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0KW02 type basicRecord
  10 KY0KWLK2 KY0KWLK2 ; 
    15 XWHCD XWHCD ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 KY0KWDOC KY0KWDOC ; 
    15 KY0KWSUB KY0KWSUB ; 
end // end KY0KW02

//*** RECORD=KY0KWD1 ****
// ************************************************************
// 
//           CYCLE COUNT
//           RECONCILE PICK SCHEDULES
//           ========================
//           detail page working storage
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-25-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0KWD1 type basicRecord
  10 KY0KWDTA KY0KWDTA ; 
    15 KY0KWRTY KY0KWRTY [12] ; 
    15 KY0KWLIN KY0KWLIN [12] ; 
end // end KY0KWD1

//*** RECORD=KY0KWL1 ****
// ************************************************************
// 
//           CYCLE COUNT
//           RECONCILE PICK SCHEDULES
//           ========================
//           detail line working storage
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-25-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0KWL1 type basicRecord
  10 KY0KWLIN KY0KWLIN ; 
    15 SY4IDDSC SY4IDDSC [4] ; 
    15 KY0KWQTY KY0KWQTY [4] ; 
end // end KY0KWL1

//*** RECORD=KY0KWS1 ****
// ************************************************************
// 
//           CYCLE COUNT
//           RECONCILE PICK SCHEDULES
//           ========================
//           summary tsq working storage
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-25-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0KWS1 type basicRecord
  10 KY0KWLTH KY0KWLTH ; 
  10 KY0KWSTA KY0KWSTA ; 
    15 KY0KWREC KY0KWREC [12] ; 
    15 PK1PKSCH PK1PKSCH [12] ; 
end // end KY0KWS1

//*** RECORD=KY0KWX1 ****
// ************************************************************
// 
//           CYCLE COUNT
//           RECONCILE PICK SCHEDULES
//           ========================
//           pick schedule size accumulation
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 02-25-88  W. Jones     created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0KWX1 type basicRecord
  10 KY0KWQTY KY0KWQTY [40] ; 
end // end KY0KWX1

// SR_SHP_QTY
DataItem KY0KW-SR3QTYSH decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// audit tran doc nbr
DataItem KY0KWDOC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// data area
DataItem KY0KWDTA char(444)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved sum tsq rel. rec. no.
DataItem KY0KWIXF num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// saved sum tsq rel. rec. no.
DataItem KY0KWIXT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// detail line
DataItem KY0KWLIN char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last key flds
DataItem KY0KWLK1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last key flds
DataItem KY0KWLK2 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selected ps line nbr
DataItem KY0KWLNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data length
DataItem KY0KWLTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved sum tsq rel. rec. no.
DataItem KY0KWMIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// accumulated ps sz qty
DataItem KY0KWQTY int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// reconcile indicator
DataItem KY0KWREC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type
DataItem KY0KWRTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data area
DataItem KY0KWSTA char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit tran doc sub
DataItem KY0KWSUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

