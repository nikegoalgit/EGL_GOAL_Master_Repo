package ky0i;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0I ****
// ************************************************************
// 
//           CYCLE COUNT
//           RECONCILE COUNT WITH INCOMPLETE W.O.
//           ====================================
// 
// ************************************************************
// 
// OVERVIEW: This application is used to reconcile the count
//           using incomplete work orders found on the stock
//           locate work order databases.
//           The basic processing of the program is as follows:
//           1) Using the warehouse and document nbr the cc
//              adjustment database is read and displayed.
//           2) The work order databases are searched for
//              incomplete work orders for a particular
//              product and location. These are also displayed.
//           3)The user then has the opportunity to delete
//             existing adjustments or use the work orders
//             found to reconcile the count.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  02/26/88  J. Brady    Created
// 00  09/13/88  W. Jones    reset scrn if fast path error
// 00  03/13/89  jwood       added noncsp option to calls
// 00  03/13/89  jwood       added xssegtr logic
// 00  10/08/90  mmoreh      tbl changes
// 00  07/31/91  scleme      convert CY0I to KY0I
// 00  01/15/92  jwood       initialize w/s logic
// 00  06/19/92  Ryonke      Changed due to table structure
//                           changes.
// 00  12/10/92  SMACMI      Changed due to table structure
//                           changes for cycle count re-write.
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// IO0560    ACCESS TO DPROD.VCOLOR02
// IO2410    ACCESS TO DCYCLE.VDOCHD01
// IO2420    ACCESS TO DCYCLE.VDOCIT01
// IO2460    ACCESS TO DCYCLE.VCYADJ01
// IO1510    ACCESS TO DSTLOC.VWOLHD01
// IO1520    ACCESS TO DSTLOC.VWOLHD01
// IO1530    ACCESS TO DSTLOC.VWOMHD01
// IO1540    ACCESS TO DSTLOC.VWOMIT01
// 
// ************************************************************
// ************************************************************
// *********************
Program KY0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CY1REC CY1REC; // record
  CY2REC CY2REC; // record
  CY4REC CY4REC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  CYXREC CYXREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0IW01 KY0IW01; // record
  KY0IWB1 KY0IWB1; // record
  KY0IWD0 KY0IWD0; // record
  KY0IWL1 KY0IWL1; // record
  KY0IWS0 KY0IWS0; // record
  PKNREC PKNREC; // record
  SL8REC SL8REC; // record
  SL9REC SL9REC; // record
  SLBREC SLBREC; // record
  SLCREC SLCREC; // record
  SLVREC SLVREC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use KY0IM.KY0IM110,  // forms
      KY0IM.KY0IM121, 
      KY0IM.KY0IM122, 
      KY0IM.KY0IM125, 
      KY0IM.KY0IM129
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0I110: KY0I110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0I120; /* <=== converse map*/
    else
      CYWREC.XXXLOCID = "140 "; /* error id location id*/
      goto KY0I140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0I120: KY0I120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0I120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0I110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf15)
      goto KY0I110; /* <=== re-start this appl*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0I120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "140 ";
      goto KY0I140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0I120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0I121: KY0I121();
    KY0I122: KY0I122();
    KY0I125: KY0I125();
    KY0I129: KY0I129();
    KY0I140: KY0I140();


     /* ************************************************************/
     /* *** if either pa1,pa2,pa3,or pf15 are pressed:          ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3
     || converseVar.eventKey is pf15)
      converseLib.clearScreen();
      
      goto KY0I110; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      if (CYWREC.CYWSKYSW == "N")
        goto KY0I120; /* <=== re-display key screen*/
      end
      goto KY0I140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the key scrn    ****/
     /* ************************************************************/

    if (CYWREC.CYWSKYSW == "N")
      goto KY0I140; /* <=== re-display key screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* *** note: not going to 120 re: able to re-edit          ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf12)
      CYWREC.XXXLOCID = "140 ";
      goto KY0I140; /* <=== setup for new input*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0I140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0I


// one time initializations
Function KY0I110()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard setting of segmented transaction id        ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0IM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set KY0IM121 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set KY0IM122 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set KY0IM125 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set KY0IM129 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CYWREC empty; /* common working storage fields*/
  set CYVREC empty; /**/
  set CYXREC empty; /**/
  set CY1REC empty; /* cyc cnt         record*/
  set CY2REC empty; /* cyc cnt         record*/
  set CY4REC empty; /* cyc cnt control record*/
  set KY0IWB1 empty; /* appl. working storage area*/
  set KY0IWD0 empty; /* appl. working storage area*/
  set KY0IWL1 empty; /* appl. working storage area*/
  set KY0IWS0 empty; /* appl. working storage area*/
  set KY0IW01 empty; /* appl. working storage area*/
  set SL8REC empty; /* wo hdr record*/
  set SL9REC empty; /* wo itm record*/
  set SLBREC empty; /**/
  set SLCREC empty; /**/
  set SLVREC empty; /**/
  set SYCREC empty; /* style/color record*/
  set SYPREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set TA5REC empty; /* TA0050 record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/17/88  j. brady      created                ****/
   /* ***  01  09/13/88  w. jones      reset scrn if fast     ****/
   /* ***                              path error             ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "01";

  CYWREC.XXXMAPNM = "KY0IM110";
  CYWREC.XXXTITLE = "RECONCILE COUNT W/ INCOMPLETE W.O.";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0I"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0I110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0IM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWSEXSW = "N"; /* special exit switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0IM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0IM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0IM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0IM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0ISE9(); /* <=== userarea entry processing*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  CYWREC.CYWSUMQU = "CYSI";
  CYWREC.CYWDETQU = "CYDI";

  KY0IWS0.KY0IWLTH = 852; /* 71 X 12*/
  KY0IWD0.KY0IWLTH = 852; /* 71 X 12*/

  XSCYSPQ(); /* purge any existing storage*/

  CYWREC.CYWLINPP = 12; /* total lines of data per page*/

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0IM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0IM110.XWHCD cursor;
  end

   /* ************************************************************/
   /* *** attempt to obtain first time table data             ****/
   /* ************************************************************/

  KY0ISH1();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0I110


// converse & control key entry
Function KY0I120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  KY0ISN1(); /* blank out floating map lines*/

  CYWREC.CYWLASPF = "E";

   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0IM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0IM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSCYSPQ(); /* ===> purge tsq's*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0F";
    XSCYSPQ(); /* ===> purge tsq's*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSCYSPQ(); /* ===> purge tsq's*/
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSCYSPQ(); /* ===> purge tsq's*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0IM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0IM110.CATOAP;
    COMMAREA.CAITEM = KY0IM110.CAITEM;
    XSCYSPQ(); /* ===> purge tsq's*/
    XSEXIT();
    KY0IST1(); /* ===> reset scrn*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0IM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  KY0IM110.VAGen_EZEMSG = " ";
  set KY0IM110.CATOAP initialAttributes;
  set KY0IM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0IM110.XWHCD initialAttributes;
  set KY0IM110.IN5TRDCD initialAttributes;
  set KY0IM110.IN5TRDOC initialAttributes;
  set KY0IM110.IN5TRSUB initialAttributes;
  set KY0IM110.SL2CASE initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0IM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0IM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0ISH1(); /* <=== verify data entered/obtain data*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0G";
    XSCYSPQ(); /* ===> purge tsq's*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120G";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "KY0H";
    XSCYSPQ(); /* ===> purge tsq's*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120H";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    XSCYSPQ(); /* ===> purge tsq's*/
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "KY0J";
    XSCYSPQ(); /* ===> purge tsq's*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120I";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "KY0K";
    XSCYSPQ(); /* ===> purge tsq's*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120J";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "KY0L";
    XSCYSPQ(); /* ===> purge tsq's*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120K";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120L";
  CYWREC.CYWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0I120


// display summary line
Function KY0I121()


   /* *** move summary fields to map fields ****/

  KY0IM110.KY0IMREC[CYWIDX01] = KY0IWB1.KY0IWREC;
  KY0IM121.KY0IMWIO = KY0IWB1.KY0IWWIO;
  KY0IM121.SL2CASE = KY0IWB1.SL2CASE;
  KY0IM121.SL8WONBR = KY0IWB1.SL8WONBR;
  KY0IM121.KY0IMSQY = KY0IWB1.KY0IWSQY;
  KY0IM121.ZZZSDT = KY0IWB1.ZZZSDT;
  KY0IM121.KY0IM-CREATOR = KY0IWB1.KY0IM-SL-WO-CRT-USER;
  KY0IM121.KY0IM-STAT = KY0IWB1.KY0IM-YWS-WO-STAT-CD;
  KY0IM121.KY0IM-SCHED-NBR = KY0IWB1.KY0IM-PK-PICK-SCHED-NBR;


  display KY0IM121 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end KY0I121


// display detail line
Function KY0I122()


   /* *** move detail fields to map fields ****/

  CYWREC.CYWIDX03 = 1;
  while (CYWREC.CYWIDX03 <= 4)
    KY0IM122.SY4IDDSC[CYWIDX03] = KY0IWL1.SY4IDDSC[CYWIDX03];
    KY0IM122.SL9WOQTY[CYWIDX03] = KY0IWL1.SL9WOQTY[CYWIDX03];
    CYWREC.CYWIDX03 = CYWREC.CYWIDX03 + 1;
  end


  display KY0IM122 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end KY0I122


// display detail title line
Function KY0I125()


  display KY0IM125 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end KY0I125


// display blank line
Function KY0I129()

   /* ************************************************************/
   /* *** no statements in the before section                 ****/
   /* ************************************************************/

  display KY0IM129 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end KY0I129


// converse & control data entry
Function KY0I140()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0IM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0IM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSCYSPQ(); /* purge tsq*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140A";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0F";
    XSCYSPQ(); /* purge tsq*/
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140B";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSCYSPQ(); /* purge tsq*/
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140C";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** IF PF5: GO TO CYCLE COUNT MAIN MENU                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    XSCYSPQ(); /* purge tsq*/
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140D";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0IM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0IM110.CATOAP;
    COMMAREA.CAITEM = KY0IM110.CAITEM;
    XSCYSPQ(); /* purge tsq*/
    XSEXIT();
    KY0IST1(); /* reset scrn*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140E";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0IM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWSEXSW = "N";
  CYWREC.CYWERRSW = "N";
  CYWREC.CYWSKYSW = "Y";
  KY0IM110.VAGen_EZEMSG = " ";
  CYWREC.XXXLOCID = "140 ";
  set KY0IM110.CATOAP initialAttributes;
  set KY0IM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set KY0IM110.XWHCD initialAttributes;
  set KY0IM110.IN5TRDCD initialAttributes;
  set KY0IM110.IN5TRDOC initialAttributes;
  set KY0IM110.IN5TRSUB initialAttributes;
  set KY0IM110.SL2CASE initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s depending on function   ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0IM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0IM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER or pf6 obtain data to display              ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf6)
    KY0ISH1(); /* <=== 2nd pass processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if pf12 perform updates                             ****/
   /* *** note: selection not allowed                         ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    KY0ISB1(); /* same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "140M";
      CYWREC.CYWMSGNO = 0073; /* <--- no key changes allowed*/
      exit stack;
    end
    CYWIDX03 = 1;
    while (CYWIDX03 <= CYWREC.CYWLINPP)
      if (KY0IM110.XMCYMSEL[CYWIDX03] > " ") /* <--- selection made*/
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "140R";
        CYWREC.CYWMSGNO = 0084; /* <--- selection invalid msg*/
        set KY0IM110.XMCYMSEL[CYWIDX03] cursor, bold;
        exit stack;
      end
      CYWIDX03 = CYWIDX03 + 1;
    end
    if (CYWREC.CYWLASPF == "6")
      KY0IS1N(); /* tsq update for last pfkey=pf6*/
    else
      KY0IS1O(); /* tsq update for last pfkey=enter*/
    end
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    KY0ISU1(); /* <=== update database*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSEXSW == "Y")
        exit stack;
      end
      KY0IST1(); /* <=== reset screen (empty)*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    CYWREC.CYWMSGNO = 0020; /* <--- trans. complete msg*/
    exit stack;
     /* ************************************************************/
     /* *** note: ky0csq1 not used re: able to re-edit immediately**/
     /* *** note: also succesful flow will stay in the 140 level****/
     /* ************************************************************/
    exit stack;
  end

   /* ************************************************************/
   /* *** if pf7 scroll backwards. Key changes not allowed    ****/
   /* *** note: selection not allowed                         ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    CYWIDX03 = 1;
    while (CYWIDX03 <= CYWREC.CYWLINPP)
      if (KY0IM110.XMCYMSEL[CYWIDX03] > " ") /* <--- selection made*/
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "140S";
        CYWREC.CYWMSGNO = 0084; /* <--- selection invalid msg*/
        set KY0IM110.XMCYMSEL[CYWIDX03] cursor, bold;
        exit stack;
      end
      CYWIDX03 = CYWIDX03 + 1;
    end
    KY0ISJ1(); /* pf7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if pf8 scroll forwards. Key changes not allowed     ****/
   /* *** note: selection not allowed                         ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    CYWIDX03 = 1;
    while (CYWIDX03 <= CYWREC.CYWLINPP)
      if (KY0IM110.XMCYMSEL[CYWIDX03] > " ") /* <--- selection made*/
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "140T";
        CYWREC.CYWMSGNO = 0084; /* <--- selection invalid msg*/
        set KY0IM110.XMCYMSEL[CYWIDX03] cursor, bold;
        exit stack;
      end
      CYWIDX03 = CYWIDX03 + 1;
    end
    KY0ISK1(); /* pf8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    XSCYSPQ(); /* purge tsq*/
    COMMAREA.CATOAP = "KY0G";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    XSCYSPQ(); /* purge tsq*/
    COMMAREA.CATOAP = "KY0H";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140H";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf15)
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    XSCYSPQ(); /* purge tsq*/
    COMMAREA.CATOAP = "KY0J";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140I";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    XSCYSPQ(); /* purge tsq*/
    COMMAREA.CATOAP = "KY0K";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140J";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    XSCYSPQ(); /* purge tsq*/
    COMMAREA.CATOAP = "KY0L";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140K";
    CYWREC.CYWMSGNO = 0;
    KY0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "140L";
  CYWREC.CYWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0I140


// select dpick.vpksty01
Function KY0IS-SEL-VPKSTY01()
   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  io1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "KY0IS-SEL-VPKSTY01";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0IS-SEL-VPKSTY01


// size translation (sy1190)
Function KY0IS-SIZE-CONVERT()

   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call SY1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "KY0IS-SIZE-CONVERT";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0IS-SIZE-CONVERT


// obtain doc hdr rec 1st pass
Function KY0IS1A()

   /* ************************************************************/
   /* *** obtain cc document header record via 1st pass       ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0IS1A ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set CY1REC empty;

  CY1REC.XWHCD = KY0IM110.XWHCD;
  CY1REC.IN5TRDCD = KY0IM110.IN5TRDCD;
  CY1REC.IN5TRDOC = KY0IM110.IN5TRDOC;

  XSCY1I0(); /* select location document record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AA";
    CYWREC.CYWMSGNO = 0012; /* <--- not on db*/
    set KY0IM110.IN5TRDCD cursor, bold;
    set KY0IM110.IN5TRDOC bold;
    set KY0IM110.IN5TRSUB bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AB";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1AC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  KY0IM110.XARCD = CY1REC.XARCD;

  KY0IM110.SL4ZONE = CY1REC.SL4ZONE;

  KY0IM110.SL5LOCTN = CY1REC.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1A


// obtain doc item rec 1st pass
Function KY0IS1B()

   /* ************************************************************/
   /* *** obtain cc document item record on 1st pass          ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0IS1B ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set CY2REC empty;

  CY2REC.XWHCD = KY0IM110.XWHCD;
  CY2REC.IN5TRDCD = KY0IM110.IN5TRDCD;
  CY2REC.IN5TRDOC = KY0IM110.IN5TRDOC;
  CY2REC.IN5TRSUB = KY0IM110.IN5TRSUB;

  XSCY2I0(); /* select document item record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set KY0IM110.IN5TRDCD cursor, bold;
    set KY0IM110.IN5TRDOC bold;
    set KY0IM110.IN5TRSUB bold;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.XXXLOCID = "S1BA";
      CYWREC.CYWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "S1BB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "S1BC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if status is NOT open, setup not open error         ****/
   /* ************************************************************/

  if (CY2REC.YDUCD != "01")
    set KY0IM110.IN5TRDCD cursor, bold;
    set KY0IM110.IN5TRDOC bold;
    set KY0IM110.IN5TRSUB bold;
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1BD";
    CYWREC.CYWMSGNO = 0034; /* <--- not open msg*/
    return;
  end

  KY0IM110.XGPCD = CY2REC.XGPCD;
  KY0IM110.SY1STNBR = CY2REC.SY1STNBR;
  KY0IM110.SY2CLRID = CY2REC.SY2CLRID;
  KY0IM110.XDMCD = CY2REC.XDMCD;
  KY0IM110.XQACD = CY2REC.XQACD;
  KY0IM110.PC2INSEG = CY2REC.PC2INSEG;
  KY0IM110.XSLCD = CY2REC.XSLCD;
  KY0IM110.XPGCD = CY2REC.XPGCD;
  KY0IM110.XUMCD = CY2REC.XUMCD;
  KY0IM110.XOWCD = CY2REC.XOWCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1B


// process history work orders
Function KY0IS1C()


   /* ************************************************************/
   /* *** this statement group looks at the work order history****/
   /* *** db to find the adjustment record work order number. ****/
   /* *** After finding the work order move summary data to   ****/
   /* *** working storage. To gather detail data and summary  ****/
   /* *** quantities a select set of all items for that work  ****/
   /* *** order number is performed.                          ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0IS1C ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  SLBREC.XWHCD = KY0IM110.XWHCD;

  SLBREC.SL8WONBR = CY4REC.CY4ADJNO;

  XSSLBI0(); /* obtain w.o. history record*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWSKYSW = "N";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1CA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1CB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    KY0IST1(); /* <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** format all fields on summary line,initializing qty  ****/
   /* ************************************************************/

  KY0IWB1.KY0IWREC = KY0IW01.KY0IWSRC;

  if (CY4REC.YSACD == "II")
    KY0IWB1.KY0IWWIO = "IN ";
  else
    KY0IWB1.KY0IWWIO = "OUT";
  end
  KY0IWB1.SL2CASE = SLBREC.SL2CASE;
  KY0IWB1.SL8WONBR = SLBREC.SL8WONBR;
  KY0IWB1.KY0IWSQY = 0;
  KY0IWB1.ZZZSDT = SLBREC.ZZZSDT;
  KY0IWB1.KY0IM-SL-WO-CRT-USER = SLBREC.SL8CRTBY;
  KY0IWB1.KY0IM-YWS-WO-STAT-CD = SLBREC.YWSCD;
  KY0IWB1.KY0IM-PK-PICK-SCHED-NBR = SLBREC.PK2SCHNO;

   /* ************************************************************/
   /* *** format key and then obtain w.o. history items       ****/
   /* ************************************************************/

  SLCREC.XWHCD = KY0IM110.XWHCD;
  SLCREC.SL8WONBR = SLBREC.SL8WONBR;

  XSSLCS1(); /* obtain set of all w.o. history items*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWSKYSW = "N";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1CC";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1CD";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    KY0IST1(); /* <=== clear scrn (empty)*/
    return;
  end

  CYWREC.CYWIDX01 = 0; /* count nbr of sizes per line*/

  CYWREC.CYWDETLX = 0; /* count nbr of details*/

  while (SQLCA.VAGen_SQLCODE == +0)

    CYWIDX01 = CYWIDX01 + 1;

    KY0IW01.KY0IWSZ1 = SLCREC.SY5SZID;
   /* save original size*/
    KY0IWL1.SY5SZID[CYWIDX01] = SLCREC.SY5SZID;
    if (KY0IW01.KY0IWSZ1 == 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1CG";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error*/
      return;
    end
    if (SYPREC.SY4IDDSC[KY0IWSZ1] == "     ")
      KY0IWL1.SY4IDDSC[CYWIDX01] = "*****";
    else
      KY0IWL1.SY4IDDSC[CYWIDX01] = SYPREC.SY4IDDSC[KY0IWSZ1];
    end
    KY0IWL1.SL9WOQTY[CYWIDX01] = SLCREC.SL9WOQTY;
    KY0IWB1.KY0IWSQY = KY0IWB1.KY0IWSQY + SLCREC.SL9WOQTY;

    if (CYWREC.CYWIDX01 == 4)
       /* put detail line to detail buffer*/
      CYWREC.CYWDETLX = CYWREC.CYWDETLX + 1; /* increment det line ct.*/
      KY0IWB1.KY0IWDET[CYWDETLX] = KY0IWL1.KY0IWLIN;
       /* reset sizes per line counter*/
      CYWREC.CYWIDX01 = 0;
    end

    XSSLCF1(); /* fetch next work order item*/

    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWSKYSW = "N";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1CE";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != +100)
      CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      CYWREC.XXXLOCID = "S1CF";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      KY0IST1(); /* <=== clear scrn (empty)*/
      return;
    end

  end

   /* *** fill remaining sizes with spaces and put to det buffer*/

  if (SQLCA.VAGen_SQLCODE == +100)
    if (CYWREC.CYWIDX01 > 0)
      while (CYWREC.CYWIDX01 < 4)
        CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1; /* increment work index*/
        KY0IWL1.SY4IDDSC[CYWIDX01] = "     ";
        KY0IWL1.SL9WOQTY[CYWIDX01] = 0;
      end
      /* *** now put detail line to buffer area ****/
      CYWREC.CYWDETLX = CYWREC.CYWDETLX + 1; /* increment det line ct.*/
      KY0IWB1.KY0IWDET[CYWDETLX] = KY0IWL1.KY0IWLIN;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1C


// process live work order items
Function KY0IS1D()


   /* ************************************************************/
   /* *** After finding the work order move summary data to   ****/
   /* *** working storage. To gather detail data and summary  ****/
   /* *** quantities a select set of all items for that work  ****/
   /* *** order number is performed.                          ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0IS1D ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

   /* ************************************************************/
   /* *** format all fields on summary line,initializing qty  ****/
   /* ************************************************************/

  KY0IWB1.KY0IWREC = KY0IW01.KY0IWSRC;

  if (CY4REC.YSACD == "II")
    KY0IWB1.KY0IWWIO = "IN ";
  else
    KY0IWB1.KY0IWWIO = "OUT";
  end
  KY0IWB1.SL2CASE = SL8REC.SL2CASE;
  KY0IWB1.SL8WONBR = SL8REC.SL8WONBR;
  KY0IWB1.KY0IWSQY = 0;
  KY0IWB1.ZZZSDT = SL8REC.ZZZSDT;
  KY0IWB1.KY0IM-SL-WO-CRT-USER = SL8REC.SL8CRTBY;
  KY0IWB1.KY0IM-YWS-WO-STAT-CD = SL8REC.YWSCD;
  KY0IWB1.KY0IM-PK-PICK-SCHED-NBR = SL8REC.PK2SCHNO;

   /* ************************************************************/
   /* *** format key and then obtain w.o. items               ****/
   /* ************************************************************/

  SL9REC.XWHCD = KY0IM110.XWHCD;
  SL9REC.SL8WONBR = SL8REC.SL8WONBR;

  XSSL9S1(); /* obtain set of all w.o. live items*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWSKYSW = "N";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1DA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1DB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    KY0IST1(); /* <=== clear scrn (empty)*/
    return;
  end

  CYWREC.CYWIDX01 = 0; /* count sizes per line*/

  CYWREC.CYWDETLX = 0; /* count nbr of details*/

  while (SQLCA.VAGen_SQLCODE == +0)

    CYWIDX01 = CYWIDX01 + 1;

    KY0IW01.KY0IWSZ1 = SL9REC.SY5SZID;
   /* save original size*/
    KY0IWL1.SY5SZID[CYWIDX01] = SL9REC.SY5SZID;
    if (KY0IW01.KY0IWSZ1 == 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1DE";
      CYWREC.CYWMSGNO = 0001; /* <--- try again msg*/
      return;
    end
    if (SYPREC.SY4IDDSC[KY0IWSZ1] == "     ")
      KY0IWL1.SY4IDDSC[CYWIDX01] = "*****";
    else
      KY0IWL1.SY4IDDSC[CYWIDX01] = SYPREC.SY4IDDSC[KY0IWSZ1];
    end
    KY0IWL1.SL9WOQTY[CYWIDX01] = SL9REC.SL9WOQTY;
    KY0IWB1.KY0IWSQY = KY0IWB1.KY0IWSQY + SL9REC.SL9WOQTY;

    if (CYWREC.CYWIDX01 == 4)
       /* put detail line to detail buffer*/
      CYWREC.CYWDETLX = CYWREC.CYWDETLX + 1; /* increment det line ct.*/
      KY0IWB1.KY0IWDET[CYWDETLX] = KY0IWL1.KY0IWLIN;
       /* reset sizes per line counter*/
      CYWREC.CYWIDX01 = 0;
    end

    XSSL9F1(); /* fetch next w.o. item rec*/

    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWSKYSW = "N";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1DC";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != +100)
      CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      CYWREC.XXXLOCID = "S1DD";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      KY0IST1(); /* <=== clear scrn (empty)*/
      return;
    end

  end

   /* *** fill remaining sizes with spaces and put to det buffer*/

  if (SQLCA.VAGen_SQLCODE == +100)
    if (CYWREC.CYWIDX01 > 0)
      while (CYWREC.CYWIDX01 < 4)
        CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1; /* increment work index*/
        KY0IWL1.SY4IDDSC[CYWIDX01] = "     ";
        KY0IWL1.SL9WOQTY[CYWIDX01] = 0;
      end
      /* *** now put detail line to buffer area ****/
      CYWREC.CYWDETLX = CYWREC.CYWDETLX + 1; /* increment det line ct.*/
      KY0IWB1.KY0IWDET[CYWDETLX] = KY0IWL1.KY0IWLIN;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1D


// obtain style/color description
Function KY0IS1E()
   /* ************************************************************/
   /* ***           obtain style/color decriptions            ****/
   /* ************************************************************/


  TA1REC.TA1LOCAT[2] = "KY0IS1E ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

   /* *** set up record to obtain style/color descriptions ****/

  set SYCREC empty;

  PKNREC.XGPCD = KY0IM110.XGPCD;
  PKNREC.SY1STNBR = KY0IM110.SY1STNBR;
  PKNREC.SY2CLRID = KY0IM110.SY2CLRID;
  PKNREC.XDMCD = KY0IM110.XDMCD;

  KY0IS-SEL-VPKSTY01(); /* <=== style/color retrieve*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1EA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1EB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    KY0IST1(); /* <=== clear scrn (empty)*/
    return;
  end

  KY0IM110.SY1SSTNM = SYCREC.SY1SSTNM;
  KY0IM110.SY2CLRAB = SYCREC.SY2CLRAB;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1E


// process incomplete in adjusts.
Function KY0IS1F()

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0IS1F ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

   /* *** process incomplete 'in' adjustments ****/

  set CY4REC empty;

  CY4REC.XWHCD = KY0IM110.XWHCD;
  CY4REC.IN5TRDCD = KY0IM110.IN5TRDCD;
  CY4REC.IN5TRDOC = KY0IM110.IN5TRDOC;
  CY4REC.IN5TRSUB = KY0IM110.IN5TRSUB;
  CY4REC.YSACD = "II";
  CY4REC.SL2CASE = KY0IM110.SL2CASE;

  XSCY4S1(); /* select set of adjustment recs*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWSKYSW = "N";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1FA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1FB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    KY0IST1(); /* <=== clear scrn (empty)*/
    return;
  end

  set SL8REC empty;
  SL8REC.XWHCD = KY0IM110.XWHCD;

  while (SQLCA.VAGen_SQLCODE == +0)

    CYWREC.CYWFTMSW = "Y"; /* yes there are recs*/

    if (CY4REC.CY4ADJNO == SL8REC.SL8WONBR) /* same w.o. ?*/
     /* next sentence                     /* only show it once*/
    else

      SL8REC.SL8WONBR = CY4REC.CY4ADJNO;
     /* *** try to find it on the w.o. live db ****/
      XSSL8I0();

      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        CYWREC.CYWSKYSW = "N";
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1FC";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != +100)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "S1FD";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        KY0IST1(); /* <=== clear scrn (empty)*/
        return;
      end

      KY0IW01.KY0IWSRC = "X"; /* set up reconcile field*/
      if (SQLCA.VAGen_SQLCODE == +100)
       /* since it's not on the live w.o. db it must be on history*/
        KY0IS1C(); /* process history w.o. hdr & items*/
      else
        KY0IS1D(); /* process live work order items*/
      end

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

      KY0IS1H(); /* put summary from wb1 rec to summary*/
                                   /* tsq*/

      KY0IS1I();
                                   /* put detail from wb1 rec to detail tsq*/
    end

    XSCY4F1(); /* fetch next adjustment record*/

    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWSKYSW = "N";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1FE";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != +100)
      CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      CYWREC.XXXLOCID = "S1FF";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      KY0IST1(); /* <=== clear scrn (empty)*/
      return;
    end

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1F


// process incomplete out adjusts
Function KY0IS1G()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0IS1G ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

   /* *** process incomplete 'out' adjustment records ****/

  CY4REC.YSACD = "IO";

  XSCY4S1(); /* select set of adjustment recs*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWSKYSW = "N";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1GA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1GB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    KY0IST1(); /* <=== clear scrn (empty)*/
    return;
  end

  set SL8REC empty;
  SL8REC.XWHCD = KY0IM110.XWHCD;

  while (SQLCA.VAGen_SQLCODE == +0)

    CYWREC.CYWFTMSW = "Y"; /* yes there are records*/

    if (CY4REC.CY4ADJNO == SL8REC.SL8WONBR) /* same w.o. ?*/
     /* next sentence                        /* only show it once*/
    else
      SL8REC.SL8WONBR = CY4REC.CY4ADJNO;
     /* *** try to find it on the w.o. live db ****/
      XSSL8I0();

      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        CYWREC.CYWSKYSW = "N";
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1GC";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != +100)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "S1GD";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        KY0IST1(); /* <=== clear scrn (empty)*/
        return;
      end

      KY0IW01.KY0IWSRC = "X"; /* set up reconcile field*/
      if (SQLCA.VAGen_SQLCODE == +100)
       /* *** since it's not on live db it must be on history ****/
        KY0IS1C(); /* process history work orders*/
      else
        KY0IS1D(); /* process live work order items*/
      end

      if (CYWREC.CYWERRSW == "Y")
        return;
      end

      KY0IS1H(); /* put summary line from wb1 rec to*/
                                   /* summary tsq*/

      KY0IS1I(); /* put summary & detail lines from wb1*/
                                   /* rec to detail tsq*/

    end

    XSCY4F1(); /* fetch next adjustment record*/

    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWSKYSW = "N";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1GE";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != +100)
      CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      CYWREC.XXXLOCID = "S1GF";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      KY0IST1(); /* <=== clear scrn (empty)*/
      return;
    end

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1G


// process summary tsq
Function KY0IS1H()

  TA1REC.TA1LOCAT[2] = "KY0IS1H ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

   /* *** move summary data to summary array area ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  if (CYWREC.CYWSUMLX < CYWREC.CYWLINPP)
    CYWSUMLX = CYWSUMLX + 1;
    KY0IWS0.KY0IWDPG[CYWSUMLX] = KY0IW01.KY0IWDPA;
    KY0IWS0.KY0IWRTY[CYWSUMLX] = "S";
    KY0IWS0.KY0IWDTA[CYWSUMLX] = KY0IWB1.KY0IWSUM;
  else
    TA5REC.TA5APPID = CYWREC.CYWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1HA";
      CYWREC.CYWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
    /* *** increment summary counter ****/
    KY0IW01.KY0IWSPA = KY0IW01.KY0IWSPA + 1;
    /* *** setup next summary record ****/
    CYWREC.CYWSUMLX = 1;
    KY0IWS0.KY0IWRTY[CYWSUMLX] = "S";
    KY0IWS0.KY0IWDPG[CYWSUMLX] = KY0IW01.KY0IWDPA;
    KY0IWS0.KY0IWDTA[CYWSUMLX] = KY0IWB1.KY0IWSUM;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1H


// process detail tsq
Function KY0IS1I()

  TA1REC.TA1LOCAT[2] = "KY0IS1I ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  CYWIDX01 = 1; /* work index to fill the detail queue*/

  KY0IWD0.KY0IWSPG[CYWIDX01] = KY0IW01.KY0IWSPA;
  KY0IWD0.KY0IWRTY[CYWIDX01] = "S";
  KY0IWD0.KY0IWDTA[CYWIDX01] = KY0IWB1.KY0IWSUM;

  CYWIDX01 = CYWIDX01 + 1;
  KY0IWD0.KY0IWSPG[CYWIDX01] = KY0IW01.KY0IWSPA;
  KY0IWD0.KY0IWRTY[CYWIDX01] = "Z";

  CYWIDX02 = 0; /* work index to walk thru dets in*/
                                   /* buffer*/

  while (CYWIDX02 < CYWREC.CYWDETLX)
    CYWIDX01 = CYWIDX01 + 1;
    CYWIDX02 = CYWIDX02 + 1;
    KY0IWD0.KY0IWSPG[CYWIDX01] = KY0IW01.KY0IWSPA;
    KY0IWD0.KY0IWRTY[CYWIDX01] = "D";
    KY0IWD0.KY0IWDTA[CYWIDX01] = KY0IWB1.KY0IWDET[CYWIDX02];
  end

  while (CYWIDX01 < CYWREC.CYWLINPP)
    CYWIDX01 = CYWIDX01 + 1;
    KY0IWD0.KY0IWSPG[CYWIDX01] = KY0IW01.KY0IWSPA;
    KY0IWD0.KY0IWRTY[CYWIDX01] = "B";
  end

  TA5REC.TA5APPID = CYWREC.CYWDETQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (KY0IWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1IA";
    CYWREC.CYWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** increment detail page counter ****/
  KY0IW01.KY0IWDPA = KY0IW01.KY0IWDPA + 1;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1I


// process inc. w.o.'s going out
Function KY0IS1J()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0IS1J ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;


   /* *** process incomplete w.o.'s going out of the location ****/

  set SL8REC empty;

  SL8REC.XWHCD = KY0IM110.XWHCD;
  SL8REC.YWTCD = "* ";
  SL8REC.YWSCD = "01";
  SL8REC.SL8FRAR = KY0IM110.XARCD;
  SL8REC.SL8FRZN = KY0IM110.SL4ZONE;
  SL8REC.SL8FRLC = KY0IM110.SL5LOCTN;
  SLVREC.SLVSDT = 0;
  SLVREC.SLVEDT = 99999999;

  XSSL8S1(); /* select set of work orders*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWSKYSW = "N";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1JA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1JB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    KY0IST1(); /* <=== clear scrn (empty)*/
    return;
  end

  while (SQLCA.VAGen_SQLCODE == +0)

    if (KY0IM110.XGPCD == SL8REC.XGPCD
     && KY0IM110.SY1STNBR == SL8REC.SY1STNBR
     && KY0IM110.SY2CLRID == SL8REC.SY2CLRID
     && KY0IM110.XDMCD == SL8REC.XDMCD
     && KY0IM110.XQACD == SL8REC.XQACD
     && KY0IM110.PC2INSEG == SL8REC.PC2INSEG
     && KY0IM110.XSLCD == SL8REC.XSLCD
     && KY0IM110.XPGCD == SL8REC.XPGCD
     && KY0IM110.XUMCD == SL8REC.XUMCD
     && KY0IM110.XOWCD == SL8REC.XOWCD)

      SL9REC.XWHCD = KY0IM110.XWHCD;
      SL9REC.SL8WONBR = SL8REC.SL8WONBR;

      XSSL9S1(); /* select set of items to get a size*/

      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        CYWREC.CYWSKYSW = "N";
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1IP";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != +100)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "S1IQ";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        KY0IST1(); /* <=== clear scrn (empty)*/
        return;
      end

      CY4REC.SY5SZID = SL9REC.SY5SZID;

      XSSL9C1(); /* close set of items*/

      CY4REC.YSACD = "IO";
      CY4REC.CY4ADJNO = SL8REC.SL8WONBR;

      XSCY4I0(); /* try to find it on the adj. db*/

      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        CYWREC.CYWSKYSW = "N";
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1JC";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != +100)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "S1JD";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        KY0IST1(); /* <=== clear scrn (empty)*/
        return;
      end

      if (SQLCA.VAGen_SQLCODE == +100)
        CYWREC.CYWFTMSW = "Y"; /* yes rec to display*/
        KY0IW01.KY0IWSRC = " ";
        KY0IS1D(); /* process work order item recs*/

        if (CYWREC.CYWERRSW == "Y")
          return;
        end

        KY0IS1H(); /* put summary line from wb1 rec to*/
                                   /* summary tsq*/

        KY0IS1I(); /* put summary & detail lines from wb1*/
                                   /* rec to detail tsq*/

      end
    end

    XSSL8F1(); /* fetch next work order record*/

    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWSKYSW = "N";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1JE";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != +100)
      CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      CYWREC.XXXLOCID = "S1JF";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      KY0IST1(); /* <=== clear scrn (empty)*/
      return;
    end

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1J


// process inc. w.o.'s coming in
Function KY0IS1K()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* *** note: reset wo type code re: prev. fnd overlayed    ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0IS1K ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

   /* *** process incomplete w.o.'s coming in to the location ****/

  SL8REC.YWTCD = "* ";
  SL8REC.SL8TOAR = KY0IM110.XARCD;
  SL8REC.SL8TOZN = KY0IM110.SL4ZONE;
  SL8REC.SL8TOLC = KY0IM110.SL5LOCTN;

  XSSL8S2(); /* select set of 'in' work orders*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    CYWREC.CYWSKYSW = "N";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1KA";
    CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1KB";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    KY0IST1(); /* <=== clear scrn (empty)*/
    return;
  end

  while (SQLCA.VAGen_SQLCODE == +0)

    if (KY0IM110.XGPCD == SL8REC.XGPCD
     && KY0IM110.SY1STNBR == SL8REC.SY1STNBR
     && KY0IM110.SY2CLRID == SL8REC.SY2CLRID
     && KY0IM110.XDMCD == SL8REC.XDMCD
     && KY0IM110.XQACD == SL8REC.XQACD
     && KY0IM110.PC2INSEG == SL8REC.PC2INSEG
     && KY0IM110.XSLCD == SL8REC.XSLCD
     && KY0IM110.XPGCD == SL8REC.XPGCD
     && KY0IM110.XUMCD == SL8REC.XUMCD
     && KY0IM110.XOWCD == SL8REC.XOWCD)

      SL9REC.XWHCD = KY0IM110.XWHCD;
      SL9REC.SL8WONBR = SL8REC.SL8WONBR;

      XSSL9S1(); /* select set of items to get a size*/

      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        CYWREC.CYWSKYSW = "N";
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1JP";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != +100)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "S1JQ";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        KY0IST1(); /* <=== clear scrn (empty)*/
        return;
      end

      CY4REC.SY5SZID = SL9REC.SY5SZID;

      XSSL9C1(); /* close set of items*/

      CY4REC.YSACD = "II";
      CY4REC.CY4ADJNO = SL8REC.SL8WONBR;

      /* *** try to find it on the adj. db ****/
      XSCY4I0();

      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        CYWREC.CYWSKYSW = "N";
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1KC";
        CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != +100)
        CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        CYWREC.XXXLOCID = "S1KD";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        KY0IST1(); /* <=== clear scrn (empty)*/
        return;
      end

      if (SQLCA.VAGen_SQLCODE == +100)
        CYWREC.CYWFTMSW = "Y"; /* yes there are records*/
        KY0IW01.KY0IWSRC = " "; /* set up reoconcile field*/
        KY0IS1D(); /* process work order item recs*/

        if (CYWREC.CYWERRSW == "Y")
          return;
        end

        KY0IS1H(); /* put summary line from wb1 rec to*/
                                   /* summary tsq*/

        KY0IS1I(); /* put summary & detail lines from wb1*/
                                   /* rec to detail tsq*/

      end
    end

    XSSL8F2(); /* fetch next work order record*/

    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      CYWREC.CYWSKYSW = "N";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1KE";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != +100)
      CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      CYWREC.XXXLOCID = "S1KF";
      CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      KY0IST1(); /* <=== clear scrn (empty)*/
      return;
    end

  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1K


// enter processing
Function KY0IS1L()

   /* *******************************************************/
   /* *** obtain summary page number from page number on ****/
   /* *** detail record and then perform call to get the ****/
   /* *** summary record.                                ****/
   /* *******************************************************/


  TA5REC.TA5TSQIX = KY0IWD0.KY0IWSPG[1];
  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1LA";
    CYWREC.CYWMSGNO = 0001;
    return;
  end

  CYWREC.CYWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1L


// find correct detail
Function KY0IS1M()


   /* ********************************************************/
   /* *** obtain detail page number from page number on   ****/
   /* *** summary record and then perform call to get the ****/
   /* *** detail record.                                  ****/
   /* ********************************************************/

  CYWREC.CYWIDX01 = CYWREC.CYWLINPP;
  CYWREC.CYWIDX02 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on summary page.     ****/

  while (CYWIDX01 >= 1)
    if (KY0IM110.XMCYMSEL[CYWIDX01] != " ")
      CYWREC.CYWIDX02 = CYWREC.CYWIDX01;
    end
    KY0IM110.XMCYMSEL[CYWIDX01] = " ";
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = KY0IWS0.KY0IWDPG[CYWIDX02];
  TA5REC.TA5APPID = CYWREC.CYWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (KY0IWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1MA";
    CYWREC.CYWMSGNO = 0001;
    return;
  end

  CYWREC.CYWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0IS1M


// tsq update w/last pfkey=pf6
Function KY0IS1N()

  if (KY0IM110.KY0IMREC[1] == KY0IW01.KY0IWREC[1])
    return; /* no change therefore no updates to*/
                                   /* tsqs*/
  end

   /* *** obtain detail tsq record and update the ****/
   /* *** reconcilliation field.                  ****/

  TA5REC.TA5APPID = CYWREC.CYWDETQU;
  TA5REC.TA5TSQIX = CYWREC.CYWDETIX;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (KY0IWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1NA";
    CYWREC.CYWMSGNO = 0001;
    return;
  end

  KY0IWB1.KY0IWSUM = KY0IWD0.KY0IWDTA[1];
  KY0IWB1.KY0IWREC = KY0IM110.KY0IMREC[1];

  KY0IWD0.KY0IWDTA[1] = KY0IWB1.KY0IWSUM;

  TA5REC.TA5FNCCD = "U";

  call "TA0050" (KY0IWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1NA";
    CYWREC.CYWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** now obtain the corresponding summary record ****/

  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5TSQIX = KY0IWD0.KY0IWSPG[1];
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1NA";
    CYWREC.CYWMSGNO = 0001;
    return;
  end

   /* *** loop thru summary arrays until correct one is found ****/

  CYWIDX01 = 1;

  while (CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0IWS0.KY0IWDPG[CYWIDX01] == CYWREC.CYWDETIX)
      KY0IWB1.KY0IWSUM = KY0IWS0.KY0IWDTA[CYWIDX01];
      KY0IWB1.KY0IWREC = KY0IM110.KY0IMREC[1];

      /* *** now update summary tsq with new value ****/

      KY0IWS0.KY0IWDTA[CYWIDX01] = KY0IWB1.KY0IWSUM;

      TA5REC.TA5FNCCD = "U";

      call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1NA";
        CYWREC.CYWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end

    end
    CYWIDX01 = CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1N


// tsq update w/last pfkey=enter
Function KY0IS1O()

  CYWIDX01 = 1;

  while (CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0IM110.KY0IMREC[CYWIDX01] != KY0IW01.KY0IWREC[CYWIDX01])

      /* *** save it off for next time through ****/
      KY0IW01.KY0IWREC[CYWIDX01] = KY0IM110.KY0IMREC[CYWIDX01];

      /* *** obtain summary tsq record and update the ****/
      /* *** reconcilliation field.                  ****/

      TA5REC.TA5APPID = CYWREC.CYWSUMQU;
      TA5REC.TA5TSQIX = CYWREC.CYWSUMIX;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1OA";
        CYWREC.CYWMSGNO = 0001;
        return;
      end

      KY0IWB1.KY0IWSUM = KY0IWS0.KY0IWDTA[CYWIDX01];
      KY0IWB1.KY0IWREC = KY0IM110.KY0IMREC[CYWIDX01];

      KY0IWS0.KY0IWDTA[CYWIDX01] = KY0IWB1.KY0IWSUM;

      TA5REC.TA5FNCCD = "U";

      call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1OB";
        CYWREC.CYWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end

      /* *** now obtain the corresponding detail record ****/

      TA5REC.TA5APPID = CYWREC.CYWDETQU;
      TA5REC.TA5TSQIX = KY0IWS0.KY0IWDPG[CYWIDX01];
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (KY0IWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1OC";
        CYWREC.CYWMSGNO = 0001;
        return;
      end

      KY0IWB1.KY0IWSUM = KY0IWD0.KY0IWDTA[1];
      KY0IWB1.KY0IWREC = KY0IM110.KY0IMREC[CYWIDX01];

      /* *** now update detail tsq with new value ****/

      KY0IWD0.KY0IWDTA[1] = KY0IWB1.KY0IWSUM;

      TA5REC.TA5FNCCD = "U";

      call "TA0050" (KY0IWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1OD";
        CYWREC.CYWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end
    end
    CYWIDX01 = CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1O


// obtain 1st summary record
Function KY0IS1P()

  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1PA";
    CYWREC.CYWMSGNO = 0001;
    return;
  end

  CYWREC.CYWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1P


// add adjustment record to db
Function KY0IS1R()

  TA1REC.TA1LOCAT[2] = "KY0IS1R ";

  CY4REC.XWHCD = KY0IM110.XWHCD;
  CY4REC.IN5TRDCD = KY0IM110.IN5TRDCD;
  CY4REC.IN5TRDOC = KY0IM110.IN5TRDOC;
  CY4REC.IN5TRSUB = KY0IM110.IN5TRSUB;
  CY4REC.IN5TRPRT = KY0IW01.KY0IWPRT;

  KY0IWB1.KY0IWSUM = KY0IWS0.KY0IWDTA[CYWIDX02];

  if (KY0IWB1.KY0IWREC != " ") /* w.o. chosen for reconcile??*/
                                  /* - then add adj recs*/
    TA5REC.TA5APPID = CYWREC.CYWDETQU;
    TA5REC.TA5TSQIX = KY0IWS0.KY0IWDPG[CYWIDX02];
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (KY0IWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1RA";
      CYWREC.CYWMSGNO = 0001;
      return;
    end

    KY0IS1T(); /* add adj rec for each size in w.o*/

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1R


// obtain valid size descs.
Function KY0IS1S()
   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creatation                               ****/
   /* *** note: use compressed mode to detect blank size and  ****/
   /* ***       reduce loop searches                          ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0IS1S ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

  set SYPREC empty;

  SYPREC.XGPCD = KY0IM110.XGPCD;
  SYPREC.SY1STNBR = KY0IM110.SY1STNBR;
  SYPREC.SY2CLRID = KY0IM110.SY2CLRID;
  SYPREC.XDMCD = KY0IM110.XDMCD;
  SYPREC.XQACD = "**";

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  KY0IS-SIZE-CONVERT(); /* <=== get size xlations*/

  if (SYPREC.SYPRC <= 5)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == +10)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1SA";
      CYWREC.CYWMSGNO = 0057; /* <--- not on db msg*/
      return;
    end
    if (SYPREC.SYPRC == +09)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1SB";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.CYWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    CYWREC.XXXLOCID = "S1SC";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1S


// add adjustment record by size
Function KY0IS1T()

  TA1REC.TA1LOCAT[2] = "KY0IS1W ";

  CYWIDX05 = 1; /* work index to walk thru dets in*/
                                   /* buffer*/
  while (CYWIDX05 < 12) /* CYWREC.CYWDETLX;*/

    if (KY0IWD0.KY0IWRTY[CYWIDX05] == "D") /* detail rec*/
      KY0IWL1.KY0IWLIN = KY0IWD0.KY0IWDTA[CYWIDX05];
                                   /* move to w/s*/
      CYWIDX06 = 1; /* work index to fill the detail queue*/
      while (CYWIDX06 <= 4) /* 4 sizes per detail*/
        if (KY0IWL1.SY4IDDSC[CYWIDX06] > " ") /* size is there-*/
   /* create an adj rec*/
          CY4REC.SY5SZID = KY0IWL1.SY5SZID[CYWIDX06]; /* size to adj rec*/
          CY4REC.CY-CNT-ADJ-QTY = KY0IWL1.SL9WOQTY[CYWIDX06]; /* qty to adj rec*/

          if (KY0IWB1.KY0IWWIO == "IN ")
            CY4REC.YSACD = "II";
          else
            CY4REC.YSACD = "IO";
          end
          CY4REC.SL2CASE = KY0IWB1.SL2CASE;
          CY4REC.CY4ADJNO = KY0IWB1.SL8WONBR;

          XSCY4A0(); /* add the adjustment record to db*/

          if (SQLCA.VAGen_SQLCODE == 0)
            /* ** next sentence ***/
          else
            CYWREC.CYWERRSW = "Y";
            if (SQLCA.VAGen_SQLCODE == -911)
              CYWREC.CYWSEXSW = "Y";
              CYWREC.XXXLOCID = "S1WA";
              CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
              return;
            end
            CYWREC.XXXLOCID = "S1WB";
            CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
            return;
          end
        else
          CYWIDX06 = 4; /* no more sizes for this w.o.*/
          CYWIDX05 = 12; /* you're finished*/
        end
        CYWIDX06 = CYWIDX06 + 1; /* next size within detail*/
      end /* end 1st 'while'*/
    end
    CYWIDX05 = CYWIDX05 + 1; /* next detail*/
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0IS1T


// key missing input edits
Function KY0ISA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0IM110.IN5TRSUB > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0IM110.IN5TRSUB cursor, bold;
  end

  if (KY0IM110.IN5TRDOC > 0)
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1B";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0IM110.IN5TRDOC cursor, bold;
  end

  if (KY0IM110.IN5TRDCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1C";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0IM110.IN5TRDCD cursor, bold;
  end

  if (KY0IM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1D";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0IM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0ISA1


// same key edits
Function KY0ISB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0IM110.XWHCD != KY0IW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0IM110.IN5TRDCD != KY0IW01.IN5TRDCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0IM110.IN5TRDOC != KY0IW01.IN5TRDOC)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0IM110.IN5TRSUB != KY0IW01.IN5TRSUB)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  if (KY0IM110.SL2CASE != KY0IW01.SL2CASE)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0ISB1


// key obtain table data
Function KY0ISE1()


   /* ************************************************************/
   /* *** make one time table accesses for data               ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed here                  ****/
   /* ************************************************************/

   /* *** validate warehouse ****/

  if (KY0IM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0IM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      KY0IM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SE1A";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0IM110.XWHCD cursor, bold;
      return; /* <--- exception*/
    end
  else
    KY0IM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SE1B";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0IM110.XWHCD cursor, bold;
    return; /* <--- exception*/
  end

  KY0IS1A(); /* obtain cc doc hdr rec & move fields to map*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0IS1B(); /* obtain cc doc itm rec & move prod*/
                                   /* fields to map*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0IS1E(); /* obtain style & color descriptions*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0IS1S(); /* obtain valid size descriptions*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0ISE1


// userarea entry processing
Function KY0ISE9()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the CYXREC working storage layout                ****/
   /* *** otherwise, setup map default values                 ****/
   /* *** note: make sure data is from related map            ****/
   /* *** note: do not move blanks to causera                 ****/
   /* ************************************************************/

  CYXREC.CYXUSERA = COMMAREA.CAUSERA;

  if (CYXREC.CYXFRMAP == "KY0JM110 "
   || CYXREC.CYXFRMAP == "KY0IM110 "
   || CYXREC.CYXFRMAP == "KY0GM110 "
   || CYXREC.CYXFRMAP == "KY0HM110 "
   || CYXREC.CYXFRMAP == "KY0KM110 "
   || CYXREC.CYXFRMAP == "KY0LM110 ")
    KY0IM110.IN5TRDCD = CYXREC.IN5TRDCD;
    KY0IM110.IN5TRDOC = CYXREC.IN5TRDOC;
    KY0IM110.IN5TRSUB = CYXREC.IN5TRSUB;
  end

  if (CYXREC.CYXFRMAP == "KY0JM110 "
   || CYXREC.CYXFRMAP == "KY0IM110 ")
    KY0IM110.SL2CASE = CYXREC.SL2CASE;
  else
    KY0IM110.SL2CASE = "********";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0ISE9


// save current key value(s)
Function KY0ISF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* *** and in cyxrec to pass to other appl.s               ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0IM110.XWHCD;

  KY0IW01.XWHCD = KY0IM110.XWHCD;

  KY0ISX9(); /* <=== userarea exit processing*/

  KY0IW01.IN5TRDCD = KY0IM110.IN5TRDCD;
  KY0IW01.IN5TRDOC = KY0IM110.IN5TRDOC;
  KY0IW01.IN5TRSUB = KY0IM110.IN5TRSUB;
  KY0IW01.SL2CASE = KY0IM110.SL2CASE;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0ISF1


// setup map key fields
Function KY0ISG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  KY0IM110.XWHCD = KY0IW01.XWHCD;
  KY0IM110.IN5TRDCD = KY0IW01.IN5TRDCD;
  KY0IM110.IN5TRDOC = KY0IW01.IN5TRDOC;
  KY0IM110.IN5TRSUB = KY0IW01.IN5TRSUB;
  KY0IM110.SL2CASE = KY0IW01.SL2CASE;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0ISG1


// ENTER processing
Function KY0ISH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0ISA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    KY0ISF1(); /* <=== save current key value(s)*/
    KY0IST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** perform same key edits                              ****/
   /* ************************************************************/

  KY0ISB1(); /* <=== missing input edits*/

  if (CYWREC.CYWSKYSW == "Y")
    if (converseVar.eventKey is enter)
      if (CYWREC.CYWLASPF == "E")
        CYWIDX03 = 1;
        while (CYWIDX03 <= CYWREC.CYWLINPP)
          if (KY0IM110.XMCYMSEL[CYWIDX03] != " ") /* if a selection made*/
            KY0IS1O(); /* tsq update w/last pfkey='enter'*/
            KY0IS1M(); /* find correct detail rec*/
            CYWREC.CYWLASPF = "6";
            KY0ISP1(); /* display detail screen*/
            return;
          end
          CYWIDX03 = CYWIDX03 + 1;
        end
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SH1A";
        CYWREC.CYWMSGNO = 0080; /* press pf12 to update*/
      else
        KY0IS1N(); /* tsq update w/last pfkey='pf6'*/
        KY0IS1L(); /* find correct summary rec*/
        KY0ISO1(); /* display summary screen*/
        CYWREC.CYWLASPF = "E";
      end
      return;
    else
      if (CYWREC.CYWLASPF == "6")
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SH1B";
        CYWREC.CYWMSGNO = 0080; /* press pf12 to update*/
      else
        KY0IS1O(); /* tsq update w/last pfkey='enter'*/
        KY0IS1M(); /* find correct detail rec*/
        CYWREC.CYWLASPF = "6";
        KY0ISP1(); /* display detail screen*/
      end
      return;
    end
  end

   /* ************************************************************/
   /* *** key changed, selection not allowed                  ****/
   /* ************************************************************/

  CYWIDX03 = 1;
  while (CYWIDX03 <= CYWREC.CYWLINPP)
    if (KY0IM110.XMCYMSEL[CYWIDX03] > " ") /* <--- selection made*/
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SH1C";
      CYWREC.CYWMSGNO = 0084; /* <--- selection invalid msg*/
      set KY0IM110.XMCYMSEL[CYWIDX03] cursor, bold;
      return;
    end
    CYWIDX03 = CYWIDX03 + 1;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  KY0ISE1(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0ISF1(); /* <=== save current key value(s)*/
    KY0IST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** build summary and detail tsqs                       ****/
   /* ************************************************************/

  KY0ISS1(); /* build tsqs*/

  if (CYWREC.CYWERRSW == "Y")
    KY0ISF1(); /* <=== save current key value(s)*/
    KY0IST1(); /* <=== reset screen (empty)*/
    return;
  end

  if (CYWREC.CYWFTMSW == "N")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SH1D";
    CYWREC.CYWMSGNO = 0082;
    set KY0IM110.IN5TRDCD cursor;
    set KY0IW01 empty;
    return;
  end

   /* ************************************************************/
   /* *** no errors: move data to map for display             ****/
   /* ************************************************************/

  KY0IS1P(); /* obtain first summary record*/
  KY0ISO1(); /* display summary screen*/
  CYWREC.CYWLASPF = "E";
   /* *** save the current reconciled fields ****/
  CYWIDX01 = 1;
  while (CYWIDX01 <= CYWREC.CYWLINPP)
    KY0IW01.KY0IWREC[CYWIDX01] = KY0IM110.KY0IMREC[CYWIDX01];
    CYWIDX01 = CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  KY0ISF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0ISH1


// pf7 processing
Function KY0ISJ1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  KY0ISA1(); /* <=== check for missing data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0ISB1(); /* <=== same key edits*/

  if (CYWREC.CYWSKYSW == "N")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SJ1A";
    CYWREC.CYWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (CYWREC.CYWLASPF == "E")
    if (CYWREC.CYWSUMIX == 1)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SJ1B";
      CYWREC.CYWMSGNO = 0007; /* <--- top of data*/
      return;
    end

    KY0IS1O(); /* tsq update w/last pfkey='enter'*/

    CYWREC.CYWSUMIX = CYWREC.CYWSUMIX - 1;
    TA5REC.TA5TSQIX = CYWREC.CYWSUMIX;
    TA5REC.TA5APPID = CYWREC.CYWSUMQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SJ1C";
      CYWREC.CYWMSGNO = 0001;
      return;
    end

    KY0ISO1(); /* <=== setup sum scrn*/

  else
    if (CYWREC.CYWDETIX == 1)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SJ1D";
      CYWREC.CYWMSGNO = 0007; /* <--- top of data*/
      return;
    end

    KY0IS1N(); /* tsq update w/last pfkey='pf6'*/

    CYWREC.CYWDETIX = CYWREC.CYWDETIX - 1;
    TA5REC.TA5TSQIX = CYWREC.CYWDETIX;
    TA5REC.TA5APPID = CYWREC.CYWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (KY0IWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SJ1E";
      CYWREC.CYWMSGNO = 0001;
      return;
    end

    KY0ISP1(); /* <=== setup det scrn*/

  end

  if (CYWREC.CYWERRSW == "N")
    CYWREC.XXXLOCID = "SJ1F";
    CYWREC.CYWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0ISJ1


// pf8 processing
Function KY0ISK1()

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  KY0ISA1(); /* <=== check for missing data*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0ISB1(); /* <=== same key edits*/

  if (CYWREC.CYWSKYSW == "N")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SK1A";
    CYWREC.CYWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** increment the next relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (CYWREC.CYWLASPF == "E")
    if (CYWREC.CYWSUMIX == CYWREC.CYWSMAXR)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SK1B";
      CYWREC.CYWMSGNO = 0008; /* <--- bot of data*/
      return;
    end

    KY0IS1O(); /* tsq update w/last pfkey='enter'*/

    CYWREC.CYWSUMIX = CYWREC.CYWSUMIX + 1;
    TA5REC.TA5TSQIX = CYWREC.CYWSUMIX;
    TA5REC.TA5APPID = CYWREC.CYWSUMQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SJ1C";
      CYWREC.CYWMSGNO = 0001;
      return;
    end

    KY0ISO1(); /* <=== setup sum scrn*/

  else
    if (CYWREC.CYWDETIX == CYWREC.CYWDMAXR)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SK1D";
      CYWREC.CYWMSGNO = 0008; /* <--- bot of data*/
      return;
    end

    KY0IS1N(); /* tsq update w/last pfkey='pf6'*/

    CYWREC.CYWDETIX = CYWREC.CYWDETIX + 1;
    TA5REC.TA5TSQIX = CYWREC.CYWDETIX;
    TA5REC.TA5APPID = CYWREC.CYWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (KY0IWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SK1E";
      CYWREC.CYWMSGNO = 0001;
      return;
    end

    KY0ISP1(); /* <=== setup det scrn*/

  end

  if (CYWREC.CYWERRSW == "N")
    CYWREC.XXXLOCID = "SK1F";
    CYWREC.CYWMSGNO = 0013;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0ISK1


// setup blank screen
Function KY0ISN1()

   /* ************************************************************/
   /* *** display a blank line until the page is full         ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    set KY0IM110.XMCYMSEL[CYWIDX01] skip, invisible;
    set KY0IM110.KY0IMREC[CYWIDX01] skip, invisible;
    KY0I129(); /* <=== disp blank line*/
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0ISN1


// display summary screen
Function KY0ISO1()


   /* ************************************************************/
   /* *** This sets up the summary screen using the data      ****/
   /* *** stored in the tsq.                                  ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;

  set KY0IM110.XMCYMSEL[CYWIDX01] cursor;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0IWS0.KY0IWRTY[CYWIDX01] == "S")
      set KY0IM110.XMCYMSEL[CYWIDX01] initialAttributes;
      set KY0IM110.KY0IMREC[CYWIDX01] initialAttributes;
      /* *** format summary line ****/
      KY0IWB1.KY0IWSUM = KY0IWS0.KY0IWDTA[CYWIDX01];
      KY0IW01.KY0IWREC[CYWIDX01] = KY0IWB1.KY0IWREC;
      KY0I121(); /* <=== disp left sum line*/
    else
      KY0IW01.KY0IWREC[CYWIDX01] = " ";
      KY0IM110.KY0IMREC[CYWIDX01] = " ";
      set KY0IM110.XMCYMSEL[CYWIDX01] skip, invisible;
      set KY0IM110.KY0IMREC[CYWIDX01] skip, invisible;
      KY0I129(); /* <=== disp blank line*/
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "Y")
    KY0IST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0ISO1


// display detail screen
Function KY0ISP1()

   /* ************************************************************/
   /* *** This sets up the detail screen using the data       ****/
   /* *** stored in the tsq.                                  ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;

  while (CYWREC.CYWIDX01 <= CYWREC.CYWLINPP)
    if (KY0IWD0.KY0IWRTY[CYWIDX01] == "Z")
      set KY0IM110.XMCYMSEL[CYWIDX01] skip, invisible;
      set KY0IM110.KY0IMREC[CYWIDX01] skip, invisible;
      KY0I125(); /* <=== disp size title line*/
    else
      if (KY0IWD0.KY0IWRTY[CYWIDX01] == "D")
        set KY0IM110.XMCYMSEL[CYWIDX01] skip, invisible;
        set KY0IM110.KY0IMREC[CYWIDX01] skip, invisible;
        KY0IWL1.KY0IWLIN = KY0IWD0.KY0IWDTA[CYWIDX01];
        KY0I122(); /* <=== disp left det line*/
      else
        if (KY0IWD0.KY0IWRTY[CYWIDX01] == "S")
          set KY0IM110.XMCYMSEL[CYWIDX01] skip, invisible;
          set KY0IM110.KY0IMREC[CYWIDX01] initialAttributes;
          set KY0IM110.KY0IMREC[CYWIDX01] cursor;
          /* *** format summary line ****/
          KY0IWB1.KY0IWSUM = KY0IWD0.KY0IWDTA[CYWIDX01];
          KY0I121(); /* <=== disp left sum line*/
        else
          if (KY0IWD0.KY0IWRTY[CYWIDX01] == "B")
            set KY0IM110.XMCYMSEL[CYWIDX01] skip, invisible;
            set KY0IM110.KY0IMREC[CYWIDX01] skip, invisible;
            KY0I129(); /* <=== disp blank line*/
          else
            CYWREC.CYWERRSW = "Y";
            CYWREC.XXXLOCID = "SP1A";
            CYWREC.CYWMSGNO = 0001;
          end
        end
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

  KY0IW01.KY0IWREC[1] = KY0IM110.KY0IMREC[1]; /* save recon field*/

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "Y")
    KY0IST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0ISP1


// setup sum & det queues
Function KY0ISS1()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* *** note: first time switch checked in sh1              ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "KY0ISS1 ";
  TA1REC.TA1MAP = CYWREC.CYWTAMAP;

   /* *** purge existing tsqs ****/

  XSCYSPQ(); /* perform size translation call*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* *** initialize fields ****/
  KY0IW01.KY0IWDPA = 1;
  KY0IW01.KY0IWSPA = 1;
  CYWREC.CYWSUMLX = 0;
  CYWREC.CYWFTMSW = "N"; /* set to no recs found*/

  KY0IS1F(); /* process incomplete 'in' adjustments*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0IS1G(); /* process incomplete 'out' adjustments*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0IS1J(); /* process incomplete w.o.'s going out of the location*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

  KY0IS1K(); /* process incomplete w.o.'s coming into the location*/

   /* *** fill the last summary page with blank lines ****/

  while (CYWREC.CYWSUMLX < CYWREC.CYWLINPP)
    CYWSUMLX = CYWSUMLX + 1;
    KY0IWS0.KY0IWDPG[CYWSUMLX] = KY0IW01.KY0IWDPA;
    KY0IWS0.KY0IWRTY[CYWSUMLX] = "B";
  end

  TA5REC.TA5APPID = CYWREC.CYWSUMQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SS1A";
    CYWREC.CYWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

  CYWREC.CYWDMAXR = KY0IW01.KY0IWDPA - 1; /* since it is always 1 ahead*/
  CYWREC.CYWSMAXR = KY0IW01.KY0IWSPA; /* max nbr of summary pages*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0ISS1


// reset screen (empty)
Function KY0IST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0IM110 empty; /* resets entire screen*/

  KY0ISG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0IM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0IM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0IM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0IM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0IW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0IST1


// update database
Function KY0ISU1()


  TA1REC.TA1LOCAT[2] = "KY0ISU1 ";

   /* ************************************************************/
   /* *** read each summary tsq record and add adjustment recs****/
   /* ************************************************************/

  CYWIDX01 = 1;

  while (CYWIDX01 <= CYWREC.CYWSMAXR)
    TA5REC.TA5APPID = CYWREC.CYWSUMQU;
    TA5REC.TA5TSQIX = CYWIDX01;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (KY0IWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1UA";
      CYWREC.CYWMSGNO = 0001;
      return;
    end
    /* ************************************************************/
    /* *** delete 'io' adjustments database records            ****/
    /* ************************************************************/

    CYWIDX02 = 1;

    while (CYWIDX02 <= CYWREC.CYWLINPP)

      set CY4REC empty;
      KY0IWB1.KY0IWSUM = KY0IWS0.KY0IWDTA[CYWIDX02];

      if (KY0IWS0.KY0IWRTY[CYWIDX02] == "S") /**/

        CY4REC.CY4ADJNO = KY0IWB1.SL8WONBR;
        CY4REC.XWHCD = KY0IM110.XWHCD;
        CY4REC.YSACD = "IO";
        CY4REC.IN5TRDCD = KY0IM110.IN5TRDCD;
        CY4REC.IN5TRDOC = KY0IM110.IN5TRDOC;
        CY4REC.IN5TRSUB = KY0IM110.IN5TRSUB;
        KY0IW01.KY0IWDOC = KY0IM110.IN5TRDOC;
        CY4REC.IN5TRPRT = KY0IW01.KY0IWPRT;

        XSCY4D1();

        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
        else
          CYWREC.CYWERRSW = "Y";
          if (SQLCA.VAGen_SQLCODE == -911)
            CYWREC.CYWSEXSW = "Y";
            CYWREC.XXXLOCID = "SU1A";
            CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          CYWREC.XXXLOCID = "SU1B";
          CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end

    /* ************************************************************/
    /* *** delete 'ii' adjustments database records            ****/
    /* ************************************************************/

        set CY4REC empty;

        CY4REC.XWHCD = KY0IM110.XWHCD;
        CY4REC.YSACD = "II";
        CY4REC.IN5TRDCD = KY0IM110.IN5TRDCD;
        CY4REC.IN5TRDOC = KY0IM110.IN5TRDOC;
        CY4REC.IN5TRSUB = KY0IM110.IN5TRSUB;
        CY4REC.CY4ADJNO = KY0IWB1.SL8WONBR;

        XSCY4D1();

        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
        else
          CYWREC.CYWERRSW = "Y";
          if (SQLCA.VAGen_SQLCODE == -911)
            CYWREC.CYWSEXSW = "Y";
            CYWREC.XXXLOCID = "SU1A";
            CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          CYWREC.XXXLOCID = "SU1B";
          CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
          return;

        end

        KY0IS1R(); /* add adjustment record*/

      end

      CYWIDX02 = CYWIDX02 + 1;
    end

    CYWIDX01 = CYWIDX01 + 1;
  end

end // end KY0ISU1


// userarea exit processing
Function KY0ISX9()


   /* ************************************************************/
   /* *** move this map's name and key flds to cyxrec and     ****/
   /* *** then move cyxrec to the commarea' user area fld     ****/
   /* ************************************************************/

  CYXREC.CYXFRMAP = "KY0IM110";

  CYXREC.IN5TRDCD = KY0IM110.IN5TRDCD;
  CYXREC.IN5TRDOC = KY0IM110.IN5TRDOC;
  CYXREC.IN5TRSUB = KY0IM110.IN5TRSUB;
  CYXREC.SL2CASE = KY0IM110.SL2CASE;

  COMMAREA.CAUSERA = CYXREC.CYXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0ISX9


//*** RECORD=KY0IW01 ****
// ************************************************************
// 
//           CYCLE COUNT DOCUMENT REQUEST BY PRODUCT
//           =======================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-06-88  G. Amen      created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0IW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 IN5TRDCD IN5TRDCD ; 
  10 IN5TRDOC IN5TRDOC ; 
  10 IN5TRSUB IN5TRSUB ; 
  10 SL2CASE SL2CASE ; 
  10 KY0IWREC KY0IWREC [12] ; 
  10 KY0IWSRC KY0IWSRC [12] ; 
  10 KY0IWSZ1 KY0IWSZ1 ; 
  10 KY0IWDPA KY0IWDPA ; 
  10 KY0IWSPA KY0IWSPA ; 
  10 KY0IWDOC KY0IWDOC ; 
    15 * char(7) ; 
    15 KY0IWPRT KY0IWPRT ; 
end // end KY0IW01


Record KY0IWB1 type basicRecord
  10 KY0IWSUM KY0IWSUM ; 
    15 KY0IWREC KY0IWREC ; 
    15 KY0IWWIO KY0IWWIO ; 
    15 SL2CASE SL2CASE ; 
    15 SL8WONBR SL8WONBR ; 
    15 KY0IWSQY KY0IWSQY ; 
    15 ZZZSDT ZZZSDT ; 
    15 KY0IM-SL-WO-CRT-USER KY0IM-SL-WO-CRT-USER ; 
    15 KY0IM-YWS-WO-STAT-CD KY0IM-YWS-WO-STAT-CD ; 
    15 KY0IM-PK-PICK-SCHED-NBR KY0IM-PK-PICK-SCHED-NBR ; 
  10 KY0IWDET KY0IWDET [10] ; 
end // end KY0IWB1


Record KY0IWD0 type basicRecord
  10 KY0IWLTH KY0IWLTH ; 
  10 * char(71) [12] ; 
    15 KY0IWRTY KY0IWRTY ; 
    15 KY0IWSPG KY0IWSPG ; 
    15 KY0IWDTA KY0IWDTA ; 
end // end KY0IWD0


Record KY0IWL1 type basicRecord
  10 KY0IWLIN KY0IWLIN ; 
    15 SY4IDDSC SY4IDDSC [4] ; 
    15 SL9WOQTY SL9WOQTY [4] ; 
    15 SY5SZID SY5SZID [4] ; 
    15 * char(24) ; 
end // end KY0IWL1


Record KY0IWS0 type basicRecord
  10 KY0IWLTH KY0IWLTH ; 
  10 * char(71) [12] ; 
    15 KY0IWRTY KY0IWRTY ; 
    15 KY0IWDPG KY0IWDPG ; 
    15 KY0IWDTA KY0IWDTA ; 
end // end KY0IWS0


// schedule number
DataItem KY0IM-PK-PICK-SCHED-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// wo creator
DataItem KY0IM-SL-WO-CRT-USER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// wo status
DataItem KY0IM-YWS-WO-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// detail data
DataItem KY0IWDET char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// work doc nbr
DataItem KY0IWDOC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// detail page
DataItem KY0IWDPA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// detail page
DataItem KY0IWDPG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// data area
DataItem KY0IWDTA char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// detail line
DataItem KY0IWLIN char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// data length
DataItem KY0IWLTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// work part field of doc nbr
DataItem KY0IWPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// work reconcile field
DataItem KY0IWREC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// record type
DataItem KY0IWRTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// summary page
DataItem KY0IWSPA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// summary page
DataItem KY0IWSPG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// work order assigned quantity
DataItem KY0IWSQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// save reconcile field
DataItem KY0IWSRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// summary data
DataItem KY0IWSUM char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// work size field
DataItem KY0IWSZ1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// summary i/o field
DataItem KY0IWWIO char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


