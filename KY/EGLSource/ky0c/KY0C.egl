package ky0c;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=KY0C ****
// ************************************************************
// 
//                 CYCLE COUNT
//           DOCUMENT REQUEST BY PRODUCT
//           ===========================
// 
// ************************************************************
// 
// OVERVIEW: This application is used to request a document for
//           one to fifteen products.
// 
//           notes:
//             1) during the initialization of the appl, the
//                existing products are moved to the map using
//                the warehouse as the key and all remaining
//                fields are filled in with default data.  if
//                the warehouse is not passed to the appl then
//                the cursor will be placed at the warehouse
//                field.
//             2) After the data/defaults are displayed on the
//                map, the user will be allowed to make their
//                changes.  When they hit enter, all fields
//                will be verified in their corresponding
//                tables and the style will be verified on the
//                dcorp.vcolor02 table.  When their are no data
//                entry errors the existing data in the table,
//                if any, will be deleted and the new data, if
//                any, will be inserted into the data base.
//             3) The current data on the map will remain after
//                enter is pressed and the user will be allowed
//                to view the updates just performed, make
//                changes and update again or exit via pfkey or
//                fastpath.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  01/20/88  G. Amen     Created
// 00  03/13/89  jwood       added noncsp option to calls
// 00  03/13/89  jwood       added xssegtr logic
// 00  04/04/90  kande1      replace xsdtbl with pc2rec and
//                           io3340
// 00  07/30/91  scleme      convert CY0C to KY0C
// 00  01/15/92  jwood       changes for initialization
// 00  12/01/92  bgilde      changes for cycle count.
// 00  12/10/92  jcampb      change to dpick from dprod.
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// IO2450    ACCESS TO DCYCLE.VRQSY001
// IO0560    ACCESS TO DPROD.VCOLOR02
// IO3340    ACCESS TO DPRODc.vprdcu01
// 
// ************************************************************
// ************************************************************
// *********************
Program KY0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CY6REC CY6REC; // record
  CYVREC CYVREC; // record
  CYWREC CYWREC; // record
  CYXREC CYXREC; // record
  ERRSQLCA ERRSQLCA; // record
  KY0CW01 KY0CW01; // record
  PC2REC PC2REC; // record
  PKNREC PKNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSLTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use KY0CM.KY0CM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KY0C110: KY0C110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0C120; /* <=== converse map*/
    else
      CYWREC.XXXLOCID = "140 "; /* error id location id*/
      goto KY0C140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    KY0C120: KY0C120();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      goto KY0C120; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0C110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf14)
      goto KY0C110; /* <=== re-start this appl*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      goto KY0C120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "140 ";
      goto KY0C140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0C120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    KY0C140: KY0C140();


     /* ************************************************************/
     /* *** if either pa1 or pa3 has been pressed:              ****/
     /* *** use the 'set map-name page' (only) to make sure     ****/
     /* *** the screen shows the original data since any input  ****/
     /* *** will not have been transmitted                      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      CYWREC.CYWMSGNO = 0;
      goto KY0C140; /* <=== re-fresh this screen*/
    end

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto KY0C110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (CYWREC.CYWERRSW == "Y")
      if (CYWREC.CYWSKYSW == "N")
        goto KY0C120; /* <=== re-display key screen*/
      end
      goto KY0C140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the key scrn    ****/
     /* ************************************************************/

    if (CYWREC.CYWSKYSW == "N")
      goto KY0C140; /* <=== re-display key screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* *** note: not going to 120 re: able to re-edit          ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      CYWREC.XXXLOCID = "140 ";
      goto KY0C140; /* <=== setup for new input*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140Z";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    goto KY0C140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end KY0C

// one time initializations
Function KY0C110()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** sset segmented transaction id                       ****/
   /* ************************************************************/

  XSSEGTR(); /* set segmented transaction id*/

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0CM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CYWREC empty; /* common working storage fields*/
  set CYVREC empty; /**/
  set CYXREC empty; /**/
  set CY6REC empty; /* cyc cnt control record*/
  set KY0CW01 empty; /* appl. working storage area*/
  set PC2REC empty; /**/
  set PKNREC empty; /* style/color record*/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set TA5REC empty; /**/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  01/14/88  G. Amen       created                ****/
   /* ************************************************************/

  CYWREC.XXXRVNBR = "00";

  CYWREC.XXXMAPNM = "KY0CM110";
  CYWREC.XXXTITLE = "DOCUMENT REQUEST BY PRODUCT";

  XSX2CDT(); /* get current ccyymmdd*/

  CYWREC.XXXAPPID = "KY0C"; /* error id appl. name*/
  CYWREC.CYWTALOC = "KY0C110 "; /* TA0020 exec location(2)*/
  CYWREC.CYWTAMAP = "KY0CM110"; /* TA0020 current map name*/

  CYWREC.CYWERRSW = "N"; /* error switch*/
  CYWREC.CYWSEXSW = "N"; /* special exit switch*/
  CYWREC.CYWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  KY0CM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0CM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0CM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0CM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup auto commit & sql error handling              ****/
   /* ************************************************************/

  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  KY0CSE9(); /* <=== userarea entry processing*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** use commarea warehouse, if not blank                ****/
   /* *** note: set cursor to whse if blank                   ****/
   /* ************************************************************/

  if (COMMAREA.XWHCD > " ")
    KY0CM110.XWHCD = COMMAREA.XWHCD;
  else
    set KY0CM110.XWHCD cursor;
  end

   /* ************************************************************/
   /* *** attempt to obtain first time table data             ****/
   /* ************************************************************/

  KY0CSH1();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end KY0C110

// converse & control key entry
Function KY0C120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  CYWIDX01 = 1;

  while (CYWIDX01 <= 15)
    set KY0CM110.XGPCD[CYWIDX01] skip, invisible;
    set KY0CM110.SY1STNBR[CYWIDX01] skip, invisible;
    set KY0CM110.SY2CLRID[CYWIDX01] skip, invisible;
    set KY0CM110.XDMCD[CYWIDX01] skip, invisible;
    set KY0CM110.XQACD[CYWIDX01] skip, invisible;
    set KY0CM110.XSDCD[CYWIDX01] skip, invisible;
    set KY0CM110.XSLCD[CYWIDX01] skip, invisible;
    set KY0CM110.XPGCD[CYWIDX01] skip, invisible;
    set KY0CM110.XUMCD[CYWIDX01] skip, invisible;
    set KY0CM110.XOWCD[CYWIDX01] skip, invisible;

    CYWIDX01 = CYWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** if a severe error has occurred (msgno=0001),        ****/
   /* *** execute the set mapname page to refresh map         ****/
   /* *** in order to prevent locking up terminal w/ map error****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 0001)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0CM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0CM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120A";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0A";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120B";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120C";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to cycle count main menu                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120D";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0CM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0CM110.CATOAP;
    COMMAREA.CAITEM = KY0CM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120E";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0CM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWERRSW = "N";
  KY0CM110.VAGen_EZEMSG = " ";
  set KY0CM110.CATOAP initialAttributes;
  set KY0CM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set KY0CM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= 15)
    set KY0CM110.XGPCD[CYWIDX01] initialAttributes;
    set KY0CM110.SY1STNBR[CYWIDX01] initialAttributes;
    set KY0CM110.SY2CLRID[CYWIDX01] initialAttributes;
    set KY0CM110.XDMCD[CYWIDX01] initialAttributes;
    set KY0CM110.XQACD[CYWIDX01] initialAttributes;
    set KY0CM110.XSDCD[CYWIDX01] initialAttributes;
    set KY0CM110.XSLCD[CYWIDX01] initialAttributes;
    set KY0CM110.XPGCD[CYWIDX01] initialAttributes;
    set KY0CM110.XUMCD[CYWIDX01] initialAttributes;
    set KY0CM110.XOWCD[CYWIDX01] initialAttributes;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end

   /* reset/unlock data fld attributes*/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0CM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0CM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0CSH1(); /* <=== verify data entered/obtain data*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0B";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "120G";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf14)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "120H";
  CYWREC.CYWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0C120

// converse & control data entry
Function KY0C140()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (CYWREC.CYWERRSW == "N")
    if (CYWREC.CYWIDX02 <= 15)
      set KY0CM110.SY1STNBR[CYWIDX02] cursor;
    end
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (CYWREC.CYWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CYWREC.CYWMSGNO);
  end
  KY0CM110.XXXERRID = CYWREC.XXXERRID;


  converse KY0CM110 ;


   /* ************************************************************/
   /* *** if either PA1 or PA3 has been pressed, go to flow   ****/
   /* *** if PA2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140A";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KY0A";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140B";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140C";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** IF PF5: GO TO CYCLE COUNT MAIN MENU                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KY0M";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140D";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (KY0CM110.CATOAP > " ")
    COMMAREA.CATOAP = KY0CM110.CATOAP;
    COMMAREA.CAITEM = KY0CM110.CAITEM;
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140E";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set KY0CM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  CYWREC.CYWMSGNO = 0;
  CYWREC.CYWSEXSW = "N";
  CYWREC.CYWERRSW = "N";
  KY0CM110.VAGen_EZEMSG = " ";
  CYWREC.XXXLOCID = "140 ";
  set KY0CM110.CATOAP initialAttributes;
  set KY0CM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set KY0CM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s depending on function   ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= 15)
    set KY0CM110.XGPCD[CYWIDX01] initialAttributes;
    set KY0CM110.SY1STNBR[CYWIDX01] initialAttributes;
    set KY0CM110.SY2CLRID[CYWIDX01] initialAttributes;
    set KY0CM110.XDMCD[CYWIDX01] initialAttributes;
    set KY0CM110.XQACD[CYWIDX01] initialAttributes;
    set KY0CM110.XSDCD[CYWIDX01] initialAttributes;
    set KY0CM110.XSLCD[CYWIDX01] initialAttributes;
    set KY0CM110.XPGCD[CYWIDX01] initialAttributes;
    set KY0CM110.XUMCD[CYWIDX01] initialAttributes;
    set KY0CM110.XOWCD[CYWIDX01] initialAttributes;
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (KY0CM110.CAITEM > " ")
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140F";
    CYWREC.CYWMSGNO = 0002; /* <--- option required msg*/
    set KY0CM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    KY0CSB1(); /* <=== same key edits*/
    if (CYWREC.CYWSKYSW == "N")
      KY0CSF1(); /* <=== save key values*/
      KY0CST1(); /* <=== reset screen (empty)*/
      KY0CSH1(); /* <=== enter processing*/
      exit stack;
    end
    KY0CSR1(); /* <=== data entry edits*/
    if (CYWREC.CYWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    KY0CSU1(); /* <=== update database*/
    if (CYWREC.CYWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (CYWREC.CYWSEXSW == "Y")
        exit stack;
      end
      KY0CST1(); /* <=== reset screen (empty)*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    CYWREC.CYWMSGNO = 0020; /* <--- trans. complete msg*/
     /* ************************************************************/
     /* *** note: ky0csq1 not used re: able to re-edit immediately**/
     /* *** note: also succesful flow will stay in the 140 level****/
     /* ************************************************************/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application                 ****/
   /* *** regardless of previous errors                       ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KY0B";
    XSEXIT();
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "140G";
    CYWREC.CYWMSGNO = 0;
    KY0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  CYWREC.CYWERRSW = "Y";
  CYWREC.XXXLOCID = "140H";
  CYWREC.CYWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end KY0C140

// select dpick.vpksty01
Function KY0CS-SEL-VPKSTY01()
   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  io1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "KY0GS-CALL-IO1810";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CS-SEL-VPKSTY01

// edit all product flds
Function KY0CS1A()


   /* ************************************************************/
   /* *** if owner code in tbl & active: continue             ****/
   /* *** note: whse owner grp flag already saved             ****/
   /* ***       if flag = n, ow must = 00                     ****/
   /* *** note: owner tbl key = whse + owner                  ****/
   /* ************************************************************/

  if (CYWREC.XWHOWNGF == "Y")
    CYWREC.XWHCD = KY0CM110.XWHCD;
    CYWREC.CYWTBLCD = KY0CM110.XOWCD[CYWIDX01];
    if (CYWREC.CYWTBLKY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1AO";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0CM110.XOWCD[CYWIDX01] cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1AP";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0CM110.XOWCD[CYWIDX01] cursor, bold;
    end
  else
    if (KY0CM110.XOWCD[CYWIDX01] != "00")
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1AQ";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0CM110.XOWCD[CYWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if uom is not in table flag it as an error          ****/
   /* ************************************************************/

  if (KY0CM110.XUMCD[CYWIDX01] > " ")
    if (KY0CM110.XUMCD[CYWIDX01] in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "S1AA";
        CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
        set KY0CM110.XUMCD[CYWIDX01] cursor, bold;
      end
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1AB";
      CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
      set KY0CM110.XUMCD[CYWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if package type code in tbl & active: continue      ****/
   /* ************************************************************/

  if (KY0CM110.XPGCD[CYWIDX01] in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1AC";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0CM110.XPGCD[CYWIDX01] cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AD";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0CM110.XPGCD[CYWIDX01] cursor, bold;
  end

   /* ************************************************************/
   /* *** if sl class code in tbl & active: continue          ****/
   /* ************************************************************/

  if (KY0CM110.XSLCD[CYWIDX01] in XSLTBL.XSLCD)
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1AE";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0CM110.XSLCD[CYWIDX01] cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AF";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0CM110.XSLCD[CYWIDX01] cursor, bold;
  end

   /* ************************************************************/
   /* *** if spec diff code in tbl & active: continue         ****/
   /* ************************************************************/

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = KY0CM110.XGPCD[CYWIDX01];
  PC2REC.PC2INSEG = KY0CM110.XSDCD[CYWIDX01];
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1AG";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0CM110.XSDCD[CYWIDX01] cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AH";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0CM110.XSDCD[CYWIDX01] cursor, bold;
  end

   /* ************************************************************/
   /* *** if quality code in tbl & active: continue           ****/
   /* ************************************************************/

  if (KY0CM110.XQACD[CYWIDX01] in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1AI";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0CM110.XQACD[CYWIDX01] cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AJ";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0CM110.XQACD[CYWIDX01] cursor, bold;
  end

   /* ************************************************************/
   /* *** if dimension code in tbl & active: continue         ****/
   /* ************************************************************/

  if (KY0CM110.XDMCD[CYWIDX01] in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1AK";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0CM110.XDMCD[CYWIDX01] cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AL";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0CM110.XDMCD[CYWIDX01] cursor, bold;
  end

   /* ************************************************************/
   /* *** if gpc code in tbl & active: continue               ****/
   /* ************************************************************/

  if (KY0CM110.XGPCD[CYWIDX01] in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "S1AM";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0CM110.XGPCD[CYWIDX01] cursor, bold;
    end
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "S1AN";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0CM110.XGPCD[CYWIDX01] cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0CS1A

// key missing input edits
Function KY0CSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (KY0CM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SA1A";
    CYWREC.CYWMSGNO = 0009; /* <--- missing required field msg*/
    set KY0CM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSA1

// same key edits
Function KY0CSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (KY0CM110.XWHCD != KY0CW01.XWHCD)
    CYWREC.CYWSKYSW = "N";
    return;
  end

  CYWREC.CYWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSB1

// key field edits
Function KY0CSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (KY0CM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KY0CM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      CYWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
    else
      KY0CM110.XWHABRV = " ";
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SC1A";
      CYWREC.CYWMSGNO = 0010; /* <--- inactive msg*/
      set KY0CM110.XWHCD cursor, bold;
    end
  else
    KY0CM110.XWHABRV = " ";
    CYWREC.CYWERRSW = "Y";
    CYWREC.XXXLOCID = "SC1B";
    CYWREC.CYWMSGNO = 0011; /* <--- invalid value msg*/
    set KY0CM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSC1

// key relational edits
Function KY0CSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSD1

// key obtain table data
Function KY0CSE1()


   /* ************************************************************/
   /* *** make one time table accesses for data               ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed here                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain cycle count control data for this whse       ****/
   /* ************************************************************/

  CY6REC.XWHCD = KY0CM110.XWHCD;
  CY6REC.YDNCD = "04";

  TA1REC.TA1LOCAT[2] = "KY0CSE1 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSCY6S1(); /* <=== open cursor and fetch 1st row*/

  CYWREC.CYWIDX01 = 1;

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ************************************************************/
     /* *** move all whse data to screen                        ****/
     /* ************************************************************/
    KY0CM110.XGPCD[CYWIDX01] = CY6REC.XGPCD;
    KY0CM110.SY1STNBR[CYWIDX01] = CY6REC.SY1STNBR;
    KY0CM110.SY2CLRID[CYWIDX01] = CY6REC.SY2CLRID;
    KY0CM110.XDMCD[CYWIDX01] = CY6REC.XDMCD;
    KY0CM110.XQACD[CYWIDX01] = CY6REC.XQACD;
    KY0CM110.XSLCD[CYWIDX01] = CY6REC.XSLCD;
    KY0CM110.XPGCD[CYWIDX01] = CY6REC.XPGCD;
    KY0CM110.XUMCD[CYWIDX01] = CY6REC.XUMCD;
    KY0CM110.XOWCD[CYWIDX01] = CY6REC.XOWCD;
    KY0CM110.XSDCD[CYWIDX01] = CY6REC.PC2INSEG;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      return;
    end
    set KY0CM110.XWHCD cursor;
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.XXXLOCID = "SE1A";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SE1B";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;

  while (SQLCA.VAGen_SQLCODE == 0
   && CYWREC.CYWIDX01 <= 15)
    XSCY6F1();
    if (SQLCA.VAGen_SQLCODE == 0)
      KY0CM110.XGPCD[CYWIDX01] = CY6REC.XGPCD;
      KY0CM110.SY1STNBR[CYWIDX01] = CY6REC.SY1STNBR;
      KY0CM110.SY2CLRID[CYWIDX01] = CY6REC.SY2CLRID;
      KY0CM110.XDMCD[CYWIDX01] = CY6REC.XDMCD;
      KY0CM110.XQACD[CYWIDX01] = CY6REC.XQACD;
      KY0CM110.XSLCD[CYWIDX01] = CY6REC.XSLCD;
      KY0CM110.XPGCD[CYWIDX01] = CY6REC.XPGCD;
      KY0CM110.XUMCD[CYWIDX01] = CY6REC.XUMCD;
      KY0CM110.XOWCD[CYWIDX01] = CY6REC.XOWCD;
      KY0CM110.XSDCD[CYWIDX01] = CY6REC.PC2INSEG;
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        CYWREC.CYWIDX02 = CYWREC.CYWIDX01; /* <--- save last idx used*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          CYWREC.XXXLOCID = "SE1C";
          CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
        end
        CYWREC.CYWERRSW = "Y";
        CYWREC.XXXLOCID = "SE1D";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSE1

// userarea entry processing
Function KY0CSE9()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the CYXREC working storage layout                ****/
   /* *** otherwise, setup map default values                 ****/
   /* *** note: make sure data is from related map            ****/
   /* *** note: do not move blanks to causera                 ****/
   /* ************************************************************/

  CYXREC.CYXUSERA = COMMAREA.CAUSERA;

  if (CYXREC.CYXFRMAP == "KY0BM110")
     /* OR CYXREC.CYXFRMAP EQ 'ky0BM110';*/
     /* MOVE CYXREC.XGPCD TO ky0UM110.XGPCD*/
    return;
  else
     /* MOVE '02' TO ky0UM110.XGPCD*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSE9

// save current key value(s)
Function KY0CSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* *** and in cyxrec to pass to other appl.s               ****/
   /* ************************************************************/

  COMMAREA.XWHCD = KY0CM110.XWHCD;

  KY0CW01.XWHCD = KY0CM110.XWHCD;

  KY0CSX9(); /* <=== userarea exit processing*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSF1

// setup map key fields
Function KY0CSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  KY0CM110.XWHCD = KY0CW01.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSG1

// ENTER processing
Function KY0CSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  KY0CSA1(); /* <=== missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  KY0CSC1(); /* <=== field edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  KY0CSD1(); /* <=== relational edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  KY0CSE1(); /* <=== obtain table data*/

  if (CYWREC.CYWERRSW == "Y")
    KY0CSF1(); /* <=== save current key value(s)*/
    KY0CST1(); /* <=== reset screen (empty)*/
    return;
  else

     /* ************************************************************/
     /* *** setup default data on remaining fields              ****/
     /* ************************************************************/

    CYWREC.CYWIDX02 = CYWREC.CYWIDX01; /* <--- save idx to set cursor*/
    while (CYWREC.CYWIDX01 <= 15)
      KY0CM110.XGPCD[CYWIDX01] = "02 ";
      KY0CM110.SY2CLRID[CYWIDX01] = "00 ";
      KY0CM110.XSDCD[CYWIDX01] = "000";
      KY0CM110.XSLCD[CYWIDX01] = "000";
      KY0CM110.XPGCD[CYWIDX01] = "00";
      KY0CM110.XDMCD[CYWIDX01] = "00";
      KY0CM110.XQACD[CYWIDX01] = "01";
      KY0CM110.XOWCD[CYWIDX01] = "00";
      CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  KY0CSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSH1

// data missing fld edits
Function KY0CSN1()


   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* *** note: these not executed if delete                  ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSN1

// data fld edits
Function KY0CSO1()


   /* ************************************************************/
   /* *** verify style/color                                  ****/
   /* ************************************************************/

  PKNREC.XGPCD = KY0CM110.XGPCD[CYWIDX01];
  PKNREC.SY1STNBR = KY0CM110.SY1STNBR[CYWIDX01];
  PKNREC.SY2CLRID = KY0CM110.SY2CLRID[CYWIDX01];
  PKNREC.XDMCD = KY0CM110.XDMCD[CYWIDX01];

  TA1REC.TA1LOCAT[2] = "KY0CSO1 ";

  KY0CS-SEL-VPKSTY01(); /* <=== style/color (2) inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KY0CM110.XUMCD[CYWIDX01] == " ")
      KY0CM110.XUMCD[CYWIDX01] = "01";
    end
  else
    CYWREC.CYWERRSW = "Y";
    set KY0CM110.XGPCD[CYWIDX01] bold;
    set KY0CM110.SY1STNBR[CYWIDX01] cursor, bold;
    set KY0CM110.SY2CLRID[CYWIDX01] bold;
    set KY0CM110.XDMCD[CYWIDX01] bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      CYWREC.CYWERRSW = "Y";
      CYWREC.XXXLOCID = "SO1A";
      CYWREC.CYWMSGNO = 0056; /* <--- invalid style/color*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.CYWSKYSW = "N";
      CYWREC.XXXLOCID = "SO1B";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SO1C";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end KY0CSO1

// data entry edits
Function KY0CSR1()


   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  KY0CSN1(); /* <=== data missing input edits*/

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: do table lookups                 ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 15;

  while (CYWREC.CYWIDX01 >= 1)
    if (KY0CM110.SY1STNBR[CYWIDX01] > " ")
      KY0CS1A(); /* <=== data field edits*/
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
  end

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 15;

  while (CYWREC.CYWIDX01 >= 1)
    if (KY0CM110.SY1STNBR[CYWIDX01] > " ")
      KY0CSO1(); /* <=== data field edits*/
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 - 1;
  end

  if (CYWREC.CYWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSR1

// reset screen (empty)
Function KY0CST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set KY0CM110 empty; /* resets entire screen*/

  KY0CSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  KY0CM110.XXXMAPNM = CYWREC.XXXMAPNM;
  KY0CM110.XXXRVNBR = CYWREC.XXXRVNBR;
  KY0CM110.XXXTITLE = CYWREC.XXXTITLE;
  KY0CM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set KY0CW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CST1

// update database
Function KY0CSU1()



   /* ************************************************************/
   /* *** delete existing data in table if any exists         ****/
   /* *** (sqlcode of 100 is o.k.)                            ****/
   /* ************************************************************/

  CY6REC.XWHCD = KY0CM110.XWHCD;
  CY6REC.YDNCD = "04";

  TA1REC.TA1LOCAT[2] = "KY0CSU1 ";
   /* ** TA1REC.TA1MAP set during initialization ***/

  XSCY6D1();

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    CYWREC.CYWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -911)
      CYWREC.CYWSEXSW = "Y";
      CYWREC.XXXLOCID = "SU1A";
      CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    CYWREC.XXXLOCID = "SU1B";
    CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end



   /* ************************************************************/
   /* *** add data entered on the screen to the table.        ****/
   /* ************************************************************/

  CYWREC.CYWIDX01 = 1;
  while (CYWREC.CYWIDX01 <= 15)
    if (KY0CM110.SY1STNBR[CYWIDX01] > " ")
      CY6REC.XGPCD = KY0CM110.XGPCD[CYWIDX01];
      CY6REC.SY1STNBR = KY0CM110.SY1STNBR[CYWIDX01];
      CY6REC.SY2CLRID = KY0CM110.SY2CLRID[CYWIDX01];
      CY6REC.XDMCD = KY0CM110.XDMCD[CYWIDX01];
      CY6REC.XQACD = KY0CM110.XQACD[CYWIDX01];
      CY6REC.PC2INSEG = KY0CM110.XSDCD[CYWIDX01];
      CY6REC.XEGCD = "000";
      CY6REC.XSLCD = KY0CM110.XSLCD[CYWIDX01];
      CY6REC.XPGCD = KY0CM110.XPGCD[CYWIDX01];
      CY6REC.XUMCD = KY0CM110.XUMCD[CYWIDX01];
      CY6REC.XOWCD = KY0CM110.XOWCD[CYWIDX01];
      KY0CSO1();
      if (PKNREC.XBCCD == "08")
        CY6REC.XBCCD = PKNREC.XBCCD;
      else
        CY6REC.XBCCD = " ";
      end
      XSCY6A0();
      if (SQLCA.VAGen_SQLCODE == 0)
         /* ** next sentence ***/
      else
        CYWREC.CYWERRSW = "Y";
        if (SQLCA.VAGen_SQLCODE == -911)
          CYWREC.CYWSEXSW = "Y";
          CYWREC.XXXLOCID = "SU1A";
          CYWREC.CYWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        CYWREC.XXXLOCID = "SU1B";
        CYWREC.CYWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
    CYWREC.CYWIDX01 = CYWREC.CYWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSU1

// userarea exit processing
Function KY0CSX9()


   /* ************************************************************/
   /* *** move this map's name and key flds to cyxrec and     ****/
   /* *** then move cyxrec to the commarea' user area fld     ****/
   /* ************************************************************/

  CYXREC.CYXFRMAP = "KY0UM110";

   /* MOVE ky0UM110.XGPCD TO CYXREC.XGPCD*/

  COMMAREA.CAUSERA = CYXREC.CYXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end KY0CSX9

// add : req prod.s  : 0
Function XSCY6A0()


   /* ************************************************************/
   /* *** add unique row to:  requested products              ****/
   /* *** using the std module:  IO2450                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* *** note: non-unique rows - duplicates possible         ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  CY6REC.ZZZSDT = X2CREC.X2CCURDT;
  CY6REC.ZZZCHGDT = X2CREC.X2CCURDT;
  CY6REC.ZZZCHGTM = X3CREC.X3CCURST;

  CYVREC.CYVFNC = "A ";

  call "IO2450" (CYVREC, SQLCA, CY6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY6A0 ";
  TA1REC.TA1LOCAT[1] = "IO2450  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VRQPRD01";
  TA1REC.TA1TBLKE = CY6REC.CY6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY6A0

// close : req prod.s  : 1
Function XSCY6C1()


   /* ************************************************************/
   /* *** close select set of:  requested products            ****/
   /* *** using the std module:  IO2450                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "C1";

  call "IO2450" (CYVREC, SQLCA, CY6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSCY6C1 ";
  TA1REC.TA1LOCAT[1] = "IO2450  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VRQPRD01";
  TA1REC.TA1TBLKE = CY6REC.CY6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY6C1

// delete : req prod.s  : 1
Function XSCY6D1()


   /* ************************************************************/
   /* *** delete set of rows in:  requested products          ****/
   /* *** using the std module:  IO2450                       ****/
   /* *** note: use cyxrec to pass function & date ranges     ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "D ";

  call "IO2450" (CYVREC, SQLCA, CY6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY6D1 ";
  TA1REC.TA1LOCAT[1] = "IO2450  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VRQPRD01";
  TA1REC.TA1TBLKE = CY6REC.CY6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY6D1

// fetch : req prod.s  : 1
Function XSCY6F1()


   /* ************************************************************/
   /* *** fetch next row from:  requested products            ****/
   /* *** using the std module:  IO2450                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "N1";

  call "IO2450" (CYVREC, SQLCA, CY6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSCY6C1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSCY6F1 ";
  TA1REC.TA1LOCAT[1] = "IO2450  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VRQPRD01";
  TA1REC.TA1TBLKE = CY6REC.CY6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY6F1

// setinq : req prod.s  : 1
Function XSCY6S1()


   /* ************************************************************/
   /* *** select set of rows from:  requested products        ****/
   /* *** using the std module:  IO2450                       ****/
   /* *** note: use cyvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* ************************************************************/

  CYVREC.CYVFNC = "S1";

  call "IO2450" (CYVREC, SQLCA, CY6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSCY6S1 ";
    TA1REC.TA1LOCAT[1] = "IO2450  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DCYCLE  ";
    TA1REC.TA1TBLVU = "VRQPRD01";
    TA1REC.TA1TBLKE = CY6REC.CY6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSCY6F1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSCY6S1

//*** RECORD=KY0CW01 ****
// ************************************************************
// 
//           CYCLE COUNT DOCUMENT REQUEST BY PRODUCT
//           =======================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-06-88  G. Amen      created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record KY0CW01 type basicRecord
  10 XWHCD XWHCD ; 
end // end KY0CW01

